{"instance_id": "django__django-12419", "repo": "django/django", "version": "3.1", "environment_setup_commit": "0668164b4ac93a5be79f5b87fae83c657124d9ab", "patch_list": ["diff --git a/django/conf/global_settings.py b/django/conf/global_settings.py\n--- a/django/conf/global_settings.py\n+++ b/django/conf/global_settings.py\n@@ -637,6 +637,6 @@ def gettext_noop(s):\n SECURE_HSTS_PRELOAD = False\n SECURE_HSTS_SECONDS = 0\n SECURE_REDIRECT_EXEMPT = []\n-SECURE_REFERRER_POLICY = None\n+SECURE_REFERRER_POLICY = 'same-origin'\n SECURE_SSL_HOST = None\n SECURE_SSL_REDIRECT = False\n", "diff --git a/dev/null b/tests/test_coverup_django__django-12419.py\nnew file mode 100644\nindex e69de29..15d91dc 100644\n--- /dev/null\n+++ b/tests/test_coverup_django__django-12419.py\n@@ -0,0 +1,22 @@\n+from django.test import SimpleTestCase, RequestFactory\n+from django.conf import settings\n+from django.http import HttpResponse\n+from django.middleware.security import SecurityMiddleware\n+\n+class SecurityMiddlewareReferrerPolicyTest(SimpleTestCase):\n+    def setUp(self):\n+        # Ensure SECURE_REFERRER_POLICY is not set to test the default behavior\n+        settings.SECURE_REFERRER_POLICY = None\n+        self.factory = RequestFactory()\n+        self.middleware = SecurityMiddleware()\n+\n+    def test_default_referrer_policy(self):\n+        # Create a mock request and response\n+        request = self.factory.get('/')\n+        response = HttpResponse()\n+\n+        # Process the response through the middleware\n+        response = self.middleware.process_response(request, response)\n+\n+        # Assert that the Referrer-Policy header is set to \"same-origin\"\n+        self.assertEqual(response.get('Referrer-Policy'), 'same-origin')\n"], "arch": "x86_64", "base_commit": "7fa1a93c6c8109010a6ff3f604fda83b604e0e97", "test_directives": ["test_coverup_django__django-12419"], "coverage_files": ["django/conf/global_settings.py"], "env_name": "testbed", "run_id": "assertflip", "patch_id": "pred_post__AssertFlip", "timeout": 1800, "rm_image": false, "force_rebuild": false, "exec_mode": "unit_test", "reproduction_script_name": null, "compute_coverage": true, "install": {"python": "3.6", "packages": "requirements.txt", "install": "python -m pip install -e .", "eval_commands": ["sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen && locale-gen", "export LANG=en_US.UTF-8", "export LANGUAGE=en_US:en", "export LC_ALL=en_US.UTF-8"]}, "cache_level": "instance", "test_command": "python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/conf/global_settings\\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-12419", "req_install_commands": ["conda create -n testbed python=3.6 -y", "cat <<'EOF_59812759871' > $HOME/requirements.txt\nasgiref >= 3.2\nargon2-cffi >= 16.1.0\nbcrypt\ndocutils\ngeoip2\njinja2 >= 2.9.2\nnumpy\nPillow >= 6.2.0\npylibmc; sys.platform != 'win32'\npython-memcached >= 1.59\npytz\npywatchman; sys.platform != 'win32'\nPyYAML\nselenium\nsqlparse >= 0.2.2\ntblib >= 1.5.0\n\nEOF_59812759871", "conda activate testbed && python -m pip install -r $HOME/requirements.txt", "rm $HOME/requirements.txt"]}