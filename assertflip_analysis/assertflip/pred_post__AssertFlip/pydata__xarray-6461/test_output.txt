+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\''
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/esmf-activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/esmpy-activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/gdal-activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/geotiff-activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/libxml2_activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/proj4-activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/udunits2-activate.sh"'
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\''
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/esmf-activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/esmpy-activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/gdal-activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/geotiff-activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/libxml2_activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/proj4-activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/udunits2-activate.sh"'
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ . /opt/miniconda3/envs/testbed/etc/conda/activate.d/esmf-activate.sh
+++ '[' -n '' ']'
+++ '[' -f /opt/miniconda3/envs/testbed/lib/esmf.mk ']'
+++ export ESMFMKFILE=/opt/miniconda3/envs/testbed/lib/esmf.mk
+++ ESMFMKFILE=/opt/miniconda3/envs/testbed/lib/esmf.mk
++ . /opt/miniconda3/envs/testbed/etc/conda/activate.d/esmpy-activate.sh
+++ '[' -n /opt/miniconda3/envs/testbed/lib/esmf.mk ']'
+++ export _CONDA_SET_ESMFMKFILE=/opt/miniconda3/envs/testbed/lib/esmf.mk
+++ _CONDA_SET_ESMFMKFILE=/opt/miniconda3/envs/testbed/lib/esmf.mk
+++ '[' -f /opt/miniconda3/envs/testbed/lib/esmf.mk ']'
+++ export ESMFMKFILE=/opt/miniconda3/envs/testbed/lib/esmf.mk
+++ ESMFMKFILE=/opt/miniconda3/envs/testbed/lib/esmf.mk
++ . /opt/miniconda3/envs/testbed/etc/conda/activate.d/gdal-activate.sh
+++ '[' -n '' ']'
+++ '[' -n '' ']'
+++ '[' -d /opt/miniconda3/envs/testbed/share/gdal ']'
+++ export GDAL_DATA=/opt/miniconda3/envs/testbed/share/gdal
+++ GDAL_DATA=/opt/miniconda3/envs/testbed/share/gdal
+++ export GDAL_DRIVER_PATH=/opt/miniconda3/envs/testbed/lib/gdalplugins
+++ GDAL_DRIVER_PATH=/opt/miniconda3/envs/testbed/lib/gdalplugins
+++ '[' '!' -d /opt/miniconda3/envs/testbed/lib/gdalplugins ']'
+++ export CPL_ZIP_ENCODING=UTF-8
+++ CPL_ZIP_ENCODING=UTF-8
+++ '[' -n '5.1.16(1)-release' ']'
+++ '[' -f /opt/miniconda3/envs/testbed/share/bash-completion/completions/gdalinfo ']'
+++ source /opt/miniconda3/envs/testbed/share/bash-completion/completions/gdalinfo
++++ function_exists _get_comp_words_by_ref
++++ declare -f -F _get_comp_words_by_ref
++++ return 1
++++ return 0
++ . /opt/miniconda3/envs/testbed/etc/conda/activate.d/geotiff-activate.sh
+++ '[' -n '' ']'
+++ '[' -d /opt/miniconda3/envs/testbed/share/epsg_csv ']'
+++ '[' -d /opt/miniconda3/envs/testbed/Library/share/epsg_csv ']'
++ . /opt/miniconda3/envs/testbed/etc/conda/activate.d/libxml2_activate.sh
+++ test -n ''
+++ xml_catalog_files_libxml2=
+++ XML_CATALOG_FILES=
+++ conda_catalog_files=
+++ ifs_libxml2=' 	
'
+++ IFS=' '
+++ rem=/opt/miniconda3/envs/testbed
+++ for pre in ${rem}
+++ test '' = /opt/miniconda3/envs/testbed
+++ conda_catalog_files=/opt/miniconda3/envs/testbed
+++ rem=
+++ IFS=' 	
'
+++ conda_catalog_files='file:///opt/miniconda3/envs/testbed/etc/xml/catalog file:///etc/xml/catalog'
+++ export 'XML_CATALOG_FILES=file:///opt/miniconda3/envs/testbed/etc/xml/catalog file:///etc/xml/catalog'
+++ XML_CATALOG_FILES='file:///opt/miniconda3/envs/testbed/etc/xml/catalog file:///etc/xml/catalog'
+++ unset conda_catalog_files ifs_libxml2 rem
++ . /opt/miniconda3/envs/testbed/etc/conda/activate.d/proj4-activate.sh
+++ '[' -n '' ']'
+++ '[' -d /opt/miniconda3/envs/testbed/share/proj ']'
+++ export PROJ_DATA=/opt/miniconda3/envs/testbed/share/proj
+++ PROJ_DATA=/opt/miniconda3/envs/testbed/share/proj
+++ '[' -f /opt/miniconda3/envs/testbed/share/proj/copyright_and_licenses.csv ']'
+++ export PROJ_NETWORK=ON
+++ PROJ_NETWORK=ON
++ . /opt/miniconda3/envs/testbed/etc/conda/activate.d/udunits2-activate.sh
+++ '[' -n '' ']'
+++ '[' -d /opt/miniconda3/envs/testbed/share/udunits ']'
+++ export UDUNITS2_XML_PATH=/opt/miniconda3/envs/testbed/share/udunits/udunits2.xml
+++ UDUNITS2_XML_PATH=/opt/miniconda3/envs/testbed/share/udunits/udunits2.xml
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD 851dadeb0338403e5021c3fbe80cbc9127ee672d
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
nothing to commit, working tree clean
+ git show
commit 851dadeb0338403e5021c3fbe80cbc9127ee672d
Author: Joseph K Aicher <4666753+jaicher@users.noreply.github.com>
Date:   Sat Apr 9 16:27:39 2022 -0400

    No chunk warning if empty (#6402)
    
    * Test with warning when loading Zarr with empty dimension with chunks
    
    If an array has zero size (due to an empty dimension), it is saved as a
    single chunk regardless of Dask chunking on other dimensions (#5742).
    If the `chunks` parameter is provided for other dimensions when loading
    the Zarr file, xarray gives a warning about potentially degraded
    performance from splitting the single chunk.
    
    When the array has zero size, this warning seems inappropriate because:
    
    - performance degradation on an empty array should be negligible.
    - we don't always know if one of the dimensions is empty until loading.
      I would use the `chunks` parameter for dimensions that have known
      chunksize (to specify some multiple of that chunksize), but this only
      works without warning when the array is nonempty.
    
    * Don't check chunk compatibility if variable is empty/has no size
    
    * Docs describing removal of warning for `chunks` with empty array
    
    Co-authored-by: Deepak Cherian <dcherian@users.noreply.github.com>
    Co-authored-by: Maximilian Roos <5635139+max-sixty@users.noreply.github.com>

diff --git a/doc/whats-new.rst b/doc/whats-new.rst
index 74120f06..c84a0549 100644
--- a/doc/whats-new.rst
+++ b/doc/whats-new.rst
@@ -62,8 +62,10 @@ Bug fixes
   coordinates. See the corresponding pull-request on GitHub for more details. (:pull:`5692`).
   By `Benoît Bovy <https://github.com/benbovy>`_.
 - Fixed "unhashable type" error trying to read NetCDF file with variable having its 'units'
-  attribute not ``str`` (e.g. ``numpy.ndarray``) (:issue:`6368`).
-  By `Oleh Khoma <https://github.com/okhoma>`_.
+  attribute not ``str`` (e.g. ``numpy.ndarray``) (:issue:`6368`). By `Oleh Khoma <https://github.com/okhoma>`_.
+- Omit warning about specified dask chunks separating chunks on disk when the
+  underlying array is empty (e.g., because of an empty dimension) (:issue:`6401`).
+  By `Joseph K Aicher <https://github.com/jaicher>`_.
 - Fixed the poor html repr performance on large multi-indexes (:pull:`6400`).
   By `Benoît Bovy <https://github.com/benbovy>`_.
 - Allow fancy indexing of duck dask arrays along multiple dimensions. (:pull:`6414`)
diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py
index 0c3a5938..6ff7a1f7 100644
--- a/xarray/core/dataset.py
+++ b/xarray/core/dataset.py
@@ -199,30 +199,34 @@ def _get_chunk(var, chunks):
         chunk_shape, shape=shape, dtype=var.dtype, previous_chunks=preferred_chunk_shape
     )
 
-    # Warn where requested chunks break preferred chunks.
-    for dim, size, chunk_sizes in zip(dims, shape, chunk_shape):
-        try:
-            preferred_chunk_sizes = preferred_chunks[dim]
-        except KeyError:
-            continue
-        # Determine the stop indices of the preferred chunks, but omit the last stop
-        # (equal to the dim size).  In particular, assume that when a sequence expresses
-        # the preferred chunks, the sequence sums to the size.
-        preferred_stops = (
-            range(preferred_chunk_sizes, size, preferred_chunk_sizes)
-            if isinstance(preferred_chunk_sizes, Number)
-            else itertools.accumulate(preferred_chunk_sizes[:-1])
-        )
-        # Gather any stop indices of the specified chunks that are not a stop index of a
-        # preferred chunk.  Again, omit the last stop, assuming that it equals the dim
-        # size.
-        breaks = set(itertools.accumulate(chunk_sizes[:-1])).difference(preferred_stops)
-        if breaks:
-            warnings.warn(
-                "The specified Dask chunks separate the stored chunks along dimension "
-                f'"{dim}" starting at index {min(breaks)}. This could degrade '
-                "performance. Instead, consider rechunking after loading."
+    # Warn where requested chunks break preferred chunks, provided that the variable
+    # contains data.
+    if var.size:
+        for dim, size, chunk_sizes in zip(dims, shape, chunk_shape):
+            try:
+                preferred_chunk_sizes = preferred_chunks[dim]
+            except KeyError:
+                continue
+            # Determine the stop indices of the preferred chunks, but omit the last stop
+            # (equal to the dim size).  In particular, assume that when a sequence
+            # expresses the preferred chunks, the sequence sums to the size.
+            preferred_stops = (
+                range(preferred_chunk_sizes, size, preferred_chunk_sizes)
+                if isinstance(preferred_chunk_sizes, Number)
+                else itertools.accumulate(preferred_chunk_sizes[:-1])
             )
+            # Gather any stop indices of the specified chunks that are not a stop index
+            # of a preferred chunk.  Again, omit the last stop, assuming that it equals
+            # the dim size.
+            breaks = set(itertools.accumulate(chunk_sizes[:-1])).difference(
+                preferred_stops
+            )
+            if breaks:
+                warnings.warn(
+                    "The specified Dask chunks separate the stored chunks along "
+                    f'dimension "{dim}" starting at index {min(breaks)}. This could '
+                    "degrade performance. Instead, consider rechunking after loading."
+                )
 
     return dict(zip(dims, chunk_shape))
 
diff --git a/xarray/tests/test_backends.py b/xarray/tests/test_backends.py
index 94ffe619..6f6bb041 100644
--- a/xarray/tests/test_backends.py
+++ b/xarray/tests/test_backends.py
@@ -2210,6 +2210,13 @@ class ZarrBase(CFEncodedBase):
         with self.roundtrip(ds) as ds_reload:
             assert_identical(ds, ds_reload)
 
+    @requires_dask
+    def test_no_warning_from_open_emptydim_with_chunks(self):
+        ds = Dataset({"x": (("a", "b"), np.empty((5, 0)))}).chunk({"a": 1})
+        with assert_no_warnings():
+            with self.roundtrip(ds, open_kwargs=dict(chunks={"a": 1})) as ds_reload:
+                assert_identical(ds, ds_reload)
+
     @pytest.mark.parametrize("consolidated", [False, True])
     @pytest.mark.parametrize("compute", [False, True])
     @pytest.mark.parametrize("use_dask", [False, True])
+ git diff 851dadeb0338403e5021c3fbe80cbc9127ee672d
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='. "/opt/miniconda3/envs/testbed/etc/conda/deactivate.d/udunits2-deactivate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/deactivate.d/proj4-deactivate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/deactivate.d/libxml2_deactivate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/deactivate.d/geotiff-deactivate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/deactivate.d/gdal-deactivate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/deactivate.d/esmpy-deactivate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/deactivate.d/esmf-deactivate.sh"
PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval '. "/opt/miniconda3/envs/testbed/etc/conda/deactivate.d/udunits2-deactivate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/deactivate.d/proj4-deactivate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/deactivate.d/libxml2_deactivate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/deactivate.d/geotiff-deactivate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/deactivate.d/gdal-deactivate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/deactivate.d/esmpy-deactivate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/deactivate.d/esmf-deactivate.sh"
PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ . /opt/miniconda3/envs/testbed/etc/conda/deactivate.d/udunits2-deactivate.sh
++++ unset UDUNITS2_XML_PATH
++++ '[' -n '' ']'
+++ . /opt/miniconda3/envs/testbed/etc/conda/deactivate.d/proj4-deactivate.sh
++++ unset PROJ_DATA
++++ unset PROJ_NETWORK
++++ '[' -n '' ']'
+++ . /opt/miniconda3/envs/testbed/etc/conda/deactivate.d/libxml2_deactivate.sh
++++ test -n ''
++++ unset XML_CATALOG_FILES
++++ unset xml_catalog_files_libxml2
+++ . /opt/miniconda3/envs/testbed/etc/conda/deactivate.d/geotiff-deactivate.sh
++++ unset GEOTIFF_CSV
++++ '[' -n '' ']'
+++ . /opt/miniconda3/envs/testbed/etc/conda/deactivate.d/gdal-deactivate.sh
++++ unset GDAL_DATA
++++ '[' -n '' ']'
++++ unset GDAL_DRIVER_PATH
++++ '[' -n '' ']'
++++ unset CPL_ZIP_ENCODING
+++ . /opt/miniconda3/envs/testbed/etc/conda/deactivate.d/esmpy-deactivate.sh
++++ unset ESMFMKFILE
++++ '[' -n /opt/miniconda3/envs/testbed/lib/esmf.mk ']'
++++ export ESMFMKFILE=/opt/miniconda3/envs/testbed/lib/esmf.mk
++++ ESMFMKFILE=/opt/miniconda3/envs/testbed/lib/esmf.mk
++++ unset _CONDA_SET_ESMFMKFILE
+++ . /opt/miniconda3/envs/testbed/etc/conda/deactivate.d/esmf-deactivate.sh
++++ unset ESMFMKFILE
++++ '[' -n '' ']'
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\''
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/esmf-activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/esmpy-activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/gdal-activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/geotiff-activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/libxml2_activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/proj4-activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/udunits2-activate.sh"'
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\''
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/esmf-activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/esmpy-activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/gdal-activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/geotiff-activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/libxml2_activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/proj4-activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/udunits2-activate.sh"'
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ . /opt/miniconda3/envs/testbed/etc/conda/activate.d/esmf-activate.sh
+++ '[' -n '' ']'
+++ '[' -f /opt/miniconda3/envs/testbed/lib/esmf.mk ']'
+++ export ESMFMKFILE=/opt/miniconda3/envs/testbed/lib/esmf.mk
+++ ESMFMKFILE=/opt/miniconda3/envs/testbed/lib/esmf.mk
++ . /opt/miniconda3/envs/testbed/etc/conda/activate.d/esmpy-activate.sh
+++ '[' -n /opt/miniconda3/envs/testbed/lib/esmf.mk ']'
+++ export _CONDA_SET_ESMFMKFILE=/opt/miniconda3/envs/testbed/lib/esmf.mk
+++ _CONDA_SET_ESMFMKFILE=/opt/miniconda3/envs/testbed/lib/esmf.mk
+++ '[' -f /opt/miniconda3/envs/testbed/lib/esmf.mk ']'
+++ export ESMFMKFILE=/opt/miniconda3/envs/testbed/lib/esmf.mk
+++ ESMFMKFILE=/opt/miniconda3/envs/testbed/lib/esmf.mk
++ . /opt/miniconda3/envs/testbed/etc/conda/activate.d/gdal-activate.sh
+++ '[' -n '' ']'
+++ '[' -n '' ']'
+++ '[' -d /opt/miniconda3/envs/testbed/share/gdal ']'
+++ export GDAL_DATA=/opt/miniconda3/envs/testbed/share/gdal
+++ GDAL_DATA=/opt/miniconda3/envs/testbed/share/gdal
+++ export GDAL_DRIVER_PATH=/opt/miniconda3/envs/testbed/lib/gdalplugins
+++ GDAL_DRIVER_PATH=/opt/miniconda3/envs/testbed/lib/gdalplugins
+++ '[' '!' -d /opt/miniconda3/envs/testbed/lib/gdalplugins ']'
+++ export CPL_ZIP_ENCODING=UTF-8
+++ CPL_ZIP_ENCODING=UTF-8
+++ '[' -n '5.1.16(1)-release' ']'
+++ '[' -f /opt/miniconda3/envs/testbed/share/bash-completion/completions/gdalinfo ']'
+++ source /opt/miniconda3/envs/testbed/share/bash-completion/completions/gdalinfo
++++ function_exists _get_comp_words_by_ref
++++ declare -f -F _get_comp_words_by_ref
++++ return 1
++++ return 0
++ . /opt/miniconda3/envs/testbed/etc/conda/activate.d/geotiff-activate.sh
+++ '[' -n '' ']'
+++ '[' -d /opt/miniconda3/envs/testbed/share/epsg_csv ']'
+++ '[' -d /opt/miniconda3/envs/testbed/Library/share/epsg_csv ']'
++ . /opt/miniconda3/envs/testbed/etc/conda/activate.d/libxml2_activate.sh
+++ test -n ''
+++ xml_catalog_files_libxml2=
+++ XML_CATALOG_FILES=
+++ conda_catalog_files=
+++ ifs_libxml2=' 	
'
+++ IFS=' '
+++ rem=/opt/miniconda3/envs/testbed
+++ for pre in ${rem}
+++ test '' = /opt/miniconda3/envs/testbed
+++ conda_catalog_files=/opt/miniconda3/envs/testbed
+++ rem=
+++ IFS=' 	
'
+++ conda_catalog_files='file:///opt/miniconda3/envs/testbed/etc/xml/catalog file:///etc/xml/catalog'
+++ export 'XML_CATALOG_FILES=file:///opt/miniconda3/envs/testbed/etc/xml/catalog file:///etc/xml/catalog'
+++ XML_CATALOG_FILES='file:///opt/miniconda3/envs/testbed/etc/xml/catalog file:///etc/xml/catalog'
+++ unset conda_catalog_files ifs_libxml2 rem
++ . /opt/miniconda3/envs/testbed/etc/conda/activate.d/proj4-activate.sh
+++ '[' -n '' ']'
+++ '[' -d /opt/miniconda3/envs/testbed/share/proj ']'
+++ export PROJ_DATA=/opt/miniconda3/envs/testbed/share/proj
+++ PROJ_DATA=/opt/miniconda3/envs/testbed/share/proj
+++ '[' -f /opt/miniconda3/envs/testbed/share/proj/copyright_and_licenses.csv ']'
+++ export PROJ_NETWORK=ON
+++ PROJ_NETWORK=ON
++ . /opt/miniconda3/envs/testbed/etc/conda/activate.d/udunits2-activate.sh
+++ '[' -n '' ']'
+++ '[' -d /opt/miniconda3/envs/testbed/share/udunits ']'
+++ export UDUNITS2_XML_PATH=/opt/miniconda3/envs/testbed/share/udunits/udunits2.xml
+++ UDUNITS2_XML_PATH=/opt/miniconda3/envs/testbed/share/udunits/udunits2.xml
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Checking if build backend supports build_editable: started
  Checking if build backend supports build_editable: finished with status 'done'
  Getting requirements to build editable: started
  Getting requirements to build editable: finished with status 'done'
  Preparing editable metadata (pyproject.toml): started
  Preparing editable metadata (pyproject.toml): finished with status 'done'
Requirement already satisfied: numpy>=1.18 in /opt/miniconda3/envs/testbed/lib/python3.10/site-packages (from xarray==2022.3.1.dev43+g851dadeb0) (1.23.0)
Requirement already satisfied: pandas>=1.1 in /opt/miniconda3/envs/testbed/lib/python3.10/site-packages (from xarray==2022.3.1.dev43+g851dadeb0) (1.5.3)
Requirement already satisfied: packaging>=20.0 in /opt/miniconda3/envs/testbed/lib/python3.10/site-packages (from xarray==2022.3.1.dev43+g851dadeb0) (23.1)
Requirement already satisfied: python-dateutil>=2.8.1 in /opt/miniconda3/envs/testbed/lib/python3.10/site-packages (from pandas>=1.1->xarray==2022.3.1.dev43+g851dadeb0) (2.8.2)
Requirement already satisfied: pytz>=2020.1 in /opt/miniconda3/envs/testbed/lib/python3.10/site-packages (from pandas>=1.1->xarray==2022.3.1.dev43+g851dadeb0) (2023.3)
Requirement already satisfied: six>=1.5 in /opt/miniconda3/envs/testbed/lib/python3.10/site-packages (from python-dateutil>=2.8.1->pandas>=1.1->xarray==2022.3.1.dev43+g851dadeb0) (1.16.0)
Building wheels for collected packages: xarray
  Building editable for xarray (pyproject.toml): started
  Building editable for xarray (pyproject.toml): finished with status 'done'
  Created wheel for xarray: filename=xarray-2022.3.1.dev43+g851dadeb0-0.editable-py3-none-any.whl size=8999 sha256=508d16887c1a2ec3dca087101e43beb709131a064f09a3f5eadab706788a7932
  Stored in directory: /tmp/pip-ephem-wheel-cache-scipqlbf/wheels/0d/a6/cb/465a7b303d624cc531250fa27c75d038ddc29430bdb6ba7c9f
Successfully built xarray
Installing collected packages: xarray
  Attempting uninstall: xarray
    Found existing installation: xarray 2022.3.1.dev43+g851dadeb0
    Uninstalling xarray-2022.3.1.dev43+g851dadeb0:
      Successfully uninstalled xarray-2022.3.1.dev43+g851dadeb0
Successfully installed xarray-2022.3.1.dev43+g851dadeb0
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git apply -v -
Checking patch xarray/core/computation.py...
Applied patch xarray/core/computation.py cleanly.
+ git apply -v -
<stdin>:13: trailing whitespace.
    
<stdin>:17: trailing whitespace.
    
Checking patch xarray/tests/test_coverup_pydata__xarray-6461.py...
Applied patch xarray/tests/test_coverup_pydata__xarray-6461.py cleanly.
warning: 2 lines add whitespace errors.
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(xarray/core/computation\.py)' -m pytest --no-header -rA -p no:cacheprovider xarray/tests/test_coverup_pydata__xarray-6461.py
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(xarray/core/computation\\.py)']
============================= test session starts ==============================
collected 1 item

xarray/tests/test_coverup_pydata__xarray-6461.py .                       [100%]

==================================== PASSES ====================================
____________________ test_where_with_scalar_and_keep_attrs _____________________
----------------------------- Captured stdout call -----------------------------
3.47 /testbed/xarray/core/computation.py(1826):     if keep_attrs is None:
3.47 /testbed/xarray/core/computation.py(1828):     if keep_attrs is True:
3.47 /testbed/xarray/core/computation.py(1831):         keep_attrs = lambda attrs, context: getattr(x, "attrs", {})
3.47 /testbed/xarray/core/computation.py(1834):     return apply_ufunc(
3.47 /testbed/xarray/core/computation.py(1835):         duck_array_ops.where,
3.47 /testbed/xarray/core/computation.py(1836):         cond,
3.47 /testbed/xarray/core/computation.py(1837):         x,
3.47 /testbed/xarray/core/computation.py(1838):         y,
3.47 /testbed/xarray/core/computation.py(1839):         join="exact",
3.47 /testbed/xarray/core/computation.py(1840):         dataset_join="exact",
3.47 /testbed/xarray/core/computation.py(1841):         dask="allowed",
3.47 /testbed/xarray/core/computation.py(1842):         keep_attrs=keep_attrs,
3.47 /testbed/xarray/core/computation.py(1834):     return apply_ufunc(
3.47 /testbed/xarray/core/computation.py(1070):     from .dataarray import DataArray
3.47 /testbed/xarray/core/computation.py(1071):     from .groupby import GroupBy
3.47 /testbed/xarray/core/computation.py(1072):     from .variable import Variable
3.47 /testbed/xarray/core/computation.py(1074):     if input_core_dims is None:
3.47 /testbed/xarray/core/computation.py(1075):         input_core_dims = ((),) * (len(args))
3.47 /testbed/xarray/core/computation.py(1084):     if kwargs is None:
3.47 /testbed/xarray/core/computation.py(1085):         kwargs = {}
3.47 /testbed/xarray/core/computation.py(1087):     signature = _UFuncSignature(input_core_dims, output_core_dims)
3.47 /testbed/xarray/core/computation.py(79):         self.input_core_dims = tuple(tuple(a) for a in input_core_dims)
3.47 /testbed/xarray/core/computation.py(79):         self.input_core_dims = tuple(tuple(a) for a in input_core_dims)
3.47 /testbed/xarray/core/computation.py(79):         self.input_core_dims = tuple(tuple(a) for a in input_core_dims)
3.47 /testbed/xarray/core/computation.py(79):         self.input_core_dims = tuple(tuple(a) for a in input_core_dims)
3.47 /testbed/xarray/core/computation.py(79):         self.input_core_dims = tuple(tuple(a) for a in input_core_dims)
3.47 /testbed/xarray/core/computation.py(80):         self.output_core_dims = tuple(tuple(a) for a in output_core_dims)
3.47 /testbed/xarray/core/computation.py(80):         self.output_core_dims = tuple(tuple(a) for a in output_core_dims)
3.47 /testbed/xarray/core/computation.py(80):         self.output_core_dims = tuple(tuple(a) for a in output_core_dims)
3.47 /testbed/xarray/core/computation.py(81):         self._all_input_core_dims = None
3.47 /testbed/xarray/core/computation.py(82):         self._all_output_core_dims = None
3.47 /testbed/xarray/core/computation.py(83):         self._all_core_dims = None
3.47 /testbed/xarray/core/computation.py(1089):     if exclude_dims:
3.47 /testbed/xarray/core/computation.py(1102):     if dask == "parallelized":
3.47 /testbed/xarray/core/computation.py(1126):     if kwargs:
3.47 /testbed/xarray/core/computation.py(1129):     if keep_attrs is None:
3.47 /testbed/xarray/core/computation.py(1132):     if isinstance(keep_attrs, bool):
3.47 /testbed/xarray/core/computation.py(1135):     variables_vfunc = functools.partial(
3.47 /testbed/xarray/core/computation.py(1136):         apply_variable_ufunc,
3.47 /testbed/xarray/core/computation.py(1137):         func,
3.47 /testbed/xarray/core/computation.py(1138):         signature=signature,
3.47 /testbed/xarray/core/computation.py(1139):         exclude_dims=exclude_dims,
3.47 /testbed/xarray/core/computation.py(1140):         keep_attrs=keep_attrs,
3.47 /testbed/xarray/core/computation.py(1141):         dask=dask,
3.47 /testbed/xarray/core/computation.py(1142):         vectorize=vectorize,
3.47 /testbed/xarray/core/computation.py(1143):         output_dtypes=output_dtypes,
3.47 /testbed/xarray/core/computation.py(1144):         dask_gufunc_kwargs=dask_gufunc_kwargs,
3.47 /testbed/xarray/core/computation.py(1135):     variables_vfunc = functools.partial(
3.47 /testbed/xarray/core/computation.py(1148):     if any(isinstance(a, GroupBy) for a in args):
3.47 /testbed/xarray/core/computation.py(1148):     if any(isinstance(a, GroupBy) for a in args):
3.47 /testbed/xarray/core/computation.py(1148):     if any(isinstance(a, GroupBy) for a in args):
3.47 /testbed/xarray/core/computation.py(1148):     if any(isinstance(a, GroupBy) for a in args):
3.47 /testbed/xarray/core/computation.py(1148):     if any(isinstance(a, GroupBy) for a in args):
3.47 /testbed/xarray/core/computation.py(1166):     elif any(is_dict_like(a) for a in args):
3.47 /testbed/xarray/core/computation.py(1166):     elif any(is_dict_like(a) for a in args):
3.47 /testbed/xarray/core/computation.py(1166):     elif any(is_dict_like(a) for a in args):
3.47 /testbed/xarray/core/computation.py(1166):     elif any(is_dict_like(a) for a in args):
3.47 /testbed/xarray/core/computation.py(1166):     elif any(is_dict_like(a) for a in args):
3.47 /testbed/xarray/core/computation.py(1178):     elif any(isinstance(a, DataArray) for a in args):
3.47 /testbed/xarray/core/computation.py(1178):     elif any(isinstance(a, DataArray) for a in args):
3.47 /testbed/xarray/core/computation.py(1179):         return apply_dataarray_vfunc(
3.47 /testbed/xarray/core/computation.py(1180):             variables_vfunc,
3.47 /testbed/xarray/core/computation.py(1179):         return apply_dataarray_vfunc(
3.47 /testbed/xarray/core/computation.py(1181):             *args,
3.47 /testbed/xarray/core/computation.py(1179):         return apply_dataarray_vfunc(
3.47 /testbed/xarray/core/computation.py(1182):             signature=signature,
3.47 /testbed/xarray/core/computation.py(1183):             join=join,
3.47 /testbed/xarray/core/computation.py(1184):             exclude_dims=exclude_dims,
3.47 /testbed/xarray/core/computation.py(1185):             keep_attrs=keep_attrs,
3.47 /testbed/xarray/core/computation.py(1179):         return apply_dataarray_vfunc(
3.47 /testbed/xarray/core/computation.py(274):     from .dataarray import DataArray
3.47 /testbed/xarray/core/computation.py(276):     if len(args) > 1:
3.47 /testbed/xarray/core/computation.py(277):         args = deep_align(
3.47 /testbed/xarray/core/computation.py(278):             args, join=join, copy=False, exclude=exclude_dims, raise_on_invalid=False
3.47 /testbed/xarray/core/computation.py(277):         args = deep_align(
3.47 /testbed/xarray/core/computation.py(281):     objs = _all_of_type(args, DataArray)
3.47 /testbed/xarray/core/computation.py(54):     return [arg for arg in args if isinstance(arg, kind)]
3.47 /testbed/xarray/core/computation.py(54):     return [arg for arg in args if isinstance(arg, kind)]
3.47 /testbed/xarray/core/computation.py(54):     return [arg for arg in args if isinstance(arg, kind)]
3.47 /testbed/xarray/core/computation.py(54):     return [arg for arg in args if isinstance(arg, kind)]
3.47 /testbed/xarray/core/computation.py(54):     return [arg for arg in args if isinstance(arg, kind)]
3.47 /testbed/xarray/core/computation.py(283):     if keep_attrs == "drop":
3.47 /testbed/xarray/core/computation.py(286):         first_obj = _first_of_type(args, DataArray)
3.47 /testbed/xarray/core/computation.py(46):     for arg in args:
3.47 /testbed/xarray/core/computation.py(47):         if isinstance(arg, kind):
3.47 /testbed/xarray/core/computation.py(48):             return arg
3.47 /testbed/xarray/core/computation.py(287):         name = first_obj.name
3.47 /testbed/xarray/core/computation.py(288):     result_coords, result_indexes = build_output_coords_and_indexes(
3.47 /testbed/xarray/core/computation.py(289):         args, signature, exclude_dims, combine_attrs=keep_attrs
3.47 /testbed/xarray/core/computation.py(288):     result_coords, result_indexes = build_output_coords_and_indexes(
3.47 /testbed/xarray/core/computation.py(231):     coords_list = _get_coords_list(args)
3.47 /testbed/xarray/core/computation.py(197):     coords_list = []
3.47 /testbed/xarray/core/computation.py(198):     for arg in args:
3.47 /testbed/xarray/core/computation.py(199):         try:
3.47 /testbed/xarray/core/computation.py(200):             coords = arg.coords
3.47 /testbed/xarray/core/computation.py(204):             coords_list.append(coords)
3.47 /testbed/xarray/core/computation.py(198):     for arg in args:
3.47 /testbed/xarray/core/computation.py(199):         try:
3.47 /testbed/xarray/core/computation.py(200):             coords = arg.coords
3.47 /testbed/xarray/core/computation.py(201):         except AttributeError:
3.47 /testbed/xarray/core/computation.py(202):             pass  # skip this argument
3.47 /testbed/xarray/core/computation.py(198):     for arg in args:
3.47 /testbed/xarray/core/computation.py(199):         try:
3.47 /testbed/xarray/core/computation.py(200):             coords = arg.coords
3.47 /testbed/xarray/core/computation.py(201):         except AttributeError:
3.47 /testbed/xarray/core/computation.py(202):             pass  # skip this argument
3.47 /testbed/xarray/core/computation.py(198):     for arg in args:
3.47 /testbed/xarray/core/computation.py(205):     return coords_list
3.47 /testbed/xarray/core/computation.py(233):     if len(coords_list) == 1 and not exclude_dims:
3.47 /testbed/xarray/core/computation.py(235):         (unpacked_coords,) = coords_list
3.47 /testbed/xarray/core/computation.py(236):         merged_vars = dict(unpacked_coords.variables)
3.47 /testbed/xarray/core/computation.py(237):         merged_indexes = dict(unpacked_coords.xindexes)
3.47 /testbed/xarray/core/computation.py(243):     output_coords = []
3.47 /testbed/xarray/core/computation.py(244):     output_indexes = []
3.47 /testbed/xarray/core/computation.py(245):     for output_dims in signature.output_core_dims:
3.47 /testbed/xarray/core/computation.py(246):         dropped_dims = signature.all_input_core_dims - set(output_dims)
3.47 /testbed/xarray/core/computation.py(87):         if self._all_input_core_dims is None:
3.47 /testbed/xarray/core/computation.py(88):             self._all_input_core_dims = frozenset(
3.47 /testbed/xarray/core/computation.py(89):                 dim for dims in self.input_core_dims for dim in dims
3.47 /testbed/xarray/core/computation.py(88):             self._all_input_core_dims = frozenset(
3.47 /testbed/xarray/core/computation.py(88):             self._all_input_core_dims = frozenset(
3.47 /testbed/xarray/core/computation.py(89):                 dim for dims in self.input_core_dims for dim in dims
3.47 /testbed/xarray/core/computation.py(88):             self._all_input_core_dims = frozenset(
3.47 /testbed/xarray/core/computation.py(88):             self._all_input_core_dims = frozenset(
3.47 /testbed/xarray/core/computation.py(89):                 dim for dims in self.input_core_dims for dim in dims
3.47 /testbed/xarray/core/computation.py(88):             self._all_input_core_dims = frozenset(
3.47 /testbed/xarray/core/computation.py(88):             self._all_input_core_dims = frozenset(
3.47 /testbed/xarray/core/computation.py(89):                 dim for dims in self.input_core_dims for dim in dims
3.47 /testbed/xarray/core/computation.py(88):             self._all_input_core_dims = frozenset(
3.47 /testbed/xarray/core/computation.py(88):             self._all_input_core_dims = frozenset(
3.47 /testbed/xarray/core/computation.py(91):         return self._all_input_core_dims
3.47 /testbed/xarray/core/computation.py(247):         if dropped_dims:
3.47 /testbed/xarray/core/computation.py(255):             filtered_coords = merged_vars
3.47 /testbed/xarray/core/computation.py(256):             filtered_indexes = merged_indexes
3.47 /testbed/xarray/core/computation.py(257):         output_coords.append(filtered_coords)
3.47 /testbed/xarray/core/computation.py(258):         output_indexes.append(filtered_indexes)
3.47 /testbed/xarray/core/computation.py(245):     for output_dims in signature.output_core_dims:
3.47 /testbed/xarray/core/computation.py(260):     return output_coords, output_indexes
3.47 /testbed/xarray/core/computation.py(292):     data_vars = [getattr(a, "variable", a) for a in args]
3.47 /testbed/xarray/core/computation.py(292):     data_vars = [getattr(a, "variable", a) for a in args]
3.47 /testbed/xarray/core/computation.py(292):     data_vars = [getattr(a, "variable", a) for a in args]
3.47 /testbed/xarray/core/computation.py(292):     data_vars = [getattr(a, "variable", a) for a in args]
3.47 /testbed/xarray/core/computation.py(292):     data_vars = [getattr(a, "variable", a) for a in args]
3.47 /testbed/xarray/core/computation.py(293):     result_var = func(*data_vars)
3.47 /testbed/xarray/core/computation.py(649):     from .variable import Variable, as_compatible_data
3.47 /testbed/xarray/core/computation.py(651):     dim_sizes = unified_dim_sizes(
3.47 /testbed/xarray/core/computation.py(652):         (a for a in args if hasattr(a, "dims")), exclude_dims=exclude_dims
3.47 /testbed/xarray/core/computation.py(651):     dim_sizes = unified_dim_sizes(
3.47 /testbed/xarray/core/computation.py(546):     dim_sizes: dict[Hashable, int] = {}
3.47 /testbed/xarray/core/computation.py(548):     for var in variables:
3.47 /testbed/xarray/core/computation.py(652):         (a for a in args if hasattr(a, "dims")), exclude_dims=exclude_dims
3.47 /testbed/xarray/core/computation.py(549):         if len(set(var.dims)) < len(var.dims):
3.47 /testbed/xarray/core/computation.py(554):         for dim, size in zip(var.dims, var.shape):
3.47 /testbed/xarray/core/computation.py(555):             if dim not in exclude_dims:
3.47 /testbed/xarray/core/computation.py(556):                 if dim not in dim_sizes:
3.47 /testbed/xarray/core/computation.py(557):                     dim_sizes[dim] = size
3.47 /testbed/xarray/core/computation.py(554):         for dim, size in zip(var.dims, var.shape):
3.47 /testbed/xarray/core/computation.py(548):     for var in variables:
3.47 /testbed/xarray/core/computation.py(652):         (a for a in args if hasattr(a, "dims")), exclude_dims=exclude_dims
3.47 /testbed/xarray/core/computation.py(652):         (a for a in args if hasattr(a, "dims")), exclude_dims=exclude_dims
3.47 /testbed/xarray/core/computation.py(652):         (a for a in args if hasattr(a, "dims")), exclude_dims=exclude_dims
3.47 /testbed/xarray/core/computation.py(564):     return dim_sizes
3.47 /testbed/xarray/core/computation.py(654):     broadcast_dims = tuple(
3.47 /testbed/xarray/core/computation.py(655):         dim for dim in dim_sizes if dim not in signature.all_core_dims
3.47 /testbed/xarray/core/computation.py(654):     broadcast_dims = tuple(
3.47 /testbed/xarray/core/computation.py(654):     broadcast_dims = tuple(
3.47 /testbed/xarray/core/computation.py(655):         dim for dim in dim_sizes if dim not in signature.all_core_dims
3.47 /testbed/xarray/core/computation.py(103):         if self._all_core_dims is None:
3.47 /testbed/xarray/core/computation.py(104):             self._all_core_dims = self.all_input_core_dims | self.all_output_core_dims
3.47 /testbed/xarray/core/computation.py(87):         if self._all_input_core_dims is None:
3.47 /testbed/xarray/core/computation.py(91):         return self._all_input_core_dims
3.47 /testbed/xarray/core/computation.py(95):         if self._all_output_core_dims is None:
3.47 /testbed/xarray/core/computation.py(96):             self._all_output_core_dims = frozenset(
3.47 /testbed/xarray/core/computation.py(97):                 dim for dims in self.output_core_dims for dim in dims
3.47 /testbed/xarray/core/computation.py(96):             self._all_output_core_dims = frozenset(
3.47 /testbed/xarray/core/computation.py(96):             self._all_output_core_dims = frozenset(
3.47 /testbed/xarray/core/computation.py(97):                 dim for dims in self.output_core_dims for dim in dims
3.47 /testbed/xarray/core/computation.py(96):             self._all_output_core_dims = frozenset(
3.47 /testbed/xarray/core/computation.py(96):             self._all_output_core_dims = frozenset(
3.47 /testbed/xarray/core/computation.py(99):         return self._all_output_core_dims
3.47 /testbed/xarray/core/computation.py(105):         return self._all_core_dims
3.47 /testbed/xarray/core/computation.py(654):     broadcast_dims = tuple(
3.47 /testbed/xarray/core/computation.py(657):     output_dims = [broadcast_dims + out for out in signature.output_core_dims]
3.47 /testbed/xarray/core/computation.py(657):     output_dims = [broadcast_dims + out for out in signature.output_core_dims]
3.47 /testbed/xarray/core/computation.py(657):     output_dims = [broadcast_dims + out for out in signature.output_core_dims]
3.47 /testbed/xarray/core/computation.py(659):     input_data = [
3.47 /testbed/xarray/core/computation.py(663):         for arg, core_dims in zip(args, signature.input_core_dims)
3.47 /testbed/xarray/core/computation.py(659):     input_data = [
3.47 /testbed/xarray/core/computation.py(659):     input_data = [
3.47 /testbed/xarray/core/computation.py(663):         for arg, core_dims in zip(args, signature.input_core_dims)
3.47 /testbed/xarray/core/computation.py(661):         if isinstance(arg, Variable)
3.47 /testbed/xarray/core/computation.py(660):         broadcast_compat_data(arg, broadcast_dims, core_dims)
3.47 /testbed/xarray/core/computation.py(575):     data = variable.data
3.47 /testbed/xarray/core/computation.py(577):     old_dims = variable.dims
3.47 /testbed/xarray/core/computation.py(578):     new_dims = broadcast_dims + core_dims
3.47 /testbed/xarray/core/computation.py(580):     if new_dims == old_dims:
3.47 /testbed/xarray/core/computation.py(582):         return data
3.47 /testbed/xarray/core/computation.py(659):     input_data = [
3.47 /testbed/xarray/core/computation.py(659):     input_data = [
3.47 /testbed/xarray/core/computation.py(663):         for arg, core_dims in zip(args, signature.input_core_dims)
3.47 /testbed/xarray/core/computation.py(661):         if isinstance(arg, Variable)
3.47 /testbed/xarray/core/computation.py(660):         broadcast_compat_data(arg, broadcast_dims, core_dims)
3.47 /testbed/xarray/core/computation.py(662):         else arg
3.47 /testbed/xarray/core/computation.py(659):     input_data = [
3.47 /testbed/xarray/core/computation.py(659):     input_data = [
3.47 /testbed/xarray/core/computation.py(663):         for arg, core_dims in zip(args, signature.input_core_dims)
3.47 /testbed/xarray/core/computation.py(661):         if isinstance(arg, Variable)
3.47 /testbed/xarray/core/computation.py(660):         broadcast_compat_data(arg, broadcast_dims, core_dims)
3.47 /testbed/xarray/core/computation.py(662):         else arg
3.47 /testbed/xarray/core/computation.py(659):     input_data = [
3.47 /testbed/xarray/core/computation.py(659):     input_data = [
3.47 /testbed/xarray/core/computation.py(666):     if any(is_duck_dask_array(array) for array in input_data):
3.47 /testbed/xarray/core/computation.py(666):     if any(is_duck_dask_array(array) for array in input_data):
3.47 /testbed/xarray/core/computation.py(666):     if any(is_duck_dask_array(array) for array in input_data):
3.47 /testbed/xarray/core/computation.py(666):     if any(is_duck_dask_array(array) for array in input_data):
3.47 /testbed/xarray/core/computation.py(666):     if any(is_duck_dask_array(array) for array in input_data):
3.47 /testbed/xarray/core/computation.py(742):         if vectorize:
3.47 /testbed/xarray/core/computation.py(747):     result_data = func(*input_data)
3.47 /testbed/xarray/core/computation.py(749):     if signature.num_outputs == 1:
3.47 /testbed/xarray/core/computation.py(119):         return len(self.output_core_dims)
3.47 /testbed/xarray/core/computation.py(750):         result_data = (result_data,)
3.47 /testbed/xarray/core/computation.py(762):     objs = _all_of_type(args, Variable)
3.47 /testbed/xarray/core/computation.py(54):     return [arg for arg in args if isinstance(arg, kind)]
3.47 /testbed/xarray/core/computation.py(54):     return [arg for arg in args if isinstance(arg, kind)]
3.47 /testbed/xarray/core/computation.py(54):     return [arg for arg in args if isinstance(arg, kind)]
3.47 /testbed/xarray/core/computation.py(54):     return [arg for arg in args if isinstance(arg, kind)]
3.47 /testbed/xarray/core/computation.py(54):     return [arg for arg in args if isinstance(arg, kind)]
3.47 /testbed/xarray/core/computation.py(763):     attrs = merge_attrs(
3.47 /testbed/xarray/core/computation.py(764):         [obj.attrs for obj in objs],
3.47 /testbed/xarray/core/computation.py(764):         [obj.attrs for obj in objs],
3.47 /testbed/xarray/core/computation.py(764):         [obj.attrs for obj in objs],
3.47 /testbed/xarray/core/computation.py(765):         combine_attrs=keep_attrs,
3.47 /testbed/xarray/core/computation.py(763):     attrs = merge_attrs(
3.47 /testbed/xarray/core/computation.py(1831):         keep_attrs = lambda attrs, context: getattr(x, "attrs", {})
3.47 /testbed/xarray/core/computation.py(768):     output = []
3.47 /testbed/xarray/core/computation.py(769):     for dims, data in zip(output_dims, result_data):
3.47 /testbed/xarray/core/computation.py(770):         data = as_compatible_data(data)
3.47 /testbed/xarray/core/computation.py(771):         if data.ndim != len(dims):
3.47 /testbed/xarray/core/computation.py(778):         var = Variable(dims, data, fastpath=True)
3.47 /testbed/xarray/core/computation.py(779):         for dim, new_size in var.sizes.items():
3.47 /testbed/xarray/core/computation.py(780):             if dim in dim_sizes and new_size != dim_sizes[dim]:
3.47 /testbed/xarray/core/computation.py(779):         for dim, new_size in var.sizes.items():
3.47 /testbed/xarray/core/computation.py(790):         var.attrs = attrs
3.47 /testbed/xarray/core/computation.py(791):         output.append(var)
3.47 /testbed/xarray/core/computation.py(769):     for dims, data in zip(output_dims, result_data):
3.47 /testbed/xarray/core/computation.py(793):     if signature.num_outputs == 1:
3.47 /testbed/xarray/core/computation.py(119):         return len(self.output_core_dims)
3.47 /testbed/xarray/core/computation.py(794):         return output[0]
3.47 /testbed/xarray/core/computation.py(295):     if signature.num_outputs > 1:
3.47 /testbed/xarray/core/computation.py(119):         return len(self.output_core_dims)
3.47 /testbed/xarray/core/computation.py(305):         (coords,) = result_coords
3.47 /testbed/xarray/core/computation.py(306):         (indexes,) = result_indexes
3.47 /testbed/xarray/core/computation.py(307):         out = DataArray(
3.47 /testbed/xarray/core/computation.py(308):             result_var, coords=coords, indexes=indexes, name=name, fastpath=True
3.47 /testbed/xarray/core/computation.py(307):         out = DataArray(
3.47 /testbed/xarray/core/computation.py(311):     attrs = merge_attrs([x.attrs for x in objs], combine_attrs=keep_attrs)
3.47 /testbed/xarray/core/computation.py(311):     attrs = merge_attrs([x.attrs for x in objs], combine_attrs=keep_attrs)
3.47 /testbed/xarray/core/computation.py(311):     attrs = merge_attrs([x.attrs for x in objs], combine_attrs=keep_attrs)
3.47 /testbed/xarray/core/computation.py(1831):         keep_attrs = lambda attrs, context: getattr(x, "attrs", {})
3.47 /testbed/xarray/core/computation.py(312):     if isinstance(out, tuple):
3.47 /testbed/xarray/core/computation.py(316):         out.attrs = attrs
3.47 /testbed/xarray/core/computation.py(318):     return out
=========================== short test summary info ============================
PASSED xarray/tests/test_coverup_pydata__xarray-6461.py::test_where_with_scalar_and_keep_attrs
============================== 1 passed in 1.12s ===============================
+ cat coverage.cover
{"/testbed/xarray/core/computation.py": {"4": 1, "6": 1, "7": 1, "8": 1, "9": 1, "10": 1, "11": 1, "22": 1, "24": 1, "25": 1, "26": 1, "27": 1, "28": 1, "29": 1, "30": 1, "31": 1, "33": 1, "34": 0, "35": 0, "36": 0, "37": 0, "39": 1, "40": 1, "41": 1, "44": 1, "52": 1, "57": 2, "184": 1, "196": 1, "211": 1, "212": 1, "208": 1, "267": 1, "268": 1, "269": 1, "263": 1, "321": 1, "325": 1, "332": 1, "344": 1, "345": 1, "346": 1, "347": 1, "348": 1, "343": 1, "352": 1, "359": 1, "358": 1, "367": 1, "377": 1, "388": 1, "387": 1, "407": 1, "427": 1, "428": 1, "429": 1, "430": 1, "431": 1, "423": 1, "481": 1, "496": 1, "543": 1, "542": 1, "567": 1, "570": 1, "624": 1, "641": 1, "642": 1, "643": 1, "644": 1, "645": 1, "646": 1, "637": 1, "799": 1, "825": 1, "826": 1, "827": 1, "828": 1, "829": 1, "830": 1, "831": 1, "832": 1, "833": 1, "834": 1, "835": 1, "836": 1, "837": 1, "838": 1, "822": 1, "1195": 1, "1275": 1, "1353": 1, "1390": 1, "1598": 1, "1743": 1, "1846": 1, "1882": 1, "1883": 1, "1884": 1, "1885": 1, "1878": 1, "1941": 1, "46": 1, "47": 1, "48": 1, "49": 0, "54": 10, "70": 1, "78": 1, "85": 1, "86": 1, "93": 1, "94": 1, "101": 1, "102": 1, "107": 1, "108": 1, "113": 1, "114": 1, "117": 1, "118": 1, "121": 1, "130": 1, "133": 1, "140": 1, "145": 1, "79": 5, "80": 3, "81": 1, "82": 1, "83": 1, "87": 2, "88": 9, "89": 4, "91": 2, "95": 1, "96": 5, "97": 2, "99": 1, "103": 1, "104": 1, "105": 1, "109": 0, "110": 0, "115": 0, "119": 3, "122": 0, "124": 0, "125": 0, "123": 0, "127": 0, "128": 0, "131": 0, "134": 0, "135": 0, "136": 0, "137": 0, "141": 0, "142": 0, "143": 0, "153": 0, "155": 0, "157": 0, "159": 0, "163": 0, "165": 0, "167": 0, "169": 0, "176": 0, "177": 0, "180": 0, "181": 0, "154": 0, "158": 0, "170": 0, "171": 0, "172": 0, "173": 0, "174": 0, "187": 0, "188": 0, "189": 0, "190": 0, "193": 0, "192": 0, "197": 1, "198": 4, "199": 3, "200": 3, "201": 2, "202": 2, "204": 1, "205": 1, "231": 1, "233": 1, "235": 1, "236": 1, "237": 1, "239": 0, "240": 0, "243": 1, "244": 1, "245": 2, "246": 1, "247": 1, "248": 0, "249": 0, "251": 0, "252": 0, "255": 1, "256": 1, "257": 1, "258": 1, "260": 1, "274": 1, "276": 1, "277": 2, "278": 1, "281": 1, "283": 1, "284": 0, "286": 1, "287": 1, "288": 2, "289": 1, "292": 5, "293": 1, "295": 1, "296": 0, "300": 0, "301": 0, "305": 1, "306": 1, "307": 2, "308": 1, "311": 3, "312": 1, "313": 0, "314": 0, "318": 1, "316": 1, "297": 0, "298": 0, "322": 0, "326": 0, "327": 0, "328": 0, "329": 0, "333": 0, "334": 0, "335": 0, "336": 0, "337": 0, "338": 0, "340": 0, "353": 0, "354": 0, "355": 0, "361": 0, "363": 0, "362": 0, "368": 0, "369": 0, "370": 0, "371": 0, "372": 0, "373": 0, "374": 0, "380": 0, "381": 0, "382": 0, "383": 0, "384": 0, "393": 0, "394": 0, "395": 0, "397": 0, "398": 0, "399": 0, "401": 0, "402": 0, "404": 0, "416": 0, "418": 0, "419": 0, "420": 0, "436": 0, "438": 0, "439": 0, "440": 0, "445": 0, "447": 0, "448": 0, "449": 0, "452": 0, "453": 0, "455": 0, "457": 0, "458": 0, "461": 0, "462": 0, "464": 0, "467": 0, "468": 0, "469": 0, "471": 0, "472": 0, "473": 0, "474": 0, "478": 0, "476": 0, "463": 0, "483": 0, "485": 0, "486": 0, "487": 0, "488": 0, "489": 0, "490": 0, "491": 0, "492": 0, "493": 0, "500": 0, "501": 0, "503": 0, "504": 0, "505": 0, "506": 0, "507": 0, "508": 0, "513": 0, "514": 0, "516": 0, "517": 0, "518": 0, "519": 0, "520": 0, "521": 0, "522": 0, "523": 0, "527": 0, "529": 0, "530": 0, "532": 0, "533": 0, "534": 0, "535": 0, "536": 0, "539": 0, "538": 0, "546": 1, "548": 2, "549": 1, "550": 0, "551": 0, "552": 0, "554": 2, "555": 1, "556": 1, "557": 1, "558": 0, "559": 0, "560": 0, "562": 0, "564": 1, "575": 1, "577": 1, "578": 1, "580": 1, "582": 1, "584": 0, "585": 0, "586": 0, "587": 0, "588": 0, "589": 0, "590": 0, "594": 0, "595": 0, "596": 0, "597": 0, "598": 0, "599": 0, "604": 0, "605": 0, "606": 0, "607": 0, "608": 0, "610": 0, "611": 0, "612": 0, "613": 0, "614": 0, "615": 0, "618": 0, "619": 0, "621": 0, "625": 0, "626": 0, "627": 0, "628": 0, "629": 0, "634": 0, "632": 0, "649": 1, "651": 2, "652": 5, "654": 4, "655": 2, "657": 3, "659": 9, "663": 4, "666": 5, "667": 0, "668": 0, "669": 0, "675": 0, "676": 0, "678": 0, "679": 0, "681": 0, "683": 0, "684": 0, "685": 0, "686": 0, "688": 0, "690": 0, "691": 0, "692": 0, "693": 0, "697": 0, "701": 0, "703": 0, "704": 0, "705": 0, "706": 0, "707": 0, "708": 0, "709": 0, "711": 0, "712": 0, "714": 0, "715": 0, "716": 0, "717": 0, "720": 0, "734": 0, "735": 0, "737": 0, "738": 0, "739": 0, "742": 1, "743": 0, "744": 0, "747": 1, "749": 1, "750": 1, "752": 0, "751": 0, "754": 0, "755": 0, "757": 0, "758": 0, "762": 1, "763": 2, "764": 3, "765": 1, "768": 1, "769": 2, "770": 1, "771": 1, "772": 0, "773": 0, "774": 0, "775": 0, "778": 1, "779": 2, "780": 1, "781": 0, "782": 0, "785": 0, "786": 0, "790": 1, "791": 1, "793": 1, "794": 1, "796": 0, "661": 3, "660": 3, "662": 2, "721": 0, "723": 0, "724": 0, "725": 0, "726": 0, "727": 0, "728": 0, "729": 0, "732": 0, "801": 0, "802": 0, "803": 0, "804": 0, "810": 0, "811": 0, "812": 0, "815": 0, "816": 0, "819": 0, "818": 0, "1070": 1, "1071": 1, "1072": 1, "1074": 1, "1075": 1, "1076": 0, "1077": 0, "1078": 0, "1080": 0, "1081": 0, "1084": 1, "1085": 1, "1087": 1, "1089": 1, "1090": 0, "1091": 0, "1092": 0, "1094": 0, "1095": 0, "1096": 0, "1098": 0, "1102": 1, "1103": 0, "1104": 0, "1106": 0, "1108": 0, "1109": 0, "1110": 0, "1112": 0, "1113": 0, "1115": 0, "1116": 0, "1117": 0, "1118": 0, "1121": 0, "1122": 0, "1124": 0, "1126": 1, "1127": 0, "1129": 1, "1130": 0, "1132": 1, "1133": 0, "1135": 2, "1136": 1, "1137": 1, "1138": 1, "1139": 1, "1140": 1, "1141": 1, "1142": 1, "1143": 1, "1144": 1, "1148": 5, "1149": 0, "1150": 0, "1151": 0, "1152": 0, "1153": 0, "1154": 0, "1155": 0, "1156": 0, "1157": 0, "1158": 0, "1159": 0, "1160": 0, "1161": 0, "1162": 0, "1164": 0, "1166": 5, "1167": 0, "1168": 0, "1169": 0, "1170": 0, "1171": 0, "1172": 0, "1173": 0, "1174": 0, "1175": 0, "1178": 2, "1179": 4, "1180": 1, "1181": 1, "1182": 1, "1183": 1, "1184": 1, "1185": 1, "1188": 0, "1189": 0, "1192": 0, "1264": 0, "1266": 0, "1267": 0, "1268": 0, "1269": 0, "1272": 0, "1342": 0, "1344": 0, "1345": 0, "1346": 0, "1347": 0, "1350": 0, "1359": 0, "1362": 0, "1363": 0, "1364": 0, "1365": 0, "1368": 0, "1369": 0, "1375": 0, "1376": 0, "1379": 0, "1380": 0, "1384": 0, "1385": 0, "1386": 0, "1387": 0, "1528": 0, "1529": 0, "1530": 0, "1531": 0, "1533": 0, "1534": 0, "1535": 0, "1536": 0, "1538": 0, "1539": 0, "1540": 0, "1541": 0, "1544": 0, "1546": 0, "1551": 0, "1550": 0, "1552": 0, "1553": 0, "1554": 0, "1558": 0, "1559": 0, "1560": 0, "1561": 0, "1562": 0, "1563": 0, "1565": 0, "1570": 0, "1571": 0, "1573": 0, "1575": 0, "1577": 0, "1579": 0, "1580": 0, "1584": 0, "1585": 0, "1586": 0, "1587": 0, "1588": 0, "1589": 0, "1590": 0, "1591": 0, "1593": 0, "1595": 0, "1675": 0, "1676": 0, "1678": 0, "1679": 0, "1680": 0, "1681": 0, "1684": 0, "1685": 0, "1687": 0, "1688": 0, "1690": 0, "1691": 0, "1692": 0, "1693": 0, "1695": 0, "1696": 0, "1698": 0, "1699": 0, "1700": 0, "1702": 0, "1703": 0, "1704": 0, "1705": 0, "1707": 0, "1710": 0, "1711": 0, "1712": 0, "1714": 0, "1718": 0, "1719": 0, "1721": 0, "1722": 0, "1724": 0, "1726": 0, "1727": 0, "1731": 0, "1732": 0, "1733": 0, "1734": 0, "1735": 0, "1736": 0, "1737": 0, "1738": 0, "1740": 0, "1826": 1, "1827": 0, "1828": 1, "1831": 3, "1834": 2, "1835": 1, "1836": 1, "1837": 1, "1838": 1, "1839": 1, "1840": 1, "1841": 1, "1842": 1, "1863": 0, "1864": 0, "1866": 0, "1868": 0, "1870": 0, "1871": 0, "1872": 0, "1873": 0, "1875": 0, "1889": 0, "1890": 0, "1892": 0, "1893": 0, "1894": 0, "1896": 0, "1899": 0, "1901": 0, "1902": 0, "1903": 0, "1904": 0, "1907": 0, "1909": 0, "1911": 0, "1912": 0, "1915": 0, "1918": 0, "1919": 0, "1921": 0, "1922": 0, "1923": 0, "1925": 0, "1927": 0, "1929": 0, "1931": 0, "1933": 0, "1936": 0, "1938": 0, "1955": 0, "1958": 0, "1960": 0, "1964": 0, "1965": 0, "1966": 0, "1967": 0, "1968": 0, "1970": 0, "1971": 0, "1972": 0, "1973": 0, "1974": 0, "1976": 0, "1977": 0, "1978": 0, "1981": 0, "1982": 0, "1985": 0, "1987": 0, "1988": 0, "1989": 0, "1990": 0, "1991": 0, "1992": 0, "1993": 0, "1994": 0, "1996": 0, "1959": 0}}
+ git checkout 851dadeb0338403e5021c3fbe80cbc9127ee672d
Note: switching to '851dadeb0338403e5021c3fbe80cbc9127ee672d'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at 851dadeb No chunk warning if empty (#6402)
M	xarray/core/computation.py
+ git apply /root/pre_state.patch
error: unrecognized input
