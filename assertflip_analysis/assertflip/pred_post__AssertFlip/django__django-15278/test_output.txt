+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD 0ab58c120939093fea90822f376e1866fc714d1f
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
nothing to commit, working tree clean
+ git show
commit 0ab58c120939093fea90822f376e1866fc714d1f
Author: Jacob Walls <jacobtylerwalls@gmail.com>
Date:   Fri Dec 31 10:30:48 2021 -0500

    Refs #29026 -- Allowed customizing InteractiveMigrationQuestioner's prompt destination.
    
    Previously, the questioner did not obey the value of stdout provided
    to the command.

diff --git a/django/core/management/commands/makemigrations.py b/django/core/management/commands/makemigrations.py
index 9077660467..4d26bfe278 100644
--- a/django/core/management/commands/makemigrations.py
+++ b/django/core/management/commands/makemigrations.py
@@ -144,7 +144,11 @@ class Command(BaseCommand):
             return self.handle_merge(loader, conflicts)
 
         if self.interactive:
-            questioner = InteractiveMigrationQuestioner(specified_apps=app_labels, dry_run=self.dry_run)
+            questioner = InteractiveMigrationQuestioner(
+                specified_apps=app_labels,
+                dry_run=self.dry_run,
+                prompt_output=self.stdout,
+            )
         else:
             questioner = NonInteractiveMigrationQuestioner(
                 specified_apps=app_labels,
@@ -250,7 +254,7 @@ class Command(BaseCommand):
         if it's safe; otherwise, advises on how to fix it.
         """
         if self.interactive:
-            questioner = InteractiveMigrationQuestioner()
+            questioner = InteractiveMigrationQuestioner(prompt_output=self.stdout)
         else:
             questioner = MigrationQuestioner(defaults={'ask_merge': True})
 
diff --git a/django/db/migrations/questioner.py b/django/db/migrations/questioner.py
index 17883ca76c..3460e2b3ab 100644
--- a/django/db/migrations/questioner.py
+++ b/django/db/migrations/questioner.py
@@ -4,6 +4,7 @@ import os
 import sys
 
 from django.apps import apps
+from django.core.management.base import OutputWrapper
 from django.db.models import NOT_PROVIDED
 from django.utils import timezone
 from django.utils.version import get_docs_version
@@ -87,20 +88,26 @@ class MigrationQuestioner:
 
 
 class InteractiveMigrationQuestioner(MigrationQuestioner):
+    def __init__(self, defaults=None, specified_apps=None, dry_run=None, prompt_output=None):
+        super().__init__(defaults=defaults, specified_apps=specified_apps, dry_run=dry_run)
+        self.prompt_output = prompt_output or OutputWrapper(sys.stdout)
 
     def _boolean_input(self, question, default=None):
-        result = input("%s " % question)
+        self.prompt_output.write(f'{question} ', ending='')
+        result = input()
         if not result and default is not None:
             return default
         while not result or result[0].lower() not in "yn":
-            result = input("Please answer yes or no: ")
+            self.prompt_output.write('Please answer yes or no: ', ending='')
+            result = input()
         return result[0].lower() == "y"
 
     def _choice_input(self, question, choices):
-        print(question)
+        self.prompt_output.write(f'{question}')
         for i, choice in enumerate(choices):
-            print(" %s) %s" % (i + 1, choice))
-        result = input("Select an option: ")
+            self.prompt_output.write(' %s) %s' % (i + 1, choice))
+        self.prompt_output.write('Select an option: ', ending='')
+        result = input()
         while True:
             try:
                 value = int(result)
@@ -109,7 +116,8 @@ class InteractiveMigrationQuestioner(MigrationQuestioner):
             else:
                 if 0 < value <= len(choices):
                     return value
-            result = input("Please select a valid option: ")
+            self.prompt_output.write('Please select a valid option: ', ending='')
+            result = input()
 
     def _ask_default(self, default=''):
         """
@@ -119,34 +127,35 @@ class InteractiveMigrationQuestioner(MigrationQuestioner):
         string) which will be shown to the user and used as the return value
         if the user doesn't provide any other input.
         """
-        print('Please enter the default value as valid Python.')
+        self.prompt_output.write('Please enter the default value as valid Python.')
         if default:
-            print(
+            self.prompt_output.write(
                 f"Accept the default '{default}' by pressing 'Enter' or "
                 f"provide another value."
             )
-        print(
+        self.prompt_output.write(
             'The datetime and django.utils.timezone modules are available, so '
             'it is possible to provide e.g. timezone.now as a value.'
         )
-        print("Type 'exit' to exit this prompt")
+        self.prompt_output.write("Type 'exit' to exit this prompt")
         while True:
             if default:
                 prompt = "[default: {}] >>> ".format(default)
             else:
                 prompt = ">>> "
-            code = input(prompt)
+            self.prompt_output.write(prompt, ending='')
+            code = input()
             if not code and default:
                 code = default
             if not code:
-                print("Please enter some code, or 'exit' (without quotes) to exit.")
+                self.prompt_output.write("Please enter some code, or 'exit' (without quotes) to exit.")
             elif code == "exit":
                 sys.exit(1)
             else:
                 try:
                     return eval(code, {}, {'datetime': datetime, 'timezone': timezone})
                 except (SyntaxError, NameError) as e:
-                    print("Invalid input: %s" % e)
+                    self.prompt_output.write('Invalid input: %s' % e)
 
     def ask_not_null_addition(self, field_name, model_name):
         """Adding a NOT NULL field to a model."""
diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py
index bf78b60a85..ef5db241d6 100644
--- a/tests/migrations/test_commands.py
+++ b/tests/migrations/test_commands.py
@@ -1304,7 +1304,15 @@ class MakeMigrationsTests(MigrationTestBase):
         # Monkeypatch interactive questioner to auto reject
         with mock.patch('builtins.input', mock.Mock(return_value='N')):
             with self.temporary_migration_module(module="migrations.test_migrations_conflict") as migration_dir:
-                call_command("makemigrations", "migrations", name="merge", merge=True, interactive=True, verbosity=0)
+                with captured_stdout():
+                    call_command(
+                        'makemigrations',
+                        'migrations',
+                        name='merge',
+                        merge=True,
+                        interactive=True,
+                        verbosity=0,
+                    )
                 merge_file = os.path.join(migration_dir, '0003_merge.py')
                 self.assertFalse(os.path.exists(merge_file))
 
@@ -1766,6 +1774,10 @@ class MakeMigrationsTests(MigrationTestBase):
                 '    - remove field silly_field from author\n'
                 '    - add field rating to author\n'
                 '    - create model book\n'
+                '\n'
+                'merging will only work if the operations printed above do not conflict\n'
+                'with each other (working on different fields or models)\n'
+                'should these migration branches be merged? [y/n] '
             )
 
     def test_makemigrations_with_custom_name(self):
@@ -1886,30 +1898,25 @@ class MakeMigrationsTests(MigrationTestBase):
             "It is impossible to add the field 'creation_date' with "
             "'auto_now_add=True' to entry without providing a default. This "
             "is because the database needs something to populate existing "
-            "rows.\n\n"
+            "rows.\n"
             " 1) Provide a one-off default now which will be set on all "
             "existing rows\n"
             " 2) Quit and manually define a default value in models.py."
         )
         # Monkeypatch interactive questioner to auto accept
-        with mock.patch('django.db.migrations.questioner.sys.stdout', new_callable=io.StringIO) as prompt_stdout:
-            out = io.StringIO()
-            with self.temporary_migration_module(module='migrations.test_auto_now_add'):
-                call_command('makemigrations', 'migrations', interactive=True, stdout=out)
-            output = out.getvalue()
-            prompt_output = prompt_stdout.getvalue()
-            self.assertIn(input_msg, prompt_output)
-            self.assertIn(
-                'Please enter the default value as valid Python.',
-                prompt_output,
-            )
-            self.assertIn(
-                "Accept the default 'timezone.now' by pressing 'Enter' or "
-                "provide another value.",
-                prompt_output,
-            )
-            self.assertIn("Type 'exit' to exit this prompt", prompt_output)
-            self.assertIn("Add field creation_date to entry", output)
+        prompt_stdout = io.StringIO()
+        with self.temporary_migration_module(module='migrations.test_auto_now_add'):
+            call_command('makemigrations', 'migrations', interactive=True, stdout=prompt_stdout)
+        prompt_output = prompt_stdout.getvalue()
+        self.assertIn(input_msg, prompt_output)
+        self.assertIn('Please enter the default value as valid Python.', prompt_output)
+        self.assertIn(
+            "Accept the default 'timezone.now' by pressing 'Enter' or provide "
+            "another value.",
+            prompt_output,
+        )
+        self.assertIn("Type 'exit' to exit this prompt", prompt_output)
+        self.assertIn("Add field creation_date to entry", prompt_output)
 
     @mock.patch('builtins.input', return_value='2')
     def test_makemigrations_auto_now_add_interactive_quit(self, mock_input):
@@ -1960,7 +1967,7 @@ class MakeMigrationsTests(MigrationTestBase):
         input_msg = (
             f'Callable default on unique field book.created will not generate '
             f'unique values upon migrating.\n'
-            f'Please choose how to proceed:\n\n'
+            f'Please choose how to proceed:\n'
             f' 1) Continue making this migration as the first step in writing '
             f'a manual migration to generate unique values described here: '
             f'https://docs.djangoproject.com/en/{version}/howto/'
diff --git a/tests/migrations/test_questioner.py b/tests/migrations/test_questioner.py
index c9690d0b99..472a3f248f 100644
--- a/tests/migrations/test_questioner.py
+++ b/tests/migrations/test_questioner.py
@@ -1,12 +1,14 @@
 import datetime
+from io import StringIO
 from unittest import mock
 
+from django.core.management.base import OutputWrapper
 from django.db.migrations.questioner import (
     InteractiveMigrationQuestioner, MigrationQuestioner,
 )
 from django.db.models import NOT_PROVIDED
 from django.test import SimpleTestCase
-from django.test.utils import captured_stdout, override_settings
+from django.test.utils import override_settings
 
 
 class QuestionerTests(SimpleTestCase):
@@ -24,65 +26,60 @@ class QuestionerTests(SimpleTestCase):
 
     @mock.patch('builtins.input', return_value='2')
     def test_ask_not_null_alteration_not_provided(self, mock):
-        questioner = InteractiveMigrationQuestioner()
-        with captured_stdout():
-            question = questioner.ask_not_null_alteration('field_name', 'model_name')
+        questioner = InteractiveMigrationQuestioner(prompt_output=OutputWrapper(StringIO()))
+        question = questioner.ask_not_null_alteration('field_name', 'model_name')
         self.assertEqual(question, NOT_PROVIDED)
 
 
 class QuestionerHelperMethodsTests(SimpleTestCase):
-    questioner = InteractiveMigrationQuestioner()
+    def setUp(self):
+        self.prompt = OutputWrapper(StringIO())
+        self.questioner = InteractiveMigrationQuestioner(prompt_output=self.prompt)
 
     @mock.patch('builtins.input', return_value='datetime.timedelta(days=1)')
     def test_questioner_default_timedelta(self, mock_input):
-        questioner = InteractiveMigrationQuestioner()
-        with captured_stdout():
-            value = questioner._ask_default()
+        value = self.questioner._ask_default()
         self.assertEqual(value, datetime.timedelta(days=1))
 
     @mock.patch('builtins.input', return_value='')
     def test_questioner_default_no_user_entry(self, mock_input):
-        with captured_stdout():
-            value = self.questioner._ask_default(default='datetime.timedelta(days=1)')
+        value = self.questioner._ask_default(default='datetime.timedelta(days=1)')
         self.assertEqual(value, datetime.timedelta(days=1))
 
     @mock.patch('builtins.input', side_effect=['', 'exit'])
     def test_questioner_no_default_no_user_entry(self, mock_input):
-        with captured_stdout() as stdout, self.assertRaises(SystemExit):
+        with self.assertRaises(SystemExit):
             self.questioner._ask_default()
         self.assertIn(
             "Please enter some code, or 'exit' (without quotes) to exit.",
-            stdout.getvalue(),
+            self.prompt.getvalue(),
         )
 
     @mock.patch('builtins.input', side_effect=['bad code', 'exit'])
     def test_questioner_no_default_bad_user_entry_code(self, mock_input):
-        with captured_stdout() as stdout, self.assertRaises(SystemExit):
+        with self.assertRaises(SystemExit):
             self.questioner._ask_default()
-        self.assertIn('Invalid input: ', stdout.getvalue())
+        self.assertIn('Invalid input: ', self.prompt.getvalue())
 
     @mock.patch('builtins.input', side_effect=['', 'n'])
     def test_questioner_no_default_no_user_entry_boolean(self, mock_input):
-        with captured_stdout():
-            value = self.questioner._boolean_input('Proceed?')
+        value = self.questioner._boolean_input('Proceed?')
         self.assertIs(value, False)
 
     @mock.patch('builtins.input', return_value='')
     def test_questioner_default_no_user_entry_boolean(self, mock_input):
-        with captured_stdout():
-            value = self.questioner._boolean_input('Proceed?', default=True)
+        value = self.questioner._boolean_input('Proceed?', default=True)
         self.assertIs(value, True)
 
     @mock.patch('builtins.input', side_effect=[10, 'garbage', 1])
     def test_questioner_bad_user_choice(self, mock_input):
         question = 'Make a choice:'
-        with captured_stdout() as stdout:
-            value = self.questioner._choice_input(question, choices='abc')
+        value = self.questioner._choice_input(question, choices='abc')
         expected_msg = (
             f'{question}\n'
             f' 1) a\n'
             f' 2) b\n'
             f' 3) c\n'
         )
-        self.assertIn(expected_msg, stdout.getvalue())
+        self.assertIn(expected_msg, self.prompt.getvalue())
         self.assertEqual(value, 1)
+ git diff 0ab58c120939093fea90822f376e1866fc714d1f
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Checking if build backend supports build_editable: started
  Checking if build backend supports build_editable: finished with status 'done'
  Getting requirements to build editable: started
  Getting requirements to build editable: finished with status 'done'
  Preparing editable metadata (pyproject.toml): started
  Preparing editable metadata (pyproject.toml): finished with status 'done'
Requirement already satisfied: asgiref>=3.4.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Django==4.1.dev20220103113051) (3.9.1)
Requirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Django==4.1.dev20220103113051) (0.5.3)
Requirement already satisfied: typing_extensions>=4 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from asgiref>=3.4.1->Django==4.1.dev20220103113051) (4.14.1)
Building wheels for collected packages: Django
  Building editable for Django (pyproject.toml): started
  Building editable for Django (pyproject.toml): finished with status 'done'
  Created wheel for Django: filename=django-4.1.dev20220103113051-0.editable-py3-none-any.whl size=26942 sha256=7a230c92f486ee40cb2c4eb9c0d4e0655b0f52e905557d900c04a75777134f64
  Stored in directory: /tmp/pip-ephem-wheel-cache-3zauy0k6/wheels/7d/66/67/70d1ee2124ccf21d601c352e25cdca10f611f7c8b3f9ffb9e4
Successfully built Django
Installing collected packages: Django
  Attempting uninstall: Django
    Found existing installation: Django 4.1.dev20220103113051
    Uninstalling Django-4.1.dev20220103113051:
      Successfully uninstalled Django-4.1.dev20220103113051
Successfully installed Django-4.1.dev20220103113051
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git apply -v -
Checking patch django/db/backends/sqlite3/schema.py...
Applied patch django/db/backends/sqlite3/schema.py cleanly.
+ git apply -v -
Checking patch tests/test_coverup_django__django-15278.py...
Applied patch tests/test_coverup_django__django-15278.py cleanly.
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/db/backends/sqlite3/schema\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-15278
Creating test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(django/db/backends/sqlite3/schema\\.py)']
Testing against Django installed in '/testbed/django'
0.52 /testbed/django/db/backends/sqlite3/schema.py(1): import copy
0.52 /testbed/django/db/backends/sqlite3/schema.py(2): from decimal import Decimal
0.52 /testbed/django/db/backends/sqlite3/schema.py(4): from django.apps.registry import Apps
0.52 /testbed/django/db/backends/sqlite3/schema.py(5): from django.db import NotSupportedError
0.52 /testbed/django/db/backends/sqlite3/schema.py(6): from django.db.backends.base.schema import BaseDatabaseSchemaEditor
0.53 /testbed/django/db/backends/sqlite3/schema.py(7): from django.db.backends.ddl_references import Statement
0.53 /testbed/django/db/backends/sqlite3/schema.py(8): from django.db.backends.utils import strip_quotes
0.53 /testbed/django/db/backends/sqlite3/schema.py(9): from django.db.models import UniqueConstraint
0.53 /testbed/django/db/backends/sqlite3/schema.py(10): from django.db.transaction import atomic
0.53 /testbed/django/db/backends/sqlite3/schema.py(13): class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):
0.53 /testbed/django/db/backends/sqlite3/schema.py(13): class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):
0.53 /testbed/django/db/backends/sqlite3/schema.py(15):     sql_delete_table = "DROP TABLE %(table)s"
0.53 /testbed/django/db/backends/sqlite3/schema.py(16):     sql_create_fk = None
0.53 /testbed/django/db/backends/sqlite3/schema.py(17):     sql_create_inline_fk = "REFERENCES %(to_table)s (%(to_column)s) DEFERRABLE INITIALLY DEFERRED"
0.53 /testbed/django/db/backends/sqlite3/schema.py(18):     sql_create_column_inline_fk = sql_create_inline_fk
0.53 /testbed/django/db/backends/sqlite3/schema.py(19):     sql_create_unique = "CREATE UNIQUE INDEX %(name)s ON %(table)s (%(columns)s)"
0.53 /testbed/django/db/backends/sqlite3/schema.py(20):     sql_delete_unique = "DROP INDEX %(name)s"
0.53 /testbed/django/db/backends/sqlite3/schema.py(22):     def __enter__(self):
0.53 /testbed/django/db/backends/sqlite3/schema.py(35):     def __exit__(self, exc_type, exc_value, traceback):
0.53 /testbed/django/db/backends/sqlite3/schema.py(40):     def quote_value(self, value):
0.53 /testbed/django/db/backends/sqlite3/schema.py(68):     def prepare_default(self, value):
0.53 /testbed/django/db/backends/sqlite3/schema.py(71):     def _is_referenced_by_fk_constraint(self, table_name, column_name=None, ignore_self=False):
0.53 /testbed/django/db/backends/sqlite3/schema.py(89):     def alter_db_table(self, model, old_db_table, new_db_table, disable_constraints=True):
0.53 /testbed/django/db/backends/sqlite3/schema.py(104):     def alter_field(self, model, old_field, new_field, strict=False):
0.53 /testbed/django/db/backends/sqlite3/schema.py(145):     def _remake_table(self, model, create_field=None, delete_field=None, alter_field=None):
0.53 /testbed/django/db/backends/sqlite3/schema.py(312):     def delete_model(self, model, handle_autom2m=True):
0.53 /testbed/django/db/backends/sqlite3/schema.py(325):     def add_field(self, model, field):
0.53 /testbed/django/db/backends/sqlite3/schema.py(340):     def remove_field(self, model, field):
0.53 /testbed/django/db/backends/sqlite3/schema.py(358):     def _alter_field(self, model, old_field, new_field, old_type, new_type,
0.53 /testbed/django/db/backends/sqlite3/schema.py(394):     def _alter_many_to_many(self, model, old_field, new_field, strict):
0.53 /testbed/django/db/backends/sqlite3/schema.py(429):     def add_constraint(self, model, constraint):
0.53 /testbed/django/db/backends/sqlite3/schema.py(440):     def remove_constraint(self, model, constraint):
0.53 /testbed/django/db/backends/sqlite3/schema.py(451):     def _collate_sql(self, collation):
Found 1 test(s).
Operations to perform:
  Synchronize unmigrated apps: auth, contenttypes, messages, sessions, staticfiles
  Apply all migrations: admin, sites
Synchronizing apps without migrations:
  Creating tables...
0.57 /testbed/django/db/backends/sqlite3/schema.py(25):         if not self.connection.disable_constraint_checking():
0.57 /testbed/django/db/backends/sqlite3/schema.py(33):         return super().__enter__()
    Creating table django_content_type
    Creating table auth_permission
    Creating table auth_group
    Creating table auth_user
    Creating table django_session
    Running deferred SQL...
0.58 /testbed/django/db/backends/sqlite3/schema.py(36):         self.connection.check_constraints()
0.58 /testbed/django/db/backends/sqlite3/schema.py(37):         super().__exit__(exc_type, exc_value, traceback)
0.58 /testbed/django/db/backends/sqlite3/schema.py(38):         self.connection.enable_constraint_checking()
Running migrations:
0.58 /testbed/django/db/backends/sqlite3/schema.py(25):         if not self.connection.disable_constraint_checking():
0.58 /testbed/django/db/backends/sqlite3/schema.py(33):         return super().__enter__()
0.58 /testbed/django/db/backends/sqlite3/schema.py(36):         self.connection.check_constraints()
0.58 /testbed/django/db/backends/sqlite3/schema.py(37):         super().__exit__(exc_type, exc_value, traceback)
0.58 /testbed/django/db/backends/sqlite3/schema.py(38):         self.connection.enable_constraint_checking()
  Applying admin.0001_initial...0.58 /testbed/django/db/backends/sqlite3/schema.py(25):         if not self.connection.disable_constraint_checking():
0.58 /testbed/django/db/backends/sqlite3/schema.py(33):         return super().__enter__()
0.59 /testbed/django/db/backends/sqlite3/schema.py(36):         self.connection.check_constraints()
0.59 /testbed/django/db/backends/sqlite3/schema.py(37):         super().__exit__(exc_type, exc_value, traceback)
0.59 /testbed/django/db/backends/sqlite3/schema.py(38):         self.connection.enable_constraint_checking()
 OK
  Applying admin.0002_logentry_remove_auto_add...0.59 /testbed/django/db/backends/sqlite3/schema.py(25):         if not self.connection.disable_constraint_checking():
0.59 /testbed/django/db/backends/sqlite3/schema.py(33):         return super().__enter__()
0.59 /testbed/django/db/backends/sqlite3/schema.py(105):         if not self._field_should_be_altered(old_field, new_field):
0.59 /testbed/django/db/backends/sqlite3/schema.py(107):         old_field_name = old_field.name
0.59 /testbed/django/db/backends/sqlite3/schema.py(108):         table_name = model._meta.db_table
0.59 /testbed/django/db/backends/sqlite3/schema.py(109):         _, old_column_name = old_field.get_attname_column()
0.59 /testbed/django/db/backends/sqlite3/schema.py(110):         if (new_field.name != old_field_name and
0.59 /testbed/django/db/backends/sqlite3/schema.py(143):             super().alter_field(model, old_field, new_field, strict=strict)
0.59 /testbed/django/db/backends/sqlite3/schema.py(363):         if (self.connection.features.can_alter_table_rename_column and
0.59 /testbed/django/db/backends/sqlite3/schema.py(364):             old_field.column != new_field.column and
0.59 /testbed/django/db/backends/sqlite3/schema.py(363):         if (self.connection.features.can_alter_table_rename_column and
0.59 /testbed/django/db/backends/sqlite3/schema.py(370):         self._remake_table(model, alter_field=(old_field, new_field))
0.59 /testbed/django/db/backends/sqlite3/schema.py(164):         def is_self_referential(f):
0.59 /testbed/django/db/backends/sqlite3/schema.py(167):         body = {
0.59 /testbed/django/db/backends/sqlite3/schema.py(169):             for f in model._meta.local_concrete_fields
0.59 /testbed/django/db/backends/sqlite3/schema.py(167):         body = {
0.59 /testbed/django/db/backends/sqlite3/schema.py(167):         body = {
0.59 /testbed/django/db/backends/sqlite3/schema.py(169):             for f in model._meta.local_concrete_fields
0.59 /testbed/django/db/backends/sqlite3/schema.py(168):             f.name: f.clone() if is_self_referential(f) else f
0.59 /testbed/django/db/backends/sqlite3/schema.py(165):             return f.is_relation and f.remote_field.model is model
0.59 /testbed/django/db/backends/sqlite3/schema.py(167):         body = {
0.59 /testbed/django/db/backends/sqlite3/schema.py(169):             for f in model._meta.local_concrete_fields
0.59 /testbed/django/db/backends/sqlite3/schema.py(168):             f.name: f.clone() if is_self_referential(f) else f
0.59 /testbed/django/db/backends/sqlite3/schema.py(165):             return f.is_relation and f.remote_field.model is model
0.59 /testbed/django/db/backends/sqlite3/schema.py(167):         body = {
0.59 /testbed/django/db/backends/sqlite3/schema.py(169):             for f in model._meta.local_concrete_fields
0.59 /testbed/django/db/backends/sqlite3/schema.py(168):             f.name: f.clone() if is_self_referential(f) else f
0.59 /testbed/django/db/backends/sqlite3/schema.py(165):             return f.is_relation and f.remote_field.model is model
0.59 /testbed/django/db/backends/sqlite3/schema.py(167):         body = {
0.59 /testbed/django/db/backends/sqlite3/schema.py(169):             for f in model._meta.local_concrete_fields
0.59 /testbed/django/db/backends/sqlite3/schema.py(168):             f.name: f.clone() if is_self_referential(f) else f
0.59 /testbed/django/db/backends/sqlite3/schema.py(165):             return f.is_relation and f.remote_field.model is model
0.59 /testbed/django/db/backends/sqlite3/schema.py(167):         body = {
0.59 /testbed/django/db/backends/sqlite3/schema.py(169):             for f in model._meta.local_concrete_fields
0.59 /testbed/django/db/backends/sqlite3/schema.py(168):             f.name: f.clone() if is_self_referential(f) else f
0.59 /testbed/django/db/backends/sqlite3/schema.py(165):             return f.is_relation and f.remote_field.model is model
0.59 /testbed/django/db/backends/sqlite3/schema.py(167):         body = {
0.59 /testbed/django/db/backends/sqlite3/schema.py(169):             for f in model._meta.local_concrete_fields
0.59 /testbed/django/db/backends/sqlite3/schema.py(168):             f.name: f.clone() if is_self_referential(f) else f
0.59 /testbed/django/db/backends/sqlite3/schema.py(165):             return f.is_relation and f.remote_field.model is model
0.59 /testbed/django/db/backends/sqlite3/schema.py(167):         body = {
0.59 /testbed/django/db/backends/sqlite3/schema.py(169):             for f in model._meta.local_concrete_fields
0.59 /testbed/django/db/backends/sqlite3/schema.py(168):             f.name: f.clone() if is_self_referential(f) else f
0.59 /testbed/django/db/backends/sqlite3/schema.py(165):             return f.is_relation and f.remote_field.model is model
0.59 /testbed/django/db/backends/sqlite3/schema.py(167):         body = {
0.59 /testbed/django/db/backends/sqlite3/schema.py(169):             for f in model._meta.local_concrete_fields
0.59 /testbed/django/db/backends/sqlite3/schema.py(168):             f.name: f.clone() if is_self_referential(f) else f
0.59 /testbed/django/db/backends/sqlite3/schema.py(165):             return f.is_relation and f.remote_field.model is model
0.59 /testbed/django/db/backends/sqlite3/schema.py(167):         body = {
0.59 /testbed/django/db/backends/sqlite3/schema.py(173):         mapping = {f.column: self.quote_name(f.column) for f in model._meta.local_concrete_fields}
0.59 /testbed/django/db/backends/sqlite3/schema.py(173):         mapping = {f.column: self.quote_name(f.column) for f in model._meta.local_concrete_fields}
0.59 /testbed/django/db/backends/sqlite3/schema.py(173):         mapping = {f.column: self.quote_name(f.column) for f in model._meta.local_concrete_fields}
0.59 /testbed/django/db/backends/sqlite3/schema.py(173):         mapping = {f.column: self.quote_name(f.column) for f in model._meta.local_concrete_fields}
0.59 /testbed/django/db/backends/sqlite3/schema.py(173):         mapping = {f.column: self.quote_name(f.column) for f in model._meta.local_concrete_fields}
0.59 /testbed/django/db/backends/sqlite3/schema.py(173):         mapping = {f.column: self.quote_name(f.column) for f in model._meta.local_concrete_fields}
0.59 /testbed/django/db/backends/sqlite3/schema.py(173):         mapping = {f.column: self.quote_name(f.column) for f in model._meta.local_concrete_fields}
0.59 /testbed/django/db/backends/sqlite3/schema.py(173):         mapping = {f.column: self.quote_name(f.column) for f in model._meta.local_concrete_fields}
0.59 /testbed/django/db/backends/sqlite3/schema.py(173):         mapping = {f.column: self.quote_name(f.column) for f in model._meta.local_concrete_fields}
0.59 /testbed/django/db/backends/sqlite3/schema.py(173):         mapping = {f.column: self.quote_name(f.column) for f in model._meta.local_concrete_fields}
0.59 /testbed/django/db/backends/sqlite3/schema.py(175):         rename_mapping = {}
0.59 /testbed/django/db/backends/sqlite3/schema.py(178):         restore_pk_field = None
0.59 /testbed/django/db/backends/sqlite3/schema.py(179):         if getattr(create_field, 'primary_key', False) or (
0.59 /testbed/django/db/backends/sqlite3/schema.py(180):                 alter_field and getattr(alter_field[1], 'primary_key', False)):
0.59 /testbed/django/db/backends/sqlite3/schema.py(179):         if getattr(create_field, 'primary_key', False) or (
0.59 /testbed/django/db/backends/sqlite3/schema.py(180):                 alter_field and getattr(alter_field[1], 'primary_key', False)):
0.59 /testbed/django/db/backends/sqlite3/schema.py(179):         if getattr(create_field, 'primary_key', False) or (
0.59 /testbed/django/db/backends/sqlite3/schema.py(189):         if create_field:
0.59 /testbed/django/db/backends/sqlite3/schema.py(197):         if alter_field:
0.59 /testbed/django/db/backends/sqlite3/schema.py(198):             old_field, new_field = alter_field
0.59 /testbed/django/db/backends/sqlite3/schema.py(199):             body.pop(old_field.name, None)
0.59 /testbed/django/db/backends/sqlite3/schema.py(200):             mapping.pop(old_field.column, None)
0.59 /testbed/django/db/backends/sqlite3/schema.py(201):             body[new_field.name] = new_field
0.59 /testbed/django/db/backends/sqlite3/schema.py(202):             if old_field.null and not new_field.null:
0.59 /testbed/django/db/backends/sqlite3/schema.py(209):                 mapping[new_field.column] = self.quote_name(old_field.column)
0.59 /testbed/django/db/backends/sqlite3/schema.py(210):             rename_mapping[old_field.name] = new_field.name
0.59 /testbed/django/db/backends/sqlite3/schema.py(212):         if delete_field:
0.59 /testbed/django/db/backends/sqlite3/schema.py(219):         apps = Apps()
0.59 /testbed/django/db/backends/sqlite3/schema.py(223):         unique_together = [
0.59 /testbed/django/db/backends/sqlite3/schema.py(225):             for unique in model._meta.unique_together
0.59 /testbed/django/db/backends/sqlite3/schema.py(223):         unique_together = [
0.59 /testbed/django/db/backends/sqlite3/schema.py(223):         unique_together = [
0.59 /testbed/django/db/backends/sqlite3/schema.py(230):         index_together = [
0.59 /testbed/django/db/backends/sqlite3/schema.py(232):             for index in model._meta.index_together
0.59 /testbed/django/db/backends/sqlite3/schema.py(230):         index_together = [
0.59 /testbed/django/db/backends/sqlite3/schema.py(230):         index_together = [
0.59 /testbed/django/db/backends/sqlite3/schema.py(235):         indexes = model._meta.indexes
0.59 /testbed/django/db/backends/sqlite3/schema.py(236):         if delete_field:
0.59 /testbed/django/db/backends/sqlite3/schema.py(242):         constraints = list(model._meta.constraints)
0.59 /testbed/django/db/backends/sqlite3/schema.py(247):         body_copy = copy.deepcopy(body)
0.59 /testbed/django/db/backends/sqlite3/schema.py(255):             'app_label': model._meta.app_label,
0.59 /testbed/django/db/backends/sqlite3/schema.py(256):             'db_table': model._meta.db_table,
0.59 /testbed/django/db/backends/sqlite3/schema.py(257):             'unique_together': unique_together,
0.59 /testbed/django/db/backends/sqlite3/schema.py(258):             'index_together': index_together,
0.59 /testbed/django/db/backends/sqlite3/schema.py(259):             'indexes': indexes,
0.59 /testbed/django/db/backends/sqlite3/schema.py(260):             'constraints': constraints,
0.59 /testbed/django/db/backends/sqlite3/schema.py(261):             'apps': apps,
0.59 /testbed/django/db/backends/sqlite3/schema.py(254):         meta_contents = {
0.59 /testbed/django/db/backends/sqlite3/schema.py(263):         meta = type("Meta", (), meta_contents)
0.59 /testbed/django/db/backends/sqlite3/schema.py(264):         body_copy['Meta'] = meta
0.59 /testbed/django/db/backends/sqlite3/schema.py(265):         body_copy['__module__'] = model.__module__
0.59 /testbed/django/db/backends/sqlite3/schema.py(266):         type(model._meta.object_name, model.__bases__, body_copy)
0.59 /testbed/django/db/backends/sqlite3/schema.py(269):         body_copy = copy.deepcopy(body)
0.59 /testbed/django/db/backends/sqlite3/schema.py(271):             'app_label': model._meta.app_label,
0.59 /testbed/django/db/backends/sqlite3/schema.py(272):             'db_table': 'new__%s' % strip_quotes(model._meta.db_table),
0.59 /testbed/django/db/backends/sqlite3/schema.py(273):             'unique_together': unique_together,
0.59 /testbed/django/db/backends/sqlite3/schema.py(274):             'index_together': index_together,
0.59 /testbed/django/db/backends/sqlite3/schema.py(275):             'indexes': indexes,
0.59 /testbed/django/db/backends/sqlite3/schema.py(276):             'constraints': constraints,
0.59 /testbed/django/db/backends/sqlite3/schema.py(277):             'apps': apps,
0.59 /testbed/django/db/backends/sqlite3/schema.py(270):         meta_contents = {
0.59 /testbed/django/db/backends/sqlite3/schema.py(279):         meta = type("Meta", (), meta_contents)
0.59 /testbed/django/db/backends/sqlite3/schema.py(280):         body_copy['Meta'] = meta
0.59 /testbed/django/db/backends/sqlite3/schema.py(281):         body_copy['__module__'] = model.__module__
0.59 /testbed/django/db/backends/sqlite3/schema.py(282):         new_model = type('New%s' % model._meta.object_name, model.__bases__, body_copy)
0.59 /testbed/django/db/backends/sqlite3/schema.py(285):         self.create_model(new_model)
0.59 /testbed/django/db/backends/sqlite3/schema.py(288):         self.execute("INSERT INTO %s (%s) SELECT %s FROM %s" % (
0.59 /testbed/django/db/backends/sqlite3/schema.py(289):             self.quote_name(new_model._meta.db_table),
0.59 /testbed/django/db/backends/sqlite3/schema.py(290):             ', '.join(self.quote_name(x) for x in mapping),
0.59 /testbed/django/db/backends/sqlite3/schema.py(290):             ', '.join(self.quote_name(x) for x in mapping),
0.59 /testbed/django/db/backends/sqlite3/schema.py(290):             ', '.join(self.quote_name(x) for x in mapping),
0.59 /testbed/django/db/backends/sqlite3/schema.py(290):             ', '.join(self.quote_name(x) for x in mapping),
0.59 /testbed/django/db/backends/sqlite3/schema.py(290):             ', '.join(self.quote_name(x) for x in mapping),
0.59 /testbed/django/db/backends/sqlite3/schema.py(290):             ', '.join(self.quote_name(x) for x in mapping),
0.59 /testbed/django/db/backends/sqlite3/schema.py(290):             ', '.join(self.quote_name(x) for x in mapping),
0.59 /testbed/django/db/backends/sqlite3/schema.py(290):             ', '.join(self.quote_name(x) for x in mapping),
0.59 /testbed/django/db/backends/sqlite3/schema.py(290):             ', '.join(self.quote_name(x) for x in mapping),
0.59 /testbed/django/db/backends/sqlite3/schema.py(290):             ', '.join(self.quote_name(x) for x in mapping),
0.59 /testbed/django/db/backends/sqlite3/schema.py(291):             ', '.join(mapping.values()),
0.59 /testbed/django/db/backends/sqlite3/schema.py(292):             self.quote_name(model._meta.db_table),
0.59 /testbed/django/db/backends/sqlite3/schema.py(288):         self.execute("INSERT INTO %s (%s) SELECT %s FROM %s" % (
0.59 /testbed/django/db/backends/sqlite3/schema.py(296):         self.delete_model(model, handle_autom2m=False)
0.59 /testbed/django/db/backends/sqlite3/schema.py(313):         if handle_autom2m:
0.59 /testbed/django/db/backends/sqlite3/schema.py(317):             self.execute(self.sql_delete_table % {
0.59 /testbed/django/db/backends/sqlite3/schema.py(318):                 "table": self.quote_name(model._meta.db_table),
0.59 /testbed/django/db/backends/sqlite3/schema.py(317):             self.execute(self.sql_delete_table % {
0.59 /testbed/django/db/backends/sqlite3/schema.py(321):             for sql in list(self.deferred_sql):
0.59 /testbed/django/db/backends/sqlite3/schema.py(322):                 if isinstance(sql, Statement) and sql.references_table(model._meta.db_table):
0.59 /testbed/django/db/backends/sqlite3/schema.py(321):             for sql in list(self.deferred_sql):
0.59 /testbed/django/db/backends/sqlite3/schema.py(322):                 if isinstance(sql, Statement) and sql.references_table(model._meta.db_table):
0.59 /testbed/django/db/backends/sqlite3/schema.py(321):             for sql in list(self.deferred_sql):
0.59 /testbed/django/db/backends/sqlite3/schema.py(299):         self.alter_db_table(
0.59 /testbed/django/db/backends/sqlite3/schema.py(300):             new_model, new_model._meta.db_table, model._meta.db_table,
0.59 /testbed/django/db/backends/sqlite3/schema.py(301):             disable_constraints=False,
0.59 /testbed/django/db/backends/sqlite3/schema.py(299):         self.alter_db_table(
0.59 /testbed/django/db/backends/sqlite3/schema.py(90):         if (not self.connection.features.supports_atomic_references_rename and
0.59 /testbed/django/db/backends/sqlite3/schema.py(102):             super().alter_db_table(model, old_db_table, new_db_table)
0.59 /testbed/django/db/backends/sqlite3/schema.py(305):         for sql in self.deferred_sql:
0.59 /testbed/django/db/backends/sqlite3/schema.py(306):             self.execute(sql)
0.59 /testbed/django/db/backends/sqlite3/schema.py(305):         for sql in self.deferred_sql:
0.59 /testbed/django/db/backends/sqlite3/schema.py(306):             self.execute(sql)
0.59 /testbed/django/db/backends/sqlite3/schema.py(305):         for sql in self.deferred_sql:
0.59 /testbed/django/db/backends/sqlite3/schema.py(307):         self.deferred_sql = []
0.59 /testbed/django/db/backends/sqlite3/schema.py(309):         if restore_pk_field:
0.59 /testbed/django/db/backends/sqlite3/schema.py(372):         if new_field.unique and old_type != new_type:
0.59 /testbed/django/db/backends/sqlite3/schema.py(36):         self.connection.check_constraints()
0.59 /testbed/django/db/backends/sqlite3/schema.py(37):         super().__exit__(exc_type, exc_value, traceback)
0.59 /testbed/django/db/backends/sqlite3/schema.py(38):         self.connection.enable_constraint_checking()
 OK
  Applying admin.0003_logentry_add_action_flag_choices...0.59 /testbed/django/db/backends/sqlite3/schema.py(25):         if not self.connection.disable_constraint_checking():
0.59 /testbed/django/db/backends/sqlite3/schema.py(33):         return super().__enter__()
0.60 /testbed/django/db/backends/sqlite3/schema.py(105):         if not self._field_should_be_altered(old_field, new_field):
0.60 /testbed/django/db/backends/sqlite3/schema.py(107):         old_field_name = old_field.name
0.60 /testbed/django/db/backends/sqlite3/schema.py(108):         table_name = model._meta.db_table
0.60 /testbed/django/db/backends/sqlite3/schema.py(109):         _, old_column_name = old_field.get_attname_column()
0.60 /testbed/django/db/backends/sqlite3/schema.py(110):         if (new_field.name != old_field_name and
0.60 /testbed/django/db/backends/sqlite3/schema.py(143):             super().alter_field(model, old_field, new_field, strict=strict)
0.60 /testbed/django/db/backends/sqlite3/schema.py(363):         if (self.connection.features.can_alter_table_rename_column and
0.60 /testbed/django/db/backends/sqlite3/schema.py(364):             old_field.column != new_field.column and
0.60 /testbed/django/db/backends/sqlite3/schema.py(363):         if (self.connection.features.can_alter_table_rename_column and
0.60 /testbed/django/db/backends/sqlite3/schema.py(370):         self._remake_table(model, alter_field=(old_field, new_field))
0.60 /testbed/django/db/backends/sqlite3/schema.py(164):         def is_self_referential(f):
0.60 /testbed/django/db/backends/sqlite3/schema.py(167):         body = {
0.60 /testbed/django/db/backends/sqlite3/schema.py(169):             for f in model._meta.local_concrete_fields
0.60 /testbed/django/db/backends/sqlite3/schema.py(167):         body = {
0.60 /testbed/django/db/backends/sqlite3/schema.py(167):         body = {
0.60 /testbed/django/db/backends/sqlite3/schema.py(169):             for f in model._meta.local_concrete_fields
0.60 /testbed/django/db/backends/sqlite3/schema.py(168):             f.name: f.clone() if is_self_referential(f) else f
0.60 /testbed/django/db/backends/sqlite3/schema.py(165):             return f.is_relation and f.remote_field.model is model
0.60 /testbed/django/db/backends/sqlite3/schema.py(167):         body = {
0.60 /testbed/django/db/backends/sqlite3/schema.py(169):             for f in model._meta.local_concrete_fields
0.60 /testbed/django/db/backends/sqlite3/schema.py(168):             f.name: f.clone() if is_self_referential(f) else f
0.60 /testbed/django/db/backends/sqlite3/schema.py(165):             return f.is_relation and f.remote_field.model is model
0.60 /testbed/django/db/backends/sqlite3/schema.py(167):         body = {
0.60 /testbed/django/db/backends/sqlite3/schema.py(169):             for f in model._meta.local_concrete_fields
0.60 /testbed/django/db/backends/sqlite3/schema.py(168):             f.name: f.clone() if is_self_referential(f) else f
0.60 /testbed/django/db/backends/sqlite3/schema.py(165):             return f.is_relation and f.remote_field.model is model
0.60 /testbed/django/db/backends/sqlite3/schema.py(167):         body = {
0.60 /testbed/django/db/backends/sqlite3/schema.py(169):             for f in model._meta.local_concrete_fields
0.60 /testbed/django/db/backends/sqlite3/schema.py(168):             f.name: f.clone() if is_self_referential(f) else f
0.60 /testbed/django/db/backends/sqlite3/schema.py(165):             return f.is_relation and f.remote_field.model is model
0.60 /testbed/django/db/backends/sqlite3/schema.py(167):         body = {
0.60 /testbed/django/db/backends/sqlite3/schema.py(169):             for f in model._meta.local_concrete_fields
0.60 /testbed/django/db/backends/sqlite3/schema.py(168):             f.name: f.clone() if is_self_referential(f) else f
0.60 /testbed/django/db/backends/sqlite3/schema.py(165):             return f.is_relation and f.remote_field.model is model
0.60 /testbed/django/db/backends/sqlite3/schema.py(167):         body = {
0.60 /testbed/django/db/backends/sqlite3/schema.py(169):             for f in model._meta.local_concrete_fields
0.60 /testbed/django/db/backends/sqlite3/schema.py(168):             f.name: f.clone() if is_self_referential(f) else f
0.60 /testbed/django/db/backends/sqlite3/schema.py(165):             return f.is_relation and f.remote_field.model is model
0.60 /testbed/django/db/backends/sqlite3/schema.py(167):         body = {
0.60 /testbed/django/db/backends/sqlite3/schema.py(169):             for f in model._meta.local_concrete_fields
0.60 /testbed/django/db/backends/sqlite3/schema.py(168):             f.name: f.clone() if is_self_referential(f) else f
0.60 /testbed/django/db/backends/sqlite3/schema.py(165):             return f.is_relation and f.remote_field.model is model
0.60 /testbed/django/db/backends/sqlite3/schema.py(167):         body = {
0.60 /testbed/django/db/backends/sqlite3/schema.py(169):             for f in model._meta.local_concrete_fields
0.60 /testbed/django/db/backends/sqlite3/schema.py(168):             f.name: f.clone() if is_self_referential(f) else f
0.60 /testbed/django/db/backends/sqlite3/schema.py(165):             return f.is_relation and f.remote_field.model is model
0.60 /testbed/django/db/backends/sqlite3/schema.py(167):         body = {
0.60 /testbed/django/db/backends/sqlite3/schema.py(173):         mapping = {f.column: self.quote_name(f.column) for f in model._meta.local_concrete_fields}
0.60 /testbed/django/db/backends/sqlite3/schema.py(173):         mapping = {f.column: self.quote_name(f.column) for f in model._meta.local_concrete_fields}
0.60 /testbed/django/db/backends/sqlite3/schema.py(173):         mapping = {f.column: self.quote_name(f.column) for f in model._meta.local_concrete_fields}
0.60 /testbed/django/db/backends/sqlite3/schema.py(173):         mapping = {f.column: self.quote_name(f.column) for f in model._meta.local_concrete_fields}
0.60 /testbed/django/db/backends/sqlite3/schema.py(173):         mapping = {f.column: self.quote_name(f.column) for f in model._meta.local_concrete_fields}
0.60 /testbed/django/db/backends/sqlite3/schema.py(173):         mapping = {f.column: self.quote_name(f.column) for f in model._meta.local_concrete_fields}
0.60 /testbed/django/db/backends/sqlite3/schema.py(173):         mapping = {f.column: self.quote_name(f.column) for f in model._meta.local_concrete_fields}
0.60 /testbed/django/db/backends/sqlite3/schema.py(173):         mapping = {f.column: self.quote_name(f.column) for f in model._meta.local_concrete_fields}
0.60 /testbed/django/db/backends/sqlite3/schema.py(173):         mapping = {f.column: self.quote_name(f.column) for f in model._meta.local_concrete_fields}
0.60 /testbed/django/db/backends/sqlite3/schema.py(173):         mapping = {f.column: self.quote_name(f.column) for f in model._meta.local_concrete_fields}
0.60 /testbed/django/db/backends/sqlite3/schema.py(175):         rename_mapping = {}
0.60 /testbed/django/db/backends/sqlite3/schema.py(178):         restore_pk_field = None
0.60 /testbed/django/db/backends/sqlite3/schema.py(179):         if getattr(create_field, 'primary_key', False) or (
0.60 /testbed/django/db/backends/sqlite3/schema.py(180):                 alter_field and getattr(alter_field[1], 'primary_key', False)):
0.60 /testbed/django/db/backends/sqlite3/schema.py(179):         if getattr(create_field, 'primary_key', False) or (
0.60 /testbed/django/db/backends/sqlite3/schema.py(180):                 alter_field and getattr(alter_field[1], 'primary_key', False)):
0.60 /testbed/django/db/backends/sqlite3/schema.py(179):         if getattr(create_field, 'primary_key', False) or (
0.60 /testbed/django/db/backends/sqlite3/schema.py(189):         if create_field:
0.60 /testbed/django/db/backends/sqlite3/schema.py(197):         if alter_field:
0.60 /testbed/django/db/backends/sqlite3/schema.py(198):             old_field, new_field = alter_field
0.60 /testbed/django/db/backends/sqlite3/schema.py(199):             body.pop(old_field.name, None)
0.60 /testbed/django/db/backends/sqlite3/schema.py(200):             mapping.pop(old_field.column, None)
0.60 /testbed/django/db/backends/sqlite3/schema.py(201):             body[new_field.name] = new_field
0.60 /testbed/django/db/backends/sqlite3/schema.py(202):             if old_field.null and not new_field.null:
0.60 /testbed/django/db/backends/sqlite3/schema.py(209):                 mapping[new_field.column] = self.quote_name(old_field.column)
0.60 /testbed/django/db/backends/sqlite3/schema.py(210):             rename_mapping[old_field.name] = new_field.name
0.60 /testbed/django/db/backends/sqlite3/schema.py(212):         if delete_field:
0.60 /testbed/django/db/backends/sqlite3/schema.py(219):         apps = Apps()
0.60 /testbed/django/db/backends/sqlite3/schema.py(223):         unique_together = [
0.60 /testbed/django/db/backends/sqlite3/schema.py(225):             for unique in model._meta.unique_together
0.60 /testbed/django/db/backends/sqlite3/schema.py(223):         unique_together = [
0.60 /testbed/django/db/backends/sqlite3/schema.py(223):         unique_together = [
0.60 /testbed/django/db/backends/sqlite3/schema.py(230):         index_together = [
0.60 /testbed/django/db/backends/sqlite3/schema.py(232):             for index in model._meta.index_together
0.60 /testbed/django/db/backends/sqlite3/schema.py(230):         index_together = [
0.60 /testbed/django/db/backends/sqlite3/schema.py(230):         index_together = [
0.60 /testbed/django/db/backends/sqlite3/schema.py(235):         indexes = model._meta.indexes
0.60 /testbed/django/db/backends/sqlite3/schema.py(236):         if delete_field:
0.60 /testbed/django/db/backends/sqlite3/schema.py(242):         constraints = list(model._meta.constraints)
0.60 /testbed/django/db/backends/sqlite3/schema.py(247):         body_copy = copy.deepcopy(body)
0.60 /testbed/django/db/backends/sqlite3/schema.py(255):             'app_label': model._meta.app_label,
0.60 /testbed/django/db/backends/sqlite3/schema.py(256):             'db_table': model._meta.db_table,
0.60 /testbed/django/db/backends/sqlite3/schema.py(257):             'unique_together': unique_together,
0.60 /testbed/django/db/backends/sqlite3/schema.py(258):             'index_together': index_together,
0.60 /testbed/django/db/backends/sqlite3/schema.py(259):             'indexes': indexes,
0.60 /testbed/django/db/backends/sqlite3/schema.py(260):             'constraints': constraints,
0.60 /testbed/django/db/backends/sqlite3/schema.py(261):             'apps': apps,
0.60 /testbed/django/db/backends/sqlite3/schema.py(254):         meta_contents = {
0.60 /testbed/django/db/backends/sqlite3/schema.py(263):         meta = type("Meta", (), meta_contents)
0.60 /testbed/django/db/backends/sqlite3/schema.py(264):         body_copy['Meta'] = meta
0.60 /testbed/django/db/backends/sqlite3/schema.py(265):         body_copy['__module__'] = model.__module__
0.60 /testbed/django/db/backends/sqlite3/schema.py(266):         type(model._meta.object_name, model.__bases__, body_copy)
0.60 /testbed/django/db/backends/sqlite3/schema.py(269):         body_copy = copy.deepcopy(body)
0.60 /testbed/django/db/backends/sqlite3/schema.py(271):             'app_label': model._meta.app_label,
0.60 /testbed/django/db/backends/sqlite3/schema.py(272):             'db_table': 'new__%s' % strip_quotes(model._meta.db_table),
0.60 /testbed/django/db/backends/sqlite3/schema.py(273):             'unique_together': unique_together,
0.60 /testbed/django/db/backends/sqlite3/schema.py(274):             'index_together': index_together,
0.60 /testbed/django/db/backends/sqlite3/schema.py(275):             'indexes': indexes,
0.60 /testbed/django/db/backends/sqlite3/schema.py(276):             'constraints': constraints,
0.60 /testbed/django/db/backends/sqlite3/schema.py(277):             'apps': apps,
0.60 /testbed/django/db/backends/sqlite3/schema.py(270):         meta_contents = {
0.60 /testbed/django/db/backends/sqlite3/schema.py(279):         meta = type("Meta", (), meta_contents)
0.60 /testbed/django/db/backends/sqlite3/schema.py(280):         body_copy['Meta'] = meta
0.60 /testbed/django/db/backends/sqlite3/schema.py(281):         body_copy['__module__'] = model.__module__
0.60 /testbed/django/db/backends/sqlite3/schema.py(282):         new_model = type('New%s' % model._meta.object_name, model.__bases__, body_copy)
0.60 /testbed/django/db/backends/sqlite3/schema.py(285):         self.create_model(new_model)
0.60 /testbed/django/db/backends/sqlite3/schema.py(288):         self.execute("INSERT INTO %s (%s) SELECT %s FROM %s" % (
0.60 /testbed/django/db/backends/sqlite3/schema.py(289):             self.quote_name(new_model._meta.db_table),
0.60 /testbed/django/db/backends/sqlite3/schema.py(290):             ', '.join(self.quote_name(x) for x in mapping),
0.60 /testbed/django/db/backends/sqlite3/schema.py(290):             ', '.join(self.quote_name(x) for x in mapping),
0.60 /testbed/django/db/backends/sqlite3/schema.py(290):             ', '.join(self.quote_name(x) for x in mapping),
0.60 /testbed/django/db/backends/sqlite3/schema.py(290):             ', '.join(self.quote_name(x) for x in mapping),
0.60 /testbed/django/db/backends/sqlite3/schema.py(290):             ', '.join(self.quote_name(x) for x in mapping),
0.60 /testbed/django/db/backends/sqlite3/schema.py(290):             ', '.join(self.quote_name(x) for x in mapping),
0.60 /testbed/django/db/backends/sqlite3/schema.py(290):             ', '.join(self.quote_name(x) for x in mapping),
0.60 /testbed/django/db/backends/sqlite3/schema.py(290):             ', '.join(self.quote_name(x) for x in mapping),
0.60 /testbed/django/db/backends/sqlite3/schema.py(290):             ', '.join(self.quote_name(x) for x in mapping),
0.60 /testbed/django/db/backends/sqlite3/schema.py(290):             ', '.join(self.quote_name(x) for x in mapping),
0.60 /testbed/django/db/backends/sqlite3/schema.py(291):             ', '.join(mapping.values()),
0.60 /testbed/django/db/backends/sqlite3/schema.py(292):             self.quote_name(model._meta.db_table),
0.60 /testbed/django/db/backends/sqlite3/schema.py(288):         self.execute("INSERT INTO %s (%s) SELECT %s FROM %s" % (
0.60 /testbed/django/db/backends/sqlite3/schema.py(296):         self.delete_model(model, handle_autom2m=False)
0.60 /testbed/django/db/backends/sqlite3/schema.py(313):         if handle_autom2m:
0.60 /testbed/django/db/backends/sqlite3/schema.py(317):             self.execute(self.sql_delete_table % {
0.60 /testbed/django/db/backends/sqlite3/schema.py(318):                 "table": self.quote_name(model._meta.db_table),
0.60 /testbed/django/db/backends/sqlite3/schema.py(317):             self.execute(self.sql_delete_table % {
0.60 /testbed/django/db/backends/sqlite3/schema.py(321):             for sql in list(self.deferred_sql):
0.60 /testbed/django/db/backends/sqlite3/schema.py(322):                 if isinstance(sql, Statement) and sql.references_table(model._meta.db_table):
0.60 /testbed/django/db/backends/sqlite3/schema.py(321):             for sql in list(self.deferred_sql):
0.60 /testbed/django/db/backends/sqlite3/schema.py(322):                 if isinstance(sql, Statement) and sql.references_table(model._meta.db_table):
0.60 /testbed/django/db/backends/sqlite3/schema.py(321):             for sql in list(self.deferred_sql):
0.60 /testbed/django/db/backends/sqlite3/schema.py(299):         self.alter_db_table(
0.60 /testbed/django/db/backends/sqlite3/schema.py(300):             new_model, new_model._meta.db_table, model._meta.db_table,
0.60 /testbed/django/db/backends/sqlite3/schema.py(301):             disable_constraints=False,
0.60 /testbed/django/db/backends/sqlite3/schema.py(299):         self.alter_db_table(
0.60 /testbed/django/db/backends/sqlite3/schema.py(90):         if (not self.connection.features.supports_atomic_references_rename and
0.60 /testbed/django/db/backends/sqlite3/schema.py(102):             super().alter_db_table(model, old_db_table, new_db_table)
0.60 /testbed/django/db/backends/sqlite3/schema.py(305):         for sql in self.deferred_sql:
0.60 /testbed/django/db/backends/sqlite3/schema.py(306):             self.execute(sql)
0.60 /testbed/django/db/backends/sqlite3/schema.py(305):         for sql in self.deferred_sql:
0.60 /testbed/django/db/backends/sqlite3/schema.py(306):             self.execute(sql)
0.60 /testbed/django/db/backends/sqlite3/schema.py(305):         for sql in self.deferred_sql:
0.60 /testbed/django/db/backends/sqlite3/schema.py(307):         self.deferred_sql = []
0.60 /testbed/django/db/backends/sqlite3/schema.py(309):         if restore_pk_field:
0.60 /testbed/django/db/backends/sqlite3/schema.py(372):         if new_field.unique and old_type != new_type:
0.60 /testbed/django/db/backends/sqlite3/schema.py(36):         self.connection.check_constraints()
0.60 /testbed/django/db/backends/sqlite3/schema.py(37):         super().__exit__(exc_type, exc_value, traceback)
0.60 /testbed/django/db/backends/sqlite3/schema.py(38):         self.connection.enable_constraint_checking()
 OK
  Applying sites.0001_initial...0.60 /testbed/django/db/backends/sqlite3/schema.py(25):         if not self.connection.disable_constraint_checking():
0.60 /testbed/django/db/backends/sqlite3/schema.py(33):         return super().__enter__()
0.60 /testbed/django/db/backends/sqlite3/schema.py(36):         self.connection.check_constraints()
0.60 /testbed/django/db/backends/sqlite3/schema.py(37):         super().__exit__(exc_type, exc_value, traceback)
0.60 /testbed/django/db/backends/sqlite3/schema.py(38):         self.connection.enable_constraint_checking()
 OK
  Applying sites.0002_alter_domain_unique...0.60 /testbed/django/db/backends/sqlite3/schema.py(25):         if not self.connection.disable_constraint_checking():
0.60 /testbed/django/db/backends/sqlite3/schema.py(33):         return super().__enter__()
0.61 /testbed/django/db/backends/sqlite3/schema.py(105):         if not self._field_should_be_altered(old_field, new_field):
0.61 /testbed/django/db/backends/sqlite3/schema.py(107):         old_field_name = old_field.name
0.61 /testbed/django/db/backends/sqlite3/schema.py(108):         table_name = model._meta.db_table
0.61 /testbed/django/db/backends/sqlite3/schema.py(109):         _, old_column_name = old_field.get_attname_column()
0.61 /testbed/django/db/backends/sqlite3/schema.py(110):         if (new_field.name != old_field_name and
0.61 /testbed/django/db/backends/sqlite3/schema.py(143):             super().alter_field(model, old_field, new_field, strict=strict)
0.61 /testbed/django/db/backends/sqlite3/schema.py(363):         if (self.connection.features.can_alter_table_rename_column and
0.61 /testbed/django/db/backends/sqlite3/schema.py(364):             old_field.column != new_field.column and
0.61 /testbed/django/db/backends/sqlite3/schema.py(363):         if (self.connection.features.can_alter_table_rename_column and
0.61 /testbed/django/db/backends/sqlite3/schema.py(370):         self._remake_table(model, alter_field=(old_field, new_field))
0.61 /testbed/django/db/backends/sqlite3/schema.py(164):         def is_self_referential(f):
0.61 /testbed/django/db/backends/sqlite3/schema.py(167):         body = {
0.61 /testbed/django/db/backends/sqlite3/schema.py(169):             for f in model._meta.local_concrete_fields
0.61 /testbed/django/db/backends/sqlite3/schema.py(167):         body = {
0.61 /testbed/django/db/backends/sqlite3/schema.py(167):         body = {
0.61 /testbed/django/db/backends/sqlite3/schema.py(169):             for f in model._meta.local_concrete_fields
0.61 /testbed/django/db/backends/sqlite3/schema.py(168):             f.name: f.clone() if is_self_referential(f) else f
0.61 /testbed/django/db/backends/sqlite3/schema.py(165):             return f.is_relation and f.remote_field.model is model
0.61 /testbed/django/db/backends/sqlite3/schema.py(167):         body = {
0.61 /testbed/django/db/backends/sqlite3/schema.py(169):             for f in model._meta.local_concrete_fields
0.61 /testbed/django/db/backends/sqlite3/schema.py(168):             f.name: f.clone() if is_self_referential(f) else f
0.61 /testbed/django/db/backends/sqlite3/schema.py(165):             return f.is_relation and f.remote_field.model is model
0.61 /testbed/django/db/backends/sqlite3/schema.py(167):         body = {
0.61 /testbed/django/db/backends/sqlite3/schema.py(169):             for f in model._meta.local_concrete_fields
0.61 /testbed/django/db/backends/sqlite3/schema.py(168):             f.name: f.clone() if is_self_referential(f) else f
0.61 /testbed/django/db/backends/sqlite3/schema.py(165):             return f.is_relation and f.remote_field.model is model
0.61 /testbed/django/db/backends/sqlite3/schema.py(167):         body = {
0.61 /testbed/django/db/backends/sqlite3/schema.py(173):         mapping = {f.column: self.quote_name(f.column) for f in model._meta.local_concrete_fields}
0.61 /testbed/django/db/backends/sqlite3/schema.py(173):         mapping = {f.column: self.quote_name(f.column) for f in model._meta.local_concrete_fields}
0.61 /testbed/django/db/backends/sqlite3/schema.py(173):         mapping = {f.column: self.quote_name(f.column) for f in model._meta.local_concrete_fields}
0.61 /testbed/django/db/backends/sqlite3/schema.py(173):         mapping = {f.column: self.quote_name(f.column) for f in model._meta.local_concrete_fields}
0.61 /testbed/django/db/backends/sqlite3/schema.py(173):         mapping = {f.column: self.quote_name(f.column) for f in model._meta.local_concrete_fields}
0.61 /testbed/django/db/backends/sqlite3/schema.py(175):         rename_mapping = {}
0.61 /testbed/django/db/backends/sqlite3/schema.py(178):         restore_pk_field = None
0.61 /testbed/django/db/backends/sqlite3/schema.py(179):         if getattr(create_field, 'primary_key', False) or (
0.61 /testbed/django/db/backends/sqlite3/schema.py(180):                 alter_field and getattr(alter_field[1], 'primary_key', False)):
0.61 /testbed/django/db/backends/sqlite3/schema.py(179):         if getattr(create_field, 'primary_key', False) or (
0.61 /testbed/django/db/backends/sqlite3/schema.py(180):                 alter_field and getattr(alter_field[1], 'primary_key', False)):
0.61 /testbed/django/db/backends/sqlite3/schema.py(179):         if getattr(create_field, 'primary_key', False) or (
0.61 /testbed/django/db/backends/sqlite3/schema.py(189):         if create_field:
0.61 /testbed/django/db/backends/sqlite3/schema.py(197):         if alter_field:
0.61 /testbed/django/db/backends/sqlite3/schema.py(198):             old_field, new_field = alter_field
0.61 /testbed/django/db/backends/sqlite3/schema.py(199):             body.pop(old_field.name, None)
0.61 /testbed/django/db/backends/sqlite3/schema.py(200):             mapping.pop(old_field.column, None)
0.61 /testbed/django/db/backends/sqlite3/schema.py(201):             body[new_field.name] = new_field
0.61 /testbed/django/db/backends/sqlite3/schema.py(202):             if old_field.null and not new_field.null:
0.61 /testbed/django/db/backends/sqlite3/schema.py(209):                 mapping[new_field.column] = self.quote_name(old_field.column)
0.61 /testbed/django/db/backends/sqlite3/schema.py(210):             rename_mapping[old_field.name] = new_field.name
0.61 /testbed/django/db/backends/sqlite3/schema.py(212):         if delete_field:
0.61 /testbed/django/db/backends/sqlite3/schema.py(219):         apps = Apps()
0.61 /testbed/django/db/backends/sqlite3/schema.py(223):         unique_together = [
0.61 /testbed/django/db/backends/sqlite3/schema.py(225):             for unique in model._meta.unique_together
0.61 /testbed/django/db/backends/sqlite3/schema.py(223):         unique_together = [
0.61 /testbed/django/db/backends/sqlite3/schema.py(223):         unique_together = [
0.61 /testbed/django/db/backends/sqlite3/schema.py(230):         index_together = [
0.61 /testbed/django/db/backends/sqlite3/schema.py(232):             for index in model._meta.index_together
0.61 /testbed/django/db/backends/sqlite3/schema.py(230):         index_together = [
0.61 /testbed/django/db/backends/sqlite3/schema.py(230):         index_together = [
0.61 /testbed/django/db/backends/sqlite3/schema.py(235):         indexes = model._meta.indexes
0.61 /testbed/django/db/backends/sqlite3/schema.py(236):         if delete_field:
0.61 /testbed/django/db/backends/sqlite3/schema.py(242):         constraints = list(model._meta.constraints)
0.61 /testbed/django/db/backends/sqlite3/schema.py(247):         body_copy = copy.deepcopy(body)
0.61 /testbed/django/db/backends/sqlite3/schema.py(255):             'app_label': model._meta.app_label,
0.61 /testbed/django/db/backends/sqlite3/schema.py(256):             'db_table': model._meta.db_table,
0.61 /testbed/django/db/backends/sqlite3/schema.py(257):             'unique_together': unique_together,
0.61 /testbed/django/db/backends/sqlite3/schema.py(258):             'index_together': index_together,
0.61 /testbed/django/db/backends/sqlite3/schema.py(259):             'indexes': indexes,
0.61 /testbed/django/db/backends/sqlite3/schema.py(260):             'constraints': constraints,
0.61 /testbed/django/db/backends/sqlite3/schema.py(261):             'apps': apps,
0.61 /testbed/django/db/backends/sqlite3/schema.py(254):         meta_contents = {
0.61 /testbed/django/db/backends/sqlite3/schema.py(263):         meta = type("Meta", (), meta_contents)
0.61 /testbed/django/db/backends/sqlite3/schema.py(264):         body_copy['Meta'] = meta
0.61 /testbed/django/db/backends/sqlite3/schema.py(265):         body_copy['__module__'] = model.__module__
0.61 /testbed/django/db/backends/sqlite3/schema.py(266):         type(model._meta.object_name, model.__bases__, body_copy)
0.61 /testbed/django/db/backends/sqlite3/schema.py(269):         body_copy = copy.deepcopy(body)
0.61 Creating test database for alias 'other' ('file:memorydb_other?mode=memory&cache=shared')...
/testbed/django/db/backends/sqlite3/schema.py(271):             'app_label': model._meta.app_label,
0.61 /testbed/django/db/backends/sqlite3/schema.py(272):             'db_table': 'new__%s' % strip_quotes(model._meta.db_table),
0.61 /testbed/django/db/backends/sqlite3/schema.py(273):             'unique_together': unique_together,
0.61 /testbed/django/db/backends/sqlite3/schema.py(274):             'index_together': index_together,
0.61 /testbed/django/db/backends/sqlite3/schema.py(275):             'indexes': indexes,
0.61 /testbed/django/db/backends/sqlite3/schema.py(276):             'constraints': constraints,
0.61 /testbed/django/db/backends/sqlite3/schema.py(277):             'apps': apps,
0.61 /testbed/django/db/backends/sqlite3/schema.py(270):         meta_contents = {
0.61 /testbed/django/db/backends/sqlite3/schema.py(279):         meta = type("Meta", (), meta_contents)
0.61 /testbed/django/db/backends/sqlite3/schema.py(280):         body_copy['Meta'] = meta
0.61 /testbed/django/db/backends/sqlite3/schema.py(281):         body_copy['__module__'] = model.__module__
0.61 /testbed/django/db/backends/sqlite3/schema.py(282):         new_model = type('New%s' % model._meta.object_name, model.__bases__, body_copy)
0.61 /testbed/django/db/backends/sqlite3/schema.py(285):         self.create_model(new_model)
0.61 /testbed/django/db/backends/sqlite3/schema.py(288):         self.execute("INSERT INTO %s (%s) SELECT %s FROM %s" % (
0.61 /testbed/django/db/backends/sqlite3/schema.py(289):             self.quote_name(new_model._meta.db_table),
0.61 /testbed/django/db/backends/sqlite3/schema.py(290):             ', '.join(self.quote_name(x) for x in mapping),
0.61 /testbed/django/db/backends/sqlite3/schema.py(290):             ', '.join(self.quote_name(x) for x in mapping),
0.61 /testbed/django/db/backends/sqlite3/schema.py(290):             ', '.join(self.quote_name(x) for x in mapping),
0.61 /testbed/django/db/backends/sqlite3/schema.py(290):             ', '.join(self.quote_name(x) for x in mapping),
0.61 /testbed/django/db/backends/sqlite3/schema.py(290):             ', '.join(self.quote_name(x) for x in mapping),
0.61 /testbed/django/db/backends/sqlite3/schema.py(291):             ', '.join(mapping.values()),
0.61 /testbed/django/db/backends/sqlite3/schema.py(292):             self.quote_name(model._meta.db_table),
0.61 /testbed/django/db/backends/sqlite3/schema.py(288):         self.execute("INSERT INTO %s (%s) SELECT %s FROM %s" % (
0.61 /testbed/django/db/backends/sqlite3/schema.py(296):         self.delete_model(model, handle_autom2m=False)
0.61 /testbed/django/db/backends/sqlite3/schema.py(313):         if handle_autom2m:
0.61 /testbed/django/db/backends/sqlite3/schema.py(317):             self.execute(self.sql_delete_table % {
0.61 /testbed/django/db/backends/sqlite3/schema.py(318):                 "table": self.quote_name(model._meta.db_table),
0.61 /testbed/django/db/backends/sqlite3/schema.py(317):             self.execute(self.sql_delete_table % {
0.61 /testbed/django/db/backends/sqlite3/schema.py(321):             for sql in list(self.deferred_sql):
0.61 /testbed/django/db/backends/sqlite3/schema.py(299):         self.alter_db_table(
0.61 /testbed/django/db/backends/sqlite3/schema.py(300):             new_model, new_model._meta.db_table, model._meta.db_table,
0.61 /testbed/django/db/backends/sqlite3/schema.py(301):             disable_constraints=False,
0.61 /testbed/django/db/backends/sqlite3/schema.py(299):         self.alter_db_table(
0.61 /testbed/django/db/backends/sqlite3/schema.py(90):         if (not self.connection.features.supports_atomic_references_rename and
0.61 /testbed/django/db/backends/sqlite3/schema.py(102):             super().alter_db_table(model, old_db_table, new_db_table)
0.61 /testbed/django/db/backends/sqlite3/schema.py(305):         for sql in self.deferred_sql:
0.61 /testbed/django/db/backends/sqlite3/schema.py(307):         self.deferred_sql = []
0.61 /testbed/django/db/backends/sqlite3/schema.py(309):         if restore_pk_field:
0.61 /testbed/django/db/backends/sqlite3/schema.py(372):         if new_field.unique and old_type != new_type:
0.61 /testbed/django/db/backends/sqlite3/schema.py(36):         self.connection.check_constraints()
0.61 /testbed/django/db/backends/sqlite3/schema.py(37):         super().__exit__(exc_type, exc_value, traceback)
0.61 /testbed/django/db/backends/sqlite3/schema.py(38):         self.connection.enable_constraint_checking()
 OK
Operations to perform:
  Synchronize unmigrated apps: auth, contenttypes, messages, sessions, staticfiles
  Apply all migrations: admin, sites
Synchronizing apps without migrations:
  Creating tables...
0.65 /testbed/django/db/backends/sqlite3/schema.py(25):         if not self.connection.disable_constraint_checking():
0.65 /testbed/django/db/backends/sqlite3/schema.py(33):         return super().__enter__()
    Creating table django_content_type
    Creating table auth_permission
    Creating table auth_group
    Creating table auth_user
    Creating table django_session
    Running deferred SQL...
0.65 /testbed/django/db/backends/sqlite3/schema.py(36):         self.connection.check_constraints()
0.65 /testbed/django/db/backends/sqlite3/schema.py(37):         super().__exit__(exc_type, exc_value, traceback)
0.65 /testbed/django/db/backends/sqlite3/schema.py(38):         self.connection.enable_constraint_checking()
Running migrations:
0.65 /testbed/django/db/backends/sqlite3/schema.py(25):         if not self.connection.disable_constraint_checking():
0.65 /testbed/django/db/backends/sqlite3/schema.py(33):         return super().__enter__()
0.65 /testbed/django/db/backends/sqlite3/schema.py(36):         self.connection.check_constraints()
0.65 /testbed/django/db/backends/sqlite3/schema.py(37):         super().__exit__(exc_type, exc_value, traceback)
0.65 /testbed/django/db/backends/sqlite3/schema.py(38):         self.connection.enable_constraint_checking()
  Applying admin.0001_initial...0.65 /testbed/django/db/backends/sqlite3/schema.py(25):         if not self.connection.disable_constraint_checking():
0.65 /testbed/django/db/backends/sqlite3/schema.py(33):         return super().__enter__()
0.66 /testbed/django/db/backends/sqlite3/schema.py(36):         self.connection.check_constraints()
0.66 /testbed/django/db/backends/sqlite3/schema.py(37):         super().__exit__(exc_type, exc_value, traceback)
0.66 /testbed/django/db/backends/sqlite3/schema.py(38):         self.connection.enable_constraint_checking()
 OK
  Applying admin.0002_logentry_remove_auto_add...0.66 /testbed/django/db/backends/sqlite3/schema.py(25):         if not self.connection.disable_constraint_checking():
0.66 /testbed/django/db/backends/sqlite3/schema.py(33):         return super().__enter__()
0.66 /testbed/django/db/backends/sqlite3/schema.py(105):         if not self._field_should_be_altered(old_field, new_field):
0.66 /testbed/django/db/backends/sqlite3/schema.py(107):         old_field_name = old_field.name
0.66 /testbed/django/db/backends/sqlite3/schema.py(108):         table_name = model._meta.db_table
0.66 /testbed/django/db/backends/sqlite3/schema.py(109):         _, old_column_name = old_field.get_attname_column()
0.66 /testbed/django/db/backends/sqlite3/schema.py(110):         if (new_field.name != old_field_name and
0.66 /testbed/django/db/backends/sqlite3/schema.py(143):             super().alter_field(model, old_field, new_field, strict=strict)
0.66 /testbed/django/db/backends/sqlite3/schema.py(363):         if (self.connection.features.can_alter_table_rename_column and
0.66 /testbed/django/db/backends/sqlite3/schema.py(364):             old_field.column != new_field.column and
0.66 /testbed/django/db/backends/sqlite3/schema.py(363):         if (self.connection.features.can_alter_table_rename_column and
0.66 /testbed/django/db/backends/sqlite3/schema.py(370):         self._remake_table(model, alter_field=(old_field, new_field))
0.66 /testbed/django/db/backends/sqlite3/schema.py(164):         def is_self_referential(f):
0.66 /testbed/django/db/backends/sqlite3/schema.py(167):         body = {
0.66 /testbed/django/db/backends/sqlite3/schema.py(169):             for f in model._meta.local_concrete_fields
0.66 /testbed/django/db/backends/sqlite3/schema.py(167):         body = {
0.66 /testbed/django/db/backends/sqlite3/schema.py(167):         body = {
0.66 /testbed/django/db/backends/sqlite3/schema.py(169):             for f in model._meta.local_concrete_fields
0.66 /testbed/django/db/backends/sqlite3/schema.py(168):             f.name: f.clone() if is_self_referential(f) else f
0.66 /testbed/django/db/backends/sqlite3/schema.py(165):             return f.is_relation and f.remote_field.model is model
0.66 /testbed/django/db/backends/sqlite3/schema.py(167):         body = {
0.66 /testbed/django/db/backends/sqlite3/schema.py(169):             for f in model._meta.local_concrete_fields
0.66 /testbed/django/db/backends/sqlite3/schema.py(168):             f.name: f.clone() if is_self_referential(f) else f
0.66 /testbed/django/db/backends/sqlite3/schema.py(165):             return f.is_relation and f.remote_field.model is model
0.66 /testbed/django/db/backends/sqlite3/schema.py(167):         body = {
0.66 /testbed/django/db/backends/sqlite3/schema.py(169):             for f in model._meta.local_concrete_fields
0.66 /testbed/django/db/backends/sqlite3/schema.py(168):             f.name: f.clone() if is_self_referential(f) else f
0.66 /testbed/django/db/backends/sqlite3/schema.py(165):             return f.is_relation and f.remote_field.model is model
0.66 /testbed/django/db/backends/sqlite3/schema.py(167):         body = {
0.66 /testbed/django/db/backends/sqlite3/schema.py(169):             for f in model._meta.local_concrete_fields
0.66 /testbed/django/db/backends/sqlite3/schema.py(168):             f.name: f.clone() if is_self_referential(f) else f
0.66 /testbed/django/db/backends/sqlite3/schema.py(165):             return f.is_relation and f.remote_field.model is model
0.66 /testbed/django/db/backends/sqlite3/schema.py(167):         body = {
0.66 /testbed/django/db/backends/sqlite3/schema.py(169):             for f in model._meta.local_concrete_fields
0.66 /testbed/django/db/backends/sqlite3/schema.py(168):             f.name: f.clone() if is_self_referential(f) else f
0.66 /testbed/django/db/backends/sqlite3/schema.py(165):             return f.is_relation and f.remote_field.model is model
0.66 /testbed/django/db/backends/sqlite3/schema.py(167):         body = {
0.66 /testbed/django/db/backends/sqlite3/schema.py(169):             for f in model._meta.local_concrete_fields
0.66 /testbed/django/db/backends/sqlite3/schema.py(168):             f.name: f.clone() if is_self_referential(f) else f
0.66 /testbed/django/db/backends/sqlite3/schema.py(165):             return f.is_relation and f.remote_field.model is model
0.66 /testbed/django/db/backends/sqlite3/schema.py(167):         body = {
0.66 /testbed/django/db/backends/sqlite3/schema.py(169):             for f in model._meta.local_concrete_fields
0.66 /testbed/django/db/backends/sqlite3/schema.py(168):             f.name: f.clone() if is_self_referential(f) else f
0.66 /testbed/django/db/backends/sqlite3/schema.py(165):             return f.is_relation and f.remote_field.model is model
0.66 /testbed/django/db/backends/sqlite3/schema.py(167):         body = {
0.66 /testbed/django/db/backends/sqlite3/schema.py(169):             for f in model._meta.local_concrete_fields
0.66 /testbed/django/db/backends/sqlite3/schema.py(168):             f.name: f.clone() if is_self_referential(f) else f
0.66 /testbed/django/db/backends/sqlite3/schema.py(165):             return f.is_relation and f.remote_field.model is model
0.66 /testbed/django/db/backends/sqlite3/schema.py(167):         body = {
0.66 /testbed/django/db/backends/sqlite3/schema.py(173):         mapping = {f.column: self.quote_name(f.column) for f in model._meta.local_concrete_fields}
0.66 /testbed/django/db/backends/sqlite3/schema.py(173):         mapping = {f.column: self.quote_name(f.column) for f in model._meta.local_concrete_fields}
0.66 /testbed/django/db/backends/sqlite3/schema.py(173):         mapping = {f.column: self.quote_name(f.column) for f in model._meta.local_concrete_fields}
0.66 /testbed/django/db/backends/sqlite3/schema.py(173):         mapping = {f.column: self.quote_name(f.column) for f in model._meta.local_concrete_fields}
0.66 /testbed/django/db/backends/sqlite3/schema.py(173):         mapping = {f.column: self.quote_name(f.column) for f in model._meta.local_concrete_fields}
0.66 /testbed/django/db/backends/sqlite3/schema.py(173):         mapping = {f.column: self.quote_name(f.column) for f in model._meta.local_concrete_fields}
0.66 /testbed/django/db/backends/sqlite3/schema.py(173):         mapping = {f.column: self.quote_name(f.column) for f in model._meta.local_concrete_fields}
0.66 /testbed/django/db/backends/sqlite3/schema.py(173):         mapping = {f.column: self.quote_name(f.column) for f in model._meta.local_concrete_fields}
0.66 /testbed/django/db/backends/sqlite3/schema.py(173):         mapping = {f.column: self.quote_name(f.column) for f in model._meta.local_concrete_fields}
0.66 /testbed/django/db/backends/sqlite3/schema.py(173):         mapping = {f.column: self.quote_name(f.column) for f in model._meta.local_concrete_fields}
0.66 /testbed/django/db/backends/sqlite3/schema.py(175):         rename_mapping = {}
0.66 /testbed/django/db/backends/sqlite3/schema.py(178):         restore_pk_field = None
0.66 /testbed/django/db/backends/sqlite3/schema.py(179):         if getattr(create_field, 'primary_key', False) or (
0.66 /testbed/django/db/backends/sqlite3/schema.py(180):                 alter_field and getattr(alter_field[1], 'primary_key', False)):
0.66 /testbed/django/db/backends/sqlite3/schema.py(179):         if getattr(create_field, 'primary_key', False) or (
0.66 /testbed/django/db/backends/sqlite3/schema.py(180):                 alter_field and getattr(alter_field[1], 'primary_key', False)):
0.66 /testbed/django/db/backends/sqlite3/schema.py(179):         if getattr(create_field, 'primary_key', False) or (
0.66 /testbed/django/db/backends/sqlite3/schema.py(189):         if create_field:
0.66 /testbed/django/db/backends/sqlite3/schema.py(197):         if alter_field:
0.66 /testbed/django/db/backends/sqlite3/schema.py(198):             old_field, new_field = alter_field
0.66 /testbed/django/db/backends/sqlite3/schema.py(199):             body.pop(old_field.name, None)
0.66 /testbed/django/db/backends/sqlite3/schema.py(200):             mapping.pop(old_field.column, None)
0.66 /testbed/django/db/backends/sqlite3/schema.py(201):             body[new_field.name] = new_field
0.66 /testbed/django/db/backends/sqlite3/schema.py(202):             if old_field.null and not new_field.null:
0.66 /testbed/django/db/backends/sqlite3/schema.py(209):                 mapping[new_field.column] = self.quote_name(old_field.column)
0.66 /testbed/django/db/backends/sqlite3/schema.py(210):             rename_mapping[old_field.name] = new_field.name
0.66 /testbed/django/db/backends/sqlite3/schema.py(212):         if delete_field:
0.66 /testbed/django/db/backends/sqlite3/schema.py(219):         apps = Apps()
0.66 /testbed/django/db/backends/sqlite3/schema.py(223):         unique_together = [
0.66 /testbed/django/db/backends/sqlite3/schema.py(225):             for unique in model._meta.unique_together
0.66 /testbed/django/db/backends/sqlite3/schema.py(223):         unique_together = [
0.66 /testbed/django/db/backends/sqlite3/schema.py(223):         unique_together = [
0.66 /testbed/django/db/backends/sqlite3/schema.py(230):         index_together = [
0.66 /testbed/django/db/backends/sqlite3/schema.py(232):             for index in model._meta.index_together
0.66 /testbed/django/db/backends/sqlite3/schema.py(230):         index_together = [
0.66 /testbed/django/db/backends/sqlite3/schema.py(230):         index_together = [
0.66 /testbed/django/db/backends/sqlite3/schema.py(235):         indexes = model._meta.indexes
0.66 /testbed/django/db/backends/sqlite3/schema.py(236):         if delete_field:
0.66 /testbed/django/db/backends/sqlite3/schema.py(242):         constraints = list(model._meta.constraints)
0.66 /testbed/django/db/backends/sqlite3/schema.py(247):         body_copy = copy.deepcopy(body)
0.66 /testbed/django/db/backends/sqlite3/schema.py(255):             'app_label': model._meta.app_label,
0.66 /testbed/django/db/backends/sqlite3/schema.py(256):             'db_table': model._meta.db_table,
0.66 /testbed/django/db/backends/sqlite3/schema.py(257):             'unique_together': unique_together,
0.66 /testbed/django/db/backends/sqlite3/schema.py(258):             'index_together': index_together,
0.66 /testbed/django/db/backends/sqlite3/schema.py(259):             'indexes': indexes,
0.66 /testbed/django/db/backends/sqlite3/schema.py(260):             'constraints': constraints,
0.66 /testbed/django/db/backends/sqlite3/schema.py(261):             'apps': apps,
0.66 /testbed/django/db/backends/sqlite3/schema.py(254):         meta_contents = {
0.66 /testbed/django/db/backends/sqlite3/schema.py(263):         meta = type("Meta", (), meta_contents)
0.66 /testbed/django/db/backends/sqlite3/schema.py(264):         body_copy['Meta'] = meta
0.66 /testbed/django/db/backends/sqlite3/schema.py(265):         body_copy['__module__'] = model.__module__
0.66 /testbed/django/db/backends/sqlite3/schema.py(266):         type(model._meta.object_name, model.__bases__, body_copy)
0.66 /testbed/django/db/backends/sqlite3/schema.py(269):         body_copy = copy.deepcopy(body)
0.66 /testbed/django/db/backends/sqlite3/schema.py(271):             'app_label': model._meta.app_label,
0.66 /testbed/django/db/backends/sqlite3/schema.py(272):             'db_table': 'new__%s' % strip_quotes(model._meta.db_table),
0.66 /testbed/django/db/backends/sqlite3/schema.py(273):             'unique_together': unique_together,
0.66 /testbed/django/db/backends/sqlite3/schema.py(274):             'index_together': index_together,
0.66 /testbed/django/db/backends/sqlite3/schema.py(275):             'indexes': indexes,
0.66 /testbed/django/db/backends/sqlite3/schema.py(276):             'constraints': constraints,
0.66 /testbed/django/db/backends/sqlite3/schema.py(277):             'apps': apps,
0.66 /testbed/django/db/backends/sqlite3/schema.py(270):         meta_contents = {
0.66 /testbed/django/db/backends/sqlite3/schema.py(279):         meta = type("Meta", (), meta_contents)
0.66 /testbed/django/db/backends/sqlite3/schema.py(280):         body_copy['Meta'] = meta
0.66 /testbed/django/db/backends/sqlite3/schema.py(281):         body_copy['__module__'] = model.__module__
0.66 /testbed/django/db/backends/sqlite3/schema.py(282):         new_model = type('New%s' % model._meta.object_name, model.__bases__, body_copy)
0.66 /testbed/django/db/backends/sqlite3/schema.py(285):         self.create_model(new_model)
0.66 /testbed/django/db/backends/sqlite3/schema.py(288):         self.execute("INSERT INTO %s (%s) SELECT %s FROM %s" % (
0.66 /testbed/django/db/backends/sqlite3/schema.py(289):             self.quote_name(new_model._meta.db_table),
0.66 /testbed/django/db/backends/sqlite3/schema.py(290):             ', '.join(self.quote_name(x) for x in mapping),
0.66 /testbed/django/db/backends/sqlite3/schema.py(290):             ', '.join(self.quote_name(x) for x in mapping),
0.66 /testbed/django/db/backends/sqlite3/schema.py(290):             ', '.join(self.quote_name(x) for x in mapping),
0.66 /testbed/django/db/backends/sqlite3/schema.py(290):             ', '.join(self.quote_name(x) for x in mapping),
0.66 /testbed/django/db/backends/sqlite3/schema.py(290):             ', '.join(self.quote_name(x) for x in mapping),
0.66 /testbed/django/db/backends/sqlite3/schema.py(290):             ', '.join(self.quote_name(x) for x in mapping),
0.66 /testbed/django/db/backends/sqlite3/schema.py(290):             ', '.join(self.quote_name(x) for x in mapping),
0.66 /testbed/django/db/backends/sqlite3/schema.py(290):             ', '.join(self.quote_name(x) for x in mapping),
0.66 /testbed/django/db/backends/sqlite3/schema.py(290):             ', '.join(self.quote_name(x) for x in mapping),
0.66 /testbed/django/db/backends/sqlite3/schema.py(290):             ', '.join(self.quote_name(x) for x in mapping),
0.66 /testbed/django/db/backends/sqlite3/schema.py(291):             ', '.join(mapping.values()),
0.66 /testbed/django/db/backends/sqlite3/schema.py(292):             self.quote_name(model._meta.db_table),
0.66 /testbed/django/db/backends/sqlite3/schema.py(288):         self.execute("INSERT INTO %s (%s) SELECT %s FROM %s" % (
0.66 /testbed/django/db/backends/sqlite3/schema.py(296):         self.delete_model(model, handle_autom2m=False)
0.66 /testbed/django/db/backends/sqlite3/schema.py(313):         if handle_autom2m:
0.66 /testbed/django/db/backends/sqlite3/schema.py(317):             self.execute(self.sql_delete_table % {
0.66 /testbed/django/db/backends/sqlite3/schema.py(318):                 "table": self.quote_name(model._meta.db_table),
0.66 /testbed/django/db/backends/sqlite3/schema.py(317):             self.execute(self.sql_delete_table % {
0.66 /testbed/django/db/backends/sqlite3/schema.py(321):             for sql in list(self.deferred_sql):
0.66 /testbed/django/db/backends/sqlite3/schema.py(322):                 if isinstance(sql, Statement) and sql.references_table(model._meta.db_table):
0.66 /testbed/django/db/backends/sqlite3/schema.py(321):             for sql in list(self.deferred_sql):
0.66 /testbed/django/db/backends/sqlite3/schema.py(322):                 if isinstance(sql, Statement) and sql.references_table(model._meta.db_table):
0.66 /testbed/django/db/backends/sqlite3/schema.py(321):             for sql in list(self.deferred_sql):
0.66 /testbed/django/db/backends/sqlite3/schema.py(299):         self.alter_db_table(
0.66 /testbed/django/db/backends/sqlite3/schema.py(300):             new_model, new_model._meta.db_table, model._meta.db_table,
0.66 /testbed/django/db/backends/sqlite3/schema.py(301):             disable_constraints=False,
0.66 /testbed/django/db/backends/sqlite3/schema.py(299):         self.alter_db_table(
0.66 /testbed/django/db/backends/sqlite3/schema.py(90):         if (not self.connection.features.supports_atomic_references_rename and
0.66 /testbed/django/db/backends/sqlite3/schema.py(102):             super().alter_db_table(model, old_db_table, new_db_table)
0.66 /testbed/django/db/backends/sqlite3/schema.py(305):         for sql in self.deferred_sql:
0.66 /testbed/django/db/backends/sqlite3/schema.py(306):             self.execute(sql)
0.66 /testbed/django/db/backends/sqlite3/schema.py(305):         for sql in self.deferred_sql:
0.66 /testbed/django/db/backends/sqlite3/schema.py(306):             self.execute(sql)
0.66 /testbed/django/db/backends/sqlite3/schema.py(305):         for sql in self.deferred_sql:
0.66 /testbed/django/db/backends/sqlite3/schema.py(307):         self.deferred_sql = []
0.66 /testbed/django/db/backends/sqlite3/schema.py(309):         if restore_pk_field:
0.66 /testbed/django/db/backends/sqlite3/schema.py(372):         if new_field.unique and old_type != new_type:
0.66 /testbed/django/db/backends/sqlite3/schema.py(36):         self.connection.check_constraints()
0.66 /testbed/django/db/backends/sqlite3/schema.py(37):         super().__exit__(exc_type, exc_value, traceback)
0.66 /testbed/django/db/backends/sqlite3/schema.py(38):         self.connection.enable_constraint_checking()
 OK
  Applying admin.0003_logentry_add_action_flag_choices...0.67 /testbed/django/db/backends/sqlite3/schema.py(25):         if not self.connection.disable_constraint_checking():
0.67 /testbed/django/db/backends/sqlite3/schema.py(33):         return super().__enter__()
0.67 /testbed/django/db/backends/sqlite3/schema.py(105):         if not self._field_should_be_altered(old_field, new_field):
0.67 /testbed/django/db/backends/sqlite3/schema.py(107):         old_field_name = old_field.name
0.67 /testbed/django/db/backends/sqlite3/schema.py(108):         table_name = model._meta.db_table
0.67 /testbed/django/db/backends/sqlite3/schema.py(109):         _, old_column_name = old_field.get_attname_column()
0.67 /testbed/django/db/backends/sqlite3/schema.py(110):         if (new_field.name != old_field_name and
0.67 /testbed/django/db/backends/sqlite3/schema.py(143):             super().alter_field(model, old_field, new_field, strict=strict)
0.67 /testbed/django/db/backends/sqlite3/schema.py(363):         if (self.connection.features.can_alter_table_rename_column and
0.67 /testbed/django/db/backends/sqlite3/schema.py(364):             old_field.column != new_field.column and
0.67 /testbed/django/db/backends/sqlite3/schema.py(363):         if (self.connection.features.can_alter_table_rename_column and
0.67 /testbed/django/db/backends/sqlite3/schema.py(370):         self._remake_table(model, alter_field=(old_field, new_field))
0.67 /testbed/django/db/backends/sqlite3/schema.py(164):         def is_self_referential(f):
0.67 /testbed/django/db/backends/sqlite3/schema.py(167):         body = {
0.67 /testbed/django/db/backends/sqlite3/schema.py(169):             for f in model._meta.local_concrete_fields
0.67 /testbed/django/db/backends/sqlite3/schema.py(167):         body = {
0.67 /testbed/django/db/backends/sqlite3/schema.py(167):         body = {
0.67 /testbed/django/db/backends/sqlite3/schema.py(169):             for f in model._meta.local_concrete_fields
0.67 /testbed/django/db/backends/sqlite3/schema.py(168):             f.name: f.clone() if is_self_referential(f) else f
0.67 /testbed/django/db/backends/sqlite3/schema.py(165):             return f.is_relation and f.remote_field.model is model
0.67 /testbed/django/db/backends/sqlite3/schema.py(167):         body = {
0.67 /testbed/django/db/backends/sqlite3/schema.py(169):             for f in model._meta.local_concrete_fields
0.67 /testbed/django/db/backends/sqlite3/schema.py(168):             f.name: f.clone() if is_self_referential(f) else f
0.67 /testbed/django/db/backends/sqlite3/schema.py(165):             return f.is_relation and f.remote_field.model is model
0.67 /testbed/django/db/backends/sqlite3/schema.py(167):         body = {
0.67 /testbed/django/db/backends/sqlite3/schema.py(169):             for f in model._meta.local_concrete_fields
0.67 /testbed/django/db/backends/sqlite3/schema.py(168):             f.name: f.clone() if is_self_referential(f) else f
0.67 /testbed/django/db/backends/sqlite3/schema.py(165):             return f.is_relation and f.remote_field.model is model
0.67 /testbed/django/db/backends/sqlite3/schema.py(167):         body = {
0.67 /testbed/django/db/backends/sqlite3/schema.py(169):             for f in model._meta.local_concrete_fields
0.67 /testbed/django/db/backends/sqlite3/schema.py(168):             f.name: f.clone() if is_self_referential(f) else f
0.67 /testbed/django/db/backends/sqlite3/schema.py(165):             return f.is_relation and f.remote_field.model is model
0.67 /testbed/django/db/backends/sqlite3/schema.py(167):         body = {
0.67 /testbed/django/db/backends/sqlite3/schema.py(169):             for f in model._meta.local_concrete_fields
0.67 /testbed/django/db/backends/sqlite3/schema.py(168):             f.name: f.clone() if is_self_referential(f) else f
0.67 /testbed/django/db/backends/sqlite3/schema.py(165):             return f.is_relation and f.remote_field.model is model
0.67 /testbed/django/db/backends/sqlite3/schema.py(167):         body = {
0.67 /testbed/django/db/backends/sqlite3/schema.py(169):             for f in model._meta.local_concrete_fields
0.67 /testbed/django/db/backends/sqlite3/schema.py(168):             f.name: f.clone() if is_self_referential(f) else f
0.67 /testbed/django/db/backends/sqlite3/schema.py(165):             return f.is_relation and f.remote_field.model is model
0.67 /testbed/django/db/backends/sqlite3/schema.py(167):         body = {
0.67 /testbed/django/db/backends/sqlite3/schema.py(169):             for f in model._meta.local_concrete_fields
0.67 /testbed/django/db/backends/sqlite3/schema.py(168):             f.name: f.clone() if is_self_referential(f) else f
0.67 /testbed/django/db/backends/sqlite3/schema.py(165):             return f.is_relation and f.remote_field.model is model
0.67 /testbed/django/db/backends/sqlite3/schema.py(167):         body = {
0.67 /testbed/django/db/backends/sqlite3/schema.py(169):             for f in model._meta.local_concrete_fields
0.67 /testbed/django/db/backends/sqlite3/schema.py(168):             f.name: f.clone() if is_self_referential(f) else f
0.67 /testbed/django/db/backends/sqlite3/schema.py(165):             return f.is_relation and f.remote_field.model is model
0.67 /testbed/django/db/backends/sqlite3/schema.py(167):         body = {
0.67 /testbed/django/db/backends/sqlite3/schema.py(173):         mapping = {f.column: self.quote_name(f.column) for f in model._meta.local_concrete_fields}
0.67 /testbed/django/db/backends/sqlite3/schema.py(173):         mapping = {f.column: self.quote_name(f.column) for f in model._meta.local_concrete_fields}
0.67 /testbed/django/db/backends/sqlite3/schema.py(173):         mapping = {f.column: self.quote_name(f.column) for f in model._meta.local_concrete_fields}
0.67 /testbed/django/db/backends/sqlite3/schema.py(173):         mapping = {f.column: self.quote_name(f.column) for f in model._meta.local_concrete_fields}
0.67 /testbed/django/db/backends/sqlite3/schema.py(173):         mapping = {f.column: self.quote_name(f.column) for f in model._meta.local_concrete_fields}
0.67 /testbed/django/db/backends/sqlite3/schema.py(173):         mapping = {f.column: self.quote_name(f.column) for f in model._meta.local_concrete_fields}
0.67 /testbed/django/db/backends/sqlite3/schema.py(173):         mapping = {f.column: self.quote_name(f.column) for f in model._meta.local_concrete_fields}
0.67 /testbed/django/db/backends/sqlite3/schema.py(173):         mapping = {f.column: self.quote_name(f.column) for f in model._meta.local_concrete_fields}
0.67 /testbed/django/db/backends/sqlite3/schema.py(173):         mapping = {f.column: self.quote_name(f.column) for f in model._meta.local_concrete_fields}
0.67 /testbed/django/db/backends/sqlite3/schema.py(173):         mapping = {f.column: self.quote_name(f.column) for f in model._meta.local_concrete_fields}
0.67 /testbed/django/db/backends/sqlite3/schema.py(175):         rename_mapping = {}
0.67 /testbed/django/db/backends/sqlite3/schema.py(178):         restore_pk_field = None
0.67 /testbed/django/db/backends/sqlite3/schema.py(179):         if getattr(create_field, 'primary_key', False) or (
0.67 /testbed/django/db/backends/sqlite3/schema.py(180):                 alter_field and getattr(alter_field[1], 'primary_key', False)):
0.67 /testbed/django/db/backends/sqlite3/schema.py(179):         if getattr(create_field, 'primary_key', False) or (
0.67 /testbed/django/db/backends/sqlite3/schema.py(180):                 alter_field and getattr(alter_field[1], 'primary_key', False)):
0.67 /testbed/django/db/backends/sqlite3/schema.py(179):         if getattr(create_field, 'primary_key', False) or (
0.67 /testbed/django/db/backends/sqlite3/schema.py(189):         if create_field:
0.67 /testbed/django/db/backends/sqlite3/schema.py(197):         if alter_field:
0.67 /testbed/django/db/backends/sqlite3/schema.py(198):             old_field, new_field = alter_field
0.67 /testbed/django/db/backends/sqlite3/schema.py(199):             body.pop(old_field.name, None)
0.67 /testbed/django/db/backends/sqlite3/schema.py(200):             mapping.pop(old_field.column, None)
0.67 /testbed/django/db/backends/sqlite3/schema.py(201):             body[new_field.name] = new_field
0.67 /testbed/django/db/backends/sqlite3/schema.py(202):             if old_field.null and not new_field.null:
0.67 /testbed/django/db/backends/sqlite3/schema.py(209):                 mapping[new_field.column] = self.quote_name(old_field.column)
0.67 /testbed/django/db/backends/sqlite3/schema.py(210):             rename_mapping[old_field.name] = new_field.name
0.67 /testbed/django/db/backends/sqlite3/schema.py(212):         if delete_field:
0.67 /testbed/django/db/backends/sqlite3/schema.py(219):         apps = Apps()
0.67 /testbed/django/db/backends/sqlite3/schema.py(223):         unique_together = [
0.67 /testbed/django/db/backends/sqlite3/schema.py(225):             for unique in model._meta.unique_together
0.67 /testbed/django/db/backends/sqlite3/schema.py(223):         unique_together = [
0.67 /testbed/django/db/backends/sqlite3/schema.py(223):         unique_together = [
0.67 /testbed/django/db/backends/sqlite3/schema.py(230):         index_together = [
0.67 /testbed/django/db/backends/sqlite3/schema.py(232):             for index in model._meta.index_together
0.67 /testbed/django/db/backends/sqlite3/schema.py(230):         index_together = [
0.67 /testbed/django/db/backends/sqlite3/schema.py(230):         index_together = [
0.67 /testbed/django/db/backends/sqlite3/schema.py(235):         indexes = model._meta.indexes
0.67 /testbed/django/db/backends/sqlite3/schema.py(236):         if delete_field:
0.67 /testbed/django/db/backends/sqlite3/schema.py(242):         constraints = list(model._meta.constraints)
0.67 /testbed/django/db/backends/sqlite3/schema.py(247):         body_copy = copy.deepcopy(body)
0.67 /testbed/django/db/backends/sqlite3/schema.py(255):             'app_label': model._meta.app_label,
0.67 /testbed/django/db/backends/sqlite3/schema.py(256):             'db_table': model._meta.db_table,
0.67 /testbed/django/db/backends/sqlite3/schema.py(257):             'unique_together': unique_together,
0.67 /testbed/django/db/backends/sqlite3/schema.py(258):             'index_together': index_together,
0.67 /testbed/django/db/backends/sqlite3/schema.py(259):             'indexes': indexes,
0.67 /testbed/django/db/backends/sqlite3/schema.py(260):             'constraints': constraints,
0.67 /testbed/django/db/backends/sqlite3/schema.py(261):             'apps': apps,
0.67 /testbed/django/db/backends/sqlite3/schema.py(254):         meta_contents = {
0.67 /testbed/django/db/backends/sqlite3/schema.py(263):         meta = type("Meta", (), meta_contents)
0.67 /testbed/django/db/backends/sqlite3/schema.py(264):         body_copy['Meta'] = meta
0.67 /testbed/django/db/backends/sqlite3/schema.py(265):         body_copy['__module__'] = model.__module__
0.67 /testbed/django/db/backends/sqlite3/schema.py(266):         type(model._meta.object_name, model.__bases__, body_copy)
0.67 /testbed/django/db/backends/sqlite3/schema.py(269):         body_copy = copy.deepcopy(body)
0.67 /testbed/django/db/backends/sqlite3/schema.py(271):             'app_label': model._meta.app_label,
0.67 /testbed/django/db/backends/sqlite3/schema.py(272):             'db_table': 'new__%s' % strip_quotes(model._meta.db_table),
0.67 /testbed/django/db/backends/sqlite3/schema.py(273):             'unique_together': unique_together,
0.67 /testbed/django/db/backends/sqlite3/schema.py(274):             'index_together': index_together,
0.67 /testbed/django/db/backends/sqlite3/schema.py(275):             'indexes': indexes,
0.67 /testbed/django/db/backends/sqlite3/schema.py(276):             'constraints': constraints,
0.67 /testbed/django/db/backends/sqlite3/schema.py(277):             'apps': apps,
0.67 /testbed/django/db/backends/sqlite3/schema.py(270):         meta_contents = {
0.67 /testbed/django/db/backends/sqlite3/schema.py(279):         meta = type("Meta", (), meta_contents)
0.67 /testbed/django/db/backends/sqlite3/schema.py(280):         body_copy['Meta'] = meta
0.67 /testbed/django/db/backends/sqlite3/schema.py(281):         body_copy['__module__'] = model.__module__
0.67 /testbed/django/db/backends/sqlite3/schema.py(282):         new_model = type('New%s' % model._meta.object_name, model.__bases__, body_copy)
0.67 /testbed/django/db/backends/sqlite3/schema.py(285):         self.create_model(new_model)
0.67 /testbed/django/db/backends/sqlite3/schema.py(288):         self.execute("INSERT INTO %s (%s) SELECT %s FROM %s" % (
0.67 /testbed/django/db/backends/sqlite3/schema.py(289):             self.quote_name(new_model._meta.db_table),
0.67 /testbed/django/db/backends/sqlite3/schema.py(290):             ', '.join(self.quote_name(x) for x in mapping),
0.67 /testbed/django/db/backends/sqlite3/schema.py(290):             ', '.join(self.quote_name(x) for x in mapping),
0.67 /testbed/django/db/backends/sqlite3/schema.py(290):             ', '.join(self.quote_name(x) for x in mapping),
0.67 /testbed/django/db/backends/sqlite3/schema.py(290):             ', '.join(self.quote_name(x) for x in mapping),
0.67 /testbed/django/db/backends/sqlite3/schema.py(290):             ', '.join(self.quote_name(x) for x in mapping),
0.67 /testbed/django/db/backends/sqlite3/schema.py(290):             ', '.join(self.quote_name(x) for x in mapping),
0.67 /testbed/django/db/backends/sqlite3/schema.py(290):             ', '.join(self.quote_name(x) for x in mapping),
0.67 /testbed/django/db/backends/sqlite3/schema.py(290):             ', '.join(self.quote_name(x) for x in mapping),
0.67 /testbed/django/db/backends/sqlite3/schema.py(290):             ', '.join(self.quote_name(x) for x in mapping),
0.67 /testbed/django/db/backends/sqlite3/schema.py(290):             ', '.join(self.quote_name(x) for x in mapping),
0.67 /testbed/django/db/backends/sqlite3/schema.py(291):             ', '.join(mapping.values()),
0.67 /testbed/django/db/backends/sqlite3/schema.py(292):             self.quote_name(model._meta.db_table),
0.67 /testbed/django/db/backends/sqlite3/schema.py(288):         self.execute("INSERT INTO %s (%s) SELECT %s FROM %s" % (
0.67 /testbed/django/db/backends/sqlite3/schema.py(296):         self.delete_model(model, handle_autom2m=False)
0.67 /testbed/django/db/backends/sqlite3/schema.py(313):         if handle_autom2m:
0.67 /testbed/django/db/backends/sqlite3/schema.py(317):             self.execute(self.sql_delete_table % {
0.67 /testbed/django/db/backends/sqlite3/schema.py(318):                 "table": self.quote_name(model._meta.db_table),
0.67 /testbed/django/db/backends/sqlite3/schema.py(317):             self.execute(self.sql_delete_table % {
0.67 /testbed/django/db/backends/sqlite3/schema.py(321):             for sql in list(self.deferred_sql):
0.67 /testbed/django/db/backends/sqlite3/schema.py(322):                 if isinstance(sql, Statement) and sql.references_table(model._meta.db_table):
0.67 /testbed/django/db/backends/sqlite3/schema.py(321):             for sql in list(self.deferred_sql):
0.67 /testbed/django/db/backends/sqlite3/schema.py(322):                 if isinstance(sql, Statement) and sql.references_table(model._meta.db_table):
0.67 /testbed/django/db/backends/sqlite3/schema.py(321):             for sql in list(self.deferred_sql):
0.67 /testbed/django/db/backends/sqlite3/schema.py(299):         self.alter_db_table(
0.67 /testbed/django/db/backends/sqlite3/schema.py(300):             new_model, new_model._meta.db_table, model._meta.db_table,
0.67 /testbed/django/db/backends/sqlite3/schema.py(301):             disable_constraints=False,
0.67 /testbed/django/db/backends/sqlite3/schema.py(299):         self.alter_db_table(
0.67 /testbed/django/db/backends/sqlite3/schema.py(90):         if (not self.connection.features.supports_atomic_references_rename and
0.67 /testbed/django/db/backends/sqlite3/schema.py(102):             super().alter_db_table(model, old_db_table, new_db_table)
0.67 /testbed/django/db/backends/sqlite3/schema.py(305):         for sql in self.deferred_sql:
0.67 /testbed/django/db/backends/sqlite3/schema.py(306):             self.execute(sql)
0.67 /testbed/django/db/backends/sqlite3/schema.py(305):         for sql in self.deferred_sql:
0.67 /testbed/django/db/backends/sqlite3/schema.py(306):             self.execute(sql)
0.67 /testbed/django/db/backends/sqlite3/schema.py(305):         for sql in self.deferred_sql:
0.67 /testbed/django/db/backends/sqlite3/schema.py(307):         self.deferred_sql = []
0.67 /testbed/django/db/backends/sqlite3/schema.py(309):         if restore_pk_field:
0.67 /testbed/django/db/backends/sqlite3/schema.py(372):         if new_field.unique and old_type != new_type:
0.67 /testbed/django/db/backends/sqlite3/schema.py(36):         self.connection.check_constraints()
0.67 /testbed/django/db/backends/sqlite3/schema.py(37):         super().__exit__(exc_type, exc_value, traceback)
0.67 /testbed/django/db/backends/sqlite3/schema.py(38):         self.connection.enable_constraint_checking()
 OK
  Applying sites.0001_initial...0.67 /testbed/django/db/backends/sqlite3/schema.py(25):         if not self.connection.disable_constraint_checking():
0.67 /testbed/django/db/backends/sqlite3/schema.py(33):         return super().__enter__()
0.67 /testbed/django/db/backends/sqlite3/schema.py(36):         self.connection.check_constraints()
0.67 /testbed/django/db/backends/sqlite3/schema.py(37):         super().__exit__(exc_type, exc_value, traceback)
0.67 /testbed/django/db/backends/sqlite3/schema.py(38):         self.connection.enable_constraint_checking()
 OK
  Applying sites.0002_alter_domain_unique...0.67 /testbed/django/db/backends/sqlite3/schema.py(25):         if not self.connection.disable_constraint_checking():
0.67 /testbed/django/db/backends/sqlite3/schema.py(33):         return super().__enter__()
0.68 /testbed/django/db/backends/sqlite3/schema.py(105):         if not self._field_should_be_altered(old_field, new_field):
0.68 /testbed/django/db/backends/sqlite3/schema.py(107):         old_field_name = old_field.name
0.68 /testbed/django/db/backends/sqlite3/schema.py(108):         table_name = model._meta.db_table
0.68 /testbed/django/db/backends/sqlite3/schema.py(109):         _, old_column_name = old_field.get_attname_column()
0.68 /testbed/django/db/backends/sqlite3/schema.py(110):         if (new_field.name != old_field_name and
0.68 /testbed/django/db/backends/sqlite3/schema.py(143):             super().alter_field(model, old_field, new_field, strict=strict)
0.68 /testbed/django/db/backends/sqlite3/schema.py(363):         if (self.connection.features.can_alter_table_rename_column and
0.68 /testbed/django/db/backends/sqlite3/schema.py(364):             old_field.column != new_field.column and
0.68 /testbed/django/db/backends/sqlite3/schema.py(363):         if (self.connection.features.can_alter_table_rename_column and
0.68 /testbed/django/db/backends/sqlite3/schema.py(370):         self._remake_table(model, alter_field=(old_field, new_field))
0.68 /testbed/django/db/backends/sqlite3/schema.py(164):         def is_self_referential(f):
0.68 /testbed/django/db/backends/sqlite3/schema.py(167):         body = {
0.68 /testbed/django/db/backends/sqlite3/schema.py(169):             for f in model._meta.local_concrete_fields
0.68 /testbed/django/db/backends/sqlite3/schema.py(167):         body = {
0.68 /testbed/django/db/backends/sqlite3/schema.py(167):         body = {
0.68 /testbed/django/db/backends/sqlite3/schema.py(169):             for f in model._meta.local_concrete_fields
0.68 /testbed/django/db/backends/sqlite3/schema.py(168):             f.name: f.clone() if is_self_referential(f) else f
0.68 /testbed/django/db/backends/sqlite3/schema.py(165):             return f.is_relation and f.remote_field.model is model
0.68 /testbed/django/db/backends/sqlite3/schema.py(167):         body = {
0.68 /testbed/django/db/backends/sqlite3/schema.py(169):             for f in model._meta.local_concrete_fields
0.68 /testbed/django/db/backends/sqlite3/schema.py(168):             f.name: f.clone() if is_self_referential(f) else f
0.68 /testbed/django/db/backends/sqlite3/schema.py(165):             return f.is_relation and f.remote_field.model is model
0.68 /testbed/django/db/backends/sqlite3/schema.py(167):         body = {
0.68 /testbed/django/db/backends/sqlite3/schema.py(169):             for f in model._meta.local_concrete_fields
0.68 /testbed/django/db/backends/sqlite3/schema.py(168):             f.name: f.clone() if is_self_referential(f) else f
0.68 /testbed/django/db/backends/sqlite3/schema.py(165):             return f.is_relation and f.remote_field.model is model
0.68 /testbed/django/db/backends/sqlite3/schema.py(167):         body = {
0.68 /testbed/django/db/backends/sqlite3/schema.py(173):         mapping = {f.column: self.quote_name(f.column) for f in model._meta.local_concrete_fields}
0.68 /testbed/django/db/backends/sqlite3/schema.py(173):         mapping = {f.column: self.quote_name(f.column) for f in model._meta.local_concrete_fields}
0.68 /testbed/django/db/backends/sqlite3/schema.py(173):         mapping = {f.column: self.quote_name(f.column) for f in model._meta.local_concrete_fields}
0.68 /testbed/django/db/backends/sqlite3/schema.py(173):         mapping = {f.column: self.quote_name(f.column) for f in model._meta.local_concrete_fields}
0.68 /testbed/django/db/backends/sqlite3/schema.py(173):         mapping = {f.column: self.quote_name(f.column) for f in model._meta.local_concrete_fields}
0.68 /testbed/django/db/backends/sqlite3/schema.py(175):         rename_mapping = {}
0.68 /testbed/django/db/backends/sqlite3/schema.py(178):         restore_pk_field = None
0.68 /testbed/django/db/backends/sqlite3/schema.py(179):         if getattr(create_field, 'primary_key', False) or (
0.68 /testbed/django/db/backends/sqlite3/schema.py(180):                 alter_field and getattr(alter_field[1], 'primary_key', False)):
0.68 /testbed/django/db/backends/sqlite3/schema.py(179):         if getattr(create_field, 'primary_key', False) or (
0.68 /testbed/django/db/backends/sqlite3/schema.py(180):                 alter_field and getattr(alter_field[1], 'primary_key', False)):
0.68 /testbed/django/db/backends/sqlite3/schema.py(179):         if getattr(create_field, 'primary_key', False) or (
0.68 /testbed/django/db/backends/sqlite3/schema.py(189):         if create_field:
0.68 /testbed/django/db/backends/sqlite3/schema.py(197):         if alter_field:
0.68 /testbed/django/db/backends/sqlite3/schema.py(198):             old_field, new_field = alter_field
0.68 /testbed/django/db/backends/sqlite3/schema.py(199):             body.pop(old_field.name, None)
0.68 /testbed/django/db/backends/sqlite3/schema.py(200):             mapping.pop(old_field.column, None)
0.68 /testbed/django/db/backends/sqlite3/schema.py(201):             body[new_field.name] = new_field
0.68 /testbed/django/db/backends/sqlite3/schema.py(202):             if old_field.null and not new_field.null:
0.68 /testbed/django/db/backends/sqlite3/schema.py(209):                 mapping[new_field.column] = self.quote_name(old_field.column)
0.68 /testbed/django/db/backends/sqlite3/schema.py(210):             rename_mapping[old_field.name] = new_field.name
0.68 /testbed/django/db/backends/sqlite3/schema.py(212):         if delete_field:
0.68 /testbed/django/db/backends/sqlite3/schema.py(219):         apps = Apps()
0.68 /testbed/django/db/backends/sqlite3/schema.py(223):         unique_together = [
0.68 /testbed/django/db/backends/sqlite3/schema.py(225):             for unique in model._meta.unique_together
0.68 /testbed/django/db/backends/sqlite3/schema.py(223):         unique_together = [
0.68 /testbed/django/db/backends/sqlite3/schema.py(223):         unique_together = [
0.68 /testbed/django/db/backends/sqlite3/schema.py(230):         index_together = [
0.68 /testbed/django/db/backends/sqlite3/schema.py(232):             for index in model._meta.index_together
0.68 /testbed/django/db/backends/sqlite3/schema.py(230):         index_together = [
0.68 /testbed/django/db/backends/sqlite3/schema.py(230):         index_together = [
0.68 /testbed/django/db/backends/sqlite3/schema.py(235):         indexes = model._meta.indexes
0.68 /testbed/django/db/backends/sqlite3/schema.py(236):         if delete_field:
0.68 /testbed/django/db/backends/sqlite3/schema.py(242):         constraints = list(model._meta.constraints)
0.68 /testbed/django/db/backends/sqlite3/schema.py(247):         body_copy = copy.deepcopy(body)
0.68 /testbed/django/db/backends/sqlite3/schema.py(255):             'app_label': model._meta.app_label,
0.68 /testbed/django/db/backends/sqlite3/schema.py(256):             'db_table': model._meta.db_table,
0.68 /testbed/django/db/backends/sqlite3/schema.py(257):             'unique_together': unique_together,
0.68 /testbed/django/db/backends/sqlite3/schema.py(258):             'index_together': index_together,
0.68 /testbed/django/db/backends/sqlite3/schema.py(259):             'indexes': indexes,
0.68 /testbed/django/db/backends/sqlite3/schema.py(260):             'constraints': constraints,
0.68 /testbed/django/db/backends/sqlite3/schema.py(261):             'apps': apps,
0.68 /testbed/django/db/backends/sqlite3/schema.py(254):         meta_contents = {
0.68 /testbed/django/db/backends/sqlite3/schema.py(263):         meta = type("Meta", (), meta_contents)
0.68 /testbed/django/db/backends/sqlite3/schema.py(264):         body_copy['Meta'] = meta
0.68 /testbed/django/db/backends/sqlite3/schema.py(265):         body_copy['__module__'] = model.__module__
0.68 /testbed/django/db/backends/sqlite3/schema.py(266):         type(model._meta.object_name, model.__bases__, body_copy)
0.68 /testbed/django/db/backends/sqlite3/schema.py(269):         body_copy = copy.deepcopy(body)
0.68 /testbed/django/db/backends/sqlite3/schema.py(271):             'app_label': model._meta.app_label,
0.68 /testbed/django/db/backends/sqlite3/schema.py(272):             'db_table': 'new__%s' % strip_quotes(model._meta.db_table),
0.68 /testbed/django/db/backends/sqlite3/schema.py(273):             'unique_together': unique_together,
0.68 /testbed/django/db/backends/sqlite3/schema.py(274):             'index_together': index_together,
0.68 /testbed/django/db/backends/sqlite3/schema.py(275):             'indexes': indexes,
0.68 /testbed/django/db/backends/sqlite3/schema.py(276):             'constraints': constraints,
0.68 /testbed/django/db/backends/sqlite3/schema.py(277):             'apps': apps,
0.68 /testbed/django/db/backends/sqlite3/schema.py(270):         meta_contents = {
0.68 /testbed/django/db/backends/sqlite3/schema.py(279):         meta = type("Meta", (), meta_contents)
0.68 /testbed/django/db/backends/sqlite3/schema.py(280):         body_copy['Meta'] = meta
0.68 /testbed/django/db/backends/sqlite3/schema.py(281):         body_copy['__module__'] = model.__module__
0.68 /testbed/django/db/backends/sqlite3/schema.py(282):         new_model = type('New%s' % model._meta.object_name, model.__bases__, body_copy)
0.68 /testbed/django/db/backends/sqlite3/schema.py(285):         self.create_model(new_model)
0.68 /testbed/django/db/backends/sqlite3/schema.py(288):         self.execute("INSERT INTO %s (%s) SELECT %s FROM %s" % (
0.68 /testbed/django/db/backends/sqlite3/schema.py(289):             self.quote_name(new_model._meta.db_table),
0.68 /testbed/django/db/backends/sqlite3/schema.py(290):             ', '.join(self.quote_name(x) for x in mapping),
0.68 /testbed/django/db/backends/sqlite3/schema.py(290):             ', '.join(self.quote_name(x) for x in mapping),
0.68 /testbed/django/db/backends/sqlite3/schema.py(290):             ', '.join(self.quote_name(x) for x in mapping),
0.68 /testbed/django/db/backends/sqlite3/schema.py(290):             ', '.join(self.quote_name(x) for x in mapping),
0.68 /testbed/django/db/backends/sqlite3/schema.py(290):             ', '.join(self.quote_name(x) for x in mapping),
0.68 /testbed/django/db/backends/sqlite3/schema.py(291):             ', '.join(mapping.values()),
0.68 /testbed/django/db/backends/sqlite3/schema.py(292):             self.quote_name(model._meta.db_table),
0.68 /testbed/django/db/backends/sqlite3/schema.py(288):         self.execute("INSERT INTO %s (%s) SELECT %s FROM %s" % (
0.68 /testbed/django/db/backends/sqlite3/schema.py(296):         self.delete_model(model, handle_autom2m=False)
0.68 /testbed/django/db/backends/sqlite3/schema.py(313):         if handle_autom2m:
0.68 /testbed/django/db/backends/sqlite3/schema.py(317):             self.execute(self.sql_delete_table % {
0.68 /testbed/django/db/backends/sqlite3/schema.py(318):                 "table": self.quote_name(model._meta.db_table),
0.68 /testbed/django/db/backends/sqlite3/schema.py(317):             self.execute(self.sql_delete_table % {
0.68 /testbed/django/db/backends/sqlite3/schema.py(321):             for sql in list(self.deferred_sql):
0.68 /testbed/django/db/backends/sqlite3/schema.py(299):         self.alter_db_table(
0.68 /testbed/django/db/backends/sqlite3/schema.py(300):             new_model, new_model._meta.db_table, model._meta.db_table,
0.68 /testbed/django/db/backends/sqlite3/schema.py(301):             disable_constraints=False,
0.68 /testbed/django/db/backends/sqlite3/schema.py(299):         self.alter_db_table(
0.68 /testbed/django/db/backends/sqlite3/schema.py(90):         if (not self.connection.features.supports_atomic_references_rename and
0.68 /testbed/django/db/backends/sqlite3/schema.py(102):             super().alter_db_table(model, old_db_table, new_db_table)
0.68 /testbed/django/db/backends/sqlite3/schema.py(305):         for sql in self.deferred_sql:
0.68 /testbed/django/db/backends/sqlite3/schema.py(307):         self.deferred_sql = []
0.68 /testbed/django/db/backends/sqlite3/schema.py(309):         if restore_pk_field:
0.68 /testbed/django/db/backends/sqlite3/schema.py(372):         if new_field.unique and old_type != new_type:
0.68 /testbed/django/db/backends/sqlite3/schema.py(36):         self.connection.check_constraints()
0.68 /testbed/django/db/backends/sqlite3/schema.py(37):         super().__exit__(exc_type, exc_value, traceback)
0.68 /testbed/django/db/backends/sqlite3/schema.py(38):         self.connection.enable_constraint_checking()
 OK
System check identified no issues (0 silenced).
test_add_nullable_onetoonefield (test_coverup_django__django-15278.AddNullableOneToOneFieldTest) ... 0.75 /testbed/django/db/backends/sqlite3/schema.py(25):         if not self.connection.disable_constraint_checking():
0.75 /testbed/django/db/backends/sqlite3/schema.py(33):         return super().__enter__()
0.76 /testbed/django/db/backends/sqlite3/schema.py(36):         self.connection.check_constraints()
0.76 /testbed/django/db/backends/sqlite3/schema.py(37):         super().__exit__(exc_type, exc_value, traceback)
0.76 /testbed/django/db/backends/sqlite3/schema.py(38):         self.connection.enable_constraint_checking()
0.76 /testbed/django/db/backends/sqlite3/schema.py(25):         if not self.connection.disable_constraint_checking():
0.76 /testbed/django/db/backends/sqlite3/schema.py(33):         return super().__enter__()
0.76 /testbed/django/db/backends/sqlite3/schema.py(330):             field.primary_key or field.unique or
0.76 /testbed/django/db/backends/sqlite3/schema.py(327):         if (
0.76 /testbed/django/db/backends/sqlite3/schema.py(330):             field.primary_key or field.unique or
0.76 /testbed/django/db/backends/sqlite3/schema.py(327):         if (
0.76 /testbed/django/db/backends/sqlite3/schema.py(336):             self._remake_table(model, create_field=field)
0.76 /testbed/django/db/backends/sqlite3/schema.py(164):         def is_self_referential(f):
0.76 /testbed/django/db/backends/sqlite3/schema.py(167):         body = {
0.76 /testbed/django/db/backends/sqlite3/schema.py(169):             for f in model._meta.local_concrete_fields
0.76 /testbed/django/db/backends/sqlite3/schema.py(167):         body = {
0.76 /testbed/django/db/backends/sqlite3/schema.py(167):         body = {
0.76 /testbed/django/db/backends/sqlite3/schema.py(169):             for f in model._meta.local_concrete_fields
0.76 /testbed/django/db/backends/sqlite3/schema.py(168):             f.name: f.clone() if is_self_referential(f) else f
0.76 /testbed/django/db/backends/sqlite3/schema.py(165):             return f.is_relation and f.remote_field.model is model
0.76 /testbed/django/db/backends/sqlite3/schema.py(167):         body = {
0.76 /testbed/django/db/backends/sqlite3/schema.py(173):         mapping = {f.column: self.quote_name(f.column) for f in model._meta.local_concrete_fields}
0.76 /testbed/django/db/backends/sqlite3/schema.py(173):         mapping = {f.column: self.quote_name(f.column) for f in model._meta.local_concrete_fields}
0.76 /testbed/django/db/backends/sqlite3/schema.py(173):         mapping = {f.column: self.quote_name(f.column) for f in model._meta.local_concrete_fields}
0.76 /testbed/django/db/backends/sqlite3/schema.py(175):         rename_mapping = {}
0.76 /testbed/django/db/backends/sqlite3/schema.py(178):         restore_pk_field = None
0.76 /testbed/django/db/backends/sqlite3/schema.py(179):         if getattr(create_field, 'primary_key', False) or (
0.76 /testbed/django/db/backends/sqlite3/schema.py(180):                 alter_field and getattr(alter_field[1], 'primary_key', False)):
0.76 /testbed/django/db/backends/sqlite3/schema.py(179):         if getattr(create_field, 'primary_key', False) or (
0.76 /testbed/django/db/backends/sqlite3/schema.py(189):         if create_field:
0.76 /testbed/django/db/backends/sqlite3/schema.py(190):             body[create_field.name] = create_field
0.76 /testbed/django/db/backends/sqlite3/schema.py(192):             if not create_field.many_to_many and create_field.concrete:
0.76 /testbed/django/db/backends/sqlite3/schema.py(193):                 mapping[create_field.column] = self.prepare_default(
0.76 /testbed/django/db/backends/sqlite3/schema.py(194):                     self.effective_default(create_field),
0.76 /testbed/django/db/backends/sqlite3/schema.py(193):                 mapping[create_field.column] = self.prepare_default(
0.76 /testbed/django/db/backends/sqlite3/schema.py(69):         return self.quote_value(value)
0.76 /testbed/django/db/backends/sqlite3/schema.py(44):         try:
0.76 /testbed/django/db/backends/sqlite3/schema.py(45):             import sqlite3
0.76 /testbed/django/db/backends/sqlite3/schema.py(46):             value = sqlite3.adapt(value)
0.76 /testbed/django/db/backends/sqlite3/schema.py(47):         except ImportError:
0.76 /testbed/django/db/backends/sqlite3/schema.py(49):         except sqlite3.ProgrammingError:
0.76 /testbed/django/db/backends/sqlite3/schema.py(50):             pass
0.76 /testbed/django/db/backends/sqlite3/schema.py(52):         if isinstance(value, bool):
0.76 /testbed/django/db/backends/sqlite3/schema.py(54):         elif isinstance(value, (Decimal, float, int)):
0.76 /testbed/django/db/backends/sqlite3/schema.py(56):         elif isinstance(value, str):
0.76 /testbed/django/db/backends/sqlite3/schema.py(58):         elif value is None:
0.76 /testbed/django/db/backends/sqlite3/schema.py(59):             return "NULL"
0.76 /testbed/django/db/backends/sqlite3/schema.py(197):         if alter_field:
0.76 /testbed/django/db/backends/sqlite3/schema.py(212):         if delete_field:
0.76 /testbed/django/db/backends/sqlite3/schema.py(219):         apps = Apps()
0.76 /testbed/django/db/backends/sqlite3/schema.py(223):         unique_together = [
0.76 /testbed/django/db/backends/sqlite3/schema.py(225):             for unique in model._meta.unique_together
0.76 /testbed/django/db/backends/sqlite3/schema.py(223):         unique_together = [
0.76 /testbed/django/db/backends/sqlite3/schema.py(223):         unique_together = [
0.76 /testbed/django/db/backends/sqlite3/schema.py(230):         index_together = [
0.76 /testbed/django/db/backends/sqlite3/schema.py(232):             for index in model._meta.index_together
0.76 /testbed/django/db/backends/sqlite3/schema.py(230):         index_together = [
0.76 /testbed/django/db/backends/sqlite3/schema.py(230):         index_together = [
0.76 /testbed/django/db/backends/sqlite3/schema.py(235):         indexes = model._meta.indexes
0.76 /testbed/django/db/backends/sqlite3/schema.py(236):         if delete_field:
0.76 /testbed/django/db/backends/sqlite3/schema.py(242):         constraints = list(model._meta.constraints)
0.76 /testbed/django/db/backends/sqlite3/schema.py(247):         body_copy = copy.deepcopy(body)
0.76 /testbed/django/db/backends/sqlite3/schema.py(255):             'app_label': model._meta.app_label,
0.76 /testbed/django/db/backends/sqlite3/schema.py(256):             'db_table': model._meta.db_table,
0.76 /testbed/django/db/backends/sqlite3/schema.py(257):             'unique_together': unique_together,
0.76 /testbed/django/db/backends/sqlite3/schema.py(258):             'index_together': index_together,
0.76 /testbed/django/db/backends/sqlite3/schema.py(259):             'indexes': indexes,
0.76 /testbed/django/db/backends/sqlite3/schema.py(260):             'constraints': constraints,
0.76 /testbed/django/db/backends/sqlite3/schema.py(261):             'apps': apps,
0.76 /testbed/django/db/backends/sqlite3/schema.py(254):         meta_contents = {
0.76 /testbed/django/db/backends/sqlite3/schema.py(263):         meta = type("Meta", (), meta_contents)
0.76 /testbed/django/db/backends/sqlite3/schema.py(264):         body_copy['Meta'] = meta
0.76 /testbed/django/db/backends/sqlite3/schema.py(265):         body_copy['__module__'] = model.__module__
0.76 /testbed/django/db/backends/sqlite3/schema.py(266):         type(model._meta.object_name, model.__bases__, body_copy)
0.76 /testbed/django/db/backends/sqlite3/schema.py(269):         body_copy = copy.deepcopy(body)
0.76 /testbed/django/db/backends/sqlite3/schema.py(271):             'app_label': model._meta.app_label,
0.76 /testbed/django/db/backends/sqlite3/schema.py(272):             'db_table': 'new__%s' % strip_quotes(model._meta.db_table),
0.76 /testbed/django/db/backends/sqlite3/schema.py(273):             'unique_together': unique_together,
0.76 /testbed/django/db/backends/sqlite3/schema.py(274):             'index_together': index_together,
0.76 /testbed/django/db/backends/sqlite3/schema.py(275):             'indexes': indexes,
0.76 /testbed/django/db/backends/sqlite3/schema.py(276):             'constraints': constraints,
0.76 /testbed/django/db/backends/sqlite3/schema.py(277):             'apps': apps,
0.76 ok

----------------------------------------------------------------------
Ran 1 test in 0.014s

OK
Destroying test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
Destroying test database for alias 'other' ('file:memorydb_other?mode=memory&cache=shared')...
/testbed/django/db/backends/sqlite3/schema.py(270):         meta_contents = {
0.76 /testbed/django/db/backends/sqlite3/schema.py(279):         meta = type("Meta", (), meta_contents)
0.76 /testbed/django/db/backends/sqlite3/schema.py(280):         body_copy['Meta'] = meta
0.76 /testbed/django/db/backends/sqlite3/schema.py(281):         body_copy['__module__'] = model.__module__
0.76 /testbed/django/db/backends/sqlite3/schema.py(282):         new_model = type('New%s' % model._meta.object_name, model.__bases__, body_copy)
0.76 /testbed/django/db/backends/sqlite3/schema.py(285):         self.create_model(new_model)
0.76 /testbed/django/db/backends/sqlite3/schema.py(288):         self.execute("INSERT INTO %s (%s) SELECT %s FROM %s" % (
0.76 /testbed/django/db/backends/sqlite3/schema.py(289):             self.quote_name(new_model._meta.db_table),
0.76 /testbed/django/db/backends/sqlite3/schema.py(290):             ', '.join(self.quote_name(x) for x in mapping),
0.76 /testbed/django/db/backends/sqlite3/schema.py(290):             ', '.join(self.quote_name(x) for x in mapping),
0.76 /testbed/django/db/backends/sqlite3/schema.py(290):             ', '.join(self.quote_name(x) for x in mapping),
0.76 /testbed/django/db/backends/sqlite3/schema.py(290):             ', '.join(self.quote_name(x) for x in mapping),
0.76 /testbed/django/db/backends/sqlite3/schema.py(291):             ', '.join(mapping.values()),
0.76 /testbed/django/db/backends/sqlite3/schema.py(292):             self.quote_name(model._meta.db_table),
0.76 /testbed/django/db/backends/sqlite3/schema.py(288):         self.execute("INSERT INTO %s (%s) SELECT %s FROM %s" % (
0.76 /testbed/django/db/backends/sqlite3/schema.py(296):         self.delete_model(model, handle_autom2m=False)
0.76 /testbed/django/db/backends/sqlite3/schema.py(313):         if handle_autom2m:
0.76 /testbed/django/db/backends/sqlite3/schema.py(317):             self.execute(self.sql_delete_table % {
0.76 /testbed/django/db/backends/sqlite3/schema.py(318):                 "table": self.quote_name(model._meta.db_table),
0.76 /testbed/django/db/backends/sqlite3/schema.py(317):             self.execute(self.sql_delete_table % {
0.76 /testbed/django/db/backends/sqlite3/schema.py(321):             for sql in list(self.deferred_sql):
0.76 /testbed/django/db/backends/sqlite3/schema.py(299):         self.alter_db_table(
0.76 /testbed/django/db/backends/sqlite3/schema.py(300):             new_model, new_model._meta.db_table, model._meta.db_table,
0.76 /testbed/django/db/backends/sqlite3/schema.py(301):             disable_constraints=False,
0.76 /testbed/django/db/backends/sqlite3/schema.py(299):         self.alter_db_table(
0.76 /testbed/django/db/backends/sqlite3/schema.py(90):         if (not self.connection.features.supports_atomic_references_rename and
0.76 /testbed/django/db/backends/sqlite3/schema.py(102):             super().alter_db_table(model, old_db_table, new_db_table)
0.76 /testbed/django/db/backends/sqlite3/schema.py(305):         for sql in self.deferred_sql:
0.76 /testbed/django/db/backends/sqlite3/schema.py(307):         self.deferred_sql = []
0.76 /testbed/django/db/backends/sqlite3/schema.py(309):         if restore_pk_field:
0.76 /testbed/django/db/backends/sqlite3/schema.py(36):         self.connection.check_constraints()
0.76 /testbed/django/db/backends/sqlite3/schema.py(37):         super().__exit__(exc_type, exc_value, traceback)
0.76 /testbed/django/db/backends/sqlite3/schema.py(38):         self.connection.enable_constraint_checking()
+ cat coverage.cover
{"/testbed/django/db/backends/sqlite3/schema.py": {"1": 1, "2": 1, "4": 1, "5": 1, "6": 1, "7": 1, "8": 1, "9": 1, "10": 1, "13": 2, "15": 1, "16": 1, "17": 1, "18": 1, "19": 1, "20": 1, "22": 1, "35": 1, "40": 1, "68": 1, "71": 1, "89": 1, "104": 1, "145": 1, "312": 1, "325": 1, "340": 1, "358": 1, "394": 1, "429": 1, "440": 1, "451": 1, "25": 16, "26": 0, "27": 0, "33": 16, "36": 16, "37": 16, "38": 16, "44": 1, "45": 1, "46": 1, "47": 1, "48": 0, "49": 1, "50": 1, "52": 1, "53": 0, "54": 1, "55": 0, "56": 1, "57": 0, "58": 1, "59": 1, "60": 0, "64": 0, "66": 0, "69": 1, "78": 0, "79": 0, "80": 0, "81": 0, "82": 0, "83": 0, "84": 0, "85": 0, "86": 0, "87": 0, "90": 7, "91": 0, "92": 0, "93": 0, "94": 0, "97": 0, "98": 0, "99": 0, "100": 0, "102": 7, "105": 6, "106": 0, "107": 6, "108": 6, "109": 6, "110": 6, "111": 0, "112": 0, "113": 0, "114": 0, "115": 0, "118": 0, "119": 0, "120": 0, "124": 0, "125": 0, "126": 0, "127": 0, "128": 0, "129": 0, "130": 0, "131": 0, "132": 0, "133": 0, "137": 0, "140": 0, "141": 0, "143": 6, "164": 7, "167": 60, "169": 46, "173": 53, "175": 7, "178": 7, "179": 20, "180": 13, "181": 0, "182": 0, "183": 0, "184": 0, "185": 0, "186": 0, "187": 0, "189": 7, "190": 1, "192": 1, "193": 2, "194": 1, "197": 7, "198": 6, "199": 6, "200": 6, "201": 6, "202": 6, "203": 0, "204": 0, "205": 0, "207": 0, "209": 6, "210": 6, "212": 7, "213": 0, "214": 0, "216": 0, "217": 0, "219": 7, "223": 21, "225": 7, "230": 21, "232": 7, "235": 7, "236": 7, "237": 0, "238": 0, "242": 7, "247": 7, "255": 7, "256": 7, "257": 7, "258": 7, "259": 7, "260": 7, "261": 7, "254": 7, "263": 7, "264": 7, "265": 7, "266": 7, "269": 7, "271": 7, "272": 7, "273": 7, "274": 7, "275": 7, "276": 7, "277": 7, "270": 7, "279": 7, "280": 7, "281": 7, "282": 7, "285": 7, "288": 14, "289": 7, "290": 54, "291": 7, "292": 7, "296": 7, "299": 14, "300": 7, "301": 7, "305": 15, "306": 8, "307": 7, "309": 7, "310": 0, "165": 39, "168": 39, "224": 0, "231": 0, "239": 0, "313": 7, "314": 0, "317": 14, "318": 7, "321": 15, "322": 8, "323": 0, "330": 2, "327": 2, "334": 0, "336": 1, "338": 0, "346": 0, "348": 0, "349": 0, "354": 0, "355": 0, "356": 0, "363": 12, "364": 6, "365": 0, "366": 0, "367": 0, "368": 0, "370": 6, "372": 6, "373": 0, "374": 0, "375": 0, "377": 0, "378": 0, "379": 0, "380": 0, "381": 0, "382": 0, "383": 0, "384": 0, "385": 0, "387": 0, "388": 0, "389": 0, "390": 0, "391": 0, "392": 0, "396": 0, "398": 0, "399": 0, "403": 0, "404": 0, "400": 0, "407": 0, "410": 0, "412": 0, "413": 0, "414": 0, "415": 0, "416": 0, "417": 0, "419": 0, "420": 0, "421": 0, "422": 0, "424": 0, "427": 0, "430": 0, "431": 0, "432": 0, "433": 0, "434": 0, "436": 0, "438": 0, "441": 0, "442": 0, "443": 0, "444": 0, "445": 0, "447": 0, "449": 0, "452": 0}}
+ git checkout 0ab58c120939093fea90822f376e1866fc714d1f
Note: switching to '0ab58c120939093fea90822f376e1866fc714d1f'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at 0ab58c1209 Refs #29026 -- Allowed customizing InteractiveMigrationQuestioner's prompt destination.
M	django/db/backends/sqlite3/schema.py
+ git apply /root/pre_state.patch
error: unrecognized input
