+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD c935e1d106743efd5bf0705fbeedbd18fadff4dc
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch master
nothing to commit, working tree clean
+ git show
commit c935e1d106743efd5bf0705fbeedbd18fadff4dc
Merge: b9adfc7de3 9a96bdadf7
Author: Chris Smith <smichr@gmail.com>
Date:   Sat Jan 6 08:03:46 2018 -0600

    Merge pull request #13846 from smichr/segment
    
    directed segments, self-intersecting poly

+ git diff c935e1d106743efd5bf0705fbeedbd18fadff4dc
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Requirement already satisfied: mpmath>=0.19 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from sympy==1.1.2.dev0) (1.3.0)
Installing collected packages: sympy
  Attempting uninstall: sympy
    Found existing installation: sympy 1.1.2.dev0
    Uninstalling sympy-1.1.2.dev0:
      Successfully uninstalled sympy-1.1.2.dev0
  DEPRECATION: Legacy editable install of sympy==1.1.2.dev0 from file:///testbed (setup.py develop) is deprecated. pip 25.3 will enforce this behaviour change. A possible replacement is to add a pyproject.toml or enable --use-pep517, and use setuptools >= 64. If the resulting installation is not behaving as expected, try using --config-settings editable_mode=compat. Please consult the setuptools documentation for more information. Discussion can be found at https://github.com/pypa/pip/issues/11457
  Running setup.py develop for sympy
Successfully installed sympy
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git apply -v -
Checking patch sympy/functions/special/zeta_functions.py...
Applied patch sympy/functions/special/zeta_functions.py cleanly.
+ git apply -v -
<stdin>:15: trailing whitespace.
    
<stdin>:19: trailing whitespace.
    
Checking patch sympy/polys/tests/test_coverup_sympy__sympy-13852.py...
<stdin>:22: new blank line at EOF.
+
Applied patch sympy/polys/tests/test_coverup_sympy__sympy-13852.py cleanly.
warning: 3 lines add whitespace errors.
+ PYTHONWARNINGS=ignore::UserWarning,ignore::SyntaxWarning
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(sympy/functions/special/zeta_functions\.py)' bin/test -C --verbose sympy/polys/tests/test_coverup_sympy__sympy-13852.p
/testbed/sympy/core/basic.py:3: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
  from collections import Mapping, defaultdict
/testbed/sympy/core/containers.py:271: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
  class OrderedSet(collections.MutableSet):
/testbed/sympy/plotting/plot.py:28: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
  from collections import Callable
/testbed/sympy/core/basic.py:3: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
  from collections import Mapping, defaultdict
/testbed/sympy/core/containers.py:271: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
  class OrderedSet(collections.MutableSet):
/testbed/sympy/plotting/plot.py:28: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
  from collections import Callable
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(sympy/functions/special/zeta_functions\\.py)']
0.26 /testbed/sympy/functions/special/zeta_functions.py(1): """ Riemann zeta and related function. """
0.26 /testbed/sympy/functions/special/zeta_functions.py(2): from __future__ import print_function, division
0.26 /testbed/sympy/functions/special/zeta_functions.py(4): from sympy.core import Function, S, sympify, pi, I
0.26 /testbed/sympy/functions/special/zeta_functions.py(5): from sympy.core.function import ArgumentIndexError
0.26 /testbed/sympy/functions/special/zeta_functions.py(6): from sympy.core.compatibility import range
0.26 /testbed/sympy/functions/special/zeta_functions.py(7): from sympy.functions.combinatorial.numbers import bernoulli, factorial, harmonic
0.26 /testbed/sympy/functions/special/zeta_functions.py(8): from sympy.functions.elementary.exponential import log
0.26 /testbed/sympy/functions/special/zeta_functions.py(9): from sympy.functions.elementary.miscellaneous import sqrt
0.26 /testbed/sympy/functions/special/zeta_functions.py(16): class lerchphi(Function):
0.26 /testbed/sympy/functions/special/zeta_functions.py(16): class lerchphi(Function):
0.26 /testbed/sympy/functions/special/zeta_functions.py(17):     r"""
0.26 /testbed/sympy/functions/special/zeta_functions.py(118):     def _eval_expand_func(self, **hints):
0.26 /testbed/sympy/functions/special/zeta_functions.py(179):     def fdiff(self, argindex=1):
0.26 /testbed/sympy/functions/special/zeta_functions.py(188):     def _eval_rewrite_helper(self, z, s, a, target):
0.26 /testbed/sympy/functions/special/zeta_functions.py(195):     def _eval_rewrite_as_zeta(self, z, s, a):
0.26 /testbed/sympy/functions/special/zeta_functions.py(198):     def _eval_rewrite_as_polylog(self, z, s, a):
0.26 /testbed/sympy/functions/special/zeta_functions.py(206): class polylog(Function):
0.26 /testbed/sympy/functions/special/zeta_functions.py(206): class polylog(Function):
0.26 /testbed/sympy/functions/special/zeta_functions.py(207):     r"""
0.26 /testbed/sympy/functions/special/zeta_functions.py(272):     @classmethod
0.26 /testbed/sympy/functions/special/zeta_functions.py(273):     def eval(cls, s, z):
0.26 /testbed/sympy/functions/special/zeta_functions.py(301):     def fdiff(self, argindex=1):
0.26 /testbed/sympy/functions/special/zeta_functions.py(307):     def _eval_rewrite_as_lerchphi(self, s, z):
0.26 /testbed/sympy/functions/special/zeta_functions.py(310):     def _eval_expand_func(self, **hints):
0.26 /testbed/sympy/functions/special/zeta_functions.py(328): class zeta(Function):
0.26 /testbed/sympy/functions/special/zeta_functions.py(328): class zeta(Function):
0.26 /testbed/sympy/functions/special/zeta_functions.py(329):     r"""
0.26 /testbed/sympy/functions/special/zeta_functions.py(436):     @classmethod
0.26 /testbed/sympy/functions/special/zeta_functions.py(437):     def eval(cls, z, a_=None):
0.26 /testbed/sympy/functions/special/zeta_functions.py(474):     def _eval_rewrite_as_dirichlet_eta(self, s, a=1):
0.26 /testbed/sympy/functions/special/zeta_functions.py(480):     def _eval_rewrite_as_lerchphi(self, s, a=1):
0.26 /testbed/sympy/functions/special/zeta_functions.py(483):     def _eval_is_finite(self):
0.26 /testbed/sympy/functions/special/zeta_functions.py(488):     def fdiff(self, argindex=1):
0.26 /testbed/sympy/functions/special/zeta_functions.py(499): class dirichlet_eta(Function):
0.26 /testbed/sympy/functions/special/zeta_functions.py(499): class dirichlet_eta(Function):
0.26 /testbed/sympy/functions/special/zeta_functions.py(500):     r"""
0.26 /testbed/sympy/functions/special/zeta_functions.py(532):     @classmethod
0.26 /testbed/sympy/functions/special/zeta_functions.py(533):     def eval(cls, s):
0.26 /testbed/sympy/functions/special/zeta_functions.py(540):     def _eval_rewrite_as_zeta(self, s):
0.26 /testbed/sympy/functions/special/zeta_functions.py(544): class stieltjes(Function):
0.26 /testbed/sympy/functions/special/zeta_functions.py(544): class stieltjes(Function):
0.26 /testbed/sympy/functions/special/zeta_functions.py(545):     r"""Represents Stieltjes constants, :math:`\gamma_{k}` that occur in
0.26 /testbed/sympy/functions/special/zeta_functions.py(579):     @classmethod
0.26 /testbed/sympy/functions/special/zeta_functions.py(580):     def eval(cls, n, a=None):
============================= test process starts ==============================
executable:         /opt/miniconda3/envs/testbed/bin/python3  (3.9.23-final-0) [CPython]
architecture:       64-bit
cache:              no
ground types:       python 
numpy:              None
random seed:        94675038
hash randomization: on (PYTHONHASHSEED=983723511)

sympy/polys/tests/test_coverup_sympy__sympy-13852.py[1] 
test_expand_func_polylog_bug 0.37 /testbed/sympy/functions/special/zeta_functions.py(274):         if z == 1:
0.37 /testbed/sympy/functions/special/zeta_functions.py(276):         elif z == -1:
0.37 /testbed/sympy/functions/special/zeta_functions.py(278):         elif z == 0:
0.37 /testbed/sympy/functions/special/zeta_functions.py(280):         elif s == 2:
0.37 /testbed/sympy/functions/special/zeta_functions.py(296):         elif s == 0:
0.37 /testbed/sympy/functions/special/zeta_functions.py(298):         elif s == -1:
0.37 /testbed/sympy/functions/special/zeta_functions.py(311):         from sympy import log, expand_mul, Dummy, exp_polar, I
0.37 /testbed/sympy/functions/special/zeta_functions.py(312):         s, z = self.args
0.37 /testbed/sympy/functions/special/zeta_functions.py(313):         if s == 1:
0.37 /testbed/sympy/functions/special/zeta_functions.py(314):             return -log(1 - z)
ok                                             [OK]


================== tests finished: 1 passed, in 0.01 seconds ===================
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(sympy/functions/special/zeta_functions\\.py)']
0.55 /testbed/sympy/functions/special/zeta_functions.py(1): """ Riemann zeta and related function. """
0.55 /testbed/sympy/functions/special/zeta_functions.py(2): from __future__ import print_function, division
0.55 /testbed/sympy/functions/special/zeta_functions.py(4): from sympy.core import Function, S, sympify, pi, I
0.55 /testbed/sympy/functions/special/zeta_functions.py(5): from sympy.core.function import ArgumentIndexError
0.55 /testbed/sympy/functions/special/zeta_functions.py(6): from sympy.core.compatibility import range
0.55 /testbed/sympy/functions/special/zeta_functions.py(7): from sympy.functions.combinatorial.numbers import bernoulli, factorial, harmonic
0.55 /testbed/sympy/functions/special/zeta_functions.py(8): from sympy.functions.elementary.exponential import log
0.55 /testbed/sympy/functions/special/zeta_functions.py(9): from sympy.functions.elementary.miscellaneous import sqrt
0.55 /testbed/sympy/functions/special/zeta_functions.py(16): class lerchphi(Function):
0.55 /testbed/sympy/functions/special/zeta_functions.py(16): class lerchphi(Function):
0.55 /testbed/sympy/functions/special/zeta_functions.py(17):     r"""
0.55 /testbed/sympy/functions/special/zeta_functions.py(118):     def _eval_expand_func(self, **hints):
0.55 /testbed/sympy/functions/special/zeta_functions.py(179):     def fdiff(self, argindex=1):
0.55 /testbed/sympy/functions/special/zeta_functions.py(188):     def _eval_rewrite_helper(self, z, s, a, target):
0.55 /testbed/sympy/functions/special/zeta_functions.py(195):     def _eval_rewrite_as_zeta(self, z, s, a):
0.55 /testbed/sympy/functions/special/zeta_functions.py(198):     def _eval_rewrite_as_polylog(self, z, s, a):
0.55 /testbed/sympy/functions/special/zeta_functions.py(206): class polylog(Function):
0.55 /testbed/sympy/functions/special/zeta_functions.py(206): class polylog(Function):
0.55 /testbed/sympy/functions/special/zeta_functions.py(207):     r"""
0.55 /testbed/sympy/functions/special/zeta_functions.py(272):     @classmethod
0.55 /testbed/sympy/functions/special/zeta_functions.py(273):     def eval(cls, s, z):
0.55 /testbed/sympy/functions/special/zeta_functions.py(301):     def fdiff(self, argindex=1):
0.55 /testbed/sympy/functions/special/zeta_functions.py(307):     def _eval_rewrite_as_lerchphi(self, s, z):
0.55 /testbed/sympy/functions/special/zeta_functions.py(310):     def _eval_expand_func(self, **hints):
0.55 /testbed/sympy/functions/special/zeta_functions.py(328): class zeta(Function):
0.55 /testbed/sympy/functions/special/zeta_functions.py(328): class zeta(Function):
0.55 /testbed/sympy/functions/special/zeta_functions.py(329):     r"""
0.55 /testbed/sympy/functions/special/zeta_functions.py(436):     @classmethod
0.55 /testbed/sympy/functions/special/zeta_functions.py(437):     def eval(cls, z, a_=None):
0.55 /testbed/sympy/functions/special/zeta_functions.py(474):     def _eval_rewrite_as_dirichlet_eta(self, s, a=1):
0.55 /testbed/sympy/functions/special/zeta_functions.py(480):     def _eval_rewrite_as_lerchphi(self, s, a=1):
0.55 /testbed/sympy/functions/special/zeta_functions.py(483):     def _eval_is_finite(self):
0.55 /testbed/sympy/functions/special/zeta_functions.py(488):     def fdiff(self, argindex=1):
0.55 /testbed/sympy/functions/special/zeta_functions.py(499): class dirichlet_eta(Function):
0.55 /testbed/sympy/functions/special/zeta_functions.py(499): class dirichlet_eta(Function):
0.55 /testbed/sympy/functions/special/zeta_functions.py(500):     r"""
0.55 /testbed/sympy/functions/special/zeta_functions.py(532):     @classmethod
0.55 /testbed/sympy/functions/special/zeta_functions.py(533):     def eval(cls, s):
0.55 /testbed/sympy/functions/special/zeta_functions.py(540):     def _eval_rewrite_as_zeta(self, s):
0.55 /testbed/sympy/functions/special/zeta_functions.py(544): class stieltjes(Function):
0.55 /testbed/sympy/functions/special/zeta_functions.py(544): class stieltjes(Function):
0.55 /testbed/sympy/functions/special/zeta_functions.py(545):     r"""Represents Stieltjes constants, :math:`\gamma_{k}` that occur in
0.55 /testbed/sympy/functions/special/zeta_functions.py(579):     @classmethod
0.55 /testbed/sympy/functions/special/zeta_functions.py(580):     def eval(cls, n, a=None):
+ cat coverage.cover
{"/testbed/sympy/functions/special/zeta_functions.py": {"2": 1, "4": 1, "5": 1, "6": 1, "7": 1, "8": 1, "9": 1, "16": 2, "206": 2, "328": 2, "499": 2, "544": 2, "118": 1, "179": 1, "188": 1, "195": 1, "198": 1, "119": 0, "120": 0, "121": 0, "122": 0, "123": 0, "124": 0, "125": 0, "126": 0, "127": 0, "128": 0, "129": 0, "130": 0, "131": 0, "133": 0, "139": 0, "140": 0, "142": 0, "143": 0, "144": 0, "145": 0, "146": 0, "147": 0, "148": 0, "149": 0, "150": 0, "151": 0, "152": 0, "153": 0, "155": 0, "156": 0, "157": 0, "158": 0, "159": 0, "160": 0, "163": 0, "165": 0, "166": 0, "167": 0, "168": 0, "169": 0, "170": 0, "172": 0, "173": 0, "174": 0, "175": 0, "177": 0, "180": 0, "181": 0, "182": 0, "183": 0, "184": 0, "186": 0, "189": 0, "190": 0, "191": 0, "193": 0, "196": 0, "199": 0, "272": 1, "273": 1, "301": 1, "307": 1, "310": 1, "274": 1, "275": 0, "276": 1, "277": 0, "278": 1, "279": 0, "280": 1, "281": 0, "282": 0, "283": 0, "284": 0, "285": 0, "286": 0, "287": 0, "288": 0, "289": 0, "290": 0, "291": 0, "292": 0, "296": 1, "297": 0, "298": 1, "299": 0, "302": 0, "303": 0, "304": 0, "305": 0, "308": 0, "311": 1, "312": 1, "313": 1, "314": 1, "315": 0, "316": 0, "317": 0, "318": 0, "319": 0, "320": 0, "321": 0, "436": 1, "437": 1, "474": 1, "480": 1, "483": 1, "488": 1, "438": 0, "439": 0, "441": 0, "443": 0, "444": 0, "445": 0, "446": 0, "447": 0, "450": 0, "451": 0, "452": 0, "453": 0, "454": 0, "455": 0, "456": 0, "457": 0, "458": 0, "459": 0, "460": 0, "461": 0, "462": 0, "463": 0, "464": 0, "465": 0, "467": 0, "469": 0, "470": 0, "472": 0, "475": 0, "476": 0, "477": 0, "478": 0, "481": 0, "484": 0, "485": 0, "486": 0, "489": 0, "490": 0, "492": 0, "493": 0, "494": 0, "496": 0, "532": 1, "533": 1, "540": 1, "534": 0, "535": 0, "536": 0, "537": 0, "538": 0, "541": 0, "579": 1, "580": 1, "581": 0, "583": 0, "584": 0, "585": 0, "586": 0, "587": 0, "588": 0, "590": 0, "591": 0, "592": 0, "593": 0, "594": 0, "595": 0, "596": 0, "597": 0, "598": 0}}
{"/testbed/sympy/functions/special/zeta_functions.py": {"2": 1, "4": 1, "5": 1, "6": 1, "7": 1, "8": 1, "9": 1, "16": 2, "206": 2, "328": 2, "499": 2, "544": 2, "118": 1, "179": 1, "188": 1, "195": 1, "198": 1, "119": 0, "120": 0, "121": 0, "122": 0, "123": 0, "124": 0, "125": 0, "126": 0, "127": 0, "128": 0, "129": 0, "130": 0, "131": 0, "133": 0, "139": 0, "140": 0, "142": 0, "143": 0, "144": 0, "145": 0, "146": 0, "147": 0, "148": 0, "149": 0, "150": 0, "151": 0, "152": 0, "153": 0, "155": 0, "156": 0, "157": 0, "158": 0, "159": 0, "160": 0, "163": 0, "165": 0, "166": 0, "167": 0, "168": 0, "169": 0, "170": 0, "172": 0, "173": 0, "174": 0, "175": 0, "177": 0, "180": 0, "181": 0, "182": 0, "183": 0, "184": 0, "186": 0, "189": 0, "190": 0, "191": 0, "193": 0, "196": 0, "199": 0, "272": 1, "273": 1, "301": 1, "307": 1, "310": 1, "274": 0, "275": 0, "276": 0, "277": 0, "278": 0, "279": 0, "280": 0, "281": 0, "282": 0, "283": 0, "284": 0, "285": 0, "286": 0, "287": 0, "288": 0, "289": 0, "290": 0, "291": 0, "292": 0, "296": 0, "297": 0, "298": 0, "299": 0, "302": 0, "303": 0, "304": 0, "305": 0, "308": 0, "311": 0, "312": 0, "313": 0, "314": 0, "315": 0, "316": 0, "317": 0, "318": 0, "319": 0, "320": 0, "321": 0, "436": 1, "437": 1, "474": 1, "480": 1, "483": 1, "488": 1, "438": 0, "439": 0, "441": 0, "443": 0, "444": 0, "445": 0, "446": 0, "447": 0, "450": 0, "451": 0, "452": 0, "453": 0, "454": 0, "455": 0, "456": 0, "457": 0, "458": 0, "459": 0, "460": 0, "461": 0, "462": 0, "463": 0, "464": 0, "465": 0, "467": 0, "469": 0, "470": 0, "472": 0, "475": 0, "476": 0, "477": 0, "478": 0, "481": 0, "484": 0, "485": 0, "486": 0, "489": 0, "490": 0, "492": 0, "493": 0, "494": 0, "496": 0, "532": 1, "533": 1, "540": 1, "534": 0, "535": 0, "536": 0, "537": 0, "538": 0, "541": 0, "579": 1, "580": 1, "581": 0, "583": 0, "584": 0, "585": 0, "586": 0, "587": 0, "588": 0, "590": 0, "591": 0, "592": 0, "593": 0, "594": 0, "595": 0, "596": 0, "597": 0, "598": 0}}
+ git checkout c935e1d106743efd5bf0705fbeedbd18fadff4dc
M	sympy/functions/special/zeta_functions.py
Note: switching to 'c935e1d106743efd5bf0705fbeedbd18fadff4dc'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at c935e1d106 Merge pull request #13846 from smichr/segment
+ git apply /root/pre_state.patch
error: unrecognized input
