+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD c2678e49759e5c4c329bff0eeca2886267005d21
+ sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen
+ locale-gen
Generating locales (this might take a while)...
  en_US.UTF-8... done
Generation complete.
+ export LANG=en_US.UTF-8
+ LANG=en_US.UTF-8
+ export LANGUAGE=en_US:en
+ LANGUAGE=en_US:en
+ export LC_ALL=en_US.UTF-8
+ LC_ALL=en_US.UTF-8
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
nothing to commit, working tree clean
+ git show
commit c2678e49759e5c4c329bff0eeca2886267005d21
Author: Glenn <glenn@atomicgrowth.co>
Date:   Thu Sep 26 10:46:20 2019 -0700

    Fixed #27921 -- Clarified usage of make_aware() with is_dst argument.

diff --git a/docs/ref/utils.txt b/docs/ref/utils.txt
index fbbbb46f81..63db48b98f 100644
--- a/docs/ref/utils.txt
+++ b/docs/ref/utils.txt
@@ -945,11 +945,14 @@ appropriate entities.
     post-transition respectively.
 
     The ``pytz.NonExistentTimeError`` exception is raised if you try to make
-    ``value`` aware during a DST transition such that the time never occurred
-    (when entering into DST). Setting ``is_dst`` to ``True`` or ``False`` will
-    avoid the exception by moving the hour backwards or forwards by 1
-    respectively. For example, ``is_dst=True`` would change a nonexistent
-    time of 2:30 to 1:30 and ``is_dst=False`` would change the time to 3:30.
+    ``value`` aware during a DST transition such that the time never occurred.
+    For example, if the 2:00 hour is skipped during a DST transition, trying to
+    make 2:30 aware in that time zone will raise an exception. To avoid that
+    you can use ``is_dst`` to specify how ``make_aware()`` should interpret
+    such a nonexistent time. If ``is_dst=True`` then the above time would be
+    interpreted as 2:30 DST time (equivalent to 1:30 local time). Conversely,
+    if ``is_dst=False`` the time would be interpreted as 2:30 standard time
+    (equivalent to 3:30 local time).
 
 .. function:: make_naive(value, timezone=None)
 
+ git diff c2678e49759e5c4c329bff0eeca2886267005d21
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
Requirement already satisfied: pytz in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.1) (2025.2)
Requirement already satisfied: sqlparse in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.1) (0.4.4)
Requirement already satisfied: asgiref in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.1) (3.4.1)
Requirement already satisfied: typing-extensions in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from asgiref->Django==3.1) (4.1.1)
Installing collected packages: Django
  Attempting uninstall: Django
    Found existing installation: Django 3.1
    Uninstalling Django-3.1:
      Successfully uninstalled Django-3.1
  Running setup.py develop for Django
Successfully installed Django-3.1
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv
+ git apply -v -
Checking patch django/db/models/base.py...
Applied patch django/db/models/base.py cleanly.
+ git apply -v -
Checking patch tests/test_coverup_django__django-11820.py...
Applied patch tests/test_coverup_django__django-11820.py cleanly.
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/db/models/base\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-11820
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(django/db/models/base\\.py)']
0.37 /testbed/django/db/models/base.py(1): import copy
0.37 /testbed/django/db/models/base.py(2): import inspect
0.37 /testbed/django/db/models/base.py(3): import warnings
0.37 /testbed/django/db/models/base.py(4): from functools import partialmethod
0.37 /testbed/django/db/models/base.py(5): from itertools import chain
0.37 /testbed/django/db/models/base.py(7): from django.apps import apps
0.37 /testbed/django/db/models/base.py(8): from django.conf import settings
0.37 /testbed/django/db/models/base.py(9): from django.core import checks
0.37 /testbed/django/db/models/base.py(10): from django.core.exceptions import (
0.37 /testbed/django/db/models/base.py(14): from django.db import (
0.37 /testbed/django/db/models/base.py(18): from django.db.models import (
0.37 /testbed/django/db/models/base.py(21): from django.db.models.constants import LOOKUP_SEP
0.37 /testbed/django/db/models/base.py(22): from django.db.models.constraints import CheckConstraint, UniqueConstraint
0.37 /testbed/django/db/models/base.py(23): from django.db.models.deletion import CASCADE, Collector
0.37 /testbed/django/db/models/base.py(24): from django.db.models.fields.related import (
0.38 /testbed/django/db/models/base.py(27): from django.db.models.functions import Coalesce
0.38 /testbed/django/db/models/base.py(28): from django.db.models.manager import Manager
0.38 /testbed/django/db/models/base.py(29): from django.db.models.options import Options
0.38 /testbed/django/db/models/base.py(30): from django.db.models.query import Q
0.38 /testbed/django/db/models/base.py(31): from django.db.models.signals import (
0.38 /testbed/django/db/models/base.py(34): from django.db.models.utils import make_model_tuple
0.38 /testbed/django/db/models/base.py(35): from django.utils.encoding import force_str
0.38 /testbed/django/db/models/base.py(36): from django.utils.text import capfirst, get_text_list
0.38 /testbed/django/db/models/base.py(37): from django.utils.translation import gettext_lazy as _
0.38 /testbed/django/db/models/base.py(38): from django.utils.version import get_version
0.38 /testbed/django/db/models/base.py(41): class Deferred:
0.38 /testbed/django/db/models/base.py(41): class Deferred:
0.38 /testbed/django/db/models/base.py(42):     def __repr__(self):
0.38 /testbed/django/db/models/base.py(45):     def __str__(self):
0.38 /testbed/django/db/models/base.py(49): DEFERRED = Deferred()
0.38 /testbed/django/db/models/base.py(52): def subclass_exception(name, bases, module, attached_to):
0.38 /testbed/django/db/models/base.py(66): def _has_contribute_to_class(value):
0.38 /testbed/django/db/models/base.py(71): class ModelBase(type):
0.38 /testbed/django/db/models/base.py(71): class ModelBase(type):
0.38 /testbed/django/db/models/base.py(72):     """Metaclass for all models."""
0.38 /testbed/django/db/models/base.py(73):     def __new__(cls, name, bases, attrs, **kwargs):
0.38 /testbed/django/db/models/base.py(323):     def add_to_class(cls, name, value):
0.38 /testbed/django/db/models/base.py(329):     def _prepare(cls):
0.38 /testbed/django/db/models/base.py(375):     @property
0.38 /testbed/django/db/models/base.py(379):     @property
0.38 /testbed/django/db/models/base.py(384): class ModelStateFieldsCacheDescriptor:
0.38 /testbed/django/db/models/base.py(384): class ModelStateFieldsCacheDescriptor:
0.38 /testbed/django/db/models/base.py(385):     def __get__(self, instance, cls=None):
0.38 /testbed/django/db/models/base.py(392): class ModelState:
0.38 /testbed/django/db/models/base.py(392): class ModelState:
0.38 /testbed/django/db/models/base.py(393):     """Store model instance state."""
0.38 /testbed/django/db/models/base.py(394):     db = None
0.38 /testbed/django/db/models/base.py(399):     adding = True
0.38 /testbed/django/db/models/base.py(400):     fields_cache = ModelStateFieldsCacheDescriptor()
0.38 /testbed/django/db/models/base.py(403): class Model(metaclass=ModelBase):
0.38 /testbed/django/db/models/base.py(403): class Model(metaclass=ModelBase):
0.38 /testbed/django/db/models/base.py(405):     def __init__(self, *args, **kwargs):
0.38 /testbed/django/db/models/base.py(504):     @classmethod
0.38 /testbed/django/db/models/base.py(517):     def __repr__(self):
0.38 /testbed/django/db/models/base.py(520):     def __str__(self):
0.38 /testbed/django/db/models/base.py(523):     def __eq__(self, other):
0.38 /testbed/django/db/models/base.py(533):     def __hash__(self):
0.38 /testbed/django/db/models/base.py(538):     def __reduce__(self):
0.38 /testbed/django/db/models/base.py(544):     def __getstate__(self):
0.38 /testbed/django/db/models/base.py(548):     def __setstate__(self, state):
0.38 /testbed/django/db/models/base.py(566):     def _get_pk_val(self, meta=None):
0.38 /testbed/django/db/models/base.py(570):     def _set_pk_val(self, value):
0.38 /testbed/django/db/models/base.py(573):     pk = property(_get_pk_val, _set_pk_val)
0.38 /testbed/django/db/models/base.py(575):     def get_deferred_fields(self):
0.38 /testbed/django/db/models/base.py(584):     def refresh_from_db(self, using=None, fields=None):
0.38 /testbed/django/db/models/base.py(645):     def serializable_value(self, field_name):
0.38 /testbed/django/db/models/base.py(663):              update_fields=None):
0.38 /testbed/django/db/models/base.py(747):     save.alters_data = True
0.38 /testbed/django/db/models/base.py(750):                   force_update=False, using=None, update_fields=None):
0.38 /testbed/django/db/models/base.py(798):     save_base.alters_data = True
0.38 /testbed/django/db/models/base.py(800):     def _save_parents(self, cls, using, update_fields):
0.38 /testbed/django/db/models/base.py(829):                     force_update=False, using=None, update_fields=None):
0.38 /testbed/django/db/models/base.py(891):     def _do_update(self, base_qs, using, pk_val, values, update_fields, forced_update):
0.38 /testbed/django/db/models/base.py(918):     def _do_insert(self, manager, using, fields, returning_fields, raw):
0.38 /testbed/django/db/models/base.py(928):     def delete(self, using=None, keep_parents=False):
0.38 /testbed/django/db/models/base.py(939):     delete.alters_data = True
0.38 /testbed/django/db/models/base.py(941):     def _get_FIELD_display(self, field):
0.38 /testbed/django/db/models/base.py(946):     def _get_next_or_previous_by_FIELD(self, field, is_next, **kwargs):
0.38 /testbed/django/db/models/base.py(962):     def _get_next_or_previous_in_order(self, is_next):
0.38 /testbed/django/db/models/base.py(977):     def prepare_database_save(self, field):
0.38 /testbed/django/db/models/base.py(982):     def clean(self):
0.38 /testbed/django/db/models/base.py(991):     def validate_unique(self, exclude=None):
0.38 /testbed/django/db/models/base.py(1007):     def _get_unique_checks(self, exclude=None):
0.38 /testbed/django/db/models/base.py(1066):     def _perform_unique_checks(self, unique_checks):
0.38 /testbed/django/db/models/base.py(1111):     def _perform_date_checks(self, date_checks):
0.38 /testbed/django/db/models/base.py(1140):     def date_error_message(self, lookup_type, field_name, unique_for):
0.38 /testbed/django/db/models/base.py(1157):     def unique_error_message(self, model_class, unique_check):
0.38 /testbed/django/db/models/base.py(1187):     def full_clean(self, exclude=None, validate_unique=True):
0.38 /testbed/django/db/models/base.py(1223):     def clean_fields(self, exclude=None):
0.38 /testbed/django/db/models/base.py(1248):     @classmethod
0.38 /testbed/django/db/models/base.py(1279):     @classmethod
0.38 /testbed/django/db/models/base.py(1306):     @classmethod
0.38 /testbed/django/db/models/base.py(1319):     @classmethod
0.38 /testbed/django/db/models/base.py(1327):     @classmethod
0.38 /testbed/django/db/models/base.py(1337):     @classmethod
0.38 /testbed/django/db/models/base.py(1369):     @classmethod
0.38 /testbed/django/db/models/base.py(1386):     @classmethod
0.38 /testbed/django/db/models/base.py(1443):     @classmethod
0.38 /testbed/django/db/models/base.py(1468):     @classmethod
0.38 /testbed/django/db/models/base.py(1492):     @classmethod
0.38 /testbed/django/db/models/base.py(1512):     @classmethod
0.38 /testbed/django/db/models/base.py(1526):     @classmethod
0.38 /testbed/django/db/models/base.py(1553):     @classmethod
0.38 /testbed/django/db/models/base.py(1580):     @classmethod
0.38 /testbed/django/db/models/base.py(1609):     @classmethod
0.38 /testbed/django/db/models/base.py(1659):     @classmethod
0.38 /testbed/django/db/models/base.py(1759):     @classmethod
0.38 /testbed/django/db/models/base.py(1832):     @classmethod
0.38 /testbed/django/db/models/base.py(74):         super_new = super().__new__
0.38 /testbed/django/db/models/base.py(78):         parents = [b for b in bases if isinstance(b, ModelBase)]
0.38 /testbed/django/db/models/base.py(78):         parents = [b for b in bases if isinstance(b, ModelBase)]
0.38 /testbed/django/db/models/base.py(79):         if not parents:
0.38 /testbed/django/db/models/base.py(80):             return super_new(cls, name, bases, attrs)
0.38 /testbed/django/db/models/base.py(1865): def method_set_order(self, ordered_obj, id_list, using=None):
0.38 /testbed/django/db/models/base.py(1875): def method_get_order(self, ordered_obj):
0.38 /testbed/django/db/models/base.py(1882): def make_foreign_order_accessors(model, related_model):
0.38 /testbed/django/db/models/base.py(1899): def model_unpickle(model_id):
0.38 /testbed/django/db/models/base.py(1909): model_unpickle.__safe_for_unpickle__ = True
Testing against Django installed in '/testbed/django'
0.59 /testbed/django/db/models/base.py(74):         super_new = super().__new__
0.59 /testbed/django/db/models/base.py(78):         parents = [b for b in bases if isinstance(b, ModelBase)]
0.59 /testbed/django/db/models/base.py(78):         parents = [b for b in bases if isinstance(b, ModelBase)]
0.59 /testbed/django/db/models/base.py(78):         parents = [b for b in bases if isinstance(b, ModelBase)]
0.59 /testbed/django/db/models/base.py(79):         if not parents:
0.59 /testbed/django/db/models/base.py(83):         module = attrs.pop('__module__')
0.59 /testbed/django/db/models/base.py(84):         new_attrs = {'__module__': module}
0.59 /testbed/django/db/models/base.py(85):         classcell = attrs.pop('__classcell__', None)
0.59 /testbed/django/db/models/base.py(86):         if classcell is not None:
0.59 /testbed/django/db/models/base.py(88):         attr_meta = attrs.pop('Meta', None)
0.59 /testbed/django/db/models/base.py(92):         contributable_attrs = {}
0.59 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.59 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.59 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.59 /testbed/django/db/models/base.py(97):                 new_attrs[obj_name] = obj
0.59 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.59 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.59 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.59 /testbed/django/db/models/base.py(95):                 contributable_attrs[obj_name] = obj
0.59 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.59 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.59 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.59 /testbed/django/db/models/base.py(95):                 contributable_attrs[obj_name] = obj
0.59 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.59 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.59 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.59 /testbed/django/db/models/base.py(95):                 contributable_attrs[obj_name] = obj
0.59 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.59 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.59 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.59 /testbed/django/db/models/base.py(97):                 new_attrs[obj_name] = obj
0.59 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.59 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.59 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.59 /testbed/django/db/models/base.py(97):                 new_attrs[obj_name] = obj
0.59 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.59 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.59 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.59 /testbed/django/db/models/base.py(97):                 new_attrs[obj_name] = obj
0.59 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.59 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.59 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.59 /testbed/django/db/models/base.py(97):                 new_attrs[obj_name] = obj
0.59 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.59 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.59 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.59 /testbed/django/db/models/base.py(97):                 new_attrs[obj_name] = obj
0.59 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.59 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.59 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.59 /testbed/django/db/models/base.py(97):                 new_attrs[obj_name] = obj
0.59 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.59 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.59 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.59 /testbed/django/db/models/base.py(97):                 new_attrs[obj_name] = obj
0.59 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.59 /testbed/django/db/models/base.py(98):         new_class = super_new(cls, name, bases, new_attrs, **kwargs)
0.59 /testbed/django/db/models/base.py(100):         abstract = getattr(attr_meta, 'abstract', False)
0.59 /testbed/django/db/models/base.py(101):         meta = attr_meta or getattr(new_class, 'Meta', None)
0.59 /testbed/django/db/models/base.py(102):         base_meta = getattr(new_class, '_meta', None)
0.59 /testbed/django/db/models/base.py(104):         app_label = None
0.59 /testbed/django/db/models/base.py(107):         app_config = apps.get_containing_app_config(module)
0.59 /testbed/django/db/models/base.py(109):         if getattr(meta, 'app_label', None) is None:
0.59 /testbed/django/db/models/base.py(110):             if app_config is None:
0.59 /testbed/django/db/models/base.py(119):                 app_label = app_config.label
0.59 /testbed/django/db/models/base.py(121):         new_class.add_to_class('_meta', Options(meta, app_label))
0.59 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.59 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.59 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.59 /testbed/django/db/models/base.py(122):         if not abstract:
0.59 /testbed/django/db/models/base.py(123):             new_class.add_to_class(
0.59 /testbed/django/db/models/base.py(124):                 'DoesNotExist',
0.59 /testbed/django/db/models/base.py(125):                 subclass_exception(
0.59 /testbed/django/db/models/base.py(126):                     'DoesNotExist',
0.59 /testbed/django/db/models/base.py(127):                     tuple(
0.59 /testbed/django/db/models/base.py(128):                         x.DoesNotExist for x in parents if hasattr(x, '_meta') and not x._meta.abstract
0.59 /testbed/django/db/models/base.py(128):                         x.DoesNotExist for x in parents if hasattr(x, '_meta') and not x._meta.abstract
0.59 /testbed/django/db/models/base.py(128):                         x.DoesNotExist for x in parents if hasattr(x, '_meta') and not x._meta.abstract
0.59 /testbed/django/db/models/base.py(129):                     ) or (ObjectDoesNotExist,),
0.59 /testbed/django/db/models/base.py(130):                     module,
0.59 /testbed/django/db/models/base.py(131):                     attached_to=new_class))
0.59 /testbed/django/db/models/base.py(60):     return type(name, bases, {
0.59 /testbed/django/db/models/base.py(61):         '__module__': module,
0.59 /testbed/django/db/models/base.py(62):         '__qualname__': '%s.%s' % (attached_to.__qualname__, name),
0.59 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.59 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.59 /testbed/django/db/models/base.py(327):             setattr(cls, name, value)
0.59 /testbed/django/db/models/base.py(132):             new_class.add_to_class(
0.59 /testbed/django/db/models/base.py(133):                 'MultipleObjectsReturned',
0.59 /testbed/django/db/models/base.py(134):                 subclass_exception(
0.59 /testbed/django/db/models/base.py(135):                     'MultipleObjectsReturned',
0.59 /testbed/django/db/models/base.py(136):                     tuple(
0.59 /testbed/django/db/models/base.py(137):                         x.MultipleObjectsReturned for x in parents if hasattr(x, '_meta') and not x._meta.abstract
0.59 /testbed/django/db/models/base.py(137):                         x.MultipleObjectsReturned for x in parents if hasattr(x, '_meta') and not x._meta.abstract
0.59 /testbed/django/db/models/base.py(137):                         x.MultipleObjectsReturned for x in parents if hasattr(x, '_meta') and not x._meta.abstract
0.59 /testbed/django/db/models/base.py(138):                     ) or (MultipleObjectsReturned,),
0.59 /testbed/django/db/models/base.py(139):                     module,
0.59 /testbed/django/db/models/base.py(140):                     attached_to=new_class))
0.59 /testbed/django/db/models/base.py(60):     return type(name, bases, {
0.59 /testbed/django/db/models/base.py(61):         '__module__': module,
0.59 /testbed/django/db/models/base.py(62):         '__qualname__': '%s.%s' % (attached_to.__qualname__, name),
0.59 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.59 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.59 /testbed/django/db/models/base.py(327):             setattr(cls, name, value)
0.59 /testbed/django/db/models/base.py(141):             if base_meta and not base_meta.abstract:
0.59 /testbed/django/db/models/base.py(150):         is_proxy = new_class._meta.proxy
0.59 /testbed/django/db/models/base.py(154):         if is_proxy and base_meta and base_meta.swapped:
0.59 /testbed/django/db/models/base.py(159):         for obj_name, obj in contributable_attrs.items():
0.59 /testbed/django/db/models/base.py(160):             new_class.add_to_class(obj_name, obj)
0.59 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.59 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.59 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.59 /testbed/django/db/models/base.py(159):         for obj_name, obj in contributable_attrs.items():
0.59 /testbed/django/db/models/base.py(160):             new_class.add_to_class(obj_name, obj)
0.59 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.59 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.59 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.59 /testbed/django/db/models/base.py(159):         for obj_name, obj in contributable_attrs.items():
0.59 /testbed/django/db/models/base.py(160):             new_class.add_to_class(obj_name, obj)
0.59 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.59 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.59 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.59 /testbed/django/db/models/base.py(159):         for obj_name, obj in contributable_attrs.items():
0.59 /testbed/django/db/models/base.py(163):         new_fields = chain(
0.59 /testbed/django/db/models/base.py(164):             new_class._meta.local_fields,
0.59 /testbed/django/db/models/base.py(165):             new_class._meta.local_many_to_many,
0.59 /testbed/django/db/models/base.py(166):             new_class._meta.private_fields
0.59 /testbed/django/db/models/base.py(168):         field_names = {f.name for f in new_fields}
0.59 /testbed/django/db/models/base.py(168):         field_names = {f.name for f in new_fields}
0.59 /testbed/django/db/models/base.py(168):         field_names = {f.name for f in new_fields}
0.59 /testbed/django/db/models/base.py(168):         field_names = {f.name for f in new_fields}
0.59 /testbed/django/db/models/base.py(171):         if is_proxy:
0.59 /testbed/django/db/models/base.py(191):             new_class._meta.concrete_model = new_class
0.59 /testbed/django/db/models/base.py(194):         parent_links = {}
0.59 /testbed/django/db/models/base.py(195):         for base in reversed([new_class] + parents):
0.59 /testbed/django/db/models/base.py(197):             if not hasattr(base, '_meta'):
0.59 /testbed/django/db/models/base.py(198):                 continue
0.59 /testbed/django/db/models/base.py(195):         for base in reversed([new_class] + parents):
0.59 /testbed/django/db/models/base.py(197):             if not hasattr(base, '_meta'):
0.59 /testbed/django/db/models/base.py(200):             if base != new_class and not base._meta.abstract:
0.59 /testbed/django/db/models/base.py(203):             for field in base._meta.local_fields:
0.59 /testbed/django/db/models/base.py(204):                 if isinstance(field, OneToOneField):
0.59 /testbed/django/db/models/base.py(203):             for field in base._meta.local_fields:
0.59 /testbed/django/db/models/base.py(204):                 if isinstance(field, OneToOneField):
0.59 /testbed/django/db/models/base.py(203):             for field in base._meta.local_fields:
0.59 /testbed/django/db/models/base.py(195):         for base in reversed([new_class] + parents):
0.59 /testbed/django/db/models/base.py(209):         inherited_attributes = set()
0.59 /testbed/django/db/models/base.py(211):         for base in new_class.mro():
0.59 /testbed/django/db/models/base.py(212):             if base not in parents or not hasattr(base, '_meta'):
0.59 /testbed/django/db/models/base.py(215):                 inherited_attributes.update(base.__dict__)
0.59 /testbed/django/db/models/base.py(216):                 continue
0.59 /testbed/django/db/models/base.py(211):         for base in new_class.mro():
0.59 /testbed/django/db/models/base.py(212):             if base not in parents or not hasattr(base, '_meta'):
0.59 /testbed/django/db/models/base.py(215):                 inherited_attributes.update(base.__dict__)
0.59 /testbed/django/db/models/base.py(216):                 continue
0.59 /testbed/django/db/models/base.py(211):         for base in new_class.mro():
0.59 /testbed/django/db/models/base.py(212):             if base not in parents or not hasattr(base, '_meta'):
0.59 /testbed/django/db/models/base.py(215):                 inherited_attributes.update(base.__dict__)
0.59 /testbed/django/db/models/base.py(216):                 continue
0.59 /testbed/django/db/models/base.py(211):         for base in new_class.mro():
0.59 /testbed/django/db/models/base.py(309):         new_class._meta.indexes = [copy.deepcopy(idx) for idx in new_class._meta.indexes]
0.59 /testbed/django/db/models/base.py(309):         new_class._meta.indexes = [copy.deepcopy(idx) for idx in new_class._meta.indexes]
0.59 /testbed/django/db/models/base.py(311):         if abstract:
0.59 /testbed/django/db/models/base.py(319):         new_class._prepare()
0.59 /testbed/django/db/models/base.py(331):         opts = cls._meta
0.59 /testbed/django/db/models/base.py(332):         opts._prepare(cls)
0.59 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.59 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.59 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.59 /testbed/django/db/models/base.py(334):         if opts.order_with_respect_to:
0.59 /testbed/django/db/models/base.py(349):         if cls.__doc__ is None:
0.59 /testbed/django/db/models/base.py(350):             cls.__doc__ = "%s(%s)" % (cls.__name__, ", ".join(f.name for f in opts.fields))
0.59 /testbed/django/db/models/base.py(350):             cls.__doc__ = "%s(%s)" % (cls.__name__, ", ".join(f.name for f in opts.fields))
0.59 /testbed/django/db/models/base.py(350):             cls.__doc__ = "%s(%s)" % (cls.__name__, ", ".join(f.name for f in opts.fields))
0.59 /testbed/django/db/models/base.py(350):             cls.__doc__ = "%s(%s)" % (cls.__name__, ", ".join(f.name for f in opts.fields))
0.59 /testbed/django/db/models/base.py(350):             cls.__doc__ = "%s(%s)" % (cls.__name__, ", ".join(f.name for f in opts.fields))
0.59 /testbed/django/db/models/base.py(352):         get_absolute_url_override = settings.ABSOLUTE_URL_OVERRIDES.get(opts.label_lower)
0.59 /testbed/django/db/models/base.py(353):         if get_absolute_url_override:
0.59 /testbed/django/db/models/base.py(356):         if not opts.managers:
0.59 /testbed/django/db/models/base.py(369):         for index in cls._meta.indexes:
0.59 /testbed/django/db/models/base.py(373):         class_prepared.send(sender=cls)
0.59 /testbed/django/db/models/base.py(320):         new_class._meta.apps.register_model(new_class._meta.app_label, new_class)
0.59 /testbed/django/db/models/base.py(321):         return new_class
0.60 /testbed/django/db/models/base.py(74):         super_new = super().__new__
0.60 /testbed/django/db/models/base.py(78):         parents = [b for b in bases if isinstance(b, ModelBase)]
0.60 /testbed/django/db/models/base.py(78):         parents = [b for b in bases if isinstance(b, ModelBase)]
0.60 /testbed/django/db/models/base.py(78):         parents = [b for b in bases if isinstance(b, ModelBase)]
0.60 /testbed/django/db/models/base.py(79):         if not parents:
0.60 /testbed/django/db/models/base.py(83):         module = attrs.pop('__module__')
0.60 /testbed/django/db/models/base.py(84):         new_attrs = {'__module__': module}
0.60 /testbed/django/db/models/base.py(85):         classcell = attrs.pop('__classcell__', None)
0.60 /testbed/django/db/models/base.py(86):         if classcell is not None:
0.60 /testbed/django/db/models/base.py(87):             new_attrs['__classcell__'] = classcell
0.60 /testbed/django/db/models/base.py(88):         attr_meta = attrs.pop('Meta', None)
0.60 /testbed/django/db/models/base.py(92):         contributable_attrs = {}
0.60 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.60 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.60 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.60 /testbed/django/db/models/base.py(97):                 new_attrs[obj_name] = obj
0.60 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.60 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.60 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.60 /testbed/django/db/models/base.py(95):                 contributable_attrs[obj_name] = obj
0.60 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.60 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.60 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.60 /testbed/django/db/models/base.py(95):                 contributable_attrs[obj_name] = obj
0.60 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.60 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.60 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.60 /testbed/django/db/models/base.py(97):                 new_attrs[obj_name] = obj
0.60 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.60 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.60 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.60 /testbed/django/db/models/base.py(97):                 new_attrs[obj_name] = obj
0.60 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.60 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.60 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.60 /testbed/django/db/models/base.py(97):                 new_attrs[obj_name] = obj
0.60 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.60 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.60 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.60 /testbed/django/db/models/base.py(97):                 new_attrs[obj_name] = obj
0.60 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.60 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.60 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.60 /testbed/django/db/models/base.py(97):                 new_attrs[obj_name] = obj
0.60 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.60 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.60 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.60 /testbed/django/db/models/base.py(97):                 new_attrs[obj_name] = obj
0.60 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.60 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.60 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.60 /testbed/django/db/models/base.py(97):                 new_attrs[obj_name] = obj
0.60 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.60 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.60 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.60 /testbed/django/db/models/base.py(97):                 new_attrs[obj_name] = obj
0.60 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.60 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.60 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.60 /testbed/django/db/models/base.py(97):                 new_attrs[obj_name] = obj
0.60 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.60 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.60 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.60 /testbed/django/db/models/base.py(97):                 new_attrs[obj_name] = obj
0.60 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.60 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.60 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.60 /testbed/django/db/models/base.py(97):                 new_attrs[obj_name] = obj
0.60 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.60 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.60 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.60 /testbed/django/db/models/base.py(97):                 new_attrs[obj_name] = obj
0.60 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.60 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.60 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.60 /testbed/django/db/models/base.py(97):                 new_attrs[obj_name] = obj
0.60 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.60 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.60 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.60 /testbed/django/db/models/base.py(97):                 new_attrs[obj_name] = obj
0.60 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.60 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.60 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.60 /testbed/django/db/models/base.py(97):                 new_attrs[obj_name] = obj
0.60 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.60 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.60 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.60 /testbed/django/db/models/base.py(97):                 new_attrs[obj_name] = obj
0.60 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.60 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.60 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.60 /testbed/django/db/models/base.py(97):                 new_attrs[obj_name] = obj
0.60 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.60 /testbed/django/db/models/base.py(98):         new_class = super_new(cls, name, bases, new_attrs, **kwargs)
0.60 /testbed/django/db/models/base.py(100):         abstract = getattr(attr_meta, 'abstract', False)
0.60 /testbed/django/db/models/base.py(101):         meta = attr_meta or getattr(new_class, 'Meta', None)
0.60 /testbed/django/db/models/base.py(102):         base_meta = getattr(new_class, '_meta', None)
0.60 /testbed/django/db/models/base.py(104):         app_label = None
0.60 /testbed/django/db/models/base.py(107):         app_config = apps.get_containing_app_config(module)
0.60 /testbed/django/db/models/base.py(109):         if getattr(meta, 'app_label', None) is None:
0.60 /testbed/django/db/models/base.py(110):             if app_config is None:
0.60 /testbed/django/db/models/base.py(119):                 app_label = app_config.label
0.60 /testbed/django/db/models/base.py(121):         new_class.add_to_class('_meta', Options(meta, app_label))
0.60 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.60 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.60 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.64 /testbed/django/db/models/base.py(122):         if not abstract:
0.64 /testbed/django/db/models/base.py(150):         is_proxy = new_class._meta.proxy
0.64 /testbed/django/db/models/base.py(154):         if is_proxy and base_meta and base_meta.swapped:
0.64 /testbed/django/db/models/base.py(159):         for obj_name, obj in contributable_attrs.items():
0.64 /testbed/django/db/models/base.py(160):             new_class.add_to_class(obj_name, obj)
0.64 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.64 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.64 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.64 /testbed/django/db/models/base.py(159):         for obj_name, obj in contributable_attrs.items():
0.64 /testbed/django/db/models/base.py(160):             new_class.add_to_class(obj_name, obj)
0.64 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.64 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.64 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.64 /testbed/django/db/models/base.py(159):         for obj_name, obj in contributable_attrs.items():
0.64 /testbed/django/db/models/base.py(163):         new_fields = chain(
0.64 /testbed/django/db/models/base.py(164):             new_class._meta.local_fields,
0.64 /testbed/django/db/models/base.py(165):             new_class._meta.local_many_to_many,
0.64 /testbed/django/db/models/base.py(166):             new_class._meta.private_fields
0.64 /testbed/django/db/models/base.py(168):         field_names = {f.name for f in new_fields}
0.64 /testbed/django/db/models/base.py(168):         field_names = {f.name for f in new_fields}
0.64 /testbed/django/db/models/base.py(168):         field_names = {f.name for f in new_fields}
0.64 /testbed/django/db/models/base.py(168):         field_names = {f.name for f in new_fields}
0.64 /testbed/django/db/models/base.py(171):         if is_proxy:
0.64 /testbed/django/db/models/base.py(191):             new_class._meta.concrete_model = new_class
0.64 /testbed/django/db/models/base.py(194):         parent_links = {}
0.64 /testbed/django/db/models/base.py(195):         for base in reversed([new_class] + parents):
0.64 /testbed/django/db/models/base.py(197):             if not hasattr(base, '_meta'):
0.64 /testbed/django/db/models/base.py(198):                 continue
0.64 /testbed/django/db/models/base.py(195):         for base in reversed([new_class] + parents):
0.64 /testbed/django/db/models/base.py(197):             if not hasattr(base, '_meta'):
0.64 /testbed/django/db/models/base.py(200):             if base != new_class and not base._meta.abstract:
0.64 /testbed/django/db/models/base.py(203):             for field in base._meta.local_fields:
0.64 /testbed/django/db/models/base.py(204):                 if isinstance(field, OneToOneField):
0.64 /testbed/django/db/models/base.py(203):             for field in base._meta.local_fields:
0.64 /testbed/django/db/models/base.py(204):                 if isinstance(field, OneToOneField):
0.64 /testbed/django/db/models/base.py(203):             for field in base._meta.local_fields:
0.64 /testbed/django/db/models/base.py(195):         for base in reversed([new_class] + parents):
0.64 /testbed/django/db/models/base.py(209):         inherited_attributes = set()
0.64 /testbed/django/db/models/base.py(211):         for base in new_class.mro():
0.64 /testbed/django/db/models/base.py(212):             if base not in parents or not hasattr(base, '_meta'):
0.64 /testbed/django/db/models/base.py(215):                 inherited_attributes.update(base.__dict__)
0.64 /testbed/django/db/models/base.py(216):                 continue
0.64 /testbed/django/db/models/base.py(211):         for base in new_class.mro():
0.64 /testbed/django/db/models/base.py(212):             if base not in parents or not hasattr(base, '_meta'):
0.64 /testbed/django/db/models/base.py(215):                 inherited_attributes.update(base.__dict__)
0.64 /testbed/django/db/models/base.py(216):                 continue
0.64 /testbed/django/db/models/base.py(211):         for base in new_class.mro():
0.64 /testbed/django/db/models/base.py(212):             if base not in parents or not hasattr(base, '_meta'):
0.64 /testbed/django/db/models/base.py(215):                 inherited_attributes.update(base.__dict__)
0.64 /testbed/django/db/models/base.py(216):                 continue
0.64 /testbed/django/db/models/base.py(211):         for base in new_class.mro():
0.64 /testbed/django/db/models/base.py(309):         new_class._meta.indexes = [copy.deepcopy(idx) for idx in new_class._meta.indexes]
0.64 /testbed/django/db/models/base.py(309):         new_class._meta.indexes = [copy.deepcopy(idx) for idx in new_class._meta.indexes]
0.64 /testbed/django/db/models/base.py(311):         if abstract:
0.64 /testbed/django/db/models/base.py(315):             attr_meta.abstract = False
0.64 /testbed/django/db/models/base.py(316):             new_class.Meta = attr_meta
0.64 /testbed/django/db/models/base.py(317):             return new_class
0.64 /testbed/django/db/models/base.py(74):         super_new = super().__new__
0.64 /testbed/django/db/models/base.py(78):         parents = [b for b in bases if isinstance(b, ModelBase)]
0.64 /testbed/django/db/models/base.py(78):         parents = [b for b in bases if isinstance(b, ModelBase)]
0.64 /testbed/django/db/models/base.py(78):         parents = [b for b in bases if isinstance(b, ModelBase)]
0.64 /testbed/django/db/models/base.py(79):         if not parents:
0.64 /testbed/django/db/models/base.py(83):         module = attrs.pop('__module__')
0.64 /testbed/django/db/models/base.py(84):         new_attrs = {'__module__': module}
0.64 /testbed/django/db/models/base.py(85):         classcell = attrs.pop('__classcell__', None)
0.64 /testbed/django/db/models/base.py(86):         if classcell is not None:
0.64 /testbed/django/db/models/base.py(88):         attr_meta = attrs.pop('Meta', None)
0.64 /testbed/django/db/models/base.py(92):         contributable_attrs = {}
0.64 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.64 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.64 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.64 /testbed/django/db/models/base.py(97):                 new_attrs[obj_name] = obj
0.64 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.64 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.64 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.64 /testbed/django/db/models/base.py(97):                 new_attrs[obj_name] = obj
0.64 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.64 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.64 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.64 /testbed/django/db/models/base.py(95):                 contributable_attrs[obj_name] = obj
0.64 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.64 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.64 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.64 /testbed/django/db/models/base.py(95):                 contributable_attrs[obj_name] = obj
0.64 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.64 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.64 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.64 /testbed/django/db/models/base.py(95):                 contributable_attrs[obj_name] = obj
0.64 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.64 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.64 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.64 /testbed/django/db/models/base.py(95):                 contributable_attrs[obj_name] = obj
0.64 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.64 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.64 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.64 /testbed/django/db/models/base.py(97):                 new_attrs[obj_name] = obj
0.64 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.64 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.64 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.64 /testbed/django/db/models/base.py(97):                 new_attrs[obj_name] = obj
0.64 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.64 /testbed/django/db/models/base.py(98):         new_class = super_new(cls, name, bases, new_attrs, **kwargs)
0.64 /testbed/django/db/models/base.py(100):         abstract = getattr(attr_meta, 'abstract', False)
0.64 /testbed/django/db/models/base.py(101):         meta = attr_meta or getattr(new_class, 'Meta', None)
0.64 /testbed/django/db/models/base.py(102):         base_meta = getattr(new_class, '_meta', None)
0.64 /testbed/django/db/models/base.py(104):         app_label = None
0.64 /testbed/django/db/models/base.py(107):         app_config = apps.get_containing_app_config(module)
0.64 /testbed/django/db/models/base.py(109):         if getattr(meta, 'app_label', None) is None:
0.64 /testbed/django/db/models/base.py(110):             if app_config is None:
0.64 /testbed/django/db/models/base.py(119):                 app_label = app_config.label
0.64 /testbed/django/db/models/base.py(121):         new_class.add_to_class('_meta', Options(meta, app_label))
0.64 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.64 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.64 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.64 /testbed/django/db/models/base.py(122):         if not abstract:
0.64 /testbed/django/db/models/base.py(123):             new_class.add_to_class(
0.64 /testbed/django/db/models/base.py(124):                 'DoesNotExist',
0.64 /testbed/django/db/models/base.py(125):                 subclass_exception(
0.64 /testbed/django/db/models/base.py(126):                     'DoesNotExist',
0.64 /testbed/django/db/models/base.py(127):                     tuple(
0.64 /testbed/django/db/models/base.py(128):                         x.DoesNotExist for x in parents if hasattr(x, '_meta') and not x._meta.abstract
0.64 /testbed/django/db/models/base.py(128):                         x.DoesNotExist for x in parents if hasattr(x, '_meta') and not x._meta.abstract
0.64 /testbed/django/db/models/base.py(128):                         x.DoesNotExist for x in parents if hasattr(x, '_meta') and not x._meta.abstract
0.64 /testbed/django/db/models/base.py(129):                     ) or (ObjectDoesNotExist,),
0.64 /testbed/django/db/models/base.py(130):                     module,
0.64 /testbed/django/db/models/base.py(131):                     attached_to=new_class))
0.64 /testbed/django/db/models/base.py(60):     return type(name, bases, {
0.64 /testbed/django/db/models/base.py(61):         '__module__': module,
0.64 /testbed/django/db/models/base.py(62):         '__qualname__': '%s.%s' % (attached_to.__qualname__, name),
0.64 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.64 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.64 /testbed/django/db/models/base.py(327):             setattr(cls, name, value)
0.64 /testbed/django/db/models/base.py(132):             new_class.add_to_class(
0.64 /testbed/django/db/models/base.py(133):                 'MultipleObjectsReturned',
0.64 /testbed/django/db/models/base.py(134):                 subclass_exception(
0.64 /testbed/django/db/models/base.py(135):                     'MultipleObjectsReturned',
0.64 /testbed/django/db/models/base.py(136):                     tuple(
0.64 /testbed/django/db/models/base.py(137):                         x.MultipleObjectsReturned for x in parents if hasattr(x, '_meta') and not x._meta.abstract
0.64 /testbed/django/db/models/base.py(137):                         x.MultipleObjectsReturned for x in parents if hasattr(x, '_meta') and not x._meta.abstract
0.64 /testbed/django/db/models/base.py(137):                         x.MultipleObjectsReturned for x in parents if hasattr(x, '_meta') and not x._meta.abstract
0.64 /testbed/django/db/models/base.py(138):                     ) or (MultipleObjectsReturned,),
0.64 /testbed/django/db/models/base.py(139):                     module,
0.64 /testbed/django/db/models/base.py(140):                     attached_to=new_class))
0.64 /testbed/django/db/models/base.py(60):     return type(name, bases, {
0.64 /testbed/django/db/models/base.py(61):         '__module__': module,
0.64 /testbed/django/db/models/base.py(62):         '__qualname__': '%s.%s' % (attached_to.__qualname__, name),
0.64 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.64 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.64 /testbed/django/db/models/base.py(327):             setattr(cls, name, value)
0.64 /testbed/django/db/models/base.py(141):             if base_meta and not base_meta.abstract:
0.64 /testbed/django/db/models/base.py(150):         is_proxy = new_class._meta.proxy
0.64 /testbed/django/db/models/base.py(154):         if is_proxy and base_meta and base_meta.swapped:
0.64 /testbed/django/db/models/base.py(159):         for obj_name, obj in contributable_attrs.items():
0.64 /testbed/django/db/models/base.py(160):             new_class.add_to_class(obj_name, obj)
0.64 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.64 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.65 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.65 /testbed/django/db/models/base.py(159):         for obj_name, obj in contributable_attrs.items():
0.65 /testbed/django/db/models/base.py(160):             new_class.add_to_class(obj_name, obj)
0.65 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.65 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.65 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.65 /testbed/django/db/models/base.py(159):         for obj_name, obj in contributable_attrs.items():
0.65 /testbed/django/db/models/base.py(160):             new_class.add_to_class(obj_name, obj)
0.65 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.65 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.65 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.65 /testbed/django/db/models/base.py(159):         for obj_name, obj in contributable_attrs.items():
0.65 /testbed/django/db/models/base.py(160):             new_class.add_to_class(obj_name, obj)
0.65 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.65 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.65 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.65 /testbed/django/db/models/base.py(159):         for obj_name, obj in contributable_attrs.items():
0.65 /testbed/django/db/models/base.py(163):         new_fields = chain(
0.65 /testbed/django/db/models/base.py(164):             new_class._meta.local_fields,
0.65 /testbed/django/db/models/base.py(165):             new_class._meta.local_many_to_many,
0.65 /testbed/django/db/models/base.py(166):             new_class._meta.private_fields
0.65 /testbed/django/db/models/base.py(168):         field_names = {f.name for f in new_fields}
0.65 /testbed/django/db/models/base.py(168):         field_names = {f.name for f in new_fields}
0.65 /testbed/django/db/models/base.py(168):         field_names = {f.name for f in new_fields}
0.65 /testbed/django/db/models/base.py(168):         field_names = {f.name for f in new_fields}
0.65 /testbed/django/db/models/base.py(168):         field_names = {f.name for f in new_fields}
0.65 /testbed/django/db/models/base.py(171):         if is_proxy:
0.65 /testbed/django/db/models/base.py(191):             new_class._meta.concrete_model = new_class
0.65 /testbed/django/db/models/base.py(194):         parent_links = {}
0.65 /testbed/django/db/models/base.py(195):         for base in reversed([new_class] + parents):
0.65 /testbed/django/db/models/base.py(197):             if not hasattr(base, '_meta'):
0.65 /testbed/django/db/models/base.py(198):                 continue
0.65 /testbed/django/db/models/base.py(195):         for base in reversed([new_class] + parents):
0.65 /testbed/django/db/models/base.py(197):             if not hasattr(base, '_meta'):
0.65 /testbed/django/db/models/base.py(200):             if base != new_class and not base._meta.abstract:
0.65 /testbed/django/db/models/base.py(203):             for field in base._meta.local_fields:
0.65 /testbed/django/db/models/base.py(204):                 if isinstance(field, OneToOneField):
0.65 /testbed/django/db/models/base.py(203):             for field in base._meta.local_fields:
0.65 /testbed/django/db/models/base.py(204):                 if isinstance(field, OneToOneField):
0.65 /testbed/django/db/models/base.py(203):             for field in base._meta.local_fields:
0.65 /testbed/django/db/models/base.py(204):                 if isinstance(field, OneToOneField):
0.65 /testbed/django/db/models/base.py(203):             for field in base._meta.local_fields:
0.65 /testbed/django/db/models/base.py(195):         for base in reversed([new_class] + parents):
0.65 /testbed/django/db/models/base.py(209):         inherited_attributes = set()
0.65 /testbed/django/db/models/base.py(211):         for base in new_class.mro():
0.65 /testbed/django/db/models/base.py(212):             if base not in parents or not hasattr(base, '_meta'):
0.65 /testbed/django/db/models/base.py(215):                 inherited_attributes.update(base.__dict__)
0.65 /testbed/django/db/models/base.py(216):                 continue
0.65 /testbed/django/db/models/base.py(211):         for base in new_class.mro():
0.65 /testbed/django/db/models/base.py(212):             if base not in parents or not hasattr(base, '_meta'):
0.65 /testbed/django/db/models/base.py(215):                 inherited_attributes.update(base.__dict__)
0.65 /testbed/django/db/models/base.py(216):                 continue
0.65 /testbed/django/db/models/base.py(211):         for base in new_class.mro():
0.65 /testbed/django/db/models/base.py(212):             if base not in parents or not hasattr(base, '_meta'):
0.65 /testbed/django/db/models/base.py(215):                 inherited_attributes.update(base.__dict__)
0.65 /testbed/django/db/models/base.py(216):                 continue
0.65 /testbed/django/db/models/base.py(211):         for base in new_class.mro():
0.65 /testbed/django/db/models/base.py(309):         new_class._meta.indexes = [copy.deepcopy(idx) for idx in new_class._meta.indexes]
0.65 /testbed/django/db/models/base.py(309):         new_class._meta.indexes = [copy.deepcopy(idx) for idx in new_class._meta.indexes]
0.65 /testbed/django/db/models/base.py(311):         if abstract:
0.65 /testbed/django/db/models/base.py(319):         new_class._prepare()
0.65 /testbed/django/db/models/base.py(331):         opts = cls._meta
0.65 /testbed/django/db/models/base.py(332):         opts._prepare(cls)
0.65 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.65 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.65 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.65 /testbed/django/db/models/base.py(334):         if opts.order_with_respect_to:
0.65 /testbed/django/db/models/base.py(349):         if cls.__doc__ is None:
0.65 /testbed/django/db/models/base.py(352):         get_absolute_url_override = settings.ABSOLUTE_URL_OVERRIDES.get(opts.label_lower)
0.65 /testbed/django/db/models/base.py(353):         if get_absolute_url_override:
0.65 /testbed/django/db/models/base.py(356):         if not opts.managers:
0.65 /testbed/django/db/models/base.py(369):         for index in cls._meta.indexes:
0.65 /testbed/django/db/models/base.py(373):         class_prepared.send(sender=cls)
0.65 /testbed/django/db/models/base.py(320):         new_class._meta.apps.register_model(new_class._meta.app_label, new_class)
0.65 /testbed/django/db/models/base.py(321):         return new_class
0.65 /testbed/django/db/models/base.py(74):         super_new = super().__new__
0.65 /testbed/django/db/models/base.py(78):         parents = [b for b in bases if isinstance(b, ModelBase)]
0.65 /testbed/django/db/models/base.py(78):         parents = [b for b in bases if isinstance(b, ModelBase)]
0.65 /testbed/django/db/models/base.py(78):         parents = [b for b in bases if isinstance(b, ModelBase)]
0.65 /testbed/django/db/models/base.py(79):         if not parents:
0.65 /testbed/django/db/models/base.py(83):         module = attrs.pop('__module__')
0.65 /testbed/django/db/models/base.py(84):         new_attrs = {'__module__': module}
0.65 /testbed/django/db/models/base.py(85):         classcell = attrs.pop('__classcell__', None)
0.65 /testbed/django/db/models/base.py(86):         if classcell is not None:
0.65 /testbed/django/db/models/base.py(88):         attr_meta = attrs.pop('Meta', None)
0.65 /testbed/django/db/models/base.py(92):         contributable_attrs = {}
0.65 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.65 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.65 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.65 /testbed/django/db/models/base.py(97):                 new_attrs[obj_name] = obj
0.65 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.65 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.65 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.65 /testbed/django/db/models/base.py(97):                 new_attrs[obj_name] = obj
0.65 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.65 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.65 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.65 /testbed/django/db/models/base.py(95):                 contributable_attrs[obj_name] = obj
0.65 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.65 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.65 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.65 /testbed/django/db/models/base.py(95):                 contributable_attrs[obj_name] = obj
0.65 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.65 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.65 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.65 /testbed/django/db/models/base.py(95):                 contributable_attrs[obj_name] = obj
0.65 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.65 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.65 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.65 /testbed/django/db/models/base.py(97):                 new_attrs[obj_name] = obj
0.65 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.65 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.65 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.65 /testbed/django/db/models/base.py(97):                 new_attrs[obj_name] = obj
0.65 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.65 /testbed/django/db/models/base.py(98):         new_class = super_new(cls, name, bases, new_attrs, **kwargs)
0.65 /testbed/django/db/models/base.py(100):         abstract = getattr(attr_meta, 'abstract', False)
0.65 /testbed/django/db/models/base.py(101):         meta = attr_meta or getattr(new_class, 'Meta', None)
0.65 /testbed/django/db/models/base.py(102):         base_meta = getattr(new_class, '_meta', None)
0.65 /testbed/django/db/models/base.py(104):         app_label = None
0.65 /testbed/django/db/models/base.py(107):         app_config = apps.get_containing_app_config(module)
0.65 /testbed/django/db/models/base.py(109):         if getattr(meta, 'app_label', None) is None:
0.65 /testbed/django/db/models/base.py(110):             if app_config is None:
0.65 /testbed/django/db/models/base.py(119):                 app_label = app_config.label
0.65 /testbed/django/db/models/base.py(121):         new_class.add_to_class('_meta', Options(meta, app_label))
0.65 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.65 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.65 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.65 /testbed/django/db/models/base.py(122):         if not abstract:
0.65 /testbed/django/db/models/base.py(123):             new_class.add_to_class(
0.65 /testbed/django/db/models/base.py(124):                 'DoesNotExist',
0.65 /testbed/django/db/models/base.py(125):                 subclass_exception(
0.65 /testbed/django/db/models/base.py(126):                     'DoesNotExist',
0.65 /testbed/django/db/models/base.py(127):                     tuple(
0.65 /testbed/django/db/models/base.py(128):                         x.DoesNotExist for x in parents if hasattr(x, '_meta') and not x._meta.abstract
0.65 /testbed/django/db/models/base.py(128):                         x.DoesNotExist for x in parents if hasattr(x, '_meta') and not x._meta.abstract
0.65 /testbed/django/db/models/base.py(128):                         x.DoesNotExist for x in parents if hasattr(x, '_meta') and not x._meta.abstract
0.65 /testbed/django/db/models/base.py(129):                     ) or (ObjectDoesNotExist,),
0.65 /testbed/django/db/models/base.py(130):                     module,
0.65 /testbed/django/db/models/base.py(131):                     attached_to=new_class))
0.65 /testbed/django/db/models/base.py(60):     return type(name, bases, {
0.65 /testbed/django/db/models/base.py(61):         '__module__': module,
0.65 /testbed/django/db/models/base.py(62):         '__qualname__': '%s.%s' % (attached_to.__qualname__, name),
0.65 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.65 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.65 /testbed/django/db/models/base.py(327):             setattr(cls, name, value)
0.65 /testbed/django/db/models/base.py(132):             new_class.add_to_class(
0.65 /testbed/django/db/models/base.py(133):                 'MultipleObjectsReturned',
0.65 /testbed/django/db/models/base.py(134):                 subclass_exception(
0.65 /testbed/django/db/models/base.py(135):                     'MultipleObjectsReturned',
0.65 /testbed/django/db/models/base.py(136):                     tuple(
0.65 /testbed/django/db/models/base.py(137):                         x.MultipleObjectsReturned for x in parents if hasattr(x, '_meta') and not x._meta.abstract
0.65 /testbed/django/db/models/base.py(137):                         x.MultipleObjectsReturned for x in parents if hasattr(x, '_meta') and not x._meta.abstract
0.65 /testbed/django/db/models/base.py(137):                         x.MultipleObjectsReturned for x in parents if hasattr(x, '_meta') and not x._meta.abstract
0.65 /testbed/django/db/models/base.py(138):                     ) or (MultipleObjectsReturned,),
0.65 /testbed/django/db/models/base.py(139):                     module,
0.65 /testbed/django/db/models/base.py(140):                     attached_to=new_class))
0.65 /testbed/django/db/models/base.py(60):     return type(name, bases, {
0.65 /testbed/django/db/models/base.py(61):         '__module__': module,
0.65 /testbed/django/db/models/base.py(62):         '__qualname__': '%s.%s' % (attached_to.__qualname__, name),
0.65 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.65 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.65 /testbed/django/db/models/base.py(327):             setattr(cls, name, value)
0.65 /testbed/django/db/models/base.py(141):             if base_meta and not base_meta.abstract:
0.65 /testbed/django/db/models/base.py(150):         is_proxy = new_class._meta.proxy
0.65 /testbed/django/db/models/base.py(154):         if is_proxy and base_meta and base_meta.swapped:
0.65 /testbed/django/db/models/base.py(159):         for obj_name, obj in contributable_attrs.items():
0.65 /testbed/django/db/models/base.py(160):             new_class.add_to_class(obj_name, obj)
0.65 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.65 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.65 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.65 /testbed/django/db/models/base.py(159):         for obj_name, obj in contributable_attrs.items():
0.65 /testbed/django/db/models/base.py(160):             new_class.add_to_class(obj_name, obj)
0.65 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.65 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.65 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.65 /testbed/django/db/models/base.py(74):         super_new = super().__new__
0.65 /testbed/django/db/models/base.py(78):         parents = [b for b in bases if isinstance(b, ModelBase)]
0.65 /testbed/django/db/models/base.py(78):         parents = [b for b in bases if isinstance(b, ModelBase)]
0.65 /testbed/django/db/models/base.py(78):         parents = [b for b in bases if isinstance(b, ModelBase)]
0.65 /testbed/django/db/models/base.py(79):         if not parents:
0.65 /testbed/django/db/models/base.py(83):         module = attrs.pop('__module__')
0.65 /testbed/django/db/models/base.py(84):         new_attrs = {'__module__': module}
0.65 /testbed/django/db/models/base.py(85):         classcell = attrs.pop('__classcell__', None)
0.65 /testbed/django/db/models/base.py(86):         if classcell is not None:
0.65 /testbed/django/db/models/base.py(88):         attr_meta = attrs.pop('Meta', None)
0.65 /testbed/django/db/models/base.py(92):         contributable_attrs = {}
0.65 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.65 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.65 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.65 /testbed/django/db/models/base.py(95):                 contributable_attrs[obj_name] = obj
0.65 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.65 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.65 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.65 /testbed/django/db/models/base.py(95):                 contributable_attrs[obj_name] = obj
0.65 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.65 /testbed/django/db/models/base.py(98):         new_class = super_new(cls, name, bases, new_attrs, **kwargs)
0.65 /testbed/django/db/models/base.py(100):         abstract = getattr(attr_meta, 'abstract', False)
0.65 /testbed/django/db/models/base.py(101):         meta = attr_meta or getattr(new_class, 'Meta', None)
0.65 /testbed/django/db/models/base.py(102):         base_meta = getattr(new_class, '_meta', None)
0.65 /testbed/django/db/models/base.py(104):         app_label = None
0.65 /testbed/django/db/models/base.py(107):         app_config = apps.get_containing_app_config(module)
0.65 /testbed/django/db/models/base.py(109):         if getattr(meta, 'app_label', None) is None:
0.65 /testbed/django/db/models/base.py(121):         new_class.add_to_class('_meta', Options(meta, app_label))
0.65 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.65 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.65 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.65 /testbed/django/db/models/base.py(122):         if not abstract:
0.65 /testbed/django/db/models/base.py(123):             new_class.add_to_class(
0.65 /testbed/django/db/models/base.py(124):                 'DoesNotExist',
0.65 /testbed/django/db/models/base.py(125):                 subclass_exception(
0.65 /testbed/django/db/models/base.py(126):                     'DoesNotExist',
0.65 /testbed/django/db/models/base.py(127):                     tuple(
0.65 /testbed/django/db/models/base.py(128):                         x.DoesNotExist for x in parents if hasattr(x, '_meta') and not x._meta.abstract
0.65 /testbed/django/db/models/base.py(128):                         x.DoesNotExist for x in parents if hasattr(x, '_meta') and not x._meta.abstract
0.65 /testbed/django/db/models/base.py(128):                         x.DoesNotExist for x in parents if hasattr(x, '_meta') and not x._meta.abstract
0.65 /testbed/django/db/models/base.py(129):                     ) or (ObjectDoesNotExist,),
0.65 /testbed/django/db/models/base.py(130):                     module,
0.65 /testbed/django/db/models/base.py(131):                     attached_to=new_class))
0.65 /testbed/django/db/models/base.py(60):     return type(name, bases, {
0.65 /testbed/django/db/models/base.py(61):         '__module__': module,
0.65 /testbed/django/db/models/base.py(62):         '__qualname__': '%s.%s' % (attached_to.__qualname__, name),
0.65 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.65 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.65 /testbed/django/db/models/base.py(327):             setattr(cls, name, value)
0.65 /testbed/django/db/models/base.py(132):             new_class.add_to_class(
0.65 /testbed/django/db/models/base.py(133):                 'MultipleObjectsReturned',
0.65 /testbed/django/db/models/base.py(134):                 subclass_exception(
0.65 /testbed/django/db/models/base.py(135):                     'MultipleObjectsReturned',
0.65 /testbed/django/db/models/base.py(136):                     tuple(
0.65 /testbed/django/db/models/base.py(137):                         x.MultipleObjectsReturned for x in parents if hasattr(x, '_meta') and not x._meta.abstract
0.65 /testbed/django/db/models/base.py(137):                         x.MultipleObjectsReturned for x in parents if hasattr(x, '_meta') and not x._meta.abstract
0.65 /testbed/django/db/models/base.py(137):                         x.MultipleObjectsReturned for x in parents if hasattr(x, '_meta') and not x._meta.abstract
0.65 /testbed/django/db/models/base.py(138):                     ) or (MultipleObjectsReturned,),
0.65 /testbed/django/db/models/base.py(139):                     module,
0.65 /testbed/django/db/models/base.py(140):                     attached_to=new_class))
0.65 /testbed/django/db/models/base.py(60):     return type(name, bases, {
0.65 /testbed/django/db/models/base.py(61):         '__module__': module,
0.65 /testbed/django/db/models/base.py(62):         '__qualname__': '%s.%s' % (attached_to.__qualname__, name),
0.65 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.65 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.65 /testbed/django/db/models/base.py(327):             setattr(cls, name, value)
0.65 /testbed/django/db/models/base.py(141):             if base_meta and not base_meta.abstract:
0.65 /testbed/django/db/models/base.py(150):         is_proxy = new_class._meta.proxy
0.65 /testbed/django/db/models/base.py(154):         if is_proxy and base_meta and base_meta.swapped:
0.65 /testbed/django/db/models/base.py(159):         for obj_name, obj in contributable_attrs.items():
0.65 /testbed/django/db/models/base.py(160):             new_class.add_to_class(obj_name, obj)
0.65 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.65 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.65 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.65 /testbed/django/db/models/base.py(159):         for obj_name, obj in contributable_attrs.items():
0.65 /testbed/django/db/models/base.py(160):             new_class.add_to_class(obj_name, obj)
0.65 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.65 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.65 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.65 /testbed/django/db/models/base.py(159):         for obj_name, obj in contributable_attrs.items():
0.65 /testbed/django/db/models/base.py(163):         new_fields = chain(
0.65 /testbed/django/db/models/base.py(164):             new_class._meta.local_fields,
0.65 /testbed/django/db/models/base.py(165):             new_class._meta.local_many_to_many,
0.65 /testbed/django/db/models/base.py(166):             new_class._meta.private_fields
0.65 /testbed/django/db/models/base.py(168):         field_names = {f.name for f in new_fields}
0.65 /testbed/django/db/models/base.py(168):         field_names = {f.name for f in new_fields}
0.65 /testbed/django/db/models/base.py(168):         field_names = {f.name for f in new_fields}
0.65 /testbed/django/db/models/base.py(168):         field_names = {f.name for f in new_fields}
0.65 /testbed/django/db/models/base.py(171):         if is_proxy:
0.65 /testbed/django/db/models/base.py(191):             new_class._meta.concrete_model = new_class
0.65 /testbed/django/db/models/base.py(194):         parent_links = {}
0.65 /testbed/django/db/models/base.py(195):         for base in reversed([new_class] + parents):
0.65 /testbed/django/db/models/base.py(197):             if not hasattr(base, '_meta'):
0.65 /testbed/django/db/models/base.py(198):                 continue
0.65 /testbed/django/db/models/base.py(195):         for base in reversed([new_class] + parents):
0.65 /testbed/django/db/models/base.py(197):             if not hasattr(base, '_meta'):
0.65 /testbed/django/db/models/base.py(200):             if base != new_class and not base._meta.abstract:
0.65 /testbed/django/db/models/base.py(203):             for field in base._meta.local_fields:
0.65 /testbed/django/db/models/base.py(204):                 if isinstance(field, OneToOneField):
0.65 /testbed/django/db/models/base.py(203):             for field in base._meta.local_fields:
0.65 /testbed/django/db/models/base.py(204):                 if isinstance(field, OneToOneField):
0.65 /testbed/django/db/models/base.py(203):             for field in base._meta.local_fields:
0.65 /testbed/django/db/models/base.py(195):         for base in reversed([new_class] + parents):
0.65 /testbed/django/db/models/base.py(209):         inherited_attributes = set()
0.65 /testbed/django/db/models/base.py(211):         for base in new_class.mro():
0.65 /testbed/django/db/models/base.py(212):             if base not in parents or not hasattr(base, '_meta'):
0.65 /testbed/django/db/models/base.py(215):                 inherited_attributes.update(base.__dict__)
0.65 /testbed/django/db/models/base.py(216):                 continue
0.65 /testbed/django/db/models/base.py(211):         for base in new_class.mro():
0.65 /testbed/django/db/models/base.py(212):             if base not in parents or not hasattr(base, '_meta'):
0.65 /testbed/django/db/models/base.py(215):                 inherited_attributes.update(base.__dict__)
0.65 /testbed/django/db/models/base.py(216):                 continue
0.65 /testbed/django/db/models/base.py(211):         for base in new_class.mro():
0.65 /testbed/django/db/models/base.py(212):             if base not in parents or not hasattr(base, '_meta'):
0.65 /testbed/django/db/models/base.py(215):                 inherited_attributes.update(base.__dict__)
0.65 /testbed/django/db/models/base.py(216):                 continue
0.65 /testbed/django/db/models/base.py(211):         for base in new_class.mro():
0.65 /testbed/django/db/models/base.py(309):         new_class._meta.indexes = [copy.deepcopy(idx) for idx in new_class._meta.indexes]
0.65 /testbed/django/db/models/base.py(309):         new_class._meta.indexes = [copy.deepcopy(idx) for idx in new_class._meta.indexes]
0.65 /testbed/django/db/models/base.py(311):         if abstract:
0.65 /testbed/django/db/models/base.py(319):         new_class._prepare()
0.65 /testbed/django/db/models/base.py(331):         opts = cls._meta
0.65 /testbed/django/db/models/base.py(332):         opts._prepare(cls)
0.65 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.65 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.65 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.65 /testbed/django/db/models/base.py(334):         if opts.order_with_respect_to:
0.65 /testbed/django/db/models/base.py(349):         if cls.__doc__ is None:
0.65 /testbed/django/db/models/base.py(350):             cls.__doc__ = "%s(%s)" % (cls.__name__, ", ".join(f.name for f in opts.fields))
0.65 /testbed/django/db/models/base.py(350):             cls.__doc__ = "%s(%s)" % (cls.__name__, ", ".join(f.name for f in opts.fields))
0.65 /testbed/django/db/models/base.py(350):             cls.__doc__ = "%s(%s)" % (cls.__name__, ", ".join(f.name for f in opts.fields))
0.65 /testbed/django/db/models/base.py(350):             cls.__doc__ = "%s(%s)" % (cls.__name__, ", ".join(f.name for f in opts.fields))
0.65 /testbed/django/db/models/base.py(350):             cls.__doc__ = "%s(%s)" % (cls.__name__, ", ".join(f.name for f in opts.fields))
0.65 /testbed/django/db/models/base.py(352):         get_absolute_url_override = settings.ABSOLUTE_URL_OVERRIDES.get(opts.label_lower)
0.65 /testbed/django/db/models/base.py(353):         if get_absolute_url_override:
0.65 /testbed/django/db/models/base.py(356):         if not opts.managers:
0.65 /testbed/django/db/models/base.py(357):             if any(f.name == 'objects' for f in opts.fields):
0.65 /testbed/django/db/models/base.py(357):             if any(f.name == 'objects' for f in opts.fields):
0.65 /testbed/django/db/models/base.py(357):             if any(f.name == 'objects' for f in opts.fields):
0.65 /testbed/django/db/models/base.py(357):             if any(f.name == 'objects' for f in opts.fields):
0.65 /testbed/django/db/models/base.py(357):             if any(f.name == 'objects' for f in opts.fields):
0.65 /testbed/django/db/models/base.py(362):             manager = Manager()
0.65 /testbed/django/db/models/base.py(363):             manager.auto_created = True
0.65 /testbed/django/db/models/base.py(364):             cls.add_to_class('objects', manager)
0.65 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.65 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.65 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.65 /testbed/django/db/models/base.py(369):         for index in cls._meta.indexes:
0.65 /testbed/django/db/models/base.py(373):         class_prepared.send(sender=cls)
0.65 /testbed/django/db/models/base.py(320):         new_class._meta.apps.register_model(new_class._meta.app_label, new_class)
0.65 /testbed/django/db/models/base.py(321):         return new_class
0.65 /testbed/django/db/models/base.py(159):         for obj_name, obj in contributable_attrs.items():
0.65 /testbed/django/db/models/base.py(160):             new_class.add_to_class(obj_name, obj)
0.65 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.65 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.65 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.65 /testbed/django/db/models/base.py(159):         for obj_name, obj in contributable_attrs.items():
0.65 /testbed/django/db/models/base.py(163):         new_fields = chain(
0.65 /testbed/django/db/models/base.py(164):             new_class._meta.local_fields,
0.65 /testbed/django/db/models/base.py(165):             new_class._meta.local_many_to_many,
0.65 /testbed/django/db/models/base.py(166):             new_class._meta.private_fields
0.65 /testbed/django/db/models/base.py(168):         field_names = {f.name for f in new_fields}
0.65 /testbed/django/db/models/base.py(168):         field_names = {f.name for f in new_fields}
0.65 /testbed/django/db/models/base.py(168):         field_names = {f.name for f in new_fields}
0.65 /testbed/django/db/models/base.py(168):         field_names = {f.name for f in new_fields}
0.65 /testbed/django/db/models/base.py(171):         if is_proxy:
0.65 /testbed/django/db/models/base.py(191):             new_class._meta.concrete_model = new_class
0.65 /testbed/django/db/models/base.py(194):         parent_links = {}
0.65 /testbed/django/db/models/base.py(195):         for base in reversed([new_class] + parents):
0.65 /testbed/django/db/models/base.py(197):             if not hasattr(base, '_meta'):
0.65 /testbed/django/db/models/base.py(198):                 continue
0.65 /testbed/django/db/models/base.py(195):         for base in reversed([new_class] + parents):
0.65 /testbed/django/db/models/base.py(197):             if not hasattr(base, '_meta'):
0.65 /testbed/django/db/models/base.py(200):             if base != new_class and not base._meta.abstract:
0.65 /testbed/django/db/models/base.py(203):             for field in base._meta.local_fields:
0.65 /testbed/django/db/models/base.py(204):                 if isinstance(field, OneToOneField):
0.65 /testbed/django/db/models/base.py(203):             for field in base._meta.local_fields:
0.65 /testbed/django/db/models/base.py(195):         for base in reversed([new_class] + parents):
0.65 /testbed/django/db/models/base.py(209):         inherited_attributes = set()
0.65 /testbed/django/db/models/base.py(211):         for base in new_class.mro():
0.65 /testbed/django/db/models/base.py(212):             if base not in parents or not hasattr(base, '_meta'):
0.65 /testbed/django/db/models/base.py(215):                 inherited_attributes.update(base.__dict__)
0.65 /testbed/django/db/models/base.py(216):                 continue
0.65 /testbed/django/db/models/base.py(211):         for base in new_class.mro():
0.65 /testbed/django/db/models/base.py(212):             if base not in parents or not hasattr(base, '_meta'):
0.65 /testbed/django/db/models/base.py(215):                 inherited_attributes.update(base.__dict__)
0.65 /testbed/django/db/models/base.py(216):                 continue
0.65 /testbed/django/db/models/base.py(211):         for base in new_class.mro():
0.65 /testbed/django/db/models/base.py(212):             if base not in parents or not hasattr(base, '_meta'):
0.65 /testbed/django/db/models/base.py(215):                 inherited_attributes.update(base.__dict__)
0.65 /testbed/django/db/models/base.py(216):                 continue
0.65 /testbed/django/db/models/base.py(211):         for base in new_class.mro():
0.65 /testbed/django/db/models/base.py(309):         new_class._meta.indexes = [copy.deepcopy(idx) for idx in new_class._meta.indexes]
0.65 /testbed/django/db/models/base.py(309):         new_class._meta.indexes = [copy.deepcopy(idx) for idx in new_class._meta.indexes]
0.65 /testbed/django/db/models/base.py(311):         if abstract:
0.65 /testbed/django/db/models/base.py(319):         new_class._prepare()
0.65 /testbed/django/db/models/base.py(331):         opts = cls._meta
0.65 /testbed/django/db/models/base.py(332):         opts._prepare(cls)
0.65 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.65 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.65 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.65 /testbed/django/db/models/base.py(334):         if opts.order_with_respect_to:
0.65 /testbed/django/db/models/base.py(349):         if cls.__doc__ is None:
0.65 /testbed/django/db/models/base.py(352):         get_absolute_url_override = settings.ABSOLUTE_URL_OVERRIDES.get(opts.label_lower)
0.65 /testbed/django/db/models/base.py(353):         if get_absolute_url_override:
0.65 /testbed/django/db/models/base.py(356):         if not opts.managers:
0.65 /testbed/django/db/models/base.py(369):         for index in cls._meta.indexes:
0.65 /testbed/django/db/models/base.py(373):         class_prepared.send(sender=cls)
0.65 /testbed/django/db/models/base.py(320):         new_class._meta.apps.register_model(new_class._meta.app_label, new_class)
0.65 /testbed/django/db/models/base.py(321):         return new_class
0.65 /testbed/django/db/models/base.py(74):         super_new = super().__new__
0.65 /testbed/django/db/models/base.py(78):         parents = [b for b in bases if isinstance(b, ModelBase)]
0.65 /testbed/django/db/models/base.py(78):         parents = [b for b in bases if isinstance(b, ModelBase)]
0.65 /testbed/django/db/models/base.py(78):         parents = [b for b in bases if isinstance(b, ModelBase)]
0.65 /testbed/django/db/models/base.py(79):         if not parents:
0.65 /testbed/django/db/models/base.py(83):         module = attrs.pop('__module__')
0.65 /testbed/django/db/models/base.py(84):         new_attrs = {'__module__': module}
0.65 /testbed/django/db/models/base.py(85):         classcell = attrs.pop('__classcell__', None)
0.65 /testbed/django/db/models/base.py(86):         if classcell is not None:
0.65 /testbed/django/db/models/base.py(88):         attr_meta = attrs.pop('Meta', None)
0.65 /testbed/django/db/models/base.py(92):         contributable_attrs = {}
0.65 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.65 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.65 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.65 /testbed/django/db/models/base.py(97):                 new_attrs[obj_name] = obj
0.65 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.65 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.65 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.65 /testbed/django/db/models/base.py(97):                 new_attrs[obj_name] = obj
0.65 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.65 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.65 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.65 /testbed/django/db/models/base.py(95):                 contributable_attrs[obj_name] = obj
0.65 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.65 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.65 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.65 /testbed/django/db/models/base.py(95):                 contributable_attrs[obj_name] = obj
0.65 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.65 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.65 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.65 /testbed/django/db/models/base.py(95):                 contributable_attrs[obj_name] = obj
0.65 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.65 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.65 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.65 /testbed/django/db/models/base.py(97):                 new_attrs[obj_name] = obj
0.65 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.65 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.65 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.65 /testbed/django/db/models/base.py(97):                 new_attrs[obj_name] = obj
0.65 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.65 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.65 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.65 /testbed/django/db/models/base.py(97):                 new_attrs[obj_name] = obj
0.65 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.65 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.65 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.65 /testbed/django/db/models/base.py(97):                 new_attrs[obj_name] = obj
0.65 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.65 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.65 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.65 /testbed/django/db/models/base.py(97):                 new_attrs[obj_name] = obj
0.65 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.65 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.65 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.65 /testbed/django/db/models/base.py(97):                 new_attrs[obj_name] = obj
0.65 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.65 /testbed/django/db/models/base.py(98):         new_class = super_new(cls, name, bases, new_attrs, **kwargs)
0.65 /testbed/django/db/models/base.py(100):         abstract = getattr(attr_meta, 'abstract', False)
0.65 /testbed/django/db/models/base.py(101):         meta = attr_meta or getattr(new_class, 'Meta', None)
0.65 /testbed/django/db/models/base.py(102):         base_meta = getattr(new_class, '_meta', None)
0.65 /testbed/django/db/models/base.py(104):         app_label = None
0.65 /testbed/django/db/models/base.py(107):         app_config = apps.get_containing_app_config(module)
0.65 /testbed/django/db/models/base.py(109):         if getattr(meta, 'app_label', None) is None:
0.65 /testbed/django/db/models/base.py(110):             if app_config is None:
0.65 /testbed/django/db/models/base.py(119):                 app_label = app_config.label
0.65 /testbed/django/db/models/base.py(121):         new_class.add_to_class('_meta', Options(meta, app_label))
0.65 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.65 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.65 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.65 /testbed/django/db/models/base.py(122):         if not abstract:
0.65 /testbed/django/db/models/base.py(150):         is_proxy = new_class._meta.proxy
0.65 /testbed/django/db/models/base.py(154):         if is_proxy and base_meta and base_meta.swapped:
0.65 /testbed/django/db/models/base.py(159):         for obj_name, obj in contributable_attrs.items():
0.65 /testbed/django/db/models/base.py(160):             new_class.add_to_class(obj_name, obj)
0.65 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.65 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.65 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.65 /testbed/django/db/models/base.py(159):         for obj_name, obj in contributable_attrs.items():
0.65 /testbed/django/db/models/base.py(160):             new_class.add_to_class(obj_name, obj)
0.65 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.65 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.65 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.65 /testbed/django/db/models/base.py(159):         for obj_name, obj in contributable_attrs.items():
0.65 /testbed/django/db/models/base.py(160):             new_class.add_to_class(obj_name, obj)
0.65 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.65 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.65 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.65 /testbed/django/db/models/base.py(159):         for obj_name, obj in contributable_attrs.items():
0.65 /testbed/django/db/models/base.py(163):         new_fields = chain(
0.65 /testbed/django/db/models/base.py(164):             new_class._meta.local_fields,
0.65 /testbed/django/db/models/base.py(165):             new_class._meta.local_many_to_many,
0.65 /testbed/django/db/models/base.py(166):             new_class._meta.private_fields
0.65 /testbed/django/db/models/base.py(168):         field_names = {f.name for f in new_fields}
0.65 /testbed/django/db/models/base.py(168):         field_names = {f.name for f in new_fields}
0.65 /testbed/django/db/models/base.py(168):         field_names = {f.name for f in new_fields}
0.65 /testbed/django/db/models/base.py(168):         field_names = {f.name for f in new_fields}
0.65 /testbed/django/db/models/base.py(168):         field_names = {f.name for f in new_fields}
0.65 /testbed/django/db/models/base.py(171):         if is_proxy:
0.65 /testbed/django/db/models/base.py(191):             new_class._meta.concrete_model = new_class
0.65 /testbed/django/db/models/base.py(194):         parent_links = {}
0.65 /testbed/django/db/models/base.py(195):         for base in reversed([new_class] + parents):
0.65 /testbed/django/db/models/base.py(197):             if not hasattr(base, '_meta'):
0.65 /testbed/django/db/models/base.py(198):                 continue
0.65 /testbed/django/db/models/base.py(195):         for base in reversed([new_class] + parents):
0.65 /testbed/django/db/models/base.py(197):             if not hasattr(base, '_meta'):
0.65 /testbed/django/db/models/base.py(200):             if base != new_class and not base._meta.abstract:
0.65 /testbed/django/db/models/base.py(203):             for field in base._meta.local_fields:
0.65 /testbed/django/db/models/base.py(204):                 if isinstance(field, OneToOneField):
0.65 /testbed/django/db/models/base.py(203):             for field in base._meta.local_fields:
0.65 /testbed/django/db/models/base.py(195):         for base in reversed([new_class] + parents):
0.65 /testbed/django/db/models/base.py(209):         inherited_attributes = set()
0.65 /testbed/django/db/models/base.py(211):         for base in new_class.mro():
0.65 /testbed/django/db/models/base.py(212):             if base not in parents or not hasattr(base, '_meta'):
0.65 /testbed/django/db/models/base.py(215):                 inherited_attributes.update(base.__dict__)
0.65 /testbed/django/db/models/base.py(216):                 continue
0.65 /testbed/django/db/models/base.py(211):         for base in new_class.mro():
0.65 /testbed/django/db/models/base.py(212):             if base not in parents or not hasattr(base, '_meta'):
0.65 /testbed/django/db/models/base.py(215):                 inherited_attributes.update(base.__dict__)
0.65 /testbed/django/db/models/base.py(216):                 continue
0.65 /testbed/django/db/models/base.py(211):         for base in new_class.mro():
0.65 /testbed/django/db/models/base.py(212):             if base not in parents or not hasattr(base, '_meta'):
0.65 /testbed/django/db/models/base.py(215):                 inherited_attributes.update(base.__dict__)
0.65 /testbed/django/db/models/base.py(216):                 continue
0.65 /testbed/django/db/models/base.py(211):         for base in new_class.mro():
0.65 /testbed/django/db/models/base.py(309):         new_class._meta.indexes = [copy.deepcopy(idx) for idx in new_class._meta.indexes]
0.65 /testbed/django/db/models/base.py(309):         new_class._meta.indexes = [copy.deepcopy(idx) for idx in new_class._meta.indexes]
0.65 /testbed/django/db/models/base.py(311):         if abstract:
0.65 /testbed/django/db/models/base.py(315):             attr_meta.abstract = False
0.65 /testbed/django/db/models/base.py(316):             new_class.Meta = attr_meta
0.65 /testbed/django/db/models/base.py(317):             return new_class
0.65 /testbed/django/db/models/base.py(74):         super_new = super().__new__
0.65 /testbed/django/db/models/base.py(78):         parents = [b for b in bases if isinstance(b, ModelBase)]
0.65 /testbed/django/db/models/base.py(78):         parents = [b for b in bases if isinstance(b, ModelBase)]
0.65 /testbed/django/db/models/base.py(78):         parents = [b for b in bases if isinstance(b, ModelBase)]
0.65 /testbed/django/db/models/base.py(78):         parents = [b for b in bases if isinstance(b, ModelBase)]
0.65 /testbed/django/db/models/base.py(79):         if not parents:
0.65 /testbed/django/db/models/base.py(83):         module = attrs.pop('__module__')
0.65 /testbed/django/db/models/base.py(84):         new_attrs = {'__module__': module}
0.65 /testbed/django/db/models/base.py(85):         classcell = attrs.pop('__classcell__', None)
0.65 /testbed/django/db/models/base.py(86):         if classcell is not None:
0.65 /testbed/django/db/models/base.py(87):             new_attrs['__classcell__'] = classcell
0.65 /testbed/django/db/models/base.py(88):         attr_meta = attrs.pop('Meta', None)
0.65 /testbed/django/db/models/base.py(92):         contributable_attrs = {}
0.65 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.65 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.65 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.65 /testbed/django/db/models/base.py(97):                 new_attrs[obj_name] = obj
0.65 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.65 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.65 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.65 /testbed/django/db/models/base.py(97):                 new_attrs[obj_name] = obj
0.65 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.65 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.65 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.65 /testbed/django/db/models/base.py(97):                 new_attrs[obj_name] = obj
0.65 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.65 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.65 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.65 /testbed/django/db/models/base.py(95):                 contributable_attrs[obj_name] = obj
0.65 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.65 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.65 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.65 /testbed/django/db/models/base.py(95):                 contributable_attrs[obj_name] = obj
0.65 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.65 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.65 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.65 /testbed/django/db/models/base.py(95):                 contributable_attrs[obj_name] = obj
0.65 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.65 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.65 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.65 /testbed/django/db/models/base.py(95):                 contributable_attrs[obj_name] = obj
0.65 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.65 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.65 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.65 /testbed/django/db/models/base.py(95):                 contributable_attrs[obj_name] = obj
0.65 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.65 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.65 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.65 /testbed/django/db/models/base.py(95):                 contributable_attrs[obj_name] = obj
0.65 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.65 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.65 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.65 /testbed/django/db/models/base.py(95):                 contributable_attrs[obj_name] = obj
0.65 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.65 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.65 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.65 /testbed/django/db/models/base.py(95):                 contributable_attrs[obj_name] = obj
0.65 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.65 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.65 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.65 /testbed/django/db/models/base.py(97):                 new_attrs[obj_name] = obj
0.65 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.65 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.65 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.65 /testbed/django/db/models/base.py(97):                 new_attrs[obj_name] = obj
0.65 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.65 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.65 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.65 /testbed/django/db/models/base.py(97):                 new_attrs[obj_name] = obj
0.65 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.65 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.65 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.65 /testbed/django/db/models/base.py(97):                 new_attrs[obj_name] = obj
0.65 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.65 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.65 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.65 /testbed/django/db/models/base.py(97):                 new_attrs[obj_name] = obj
0.65 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.65 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.65 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.65 /testbed/django/db/models/base.py(97):                 new_attrs[obj_name] = obj
0.65 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.65 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.65 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.65 /testbed/django/db/models/base.py(97):                 new_attrs[obj_name] = obj
0.65 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.65 /testbed/django/db/models/base.py(98):         new_class = super_new(cls, name, bases, new_attrs, **kwargs)
0.65 /testbed/django/db/models/base.py(100):         abstract = getattr(attr_meta, 'abstract', False)
0.65 /testbed/django/db/models/base.py(101):         meta = attr_meta or getattr(new_class, 'Meta', None)
0.65 /testbed/django/db/models/base.py(102):         base_meta = getattr(new_class, '_meta', None)
0.65 /testbed/django/db/models/base.py(104):         app_label = None
0.65 /testbed/django/db/models/base.py(107):         app_config = apps.get_containing_app_config(module)
0.65 /testbed/django/db/models/base.py(109):         if getattr(meta, 'app_label', None) is None:
0.65 /testbed/django/db/models/base.py(110):             if app_config is None:
0.65 /testbed/django/db/models/base.py(119):                 app_label = app_config.label
0.65 /testbed/django/db/models/base.py(121):         new_class.add_to_class('_meta', Options(meta, app_label))
0.65 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.65 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.65 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.65 /testbed/django/db/models/base.py(122):         if not abstract:
0.65 /testbed/django/db/models/base.py(150):         is_proxy = new_class._meta.proxy
0.65 /testbed/django/db/models/base.py(154):         if is_proxy and base_meta and base_meta.swapped:
0.65 /testbed/django/db/models/base.py(159):         for obj_name, obj in contributable_attrs.items():
0.65 /testbed/django/db/models/base.py(160):             new_class.add_to_class(obj_name, obj)
0.65 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.65 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.65 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.65 /testbed/django/db/models/base.py(159):         for obj_name, obj in contributable_attrs.items():
0.65 /testbed/django/db/models/base.py(160):             new_class.add_to_class(obj_name, obj)
0.65 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.65 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.65 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.65 /testbed/django/db/models/base.py(159):         for obj_name, obj in contributable_attrs.items():
0.65 /testbed/django/db/models/base.py(160):             new_class.add_to_class(obj_name, obj)
0.65 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.65 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.65 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.65 /testbed/django/db/models/base.py(159):         for obj_name, obj in contributable_attrs.items():
0.65 /testbed/django/db/models/base.py(160):             new_class.add_to_class(obj_name, obj)
0.65 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.65 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.65 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.65 /testbed/django/db/models/base.py(159):         for obj_name, obj in contributable_attrs.items():
0.65 /testbed/django/db/models/base.py(160):             new_class.add_to_class(obj_name, obj)
0.65 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.65 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.65 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.65 /testbed/django/db/models/base.py(159):         for obj_name, obj in contributable_attrs.items():
0.65 /testbed/django/db/models/base.py(160):             new_class.add_to_class(obj_name, obj)
0.65 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.65 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.65 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.65 /testbed/django/db/models/base.py(159):         for obj_name, obj in contributable_attrs.items():
0.65 /testbed/django/db/models/base.py(160):             new_class.add_to_class(obj_name, obj)
0.65 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.65 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.65 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.65 /testbed/django/db/models/base.py(159):         for obj_name, obj in contributable_attrs.items():
0.65 /testbed/django/db/models/base.py(160):             new_class.add_to_class(obj_name, obj)
0.65 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.65 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.65 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.65 /testbed/django/db/models/base.py(159):         for obj_name, obj in contributable_attrs.items():
0.65 /testbed/django/db/models/base.py(163):         new_fields = chain(
0.65 /testbed/django/db/models/base.py(164):             new_class._meta.local_fields,
0.65 /testbed/django/db/models/base.py(165):             new_class._meta.local_many_to_many,
0.65 /testbed/django/db/models/base.py(166):             new_class._meta.private_fields
0.65 /testbed/django/db/models/base.py(168):         field_names = {f.name for f in new_fields}
0.65 /testbed/django/db/models/base.py(168):         field_names = {f.name for f in new_fields}
0.65 /testbed/django/db/models/base.py(168):         field_names = {f.name for f in new_fields}
0.65 /testbed/django/db/models/base.py(168):         field_names = {f.name for f in new_fields}
0.65 /testbed/django/db/models/base.py(168):         field_names = {f.name for f in new_fields}
0.65 /testbed/django/db/models/base.py(168):         field_names = {f.name for f in new_fields}
0.65 /testbed/django/db/models/base.py(168):         field_names = {f.name for f in new_fields}
0.65 /testbed/django/db/models/base.py(168):         field_names = {f.name for f in new_fields}
0.65 /testbed/django/db/models/base.py(168):         field_names = {f.name for f in new_fields}
0.65 /testbed/django/db/models/base.py(171):         if is_proxy:
0.65 /testbed/django/db/models/base.py(191):             new_class._meta.concrete_model = new_class
0.65 /testbed/django/db/models/base.py(194):         parent_links = {}
0.65 /testbed/django/db/models/base.py(195):         for base in reversed([new_class] + parents):
0.65 /testbed/django/db/models/base.py(197):             if not hasattr(base, '_meta'):
0.65 /testbed/django/db/models/base.py(200):             if base != new_class and not base._meta.abstract:
0.65 /testbed/django/db/models/base.py(203):             for field in base._meta.local_fields:
0.65 /testbed/django/db/models/base.py(204):                 if isinstance(field, OneToOneField):
0.65 /testbed/django/db/models/base.py(203):             for field in base._meta.local_fields:
0.65 /testbed/django/db/models/base.py(195):         for base in reversed([new_class] + parents):
0.65 /testbed/django/db/models/base.py(197):             if not hasattr(base, '_meta'):
0.65 /testbed/django/db/models/base.py(200):             if base != new_class and not base._meta.abstract:
0.65 /testbed/django/db/models/base.py(203):             for field in base._meta.local_fields:
0.65 /testbed/django/db/models/base.py(204):                 if isinstance(field, OneToOneField):
0.65 /testbed/django/db/models/base.py(203):             for field in base._meta.local_fields:
0.65 /testbed/django/db/models/base.py(204):                 if isinstance(field, OneToOneField):
0.65 /testbed/django/db/models/base.py(203):             for field in base._meta.local_fields:
0.65 /testbed/django/db/models/base.py(195):         for base in reversed([new_class] + parents):
0.65 /testbed/django/db/models/base.py(197):             if not hasattr(base, '_meta'):
0.65 /testbed/django/db/models/base.py(200):             if base != new_class and not base._meta.abstract:
0.65 /testbed/django/db/models/base.py(203):             for field in base._meta.local_fields:
0.65 /testbed/django/db/models/base.py(204):                 if isinstance(field, OneToOneField):
0.65 /testbed/django/db/models/base.py(203):             for field in base._meta.local_fields:
0.65 /testbed/django/db/models/base.py(204):                 if isinstance(field, OneToOneField):
0.65 /testbed/django/db/models/base.py(203):             for field in base._meta.local_fields:
0.65 /testbed/django/db/models/base.py(204):                 if isinstance(field, OneToOneField):
0.65 /testbed/django/db/models/base.py(203):             for field in base._meta.local_fields:
0.65 /testbed/django/db/models/base.py(204):                 if isinstance(field, OneToOneField):
0.65 /testbed/django/db/models/base.py(203):             for field in base._meta.local_fields:
0.65 /testbed/django/db/models/base.py(204):                 if isinstance(field, OneToOneField):
0.65 /testbed/django/db/models/base.py(203):             for field in base._meta.local_fields:
0.65 /testbed/django/db/models/base.py(204):                 if isinstance(field, OneToOneField):
0.65 /testbed/django/db/models/base.py(203):             for field in base._meta.local_fields:
0.65 /testbed/django/db/models/base.py(204):                 if isinstance(field, OneToOneField):
0.65 /testbed/django/db/models/base.py(203):             for field in base._meta.local_fields:
0.65 /testbed/django/db/models/base.py(195):         for base in reversed([new_class] + parents):
0.65 /testbed/django/db/models/base.py(209):         inherited_attributes = set()
0.65 /testbed/django/db/models/base.py(211):         for base in new_class.mro():
0.65 /testbed/django/db/models/base.py(212):             if base not in parents or not hasattr(base, '_meta'):
0.65 /testbed/django/db/models/base.py(215):                 inherited_attributes.update(base.__dict__)
0.65 /testbed/django/db/models/base.py(216):                 continue
0.65 /testbed/django/db/models/base.py(211):         for base in new_class.mro():
0.65 /testbed/django/db/models/base.py(212):             if base not in parents or not hasattr(base, '_meta'):
0.65 /testbed/django/db/models/base.py(218):             parent_fields = base._meta.local_fields + base._meta.local_many_to_many
0.65 /testbed/django/db/models/base.py(219):             if not base._meta.abstract:
0.65 /testbed/django/db/models/base.py(269):                 base_parents = base._meta.parents.copy()
0.65 /testbed/django/db/models/base.py(272):                 for field in parent_fields:
0.65 /testbed/django/db/models/base.py(273):                     if (field.name not in field_names and
0.65 /testbed/django/db/models/base.py(274):                             field.name not in new_class.__dict__ and
0.65 /testbed/django/db/models/base.py(275):                             field.name not in inherited_attributes):
0.65 /testbed/django/db/models/base.py(276):                         new_field = copy.deepcopy(field)
0.65 /testbed/django/db/models/base.py(277):                         new_class.add_to_class(field.name, new_field)
0.65 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.65 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.65 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.65 /testbed/django/db/models/base.py(280):                         if field.one_to_one:
0.65 /testbed/django/db/models/base.py(272):                 for field in parent_fields:
0.65 /testbed/django/db/models/base.py(273):                     if (field.name not in field_names and
0.65 /testbed/django/db/models/base.py(274):                             field.name not in new_class.__dict__ and
0.65 /testbed/django/db/models/base.py(275):                             field.name not in inherited_attributes):
0.65 /testbed/django/db/models/base.py(276):                         new_field = copy.deepcopy(field)
0.65 /testbed/django/db/models/base.py(277):                         new_class.add_to_class(field.name, new_field)
0.65 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.65 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.65 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.65 /testbed/django/db/models/base.py(280):                         if field.one_to_one:
0.65 /testbed/django/db/models/base.py(272):                 for field in parent_fields:
0.65 /testbed/django/db/models/base.py(286):                 new_class._meta.parents.update(base_parents)
0.65 /testbed/django/db/models/base.py(290):             for field in base._meta.private_fields:
0.65 /testbed/django/db/models/base.py(211):         for base in new_class.mro():
0.65 /testbed/django/db/models/base.py(212):             if base not in parents or not hasattr(base, '_meta'):
0.65 /testbed/django/db/models/base.py(218):             parent_fields = base._meta.local_fields + base._meta.local_many_to_many
0.65 /testbed/django/db/models/base.py(219):             if not base._meta.abstract:
0.65 /testbed/django/db/models/base.py(269):                 base_parents = base._meta.parents.copy()
0.65 /testbed/django/db/models/base.py(272):                 for field in parent_fields:
0.65 /testbed/django/db/models/base.py(273):                     if (field.name not in field_names and
0.65 /testbed/django/db/models/base.py(274):                             field.name not in new_class.__dict__ and
0.65 /testbed/django/db/models/base.py(275):                             field.name not in inherited_attributes):
0.65 /testbed/django/db/models/base.py(276):                         new_field = copy.deepcopy(field)
0.65 /testbed/django/db/models/base.py(277):                         new_class.add_to_class(field.name, new_field)
0.65 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.65 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.65 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.65 /testbed/django/db/models/base.py(280):                         if field.one_to_one:
0.65 /testbed/django/db/models/base.py(272):                 for field in parent_fields:
0.65 /testbed/django/db/models/base.py(273):                     if (field.name not in field_names and
0.65 /testbed/django/db/models/base.py(274):                             field.name not in new_class.__dict__ and
0.65 /testbed/django/db/models/base.py(275):                             field.name not in inherited_attributes):
0.65 /testbed/django/db/models/base.py(276):                         new_field = copy.deepcopy(field)
0.65 /testbed/django/db/models/base.py(277):                         new_class.add_to_class(field.name, new_field)
0.65 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.65 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.65 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.65 /testbed/django/db/models/base.py(280):                         if field.one_to_one:
0.65 /testbed/django/db/models/base.py(272):                 for field in parent_fields:
0.65 /testbed/django/db/models/base.py(273):                     if (field.name not in field_names and
0.65 /testbed/django/db/models/base.py(274):                             field.name not in new_class.__dict__ and
0.65 /testbed/django/db/models/base.py(275):                             field.name not in inherited_attributes):
0.65 /testbed/django/db/models/base.py(276):                         new_field = copy.deepcopy(field)
0.65 /testbed/django/db/models/base.py(277):                         new_class.add_to_class(field.name, new_field)
0.65 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.65 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.65 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.65 /testbed/django/db/models/base.py(280):                         if field.one_to_one:
0.65 /testbed/django/db/models/base.py(272):                 for field in parent_fields:
0.65 /testbed/django/db/models/base.py(286):                 new_class._meta.parents.update(base_parents)
0.65 /testbed/django/db/models/base.py(290):             for field in base._meta.private_fields:
0.65 /testbed/django/db/models/base.py(211):         for base in new_class.mro():
0.65 /testbed/django/db/models/base.py(212):             if base not in parents or not hasattr(base, '_meta'):
0.65 /testbed/django/db/models/base.py(215):                 inherited_attributes.update(base.__dict__)
0.65 /testbed/django/db/models/base.py(216):                 continue
0.65 /testbed/django/db/models/base.py(211):         for base in new_class.mro():
0.65 /testbed/django/db/models/base.py(212):             if base not in parents or not hasattr(base, '_meta'):
0.65 /testbed/django/db/models/base.py(215):                 inherited_attributes.update(base.__dict__)
0.65 /testbed/django/db/models/base.py(216):                 continue
0.65 /testbed/django/db/models/base.py(211):         for base in new_class.mro():
0.65 /testbed/django/db/models/base.py(309):         new_class._meta.indexes = [copy.deepcopy(idx) for idx in new_class._meta.indexes]
0.65 /testbed/django/db/models/base.py(309):         new_class._meta.indexes = [copy.deepcopy(idx) for idx in new_class._meta.indexes]
0.65 /testbed/django/db/models/base.py(311):         if abstract:
0.65 /testbed/django/db/models/base.py(315):             attr_meta.abstract = False
0.65 /testbed/django/db/models/base.py(316):             new_class.Meta = attr_meta
0.65 /testbed/django/db/models/base.py(317):             return new_class
0.65 /testbed/django/db/models/base.py(74):         super_new = super().__new__
0.65 /testbed/django/db/models/base.py(78):         parents = [b for b in bases if isinstance(b, ModelBase)]
0.65 /testbed/django/db/models/base.py(78):         parents = [b for b in bases if isinstance(b, ModelBase)]
0.65 /testbed/django/db/models/base.py(78):         parents = [b for b in bases if isinstance(b, ModelBase)]
0.65 /testbed/django/db/models/base.py(79):         if not parents:
0.65 /testbed/django/db/models/base.py(83):         module = attrs.pop('__module__')
0.65 /testbed/django/db/models/base.py(84):         new_attrs = {'__module__': module}
0.65 /testbed/django/db/models/base.py(85):         classcell = attrs.pop('__classcell__', None)
0.65 /testbed/django/db/models/base.py(86):         if classcell is not None:
0.65 /testbed/django/db/models/base.py(88):         attr_meta = attrs.pop('Meta', None)
0.65 /testbed/django/db/models/base.py(92):         contributable_attrs = {}
0.65 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.65 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.65 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.65 /testbed/django/db/models/base.py(97):                 new_attrs[obj_name] = obj
0.65 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.65 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.65 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.65 /testbed/django/db/models/base.py(97):                 new_attrs[obj_name] = obj
0.65 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.65 /testbed/django/db/models/base.py(98):         new_class = super_new(cls, name, bases, new_attrs, **kwargs)
0.65 /testbed/django/db/models/base.py(100):         abstract = getattr(attr_meta, 'abstract', False)
0.65 /testbed/django/db/models/base.py(101):         meta = attr_meta or getattr(new_class, 'Meta', None)
0.65 /testbed/django/db/models/base.py(102):         base_meta = getattr(new_class, '_meta', None)
0.65 /testbed/django/db/models/base.py(104):         app_label = None
0.65 /testbed/django/db/models/base.py(107):         app_config = apps.get_containing_app_config(module)
0.65 /testbed/django/db/models/base.py(109):         if getattr(meta, 'app_label', None) is None:
0.65 /testbed/django/db/models/base.py(110):             if app_config is None:
0.65 /testbed/django/db/models/base.py(119):                 app_label = app_config.label
0.65 /testbed/django/db/models/base.py(121):         new_class.add_to_class('_meta', Options(meta, app_label))
0.65 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.65 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.65 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.65 /testbed/django/db/models/base.py(122):         if not abstract:
0.65 /testbed/django/db/models/base.py(123):             new_class.add_to_class(
0.65 /testbed/django/db/models/base.py(124):                 'DoesNotExist',
0.65 /testbed/django/db/models/base.py(125):                 subclass_exception(
0.65 /testbed/django/db/models/base.py(126):                     'DoesNotExist',
0.65 /testbed/django/db/models/base.py(127):                     tuple(
0.65 /testbed/django/db/models/base.py(128):                         x.DoesNotExist for x in parents if hasattr(x, '_meta') and not x._meta.abstract
0.65 /testbed/django/db/models/base.py(128):                         x.DoesNotExist for x in parents if hasattr(x, '_meta') and not x._meta.abstract
0.65 /testbed/django/db/models/base.py(128):                         x.DoesNotExist for x in parents if hasattr(x, '_meta') and not x._meta.abstract
0.65 /testbed/django/db/models/base.py(129):                     ) or (ObjectDoesNotExist,),
0.65 /testbed/django/db/models/base.py(130):                     module,
0.65 /testbed/django/db/models/base.py(131):                     attached_to=new_class))
0.65 /testbed/django/db/models/base.py(60):     return type(name, bases, {
0.65 /testbed/django/db/models/base.py(61):         '__module__': module,
0.65 /testbed/django/db/models/base.py(62):         '__qualname__': '%s.%s' % (attached_to.__qualname__, name),
0.65 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.65 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.65 /testbed/django/db/models/base.py(327):             setattr(cls, name, value)
0.65 /testbed/django/db/models/base.py(132):             new_class.add_to_class(
0.65 /testbed/django/db/models/base.py(133):                 'MultipleObjectsReturned',
0.65 /testbed/django/db/models/base.py(134):                 subclass_exception(
0.65 /testbed/django/db/models/base.py(135):                     'MultipleObjectsReturned',
0.65 /testbed/django/db/models/base.py(136):                     tuple(
0.65 /testbed/django/db/models/base.py(137):                         x.MultipleObjectsReturned for x in parents if hasattr(x, '_meta') and not x._meta.abstract
0.65 /testbed/django/db/models/base.py(137):                         x.MultipleObjectsReturned for x in parents if hasattr(x, '_meta') and not x._meta.abstract
0.65 /testbed/django/db/models/base.py(137):                         x.MultipleObjectsReturned for x in parents if hasattr(x, '_meta') and not x._meta.abstract
0.65 /testbed/django/db/models/base.py(138):                     ) or (MultipleObjectsReturned,),
0.65 /testbed/django/db/models/base.py(139):                     module,
0.65 /testbed/django/db/models/base.py(140):                     attached_to=new_class))
0.65 /testbed/django/db/models/base.py(60):     return type(name, bases, {
0.65 /testbed/django/db/models/base.py(61):         '__module__': module,
0.65 /testbed/django/db/models/base.py(62):         '__qualname__': '%s.%s' % (attached_to.__qualname__, name),
0.65 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.65 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.65 /testbed/django/db/models/base.py(327):             setattr(cls, name, value)
0.65 /testbed/django/db/models/base.py(141):             if base_meta and not base_meta.abstract:
0.65 /testbed/django/db/models/base.py(150):         is_proxy = new_class._meta.proxy
0.65 /testbed/django/db/models/base.py(154):         if is_proxy and base_meta and base_meta.swapped:
0.65 /testbed/django/db/models/base.py(159):         for obj_name, obj in contributable_attrs.items():
0.65 /testbed/django/db/models/base.py(163):         new_fields = chain(
0.65 /testbed/django/db/models/base.py(164):             new_class._meta.local_fields,
0.65 /testbed/django/db/models/base.py(165):             new_class._meta.local_many_to_many,
0.65 /testbed/django/db/models/base.py(166):             new_class._meta.private_fields
0.65 /testbed/django/db/models/base.py(168):         field_names = {f.name for f in new_fields}
0.65 /testbed/django/db/models/base.py(168):         field_names = {f.name for f in new_fields}
0.65 /testbed/django/db/models/base.py(171):         if is_proxy:
0.65 /testbed/django/db/models/base.py(191):             new_class._meta.concrete_model = new_class
0.65 /testbed/django/db/models/base.py(194):         parent_links = {}
0.65 /testbed/django/db/models/base.py(195):         for base in reversed([new_class] + parents):
0.65 /testbed/django/db/models/base.py(197):             if not hasattr(base, '_meta'):
0.65 /testbed/django/db/models/base.py(200):             if base != new_class and not base._meta.abstract:
0.65 /testbed/django/db/models/base.py(203):             for field in base._meta.local_fields:
0.65 /testbed/django/db/models/base.py(204):                 if isinstance(field, OneToOneField):
0.65 /testbed/django/db/models/base.py(203):             for field in base._meta.local_fields:
0.65 /testbed/django/db/models/base.py(204):                 if isinstance(field, OneToOneField):
0.65 /testbed/django/db/models/base.py(203):             for field in base._meta.local_fields:
0.65 /testbed/django/db/models/base.py(204):                 if isinstance(field, OneToOneField):
0.65 /testbed/django/db/models/base.py(203):             for field in base._meta.local_fields:
0.65 /testbed/django/db/models/base.py(204):                 if isinstance(field, OneToOneField):
0.65 /testbed/django/db/models/base.py(203):             for field in base._meta.local_fields:
0.65 /testbed/django/db/models/base.py(204):                 if isinstance(field, OneToOneField):
0.65 /testbed/django/db/models/base.py(203):             for field in base._meta.local_fields:
0.65 /testbed/django/db/models/base.py(204):                 if isinstance(field, OneToOneField):
0.65 /testbed/django/db/models/base.py(203):             for field in base._meta.local_fields:
0.65 /testbed/django/db/models/base.py(204):                 if isinstance(field, OneToOneField):
0.65 /testbed/django/db/models/base.py(203):             for field in base._meta.local_fields:
0.65 /testbed/django/db/models/base.py(204):                 if isinstance(field, OneToOneField):
0.65 /testbed/django/db/models/base.py(203):             for field in base._meta.local_fields:
0.65 /testbed/django/db/models/base.py(204):                 if isinstance(field, OneToOneField):
0.65 /testbed/django/db/models/base.py(203):             for field in base._meta.local_fields:
0.65 /testbed/django/db/models/base.py(204):                 if isinstance(field, OneToOneField):
0.66 /testbed/django/db/models/base.py(203):             for field in base._meta.local_fields:
0.66 /testbed/django/db/models/base.py(195):         for base in reversed([new_class] + parents):
0.66 /testbed/django/db/models/base.py(197):             if not hasattr(base, '_meta'):
0.66 /testbed/django/db/models/base.py(200):             if base != new_class and not base._meta.abstract:
0.66 /testbed/django/db/models/base.py(203):             for field in base._meta.local_fields:
0.66 /testbed/django/db/models/base.py(195):         for base in reversed([new_class] + parents):
0.66 /testbed/django/db/models/base.py(209):         inherited_attributes = set()
0.66 /testbed/django/db/models/base.py(211):         for base in new_class.mro():
0.66 /testbed/django/db/models/base.py(212):             if base not in parents or not hasattr(base, '_meta'):
0.66 /testbed/django/db/models/base.py(215):                 inherited_attributes.update(base.__dict__)
0.66 /testbed/django/db/models/base.py(216):                 continue
0.66 /testbed/django/db/models/base.py(211):         for base in new_class.mro():
0.66 /testbed/django/db/models/base.py(212):             if base not in parents or not hasattr(base, '_meta'):
0.66 /testbed/django/db/models/base.py(218):             parent_fields = base._meta.local_fields + base._meta.local_many_to_many
0.66 /testbed/django/db/models/base.py(219):             if not base._meta.abstract:
0.66 /testbed/django/db/models/base.py(269):                 base_parents = base._meta.parents.copy()
0.66 /testbed/django/db/models/base.py(272):                 for field in parent_fields:
0.66 /testbed/django/db/models/base.py(273):                     if (field.name not in field_names and
0.66 /testbed/django/db/models/base.py(274):                             field.name not in new_class.__dict__ and
0.66 /testbed/django/db/models/base.py(275):                             field.name not in inherited_attributes):
0.66 /testbed/django/db/models/base.py(276):                         new_field = copy.deepcopy(field)
0.66 /testbed/django/db/models/base.py(277):                         new_class.add_to_class(field.name, new_field)
0.66 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.66 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.66 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.66 /testbed/django/db/models/base.py(280):                         if field.one_to_one:
0.66 /testbed/django/db/models/base.py(272):                 for field in parent_fields:
0.66 /testbed/django/db/models/base.py(273):                     if (field.name not in field_names and
0.66 /testbed/django/db/models/base.py(274):                             field.name not in new_class.__dict__ and
0.66 /testbed/django/db/models/base.py(275):                             field.name not in inherited_attributes):
0.66 /testbed/django/db/models/base.py(276):                         new_field = copy.deepcopy(field)
0.66 /testbed/django/db/models/base.py(277):                         new_class.add_to_class(field.name, new_field)
0.66 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.66 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.66 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.66 /testbed/django/db/models/base.py(280):                         if field.one_to_one:
0.66 /testbed/django/db/models/base.py(272):                 for field in parent_fields:
0.66 /testbed/django/db/models/base.py(273):                     if (field.name not in field_names and
0.66 /testbed/django/db/models/base.py(274):                             field.name not in new_class.__dict__ and
0.66 /testbed/django/db/models/base.py(275):                             field.name not in inherited_attributes):
0.66 /testbed/django/db/models/base.py(276):                         new_field = copy.deepcopy(field)
0.66 /testbed/django/db/models/base.py(277):                         new_class.add_to_class(field.name, new_field)
0.66 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.66 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.66 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.66 /testbed/django/db/models/base.py(280):                         if field.one_to_one:
0.66 /testbed/django/db/models/base.py(272):                 for field in parent_fields:
0.66 /testbed/django/db/models/base.py(273):                     if (field.name not in field_names and
0.66 /testbed/django/db/models/base.py(274):                             field.name not in new_class.__dict__ and
0.66 /testbed/django/db/models/base.py(275):                             field.name not in inherited_attributes):
0.66 /testbed/django/db/models/base.py(276):                         new_field = copy.deepcopy(field)
0.66 /testbed/django/db/models/base.py(277):                         new_class.add_to_class(field.name, new_field)
0.66 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.66 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.66 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.66 /testbed/django/db/models/base.py(280):                         if field.one_to_one:
0.66 /testbed/django/db/models/base.py(272):                 for field in parent_fields:
0.66 /testbed/django/db/models/base.py(273):                     if (field.name not in field_names and
0.66 /testbed/django/db/models/base.py(274):                             field.name not in new_class.__dict__ and
0.66 /testbed/django/db/models/base.py(275):                             field.name not in inherited_attributes):
0.66 /testbed/django/db/models/base.py(276):                         new_field = copy.deepcopy(field)
0.66 /testbed/django/db/models/base.py(277):                         new_class.add_to_class(field.name, new_field)
0.66 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.66 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.66 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.66 /testbed/django/db/models/base.py(280):                         if field.one_to_one:
0.66 /testbed/django/db/models/base.py(272):                 for field in parent_fields:
0.66 /testbed/django/db/models/base.py(273):                     if (field.name not in field_names and
0.66 /testbed/django/db/models/base.py(274):                             field.name not in new_class.__dict__ and
0.66 /testbed/django/db/models/base.py(275):                             field.name not in inherited_attributes):
0.66 /testbed/django/db/models/base.py(276):                         new_field = copy.deepcopy(field)
0.66 /testbed/django/db/models/base.py(277):                         new_class.add_to_class(field.name, new_field)
0.66 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.66 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.66 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.66 /testbed/django/db/models/base.py(280):                         if field.one_to_one:
0.66 /testbed/django/db/models/base.py(272):                 for field in parent_fields:
0.66 /testbed/django/db/models/base.py(273):                     if (field.name not in field_names and
0.66 /testbed/django/db/models/base.py(274):                             field.name not in new_class.__dict__ and
0.66 /testbed/django/db/models/base.py(275):                             field.name not in inherited_attributes):
0.66 /testbed/django/db/models/base.py(276):                         new_field = copy.deepcopy(field)
0.66 /testbed/django/db/models/base.py(277):                         new_class.add_to_class(field.name, new_field)
0.66 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.66 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.66 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.66 /testbed/django/db/models/base.py(280):                         if field.one_to_one:
0.66 /testbed/django/db/models/base.py(272):                 for field in parent_fields:
0.66 /testbed/django/db/models/base.py(273):                     if (field.name not in field_names and
0.66 /testbed/django/db/models/base.py(274):                             field.name not in new_class.__dict__ and
0.66 /testbed/django/db/models/base.py(275):                             field.name not in inherited_attributes):
0.66 /testbed/django/db/models/base.py(276):                         new_field = copy.deepcopy(field)
0.66 /testbed/django/db/models/base.py(277):                         new_class.add_to_class(field.name, new_field)
0.66 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.66 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.66 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.66 /testbed/django/db/models/base.py(280):                         if field.one_to_one:
0.66 /testbed/django/db/models/base.py(272):                 for field in parent_fields:
0.66 /testbed/django/db/models/base.py(273):                     if (field.name not in field_names and
0.66 /testbed/django/db/models/base.py(274):                             field.name not in new_class.__dict__ and
0.66 /testbed/django/db/models/base.py(275):                             field.name not in inherited_attributes):
0.66 /testbed/django/db/models/base.py(276):                         new_field = copy.deepcopy(field)
0.66 /testbed/django/db/models/base.py(277):                         new_class.add_to_class(field.name, new_field)
0.66 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.66 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.66 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.66 /testbed/django/db/models/base.py(280):                         if field.one_to_one:
0.66 /testbed/django/db/models/base.py(272):                 for field in parent_fields:
0.66 /testbed/django/db/models/base.py(273):                     if (field.name not in field_names and
0.66 /testbed/django/db/models/base.py(274):                             field.name not in new_class.__dict__ and
0.66 /testbed/django/db/models/base.py(275):                             field.name not in inherited_attributes):
0.66 /testbed/django/db/models/base.py(276):                         new_field = copy.deepcopy(field)
0.66 /testbed/django/db/models/base.py(277):                         new_class.add_to_class(field.name, new_field)
0.66 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.66 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.66 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.66 /testbed/django/db/models/base.py(280):                         if field.one_to_one:
0.66 /testbed/django/db/models/base.py(272):                 for field in parent_fields:
0.66 /testbed/django/db/models/base.py(273):                     if (field.name not in field_names and
0.66 /testbed/django/db/models/base.py(274):                             field.name not in new_class.__dict__ and
0.66 /testbed/django/db/models/base.py(275):                             field.name not in inherited_attributes):
0.66 /testbed/django/db/models/base.py(276):                         new_field = copy.deepcopy(field)
0.66 /testbed/django/db/models/base.py(277):                         new_class.add_to_class(field.name, new_field)
0.66 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.66 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.66 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.66 /testbed/django/db/models/base.py(74):         super_new = super().__new__
0.66 /testbed/django/db/models/base.py(78):         parents = [b for b in bases if isinstance(b, ModelBase)]
0.66 /testbed/django/db/models/base.py(78):         parents = [b for b in bases if isinstance(b, ModelBase)]
0.66 /testbed/django/db/models/base.py(78):         parents = [b for b in bases if isinstance(b, ModelBase)]
0.66 /testbed/django/db/models/base.py(79):         if not parents:
0.66 /testbed/django/db/models/base.py(83):         module = attrs.pop('__module__')
0.66 /testbed/django/db/models/base.py(84):         new_attrs = {'__module__': module}
0.66 /testbed/django/db/models/base.py(85):         classcell = attrs.pop('__classcell__', None)
0.66 /testbed/django/db/models/base.py(86):         if classcell is not None:
0.66 /testbed/django/db/models/base.py(88):         attr_meta = attrs.pop('Meta', None)
0.66 /testbed/django/db/models/base.py(92):         contributable_attrs = {}
0.66 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.66 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.66 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.66 /testbed/django/db/models/base.py(95):                 contributable_attrs[obj_name] = obj
0.66 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.66 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.66 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.66 /testbed/django/db/models/base.py(95):                 contributable_attrs[obj_name] = obj
0.66 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.66 /testbed/django/db/models/base.py(98):         new_class = super_new(cls, name, bases, new_attrs, **kwargs)
0.66 /testbed/django/db/models/base.py(100):         abstract = getattr(attr_meta, 'abstract', False)
0.66 /testbed/django/db/models/base.py(101):         meta = attr_meta or getattr(new_class, 'Meta', None)
0.66 /testbed/django/db/models/base.py(102):         base_meta = getattr(new_class, '_meta', None)
0.66 /testbed/django/db/models/base.py(104):         app_label = None
0.66 /testbed/django/db/models/base.py(107):         app_config = apps.get_containing_app_config(module)
0.66 /testbed/django/db/models/base.py(109):         if getattr(meta, 'app_label', None) is None:
0.66 /testbed/django/db/models/base.py(121):         new_class.add_to_class('_meta', Options(meta, app_label))
0.66 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.66 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.66 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.66 /testbed/django/db/models/base.py(122):         if not abstract:
0.66 /testbed/django/db/models/base.py(123):             new_class.add_to_class(
0.66 /testbed/django/db/models/base.py(124):                 'DoesNotExist',
0.66 /testbed/django/db/models/base.py(125):                 subclass_exception(
0.66 /testbed/django/db/models/base.py(126):                     'DoesNotExist',
0.66 /testbed/django/db/models/base.py(127):                     tuple(
0.66 /testbed/django/db/models/base.py(128):                         x.DoesNotExist for x in parents if hasattr(x, '_meta') and not x._meta.abstract
0.66 /testbed/django/db/models/base.py(128):                         x.DoesNotExist for x in parents if hasattr(x, '_meta') and not x._meta.abstract
0.66 /testbed/django/db/models/base.py(128):                         x.DoesNotExist for x in parents if hasattr(x, '_meta') and not x._meta.abstract
0.66 /testbed/django/db/models/base.py(129):                     ) or (ObjectDoesNotExist,),
0.66 /testbed/django/db/models/base.py(130):                     module,
0.66 /testbed/django/db/models/base.py(131):                     attached_to=new_class))
0.66 /testbed/django/db/models/base.py(60):     return type(name, bases, {
0.66 /testbed/django/db/models/base.py(61):         '__module__': module,
0.66 /testbed/django/db/models/base.py(62):         '__qualname__': '%s.%s' % (attached_to.__qualname__, name),
0.66 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.66 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.66 /testbed/django/db/models/base.py(327):             setattr(cls, name, value)
0.66 /testbed/django/db/models/base.py(132):             new_class.add_to_class(
0.66 /testbed/django/db/models/base.py(133):                 'MultipleObjectsReturned',
0.66 /testbed/django/db/models/base.py(134):                 subclass_exception(
0.66 /testbed/django/db/models/base.py(135):                     'MultipleObjectsReturned',
0.66 /testbed/django/db/models/base.py(136):                     tuple(
0.66 /testbed/django/db/models/base.py(137):                         x.MultipleObjectsReturned for x in parents if hasattr(x, '_meta') and not x._meta.abstract
0.66 /testbed/django/db/models/base.py(137):                         x.MultipleObjectsReturned for x in parents if hasattr(x, '_meta') and not x._meta.abstract
0.66 /testbed/django/db/models/base.py(137):                         x.MultipleObjectsReturned for x in parents if hasattr(x, '_meta') and not x._meta.abstract
0.66 /testbed/django/db/models/base.py(138):                     ) or (MultipleObjectsReturned,),
0.66 /testbed/django/db/models/base.py(139):                     module,
0.66 /testbed/django/db/models/base.py(140):                     attached_to=new_class))
0.66 /testbed/django/db/models/base.py(60):     return type(name, bases, {
0.66 /testbed/django/db/models/base.py(61):         '__module__': module,
0.66 /testbed/django/db/models/base.py(62):         '__qualname__': '%s.%s' % (attached_to.__qualname__, name),
0.66 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.66 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.66 /testbed/django/db/models/base.py(327):             setattr(cls, name, value)
0.66 /testbed/django/db/models/base.py(141):             if base_meta and not base_meta.abstract:
0.66 /testbed/django/db/models/base.py(150):         is_proxy = new_class._meta.proxy
0.66 /testbed/django/db/models/base.py(154):         if is_proxy and base_meta and base_meta.swapped:
0.66 /testbed/django/db/models/base.py(159):         for obj_name, obj in contributable_attrs.items():
0.66 /testbed/django/db/models/base.py(160):             new_class.add_to_class(obj_name, obj)
0.66 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.66 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.66 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.66 /testbed/django/db/models/base.py(159):         for obj_name, obj in contributable_attrs.items():
0.66 /testbed/django/db/models/base.py(160):             new_class.add_to_class(obj_name, obj)
0.66 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.66 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.66 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.66 /testbed/django/db/models/base.py(159):         for obj_name, obj in contributable_attrs.items():
0.66 /testbed/django/db/models/base.py(163):         new_fields = chain(
0.66 /testbed/django/db/models/base.py(164):             new_class._meta.local_fields,
0.66 /testbed/django/db/models/base.py(165):             new_class._meta.local_many_to_many,
0.66 /testbed/django/db/models/base.py(166):             new_class._meta.private_fields
0.66 /testbed/django/db/models/base.py(168):         field_names = {f.name for f in new_fields}
0.66 /testbed/django/db/models/base.py(168):         field_names = {f.name for f in new_fields}
0.66 /testbed/django/db/models/base.py(168):         field_names = {f.name for f in new_fields}
0.66 /testbed/django/db/models/base.py(168):         field_names = {f.name for f in new_fields}
0.66 /testbed/django/db/models/base.py(171):         if is_proxy:
0.66 /testbed/django/db/models/base.py(191):             new_class._meta.concrete_model = new_class
0.66 /testbed/django/db/models/base.py(194):         parent_links = {}
0.66 /testbed/django/db/models/base.py(195):         for base in reversed([new_class] + parents):
0.66 /testbed/django/db/models/base.py(197):             if not hasattr(base, '_meta'):
0.66 /testbed/django/db/models/base.py(198):                 continue
0.66 /testbed/django/db/models/base.py(195):         for base in reversed([new_class] + parents):
0.66 /testbed/django/db/models/base.py(197):             if not hasattr(base, '_meta'):
0.66 /testbed/django/db/models/base.py(200):             if base != new_class and not base._meta.abstract:
0.66 /testbed/django/db/models/base.py(203):             for field in base._meta.local_fields:
0.66 /testbed/django/db/models/base.py(204):                 if isinstance(field, OneToOneField):
0.66 /testbed/django/db/models/base.py(203):             for field in base._meta.local_fields:
0.66 /testbed/django/db/models/base.py(204):                 if isinstance(field, OneToOneField):
0.66 /testbed/django/db/models/base.py(203):             for field in base._meta.local_fields:
0.66 /testbed/django/db/models/base.py(195):         for base in reversed([new_class] + parents):
0.66 /testbed/django/db/models/base.py(209):         inherited_attributes = set()
0.66 /testbed/django/db/models/base.py(211):         for base in new_class.mro():
0.66 /testbed/django/db/models/base.py(212):             if base not in parents or not hasattr(base, '_meta'):
0.66 /testbed/django/db/models/base.py(215):                 inherited_attributes.update(base.__dict__)
0.66 /testbed/django/db/models/base.py(216):                 continue
0.66 /testbed/django/db/models/base.py(211):         for base in new_class.mro():
0.66 /testbed/django/db/models/base.py(212):             if base not in parents or not hasattr(base, '_meta'):
0.66 /testbed/django/db/models/base.py(215):                 inherited_attributes.update(base.__dict__)
0.66 /testbed/django/db/models/base.py(216):                 continue
0.66 /testbed/django/db/models/base.py(211):         for base in new_class.mro():
0.66 /testbed/django/db/models/base.py(212):             if base not in parents or not hasattr(base, '_meta'):
0.66 /testbed/django/db/models/base.py(215):                 inherited_attributes.update(base.__dict__)
0.66 /testbed/django/db/models/base.py(216):                 continue
0.66 /testbed/django/db/models/base.py(211):         for base in new_class.mro():
0.66 /testbed/django/db/models/base.py(309):         new_class._meta.indexes = [copy.deepcopy(idx) for idx in new_class._meta.indexes]
0.66 /testbed/django/db/models/base.py(309):         new_class._meta.indexes = [copy.deepcopy(idx) for idx in new_class._meta.indexes]
0.66 /testbed/django/db/models/base.py(311):         if abstract:
0.66 /testbed/django/db/models/base.py(319):         new_class._prepare()
0.66 /testbed/django/db/models/base.py(331):         opts = cls._meta
0.66 /testbed/django/db/models/base.py(332):         opts._prepare(cls)
0.66 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.66 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.66 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.66 /testbed/django/db/models/base.py(334):         if opts.order_with_respect_to:
0.66 /testbed/django/db/models/base.py(349):         if cls.__doc__ is None:
0.67 /testbed/django/db/models/base.py(350):             cls.__doc__ = "%s(%s)" % (cls.__name__, ", ".join(f.name for f in opts.fields))
0.67 /testbed/django/db/models/base.py(350):             cls.__doc__ = "%s(%s)" % (cls.__name__, ", ".join(f.name for f in opts.fields))
0.67 /testbed/django/db/models/base.py(350):             cls.__doc__ = "%s(%s)" % (cls.__name__, ", ".join(f.name for f in opts.fields))
0.67 /testbed/django/db/models/base.py(350):             cls.__doc__ = "%s(%s)" % (cls.__name__, ", ".join(f.name for f in opts.fields))
0.67 /testbed/django/db/models/base.py(350):             cls.__doc__ = "%s(%s)" % (cls.__name__, ", ".join(f.name for f in opts.fields))
0.67 /testbed/django/db/models/base.py(352):         get_absolute_url_override = settings.ABSOLUTE_URL_OVERRIDES.get(opts.label_lower)
0.67 /testbed/django/db/models/base.py(353):         if get_absolute_url_override:
0.67 /testbed/django/db/models/base.py(356):         if not opts.managers:
0.67 /testbed/django/db/models/base.py(357):             if any(f.name == 'objects' for f in opts.fields):
0.67 /testbed/django/db/models/base.py(357):             if any(f.name == 'objects' for f in opts.fields):
0.67 /testbed/django/db/models/base.py(357):             if any(f.name == 'objects' for f in opts.fields):
0.67 /testbed/django/db/models/base.py(357):             if any(f.name == 'objects' for f in opts.fields):
0.67 /testbed/django/db/models/base.py(357):             if any(f.name == 'objects' for f in opts.fields):
0.67 /testbed/django/db/models/base.py(362):             manager = Manager()
0.67 /testbed/django/db/models/base.py(363):             manager.auto_created = True
0.67 /testbed/django/db/models/base.py(364):             cls.add_to_class('objects', manager)
0.67 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.67 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.67 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.67 /testbed/django/db/models/base.py(369):         for index in cls._meta.indexes:
0.67 /testbed/django/db/models/base.py(373):         class_prepared.send(sender=cls)
0.67 /testbed/django/db/models/base.py(320):         new_class._meta.apps.register_model(new_class._meta.app_label, new_class)
0.67 /testbed/django/db/models/base.py(321):         return new_class
0.67 /testbed/django/db/models/base.py(280):                         if field.one_to_one:
0.67 /testbed/django/db/models/base.py(272):                 for field in parent_fields:
0.67 /testbed/django/db/models/base.py(273):                     if (field.name not in field_names and
0.67 /testbed/django/db/models/base.py(274):                             field.name not in new_class.__dict__ and
0.67 /testbed/django/db/models/base.py(275):                             field.name not in inherited_attributes):
0.67 /testbed/django/db/models/base.py(276):                         new_field = copy.deepcopy(field)
0.67 /testbed/django/db/models/base.py(277):                         new_class.add_to_class(field.name, new_field)
0.67 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.67 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.67 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.67 /testbed/django/db/models/base.py(74):         super_new = super().__new__
0.67 /testbed/django/db/models/base.py(78):         parents = [b for b in bases if isinstance(b, ModelBase)]
0.67 /testbed/django/db/models/base.py(78):         parents = [b for b in bases if isinstance(b, ModelBase)]
0.67 /testbed/django/db/models/base.py(78):         parents = [b for b in bases if isinstance(b, ModelBase)]
0.67 /testbed/django/db/models/base.py(79):         if not parents:
0.67 /testbed/django/db/models/base.py(83):         module = attrs.pop('__module__')
0.67 /testbed/django/db/models/base.py(84):         new_attrs = {'__module__': module}
0.67 /testbed/django/db/models/base.py(85):         classcell = attrs.pop('__classcell__', None)
0.67 /testbed/django/db/models/base.py(86):         if classcell is not None:
0.67 /testbed/django/db/models/base.py(88):         attr_meta = attrs.pop('Meta', None)
0.67 /testbed/django/db/models/base.py(92):         contributable_attrs = {}
0.67 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.67 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.67 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.67 /testbed/django/db/models/base.py(95):                 contributable_attrs[obj_name] = obj
0.67 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.67 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.67 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.67 /testbed/django/db/models/base.py(95):                 contributable_attrs[obj_name] = obj
0.67 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.67 /testbed/django/db/models/base.py(98):         new_class = super_new(cls, name, bases, new_attrs, **kwargs)
0.67 /testbed/django/db/models/base.py(100):         abstract = getattr(attr_meta, 'abstract', False)
0.67 /testbed/django/db/models/base.py(101):         meta = attr_meta or getattr(new_class, 'Meta', None)
0.67 /testbed/django/db/models/base.py(102):         base_meta = getattr(new_class, '_meta', None)
0.67 /testbed/django/db/models/base.py(104):         app_label = None
0.67 /testbed/django/db/models/base.py(107):         app_config = apps.get_containing_app_config(module)
0.67 /testbed/django/db/models/base.py(109):         if getattr(meta, 'app_label', None) is None:
0.67 /testbed/django/db/models/base.py(121):         new_class.add_to_class('_meta', Options(meta, app_label))
0.67 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.67 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.67 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.67 /testbed/django/db/models/base.py(122):         if not abstract:
0.67 /testbed/django/db/models/base.py(123):             new_class.add_to_class(
0.67 /testbed/django/db/models/base.py(124):                 'DoesNotExist',
0.67 /testbed/django/db/models/base.py(125):                 subclass_exception(
0.67 /testbed/django/db/models/base.py(126):                     'DoesNotExist',
0.67 /testbed/django/db/models/base.py(127):                     tuple(
0.67 /testbed/django/db/models/base.py(128):                         x.DoesNotExist for x in parents if hasattr(x, '_meta') and not x._meta.abstract
0.67 /testbed/django/db/models/base.py(128):                         x.DoesNotExist for x in parents if hasattr(x, '_meta') and not x._meta.abstract
0.67 /testbed/django/db/models/base.py(128):                         x.DoesNotExist for x in parents if hasattr(x, '_meta') and not x._meta.abstract
0.67 /testbed/django/db/models/base.py(129):                     ) or (ObjectDoesNotExist,),
0.67 /testbed/django/db/models/base.py(130):                     module,
0.67 /testbed/django/db/models/base.py(131):                     attached_to=new_class))
0.67 /testbed/django/db/models/base.py(60):     return type(name, bases, {
0.67 /testbed/django/db/models/base.py(61):         '__module__': module,
0.67 /testbed/django/db/models/base.py(62):         '__qualname__': '%s.%s' % (attached_to.__qualname__, name),
0.67 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.67 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.67 /testbed/django/db/models/base.py(327):             setattr(cls, name, value)
0.67 /testbed/django/db/models/base.py(132):             new_class.add_to_class(
0.67 /testbed/django/db/models/base.py(133):                 'MultipleObjectsReturned',
0.67 /testbed/django/db/models/base.py(134):                 subclass_exception(
0.67 /testbed/django/db/models/base.py(135):                     'MultipleObjectsReturned',
0.67 /testbed/django/db/models/base.py(136):                     tuple(
0.67 /testbed/django/db/models/base.py(137):                         x.MultipleObjectsReturned for x in parents if hasattr(x, '_meta') and not x._meta.abstract
0.67 /testbed/django/db/models/base.py(137):                         x.MultipleObjectsReturned for x in parents if hasattr(x, '_meta') and not x._meta.abstract
0.67 /testbed/django/db/models/base.py(137):                         x.MultipleObjectsReturned for x in parents if hasattr(x, '_meta') and not x._meta.abstract
0.67 /testbed/django/db/models/base.py(138):                     ) or (MultipleObjectsReturned,),
0.67 /testbed/django/db/models/base.py(139):                     module,
0.67 /testbed/django/db/models/base.py(140):                     attached_to=new_class))
0.67 /testbed/django/db/models/base.py(60):     return type(name, bases, {
0.67 /testbed/django/db/models/base.py(61):         '__module__': module,
0.67 /testbed/django/db/models/base.py(62):         '__qualname__': '%s.%s' % (attached_to.__qualname__, name),
0.67 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.67 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.67 /testbed/django/db/models/base.py(327):             setattr(cls, name, value)
0.67 /testbed/django/db/models/base.py(141):             if base_meta and not base_meta.abstract:
0.67 /testbed/django/db/models/base.py(150):         is_proxy = new_class._meta.proxy
0.67 /testbed/django/db/models/base.py(154):         if is_proxy and base_meta and base_meta.swapped:
0.67 /testbed/django/db/models/base.py(159):         for obj_name, obj in contributable_attrs.items():
0.67 /testbed/django/db/models/base.py(160):             new_class.add_to_class(obj_name, obj)
0.67 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.67 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.67 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.67 /testbed/django/db/models/base.py(159):         for obj_name, obj in contributable_attrs.items():
0.67 /testbed/django/db/models/base.py(160):             new_class.add_to_class(obj_name, obj)
0.67 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.67 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.67 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.67 /testbed/django/db/models/base.py(159):         for obj_name, obj in contributable_attrs.items():
0.67 /testbed/django/db/models/base.py(163):         new_fields = chain(
0.67 /testbed/django/db/models/base.py(164):             new_class._meta.local_fields,
0.67 /testbed/django/db/models/base.py(165):             new_class._meta.local_many_to_many,
0.67 /testbed/django/db/models/base.py(166):             new_class._meta.private_fields
0.67 /testbed/django/db/models/base.py(168):         field_names = {f.name for f in new_fields}
0.67 /testbed/django/db/models/base.py(168):         field_names = {f.name for f in new_fields}
0.67 /testbed/django/db/models/base.py(168):         field_names = {f.name for f in new_fields}
0.67 /testbed/django/db/models/base.py(168):         field_names = {f.name for f in new_fields}
0.67 /testbed/django/db/models/base.py(171):         if is_proxy:
0.67 /testbed/django/db/models/base.py(191):             new_class._meta.concrete_model = new_class
0.67 /testbed/django/db/models/base.py(194):         parent_links = {}
0.67 /testbed/django/db/models/base.py(195):         for base in reversed([new_class] + parents):
0.67 /testbed/django/db/models/base.py(197):             if not hasattr(base, '_meta'):
0.67 /testbed/django/db/models/base.py(198):                 continue
0.67 /testbed/django/db/models/base.py(195):         for base in reversed([new_class] + parents):
0.67 /testbed/django/db/models/base.py(197):             if not hasattr(base, '_meta'):
0.67 /testbed/django/db/models/base.py(200):             if base != new_class and not base._meta.abstract:
0.67 /testbed/django/db/models/base.py(203):             for field in base._meta.local_fields:
0.67 /testbed/django/db/models/base.py(204):                 if isinstance(field, OneToOneField):
0.67 /testbed/django/db/models/base.py(203):             for field in base._meta.local_fields:
0.67 /testbed/django/db/models/base.py(204):                 if isinstance(field, OneToOneField):
0.67 /testbed/django/db/models/base.py(203):             for field in base._meta.local_fields:
0.67 /testbed/django/db/models/base.py(195):         for base in reversed([new_class] + parents):
0.67 /testbed/django/db/models/base.py(209):         inherited_attributes = set()
0.67 /testbed/django/db/models/base.py(211):         for base in new_class.mro():
0.67 /testbed/django/db/models/base.py(212):             if base not in parents or not hasattr(base, '_meta'):
0.67 /testbed/django/db/models/base.py(215):                 inherited_attributes.update(base.__dict__)
0.67 /testbed/django/db/models/base.py(216):                 continue
0.67 /testbed/django/db/models/base.py(211):         for base in new_class.mro():
0.67 /testbed/django/db/models/base.py(212):             if base not in parents or not hasattr(base, '_meta'):
0.67 /testbed/django/db/models/base.py(215):                 inherited_attributes.update(base.__dict__)
0.67 /testbed/django/db/models/base.py(216):                 continue
0.67 /testbed/django/db/models/base.py(211):         for base in new_class.mro():
0.67 /testbed/django/db/models/base.py(212):             if base not in parents or not hasattr(base, '_meta'):
0.67 /testbed/django/db/models/base.py(215):                 inherited_attributes.update(base.__dict__)
0.67 /testbed/django/db/models/base.py(216):                 continue
0.67 /testbed/django/db/models/base.py(211):         for base in new_class.mro():
0.67 /testbed/django/db/models/base.py(309):         new_class._meta.indexes = [copy.deepcopy(idx) for idx in new_class._meta.indexes]
0.67 /testbed/django/db/models/base.py(309):         new_class._meta.indexes = [copy.deepcopy(idx) for idx in new_class._meta.indexes]
0.67 /testbed/django/db/models/base.py(311):         if abstract:
0.67 /testbed/django/db/models/base.py(319):         new_class._prepare()
0.67 /testbed/django/db/models/base.py(331):         opts = cls._meta
0.67 /testbed/django/db/models/base.py(332):         opts._prepare(cls)
0.67 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.67 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.67 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.67 /testbed/django/db/models/base.py(334):         if opts.order_with_respect_to:
0.67 /testbed/django/db/models/base.py(349):         if cls.__doc__ is None:
0.67 /testbed/django/db/models/base.py(350):             cls.__doc__ = "%s(%s)" % (cls.__name__, ", ".join(f.name for f in opts.fields))
0.67 /testbed/django/db/models/base.py(350):             cls.__doc__ = "%s(%s)" % (cls.__name__, ", ".join(f.name for f in opts.fields))
0.67 /testbed/django/db/models/base.py(350):             cls.__doc__ = "%s(%s)" % (cls.__name__, ", ".join(f.name for f in opts.fields))
0.67 /testbed/django/db/models/base.py(350):             cls.__doc__ = "%s(%s)" % (cls.__name__, ", ".join(f.name for f in opts.fields))
0.67 /testbed/django/db/models/base.py(350):             cls.__doc__ = "%s(%s)" % (cls.__name__, ", ".join(f.name for f in opts.fields))
0.67 /testbed/django/db/models/base.py(352):         get_absolute_url_override = settings.ABSOLUTE_URL_OVERRIDES.get(opts.label_lower)
0.67 /testbed/django/db/models/base.py(353):         if get_absolute_url_override:
0.67 /testbed/django/db/models/base.py(356):         if not opts.managers:
0.67 /testbed/django/db/models/base.py(357):             if any(f.name == 'objects' for f in opts.fields):
0.67 /testbed/django/db/models/base.py(357):             if any(f.name == 'objects' for f in opts.fields):
0.67 /testbed/django/db/models/base.py(357):             if any(f.name == 'objects' for f in opts.fields):
0.67 /testbed/django/db/models/base.py(357):             if any(f.name == 'objects' for f in opts.fields):
0.67 /testbed/django/db/models/base.py(357):             if any(f.name == 'objects' for f in opts.fields):
0.67 /testbed/django/db/models/base.py(362):             manager = Manager()
0.67 /testbed/django/db/models/base.py(363):             manager.auto_created = True
0.67 /testbed/django/db/models/base.py(364):             cls.add_to_class('objects', manager)
0.67 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.67 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.67 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.67 /testbed/django/db/models/base.py(369):         for index in cls._meta.indexes:
0.67 /testbed/django/db/models/base.py(373):         class_prepared.send(sender=cls)
0.67 /testbed/django/db/models/base.py(320):         new_class._meta.apps.register_model(new_class._meta.app_label, new_class)
0.67 /testbed/django/db/models/base.py(321):         return new_class
0.67 /testbed/django/db/models/base.py(280):                         if field.one_to_one:
0.67 /testbed/django/db/models/base.py(272):                 for field in parent_fields:
0.67 /testbed/django/db/models/base.py(286):                 new_class._meta.parents.update(base_parents)
0.67 /testbed/django/db/models/base.py(290):             for field in base._meta.private_fields:
0.67 /testbed/django/db/models/base.py(211):         for base in new_class.mro():
0.67 /testbed/django/db/models/base.py(212):             if base not in parents or not hasattr(base, '_meta'):
0.67 /testbed/django/db/models/base.py(215):                 inherited_attributes.update(base.__dict__)
0.67 /testbed/django/db/models/base.py(216):                 continue
0.67 /testbed/django/db/models/base.py(211):         for base in new_class.mro():
0.67 /testbed/django/db/models/base.py(212):             if base not in parents or not hasattr(base, '_meta'):
0.67 /testbed/django/db/models/base.py(215):                 inherited_attributes.update(base.__dict__)
0.67 /testbed/django/db/models/base.py(216):                 continue
0.67 /testbed/django/db/models/base.py(211):         for base in new_class.mro():
0.67 /testbed/django/db/models/base.py(212):             if base not in parents or not hasattr(base, '_meta'):
0.67 /testbed/django/db/models/base.py(215):                 inherited_attributes.update(base.__dict__)
0.67 /testbed/django/db/models/base.py(216):                 continue
0.67 /testbed/django/db/models/base.py(211):         for base in new_class.mro():
0.67 /testbed/django/db/models/base.py(212):             if base not in parents or not hasattr(base, '_meta'):
0.67 /testbed/django/db/models/base.py(215):                 inherited_attributes.update(base.__dict__)
0.67 /testbed/django/db/models/base.py(216):                 continue
0.67 /testbed/django/db/models/base.py(211):         for base in new_class.mro():
0.67 /testbed/django/db/models/base.py(309):         new_class._meta.indexes = [copy.deepcopy(idx) for idx in new_class._meta.indexes]
0.67 /testbed/django/db/models/base.py(309):         new_class._meta.indexes = [copy.deepcopy(idx) for idx in new_class._meta.indexes]
0.67 /testbed/django/db/models/base.py(311):         if abstract:
0.67 /testbed/django/db/models/base.py(319):         new_class._prepare()
0.67 /testbed/django/db/models/base.py(331):         opts = cls._meta
0.67 /testbed/django/db/models/base.py(332):         opts._prepare(cls)
0.67 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.67 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.67 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.67 /testbed/django/db/models/base.py(334):         if opts.order_with_respect_to:
0.67 /testbed/django/db/models/base.py(349):         if cls.__doc__ is None:
0.67 /testbed/django/db/models/base.py(352):         get_absolute_url_override = settings.ABSOLUTE_URL_OVERRIDES.get(opts.label_lower)
0.67 /testbed/django/db/models/base.py(353):         if get_absolute_url_override:
0.67 /testbed/django/db/models/base.py(356):         if not opts.managers:
0.67 /testbed/django/db/models/base.py(369):         for index in cls._meta.indexes:
0.67 /testbed/django/db/models/base.py(373):         class_prepared.send(sender=cls)
0.67 /testbed/django/db/models/base.py(320):         new_class._meta.apps.register_model(new_class._meta.app_label, new_class)
0.67 /testbed/django/db/models/base.py(321):         return new_class
0.67 /testbed/django/db/models/base.py(74):         super_new = super().__new__
0.67 /testbed/django/db/models/base.py(78):         parents = [b for b in bases if isinstance(b, ModelBase)]
0.67 /testbed/django/db/models/base.py(78):         parents = [b for b in bases if isinstance(b, ModelBase)]
0.67 /testbed/django/db/models/base.py(78):         parents = [b for b in bases if isinstance(b, ModelBase)]
0.67 /testbed/django/db/models/base.py(79):         if not parents:
0.67 /testbed/django/db/models/base.py(83):         module = attrs.pop('__module__')
0.67 /testbed/django/db/models/base.py(84):         new_attrs = {'__module__': module}
0.67 /testbed/django/db/models/base.py(85):         classcell = attrs.pop('__classcell__', None)
0.67 /testbed/django/db/models/base.py(86):         if classcell is not None:
0.67 /testbed/django/db/models/base.py(88):         attr_meta = attrs.pop('Meta', None)
0.67 /testbed/django/db/models/base.py(92):         contributable_attrs = {}
0.67 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.67 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.67 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.67 /testbed/django/db/models/base.py(97):                 new_attrs[obj_name] = obj
0.67 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.67 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.67 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.67 /testbed/django/db/models/base.py(95):                 contributable_attrs[obj_name] = obj
0.67 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.67 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.67 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.67 /testbed/django/db/models/base.py(95):                 contributable_attrs[obj_name] = obj
0.67 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.67 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.67 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.67 /testbed/django/db/models/base.py(95):                 contributable_attrs[obj_name] = obj
0.67 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.67 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.67 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.67 /testbed/django/db/models/base.py(97):                 new_attrs[obj_name] = obj
0.67 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.67 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.67 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.67 /testbed/django/db/models/base.py(97):                 new_attrs[obj_name] = obj
0.67 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.67 /testbed/django/db/models/base.py(98):         new_class = super_new(cls, name, bases, new_attrs, **kwargs)
0.67 /testbed/django/db/models/base.py(100):         abstract = getattr(attr_meta, 'abstract', False)
0.67 /testbed/django/db/models/base.py(101):         meta = attr_meta or getattr(new_class, 'Meta', None)
0.67 /testbed/django/db/models/base.py(102):         base_meta = getattr(new_class, '_meta', None)
0.67 /testbed/django/db/models/base.py(104):         app_label = None
0.67 /testbed/django/db/models/base.py(107):         app_config = apps.get_containing_app_config(module)
0.67 /testbed/django/db/models/base.py(109):         if getattr(meta, 'app_label', None) is None:
0.67 /testbed/django/db/models/base.py(110):             if app_config is None:
0.67 /testbed/django/db/models/base.py(119):                 app_label = app_config.label
0.67 /testbed/django/db/models/base.py(121):         new_class.add_to_class('_meta', Options(meta, app_label))
0.67 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.67 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.67 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.67 /testbed/django/db/models/base.py(122):         if not abstract:
0.67 /testbed/django/db/models/base.py(123):             new_class.add_to_class(
0.67 /testbed/django/db/models/base.py(124):                 'DoesNotExist',
0.67 /testbed/django/db/models/base.py(125):                 subclass_exception(
0.67 /testbed/django/db/models/base.py(126):                     'DoesNotExist',
0.67 /testbed/django/db/models/base.py(127):                     tuple(
0.67 /testbed/django/db/models/base.py(128):                         x.DoesNotExist for x in parents if hasattr(x, '_meta') and not x._meta.abstract
0.67 /testbed/django/db/models/base.py(128):                         x.DoesNotExist for x in parents if hasattr(x, '_meta') and not x._meta.abstract
0.67 /testbed/django/db/models/base.py(128):                         x.DoesNotExist for x in parents if hasattr(x, '_meta') and not x._meta.abstract
0.67 /testbed/django/db/models/base.py(129):                     ) or (ObjectDoesNotExist,),
0.67 /testbed/django/db/models/base.py(130):                     module,
0.67 /testbed/django/db/models/base.py(131):                     attached_to=new_class))
0.67 /testbed/django/db/models/base.py(60):     return type(name, bases, {
0.67 /testbed/django/db/models/base.py(61):         '__module__': module,
0.67 /testbed/django/db/models/base.py(62):         '__qualname__': '%s.%s' % (attached_to.__qualname__, name),
0.67 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.67 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.67 /testbed/django/db/models/base.py(327):             setattr(cls, name, value)
0.67 /testbed/django/db/models/base.py(132):             new_class.add_to_class(
0.67 /testbed/django/db/models/base.py(133):                 'MultipleObjectsReturned',
0.67 /testbed/django/db/models/base.py(134):                 subclass_exception(
0.67 /testbed/django/db/models/base.py(135):                     'MultipleObjectsReturned',
0.67 /testbed/django/db/models/base.py(136):                     tuple(
0.67 /testbed/django/db/models/base.py(137):                         x.MultipleObjectsReturned for x in parents if hasattr(x, '_meta') and not x._meta.abstract
0.67 /testbed/django/db/models/base.py(137):                         x.MultipleObjectsReturned for x in parents if hasattr(x, '_meta') and not x._meta.abstract
0.67 /testbed/django/db/models/base.py(137):                         x.MultipleObjectsReturned for x in parents if hasattr(x, '_meta') and not x._meta.abstract
0.67 /testbed/django/db/models/base.py(138):                     ) or (MultipleObjectsReturned,),
0.67 /testbed/django/db/models/base.py(139):                     module,
0.67 /testbed/django/db/models/base.py(140):                     attached_to=new_class))
0.67 /testbed/django/db/models/base.py(60):     return type(name, bases, {
0.67 /testbed/django/db/models/base.py(61):         '__module__': module,
0.67 /testbed/django/db/models/base.py(62):         '__qualname__': '%s.%s' % (attached_to.__qualname__, name),
0.67 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.67 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.67 /testbed/django/db/models/base.py(327):             setattr(cls, name, value)
0.67 /testbed/django/db/models/base.py(141):             if base_meta and not base_meta.abstract:
0.67 /testbed/django/db/models/base.py(150):         is_proxy = new_class._meta.proxy
0.67 /testbed/django/db/models/base.py(154):         if is_proxy and base_meta and base_meta.swapped:
0.67 /testbed/django/db/models/base.py(159):         for obj_name, obj in contributable_attrs.items():
0.67 /testbed/django/db/models/base.py(160):             new_class.add_to_class(obj_name, obj)
0.67 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.67 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.67 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.67 /testbed/django/db/models/base.py(159):         for obj_name, obj in contributable_attrs.items():
0.67 /testbed/django/db/models/base.py(160):             new_class.add_to_class(obj_name, obj)
0.67 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.67 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.67 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.67 /testbed/django/db/models/base.py(159):         for obj_name, obj in contributable_attrs.items():
0.67 /testbed/django/db/models/base.py(160):             new_class.add_to_class(obj_name, obj)
0.67 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.67 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.67 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.67 /testbed/django/db/models/base.py(159):         for obj_name, obj in contributable_attrs.items():
0.67 /testbed/django/db/models/base.py(163):         new_fields = chain(
0.67 /testbed/django/db/models/base.py(164):             new_class._meta.local_fields,
0.67 /testbed/django/db/models/base.py(165):             new_class._meta.local_many_to_many,
0.67 /testbed/django/db/models/base.py(166):             new_class._meta.private_fields
0.67 /testbed/django/db/models/base.py(168):         field_names = {f.name for f in new_fields}
0.67 /testbed/django/db/models/base.py(168):         field_names = {f.name for f in new_fields}
0.67 /testbed/django/db/models/base.py(168):         field_names = {f.name for f in new_fields}
0.67 /testbed/django/db/models/base.py(168):         field_names = {f.name for f in new_fields}
0.67 /testbed/django/db/models/base.py(171):         if is_proxy:
0.67 /testbed/django/db/models/base.py(191):             new_class._meta.concrete_model = new_class
0.67 /testbed/django/db/models/base.py(194):         parent_links = {}
0.67 /testbed/django/db/models/base.py(195):         for base in reversed([new_class] + parents):
0.67 /testbed/django/db/models/base.py(197):             if not hasattr(base, '_meta'):
0.67 /testbed/django/db/models/base.py(198):                 continue
0.67 /testbed/django/db/models/base.py(195):         for base in reversed([new_class] + parents):
0.67 /testbed/django/db/models/base.py(197):             if not hasattr(base, '_meta'):
0.67 /testbed/django/db/models/base.py(200):             if base != new_class and not base._meta.abstract:
0.67 /testbed/django/db/models/base.py(203):             for field in base._meta.local_fields:
0.67 /testbed/django/db/models/base.py(204):                 if isinstance(field, OneToOneField):
0.67 /testbed/django/db/models/base.py(203):             for field in base._meta.local_fields:
0.67 /testbed/django/db/models/base.py(204):                 if isinstance(field, OneToOneField):
0.67 /testbed/django/db/models/base.py(203):             for field in base._meta.local_fields:
0.67 /testbed/django/db/models/base.py(195):         for base in reversed([new_class] + parents):
0.67 /testbed/django/db/models/base.py(209):         inherited_attributes = set()
0.67 /testbed/django/db/models/base.py(211):         for base in new_class.mro():
0.67 /testbed/django/db/models/base.py(212):             if base not in parents or not hasattr(base, '_meta'):
0.67 /testbed/django/db/models/base.py(215):                 inherited_attributes.update(base.__dict__)
0.67 /testbed/django/db/models/base.py(216):                 continue
0.67 /testbed/django/db/models/base.py(211):         for base in new_class.mro():
0.67 /testbed/django/db/models/base.py(212):             if base not in parents or not hasattr(base, '_meta'):
0.67 /testbed/django/db/models/base.py(215):                 inherited_attributes.update(base.__dict__)
0.67 /testbed/django/db/models/base.py(216):                 continue
0.67 /testbed/django/db/models/base.py(211):         for base in new_class.mro():
0.67 /testbed/django/db/models/base.py(212):             if base not in parents or not hasattr(base, '_meta'):
0.67 /testbed/django/db/models/base.py(215):                 inherited_attributes.update(base.__dict__)
0.67 /testbed/django/db/models/base.py(216):                 continue
0.67 /testbed/django/db/models/base.py(211):         for base in new_class.mro():
0.67 /testbed/django/db/models/base.py(309):         new_class._meta.indexes = [copy.deepcopy(idx) for idx in new_class._meta.indexes]
0.67 /testbed/django/db/models/base.py(309):         new_class._meta.indexes = [copy.deepcopy(idx) for idx in new_class._meta.indexes]
0.67 /testbed/django/db/models/base.py(311):         if abstract:
0.67 /testbed/django/db/models/base.py(319):         new_class._prepare()
0.67 /testbed/django/db/models/base.py(331):         opts = cls._meta
0.67 /testbed/django/db/models/base.py(332):         opts._prepare(cls)
0.67 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.67 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.67 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.67 /testbed/django/db/models/base.py(334):         if opts.order_with_respect_to:
0.67 /testbed/django/db/models/base.py(349):         if cls.__doc__ is None:
0.67 /testbed/django/db/models/base.py(350):             cls.__doc__ = "%s(%s)" % (cls.__name__, ", ".join(f.name for f in opts.fields))
0.67 /testbed/django/db/models/base.py(350):             cls.__doc__ = "%s(%s)" % (cls.__name__, ", ".join(f.name for f in opts.fields))
0.67 /testbed/django/db/models/base.py(350):             cls.__doc__ = "%s(%s)" % (cls.__name__, ", ".join(f.name for f in opts.fields))
0.67 /testbed/django/db/models/base.py(350):             cls.__doc__ = "%s(%s)" % (cls.__name__, ", ".join(f.name for f in opts.fields))
0.67 /testbed/django/db/models/base.py(350):             cls.__doc__ = "%s(%s)" % (cls.__name__, ", ".join(f.name for f in opts.fields))
0.67 /testbed/django/db/models/base.py(352):         get_absolute_url_override = settings.ABSOLUTE_URL_OVERRIDES.get(opts.label_lower)
0.67 /testbed/django/db/models/base.py(353):         if get_absolute_url_override:
0.67 /testbed/django/db/models/base.py(356):         if not opts.managers:
0.67 /testbed/django/db/models/base.py(369):         for index in cls._meta.indexes:
0.67 /testbed/django/db/models/base.py(373):         class_prepared.send(sender=cls)
0.67 /testbed/django/db/models/base.py(320):         new_class._meta.apps.register_model(new_class._meta.app_label, new_class)
0.67 /testbed/django/db/models/base.py(321):         return new_class
0.67 /testbed/django/db/models/base.py(74):         super_new = super().__new__
0.67 /testbed/django/db/models/base.py(78):         parents = [b for b in bases if isinstance(b, ModelBase)]
0.67 /testbed/django/db/models/base.py(78):         parents = [b for b in bases if isinstance(b, ModelBase)]
0.67 /testbed/django/db/models/base.py(78):         parents = [b for b in bases if isinstance(b, ModelBase)]
0.67 /testbed/django/db/models/base.py(79):         if not parents:
0.67 /testbed/django/db/models/base.py(83):         module = attrs.pop('__module__')
0.67 /testbed/django/db/models/base.py(84):         new_attrs = {'__module__': module}
0.67 /testbed/django/db/models/base.py(85):         classcell = attrs.pop('__classcell__', None)
0.67 /testbed/django/db/models/base.py(86):         if classcell is not None:
0.67 /testbed/django/db/models/base.py(88):         attr_meta = attrs.pop('Meta', None)
0.67 /testbed/django/db/models/base.py(92):         contributable_attrs = {}
0.67 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.67 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.67 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.67 /testbed/django/db/models/base.py(97):                 new_attrs[obj_name] = obj
0.67 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.67 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.67 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.67 /testbed/django/db/models/base.py(95):                 contributable_attrs[obj_name] = obj
0.67 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.67 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.67 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.67 /testbed/django/db/models/base.py(95):                 contributable_attrs[obj_name] = obj
0.67 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.67 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.67 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.67 /testbed/django/db/models/base.py(95):                 contributable_attrs[obj_name] = obj
0.67 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.67 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.67 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.67 /testbed/django/db/models/base.py(95):                 contributable_attrs[obj_name] = obj
0.67 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.67 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.67 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.67 /testbed/django/db/models/base.py(97):                 new_attrs[obj_name] = obj
0.67 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.67 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.67 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.67 /testbed/django/db/models/base.py(97):                 new_attrs[obj_name] = obj
0.67 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.67 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.67 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.67 /testbed/django/db/models/base.py(97):                 new_attrs[obj_name] = obj
0.67 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.67 /testbed/django/db/models/base.py(98):         new_class = super_new(cls, name, bases, new_attrs, **kwargs)
0.67 /testbed/django/db/models/base.py(100):         abstract = getattr(attr_meta, 'abstract', False)
0.67 /testbed/django/db/models/base.py(101):         meta = attr_meta or getattr(new_class, 'Meta', None)
0.67 /testbed/django/db/models/base.py(102):         base_meta = getattr(new_class, '_meta', None)
0.67 /testbed/django/db/models/base.py(104):         app_label = None
0.67 /testbed/django/db/models/base.py(107):         app_config = apps.get_containing_app_config(module)
0.67 /testbed/django/db/models/base.py(109):         if getattr(meta, 'app_label', None) is None:
0.67 /testbed/django/db/models/base.py(110):             if app_config is None:
0.67 /testbed/django/db/models/base.py(119):                 app_label = app_config.label
0.67 /testbed/django/db/models/base.py(121):         new_class.add_to_class('_meta', Options(meta, app_label))
0.67 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.67 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.67 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.67 /testbed/django/db/models/base.py(122):         if not abstract:
0.67 /testbed/django/db/models/base.py(150):         is_proxy = new_class._meta.proxy
0.67 /testbed/django/db/models/base.py(154):         if is_proxy and base_meta and base_meta.swapped:
0.67 /testbed/django/db/models/base.py(159):         for obj_name, obj in contributable_attrs.items():
0.67 /testbed/django/db/models/base.py(160):             new_class.add_to_class(obj_name, obj)
0.67 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.67 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.67 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.67 /testbed/django/db/models/base.py(159):         for obj_name, obj in contributable_attrs.items():
0.67 /testbed/django/db/models/base.py(160):             new_class.add_to_class(obj_name, obj)
0.67 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.67 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.67 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.67 /testbed/django/db/models/base.py(159):         for obj_name, obj in contributable_attrs.items():
0.67 /testbed/django/db/models/base.py(160):             new_class.add_to_class(obj_name, obj)
0.67 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.67 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.67 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.67 /testbed/django/db/models/base.py(159):         for obj_name, obj in contributable_attrs.items():
0.67 /testbed/django/db/models/base.py(160):             new_class.add_to_class(obj_name, obj)
0.67 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.67 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.67 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.67 /testbed/django/db/models/base.py(159):         for obj_name, obj in contributable_attrs.items():
0.67 /testbed/django/db/models/base.py(163):         new_fields = chain(
0.67 /testbed/django/db/models/base.py(164):             new_class._meta.local_fields,
0.67 /testbed/django/db/models/base.py(165):             new_class._meta.local_many_to_many,
0.67 /testbed/django/db/models/base.py(166):             new_class._meta.private_fields
0.67 /testbed/django/db/models/base.py(168):         field_names = {f.name for f in new_fields}
0.67 /testbed/django/db/models/base.py(168):         field_names = {f.name for f in new_fields}
0.67 /testbed/django/db/models/base.py(168):         field_names = {f.name for f in new_fields}
0.67 /testbed/django/db/models/base.py(168):         field_names = {f.name for f in new_fields}
0.67 /testbed/django/db/models/base.py(168):         field_names = {f.name for f in new_fields}
0.67 /testbed/django/db/models/base.py(171):         if is_proxy:
0.67 /testbed/django/db/models/base.py(191):             new_class._meta.concrete_model = new_class
0.67 /testbed/django/db/models/base.py(194):         parent_links = {}
0.67 /testbed/django/db/models/base.py(195):         for base in reversed([new_class] + parents):
0.67 /testbed/django/db/models/base.py(197):             if not hasattr(base, '_meta'):
0.67 /testbed/django/db/models/base.py(198):                 continue
0.67 /testbed/django/db/models/base.py(195):         for base in reversed([new_class] + parents):
0.67 /testbed/django/db/models/base.py(197):             if not hasattr(base, '_meta'):
0.67 /testbed/django/db/models/base.py(200):             if base != new_class and not base._meta.abstract:
0.67 /testbed/django/db/models/base.py(203):             for field in base._meta.local_fields:
0.67 /testbed/django/db/models/base.py(204):                 if isinstance(field, OneToOneField):
0.67 /testbed/django/db/models/base.py(203):             for field in base._meta.local_fields:
0.67 /testbed/django/db/models/base.py(204):                 if isinstance(field, OneToOneField):
0.67 /testbed/django/db/models/base.py(203):             for field in base._meta.local_fields:
0.67 /testbed/django/db/models/base.py(204):                 if isinstance(field, OneToOneField):
0.67 /testbed/django/db/models/base.py(203):             for field in base._meta.local_fields:
0.67 /testbed/django/db/models/base.py(195):         for base in reversed([new_class] + parents):
0.67 /testbed/django/db/models/base.py(209):         inherited_attributes = set()
0.67 /testbed/django/db/models/base.py(211):         for base in new_class.mro():
0.67 /testbed/django/db/models/base.py(212):             if base not in parents or not hasattr(base, '_meta'):
0.67 /testbed/django/db/models/base.py(215):                 inherited_attributes.update(base.__dict__)
0.67 /testbed/django/db/models/base.py(216):                 continue
0.67 /testbed/django/db/models/base.py(211):         for base in new_class.mro():
0.67 /testbed/django/db/models/base.py(212):             if base not in parents or not hasattr(base, '_meta'):
0.67 /testbed/django/db/models/base.py(215):                 inherited_attributes.update(base.__dict__)
0.67 /testbed/django/db/models/base.py(216):                 continue
0.67 /testbed/django/db/models/base.py(211):         for base in new_class.mro():
0.67 /testbed/django/db/models/base.py(212):             if base not in parents or not hasattr(base, '_meta'):
0.67 /testbed/django/db/models/base.py(215):                 inherited_attributes.update(base.__dict__)
0.67 /testbed/django/db/models/base.py(216):                 continue
0.67 /testbed/django/db/models/base.py(211):         for base in new_class.mro():
0.67 /testbed/django/db/models/base.py(309):         new_class._meta.indexes = [copy.deepcopy(idx) for idx in new_class._meta.indexes]
0.67 /testbed/django/db/models/base.py(309):         new_class._meta.indexes = [copy.deepcopy(idx) for idx in new_class._meta.indexes]
0.67 /testbed/django/db/models/base.py(311):         if abstract:
0.67 /testbed/django/db/models/base.py(315):             attr_meta.abstract = False
0.67 /testbed/django/db/models/base.py(316):             new_class.Meta = attr_meta
0.67 /testbed/django/db/models/base.py(317):             return new_class
0.67 /testbed/django/db/models/base.py(74):         super_new = super().__new__
0.67 /testbed/django/db/models/base.py(78):         parents = [b for b in bases if isinstance(b, ModelBase)]
0.67 /testbed/django/db/models/base.py(78):         parents = [b for b in bases if isinstance(b, ModelBase)]
0.67 /testbed/django/db/models/base.py(78):         parents = [b for b in bases if isinstance(b, ModelBase)]
0.67 /testbed/django/db/models/base.py(79):         if not parents:
0.67 /testbed/django/db/models/base.py(83):         module = attrs.pop('__module__')
0.67 /testbed/django/db/models/base.py(84):         new_attrs = {'__module__': module}
0.67 /testbed/django/db/models/base.py(85):         classcell = attrs.pop('__classcell__', None)
0.67 /testbed/django/db/models/base.py(86):         if classcell is not None:
0.67 /testbed/django/db/models/base.py(88):         attr_meta = attrs.pop('Meta', None)
0.67 /testbed/django/db/models/base.py(92):         contributable_attrs = {}
0.67 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.67 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.67 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.67 /testbed/django/db/models/base.py(97):                 new_attrs[obj_name] = obj
0.67 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.67 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.67 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.67 /testbed/django/db/models/base.py(97):                 new_attrs[obj_name] = obj
0.67 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.67 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.67 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.67 /testbed/django/db/models/base.py(95):                 contributable_attrs[obj_name] = obj
0.67 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.67 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.67 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.67 /testbed/django/db/models/base.py(97):                 new_attrs[obj_name] = obj
0.67 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.67 /testbed/django/db/models/base.py(98):         new_class = super_new(cls, name, bases, new_attrs, **kwargs)
0.67 /testbed/django/db/models/base.py(100):         abstract = getattr(attr_meta, 'abstract', False)
0.67 /testbed/django/db/models/base.py(101):         meta = attr_meta or getattr(new_class, 'Meta', None)
0.67 /testbed/django/db/models/base.py(102):         base_meta = getattr(new_class, '_meta', None)
0.67 /testbed/django/db/models/base.py(104):         app_label = None
0.67 /testbed/django/db/models/base.py(107):         app_config = apps.get_containing_app_config(module)
0.67 /testbed/django/db/models/base.py(109):         if getattr(meta, 'app_label', None) is None:
0.67 /testbed/django/db/models/base.py(110):             if app_config is None:
0.67 /testbed/django/db/models/base.py(119):                 app_label = app_config.label
0.67 /testbed/django/db/models/base.py(121):         new_class.add_to_class('_meta', Options(meta, app_label))
0.67 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.67 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.67 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.67 /testbed/django/db/models/base.py(122):         if not abstract:
0.67 /testbed/django/db/models/base.py(123):             new_class.add_to_class(
0.67 /testbed/django/db/models/base.py(124):                 'DoesNotExist',
0.67 /testbed/django/db/models/base.py(125):                 subclass_exception(
0.67 /testbed/django/db/models/base.py(126):                     'DoesNotExist',
0.67 /testbed/django/db/models/base.py(127):                     tuple(
0.67 /testbed/django/db/models/base.py(128):                         x.DoesNotExist for x in parents if hasattr(x, '_meta') and not x._meta.abstract
0.67 /testbed/django/db/models/base.py(128):                         x.DoesNotExist for x in parents if hasattr(x, '_meta') and not x._meta.abstract
0.67 /testbed/django/db/models/base.py(128):                         x.DoesNotExist for x in parents if hasattr(x, '_meta') and not x._meta.abstract
0.67 /testbed/django/db/models/base.py(129):                     ) or (ObjectDoesNotExist,),
0.67 /testbed/django/db/models/base.py(130):                     module,
0.67 /testbed/django/db/models/base.py(131):                     attached_to=new_class))
0.67 /testbed/django/db/models/base.py(60):     return type(name, bases, {
0.67 /testbed/django/db/models/base.py(61):         '__module__': module,
0.67 /testbed/django/db/models/base.py(62):         '__qualname__': '%s.%s' % (attached_to.__qualname__, name),
0.67 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.67 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.67 /testbed/django/db/models/base.py(327):             setattr(cls, name, value)
0.67 /testbed/django/db/models/base.py(132):             new_class.add_to_class(
0.67 /testbed/django/db/models/base.py(133):                 'MultipleObjectsReturned',
0.67 /testbed/django/db/models/base.py(134):                 subclass_exception(
0.67 /testbed/django/db/models/base.py(135):                     'MultipleObjectsReturned',
0.67 /testbed/django/db/models/base.py(136):                     tuple(
0.67 /testbed/django/db/models/base.py(137):                         x.MultipleObjectsReturned for x in parents if hasattr(x, '_meta') and not x._meta.abstract
0.67 /testbed/django/db/models/base.py(137):                         x.MultipleObjectsReturned for x in parents if hasattr(x, '_meta') and not x._meta.abstract
0.67 /testbed/django/db/models/base.py(137):                         x.MultipleObjectsReturned for x in parents if hasattr(x, '_meta') and not x._meta.abstract
0.67 /testbed/django/db/models/base.py(138):                     ) or (MultipleObjectsReturned,),
0.67 /testbed/django/db/models/base.py(139):                     module,
0.67 /testbed/django/db/models/base.py(140):                     attached_to=new_class))
0.67 /testbed/django/db/models/base.py(60):     return type(name, bases, {
0.67 /testbed/django/db/models/base.py(61):         '__module__': module,
0.67 /testbed/django/db/models/base.py(62):         '__qualname__': '%s.%s' % (attached_to.__qualname__, name),
0.67 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.67 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.67 /testbed/django/db/models/base.py(327):             setattr(cls, name, value)
0.67 /testbed/django/db/models/base.py(141):             if base_meta and not base_meta.abstract:
0.67 /testbed/django/db/models/base.py(150):         is_proxy = new_class._meta.proxy
0.67 /testbed/django/db/models/base.py(154):         if is_proxy and base_meta and base_meta.swapped:
0.67 /testbed/django/db/models/base.py(159):         for obj_name, obj in contributable_attrs.items():
0.67 /testbed/django/db/models/base.py(160):             new_class.add_to_class(obj_name, obj)
0.67 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.67 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.67 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.67 /testbed/django/db/models/base.py(159):         for obj_name, obj in contributable_attrs.items():
0.67 /testbed/django/db/models/base.py(163):         new_fields = chain(
0.67 /testbed/django/db/models/base.py(164):             new_class._meta.local_fields,
0.67 /testbed/django/db/models/base.py(165):             new_class._meta.local_many_to_many,
0.67 /testbed/django/db/models/base.py(166):             new_class._meta.private_fields
0.67 /testbed/django/db/models/base.py(168):         field_names = {f.name for f in new_fields}
0.67 /testbed/django/db/models/base.py(168):         field_names = {f.name for f in new_fields}
0.67 /testbed/django/db/models/base.py(171):         if is_proxy:
0.67 /testbed/django/db/models/base.py(191):             new_class._meta.concrete_model = new_class
0.67 /testbed/django/db/models/base.py(194):         parent_links = {}
0.67 /testbed/django/db/models/base.py(195):         for base in reversed([new_class] + parents):
0.67 /testbed/django/db/models/base.py(197):             if not hasattr(base, '_meta'):
0.67 /testbed/django/db/models/base.py(200):             if base != new_class and not base._meta.abstract:
0.67 /testbed/django/db/models/base.py(203):             for field in base._meta.local_fields:
0.67 /testbed/django/db/models/base.py(204):                 if isinstance(field, OneToOneField):
0.67 /testbed/django/db/models/base.py(203):             for field in base._meta.local_fields:
0.67 /testbed/django/db/models/base.py(204):                 if isinstance(field, OneToOneField):
0.67 /testbed/django/db/models/base.py(203):             for field in base._meta.local_fields:
0.67 /testbed/django/db/models/base.py(204):                 if isinstance(field, OneToOneField):
0.67 /testbed/django/db/models/base.py(203):             for field in base._meta.local_fields:
0.67 /testbed/django/db/models/base.py(195):         for base in reversed([new_class] + parents):
0.67 /testbed/django/db/models/base.py(197):             if not hasattr(base, '_meta'):
0.67 /testbed/django/db/models/base.py(200):             if base != new_class and not base._meta.abstract:
0.67 /testbed/django/db/models/base.py(203):             for field in base._meta.local_fields:
0.67 /testbed/django/db/models/base.py(195):         for base in reversed([new_class] + parents):
0.67 /testbed/django/db/models/base.py(209):         inherited_attributes = set()
0.67 /testbed/django/db/models/base.py(211):         for base in new_class.mro():
0.67 /testbed/django/db/models/base.py(212):             if base not in parents or not hasattr(base, '_meta'):
0.67 /testbed/django/db/models/base.py(215):                 inherited_attributes.update(base.__dict__)
0.67 /testbed/django/db/models/base.py(216):                 continue
0.67 /testbed/django/db/models/base.py(211):         for base in new_class.mro():
0.67 /testbed/django/db/models/base.py(212):             if base not in parents or not hasattr(base, '_meta'):
0.67 /testbed/django/db/models/base.py(218):             parent_fields = base._meta.local_fields + base._meta.local_many_to_many
0.67 /testbed/django/db/models/base.py(219):             if not base._meta.abstract:
0.67 /testbed/django/db/models/base.py(269):                 base_parents = base._meta.parents.copy()
0.67 /testbed/django/db/models/base.py(272):                 for field in parent_fields:
0.67 /testbed/django/db/models/base.py(273):                     if (field.name not in field_names and
0.67 /testbed/django/db/models/base.py(274):                             field.name not in new_class.__dict__ and
0.67 /testbed/django/db/models/base.py(275):                             field.name not in inherited_attributes):
0.67 /testbed/django/db/models/base.py(276):                         new_field = copy.deepcopy(field)
0.67 /testbed/django/db/models/base.py(277):                         new_class.add_to_class(field.name, new_field)
0.67 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.67 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.67 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.67 /testbed/django/db/models/base.py(280):                         if field.one_to_one:
0.67 /testbed/django/db/models/base.py(272):                 for field in parent_fields:
0.67 /testbed/django/db/models/base.py(273):                     if (field.name not in field_names and
0.67 /testbed/django/db/models/base.py(274):                             field.name not in new_class.__dict__ and
0.67 /testbed/django/db/models/base.py(275):                             field.name not in inherited_attributes):
0.67 /testbed/django/db/models/base.py(276):                         new_field = copy.deepcopy(field)
0.67 /testbed/django/db/models/base.py(277):                         new_class.add_to_class(field.name, new_field)
0.67 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.67 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.67 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.67 /testbed/django/db/models/base.py(280):                         if field.one_to_one:
0.67 /testbed/django/db/models/base.py(272):                 for field in parent_fields:
0.67 /testbed/django/db/models/base.py(273):                     if (field.name not in field_names and
0.67 /testbed/django/db/models/base.py(274):                             field.name not in new_class.__dict__ and
0.67 /testbed/django/db/models/base.py(275):                             field.name not in inherited_attributes):
0.67 /testbed/django/db/models/base.py(276):                         new_field = copy.deepcopy(field)
0.67 /testbed/django/db/models/base.py(277):                         new_class.add_to_class(field.name, new_field)
0.67 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.67 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.67 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.67 /testbed/django/db/models/base.py(280):                         if field.one_to_one:
0.67 /testbed/django/db/models/base.py(272):                 for field in parent_fields:
0.67 /testbed/django/db/models/base.py(286):                 new_class._meta.parents.update(base_parents)
0.67 /testbed/django/db/models/base.py(290):             for field in base._meta.private_fields:
0.67 /testbed/django/db/models/base.py(211):         for base in new_class.mro():
0.67 /testbed/django/db/models/base.py(212):             if base not in parents or not hasattr(base, '_meta'):
0.67 /testbed/django/db/models/base.py(215):                 inherited_attributes.update(base.__dict__)
0.67 /testbed/django/db/models/base.py(216):                 continue
0.67 /testbed/django/db/models/base.py(211):         for base in new_class.mro():
0.67 /testbed/django/db/models/base.py(212):             if base not in parents or not hasattr(base, '_meta'):
0.67 /testbed/django/db/models/base.py(215):                 inherited_attributes.update(base.__dict__)
0.67 /testbed/django/db/models/base.py(216):                 continue
0.67 /testbed/django/db/models/base.py(211):         for base in new_class.mro():
0.67 /testbed/django/db/models/base.py(309):         new_class._meta.indexes = [copy.deepcopy(idx) for idx in new_class._meta.indexes]
0.67 /testbed/django/db/models/base.py(309):         new_class._meta.indexes = [copy.deepcopy(idx) for idx in new_class._meta.indexes]
0.67 /testbed/django/db/models/base.py(311):         if abstract:
0.67 /testbed/django/db/models/base.py(319):         new_class._prepare()
0.67 /testbed/django/db/models/base.py(331):         opts = cls._meta
0.67 /testbed/django/db/models/base.py(332):         opts._prepare(cls)
0.67 /testbed/django/db/models/base.py(334):         if opts.order_with_respect_to:
0.67 /testbed/django/db/models/base.py(349):         if cls.__doc__ is None:
0.67 /testbed/django/db/models/base.py(352):         get_absolute_url_override = settings.ABSOLUTE_URL_OVERRIDES.get(opts.label_lower)
0.67 /testbed/django/db/models/base.py(353):         if get_absolute_url_override:
0.67 /testbed/django/db/models/base.py(356):         if not opts.managers:
0.67 /testbed/django/db/models/base.py(369):         for index in cls._meta.indexes:
0.67 /testbed/django/db/models/base.py(373):         class_prepared.send(sender=cls)
0.67 /testbed/django/db/models/base.py(320):         new_class._meta.apps.register_model(new_class._meta.app_label, new_class)
0.67 /testbed/django/db/models/base.py(321):         return new_class
0.68 /testbed/django/db/models/base.py(74):         super_new = super().__new__
0.68 /testbed/django/db/models/base.py(78):         parents = [b for b in bases if isinstance(b, ModelBase)]
0.68 /testbed/django/db/models/base.py(78):         parents = [b for b in bases if isinstance(b, ModelBase)]
0.68 /testbed/django/db/models/base.py(78):         parents = [b for b in bases if isinstance(b, ModelBase)]
0.68 /testbed/django/db/models/base.py(79):         if not parents:
0.68 /testbed/django/db/models/base.py(83):         module = attrs.pop('__module__')
0.68 /testbed/django/db/models/base.py(84):         new_attrs = {'__module__': module}
0.68 /testbed/django/db/models/base.py(85):         classcell = attrs.pop('__classcell__', None)
0.68 /testbed/django/db/models/base.py(86):         if classcell is not None:
0.68 /testbed/django/db/models/base.py(88):         attr_meta = attrs.pop('Meta', None)
0.68 /testbed/django/db/models/base.py(92):         contributable_attrs = {}
0.68 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.68 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.68 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.68 /testbed/django/db/models/base.py(97):                 new_attrs[obj_name] = obj
0.68 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.68 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.68 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.68 /testbed/django/db/models/base.py(95):                 contributable_attrs[obj_name] = obj
0.68 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.68 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.68 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.68 /testbed/django/db/models/base.py(95):                 contributable_attrs[obj_name] = obj
0.68 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.68 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.68 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.68 /testbed/django/db/models/base.py(95):                 contributable_attrs[obj_name] = obj
0.68 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.68 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.68 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.68 /testbed/django/db/models/base.py(95):                 contributable_attrs[obj_name] = obj
0.68 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.68 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.68 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.68 /testbed/django/db/models/base.py(95):                 contributable_attrs[obj_name] = obj
0.68 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.68 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.68 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.68 /testbed/django/db/models/base.py(95):                 contributable_attrs[obj_name] = obj
0.68 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.68 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.68 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.68 /testbed/django/db/models/base.py(95):                 contributable_attrs[obj_name] = obj
0.68 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.68 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.68 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.68 /testbed/django/db/models/base.py(95):                 contributable_attrs[obj_name] = obj
0.68 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.68 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.68 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.68 /testbed/django/db/models/base.py(97):                 new_attrs[obj_name] = obj
0.68 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.68 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.68 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.68 /testbed/django/db/models/base.py(97):                 new_attrs[obj_name] = obj
0.68 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.68 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.68 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.68 /testbed/django/db/models/base.py(97):                 new_attrs[obj_name] = obj
0.68 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.68 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.68 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.68 /testbed/django/db/models/base.py(97):                 new_attrs[obj_name] = obj
0.68 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.68 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.68 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.68 /testbed/django/db/models/base.py(97):                 new_attrs[obj_name] = obj
0.68 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.68 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.68 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.68 /testbed/django/db/models/base.py(97):                 new_attrs[obj_name] = obj
0.68 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.68 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.68 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.68 /testbed/django/db/models/base.py(97):                 new_attrs[obj_name] = obj
0.68 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.68 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.68 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.68 /testbed/django/db/models/base.py(97):                 new_attrs[obj_name] = obj
0.68 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.68 /testbed/django/db/models/base.py(98):         new_class = super_new(cls, name, bases, new_attrs, **kwargs)
0.68 /testbed/django/db/models/base.py(100):         abstract = getattr(attr_meta, 'abstract', False)
0.68 /testbed/django/db/models/base.py(101):         meta = attr_meta or getattr(new_class, 'Meta', None)
0.68 /testbed/django/db/models/base.py(102):         base_meta = getattr(new_class, '_meta', None)
0.68 /testbed/django/db/models/base.py(104):         app_label = None
0.68 /testbed/django/db/models/base.py(107):         app_config = apps.get_containing_app_config(module)
0.68 /testbed/django/db/models/base.py(109):         if getattr(meta, 'app_label', None) is None:
0.68 /testbed/django/db/models/base.py(110):             if app_config is None:
0.68 /testbed/django/db/models/base.py(119):                 app_label = app_config.label
0.68 /testbed/django/db/models/base.py(121):         new_class.add_to_class('_meta', Options(meta, app_label))
0.68 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.68 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.68 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.68 /testbed/django/db/models/base.py(122):         if not abstract:
0.68 /testbed/django/db/models/base.py(123):             new_class.add_to_class(
0.68 /testbed/django/db/models/base.py(124):                 'DoesNotExist',
0.68 /testbed/django/db/models/base.py(125):                 subclass_exception(
0.68 /testbed/django/db/models/base.py(126):                     'DoesNotExist',
0.68 /testbed/django/db/models/base.py(127):                     tuple(
0.68 /testbed/django/db/models/base.py(128):                         x.DoesNotExist for x in parents if hasattr(x, '_meta') and not x._meta.abstract
0.68 /testbed/django/db/models/base.py(128):                         x.DoesNotExist for x in parents if hasattr(x, '_meta') and not x._meta.abstract
0.68 /testbed/django/db/models/base.py(128):                         x.DoesNotExist for x in parents if hasattr(x, '_meta') and not x._meta.abstract
0.68 /testbed/django/db/models/base.py(129):                     ) or (ObjectDoesNotExist,),
0.68 /testbed/django/db/models/base.py(130):                     module,
0.68 /testbed/django/db/models/base.py(131):                     attached_to=new_class))
0.68 /testbed/django/db/models/base.py(60):     return type(name, bases, {
0.68 /testbed/django/db/models/base.py(61):         '__module__': module,
0.68 /testbed/django/db/models/base.py(62):         '__qualname__': '%s.%s' % (attached_to.__qualname__, name),
0.68 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.68 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.68 /testbed/django/db/models/base.py(327):             setattr(cls, name, value)
0.68 /testbed/django/db/models/base.py(132):             new_class.add_to_class(
0.68 /testbed/django/db/models/base.py(133):                 'MultipleObjectsReturned',
0.68 /testbed/django/db/models/base.py(134):                 subclass_exception(
0.68 /testbed/django/db/models/base.py(135):                     'MultipleObjectsReturned',
0.68 /testbed/django/db/models/base.py(136):                     tuple(
0.68 /testbed/django/db/models/base.py(137):                         x.MultipleObjectsReturned for x in parents if hasattr(x, '_meta') and not x._meta.abstract
0.68 /testbed/django/db/models/base.py(137):                         x.MultipleObjectsReturned for x in parents if hasattr(x, '_meta') and not x._meta.abstract
0.68 /testbed/django/db/models/base.py(137):                         x.MultipleObjectsReturned for x in parents if hasattr(x, '_meta') and not x._meta.abstract
0.68 /testbed/django/db/models/base.py(138):                     ) or (MultipleObjectsReturned,),
0.68 /testbed/django/db/models/base.py(139):                     module,
0.68 /testbed/django/db/models/base.py(140):                     attached_to=new_class))
0.68 /testbed/django/db/models/base.py(60):     return type(name, bases, {
0.68 /testbed/django/db/models/base.py(61):         '__module__': module,
0.68 /testbed/django/db/models/base.py(62):         '__qualname__': '%s.%s' % (attached_to.__qualname__, name),
0.68 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.68 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.68 /testbed/django/db/models/base.py(327):             setattr(cls, name, value)
0.68 /testbed/django/db/models/base.py(141):             if base_meta and not base_meta.abstract:
0.68 /testbed/django/db/models/base.py(150):         is_proxy = new_class._meta.proxy
0.68 /testbed/django/db/models/base.py(154):         if is_proxy and base_meta and base_meta.swapped:
0.68 /testbed/django/db/models/base.py(159):         for obj_name, obj in contributable_attrs.items():
0.68 /testbed/django/db/models/base.py(160):             new_class.add_to_class(obj_name, obj)
0.68 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.68 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.68 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.68 /testbed/django/db/models/base.py(159):         for obj_name, obj in contributable_attrs.items():
0.68 /testbed/django/db/models/base.py(160):             new_class.add_to_class(obj_name, obj)
0.68 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.68 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.68 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.68 /testbed/django/db/models/base.py(159):         for obj_name, obj in contributable_attrs.items():
0.68 /testbed/django/db/models/base.py(160):             new_class.add_to_class(obj_name, obj)
0.68 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.68 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.68 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.68 /testbed/django/db/models/base.py(159):         for obj_name, obj in contributable_attrs.items():
0.68 /testbed/django/db/models/base.py(160):             new_class.add_to_class(obj_name, obj)
0.68 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.68 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.68 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.68 /testbed/django/db/models/base.py(159):         for obj_name, obj in contributable_attrs.items():
0.68 /testbed/django/db/models/base.py(160):             new_class.add_to_class(obj_name, obj)
0.68 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.68 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.68 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.68 /testbed/django/db/models/base.py(159):         for obj_name, obj in contributable_attrs.items():
0.68 /testbed/django/db/models/base.py(160):             new_class.add_to_class(obj_name, obj)
0.68 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.68 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.68 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.68 /testbed/django/db/models/base.py(159):         for obj_name, obj in contributable_attrs.items():
0.68 /testbed/django/db/models/base.py(160):             new_class.add_to_class(obj_name, obj)
0.68 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.68 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.68 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.68 /testbed/django/db/models/base.py(159):         for obj_name, obj in contributable_attrs.items():
0.68 /testbed/django/db/models/base.py(160):             new_class.add_to_class(obj_name, obj)
0.68 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.68 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.68 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.68 /testbed/django/db/models/base.py(159):         for obj_name, obj in contributable_attrs.items():
0.68 /testbed/django/db/models/base.py(163):         new_fields = chain(
0.68 /testbed/django/db/models/base.py(164):             new_class._meta.local_fields,
0.68 /testbed/django/db/models/base.py(165):             new_class._meta.local_many_to_many,
0.68 /testbed/django/db/models/base.py(166):             new_class._meta.private_fields
0.68 /testbed/django/db/models/base.py(168):         field_names = {f.name for f in new_fields}
0.68 /testbed/django/db/models/base.py(168):         field_names = {f.name for f in new_fields}
0.68 /testbed/django/db/models/base.py(168):         field_names = {f.name for f in new_fields}
0.68 /testbed/django/db/models/base.py(168):         field_names = {f.name for f in new_fields}
0.68 /testbed/django/db/models/base.py(168):         field_names = {f.name for f in new_fields}
0.68 /testbed/django/db/models/base.py(168):         field_names = {f.name for f in new_fields}
0.68 /testbed/django/db/models/base.py(168):         field_names = {f.name for f in new_fields}
0.68 /testbed/django/db/models/base.py(168):         field_names = {f.name for f in new_fields}
0.68 /testbed/django/db/models/base.py(168):         field_names = {f.name for f in new_fields}
0.68 /testbed/django/db/models/base.py(171):         if is_proxy:
0.68 /testbed/django/db/models/base.py(191):             new_class._meta.concrete_model = new_class
0.68 /testbed/django/db/models/base.py(194):         parent_links = {}
0.68 /testbed/django/db/models/base.py(195):         for base in reversed([new_class] + parents):
0.68 /testbed/django/db/models/base.py(197):             if not hasattr(base, '_meta'):
0.68 /testbed/django/db/models/base.py(198):                 continue
0.68 /testbed/django/db/models/base.py(195):         for base in reversed([new_class] + parents):
0.68 /testbed/django/db/models/base.py(197):             if not hasattr(base, '_meta'):
0.68 /testbed/django/db/models/base.py(200):             if base != new_class and not base._meta.abstract:
0.68 /testbed/django/db/models/base.py(203):             for field in base._meta.local_fields:
0.68 /testbed/django/db/models/base.py(204):                 if isinstance(field, OneToOneField):
0.68 /testbed/django/db/models/base.py(203):             for field in base._meta.local_fields:
0.68 /testbed/django/db/models/base.py(204):                 if isinstance(field, OneToOneField):
0.68 /testbed/django/db/models/base.py(203):             for field in base._meta.local_fields:
0.68 /testbed/django/db/models/base.py(204):                 if isinstance(field, OneToOneField):
0.68 /testbed/django/db/models/base.py(203):             for field in base._meta.local_fields:
0.68 /testbed/django/db/models/base.py(204):                 if isinstance(field, OneToOneField):
0.68 /testbed/django/db/models/base.py(203):             for field in base._meta.local_fields:
0.68 /testbed/django/db/models/base.py(204):                 if isinstance(field, OneToOneField):
0.68 /testbed/django/db/models/base.py(203):             for field in base._meta.local_fields:
0.68 /testbed/django/db/models/base.py(204):                 if isinstance(field, OneToOneField):
0.68 /testbed/django/db/models/base.py(203):             for field in base._meta.local_fields:
0.68 /testbed/django/db/models/base.py(204):                 if isinstance(field, OneToOneField):
0.68 /testbed/django/db/models/base.py(203):             for field in base._meta.local_fields:
0.68 /testbed/django/db/models/base.py(195):         for base in reversed([new_class] + parents):
0.68 /testbed/django/db/models/base.py(209):         inherited_attributes = set()
0.68 /testbed/django/db/models/base.py(211):         for base in new_class.mro():
0.68 /testbed/django/db/models/base.py(212):             if base not in parents or not hasattr(base, '_meta'):
0.68 /testbed/django/db/models/base.py(215):                 inherited_attributes.update(base.__dict__)
0.68 /testbed/django/db/models/base.py(216):                 continue
0.68 /testbed/django/db/models/base.py(211):         for base in new_class.mro():
0.68 /testbed/django/db/models/base.py(212):             if base not in parents or not hasattr(base, '_meta'):
0.68 /testbed/django/db/models/base.py(215):                 inherited_attributes.update(base.__dict__)
0.68 /testbed/django/db/models/base.py(216):                 continue
0.68 /testbed/django/db/models/base.py(211):         for base in new_class.mro():
0.68 /testbed/django/db/models/base.py(212):             if base not in parents or not hasattr(base, '_meta'):
0.68 /testbed/django/db/models/base.py(215):                 inherited_attributes.update(base.__dict__)
0.68 /testbed/django/db/models/base.py(216):                 continue
0.68 /testbed/django/db/models/base.py(211):         for base in new_class.mro():
0.68 /testbed/django/db/models/base.py(309):         new_class._meta.indexes = [copy.deepcopy(idx) for idx in new_class._meta.indexes]
0.68 /testbed/django/db/models/base.py(309):         new_class._meta.indexes = [copy.deepcopy(idx) for idx in new_class._meta.indexes]
0.68 /testbed/django/db/models/base.py(311):         if abstract:
0.68 /testbed/django/db/models/base.py(319):         new_class._prepare()
0.68 /testbed/django/db/models/base.py(331):         opts = cls._meta
0.68 /testbed/django/db/models/base.py(332):         opts._prepare(cls)
0.68 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.68 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.68 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.68 /testbed/django/db/models/base.py(334):         if opts.order_with_respect_to:
0.68 /testbed/django/db/models/base.py(349):         if cls.__doc__ is None:
0.68 /testbed/django/db/models/base.py(350):             cls.__doc__ = "%s(%s)" % (cls.__name__, ", ".join(f.name for f in opts.fields))
0.68 /testbed/django/db/models/base.py(350):             cls.__doc__ = "%s(%s)" % (cls.__name__, ", ".join(f.name for f in opts.fields))
0.68 /testbed/django/db/models/base.py(350):             cls.__doc__ = "%s(%s)" % (cls.__name__, ", ".join(f.name for f in opts.fields))
0.68 /testbed/django/db/models/base.py(350):             cls.__doc__ = "%s(%s)" % (cls.__name__, ", ".join(f.name for f in opts.fields))
0.68 /testbed/django/db/models/base.py(350):             cls.__doc__ = "%s(%s)" % (cls.__name__, ", ".join(f.name for f in opts.fields))
0.68 /testbed/django/db/models/base.py(350):             cls.__doc__ = "%s(%s)" % (cls.__name__, ", ".join(f.name for f in opts.fields))
0.68 /testbed/django/db/models/base.py(350):             cls.__doc__ = "%s(%s)" % (cls.__name__, ", ".join(f.name for f in opts.fields))
0.68 /testbed/django/db/models/base.py(350):             cls.__doc__ = "%s(%s)" % (cls.__name__, ", ".join(f.name for f in opts.fields))
0.68 /testbed/django/db/models/base.py(350):             cls.__doc__ = "%s(%s)" % (cls.__name__, ", ".join(f.name for f in opts.fields))
0.68 /testbed/django/db/models/base.py(350):             cls.__doc__ = "%s(%s)" % (cls.__name__, ", ".join(f.name for f in opts.fields))
0.68 /testbed/django/db/models/base.py(352):         get_absolute_url_override = settings.ABSOLUTE_URL_OVERRIDES.get(opts.label_lower)
0.68 /testbed/django/db/models/base.py(353):         if get_absolute_url_override:
0.68 /testbed/django/db/models/base.py(356):         if not opts.managers:
0.68 /testbed/django/db/models/base.py(369):         for index in cls._meta.indexes:
0.68 /testbed/django/db/models/base.py(373):         class_prepared.send(sender=cls)
0.68 /testbed/django/db/models/base.py(320):         new_class._meta.apps.register_model(new_class._meta.app_label, new_class)
0.68 /testbed/django/db/models/base.py(321):         return new_class
0.68 /testbed/django/db/models/base.py(74):         super_new = super().__new__
0.68 /testbed/django/db/models/base.py(78):         parents = [b for b in bases if isinstance(b, ModelBase)]
0.68 /testbed/django/db/models/base.py(78):         parents = [b for b in bases if isinstance(b, ModelBase)]
0.68 /testbed/django/db/models/base.py(78):         parents = [b for b in bases if isinstance(b, ModelBase)]
0.68 /testbed/django/db/models/base.py(79):         if not parents:
0.68 /testbed/django/db/models/base.py(83):         module = attrs.pop('__module__')
0.68 /testbed/django/db/models/base.py(84):         new_attrs = {'__module__': module}
0.68 /testbed/django/db/models/base.py(85):         classcell = attrs.pop('__classcell__', None)
0.68 /testbed/django/db/models/base.py(86):         if classcell is not None:
0.68 /testbed/django/db/models/base.py(88):         attr_meta = attrs.pop('Meta', None)
0.68 /testbed/django/db/models/base.py(92):         contributable_attrs = {}
0.68 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.68 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.68 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.68 /testbed/django/db/models/base.py(97):                 new_attrs[obj_name] = obj
0.68 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.68 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.68 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.68 /testbed/django/db/models/base.py(95):                 contributable_attrs[obj_name] = obj
0.68 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.68 /testbed/django/db/models/base.py(98):         new_class = super_new(cls, name, bases, new_attrs, **kwargs)
0.68 /testbed/django/db/models/base.py(100):         abstract = getattr(attr_meta, 'abstract', False)
0.68 /testbed/django/db/models/base.py(101):         meta = attr_meta or getattr(new_class, 'Meta', None)
0.68 /testbed/django/db/models/base.py(102):         base_meta = getattr(new_class, '_meta', None)
0.68 /testbed/django/db/models/base.py(104):         app_label = None
0.68 /testbed/django/db/models/base.py(107):         app_config = apps.get_containing_app_config(module)
0.68 /testbed/django/db/models/base.py(109):         if getattr(meta, 'app_label', None) is None:
0.68 /testbed/django/db/models/base.py(121):         new_class.add_to_class('_meta', Options(meta, app_label))
0.68 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.68 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.68 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.68 /testbed/django/db/models/base.py(122):         if not abstract:
0.68 /testbed/django/db/models/base.py(123):             new_class.add_to_class(
0.68 /testbed/django/db/models/base.py(124):                 'DoesNotExist',
0.68 /testbed/django/db/models/base.py(125):                 subclass_exception(
0.68 /testbed/django/db/models/base.py(126):                     'DoesNotExist',
0.68 /testbed/django/db/models/base.py(127):                     tuple(
0.68 /testbed/django/db/models/base.py(128):                         x.DoesNotExist for x in parents if hasattr(x, '_meta') and not x._meta.abstract
0.68 /testbed/django/db/models/base.py(128):                         x.DoesNotExist for x in parents if hasattr(x, '_meta') and not x._meta.abstract
0.68 /testbed/django/db/models/base.py(128):                         x.DoesNotExist for x in parents if hasattr(x, '_meta') and not x._meta.abstract
0.68 /testbed/django/db/models/base.py(129):                     ) or (ObjectDoesNotExist,),
0.68 /testbed/django/db/models/base.py(130):                     module,
0.68 /testbed/django/db/models/base.py(131):                     attached_to=new_class))
0.68 /testbed/django/db/models/base.py(60):     return type(name, bases, {
0.68 /testbed/django/db/models/base.py(61):         '__module__': module,
0.68 /testbed/django/db/models/base.py(62):         '__qualname__': '%s.%s' % (attached_to.__qualname__, name),
0.68 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.68 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.68 /testbed/django/db/models/base.py(327):             setattr(cls, name, value)
0.68 /testbed/django/db/models/base.py(132):             new_class.add_to_class(
0.68 /testbed/django/db/models/base.py(133):                 'MultipleObjectsReturned',
0.68 /testbed/django/db/models/base.py(134):                 subclass_exception(
0.68 /testbed/django/db/models/base.py(135):                     'MultipleObjectsReturned',
0.68 /testbed/django/db/models/base.py(136):                     tuple(
0.68 /testbed/django/db/models/base.py(137):                         x.MultipleObjectsReturned for x in parents if hasattr(x, '_meta') and not x._meta.abstract
0.68 /testbed/django/db/models/base.py(137):                         x.MultipleObjectsReturned for x in parents if hasattr(x, '_meta') and not x._meta.abstract
0.68 /testbed/django/db/models/base.py(137):                         x.MultipleObjectsReturned for x in parents if hasattr(x, '_meta') and not x._meta.abstract
0.68 /testbed/django/db/models/base.py(138):                     ) or (MultipleObjectsReturned,),
0.68 /testbed/django/db/models/base.py(139):                     module,
0.68 /testbed/django/db/models/base.py(140):                     attached_to=new_class))
0.68 /testbed/django/db/models/base.py(60):     return type(name, bases, {
0.68 /testbed/django/db/models/base.py(61):         '__module__': module,
0.68 /testbed/django/db/models/base.py(62):         '__qualname__': '%s.%s' % (attached_to.__qualname__, name),
0.68 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.68 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.68 /testbed/django/db/models/base.py(327):             setattr(cls, name, value)
0.68 /testbed/django/db/models/base.py(141):             if base_meta and not base_meta.abstract:
0.68 /testbed/django/db/models/base.py(150):         is_proxy = new_class._meta.proxy
0.68 /testbed/django/db/models/base.py(154):         if is_proxy and base_meta and base_meta.swapped:
0.68 /testbed/django/db/models/base.py(159):         for obj_name, obj in contributable_attrs.items():
0.68 /testbed/django/db/models/base.py(160):             new_class.add_to_class(obj_name, obj)
0.68 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.68 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.68 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.68 /testbed/django/db/models/base.py(159):         for obj_name, obj in contributable_attrs.items():
0.68 /testbed/django/db/models/base.py(163):         new_fields = chain(
0.68 /testbed/django/db/models/base.py(164):             new_class._meta.local_fields,
0.68 /testbed/django/db/models/base.py(165):             new_class._meta.local_many_to_many,
0.68 /testbed/django/db/models/base.py(166):             new_class._meta.private_fields
0.68 /testbed/django/db/models/base.py(168):         field_names = {f.name for f in new_fields}
0.68 /testbed/django/db/models/base.py(168):         field_names = {f.name for f in new_fields}
0.68 /testbed/django/db/models/base.py(168):         field_names = {f.name for f in new_fields}
0.68 /testbed/django/db/models/base.py(171):         if is_proxy:
0.68 /testbed/django/db/models/base.py(191):             new_class._meta.concrete_model = new_class
0.68 /testbed/django/db/models/base.py(194):         parent_links = {}
0.68 /testbed/django/db/models/base.py(195):         for base in reversed([new_class] + parents):
0.68 /testbed/django/db/models/base.py(197):             if not hasattr(base, '_meta'):
0.68 /testbed/django/db/models/base.py(198):                 continue
0.68 /testbed/django/db/models/base.py(195):         for base in reversed([new_class] + parents):
0.68 /testbed/django/db/models/base.py(197):             if not hasattr(base, '_meta'):
0.68 /testbed/django/db/models/base.py(200):             if base != new_class and not base._meta.abstract:
0.68 /testbed/django/db/models/base.py(203):             for field in base._meta.local_fields:
0.68 /testbed/django/db/models/base.py(204):                 if isinstance(field, OneToOneField):
0.68 /testbed/django/db/models/base.py(203):             for field in base._meta.local_fields:
0.68 /testbed/django/db/models/base.py(195):         for base in reversed([new_class] + parents):
0.68 /testbed/django/db/models/base.py(209):         inherited_attributes = set()
0.68 /testbed/django/db/models/base.py(211):         for base in new_class.mro():
0.68 /testbed/django/db/models/base.py(212):             if base not in parents or not hasattr(base, '_meta'):
0.68 /testbed/django/db/models/base.py(215):                 inherited_attributes.update(base.__dict__)
0.68 /testbed/django/db/models/base.py(216):                 continue
0.68 /testbed/django/db/models/base.py(211):         for base in new_class.mro():
0.68 /testbed/django/db/models/base.py(212):             if base not in parents or not hasattr(base, '_meta'):
0.68 /testbed/django/db/models/base.py(215):                 inherited_attributes.update(base.__dict__)
0.69 /testbed/django/db/models/base.py(216):                 continue
0.69 /testbed/django/db/models/base.py(211):         for base in new_class.mro():
0.69 /testbed/django/db/models/base.py(212):             if base not in parents or not hasattr(base, '_meta'):
0.69 /testbed/django/db/models/base.py(215):                 inherited_attributes.update(base.__dict__)
0.69 /testbed/django/db/models/base.py(216):                 continue
0.69 /testbed/django/db/models/base.py(211):         for base in new_class.mro():
0.69 /testbed/django/db/models/base.py(309):         new_class._meta.indexes = [copy.deepcopy(idx) for idx in new_class._meta.indexes]
0.69 /testbed/django/db/models/base.py(309):         new_class._meta.indexes = [copy.deepcopy(idx) for idx in new_class._meta.indexes]
0.69 /testbed/django/db/models/base.py(311):         if abstract:
0.69 /testbed/django/db/models/base.py(319):         new_class._prepare()
0.69 /testbed/django/db/models/base.py(331):         opts = cls._meta
0.69 /testbed/django/db/models/base.py(332):         opts._prepare(cls)
0.69 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.69 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.69 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.69 /testbed/django/db/models/base.py(334):         if opts.order_with_respect_to:
0.69 /testbed/django/db/models/base.py(349):         if cls.__doc__ is None:
0.69 /testbed/django/db/models/base.py(350):             cls.__doc__ = "%s(%s)" % (cls.__name__, ", ".join(f.name for f in opts.fields))
0.69 /testbed/django/db/models/base.py(350):             cls.__doc__ = "%s(%s)" % (cls.__name__, ", ".join(f.name for f in opts.fields))
0.69 /testbed/django/db/models/base.py(350):             cls.__doc__ = "%s(%s)" % (cls.__name__, ", ".join(f.name for f in opts.fields))
0.69 /testbed/django/db/models/base.py(350):             cls.__doc__ = "%s(%s)" % (cls.__name__, ", ".join(f.name for f in opts.fields))
0.69 /testbed/django/db/models/base.py(352):         get_absolute_url_override = settings.ABSOLUTE_URL_OVERRIDES.get(opts.label_lower)
0.69 /testbed/django/db/models/base.py(353):         if get_absolute_url_override:
0.69 /testbed/django/db/models/base.py(356):         if not opts.managers:
0.69 /testbed/django/db/models/base.py(357):             if any(f.name == 'objects' for f in opts.fields):
0.69 /testbed/django/db/models/base.py(357):             if any(f.name == 'objects' for f in opts.fields):
0.69 /testbed/django/db/models/base.py(357):             if any(f.name == 'objects' for f in opts.fields):
0.69 /testbed/django/db/models/base.py(357):             if any(f.name == 'objects' for f in opts.fields):
0.69 /testbed/django/db/models/base.py(362):             manager = Manager()
0.69 /testbed/django/db/models/base.py(363):             manager.auto_created = True
0.69 /testbed/django/db/models/base.py(364):             cls.add_to_class('objects', manager)
0.69 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.69 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.69 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.69 /testbed/django/db/models/base.py(369):         for index in cls._meta.indexes:
0.69 /testbed/django/db/models/base.py(373):         class_prepared.send(sender=cls)
0.69 /testbed/django/db/models/base.py(320):         new_class._meta.apps.register_model(new_class._meta.app_label, new_class)
0.69 /testbed/django/db/models/base.py(321):         return new_class
0.69 /testbed/django/db/models/base.py(74):         super_new = super().__new__
0.69 /testbed/django/db/models/base.py(78):         parents = [b for b in bases if isinstance(b, ModelBase)]
0.69 /testbed/django/db/models/base.py(78):         parents = [b for b in bases if isinstance(b, ModelBase)]
0.69 /testbed/django/db/models/base.py(78):         parents = [b for b in bases if isinstance(b, ModelBase)]
0.69 /testbed/django/db/models/base.py(79):         if not parents:
0.69 /testbed/django/db/models/base.py(83):         module = attrs.pop('__module__')
0.69 /testbed/django/db/models/base.py(84):         new_attrs = {'__module__': module}
0.69 /testbed/django/db/models/base.py(85):         classcell = attrs.pop('__classcell__', None)
0.69 /testbed/django/db/models/base.py(86):         if classcell is not None:
0.69 /testbed/django/db/models/base.py(88):         attr_meta = attrs.pop('Meta', None)
0.69 /testbed/django/db/models/base.py(92):         contributable_attrs = {}
0.69 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.69 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.69 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.69 /testbed/django/db/models/base.py(97):                 new_attrs[obj_name] = obj
0.69 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.69 /testbed/django/db/models/base.py(94):             if _has_contribute_to_class(obj):
0.69 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.69 /testbed/django/db/models/base.py(95):                 contributable_attrs[obj_name] = obj
0.69 /testbed/django/db/models/base.py(93):         for obj_name, obj in list(attrs.items()):
0.69 /testbed/django/db/models/base.py(98):         new_class = super_new(cls, name, bases, new_attrs, **kwargs)
0.69 /testbed/django/db/models/base.py(100):         abstract = getattr(attr_meta, 'abstract', False)
0.69 /testbed/django/db/models/base.py(101):         meta = attr_meta or getattr(new_class, 'Meta', None)
0.69 /testbed/django/db/models/base.py(102):         base_meta = getattr(new_class, '_meta', None)
0.69 /testbed/django/db/models/base.py(104):         app_label = None
0.69 /testbed/django/db/models/base.py(107):         app_config = apps.get_containing_app_config(module)
0.69 /testbed/django/db/models/base.py(109):         if getattr(meta, 'app_label', None) is None:
0.69 /testbed/django/db/models/base.py(121):         new_class.add_to_class('_meta', Options(meta, app_label))
0.69 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.69 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.69 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.69 /testbed/django/db/models/base.py(122):         if not abstract:
0.69 /testbed/django/db/models/base.py(123):             new_class.add_to_class(
0.69 /testbed/django/db/models/base.py(124):                 'DoesNotExist',
0.69 /testbed/django/db/models/base.py(125):                 subclass_exception(
0.69 /testbed/django/db/models/base.py(126):                     'DoesNotExist',
0.69 /testbed/django/db/models/base.py(127):                     tuple(
0.69 /testbed/django/db/models/base.py(128):                         x.DoesNotExist for x in parents if hasattr(x, '_meta') and not x._meta.abstract
0.69 /testbed/django/db/models/base.py(128):                         x.DoesNotExist for x in parents if hasattr(x, '_meta') and not x._meta.abstract
0.69 /testbed/django/db/models/base.py(128):                         x.DoesNotExist for x in parents if hasattr(x, '_meta') and not x._meta.abstract
0.69 /testbed/django/db/models/base.py(129):                     ) or (ObjectDoesNotExist,),
0.69 /testbed/django/db/models/base.py(130):                     module,
0.69 /testbed/django/db/models/base.py(131):                     attached_to=new_class))
0.69 /testbed/django/db/models/base.py(60):     return type(name, bases, {
0.69 /testbed/django/db/models/base.py(61):         '__module__': module,
0.69 /testbed/django/db/models/base.py(62):         '__qualname__': '%s.%s' % (attached_to.__qualname__, name),
0.69 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.69 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.69 /testbed/django/db/models/base.py(327):             setattr(cls, name, value)
0.69 /testbed/django/db/models/base.py(132):             new_class.add_to_class(
0.69 /testbed/django/db/models/base.py(133):                 'MultipleObjectsReturned',
0.69 /testbed/django/db/models/base.py(134):                 subclass_exception(
0.69 /testbed/django/db/models/base.py(135):                     'MultipleObjectsReturned',
0.69 /testbed/django/db/models/base.py(136):                     tuple(
0.69 /testbed/django/db/models/base.py(137):                         x.MultipleObjectsReturned for x in parents if hasattr(x, '_meta') and not x._meta.abstract
0.69 /testbed/django/db/models/base.py(137):                         x.MultipleObjectsReturned for x in parents if hasattr(x, '_meta') and not x._meta.abstract
0.69 /testbed/django/db/models/base.py(137):                         x.MultipleObjectsReturned for x in parents if hasattr(x, '_meta') and not x._meta.abstract
0.69 /testbed/django/db/models/base.py(138):                     ) or (MultipleObjectsReturned,),
0.69 /testbed/django/db/models/base.py(139):                     module,
0.69 /testbed/django/db/models/base.py(140):                     attached_to=new_class))
0.69 /testbed/django/db/models/base.py(60):     return type(name, bases, {
0.69 /testbed/django/db/models/base.py(61):         '__module__': module,
0.69 /testbed/django/db/models/base.py(62):         '__qualname__': '%s.%s' % (attached_to.__qualname__, name),
0.69 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.69 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.69 /testbed/django/db/models/base.py(327):             setattr(cls, name, value)
0.69 /testbed/django/db/models/base.py(141):             if base_meta and not base_meta.abstract:
0.69 /testbed/django/db/models/base.py(150):         is_proxy = new_class._meta.proxy
0.69 /testbed/django/db/models/base.py(154):         if is_proxy and base_meta and base_meta.swapped:
0.69 /testbed/django/db/models/base.py(159):         for obj_name, obj in contributable_attrs.items():
0.69 /testbed/django/db/models/base.py(160):             new_class.add_to_class(obj_name, obj)
0.69 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.69 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.69 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.69 /testbed/django/db/models/base.py(159):         for obj_name, obj in contributable_attrs.items():
0.69 /testbed/django/db/models/base.py(163):         new_fields = chain(
0.69 /testbed/django/db/models/base.py(164):             new_class._meta.local_fields,
0.69 /testbed/django/db/models/base.py(165):             new_class._meta.local_many_to_many,
0.69 /testbed/django/db/models/base.py(166):             new_class._meta.private_fields
0.69 /testbed/django/db/models/base.py(168):         field_names = {f.name for f in new_fields}
0.69 /testbed/django/db/models/base.py(168):         field_names = {f.name for f in new_fields}
0.69 /testbed/django/db/models/base.py(168):         field_names = {f.name for f in new_fields}
0.69 /testbed/django/db/models/base.py(171):         if is_proxy:
0.69 /testbed/django/db/models/base.py(191):             new_class._meta.concrete_model = new_class
0.69 /testbed/django/db/models/base.py(194):         parent_links = {}
0.69 /testbed/django/db/models/base.py(195):         for base in reversed([new_class] + parents):
0.69 /testbed/django/db/models/base.py(197):             if not hasattr(base, '_meta'):
0.69 /testbed/django/db/models/base.py(198):                 continue
0.69 /testbed/django/db/models/base.py(195):         for base in reversed([new_class] + parents):
0.69 /testbed/django/db/models/base.py(197):             if not hasattr(base, '_meta'):
0.69 /testbed/django/db/models/base.py(200):             if base != new_class and not base._meta.abstract:
0.69 /testbed/django/db/models/base.py(203):             for field in base._meta.local_fields:
0.69 /testbed/django/db/models/base.py(204):                 if isinstance(field, OneToOneField):
0.69 /testbed/django/db/models/base.py(203):             for field in base._meta.local_fields:
0.69 /testbed/django/db/models/base.py(195):         for base in reversed([new_class] + parents):
0.69 /testbed/django/db/models/base.py(209):         inherited_attributes = set()
0.69 /testbed/django/db/models/base.py(211):         for base in new_class.mro():
0.69 /testbed/django/db/models/base.py(212):             if base not in parents or not hasattr(base, '_meta'):
0.69 /testbed/django/db/models/base.py(215):                 inherited_attributes.update(base.__dict__)
0.69 /testbed/django/db/models/base.py(216):                 continue
0.69 /testbed/django/db/models/base.py(211):         for base in new_class.mro():
0.69 /testbed/django/db/models/base.py(212):             if base not in parents or not hasattr(base, '_meta'):
0.69 /testbed/django/db/models/base.py(215):                 inherited_attributes.update(base.__dict__)
0.69 /testbed/django/db/models/base.py(216):                 continue
0.69 /testbed/django/db/models/base.py(211):         for base in new_class.mro():
0.69 /testbed/django/db/models/base.py(212):             if base not in parents or not hasattr(base, '_meta'):
0.69 /testbed/django/db/models/base.py(215):                 inherited_attributes.update(base.__dict__)
0.69 /testbed/django/db/models/base.py(216):                 continue
0.69 /testbed/django/db/models/base.py(211):         for base in new_class.mro():
0.69 /testbed/django/db/models/base.py(309):         new_class._meta.indexes = [copy.deepcopy(idx) for idx in new_class._meta.indexes]
0.69 /testbed/django/db/models/base.py(309):         new_class._meta.indexes = [copy.deepcopy(idx) for idx in new_class._meta.indexes]
0.69 /testbed/django/db/models/base.py(311):         if abstract:
0.69 /testbed/django/db/models/base.py(319):         new_class._prepare()
0.69 /testbed/django/db/models/base.py(331):         opts = cls._meta
0.69 /testbed/django/db/models/base.py(332):         opts._prepare(cls)
0.69 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.69 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.69 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.69 /testbed/django/db/models/base.py(334):         if opts.order_with_respect_to:
0.69 /testbed/django/db/models/base.py(349):         if cls.__doc__ is None:
0.69 /testbed/django/db/models/base.py(350):             cls.__doc__ = "%s(%s)" % (cls.__name__, ", ".join(f.name for f in opts.fields))
0.69 /testbed/django/db/models/base.py(350):             cls.__doc__ = "%s(%s)" % (cls.__name__, ", ".join(f.name for f in opts.fields))
0.69 /testbed/django/db/models/base.py(350):             cls.__doc__ = "%s(%s)" % (cls.__name__, ", ".join(f.name for f in opts.fields))
0.69 /testbed/django/db/models/base.py(350):             cls.__doc__ = "%s(%s)" % (cls.__name__, ", ".join(f.name for f in opts.fields))
0.69 /testbed/django/db/models/base.py(352):         get_absolute_url_override = settings.ABSOLUTE_URL_OVERRIDES.get(opts.label_lower)
0.69 /testbed/django/db/models/base.py(353):         if get_absolute_url_override:
0.69 /testbed/django/db/models/base.py(356):         if not opts.managers:
0.69 /testbed/django/db/models/base.py(357):             if any(f.name == 'objects' for f in opts.fields):
0.69 /testbed/django/db/models/base.py(357):             if any(f.name == 'objects' for f in opts.fields):
0.69 /testbed/django/db/models/base.py(357):             if any(f.name == 'objects' for f in opts.fields):
0.69 /testbed/django/db/models/base.py(357):             if any(f.name == 'objects' for f in opts.fields):
0.69 /testbed/django/db/models/base.py(362):             manager = Manager()
0.69 /testbed/django/db/models/base.py(363):             manager.auto_created = True
0.69 /testbed/django/db/models/base.py(364):             cls.add_to_class('objects', manager)
0.69 /testbed/django/db/models/base.py(324):         if _has_contribute_to_class(value):
0.69 /testbed/django/db/models/base.py(68):     return not inspect.isclass(value) and hasattr(value, 'contribute_to_class')
0.69 /testbed/django/db/models/base.py(325):             value.contribute_to_class(cls, name)
0.69 /testbed/django/db/models/base.py(369):         for index in cls._meta.indexes:
0.69 /testbed/django/db/models/base.py(373):         class_prepared.send(sender=cls)
0.69 /testbed/django/db/models/base.py(320):         new_class._meta.apps.register_model(new_class._meta.app_label, new_class)
0.69 /testbed/django/db/models/base.py(321):         return new_class
Skipping setup of unused database(s): default, other.
0.70 /testbed/django/db/models/base.py(407):         cls = self.__class__
0.70 /testbed/django/db/models/base.py(408):         opts = self._meta
0.70 /testbed/django/db/models/base.py(409):         _setattr = setattr
0.70 /testbed/django/db/models/base.py(410):         _DEFERRED = DEFERRED
0.70 /testbed/django/db/models/base.py(412):         pre_init.send(sender=cls, args=args, kwargs=kwargs)
0.70 /testbed/django/db/models/base.py(415):         self._state = ModelState()
0.70 /testbed/django/db/models/base.py(421):         if len(args) > len(opts.concrete_fields):
0.70 /testbed/django/db/models/base.py(425):         if not kwargs:
0.70 /testbed/django/db/models/base.py(426):             fields_iter = iter(opts.concrete_fields)
0.70 /testbed/django/db/models/base.py(431):             for val, field in zip(args, fields_iter):
0.70 /testbed/django/db/models/base.py(447):         for field in fields_iter:
0.70 /testbed/django/db/models/base.py(448):             is_related_object = False
0.70 /testbed/django/db/models/base.py(450):             if field.attname not in kwargs and field.column is None:
0.70 /testbed/django/db/models/base.py(452):             if kwargs:
0.70 /testbed/django/db/models/base.py(474):                 val = field.get_default()
0.70 /testbed/django/db/models/base.py(476):             if is_related_object:
0.70 /testbed/django/db/models/base.py(484):                 if val is not _DEFERRED:
0.70 /testbed/django/db/models/base.py(485):                     _setattr(self, field.attname, val)
0.70 /testbed/django/db/models/base.py(447):         for field in fields_iter:
0.70 /testbed/django/db/models/base.py(448):             is_related_object = False
0.70 /testbed/django/db/models/base.py(450):             if field.attname not in kwargs and field.column is None:
0.70 /testbed/django/db/models/base.py(452):             if kwargs:
0.70 /testbed/django/db/models/base.py(474):                 val = field.get_default()
0.70 /testbed/django/db/models/base.py(476):             if is_related_object:
0.70 /testbed/django/db/models/base.py(484):                 if val is not _DEFERRED:
0.70 /testbed/django/db/models/base.py(485):                     _setattr(self, field.attname, val)
0.70 /testbed/django/db/models/base.py(447):         for field in fields_iter:
0.70 /testbed/django/db/models/base.py(448):             is_related_object = False
0.70 /testbed/django/db/models/base.py(450):             if field.attname not in kwargs and field.column is None:
0.70 /testbed/django/db/models/base.py(452):             if kwargs:
0.70 /testbed/django/db/models/base.py(474):                 val = field.get_default()
0.70 /testbed/django/db/models/base.py(476):             if is_related_object:
0.70 /testbed/django/db/models/base.py(484):                 if val is not _DEFERRED:
0.70 /testbed/django/db/models/base.py(485):                     _setattr(self, field.attname, val)
0.70 /testbed/django/db/models/base.py(447):         for field in fields_iter:
0.70 /testbed/django/db/models/base.py(448):             is_related_object = False
0.70 /testbed/django/db/models/base.py(450):             if field.attname not in kwargs and field.column is None:
0.70 /testbed/django/db/models/base.py(452):             if kwargs:
0.70 /testbed/django/db/models/base.py(474):                 val = field.get_default()
0.70 /testbed/django/db/models/base.py(476):             if is_related_object:
0.70 /testbed/django/db/models/base.py(484):                 if val is not _DEFERRED:
0.70 /testbed/django/db/models/base.py(485):                     _setattr(self, field.attname, val)
0.70 /testbed/django/db/models/base.py(447):         for field in fields_iter:
0.70 /testbed/django/db/models/base.py(448):             is_related_object = False
0.70 /testbed/django/db/models/base.py(450):             if field.attname not in kwargs and field.column is None:
0.70 /testbed/django/db/models/base.py(452):             if kwargs:
0.70 /testbed/django/db/models/base.py(474):                 val = field.get_default()
0.70 /testbed/django/db/models/base.py(476):             if is_related_object:
0.70 /testbed/django/db/models/base.py(484):                 if val is not _DEFERRED:
0.70 /testbed/django/db/models/base.py(485):                     _setattr(self, field.attname, val)
0.70 /testbed/django/db/models/base.py(447):         for field in fields_iter:
0.70 /testbed/django/db/models/base.py(448):             is_related_object = False
0.70 /testbed/django/db/models/base.py(450):             if field.attname not in kwargs and field.column is None:
0.70 /testbed/django/db/models/base.py(452):             if kwargs:
0.70 /testbed/django/db/models/base.py(474):                 val = field.get_default()
0.70 /testbed/django/db/models/base.py(476):             if is_related_object:
0.70 /testbed/django/db/models/base.py(484):                 if val is not _DEFERRED:
0.70 /testbed/django/db/models/base.py(485):                     _setattr(self, field.attname, val)
0.70 /testbed/django/db/models/base.py(447):         for field in fields_iter:
0.70 /testbed/django/db/models/base.py(448):             is_related_object = False
0.70 /testbed/django/db/models/base.py(450):             if field.attname not in kwargs and field.column is None:
0.70 /testbed/django/db/models/base.py(452):             if kwargs:
0.70 /testbed/django/db/models/base.py(474):                 val = field.get_default()
0.70 /testbed/django/db/models/base.py(476):             if is_related_object:
0.70 /testbed/django/db/models/base.py(484):                 if val is not _DEFERRED:
0.70 /testbed/django/db/models/base.py(485):                     _setattr(self, field.attname, val)
0.70 /testbed/django/db/models/base.py(447):         for field in fields_iter:
0.70 /testbed/django/db/models/base.py(448):             is_related_object = False
0.70 /testbed/django/db/models/base.py(450):             if field.attname not in kwargs and field.column is None:
0.70 /testbed/django/db/models/base.py(452):             if kwargs:
0.70 /testbed/django/db/models/base.py(474):                 val = field.get_default()
0.70 /testbed/django/db/models/base.py(476):             if is_related_object:
0.70 /testbed/django/db/models/base.py(484):                 if val is not _DEFERRED:
0.70 /testbed/django/db/models/base.py(485):                     _setattr(self, field.attname, val)
0.70 /testbed/django/db/models/base.py(447):         for field in fields_iter:
0.70 /testbed/django/db/models/base.py(448):             is_related_object = False
0.70 /testbed/django/db/models/base.py(450):             if field.attname not in kwargs and field.column is None:
0.70 /testbed/django/db/models/base.py(452):             if kwargs:
0.70 /testbed/django/db/models/base.py(474):                 val = field.get_default()
0.70 /testbed/django/db/models/base.py(476):             if is_related_object:
0.70 /testbed/django/db/models/base.py(484):                 if val is not _DEFERRED:
0.70 /testbed/django/db/models/base.py(485):                     _setattr(self, field.attname, val)
0.70 /testbed/django/db/models/base.py(447):         for field in fields_iter:
0.70 /testbed/django/db/models/base.py(448):             is_related_object = False
0.70 /testbed/django/db/models/base.py(450):             if field.attname not in kwargs and field.column is None:
0.70 /testbed/django/db/models/base.py(452):             if kwargs:
0.70 /testbed/django/db/models/base.py(474):                 val = field.get_default()
0.70 /testbed/django/db/models/base.py(476):             if is_related_object:
0.70 /testbed/django/db/models/base.py(484):                 if val is not _DEFERRED:
0.70 /testbed/django/db/models/base.py(485):                     _setattr(self, field.attname, val)
0.70 /testbed/django/db/models/base.py(447):         for field in fields_iter:
0.70 /testbed/django/db/models/base.py(448):             is_related_object = False
0.70 /testbed/django/db/models/base.py(450):             if field.attname not in kwargs and field.column is None:
0.70 /testbed/django/db/models/base.py(452):             if kwargs:
0.70 /testbed/django/db/models/base.py(474):                 val = field.get_default()
0.70 /testbed/django/db/models/base.py(476):             if is_related_object:
0.70 /testbed/django/db/models/base.py(484):                 if val is not _DEFERRED:
0.70 /testbed/django/db/models/base.py(485):                     _setattr(self, field.attname, val)
0.70 /testbed/django/db/models/base.py(447):         for field in fields_iter:
0.70 /testbed/django/db/models/base.py(487):         if kwargs:
0.70 /testbed/django/db/models/base.py(501):         super().__init__()
0.70 /testbed/django/db/models/base.py(502):         post_init.send(sender=cls, instance=self)
0.70 /testbed/django/db/models/base.py(407):         cls = self.__class__
0.70 /testbed/django/db/models/base.py(408):         opts = self._meta
0.70 /testbed/django/db/models/base.py(409):         _setattr = setattr
0.70 /testbed/django/db/models/base.py(410):         _DEFERRED = DEFERRED
0.70 /testbed/django/db/models/base.py(412):         pre_init.send(sender=cls, args=args, kwargs=kwargs)
0.70 /testbed/django/db/models/base.py(415):         self._state = ModelState()
0.70 /testbed/django/db/models/base.py(421):         if len(args) > len(opts.concrete_fields):
0.70 /testbed/django/db/models/base.py(425):         if not kwargs:
0.70 /testbed/django/db/models/base.py(426):             fields_iter = iter(opts.concrete_fields)
0.70 /testbed/django/db/models/base.py(431):             for val, field in zip(args, fields_iter):
0.70 /testbed/django/db/models/base.py(447):         for field in fields_iter:
0.70 /testbed/django/db/models/base.py(448):             is_related_object = False
0.70 /testbed/django/db/models/base.py(450):             if field.attname not in kwargs and field.column is None:
0.70 /testbed/django/db/models/base.py(452):             if kwargs:
0.70 /testbed/django/db/models/base.py(474):                 val = field.get_default()
0.70 /testbed/django/db/models/base.py(476):             if is_related_object:
0.70 /testbed/django/db/models/base.py(484):                 if val is not _DEFERRED:
0.70 /testbed/django/db/models/base.py(485):                     _setattr(self, field.attname, val)
0.70 /testbed/django/db/models/base.py(447):         for field in fields_iter:
0.70 /testbed/django/db/models/base.py(448):             is_related_object = False
0.70 /testbed/django/db/models/base.py(450):             if field.attname not in kwargs and field.column is None:
0.70 /testbed/django/db/models/base.py(452):             if kwargs:
0.70 /testbed/django/db/models/base.py(474):                 val = field.get_default()
0.70 /testbed/django/db/models/base.py(476):             if is_related_object:
0.70 /testbed/django/db/models/base.py(484):                 if val is not _DEFERRED:
0.70 /testbed/django/db/models/base.py(485):                     _setattr(self, field.attname, val)
0.70 /testbed/django/db/models/base.py(447):         for field in fields_iter:
0.70 /testbed/django/db/models/base.py(448):             is_related_object = False
0.70 /testbed/django/db/models/base.py(450):             if field.attname not in kwargs and field.column is None:
0.70 /testbed/django/db/models/base.py(452):             if kwargs:
0.70 /testbed/django/db/models/base.py(474):                 val = field.get_default()
0.70 /testbed/django/db/models/base.py(476):             if is_related_object:
0.70 /testbed/django/db/models/base.py(484):                 if val is not _DEFERRED:
0.70 /testbed/django/db/models/base.py(485):                     _setattr(self, field.attname, val)
0.70 /testbed/django/db/models/base.py(447):         for field in fields_iter:
0.70 /testbed/django/db/models/base.py(448):             is_related_object = False
0.70 /testbed/django/db/models/base.py(450):             if field.attname not in kwargs and field.column is None:
0.70 /testbed/django/db/models/base.py(452):             if kwargs:
0.70 /testbed/django/db/models/base.py(474):                 val = field.get_default()
0.70 /testbed/django/db/models/base.py(476):             if is_related_object:
0.70 /testbed/django/db/models/base.py(484):                 if val is not _DEFERRED:
0.70 /testbed/django/db/models/base.py(485):                     _setattr(self, field.attname, val)
0.70 /testbed/django/db/models/base.py(447):         for field in fields_iter:
0.70 /testbed/django/db/models/base.py(448):             is_related_object = False
0.70 /testbed/django/db/models/base.py(450):             if field.attname not in kwargs and field.column is None:
0.70 /testbed/django/db/models/base.py(452):             if kwargs:
0.70 /testbed/django/db/models/base.py(474):                 val = field.get_default()
0.70 /testbed/django/db/models/base.py(476):             if is_related_object:
0.70 /testbed/django/db/models/base.py(484):                 if val is not _DEFERRED:
0.70 /testbed/django/db/models/base.py(485):                     _setattr(self, field.attname, val)
0.70 /testbed/django/db/models/base.py(447):         for field in fields_iter:
0.70 /testbed/django/db/models/base.py(448):             is_related_object = False
0.70 /testbed/django/db/models/base.py(450):             if field.attname not in kwargs and field.column is None:
0.70 /testbed/django/db/models/base.py(452):             if kwargs:
0.70 /testbed/django/db/models/base.py(474):                 val = field.get_default()
0.70 /testbed/django/db/models/base.py(476):             if is_related_object:
0.70 /testbed/django/db/models/base.py(484):                 if val is not _DEFERRED:
0.70 /testbed/django/db/models/base.py(485):                     _setattr(self, field.attname, val)
0.70 /testbed/django/db/models/base.py(447):         for field in fields_iter:
0.70 /testbed/django/db/models/base.py(448):             is_related_object = False
0.70 /testbed/django/db/models/base.py(450):             if field.attname not in kwargs and field.column is None:
0.70 /testbed/django/db/models/base.py(452):             if kwargs:
0.70 /testbed/django/db/models/base.py(474):                 val = field.get_default()
0.70 /testbed/django/db/models/base.py(476):             if is_related_object:
0.70 /testbed/django/db/models/base.py(484):                 if val is not _DEFERRED:
0.70 /testbed/django/db/models/base.py(485):                     _setattr(self, field.attname, val)
0.70 /testbed/django/db/models/base.py(447):         for field in fields_iter:
0.70 /testbed/django/db/models/base.py(448):             is_related_object = False
0.70 /testbed/django/db/models/base.py(450):             if field.attname not in kwargs and field.column is None:
0.70 /testbed/django/db/models/base.py(452):             if kwargs:
0.70 /testbed/django/db/models/base.py(474):                 val = field.get_default()
0.70 /testbed/django/db/models/base.py(476):             if is_related_object:
0.70 /testbed/django/db/models/base.py(484):                 if val is not _DEFERRED:
0.70 /testbed/django/db/models/base.py(485):                     _setattr(self, field.attname, val)
0.70 /testbed/django/db/models/base.py(447):         for field in fields_iter:
0.70 /testbed/django/db/models/base.py(448):             is_related_object = False
0.70 /testbed/django/db/models/base.py(450):             if field.attname not in kwargs and field.column is None:
0.70 /testbed/django/db/models/base.py(452):             if kwargs:
0.70 /testbed/django/db/models/base.py(474):                 val = field.get_default()
0.70 /testbed/django/db/models/base.py(476):             if is_related_object:
0.70 /testbed/django/db/models/base.py(484):                 if val is not _DEFERRED:
0.70 /testbed/django/db/models/base.py(485):                     _setattr(self, field.attname, val)
0.70 /testbed/django/db/models/base.py(447):         for field in fields_iter:
0.70 /testbed/django/db/models/base.py(448):             is_related_object = False
0.70 /testbed/django/db/models/base.py(450):             if field.attname not in kwargs and field.column is None:
0.70 /testbed/django/db/models/base.py(452):             if kwargs:
0.70 /testbed/django/db/models/base.py(474):                 val = field.get_default()
0.70 /testbed/django/db/models/base.py(476):             if is_related_object:
0.70 /testbed/django/db/models/base.py(484):                 if val is not _DEFERRED:
0.70 /testbed/django/db/models/base.py(485):                     _setattr(self, field.attname, val)
0.70 /testbed/django/db/models/base.py(447):         for field in fields_iter:
0.70 /testbed/django/db/models/base.py(448):             is_related_object = False
0.70 /testbed/django/db/models/base.py(450):             if field.attname not in kwargs and field.column is None:
0.70 /testbed/django/db/models/base.py(452):             if kwargs:
0.70 /testbed/django/db/models/base.py(474):                 val = field.get_default()
0.70 /testbed/django/db/models/base.py(476):             if is_related_object:
0.70 /testbed/django/db/models/base.py(484):                 if val is not _DEFERRED:
0.70 /testbed/django/db/models/base.py(485):                     _setattr(self, field.attname, val)
0.70 /testbed/django/db/models/base.py(447):         for field in fields_iter:
0.70 /testbed/django/db/models/base.py(487):         if kwargs:
0.70 /testbed/django/db/models/base.py(501):         super().__init__()
0.70 /testbed/django/db/models/base.py(502):         post_init.send(sender=cls, instance=self)
0.70 /testbed/django/db/models/base.py(1250):         errors = [*cls._check_swappable(), *cls._check_model(), *cls._check_managers(**kwargs)]
0.70 /testbed/django/db/models/base.py(1282):         errors = []
0.70 /testbed/django/db/models/base.py(1283):         if cls._meta.swapped:
0.70 /testbed/django/db/models/base.py(1304):         return errors
0.70 /testbed/django/db/models/base.py(1308):         errors = []
0.70 /testbed/django/db/models/base.py(1309):         if cls._meta.proxy:
0.70 /testbed/django/db/models/base.py(1317):         return errors
0.70 /testbed/django/db/models/base.py(1322):         errors = []
0.70 /testbed/django/db/models/base.py(1323):         for manager in cls._meta.managers:
0.70 /testbed/django/db/models/base.py(1324):             errors.extend(manager.check(**kwargs))
0.70 /testbed/django/db/models/base.py(1323):         for manager in cls._meta.managers:
0.70 /testbed/django/db/models/base.py(1325):         return errors
0.70 /testbed/django/db/models/base.py(1251):         if not cls._meta.swapped:
0.70 /testbed/django/db/models/base.py(1252):             errors += [
0.70 /testbed/django/db/models/base.py(1253):                 *cls._check_fields(**kwargs),
0.70 /testbed/django/db/models/base.py(1330):         errors = []
0.70 /testbed/django/db/models/base.py(1331):         for field in cls._meta.local_fields:
0.70 /testbed/django/db/models/base.py(1332):             errors.extend(field.check(**kwargs))
0.70 /testbed/django/db/models/base.py(1331):         for field in cls._meta.local_fields:
0.70 /testbed/django/db/models/base.py(1332):             errors.extend(field.check(**kwargs))
0.70 /testbed/django/db/models/base.py(1331):         for field in cls._meta.local_fields:
0.70 /testbed/django/db/models/base.py(1332):             errors.extend(field.check(**kwargs))
0.70 /testbed/django/db/models/base.py(1331):         for field in cls._meta.local_fields:
0.70 /testbed/django/db/models/base.py(1333):         for field in cls._meta.local_many_to_many:
0.70 /testbed/django/db/models/base.py(1335):         return errors
0.70 /testbed/django/db/models/base.py(1254):                 *cls._check_m2m_through_same_relationship(),
0.70 /testbed/django/db/models/base.py(1342):         errors = []
0.70 /testbed/django/db/models/base.py(1343):         seen_intermediary_signatures = []
0.70 /testbed/django/db/models/base.py(1345):         fields = cls._meta.local_many_to_many
0.70 /testbed/django/db/models/base.py(1348):         fields = (f for f in fields if isinstance(f.remote_field.model, ModelBase))
0.70 /testbed/django/db/models/base.py(1351):         fields = (f for f in fields if isinstance(f.remote_field.through, ModelBase))
0.70 /testbed/django/db/models/base.py(1353):         for f in fields:
0.70 /testbed/django/db/models/base.py(1351):         fields = (f for f in fields if isinstance(f.remote_field.through, ModelBase))
0.70 /testbed/django/db/models/base.py(1348):         fields = (f for f in fields if isinstance(f.remote_field.model, ModelBase))
0.70 /testbed/django/db/models/base.py(1367):         return errors
0.70 /testbed/django/db/models/base.py(1255):                 *cls._check_long_column_names(),
0.70 /testbed/django/db/models/base.py(1765):         errors = []
0.70 /testbed/django/db/models/base.py(1766):         allowed_len = None
0.70 /testbed/django/db/models/base.py(1767):         db_alias = None
0.70 /testbed/django/db/models/base.py(1770):         for db in settings.DATABASES:
0.70 /testbed/django/db/models/base.py(1772):             if not router.allow_migrate_model(db, cls):
0.70 /testbed/django/db/models/base.py(1774):             connection = connections[db]
0.70 /testbed/django/db/models/base.py(1775):             max_name_length = connection.ops.max_name_length()
0.70 /testbed/django/db/models/base.py(1776):             if max_name_length is None or connection.features.truncates_names:
0.70 /testbed/django/db/models/base.py(1770):         for db in settings.DATABASES:
0.70 /testbed/django/db/models/base.py(1772):             if not router.allow_migrate_model(db, cls):
0.70 /testbed/django/db/models/base.py(1774):             connection = connections[db]
0.70 /testbed/django/db/models/base.py(1775):             max_name_length = connection.ops.max_name_length()
0.70 /testbed/django/db/models/base.py(1776):             if max_name_length is None or connection.features.truncates_names:
0.70 /testbed/django/db/models/base.py(1770):         for db in settings.DATABASES:
0.70 /testbed/django/db/models/base.py(1786):         if allowed_len is None:
0.70 /testbed/django/db/models/base.py(1787):             return errors
0.70 /testbed/django/db/models/base.py(1258):                 *cls._check_id_field(),
0.70 /testbed/django/db/models/base.py(1372):         fields = [f for f in cls._meta.local_fields if f.name == 'id' and f != cls._meta.pk]
0.70 /testbed/django/db/models/base.py(1372):         fields = [f for f in cls._meta.local_fields if f.name == 'id' and f != cls._meta.pk]
0.70 /testbed/django/db/models/base.py(1372):         fields = [f for f in cls._meta.local_fields if f.name == 'id' and f != cls._meta.pk]
0.70 /testbed/django/db/models/base.py(1372):         fields = [f for f in cls._meta.local_fields if f.name == 'id' and f != cls._meta.pk]
0.70 /testbed/django/db/models/base.py(1372):         fields = [f for f in cls._meta.local_fields if f.name == 'id' and f != cls._meta.pk]
0.70 /testbed/django/db/models/base.py(1374):         if fields and not fields[0].primary_key and cls._meta.pk.name == 'id':
0.70 /testbed/django/db/models/base.py(1384):             return []
0.70 /testbed/django/db/models/base.py(1259):                 *cls._check_field_name_clashes(),
0.70 /testbed/django/db/models/base.py(1389):         errors = []
0.70 /testbed/django/db/models/base.py(1390):         used_fields = {}  # name or attname -> field
0.70 /testbed/django/db/models/base.py(1393):         for parent in cls._meta.get_parent_list():
0.70 /testbed/django/db/models/base.py(1415):         for parent in cls._meta.get_parent_list():
0.70 /testbed/django/db/models/base.py(1420):         for f in cls._meta.local_fields:
0.70 /testbed/django/db/models/base.py(1421):             clash = used_fields.get(f.name) or used_fields.get(f.attname) or None
0.70 /testbed/django/db/models/base.py(1426):             id_conflict = f.name == "id" and clash and clash.name == "id" and clash.model == cls
0.70 /testbed/django/db/models/base.py(1427):             if clash and not id_conflict:
0.70 /testbed/django/db/models/base.py(1438):             used_fields[f.name] = f
0.70 /testbed/django/db/models/base.py(1439):             used_fields[f.attname] = f
0.70 /testbed/django/db/models/base.py(1420):         for f in cls._meta.local_fields:
0.70 /testbed/django/db/models/base.py(1421):             clash = used_fields.get(f.name) or used_fields.get(f.attname) or None
0.70 /testbed/django/db/models/base.py(1426):             id_conflict = f.name == "id" and clash and clash.name == "id" and clash.model == cls
0.70 /testbed/django/db/models/base.py(1427):             if clash and not id_conflict:
0.70 /testbed/django/db/models/base.py(1438):             used_fields[f.name] = f
0.70 /testbed/django/db/models/base.py(1439):             used_fields[f.attname] = f
0.70 /testbed/django/db/models/base.py(1420):         for f in cls._meta.local_fields:
0.70 /testbed/django/db/models/base.py(1421):             clash = used_fields.get(f.name) or used_fields.get(f.attname) or None
0.70 /testbed/django/db/models/base.py(1426):             id_conflict = f.name == "id" and clash and clash.name == "id" and clash.model == cls
0.70 /testbed/django/db/models/base.py(1427):             if clash and not id_conflict:
0.70 /testbed/django/db/models/base.py(1438):             used_fields[f.name] = f
0.70 /testbed/django/db/models/base.py(1439):             used_fields[f.attname] = f
0.70 /testbed/django/db/models/base.py(1420):         for f in cls._meta.local_fields:
0.70 /testbed/django/db/models/base.py(1441):         return errors
0.70 /testbed/django/db/models/base.py(1260):                 *cls._check_model_name_db_lookup_clashes(),
0.70 /testbed/django/db/models/base.py(1470):         errors = []
0.70 /testbed/django/db/models/base.py(1471):         model_name = cls.__name__
0.70 /testbed/django/db/models/base.py(1472):         if model_name.startswith('_') or model_name.endswith('_'):
0.70 /testbed/django/db/models/base.py(1481):         elif LOOKUP_SEP in model_name:
0.70 /testbed/django/db/models/base.py(1490):         return errors
0.70 /testbed/django/db/models/base.py(1261):                 *cls._check_property_name_related_field_accessor_clashes(),
0.70 /testbed/django/db/models/base.py(1494):         errors = []
0.70 /testbed/django/db/models/base.py(1495):         property_names = cls._meta._property_names
0.70 /testbed/django/db/models/base.py(1497):             f.get_attname() for f in cls._meta._get_fields(reverse=False)
0.70 /testbed/django/db/models/base.py(1500):         for accessor in related_field_accessors:
0.70 /testbed/django/db/models/base.py(1497):             f.get_attname() for f in cls._meta._get_fields(reverse=False)
0.70 /testbed/django/db/models/base.py(1498):             if f.is_relation and f.related_model is not None
0.70 /testbed/django/db/models/base.py(1497):             f.get_attname() for f in cls._meta._get_fields(reverse=False)
0.70 /testbed/django/db/models/base.py(1498):             if f.is_relation and f.related_model is not None
0.70 /testbed/django/db/models/base.py(1497):             f.get_attname() for f in cls._meta._get_fields(reverse=False)
0.70 /testbed/django/db/models/base.py(1498):             if f.is_relation and f.related_model is not None
0.70 /testbed/django/db/models/base.py(1497):             f.get_attname() for f in cls._meta._get_fields(reverse=False)
0.70 /testbed/django/db/models/base.py(1510):         return errors
0.70 /testbed/django/db/models/base.py(1262):                 *cls._check_single_primary_key(),
0.70 /testbed/django/db/models/base.py(1514):         errors = []
0.70 /testbed/django/db/models/base.py(1515):         if sum(1 for f in cls._meta.local_fields if f.primary_key) > 1:
0.70 /testbed/django/db/models/base.py(1515):         if sum(1 for f in cls._meta.local_fields if f.primary_key) > 1:
0.70 /testbed/django/db/models/base.py(1515):         if sum(1 for f in cls._meta.local_fields if f.primary_key) > 1:
0.70 /testbed/django/db/models/base.py(1515):         if sum(1 for f in cls._meta.local_fields if f.primary_key) > 1:
0.70 /testbed/django/db/models/base.py(1515):         if sum(1 for f in cls._meta.local_fields if f.primary_key) > 1:
0.70 /testbed/django/db/models/base.py(1524):         return errors
0.70 /testbed/django/db/models/base.py(1264):             errors.extend(clash_errors)
0.70 /testbed/django/db/models/base.py(1267):             if not clash_errors:
0.70 /testbed/django/db/models/base.py(1268):                 errors.extend(cls._check_column_name_clashes())
0.70 /testbed/django/db/models/base.py(1446):         used_column_names = []
0.70 /testbed/django/db/models/base.py(1447):         errors = []
0.70 /testbed/django/db/models/base.py(1449):         for f in cls._meta.local_fields:
0.70 /testbed/django/db/models/base.py(1450):             _, column_name = f.get_attname_column()
0.70 /testbed/django/db/models/base.py(1453):             if column_name and column_name in used_column_names:
0.70 /testbed/django/db/models/base.py(1464):                 used_column_names.append(column_name)
0.70 /testbed/django/db/models/base.py(1449):         for f in cls._meta.local_fields:
0.70 /testbed/django/db/models/base.py(1450):             _, column_name = f.get_attname_column()
0.70 /testbed/django/db/models/base.py(1453):             if column_name and column_name in used_column_names:
0.70 /testbed/django/db/models/base.py(1464):                 used_column_names.append(column_name)
0.70 /testbed/django/db/models/base.py(1449):         for f in cls._meta.local_fields:
0.70 /testbed/django/db/models/base.py(1450):             _, column_name = f.get_attname_column()
0.70 /testbed/django/db/models/base.py(1453):             if column_name and column_name in used_column_names:
0.70 /testbed/django/db/models/base.py(1464):                 used_column_names.append(column_name)
0.70 /testbed/django/db/models/base.py(1449):         for f in cls._meta.local_fields:
0.70 /testbed/django/db/models/base.py(1466):         return errors
0.70 /testbed/django/db/models/base.py(1269):             errors += [
0.70 /testbed/django/db/models/base.py(1270):                 *cls._check_index_together(),
0.70 /testbed/django/db/models/base.py(1529):         if not isinstance(cls._meta.index_together, (tuple, list)):
0.70 /testbed/django/db/models/base.py(1538):         elif any(not isinstance(fields, (tuple, list)) for fields in cls._meta.index_together):
0.70 /testbed/django/db/models/base.py(1538):         elif any(not isinstance(fields, (tuple, list)) for fields in cls._meta.index_together):
0.70 /testbed/django/db/models/base.py(1548):             errors = []
0.70 /testbed/django/db/models/base.py(1549):             for fields in cls._meta.index_together:
0.70 /testbed/django/db/models/base.py(1551):             return errors
0.70 /testbed/django/db/models/base.py(1271):                 *cls._check_unique_together(),
0.70 /testbed/django/db/models/base.py(1556):         if not isinstance(cls._meta.unique_together, (tuple, list)):
0.70 /testbed/django/db/models/base.py(1565):         elif any(not isinstance(fields, (tuple, list)) for fields in cls._meta.unique_together):
0.70 /testbed/django/db/models/base.py(1565):         elif any(not isinstance(fields, (tuple, list)) for fields in cls._meta.unique_together):
0.70 /testbed/django/db/models/base.py(1565):         elif any(not isinstance(fields, (tuple, list)) for fields in cls._meta.unique_together):
0.70 /testbed/django/db/models/base.py(1575):             errors = []
0.70 /testbed/django/db/models/base.py(1576):             for fields in cls._meta.unique_together:
0.70 /testbed/django/db/models/base.py(1577):                 errors.extend(cls._check_local_fields(fields, "unique_together"))
0.70 /testbed/django/db/models/base.py(1611):         from django.db import models
0.70 /testbed/django/db/models/base.py(1615):         forward_fields_map = {}
0.70 /testbed/django/db/models/base.py(1616):         for field in cls._meta._get_fields(reverse=False):
0.70 /testbed/django/db/models/base.py(1617):             forward_fields_map[field.name] = field
0.70 /testbed/django/db/models/base.py(1618):             if hasattr(field, 'attname'):
0.70 /testbed/django/db/models/base.py(1619):                 forward_fields_map[field.attname] = field
0.70 /testbed/django/db/models/base.py(1616):         for field in cls._meta._get_fields(reverse=False):
0.70 /testbed/django/db/models/base.py(1617):             forward_fields_map[field.name] = field
0.70 /testbed/django/db/models/base.py(1618):             if hasattr(field, 'attname'):
0.70 /testbed/django/db/models/base.py(1619):                 forward_fields_map[field.attname] = field
0.70 /testbed/django/db/models/base.py(1616):         for field in cls._meta._get_fields(reverse=False):
0.70 /testbed/django/db/models/base.py(1617):             forward_fields_map[field.name] = field
0.70 /testbed/django/db/models/base.py(1618):             if hasattr(field, 'attname'):
0.70 /testbed/django/db/models/base.py(1619):                 forward_fields_map[field.attname] = field
0.70 /testbed/django/db/models/base.py(1616):         for field in cls._meta._get_fields(reverse=False):
0.70 /testbed/django/db/models/base.py(1621):         errors = []
0.70 /testbed/django/db/models/base.py(1622):         for field_name in fields:
0.70 /testbed/django/db/models/base.py(1623):             try:
0.70 /testbed/django/db/models/base.py(1624):                 field = forward_fields_map[field_name]
0.70 /testbed/django/db/models/base.py(1636):                 if isinstance(field.remote_field, models.ManyToManyRel):
0.70 /testbed/django/db/models/base.py(1647):                 elif field not in cls._meta.local_fields:
0.70 /testbed/django/db/models/base.py(1622):         for field_name in fields:
0.70 /testbed/django/db/models/base.py(1623):             try:
0.70 /testbed/django/db/models/base.py(1624):                 field = forward_fields_map[field_name]
0.70 /testbed/django/db/models/base.py(1636):                 if isinstance(field.remote_field, models.ManyToManyRel):
0.70 /testbed/django/db/models/base.py(1647):                 elif field not in cls._meta.local_fields:
0.70 /testbed/django/db/models/base.py(1622):         for field_name in fields:
0.70 /testbed/django/db/models/base.py(1657):         return errors
0.70 /testbed/django/db/models/base.py(1576):             for fields in cls._meta.unique_together:
0.70 /testbed/django/db/models/base.py(1578):             return errors
0.70 /testbed/django/db/models/base.py(1272):                 *cls._check_indexes(),
0.70 /testbed/django/db/models/base.py(1583):         errors = []
0.70 /testbed/django/db/models/base.py(1584):         for index in cls._meta.indexes:
0.70 /testbed/django/db/models/base.py(1605):         fields = [field for index in cls._meta.indexes for field, _ in index.fields_orders]
0.70 /testbed/django/db/models/base.py(1605):         fields = [field for index in cls._meta.indexes for field, _ in index.fields_orders]
0.70 /testbed/django/db/models/base.py(1606):         errors.extend(cls._check_local_fields(fields, 'indexes'))
0.70 /testbed/django/db/models/base.py(1611):         from django.db import models
0.70 /testbed/django/db/models/base.py(1615):         forward_fields_map = {}
0.70 /testbed/django/db/models/base.py(1616):         for field in cls._meta._get_fields(reverse=False):
0.70 /testbed/django/db/models/base.py(1617):             forward_fields_map[field.name] = field
0.70 /testbed/django/db/models/base.py(1618):             if hasattr(field, 'attname'):
0.70 /testbed/django/db/models/base.py(1619):                 forward_fields_map[field.attname] = field
0.70 /testbed/django/db/models/base.py(1616):         for field in cls._meta._get_fields(reverse=False):
0.70 /testbed/django/db/models/base.py(1617):             forward_fields_map[field.name] = field
0.70 /testbed/django/db/models/base.py(1618):             if hasattr(field, 'attname'):
0.70 /testbed/django/db/models/base.py(1619):                 forward_fields_map[field.attname] = field
0.70 /testbed/django/db/models/base.py(1616):         for field in cls._meta._get_fields(reverse=False):
0.70 /testbed/django/db/models/base.py(1617):             forward_fields_map[field.name] = field
0.70 /testbed/django/db/models/base.py(1618):             if hasattr(field, 'attname'):
0.70 /testbed/django/db/models/base.py(1619):                 forward_fields_map[field.attname] = field
0.70 /testbed/django/db/models/base.py(1616):         for field in cls._meta._get_fields(reverse=False):
0.70 /testbed/django/db/models/base.py(1621):         errors = []
0.70 /testbed/django/db/models/base.py(1622):         for field_name in fields:
0.70 /testbed/django/db/models/base.py(1657):         return errors
0.70 /testbed/django/db/models/base.py(1607):         return errors
0.70 /testbed/django/db/models/base.py(1273):                 *cls._check_ordering(),
0.70 /testbed/django/db/models/base.py(1665):         if cls._meta._ordering_clash:
0.70 /testbed/django/db/models/base.py(1674):         if cls._meta.order_with_respect_to or not cls._meta.ordering:
0.70 /testbed/django/db/models/base.py(1675):             return []
0.70 /testbed/django/db/models/base.py(1274):                 *cls._check_constraints(),
0.70 /testbed/django/db/models/base.py(1834):         errors = []
0.70 /testbed/django/db/models/base.py(1835):         for db in settings.DATABASES:
0.70 /testbed/django/db/models/base.py(1836):             if not router.allow_migrate_model(db, cls):
0.70 /testbed/django/db/models/base.py(1838):             connection = connections[db]
0.70 /testbed/django/db/models/base.py(1840):                 connection.features.supports_table_check_constraints or
0.70 /testbed/django/db/models/base.py(1835):         for db in settings.DATABASES:
0.70 /testbed/django/db/models/base.py(1836):             if not router.allow_migrate_model(db, cls):
0.70 /testbed/django/db/models/base.py(1838):             connection = connections[db]
0.70 /testbed/django/db/models/base.py(1840):                 connection.features.supports_table_check_constraints or
0.70 /testbed/django/db/models/base.py(1835):         for db in settings.DATABASES:
0.70 /testbed/django/db/models/base.py(1856):         return errors
0.70 /testbed/django/db/models/base.py(1277):         return errors
0.70 /testbed/django/db/models/base.py(1250):         errors = [*cls._check_swappable(), *cls._check_model(), *cls._check_managers(**kwargs)]
0.70 /testbed/django/db/models/base.py(1282):         errors = []
0.70 /testbed/django/db/models/base.py(1283):         if cls._meta.swapped:
0.70 /testbed/django/db/models/base.py(1304):         return errors
0.70 /testbed/django/db/models/base.py(1308):         errors = []
0.70 /testbed/django/db/models/base.py(1309):         if cls._meta.proxy:
0.70 /testbed/django/db/models/base.py(1317):         return errors
0.70 /testbed/django/db/models/base.py(1322):         errors = []
0.70 /testbed/django/db/models/base.py(1323):         for manager in cls._meta.managers:
0.70 /testbed/django/db/models/base.py(1324):             errors.extend(manager.check(**kwargs))
0.70 /testbed/django/db/models/base.py(1323):         for manager in cls._meta.managers:
0.70 /testbed/django/db/models/base.py(1325):         return errors
0.70 /testbed/django/db/models/base.py(1251):         if not cls._meta.swapped:
0.70 /testbed/django/db/models/base.py(1252):             errors += [
0.70 /testbed/django/db/models/base.py(1253):                 *cls._check_fields(**kwargs),
0.70 /testbed/django/db/models/base.py(1330):         errors = []
0.70 /testbed/django/db/models/base.py(1331):         for field in cls._meta.local_fields:
0.70 /testbed/django/db/models/base.py(1332):             errors.extend(field.check(**kwargs))
0.70 /testbed/django/db/models/base.py(1331):         for field in cls._meta.local_fields:
0.70 /testbed/django/db/models/base.py(1332):             errors.extend(field.check(**kwargs))
0.70 /testbed/django/db/models/base.py(1331):         for field in cls._meta.local_fields:
0.70 /testbed/django/db/models/base.py(1332):             errors.extend(field.check(**kwargs))
0.70 /testbed/django/db/models/base.py(1331):         for field in cls._meta.local_fields:
0.70 /testbed/django/db/models/base.py(1332):             errors.extend(field.check(**kwargs))
0.70 /testbed/django/db/models/base.py(1331):         for field in cls._meta.local_fields:
0.70 /testbed/django/db/models/base.py(1333):         for field in cls._meta.local_many_to_many:
0.70 /testbed/django/db/models/base.py(1335):         return errors
0.70 /testbed/django/db/models/base.py(1254):                 *cls._check_m2m_through_same_relationship(),
0.70 /testbed/django/db/models/base.py(1342):         errors = []
0.70 /testbed/django/db/models/base.py(1343):         seen_intermediary_signatures = []
0.70 /testbed/django/db/models/base.py(1345):         fields = cls._meta.local_many_to_many
0.70 /testbed/django/db/models/base.py(1348):         fields = (f for f in fields if isinstance(f.remote_field.model, ModelBase))
0.70 /testbed/django/db/models/base.py(1351):         fields = (f for f in fields if isinstance(f.remote_field.through, ModelBase))
0.70 /testbed/django/db/models/base.py(1353):         for f in fields:
0.70 /testbed/django/db/models/base.py(1351):         fields = (f for f in fields if isinstance(f.remote_field.through, ModelBase))
0.70 /testbed/django/db/models/base.py(1348):         fields = (f for f in fields if isinstance(f.remote_field.model, ModelBase))
0.70 /testbed/django/db/models/base.py(1367):         return errors
0.70 /testbed/django/db/models/base.py(1255):                 *cls._check_long_column_names(),
0.70 /testbed/django/db/models/base.py(1765):         errors = []
0.70 /testbed/django/db/models/base.py(1766):         allowed_len = None
0.70 /testbed/django/db/models/base.py(1767):         db_alias = None
0.70 /testbed/django/db/models/base.py(1770):         for db in settings.DATABASES:
0.70 /testbed/django/db/models/base.py(1772):             if not router.allow_migrate_model(db, cls):
0.70 /testbed/django/db/models/base.py(1774):             connection = connections[db]
0.70 /testbed/django/db/models/base.py(1775):             max_name_length = connection.ops.max_name_length()
0.70 /testbed/django/db/models/base.py(1776):             if max_name_length is None or connection.features.truncates_names:
0.70 /testbed/django/db/models/base.py(1770):         for db in settings.DATABASES:
0.70 /testbed/django/db/models/base.py(1772):             if not router.allow_migrate_model(db, cls):
0.70 /testbed/django/db/models/base.py(1774):             connection = connections[db]
0.70 /testbed/django/db/models/base.py(1775):             max_name_length = connection.ops.max_name_length()
0.70 /testbed/django/db/models/base.py(1776):             if max_name_length is None or connection.features.truncates_names:
0.70 /testbed/django/db/models/base.py(1770):         for db in settings.DATABASES:
0.70 /testbed/django/db/models/base.py(1786):         if allowed_len is None:
0.70 /testbed/django/db/models/base.py(1787):             return errors
0.70 /testbed/django/db/models/base.py(1258):                 *cls._check_id_field(),
0.70 /testbed/django/db/models/base.py(1372):         fields = [f for f in cls._meta.local_fields if f.name == 'id' and f != cls._meta.pk]
0.70 /testbed/django/db/models/base.py(1372):         fields = [f for f in cls._meta.local_fields if f.name == 'id' and f != cls._meta.pk]
0.70 /testbed/django/db/models/base.py(1372):         fields = [f for f in cls._meta.local_fields if f.name == 'id' and f != cls._meta.pk]
0.70 /testbed/django/db/models/base.py(1372):         fields = [f for f in cls._meta.local_fields if f.name == 'id' and f != cls._meta.pk]
0.70 /testbed/django/db/models/base.py(1372):         fields = [f for f in cls._meta.local_fields if f.name == 'id' and f != cls._meta.pk]
0.70 /testbed/django/db/models/base.py(1372):         fields = [f for f in cls._meta.local_fields if f.name == 'id' and f != cls._meta.pk]
0.70 /testbed/django/db/models/base.py(1374):         if fields and not fields[0].primary_key and cls._meta.pk.name == 'id':
0.70 /testbed/django/db/models/base.py(1384):             return []
0.70 /testbed/django/db/models/base.py(1259):                 *cls._check_field_name_clashes(),
0.70 /testbed/django/db/models/base.py(1389):         errors = []
0.70 /testbed/django/db/models/base.py(1390):         used_fields = {}  # name or attname -> field
0.70 /testbed/django/db/models/base.py(1393):         for parent in cls._meta.get_parent_list():
0.70 /testbed/django/db/models/base.py(1415):         for parent in cls._meta.get_parent_list():
0.70 /testbed/django/db/models/base.py(1420):         for f in cls._meta.local_fields:
0.70 /testbed/django/db/models/base.py(1421):             clash = used_fields.get(f.name) or used_fields.get(f.attname) or None
0.70 /testbed/django/db/models/base.py(1426):             id_conflict = f.name == "id" and clash and clash.name == "id" and clash.model == cls
0.70 /testbed/django/db/models/base.py(1427):             if clash and not id_conflict:
0.70 /testbed/django/db/models/base.py(1438):             used_fields[f.name] = f
0.70 /testbed/django/db/models/base.py(1439):             used_fields[f.attname] = f
0.70 /testbed/django/db/models/base.py(1420):         for f in cls._meta.local_fields:
0.70 /testbed/django/db/models/base.py(1421):             clash = used_fields.get(f.name) or used_fields.get(f.attname) or None
0.70 /testbed/django/db/models/base.py(1426):             id_conflict = f.name == "id" and clash and clash.name == "id" and clash.model == cls
0.70 /testbed/django/db/models/base.py(1427):             if clash and not id_conflict:
0.70 /testbed/django/db/models/base.py(1438):             used_fields[f.name] = f
0.70 /testbed/django/db/models/base.py(1439):             used_fields[f.attname] = f
0.70 /testbed/django/db/models/base.py(1420):         for f in cls._meta.local_fields:
0.70 /testbed/django/db/models/base.py(1421):             clash = used_fields.get(f.name) or used_fields.get(f.attname) or None
0.70 /testbed/django/db/models/base.py(1426):             id_conflict = f.name == "id" and clash and clash.name == "id" and clash.model == cls
0.70 /testbed/django/db/models/base.py(1427):             if clash and not id_conflict:
0.70 /testbed/django/db/models/base.py(1438):             used_fields[f.name] = f
0.70 /testbed/django/db/models/base.py(1439):             used_fields[f.attname] = f
0.70 /testbed/django/db/models/base.py(1420):         for f in cls._meta.local_fields:
0.70 /testbed/django/db/models/base.py(1421):             clash = used_fields.get(f.name) or used_fields.get(f.attname) or None
0.70 /testbed/django/db/models/base.py(1426):             id_conflict = f.name == "id" and clash and clash.name == "id" and clash.model == cls
0.70 /testbed/django/db/models/base.py(1427):             if clash and not id_conflict:
0.70 /testbed/django/db/models/base.py(1438):             used_fields[f.name] = f
0.70 /testbed/django/db/models/base.py(1439):             used_fields[f.attname] = f
0.70 /testbed/django/db/models/base.py(1420):         for f in cls._meta.local_fields:
0.70 /testbed/django/db/models/base.py(1441):         return errors
0.70 /testbed/django/db/models/base.py(1260):                 *cls._check_model_name_db_lookup_clashes(),
0.70 /testbed/django/db/models/base.py(1470):         errors = []
0.70 /testbed/django/db/models/base.py(1471):         model_name = cls.__name__
0.70 /testbed/django/db/models/base.py(1472):         if model_name.startswith('_') or model_name.endswith('_'):
0.70 /testbed/django/db/models/base.py(1481):         elif LOOKUP_SEP in model_name:
0.70 /testbed/django/db/models/base.py(1490):         return errors
0.70 /testbed/django/db/models/base.py(1261):                 *cls._check_property_name_related_field_accessor_clashes(),
0.70 /testbed/django/db/models/base.py(1494):         errors = []
0.70 /testbed/django/db/models/base.py(1495):         property_names = cls._meta._property_names
0.70 /testbed/django/db/models/base.py(1497):             f.get_attname() for f in cls._meta._get_fields(reverse=False)
0.70 /testbed/django/db/models/base.py(1500):         for accessor in related_field_accessors:
0.70 /testbed/django/db/models/base.py(1497):             f.get_attname() for f in cls._meta._get_fields(reverse=False)
0.70 /testbed/django/db/models/base.py(1498):             if f.is_relation and f.related_model is not None
0.70 /testbed/django/db/models/base.py(1497):             f.get_attname() for f in cls._meta._get_fields(reverse=False)
0.70 /testbed/django/db/models/base.py(1498):             if f.is_relation and f.related_model is not None
0.70 /testbed/django/db/models/base.py(1497):             f.get_attname() for f in cls._meta._get_fields(reverse=False)
0.70 /testbed/django/db/models/base.py(1498):             if f.is_relation and f.related_model is not None
0.70 /testbed/django/db/models/base.py(1501):             if accessor in property_names:
0.70 /testbed/django/db/models/base.py(1500):         for accessor in related_field_accessors:
0.70 /testbed/django/db/models/base.py(1497):             f.get_attname() for f in cls._meta._get_fields(reverse=False)
0.70 /testbed/django/db/models/base.py(1498):             if f.is_relation and f.related_model is not None
0.70 /testbed/django/db/models/base.py(1497):             f.get_attname() for f in cls._meta._get_fields(reverse=False)
0.70 /testbed/django/db/models/base.py(1510):         return errors
0.70 /testbed/django/db/models/base.py(1262):                 *cls._check_single_primary_key(),
0.70 /testbed/django/db/models/base.py(1514):         errors = []
0.70 /testbed/django/db/models/base.py(1515):         if sum(1 for f in cls._meta.local_fields if f.primary_key) > 1:
0.70 /testbed/django/db/models/base.py(1515):         if sum(1 for f in cls._meta.local_fields if f.primary_key) > 1:
0.70 /testbed/django/db/models/base.py(1515):         if sum(1 for f in cls._meta.local_fields if f.primary_key) > 1:
0.70 /testbed/django/db/models/base.py(1515):         if sum(1 for f in cls._meta.local_fields if f.primary_key) > 1:
0.70 /testbed/django/db/models/base.py(1515):         if sum(1 for f in cls._meta.local_fields if f.primary_key) > 1:
0.70 /testbed/django/db/models/base.py(1515):         if sum(1 for f in cls._meta.local_fields if f.primary_key) > 1:
0.70 /testbed/django/db/models/base.py(1524):         return errors
0.70 /testbed/django/db/models/base.py(1264):             errors.extend(clash_errors)
0.70 /testbed/django/db/models/base.py(1267):             if not clash_errors:
0.70 /testbed/django/db/models/base.py(1268):                 errors.extend(cls._check_column_name_clashes())
0.70 /testbed/django/db/models/base.py(1446):         used_column_names = []
0.70 /testbed/django/db/models/base.py(1447):         errors = []
0.70 /testbed/django/db/models/base.py(1449):         for f in cls._meta.local_fields:
0.70 /testbed/django/db/models/base.py(1450):             _, column_name = f.get_attname_column()
0.70 /testbed/django/db/models/base.py(1453):             if column_name and column_name in used_column_names:
0.70 /testbed/django/db/models/base.py(1464):                 used_column_names.append(column_name)
0.70 /testbed/django/db/models/base.py(1449):         for f in cls._meta.local_fields:
0.70 /testbed/django/db/models/base.py(1450):             _, column_name = f.get_attname_column()
0.70 /testbed/django/db/models/base.py(1453):             if column_name and column_name in used_column_names:
0.70 /testbed/django/db/models/base.py(1464):                 used_column_names.append(column_name)
0.70 /testbed/django/db/models/base.py(1449):         for f in cls._meta.local_fields:
0.70 /testbed/django/db/models/base.py(1450):             _, column_name = f.get_attname_column()
0.70 /testbed/django/db/models/base.py(1453):             if column_name and column_name in used_column_names:
0.70 /testbed/django/db/models/base.py(1464):                 used_column_names.append(column_name)
0.70 /testbed/django/db/models/base.py(1449):         for f in cls._meta.local_fields:
0.70 /testbed/django/db/models/base.py(1450):             _, column_name = f.get_attname_column()
0.70 /testbed/django/db/models/base.py(1453):             if column_name and column_name in used_column_names:
0.70 /testbed/django/db/models/base.py(1464):                 used_column_names.append(column_name)
0.70 /testbed/django/db/models/base.py(1449):         for f in cls._meta.local_fields:
0.70 /testbed/django/db/models/base.py(1466):         return errors
0.70 /testbed/django/db/models/base.py(1269):             errors += [
0.70 /testbed/django/db/models/base.py(1270):                 *cls._check_index_together(),
0.70 /testbed/django/db/models/base.py(1529):         if not isinstance(cls._meta.index_together, (tuple, list)):
0.70 /testbed/django/db/models/base.py(1538):         elif any(not isinstance(fields, (tuple, list)) for fields in cls._meta.index_together):
0.70 /testbed/django/db/models/base.py(1538):         elif any(not isinstance(fields, (tuple, list)) for fields in cls._meta.index_together):
0.70 /testbed/django/db/models/base.py(1548):             errors = []
0.70 /testbed/django/db/models/base.py(1549):             for fields in cls._meta.index_together:
0.70 /testbed/django/db/models/base.py(1551):             return errors
0.70 /testbed/django/db/models/base.py(1271):                 *cls._check_unique_together(),
0.70 /testbed/django/db/models/base.py(1556):         if not isinstance(cls._meta.unique_together, (tuple, list)):
0.70 /testbed/django/db/models/base.py(1565):         elif any(not isinstance(fields, (tuple, list)) for fields in cls._meta.unique_together):
0.70 /testbed/django/db/models/base.py(1565):         elif any(not isinstance(fields, (tuple, list)) for fields in cls._meta.unique_together):
0.70 /testbed/django/db/models/base.py(1565):         elif any(not isinstance(fields, (tuple, list)) for fields in cls._meta.unique_together):
0.70 /testbed/django/db/models/base.py(1575):             errors = []
0.70 /testbed/django/db/models/base.py(1576):             for fields in cls._meta.unique_together:
0.70 /testbed/django/db/models/base.py(1577):                 errors.extend(cls._check_local_fields(fields, "unique_together"))
0.70 /testbed/django/db/models/base.py(1611):         from django.db import models
0.70 /testbed/django/db/models/base.py(1615):         forward_fields_map = {}
0.70 /testbed/django/db/models/base.py(1616):         for field in cls._meta._get_fields(reverse=False):
0.70 /testbed/django/db/models/base.py(1617):             forward_fields_map[field.name] = field
0.70 /testbed/django/db/models/base.py(1618):             if hasattr(field, 'attname'):
0.70 /testbed/django/db/models/base.py(1619):                 forward_fields_map[field.attname] = field
0.70 /testbed/django/db/models/base.py(1616):         for field in cls._meta._get_fields(reverse=False):
0.70 /testbed/django/db/models/base.py(1617):             forward_fields_map[field.name] = field
0.70 /testbed/django/db/models/base.py(1618):             if hasattr(field, 'attname'):
0.70 /testbed/django/db/models/base.py(1619):                 forward_fields_map[field.attname] = field
0.70 /testbed/django/db/models/base.py(1616):         for field in cls._meta._get_fields(reverse=False):
0.70 /testbed/django/db/models/base.py(1617):             forward_fields_map[field.name] = field
0.70 /testbed/django/db/models/base.py(1618):             if hasattr(field, 'attname'):
0.70 /testbed/django/db/models/base.py(1619):                 forward_fields_map[field.attname] = field
0.70 /testbed/django/db/models/base.py(1616):         for field in cls._meta._get_fields(reverse=False):
0.70 /testbed/django/db/models/base.py(1617):             forward_fields_map[field.name] = field
0.70 /testbed/django/db/models/base.py(1618):             if hasattr(field, 'attname'):
0.70 /testbed/django/db/models/base.py(1619):                 forward_fields_map[field.attname] = field
0.70 /testbed/django/db/models/base.py(1616):         for field in cls._meta._get_fields(reverse=False):
0.70 /testbed/django/db/models/base.py(1621):         errors = []
0.70 /testbed/django/db/models/base.py(1622):         for field_name in fields:
0.70 /testbed/django/db/models/base.py(1623):             try:
0.70 /testbed/django/db/models/base.py(1624):                 field = forward_fields_map[field_name]
0.70 /testbed/django/db/models/base.py(1636):                 if isinstance(field.remote_field, models.ManyToManyRel):
0.70 /testbed/django/db/models/base.py(1647):                 elif field not in cls._meta.local_fields:
0.70 /testbed/django/db/models/base.py(1622):         for field_name in fields:
0.70 /testbed/django/db/models/base.py(1623):             try:
0.70 /testbed/django/db/models/base.py(1624):                 field = forward_fields_map[field_name]
0.70 /testbed/django/db/models/base.py(1636):                 if isinstance(field.remote_field, models.ManyToManyRel):
0.70 /testbed/django/db/models/base.py(1647):                 elif field not in cls._meta.local_fields:
0.70 /testbed/django/db/models/base.py(1622):         for field_name in fields:
0.70 /testbed/django/db/models/base.py(1657):         return errors
0.70 /testbed/django/db/models/base.py(1576):             for fields in cls._meta.unique_together:
0.70 /testbed/django/db/models/base.py(1578):             return errors
0.70 /testbed/django/db/models/base.py(1272):                 *cls._check_indexes(),
0.70 /testbed/django/db/models/base.py(1583):         errors = []
0.70 /testbed/django/db/models/base.py(1584):         for index in cls._meta.indexes:
0.70 /testbed/django/db/models/base.py(1605):         fields = [field for index in cls._meta.indexes for field, _ in index.fields_orders]
0.70 /testbed/django/db/models/base.py(1605):         fields = [field for index in cls._meta.indexes for field, _ in index.fields_orders]
0.70 /testbed/django/db/models/base.py(1606):         errors.extend(cls._check_local_fields(fields, 'indexes'))
0.70 /testbed/django/db/models/base.py(1611):         from django.db import models
0.70 /testbed/django/db/models/base.py(1615):         forward_fields_map = {}
0.70 /testbed/django/db/models/base.py(1616):         for field in cls._meta._get_fields(reverse=False):
0.70 /testbed/django/db/models/base.py(1617):             forward_fields_map[field.name] = field
0.70 /testbed/django/db/models/base.py(1618):             if hasattr(field, 'attname'):
0.70 /testbed/django/db/models/base.py(1619):                 forward_fields_map[field.attname] = field
0.70 /testbed/django/db/models/base.py(1616):         for field in cls._meta._get_fields(reverse=False):
0.70 /testbed/django/db/models/base.py(1617):             forward_fields_map[field.name] = field
0.70 /testbed/django/db/models/base.py(1618):             if hasattr(field, 'attname'):
0.70 /testbed/django/db/models/base.py(1619):                 forward_fields_map[field.attname] = field
0.70 /testbed/django/db/models/base.py(1616):         for field in cls._meta._get_fields(reverse=False):
0.70 /testbed/django/db/models/base.py(1617):             forward_fields_map[field.name] = field
0.70 /testbed/django/db/models/base.py(1618):             if hasattr(field, 'attname'):
0.70 /testbed/django/db/models/base.py(1619):                 forward_fields_map[field.attname] = field
0.70 /testbed/django/db/models/base.py(1616):         for field in cls._meta._get_fields(reverse=False):
0.70 /testbed/django/db/models/base.py(1617):             forward_fields_map[field.name] = field
0.70 /testbed/django/db/models/base.py(1618):             if hasattr(field, 'attname'):
0.70 /testbed/django/db/models/base.py(1619):                 forward_fields_map[field.attname] = field
0.70 /testbed/django/db/models/base.py(1616):         for field in cls._meta._get_fields(reverse=False):
0.70 /testbed/django/db/models/base.py(1621):         errors = []
0.70 /testbed/django/db/models/base.py(1622):         for field_name in fields:
0.70 /testbed/django/db/models/base.py(1657):         return errors
0.70 /testbed/django/db/models/base.py(1607):         return errors
0.70 /testbed/django/db/models/base.py(1273):                 *cls._check_ordering(),
0.70 /testbed/django/db/models/base.py(1665):         if cls._meta._ordering_clash:
0.70 /testbed/django/db/models/base.py(1674):         if cls._meta.order_with_respect_to or not cls._meta.ordering:
0.70 /testbed/django/db/models/base.py(1677):         if not isinstance(cls._meta.ordering, (list, tuple)):
0.70 /testbed/django/db/models/base.py(1686):         errors = []
0.70 /testbed/django/db/models/base.py(1687):         fields = cls._meta.ordering
0.70 /testbed/django/db/models/base.py(1690):         fields = (f for f in fields if isinstance(f, str) and f != '?')
0.70 /testbed/django/db/models/base.py(1693):         fields = ((f[1:] if f.startswith('-') else f) for f in fields)
0.70 /testbed/django/db/models/base.py(1696):         _fields = []
0.70 /testbed/django/db/models/base.py(1697):         related_fields = []
0.70 /testbed/django/db/models/base.py(1698):         for f in fields:
0.70 /testbed/django/db/models/base.py(1693):         fields = ((f[1:] if f.startswith('-') else f) for f in fields)
0.70 /testbed/django/db/models/base.py(1690):         fields = (f for f in fields if isinstance(f, str) and f != '?')
0.70 /testbed/django/db/models/base.py(1699):             if LOOKUP_SEP in f:
0.70 /testbed/django/db/models/base.py(1700):                 related_fields.append(f)
0.70 /testbed/django/db/models/base.py(1698):         for f in fields:
0.70 /testbed/django/db/models/base.py(1693):         fields = ((f[1:] if f.startswith('-') else f) for f in fields)
0.70 /testbed/django/db/models/base.py(1690):         fields = (f for f in fields if isinstance(f, str) and f != '?')
0.70 /testbed/django/db/models/base.py(1699):             if LOOKUP_SEP in f:
0.70 /testbed/django/db/models/base.py(1700):                 related_fields.append(f)
0.70 /testbed/django/db/models/base.py(1698):         for f in fields:
0.70 /testbed/django/db/models/base.py(1693):         fields = ((f[1:] if f.startswith('-') else f) for f in fields)
0.70 /testbed/django/db/models/base.py(1690):         fields = (f for f in fields if isinstance(f, str) and f != '?')
0.70 /testbed/django/db/models/base.py(1699):             if LOOKUP_SEP in f:
0.70 /testbed/django/db/models/base.py(1702):                 _fields.append(f)
0.70 /testbed/django/db/models/base.py(1698):         for f in fields:
0.70 /testbed/django/db/models/base.py(1693):         fields = ((f[1:] if f.startswith('-') else f) for f in fields)
0.70 /testbed/django/db/models/base.py(1690):         fields = (f for f in fields if isinstance(f, str) and f != '?')
0.70 /testbed/django/db/models/base.py(1703):         fields = _fields
0.70 /testbed/django/db/models/base.py(1706):         for field in related_fields:
0.70 /testbed/django/db/models/base.py(1707):             _cls = cls
0.70 /testbed/django/db/models/base.py(1708):             fld = None
0.70 /testbed/django/db/models/base.py(1709):             for part in field.split(LOOKUP_SEP):
0.70 /testbed/django/db/models/base.py(1710):                 try:
0.70 /testbed/django/db/models/base.py(1712):                     if part == 'pk':
0.70 /testbed/django/db/models/base.py(1715):                         fld = _cls._meta.get_field(part)
0.70 /testbed/django/db/models/base.py(1716):                     if fld.is_relation:
0.70 /testbed/django/db/models/base.py(1717):                         _cls = fld.get_path_info()[-1].to_opts.model
0.70 /testbed/django/db/models/base.py(1709):             for part in field.split(LOOKUP_SEP):
0.70 /testbed/django/db/models/base.py(1710):                 try:
0.70 /testbed/django/db/models/base.py(1712):                     if part == 'pk':
0.70 /testbed/django/db/models/base.py(1715):                         fld = _cls._meta.get_field(part)
0.70 /testbed/django/db/models/base.py(1716):                     if fld.is_relation:
0.70 /testbed/django/db/models/base.py(1719):                         _cls = None
0.70 /testbed/django/db/models/base.py(1709):             for part in field.split(LOOKUP_SEP):
0.70 /testbed/django/db/models/base.py(1706):         for field in related_fields:
0.70 /testbed/django/db/models/base.py(1707):             _cls = cls
0.70 /testbed/django/db/models/base.py(1708):             fld = None
0.70 /testbed/django/db/models/base.py(1709):             for part in field.split(LOOKUP_SEP):
0.70 /testbed/django/db/models/base.py(1710):                 try:
0.70 /testbed/django/db/models/base.py(1712):                     if part == 'pk':
0.70 /testbed/django/db/models/base.py(1715):                         fld = _cls._meta.get_field(part)
0.70 /testbed/django/db/models/base.py(1716):                     if fld.is_relation:
0.70 /testbed/django/db/models/base.py(1717):                         _cls = fld.get_path_info()[-1].to_opts.model
0.70 /testbed/django/db/models/base.py(1709):             for part in field.split(LOOKUP_SEP):
0.70 /testbed/django/db/models/base.py(1710):                 try:
0.70 /testbed/django/db/models/base.py(1712):                     if part == 'pk':
0.70 /testbed/django/db/models/base.py(1715):                         fld = _cls._meta.get_field(part)
0.70 /testbed/django/db/models/base.py(1716):                     if fld.is_relation:
0.70 /testbed/django/db/models/base.py(1719):                         _cls = None
0.70 /testbed/django/db/models/base.py(1709):             for part in field.split(LOOKUP_SEP):
0.70 /testbed/django/db/models/base.py(1706):         for field in related_fields:
0.70 /testbed/django/db/models/base.py(1733):         fields = {f for f in fields if f != 'pk'}
0.70 /testbed/django/db/models/base.py(1733):         fields = {f for f in fields if f != 'pk'}
0.70 /testbed/django/db/models/base.py(1733):         fields = {f for f in fields if f != 'pk'}
0.70 /testbed/django/db/models/base.py(1736):         invalid_fields = []
0.70 /testbed/django/db/models/base.py(1740):         opts = cls._meta
0.70 /testbed/django/db/models/base.py(1741):         valid_fields = set(chain.from_iterable(
0.70 /testbed/django/db/models/base.py(1742):             (f.name, f.attname) if not (f.auto_created and not f.concrete) else (f.field.related_query_name(),)
0.70 /testbed/django/db/models/base.py(1743):             for f in chain(opts.fields, opts.related_objects)
0.70 /testbed/django/db/models/base.py(1742):             (f.name, f.attname) if not (f.auto_created and not f.concrete) else (f.field.related_query_name(),)
0.70 /testbed/django/db/models/base.py(1743):             for f in chain(opts.fields, opts.related_objects)
0.70 /testbed/django/db/models/base.py(1742):             (f.name, f.attname) if not (f.auto_created and not f.concrete) else (f.field.related_query_name(),)
0.70 /testbed/django/db/models/base.py(1743):             for f in chain(opts.fields, opts.related_objects)
0.70 /testbed/django/db/models/base.py(1742):             (f.name, f.attname) if not (f.auto_created and not f.concrete) else (f.field.related_query_name(),)
0.70 /testbed/django/db/models/base.py(1743):             for f in chain(opts.fields, opts.related_objects)
0.70 /testbed/django/db/models/base.py(1742):             (f.name, f.attname) if not (f.auto_created and not f.concrete) else (f.field.related_query_name(),)
0.70 /testbed/django/db/models/base.py(1743):             for f in chain(opts.fields, opts.related_objects)
0.70 /testbed/django/db/models/base.py(1742):             (f.name, f.attname) if not (f.auto_created and not f.concrete) else (f.field.related_query_name(),)
0.70 /testbed/django/db/models/base.py(1743):             for f in chain(opts.fields, opts.related_objects)
0.70 /testbed/django/db/models/base.py(1742):             (f.name, f.attname) if not (f.auto_created and not f.concrete) else (f.field.related_query_name(),)
0.70 /testbed/django/db/models/base.py(1743):             for f in chain(opts.fields, opts.related_objects)
0.70 /testbed/django/db/models/base.py(1742):             (f.name, f.attname) if not (f.auto_created and not f.concrete) else (f.field.related_query_name(),)
0.70 /testbed/django/db/models/base.py(1746):         invalid_fields.extend(fields - valid_fields)
0.70 /testbed/django/db/models/base.py(1748):         for invalid_field in invalid_fields:
0.70 /testbed/django/db/models/base.py(1757):         return errors
0.70 /testbed/django/db/models/base.py(1274):                 *cls._check_constraints(),
0.70 /testbed/django/db/models/base.py(1834):         errors = []
0.70 /testbed/django/db/models/base.py(1835):         for db in settings.DATABASES:
0.70 /testbed/django/db/models/base.py(1836):             if not router.allow_migrate_model(db, cls):
0.70 /testbed/django/db/models/base.py(1838):             connection = connections[db]
0.70 /testbed/django/db/models/base.py(1840):                 connection.features.supports_table_check_constraints or
0.70 /testbed/django/db/models/base.py(1835):         for db in settings.DATABASES:
0.70 /testbed/django/db/models/base.py(1836):             if not router.allow_migrate_model(db, cls):
0.70 /testbed/django/db/models/base.py(1838):             connection = connections[db]
0.70 /testbed/django/db/models/base.py(1840):                 connection.features.supports_table_check_constraints or
0.70 /testbed/django/db/models/base.py(1835):         for db in settings.DATABASES:
0.70 /testbed/django/db/models/base.py(1856):         return errors
0.70 /testbed/django/db/models/base.py(1277):         return errors
0.70 /testbed/django/db/models/base.py(1250):         errors = [*cls._check_swappable(), *cls._check_model(), *cls._check_managers(**kwargs)]
0.70 /testbed/django/db/models/base.py(1282):         errors = []
0.70 /testbed/django/db/models/base.py(1283):         if cls._meta.swapped:
0.70 /testbed/django/db/models/base.py(1304):         return errors
0.70 /testbed/django/db/models/base.py(1308):         errors = []
0.70 /testbed/django/db/models/base.py(1309):         if cls._meta.proxy:
0.70 /testbed/django/db/models/base.py(1317):         return errors
0.70 /testbed/django/db/models/base.py(1322):         errors = []
0.70 /testbed/django/db/models/base.py(1323):         for manager in cls._meta.managers:
0.70 /testbed/django/db/models/base.py(1324):             errors.extend(manager.check(**kwargs))
0.70 /testbed/django/db/models/base.py(1323):         for manager in cls._meta.managers:
0.70 /testbed/django/db/models/base.py(1325):         return errors
0.70 /testbed/django/db/models/base.py(1251):         if not cls._meta.swapped:
0.70 /testbed/django/db/models/base.py(1252):             errors += [
0.70 /testbed/django/db/models/base.py(1253):                 *cls._check_fields(**kwargs),
0.70 /testbed/django/db/models/base.py(1330):         errors = []
0.70 /testbed/django/db/models/base.py(1331):         for field in cls._meta.local_fields:
0.70 /testbed/django/db/models/base.py(1332):             errors.extend(field.check(**kwargs))
0.70 /testbed/django/db/models/base.py(1331):         for field in cls._meta.local_fields:
0.70 /testbed/django/db/models/base.py(1332):             errors.extend(field.check(**kwargs))
0.70 /testbed/django/db/models/base.py(1331):         for field in cls._meta.local_fields:
0.70 /testbed/django/db/models/base.py(1333):         for field in cls._meta.local_many_to_many:
0.70 /testbed/django/db/models/base.py(1334):             errors.extend(field.check(from_model=cls, **kwargs))
0.70 /testbed/django/db/models/base.py(1333):         for field in cls._meta.local_many_to_many:
0.70 /testbed/django/db/models/base.py(1335):         return errors
0.70 /testbed/django/db/models/base.py(1254):                 *cls._check_m2m_through_same_relationship(),
0.70 /testbed/django/db/models/base.py(1342):         errors = []
0.70 /testbed/django/db/models/base.py(1343):         seen_intermediary_signatures = []
0.70 /testbed/django/db/models/base.py(1345):         fields = cls._meta.local_many_to_many
0.70 /testbed/django/db/models/base.py(1348):         fields = (f for f in fields if isinstance(f.remote_field.model, ModelBase))
0.70 /testbed/django/db/models/base.py(1351):         fields = (f for f in fields if isinstance(f.remote_field.through, ModelBase))
0.70 /testbed/django/db/models/base.py(1353):         for f in fields:
0.70 /testbed/django/db/models/base.py(1351):         fields = (f for f in fields if isinstance(f.remote_field.through, ModelBase))
0.70 /testbed/django/db/models/base.py(1348):         fields = (f for f in fields if isinstance(f.remote_field.model, ModelBase))
0.70 /testbed/django/db/models/base.py(1354):             signature = (f.remote_field.model, cls, f.remote_field.through, f.remote_field.through_fields)
0.70 /testbed/django/db/models/base.py(1355):             if signature in seen_intermediary_signatures:
0.70 /testbed/django/db/models/base.py(1366):                 seen_intermediary_signatures.append(signature)
0.70 /testbed/django/db/models/base.py(1353):         for f in fields:
0.70 /testbed/django/db/models/base.py(1351):         fields = (f for f in fields if isinstance(f.remote_field.through, ModelBase))
0.70 /testbed/django/db/models/base.py(1348):         fields = (f for f in fields if isinstance(f.remote_field.model, ModelBase))
0.70 /testbed/django/db/models/base.py(1367):         return errors
0.70 /testbed/django/db/models/base.py(1255):                 *cls._check_long_column_names(),
0.70 /testbed/django/db/models/base.py(1765):         errors = []
0.70 /testbed/django/db/models/base.py(1766):         allowed_len = None
0.70 /testbed/django/db/models/base.py(1767):         db_alias = None
0.70 /testbed/django/db/models/base.py(1770):         for db in settings.DATABASES:
0.70 /testbed/django/db/models/base.py(1772):             if not router.allow_migrate_model(db, cls):
0.70 /testbed/django/db/models/base.py(1774):             connection = connections[db]
0.70 /testbed/django/db/models/base.py(1775):             max_name_length = connection.ops.max_name_length()
0.70 /testbed/django/db/models/base.py(1776):             if max_name_length is None or connection.features.truncates_names:
0.70 /testbed/django/db/models/base.py(1770):         for db in settings.DATABASES:
0.70 /testbed/django/db/models/base.py(1772):             if not router.allow_migrate_model(db, cls):
0.70 /testbed/django/db/models/base.py(1774):             connection = connections[db]
0.70 /testbed/django/db/models/base.py(1775):             max_name_length = connection.ops.max_name_length()
0.70 /testbed/django/db/models/base.py(1776):             if max_name_length is None or connection.features.truncates_names:
0.70 /testbed/django/db/models/base.py(1770):         for db in settings.DATABASES:
0.70 /testbed/django/db/models/base.py(1786):         if allowed_len is None:
0.70 /testbed/django/db/models/base.py(1787):             return errors
0.70 /testbed/django/db/models/base.py(1258):                 *cls._check_id_field(),
0.70 /testbed/django/db/models/base.py(1372):         fields = [f for f in cls._meta.local_fields if f.name == 'id' and f != cls._meta.pk]
0.70 /testbed/django/db/models/base.py(1372):         fields = [f for f in cls._meta.local_fields if f.name == 'id' and f != cls._meta.pk]
0.70 /testbed/django/db/models/base.py(1372):         fields = [f for f in cls._meta.local_fields if f.name == 'id' and f != cls._meta.pk]
0.70 /testbed/django/db/models/base.py(1372):         fields = [f for f in cls._meta.local_fields if f.name == 'id' and f != cls._meta.pk]
0.70 /testbed/django/db/models/base.py(1374):         if fields and not fields[0].primary_key and cls._meta.pk.name == 'id':
0.70 /testbed/django/db/models/base.py(1384):             return []
0.70 /testbed/django/db/models/base.py(1259):                 *cls._check_field_name_clashes(),
0.70 /testbed/django/db/models/base.py(1389):         errors = []
0.70 /testbed/django/db/models/base.py(1390):         used_fields = {}  # name or attname -> field
0.70 /testbed/django/db/models/base.py(1393):         for parent in cls._meta.get_parent_list():
0.70 /testbed/django/db/models/base.py(1415):         for parent in cls._meta.get_parent_list():
0.70 /testbed/django/db/models/base.py(1420):         for f in cls._meta.local_fields:
0.70 /testbed/django/db/models/base.py(1421):             clash = used_fields.get(f.name) or used_fields.get(f.attname) or None
0.70 /testbed/django/db/models/base.py(1426):             id_conflict = f.name == "id" and clash and clash.name == "id" and clash.model == cls
0.70 /testbed/django/db/models/base.py(1427):             if clash and not id_conflict:
0.70 /testbed/django/db/models/base.py(1438):             used_fields[f.name] = f
0.70 /testbed/django/db/models/base.py(1439):             used_fields[f.attname] = f
0.70 /testbed/django/db/models/base.py(1420):         for f in cls._meta.local_fields:
0.70 /testbed/django/db/models/base.py(1421):             clash = used_fields.get(f.name) or used_fields.get(f.attname) or None
0.70 /testbed/django/db/models/base.py(1426):             id_conflict = f.name == "id" and clash and clash.name == "id" and clash.model == cls
0.70 /testbed/django/db/models/base.py(1427):             if clash and not id_conflict:
0.70 /testbed/django/db/models/base.py(1438):             used_fields[f.name] = f
0.70 /testbed/django/db/models/base.py(1439):             used_fields[f.attname] = f
0.70 /testbed/django/db/models/base.py(1420):         for f in cls._meta.local_fields:
0.70 /testbed/django/db/models/base.py(1441):         return errors
0.70 /testbed/django/db/models/base.py(1260):                 *cls._check_model_name_db_lookup_clashes(),
0.70 /testbed/django/db/models/base.py(1470):         errors = []
0.70 /testbed/django/db/models/base.py(1471):         model_name = cls.__name__
0.70 /testbed/django/db/models/base.py(1472):         if model_name.startswith('_') or model_name.endswith('_'):
0.70 /testbed/django/db/models/base.py(1481):         elif LOOKUP_SEP in model_name:
0.70 /testbed/django/db/models/base.py(1490):         return errors
0.70 /testbed/django/db/models/base.py(1261):                 *cls._check_property_name_related_field_accessor_clashes(),
0.70 /testbed/django/db/models/base.py(1494):         errors = []
0.70 /testbed/django/db/models/base.py(1495):         property_names = cls._meta._property_names
0.70 /testbed/django/db/models/base.py(1497):             f.get_attname() for f in cls._meta._get_fields(reverse=False)
0.70 /testbed/django/db/models/base.py(1500):         for accessor in related_field_accessors:
0.70 /testbed/django/db/models/base.py(1497):             f.get_attname() for f in cls._meta._get_fields(reverse=False)
0.70 /testbed/django/db/models/base.py(1498):             if f.is_relation and f.related_model is not None
0.70 /testbed/django/db/models/base.py(1497):             f.get_attname() for f in cls._meta._get_fields(reverse=False)
0.70 /testbed/django/db/models/base.py(1498):             if f.is_relation and f.related_model is not None
0.70 /testbed/django/db/models/base.py(1497):             f.get_attname() for f in cls._meta._get_fields(reverse=False)
0.70 /testbed/django/db/models/base.py(1498):             if f.is_relation and f.related_model is not None
0.70 /testbed/django/db/models/base.py(1501):             if accessor in property_names:
0.70 /testbed/django/db/models/base.py(1500):         for accessor in related_field_accessors:
0.70 /testbed/django/db/models/base.py(1497):             f.get_attname() for f in cls._meta._get_fields(reverse=False)
0.70 /testbed/django/db/models/base.py(1510):         return errors
0.70 /testbed/django/db/models/base.py(1262):                 *cls._check_single_primary_key(),
0.70 /testbed/django/db/models/base.py(1514):         errors = []
0.70 /testbed/django/db/models/base.py(1515):         if sum(1 for f in cls._meta.local_fields if f.primary_key) > 1:
0.70 /testbed/django/db/models/base.py(1515):         if sum(1 for f in cls._meta.local_fields if f.primary_key) > 1:
0.70 /testbed/django/db/models/base.py(1515):         if sum(1 for f in cls._meta.local_fields if f.primary_key) > 1:
0.70 /testbed/django/db/models/base.py(1515):         if sum(1 for f in cls._meta.local_fields if f.primary_key) > 1:
0.70 /testbed/django/db/models/base.py(1524):         return errors
0.70 /testbed/django/db/models/base.py(1264):             errors.extend(clash_errors)
0.70 /testbed/django/db/models/base.py(1267):             if not clash_errors:
0.70 /testbed/django/db/models/base.py(1268):                 errors.extend(cls._check_column_name_clashes())
0.70 /testbed/django/db/models/base.py(1446):         used_column_names = []
0.70 /testbed/django/db/models/base.py(1447):         errors = []
0.70 /testbed/django/db/models/base.py(1449):         for f in cls._meta.local_fields:
0.70 /testbed/django/db/models/base.py(1450):             _, column_name = f.get_attname_column()
0.70 /testbed/django/db/models/base.py(1453):             if column_name and column_name in used_column_names:
0.70 /testbed/django/db/models/base.py(1464):                 used_column_names.append(column_name)
0.70 /testbed/django/db/models/base.py(1449):         for f in cls._meta.local_fields:
0.70 /testbed/django/db/models/base.py(1450):             _, column_name = f.get_attname_column()
0.70 /testbed/django/db/models/base.py(1453):             if column_name and column_name in used_column_names:
0.70 /testbed/django/db/models/base.py(1464):                 used_column_names.append(column_name)
0.70 /testbed/django/db/models/base.py(1449):         for f in cls._meta.local_fields:
0.70 /testbed/django/db/models/base.py(1466):         return errors
0.70 /testbed/django/db/models/base.py(1269):             errors += [
0.70 /testbed/django/db/models/base.py(1270):                 *cls._check_index_together(),
0.70 /testbed/django/db/models/base.py(1529):         if not isinstance(cls._meta.index_together, (tuple, list)):
0.70 /testbed/django/db/models/base.py(1538):         elif any(not isinstance(fields, (tuple, list)) for fields in cls._meta.index_together):
0.70 /testbed/django/db/models/base.py(1538):         elif any(not isinstance(fields, (tuple, list)) for fields in cls._meta.index_together):
0.70 /testbed/django/db/models/base.py(1548):             errors = []
0.70 /testbed/django/db/models/base.py(1549):             for fields in cls._meta.index_together:
0.70 /testbed/django/db/models/base.py(1551):             return errors
0.70 /testbed/django/db/models/base.py(1271):                 *cls._check_unique_together(),
0.70 /testbed/django/db/models/base.py(1556):         if not isinstance(cls._meta.unique_together, (tuple, list)):
0.70 /testbed/django/db/models/base.py(1565):         elif any(not isinstance(fields, (tuple, list)) for fields in cls._meta.unique_together):
0.70 /testbed/django/db/models/base.py(1565):         elif any(not isinstance(fields, (tuple, list)) for fields in cls._meta.unique_together):
0.70 /testbed/django/db/models/base.py(1575):             errors = []
0.70 /testbed/django/db/models/base.py(1576):             for fields in cls._meta.unique_together:
0.70 /testbed/django/db/models/base.py(1578):             return errors
0.70 /testbed/django/db/models/base.py(1272):                 *cls._check_indexes(),
0.70 /testbed/django/db/models/base.py(1583):         errors = []
0.70 /testbed/django/db/models/base.py(1584):         for index in cls._meta.indexes:
0.70 /testbed/django/db/models/base.py(1605):         fields = [field for index in cls._meta.indexes for field, _ in index.fields_orders]
0.70 /testbed/django/db/models/base.py(1605):         fields = [field for index in cls._meta.indexes for field, _ in index.fields_orders]
0.70 /testbed/django/db/models/base.py(1606):         errors.extend(cls._check_local_fields(fields, 'indexes'))
0.70 /testbed/django/db/models/base.py(1611):         from django.db import models
0.70 /testbed/django/db/models/base.py(1615):         forward_fields_map = {}
0.70 /testbed/django/db/models/base.py(1616):         for field in cls._meta._get_fields(reverse=False):
0.70 /testbed/django/db/models/base.py(1617):             forward_fields_map[field.name] = field
0.70 /testbed/django/db/models/base.py(1618):             if hasattr(field, 'attname'):
0.70 /testbed/django/db/models/base.py(1619):                 forward_fields_map[field.attname] = field
0.70 /testbed/django/db/models/base.py(1616):         for field in cls._meta._get_fields(reverse=False):
0.70 /testbed/django/db/models/base.py(1617):             forward_fields_map[field.name] = field
0.70 /testbed/django/db/models/base.py(1618):             if hasattr(field, 'attname'):
0.70 /testbed/django/db/models/base.py(1619):                 forward_fields_map[field.attname] = field
0.70 /testbed/django/db/models/base.py(1616):         for field in cls._meta._get_fields(reverse=False):
0.70 /testbed/django/db/models/base.py(1617):             forward_fields_map[field.name] = field
0.70 /testbed/django/db/models/base.py(1618):             if hasattr(field, 'attname'):
0.70 /testbed/django/db/models/base.py(1619):                 forward_fields_map[field.attname] = field
0.70 /testbed/django/db/models/base.py(1616):         for field in cls._meta._get_fields(reverse=False):
0.70 /testbed/django/db/models/base.py(1621):         errors = []
0.70 /testbed/django/db/models/base.py(1622):         for field_name in fields:
0.70 /testbed/django/db/models/base.py(1657):         return errors
0.70 /testbed/django/db/models/base.py(1607):         return errors
0.70 /testbed/django/db/models/base.py(1273):                 *cls._check_ordering(),
0.70 /testbed/django/db/models/base.py(1665):         if cls._meta._ordering_clash:
0.70 /testbed/django/db/models/base.py(1674):         if cls._meta.order_with_respect_to or not cls._meta.ordering:
0.70 /testbed/django/db/models/base.py(1675):             return []
0.70 /testbed/django/db/models/base.py(1274):                 *cls._check_constraints(),
0.70 /testbed/django/db/models/base.py(1834):         errors = []
0.70 /testbed/django/db/models/base.py(1835):         for db in settings.DATABASES:
0.70 /testbed/django/db/models/base.py(1836):             if not router.allow_migrate_model(db, cls):
0.70 /testbed/django/db/models/base.py(1838):             connection = connections[db]
0.70 /testbed/django/db/models/base.py(1840):                 connection.features.supports_table_check_constraints or
0.70 /testbed/django/db/models/base.py(1835):         for db in settings.DATABASES:
0.70 /testbed/django/db/models/base.py(1836):             if not router.allow_migrate_model(db, cls):
0.70 /testbed/django/db/models/base.py(1838):             connection = connections[db]
0.70 /testbed/django/db/models/base.py(1840):                 connection.features.supports_table_check_constraints or
0.70 /testbed/django/db/models/base.py(1835):         for db in settings.DATABASES:
0.70 /testbed/django/db/models/base.py(1856):         return errors
0.70 /testbed/django/db/models/base.py(1277):         return errors
0.70 /testbed/django/db/models/base.py(1250):         errors = [*cls._check_swappable(), *cls._check_model(), *cls._check_managers(**kwargs)]
0.70 /testbed/django/db/models/base.py(1282):         errors = []
0.70 /testbed/django/db/models/base.py(1283):         if cls._meta.swapped:
0.70 /testbed/django/db/models/base.py(1304):         return errors
0.70 /testbed/django/db/models/base.py(1308):         errors = []
0.70 /testbed/django/db/models/base.py(1309):         if cls._meta.proxy:
0.70 /testbed/django/db/models/base.py(1317):         return errors
0.70 /testbed/django/db/models/base.py(1322):         errors = []
0.70 /testbed/django/db/models/base.py(1323):         for manager in cls._meta.managers:
0.70 /testbed/django/db/models/base.py(1324):             errors.extend(manager.check(**kwargs))
0.70 /testbed/django/db/models/base.py(1323):         for manager in cls._meta.managers:
0.70 /testbed/django/db/models/base.py(1325):         return errors
0.70 /testbed/django/db/models/base.py(1251):         if not cls._meta.swapped:
0.70 /testbed/django/db/models/base.py(1252):             errors += [
0.70 /testbed/django/db/models/base.py(1253):                 *cls._check_fields(**kwargs),
0.70 /testbed/django/db/models/base.py(1330):         errors = []
0.70 /testbed/django/db/models/base.py(1331):         for field in cls._meta.local_fields:
0.70 /testbed/django/db/models/base.py(1332):             errors.extend(field.check(**kwargs))
0.70 /testbed/django/db/models/base.py(1331):         for field in cls._meta.local_fields:
0.70 /testbed/django/db/models/base.py(1332):             errors.extend(field.check(**kwargs))
0.70 /testbed/django/db/models/base.py(1331):         for field in cls._meta.local_fields:
0.70 /testbed/django/db/models/base.py(1332):             errors.extend(field.check(**kwargs))
0.70 /testbed/django/db/models/base.py(1331):         for field in cls._meta.local_fields:
0.70 /testbed/django/db/models/base.py(1332):             errors.extend(field.check(**kwargs))
0.70 /testbed/django/db/models/base.py(1331):         for field in cls._meta.local_fields:
0.70 /testbed/django/db/models/base.py(1332):             errors.extend(field.check(**kwargs))
0.70 /testbed/django/db/models/base.py(1331):         for field in cls._meta.local_fields:
0.70 /testbed/django/db/models/base.py(1332):             errors.extend(field.check(**kwargs))
0.70 /testbed/django/db/models/base.py(1331):         for field in cls._meta.local_fields:
0.70 /testbed/django/db/models/base.py(1332):             errors.extend(field.check(**kwargs))
0.70 /testbed/django/db/models/base.py(1331):         for field in cls._meta.local_fields:
0.70 /testbed/django/db/models/base.py(1332):             errors.extend(field.check(**kwargs))
0.70 /testbed/django/db/models/base.py(1331):         for field in cls._meta.local_fields:
0.70 /testbed/django/db/models/base.py(1332):             errors.extend(field.check(**kwargs))
0.70 /testbed/django/db/models/base.py(1331):         for field in cls._meta.local_fields:
0.70 /testbed/django/db/models/base.py(1332):             errors.extend(field.check(**kwargs))
0.70 /testbed/django/db/models/base.py(1331):         for field in cls._meta.local_fields:
0.70 /testbed/django/db/models/base.py(1332):             errors.extend(field.check(**kwargs))
0.70 /testbed/django/db/models/base.py(1331):         for field in cls._meta.local_fields:
0.70 /testbed/django/db/models/base.py(1333):         for field in cls._meta.local_many_to_many:
0.70 /testbed/django/db/models/base.py(1334):             errors.extend(field.check(from_model=cls, **kwargs))
0.70 /testbed/django/db/models/base.py(1333):         for field in cls._meta.local_many_to_many:
0.70 /testbed/django/db/models/base.py(1334):             errors.extend(field.check(from_model=cls, **kwargs))
0.70 /testbed/django/db/models/base.py(1333):         for field in cls._meta.local_many_to_many:
0.70 /testbed/django/db/models/base.py(1335):         return errors
0.70 /testbed/django/db/models/base.py(1254):                 *cls._check_m2m_through_same_relationship(),
0.70 /testbed/django/db/models/base.py(1342):         errors = []
0.70 /testbed/django/db/models/base.py(1343):         seen_intermediary_signatures = []
0.70 /testbed/django/db/models/base.py(1345):         fields = cls._meta.local_many_to_many
0.70 /testbed/django/db/models/base.py(1348):         fields = (f for f in fields if isinstance(f.remote_field.model, ModelBase))
0.70 /testbed/django/db/models/base.py(1351):         fields = (f for f in fields if isinstance(f.remote_field.through, ModelBase))
0.70 /testbed/django/db/models/base.py(1353):         for f in fields:
0.70 /testbed/django/db/models/base.py(1351):         fields = (f for f in fields if isinstance(f.remote_field.through, ModelBase))
0.70 /testbed/django/db/models/base.py(1348):         fields = (f for f in fields if isinstance(f.remote_field.model, ModelBase))
0.70 /testbed/django/db/models/base.py(1354):             signature = (f.remote_field.model, cls, f.remote_field.through, f.remote_field.through_fields)
0.70 /testbed/django/db/models/base.py(1355):             if signature in seen_intermediary_signatures:
0.70 /testbed/django/db/models/base.py(1366):                 seen_intermediary_signatures.append(signature)
0.70 /testbed/django/db/models/base.py(1353):         for f in fields:
0.70 /testbed/django/db/models/base.py(1351):         fields = (f for f in fields if isinstance(f.remote_field.through, ModelBase))
0.70 /testbed/django/db/models/base.py(1348):         fields = (f for f in fields if isinstance(f.remote_field.model, ModelBase))
0.70 /testbed/django/db/models/base.py(1354):             signature = (f.remote_field.model, cls, f.remote_field.through, f.remote_field.through_fields)
0.70 /testbed/django/db/models/base.py(1355):             if signature in seen_intermediary_signatures:
0.70 /testbed/django/db/models/base.py(1366):                 seen_intermediary_signatures.append(signature)
0.70 /testbed/django/db/models/base.py(1353):         for f in fields:
0.70 /testbed/django/db/models/base.py(1351):         fields = (f for f in fields if isinstance(f.remote_field.through, ModelBase))
0.70 /testbed/django/db/models/base.py(1348):         fields = (f for f in fields if isinstance(f.remote_field.model, ModelBase))
0.70 /testbed/django/db/models/base.py(1367):         return errors
0.70 /testbed/django/db/models/base.py(1255):                 *cls._check_long_column_names(),
0.70 /testbed/django/db/models/base.py(1765):         errors = []
0.70 /testbed/django/db/models/base.py(1766):         allowed_len = None
0.70 /testbed/django/db/models/base.py(1767):         db_alias = None
0.70 /testbed/django/db/models/base.py(1770):         for db in settings.DATABASES:
0.70 /testbed/django/db/models/base.py(1772):             if not router.allow_migrate_model(db, cls):
0.70 /testbed/django/db/models/base.py(1774):             connection = connections[db]
0.70 /testbed/django/db/models/base.py(1775):             max_name_length = connection.ops.max_name_length()
0.70 /testbed/django/db/models/base.py(1776):             if max_name_length is None or connection.features.truncates_names:
0.70 /testbed/django/db/models/base.py(1770):         for db in settings.DATABASES:
0.70 /testbed/django/db/models/base.py(1772):             if not router.allow_migrate_model(db, cls):
0.70 /testbed/django/db/models/base.py(1774):             connection = connections[db]
0.70 /testbed/django/db/models/base.py(1775):             max_name_length = connection.ops.max_name_length()
0.70 /testbed/django/db/models/base.py(1776):             if max_name_length is None or connection.features.truncates_names:
0.70 /testbed/django/db/models/base.py(1770):         for db in settings.DATABASES:
0.70 /testbed/django/db/models/base.py(1786):         if allowed_len is None:
0.70 /testbed/django/db/models/base.py(1787):             return errors
0.70 /testbed/django/db/models/base.py(1258):                 *cls._check_id_field(),
0.70 /testbed/django/db/models/base.py(1372):         fields = [f for f in cls._meta.local_fields if f.name == 'id' and f != cls._meta.pk]
0.70 /testbed/django/db/models/base.py(1372):         fields = [f for f in cls._meta.local_fields if f.name == 'id' and f != cls._meta.pk]
0.70 /testbed/django/db/models/base.py(1372):         fields = [f for f in cls._meta.local_fields if f.name == 'id' and f != cls._meta.pk]
0.70 /testbed/django/db/models/base.py(1372):         fields = [f for f in cls._meta.local_fields if f.name == 'id' and f != cls._meta.pk]
0.70 /testbed/django/db/models/base.py(1372):         fields = [f for f in cls._meta.local_fields if f.name == 'id' and f != cls._meta.pk]
0.70 /testbed/django/db/models/base.py(1372):         fields = [f for f in cls._meta.local_fields if f.name == 'id' and f != cls._meta.pk]
0.70 /testbed/django/db/models/base.py(1372):         fields = [f for f in cls._meta.local_fields if f.name == 'id' and f != cls._meta.pk]
0.70 /testbed/django/db/models/base.py(1372):         fields = [f for f in cls._meta.local_fields if f.name == 'id' and f != cls._meta.pk]
0.70 /testbed/django/db/models/base.py(1372):         fields = [f for f in cls._meta.local_fields if f.name == 'id' and f != cls._meta.pk]
0.70 /testbed/django/db/models/base.py(1372):         fields = [f for f in cls._meta.local_fields if f.name == 'id' and f != cls._meta.pk]
0.70 /testbed/django/db/models/base.py(1372):         fields = [f for f in cls._meta.local_fields if f.name == 'id' and f != cls._meta.pk]
0.70 /testbed/django/db/models/base.py(1372):         fields = [f for f in cls._meta.local_fields if f.name == 'id' and f != cls._meta.pk]
0.70 /testbed/django/db/models/base.py(1372):         fields = [f for f in cls._meta.local_fields if f.name == 'id' and f != cls._meta.pk]
0.70 /testbed/django/db/models/base.py(1374):         if fields and not fields[0].primary_key and cls._meta.pk.name == 'id':
0.70 /testbed/django/db/models/base.py(1384):             return []
0.70 /testbed/django/db/models/base.py(1259):                 *cls._check_field_name_clashes(),
0.70 /testbed/django/db/models/base.py(1389):         errors = []
0.70 /testbed/django/db/models/base.py(1390):         used_fields = {}  # name or attname -> field
0.70 /testbed/django/db/models/base.py(1393):         for parent in cls._meta.get_parent_list():
0.70 /testbed/django/db/models/base.py(1415):         for parent in cls._meta.get_parent_list():
0.70 /testbed/django/db/models/base.py(1420):         for f in cls._meta.local_fields:
0.70 /testbed/django/db/models/base.py(1421):             clash = used_fields.get(f.name) or used_fields.get(f.attname) or None
0.70 /testbed/django/db/models/base.py(1426):             id_conflict = f.name == "id" and clash and clash.name == "id" and clash.model == cls
0.70 /testbed/django/db/models/base.py(1427):             if clash and not id_conflict:
0.70 /testbed/django/db/models/base.py(1438):             used_fields[f.name] = f
0.70 /testbed/django/db/models/base.py(1439):             used_fields[f.attname] = f
0.70 /testbed/django/db/models/base.py(1420):         for f in cls._meta.local_fields:
0.70 /testbed/django/db/models/base.py(1421):             clash = used_fields.get(f.name) or used_fields.get(f.attname) or None
0.70 /testbed/django/db/models/base.py(1426):             id_conflict = f.name == "id" and clash and clash.name == "id" and clash.model == cls
0.70 /testbed/django/db/models/base.py(1427):             if clash and not id_conflict:
0.70 /testbed/django/db/models/base.py(1438):             used_fields[f.name] = f
0.70 /testbed/django/db/models/base.py(1439):             used_fields[f.attname] = f
0.70 /testbed/django/db/models/base.py(1420):         for f in cls._meta.local_fields:
0.70 /testbed/django/db/models/base.py(1421):             clash = used_fields.get(f.name) or used_fields.get(f.attname) or None
0.70 /testbed/django/db/models/base.py(1426):             id_conflict = f.name == "id" and clash and clash.name == "id" and clash.model == cls
0.70 /testbed/django/db/models/base.py(1427):             if clash and not id_conflict:
0.70 /testbed/django/db/models/base.py(1438):             used_fields[f.name] = f
0.70 /testbed/django/db/models/base.py(1439):             used_fields[f.attname] = f
0.70 /testbed/django/db/models/base.py(1420):         for f in cls._meta.local_fields:
0.70 /testbed/django/db/models/base.py(1421):             clash = used_fields.get(f.name) or used_fields.get(f.attname) or None
0.70 /testbed/django/db/models/base.py(1426):             id_conflict = f.name == "id" and clash and clash.name == "id" and clash.model == cls
0.70 /testbed/django/db/models/base.py(1427):             if clash and not id_conflict:
0.70 /testbed/django/db/models/base.py(1438):             used_fields[f.name] = f
0.70 /testbed/django/db/models/base.py(1439):             used_fields[f.attname] = f
0.70 /testbed/django/db/models/base.py(1420):         for f in cls._meta.local_fields:
0.70 /testbed/django/db/models/base.py(1421):             clash = used_fields.get(f.name) or used_fields.get(f.attname) or None
0.70 /testbed/django/db/models/base.py(1426):             id_conflict = f.name == "id" and clash and clash.name == "id" and clash.model == cls
0.70 /testbed/django/db/models/base.py(1427):             if clash and not id_conflict:
0.70 /testbed/django/db/models/base.py(1438):             used_fields[f.name] = f
0.70 /testbed/django/db/models/base.py(1439):             used_fields[f.attname] = f
0.70 /testbed/django/db/models/base.py(1420):         for f in cls._meta.local_fields:
0.70 /testbed/django/db/models/base.py(1421):             clash = used_fields.get(f.name) or used_fields.get(f.attname) or None
0.70 /testbed/django/db/models/base.py(1426):             id_conflict = f.name == "id" and clash and clash.name == "id" and clash.model == cls
0.70 /testbed/django/db/models/base.py(1427):             if clash and not id_conflict:
0.70 /testbed/django/db/models/base.py(1438):             used_fields[f.name] = f
0.70 /testbed/django/db/models/base.py(1439):             used_fields[f.attname] = f
0.70 /testbed/django/db/models/base.py(1420):         for f in cls._meta.local_fields:
0.70 /testbed/django/db/models/base.py(1421):             clash = used_fields.get(f.name) or used_fields.get(f.attname) or None
0.70 /testbed/django/db/models/base.py(1426):             id_conflict = f.name == "id" and clash and clash.name == "id" and clash.model == cls
0.70 /testbed/django/db/models/base.py(1427):             if clash and not id_conflict:
0.70 /testbed/django/db/models/base.py(1438):             used_fields[f.name] = f
0.70 /testbed/django/db/models/base.py(1439):             used_fields[f.attname] = f
0.70 /testbed/django/db/models/base.py(1420):         for f in cls._meta.local_fields:
0.70 /testbed/django/db/models/base.py(1421):             clash = used_fields.get(f.name) or used_fields.get(f.attname) or None
0.70 /testbed/django/db/models/base.py(1426):             id_conflict = f.name == "id" and clash and clash.name == "id" and clash.model == cls
0.70 /testbed/django/db/models/base.py(1427):             if clash and not id_conflict:
0.70 /testbed/django/db/models/base.py(1438):             used_fields[f.name] = f
0.71 /testbed/django/db/models/base.py(1439):             used_fields[f.attname] = f
0.71 /testbed/django/db/models/base.py(1420):         for f in cls._meta.local_fields:
0.71 /testbed/django/db/models/base.py(1421):             clash = used_fields.get(f.name) or used_fields.get(f.attname) or None
0.71 /testbed/django/db/models/base.py(1426):             id_conflict = f.name == "id" and clash and clash.name == "id" and clash.model == cls
0.71 /testbed/django/db/models/base.py(1427):             if clash and not id_conflict:
0.71 /testbed/django/db/models/base.py(1438):             used_fields[f.name] = f
0.71 /testbed/django/db/models/base.py(1439):             used_fields[f.attname] = f
0.71 /testbed/django/db/models/base.py(1420):         for f in cls._meta.local_fields:
0.71 /testbed/django/db/models/base.py(1421):             clash = used_fields.get(f.name) or used_fields.get(f.attname) or None
0.71 /testbed/django/db/models/base.py(1426):             id_conflict = f.name == "id" and clash and clash.name == "id" and clash.model == cls
0.71 /testbed/django/db/models/base.py(1427):             if clash and not id_conflict:
0.71 /testbed/django/db/models/base.py(1438):             used_fields[f.name] = f
0.71 /testbed/django/db/models/base.py(1439):             used_fields[f.attname] = f
0.71 /testbed/django/db/models/base.py(1420):         for f in cls._meta.local_fields:
0.71 /testbed/django/db/models/base.py(1421):             clash = used_fields.get(f.name) or used_fields.get(f.attname) or None
0.71 /testbed/django/db/models/base.py(1426):             id_conflict = f.name == "id" and clash and clash.name == "id" and clash.model == cls
0.71 /testbed/django/db/models/base.py(1427):             if clash and not id_conflict:
0.71 /testbed/django/db/models/base.py(1438):             used_fields[f.name] = f
0.71 /testbed/django/db/models/base.py(1439):             used_fields[f.attname] = f
0.71 /testbed/django/db/models/base.py(1420):         for f in cls._meta.local_fields:
0.71 /testbed/django/db/models/base.py(1441):         return errors
0.71 /testbed/django/db/models/base.py(1260):                 *cls._check_model_name_db_lookup_clashes(),
0.71 /testbed/django/db/models/base.py(1470):         errors = []
0.71 /testbed/django/db/models/base.py(1471):         model_name = cls.__name__
0.71 /testbed/django/db/models/base.py(1472):         if model_name.startswith('_') or model_name.endswith('_'):
0.71 /testbed/django/db/models/base.py(1481):         elif LOOKUP_SEP in model_name:
0.71 /testbed/django/db/models/base.py(1490):         return errors
0.71 /testbed/django/db/models/base.py(1261):                 *cls._check_property_name_related_field_accessor_clashes(),
0.71 /testbed/django/db/models/base.py(1494):         errors = []
0.71 /testbed/django/db/models/base.py(1495):         property_names = cls._meta._property_names
0.71 /testbed/django/db/models/base.py(1497):             f.get_attname() for f in cls._meta._get_fields(reverse=False)
0.71 /testbed/django/db/models/base.py(1500):         for accessor in related_field_accessors:
0.71 /testbed/django/db/models/base.py(1497):             f.get_attname() for f in cls._meta._get_fields(reverse=False)
0.71 /testbed/django/db/models/base.py(1498):             if f.is_relation and f.related_model is not None
0.71 /testbed/django/db/models/base.py(1497):             f.get_attname() for f in cls._meta._get_fields(reverse=False)
0.71 /testbed/django/db/models/base.py(1498):             if f.is_relation and f.related_model is not None
0.71 /testbed/django/db/models/base.py(1497):             f.get_attname() for f in cls._meta._get_fields(reverse=False)
0.71 /testbed/django/db/models/base.py(1498):             if f.is_relation and f.related_model is not None
0.71 /testbed/django/db/models/base.py(1497):             f.get_attname() for f in cls._meta._get_fields(reverse=False)
0.71 /testbed/django/db/models/base.py(1498):             if f.is_relation and f.related_model is not None
0.71 /testbed/django/db/models/base.py(1497):             f.get_attname() for f in cls._meta._get_fields(reverse=False)
0.71 /testbed/django/db/models/base.py(1498):             if f.is_relation and f.related_model is not None
0.71 /testbed/django/db/models/base.py(1497):             f.get_attname() for f in cls._meta._get_fields(reverse=False)
0.71 /testbed/django/db/models/base.py(1498):             if f.is_relation and f.related_model is not None
0.71 /testbed/django/db/models/base.py(1497):             f.get_attname() for f in cls._meta._get_fields(reverse=False)
0.71 /testbed/django/db/models/base.py(1498):             if f.is_relation and f.related_model is not None
0.71 /testbed/django/db/models/base.py(1497):             f.get_attname() for f in cls._meta._get_fields(reverse=False)
0.71 /testbed/django/db/models/base.py(1498):             if f.is_relation and f.related_model is not None
0.71 /testbed/django/db/models/base.py(1497):             f.get_attname() for f in cls._meta._get_fields(reverse=False)
0.71 /testbed/django/db/models/base.py(1498):             if f.is_relation and f.related_model is not None
0.71 /testbed/django/db/models/base.py(1497):             f.get_attname() for f in cls._meta._get_fields(reverse=False)
0.71 /testbed/django/db/models/base.py(1498):             if f.is_relation and f.related_model is not None
0.71 /testbed/django/db/models/base.py(1497):             f.get_attname() for f in cls._meta._get_fields(reverse=False)
0.71 /testbed/django/db/models/base.py(1498):             if f.is_relation and f.related_model is not None
0.71 /testbed/django/db/models/base.py(1497):             f.get_attname() for f in cls._meta._get_fields(reverse=False)
0.71 /testbed/django/db/models/base.py(1498):             if f.is_relation and f.related_model is not None
0.71 /testbed/django/db/models/base.py(1501):             if accessor in property_names:
0.71 /testbed/django/db/models/base.py(1500):         for accessor in related_field_accessors:
0.71 /testbed/django/db/models/base.py(1497):             f.get_attname() for f in cls._meta._get_fields(reverse=False)
0.71 /testbed/django/db/models/base.py(1498):             if f.is_relation and f.related_model is not None
0.71 /testbed/django/db/models/base.py(1501):             if accessor in property_names:
0.71 /testbed/django/db/models/base.py(1500):         for accessor in related_field_accessors:
0.71 /testbed/django/db/models/base.py(1497):             f.get_attname() for f in cls._meta._get_fields(reverse=False)
0.71 /testbed/django/db/models/base.py(1510):         return errors
0.71 /testbed/django/db/models/base.py(1262):                 *cls._check_single_primary_key(),
0.71 /testbed/django/db/models/base.py(1514):         errors = []
0.71 /testbed/django/db/models/base.py(1515):         if sum(1 for f in cls._meta.local_fields if f.primary_key) > 1:
0.71 /testbed/django/db/models/base.py(1515):         if sum(1 for f in cls._meta.local_fields if f.primary_key) > 1:
0.71 /testbed/django/db/models/base.py(1515):         if sum(1 for f in cls._meta.local_fields if f.primary_key) > 1:
0.71 /testbed/django/db/models/base.py(1515):         if sum(1 for f in cls._meta.local_fields if f.primary_key) > 1:
0.71 /testbed/django/db/models/base.py(1515):         if sum(1 for f in cls._meta.local_fields if f.primary_key) > 1:
0.71 /testbed/django/db/models/base.py(1515):         if sum(1 for f in cls._meta.local_fields if f.primary_key) > 1:
0.71 /testbed/django/db/models/base.py(1515):         if sum(1 for f in cls._meta.local_fields if f.primary_key) > 1:
0.71 /testbed/django/db/models/base.py(1515):         if sum(1 for f in cls._meta.local_fields if f.primary_key) > 1:
0.71 /testbed/django/db/models/base.py(1515):         if sum(1 for f in cls._meta.local_fields if f.primary_key) > 1:
0.71 /testbed/django/db/models/base.py(1515):         if sum(1 for f in cls._meta.local_fields if f.primary_key) > 1:
0.71 /testbed/django/db/models/base.py(1515):         if sum(1 for f in cls._meta.local_fields if f.primary_key) > 1:
0.71 /testbed/django/db/models/base.py(1515):         if sum(1 for f in cls._meta.local_fields if f.primary_key) > 1:
0.71 /testbed/django/db/models/base.py(1515):         if sum(1 for f in cls._meta.local_fields if f.primary_key) > 1:
0.71 /testbed/django/db/models/base.py(1524):         return errors
0.71 /testbed/django/db/models/base.py(1264):             errors.extend(clash_errors)
0.71 /testbed/django/db/models/base.py(1267):             if not clash_errors:
0.71 /testbed/django/db/models/base.py(1268):                 errors.extend(cls._check_column_name_clashes())
0.71 /testbed/django/db/models/base.py(1446):         used_column_names = []
0.71 /testbed/django/db/models/base.py(1447):         errors = []
0.71 /testbed/django/db/models/base.py(1449):         for f in cls._meta.local_fields:
0.71 /testbed/django/db/models/base.py(1450):             _, column_name = f.get_attname_column()
0.71 /testbed/django/db/models/base.py(1453):             if column_name and column_name in used_column_names:
0.71 /testbed/django/db/models/base.py(1464):                 used_column_names.append(column_name)
0.71 /testbed/django/db/models/base.py(1449):         for f in cls._meta.local_fields:
0.71 /testbed/django/db/models/base.py(1450):             _, column_name = f.get_attname_column()
0.71 /testbed/django/db/models/base.py(1453):             if column_name and column_name in used_column_names:
0.71 /testbed/django/db/models/base.py(1464):                 used_column_names.append(column_name)
0.71 /testbed/django/db/models/base.py(1449):         for f in cls._meta.local_fields:
0.71 /testbed/django/db/models/base.py(1450):             _, column_name = f.get_attname_column()
0.71 /testbed/django/db/models/base.py(1453):             if column_name and column_name in used_column_names:
0.71 /testbed/django/db/models/base.py(1464):                 used_column_names.append(column_name)
0.71 /testbed/django/db/models/base.py(1449):         for f in cls._meta.local_fields:
0.71 /testbed/django/db/models/base.py(1450):             _, column_name = f.get_attname_column()
0.71 /testbed/django/db/models/base.py(1453):             if column_name and column_name in used_column_names:
0.71 /testbed/django/db/models/base.py(1464):                 used_column_names.append(column_name)
0.71 /testbed/django/db/models/base.py(1449):         for f in cls._meta.local_fields:
0.71 /testbed/django/db/models/base.py(1450):             _, column_name = f.get_attname_column()
0.71 /testbed/django/db/models/base.py(1453):             if column_name and column_name in used_column_names:
0.71 /testbed/django/db/models/base.py(1464):                 used_column_names.append(column_name)
0.71 /testbed/django/db/models/base.py(1449):         for f in cls._meta.local_fields:
0.71 /testbed/django/db/models/base.py(1450):             _, column_name = f.get_attname_column()
0.71 /testbed/django/db/models/base.py(1453):             if column_name and column_name in used_column_names:
0.71 /testbed/django/db/models/base.py(1464):                 used_column_names.append(column_name)
0.71 /testbed/django/db/models/base.py(1449):         for f in cls._meta.local_fields:
0.71 /testbed/django/db/models/base.py(1450):             _, column_name = f.get_attname_column()
0.71 /testbed/django/db/models/base.py(1453):             if column_name and column_name in used_column_names:
0.71 /testbed/django/db/models/base.py(1464):                 used_column_names.append(column_name)
0.71 /testbed/django/db/models/base.py(1449):         for f in cls._meta.local_fields:
0.71 /testbed/django/db/models/base.py(1450):             _, column_name = f.get_attname_column()
0.71 /testbed/django/db/models/base.py(1453):             if column_name and column_name in used_column_names:
0.71 /testbed/django/db/models/base.py(1464):                 used_column_names.append(column_name)
0.71 /testbed/django/db/models/base.py(1449):         for f in cls._meta.local_fields:
0.71 /testbed/django/db/models/base.py(1450):             _, column_name = f.get_attname_column()
0.71 /testbed/django/db/models/base.py(1453):             if column_name and column_name in used_column_names:
0.71 /testbed/django/db/models/base.py(1464):                 used_column_names.append(column_name)
0.71 /testbed/django/db/models/base.py(1449):         for f in cls._meta.local_fields:
0.71 /testbed/django/db/models/base.py(1450):             _, column_name = f.get_attname_column()
0.71 /testbed/django/db/models/base.py(1453):             if column_name and column_name in used_column_names:
0.71 /testbed/django/db/models/base.py(1464):                 used_column_names.append(column_name)
0.71 /testbed/django/db/models/base.py(1449):         for f in cls._meta.local_fields:
0.71 /testbed/django/db/models/base.py(1450):             _, column_name = f.get_attname_column()
0.71 /testbed/django/db/models/base.py(1453):             if column_name and column_name in used_column_names:
0.71 /testbed/django/db/models/base.py(1464):                 used_column_names.append(column_name)
0.71 /testbed/django/db/models/base.py(1449):         for f in cls._meta.local_fields:
0.71 /testbed/django/db/models/base.py(1466):         return errors
0.71 /testbed/django/db/models/base.py(1269):             errors += [
0.71 /testbed/django/db/models/base.py(1270):                 *cls._check_index_together(),
0.71 /testbed/django/db/models/base.py(1529):         if not isinstance(cls._meta.index_together, (tuple, list)):
0.71 /testbed/django/db/models/base.py(1538):         elif any(not isinstance(fields, (tuple, list)) for fields in cls._meta.index_together):
0.71 /testbed/django/db/models/base.py(1538):         elif any(not isinstance(fields, (tuple, list)) for fields in cls._meta.index_together):
0.71 /testbed/django/db/models/base.py(1548):             errors = []
0.71 /testbed/django/db/models/base.py(1549):             for fields in cls._meta.index_together:
0.71 /testbed/django/db/models/base.py(1551):             return errors
0.71 /testbed/django/db/models/base.py(1271):                 *cls._check_unique_together(),
0.71 /testbed/django/db/models/base.py(1556):         if not isinstance(cls._meta.unique_together, (tuple, list)):
0.71 /testbed/django/db/models/base.py(1565):         elif any(not isinstance(fields, (tuple, list)) for fields in cls._meta.unique_together):
0.71 /testbed/django/db/models/base.py(1565):         elif any(not isinstance(fields, (tuple, list)) for fields in cls._meta.unique_together):
0.71 /testbed/django/db/models/base.py(1575):             errors = []
0.71 /testbed/django/db/models/base.py(1576):             for fields in cls._meta.unique_together:
0.71 /testbed/django/db/models/base.py(1578):             return errors
0.71 /testbed/django/db/models/base.py(1272):                 *cls._check_indexes(),
0.71 /testbed/django/db/models/base.py(1583):         errors = []
0.71 /testbed/django/db/models/base.py(1584):         for index in cls._meta.indexes:
0.71 /testbed/django/db/models/base.py(1605):         fields = [field for index in cls._meta.indexes for field, _ in index.fields_orders]
0.71 /testbed/django/db/models/base.py(1605):         fields = [field for index in cls._meta.indexes for field, _ in index.fields_orders]
0.71 /testbed/django/db/models/base.py(1606):         errors.extend(cls._check_local_fields(fields, 'indexes'))
0.71 /testbed/django/db/models/base.py(1611):         from django.db import models
0.71 /testbed/django/db/models/base.py(1615):         forward_fields_map = {}
0.71 /testbed/django/db/models/base.py(1616):         for field in cls._meta._get_fields(reverse=False):
0.71 /testbed/django/db/models/base.py(1617):             forward_fields_map[field.name] = field
0.71 /testbed/django/db/models/base.py(1618):             if hasattr(field, 'attname'):
0.71 /testbed/django/db/models/base.py(1619):                 forward_fields_map[field.attname] = field
0.71 /testbed/django/db/models/base.py(1616):         for field in cls._meta._get_fields(reverse=False):
0.71 /testbed/django/db/models/base.py(1617):             forward_fields_map[field.name] = field
0.71 /testbed/django/db/models/base.py(1618):             if hasattr(field, 'attname'):
0.71 /testbed/django/db/models/base.py(1619):                 forward_fields_map[field.attname] = field
0.71 /testbed/django/db/models/base.py(1616):         for field in cls._meta._get_fields(reverse=False):
0.71 /testbed/django/db/models/base.py(1617):             forward_fields_map[field.name] = field
0.71 /testbed/django/db/models/base.py(1618):             if hasattr(field, 'attname'):
0.71 /testbed/django/db/models/base.py(1619):                 forward_fields_map[field.attname] = field
0.71 /testbed/django/db/models/base.py(1616):         for field in cls._meta._get_fields(reverse=False):
0.71 /testbed/django/db/models/base.py(1617):             forward_fields_map[field.name] = field
0.71 /testbed/django/db/models/base.py(1618):             if hasattr(field, 'attname'):
0.71 /testbed/django/db/models/base.py(1619):                 forward_fields_map[field.attname] = field
0.71 /testbed/django/db/models/base.py(1616):         for field in cls._meta._get_fields(reverse=False):
0.71 /testbed/django/db/models/base.py(1617):             forward_fields_map[field.name] = field
0.71 /testbed/django/db/models/base.py(1618):             if hasattr(field, 'attname'):
0.71 /testbed/django/db/models/base.py(1619):                 forward_fields_map[field.attname] = field
0.71 /testbed/django/db/models/base.py(1616):         for field in cls._meta._get_fields(reverse=False):
0.71 /testbed/django/db/models/base.py(1617):             forward_fields_map[field.name] = field
0.71 /testbed/django/db/models/base.py(1618):             if hasattr(field, 'attname'):
0.71 /testbed/django/db/models/base.py(1619):                 forward_fields_map[field.attname] = field
0.71 /testbed/django/db/models/base.py(1616):         for field in cls._meta._get_fields(reverse=False):
0.71 /testbed/django/db/models/base.py(1617):             forward_fields_map[field.name] = field
0.71 /testbed/django/db/models/base.py(1618):             if hasattr(field, 'attname'):
0.71 /testbed/django/db/models/base.py(1619):                 forward_fields_map[field.attname] = field
0.71 /testbed/django/db/models/base.py(1616):         for field in cls._meta._get_fields(reverse=False):
0.71 /testbed/django/db/models/base.py(1617):             forward_fields_map[field.name] = field
0.71 /testbed/django/db/models/base.py(1618):             if hasattr(field, 'attname'):
0.71 /testbed/django/db/models/base.py(1619):                 forward_fields_map[field.attname] = field
0.71 /testbed/django/db/models/base.py(1616):         for field in cls._meta._get_fields(reverse=False):
0.71 /testbed/django/db/models/base.py(1617):             forward_fields_map[field.name] = field
0.71 /testbed/django/db/models/base.py(1618):             if hasattr(field, 'attname'):
0.71 /testbed/django/db/models/base.py(1619):                 forward_fields_map[field.attname] = field
0.71 /testbed/django/db/models/base.py(1616):         for field in cls._meta._get_fields(reverse=False):
0.71 /testbed/django/db/models/base.py(1617):             forward_fields_map[field.name] = field
0.71 /testbed/django/db/models/base.py(1618):             if hasattr(field, 'attname'):
0.71 /testbed/django/db/models/base.py(1619):                 forward_fields_map[field.attname] = field
0.71 /testbed/django/db/models/base.py(1616):         for field in cls._meta._get_fields(reverse=False):
0.71 /testbed/django/db/models/base.py(1617):             forward_fields_map[field.name] = field
0.71 /testbed/django/db/models/base.py(1618):             if hasattr(field, 'attname'):
0.71 /testbed/django/db/models/base.py(1619):                 forward_fields_map[field.attname] = field
0.71 /testbed/django/db/models/base.py(1616):         for field in cls._meta._get_fields(reverse=False):
0.71 /testbed/django/db/models/base.py(1617):             forward_fields_map[field.name] = field
0.71 /testbed/django/db/models/base.py(1618):             if hasattr(field, 'attname'):
0.71 /testbed/django/db/models/base.py(1619):                 forward_fields_map[field.attname] = field
0.71 /testbed/django/db/models/base.py(1616):         for field in cls._meta._get_fields(reverse=False):
0.71 /testbed/django/db/models/base.py(1617):             forward_fields_map[field.name] = field
0.71 /testbed/django/db/models/base.py(1618):             if hasattr(field, 'attname'):
0.71 /testbed/django/db/models/base.py(1619):                 forward_fields_map[field.attname] = field
0.71 /testbed/django/db/models/base.py(1616):         for field in cls._meta._get_fields(reverse=False):
0.71 /testbed/django/db/models/base.py(1621):         errors = []
0.71 /testbed/django/db/models/base.py(1622):         for field_name in fields:
0.71 /testbed/django/db/models/base.py(1657):         return errors
0.71 /testbed/django/db/models/base.py(1607):         return errors
0.71 /testbed/django/db/models/base.py(1273):                 *cls._check_ordering(),
0.71 /testbed/django/db/models/base.py(1665):         if cls._meta._ordering_clash:
0.71 /testbed/django/db/models/base.py(1674):         if cls._meta.order_with_respect_to or not cls._meta.ordering:
0.71 /testbed/django/db/models/base.py(1675):             return []
0.71 /testbed/django/db/models/base.py(1274):                 *cls._check_constraints(),
0.71 /testbed/django/db/models/base.py(1834):         errors = []
0.71 /testbed/django/db/models/base.py(1835):         for db in settings.DATABASES:
0.71 /testbed/django/db/models/base.py(1836):             if not router.allow_migrate_model(db, cls):
0.71 /testbed/django/db/models/base.py(1838):             connection = connections[db]
0.71 /testbed/django/db/models/base.py(1840):                 connection.features.supports_table_check_constraints or
0.71 /testbed/django/db/models/base.py(1835):         for db in settings.DATABASES:
0.71 /testbed/django/db/models/base.py(1836):             if not router.allow_migrate_model(db, cls):
0.71 /testbed/django/db/models/base.py(1838):             connection = connections[db]
0.71 /testbed/django/db/models/base.py(1840):                 connection.features.supports_table_check_constraints or
0.71 /testbed/django/db/models/base.py(1835):         for db in settings.DATABASES:
0.71 /testbed/django/db/models/base.py(1856):         return errors
0.71 /testbed/django/db/models/base.py(1277):         return errors
0.71 /testbed/django/db/models/base.py(1250):         errors = [*cls._check_swappable(), *cls._check_model(), *cls._check_managers(**kwargs)]
0.71 /testbed/django/db/models/base.py(1282):         errors = []
0.71 /testbed/django/db/models/base.py(1283):         if cls._meta.swapped:
0.71 /testbed/django/db/models/base.py(1304):         return errors
0.71 /testbed/django/db/models/base.py(1308):         errors = []
0.71 /testbed/django/db/models/base.py(1309):         if cls._meta.proxy:
0.71 /testbed/django/db/models/base.py(1317):         return errors
0.71 /testbed/django/db/models/base.py(1322):         errors = []
0.71 /testbed/django/db/models/base.py(1323):         for manager in cls._meta.managers:
0.71 /testbed/django/db/models/base.py(1324):             errors.extend(manager.check(**kwargs))
0.71 /testbed/django/db/models/base.py(1323):         for manager in cls._meta.managers:
0.71 /testbed/django/db/models/base.py(1325):         return errors
0.71 /testbed/django/db/models/base.py(1251):         if not cls._meta.swapped:
0.71 /testbed/django/db/models/base.py(1252):             errors += [
0.71 /testbed/django/db/models/base.py(1253):                 *cls._check_fields(**kwargs),
0.71 /testbed/django/db/models/base.py(1330):         errors = []
0.71 /testbed/django/db/models/base.py(1331):         for field in cls._meta.local_fields:
0.71 /testbed/django/db/models/base.py(1332):             errors.extend(field.check(**kwargs))
0.71 /testbed/django/db/models/base.py(1331):         for field in cls._meta.local_fields:
0.71 /testbed/django/db/models/base.py(1332):             errors.extend(field.check(**kwargs))
0.71 /testbed/django/db/models/base.py(1331):         for field in cls._meta.local_fields:
0.71 /testbed/django/db/models/base.py(1332):             errors.extend(field.check(**kwargs))
0.71 /testbed/django/db/models/base.py(1331):         for field in cls._meta.local_fields:
0.71 /testbed/django/db/models/base.py(1333):         for field in cls._meta.local_many_to_many:
0.71 /testbed/django/db/models/base.py(1335):         return errors
0.71 /testbed/django/db/models/base.py(1254):                 *cls._check_m2m_through_same_relationship(),
0.71 /testbed/django/db/models/base.py(1342):         errors = []
0.71 /testbed/django/db/models/base.py(1343):         seen_intermediary_signatures = []
0.71 /testbed/django/db/models/base.py(1345):         fields = cls._meta.local_many_to_many
0.71 /testbed/django/db/models/base.py(1348):         fields = (f for f in fields if isinstance(f.remote_field.model, ModelBase))
0.71 /testbed/django/db/models/base.py(1351):         fields = (f for f in fields if isinstance(f.remote_field.through, ModelBase))
0.71 /testbed/django/db/models/base.py(1353):         for f in fields:
0.71 /testbed/django/db/models/base.py(1351):         fields = (f for f in fields if isinstance(f.remote_field.through, ModelBase))
0.71 /testbed/django/db/models/base.py(1348):         fields = (f for f in fields if isinstance(f.remote_field.model, ModelBase))
0.71 /testbed/django/db/models/base.py(1367):         return errors
0.71 /testbed/django/db/models/base.py(1255):                 *cls._check_long_column_names(),
0.71 /testbed/django/db/models/base.py(1765):         errors = []
0.71 /testbed/django/db/models/base.py(1766):         allowed_len = None
0.71 /testbed/django/db/models/base.py(1767):         db_alias = None
0.71 /testbed/django/db/models/base.py(1770):         for db in settings.DATABASES:
0.71 /testbed/django/db/models/base.py(1772):             if not router.allow_migrate_model(db, cls):
0.71 /testbed/django/db/models/base.py(1774):             connection = connections[db]
0.71 /testbed/django/db/models/base.py(1775):             max_name_length = connection.ops.max_name_length()
0.71 /testbed/django/db/models/base.py(1776):             if max_name_length is None or connection.features.truncates_names:
0.71 /testbed/django/db/models/base.py(1770):         for db in settings.DATABASES:
0.71 /testbed/django/db/models/base.py(1772):             if not router.allow_migrate_model(db, cls):
0.71 /testbed/django/db/models/base.py(1774):             connection = connections[db]
0.71 /testbed/django/db/models/base.py(1775):             max_name_length = connection.ops.max_name_length()
0.71 /testbed/django/db/models/base.py(1776):             if max_name_length is None or connection.features.truncates_names:
0.71 /testbed/django/db/models/base.py(1770):         for db in settings.DATABASES:
0.71 /testbed/django/db/models/base.py(1786):         if allowed_len is None:
0.71 /testbed/django/db/models/base.py(1787):             return errors
0.71 /testbed/django/db/models/base.py(1258):                 *cls._check_id_field(),
0.71 /testbed/django/db/models/base.py(1372):         fields = [f for f in cls._meta.local_fields if f.name == 'id' and f != cls._meta.pk]
0.71 /testbed/django/db/models/base.py(1372):         fields = [f for f in cls._meta.local_fields if f.name == 'id' and f != cls._meta.pk]
0.71 /testbed/django/db/models/base.py(1372):         fields = [f for f in cls._meta.local_fields if f.name == 'id' and f != cls._meta.pk]
0.71 /testbed/django/db/models/base.py(1372):         fields = [f for f in cls._meta.local_fields if f.name == 'id' and f != cls._meta.pk]
0.71 /testbed/django/db/models/base.py(1372):         fields = [f for f in cls._meta.local_fields if f.name == 'id' and f != cls._meta.pk]
0.71 /testbed/django/db/models/base.py(1374):         if fields and not fields[0].primary_key and cls._meta.pk.name == 'id':
0.71 /testbed/django/db/models/base.py(1384):             return []
0.71 /testbed/django/db/models/base.py(1259):                 *cls._check_field_name_clashes(),
0.71 /testbed/django/db/models/base.py(1389):         errors = []
0.71 /testbed/django/db/models/base.py(1390):         used_fields = {}  # name or attname -> field
0.71 /testbed/django/db/models/base.py(1393):         for parent in cls._meta.get_parent_list():
0.71 /testbed/django/db/models/base.py(1415):         for parent in cls._meta.get_parent_list():
0.71 /testbed/django/db/models/base.py(1420):         for f in cls._meta.local_fields:
0.71 /testbed/django/db/models/base.py(1421):             clash = used_fields.get(f.name) or used_fields.get(f.attname) or None
0.71 /testbed/django/db/models/base.py(1426):             id_conflict = f.name == "id" and clash and clash.name == "id" and clash.model == cls
0.71 /testbed/django/db/models/base.py(1427):             if clash and not id_conflict:
0.71 /testbed/django/db/models/base.py(1438):             used_fields[f.name] = f
0.71 /testbed/django/db/models/base.py(1439):             used_fields[f.attname] = f
0.71 /testbed/django/db/models/base.py(1420):         for f in cls._meta.local_fields:
0.71 /testbed/django/db/models/base.py(1421):             clash = used_fields.get(f.name) or used_fields.get(f.attname) or None
0.71 /testbed/django/db/models/base.py(1426):             id_conflict = f.name == "id" and clash and clash.name == "id" and clash.model == cls
0.71 /testbed/django/db/models/base.py(1427):             if clash and not id_conflict:
0.71 /testbed/django/db/models/base.py(1438):             used_fields[f.name] = f
0.71 /testbed/django/db/models/base.py(1439):             used_fields[f.attname] = f
0.71 /testbed/django/db/models/base.py(1420):         for f in cls._meta.local_fields:
0.71 /testbed/django/db/models/base.py(1421):             clash = used_fields.get(f.name) or used_fields.get(f.attname) or None
0.71 /testbed/django/db/models/base.py(1426):             id_conflict = f.name == "id" and clash and clash.name == "id" and clash.model == cls
0.71 /testbed/django/db/models/base.py(1427):             if clash and not id_conflict:
0.71 /testbed/django/db/models/base.py(1438):             used_fields[f.name] = f
0.71 /testbed/django/db/models/base.py(1439):             used_fields[f.attname] = f
0.71 /testbed/django/db/models/base.py(1420):         for f in cls._meta.local_fields:
0.71 /testbed/django/db/models/base.py(1441):         return errors
0.71 /testbed/django/db/models/base.py(1260):                 *cls._check_model_name_db_lookup_clashes(),
0.71 /testbed/django/db/models/base.py(1470):         errors = []
0.71 /testbed/django/db/models/base.py(1471):         model_name = cls.__name__
0.71 /testbed/django/db/models/base.py(1472):         if model_name.startswith('_') or model_name.endswith('_'):
0.71 /testbed/django/db/models/base.py(1481):         elif LOOKUP_SEP in model_name:
0.71 /testbed/django/db/models/base.py(1490):         return errors
0.71 /testbed/django/db/models/base.py(1261):                 *cls._check_property_name_related_field_accessor_clashes(),
0.71 /testbed/django/db/models/base.py(1494):         errors = []
0.71 /testbed/django/db/models/base.py(1495):         property_names = cls._meta._property_names
0.71 /testbed/django/db/models/base.py(1497):             f.get_attname() for f in cls._meta._get_fields(reverse=False)
0.71 /testbed/django/db/models/base.py(1500):         for accessor in related_field_accessors:
0.71 /testbed/django/db/models/base.py(1497):             f.get_attname() for f in cls._meta._get_fields(reverse=False)
0.71 /testbed/django/db/models/base.py(1498):             if f.is_relation and f.related_model is not None
0.71 /testbed/django/db/models/base.py(1497):             f.get_attname() for f in cls._meta._get_fields(reverse=False)
0.71 /testbed/django/db/models/base.py(1498):             if f.is_relation and f.related_model is not None
0.71 /testbed/django/db/models/base.py(1497):             f.get_attname() for f in cls._meta._get_fields(reverse=False)
0.71 /testbed/django/db/models/base.py(1498):             if f.is_relation and f.related_model is not None
0.71 /testbed/django/db/models/base.py(1497):             f.get_attname() for f in cls._meta._get_fields(reverse=False)
0.71 /testbed/django/db/models/base.py(1510):         return errors
0.71 /testbed/django/db/models/base.py(1262):                 *cls._check_single_primary_key(),
0.71 /testbed/django/db/models/base.py(1514):         errors = []
0.71 /testbed/django/db/models/base.py(1515):         if sum(1 for f in cls._meta.local_fields if f.primary_key) > 1:
0.71 /testbed/django/db/models/base.py(1515):         if sum(1 for f in cls._meta.local_fields if f.primary_key) > 1:
0.71 /testbed/django/db/models/base.py(1515):         if sum(1 for f in cls._meta.local_fields if f.primary_key) > 1:
0.71 /testbed/django/db/models/base.py(1515):         if sum(1 for f in cls._meta.local_fields if f.primary_key) > 1:
0.71 /testbed/django/db/models/base.py(1515):         if sum(1 for f in cls._meta.local_fields if f.primary_key) > 1:
0.71 /testbed/django/db/models/base.py(1524):         return errors
0.71 /testbed/django/db/models/base.py(1264):             errors.extend(clash_errors)
0.71 /testbed/django/db/models/base.py(1267):             if not clash_errors:
0.71 /testbed/django/db/models/base.py(1268):                 errors.extend(cls._check_column_name_clashes())
0.71 /testbed/django/db/models/base.py(1446):         used_column_names = []
0.71 /testbed/django/db/models/base.py(1447):         errors = []
0.71 /testbed/django/db/models/base.py(1449):         for f in cls._meta.local_fields:
0.71 /testbed/django/db/models/base.py(1450):             _, column_name = f.get_attname_column()
0.71 /testbed/django/db/models/base.py(1453):             if column_name and column_name in used_column_names:
0.71 /testbed/django/db/models/base.py(1464):                 used_column_names.append(column_name)
0.71 /testbed/django/db/models/base.py(1449):         for f in cls._meta.local_fields:
0.71 /testbed/django/db/models/base.py(1450):             _, column_name = f.get_attname_column()
0.71 /testbed/django/db/models/base.py(1453):             if column_name and column_name in used_column_names:
0.71 /testbed/django/db/models/base.py(1464):                 used_column_names.append(column_name)
0.71 /testbed/django/db/models/base.py(1449):         for f in cls._meta.local_fields:
0.71 /testbed/django/db/models/base.py(1450):             _, column_name = f.get_attname_column()
0.71 /testbed/django/db/models/base.py(1453):             if column_name and column_name in used_column_names:
0.71 /testbed/django/db/models/base.py(1464):                 used_column_names.append(column_name)
0.71 /testbed/django/db/models/base.py(1449):         for f in cls._meta.local_fields:
0.71 /testbed/django/db/models/base.py(1466):         return errors
0.71 /testbed/django/db/models/base.py(1269):             errors += [
0.71 /testbed/django/db/models/base.py(1270):                 *cls._check_index_together(),
0.71 /testbed/django/db/models/base.py(1529):         if not isinstance(cls._meta.index_together, (tuple, list)):
0.71 /testbed/django/db/models/base.py(1538):         elif any(not isinstance(fields, (tuple, list)) for fields in cls._meta.index_together):
0.71 /testbed/django/db/models/base.py(1538):         elif any(not isinstance(fields, (tuple, list)) for fields in cls._meta.index_together):
0.71 /testbed/django/db/models/base.py(1548):             errors = []
0.71 /testbed/django/db/models/base.py(1549):             for fields in cls._meta.index_together:
0.71 /testbed/django/db/models/base.py(1551):             return errors
0.71 /testbed/django/db/models/base.py(1271):                 *cls._check_unique_together(),
0.71 /testbed/django/db/models/base.py(1556):         if not isinstance(cls._meta.unique_together, (tuple, list)):
0.71 /testbed/django/db/models/base.py(1565):         elif any(not isinstance(fields, (tuple, list)) for fields in cls._meta.unique_together):
0.71 /testbed/django/db/models/base.py(1565):         elif any(not isinstance(fields, (tuple, list)) for fields in cls._meta.unique_together):
0.71 /testbed/django/db/models/base.py(1575):             errors = []
0.71 /testbed/django/db/models/base.py(1576):             for fields in cls._meta.unique_together:
0.71 /testbed/django/db/models/base.py(1578):             return errors
0.71 /testbed/django/db/models/base.py(1272):                 *cls._check_indexes(),
0.71 /testbed/django/db/models/base.py(1583):         errors = []
0.71 /testbed/django/db/models/base.py(1584):         for index in cls._meta.indexes:
0.71 /testbed/django/db/models/base.py(1605):         fields = [field for index in cls._meta.indexes for field, _ in index.fields_orders]
0.71 /testbed/django/db/models/base.py(1605):         fields = [field for index in cls._meta.indexes for field, _ in index.fields_orders]
0.71 /testbed/django/db/models/base.py(1606):         errors.extend(cls._check_local_fields(fields, 'indexes'))
0.71 /testbed/django/db/models/base.py(1611):         from django.db import models
0.71 /testbed/django/db/models/base.py(1615):         forward_fields_map = {}
0.71 /testbed/django/db/models/base.py(1616):         for field in cls._meta._get_fields(reverse=False):
0.71 /testbed/django/db/models/base.py(1617):             forward_fields_map[field.name] = field
0.71 /testbed/django/db/models/base.py(1618):             if hasattr(field, 'attname'):
0.71 /testbed/django/db/models/base.py(1619):                 forward_fields_map[field.attname] = field
0.71 /testbed/django/db/models/base.py(1616):         for field in cls._meta._get_fields(reverse=False):
0.71 /testbed/django/db/models/base.py(1617):             forward_fields_map[field.name] = field
0.71 /testbed/django/db/models/base.py(1618):             if hasattr(field, 'attname'):
0.71 /testbed/django/db/models/base.py(1619):                 forward_fields_map[field.attname] = field
0.71 /testbed/django/db/models/base.py(1616):         for field in cls._meta._get_fields(reverse=False):
0.71 /testbed/django/db/models/base.py(1617):             forward_fields_map[field.name] = field
0.71 /testbed/django/db/models/base.py(1618):             if hasattr(field, 'attname'):
0.71 /testbed/django/db/models/base.py(1619):                 forward_fields_map[field.attname] = field
0.71 /testbed/django/db/models/base.py(1616):         for field in cls._meta._get_fields(reverse=False):
0.71 /testbed/django/db/models/base.py(1621):         errors = []
0.71 /testbed/django/db/models/base.py(1622):         for field_name in fields:
0.71 /testbed/django/db/models/base.py(1657):         return errors
0.71 /testbed/django/db/models/base.py(1607):         return errors
0.71 /testbed/django/db/models/base.py(1273):                 *cls._check_ordering(),
0.71 /testbed/django/db/models/base.py(1665):         if cls._meta._ordering_clash:
0.71 /testbed/django/db/models/base.py(1674):         if cls._meta.order_with_respect_to or not cls._meta.ordering:
0.71 /testbed/django/db/models/base.py(1677):         if not isinstance(cls._meta.ordering, (list, tuple)):
0.71 /testbed/django/db/models/base.py(1686):         errors = []
0.71 /testbed/django/db/models/base.py(1687):         fields = cls._meta.ordering
0.71 /testbed/django/db/models/base.py(1690):         fields = (f for f in fields if isinstance(f, str) and f != '?')
0.71 /testbed/django/db/models/base.py(1693):         fields = ((f[1:] if f.startswith('-') else f) for f in fields)
0.71 /testbed/django/db/models/base.py(1696):         _fields = []
0.71 /testbed/django/db/models/base.py(1697):         related_fields = []
0.71 /testbed/django/db/models/base.py(1698):         for f in fields:
0.71 /testbed/django/db/models/base.py(1693):         fields = ((f[1:] if f.startswith('-') else f) for f in fields)
0.71 /testbed/django/db/models/base.py(1690):         fields = (f for f in fields if isinstance(f, str) and f != '?')
0.71 /testbed/django/db/models/base.py(1699):             if LOOKUP_SEP in f:
0.71 /testbed/django/db/models/base.py(1702):                 _fields.append(f)
0.71 /testbed/django/db/models/base.py(1698):         for f in fields:
0.71 /testbed/django/db/models/base.py(1693):         fields = ((f[1:] if f.startswith('-') else f) for f in fields)
0.71 /testbed/django/db/models/base.py(1690):         fields = (f for f in fields if isinstance(f, str) and f != '?')
0.71 /testbed/django/db/models/base.py(1703):         fields = _fields
0.71 /testbed/django/db/models/base.py(1706):         for field in related_fields:
0.71 /testbed/django/db/models/base.py(1733):         fields = {f for f in fields if f != 'pk'}
0.71 /testbed/django/db/models/base.py(1733):         fields = {f for f in fields if f != 'pk'}
0.71 /testbed/django/db/models/base.py(1733):         fields = {f for f in fields if f != 'pk'}
0.71 /testbed/django/db/models/base.py(1736):         invalid_fields = []
0.71 /testbed/django/db/models/base.py(1740):         opts = cls._meta
0.71 /testbed/django/db/models/base.py(1741):         valid_fields = set(chain.from_iterable(
0.71 /testbed/django/db/models/base.py(1742):             (f.name, f.attname) if not (f.auto_created and not f.concrete) else (f.field.related_query_name(),)
0.71 /testbed/django/db/models/base.py(1743):             for f in chain(opts.fields, opts.related_objects)
0.71 /testbed/django/db/models/base.py(1742):             (f.name, f.attname) if not (f.auto_created and not f.concrete) else (f.field.related_query_name(),)
0.71 /testbed/django/db/models/base.py(1743):             for f in chain(opts.fields, opts.related_objects)
0.71 /testbed/django/db/models/base.py(1742):             (f.name, f.attname) if not (f.auto_created and not f.concrete) else (f.field.related_query_name(),)
0.71 /testbed/django/db/models/base.py(1743):             for f in chain(opts.fields, opts.related_objects)
0.71 /testbed/django/db/models/base.py(1742):             (f.name, f.attname) if not (f.auto_created and not f.concrete) else (f.field.related_query_name(),)
0.71 /testbed/django/db/models/base.py(1743):             for f in chain(opts.fields, opts.related_objects)
0.71 /testbed/django/db/models/base.py(1742):             (f.name, f.attname) if not (f.auto_created and not f.concrete) else (f.field.related_query_name(),)
0.71 /testbed/django/db/models/base.py(1746):         invalid_fields.extend(fields - valid_fields)
0.71 /testbed/django/db/models/base.py(1748):         for invalid_field in invalid_fields:
0.71 /testbed/django/db/models/base.py(1757):         return errors
0.71 /testbed/django/db/models/base.py(1274):                 *cls._check_constraints(),
0.71 /testbed/django/db/models/base.py(1834):         errors = []
0.71 /testbed/django/db/models/base.py(1835):         for db in settings.DATABASES:
0.71 /testbed/django/db/models/base.py(1836):             if not router.allow_migrate_model(db, cls):
0.71 /testbed/django/db/models/base.py(1838):             connection = connections[db]
0.71 /testbed/django/db/models/base.py(1840):                 connection.features.supports_table_check_constraints or
0.71 /testbed/django/db/models/base.py(1835):         for db in settings.DATABASES:
0.71 /testbed/django/db/models/base.py(1836):             if not router.allow_migrate_model(db, cls):
0.71 /testbed/django/db/models/base.py(1838):             connection = connections[db]
0.71 /testbed/django/db/models/base.py(1840):                 connection.features.supports_table_check_constraints or
0.71 /testbed/django/db/models/base.py(1835):         for db in settings.DATABASES:
0.71 /testbed/django/db/models/base.py(1856):         return errors
0.71 /testbed/django/db/models/base.py(1277):         return errors
0.71 /testbed/django/db/models/base.py(1250):         errors = [*cls._check_swappable(), *cls._check_model(), *cls._check_managers(**kwargs)]
0.71 /testbed/django/db/models/base.py(1282):         errors = []
0.71 /testbed/django/db/models/base.py(1283):         if cls._meta.swapped:
0.71 /testbed/django/db/models/base.py(1304):         return errors
0.71 /testbed/django/db/models/base.py(1308):         errors = []
0.71 /testbed/django/db/models/base.py(1309):         if cls._meta.proxy:
0.71 /testbed/django/db/models/base.py(1317):         return errors
0.71 /testbed/django/db/models/base.py(1322):         errors = []
0.71 /testbed/django/db/models/base.py(1323):         for manager in cls._meta.managers:
0.71 /testbed/django/db/models/base.py(1324):             errors.extend(manager.check(**kwargs))
0.71 /testbed/django/db/models/base.py(1323):         for manager in cls._meta.managers:
0.71 /testbed/django/db/models/base.py(1325):         return errors
0.71 /testbed/django/db/models/base.py(1251):         if not cls._meta.swapped:
0.71 /testbed/django/db/models/base.py(1252):             errors += [
0.71 /testbed/django/db/models/base.py(1253):                 *cls._check_fields(**kwargs),
0.71 /testbed/django/db/models/base.py(1330):         errors = []
0.71 /testbed/django/db/models/base.py(1331):         for field in cls._meta.local_fields:
0.71 /testbed/django/db/models/base.py(1332):             errors.extend(field.check(**kwargs))
0.71 /testbed/django/db/models/base.py(1331):         for field in cls._meta.local_fields:
0.71 /testbed/django/db/models/base.py(1332):             errors.extend(field.check(**kwargs))
0.71 /testbed/django/db/models/base.py(1331):         for field in cls._meta.local_fields:
0.71 /testbed/django/db/models/base.py(1332):             errors.extend(field.check(**kwargs))
0.71 /testbed/django/db/models/base.py(1331):         for field in cls._meta.local_fields:
0.71 /testbed/django/db/models/base.py(1333):         for field in cls._meta.local_many_to_many:
0.71 /testbed/django/db/models/base.py(1335):         return errors
0.71 /testbed/django/db/models/base.py(1254):                 *cls._check_m2m_through_same_relationship(),
0.71 /testbed/django/db/models/base.py(1342):         errors = []
0.71 /testbed/django/db/models/base.py(1343):         seen_intermediary_signatures = []
0.71 /testbed/django/db/models/base.py(1345):         fields = cls._meta.local_many_to_many
0.71 /testbed/django/db/models/base.py(1348):         fields = (f for f in fields if isinstance(f.remote_field.model, ModelBase))
0.71 /testbed/django/db/models/base.py(1351):         fields = (f for f in fields if isinstance(f.remote_field.through, ModelBase))
0.71 /testbed/django/db/models/base.py(1353):         for f in fields:
0.71 /testbed/django/db/models/base.py(1351):         fields = (f for f in fields if isinstance(f.remote_field.through, ModelBase))
0.71 /testbed/django/db/models/base.py(1348):         fields = (f for f in fields if isinstance(f.remote_field.model, ModelBase))
0.71 /testbed/django/db/models/base.py(1367):         return errors
0.71 /testbed/django/db/models/base.py(1255):                 *cls._check_long_column_names(),
0.71 /testbed/django/db/models/base.py(1765):         errors = []
0.71 /testbed/django/db/models/base.py(1766):         allowed_len = None
0.71 /testbed/django/db/models/base.py(1767):         db_alias = None
0.71 /testbed/django/db/models/base.py(1770):         for db in settings.DATABASES:
0.71 /testbed/django/db/models/base.py(1772):             if not router.allow_migrate_model(db, cls):
0.71 /testbed/django/db/models/base.py(1774):             connection = connections[db]
0.71 /testbed/django/db/models/base.py(1775):             max_name_length = connection.ops.max_name_length()
0.71 /testbed/django/db/models/base.py(1776):             if max_name_length is None or connection.features.truncates_names:
0.71 /testbed/django/db/models/base.py(1770):         for db in settings.DATABASES:
0.71 /testbed/django/db/models/base.py(1772):             if not router.allow_migrate_model(db, cls):
0.71 /testbed/django/db/models/base.py(1774):             connection = connections[db]
0.71 /testbed/django/db/models/base.py(1775):             max_name_length = connection.ops.max_name_length()
0.71 /testbed/django/db/models/base.py(1776):             if max_name_length is None or connection.features.truncates_names:
0.71 /testbed/django/db/models/base.py(1770):         for db in settings.DATABASES:
0.71 /testbed/django/db/models/base.py(1786):         if allowed_len is None:
0.71 /testbed/django/db/models/base.py(1787):             return errors
0.71 /testbed/django/db/models/base.py(1258):                 *cls._check_id_field(),
0.71 /testbed/django/db/models/base.py(1372):         fields = [f for f in cls._meta.local_fields if f.name == 'id' and f != cls._meta.pk]
0.71 /testbed/django/db/models/base.py(1372):         fields = [f for f in cls._meta.local_fields if f.name == 'id' and f != cls._meta.pk]
0.71 /testbed/django/db/models/base.py(1372):         fields = [f for f in cls._meta.local_fields if f.name == 'id' and f != cls._meta.pk]
0.71 /testbed/django/db/models/base.py(1372):         fields = [f for f in cls._meta.local_fields if f.name == 'id' and f != cls._meta.pk]
0.71 /testbed/django/db/models/base.py(1372):         fields = [f for f in cls._meta.local_fields if f.name == 'id' and f != cls._meta.pk]
0.71 /testbed/django/db/models/base.py(1374):         if fields and not fields[0].primary_key and cls._meta.pk.name == 'id':
0.71 /testbed/django/db/models/base.py(1384):             return []
0.71 /testbed/django/db/models/base.py(1259):                 *cls._check_field_name_clashes(),
0.71 /testbed/django/db/models/base.py(1389):         errors = []
0.71 /testbed/django/db/models/base.py(1390):         used_fields = {}  # name or attname -> field
0.71 /testbed/django/db/models/base.py(1393):         for parent in cls._meta.get_parent_list():
0.71 /testbed/django/db/models/base.py(1415):         for parent in cls._meta.get_parent_list():
0.71 /testbed/django/db/models/base.py(1420):         for f in cls._meta.local_fields:
0.71 /testbed/django/db/models/base.py(1421):             clash = used_fields.get(f.name) or used_fields.get(f.attname) or None
0.71 /testbed/django/db/models/base.py(1426):             id_conflict = f.name == "id" and clash and clash.name == "id" and clash.model == cls
0.71 /testbed/django/db/models/base.py(1427):             if clash and not id_conflict:
0.71 /testbed/django/db/models/base.py(1438):             used_fields[f.name] = f
0.71 /testbed/django/db/models/base.py(1439):             used_fields[f.attname] = f
0.71 /testbed/django/db/models/base.py(1420):         for f in cls._meta.local_fields:
0.71 /testbed/django/db/models/base.py(1421):             clash = used_fields.get(f.name) or used_fields.get(f.attname) or None
0.71 /testbed/django/db/models/base.py(1426):             id_conflict = f.name == "id" and clash and clash.name == "id" and clash.model == cls
0.71 /testbed/django/db/models/base.py(1427):             if clash and not id_conflict:
0.71 /testbed/django/db/models/base.py(1438):             used_fields[f.name] = f
0.71 /testbed/django/db/models/base.py(1439):             used_fields[f.attname] = f
0.71 /testbed/django/db/models/base.py(1420):         for f in cls._meta.local_fields:
0.71 /testbed/django/db/models/base.py(1421):             clash = used_fields.get(f.name) or used_fields.get(f.attname) or None
0.71 /testbed/django/db/models/base.py(1426):             id_conflict = f.name == "id" and clash and clash.name == "id" and clash.model == cls
0.71 /testbed/django/db/models/base.py(1427):             if clash and not id_conflict:
0.71 /testbed/django/db/models/base.py(1438):             used_fields[f.name] = f
0.71 /testbed/django/db/models/base.py(1439):             used_fields[f.attname] = f
0.71 /testbed/django/db/models/base.py(1420):         for f in cls._meta.local_fields:
0.71 /testbed/django/db/models/base.py(1441):         return errors
0.71 /testbed/django/db/models/base.py(1260):                 *cls._check_model_name_db_lookup_clashes(),
0.71 /testbed/django/db/models/base.py(1470):         errors = []
0.71 /testbed/django/db/models/base.py(1471):         model_name = cls.__name__
0.71 /testbed/django/db/models/base.py(1472):         if model_name.startswith('_') or model_name.endswith('_'):
0.71 /testbed/django/db/models/base.py(1481):         elif LOOKUP_SEP in model_name:
0.71 /testbed/django/db/models/base.py(1490):         return errors
0.71 /testbed/django/db/models/base.py(1261):                 *cls._check_property_name_related_field_accessor_clashes(),
0.71 /testbed/django/db/models/base.py(1494):         errors = []
0.71 /testbed/django/db/models/base.py(1495):         property_names = cls._meta._property_names
0.71 /testbed/django/db/models/base.py(1497):             f.get_attname() for f in cls._meta._get_fields(reverse=False)
0.71 /testbed/django/db/models/base.py(1500):         for accessor in related_field_accessors:
0.71 /testbed/django/db/models/base.py(1497):             f.get_attname() for f in cls._meta._get_fields(reverse=False)
0.71 /testbed/django/db/models/base.py(1498):             if f.is_relation and f.related_model is not None
0.71 /testbed/django/db/models/base.py(1497):             f.get_attname() for f in cls._meta._get_fields(reverse=False)
0.71 /testbed/django/db/models/base.py(1498):             if f.is_relation and f.related_model is not None
0.71 /testbed/django/db/models/base.py(1497):             f.get_attname() for f in cls._meta._get_fields(reverse=False)
0.71 /testbed/django/db/models/base.py(1498):             if f.is_relation and f.related_model is not None
0.71 /testbed/django/db/models/base.py(1497):             f.get_attname() for f in cls._meta._get_fields(reverse=False)
0.71 /testbed/django/db/models/base.py(1510):         return errors
0.71 /testbed/django/db/models/base.py(1262):                 *cls._check_single_primary_key(),
0.71 /testbed/django/db/models/base.py(1514):         errors = []
0.71 /testbed/django/db/models/base.py(1515):         if sum(1 for f in cls._meta.local_fields if f.primary_key) > 1:
0.71 /testbed/django/db/models/base.py(1515):         if sum(1 for f in cls._meta.local_fields if f.primary_key) > 1:
0.71 /testbed/django/db/models/base.py(1515):         if sum(1 for f in cls._meta.local_fields if f.primary_key) > 1:
0.71 /testbed/django/db/models/base.py(1515):         if sum(1 for f in cls._meta.local_fields if f.primary_key) > 1:
0.71 /testbed/django/db/models/base.py(1515):         if sum(1 for f in cls._meta.local_fields if f.primary_key) > 1:
0.71 /testbed/django/db/models/base.py(1524):         return errors
0.71 /testbed/django/db/models/base.py(1264):             errors.extend(clash_errors)
0.71 /testbed/django/db/models/base.py(1267):             if not clash_errors:
0.71 /testbed/django/db/models/base.py(1268):                 errors.extend(cls._check_column_name_clashes())
0.71 /testbed/django/db/models/base.py(1446):         used_column_names = []
0.71 /testbed/django/db/models/base.py(1447):         errors = []
0.71 /testbed/django/db/models/base.py(1449):         for f in cls._meta.local_fields:
0.71 /testbed/django/db/models/base.py(1450):             _, column_name = f.get_attname_column()
0.71 /testbed/django/db/models/base.py(1453):             if column_name and column_name in used_column_names:
0.71 /testbed/django/db/models/base.py(1464):                 used_column_names.append(column_name)
0.71 /testbed/django/db/models/base.py(1449):         for f in cls._meta.local_fields:
0.71 /testbed/django/db/models/base.py(1450):             _, column_name = f.get_attname_column()
0.71 /testbed/django/db/models/base.py(1453):             if column_name and column_name in used_column_names:
0.71 /testbed/django/db/models/base.py(1464):                 used_column_names.append(column_name)
0.71 /testbed/django/db/models/base.py(1449):         for f in cls._meta.local_fields:
0.71 /testbed/django/db/models/base.py(1450):             _, column_name = f.get_attname_column()
0.71 /testbed/django/db/models/base.py(1453):             if column_name and column_name in used_column_names:
0.71 /testbed/django/db/models/base.py(1464):                 used_column_names.append(column_name)
0.71 /testbed/django/db/models/base.py(1449):         for f in cls._meta.local_fields:
0.71 /testbed/django/db/models/base.py(1466):         return errors
0.71 /testbed/django/db/models/base.py(1269):             errors += [
0.71 /testbed/django/db/models/base.py(1270):                 *cls._check_index_together(),
0.71 /testbed/django/db/models/base.py(1529):         if not isinstance(cls._meta.index_together, (tuple, list)):
0.71 /testbed/django/db/models/base.py(1538):         elif any(not isinstance(fields, (tuple, list)) for fields in cls._meta.index_together):
0.71 /testbed/django/db/models/base.py(1538):         elif any(not isinstance(fields, (tuple, list)) for fields in cls._meta.index_together):
0.71 /testbed/django/db/models/base.py(1548):             errors = []
0.71 /testbed/django/db/models/base.py(1549):             for fields in cls._meta.index_together:
0.71 /testbed/django/db/models/base.py(1551):             return errors
0.71 /testbed/django/db/models/base.py(1271):                 *cls._check_unique_together(),
0.71 /testbed/django/db/models/base.py(1556):         if not isinstance(cls._meta.unique_together, (tuple, list)):
0.71 /testbed/django/db/models/base.py(1565):         elif any(not isinstance(fields, (tuple, list)) for fields in cls._meta.unique_together):
0.71 /testbed/django/db/models/base.py(1565):         elif any(not isinstance(fields, (tuple, list)) for fields in cls._meta.unique_together):
0.71 /testbed/django/db/models/base.py(1575):             errors = []
0.71 /testbed/django/db/models/base.py(1576):             for fields in cls._meta.unique_together:
0.71 /testbed/django/db/models/base.py(1578):             return errors
0.71 /testbed/django/db/models/base.py(1272):                 *cls._check_indexes(),
0.71 /testbed/django/db/models/base.py(1583):         errors = []
0.71 /testbed/django/db/models/base.py(1584):         for index in cls._meta.indexes:
0.71 /testbed/django/db/models/base.py(1605):         fields = [field for index in cls._meta.indexes for field, _ in index.fields_orders]
0.71 /testbed/django/db/models/base.py(1605):         fields = [field for index in cls._meta.indexes for field, _ in index.fields_orders]
0.71 /testbed/django/db/models/base.py(1606):         errors.extend(cls._check_local_fields(fields, 'indexes'))
0.71 /testbed/django/db/models/base.py(1611):         from django.db import models
0.71 /testbed/django/db/models/base.py(1615):         forward_fields_map = {}
0.71 /testbed/django/db/models/base.py(1616):         for field in cls._meta._get_fields(reverse=False):
0.71 /testbed/django/db/models/base.py(1617):             forward_fields_map[field.name] = field
0.71 /testbed/django/db/models/base.py(1618):             if hasattr(field, 'attname'):
0.71 /testbed/django/db/models/base.py(1619):                 forward_fields_map[field.attname] = field
0.71 /testbed/django/db/models/base.py(1616):         for field in cls._meta._get_fields(reverse=False):
0.71 /testbed/django/db/models/base.py(1617):             forward_fields_map[field.name] = field
0.71 /testbed/django/db/models/base.py(1618):             if hasattr(field, 'attname'):
0.71 /testbed/django/db/models/base.py(1619):                 forward_fields_map[field.attname] = field
0.71 /testbed/django/db/models/base.py(1616):         for field in cls._meta._get_fields(reverse=False):
0.71 /testbed/django/db/models/base.py(1617):             forward_fields_map[field.name] = field
0.71 /testbed/django/db/models/base.py(1618):             if hasattr(field, 'attname'):
0.71 /testbed/django/db/models/base.py(1619):                 forward_fields_map[field.attname] = field
0.71 /testbed/django/db/models/base.py(1616):         for field in cls._meta._get_fields(reverse=False):
0.71 /testbed/django/db/models/base.py(1621):         errors = []
0.71 /testbed/django/db/models/base.py(1622):         for field_name in fields:
0.71 /testbed/django/db/models/base.py(1657):         return errors
0.71 /testbed/django/db/models/base.py(1607):         return errors
0.71 /testbed/django/db/models/base.py(1273):                 *cls._check_ordering(),
0.71 /testbed/django/db/models/base.py(1665):         if cls._meta._ordering_clash:
0.71 /testbed/django/db/models/base.py(1674):         if cls._meta.order_with_respect_to or not cls._meta.ordering:
0.71 /testbed/django/db/models/base.py(1675):             return []
0.71 /testbed/django/db/models/base.py(1274):                 *cls._check_constraints(),
0.71 /testbed/django/db/models/base.py(1834):         errors = []
0.71 /testbed/django/db/models/base.py(1835):         for db in settings.DATABASES:
0.71 /testbed/django/db/models/base.py(1836):             if not router.allow_migrate_model(db, cls):
0.71 /testbed/django/db/models/base.py(1838):             connection = connections[db]
0.71 /testbed/django/db/models/base.py(1840):                 connection.features.supports_table_check_constraints or
0.71 /testbed/django/db/models/base.py(1835):         for db in settings.DATABASES:
0.71 /testbed/django/db/models/base.py(1836):             if not router.allow_migrate_model(db, cls):
0.71 /testbed/django/db/models/base.py(1838):             connection = connections[db]
0.71 /testbed/django/db/models/base.py(1840):                 connection.features.supports_table_check_constraints or
0.71 /testbed/django/db/models/base.py(1835):         for db in settings.DATABASES:
0.71 /testbed/django/db/models/base.py(1856):         return errors
0.71 /testbed/django/db/models/base.py(1277):         return errors
0.71 /testbed/django/db/models/base.py(1250):         errors = [*cls._check_swappable(), *cls._check_model(), *cls._check_managers(**kwargs)]
0.71 /testbed/django/db/models/base.py(1282):         errors = []
0.71 /testbed/django/db/models/base.py(1283):         if cls._meta.swapped:
0.71 /testbed/django/db/models/base.py(1304):         return errors
0.71 /testbed/django/db/models/base.py(1308):         errors = []
0.71 /testbed/django/db/models/base.py(1309):         if cls._meta.proxy:
0.71 /testbed/django/db/models/base.py(1317):         return errors
0.71 /testbed/django/db/models/base.py(1322):         errors = []
0.71 /testbed/django/db/models/base.py(1323):         for manager in cls._meta.managers:
0.71 /testbed/django/db/models/base.py(1324):             errors.extend(manager.check(**kwargs))
0.71 /testbed/django/db/models/base.py(1323):         for manager in cls._meta.managers:
0.71 /testbed/django/db/models/base.py(1325):         return errors
0.71 /testbed/django/db/models/base.py(1251):         if not cls._meta.swapped:
0.71 /testbed/django/db/models/base.py(1252):             errors += [
0.71 /testbed/django/db/models/base.py(1253):                 *cls._check_fields(**kwargs),
0.71 /testbed/django/db/models/base.py(1330):         errors = []
0.71 /testbed/django/db/models/base.py(1331):         for field in cls._meta.local_fields:
0.71 /testbed/django/db/models/base.py(1332):             errors.extend(field.check(**kwargs))
0.71 /testbed/django/db/models/base.py(1331):         for field in cls._meta.local_fields:
0.71 /testbed/django/db/models/base.py(1332):             errors.extend(field.check(**kwargs))
0.71 /testbed/django/db/models/base.py(1331):         for field in cls._meta.local_fields:
0.71 /testbed/django/db/models/base.py(1332):             errors.extend(field.check(**kwargs))
0.71 /testbed/django/db/models/base.py(1331):         for field in cls._meta.local_fields:
0.71 /testbed/django/db/models/base.py(1332):             errors.extend(field.check(**kwargs))
0.71 /testbed/django/db/models/base.py(1331):         for field in cls._meta.local_fields:
0.71 /testbed/django/db/models/base.py(1332):             errors.extend(field.check(**kwargs))
0.71 /testbed/django/db/models/base.py(1331):         for field in cls._meta.local_fields:
0.71 /testbed/django/db/models/base.py(1332):             errors.extend(field.check(**kwargs))
0.71 /testbed/django/db/models/base.py(1331):         for field in cls._meta.local_fields:
0.71 /testbed/django/db/models/base.py(1332):             errors.extend(field.check(**kwargs))
0.71 /testbed/django/db/models/base.py(1331):         for field in cls._meta.local_fields:
0.71 /testbed/django/db/models/base.py(1332):             errors.extend(field.check(**kwargs))
0.71 /testbed/django/db/models/base.py(1331):         for field in cls._meta.local_fields:
0.71 /testbed/django/db/models/base.py(1333):         for field in cls._meta.local_many_to_many:
0.71 /testbed/django/db/models/base.py(1335):         return errors
0.71 /testbed/django/db/models/base.py(1254):                 *cls._check_m2m_through_same_relationship(),
0.71 /testbed/django/db/models/base.py(1342):         errors = []
0.71 /testbed/django/db/models/base.py(1343):         seen_intermediary_signatures = []
0.71 /testbed/django/db/models/base.py(1345):         fields = cls._meta.local_many_to_many
0.71 /testbed/django/db/models/base.py(1348):         fields = (f for f in fields if isinstance(f.remote_field.model, ModelBase))
0.71 /testbed/django/db/models/base.py(1351):         fields = (f for f in fields if isinstance(f.remote_field.through, ModelBase))
0.71 /testbed/django/db/models/base.py(1353):         for f in fields:
0.71 /testbed/django/db/models/base.py(1351):         fields = (f for f in fields if isinstance(f.remote_field.through, ModelBase))
0.71 /testbed/django/db/models/base.py(1348):         fields = (f for f in fields if isinstance(f.remote_field.model, ModelBase))
0.71 /testbed/django/db/models/base.py(1367):         return errors
0.71 /testbed/django/db/models/base.py(1255):                 *cls._check_long_column_names(),
0.71 /testbed/django/db/models/base.py(1765):         errors = []
0.71 /testbed/django/db/models/base.py(1766):         allowed_len = None
0.71 /testbed/django/db/models/base.py(1767):         db_alias = None
0.71 /testbed/django/db/models/base.py(1770):         for db in settings.DATABASES:
0.71 /testbed/django/db/models/base.py(1772):             if not router.allow_migrate_model(db, cls):
0.71 /testbed/django/db/models/base.py(1774):             connection = connections[db]
0.71 /testbed/django/db/models/base.py(1775):             max_name_length = connection.ops.max_name_length()
0.71 /testbed/django/db/models/base.py(1776):             if max_name_length is None or connection.features.truncates_names:
0.71 /testbed/django/db/models/base.py(1770):         for db in settings.DATABASES:
0.71 /testbed/django/db/models/base.py(1772):             if not router.allow_migrate_model(db, cls):
0.71 /testbed/django/db/models/base.py(1774):             connection = connections[db]
0.71 /testbed/django/db/models/base.py(1775):             max_name_length = connection.ops.max_name_length()
0.71 /testbed/django/db/models/base.py(1776):             if max_name_length is None or connection.features.truncates_names:
0.71 /testbed/django/db/models/base.py(1770):         for db in settings.DATABASES:
0.71 /testbed/django/db/models/base.py(1786):         if allowed_len is None:
0.71 /testbed/django/db/models/base.py(1787):             return errors
0.71 /testbed/django/db/models/base.py(1258):                 *cls._check_id_field(),
0.71 /testbed/django/db/models/base.py(1372):         fields = [f for f in cls._meta.local_fields if f.name == 'id' and f != cls._meta.pk]
0.71 /testbed/django/db/models/base.py(1372):         fields = [f for f in cls._meta.local_fields if f.name == 'id' and f != cls._meta.pk]
0.71 /testbed/django/db/models/base.py(1372):         fields = [f for f in cls._meta.local_fields if f.name == 'id' and f != cls._meta.pk]
0.71 /testbed/django/db/models/base.py(1372):         fields = [f for f in cls._meta.local_fields if f.name == 'id' and f != cls._meta.pk]
0.71 /testbed/django/db/models/base.py(1372):         fields = [f for f in cls._meta.local_fields if f.name == 'id' and f != cls._meta.pk]
0.71 /testbed/django/db/models/base.py(1372):         fields = [f for f in cls._meta.local_fields if f.name == 'id' and f != cls._meta.pk]
0.71 /testbed/django/db/models/base.py(1372):         fields = [f for f in cls._meta.local_fields if f.name == 'id' and f != cls._meta.pk]
0.71 /testbed/django/db/models/base.py(1372):         fields = [f for f in cls._meta.local_fields if f.name == 'id' and f != cls._meta.pk]
0.71 /testbed/django/db/models/base.py(1372):         fields = [f for f in cls._meta.local_fields if f.name == 'id' and f != cls._meta.pk]
0.71 /testbed/django/db/models/base.py(1372):         fields = [f for f in cls._meta.local_fields if f.name == 'id' and f != cls._meta.pk]
0.71 /testbed/django/db/models/base.py(1374):         if fields and not fields[0].primary_key and cls._meta.pk.name == 'id':
0.71 /testbed/django/db/models/base.py(1384):             return []
0.71 /testbed/django/db/models/base.py(1259):                 *cls._check_field_name_clashes(),
0.71 /testbed/django/db/models/base.py(1389):         errors = []
0.71 /testbed/django/db/models/base.py(1390):         used_fields = {}  # name or attname -> field
0.71 /testbed/django/db/models/base.py(1393):         for parent in cls._meta.get_parent_list():
0.71 /testbed/django/db/models/base.py(1415):         for parent in cls._meta.get_parent_list():
0.71 /testbed/django/db/models/base.py(1420):         for f in cls._meta.local_fields:
0.71 /testbed/django/db/models/base.py(1421):             clash = used_fields.get(f.name) or used_fields.get(f.attname) or None
0.71 /testbed/django/db/models/base.py(1426):             id_conflict = f.name == "id" and clash and clash.name == "id" and clash.model == cls
0.71 /testbed/django/db/models/base.py(1427):             if clash and not id_conflict:
0.71 /testbed/django/db/models/base.py(1438):             used_fields[f.name] = f
0.71 /testbed/django/db/models/base.py(1439):             used_fields[f.attname] = f
0.71 /testbed/django/db/models/base.py(1420):         for f in cls._meta.local_fields:
0.71 /testbed/django/db/models/base.py(1421):             clash = used_fields.get(f.name) or used_fields.get(f.attname) or None
0.71 /testbed/django/db/models/base.py(1426):             id_conflict = f.name == "id" and clash and clash.name == "id" and clash.model == cls
0.71 /testbed/django/db/models/base.py(1427):             if clash and not id_conflict:
0.71 /testbed/django/db/models/base.py(1438):             used_fields[f.name] = f
0.71 /testbed/django/db/models/base.py(1439):             used_fields[f.attname] = f
0.71 /testbed/django/db/models/base.py(1420):         for f in cls._meta.local_fields:
0.71 /testbed/django/db/models/base.py(1421):             clash = used_fields.get(f.name) or used_fields.get(f.attname) or None
0.71 /testbed/django/db/models/base.py(1426):             id_conflict = f.name == "id" and clash and clash.name == "id" and clash.model == cls
0.71 /testbed/django/db/models/base.py(1427):             if clash and not id_conflict:
0.71 /testbed/django/db/models/base.py(1438):             used_fields[f.name] = f
0.71 /testbed/django/db/models/base.py(1439):             used_fields[f.attname] = f
0.71 /testbed/django/db/models/base.py(1420):         for f in cls._meta.local_fields:
0.71 /testbed/django/db/models/base.py(1421):             clash = used_fields.get(f.name) or used_fields.get(f.attname) or None
0.71 /testbed/django/db/models/base.py(1426):             id_conflict = f.name == "id" and clash and clash.name == "id" and clash.model == cls
0.71 /testbed/django/db/models/base.py(1427):             if clash and not id_conflict:
0.71 /testbed/django/db/models/base.py(1438):             used_fields[f.name] = f
0.71 /testbed/django/db/models/base.py(1439):             used_fields[f.attname] = f
0.71 /testbed/django/db/models/base.py(1420):         for f in cls._meta.local_fields:
0.71 /testbed/django/db/models/base.py(1421):             clash = used_fields.get(f.name) or used_fields.get(f.attname) or None
0.71 /testbed/django/db/models/base.py(1426):             id_conflict = f.name == "id" and clash and clash.name == "id" and clash.model == cls
0.71 /testbed/django/db/models/base.py(1427):             if clash and not id_conflict:
0.71 /testbed/django/db/models/base.py(1438):             used_fields[f.name] = f
0.71 /testbed/django/db/models/base.py(1439):             used_fields[f.attname] = f
0.71 /testbed/django/db/models/base.py(1420):         for f in cls._meta.local_fields:
0.71 /testbed/django/db/models/base.py(1421):             clash = used_fields.get(f.name) or used_fields.get(f.attname) or None
0.71 /testbed/django/db/models/base.py(1426):             id_conflict = f.name == "id" and clash and clash.name == "id" and clash.model == cls
0.71 /testbed/django/db/models/base.py(1427):             if clash and not id_conflict:
0.71 /testbed/django/db/models/base.py(1438):             used_fields[f.name] = f
0.71 /testbed/django/db/models/base.py(1439):             used_fields[f.attname] = f
0.71 /testbed/django/db/models/base.py(1420):         for f in cls._meta.local_fields:
0.71 /testbed/django/db/models/base.py(1421):             clash = used_fields.get(f.name) or used_fields.get(f.attname) or None
0.71 /testbed/django/db/models/base.py(1426):             id_conflict = f.name == "id" and clash and clash.name == "id" and clash.model == cls
0.71 /testbed/django/db/models/base.py(1427):             if clash and not id_conflict:
0.71 /testbed/django/db/models/base.py(1438):             used_fields[f.name] = f
0.71 /testbed/django/db/models/base.py(1439):             used_fields[f.attname] = f
0.71 /testbed/django/db/models/base.py(1420):         for f in cls._meta.local_fields:
0.71 /testbed/django/db/models/base.py(1421):             clash = used_fields.get(f.name) or used_fields.get(f.attname) or None
0.71 /testbed/django/db/models/base.py(1426):             id_conflict = f.name == "id" and clash and clash.name == "id" and clash.model == cls
0.71 /testbed/django/db/models/base.py(1427):             if clash and not id_conflict:
0.71 /testbed/django/db/models/base.py(1438):             used_fields[f.name] = f
0.71 /testbed/django/db/models/base.py(1439):             used_fields[f.attname] = f
0.71 /testbed/django/db/models/base.py(1420):         for f in cls._meta.local_fields:
0.71 /testbed/django/db/models/base.py(1441):         return errors
0.71 /testbed/django/db/models/base.py(1260):                 *cls._check_model_name_db_lookup_clashes(),
0.71 /testbed/django/db/models/base.py(1470):         errors = []
0.71 /testbed/django/db/models/base.py(1471):         model_name = cls.__name__
0.71 /testbed/django/db/models/base.py(1472):         if model_name.startswith('_') or model_name.endswith('_'):
0.71 /testbed/django/db/models/base.py(1481):         elif LOOKUP_SEP in model_name:
0.71 /testbed/django/db/models/base.py(1490):         return errors
0.71 /testbed/django/db/models/base.py(1261):                 *cls._check_property_name_related_field_accessor_clashes(),
0.71 /testbed/django/db/models/base.py(1494):         errors = []
0.71 /testbed/django/db/models/base.py(1495):         property_names = cls._meta._property_names
0.71 /testbed/django/db/models/base.py(1497):             f.get_attname() for f in cls._meta._get_fields(reverse=False)
0.71 /testbed/django/db/models/base.py(1500):         for accessor in related_field_accessors:
0.71 /testbed/django/db/models/base.py(1497):             f.get_attname() for f in cls._meta._get_fields(reverse=False)
0.71 /testbed/django/db/models/base.py(1498):             if f.is_relation and f.related_model is not None
0.71 /testbed/django/db/models/base.py(1497):             f.get_attname() for f in cls._meta._get_fields(reverse=False)
0.71 /testbed/django/db/models/base.py(1498):             if f.is_relation and f.related_model is not None
0.71 /testbed/django/db/models/base.py(1497):             f.get_attname() for f in cls._meta._get_fields(reverse=False)
0.71 /testbed/django/db/models/base.py(1498):             if f.is_relation and f.related_model is not None
0.71 /testbed/django/db/models/base.py(1501):             if accessor in property_names:
0.71 /testbed/django/db/models/base.py(1500):         for accessor in related_field_accessors:
0.71 /testbed/django/db/models/base.py(1497):             f.get_attname() for f in cls._meta._get_fields(reverse=False)
0.71 /testbed/django/db/models/base.py(1498):             if f.is_relation and f.related_model is not None
0.71 /testbed/django/db/models/base.py(1501):             if accessor in property_names:
0.71 /testbed/django/db/models/base.py(1500):         for accessor in related_field_accessors:
0.71 /testbed/django/db/models/base.py(1497):             f.get_attname() for f in cls._meta._get_fields(reverse=False)
0.71 /testbed/django/db/models/base.py(1498):             if f.is_relation and f.related_model is not None
0.71 /testbed/django/db/models/base.py(1497):             f.get_attname() for f in cls._meta._get_fields(reverse=False)
0.71 /testbed/django/db/models/base.py(1498):             if f.is_relation and f.related_model is not None
0.71 /testbed/django/db/models/base.py(1497):             f.get_attname() for f in cls._meta._get_fields(reverse=False)
0.71 /testbed/django/db/models/base.py(1498):             if f.is_relation and f.related_model is not None
0.71 /testbed/django/db/models/base.py(1497):             f.get_attname() for f in cls._meta._get_fields(reverse=False)
0.71 /testbed/django/db/models/base.py(1498):             if f.is_relation and f.related_model is not None
0.71 /testbed/django/db/models/base.py(1497):             f.get_attname() for f in cls._meta._get_fields(reverse=False)
0.71 /testbed/django/db/models/base.py(1510):         return errors
0.71 /testbed/django/db/models/base.py(1262):                 *cls._check_single_primary_key(),
0.71 /testbed/django/db/models/base.py(1514):         errors = []
0.71 /testbed/django/db/models/base.py(1515):         if sum(1 for f in cls._meta.local_fields if f.primary_key) > 1:
0.71 /testbed/django/db/models/base.py(1515):         if sum(1 for f in cls._meta.local_fields if f.primary_key) > 1:
0.71 /testbed/django/db/models/base.py(1515):         if sum(1 for f in cls._meta.local_fields if f.primary_key) > 1:
0.71 /testbed/django/db/models/base.py(1515):         if sum(1 for f in cls._meta.local_fields if f.primary_key) > 1:
0.71 /testbed/django/db/models/base.py(1515):         if sum(1 for f in cls._meta.local_fields if f.primary_key) > 1:
0.71 /testbed/django/db/models/base.py(1515):         if sum(1 for f in cls._meta.local_fields if f.primary_key) > 1:
0.71 /testbed/django/db/models/base.py(1515):         if sum(1 for f in cls._meta.local_fields if f.primary_key) > 1:
0.71 /testbed/django/db/models/base.py(1515):         if sum(1 for f in cls._meta.local_fields if f.primary_key) > 1:
0.71 /testbed/django/db/models/base.py(1515):         if sum(1 for f in cls._meta.local_fields if f.primary_key) > 1:
0.71 /testbed/django/db/models/base.py(1515):         if sum(1 for f in cls._meta.local_fields if f.primary_key) > 1:
0.71 /testbed/django/db/models/base.py(1524):         return errors
0.71 /testbed/django/db/models/base.py(1264):             errors.extend(clash_errors)
0.71 /testbed/django/db/models/base.py(1267):             if not clash_errors:
0.71 /testbed/django/db/models/base.py(1268):                 errors.extend(cls._check_column_name_clashes())
0.71 /testbed/django/db/models/base.py(1446):         used_column_names = []
0.71 /testbed/django/db/models/base.py(1447):         errors = []
0.71 /testbed/django/db/models/base.py(1449):         for f in cls._meta.local_fields:
0.71 /testbed/django/db/models/base.py(1450):             _, column_name = f.get_attname_column()
0.71 /testbed/django/db/models/base.py(1453):             if column_name and column_name in used_column_names:
0.71 /testbed/django/db/models/base.py(1464):                 used_column_names.append(column_name)
0.71 /testbed/django/db/models/base.py(1449):         for f in cls._meta.local_fields:
0.71 /testbed/django/db/models/base.py(1450):             _, column_name = f.get_attname_column()
0.71 /testbed/django/db/models/base.py(1453):             if column_name and column_name in used_column_names:
0.71 /testbed/django/db/models/base.py(1464):                 used_column_names.append(column_name)
0.71 /testbed/django/db/models/base.py(1449):         for f in cls._meta.local_fields:
0.71 /testbed/django/db/models/base.py(1450):             _, column_name = f.get_attname_column()
0.71 /testbed/django/db/models/base.py(1453):             if column_name and column_name in used_column_names:
0.71 /testbed/django/db/models/base.py(1464):                 used_column_names.append(column_name)
0.71 /testbed/django/db/models/base.py(1449):         for f in cls._meta.local_fields:
0.71 /testbed/django/db/models/base.py(1450):             _, column_name = f.get_attname_column()
0.71 /testbed/django/db/models/base.py(1453):             if column_name and column_name in used_column_names:
0.71 /testbed/django/db/models/base.py(1464):                 used_column_names.append(column_name)
0.71 /testbed/django/db/models/base.py(1449):         for f in cls._meta.local_fields:
0.71 /testbed/django/db/models/base.py(1450):             _, column_name = f.get_attname_column()
0.71 /testbed/django/db/models/base.py(1453):             if column_name and column_name in used_column_names:
0.71 /testbed/django/db/models/base.py(1464):                 used_column_names.append(column_name)
0.71 /testbed/django/db/models/base.py(1449):         for f in cls._meta.local_fields:
0.71 /testbed/django/db/models/base.py(1450):             _, column_name = f.get_attname_column()
0.71 /testbed/django/db/models/base.py(1453):             if column_name and column_name in used_column_names:
0.71 /testbed/django/db/models/base.py(1464):                 used_column_names.append(column_name)
0.71 /testbed/django/db/models/base.py(1449):         for f in cls._meta.local_fields:
0.71 /testbed/django/db/models/base.py(1450):             _, column_name = f.get_attname_column()
0.71 /testbed/django/db/models/base.py(1453):             if column_name and column_name in used_column_names:
0.71 /testbed/django/db/models/base.py(1464):                 used_column_names.append(column_name)
0.71 /testbed/django/db/models/base.py(1449):         for f in cls._meta.local_fields:
0.71 /testbed/django/db/models/base.py(1450):             _, column_name = f.get_attname_column()
0.71 /testbed/django/db/models/base.py(1453):             if column_name and column_name in used_column_names:
0.71 /testbed/django/db/models/base.py(1464):                 used_column_names.append(column_name)
0.71 /testbed/django/db/models/base.py(1449):         for f in cls._meta.local_fields:
0.71 /testbed/django/db/models/base.py(1466):         return errors
0.71 /testbed/django/db/models/base.py(1269):             errors += [
0.71 /testbed/django/db/models/base.py(1270):                 *cls._check_index_together(),
0.71 /testbed/django/db/models/base.py(1529):         if not isinstance(cls._meta.index_together, (tuple, list)):
0.71 /testbed/django/db/models/base.py(1538):         elif any(not isinstance(fields, (tuple, list)) for fields in cls._meta.index_together):
0.71 /testbed/django/db/models/base.py(1538):         elif any(not isinstance(fields, (tuple, list)) for fields in cls._meta.index_together):
0.71 /testbed/django/db/models/base.py(1548):             errors = []
0.71 /testbed/django/db/models/base.py(1549):             for fields in cls._meta.index_together:
0.71 /testbed/django/db/models/base.py(1551):             return errors
0.71 /testbed/django/db/models/base.py(1271):                 *cls._check_unique_together(),
0.71 /testbed/django/db/models/base.py(1556):         if not isinstance(cls._meta.unique_together, (tuple, list)):
0.71 /testbed/django/db/models/base.py(1565):         elif any(not isinstance(fields, (tuple, list)) for fields in cls._meta.unique_together):
0.71 /testbed/django/db/models/base.py(1565):         elif any(not isinstance(fields, (tuple, list)) for fields in cls._meta.unique_together):
0.71 /testbed/django/db/models/base.py(1575):             errors = []
0.71 /testbed/django/db/models/base.py(1576):             for fields in cls._meta.unique_together:
0.71 /testbed/django/db/models/base.py(1578):             return errors
0.71 /testbed/django/db/models/base.py(1272):                 *cls._check_indexes(),
0.71 /testbed/django/db/models/base.py(1583):         errors = []
0.71 /testbed/django/db/models/base.py(1584):         for index in cls._meta.indexes:
0.71 /testbed/django/db/models/base.py(1605):         fields = [field for index in cls._meta.indexes for field, _ in index.fields_orders]
0.71 /testbed/django/db/models/base.py(1605):         fields = [field for index in cls._meta.indexes for field, _ in index.fields_orders]
0.71 /testbed/django/db/models/base.py(1606):         errors.extend(cls._check_local_fields(fields, 'indexes'))
0.71 /testbed/django/db/models/base.py(1611):         from django.db import models
0.71 /testbed/django/db/models/base.py(1615):         forward_fields_map = {}
0.71 /testbed/django/db/models/base.py(1616):         for field in cls._meta._get_fields(reverse=False):
0.71 /testbed/django/db/models/base.py(1617):             forward_fields_map[field.name] = field
0.71 /testbed/django/db/models/base.py(1618):             if hasattr(field, 'attname'):
0.71 /testbed/django/db/models/base.py(1619):                 forward_fields_map[field.attname] = field
0.71 /testbed/django/db/models/base.py(1616):         for field in cls._meta._get_fields(reverse=False):
0.71 /testbed/django/db/models/base.py(1617):             forward_fields_map[field.name] = field
0.71 /testbed/django/db/models/base.py(1618):             if hasattr(field, 'attname'):
0.71 /testbed/django/db/models/base.py(1619):                 forward_fields_map[field.attname] = field
0.71 /testbed/django/db/models/base.py(1616):         for field in cls._meta._get_fields(reverse=False):
0.71 /testbed/django/db/models/base.py(1617):             forward_fields_map[field.name] = field
0.71 /testbed/django/db/models/base.py(1618):             if hasattr(field, 'attname'):
0.71 /testbed/django/db/models/base.py(1619):                 forward_fields_map[field.attname] = field
0.71 /testbed/django/db/models/base.py(1616):         for field in cls._meta._get_fields(reverse=False):
0.71 /testbed/django/db/models/base.py(1617):             forward_fields_map[field.name] = field
0.71 /testbed/django/db/models/base.py(1618):             if hasattr(field, 'attname'):
0.71 /testbed/django/db/models/base.py(1619):                 forward_fields_map[field.attname] = field
0.71 /testbed/django/db/models/base.py(1616):         for field in cls._meta._get_fields(reverse=False):
0.71 /testbed/django/db/models/base.py(1617):             forward_fields_map[field.name] = field
0.71 /testbed/django/db/models/base.py(1618):             if hasattr(field, 'attname'):
0.71 /testbed/django/db/models/base.py(1619):                 forward_fields_map[field.attname] = field
0.71 /testbed/django/db/models/base.py(1616):         for field in cls._meta._get_fields(reverse=False):
0.71 /testbed/django/db/models/base.py(1617):             forward_fields_map[field.name] = field
0.71 /testbed/django/db/models/base.py(1618):             if hasattr(field, 'attname'):
0.71 /testbed/django/db/models/base.py(1619):                 forward_fields_map[field.attname] = field
0.71 /testbed/django/db/models/base.py(1616):         for field in cls._meta._get_fields(reverse=False):
0.71 /testbed/django/db/models/base.py(1617):             forward_fields_map[field.name] = field
0.71 /testbed/django/db/models/base.py(1618):             if hasattr(field, 'attname'):
0.71 /testbed/django/db/models/base.py(1619):                 forward_fields_map[field.attname] = field
0.71 /testbed/django/db/models/base.py(1616):         for field in cls._meta._get_fields(reverse=False):
0.71 /testbed/django/db/models/base.py(1617):             forward_fields_map[field.name] = field
0.71 /testbed/django/db/models/base.py(1618):             if hasattr(field, 'attname'):
0.71 /testbed/django/db/models/base.py(1619):                 forward_fields_map[field.attname] = field
0.71 /testbed/django/db/models/base.py(1616):         for field in cls._meta._get_fields(reverse=False):
0.71 /testbed/django/db/models/base.py(1621):         errors = []
0.71 /testbed/django/db/models/base.py(1622):         for field_name in fields:
0.71 /testbed/django/db/models/base.py(1657):         return errors
0.71 /testbed/django/db/models/base.py(1607):         return errors
0.71 /testbed/django/db/models/base.py(1273):                 *cls._check_ordering(),
0.71 /testbed/django/db/models/base.py(1665):         if cls._meta._ordering_clash:
0.71 /testbed/django/db/models/base.py(1674):         if cls._meta.order_with_respect_to or not cls._meta.ordering:
0.71 /testbed/django/db/models/base.py(1677):         if not isinstance(cls._meta.ordering, (list, tuple)):
0.71 /testbed/django/db/models/base.py(1686):         errors = []
0.71 /testbed/django/db/models/base.py(1687):         fields = cls._meta.ordering
0.71 /testbed/django/db/models/base.py(1690):         fields = (f for f in fields if isinstance(f, str) and f != '?')
0.71 /testbed/django/db/models/base.py(1693):         fields = ((f[1:] if f.startswith('-') else f) for f in fields)
0.71 /testbed/django/db/models/base.py(1696):         _fields = []
0.71 /testbed/django/db/models/base.py(1697):         related_fields = []
0.71 /testbed/django/db/models/base.py(1698):         for f in fields:
0.71 /testbed/django/db/models/base.py(1693):         fields = ((f[1:] if f.startswith('-') else f) for f in fields)
0.71 /testbed/django/db/models/base.py(1690):         fields = (f for f in fields if isinstance(f, str) and f != '?')
0.71 /testbed/django/db/models/base.py(1699):             if LOOKUP_SEP in f:
0.71 /testbed/django/db/models/base.py(1702):                 _fields.append(f)
0.71 /testbed/django/db/models/base.py(1698):         for f in fields:
0.71 /testbed/django/db/models/base.py(1693):         fields = ((f[1:] if f.startswith('-') else f) for f in fields)
0.71 /testbed/django/db/models/base.py(1690):         fields = (f for f in fields if isinstance(f, str) and f != '?')
0.71 /testbed/django/db/models/base.py(1703):         fields = _fields
0.71 /testbed/django/db/models/base.py(1706):         for field in related_fields:
test_ordering_with_related_pk (test_coverup_django__django-11820.OrderingValidationTest) ... 0.71 /testbed/django/db/models/base.py(1733):         fields = {f for f in fields if f != 'pk'}
0.71 /testbed/django/db/models/base.py(1733):         fields = {f for f in fields if f != 'pk'}
0.71 /testbed/django/db/models/base.py(1733):         fields = {f for f in fields if f != 'pk'}
0.71 /testbed/django/db/models/base.py(1736):         invalid_fields = []
0.71 /testbed/django/db/models/base.py(1740):         opts = cls._meta
0.71 /testbed/django/db/models/base.py(1741):         valid_fields = set(chain.from_iterable(
0.71 /testbed/django/db/models/base.py(1742):             (f.name, f.attname) if not (f.auto_created and not f.concrete) else (f.field.related_query_name(),)
0.71 /testbed/django/db/models/base.py(1743):             for f in chain(opts.fields, opts.related_objects)
0.71 /testbed/django/db/models/base.py(1742):             (f.name, f.attname) if not (f.auto_created and not f.concrete) else (f.field.related_query_name(),)
0.71 /testbed/django/db/models/base.py(1743):             for f in chain(opts.fields, opts.related_objects)
0.71 /testbed/django/db/models/base.py(1742):             (f.name, f.attname) if not (f.auto_created and not f.concrete) else (f.field.related_query_name(),)
0.71 /testbed/django/db/models/base.py(1743):             for f in chain(opts.fields, opts.related_objects)
0.71 /testbed/django/db/models/base.py(1742):             (f.name, f.attname) if not (f.auto_created and not f.concrete) else (f.field.related_query_name(),)
0.71 /testbed/django/db/models/base.py(1743):             for f in chain(opts.fields, opts.related_objects)
0.71 /testbed/django/db/models/base.py(1742):             (f.name, f.attname) if not (f.auto_created and not f.concrete) else (f.field.related_query_name(),)
0.71 /testbed/django/db/models/base.py(1743):             for f in chain(opts.fields, opts.related_objects)
0.71 /testbed/django/db/models/base.py(1742):             (f.name, f.attname) if not (f.auto_created and not f.concrete) else (f.field.related_query_name(),)
0.71 /testbed/django/db/models/base.py(1743):             for f in chain(opts.fields, opts.related_objects)
0.71 /testbed/django/db/models/base.py(1742):             (f.name, f.attname) if not (f.auto_created and not f.concrete) else (f.field.related_query_name(),)
0.71 /testbed/django/db/models/base.py(1743):             for f in chain(opts.fields, opts.related_objects)
0.71 /testbed/django/db/models/base.py(1742):             (f.name, f.attname) if not (f.auto_created and not f.concrete) else (f.field.related_query_name(),)
0.71 /testbed/django/db/models/base.py(1743):             for f in chain(opts.fields, opts.related_objects)
0.71 /testbed/django/db/models/base.py(1742):             (f.name, f.attname) if not (f.auto_created and not f.concrete) else (f.field.related_query_name(),)
0.71 /testbed/django/db/models/base.py(1743):             for f in chain(opts.fields, opts.related_objects)
0.71 /testbed/django/db/models/base.py(1742):             (f.name, f.attname) if not (f.auto_created and not f.concrete) else (f.field.related_query_name(),)
0.71 /testbed/django/db/models/base.py(1746):         invalid_fields.extend(fields - valid_fields)
0.71 /testbed/django/db/models/base.py(1748):         for invalid_field in invalid_fields:
0.71 /testbed/django/db/models/base.py(1757):         return errors
0.71 /testbed/django/db/models/base.py(1274):                 *cls._check_constraints(),
0.71 /testbed/django/db/models/base.py(1834):         errors = []
0.71 /testbed/django/db/models/base.py(1835):         for db in settings.DATABASES:
0.71 /testbed/django/db/models/base.py(1836):             if not router.allow_migrate_model(db, cls):
0.71 /testbed/django/db/models/base.py(1838):             connection = connections[db]
0.71 /testbed/django/db/models/base.py(1840):                 connection.features.supports_table_check_constraints or
0.71 /testbed/django/db/models/base.py(1835):         for db in settings.DATABASES:
0.71 /testbed/django/db/models/base.py(1836):             if not router.allow_migrate_model(db, cls):
0.71 /testbed/django/db/models/base.py(1838):             connection = connections[db]
0.71 /testbed/django/db/models/base.py(1840):                 connection.features.supports_table_check_constraints or
0.71 /testbed/django/db/models/base.py(1835):         for db in settings.DATABASES:
0.71 /testbed/django/db/models/base.py(1856):         return errors
0.71 /testbed/django/db/models/base.py(1277):         return errors
System check identified no issues (0 silenced).
0.73 /testbed/django/db/models/base.py(1250):         errors = [*cls._check_swappable(), *cls._check_model(), *cls._check_managers(**kwargs)]
0.73 /testbed/django/db/models/base.py(1282):         errors = []
0.73 /testbed/django/db/models/base.py(1283):         if cls._meta.swapped:
0.73 /testbed/django/db/models/base.py(1304):         return errors
0.73 /testbed/django/db/models/base.py(1308):         errors = []
0.73 /testbed/django/db/models/base.py(1309):         if cls._meta.proxy:
0.73 /testbed/django/db/models/base.py(1317):         return errors
0.73 /testbed/django/db/models/base.py(1322):         errors = []
0.73 /testbed/django/db/models/base.py(1323):         for manager in cls._meta.managers:
0.73 /testbed/django/db/models/base.py(1324):             errors.extend(manager.check(**kwargs))
0.73 /testbed/django/db/models/base.py(1323):         for manager in cls._meta.managers:
0.73 /testbed/django/db/models/base.py(1325):         return errors
0.73 /testbed/django/db/models/base.py(1251):         if not cls._meta.swapped:
0.73 /testbed/django/db/models/base.py(1252):             errors += [
0.73 /testbed/django/db/models/base.py(1253):                 *cls._check_fields(**kwargs),
0.73 /testbed/django/db/models/base.py(1330):         errors = []
0.73 /testbed/django/db/models/base.py(1331):         for field in cls._meta.local_fields:
0.73 /testbed/django/db/models/base.py(1332):             errors.extend(field.check(**kwargs))
0.73 /testbed/django/db/models/base.py(1331):         for field in cls._meta.local_fields:
0.73 /testbed/django/db/models/base.py(1332):             errors.extend(field.check(**kwargs))
0.73 /testbed/django/db/models/base.py(1331):         for field in cls._meta.local_fields:
0.73 /testbed/django/db/models/base.py(1333):         for field in cls._meta.local_many_to_many:
0.73 /testbed/django/db/models/base.py(1335):         return errors
0.73 /testbed/django/db/models/base.py(1254):                 *cls._check_m2m_through_same_relationship(),
0.73 /testbed/django/db/models/base.py(1342):         errors = []
0.73 /testbed/django/db/models/base.py(1343):         seen_intermediary_signatures = []
0.73 /testbed/django/db/models/base.py(1345):         fields = cls._meta.local_many_to_many
0.73 /testbed/django/db/models/base.py(1348):         fields = (f for f in fields if isinstance(f.remote_field.model, ModelBase))
0.73 /testbed/django/db/models/base.py(1351):         fields = (f for f in fields if isinstance(f.remote_field.through, ModelBase))
0.73 /testbed/django/db/models/base.py(1353):         for f in fields:
0.73 /testbed/django/db/models/base.py(1351):         fields = (f for f in fields if isinstance(f.remote_field.through, ModelBase))
0.73 /testbed/django/db/models/base.py(1348):         fields = (f for f in fields if isinstance(f.remote_field.model, ModelBase))
0.73 /testbed/django/db/models/base.py(1367):         return errors
0.73 /testbed/django/db/models/base.py(1255):                 *cls._check_long_column_names(),
0.73 /testbed/django/db/models/base.py(1765):         errors = []
0.73 /testbed/django/db/models/base.py(1766):         allowed_len = None
0.73 /testbed/django/db/models/base.py(1767):         db_alias = None
0.73 /testbed/django/db/models/base.py(1770):         for db in settings.DATABASES:
0.73 /testbed/django/db/models/base.py(1772):             if not router.allow_migrate_model(db, cls):
0.73 /testbed/django/db/models/base.py(1774):             connection = connections[db]
0.73 /testbed/django/db/models/base.py(1775):             max_name_length = connection.ops.max_name_length()
0.73 /testbed/django/db/models/base.py(1776):             if max_name_length is None or connection.features.truncates_names:
0.73 /testbed/django/db/models/base.py(1770):         for db in settings.DATABASES:
0.73 /testbed/django/db/models/base.py(1772):             if not router.allow_migrate_model(db, cls):
0.73 /testbed/django/db/models/base.py(1774):             connection = connections[db]
0.73 /testbed/django/db/models/base.py(1775):             max_name_length = connection.ops.max_name_length()
0.73 /testbed/django/db/models/base.py(1776):             if max_name_length is None or connection.features.truncates_names:
0.73 /testbed/django/db/models/base.py(1770):         for db in settings.DATABASES:
0.73 /testbed/django/db/models/base.py(1786):         if allowed_len is None:
0.73 /testbed/django/db/models/base.py(1787):             return errors
0.73 /testbed/django/db/models/base.py(1258):                 *cls._check_id_field(),
0.73 /testbed/django/db/models/base.py(1372):         fields = [f for f in cls._meta.local_fields if f.name == 'id' and f != cls._meta.pk]
0.73 /testbed/django/db/models/base.py(1372):         fields = [f for f in cls._meta.local_fields if f.name == 'id' and f != cls._meta.pk]
0.73 /testbed/django/db/models/base.py(1372):         fields = [f for f in cls._meta.local_fields if f.name == 'id' and f != cls._meta.pk]
0.73 /testbed/django/db/models/base.py(1372):         fields = [f for f in cls._meta.local_fields if f.name == 'id' and f != cls._meta.pk]
0.73 /testbed/django/db/models/base.py(1374):         if fields and not fields[0].primary_key and cls._meta.pk.name == 'id':
0.73 /testbed/django/db/models/base.py(1384):             return []
0.73 /testbed/django/db/models/base.py(1259):                 *cls._check_field_name_clashes(),
0.73 /testbed/django/db/models/base.py(1389):         errors = []
0.73 /testbed/django/db/models/base.py(1390):         used_fields = {}  # name or attname -> field
0.73 /testbed/django/db/models/base.py(1393):         for parent in cls._meta.get_parent_list():
0.73 /testbed/django/db/models/base.py(1415):         for parent in cls._meta.get_parent_list():
0.73 /testbed/django/db/models/base.py(1420):         for f in cls._meta.local_fields:
0.73 /testbed/django/db/models/base.py(1421):             clash = used_fields.get(f.name) or used_fields.get(f.attname) or None
0.73 /testbed/django/db/models/base.py(1426):             id_conflict = f.name == "id" and clash and clash.name == "id" and clash.model == cls
0.73 /testbed/django/db/models/base.py(1427):             if clash and not id_conflict:
0.73 /testbed/django/db/models/base.py(1438):             used_fields[f.name] = f
0.73 /testbed/django/db/models/base.py(1439):             used_fields[f.attname] = f
0.73 /testbed/django/db/models/base.py(1420):         for f in cls._meta.local_fields:
0.73 /testbed/django/db/models/base.py(1421):             clash = used_fields.get(f.name) or used_fields.get(f.attname) or None
0.73 /testbed/django/db/models/base.py(1426):             id_conflict = f.name == "id" and clash and clash.name == "id" and clash.model == cls
0.73 /testbed/django/db/models/base.py(1427):             if clash and not id_conflict:
0.73 /testbed/django/db/models/base.py(1438):             used_fields[f.name] = f
0.73 /testbed/django/db/models/base.py(1439):             used_fields[f.attname] = f
0.73 /testbed/django/db/models/base.py(1420):         for f in cls._meta.local_fields:
0.73 /testbed/django/db/models/base.py(1441):         return errors
0.73 /testbed/django/db/models/base.py(1260):                 *cls._check_model_name_db_lookup_clashes(),
0.73 /testbed/django/db/models/base.py(1470):         errors = []
0.73 /testbed/django/db/models/base.py(1471):         model_name = cls.__name__
0.73 /testbed/django/db/models/base.py(1472):         if model_name.startswith('_') or model_name.endswith('_'):
0.73 /testbed/django/db/models/base.py(1481):         elif LOOKUP_SEP in model_name:
0.73 /testbed/django/db/models/base.py(1490):         return errors
0.73 /testbed/django/db/models/base.py(1261):                 *cls._check_property_name_related_field_accessor_clashes(),
0.73 /testbed/django/db/models/base.py(1494):         errors = []
0.73 /testbed/django/db/models/base.py(1495):         property_names = cls._meta._property_names
0.74 /testbed/django/db/models/base.py(1497):             f.get_attname() for f in cls._meta._get_fields(reverse=False)
0.74 /testbed/django/db/models/base.py(1500):         for accessor in related_field_accessors:
0.74 /testbed/django/db/models/base.py(1497):             f.get_attname() for f in cls._meta._get_fields(reverse=False)
0.74 /testbed/django/db/models/base.py(1498):             if f.is_relation and f.related_model is not None
0.74 /testbed/django/db/models/base.py(1497):             f.get_attname() for f in cls._meta._get_fields(reverse=False)
0.74 /testbed/django/db/models/base.py(1498):             if f.is_relation and f.related_model is not None
0.74 /testbed/django/db/models/base.py(1501):             if accessor in property_names:
0.74 /testbed/django/db/models/base.py(1500):         for accessor in related_field_accessors:
0.74 /testbed/django/db/models/base.py(1497):             f.get_attname() for f in cls._meta._get_fields(reverse=False)
0.74 /testbed/django/db/models/base.py(1510):         return errors
0.74 /testbed/django/db/models/base.py(1262):                 *cls._check_single_primary_key(),
0.74 /testbed/django/db/models/base.py(1514):         errors = []
0.74 /testbed/django/db/models/base.py(1515):         if sum(1 for f in cls._meta.local_fields if f.primary_key) > 1:
0.74 /testbed/django/db/models/base.py(1515):         if sum(1 for f in cls._meta.local_fields if f.primary_key) > 1:
0.74 /testbed/django/db/models/base.py(1515):         if sum(1 for f in cls._meta.local_fields if f.primary_key) > 1:
0.74 /testbed/django/db/models/base.py(1515):         if sum(1 for f in cls._meta.local_fields if f.primary_key) > 1:
0.74 /testbed/django/db/models/base.py(1524):         return errors
0.74 /testbed/django/db/models/base.py(1264):             errors.extend(clash_errors)
0.74 /testbed/django/db/models/base.py(1267):             if not clash_errors:
0.74 /testbed/django/db/models/base.py(1268):                 errors.extend(cls._check_column_name_clashes())
0.74 /testbed/django/db/models/base.py(1446):         used_column_names = []
0.74 /testbed/django/db/models/base.py(1447):         errors = []
0.74 /testbed/django/db/models/base.py(1449):         for f in cls._meta.local_fields:
0.74 /testbed/django/db/models/base.py(1450):             _, column_name = f.get_attname_column()
0.74 /testbed/django/db/models/base.py(1453):             if column_name and column_name in used_column_names:
0.74 /testbed/django/db/models/base.py(1464):                 used_column_names.append(column_name)
0.74 /testbed/django/db/models/base.py(1449):         for f in cls._meta.local_fields:
0.74 /testbed/django/db/models/base.py(1450):             _, column_name = f.get_attname_column()
0.74 /testbed/django/db/models/base.py(1453):             if column_name and column_name in used_column_names:
0.74 /testbed/django/db/models/base.py(1464):                 used_column_names.append(column_name)
0.74 /testbed/django/db/models/base.py(1449):         for f in cls._meta.local_fields:
0.74 /testbed/django/db/models/base.py(1466):         return errors
0.74 /testbed/django/db/models/base.py(1269):             errors += [
0.74 /testbed/django/db/models/base.py(1270):                 *cls._check_index_together(),
0.74 /testbed/django/db/models/base.py(1529):         if not isinstance(cls._meta.index_together, (tuple, list)):
0.74 /testbed/django/db/models/base.py(1538):         elif any(not isinstance(fields, (tuple, list)) for fields in cls._meta.index_together):
0.74 /testbed/django/db/models/base.py(1538):         elif any(not isinstance(fields, (tuple, list)) for fields in cls._meta.index_together):
0.74 /testbed/django/db/models/base.py(1548):             errors = []
0.74 /testbed/django/db/models/base.py(1549):             for fields in cls._meta.index_together:
0.74 /testbed/django/db/models/base.py(1551):             return errors
0.74 /testbed/django/db/models/base.py(1271):                 *cls._check_unique_together(),
0.74 /testbed/django/db/models/base.py(1556):         if not isinstance(cls._meta.unique_together, (tuple, list)):
0.74 /testbed/django/db/models/base.py(1565):         elif any(not isinstance(fields, (tuple, list)) for fields in cls._meta.unique_together):
0.74 /testbed/django/db/models/base.py(1565):         elif any(not isinstance(fields, (tuple, list)) for fields in cls._meta.unique_together):
0.74 /testbed/django/db/models/base.py(1575):             errors = []
0.74 /testbed/django/db/models/base.py(1576):             for fields in cls._meta.unique_together:
0.74 /testbed/django/db/models/base.py(1578):             return errors
0.74 /testbed/django/db/models/base.py(1272):                 *cls._check_indexes(),
0.74 /testbed/django/db/models/base.py(1583):         errors = []
0.74 /testbed/django/db/models/base.py(1584):         for index in cls._meta.indexes:
0.74 /testbed/django/db/models/base.py(1605):         fields = [field for index in cls._meta.indexes for field, _ in index.fields_orders]
0.74 /testbed/django/db/models/base.py(1605):         fields = [field for index in cls._meta.indexes for field, _ in index.fields_orders]
0.74 /testbed/django/db/models/base.py(1606):         errors.extend(cls._check_local_fields(fields, 'indexes'))
0.74 /testbed/django/db/models/base.py(1611):         from django.db import models
0.74 /testbed/django/db/models/base.py(1615):         forward_fields_map = {}
0.74 /testbed/django/db/models/base.py(1616):         for field in cls._meta._get_fields(reverse=False):
0.74 /testbed/django/db/models/base.py(1617):             forward_fields_map[field.name] = field
0.74 /testbed/django/db/models/base.py(1618):             if hasattr(field, 'attname'):
0.74 /testbed/django/db/models/base.py(1619):                 forward_fields_map[field.attname] = field
0.74 /testbed/django/db/models/base.py(1616):         for field in cls._meta._get_fields(reverse=False):
0.74 /testbed/django/db/models/base.py(1617):             forward_fields_map[field.name] = field
0.74 /testbed/django/db/models/base.py(1618):             if hasattr(field, 'attname'):
0.74 /testbed/django/db/models/base.py(1619):                 forward_fields_map[field.attname] = field
0.74 /testbed/django/db/models/base.py(1616):         for field in cls._meta._get_fields(reverse=False):
0.74 /testbed/django/db/models/base.py(1621):         errors = []
0.74 /testbed/django/db/models/base.py(1622):         for field_name in fields:
0.74 /testbed/django/db/models/base.py(1657):         return errors
0.74 /testbed/django/db/models/base.py(1607):         return errors
0.74 /testbed/django/db/models/base.py(1273):                 *cls._check_ordering(),
0.74 /testbed/django/db/models/base.py(1665):         if cls._meta._ordering_clash:
0.74 /testbed/django/db/models/base.py(1674):         if cls._meta.order_with_respect_to or not cls._meta.ordering:
0.74 /testbed/django/db/models/base.py(1677):         if not isinstance(cls._meta.ordering, (list, tuple)):
0.74 /testbed/django/db/models/base.py(1686):         errors = []
0.74 /testbed/django/db/models/base.py(1687):         fields = cls._meta.ordering
0.74 /testbed/django/db/models/base.py(1690):         fields = (f for f in fields if isinstance(f, str) and f != '?')
0.74 /testbed/django/db/models/base.py(1693):         fields = ((f[1:] if f.startswith('-') else f) for f in fields)
0.74 /testbed/django/db/models/base.py(1696):         _fields = []
0.74 /testbed/django/db/models/base.py(1697):         related_fields = []
0.74 /testbed/django/db/models/base.py(1698):         for f in fields:
0.74 /testbed/django/db/models/base.py(1693):         fields = ((f[1:] if f.startswith('-') else f) for f in fields)
0.74 /testbed/django/db/models/base.py(1690):         fields = (f for f in fields if isinstance(f, str) and f != '?')
0.74 /testbed/django/db/models/base.py(1699):             if LOOKUP_SEP in f:
0.74 /testbed/django/db/models/base.py(1700):                 related_fields.append(f)
0.74 /testbed/django/db/models/base.py(1698):         for f in fields:
0.74 /testbed/django/db/models/base.py(1693):         fields = ((f[1:] if f.startswith('-') else f) for f in fields)
0.74 /testbed/django/db/models/base.py(1690):         fields = (f for f in fields if isinstance(f, str) and f != '?')
0.74 /testbed/django/db/models/base.py(1703):         fields = _fields
0.74 /testbed/django/db/models/base.py(1706):         for field in related_fields:
0.74 /testbed/django/db/models/base.py(1707):             _cls = cls
0.74 /testbed/django/db/models/base.py(1708):             fld = None
0.74 /testbed/django/db/models/base.py(1709):             for part in field.split(LOOKUP_SEP):
0.74 /testbed/django/db/models/base.py(1710):                 try:
0.74 /testbed/django/db/models/base.py(1712):                     if part == 'pk':
0.74 /testbed/django/db/models/base.py(1715):                         fld = _cls._meta.get_field(part)
0.74 /testbed/django/db/models/base.py(1716):                     if fld.is_relation:
0.74 /testbed/django/db/models/base.py(1717):                         _cls = fld.get_path_info()[-1].to_opts.model
0.74 /testbed/django/db/models/base.py(1709):             for part in field.split(LOOKUP_SEP):
0.74 /testbed/django/db/models/base.py(1710):                 try:
0.74 /testbed/django/db/models/base.py(1712):                     if part == 'pk':
0.74 /testbed/django/db/models/base.py(1713):                         fld = _cls._meta.pk
0.74 /testbed/django/db/models/base.py(1716):                     if fld.is_relation:
0.74 /testbed/django/db/models/base.py(1719):                         _cls = None
0.74 /testbed/django/db/models/base.py(1709):             for part in field.split(LOOKUP_SEP):
0.74 /testbed/django/db/models/base.py(1706):         for field in related_fields:
0.74 /testbed/django/db/models/base.py(1733):         fields = {f for f in fields if f != 'pk'}
0.74 /testbed/django/db/models/base.py(1733):         fields = {f for f in fields if f != 'pk'}
0.74 /testbed/django/db/models/base.py(1736):         invalid_fields = []
0.74 /testbed/django/db/models/base.py(1740):         opts = cls._meta
0.74 /testbed/django/db/models/base.py(1741):         valid_fields = set(chain.from_iterable(
0.74 /testbed/django/db/models/base.py(1742):             (f.name, f.attname) if not (f.auto_created and not f.concrete) else (f.field.related_query_name(),)
0.74 /testbed/django/db/models/base.py(1743):             for f in chain(opts.fields, opts.related_objects)
0.74 /testbed/django/db/models/base.py(1742):             (f.name, f.attname) if not (f.auto_created and not f.concrete) else (f.field.related_query_name(),)
0.74 /testbed/django/db/models/base.py(1743):             for f in chain(opts.fields, opts.related_objects)
0.74 /testbed/django/db/models/base.py(1742):             (f.name, f.attname) if not (f.auto_created and not f.concrete) else (f.field.related_query_name(),)
0.74 /testbed/django/db/models/base.py(1743):             for f in chain(opts.fields, opts.related_objects)
0.74 /testbed/django/db/models/base.py(1742):             (f.name, f.attname) if not (f.auto_created and not f.concrete) else (f.field.related_query_name(),)
0.74 /testbed/django/db/models/base.py(1746):         invalid_fields.extend(fields - valid_fields)
0.74 /testbed/django/db/models/base.py(1748):         for invalid_field in invalid_fields:
0.74 /testbed/django/db/models/base.py(1757):         return errors
0.74 /testbed/django/db/models/base.py(1274):                 *cls._check_constraints(),
0.74 /testbed/django/db/models/base.py(1834):         errors = []
0.74 /testbed/django/db/models/base.py(1835):         for db in settings.DATABASES:
0.74 /testbed/django/db/models/base.py(1836):             if not router.allow_migrate_model(db, cls):
0.74 /testbed/django/db/models/base.py(1838):             connection = connections[db]
0.74 /testbed/django/db/models/base.py(1840):                 connection.features.supports_table_check_constraints or
0.74 /testbed/django/db/models/base.py(1835):         for db in settings.DATABASES:
0.74 /testbed/django/db/models/base.py(1836):             if not router.allow_migrate_model(db, cls):
0.74 /testbed/django/db/models/base.py(1838):             connection = connections[db]
0.74 /testbed/django/db/models/base.py(1840):                 connection.features.supports_table_check_constraints or
0.74 /testbed/django/db/models/base.py(1835):         for db in settings.DATABASES:
0.74 /testbed/django/db/models/base.py(1856):         return errors
0.74 /testbed/django/db/models/base.py(1277):         return errors
ok

----------------------------------------------------------------------
Ran 1 test in 0.003s

OK
+ cat coverage.cover
{"/testbed/django/db/models/base.py": {"1": 1, "2": 1, "3": 1, "4": 1, "5": 1, "7": 1, "8": 1, "9": 1, "10": 1, "14": 1, "18": 1, "21": 1, "22": 1, "23": 1, "24": 1, "27": 1, "28": 1, "29": 1, "30": 1, "31": 1, "34": 1, "35": 1, "36": 1, "37": 1, "38": 1, "41": 2, "49": 1, "52": 1, "66": 1, "71": 2, "384": 2, "392": 2, "403": 2, "1865": 1, "1875": 1, "1882": 1, "1899": 1, "1909": 1, "42": 1, "45": 1, "43": 0, "46": 0, "60": 24, "61": 24, "62": 24, "68": 245, "73": 1, "323": 1, "329": 1, "375": 1, "379": 1, "74": 17, "78": 51, "79": 17, "80": 1, "83": 16, "84": 16, "85": 16, "86": 16, "87": 2, "88": 16, "92": 16, "93": 138, "94": 122, "95": 47, "97": 75, "98": 16, "100": 16, "101": 16, "102": 16, "104": 16, "107": 16, "109": 16, "110": 11, "111": 0, "112": 0, "113": 0, "115": 0, "119": 11, "121": 16, "122": 16, "123": 12, "124": 12, "125": 12, "126": 12, "127": 12, "128": 36, "129": 12, "130": 12, "131": 12, "132": 12, "133": 12, "134": 12, "135": 12, "136": 12, "137": 36, "138": 12, "139": 12, "140": 12, "141": 12, "145": 0, "146": 0, "147": 0, "148": 0, "150": 16, "154": 16, "155": 0, "159": 63, "160": 47, "163": 16, "164": 16, "165": 16, "166": 16, "168": 71, "171": 16, "172": 0, "173": 0, "174": 0, "175": 0, "176": 0, "177": 0, "178": 0, "181": 0, "182": 0, "183": 0, "184": 0, "185": 0, "186": 0, "187": 0, "188": 0, "189": 0, "191": 16, "194": 16, "195": 49, "197": 33, "198": 13, "200": 20, "201": 0, "203": 72, "204": 52, "205": 0, "206": 0, "209": 16, "211": 70, "212": 54, "215": 50, "216": 50, "218": 4, "219": 4, "222": 0, "223": 0, "224": 0, "225": 0, "227": 0, "228": 0, "229": 0, "233": 0, "236": 0, "237": 0, "238": 0, "239": 0, "240": 0, "241": 0, "242": 0, "243": 0, "244": 0, "245": 0, "246": 0, "247": 0, "250": 0, "251": 0, "252": 0, "255": 0, "256": 0, "257": 0, "263": 0, "264": 0, "266": 0, "267": 0, "269": 4, "272": 24, "273": 20, "274": 20, "275": 20, "276": 20, "277": 20, "280": 20, "281": 0, "282": 0, "283": 0, "286": 4, "290": 4, "291": 0, "292": 0, "293": 0, "294": 0, "296": 0, "297": 0, "298": 0, "302": 0, "303": 0, "304": 0, "305": 0, "309": 32, "311": 16, "315": 4, "316": 4, "317": 4, "319": 12, "320": 12, "321": 12, "324": 123, "325": 99, "327": 24, "331": 12, "332": 12, "334": 12, "335": 0, "336": 0, "343": 0, "344": 0, "345": 0, "346": 0, "349": 12, "350": 43, "352": 12, "353": 12, "354": 0, "356": 12, "357": 23, "358": 0, "359": 0, "360": 0, "362": 5, "363": 5, "364": 5, "369": 12, "370": 0, "371": 0, "373": 12, "377": 0, "381": 0, "385": 1, "386": 0, "387": 0, "388": 0, "389": 0, "394": 1, "399": 1, "400": 1, "405": 1, "504": 1, "517": 1, "520": 1, "523": 1, "533": 1, "538": 1, "544": 1, "548": 1, "566": 1, "570": 1, "573": 1, "575": 1, "584": 1, "645": 1, "663": 1, "747": 1, "750": 1, "798": 1, "800": 1, "829": 1, "891": 1, "918": 1, "928": 1, "939": 1, "941": 1, "946": 1, "962": 1, "977": 1, "982": 1, "991": 1, "1007": 1, "1066": 1, "1111": 1, "1140": 1, "1157": 1, "1187": 1, "1223": 1, "1248": 1, "1279": 1, "1306": 1, "1319": 1, "1327": 1, "1337": 1, "1369": 1, "1386": 1, "1443": 1, "1468": 1, "1492": 1, "1512": 1, "1526": 1, "1553": 1, "1580": 1, "1609": 1, "1659": 1, "1759": 1, "1832": 1, "407": 2, "408": 2, "409": 2, "410": 2, "412": 2, "415": 2, "421": 2, "423": 0, "425": 2, "426": 2, "431": 2, "432": 0, "433": 0, "434": 0, "437": 0, "438": 0, "439": 0, "440": 0, "441": 0, "442": 0, "447": 24, "448": 22, "450": 22, "451": 0, "452": 22, "453": 0, "454": 0, "456": 0, "457": 0, "458": 0, "459": 0, "461": 0, "462": 0, "463": 0, "465": 0, "466": 0, "467": 0, "472": 0, "474": 22, "476": 22, "481": 0, "482": 0, "484": 22, "485": 22, "487": 2, "488": 0, "489": 0, "490": 0, "493": 0, "494": 0, "495": 0, "496": 0, "497": 0, "498": 0, "499": 0, "500": 0, "501": 2, "502": 2, "506": 0, "507": 0, "509": 0, "510": 0, "512": 0, "513": 0, "514": 0, "515": 0, "518": 0, "521": 0, "524": 0, "525": 0, "526": 0, "527": 0, "528": 0, "529": 0, "530": 0, "531": 0, "534": 0, "535": 0, "536": 0, "539": 0, "540": 0, "541": 0, "542": 0, "546": 0, "549": 0, "550": 0, "551": 0, "552": 0, "553": 0, "555": 0, "556": 0, "559": 0, "561": 0, "562": 0, "564": 0, "567": 0, "568": 0, "571": 0, "579": 0, "580": 0, "581": 0, "599": 0, "600": 0, "602": 0, "603": 0, "604": 0, "605": 0, "606": 0, "607": 0, "608": 0, "609": 0, "610": 0, "611": 0, "612": 0, "614": 0, "615": 0, "618": 0, "619": 0, "620": 0, "621": 0, "622": 0, "623": 0, "625": 0, "627": 0, "628": 0, "629": 0, "630": 0, "632": 0, "633": 0, "635": 0, "636": 0, "639": 0, "640": 0, "641": 0, "643": 0, "624": 0, "656": 0, "657": 0, "658": 0, "659": 0, "660": 0, "675": 0, "678": 0, "679": 0, "680": 0, "681": 0, "688": 0, "690": 0, "691": 0, "692": 0, "693": 0, "694": 0, "696": 0, "699": 0, "702": 0, "703": 0, "705": 0, "706": 0, "707": 0, "709": 0, "710": 0, "714": 0, "715": 0, "717": 0, "718": 0, "720": 0, "721": 0, "722": 0, "724": 0, "725": 0, "727": 0, "729": 0, "730": 0, "732": 0, "736": 0, "737": 0, "738": 0, "739": 0, "740": 0, "741": 0, "742": 0, "743": 0, "745": 0, "746": 0, "760": 0, "761": 0, "762": 0, "763": 0, "765": 0, "766": 0, "767": 0, "768": 0, "769": 0, "770": 0, "771": 0, "774": 0, "775": 0, "777": 0, "778": 0, "779": 0, "780": 0, "781": 0, "782": 0, "783": 0, "784": 0, "787": 0, "789": 0, "792": 0, "793": 0, "794": 0, "795": 0, "802": 0, "803": 0, "804": 0, "806": 0, "807": 0, "808": 0, "809": 0, "810": 0, "811": 0, "812": 0, "814": 0, "815": 0, "817": 0, "818": 0, "824": 0, "825": 0, "826": 0, "834": 0, "835": 0, "837": 0, "838": 0, "841": 0, "842": 0, "843": 0, "844": 0, "845": 0, "846": 0, "847": 0, "848": 0, "851": 0, "852": 0, "853": 0, "854": 0, "856": 0, "858": 0, "859": 0, "860": 0, "861": 0, "862": 0, "863": 0, "864": 0, "865": 0, "866": 0, "867": 0, "868": 0, "869": 0, "870": 0, "873": 0, "874": 0, "875": 0, "876": 0, "877": 0, "878": 0, "880": 0, "881": 0, "882": 0, "883": 0, "885": 0, "886": 0, "887": 0, "888": 0, "889": 0, "839": 0, "896": 0, "897": 0, "903": 0, "904": 0, "906": 0, "914": 0, "916": 0, "923": 0, "924": 0, "925": 0, "929": 0, "930": 0, "931": 0, "932": 0, "935": 0, "936": 0, "937": 0, "942": 0, "944": 0, "947": 0, "948": 0, "949": 0, "950": 0, "951": 0, "952": 0, "953": 0, "954": 0, "955": 0, "957": 0, "958": 0, "959": 0, "960": 0, "963": 0, "964": 0, "965": 0, "966": 0, "967": 0, "968": 0, "969": 0, "970": 0, "971": 0, "973": 0, "974": 0, "975": 0, "978": 0, "979": 0, "980": 0, "989": 0, "996": 0, "998": 0, "999": 0, "1001": 0, "1002": 0, "1004": 0, "1005": 0, "1015": 0, "1016": 0, "1017": 0, "1019": 0, "1020": 0, "1021": 0, "1022": 0, "1023": 0, "1024": 0, "1025": 0, "1027": 0, "1028": 0, "1029": 0, "1031": 0, "1033": 0, "1034": 0, "1035": 0, "1037": 0, "1038": 0, "1039": 0, "1042": 0, "1047": 0, "1048": 0, "1049": 0, "1051": 0, "1052": 0, "1053": 0, "1054": 0, "1055": 0, "1056": 0, "1057": 0, "1058": 0, "1059": 0, "1060": 0, "1061": 0, "1062": 0, "1063": 0, "1064": 0, "1067": 0, "1069": 0, "1073": 0, "1074": 0, "1075": 0, "1076": 0, "1078": 0, "1079": 0, "1081": 0, "1082": 0, "1084": 0, "1085": 0, "1088": 0, "1089": 0, "1091": 0, "1099": 0, "1100": 0, "1101": 0, "1102": 0, "1103": 0, "1104": 0, "1106": 0, "1107": 0, "1109": 0, "1112": 0, "1113": 0, "1114": 0, "1117": 0, "1118": 0, "1119": 0, "1120": 0, "1121": 0, "1122": 0, "1123": 0, "1125": 0, "1126": 0, "1128": 0, "1131": 0, "1132": 0, "1134": 0, "1135": 0, "1136": 0, "1138": 0, "1141": 0, "1142": 0, "1143": 0, "1144": 0, "1145": 0, "1147": 0, "1148": 0, "1149": 0, "1150": 0, "1151": 0, "1152": 0, "1153": 0, "1158": 0, "1161": 0, "1162": 0, "1163": 0, "1164": 0, "1168": 0, "1169": 0, "1170": 0, "1171": 0, "1172": 0, "1173": 0, "1174": 0, "1179": 0, "1180": 0, "1181": 0, "1182": 0, "1183": 0, "1184": 0, "1192": 0, "1193": 0, "1194": 0, "1196": 0, "1198": 0, "1199": 0, "1200": 0, "1201": 0, "1205": 0, "1206": 0, "1207": 0, "1208": 0, "1211": 0, "1212": 0, "1213": 0, "1214": 0, "1215": 0, "1216": 0, "1217": 0, "1218": 0, "1220": 0, "1221": 0, "1228": 0, "1229": 0, "1231": 0, "1232": 0, "1233": 0, "1234": 0, "1237": 0, "1238": 0, "1239": 0, "1240": 0, "1241": 0, "1242": 0, "1243": 0, "1245": 0, "1246": 0, "1250": 8, "1251": 8, "1252": 8, "1253": 8, "1254": 8, "1255": 8, "1258": 8, "1259": 8, "1260": 8, "1261": 8, "1262": 8, "1264": 8, "1267": 8, "1268": 8, "1269": 8, "1270": 8, "1271": 8, "1272": 8, "1273": 8, "1274": 8, "1277": 8, "1282": 8, "1283": 8, "1284": 0, "1285": 0, "1286": 0, "1287": 0, "1288": 0, "1289": 0, "1290": 0, "1293": 0, "1294": 0, "1295": 0, "1296": 0, "1297": 0, "1299": 0, "1301": 0, "1304": 8, "1308": 8, "1309": 8, "1310": 0, "1311": 0, "1312": 0, "1313": 0, "1314": 0, "1317": 8, "1322": 8, "1323": 16, "1324": 8, "1325": 8, "1330": 8, "1331": 44, "1332": 36, "1333": 11, "1334": 3, "1335": 8, "1342": 8, "1343": 8, "1345": 8, "1348": 19, "1351": 19, "1353": 11, "1354": 3, "1355": 3, "1356": 0, "1357": 0, "1358": 0, "1360": 0, "1361": 0, "1362": 0, "1366": 3, "1367": 8, "1372": 52, "1374": 8, "1376": 0, "1377": 0, "1379": 0, "1380": 0, "1384": 8, "1389": 8, "1390": 8, "1393": 8, "1394": 0, "1395": 0, "1396": 0, "1397": 0, "1398": 0, "1399": 0, "1402": 0, "1403": 0, "1405": 0, "1406": 0, "1409": 0, "1410": 0, "1415": 8, "1416": 0, "1417": 0, "1418": 0, "1420": 44, "1421": 36, "1426": 36, "1427": 36, "1428": 0, "1429": 0, "1430": 0, "1432": 0, "1434": 0, "1435": 0, "1438": 36, "1439": 36, "1441": 8, "1446": 8, "1447": 8, "1449": 44, "1450": 36, "1453": 36, "1454": 0, "1455": 0, "1456": 0, "1457": 0, "1458": 0, "1459": 0, "1460": 0, "1464": 36, "1466": 8, "1470": 8, "1471": 8, "1472": 8, "1473": 0, "1474": 0, "1475": 0, "1476": 0, "1477": 0, "1478": 0, "1481": 8, "1482": 0, "1483": 0, "1484": 0, "1485": 0, "1486": 0, "1487": 0, "1490": 8, "1494": 8, "1495": 8, "1497": 55, "1500": 15, "1501": 7, "1502": 0, "1503": 0, "1504": 0, "1505": 0, "1506": 0, "1507": 0, "1510": 8, "1498": 39, "1514": 8, "1515": 52, "1516": 0, "1517": 0, "1518": 0, "1520": 0, "1521": 0, "1524": 8, "1529": 8, "1531": 0, "1532": 0, "1533": 0, "1534": 0, "1538": 16, "1540": 0, "1541": 0, "1542": 0, "1543": 0, "1548": 8, "1549": 8, "1550": 0, "1551": 8, "1556": 8, "1558": 0, "1559": 0, "1560": 0, "1561": 0, "1565": 18, "1567": 0, "1568": 0, "1569": 0, "1570": 0, "1575": 8, "1576": 10, "1577": 2, "1578": 8, "1583": 8, "1584": 8, "1587": 0, "1588": 0, "1589": 0, "1590": 0, "1591": 0, "1592": 0, "1593": 0, "1596": 0, "1597": 0, "1598": 0, "1599": 0, "1600": 0, "1601": 0, "1602": 0, "1605": 16, "1606": 8, "1607": 8, "1611": 10, "1615": 10, "1616": 56, "1617": 46, "1618": 46, "1619": 46, "1621": 10, "1622": 14, "1623": 4, "1624": 4, "1625": 0, "1626": 0, "1627": 0, "1628": 0, "1629": 0, "1631": 0, "1632": 0, "1636": 4, "1637": 0, "1638": 0, "1639": 0, "1641": 0, "1643": 0, "1644": 0, "1647": 4, "1648": 0, "1649": 0, "1650": 0, "1651": 0, "1652": 0, "1653": 0, "1654": 0, "1657": 10, "1665": 8, "1667": 0, "1668": 0, "1669": 0, "1670": 0, "1674": 8, "1675": 4, "1677": 4, "1679": 0, "1680": 0, "1681": 0, "1682": 0, "1686": 4, "1687": 4, "1690": 14, "1693": 14, "1696": 4, "1697": 4, "1698": 10, "1699": 6, "1700": 3, "1702": 3, "1703": 4, "1706": 7, "1707": 3, "1708": 3, "1709": 9, "1710": 6, "1712": 6, "1713": 1, "1715": 5, "1716": 6, "1717": 3, "1719": 3, "1720": 0, "1721": 0, "1722": 0, "1723": 0, "1724": 0, "1725": 0, "1726": 0, "1727": 0, "1733": 11, "1736": 4, "1740": 4, "1741": 4, "1742": 27, "1743": 23, "1746": 4, "1748": 4, "1749": 0, "1750": 0, "1751": 0, "1752": 0, "1753": 0, "1754": 0, "1757": 4, "1765": 8, "1766": 8, "1767": 8, "1770": 24, "1772": 16, "1773": 0, "1774": 16, "1775": 16, "1776": 16, "1777": 0, "1779": 0, "1780": 0, "1781": 0, "1782": 0, "1783": 0, "1784": 0, "1786": 8, "1787": 8, "1789": 0, "1790": 0, "1794": 0, "1795": 0, "1796": 0, "1797": 0, "1799": 0, "1800": 0, "1801": 0, "1802": 0, "1806": 0, "1808": 0, "1809": 0, "1813": 0, "1814": 0, "1815": 0, "1816": 0, "1817": 0, "1818": 0, "1820": 0, "1822": 0, "1825": 0, "1826": 0, "1830": 0, "1834": 8, "1835": 24, "1836": 16, "1837": 0, "1838": 16, "1840": 16, "1841": 0, "1843": 0, "1844": 0, "1845": 0, "1846": 0, "1847": 0, "1849": 0, "1852": 0, "1853": 0, "1856": 8, "1866": 0, "1867": 0, "1868": 0, "1869": 0, "1870": 0, "1871": 0, "1872": 0, "1876": 0, "1877": 0, "1878": 0, "1879": 0, "1883": 0, "1884": 0, "1885": 0, "1886": 0, "1888": 0, "1889": 0, "1890": 0, "1891": 0, "1901": 0, "1902": 0, "1905": 0, "1906": 0}}
+ git checkout c2678e49759e5c4c329bff0eeca2886267005d21
M	django/db/models/base.py
Note: switching to 'c2678e49759e5c4c329bff0eeca2886267005d21'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at c2678e4975 Fixed #27921 -- Clarified usage of make_aware() with is_dst argument.
+ git apply /root/pre_state.patch
error: unrecognized input
