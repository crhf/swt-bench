{"instance_id": "pytest-dev__pytest-7432", "repo": "pytest-dev/pytest", "version": "5.4", "environment_setup_commit": "678c1a0745f1cf175c442c719906a1f13e496910", "patch_list": ["diff --git a/src/_pytest/skipping.py b/src/_pytest/skipping.py\n--- a/src/_pytest/skipping.py\n+++ b/src/_pytest/skipping.py\n@@ -291,7 +291,8 @@ def pytest_runtest_makereport(item: Item, call: CallInfo[None]):\n             else:\n                 rep.outcome = \"passed\"\n                 rep.wasxfail = xfailed.reason\n-    elif (\n+\n+    if (\n         item._store.get(skipped_by_mark_key, True)\n         and rep.skipped\n         and type(rep.longrepr) is tuple\n", "diff --git a/dev/null b/testing/test_coverup_pytest-dev__pytest-7432.py\nnew file mode 100644\nindex e69de29..b58fa4d 100644\n--- /dev/null\n+++ b/testing/test_coverup_pytest-dev__pytest-7432.py\n@@ -0,0 +1,25 @@\n+import pytest\n+import os\n+\n+def test_skip_location_reporting():\n+    # Create a test file with a function marked with @pytest.mark.skip\n+    test_file_content = \"\"\"\n+import pytest\n+\n+@pytest.mark.skip\n+def test_skip_location():\n+    assert 0\n+\"\"\"\n+    test_file_path = \"test_skip_location.py\"\n+    with open(test_file_path, \"w\") as f:\n+        f.write(test_file_content)\n+\n+    # Run the test with pytest -rs --runxfail and capture the output\n+    result = pytest.main([\"-rs\", \"--runxfail\", test_file_path])\n+\n+    # Check that the skip location is correctly reported as test_skip_location.py:3\n+    assert result != 0  # The test should fail if the bug is present\n+\n+    # Cleanup: remove the test file\n+    os.remove(test_file_path)\n+\n"], "arch": "x86_64", "base_commit": "e6e300e729dd33956e5448d8be9a0b1540b4e53a", "test_directives": ["testing/test_coverup_pytest-dev__pytest-7432.py"], "coverage_files": ["src/_pytest/skipping.py"], "env_name": "testbed", "run_id": "assertflip", "patch_id": "pred_post__AssertFlip", "timeout": 1800, "rm_image": false, "force_rebuild": false, "exec_mode": "unit_test", "reproduction_script_name": null, "compute_coverage": true, "install": {"python": "3.9", "install": "python -m pip install -e .", "pip_packages": ["py==1.11.0", "packaging==23.1", "attrs==23.1.0", "more-itertools==10.1.0", "pluggy==0.13.1"]}, "cache_level": "instance", "test_command": "python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(src/_pytest/skipping\\.py)' -m pytest -rA testing/test_coverup_pytest-dev__pytest-7432.py", "req_install_commands": ["conda create -n testbed python=3.9  -y"]}