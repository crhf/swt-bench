+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD 55b68de643b5c2d5f0a8ea7587ab3b2966021ccc
+ sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen
+ locale-gen
Generating locales (this might take a while)...
  en_US.UTF-8... done
Generation complete.
+ export LANG=en_US.UTF-8
+ LANG=en_US.UTF-8
+ export LANGUAGE=en_US:en
+ LANGUAGE=en_US:en
+ export LC_ALL=en_US.UTF-8
+ LC_ALL=en_US.UTF-8
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
nothing to commit, working tree clean
+ git show
commit 55b68de643b5c2d5f0a8ea7587ab3b2966021ccc
Author: Chason Chaffin <chason@gmail.com>
Date:   Tue Jul 2 21:15:32 2019 +0900

    Fixed #30608 -- Fixed non-unicode EmailMessage crash when domain name for localhost is non-ASCII.
    
    Assisted by felixxm.

diff --git a/AUTHORS b/AUTHORS
index 9bae13abb0..640ef00920 100644
--- a/AUTHORS
+++ b/AUTHORS
@@ -166,6 +166,7 @@ answer newbie questions, and generally made Django that much better:
     ChaosKCW
     Charlie Leifer <coleifer@gmail.com>
     charly.wilhelm@gmail.com
+    Chason Chaffin <chason@gmail.com>
     Cheng Zhang
     Chris Adams
     Chris Beaven <smileychris@gmail.com>
diff --git a/django/core/mail/utils.py b/django/core/mail/utils.py
index d18dfe4667..1e48faa366 100644
--- a/django/core/mail/utils.py
+++ b/django/core/mail/utils.py
@@ -4,6 +4,8 @@ Email message and email sending related helper functions.
 
 import socket
 
+from django.utils.encoding import punycode
+
 
 # Cache the hostname, but do it lazily: socket.getfqdn() can take a couple of
 # seconds, which slows down the restart of the server.
@@ -13,7 +15,7 @@ class CachedDnsName:
 
     def get_fqdn(self):
         if not hasattr(self, '_fqdn'):
-            self._fqdn = socket.getfqdn()
+            self._fqdn = punycode(socket.getfqdn())
         return self._fqdn
 
 
diff --git a/tests/mail/tests.py b/tests/mail/tests.py
index 15593dc3f7..6de819965a 100644
--- a/tests/mail/tests.py
+++ b/tests/mail/tests.py
@@ -14,10 +14,11 @@ from email.utils import parseaddr
 from io import StringIO
 from smtplib import SMTP, SMTPAuthenticationError, SMTPException
 from ssl import SSLError
+from unittest import mock
 
 from django.core import mail
 from django.core.mail import (
-    EmailMessage, EmailMultiAlternatives, mail_admins, mail_managers,
+    DNS_NAME, EmailMessage, EmailMultiAlternatives, mail_admins, mail_managers,
     send_mail, send_mass_mail,
 )
 from django.core.mail.backends import console, dummy, filebased, locmem, smtp
@@ -365,6 +366,13 @@ class MailTests(HeadersCheckMixin, SimpleTestCase):
         self.assertEqual(msg.body, '')
         self.assertEqual(msg.message().get_payload(), '')
 
+    @mock.patch('socket.getfqdn', return_value='漢字')
+    def test_non_ascii_dns_non_unicode_email(self, mocked_getfqdn):
+        delattr(DNS_NAME, '_fqdn')
+        email = EmailMessage('subject', 'content', 'from@example.com', ['to@example.com'])
+        email.encoding = 'iso-8859-1'
+        self.assertIn('@xn--p8s937b>', email.message()['Message-ID'])
+
     def test_encoding(self):
         """
         Regression for #12791 - Encode body correctly with other encodings
+ git diff 55b68de643b5c2d5f0a8ea7587ab3b2966021ccc
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
Requirement already satisfied: pytz in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.0.dev20190703084903) (2025.2)
Requirement already satisfied: sqlparse in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.0.dev20190703084903) (0.4.4)
Requirement already satisfied: asgiref in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.0.dev20190703084903) (3.4.1)
Requirement already satisfied: typing-extensions in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from asgiref->Django==3.0.dev20190703084903) (4.1.1)
Installing collected packages: Django
  Attempting uninstall: Django
    Found existing installation: Django 3.0.dev20190703084903
    Uninstalling Django-3.0.dev20190703084903:
      Successfully uninstalled Django-3.0.dev20190703084903
  Running setup.py develop for Django
Successfully installed Django-3.0.dev20190703084903
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv
+ git apply -v -
Checking patch django/urls/base.py...
Checking patch django/urls/resolvers.py...
Applied patch django/urls/base.py cleanly.
Applied patch django/urls/resolvers.py cleanly.
+ git apply -v -
Checking patch tests/test_coverup_django__django-11333.py...
Applied patch tests/test_coverup_django__django-11333.py cleanly.
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/urls/resolvers\.py|django/urls/base\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-11333
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(django/urls/resolvers\\.py|django/urls/base\\.py)']
0.06 /testbed/django/urls/base.py(1): from urllib.parse import urlsplit, urlunsplit
0.06 /testbed/django/urls/base.py(3): from asgiref.local import Local
0.06 /testbed/django/urls/base.py(5): from django.utils.encoding import iri_to_uri
0.07 /testbed/django/urls/base.py(6): from django.utils.functional import lazy
0.07 /testbed/django/urls/base.py(7): from django.utils.translation import override
0.08 /testbed/django/urls/base.py(9): from .exceptions import NoReverseMatch, Resolver404
0.37 /testbed/django/urls/base.py(10): from .resolvers import _get_cached_resolver, get_ns_resolver, get_resolver
0.37 /testbed/django/urls/resolvers.py(7): """
0.37 /testbed/django/urls/resolvers.py(8): import functools
0.37 /testbed/django/urls/resolvers.py(9): import inspect
0.37 /testbed/django/urls/resolvers.py(10): import re
0.37 /testbed/django/urls/resolvers.py(11): from importlib import import_module
0.37 /testbed/django/urls/resolvers.py(12): from urllib.parse import quote
0.37 /testbed/django/urls/resolvers.py(14): from asgiref.local import Local
0.37 /testbed/django/urls/resolvers.py(16): from django.conf import settings
0.37 /testbed/django/urls/resolvers.py(17): from django.core.checks import Error, Warning
0.37 /testbed/django/urls/resolvers.py(18): from django.core.checks.urls import check_resolver
0.37 /testbed/django/urls/resolvers.py(19): from django.core.exceptions import ImproperlyConfigured, ViewDoesNotExist
0.37 /testbed/django/urls/resolvers.py(20): from django.utils.datastructures import MultiValueDict
0.37 /testbed/django/urls/resolvers.py(21): from django.utils.functional import cached_property
0.37 /testbed/django/urls/resolvers.py(22): from django.utils.http import RFC3986_SUBDELIMS, escape_leading_slashes
0.37 /testbed/django/urls/resolvers.py(23): from django.utils.regex_helper import normalize
0.37 /testbed/django/urls/resolvers.py(24): from django.utils.translation import get_language
0.37 /testbed/django/urls/resolvers.py(26): from .converters import get_converter
0.37 /testbed/django/urls/resolvers.py(27): from .exceptions import NoReverseMatch, Resolver404
0.37 /testbed/django/urls/resolvers.py(28): from .utils import get_callable
0.37 /testbed/django/urls/resolvers.py(31): class ResolverMatch:
0.37 /testbed/django/urls/resolvers.py(31): class ResolverMatch:
0.37 /testbed/django/urls/resolvers.py(32):     def __init__(self, func, args, kwargs, url_name=None, app_names=None, namespaces=None, route=None):
0.37 /testbed/django/urls/resolvers.py(56):     def __getitem__(self, index):
0.37 /testbed/django/urls/resolvers.py(59):     def __repr__(self):
0.37 /testbed/django/urls/resolvers.py(66): def get_resolver(urlconf=None):
0.37 /testbed/django/urls/resolvers.py(72): @functools.lru_cache(maxsize=None)
0.37 /testbed/django/urls/resolvers.py(73): def _get_cached_resolver(urlconf=None):
0.37 /testbed/django/urls/resolvers.py(77): @functools.lru_cache(maxsize=None)
0.37 /testbed/django/urls/resolvers.py(88): class LocaleRegexDescriptor:
0.37 /testbed/django/urls/resolvers.py(88): class LocaleRegexDescriptor:
0.37 /testbed/django/urls/resolvers.py(89):     def __init__(self, attr):
0.37 /testbed/django/urls/resolvers.py(92):     def __get__(self, instance, cls=None):
0.37 /testbed/django/urls/resolvers.py(111): class CheckURLMixin:
0.37 /testbed/django/urls/resolvers.py(111): class CheckURLMixin:
0.37 /testbed/django/urls/resolvers.py(112):     def describe(self):
0.37 /testbed/django/urls/resolvers.py(121):     def _check_pattern_startswith_slash(self):
0.37 /testbed/django/urls/resolvers.py(144): class RegexPattern(CheckURLMixin):
0.37 /testbed/django/urls/resolvers.py(144): class RegexPattern(CheckURLMixin):
0.37 /testbed/django/urls/resolvers.py(145):     regex = LocaleRegexDescriptor('_regex')
0.37 /testbed/django/urls/resolvers.py(90):         self.attr = attr
0.37 /testbed/django/urls/resolvers.py(147):     def __init__(self, regex, name=None, is_endpoint=False):
0.37 /testbed/django/urls/resolvers.py(154):     def match(self, path):
0.37 /testbed/django/urls/resolvers.py(165):     def check(self):
0.37 /testbed/django/urls/resolvers.py(172):     def _check_include_trailing_dollar(self):
0.37 /testbed/django/urls/resolvers.py(184):     def _compile(self, regex):
0.37 /testbed/django/urls/resolvers.py(193):     def __str__(self):
0.37 /testbed/django/urls/resolvers.py(197): _PATH_PARAMETER_COMPONENT_RE = re.compile(
0.37 /testbed/django/urls/resolvers.py(198):     r'<(?:(?P<converter>[^>:]+):)?(?P<parameter>\w+)>'
0.37 /testbed/django/urls/resolvers.py(202): def _route_to_regex(route, is_endpoint=False):
0.37 /testbed/django/urls/resolvers.py(242): class RoutePattern(CheckURLMixin):
0.37 /testbed/django/urls/resolvers.py(242): class RoutePattern(CheckURLMixin):
0.37 /testbed/django/urls/resolvers.py(243):     regex = LocaleRegexDescriptor('_route')
0.37 /testbed/django/urls/resolvers.py(90):         self.attr = attr
0.37 /testbed/django/urls/resolvers.py(245):     def __init__(self, route, name=None, is_endpoint=False):
0.37 /testbed/django/urls/resolvers.py(252):     def match(self, path):
0.37 /testbed/django/urls/resolvers.py(266):     def check(self):
0.37 /testbed/django/urls/resolvers.py(278):     def _compile(self, route):
0.37 /testbed/django/urls/resolvers.py(281):     def __str__(self):
0.37 /testbed/django/urls/resolvers.py(285): class LocalePrefixPattern:
0.37 /testbed/django/urls/resolvers.py(285): class LocalePrefixPattern:
0.37 /testbed/django/urls/resolvers.py(286):     def __init__(self, prefix_default_language=True):
0.37 /testbed/django/urls/resolvers.py(290):     @property
0.37 /testbed/django/urls/resolvers.py(295):     @property
0.37 /testbed/django/urls/resolvers.py(303):     def match(self, path):
0.37 /testbed/django/urls/resolvers.py(309):     def check(self):
0.37 /testbed/django/urls/resolvers.py(312):     def describe(self):
0.37 /testbed/django/urls/resolvers.py(315):     def __str__(self):
0.37 /testbed/django/urls/resolvers.py(319): class URLPattern:
0.37 /testbed/django/urls/resolvers.py(319): class URLPattern:
0.37 /testbed/django/urls/resolvers.py(320):     def __init__(self, pattern, callback, default_args=None, name=None):
0.37 /testbed/django/urls/resolvers.py(326):     def __repr__(self):
0.37 /testbed/django/urls/resolvers.py(329):     def check(self):
0.37 /testbed/django/urls/resolvers.py(334):     def _check_pattern_name(self):
0.37 /testbed/django/urls/resolvers.py(348):     def resolve(self, path):
0.37 /testbed/django/urls/resolvers.py(356):     @cached_property
0.37 /testbed/django/urls/resolvers.py(370): class URLResolver:
0.37 /testbed/django/urls/resolvers.py(370): class URLResolver:
0.37 /testbed/django/urls/resolvers.py(371):     def __init__(self, pattern, urlconf_name, default_kwargs=None, app_name=None, namespace=None):
0.37 /testbed/django/urls/resolvers.py(390):     def __repr__(self):
0.37 /testbed/django/urls/resolvers.py(401):     def check(self):
0.37 /testbed/django/urls/resolvers.py(408):     def _check_custom_error_handlers(self):
0.37 /testbed/django/urls/resolvers.py(438):     def _populate(self):
0.37 /testbed/django/urls/resolvers.py(499):     @property
0.37 /testbed/django/urls/resolvers.py(506):     @property
0.37 /testbed/django/urls/resolvers.py(513):     @property
0.37 /testbed/django/urls/resolvers.py(520):     @staticmethod
0.37 /testbed/django/urls/resolvers.py(529):     def _is_callback(self, name):
0.37 /testbed/django/urls/resolvers.py(534):     def resolve(self, path):
0.37 /testbed/django/urls/resolvers.py(574):     @cached_property
0.37 /testbed/django/urls/resolvers.py(581):     @cached_property
0.37 /testbed/django/urls/resolvers.py(596):     def resolve_error_handler(self, view_type):
0.37 /testbed/django/urls/resolvers.py(605):     def reverse(self, lookup_view, *args, **kwargs):
0.37 /testbed/django/urls/resolvers.py(608):     def _reverse_with_prefix(self, lookup_view, _prefix, *args, **kwargs):
0.37 /testbed/django/urls/base.py(11): from .utils import get_callable
0.37 /testbed/django/urls/base.py(16): _prefixes = Local()
0.37 /testbed/django/urls/base.py(19): _urlconfs = Local()
0.37 /testbed/django/urls/base.py(22): def resolve(path, urlconf=None):
0.37 /testbed/django/urls/base.py(28): def reverse(viewname, urlconf=None, args=None, kwargs=None, current_app=None):
0.37 /testbed/django/urls/base.py(90): reverse_lazy = lazy(reverse, str)
0.37 /testbed/django/urls/base.py(93): def clear_url_caches():
0.37 /testbed/django/urls/base.py(99): def set_script_prefix(prefix):
0.37 /testbed/django/urls/base.py(108): def get_script_prefix():
0.37 /testbed/django/urls/base.py(117): def clear_script_prefix():
0.37 /testbed/django/urls/base.py(127): def set_urlconf(urlconf_name):
0.37 /testbed/django/urls/base.py(139): def get_urlconf(default=None):
0.37 /testbed/django/urls/base.py(147): def is_valid_path(path, urlconf=None):
0.37 /testbed/django/urls/base.py(160): def translate_url(url, lang_code):
Testing against Django installed in '/testbed/django'
0.48 /testbed/django/urls/base.py(103):     if not prefix.endswith('/'):
0.48 /testbed/django/urls/base.py(105):     _prefixes.value = prefix
Skipping setup of unused database(s): other.
Operations to perform:
  Synchronize unmigrated apps: auth, contenttypes, messages, sessions, staticfiles
  Apply all migrations: admin, sites
Synchronizing apps without migrations:
  Creating tables...
    Creating table django_content_type
    Creating table auth_permission
    Creating table auth_group
    Creating table auth_user
    Creating table django_session
    Running deferred SQL...
Running migrations:
  Applying admin.0001_initial... OK
  Applying admin.0002_logentry_remove_auto_add... OK
  Applying admin.0003_logentry_add_action_flag_choices... OK
  Applying sites.0001_initial... OK
  Applying sites.0002_alter_domain_unique... OK
0.79 /testbed/django/urls/resolvers.py(67):     if urlconf is None:
0.79 /testbed/django/urls/resolvers.py(68):         urlconf = settings.ROOT_URLCONF
0.79 /testbed/django/urls/resolvers.py(69):     return _get_cached_resolver(urlconf)
0.79 /testbed/django/urls/resolvers.py(74):     return URLResolver(RegexPattern(r'^/'), urlconf)
0.79 /testbed/django/urls/resolvers.py(148):         self._regex = regex
0.79 /testbed/django/urls/resolvers.py(149):         self._regex_dict = {}
0.79 /testbed/django/urls/resolvers.py(150):         self._is_endpoint = is_endpoint
0.79 /testbed/django/urls/resolvers.py(151):         self.name = name
0.79 /testbed/django/urls/resolvers.py(152):         self.converters = {}
0.79 /testbed/django/urls/resolvers.py(372):         self.pattern = pattern
0.79 /testbed/django/urls/resolvers.py(376):         self.urlconf_name = urlconf_name
0.79 /testbed/django/urls/resolvers.py(377):         self.callback = None
0.79 /testbed/django/urls/resolvers.py(378):         self.default_kwargs = default_kwargs or {}
0.79 /testbed/django/urls/resolvers.py(379):         self.namespace = namespace
0.79 /testbed/django/urls/resolvers.py(380):         self.app_name = app_name
0.79 /testbed/django/urls/resolvers.py(381):         self._reverse_dict = {}
0.79 /testbed/django/urls/resolvers.py(382):         self._namespace_dict = {}
0.79 /testbed/django/urls/resolvers.py(383):         self._app_dict = {}
0.79 /testbed/django/urls/resolvers.py(386):         self._callback_strs = set()
0.79 /testbed/django/urls/resolvers.py(387):         self._populated = False
0.79 /testbed/django/urls/resolvers.py(388):         self._local = Local()
0.79 /testbed/django/urls/resolvers.py(584):         patterns = getattr(self.urlconf_module, "urlpatterns", self.urlconf_module)
0.79 /testbed/django/urls/resolvers.py(576):         if isinstance(self.urlconf_name, str):
0.79 /testbed/django/urls/resolvers.py(577):             return import_module(self.urlconf_name)
0.79 /testbed/django/urls/resolvers.py(585):         try:
0.79 /testbed/django/urls/resolvers.py(586):             iter(patterns)
0.79 /testbed/django/urls/resolvers.py(594):         return patterns
0.80 /testbed/django/urls/resolvers.py(67):     if urlconf is None:
0.80 /testbed/django/urls/resolvers.py(68):         urlconf = settings.ROOT_URLCONF
0.80 /testbed/django/urls/resolvers.py(69):     return _get_cached_resolver(urlconf)
0.80 /testbed/django/urls/resolvers.py(402):         messages = []
0.80 /testbed/django/urls/resolvers.py(403):         for pattern in self.url_patterns:
0.80 /testbed/django/urls/resolvers.py(405):         messages.extend(self._check_custom_error_handlers())
0.80 /testbed/django/urls/resolvers.py(409):         messages = []
0.80 /testbed/django/urls/resolvers.py(412):         for status_code, num_parameters in [(400, 2), (403, 2), (404, 2), (500, 1)]:
0.80 /testbed/django/urls/resolvers.py(413):             try:
0.80 /testbed/django/urls/resolvers.py(414):                 handler, param_dict = self.resolve_error_handler(status_code)
0.80 /testbed/django/urls/resolvers.py(597):         callback = getattr(self.urlconf_module, 'handler%s' % view_type, None)
0.80 /testbed/django/urls/resolvers.py(598):         if not callback:
0.80 /testbed/django/urls/resolvers.py(601):             from django.conf import urls
0.80 /testbed/django/urls/resolvers.py(602):             callback = getattr(urls, 'handler%s' % view_type)
0.80 /testbed/django/urls/resolvers.py(603):         return get_callable(callback), {}
0.80 /testbed/django/urls/resolvers.py(422):             signature = inspect.signature(handler)
0.80 /testbed/django/urls/resolvers.py(423):             args = [None] * num_parameters
0.80 /testbed/django/urls/resolvers.py(424):             try:
0.80 /testbed/django/urls/resolvers.py(425):                 signature.bind(*args)
0.80 /testbed/django/urls/resolvers.py(412):         for status_code, num_parameters in [(400, 2), (403, 2), (404, 2), (500, 1)]:
0.80 /testbed/django/urls/resolvers.py(413):             try:
0.80 /testbed/django/urls/resolvers.py(414):                 handler, param_dict = self.resolve_error_handler(status_code)
0.80 /testbed/django/urls/resolvers.py(597):         callback = getattr(self.urlconf_module, 'handler%s' % view_type, None)
0.80 /testbed/django/urls/resolvers.py(598):         if not callback:
0.80 /testbed/django/urls/resolvers.py(601):             from django.conf import urls
0.80 /testbed/django/urls/resolvers.py(602):             callback = getattr(urls, 'handler%s' % view_type)
0.80 /testbed/django/urls/resolvers.py(603):         return get_callable(callback), {}
0.80 /testbed/django/urls/resolvers.py(422):             signature = inspect.signature(handler)
0.80 /testbed/django/urls/resolvers.py(423):             args = [None] * num_parameters
0.80 /testbed/django/urls/resolvers.py(424):             try:
0.80 /testbed/django/urls/resolvers.py(425):                 signature.bind(*args)
0.80 /testbed/django/urls/resolvers.py(412):         for status_code, num_parameters in [(400, 2), (403, 2), (404, 2), (500, 1)]:
0.80 /testbed/django/urls/resolvers.py(413):             try:
0.80 /testbed/django/urls/resolvers.py(414):                 handler, param_dict = self.resolve_error_handler(status_code)
0.80 /testbed/django/urls/resolvers.py(597):         callback = getattr(self.urlconf_module, 'handler%s' % view_type, None)
0.80 /testbed/django/urls/resolvers.py(598):         if not callback:
0.80 /testbed/django/urls/resolvers.py(601):             from django.conf import urls
0.80 /testbed/django/urls/resolvers.py(602):             callback = getattr(urls, 'handler%s' % view_type)
0.80 /testbed/django/urls/resolvers.py(603):         return get_callable(callback), {}
0.80 /testbed/django/urls/resolvers.py(422):             signature = inspect.signature(handler)
0.80 /testbed/django/urls/resolvers.py(423):             args = [None] * num_parameters
0.80 /testbed/django/urls/resolvers.py(424):             try:
0.80 /testbed/django/urls/resolvers.py(425):                 signature.bind(*args)
0.80 /testbed/django/urls/resolvers.py(412):         for status_code, num_parameters in [(400, 2), (403, 2), (404, 2), (500, 1)]:
0.80 /testbed/django/urls/resolvers.py(413):             try:
0.80 /testbed/django/urls/resolvers.py(414):                 handler, param_dict = self.resolve_error_handler(status_code)
0.80Creating test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
test_multiple_urlresolver_instances (test_coverup_django__django-11333.URLResolverTest) ... ok

----------------------------------------------------------------------
Ran 1 test in 0.001s

OK
Destroying test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
 /testbed/django/urls/resolvers.py(597):         callback = getattr(self.urlconf_module, 'handler%s' % view_type, None)
0.80 /testbed/django/urls/resolvers.py(598):         if not callback:
0.80 /testbed/django/urls/resolvers.py(601):             from django.conf import urls
0.80 /testbed/django/urls/resolvers.py(602):             callback = getattr(urls, 'handler%s' % view_type)
0.80 /testbed/django/urls/resolvers.py(603):         return get_callable(callback), {}
0.80 /testbed/django/urls/resolvers.py(422):             signature = inspect.signature(handler)
0.80 /testbed/django/urls/resolvers.py(423):             args = [None] * num_parameters
0.80 /testbed/django/urls/resolvers.py(424):             try:
0.80 /testbed/django/urls/resolvers.py(425):                 signature.bind(*args)
0.80 /testbed/django/urls/resolvers.py(412):         for status_code, num_parameters in [(400, 2), (403, 2), (404, 2), (500, 1)]:
0.80 /testbed/django/urls/resolvers.py(436):         return messages
0.80 /testbed/django/urls/resolvers.py(406):         return messages or self.pattern.check()
0.80 /testbed/django/urls/resolvers.py(166):         warnings = []
0.80 /testbed/django/urls/resolvers.py(167):         warnings.extend(self._check_pattern_startswith_slash())
0.80 /testbed/django/urls/resolvers.py(125):         regex_pattern = self.regex.pattern
0.80 /testbed/django/urls/resolvers.py(96):         if instance is None:
0.80 /testbed/django/urls/resolvers.py(101):         pattern = getattr(instance, self.attr)
0.80 /testbed/django/urls/resolvers.py(102):         if isinstance(pattern, str):
0.80 /testbed/django/urls/resolvers.py(103):             instance.__dict__['regex'] = instance._compile(pattern)
0.80 /testbed/django/urls/resolvers.py(186):         try:
0.80 /testbed/django/urls/resolvers.py(187):             return re.compile(regex)
0.80 /testbed/django/urls/resolvers.py(104):             return instance.__dict__['regex']
0.80 /testbed/django/urls/resolvers.py(126):         if not settings.APPEND_SLASH:
0.80 /testbed/django/urls/resolvers.py(130):         if regex_pattern.startswith(('/', '^/', '^\\/')) and not regex_pattern.endswith('/'):
0.80 /testbed/django/urls/resolvers.py(141):             return []
0.80 /testbed/django/urls/resolvers.py(168):         if not self._is_endpoint:
0.80 /testbed/django/urls/resolvers.py(169):             warnings.extend(self._check_include_trailing_dollar())
0.80 /testbed/django/urls/resolvers.py(173):         regex_pattern = self.regex.pattern
0.80 /testbed/django/urls/resolvers.py(174):         if regex_pattern.endswith('$') and not regex_pattern.endswith(r'\$'):
0.80 /testbed/django/urls/resolvers.py(182):             return []
0.80 /testbed/django/urls/resolvers.py(170):         return warnings
System check identified no issues (0 silenced).
0.82 /testbed/django/urls/base.py(94):     get_callable.cache_clear()
0.82 /testbed/django/urls/base.py(95):     _get_cached_resolver.cache_clear()
0.82 /testbed/django/urls/base.py(96):     get_ns_resolver.cache_clear()
0.82 /testbed/django/urls/resolvers.py(67):     if urlconf is None:
0.82 /testbed/django/urls/resolvers.py(68):         urlconf = settings.ROOT_URLCONF
0.82 /testbed/django/urls/resolvers.py(69):     return _get_cached_resolver(urlconf)
0.82 /testbed/django/urls/resolvers.py(74):     return URLResolver(RegexPattern(r'^/'), urlconf)
0.82 /testbed/django/urls/resolvers.py(148):         self._regex = regex
0.82 /testbed/django/urls/resolvers.py(149):         self._regex_dict = {}
0.82 /testbed/django/urls/resolvers.py(150):         self._is_endpoint = is_endpoint
0.82 /testbed/django/urls/resolvers.py(151):         self.name = name
0.82 /testbed/django/urls/resolvers.py(152):         self.converters = {}
0.82 /testbed/django/urls/resolvers.py(372):         self.pattern = pattern
0.82 /testbed/django/urls/resolvers.py(376):         self.urlconf_name = urlconf_name
0.82 /testbed/django/urls/resolvers.py(377):         self.callback = None
0.82 /testbed/django/urls/resolvers.py(378):         self.default_kwargs = default_kwargs or {}
0.82 /testbed/django/urls/resolvers.py(379):         self.namespace = namespace
0.82 /testbed/django/urls/resolvers.py(380):         self.app_name = app_name
0.82 /testbed/django/urls/resolvers.py(381):         self._reverse_dict = {}
0.82 /testbed/django/urls/resolvers.py(382):         self._namespace_dict = {}
0.82 /testbed/django/urls/resolvers.py(383):         self._app_dict = {}
0.82 /testbed/django/urls/resolvers.py(386):         self._callback_strs = set()
0.82 /testbed/django/urls/resolvers.py(387):         self._populated = False
0.82 /testbed/django/urls/resolvers.py(388):         self._local = Local()
0.82 /testbed/django/urls/base.py(132):     if urlconf_name:
0.82 /testbed/django/urls/base.py(133):         _urlconfs.value = urlconf_name
0.82 /testbed/django/urls/resolvers.py(67):     if urlconf is None:
0.82 /testbed/django/urls/resolvers.py(69):     return _get_cached_resolver(urlconf)
+ cat coverage.cover
{"/testbed/django/urls/base.py": {"1": 1, "3": 1, "5": 1, "6": 1, "7": 1, "9": 1, "10": 1, "11": 1, "16": 1, "19": 1, "22": 1, "28": 1, "90": 1, "93": 1, "99": 1, "108": 1, "117": 1, "127": 1, "139": 1, "147": 1, "160": 1, "23": 0, "24": 0, "25": 0, "29": 0, "30": 0, "31": 0, "32": 0, "33": 0, "35": 0, "37": 0, "38": 0, "40": 0, "42": 0, "43": 0, "44": 0, "46": 0, "48": 0, "49": 0, "50": 0, "51": 0, "52": 0, "54": 0, "55": 0, "57": 0, "60": 0, "61": 0, "64": 0, "65": 0, "66": 0, "68": 0, "69": 0, "71": 0, "72": 0, "73": 0, "74": 0, "75": 0, "76": 0, "77": 0, "78": 0, "79": 0, "80": 0, "83": 0, "84": 0, "85": 0, "87": 0, "94": 1, "95": 1, "96": 1, "103": 1, "104": 0, "105": 1, "114": 0, "121": 0, "122": 0, "123": 0, "124": 0, "132": 1, "133": 1, "135": 0, "136": 0, "144": 0, "153": 0, "154": 0, "155": 0, "156": 0, "157": 0, "166": 0, "167": 0, "168": 0, "169": 0, "170": 0, "172": 0, "173": 0, "174": 0, "175": 0, "176": 0, "177": 0, "179": 0, "180": 0}}
{"/testbed/django/urls/resolvers.py": {"8": 1, "9": 1, "10": 1, "11": 1, "12": 1, "14": 1, "16": 1, "17": 1, "18": 1, "19": 1, "20": 1, "21": 1, "22": 1, "23": 1, "24": 1, "26": 1, "27": 1, "28": 1, "31": 2, "66": 1, "72": 1, "73": 1, "77": 1, "88": 2, "111": 2, "144": 2, "197": 1, "198": 1, "202": 1, "242": 2, "285": 2, "319": 2, "370": 2, "32": 1, "56": 1, "59": 1, "33": 0, "34": 0, "35": 0, "36": 0, "37": 0, "41": 0, "42": 0, "43": 0, "44": 0, "46": 0, "48": 0, "51": 0, "53": 0, "54": 0, "57": 0, "60": 0, "61": 0, "62": 0, "67": 4, "68": 3, "69": 4, "74": 2, "82": 0, "83": 0, "84": 0, "85": 0, "89": 1, "92": 1, "90": 2, "96": 1, "97": 0, "101": 1, "102": 1, "103": 1, "104": 1, "105": 0, "106": 0, "107": 0, "108": 0, "112": 1, "121": 1, "116": 0, "117": 0, "118": 0, "119": 0, "125": 1, "126": 1, "129": 0, "130": 1, "131": 0, "132": 0, "135": 0, "137": 0, "139": 0, "141": 1, "145": 1, "147": 1, "154": 1, "165": 1, "172": 1, "184": 1, "193": 1, "148": 2, "149": 2, "150": 2, "151": 2, "152": 2, "155": 0, "156": 0, "160": 0, "161": 0, "162": 0, "163": 0, "166": 1, "167": 1, "168": 1, "169": 1, "170": 1, "173": 1, "174": 1, "175": 0, "176": 0, "178": 0, "179": 0, "182": 1, "186": 1, "187": 1, "188": 0, "189": 0, "190": 0, "194": 0, "209": 0, "210": 0, "211": 0, "212": 0, "213": 0, "214": 0, "215": 0, "216": 0, "217": 0, "218": 0, "219": 0, "220": 0, "221": 0, "222": 0, "223": 0, "225": 0, "226": 0, "228": 0, "229": 0, "230": 0, "231": 0, "232": 0, "233": 0, "235": 0, "236": 0, "237": 0, "238": 0, "239": 0, "243": 1, "245": 1, "252": 1, "266": 1, "278": 1, "281": 1, "246": 0, "247": 0, "248": 0, "249": 0, "250": 0, "253": 0, "254": 0, "256": 0, "257": 0, "258": 0, "259": 0, "260": 0, "261": 0, "262": 0, "263": 0, "264": 0, "267": 0, "268": 0, "269": 0, "270": 0, "271": 0, "273": 0, "274": 0, "276": 0, "279": 0, "282": 0, "286": 1, "290": 1, "295": 1, "303": 1, "309": 1, "312": 1, "315": 1, "287": 0, "288": 0, "293": 0, "297": 0, "298": 0, "299": 0, "301": 0, "304": 0, "305": 0, "306": 0, "307": 0, "310": 0, "313": 0, "316": 0, "320": 1, "326": 1, "329": 1, "334": 1, "348": 1, "356": 1, "321": 0, "322": 0, "323": 0, "324": 0, "327": 0, "330": 0, "331": 0, "332": 0, "338": 0, "339": 0, "340": 0, "341": 0, "342": 0, "344": 0, "346": 0, "349": 0, "350": 0, "351": 0, "353": 0, "354": 0, "362": 0, "363": 0, "364": 0, "365": 0, "366": 0, "367": 0, "371": 1, "390": 1, "401": 1, "408": 1, "438": 1, "499": 1, "506": 1, "513": 1, "520": 1, "529": 1, "534": 1, "574": 1, "581": 1, "596": 1, "605": 1, "608": 1, "372": 2, "376": 2, "377": 2, "378": 2, "379": 2, "380": 2, "381": 2, "382": 2, "383": 2, "386": 2, "387": 2, "388": 2, "391": 0, "393": 0, "395": 0, "396": 0, "397": 0, "398": 0, "402": 1, "403": 1, "404": 0, "405": 1, "406": 1, "409": 1, "412": 5, "413": 4, "414": 4, "415": 0, "416": 0, "418": 0, "419": 0, "420": 0, "421": 0, "422": 4, "423": 4, "424": 4, "425": 4, "426": 0, "428": 0, "431": 0, "432": 0, "433": 0, "435": 0, "436": 1, "443": 0, "444": 0, "445": 0, "446": 0, "447": 0, "448": 0, "449": 0, "450": 0, "451": 0, "452": 0, "453": 0, "454": 0, "455": 0, "456": 0, "457": 0, "458": 0, "459": 0, "460": 0, "462": 0, "463": 0, "464": 0, "465": 0, "468": 0, "469": 0, "470": 0, "471": 0, "473": 0, "474": 0, "475": 0, "476": 0, "477": 0, "479": 0, "480": 0, "481": 0, "482": 0, "485": 0, "486": 0, "487": 0, "488": 0, "489": 0, "490": 0, "491": 0, "492": 0, "493": 0, "494": 0, "495": 0, "497": 0, "501": 0, "502": 0, "503": 0, "504": 0, "508": 0, "509": 0, "510": 0, "511": 0, "515": 0, "516": 0, "517": 0, "518": 0, "523": 0, "524": 0, "525": 0, "526": 0, "527": 0, "530": 0, "531": 0, "532": 0, "535": 0, "536": 0, "537": 0, "538": 0, "539": 0, "540": 0, "541": 0, "542": 0, "543": 0, "544": 0, "545": 0, "546": 0, "548": 0, "550": 0, "552": 0, "554": 0, "557": 0, "558": 0, "559": 0, "560": 0, "561": 0, "562": 0, "563": 0, "564": 0, "565": 0, "566": 0, "567": 0, "568": 0, "570": 0, "571": 0, "572": 0, "576": 1, "577": 1, "579": 0, "584": 1, "585": 1, "586": 1, "587": 0, "589": 0, "593": 0, "594": 1, "597": 4, "598": 4, "601": 4, "602": 4, "603": 4, "606": 0, "609": 0, "610": 0, "612": 0, "613": 0, "615": 0, "617": 0, "618": 0, "619": 0, "620": 0, "621": 0, "622": 0, "624": 0, "625": 0, "626": 0, "627": 0, "628": 0, "630": 0, "631": 0, "632": 0, "633": 0, "635": 0, "641": 0, "642": 0, "644": 0, "646": 0, "649": 0, "650": 0, "651": 0, "652": 0, "654": 0, "656": 0, "657": 0, "658": 0, "659": 0, "660": 0, "661": 0, "663": 0, "665": 0, "666": 0, "670": 0, "671": 0, "673": 0}}
+ git checkout 55b68de643b5c2d5f0a8ea7587ab3b2966021ccc
Note: switching to '55b68de643b5c2d5f0a8ea7587ab3b2966021ccc'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at 55b68de643 Fixed #30608 -- Fixed non-unicode EmailMessage crash when domain name for localhost is non-ASCII.
M	django/urls/base.py
M	django/urls/resolvers.py
+ git apply /root/pre_state.patch
error: unrecognized input
