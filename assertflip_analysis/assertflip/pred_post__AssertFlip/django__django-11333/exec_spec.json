{"instance_id": "django__django-11333", "repo": "django/django", "version": "3.0", "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27", "patch_list": ["diff --git a/django/urls/base.py b/django/urls/base.py\n--- a/django/urls/base.py\n+++ b/django/urls/base.py\n@@ -7,7 +7,7 @@\n from django.utils.translation import override\n \n from .exceptions import NoReverseMatch, Resolver404\n-from .resolvers import get_ns_resolver, get_resolver\n+from .resolvers import _get_cached_resolver, get_ns_resolver, get_resolver\n from .utils import get_callable\n \n # SCRIPT_NAME prefixes for each thread are stored here. If there's no entry for\n@@ -92,7 +92,7 @@ def reverse(viewname, urlconf=None, args=None, kwargs=None, current_app=None):\n \n def clear_url_caches():\n     get_callable.cache_clear()\n-    get_resolver.cache_clear()\n+    _get_cached_resolver.cache_clear()\n     get_ns_resolver.cache_clear()\n \n \ndiff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -63,10 +63,14 @@ def __repr__(self):\n         )\n \n \n-@functools.lru_cache(maxsize=None)\n def get_resolver(urlconf=None):\n     if urlconf is None:\n         urlconf = settings.ROOT_URLCONF\n+    return _get_cached_resolver(urlconf)\n+\n+\n+@functools.lru_cache(maxsize=None)\n+def _get_cached_resolver(urlconf=None):\n     return URLResolver(RegexPattern(r'^/'), urlconf)\n \n \n", "diff --git a/dev/null b/tests/test_coverup_django__django-11333.py\nnew file mode 100644\nindex e69de29..ea6bcae 100644\n--- /dev/null\n+++ b/tests/test_coverup_django__django-11333.py\n@@ -0,0 +1,26 @@\n+from django.test import TestCase\n+from django.urls import get_resolver, clear_url_caches\n+from django.conf import settings\n+\n+class URLResolverTest(TestCase):\n+    def setUp(self):\n+        # Set up a test URL configuration with a large number of routes\n+        self.test_urlconf = 'myapp.test_urls'\n+        settings.ROOT_URLCONF = self.test_urlconf\n+\n+    def test_multiple_urlresolver_instances(self):\n+        # Clear any existing caches\n+        clear_url_caches()\n+\n+        # Call get_resolver before handling a request\n+        resolver_before = get_resolver(None)\n+\n+        # Simulate handling a request by setting the URL configuration\n+        from django.urls.base import set_urlconf\n+        set_urlconf(settings.ROOT_URLCONF)\n+\n+        # Call get_resolver after handling a request\n+        resolver_after = get_resolver(settings.ROOT_URLCONF)\n+\n+        # Assert that the two URLResolver instances are the same\n+        self.assertEqual(resolver_before, resolver_after)\n"], "arch": "x86_64", "base_commit": "55b68de643b5c2d5f0a8ea7587ab3b2966021ccc", "test_directives": ["test_coverup_django__django-11333"], "coverage_files": ["django/urls/resolvers.py", "django/urls/base.py"], "env_name": "testbed", "run_id": "assertflip", "patch_id": "pred_post__AssertFlip", "timeout": 1800, "rm_image": false, "force_rebuild": false, "exec_mode": "unit_test", "reproduction_script_name": null, "compute_coverage": true, "install": {"python": "3.6", "packages": "requirements.txt", "install": "python -m pip install -e .", "eval_commands": ["sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen && locale-gen", "export LANG=en_US.UTF-8", "export LANGUAGE=en_US:en", "export LC_ALL=en_US.UTF-8"]}, "cache_level": "instance", "test_command": "python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/urls/resolvers\\.py|django/urls/base\\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-11333", "req_install_commands": ["conda create -n testbed python=3.6 -y", "cat <<'EOF_59812759871' > $HOME/requirements.txt\nasgiref ~= 3.2\nargon2-cffi >= 16.1.0\nbcrypt\ndocutils\ngeoip2\njinja2 >= 2.9.2\nnumpy\nPillow != 5.4.0\npylibmc; sys.platform != 'win32'\npython-memcached >= 1.59\npytz\npywatchman; sys.platform != 'win32'\nPyYAML\nselenium\nsqlparse >= 0.2.2\ntblib >= 1.5.0\n\nEOF_59812759871", "conda activate testbed && python -m pip install -r $HOME/requirements.txt", "rm $HOME/requirements.txt"]}