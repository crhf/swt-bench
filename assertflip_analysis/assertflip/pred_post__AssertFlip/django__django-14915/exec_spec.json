{"instance_id": "django__django-14915", "repo": "django/django", "version": "4.1", "environment_setup_commit": "647480166bfe7532e8c471fef0146e3a17e6c0c9", "patch_list": ["diff --git a/django/forms/models.py b/django/forms/models.py\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -1166,6 +1166,9 @@ def __init__(self, value, instance):\n     def __str__(self):\n         return str(self.value)\n \n+    def __hash__(self):\n+        return hash(self.value)\n+\n     def __eq__(self, other):\n         if isinstance(other, ModelChoiceIteratorValue):\n             other = other.value\n", "diff --git a/dev/null b/tests/test_coverup_django__django-14915.py\nnew file mode 100644\nindex e69de29..c45756d 100644\n--- /dev/null\n+++ b/tests/test_coverup_django__django-14915.py\n@@ -0,0 +1,16 @@\n+from django.test import SimpleTestCase\n+from django.forms.models import ModelChoiceIteratorValue\n+\n+class ModelChoiceIteratorValueHashableTest(SimpleTestCase):\n+    def test_model_choice_iterator_value_unhashable(self):\n+        \"\"\"\n+        Test that using ModelChoiceIteratorValue as a dictionary key does not raise TypeError.\n+        \"\"\"\n+        value_instance = ModelChoiceIteratorValue(value=1, instance=None)\n+        \n+        try:\n+            # Attempt to use ModelChoiceIteratorValue as a dictionary key\n+            test_dict = {value_instance: \"test\"}\n+        except TypeError as e:\n+            # If a TypeError is raised, the test should fail\n+            self.fail(f\"ModelChoiceIteratorValue should be hashable, but raised TypeError: {str(e)}\")\n"], "arch": "x86_64", "base_commit": "903aaa35e5ceaa33bfc9b19b7f6da65ce5a91dd4", "test_directives": ["test_coverup_django__django-14915"], "coverage_files": ["django/forms/models.py"], "env_name": "testbed", "run_id": "assertflip", "patch_id": "pred_post__AssertFlip", "timeout": 1800, "rm_image": false, "force_rebuild": false, "exec_mode": "unit_test", "reproduction_script_name": null, "compute_coverage": true, "install": {"python": "3.9", "packages": "requirements.txt", "install": "python -m pip install -e ."}, "cache_level": "instance", "test_command": "python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/forms/models\\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-14915", "req_install_commands": ["conda create -n testbed python=3.9 -y", "cat <<'EOF_59812759871' > $HOME/requirements.txt\naiosmtpd\nasgiref >= 3.4.1\nargon2-cffi >= 16.1.0\nbackports.zoneinfo; python_version < '3.9'\nbcrypt\nblack\ndocutils\ngeoip2\njinja2 >= 2.9.2\nnumpy\nPillow >= 6.2.0\npylibmc; sys.platform != 'win32'\npymemcache >= 3.4.0\npytz\npywatchman; sys.platform != 'win32'\nPyYAML\nredis >= 3.0.0\nselenium\nsqlparse >= 0.2.2\ntblib >= 1.5.0\ntzdata\ncolorama; sys.platform == 'win32'\n\nEOF_59812759871", "conda activate testbed && python -m pip install -r $HOME/requirements.txt", "rm $HOME/requirements.txt"]}