+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD ece18207cbb64dd89014e279ac636a6c9829828e
+ sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen
+ locale-gen
Generating locales (this might take a while)...
  en_US.UTF-8... done
Generation complete.
+ export LANG=en_US.UTF-8
+ LANG=en_US.UTF-8
+ export LANGUAGE=en_US:en
+ LANGUAGE=en_US:en
+ export LC_ALL=en_US.UTF-8
+ LC_ALL=en_US.UTF-8
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
nothing to commit, working tree clean
+ git show
commit ece18207cbb64dd89014e279ac636a6c9829828e
Author: Tim Park <timpark0807@gmail.com>
Date:   Sat Aug 29 12:17:58 2020 -0700

    Fixed #31858 -- Reallowed whitespaces in URL paths outside of parameters.
    
    Regression in 22394bd3a18a7d9a8957a0b431f8ae4e5ca03a8c.
    
    Thanks David Smith for the review.

diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py
index 9f4d84d5a2..5e3e6dea16 100644
--- a/django/urls/resolvers.py
+++ b/django/urls/resolvers.py
@@ -208,8 +208,6 @@ def _route_to_regex(route, is_endpoint=False):
     For example, 'foo/<int:pk>' returns '^foo\\/(?P<pk>[0-9]+)'
     and {'pk': <django.urls.converters.IntConverter>}.
     """
-    if not set(route).isdisjoint(string.whitespace):
-        raise ImproperlyConfigured("URL route '%s' cannot contain whitespace." % route)
     original_route = route
     parts = ['^']
     converters = {}
@@ -218,6 +216,11 @@ def _route_to_regex(route, is_endpoint=False):
         if not match:
             parts.append(re.escape(route))
             break
+        elif not set(match.group()).isdisjoint(string.whitespace):
+            raise ImproperlyConfigured(
+                "URL route '%s' cannot contain whitespace in angle brackets "
+                "<…>." % original_route
+            )
         parts.append(re.escape(route[:match.start()]))
         route = route[match.end():]
         parameter = match['parameter']
diff --git a/tests/urlpatterns/tests.py b/tests/urlpatterns/tests.py
index 54b7e09813..b6b23ade9e 100644
--- a/tests/urlpatterns/tests.py
+++ b/tests/urlpatterns/tests.py
@@ -1,3 +1,4 @@
+import string
 import uuid
 
 from django.conf.urls import url as conf_url
@@ -142,10 +143,19 @@ class SimplifiedURLTests(SimpleTestCase):
         with self.assertRaisesMessage(ImproperlyConfigured, msg):
             path('foo/<nonexistent:var>/', empty_view)
 
-    def test_space_in_route(self):
-        msg = "URL route 'space/<int: num>' cannot contain whitespace."
-        with self.assertRaisesMessage(ImproperlyConfigured, msg):
-            path('space/<int: num>', empty_view)
+    def test_whitespace_in_route(self):
+        msg = (
+            "URL route 'space/<int:num>/extra/<str:%stest>' cannot contain "
+            "whitespace in angle brackets <…>"
+        )
+        for whitespace in string.whitespace:
+            with self.subTest(repr(whitespace)):
+                with self.assertRaisesMessage(ImproperlyConfigured, msg % whitespace):
+                    path('space/<int:num>/extra/<str:%stest>' % whitespace, empty_view)
+        # Whitespaces are valid in paths.
+        p = path('space%s/<int:num>/' % string.whitespace, empty_view)
+        match = p.resolve('space%s/1/' % string.whitespace)
+        self.assertEqual(match.kwargs, {'num': 1})
 
 
 @override_settings(ROOT_URLCONF='urlpatterns.converter_urls')
+ git diff ece18207cbb64dd89014e279ac636a6c9829828e
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
Requirement already satisfied: asgiref>=3.2.10 in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.2) (3.4.1)
Requirement already satisfied: pytz in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.2) (2025.2)
Requirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.2) (0.4.4)
Requirement already satisfied: typing-extensions in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from asgiref>=3.2.10->Django==3.2) (4.1.1)
Installing collected packages: Django
  Attempting uninstall: Django
    Found existing installation: Django 3.2
    Uninstalling Django-3.2:
      Successfully uninstalled Django-3.2
  Running setup.py develop for Django
Successfully installed Django-3.2
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv
+ git apply -v -
Checking patch django/db/models/fields/files.py...
Applied patch django/db/models/fields/files.py cleanly.
+ git apply -v -
Checking patch tests/test_coverup_django__django-13343.py...
Applied patch tests/test_coverup_django__django-13343.py cleanly.
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/db/models/fields/files\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-13343
test_filefield_with_callable_storage_deconstructs_correctly (test_coverup_django__django-13343.FileFieldDeconstructTests) ... ['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(django/db/models/fields/files\\.py)']
0.33 /testbed/django/db/models/fields/files.py(1): import datetime
0.33 /testbed/django/db/models/fields/files.py(2): import posixpath
0.33 /testbed/django/db/models/fields/files.py(4): from django import forms
0.33 /testbed/django/db/models/fields/files.py(5): from django.core import checks
0.33 /testbed/django/db/models/fields/files.py(6): from django.core.files.base import File
0.33 /testbed/django/db/models/fields/files.py(7): from django.core.files.images import ImageFile
0.33 /testbed/django/db/models/fields/files.py(8): from django.core.files.storage import Storage, default_storage
0.33 /testbed/django/db/models/fields/files.py(9): from django.db.models import signals
0.33 /testbed/django/db/models/fields/files.py(10): from django.db.models.fields import Field
0.33 /testbed/django/db/models/fields/files.py(11): from django.db.models.query_utils import DeferredAttribute
0.33 /testbed/django/db/models/fields/files.py(12): from django.utils.translation import gettext_lazy as _
0.33 /testbed/django/db/models/fields/files.py(15): class FieldFile(File):
0.33 /testbed/django/db/models/fields/files.py(15): class FieldFile(File):
0.33 /testbed/django/db/models/fields/files.py(16):     def __init__(self, instance, field, name):
0.33 /testbed/django/db/models/fields/files.py(23):     def __eq__(self, other):
0.33 /testbed/django/db/models/fields/files.py(30):     def __hash__(self):
0.33 /testbed/django/db/models/fields/files.py(37):     def _require_file(self):
0.33 /testbed/django/db/models/fields/files.py(41):     def _get_file(self):
0.33 /testbed/django/db/models/fields/files.py(47):     def _set_file(self, file):
0.33 /testbed/django/db/models/fields/files.py(50):     def _del_file(self):
0.33 /testbed/django/db/models/fields/files.py(53):     file = property(_get_file, _set_file, _del_file)
0.33 /testbed/django/db/models/fields/files.py(55):     @property
0.33 /testbed/django/db/models/fields/files.py(60):     @property
0.33 /testbed/django/db/models/fields/files.py(65):     @property
0.33 /testbed/django/db/models/fields/files.py(72):     def open(self, mode='rb'):
0.33 /testbed/django/db/models/fields/files.py(80):     open.alters_data = True
0.33 /testbed/django/db/models/fields/files.py(86):     def save(self, name, content, save=True):
0.33 /testbed/django/db/models/fields/files.py(95):     save.alters_data = True
0.33 /testbed/django/db/models/fields/files.py(97):     def delete(self, save=True):
0.33 /testbed/django/db/models/fields/files.py(114):     delete.alters_data = True
0.33 /testbed/django/db/models/fields/files.py(116):     @property
0.33 /testbed/django/db/models/fields/files.py(121):     def close(self):
0.33 /testbed/django/db/models/fields/files.py(126):     def __getstate__(self):
0.33 /testbed/django/db/models/fields/files.py(139):     def __setstate__(self, state):
0.33 /testbed/django/db/models/fields/files.py(144): class FileDescriptor(DeferredAttribute):
0.33 /testbed/django/db/models/fields/files.py(144): class FileDescriptor(DeferredAttribute):
0.33 /testbed/django/db/models/fields/files.py(157):     """
0.33 /testbed/django/db/models/fields/files.py(158):     def __get__(self, instance, cls=None):
0.33 /testbed/django/db/models/fields/files.py(212):     def __set__(self, instance, value):
0.33 /testbed/django/db/models/fields/files.py(216): class FileField(Field):
0.33 /testbed/django/db/models/fields/files.py(216): class FileField(Field):
0.33 /testbed/django/db/models/fields/files.py(220):     attr_class = FieldFile
0.33 /testbed/django/db/models/fields/files.py(223):     descriptor_class = FileDescriptor
0.33 /testbed/django/db/models/fields/files.py(225):     description = _("File")
0.33 /testbed/django/db/models/fields/files.py(227):     def __init__(self, verbose_name=None, name=None, upload_to='', storage=None, **kwargs):
0.33 /testbed/django/db/models/fields/files.py(245):     def check(self, **kwargs):
0.33 /testbed/django/db/models/fields/files.py(252):     def _check_primary_key(self):
0.33 /testbed/django/db/models/fields/files.py(264):     def _check_upload_to(self):
0.33 /testbed/django/db/models/fields/files.py(278):     def deconstruct(self):
0.33 /testbed/django/db/models/fields/files.py(287):     def get_internal_type(self):
0.33 /testbed/django/db/models/fields/files.py(290):     def get_prep_value(self, value):
0.33 /testbed/django/db/models/fields/files.py(297):     def pre_save(self, model_instance, add):
0.33 /testbed/django/db/models/fields/files.py(304):     def contribute_to_class(self, cls, name, **kwargs):
0.33 /testbed/django/db/models/fields/files.py(308):     def generate_filename(self, instance, filename):
0.33 /testbed/django/db/models/fields/files.py(322):     def save_form_data(self, instance, data):
0.33 /testbed/django/db/models/fields/files.py(332):     def formfield(self, **kwargs):
0.33 /testbed/django/db/models/fields/files.py(340): class ImageFileDescriptor(FileDescriptor):
0.33 /testbed/django/db/models/fields/files.py(340): class ImageFileDescriptor(FileDescriptor):
0.33 /testbed/django/db/models/fields/files.py(344):     """
0.33 /testbed/django/db/models/fields/files.py(345):     def __set__(self, instance, value):
0.33 /testbed/django/db/models/fields/files.py(362): class ImageFieldFile(ImageFile, FieldFile):
0.33 /testbed/django/db/models/fields/files.py(362): class ImageFieldFile(ImageFile, FieldFile):
0.33 /testbed/django/db/models/fields/files.py(363):     def delete(self, save=True):
0.33 /testbed/django/db/models/fields/files.py(370): class ImageField(FileField):
0.33 /testbed/django/db/models/fields/files.py(370): class ImageField(FileField):
0.33 /testbed/django/db/models/fields/files.py(371):     attr_class = ImageFieldFile
0.33 /testbed/django/db/models/fields/files.py(372):     descriptor_class = ImageFileDescriptor
0.33 /testbed/django/db/models/fields/files.py(373):     description = _("Image")
0.33 /testbed/django/db/models/fields/files.py(375):     def __init__(self, verbose_name=None, name=None, width_field=None, height_field=None, **kwargs):
0.33 /testbed/django/db/models/fields/files.py(379):     def check(self, **kwargs):
0.33 /testbed/django/db/models/fields/files.py(385):     def _check_image_library_installed(self):
0.33 /testbed/django/db/models/fields/files.py(401):     def deconstruct(self):
0.33 /testbed/django/db/models/fields/files.py(409):     def contribute_to_class(self, cls, name, **kwargs):
0.33 /testbed/django/db/models/fields/files.py(418):     def update_dimension_fields(self, instance, force=False, *args, **kwargs):
0.33 /testbed/django/db/models/fields/files.py(475):     def formfield(self, **kwargs):
Testing against Django installed in '/testbed/django'
Skipping setup of unused database(s): default, other.
System check identified no issues (0 silenced).
0.71 /testbed/django/db/models/fields/files.py(228):         self._primary_key_set_explicitly = 'primary_key' in kwargs
0.71 /testbed/django/db/models/fields/files.py(230):         self.storage = storage or default_storage
0.71 /testbed/django/db/models/fields/files.py(231):         if callable(self.storage):
0.71 /testbed/django/db/models/fields/files.py(233):             self._storage_callable = self.storage
0.71 /testbed/django/db/models/fields/files.py(234):             self.storage = self.storage()
0.71 /testbed/django/db/models/fields/files.py(235):             if not isinstance(self.storage, Storage):
0.71 /testbed/django/db/models/fields/files.py(240):         self.upload_to = upload_to
0.71 /testbed/django/db/models/fields/files.py(242):         kwargs.setdefault('max_length', 100)
0.71 /testbed/django/db/models/fields/files.py(243):         super().__init__(verbose_name, name, **kwargs)
0.71 /testbed/django/db/models/fields/files.py(279):         name, path, args, kwargs = super().deconstruct()
0.71 /testbed/django/db/models/fields/files.py(280):         if kwargs.get("max_length") == 100:
0.71 /testbed/django/db/models/fields/files.py(281):             del kwargs["max_length"]
0.71 /testbed/django/db/models/fields/files.py(282):         kwargs['upload_to'] = self.upload_to
0.71 /testbed/django/db/models/fields/files.py(283):         if self.storage is not default_storage:
0.71 /testbed/django/db/models/fields/files.py(284):             kwargs['storage'] = getattr(self, '_storage_callable', self.storage)
0.71 /testbed/django/db/models/fields/files.py(285):         return name, path, args, kwargs
ok

----------------------------------------------------------------------
Ran 1 test in 0.004s

OK
+ cat coverage.cover
{"/testbed/django/db/models/fields/files.py": {"1": 1, "2": 1, "4": 1, "5": 1, "6": 1, "7": 1, "8": 1, "9": 1, "10": 1, "11": 1, "12": 1, "15": 2, "144": 2, "216": 2, "340": 2, "362": 2, "370": 2, "16": 1, "23": 1, "30": 1, "37": 1, "41": 1, "47": 1, "50": 1, "53": 1, "55": 1, "60": 1, "65": 1, "72": 1, "80": 1, "86": 1, "95": 1, "97": 1, "114": 1, "116": 1, "121": 1, "126": 1, "139": 1, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "26": 0, "27": 0, "28": 0, "31": 0, "38": 0, "39": 0, "42": 0, "43": 0, "44": 0, "45": 0, "48": 0, "51": 0, "57": 0, "58": 0, "62": 0, "63": 0, "67": 0, "68": 0, "69": 0, "70": 0, "73": 0, "74": 0, "75": 0, "77": 0, "78": 0, "87": 0, "88": 0, "89": 0, "90": 0, "93": 0, "94": 0, "98": 0, "99": 0, "102": 0, "103": 0, "104": 0, "106": 0, "108": 0, "109": 0, "110": 0, "112": 0, "113": 0, "118": 0, "119": 0, "122": 0, "123": 0, "124": 0, "131": 0, "132": 0, "133": 0, "134": 0, "135": 0, "136": 0, "140": 0, "141": 0, "158": 1, "212": 1, "159": 0, "160": 0, "174": 0, "183": 0, "184": 0, "185": 0, "191": 0, "192": 0, "193": 0, "194": 0, "195": 0, "200": 0, "201": 0, "202": 0, "203": 0, "206": 0, "207": 0, "210": 0, "213": 0, "220": 1, "223": 1, "225": 1, "227": 1, "245": 1, "252": 1, "264": 1, "278": 1, "287": 1, "290": 1, "297": 1, "304": 1, "308": 1, "322": 1, "332": 1, "228": 1, "230": 1, "231": 1, "233": 1, "234": 1, "235": 1, "236": 0, "237": 0, "238": 0, "240": 1, "242": 1, "243": 1, "247": 0, "248": 0, "249": 0, "253": 0, "255": 0, "256": 0, "257": 0, "258": 0, "262": 0, "265": 0, "267": 0, "268": 0, "269": 0, "270": 0, "271": 0, "272": 0, "276": 0, "279": 1, "280": 1, "281": 1, "282": 1, "283": 1, "284": 1, "285": 1, "288": 0, "291": 0, "293": 0, "294": 0, "295": 0, "298": 0, "299": 0, "301": 0, "302": 0, "305": 0, "306": 0, "315": 0, "316": 0, "318": 0, "319": 0, "320": 0, "327": 0, "330": 0, "333": 0, "334": 0, "335": 0, "336": 0, "345": 1, "346": 0, "347": 0, "358": 0, "359": 0, "363": 1, "365": 0, "366": 0, "367": 0, "371": 1, "372": 1, "373": 1, "375": 1, "379": 1, "385": 1, "401": 1, "409": 1, "418": 1, "475": 1, "376": 0, "377": 0, "381": 0, "382": 0, "386": 0, "387": 0, "388": 0, "390": 0, "391": 0, "392": 0, "394": 0, "395": 0, "399": 0, "402": 0, "403": 0, "404": 0, "405": 0, "406": 0, "407": 0, "410": 0, "415": 0, "416": 0, "433": 0, "434": 0, "435": 0, "440": 0, "443": 0, "444": 0, "447": 0, "448": 0, "457": 0, "458": 0, "461": 0, "462": 0, "463": 0, "466": 0, "467": 0, "470": 0, "471": 0, "472": 0, "473": 0, "476": 0, "477": 0, "478": 0}}
+ git checkout ece18207cbb64dd89014e279ac636a6c9829828e
Note: switching to 'ece18207cbb64dd89014e279ac636a6c9829828e'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at ece18207cb Fixed #31858 -- Reallowed whitespaces in URL paths outside of parameters.
M	django/db/models/fields/files.py
+ git apply /root/pre_state.patch
error: unrecognized input
