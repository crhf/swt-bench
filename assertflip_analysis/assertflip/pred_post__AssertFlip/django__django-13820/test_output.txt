+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD 98ad327864aed8df245fd19ea9d2743279e11643
+ sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen
+ locale-gen
Generating locales (this might take a while)...
  en_US.UTF-8... done
Generation complete.
+ export LANG=en_US.UTF-8
+ LANG=en_US.UTF-8
+ export LANGUAGE=en_US:en
+ LANGUAGE=en_US:en
+ export LC_ALL=en_US.UTF-8
+ LC_ALL=en_US.UTF-8
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
nothing to commit, working tree clean
+ git show
commit 98ad327864aed8df245fd19ea9d2743279e11643
Author: Mariusz Felisiak <felisiak.mariusz@gmail.com>
Date:   Tue Dec 29 09:04:35 2020 +0100

    Fixed #32299 -- Prevented mutating handlers when processing middlewares marking as unused in an async context.
    
    Thanks Hubert Bielenia for the report.

diff --git a/django/core/handlers/base.py b/django/core/handlers/base.py
index 8e8c3da06a..728e449703 100644
--- a/django/core/handlers/base.py
+++ b/django/core/handlers/base.py
@@ -51,11 +51,11 @@ class BaseHandler:
                 middleware_is_async = middleware_can_async
             try:
                 # Adapt handler, if needed.
-                handler = self.adapt_method_mode(
+                adapted_handler = self.adapt_method_mode(
                     middleware_is_async, handler, handler_is_async,
                     debug=settings.DEBUG, name='middleware %s' % middleware_path,
                 )
-                mw_instance = middleware(handler)
+                mw_instance = middleware(adapted_handler)
             except MiddlewareNotUsed as exc:
                 if settings.DEBUG:
                     if str(exc):
@@ -63,6 +63,8 @@ class BaseHandler:
                     else:
                         logger.debug('MiddlewareNotUsed: %r', middleware_path)
                 continue
+            else:
+                handler = adapted_handler
 
             if mw_instance is None:
                 raise ImproperlyConfigured(
diff --git a/docs/releases/3.1.5.txt b/docs/releases/3.1.5.txt
index 0d11118446..eea060d112 100644
--- a/docs/releases/3.1.5.txt
+++ b/docs/releases/3.1.5.txt
@@ -12,3 +12,7 @@ Bugfixes
 * Fixed ``__isnull=True`` lookup on key transforms for
   :class:`~django.db.models.JSONField` with Oracle and SQLite
   (:ticket:`32252`).
+
+* Fixed a bug in Django 3.1 that caused a crash when processing middlewares in
+  an async context with a middleware that raises a ``MiddlewareNotUsed``
+  exception (:ticket:`32299`).
diff --git a/tests/middleware_exceptions/tests.py b/tests/middleware_exceptions/tests.py
index 8b019ba524..2a389ce125 100644
--- a/tests/middleware_exceptions/tests.py
+++ b/tests/middleware_exceptions/tests.py
@@ -181,6 +181,25 @@ class MiddlewareNotUsedTests(SimpleTestCase):
             with self.assertLogs('django.request', 'DEBUG'):
                 self.client.get('/middleware_exceptions/view/')
 
+    @override_settings(MIDDLEWARE=[
+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',
+        'middleware_exceptions.tests.MyMiddleware',
+    ])
+    async def test_async_and_sync_middleware_chain_async_call(self):
+        with self.assertLogs('django.request', 'DEBUG') as cm:
+            response = await self.async_client.get('/middleware_exceptions/view/')
+        self.assertEqual(response.content, b'OK')
+        self.assertEqual(response.status_code, 200)
+        self.assertEqual(
+            cm.records[0].getMessage(),
+            'Asynchronous middleware middleware_exceptions.tests.MyMiddleware '
+            'adapted.',
+        )
+        self.assertEqual(
+            cm.records[1].getMessage(),
+            "MiddlewareNotUsed: 'middleware_exceptions.tests.MyMiddleware'",
+        )
+
 
 @override_settings(
     DEBUG=True,
+ git diff 98ad327864aed8df245fd19ea9d2743279e11643
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
Requirement already satisfied: asgiref>=3.2.10 in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.2) (3.4.1)
Requirement already satisfied: pytz in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.2) (2025.2)
Requirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.2) (0.4.4)
Requirement already satisfied: typing-extensions in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from asgiref>=3.2.10->Django==3.2) (4.1.1)
Installing collected packages: Django
  Attempting uninstall: Django
    Found existing installation: Django 3.2
    Uninstalling Django-3.2:
      Successfully uninstalled Django-3.2
  Running setup.py develop for Django
Successfully installed Django-3.2
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv
+ git apply -v -
Checking patch django/db/migrations/loader.py...
Applied patch django/db/migrations/loader.py cleanly.
+ git apply -v -
<stdin>:30: trailing whitespace.
        
<stdin>:33: trailing whitespace.
        
<stdin>:36: trailing whitespace.
        
Checking patch tests/test_coverup_django__django-13820.py...
Applied patch tests/test_coverup_django__django-13820.py cleanly.
warning: 3 lines add whitespace errors.
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/db/migrations/loader\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-13820
test_load_disk_with_missing_file_attribute (test_coverup_django__django-13820.MigrationLoaderTest) ... ['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(django/db/migrations/loader\\.py)']
Testing against Django installed in '/testbed/django'
0.61 /testbed/django/db/migrations/loader.py(1): import pkgutil
0.61 /testbed/django/db/migrations/loader.py(2): import sys
0.61 /testbed/django/db/migrations/loader.py(3): from importlib import import_module, reload
0.61 /testbed/django/db/migrations/loader.py(5): from django.apps import apps
0.61 /testbed/django/db/migrations/loader.py(6): from django.conf import settings
0.61 /testbed/django/db/migrations/loader.py(7): from django.db.migrations.graph import MigrationGraph
0.61 /testbed/django/db/migrations/loader.py(8): from django.db.migrations.recorder import MigrationRecorder
0.61 /testbed/django/db/migrations/loader.py(10): from .exceptions import (
0.61 /testbed/django/db/migrations/loader.py(15): MIGRATIONS_MODULE_NAME = 'migrations'
0.61 /testbed/django/db/migrations/loader.py(18): class MigrationLoader:
0.61 /testbed/django/db/migrations/loader.py(18): class MigrationLoader:
0.61 /testbed/django/db/migrations/loader.py(41):     """
0.61 /testbed/django/db/migrations/loader.py(45):         replace_migrations=True,
0.61 /testbed/django/db/migrations/loader.py(55):     @classmethod
0.61 /testbed/django/db/migrations/loader.py(68):     def load_disk(self):
0.61 /testbed/django/db/migrations/loader.py(134):     def get_migration(self, app_label, name_prefix):
0.61 /testbed/django/db/migrations/loader.py(138):     def get_migration_by_prefix(self, app_label, name_prefix):
0.61 /testbed/django/db/migrations/loader.py(156):     def check_key(self, key, current_app):
0.61 /testbed/django/db/migrations/loader.py(184):     def add_internal_dependencies(self, key, migration):
0.61 /testbed/django/db/migrations/loader.py(194):     def add_external_dependencies(self, key, migration):
0.61 /testbed/django/db/migrations/loader.py(207):     def build_graph(self):
0.61 /testbed/django/db/migrations/loader.py(288):     def check_consistent_history(self, connection):
0.61 /testbed/django/db/migrations/loader.py(314):     def detect_conflicts(self):
0.61 /testbed/django/db/migrations/loader.py(328):     def project_state(self, nodes=None, at_end=True):
0.61 /testbed/django/db/migrations/loader.py(337):     def collect_sql(self, plan):
Skipping setup of unused database(s): default, other.
System check identified no issues (0 silenced).
0.65 /testbed/django/db/migrations/loader.py(47):         self.connection = connection
0.65 /testbed/django/db/migrations/loader.py(48):         self.disk_migrations = None
0.65 /testbed/django/db/migrations/loader.py(49):         self.applied_migrations = None
0.65 /testbed/django/db/migrations/loader.py(50):         self.ignore_no_migrations = ignore_no_migrations
0.65 /testbed/django/db/migrations/loader.py(51):         self.replace_migrations = replace_migrations
0.65 /testbed/django/db/migrations/loader.py(52):         if load:
0.65 /testbed/django/db/migrations/loader.py(53):             self.build_graph()
0.65 /testbed/django/db/migrations/loader.py(214):         self.load_disk()
0.65 /testbed/django/db/migrations/loader.py(70):         self.disk_migrations = {}
0.65 /testbed/django/db/migrations/loader.py(71):         self.unmigrated_apps = set()
0.65 /testbed/django/db/migrations/loader.py(72):         self.migrated_apps = set()
0.65 /testbed/django/db/migrations/loader.py(73):         for app_config in apps.get_app_configs():
0.65 /testbed/django/db/migrations/loader.py(75):             module_name, explicit = self.migrations_module(app_config.label)
0.65 /testbed/django/db/migrations/loader.py(62):         if app_label in settings.MIGRATION_MODULES:
0.65 /testbed/django/db/migrations/loader.py(65):             app_package_name = apps.get_app_config(app_label).name
0.65 /testbed/django/db/migrations/loader.py(66):             return '%s.%s' % (app_package_name, MIGRATIONS_MODULE_NAME), False
0.65 /testbed/django/db/migrations/loader.py(76):             if module_name is None:
0.65 /testbed/django/db/migrations/loader.py(79):             was_loaded = module_name in sys.modules
0.65 /testbed/django/db/migrations/loader.py(80):             try:
0.65 /testbed/django/db/migrations/loader.py(81):                 module = import_module(module_name)
0.65 /testbed/django/db/migrations/loader.py(92):                 if not hasattr(module, '__path__'):
0.65 /testbed/django/db/migrations/loader.py(99):                     getattr(module, '__file__', None) is None and
0.65 /testbed/django/db/migrations/loader.py(100):                     not isinstance(module.__path__, list)
0.65 /testbed/django/db/migrations/loader.py(105):                 if was_loaded:
0.65 /testbed/django/db/migrations/loader.py(107):             self.migrated_apps.add(app_config.label)
0.65 /testbed/django/db/migrations/loader.py(108):             migration_names = {
0.65 /testbed/django/db/migrations/loader.py(109):                 name for _, name, is_pkg in pkgutil.iter_modules(module.__path__)
0.65 /testbed/django/db/migrations/loader.py(108):             migration_names = {
0.65 /testbed/django/db/migrations/loader.py(113):             for migration_name in migration_names:
0.65 /testbed/django/db/migrations/loader.py(73):         for app_config in apps.get_app_configs():
0.65 /testbed/django/db/migrations/loader.py(216):         if self.connection is None:
0.65 /testbed/django/db/migrations/loader.py(217):             self.applied_migrations = {}
0.65 /testbed/django/db/migrations/loader.py(223):         self.graph = MigrationGraph()
0.65 /testbed/django/db/migrations/loader.py(224):         self.replacements = {}
0.65 /testbed/django/db/migrations/loader.py(225):         for key, migration in self.disk_migrations.items():
0.65 /testbed/django/db/migrations/loader.py(230):         for key, migration in self.disk_migrations.items():
0.65 /testbed/django/db/migrations/loader.py(234):         for key, migration in self.disk_migrations.items():
0.65 /testbed/django/db/migrations/loader.py(237):         if self.replace_migrations:
0.65 /testbed/django/db/migrations/loader.py(238):             for key, migration in self.replacements.items():
0.65 /testbed/django/db/migrations/loader.py(258):         try:
0.65 /testbed/django/db/migrations/loader.py(259):             self.graph.validate_consistency()
0.65 /testbed/django/db/migrations/loader.py(286):         self.graph.ensure_not_cyclic()
0.65 /testbed/django/db/migrations/loader.py(70):         self.disk_migrations = {}
0.65 /testbed/django/db/migrations/loader.py(71):         self.unmigrated_apps = set()
0.65 /testbed/django/db/migrations/loader.py(72):         self.migrated_apps = set()
0.65 /testbed/django/db/migrations/loader.py(73):         for app_config in apps.get_app_configs():
0.65 /testbed/django/db/migrations/loader.py(75):             module_name, explicit = self.migrations_module(app_config.label)
0.65 /testbed/django/db/migrations/loader.py(62):         if app_label in settings.MIGRATION_MODULES:
0.65 /testbed/django/db/migrations/loader.py(65):             app_package_name = apps.get_app_config(app_label).name
0.65 /testbed/django/db/migrations/loader.py(66):             return '%s.%s' % (app_package_name, MIGRATIONS_MODULE_NAME), False
0.65 /testbed/django/db/migrations/loader.py(76):             if module_name is None:
0.65 /testbed/django/db/migrations/loader.py(79):             was_loaded = module_name in sys.modules
0.65 /testbed/django/db/migrations/loader.py(80):             try:
0.65 /testbed/django/db/migrations/loader.py(81):                 module = import_module(module_name)
0.65 /testbed/django/db/migrations/loader.py(92):                 if not hasattr(module, '__path__'):
0.65 /testbed/django/db/migrations/loader.py(99):                     getattr(module, '__file__', None) is None and
0.65 /testbed/django/db/migrations/loader.py(100):                     not isinstance(module.__path__, list)
0.65 /testbed/django/db/migrations/loader.py(105):                 if was_loaded:
0.65 /testbed/django/db/migrations/loader.py(107):             self.migrated_apps.add(app_config.label)
0.65 /testbed/django/db/migrations/loader.py(108):             migration_names = {
0.65 /testbed/django/db/migrations/loader.py(109):                 name for _, name, is_pkg in pkgutil.iter_modules(module.__path__)
0.65 /testbed/django/db/migrations/loader.py(108):             migration_names = {
0.65 /testbed/django/db/migrations/loader.py(113):             for migration_name in migration_names:
0.65 /testbed/django/db/migrations/loader.py(73):         for app_config in apps.get_app_configs():
ok

----------------------------------------------------------------------
Ran 1 test in 0.002s

OK
+ cat coverage.cover
{"/testbed/django/db/migrations/loader.py": {"1": 1, "2": 1, "3": 1, "5": 1, "6": 1, "7": 1, "8": 1, "10": 1, "15": 1, "18": 2, "45": 1, "55": 1, "68": 1, "134": 1, "138": 1, "156": 1, "184": 1, "194": 1, "207": 1, "288": 1, "314": 1, "328": 1, "337": 1, "47": 1, "48": 1, "49": 1, "50": 1, "51": 1, "52": 1, "53": 1, "62": 2, "63": 0, "65": 2, "66": 2, "70": 2, "71": 2, "72": 2, "73": 4, "75": 2, "76": 2, "77": 0, "78": 0, "79": 2, "80": 2, "81": 2, "82": 0, "84": 0, "85": 0, "87": 0, "88": 0, "89": 0, "92": 2, "93": 0, "94": 0, "99": 2, "100": 2, "102": 0, "103": 0, "105": 2, "106": 0, "107": 2, "108": 4, "109": 2, "113": 2, "114": 0, "115": 0, "116": 0, "117": 0, "118": 0, "119": 0, "120": 0, "121": 0, "122": 0, "124": 0, "125": 0, "126": 0, "127": 0, "129": 0, "130": 0, "131": 0, "110": 0, "136": 0, "143": 0, "144": 0, "145": 0, "146": 0, "147": 0, "148": 0, "149": 0, "151": 0, "152": 0, "154": 0, "157": 0, "158": 0, "163": 0, "165": 0, "166": 0, "170": 0, "171": 0, "172": 0, "173": 0, "174": 0, "176": 0, "177": 0, "178": 0, "179": 0, "181": 0, "182": 0, "189": 0, "191": 0, "192": 0, "195": 0, "197": 0, "198": 0, "199": 0, "200": 0, "201": 0, "202": 0, "203": 0, "204": 0, "205": 0, "214": 1, "216": 1, "217": 1, "219": 0, "220": 0, "223": 1, "224": 1, "225": 1, "226": 0, "228": 0, "229": 0, "230": 1, "232": 0, "234": 1, "235": 0, "237": 1, "238": 1, "241": 0, "244": 0, "245": 0, "247": 0, "250": 0, "251": 0, "256": 0, "258": 1, "259": 1, "260": 0, "266": 0, "267": 0, "268": 0, "269": 0, "271": 0, "272": 0, "273": 0, "274": 0, "275": 0, "276": 0, "277": 0, "281": 0, "283": 0, "284": 0, "285": 0, "286": 1, "293": 0, "294": 0, "295": 0, "297": 0, "298": 0, "299": 0, "300": 0, "303": 0, "304": 0, "305": 0, "306": 0, "307": 0, "309": 0, "310": 0, "320": 0, "321": 0, "322": 0, "323": 0, "324": 0, "325": 0, "326": 0, "335": 0, "342": 0, "343": 0, "344": 0, "345": 0, "346": 0, "347": 0, "348": 0, "349": 0, "351": 0, "352": 0, "353": 0}}
+ git checkout 98ad327864aed8df245fd19ea9d2743279e11643
M	django/db/migrations/loader.py
Note: switching to '98ad327864aed8df245fd19ea9d2743279e11643'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at 98ad327864 Fixed #32299 -- Prevented mutating handlers when processing middlewares marking as unused in an async context.
+ git apply /root/pre_state.patch
error: unrecognized input
