+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD 28d913d3cead6c5646307ffa6540b21d65059dfd
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch master
nothing to commit, working tree clean
+ git show
commit 28d913d3cead6c5646307ffa6540b21d65059dfd
Merge: 86e2c4e140 f91afbe267
Author: Chris Smith <smichr@gmail.com>
Date:   Wed Jan 16 18:30:21 2019 -0600

    Merge pull request #15722 from sylee957/improve_qr_decomposition
    
    Expand QR Decomposition capabilities

+ git diff 28d913d3cead6c5646307ffa6540b21d65059dfd
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Requirement already satisfied: mpmath>=0.19 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from sympy==1.4.dev0) (1.3.0)
Installing collected packages: sympy
  Attempting uninstall: sympy
    Found existing installation: sympy 1.4.dev0
    Uninstalling sympy-1.4.dev0:
      Successfully uninstalled sympy-1.4.dev0
  DEPRECATION: Legacy editable install of sympy==1.4.dev0 from file:///testbed (setup.py develop) is deprecated. pip 25.3 will enforce this behaviour change. A possible replacement is to add a pyproject.toml or enable --use-pep517, and use setuptools >= 64. If the resulting installation is not behaving as expected, try using --config-settings editable_mode=compat. Please consult the setuptools documentation for more information. Discussion can be found at https://github.com/pypa/pip/issues/11457
  Running setup.py develop for sympy
Successfully installed sympy
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git apply -v -
Checking patch sympy/functions/elementary/miscellaneous.py...
Applied patch sympy/functions/elementary/miscellaneous.py cleanly.
+ git apply -v -
Checking patch sympy/polys/tests/test_coverup_sympy__sympy-15809.py...
Applied patch sympy/polys/tests/test_coverup_sympy__sympy-15809.py cleanly.
+ PYTHONWARNINGS=ignore::UserWarning,ignore::SyntaxWarning
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(sympy/functions/elementary/miscellaneous\.py)' bin/test -C --verbose sympy/polys/tests/test_coverup_sympy__sympy-15809.p
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(sympy/functions/elementary/miscellaneous\\.py)']
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(1): from __future__ import print_function, division
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(3): from sympy.core import S, sympify
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(4): from sympy.core.add import Add
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(5): from sympy.core.containers import Tuple
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(6): from sympy.core.operations import LatticeOp, ShortCircuit
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(7): from sympy.core.function import (Application, Lambda,
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(9): from sympy.core.expr import Expr
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(10): from sympy.core.mod import Mod
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(11): from sympy.core.mul import Mul
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(12): from sympy.core.numbers import Rational
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(13): from sympy.core.power import Pow
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(14): from sympy.core.relational import Eq, Relational
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(15): from sympy.core.singleton import Singleton
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(16): from sympy.core.symbol import Dummy
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(17): from sympy.core.rules import Transform
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(18): from sympy.core.compatibility import as_int, with_metaclass, range
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(19): from sympy.core.logic import fuzzy_and, fuzzy_or, _torf
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(20): from sympy.functions.elementary.integers import floor
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(21): from sympy.logic.boolalg import And, Or
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(23): def _minmax_as_Piecewise(op, *args):
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(35): class IdentityFunction(with_metaclass(Singleton, Lambda)):
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(35): class IdentityFunction(with_metaclass(Singleton, Lambda)):
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(36):     """
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(49):     def __new__(cls):
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(57): Id = S.IdentityFunction
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(50):         from sympy.sets.sets import FiniteSet
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(51):         x = Dummy('x')
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(53):         obj = Expr.__new__(cls, Tuple(x), x)
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(54):         obj.nargs = FiniteSet(1)
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(55):         return obj
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(64): def sqrt(arg, evaluate=None):
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(135): def cbrt(arg, evaluate=None):
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(188): def root(arg, n, k=0, evaluate=None):
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(280): def real_root(arg, n=None, evaluate=None):
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(340): class MinMaxBase(Expr, LatticeOp):
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(340): class MinMaxBase(Expr, LatticeOp):
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(341):     def __new__(cls, *args, **assumptions):
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(371):     @classmethod
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(372):     def _collapse_arguments(cls, args, **assumptions):
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(506):     @classmethod
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(507):     def _new_args_filter(cls, arg_sequence):
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(533):     @classmethod
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(534):     def _find_localzeros(cls, values, **options):
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(560):     @classmethod
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(561):     def _is_connected(cls, x, y):
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(591):     def _eval_derivative(self, s):
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(607):     def _eval_rewrite_as_Abs(self, *args, **kwargs):
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(613):     def evalf(self, prec=None, **options):
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(615):     n = evalf
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(617):     _eval_is_algebraic = lambda s: _torf(i.is_algebraic for i in s.args)
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(618):     _eval_is_antihermitian = lambda s: _torf(i.is_antihermitian for i in s.args)
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(619):     _eval_is_commutative = lambda s: _torf(i.is_commutative for i in s.args)
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(620):     _eval_is_complex = lambda s: _torf(i.is_complex for i in s.args)
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(621):     _eval_is_composite = lambda s: _torf(i.is_composite for i in s.args)
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(622):     _eval_is_even = lambda s: _torf(i.is_even for i in s.args)
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(623):     _eval_is_finite = lambda s: _torf(i.is_finite for i in s.args)
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(624):     _eval_is_hermitian = lambda s: _torf(i.is_hermitian for i in s.args)
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(625):     _eval_is_imaginary = lambda s: _torf(i.is_imaginary for i in s.args)
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(626):     _eval_is_infinite = lambda s: _torf(i.is_infinite for i in s.args)
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(627):     _eval_is_integer = lambda s: _torf(i.is_integer for i in s.args)
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(628):     _eval_is_irrational = lambda s: _torf(i.is_irrational for i in s.args)
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(629):     _eval_is_negative = lambda s: _torf(i.is_negative for i in s.args)
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(630):     _eval_is_noninteger = lambda s: _torf(i.is_noninteger for i in s.args)
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(631):     _eval_is_nonnegative = lambda s: _torf(i.is_nonnegative for i in s.args)
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(632):     _eval_is_nonpositive = lambda s: _torf(i.is_nonpositive for i in s.args)
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(633):     _eval_is_nonzero = lambda s: _torf(i.is_nonzero for i in s.args)
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(634):     _eval_is_odd = lambda s: _torf(i.is_odd for i in s.args)
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(635):     _eval_is_polar = lambda s: _torf(i.is_polar for i in s.args)
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(636):     _eval_is_positive = lambda s: _torf(i.is_positive for i in s.args)
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(637):     _eval_is_prime = lambda s: _torf(i.is_prime for i in s.args)
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(638):     _eval_is_rational = lambda s: _torf(i.is_rational for i in s.args)
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(639):     _eval_is_real = lambda s: _torf(i.is_real for i in s.args)
0.54 ['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(sympy/functions/elementary/miscellaneous\\.py)']
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(1): from __future__ import print_function, division
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(3): from sympy.core import S, sympify
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(4): from sympy.core.add import Add
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(5): from sympy.core.containers import Tuple
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(6): from sympy.core.operations import LatticeOp, ShortCircuit
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(7): from sympy.core.function import (Application, Lambda,
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(9): from sympy.core.expr import Expr
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(10): from sympy.core.mod import Mod
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(11): from sympy.core.mul import Mul
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(12): from sympy.core.numbers import Rational
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(13): from sympy.core.power import Pow
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(14): from sympy.core.relational import Eq, Relational
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(15): from sympy.core.singleton import Singleton
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(16): from sympy.core.symbol import Dummy
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(17): from sympy.core.rules import Transform
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(18): from sympy.core.compatibility import as_int, with_metaclass, range
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(19): from sympy.core.logic import fuzzy_and, fuzzy_or, _torf
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(20): from sympy.functions.elementary.integers import floor
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(21): from sympy.logic.boolalg import And, Or
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(23): def _minmax_as_Piecewise(op, *args):
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(35): class IdentityFunction(with_metaclass(Singleton, Lambda)):
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(35): class IdentityFunction(with_metaclass(Singleton, Lambda)):
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(36):     """
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(49):     def __new__(cls):
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(57): Id = S.IdentityFunction
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(50):         from sympy.sets.sets import FiniteSet
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(51):         x = Dummy('x')
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(53):         obj = Expr.__new__(cls, Tuple(x), x)
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(54):         obj.nargs = FiniteSet(1)
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(55):         return obj
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(64): def sqrt(arg, evaluate=None):
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(135): def cbrt(arg, evaluate=None):
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(188): def root(arg, n, k=0, evaluate=None):
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(280): def real_root(arg, n=None, evaluate=None):
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(340): class MinMaxBase(Expr, LatticeOp):
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(340): class MinMaxBase(Expr, LatticeOp):
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(341):     def __new__(cls, *args, **assumptions):
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(371):     @classmethod
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(372):     def _collapse_arguments(cls, args, **assumptions):
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(506):     @classmethod
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(507):     def _new_args_filter(cls, arg_sequence):
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(533):     @classmethod
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(534):     def _find_localzeros(cls, values, **options):
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(560):     @classmethod
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(561):     def _is_connected(cls, x, y):
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(591):     def _eval_derivative(self, s):
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(607):     def _eval_rewrite_as_Abs(self, *args, **kwargs):
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(613):     def evalf(self, prec=None, **options):
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(615):     n = evalf
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(617):     _eval_is_algebraic = lambda s: _torf(i.is_algebraic for i in s.args)
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(618):     _eval_is_antihermitian = lambda s: _torf(i.is_antihermitian for i in s.args)
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(619):     _eval_is_commutative = lambda s: _torf(i.is_commutative for i in s.args)
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(620):     _eval_is_complex = lambda s: _torf(i.is_complex for i in s.args)
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(621):     _eval_is_composite = lambda s: _torf(i.is_composite for i in s.args)
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(622):     _eval_is_even = lambda s: _torf(i.is_even for i in s.args)
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(623):     _eval_is_finite = lambda s: _torf(i.is_finite for i in s.args)
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(624):     _eval_is_hermitian = lambda s: _torf(i.is_hermitian for i in s.args)
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(625):     _eval_is_imaginary = lambda s: _torf(i.is_imaginary for i in s.args)
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(626):     _eval_is_infinite = lambda s: _torf(i.is_infinite for i in s.args)
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(627):     _eval_is_integer = lambda s: _torf(i.is_integer for i in s.args)
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(628):     _eval_is_irrational = lambda s: _torf(i.is_irrational for i in s.args)
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(629):     _eval_is_negative = lambda s: _torf(i.is_negative for i in s.args)
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(630):     _eval_is_noninteger = lambda s: _torf(i.is_noninteger for i in s.args)
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(631):     _eval_is_nonnegative = lambda s: _torf(i.is_nonnegative for i in s.args)
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(632):     _eval_is_nonpositive = lambda s: _torf(i.is_nonpositive for i in s.args)
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(633):     _eval_is_nonzero = lambda s: _torf(i.is_nonzero for i in s.args)
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(634):     _eval_is_odd = lambda s: _torf(i.is_odd for i in s.args)
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(635):     _eval_is_polar = lambda s: _torf(i.is_polar for i in s.args)
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(636):     _eval_is_positive = lambda s: _torf(i.is_positive for i in s.args)
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(637):     _eval_is_prime = lambda s: _torf(i.is_prime for i in s.args)
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(638):     _eval_is_rational = lambda s: _torf(i.is_rational for i in s.args)
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(639):     _eval_is_real = lambda s: _torf(i.is_real for i in s.args)
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(640):     _eval_is_transcendental = lambda s: _torf(i.is_transcendental for i in s.args)
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(641):     _eval_is_zero = lambda s: _torf(i.is_zero for i in s.args)
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(643): class Max(MinMaxBase, Application):
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(643): class Max(MinMaxBase, Application):
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(644):     """
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(728):     zero = S.Infinity
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(729):     identity = S.NegativeInfinity
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(731):     def fdiff( self, argindex ):
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(743):     def _eval_rewrite_as_Heaviside(self, *args, **kwargs):
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(748):     def _eval_rewrite_as_Piecewise(self, *args, **kwargs):
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(753):     def _eval_is_positive(self):
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(756):     def _eval_is_nonnegative(self):
0.25 /testbed/sympy/functions/elementary/miscellaneous.py(759):     def _eval_is_negative(self):
0.26 /testbed/sympy/functions/elementary/miscellaneous.py(763): class Min(MinMaxBase, Application):
0.26 /testbed/sympy/functions/elementary/miscellaneous.py(763): class Min(MinMaxBase, Application):
0.26 /testbed/sympy/functions/elementary/miscellaneous.py(764):     """
0.26 /testbed/sympy/functions/elementary/miscellaneous.py(793):     zero = S.NegativeInfinity
0.26 /testbed/sympy/functions/elementary/miscellaneous.py(794):     identity = S.Infinity
0.26 /testbed/sympy/functions/elementary/miscellaneous.py(796):     def fdiff( self, argindex ):
0.26 /testbed/sympy/functions/elementary/miscellaneous.py(808):     def _eval_rewrite_as_Heaviside(self, *args, **kwargs):
0.26 /testbed/sympy/functions/elementary/miscellaneous.py(813):     def _eval_rewrite_as_Piecewise(self, *args, **kwargs):
0.26 /testbed/sympy/functions/elementary/miscellaneous.py(818):     def _eval_is_positive(self):
0.26 /testbed/sympy/functions/elementary/miscellaneous.py(821):     def _eval_is_nonnegative(self):
0.26 /testbed/sympy/functions/elementary/miscellaneous.py(824):     def _eval_is_negative(self):
============================= test process starts ==============================
executable:         /opt/miniconda3/envs/testbed/bin/python3  (3.9.23-final-0) [CPython]
architecture:       64-bit
cache:              no
ground types:       python 
numpy:              None
random seed:        91642528
hash randomization: on (PYTHONHASHSEED=4239200997)

sympy/polys/tests/test_coverup_sympy__sympy-15809.py[1] 
test_min_max_no_arguments 0.59 /testbed/sympy/functions/elementary/miscellaneous.py(343):         args = (sympify(arg) for arg in args)
0.59 /testbed/sympy/functions/elementary/miscellaneous.py(347):         try:
0.59 /testbed/sympy/functions/elementary/miscellaneous.py(348):             args = frozenset(cls._new_args_filter(args))
0.59 /testbed/sympy/functions/elementary/miscellaneous.py(515):         for arg in arg_sequence:
0.59 /testbed/sympy/functions/elementary/miscellaneous.py(343):         args = (sympify(arg) for arg in args)
0.59 /testbed/sympy/functions/elementary/miscellaneous.py(352):         if assumptions.pop('evaluate', True):
0.59 /testbed/sympy/functions/elementary/miscellaneous.py(354):             args = cls._collapse_arguments(args, **assumptions)
0.59 /testbed/sympy/functions/elementary/miscellaneous.py(396):         from sympy.utilities.iterables import ordered
0.59 /testbed/sympy/functions/elementary/miscellaneous.py(397):         from sympy.utilities.iterables import sift
0.59 /testbed/sympy/functions/elementary/miscellaneous.py(398):         from sympy.simplify.simplify import walk
0.59 /testbed/sympy/functions/elementary/miscellaneous.py(400):         if not args:
0.59 /testbed/sympy/functions/elementary/miscellaneous.py(401):             return args
0.59 /testbed/sympy/functions/elementary/miscellaneous.py(357):         args = cls._find_localzeros(args, **assumptions)
0.59 /testbed/sympy/functions/elementary/miscellaneous.py(542):         localzeros = set()
0.59 /testbed/sympy/functions/elementary/miscellaneous.py(543):         for v in values:
0.59 /testbed/sympy/functions/elementary/miscellaneous.py(558):         return localzeros
0.59 /testbed/sympy/functions/elementary/miscellaneous.py(359):         if not args:
0.59 /testbed/sympy/functions/elementary/miscellaneous.py(360):             return cls.identity
0.59 /testbed/sympy/functions/elementary/miscellaneous.py(343):         args = (sympify(arg) for arg in args)
0.59 /testbed/sympy/functions/elementary/miscellaneous.py(347):         try:
0.59 /testbed/sympy/functions/elementary/miscellaneous.py(348):             args = frozenset(cls._new_args_filter(args))
0.59 /testbed/sympy/functions/elementary/miscellaneous.py(515):         for arg in arg_sequence:
0.59 /testbed/sympy/functions/elementary/miscellaneous.py(343):         args = (sympify(arg) for arg in args)
0.59 /testbed/sympy/functions/elementary/miscellaneous.py(352):         if assumptions.pop('evaluate', True):
0.59 /testbed/sympy/functions/elementary/miscellaneous.py(354):             args = cls._collapse_arguments(args, **assumptions)
0.59 /testbed/sympy/functions/elementary/miscellaneous.py(396):         from sympy.utilities.iterables import ordered
0.59 /testbed/sympy/functions/elementary/miscellaneous.py(397):         from sympy.utilities.iterables import sift
0.59 /testbed/sympy/functions/elementary/miscellaneous.py(398):         from sympy.simplify.simplify import walk
0.59 /testbed/sympy/functions/elementary/miscellaneous.py(400):         if not args:
0.59 /testbed/sympy/functions/elementary/miscellaneous.py(401):             return args
0.59 /testbed/sympy/functions/elementary/miscellaneous.py(357):         args = cls._find_localzeros(args, **assumptions)
0.59 /testbed/sympy/functions/elementary/miscellaneous.py(542):         localzeros = set()
0.59 /testbed/sympy/functions/elementary/miscellaneous.py(543):         for v in values:
0.59 /testbed/sympy/functions/elementary/miscellaneous.py(558):         return localzeros
0.59 /testbed/sympy/functions/elementary/miscellaneous.py(359):         if not args:
0.59 /testbed/sympy/functions/elementary/miscellaneous.py(360):             return cls.identity
ok                                                [OK]


================== tests finished: 1 passed, in 0.01 seconds ===================
/testbed/sympy/functions/elementary/miscellaneous.py(640):     _eval_is_transcendental = lambda s: _torf(i.is_transcendental for i in s.args)
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(641):     _eval_is_zero = lambda s: _torf(i.is_zero for i in s.args)
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(643): class Max(MinMaxBase, Application):
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(643): class Max(MinMaxBase, Application):
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(644):     """
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(728):     zero = S.Infinity
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(729):     identity = S.NegativeInfinity
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(731):     def fdiff( self, argindex ):
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(743):     def _eval_rewrite_as_Heaviside(self, *args, **kwargs):
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(748):     def _eval_rewrite_as_Piecewise(self, *args, **kwargs):
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(753):     def _eval_is_positive(self):
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(756):     def _eval_is_nonnegative(self):
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(759):     def _eval_is_negative(self):
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(763): class Min(MinMaxBase, Application):
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(763): class Min(MinMaxBase, Application):
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(764):     """
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(793):     zero = S.NegativeInfinity
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(794):     identity = S.Infinity
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(796):     def fdiff( self, argindex ):
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(808):     def _eval_rewrite_as_Heaviside(self, *args, **kwargs):
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(813):     def _eval_rewrite_as_Piecewise(self, *args, **kwargs):
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(818):     def _eval_is_positive(self):
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(821):     def _eval_is_nonnegative(self):
0.54 /testbed/sympy/functions/elementary/miscellaneous.py(824):     def _eval_is_negative(self):
+ cat coverage.cover
{"/testbed/sympy/functions/elementary/miscellaneous.py": {"1": 1, "3": 1, "4": 1, "5": 1, "6": 1, "7": 1, "9": 1, "10": 1, "11": 1, "12": 1, "13": 1, "14": 1, "15": 1, "16": 1, "17": 1, "18": 1, "19": 1, "20": 1, "21": 1, "23": 1, "35": 2, "57": 1, "64": 1, "135": 1, "188": 1, "280": 1, "340": 2, "643": 2, "763": 2, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0, "31": 0, "32": 0, "49": 1, "50": 1, "51": 1, "53": 1, "54": 1, "55": 1, "132": 0, "185": 0, "274": 0, "275": 0, "276": 0, "277": 0, "318": 0, "319": 0, "320": 0, "321": 0, "322": 0, "323": 0, "324": 0, "325": 0, "326": 0, "327": 0, "328": 0, "333": 0, "329": 0, "330": 0, "331": 0, "332": 0, "341": 1, "371": 1, "372": 1, "506": 1, "507": 1, "533": 1, "534": 1, "560": 1, "561": 1, "591": 1, "607": 1, "613": 1, "615": 1, "617": 1, "618": 1, "619": 1, "620": 1, "621": 1, "622": 1, "623": 1, "624": 1, "625": 1, "626": 1, "627": 1, "628": 1, "629": 1, "630": 1, "631": 1, "632": 1, "633": 1, "634": 1, "635": 1, "636": 1, "637": 1, "638": 1, "639": 1, "640": 1, "641": 1, "343": 4, "347": 2, "348": 2, "349": 0, "350": 0, "352": 2, "354": 2, "357": 2, "359": 2, "360": 2, "362": 0, "363": 0, "366": 0, "367": 0, "368": 0, "369": 0, "396": 2, "397": 2, "398": 2, "400": 2, "401": 2, "402": 0, "403": 0, "404": 0, "406": 0, "411": 0, "412": 0, "413": 0, "414": 0, "415": 0, "416": 0, "417": 0, "418": 0, "419": 0, "420": 0, "421": 0, "422": 0, "423": 0, "424": 0, "425": 0, "426": 0, "431": 0, "432": 0, "433": 0, "434": 0, "435": 0, "436": 0, "437": 0, "438": 0, "439": 0, "440": 0, "441": 0, "442": 0, "443": 0, "444": 0, "445": 0, "446": 0, "447": 0, "448": 0, "449": 0, "450": 0, "451": 0, "453": 0, "454": 0, "455": 0, "456": 0, "457": 0, "458": 0, "461": 0, "472": 0, "473": 0, "481": 0, "482": 0, "483": 0, "484": 0, "485": 0, "486": 0, "487": 0, "488": 0, "489": 0, "490": 0, "491": 0, "492": 0, "493": 0, "494": 0, "495": 0, "496": 0, "497": 0, "498": 0, "499": 0, "500": 0, "501": 0, "502": 0, "504": 0, "462": 0, "463": 0, "464": 0, "465": 0, "466": 0, "467": 0, "468": 0, "469": 0, "470": 0, "471": 0, "515": 2, "518": 0, "519": 0, "520": 0, "521": 0, "523": 0, "524": 0, "525": 0, "526": 0, "527": 0, "528": 0, "529": 0, "531": 0, "542": 2, "543": 2, "544": 0, "545": 0, "546": 0, "547": 0, "548": 0, "550": 0, "551": 0, "552": 0, "553": 0, "554": 0, "555": 0, "556": 0, "557": 0, "558": 2, "565": 0, "566": 0, "569": 0, "570": 0, "571": 0, "572": 0, "573": 0, "574": 0, "575": 0, "576": 0, "577": 0, "578": 0, "579": 0, "580": 0, "581": 0, "582": 0, "583": 0, "586": 0, "587": 0, "589": 0, "567": 0, "568": 0, "593": 0, "594": 0, "595": 0, "596": 0, "597": 0, "598": 0, "599": 0, "600": 0, "601": 0, "602": 0, "603": 0, "604": 0, "605": 0, "608": 0, "609": 0, "610": 0, "611": 0, "614": 0, "728": 1, "729": 1, "731": 1, "743": 1, "748": 1, "753": 1, "756": 1, "759": 1, "732": 0, "733": 0, "734": 0, "735": 0, "736": 0, "737": 0, "738": 0, "739": 0, "741": 0, "744": 0, "745": 0, "746": 0, "749": 0, "750": 0, "751": 0, "754": 0, "757": 0, "760": 0, "793": 1, "794": 1, "796": 1, "808": 1, "813": 1, "818": 1, "821": 1, "824": 1, "797": 0, "798": 0, "799": 0, "800": 0, "801": 0, "802": 0, "803": 0, "804": 0, "806": 0, "809": 0, "810": 0, "811": 0, "814": 0, "815": 0, "816": 0, "819": 0, "822": 0, "825": 0}}
{"/testbed/sympy/functions/elementary/miscellaneous.py": {"1": 1, "3": 1, "4": 1, "5": 1, "6": 1, "7": 1, "9": 1, "10": 1, "11": 1, "12": 1, "13": 1, "14": 1, "15": 1, "16": 1, "17": 1, "18": 1, "19": 1, "20": 1, "21": 1, "23": 1, "35": 2, "57": 1, "64": 1, "135": 1, "188": 1, "280": 1, "340": 2, "643": 2, "763": 2, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0, "31": 0, "32": 0, "49": 1, "50": 1, "51": 1, "53": 1, "54": 1, "55": 1, "132": 0, "185": 0, "274": 0, "275": 0, "276": 0, "277": 0, "318": 0, "319": 0, "320": 0, "321": 0, "322": 0, "323": 0, "324": 0, "325": 0, "326": 0, "327": 0, "328": 0, "333": 0, "329": 0, "330": 0, "331": 0, "332": 0, "341": 1, "371": 1, "372": 1, "506": 1, "507": 1, "533": 1, "534": 1, "560": 1, "561": 1, "591": 1, "607": 1, "613": 1, "615": 1, "617": 1, "618": 1, "619": 1, "620": 1, "621": 1, "622": 1, "623": 1, "624": 1, "625": 1, "626": 1, "627": 1, "628": 1, "629": 1, "630": 1, "631": 1, "632": 1, "633": 1, "634": 1, "635": 1, "636": 1, "637": 1, "638": 1, "639": 1, "640": 1, "641": 1, "343": 0, "347": 0, "348": 0, "349": 0, "350": 0, "352": 0, "354": 0, "357": 0, "359": 0, "360": 0, "362": 0, "363": 0, "366": 0, "367": 0, "368": 0, "369": 0, "396": 0, "397": 0, "398": 0, "400": 0, "401": 0, "402": 0, "403": 0, "404": 0, "406": 0, "411": 0, "412": 0, "413": 0, "414": 0, "415": 0, "416": 0, "417": 0, "418": 0, "419": 0, "420": 0, "421": 0, "422": 0, "423": 0, "424": 0, "425": 0, "426": 0, "431": 0, "432": 0, "433": 0, "434": 0, "435": 0, "436": 0, "437": 0, "438": 0, "439": 0, "440": 0, "441": 0, "442": 0, "443": 0, "444": 0, "445": 0, "446": 0, "447": 0, "448": 0, "449": 0, "450": 0, "451": 0, "453": 0, "454": 0, "455": 0, "456": 0, "457": 0, "458": 0, "461": 0, "472": 0, "473": 0, "481": 0, "482": 0, "483": 0, "484": 0, "485": 0, "486": 0, "487": 0, "488": 0, "489": 0, "490": 0, "491": 0, "492": 0, "493": 0, "494": 0, "495": 0, "496": 0, "497": 0, "498": 0, "499": 0, "500": 0, "501": 0, "502": 0, "504": 0, "462": 0, "463": 0, "464": 0, "465": 0, "466": 0, "467": 0, "468": 0, "469": 0, "470": 0, "471": 0, "515": 0, "518": 0, "519": 0, "520": 0, "521": 0, "523": 0, "524": 0, "525": 0, "526": 0, "527": 0, "528": 0, "529": 0, "531": 0, "542": 0, "543": 0, "544": 0, "545": 0, "546": 0, "547": 0, "548": 0, "550": 0, "551": 0, "552": 0, "553": 0, "554": 0, "555": 0, "556": 0, "557": 0, "558": 0, "565": 0, "566": 0, "569": 0, "570": 0, "571": 0, "572": 0, "573": 0, "574": 0, "575": 0, "576": 0, "577": 0, "578": 0, "579": 0, "580": 0, "581": 0, "582": 0, "583": 0, "586": 0, "587": 0, "589": 0, "567": 0, "568": 0, "593": 0, "594": 0, "595": 0, "596": 0, "597": 0, "598": 0, "599": 0, "600": 0, "601": 0, "602": 0, "603": 0, "604": 0, "605": 0, "608": 0, "609": 0, "610": 0, "611": 0, "614": 0, "728": 1, "729": 1, "731": 1, "743": 1, "748": 1, "753": 1, "756": 1, "759": 1, "732": 0, "733": 0, "734": 0, "735": 0, "736": 0, "737": 0, "738": 0, "739": 0, "741": 0, "744": 0, "745": 0, "746": 0, "749": 0, "750": 0, "751": 0, "754": 0, "757": 0, "760": 0, "793": 1, "794": 1, "796": 1, "808": 1, "813": 1, "818": 1, "821": 1, "824": 1, "797": 0, "798": 0, "799": 0, "800": 0, "801": 0, "802": 0, "803": 0, "804": 0, "806": 0, "809": 0, "810": 0, "811": 0, "814": 0, "815": 0, "816": 0, "819": 0, "822": 0, "825": 0}}
+ git checkout 28d913d3cead6c5646307ffa6540b21d65059dfd
M	sympy/functions/elementary/miscellaneous.py
Note: switching to '28d913d3cead6c5646307ffa6540b21d65059dfd'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at 28d913d3ce Merge pull request #15722 from sylee957/improve_qr_decomposition
+ git apply /root/pre_state.patch
error: unrecognized input
