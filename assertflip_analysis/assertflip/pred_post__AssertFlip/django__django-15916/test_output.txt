+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD 88e67a54b7ed0210c11523a337b498aadb2f5187
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
nothing to commit, working tree clean
+ git show
commit 88e67a54b7ed0210c11523a337b498aadb2f5187
Author: Carlton Gibson <carlton.gibson@noumenal.es>
Date:   Sat Aug 6 19:10:27 2022 +0200

    Added test for non-HTTP request on ASGIStaticFilesHandler.

diff --git a/tests/staticfiles_tests/test_handlers.py b/tests/staticfiles_tests/test_handlers.py
index e0451c6e16..5145d187e1 100644
--- a/tests/staticfiles_tests/test_handlers.py
+++ b/tests/staticfiles_tests/test_handlers.py
@@ -5,6 +5,13 @@ from django.test import AsyncRequestFactory
 from .cases import StaticFilesTestCase
 
 
+class MockApplication:
+    """ASGI application that returns a string indicating that it was called."""
+
+    async def __call__(self, scope, receive, send):
+        return "Application called"
+
+
 class TestASGIStaticFilesHandler(StaticFilesTestCase):
     async_request_factory = AsyncRequestFactory()
 
@@ -20,3 +27,15 @@ class TestASGIStaticFilesHandler(StaticFilesTestCase):
         handler = ASGIStaticFilesHandler(ASGIHandler())
         response = await handler.get_response_async(request)
         self.assertEqual(response.status_code, 404)
+
+    async def test_non_http_requests_passed_to_the_wrapped_application(self):
+        tests = [
+            "/static/path.txt",
+            "/non-static/path.txt",
+        ]
+        for path in tests:
+            with self.subTest(path=path):
+                scope = {"type": "websocket", "path": path}
+                handler = ASGIStaticFilesHandler(MockApplication())
+                response = await handler(scope, None, None)
+                self.assertEqual(response, "Application called")
+ git diff 88e67a54b7ed0210c11523a337b498aadb2f5187
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Checking if build backend supports build_editable: started
  Checking if build backend supports build_editable: finished with status 'done'
  Getting requirements to build editable: started
  Getting requirements to build editable: finished with status 'done'
  Preparing editable metadata (pyproject.toml): started
  Preparing editable metadata (pyproject.toml): finished with status 'done'
Requirement already satisfied: asgiref>=3.5.2 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Django==4.2.dev20220808052732) (3.9.1)
Requirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Django==4.2.dev20220808052732) (0.5.3)
Requirement already satisfied: typing_extensions>=4 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from asgiref>=3.5.2->Django==4.2.dev20220808052732) (4.14.1)
Building wheels for collected packages: Django
  Building editable for Django (pyproject.toml): started
  Building editable for Django (pyproject.toml): finished with status 'done'
  Created wheel for Django: filename=django-4.2.dev20220808052732-0.editable-py3-none-any.whl size=27198 sha256=6aa4a68571c6690c1ad31509b5d8b487a3b691422dc3ddaa5cd423e4ad756be5
  Stored in directory: /tmp/pip-ephem-wheel-cache-foob98b9/wheels/7d/66/67/70d1ee2124ccf21d601c352e25cdca10f611f7c8b3f9ffb9e4
Successfully built Django
Installing collected packages: Django
  Attempting uninstall: Django
    Found existing installation: Django 4.2.dev20220808052732
    Uninstalling Django-4.2.dev20220808052732:
      Successfully uninstalled Django-4.2.dev20220808052732
Successfully installed Django-4.2.dev20220808052732
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git apply -v -
Checking patch django/forms/models.py...
Applied patch django/forms/models.py cleanly.
+ git apply -v -
Checking patch tests/test_coverup_django__django-15916.py...
Applied patch tests/test_coverup_django__django-15916.py cleanly.
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/forms/models\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-15916
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(django/forms/models\\.py)']
0.25 /testbed/django/forms/models.py(1): """
0.25 /testbed/django/forms/models.py(5): from itertools import chain
0.25 /testbed/django/forms/models.py(7): from django.core.exceptions import (
0.25 /testbed/django/forms/models.py(13): from django.forms.fields import ChoiceField, Field
0.25 /testbed/django/forms/models.py(14): from django.forms.forms import BaseForm, DeclarativeFieldsMetaclass
0.25 /testbed/django/forms/models.py(15): from django.forms.formsets import BaseFormSet, formset_factory
0.25 /testbed/django/forms/models.py(16): from django.forms.utils import ErrorList
0.25 /testbed/django/forms/models.py(17): from django.forms.widgets import (
0.25 /testbed/django/forms/models.py(23): from django.utils.text import capfirst, get_text_list
0.25 /testbed/django/forms/models.py(24): from django.utils.translation import gettext
0.25 /testbed/django/forms/models.py(25): from django.utils.translation import gettext_lazy as _
0.25 /testbed/django/forms/models.py(27): __all__ = (
0.25 /testbed/django/forms/models.py(42): ALL_FIELDS = "__all__"
0.25 /testbed/django/forms/models.py(45): def construct_instance(form, instance, fields=None, exclude=None):
0.25 /testbed/django/forms/models.py(93): def model_to_dict(instance, fields=None, exclude=None):
0.25 /testbed/django/forms/models.py(118): def apply_limit_choices_to_to_formfield(formfield):
0.25 /testbed/django/forms/models.py(135): def fields_for_model(
0.25 /testbed/django/forms/models.py(147):     apply_limit_choices_to=True,
0.25 /testbed/django/forms/models.py(135): def fields_for_model(
0.25 /testbed/django/forms/models.py(245): class ModelFormOptions:
0.25 /testbed/django/forms/models.py(245): class ModelFormOptions:
0.25 /testbed/django/forms/models.py(246):     def __init__(self, options=None):
0.25 /testbed/django/forms/models.py(259): class ModelFormMetaclass(DeclarativeFieldsMetaclass):
0.25 /testbed/django/forms/models.py(259): class ModelFormMetaclass(DeclarativeFieldsMetaclass):
0.25 /testbed/django/forms/models.py(260):     def __new__(mcs, name, bases, attrs):
0.25 /testbed/django/forms/models.py(332): class BaseModelForm(BaseForm):
0.25 /testbed/django/forms/models.py(332): class BaseModelForm(BaseForm):
0.25 /testbed/django/forms/models.py(335):         data=None,
0.25 /testbed/django/forms/models.py(336):         files=None,
0.25 /testbed/django/forms/models.py(337):         auto_id="id_%s",
0.25 /testbed/django/forms/models.py(338):         prefix=None,
0.25 /testbed/django/forms/models.py(339):         initial=None,
0.25 /testbed/django/forms/models.py(340):         error_class=ErrorList,
0.25 /testbed/django/forms/models.py(341):         label_suffix=None,
0.25 /testbed/django/forms/models.py(342):         empty_permitted=False,
0.25 /testbed/django/forms/models.py(343):         instance=None,
0.25 /testbed/django/forms/models.py(344):         use_required_attribute=None,
0.25 /testbed/django/forms/models.py(345):         renderer=None,
0.25 /testbed/django/forms/models.py(333):     def __init__(
0.25 /testbed/django/forms/models.py(379):     def _get_validation_exclusions(self):
0.25 /testbed/django/forms/models.py(424):     def clean(self):
0.25 /testbed/django/forms/models.py(428):     def _update_errors(self, errors):
0.25 /testbed/django/forms/models.py(461):     def _post_clean(self):
0.25 /testbed/django/forms/models.py(493):     def validate_unique(self):
0.25 /testbed/django/forms/models.py(504):     def _save_m2m(self):
0.25 /testbed/django/forms/models.py(525):     def save(self, commit=True):
0.25 /testbed/django/forms/models.py(549):     save.alters_data = True
0.25 /testbed/django/forms/models.py(552): class ModelForm(BaseModelForm, metaclass=ModelFormMetaclass):
0.25 /testbed/django/forms/models.py(552): class ModelForm(BaseModelForm, metaclass=ModelFormMetaclass):
0.25 /testbed/django/forms/models.py(553):     pass
0.25 /testbed/django/forms/models.py(261):         new_class = super().__new__(mcs, name, bases, attrs)
0.25 /testbed/django/forms/models.py(263):         if bases == (BaseModelForm,):
0.25 /testbed/django/forms/models.py(264):             return new_class
0.25 /testbed/django/forms/models.py(558):     form=ModelForm,
0.25 /testbed/django/forms/models.py(559):     fields=None,
0.25 /testbed/django/forms/models.py(560):     exclude=None,
0.25 /testbed/django/forms/models.py(561):     formfield_callback=None,
0.25 /testbed/django/forms/models.py(562):     widgets=None,
0.25 /testbed/django/forms/models.py(563):     localized_fields=None,
0.25 /testbed/django/forms/models.py(564):     labels=None,
0.25 /testbed/django/forms/models.py(565):     help_texts=None,
0.25 /testbed/django/forms/models.py(566):     error_messages=None,
0.25 /testbed/django/forms/models.py(567):     field_classes=None,
0.25 /testbed/django/forms/models.py(556): def modelform_factory(
0.25 /testbed/django/forms/models.py(647): class BaseModelFormSet(BaseFormSet):
0.25 /testbed/django/forms/models.py(647): class BaseModelFormSet(BaseFormSet):
0.25 /testbed/django/forms/models.py(648):     """
0.25 /testbed/django/forms/models.py(652):     model = None
0.25 /testbed/django/forms/models.py(653):     edit_only = False
0.25 /testbed/django/forms/models.py(656):     unique_fields = set()
0.25 /testbed/django/forms/models.py(658):     def __init__(
0.25 /testbed/django/forms/models.py(666):         initial=None,
0.25 /testbed/django/forms/models.py(658):     def __init__(
0.25 /testbed/django/forms/models.py(681):     def initial_form_count(self):
0.25 /testbed/django/forms/models.py(687):     def _existing_object(self, pk):
0.25 /testbed/django/forms/models.py(692):     def _get_to_python(self, field):
0.25 /testbed/django/forms/models.py(701):     def _construct_form(self, i, **kwargs):
0.25 /testbed/django/forms/models.py(735):     def get_queryset(self):
0.25 /testbed/django/forms/models.py(754):     def save_new(self, form, commit=True):
0.25 /testbed/django/forms/models.py(758):     def save_existing(self, form, instance, commit=True):
0.25 /testbed/django/forms/models.py(762):     def delete_existing(self, obj, commit=True):
0.25 /testbed/django/forms/models.py(767):     def save(self, commit=True):
0.25 /testbed/django/forms/models.py(785):     save.alters_data = True
0.25 /testbed/django/forms/models.py(787):     def clean(self):
0.25 /testbed/django/forms/models.py(790):     def validate_unique(self):
0.25 /testbed/django/forms/models.py(883):     def get_unique_error_message(self, unique_check):
0.25 /testbed/django/forms/models.py(895):     def get_date_error_message(self, date_check):
0.25 /testbed/django/forms/models.py(905):     def get_form_error(self):
0.25 /testbed/django/forms/models.py(908):     def save_existing_objects(self, commit=True):
0.25 /testbed/django/forms/models.py(934):     def save_new_objects(self, commit=True):
0.25 /testbed/django/forms/models.py(948):     def add_fields(self, form, index):
0.25 /testbed/django/forms/models.py(1001):     form=ModelForm,
0.25 /testbed/django/forms/models.py(1002):     formfield_callback=None,
0.25 /testbed/django/forms/models.py(1003):     formset=BaseModelFormSet,
0.25 /testbed/django/forms/models.py(1004):     extra=1,
0.25 /testbed/django/forms/models.py(1005):     can_delete=False,
0.25 /testbed/django/forms/models.py(1006):     can_order=False,
0.25 /testbed/django/forms/models.py(1007):     max_num=None,
0.25 /testbed/django/forms/models.py(1008):     fields=None,
0.25 /testbed/django/forms/models.py(1009):     exclude=None,
0.25 /testbed/django/forms/models.py(1010):     widgets=None,
0.25 /testbed/django/forms/models.py(1011):     validate_max=False,
0.25 /testbed/django/forms/models.py(1012):     localized_fields=None,
0.25 /testbed/django/forms/models.py(1013):     labels=None,
0.25 /testbed/django/forms/models.py(1014):     help_texts=None,
0.25 /testbed/django/forms/models.py(1015):     error_messages=None,
0.25 /testbed/django/forms/models.py(1016):     min_num=None,
0.25 /testbed/django/forms/models.py(1017):     validate_min=False,
0.25 /testbed/django/forms/models.py(1018):     field_classes=None,
0.25 /testbed/django/forms/models.py(1019):     absolute_max=None,
0.25 /testbed/django/forms/models.py(1020):     can_delete_extra=True,
0.25 /testbed/django/forms/models.py(1021):     renderer=None,
0.25 /testbed/django/forms/models.py(1022):     edit_only=False,
0.25 /testbed/django/forms/models.py(999): def modelformset_factory(
0.25 /testbed/django/forms/models.py(1070): class BaseInlineFormSet(BaseModelFormSet):
0.25 /testbed/django/forms/models.py(1070): class BaseInlineFormSet(BaseModelFormSet):
0.25 /testbed/django/forms/models.py(1071):     """A formset for child objects related to a parent."""
0.25 /testbed/django/forms/models.py(1073):     def __init__(
0.25 /testbed/django/forms/models.py(1104):     def initial_form_count(self):
0.25 /testbed/django/forms/models.py(1109):     def _construct_form(self, i, **kwargs):
0.25 /testbed/django/forms/models.py(1132):     @classmethod
0.25 /testbed/django/forms/models.py(1133):     def get_default_prefix(cls):
0.25 /testbed/django/forms/models.py(1136):     def save_new(self, form, commit=True):
0.25 /testbed/django/forms/models.py(1143):     def add_fields(self, form, index):
0.25 /testbed/django/forms/models.py(1176):     def get_unique_error_message(self, unique_check):
0.25 /testbed/django/forms/models.py(1181): def _get_foreign_key(parent_model, model, fk_name=None, can_fail=False):
0.25 /testbed/django/forms/models.py(1263):     form=ModelForm,
0.25 /testbed/django/forms/models.py(1264):     formset=BaseInlineFormSet,
0.25 /testbed/django/forms/models.py(1265):     fk_name=None,
0.25 /testbed/django/forms/models.py(1266):     fields=None,
0.25 /testbed/django/forms/models.py(1267):     exclude=None,
0.25 /testbed/django/forms/models.py(1268):     extra=3,
0.25 /testbed/django/forms/models.py(1269):     can_order=False,
0.25 /testbed/django/forms/models.py(1270):     can_delete=True,
0.25 /testbed/django/forms/models.py(1271):     max_num=None,
0.25 /testbed/django/forms/models.py(1272):     formfield_callback=None,
0.25 /testbed/django/forms/models.py(1273):     widgets=None,
0.25 /testbed/django/forms/models.py(1274):     validate_max=False,
0.25 /testbed/django/forms/models.py(1275):     localized_fields=None,
0.25 /testbed/django/forms/models.py(1276):     labels=None,
0.25 /testbed/django/forms/models.py(1277):     help_texts=None,
0.25 /testbed/django/forms/models.py(1278):     error_messages=None,
0.25 /testbed/django/forms/models.py(1279):     min_num=None,
0.25 /testbed/django/forms/models.py(1280):     validate_min=False,
0.25 /testbed/django/forms/models.py(1281):     field_classes=None,
0.25 /testbed/django/forms/models.py(1282):     absolute_max=None,
0.25 /testbed/django/forms/models.py(1283):     can_delete_extra=True,
0.25 /testbed/django/forms/models.py(1284):     renderer=None,
0.25 /testbed/django/forms/models.py(1285):     edit_only=False,
0.25 /testbed/django/forms/models.py(1260): def inlineformset_factory(
0.25 /testbed/django/forms/models.py(1329): class InlineForeignKeyField(Field):
0.25 /testbed/django/forms/models.py(1329): class InlineForeignKeyField(Field):
0.25 /testbed/django/forms/models.py(1330):     """
0.25 /testbed/django/forms/models.py(1335):     widget = HiddenInput
0.25 /testbed/django/forms/models.py(1337):         "invalid_choice": _("The inline value did not match the parent instance."),
0.25 /testbed/django/forms/models.py(1336):     default_error_messages = {
0.25 /testbed/django/forms/models.py(1340):     def __init__(self, parent_instance, *args, pk_field=False, to_field=None, **kwargs):
0.25 /testbed/django/forms/models.py(1352):     def clean(self, value):
0.25 /testbed/django/forms/models.py(1369):     def has_changed(self, initial, data):
0.25 /testbed/django/forms/models.py(1373): class ModelChoiceIteratorValue:
0.25 /testbed/django/forms/models.py(1373): class ModelChoiceIteratorValue:
0.25 /testbed/django/forms/models.py(1374):     def __init__(self, value, instance):
0.25 /testbed/django/forms/models.py(1378):     def __str__(self):
0.25 /testbed/django/forms/models.py(1381):     def __hash__(self):
0.25 /testbed/django/forms/models.py(1384):     def __eq__(self, other):
0.25 /testbed/django/forms/models.py(1390): class ModelChoiceIterator:
0.25 /testbed/django/forms/models.py(1390): class ModelChoiceIterator:
0.25 /testbed/django/forms/models.py(1391):     def __init__(self, field):
0.25 /testbed/django/forms/models.py(1395):     def __iter__(self):
0.25 /testbed/django/forms/models.py(1405):     def __len__(self):
0.25 /testbed/django/forms/models.py(1411):     def __bool__(self):
0.25 /testbed/django/forms/models.py(1414):     def choice(self, obj):
0.25 /testbed/django/forms/models.py(1421): class ModelChoiceField(ChoiceField):
0.25 /testbed/django/forms/models.py(1421): class ModelChoiceField(ChoiceField):
0.25 /testbed/django/forms/models.py(1422):     """A ChoiceField whose choices are a model QuerySet."""
0.25 /testbed/django/forms/models.py(1427):         "invalid_choice": _(
0.25 /testbed/django/forms/models.py(1428):             "Select a valid choice. That choice is not one of the available choices."
0.25 /testbed/django/forms/models.py(1427):         "invalid_choice": _(
0.25 /testbed/django/forms/models.py(1426):     default_error_messages = {
0.25 /testbed/django/forms/models.py(1431):     iterator = ModelChoiceIterator
0.25 /testbed/django/forms/models.py(1437):         empty_label="---------",
0.25 /testbed/django/forms/models.py(1438):         required=True,
0.25 /testbed/django/forms/models.py(1439):         widget=None,
0.25 /testbed/django/forms/models.py(1440):         label=None,
0.25 /testbed/django/forms/models.py(1441):         initial=None,
0.25 /testbed/django/forms/models.py(1442):         help_text="",
0.25 /testbed/django/forms/models.py(1443):         to_field_name=None,
0.25 /testbed/django/forms/models.py(1444):         limit_choices_to=None,
0.25 /testbed/django/forms/models.py(1445):         blank=False,
0.25 /testbed/django/forms/models.py(1433):     def __init__(
0.25 /testbed/django/forms/models.py(1469):     def get_limit_choices_to(self):
0.25 /testbed/django/forms/models.py(1479):     def __deepcopy__(self, memo):
0.25 /testbed/django/forms/models.py(1486):     def _get_queryset(self):
0.25 /testbed/django/forms/models.py(1489):     def _set_queryset(self, queryset):
0.25 /testbed/django/forms/models.py(1493):     queryset = property(_get_queryset, _set_queryset)
0.25 /testbed/django/forms/models.py(1497):     def label_from_instance(self, obj):
0.25 /testbed/django/forms/models.py(1505):     def _get_choices(self):
0.25 /testbed/django/forms/models.py(1520):     choices = property(_get_choices, ChoiceField._set_choices)
0.25 /testbed/django/forms/models.py(1522):     def prepare_value(self, value):
0.25 /testbed/django/forms/models.py(1530):     def to_python(self, value):
0.25 /testbed/django/forms/models.py(1546):     def validate(self, value):
0.25 /testbed/django/forms/models.py(1549):     def has_changed(self, initial, data):
0.25 /testbed/django/forms/models.py(1557): class ModelMultipleChoiceField(ModelChoiceField):
0.25 /testbed/django/forms/models.py(1557): class ModelMultipleChoiceField(ModelChoiceField):
0.25 /testbed/django/forms/models.py(1558):     """A MultipleChoiceField whose choices are a model QuerySet."""
0.25 /testbed/django/forms/models.py(1560):     widget = SelectMultiple
0.25 /testbed/django/forms/models.py(1561):     hidden_widget = MultipleHiddenInput
0.25 /testbed/django/forms/models.py(1563):         "invalid_list": _("Enter a list of values."),
0.25 /testbed/django/forms/models.py(1564):         "invalid_choice": _(
0.25 /testbed/django/forms/models.py(1565):             "Select a valid choice. %(value)s is not one of the available choices."
0.25 /testbed/django/forms/models.py(1564):         "invalid_choice": _(
0.25 /testbed/django/forms/models.py(1567):         "invalid_pk_value": _("“%(pk)s” is not a valid value."),
0.25 /testbed/django/forms/models.py(1562):     default_error_messages = {
0.25 /testbed/django/forms/models.py(1570):     def __init__(self, queryset, **kwargs):
0.25 /testbed/django/forms/models.py(1573):     def to_python(self, value):
0.25 /testbed/django/forms/models.py(1578):     def clean(self, value):
0.25 /testbed/django/forms/models.py(1595):     def _check_values(self, value):
0.25 /testbed/django/forms/models.py(1632):     def prepare_value(self, value):
0.25 /testbed/django/forms/models.py(1642):     def has_changed(self, initial, data):
0.25 /testbed/django/forms/models.py(1656): def modelform_defines_fields(form_class):
Testing against Django installed in '/testbed/django'
0.64 /testbed/django/forms/models.py(261):         new_class = super().__new__(mcs, name, bases, attrs)
0.64 /testbed/django/forms/models.py(263):         if bases == (BaseModelForm,):
0.64 /testbed/django/forms/models.py(266):         opts = new_class._meta = ModelFormOptions(getattr(new_class, "Meta", None))
0.64 /testbed/django/forms/models.py(247):         self.model = getattr(options, "model", None)
0.64 /testbed/django/forms/models.py(248):         self.fields = getattr(options, "fields", None)
0.64 /testbed/django/forms/models.py(249):         self.exclude = getattr(options, "exclude", None)
0.64 /testbed/django/forms/models.py(250):         self.widgets = getattr(options, "widgets", None)
0.64 /testbed/django/forms/models.py(251):         self.localized_fields = getattr(options, "localized_fields", None)
0.64 /testbed/django/forms/models.py(252):         self.labels = getattr(options, "labels", None)
0.64 /testbed/django/forms/models.py(253):         self.help_texts = getattr(options, "help_texts", None)
0.64 /testbed/django/forms/models.py(254):         self.error_messages = getattr(options, "error_messages", None)
0.64 /testbed/django/forms/models.py(255):         self.field_classes = getattr(options, "field_classes", None)
0.64 /testbed/django/forms/models.py(256):         self.formfield_callback = getattr(options, "formfield_callback", None)
0.64 /testbed/django/forms/models.py(271):         for opt in ["fields", "exclude", "localized_fields"]:
0.64 /testbed/django/forms/models.py(272):             value = getattr(opts, opt)
0.64 /testbed/django/forms/models.py(273):             if isinstance(value, str) and value != ALL_FIELDS:
0.64 /testbed/django/forms/models.py(271):         for opt in ["fields", "exclude", "localized_fields"]:
0.64 /testbed/django/forms/models.py(272):             value = getattr(opts, opt)
0.64 /testbed/django/forms/models.py(273):             if isinstance(value, str) and value != ALL_FIELDS:
0.64 /testbed/django/forms/models.py(271):         for opt in ["fields", "exclude", "localized_fields"]:
0.64 /testbed/django/forms/models.py(272):             value = getattr(opts, opt)
0.64 /testbed/django/forms/models.py(273):             if isinstance(value, str) and value != ALL_FIELDS:
0.64 /testbed/django/forms/models.py(271):         for opt in ["fields", "exclude", "localized_fields"]:
0.64 /testbed/django/forms/models.py(285):         if opts.model:
0.64 /testbed/django/forms/models.py(287):             if opts.fields is None and opts.exclude is None:
0.64 /testbed/django/forms/models.py(294):             if opts.fields == ALL_FIELDS:
0.64 /testbed/django/forms/models.py(299):             fields = fields_for_model(
0.64 /testbed/django/forms/models.py(300):                 opts.model,
0.64 /testbed/django/forms/models.py(301):                 opts.fields,
0.64 /testbed/django/forms/models.py(302):                 opts.exclude,
0.64 /testbed/django/forms/models.py(303):                 opts.widgets,
0.64 /testbed/django/forms/models.py(304):                 opts.formfield_callback,
0.64 /testbed/django/forms/models.py(305):                 opts.localized_fields,
0.64 /testbed/django/forms/models.py(306):                 opts.labels,
0.64 /testbed/django/forms/models.py(307):                 opts.help_texts,
0.64 /testbed/django/forms/models.py(308):                 opts.error_messages,
0.64 /testbed/django/forms/models.py(309):                 opts.field_classes,
0.64 /testbed/django/forms/models.py(311):                 apply_limit_choices_to=False,
0.64 /testbed/django/forms/models.py(299):             fields = fields_for_model(
0.64 /testbed/django/forms/models.py(179):     field_dict = {}
0.64 /testbed/django/forms/models.py(180):     ignored = []
0.64 /testbed/django/forms/models.py(181):     opts = model._meta
0.64 /testbed/django/forms/models.py(183):     from django.db.models import Field as ModelField
0.64 /testbed/django/forms/models.py(185):     sortable_private_fields = [
0.64 /testbed/django/forms/models.py(186):         f for f in opts.private_fields if isinstance(f, ModelField)
0.64 /testbed/django/forms/models.py(185):     sortable_private_fields = [
0.64 /testbed/django/forms/models.py(185):     sortable_private_fields = [
0.64 /testbed/django/forms/models.py(188):     for f in sorted(
0.64 /testbed/django/forms/models.py(189):         chain(opts.concrete_fields, sortable_private_fields, opts.many_to_many)
0.64 /testbed/django/forms/models.py(188):     for f in sorted(
0.64 /testbed/django/forms/models.py(191):         if not getattr(f, "editable", False):
0.64 /testbed/django/forms/models.py(202):         if fields is not None and f.name not in fields:
0.64 /testbed/django/forms/models.py(203):             continue
0.64 /testbed/django/forms/models.py(188):     for f in sorted(
0.64 /testbed/django/forms/models.py(191):         if not getattr(f, "editable", False):
0.64 /testbed/django/forms/models.py(202):         if fields is not None and f.name not in fields:
0.64 /testbed/django/forms/models.py(204):         if exclude and f.name in exclude:
0.64 /testbed/django/forms/models.py(207):         kwargs = {}
0.64 /testbed/django/forms/models.py(208):         if widgets and f.name in widgets:
0.64 /testbed/django/forms/models.py(210):         if localized_fields == ALL_FIELDS or (
0.64 /testbed/django/forms/models.py(211):             localized_fields and f.name in localized_fields
0.64 /testbed/django/forms/models.py(210):         if localized_fields == ALL_FIELDS or (
0.64 /testbed/django/forms/models.py(214):         if labels and f.name in labels:
0.64 /testbed/django/forms/models.py(216):         if help_texts and f.name in help_texts:
0.64 /testbed/django/forms/models.py(218):         if error_messages and f.name in error_messages:
0.64 /testbed/django/forms/models.py(220):         if field_classes and f.name in field_classes:
0.64 /testbed/django/forms/models.py(223):         if formfield_callback is None:
0.64 /testbed/django/forms/models.py(225):         elif not callable(formfield_callback):
0.64 /testbed/django/forms/models.py(228):             formfield = formfield_callback(f, **kwargs)
0.64 /testbed/django/forms/models.py(230):         if formfield:
0.64 /testbed/django/forms/models.py(231):             if apply_limit_choices_to:
0.64 /testbed/django/forms/models.py(233):             field_dict[f.name] = formfield
0.64 /testbed/django/forms/models.py(188):     for f in sorted(
0.64 /testbed/django/forms/models.py(191):         if not getattr(f, "editable", False):
0.64 /testbed/django/forms/models.py(202):         if fields is not None and f.name not in fields:
0.64 /testbed/django/forms/models.py(204):         if exclude and f.name in exclude:
0.64 /testbed/django/forms/models.py(207):         kwargs = {}
0.64 /testbed/django/forms/models.py(208):         if widgets and f.name in widgets:
0.64 /testbed/django/forms/models.py(210):         if localized_fields == ALL_FIELDS or (
0.64 /testbed/django/forms/models.py(211):             localized_fields and f.name in localized_fields
0.64 /testbed/django/forms/models.py(210):         if localized_fields == ALL_FIELDS or (
0.64 /testbed/django/forms/models.py(214):         if labels and f.name in labels:
0.64 /testbed/django/forms/models.py(216):         if help_texts and f.name in help_texts:
0.64 /testbed/django/forms/models.py(218):         if error_messages and f.name in error_messages:
0.64 /testbed/django/forms/models.py(220):         if field_classes and f.name in field_classes:
0.64 /testbed/django/forms/models.py(223):         if formfield_callback is None:
0.64 test_modelform_factory_uses_meta_formfield_callback (test_coverup_django__django-15916.ModelFormFactoryTest)
Test that modelform_factory uses the formfield_callback specified ... /testbed/django/forms/models.py(225):         elif not callable(formfield_callback):
0.64 /testbed/django/forms/models.py(228):             formfield = formfield_callback(f, **kwargs)
0.64 /testbed/django/forms/models.py(230):         if formfield:
0.64 /testbed/django/forms/models.py(231):             if apply_limit_choices_to:
0.64 /testbed/django/forms/models.py(233):             field_dict[f.name] = formfield
0.64 /testbed/django/forms/models.py(188):     for f in sorted(
0.64 /testbed/django/forms/models.py(236):     if fields:
0.64 /testbed/django/forms/models.py(237):         field_dict = {
0.64 /testbed/django/forms/models.py(239):             for f in fields
0.64 /testbed/django/forms/models.py(237):         field_dict = {
0.64 /testbed/django/forms/models.py(237):         field_dict = {
0.64 /testbed/django/forms/models.py(239):             for f in fields
0.64 /testbed/django/forms/models.py(240):             if (not exclude or f not in exclude) and f not in ignored
0.64 /testbed/django/forms/models.py(238):             f: field_dict.get(f)
0.64 /testbed/django/forms/models.py(237):         field_dict = {
0.64 /testbed/django/forms/models.py(239):             for f in fields
0.64 /testbed/django/forms/models.py(240):             if (not exclude or f not in exclude) and f not in ignored
0.64 /testbed/django/forms/models.py(238):             f: field_dict.get(f)
0.64 /testbed/django/forms/models.py(237):         field_dict = {
0.64 /testbed/django/forms/models.py(242):     return field_dict
0.64 /testbed/django/forms/models.py(315):             none_model_fields = {k for k, v in fields.items() if not v}
0.64 /testbed/django/forms/models.py(315):             none_model_fields = {k for k, v in fields.items() if not v}
0.64 /testbed/django/forms/models.py(315):             none_model_fields = {k for k, v in fields.items() if not v}
0.64 /testbed/django/forms/models.py(315):             none_model_fields = {k for k, v in fields.items() if not v}
0.64 /testbed/django/forms/models.py(316):             missing_fields = none_model_fields.difference(new_class.declared_fields)
0.64 /testbed/django/forms/models.py(317):             if missing_fields:
0.64 /testbed/django/forms/models.py(323):             fields.update(new_class.declared_fields)
0.64 /testbed/django/forms/models.py(327):         new_class.base_fields = fields
0.64 /testbed/django/forms/models.py(329):         return new_class
Found 1 test(s).
Skipping setup of unused database(s): default, other.
System check identified no issues (0 silenced).
0.68 /testbed/django/forms/models.py(604):     attrs = {"model": model}
0.68 /testbed/django/forms/models.py(605):     if fields is not None:
0.68 /testbed/django/forms/models.py(607):     if exclude is not None:
0.68 /testbed/django/forms/models.py(609):     if widgets is not None:
0.68 /testbed/django/forms/models.py(611):     if localized_fields is not None:
0.68 /testbed/django/forms/models.py(613):     if labels is not None:
0.68 /testbed/django/forms/models.py(615):     if help_texts is not None:
0.68 /testbed/django/forms/models.py(617):     if error_messages is not None:
0.68 /testbed/django/forms/models.py(619):     if field_classes is not None:
0.68 /testbed/django/forms/models.py(624):     bases = (form.Meta,) if hasattr(form, "Meta") else ()
0.68 /testbed/django/forms/models.py(625):     Meta = type("Meta", bases, attrs)
0.68 /testbed/django/forms/models.py(626):     if formfield_callback:
0.68 /testbed/django/forms/models.py(629):     class_name = model.__name__ + "Form"
0.68 /testbed/django/forms/models.py(632):     form_class_attrs = {"Meta": Meta}
0.68 /testbed/django/forms/models.py(634):     if getattr(Meta, "fields", None) is None and getattr(Meta, "exclude", None) is None:
0.68 /testbed/django/forms/models.py(641):     return type(form)(class_name, (form,), form_class_attrs)
0.68 /testbed/django/forms/models.py(261):         new_class = super().__new__(mcs, name, bases, attrs)
0.68 /testbed/django/forms/models.py(263):         if bases == (BaseModelForm,):
0.68 /testbed/django/forms/models.py(266):         opts = new_class._meta = ModelFormOptions(getattr(new_class, "Meta", None))
0.68 /testbed/django/forms/models.py(247):         self.model = getattr(options, "model", None)
0.68 /testbed/django/forms/models.py(248):         self.fields = getattr(options, "fields", None)
0.68 /testbed/django/forms/models.py(249):         self.exclude = getattr(options, "exclude", None)
0.68 /testbed/django/forms/models.py(250):         self.widgets = getattr(options, "widgets", None)
0.68 /testbed/django/forms/models.py(251):         self.localized_fields = getattr(options, "localized_fields", None)
0.68 /testbed/django/forms/models.py(252):         self.labels = getattr(options, "labels", None)
0.68 /testbed/django/forms/models.py(253):         self.help_texts = getattr(options, "help_texts", None)
0.68 /testbed/django/forms/models.py(254):         self.error_messages = getattr(options, "error_messages", None)
0.68 /testbed/django/forms/models.py(255):         self.field_classes = getattr(options, "field_classes", None)
0.68 /testbed/django/forms/models.py(256):         self.formfield_callback = getattr(options, "formfield_callback", None)
0.68 /testbed/django/forms/models.py(271):         for opt in ["fields", "exclude", "localized_fields"]:
0.68 /testbed/django/forms/models.py(272):             value = getattr(opts, opt)
0.68 /testbed/django/forms/models.py(273):             if isinstance(value, str) and value != ALL_FIELDS:
0.68 /testbed/django/forms/models.py(271):         for opt in ["fields", "exclude", "localized_fields"]:
0.68 /testbed/django/forms/models.py(272):             value = getattr(opts, opt)
0.68 /testbed/django/forms/models.py(273):             if isinstance(value, str) and value != ALL_FIELDS:
0.68 /testbed/django/forms/models.py(271):         for opt in ["fields", "exclude", "localized_fields"]:
0.68 /testbed/django/forms/models.py(272):             value = getattr(opts, opt)
0.68 /testbed/django/forms/models.py(273):             if isinstance(value, str) and value != ALL_FIELDS:
0.68 /testbed/django/forms/models.py(271):         for opt in ["fields", "exclude", "localized_fields"]:
0.68 /testbed/django/forms/models.py(285):         if opts.model:
0.68 /testbed/django/forms/models.py(287):             if opts.fields is None and opts.exclude is None:
0.68 /testbed/django/forms/models.py(294):             if opts.fields == ALL_FIELDS:
0.68 /testbed/django/forms/models.py(299):             fields = fields_for_model(
0.68 /testbed/django/forms/models.py(300):                 opts.model,
0.68 /testbed/django/forms/models.py(301):                 opts.fields,
0.68 /testbed/django/forms/models.py(302):                 opts.exclude,
0.68 /testbed/django/forms/models.py(303):                 opts.widgets,
0.68 /testbed/django/forms/models.py(304):                 opts.formfield_callback,
0.68 /testbed/django/forms/models.py(305):                 opts.localized_fields,
0.68 /testbed/django/forms/models.py(306):                 opts.labels,
0.68 /testbed/django/forms/models.py(307):                 opts.help_texts,
0.68 /testbed/django/forms/models.py(308):                 opts.error_messages,
0.68 /testbed/django/forms/models.py(309):                 opts.field_classes,
0.68 /testbed/django/forms/models.py(311):                 apply_limit_choices_to=False,
0.68 /testbed/django/forms/models.py(299):             fields = fields_for_model(
0.68 /testbed/django/forms/models.py(179):     field_dict = {}
0.68 /testbed/django/forms/models.py(180):     ignored = []
0.68 /testbed/django/forms/models.py(181):     opts = model._meta
0.68 /testbed/django/forms/models.py(183):     from django.db.models import Field as ModelField
0.68 /testbed/django/forms/models.py(185):     sortable_private_fields = [
0.68 /testbed/django/forms/models.py(186):         f for f in opts.private_fields if isinstance(f, ModelField)
0.68 /testbed/django/forms/models.py(185):     sortable_private_fields = [
0.68 /testbed/django/forms/models.py(185):     sortable_private_fields = [
0.68 /testbed/django/forms/models.py(188):     for f in sorted(
0.68 ok

----------------------------------------------------------------------
Ran 1 test in 0.001s

OK
/testbed/django/forms/models.py(189):         chain(opts.concrete_fields, sortable_private_fields, opts.many_to_many)
0.68 /testbed/django/forms/models.py(188):     for f in sorted(
0.68 /testbed/django/forms/models.py(191):         if not getattr(f, "editable", False):
0.68 /testbed/django/forms/models.py(202):         if fields is not None and f.name not in fields:
0.68 /testbed/django/forms/models.py(203):             continue
0.68 /testbed/django/forms/models.py(188):     for f in sorted(
0.68 /testbed/django/forms/models.py(191):         if not getattr(f, "editable", False):
0.68 /testbed/django/forms/models.py(202):         if fields is not None and f.name not in fields:
0.68 /testbed/django/forms/models.py(204):         if exclude and f.name in exclude:
0.68 /testbed/django/forms/models.py(207):         kwargs = {}
0.68 /testbed/django/forms/models.py(208):         if widgets and f.name in widgets:
0.68 /testbed/django/forms/models.py(210):         if localized_fields == ALL_FIELDS or (
0.68 /testbed/django/forms/models.py(211):             localized_fields and f.name in localized_fields
0.68 /testbed/django/forms/models.py(210):         if localized_fields == ALL_FIELDS or (
0.68 /testbed/django/forms/models.py(214):         if labels and f.name in labels:
0.68 /testbed/django/forms/models.py(216):         if help_texts and f.name in help_texts:
0.68 /testbed/django/forms/models.py(218):         if error_messages and f.name in error_messages:
0.68 /testbed/django/forms/models.py(220):         if field_classes and f.name in field_classes:
0.68 /testbed/django/forms/models.py(223):         if formfield_callback is None:
0.68 /testbed/django/forms/models.py(225):         elif not callable(formfield_callback):
0.68 /testbed/django/forms/models.py(228):             formfield = formfield_callback(f, **kwargs)
0.68 /testbed/django/forms/models.py(230):         if formfield:
0.68 /testbed/django/forms/models.py(231):             if apply_limit_choices_to:
0.68 /testbed/django/forms/models.py(233):             field_dict[f.name] = formfield
0.68 /testbed/django/forms/models.py(188):     for f in sorted(
0.68 /testbed/django/forms/models.py(191):         if not getattr(f, "editable", False):
0.68 /testbed/django/forms/models.py(202):         if fields is not None and f.name not in fields:
0.68 /testbed/django/forms/models.py(204):         if exclude and f.name in exclude:
0.68 /testbed/django/forms/models.py(207):         kwargs = {}
0.68 /testbed/django/forms/models.py(208):         if widgets and f.name in widgets:
0.68 /testbed/django/forms/models.py(210):         if localized_fields == ALL_FIELDS or (
0.68 /testbed/django/forms/models.py(211):             localized_fields and f.name in localized_fields
0.68 /testbed/django/forms/models.py(210):         if localized_fields == ALL_FIELDS or (
0.68 /testbed/django/forms/models.py(214):         if labels and f.name in labels:
0.68 /testbed/django/forms/models.py(216):         if help_texts and f.name in help_texts:
0.68 /testbed/django/forms/models.py(218):         if error_messages and f.name in error_messages:
0.68 /testbed/django/forms/models.py(220):         if field_classes and f.name in field_classes:
0.68 /testbed/django/forms/models.py(223):         if formfield_callback is None:
0.68 /testbed/django/forms/models.py(225):         elif not callable(formfield_callback):
0.68 /testbed/django/forms/models.py(228):             formfield = formfield_callback(f, **kwargs)
0.68 /testbed/django/forms/models.py(230):         if formfield:
0.68 /testbed/django/forms/models.py(231):             if apply_limit_choices_to:
0.68 /testbed/django/forms/models.py(233):             field_dict[f.name] = formfield
0.68 /testbed/django/forms/models.py(188):     for f in sorted(
0.68 /testbed/django/forms/models.py(236):     if fields:
0.68 /testbed/django/forms/models.py(237):         field_dict = {
0.68 /testbed/django/forms/models.py(239):             for f in fields
0.68 /testbed/django/forms/models.py(237):         field_dict = {
0.68 /testbed/django/forms/models.py(237):         field_dict = {
0.68 /testbed/django/forms/models.py(239):             for f in fields
0.68 /testbed/django/forms/models.py(240):             if (not exclude or f not in exclude) and f not in ignored
0.68 /testbed/django/forms/models.py(238):             f: field_dict.get(f)
0.68 /testbed/django/forms/models.py(237):         field_dict = {
0.68 /testbed/django/forms/models.py(239):             for f in fields
0.68 /testbed/django/forms/models.py(240):             if (not exclude or f not in exclude) and f not in ignored
0.68 /testbed/django/forms/models.py(238):             f: field_dict.get(f)
0.68 /testbed/django/forms/models.py(237):         field_dict = {
0.68 /testbed/django/forms/models.py(242):     return field_dict
0.68 /testbed/django/forms/models.py(315):             none_model_fields = {k for k, v in fields.items() if not v}
0.68 /testbed/django/forms/models.py(315):             none_model_fields = {k for k, v in fields.items() if not v}
0.68 /testbed/django/forms/models.py(315):             none_model_fields = {k for k, v in fields.items() if not v}
0.68 /testbed/django/forms/models.py(315):             none_model_fields = {k for k, v in fields.items() if not v}
0.68 /testbed/django/forms/models.py(316):             missing_fields = none_model_fields.difference(new_class.declared_fields)
0.68 /testbed/django/forms/models.py(317):             if missing_fields:
0.68 /testbed/django/forms/models.py(323):             fields.update(new_class.declared_fields)
0.68 /testbed/django/forms/models.py(327):         new_class.base_fields = fields
0.68 /testbed/django/forms/models.py(329):         return new_class
0.68 /testbed/django/forms/models.py(347):         opts = self._meta
0.68 /testbed/django/forms/models.py(348):         if opts.model is None:
0.68 /testbed/django/forms/models.py(350):         if instance is None:
0.68 /testbed/django/forms/models.py(352):             self.instance = opts.model()
0.68 /testbed/django/forms/models.py(353):             object_data = {}
0.68 /testbed/django/forms/models.py(358):         if initial is not None:
0.68 /testbed/django/forms/models.py(363):         self._validate_unique = False
0.68 /testbed/django/forms/models.py(364):         super().__init__(
0.68 /testbed/django/forms/models.py(365):             data,
0.68 /testbed/django/forms/models.py(366):             files,
0.68 /testbed/django/forms/models.py(367):             auto_id,
0.68 /testbed/django/forms/models.py(368):             prefix,
0.68 /testbed/django/forms/models.py(369):             object_data,
0.68 /testbed/django/forms/models.py(370):             error_class,
0.68 /testbed/django/forms/models.py(371):             label_suffix,
0.68 /testbed/django/forms/models.py(372):             empty_permitted,
0.68 /testbed/django/forms/models.py(373):             use_required_attribute=use_required_attribute,
0.68 /testbed/django/forms/models.py(374):             renderer=renderer,
0.68 /testbed/django/forms/models.py(364):         super().__init__(
0.68 /testbed/django/forms/models.py(376):         for formfield in self.fields.values():
0.68 /testbed/django/forms/models.py(377):             apply_limit_choices_to_to_formfield(formfield)
0.68 /testbed/django/forms/models.py(120):     from django.db.models import Exists, OuterRef, Q
0.68 /testbed/django/forms/models.py(122):     if hasattr(formfield, "queryset") and hasattr(formfield, "get_limit_choices_to"):
0.68 /testbed/django/forms/models.py(376):         for formfield in self.fields.values():
0.68 /testbed/django/forms/models.py(377):             apply_limit_choices_to_to_formfield(formfield)
0.68 /testbed/django/forms/models.py(120):     from django.db.models import Exists, OuterRef, Q
0.68 /testbed/django/forms/models.py(122):     if hasattr(formfield, "queryset") and hasattr(formfield, "get_limit_choices_to"):
0.68 /testbed/django/forms/models.py(376):         for formfield in self.fields.values():
+ cat coverage.cover
{"/testbed/django/forms/models.py": {"5": 1, "7": 1, "13": 1, "14": 1, "15": 1, "16": 1, "17": 1, "23": 1, "24": 1, "25": 1, "27": 1, "42": 1, "45": 1, "93": 1, "118": 1, "135": 2, "147": 1, "245": 2, "259": 2, "332": 2, "552": 2, "558": 1, "559": 1, "560": 1, "561": 1, "562": 1, "563": 1, "564": 1, "565": 1, "566": 1, "567": 1, "556": 1, "647": 2, "1001": 1, "1002": 1, "1003": 1, "1004": 1, "1005": 1, "1006": 1, "1007": 1, "1008": 1, "1009": 1, "1010": 1, "1011": 1, "1012": 1, "1013": 1, "1014": 1, "1015": 1, "1016": 1, "1017": 1, "1018": 1, "1019": 1, "1020": 1, "1021": 1, "1022": 1, "999": 1, "1070": 2, "1181": 1, "1263": 1, "1264": 1, "1265": 1, "1266": 1, "1267": 1, "1268": 1, "1269": 1, "1270": 1, "1271": 1, "1272": 1, "1273": 1, "1274": 1, "1275": 1, "1276": 1, "1277": 1, "1278": 1, "1279": 1, "1280": 1, "1281": 1, "1282": 1, "1283": 1, "1284": 1, "1285": 1, "1260": 1, "1329": 2, "1373": 2, "1390": 2, "1421": 2, "1557": 2, "1656": 1, "50": 0, "52": 0, "54": 0, "55": 0, "56": 0, "58": 0, "57": 0, "59": 0, "60": 0, "62": 0, "63": 0, "64": 0, "65": 0, "66": 0, "70": 0, "69": 0, "71": 0, "72": 0, "74": 0, "76": 0, "79": 0, "80": 0, "82": 0, "84": 0, "85": 0, "87": 0, "105": 0, "106": 0, "107": 0, "108": 0, "109": 0, "110": 0, "111": 0, "112": 0, "113": 0, "114": 0, "115": 0, "120": 2, "122": 2, "123": 0, "124": 0, "125": 0, "126": 0, "127": 0, "128": 0, "130": 0, "131": 0, "179": 2, "180": 2, "181": 2, "183": 2, "185": 6, "186": 2, "188": 10, "189": 2, "191": 6, "193": 0, "192": 0, "194": 0, "195": 0, "197": 0, "198": 0, "199": 0, "201": 0, "202": 6, "203": 2, "204": 4, "205": 0, "207": 4, "208": 4, "209": 0, "210": 8, "211": 4, "213": 0, "214": 4, "215": 0, "216": 4, "217": 0, "218": 4, "219": 0, "220": 4, "221": 0, "223": 4, "224": 0, "225": 4, "226": 0, "228": 4, "230": 4, "231": 4, "232": 0, "233": 4, "235": 0, "236": 2, "237": 10, "239": 6, "242": 2, "240": 4, "238": 4, "246": 1, "247": 2, "248": 2, "249": 2, "250": 2, "251": 2, "252": 2, "253": 2, "254": 2, "255": 2, "256": 2, "260": 1, "261": 3, "263": 3, "264": 1, "266": 2, "271": 8, "272": 6, "273": 6, "275": 0, "278": 0, "279": 0, "280": 0, "277": 0, "274": 0, "283": 0, "285": 2, "287": 2, "288": 0, "289": 0, "291": 0, "294": 2, "297": 0, "299": 4, "300": 2, "301": 2, "302": 2, "303": 2, "304": 2, "305": 2, "306": 2, "307": 2, "308": 2, "309": 2, "311": 2, "315": 8, "316": 2, "317": 2, "318": 0, "319": 0, "320": 0, "323": 2, "325": 0, "327": 2, "329": 2, "335": 1, "336": 1, "337": 1, "338": 1, "339": 1, "340": 1, "341": 1, "342": 1, "343": 1, "344": 1, "345": 1, "333": 1, "379": 1, "424": 1, "428": 1, "461": 1, "493": 1, "504": 1, "525": 1, "549": 1, "347": 1, "348": 1, "349": 0, "350": 1, "352": 1, "353": 1, "355": 0, "356": 0, "358": 1, "359": 0, "363": 1, "364": 2, "365": 1, "366": 1, "367": 1, "368": 1, "369": 1, "370": 1, "371": 1, "372": 1, "373": 1, "374": 1, "376": 3, "377": 2, "384": 0, "387": 0, "388": 0, "391": 0, "392": 0, "397": 0, "398": 0, "399": 0, "400": 0, "404": 0, "405": 0, "414": 0, "415": 0, "417": 0, "416": 0, "418": 0, "419": 0, "421": 0, "422": 0, "425": 0, "426": 0, "431": 0, "435": 0, "436": 0, "438": 0, "440": 0, "442": 0, "441": 0, "443": 0, "444": 0, "446": 0, "447": 0, "448": 0, "450": 0, "452": 0, "454": 0, "453": 0, "455": 0, "457": 0, "459": 0, "462": 0, "464": 0, "473": 0, "474": 0, "475": 0, "477": 0, "478": 0, "479": 0, "481": 0, "482": 0, "484": 0, "485": 0, "486": 0, "487": 0, "490": 0, "491": 0, "498": 0, "499": 0, "500": 0, "501": 0, "502": 0, "508": 0, "509": 0, "510": 0, "511": 0, "515": 0, "516": 0, "517": 0, "518": 0, "519": 0, "520": 0, "521": 0, "522": 0, "523": 0, "531": 0, "532": 0, "533": 0, "535": 0, "536": 0, "534": 0, "539": 0, "541": 0, "542": 0, "546": 0, "547": 0, "553": 1, "604": 1, "605": 1, "606": 0, "607": 1, "608": 0, "609": 1, "610": 0, "611": 1, "612": 0, "613": 1, "614": 0, "615": 1, "616": 0, "617": 1, "618": 0, "619": 1, "620": 0, "624": 1, "625": 1, "626": 1, "627": 0, "629": 1, "632": 1, "634": 1, "635": 0, "636": 0, "641": 1, "652": 1, "653": 1, "656": 1, "658": 2, "666": 1, "681": 1, "687": 1, "692": 1, "701": 1, "735": 1, "754": 1, "758": 1, "762": 1, "767": 1, "785": 1, "787": 1, "790": 1, "883": 1, "895": 1, "905": 1, "908": 1, "934": 1, "948": 1, "669": 0, "670": 0, "671": 0, "673": 0, "674": 0, "675": 0, "676": 0, "672": 0, "677": 0, "683": 0, "684": 0, "685": 0, "688": 0, "689": 0, "690": 0, "697": 0, "698": 0, "699": 0, "702": 0, "703": 0, "704": 0, "705": 0, "706": 0, "707": 0, "708": 0, "711": 0, "713": 0, "714": 0, "715": 0, "716": 0, "719": 0, "721": 0, "723": 0, "724": 0, "726": 0, "727": 0, "728": 0, "729": 0, "730": 0, "731": 0, "732": 0, "733": 0, "736": 0, "737": 0, "738": 0, "740": 0, "745": 0, "746": 0, "751": 0, "752": 0, "756": 0, "760": 0, "764": 0, "765": 0, "772": 0, "773": 0, "775": 0, "779": 0, "780": 0, "781": 0, "783": 0, "776": 0, "777": 0, "788": 0, "792": 0, "793": 0, "794": 0, "795": 0, "797": 0, "800": 0, "801": 0, "802": 0, "803": 0, "804": 0, "806": 0, "807": 0, "809": 0, "811": 0, "812": 0, "813": 0, "816": 0, "818": 0, "822": 0, "826": 0, "828": 0, "830": 0, "833": 0, "834": 0, "835": 0, "836": 0, "840": 0, "841": 0, "842": 0, "844": 0, "846": 0, "847": 0, "848": 0, "849": 0, "852": 0, "851": 0, "853": 0, "854": 0, "857": 0, "858": 0, "859": 0, "863": 0, "864": 0, "866": 0, "869": 0, "870": 0, "871": 0, "872": 0, "876": 0, "878": 0, "880": 0, "881": 0, "798": 0, "796": 0, "819": 0, "817": 0, "823": 0, "825": 0, "884": 0, "885": 0, "886": 0, "889": 0, "890": 0, "892": 0, "891": 0, "896": 0, "897": 0, "900": 0, "901": 0, "902": 0, "899": 0, "906": 0, "909": 0, "910": 0, "911": 0, "912": 0, "914": 0, "915": 0, "916": 0, "917": 0, "922": 0, "923": 0, "924": 0, "925": 0, "926": 0, "927": 0, "928": 0, "929": 0, "930": 0, "931": 0, "932": 0, "935": 0, "936": 0, "937": 0, "938": 0, "941": 0, "942": 0, "943": 0, "944": 0, "945": 0, "946": 0, "950": 0, "952": 0, "959": 0, "970": 0, "971": 0, "975": 0, "977": 0, "978": 0, "979": 0, "981": 0, "982": 0, "983": 0, "984": 0, "985": 0, "987": 0, "988": 0, "989": 0, "990": 0, "992": 0, "993": 0, "994": 0, "996": 0, "961": 0, "962": 0, "964": 0, "965": 0, "966": 0, "960": 0, "1025": 0, "1027": 0, "1026": 0, "1028": 0, "1030": 0, "1031": 0, "1035": 0, "1036": 0, "1037": 0, "1038": 0, "1039": 0, "1040": 0, "1041": 0, "1042": 0, "1043": 0, "1044": 0, "1045": 0, "1046": 0, "1048": 0, "1049": 0, "1050": 0, "1051": 0, "1052": 0, "1053": 0, "1054": 0, "1055": 0, "1056": 0, "1057": 0, "1058": 0, "1059": 0, "1060": 0, "1062": 0, "1063": 0, "1064": 0, "1073": 1, "1104": 1, "1109": 1, "1132": 1, "1133": 1, "1136": 1, "1143": 1, "1176": 1, "1083": 0, "1084": 0, "1086": 0, "1087": 0, "1088": 0, "1089": 0, "1090": 0, "1091": 0, "1093": 0, "1094": 0, "1095": 0, "1099": 0, "1100": 0, "1101": 0, "1102": 0, "1105": 0, "1106": 0, "1107": 0, "1110": 0, "1111": 0, "1112": 0, "1114": 0, "1115": 0, "1118": 0, "1120": 0, "1121": 0, "1122": 0, "1125": 0, "1126": 0, "1127": 0, "1128": 0, "1129": 0, "1130": 0, "1134": 0, "1140": 0, "1141": 0, "1144": 0, "1145": 0, "1146": 0, "1147": 0, "1151": 0, "1153": 0, "1154": 0, "1152": 0, "1161": 0, "1162": 0, "1166": 0, "1167": 0, "1168": 0, "1170": 0, "1171": 0, "1172": 0, "1174": 0, "1177": 0, "1178": 0, "1190": 0, "1192": 0, "1193": 0, "1194": 0, "1195": 0, "1196": 0, "1197": 0, "1199": 0, "1198": 0, "1202": 0, "1203": 0, "1207": 0, "1208": 0, "1209": 0, "1212": 0, "1213": 0, "1214": 0, "1216": 0, "1217": 0, "1218": 0, "1222": 0, "1223": 0, "1225": 0, "1236": 0, "1237": 0, "1238": 0, "1239": 0, "1240": 0, "1241": 0, "1242": 0, "1244": 0, "1245": 0, "1243": 0, "1249": 0, "1250": 0, "1253": 0, "1254": 0, "1252": 0, "1257": 0, "1226": 0, "1228": 0, "1229": 0, "1231": 0, "1232": 0, "1224": 0, "1293": 0, "1295": 0, "1296": 0, "1298": 0, "1299": 0, "1300": 0, "1301": 0, "1302": 0, "1303": 0, "1304": 0, "1305": 0, "1306": 0, "1307": 0, "1308": 0, "1309": 0, "1310": 0, "1311": 0, "1312": 0, "1313": 0, "1314": 0, "1315": 0, "1316": 0, "1317": 0, "1318": 0, "1319": 0, "1297": 0, "1321": 0, "1322": 0, "1323": 0, "1335": 1, "1337": 1, "1336": 1, "1340": 1, "1352": 1, "1369": 1, "1341": 0, "1342": 0, "1343": 0, "1344": 0, "1345": 0, "1346": 0, "1348": 0, "1349": 0, "1350": 0, "1353": 0, "1354": 0, "1355": 0, "1357": 0, "1359": 0, "1360": 0, "1362": 0, "1363": 0, "1364": 0, "1365": 0, "1367": 0, "1370": 0, "1374": 1, "1378": 1, "1381": 1, "1384": 1, "1375": 0, "1376": 0, "1379": 0, "1382": 0, "1385": 0, "1386": 0, "1387": 0, "1391": 1, "1395": 1, "1405": 1, "1411": 1, "1414": 1, "1392": 0, "1393": 0, "1396": 0, "1397": 0, "1398": 0, "1400": 0, "1401": 0, "1402": 0, "1403": 0, "1409": 0, "1412": 0, "1416": 0, "1417": 0, "1415": 0, "1427": 2, "1428": 1, "1426": 1, "1431": 1, "1437": 1, "1438": 1, "1439": 1, "1440": 1, "1441": 1, "1442": 1, "1443": 1, "1444": 1, "1445": 1, "1433": 1, "1469": 1, "1479": 1, "1486": 1, "1489": 1, "1493": 1, "1497": 1, "1505": 1, "1520": 1, "1522": 1, "1530": 1, "1546": 1, "1549": 1, "1450": 0, "1451": 0, "1452": 0, "1453": 0, "1454": 0, "1455": 0, "1456": 0, "1457": 0, "1459": 0, "1460": 0, "1462": 0, "1464": 0, "1465": 0, "1466": 0, "1467": 0, "1475": 0, "1476": 0, "1477": 0, "1480": 0, "1482": 0, "1483": 0, "1484": 0, "1487": 0, "1490": 0, "1491": 0, "1503": 0, "1508": 0, "1509": 0, "1518": 0, "1523": 0, "1524": 0, "1525": 0, "1527": 0, "1528": 0, "1531": 0, "1532": 0, "1533": 0, "1534": 0, "1535": 0, "1536": 0, "1537": 0, "1538": 0, "1539": 0, "1540": 0, "1541": 0, "1542": 0, "1544": 0, "1547": 0, "1550": 0, "1551": 0, "1552": 0, "1553": 0, "1554": 0, "1560": 1, "1561": 1, "1563": 1, "1564": 2, "1565": 1, "1567": 1, "1562": 1, "1570": 1, "1573": 1, "1578": 1, "1595": 1, "1632": 1, "1642": 1, "1571": 0, "1574": 0, "1575": 0, "1576": 0, "1579": 0, "1580": 0, "1581": 0, "1582": 0, "1583": 0, "1584": 0, "1585": 0, "1586": 0, "1587": 0, "1589": 0, "1592": 0, "1593": 0, "1601": 0, "1604": 0, "1605": 0, "1606": 0, "1608": 0, "1609": 0, "1610": 0, "1612": 0, "1613": 0, "1614": 0, "1615": 0, "1616": 0, "1617": 0, "1618": 0, "1619": 0, "1621": 0, "1622": 0, "1623": 0, "1624": 0, "1625": 0, "1626": 0, "1627": 0, "1628": 0, "1630": 0, "1634": 0, "1633": 0, "1635": 0, "1636": 0, "1638": 0, "1639": 0, "1640": 0, "1643": 0, "1644": 0, "1645": 0, "1646": 0, "1647": 0, "1648": 0, "1649": 0, "1650": 0, "1651": 0, "1652": 0, "1653": 0, "1657": 0, "1658": 0}}
+ git checkout 88e67a54b7ed0210c11523a337b498aadb2f5187
Note: switching to '88e67a54b7ed0210c11523a337b498aadb2f5187'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at 88e67a54b7 Added test for non-HTTP request on ASGIStaticFilesHandler.
M	django/forms/models.py
+ git apply /root/pre_state.patch
error: unrecognized input
