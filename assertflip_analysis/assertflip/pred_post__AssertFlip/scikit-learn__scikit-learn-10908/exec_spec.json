{"instance_id": "scikit-learn__scikit-learn-10908", "repo": "scikit-learn/scikit-learn", "version": "0.20", "environment_setup_commit": "55bf5d93e5674f13a1134d93a11fd0cd11aabcd1", "patch_list": ["diff --git a/sklearn/feature_extraction/text.py b/sklearn/feature_extraction/text.py\n--- a/sklearn/feature_extraction/text.py\n+++ b/sklearn/feature_extraction/text.py\n@@ -971,6 +971,9 @@ def inverse_transform(self, X):\n \n     def get_feature_names(self):\n         \"\"\"Array mapping from feature integer indices to feature name\"\"\"\n+        if not hasattr(self, 'vocabulary_'):\n+            self._validate_vocabulary()\n+\n         self._check_vocabulary()\n \n         return [t for t, i in sorted(six.iteritems(self.vocabulary_),\n", "diff --git a/dev/null b/sklearn/tests/test_coverup_scikit-learn__scikit-learn-10908.py\nnew file mode 100644\nindex e69de29..a7da5a7 100644\n--- /dev/null\n+++ b/sklearn/tests/test_coverup_scikit-learn__scikit-learn-10908.py\n@@ -0,0 +1,40 @@\n+import pytest\n+from sklearn.feature_extraction.text import CountVectorizer\n+from sklearn.exceptions import NotFittedError\n+\n+def test_get_feature_names_with_vocabulary_does_not_raise_not_fitted_error():\n+    # Test to expose the bug where get_feature_names raises NotFittedError\n+    # even when a vocabulary is provided during initialization.\n+\n+    # Step 1: Prepare a sample corpus\n+    corpus = [\n+        'This is the first document.',\n+        'This is the second second document.',\n+        'And the third one.',\n+        'Is this the first document?',\n+    ]\n+\n+    # Step 2: Define a vocabulary list\n+    vocabulary = ['and', 'document', 'first', 'is', 'one', 'second', 'the', 'third', 'this']\n+\n+    # Step 3: Initialize CountVectorizer with the vocabulary\n+    vectorizer = CountVectorizer(vocabulary=vocabulary)\n+\n+    # Step 4: Check that vocabulary_ is not set initially\n+    assert not hasattr(vectorizer, \"vocabulary_\")\n+\n+    # Step 3: Call get_feature_names and ensure no exceptions are raised\n+    try:\n+        feature_names = vectorizer.get_feature_names()\n+        assert feature_names == vocabulary\n+    except NotFittedError:\n+        pytest.fail(\"get_feature_names() raised NotFittedError unexpectedly!\")\n+\n+    # Step 5: Call transform on the corpus to ensure the vocabulary is set\n+    vectorizer.transform(corpus)\n+\n+    # Step 6: Re-check the vocabulary_ attribute\n+    assert hasattr(vectorizer, \"vocabulary_\")  # This should be True after transform\n+\n+    # Cleanup: No state pollution expected, no cleanup needed\n+\n"], "arch": "x86_64", "base_commit": "67d06b18c68ee4452768f8a1e868565dd4354abf", "test_directives": ["sklearn/tests/test_coverup_scikit-learn__scikit-learn-10908.py"], "coverage_files": ["sklearn/feature_extraction/text.py"], "env_name": "testbed", "run_id": "assertflip", "patch_id": "pred_post__AssertFlip", "timeout": 1800, "rm_image": false, "force_rebuild": false, "exec_mode": "unit_test", "reproduction_script_name": null, "compute_coverage": true, "install": {"python": "3.6", "packages": "numpy scipy cython pytest pandas matplotlib", "install": "python -m pip install -v --no-use-pep517 --no-build-isolation -e .", "pip_packages": ["cython", "numpy==1.19.2", "setuptools", "scipy==1.5.2"]}, "cache_level": "instance", "test_command": "python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(sklearn/feature_extraction/text\\.py)' -m pytest --no-header -rA  -p no:cacheprovider sklearn/tests/test_coverup_scikit-learn__scikit-learn-10908.py", "req_install_commands": ["conda create -n testbed python=3.6 numpy scipy cython pytest pandas matplotlib -y"]}