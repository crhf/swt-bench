{"instance_id": "django__django-15741", "repo": "django/django", "version": "4.2", "environment_setup_commit": "0fbdb9784da915fce5dcc1fe82bac9b4785749e5", "patch_list": ["diff --git a/django/utils/formats.py b/django/utils/formats.py\n--- a/django/utils/formats.py\n+++ b/django/utils/formats.py\n@@ -113,6 +113,7 @@ def get_format(format_type, lang=None, use_l10n=None):\n             use_l10n = settings.USE_L10N\n     if use_l10n and lang is None:\n         lang = get_language()\n+    format_type = str(format_type)  # format_type may be lazy.\n     cache_key = (format_type, lang)\n     try:\n         return _format_cache[cache_key]\n", "diff --git a/dev/null b/tests/test_coverup_django__django-15741.py\nnew file mode 100644\nindex e69de29..2c0a927 100644\n--- /dev/null\n+++ b/tests/test_coverup_django__django-15741.py\n@@ -0,0 +1,21 @@\n+from django.test import SimpleTestCase\n+from django.utils.functional import lazy\n+from django.template.defaultfilters import date\n+from datetime import datetime\n+\n+class DateFilterLazyStringTest(SimpleTestCase):\n+    def test_date_filter_with_lazy_string(self):\n+        # Create a lazy string using Django's lazy utility\n+        lazy_format = lazy(lambda: 'Y-m-d', str)()\n+\n+        # Create a sample date\n+        sample_date = datetime(2023, 10, 5)\n+\n+        # Attempt to use the date filter with a lazy string\n+        try:\n+            result = date(sample_date, lazy_format)\n+            # Assert that the result is as expected when the bug is fixed\n+            self.assertEqual(result, '2023-10-05', \"BUG: Date filter did not process lazy string correctly.\")\n+        except TypeError as e:\n+            # If a TypeError is raised, assert False to indicate the bug\n+            self.assertFalse(True, f\"BUG: Unexpected TypeError raised: {str(e)}\")\n"], "arch": "x86_64", "base_commit": "8c0886b068ba4e224dd78104b93c9638b860b398", "test_directives": ["test_coverup_django__django-15741"], "coverage_files": ["django/utils/formats.py"], "env_name": "testbed", "run_id": "assertflip", "patch_id": "pred_post__AssertFlip", "timeout": 1800, "rm_image": false, "force_rebuild": false, "exec_mode": "unit_test", "reproduction_script_name": null, "compute_coverage": true, "install": {"python": "3.9", "packages": "requirements.txt", "install": "python -m pip install -e ."}, "cache_level": "instance", "test_command": "python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/utils/formats\\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-15741", "req_install_commands": ["conda create -n testbed python=3.9 -y", "cat <<'EOF_59812759871' > $HOME/requirements.txt\naiosmtpd\nasgiref >= 3.6.0\nargon2-cffi >= 19.2.0\nbackports.zoneinfo; python_version < '3.9'\nbcrypt\nblack\ndocutils\ngeoip2; python_version < '3.12'\njinja2 >= 2.11.0\nnumpy; python_version < '3.12'\nPillow >= 6.2.1; sys.platform != 'win32' or python_version < '3.12'\npylibmc; sys.platform != 'win32'\npymemcache >= 3.4.0\npytz\npywatchman; sys.platform != 'win32'\nPyYAML\nredis >= 3.4.0\nselenium\nsqlparse >= 0.3.1\ntblib >= 1.5.0\ntzdata\ncolorama; sys.platform == 'win32'\n\nEOF_59812759871", "conda activate testbed && python -m pip install -r $HOME/requirements.txt", "rm $HOME/requirements.txt"]}