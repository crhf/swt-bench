{"instance_id": "django__django-12713", "repo": "django/django", "version": "3.1", "environment_setup_commit": "0668164b4ac93a5be79f5b87fae83c657124d9ab", "patch_list": ["diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -249,17 +249,25 @@ def formfield_for_manytomany(self, db_field, request, **kwargs):\n             return None\n         db = kwargs.get('using')\n \n-        autocomplete_fields = self.get_autocomplete_fields(request)\n-        if db_field.name in autocomplete_fields:\n-            kwargs['widget'] = AutocompleteSelectMultiple(db_field.remote_field, self.admin_site, using=db)\n-        elif db_field.name in self.raw_id_fields:\n-            kwargs['widget'] = widgets.ManyToManyRawIdWidget(db_field.remote_field, self.admin_site, using=db)\n-        elif db_field.name in [*self.filter_vertical, *self.filter_horizontal]:\n-            kwargs['widget'] = widgets.FilteredSelectMultiple(\n-                db_field.verbose_name,\n-                db_field.name in self.filter_vertical\n-            )\n-\n+        if 'widget' not in kwargs:\n+            autocomplete_fields = self.get_autocomplete_fields(request)\n+            if db_field.name in autocomplete_fields:\n+                kwargs['widget'] = AutocompleteSelectMultiple(\n+                    db_field.remote_field,\n+                    self.admin_site,\n+                    using=db,\n+                )\n+            elif db_field.name in self.raw_id_fields:\n+                kwargs['widget'] = widgets.ManyToManyRawIdWidget(\n+                    db_field.remote_field,\n+                    self.admin_site,\n+                    using=db,\n+                )\n+            elif db_field.name in [*self.filter_vertical, *self.filter_horizontal]:\n+                kwargs['widget'] = widgets.FilteredSelectMultiple(\n+                    db_field.verbose_name,\n+                    db_field.name in self.filter_vertical\n+                )\n         if 'queryset' not in kwargs:\n             queryset = self.get_field_queryset(db, db_field, request)\n             if queryset is not None:\n", "diff --git a/dev/null b/tests/test_coverup_django__django-12713.py\nnew file mode 100644\nindex e69de29..fc9747d 100644\n--- /dev/null\n+++ b/tests/test_coverup_django__django-12713.py\n@@ -0,0 +1,38 @@\n+from django.test import SimpleTestCase\n+from django import forms\n+from django.contrib.admin import ModelAdmin, AdminSite\n+from django.db import models\n+\n+class CustomWidget(forms.Widget):\n+    pass\n+\n+class TestModel(models.Model):\n+    name = models.CharField(max_length=100)\n+    related = models.ManyToManyField('self')\n+\n+    class Meta:\n+        app_label = 'test_app'\n+\n+class TestModelAdmin(ModelAdmin):\n+    def formfield_for_manytomany(self, db_field, request, **kwargs):\n+        return super().formfield_for_manytomany(db_field, request, **kwargs)\n+\n+class MockAdminSite(AdminSite):\n+    _registry = {}\n+\n+class FormFieldForManyToManyTests(SimpleTestCase):\n+    def test_custom_widget_used(self):\n+        \"\"\"\n+        Test that formfield_for_manytomany uses a custom widget\n+        when one is provided in kwargs, ensuring the bug is fixed.\n+        \"\"\"\n+        admin_site = MockAdminSite()\n+        model_admin = TestModelAdmin(TestModel, admin_site)\n+        custom_widget = CustomWidget()\n+        form_field = model_admin.formfield_for_manytomany(\n+            TestModel._meta.get_field('related'),\n+            None,\n+            widget=custom_widget\n+        )\n+        # The test should pass if the custom widget is used, ensuring the bug is fixed\n+        self.assertEqual(form_field.widget, custom_widget)\n"], "arch": "x86_64", "base_commit": "5b884d45ac5b76234eca614d90c83b347294c332", "test_directives": ["test_coverup_django__django-12713"], "coverage_files": ["django/contrib/admin/options.py"], "env_name": "testbed", "run_id": "assertflip", "patch_id": "pred_post__AssertFlip", "timeout": 1800, "rm_image": false, "force_rebuild": false, "exec_mode": "unit_test", "reproduction_script_name": null, "compute_coverage": true, "install": {"python": "3.6", "packages": "requirements.txt", "install": "python -m pip install -e .", "eval_commands": ["sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen && locale-gen", "export LANG=en_US.UTF-8", "export LANGUAGE=en_US:en", "export LC_ALL=en_US.UTF-8"]}, "cache_level": "instance", "test_command": "python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/contrib/admin/options\\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-12713", "req_install_commands": ["conda create -n testbed python=3.6 -y", "cat <<'EOF_59812759871' > $HOME/requirements.txt\nasgiref >= 3.2\nargon2-cffi >= 16.1.0\nbcrypt\ndocutils\ngeoip2\njinja2 >= 2.9.2\nnumpy\nPillow >= 6.2.0\npylibmc; sys.platform != 'win32'\npython-memcached >= 1.59\npytz\npywatchman; sys.platform != 'win32'\nPyYAML\nselenium\nsqlparse >= 0.2.2\ntblib >= 1.5.0\n\nEOF_59812759871", "conda activate testbed && python -m pip install -r $HOME/requirements.txt", "rm $HOME/requirements.txt"]}