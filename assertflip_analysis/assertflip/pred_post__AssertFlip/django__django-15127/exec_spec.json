{"instance_id": "django__django-15127", "repo": "django/django", "version": "4.1", "environment_setup_commit": "647480166bfe7532e8c471fef0146e3a17e6c0c9", "patch_list": ["diff --git a/django/contrib/messages/apps.py b/django/contrib/messages/apps.py\n--- a/django/contrib/messages/apps.py\n+++ b/django/contrib/messages/apps.py\n@@ -1,7 +1,18 @@\n from django.apps import AppConfig\n+from django.contrib.messages.storage import base\n+from django.contrib.messages.utils import get_level_tags\n+from django.test.signals import setting_changed\n from django.utils.translation import gettext_lazy as _\n \n \n+def update_level_tags(setting, **kwargs):\n+    if setting == 'MESSAGE_TAGS':\n+        base.LEVEL_TAGS = get_level_tags()\n+\n+\n class MessagesConfig(AppConfig):\n     name = 'django.contrib.messages'\n     verbose_name = _(\"Messages\")\n+\n+    def ready(self):\n+        setting_changed.connect(update_level_tags)\n", "diff --git a/dev/null b/tests/test_coverup_django__django-15127.py\nnew file mode 100644\nindex e69de29..b776a80 100644\n--- /dev/null\n+++ b/tests/test_coverup_django__django-15127.py\n@@ -0,0 +1,14 @@\n+from django.test import SimpleTestCase, override_settings\n+from django.contrib.messages.storage.base import Message\n+\n+class MessageLevelTagOverrideTests(SimpleTestCase):\n+    @override_settings(MESSAGE_TAGS={50: 'custom_tag'})\n+    def test_level_tag_with_override_settings(self):\n+        \"\"\"\n+        Test that the level_tag property updates with @override_settings.\n+        \"\"\"\n+        # Create a Message instance with a level that should map to the overridden tag\n+        message = Message(level=50, message=\"Test message\")\n+\n+        # Assert that the level_tag is 'custom_tag', indicating the bug is fixed\n+        self.assertEqual(message.level_tag, 'custom_tag')\n"], "arch": "x86_64", "base_commit": "9a6e2df3a8f01ea761529bec48e5a8dc0ea9575b", "test_directives": ["test_coverup_django__django-15127"], "coverage_files": ["django/contrib/messages/apps.py"], "env_name": "testbed", "run_id": "assertflip", "patch_id": "pred_post__AssertFlip", "timeout": 1800, "rm_image": false, "force_rebuild": false, "exec_mode": "unit_test", "reproduction_script_name": null, "compute_coverage": true, "install": {"python": "3.9", "packages": "requirements.txt", "install": "python -m pip install -e ."}, "cache_level": "instance", "test_command": "python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/contrib/messages/apps\\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-15127", "req_install_commands": ["conda create -n testbed python=3.9 -y", "cat <<'EOF_59812759871' > $HOME/requirements.txt\naiosmtpd\nasgiref >= 3.4.1\nargon2-cffi >= 16.1.0\nbackports.zoneinfo; python_version < '3.9'\nbcrypt\nblack\ndocutils\ngeoip2\njinja2 >= 2.9.2\nnumpy\nPillow >= 6.2.0\npylibmc; sys.platform != 'win32'\npymemcache >= 3.4.0\npytz\npywatchman; sys.platform != 'win32'\nPyYAML\nredis >= 3.0.0\nselenium\nsqlparse >= 0.2.2\ntblib >= 1.5.0\ntzdata\ncolorama; sys.platform == 'win32'\n\nEOF_59812759871", "conda activate testbed && python -m pip install -r $HOME/requirements.txt", "rm $HOME/requirements.txt"]}