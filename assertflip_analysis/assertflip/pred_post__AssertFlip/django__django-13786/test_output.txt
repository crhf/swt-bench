+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD bb64b99b78a579cb2f6178011a4cf9366e634438
+ sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen
+ locale-gen
Generating locales (this might take a while)...
  en_US.UTF-8... done
Generation complete.
+ export LANG=en_US.UTF-8
+ LANG=en_US.UTF-8
+ export LANGUAGE=en_US:en
+ LANGUAGE=en_US:en
+ export LC_ALL=en_US.UTF-8
+ LC_ALL=en_US.UTF-8
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
nothing to commit, working tree clean
+ git show
commit bb64b99b78a579cb2f6178011a4cf9366e634438
Author: Nick Pope <nick.pope@flightdataservices.com>
Date:   Mon Dec 14 10:42:22 2020 +0000

    Fixed #29867 -- Added support for storing None value in caches.
    
    Many of the cache operations make use of the default argument to the
    .get() operation to determine whether the key was found in the cache.
    The default value of the default argument is None, so this results in
    these operations assuming that None is not stored in the cache when it
    actually is. Adding a sentinel object solves this issue.
    
    Unfortunately the unmaintained python-memcached library does not support
    a default argument to .get(), so the previous behavior is preserved for
    the deprecated MemcachedCache backend.

diff --git a/django/core/cache/backends/base.py b/django/core/cache/backends/base.py
index 22b8397cac..1e2c7c9509 100644
--- a/django/core/cache/backends/base.py
+++ b/django/core/cache/backends/base.py
@@ -52,6 +52,8 @@ def get_key_func(key_func):
 
 
 class BaseCache:
+    _missing_key = object()
+
     def __init__(self, params):
         timeout = params.get('timeout', params.get('TIMEOUT', 300))
         if timeout is not None:
@@ -151,8 +153,8 @@ class BaseCache:
         """
         d = {}
         for k in keys:
-            val = self.get(k, version=version)
-            if val is not None:
+            val = self.get(k, self._missing_key, version=version)
+            if val is not self._missing_key:
                 d[k] = val
         return d
 
@@ -165,31 +167,29 @@ class BaseCache:
 
         Return the value of the key stored or retrieved.
         """
-        val = self.get(key, version=version)
-        if val is None:
+        val = self.get(key, self._missing_key, version=version)
+        if val is self._missing_key:
             if callable(default):
                 default = default()
-            if default is not None:
-                self.add(key, default, timeout=timeout, version=version)
-                # Fetch the value again to avoid a race condition if another
-                # caller added a value between the first get() and the add()
-                # above.
-                return self.get(key, default, version=version)
+            self.add(key, default, timeout=timeout, version=version)
+            # Fetch the value again to avoid a race condition if another caller
+            # added a value between the first get() and the add() above.
+            return self.get(key, default, version=version)
         return val
 
     def has_key(self, key, version=None):
         """
         Return True if the key is in the cache and has not expired.
         """
-        return self.get(key, version=version) is not None
+        return self.get(key, self._missing_key, version=version) is not self._missing_key
 
     def incr(self, key, delta=1, version=None):
         """
         Add delta to value in the cache. If the key does not exist, raise a
         ValueError exception.
         """
-        value = self.get(key, version=version)
-        if value is None:
+        value = self.get(key, self._missing_key, version=version)
+        if value is self._missing_key:
             raise ValueError("Key '%s' not found" % key)
         new_value = value + delta
         self.set(key, new_value, version=version)
@@ -257,8 +257,8 @@ class BaseCache:
         if version is None:
             version = self.version
 
-        value = self.get(key, version=version)
-        if value is None:
+        value = self.get(key, self._missing_key, version=version)
+        if value is self._missing_key:
             raise ValueError("Key '%s' not found" % key)
 
         self.set(key, value, version=version + delta)
diff --git a/django/core/cache/backends/memcached.py b/django/core/cache/backends/memcached.py
index 9a717359b8..112dbdd1ff 100644
--- a/django/core/cache/backends/memcached.py
+++ b/django/core/cache/backends/memcached.py
@@ -165,6 +165,11 @@ class BaseMemcachedCache(BaseCache):
 
 class MemcachedCache(BaseMemcachedCache):
     "An implementation of a cache binding using python-memcached"
+
+    # python-memcached doesn't support default values in get().
+    # https://github.com/linsomniac/python-memcached/issues/159
+    _missing_key = None
+
     def __init__(self, server, params):
         warnings.warn(
             'MemcachedCache is deprecated in favor of PyMemcacheCache and '
diff --git a/docs/releases/3.2.txt b/docs/releases/3.2.txt
index 5b1969698c..8cd77ffad0 100644
--- a/docs/releases/3.2.txt
+++ b/docs/releases/3.2.txt
@@ -681,6 +681,14 @@ Miscellaneous
   ``UserChangeForm.clean_password()`` is no longer required to return the
   initial value.
 
+* The ``cache.get_many()``, ``get_or_set()``, ``has_key()``, ``incr()``,
+  ``decr()``, ``incr_version()``, and ``decr_version()`` cache operations now
+  correctly handle ``None`` stored in the cache, in the same way as any other
+  value, instead of behaving as though the key didn't exist.
+
+  Due to a ``python-memcached`` limitation, the previous behavior is kept for
+  the deprecated ``MemcachedCache`` backend.
+
 .. _deprecated-features-3.2:
 
 Features deprecated in 3.2
diff --git a/tests/cache/tests.py b/tests/cache/tests.py
index 2853ada233..9d79e6e758 100644
--- a/tests/cache/tests.py
+++ b/tests/cache/tests.py
@@ -278,6 +278,14 @@ class BaseCacheTests:
     # A common set of tests to apply to all cache backends
     factory = RequestFactory()
 
+    # RemovedInDjango41Warning: python-memcached doesn't support .get() with
+    # default.
+    supports_get_with_default = True
+
+    # Some clients raise custom exceptions when .incr() or .decr() are called
+    # with a non-integer value.
+    incr_decr_type_error = TypeError
+
     def tearDown(self):
         cache.clear()
 
@@ -320,6 +328,8 @@ class BaseCacheTests:
         self.assertEqual(cache.get_many(['a', 'c', 'd']), {'a': 'a', 'c': 'c', 'd': 'd'})
         self.assertEqual(cache.get_many(['a', 'b', 'e']), {'a': 'a', 'b': 'b'})
         self.assertEqual(cache.get_many(iter(['a', 'b', 'e'])), {'a': 'a', 'b': 'b'})
+        cache.set_many({'x': None, 'y': 1})
+        self.assertEqual(cache.get_many(['x', 'y']), {'x': None, 'y': 1})
 
     def test_delete(self):
         # Cache keys can be deleted
@@ -339,12 +349,22 @@ class BaseCacheTests:
         self.assertIs(cache.has_key("goodbye1"), False)
         cache.set("no_expiry", "here", None)
         self.assertIs(cache.has_key("no_expiry"), True)
+        cache.set('null', None)
+        self.assertIs(
+            cache.has_key('null'),
+            True if self.supports_get_with_default else False,
+        )
 
     def test_in(self):
         # The in operator can be used to inspect cache contents
         cache.set("hello2", "goodbye2")
         self.assertIn("hello2", cache)
         self.assertNotIn("goodbye2", cache)
+        cache.set('null', None)
+        if self.supports_get_with_default:
+            self.assertIn('null', cache)
+        else:
+            self.assertNotIn('null', cache)
 
     def test_incr(self):
         # Cache values can be incremented
@@ -356,6 +376,9 @@ class BaseCacheTests:
         self.assertEqual(cache.incr('answer', -10), 42)
         with self.assertRaises(ValueError):
             cache.incr('does_not_exist')
+        cache.set('null', None)
+        with self.assertRaises(self.incr_decr_type_error):
+            cache.incr('null')
 
     def test_decr(self):
         # Cache values can be decremented
@@ -367,6 +390,9 @@ class BaseCacheTests:
         self.assertEqual(cache.decr('answer', -10), 42)
         with self.assertRaises(ValueError):
             cache.decr('does_not_exist')
+        cache.set('null', None)
+        with self.assertRaises(self.incr_decr_type_error):
+            cache.decr('null')
 
     def test_close(self):
         self.assertTrue(hasattr(cache, 'close'))
@@ -914,6 +940,13 @@ class BaseCacheTests:
         with self.assertRaises(ValueError):
             cache.incr_version('does_not_exist')
 
+        cache.set('null', None)
+        if self.supports_get_with_default:
+            self.assertEqual(cache.incr_version('null'), 2)
+        else:
+            with self.assertRaises(self.incr_decr_type_error):
+                cache.incr_version('null')
+
     def test_decr_version(self):
         cache.set('answer', 42, version=2)
         self.assertIsNone(cache.get('answer'))
@@ -938,6 +971,13 @@ class BaseCacheTests:
         with self.assertRaises(ValueError):
             cache.decr_version('does_not_exist', version=2)
 
+        cache.set('null', None, version=2)
+        if self.supports_get_with_default:
+            self.assertEqual(cache.decr_version('null', version=2), 1)
+        else:
+            with self.assertRaises(self.incr_decr_type_error):
+                cache.decr_version('null', version=2)
+
     def test_custom_key_func(self):
         # Two caches with different key functions aren't visible to each other
         cache.set('answer1', 42)
@@ -995,6 +1035,11 @@ class BaseCacheTests:
         self.assertEqual(cache.get_or_set('projector', 42), 42)
         self.assertEqual(cache.get('projector'), 42)
         self.assertIsNone(cache.get_or_set('null', None))
+        if self.supports_get_with_default:
+            # Previous get_or_set() stores None in the cache.
+            self.assertIsNone(cache.get('null', 'default'))
+        else:
+            self.assertEqual(cache.get('null', 'default'), 'default')
 
     def test_get_or_set_callable(self):
         def my_callable():
@@ -1003,10 +1048,12 @@ class BaseCacheTests:
         self.assertEqual(cache.get_or_set('mykey', my_callable), 'value')
         self.assertEqual(cache.get_or_set('mykey', my_callable()), 'value')
 
-    def test_get_or_set_callable_returning_none(self):
-        self.assertIsNone(cache.get_or_set('mykey', lambda: None))
-        # Previous get_or_set() doesn't store None in the cache.
-        self.assertEqual(cache.get('mykey', 'default'), 'default')
+        self.assertIsNone(cache.get_or_set('null', lambda: None))
+        if self.supports_get_with_default:
+            # Previous get_or_set() stores None in the cache.
+            self.assertIsNone(cache.get('null', 'default'))
+        else:
+            self.assertEqual(cache.get('null', 'default'), 'default')
 
     def test_get_or_set_version(self):
         msg = "get_or_set() missing 1 required positional argument: 'default'"
@@ -1399,6 +1446,8 @@ MemcachedCache_params = configured_caches.get('django.core.cache.backends.memcac
 ))
 class MemcachedCacheTests(BaseMemcachedTests, TestCase):
     base_params = MemcachedCache_params
+    supports_get_with_default = False
+    incr_decr_type_error = ValueError
 
     def test_memcached_uses_highest_pickle_version(self):
         # Regression test for #19810
@@ -1459,6 +1508,10 @@ class PyLibMCCacheTests(BaseMemcachedTests, TestCase):
     # libmemcached manages its own connections.
     should_disconnect_on_close = False
 
+    @property
+    def incr_decr_type_error(self):
+        return cache._lib.ClientError
+
     @override_settings(CACHES=caches_setting_for_tests(
         base=PyLibMCCache_params,
         exclude=memcached_excluded_caches,
@@ -1497,6 +1550,10 @@ class PyLibMCCacheTests(BaseMemcachedTests, TestCase):
 class PyMemcacheCacheTests(BaseMemcachedTests, TestCase):
     base_params = PyMemcacheCache_params
 
+    @property
+    def incr_decr_type_error(self):
+        return cache._lib.exceptions.MemcacheClientError
+
     def test_pymemcache_highest_pickle_version(self):
         self.assertEqual(
             cache._cache.default_kwargs['serde']._serialize_func.keywords['pickle_version'],
+ git diff bb64b99b78a579cb2f6178011a4cf9366e634438
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
Requirement already satisfied: asgiref>=3.2.10 in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.2) (3.4.1)
Requirement already satisfied: pytz in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.2) (2025.2)
Requirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.2) (0.4.4)
Requirement already satisfied: typing-extensions in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from asgiref>=3.2.10->Django==3.2) (4.1.1)
Installing collected packages: Django
  Attempting uninstall: Django
    Found existing installation: Django 3.2
    Uninstalling Django-3.2:
      Successfully uninstalled Django-3.2
  Running setup.py develop for Django
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv
Successfully installed Django-3.2
+ git apply -v -
Checking patch django/db/migrations/operations/models.py...
Applied patch django/db/migrations/operations/models.py cleanly.
+ git apply -v -
Checking patch tests/test_coverup_django__django-13786.py...
Applied patch tests/test_coverup_django__django-13786.py cleanly.
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/db/migrations/operations/models\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-13786
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(django/db/migrations/operations/models\\.py)']
Testing against Django installed in '/testbed/django'
0.48 /testbed/django/db/migrations/operations/models.py(1): from django.db import models
0.48 /testbed/django/db/migrations/operations/models.py(2): from django.db.migrations.operations.base import Operation
0.48 /testbed/django/db/migrations/operations/models.py(3): from django.db.migrations.state import ModelState
0.48 /testbed/django/db/migrations/operations/models.py(4): from django.db.models.options import normalize_together
0.48 /testbed/django/db/migrations/operations/models.py(5): from django.utils.functional import cached_property
0.48 /testbed/django/db/migrations/operations/models.py(7): from .fields import (
0.48 /testbed/django/db/migrations/operations/models.py(10): from .utils import field_references, get_references, resolve_relation
0.48 /testbed/django/db/migrations/operations/models.py(13): def _check_for_duplicates(arg_name, objs):
0.48 /testbed/django/db/migrations/operations/models.py(23): class ModelOperation(Operation):
0.48 /testbed/django/db/migrations/operations/models.py(23): class ModelOperation(Operation):
0.48 /testbed/django/db/migrations/operations/models.py(24):     def __init__(self, name):
0.48 /testbed/django/db/migrations/operations/models.py(27):     @cached_property
0.48 /testbed/django/db/migrations/operations/models.py(31):     def references_model(self, name, app_label):
0.48 /testbed/django/db/migrations/operations/models.py(34):     def reduce(self, operation, app_label):
0.48 /testbed/django/db/migrations/operations/models.py(41): class CreateModel(ModelOperation):
0.48 /testbed/django/db/migrations/operations/models.py(41): class CreateModel(ModelOperation):
0.48 /testbed/django/db/migrations/operations/models.py(42):     """Create a model's table."""
0.48 /testbed/django/db/migrations/operations/models.py(44):     serialization_expand_args = ['fields', 'options', 'managers']
0.48 /testbed/django/db/migrations/operations/models.py(46):     def __init__(self, name, fields, options=None, bases=None, managers=None):
0.48 /testbed/django/db/migrations/operations/models.py(62):     def deconstruct(self):
0.48 /testbed/django/db/migrations/operations/models.py(79):     def state_forwards(self, app_label, state):
0.48 /testbed/django/db/migrations/operations/models.py(89):     def database_forwards(self, app_label, schema_editor, from_state, to_state):
0.48 /testbed/django/db/migrations/operations/models.py(94):     def database_backwards(self, app_label, schema_editor, from_state, to_state):
0.48 /testbed/django/db/migrations/operations/models.py(99):     def describe(self):
0.48 /testbed/django/db/migrations/operations/models.py(102):     @property
0.48 /testbed/django/db/migrations/operations/models.py(106):     def references_model(self, name, app_label):
0.48 /testbed/django/db/migrations/operations/models.py(124):     def reduce(self, operation, app_label):
0.48 /testbed/django/db/migrations/operations/models.py(250): class DeleteModel(ModelOperation):
0.48 /testbed/django/db/migrations/operations/models.py(250): class DeleteModel(ModelOperation):
0.48 /testbed/django/db/migrations/operations/models.py(251):     """Drop a model's table."""
0.48 /testbed/django/db/migrations/operations/models.py(253):     def deconstruct(self):
0.48 /testbed/django/db/migrations/operations/models.py(263):     def state_forwards(self, app_label, state):
0.48 /testbed/django/db/migrations/operations/models.py(266):     def database_forwards(self, app_label, schema_editor, from_state, to_state):
0.48 /testbed/django/db/migrations/operations/models.py(271):     def database_backwards(self, app_label, schema_editor, from_state, to_state):
0.48 /testbed/django/db/migrations/operations/models.py(276):     def references_model(self, name, app_label):
0.48 /testbed/django/db/migrations/operations/models.py(281):     def describe(self):
0.48 /testbed/django/db/migrations/operations/models.py(284):     @property
0.48 /testbed/django/db/migrations/operations/models.py(289): class RenameModel(ModelOperation):
0.48 /testbed/django/db/migrations/operations/models.py(289): class RenameModel(ModelOperation):
0.48 /testbed/django/db/migrations/operations/models.py(290):     """Rename a model."""
0.48 /testbed/django/db/migrations/operations/models.py(292):     def __init__(self, old_name, new_name):
0.48 /testbed/django/db/migrations/operations/models.py(297):     @cached_property
0.48 /testbed/django/db/migrations/operations/models.py(301):     @cached_property
0.48 /testbed/django/db/migrations/operations/models.py(305):     def deconstruct(self):
0.48 /testbed/django/db/migrations/operations/models.py(316):     def state_forwards(self, app_label, state):
0.48 /testbed/django/db/migrations/operations/models.py(343):     def database_forwards(self, app_label, schema_editor, from_state, to_state):
0.48 /testbed/django/db/migrations/operations/models.py(394):     def database_backwards(self, app_label, schema_editor, from_state, to_state):
0.48 /testbed/django/db/migrations/operations/models.py(403):     def references_model(self, name, app_label):
0.48 /testbed/django/db/migrations/operations/models.py(409):     def describe(self):
0.48 /testbed/django/db/migrations/operations/models.py(412):     @property
0.48 /testbed/django/db/migrations/operations/models.py(416):     def reduce(self, operation, app_label):
0.48 /testbed/django/db/migrations/operations/models.py(433): class ModelOptionOperation(ModelOperation):
0.48 /testbed/django/db/migrations/operations/models.py(433): class ModelOptionOperation(ModelOperation):
0.48 /testbed/django/db/migrations/operations/models.py(434):     def reduce(self, operation, app_label):
0.48 /testbed/django/db/migrations/operations/models.py(440): class AlterModelTable(ModelOptionOperation):
0.48 /testbed/django/db/migrations/operations/models.py(440): class AlterModelTable(ModelOptionOperation):
0.48 /testbed/django/db/migrations/operations/models.py(441):     """Rename a model's table."""
0.48 /testbed/django/db/migrations/operations/models.py(443):     def __init__(self, name, table):
0.48 /testbed/django/db/migrations/operations/models.py(447):     def deconstruct(self):
0.48 /testbed/django/db/migrations/operations/models.py(458):     def state_forwards(self, app_label, state):
0.48 /testbed/django/db/migrations/operations/models.py(462):     def database_forwards(self, app_label, schema_editor, from_state, to_state):
0.48 /testbed/django/db/migrations/operations/models.py(480):     def database_backwards(self, app_label, schema_editor, from_state, to_state):
0.48 /testbed/django/db/migrations/operations/models.py(483):     def describe(self):
0.48 /testbed/django/db/migrations/operations/models.py(489):     @property
0.48 /testbed/django/db/migrations/operations/models.py(494): class AlterTogetherOptionOperation(ModelOptionOperation):
0.48 /testbed/django/db/migrations/operations/models.py(494): class AlterTogetherOptionOperation(ModelOptionOperation):
0.48 /testbed/django/db/migrations/operations/models.py(495):     option_name = None
0.48 /testbed/django/db/migrations/operations/models.py(497):     def __init__(self, name, option_value):
0.48 /testbed/django/db/migrations/operations/models.py(503):     @cached_property
0.48 /testbed/django/db/migrations/operations/models.py(507):     def deconstruct(self):
0.48 /testbed/django/db/migrations/operations/models.py(518):     def state_forwards(self, app_label, state):
0.48 /testbed/django/db/migrations/operations/models.py(523):     def database_forwards(self, app_label, schema_editor, from_state, to_state):
0.48 /testbed/django/db/migrations/operations/models.py(534):     def database_backwards(self, app_label, schema_editor, from_state, to_state):
0.48 /testbed/django/db/migrations/operations/models.py(537):     def references_field(self, model_name, name, app_label):
0.48 /testbed/django/db/migrations/operations/models.py(546):     def describe(self):
0.48 /testbed/django/db/migrations/operations/models.py(549):     @property
0.48 /testbed/django/db/migrations/operations/models.py(554): class AlterUniqueTogether(AlterTogetherOptionOperation):
0.48 /testbed/django/db/migrations/operations/models.py(554): class AlterUniqueTogether(AlterTogetherOptionOperation):
0.48 /testbed/django/db/migrations/operations/models.py(558):     """
0.48 /testbed/django/db/migrations/operations/models.py(559):     option_name = 'unique_together'
0.48 /testbed/django/db/migrations/operations/models.py(561):     def __init__(self, name, unique_together):
0.48 /testbed/django/db/migrations/operations/models.py(565): class AlterIndexTogether(AlterTogetherOptionOperation):
0.48 /testbed/django/db/migrations/operations/models.py(565): class AlterIndexTogether(AlterTogetherOptionOperation):
0.48 /testbed/django/db/migrations/operations/models.py(569):     """
0.48 /testbed/django/db/migrations/operations/models.py(570):     option_name = "index_together"
0.48 /testbed/django/db/migrations/operations/models.py(572):     def __init__(self, name, index_together):
0.48 /testbed/django/db/migrations/operations/models.py(576): class AlterOrderWithRespectTo(ModelOptionOperation):
0.48 /testbed/django/db/migrations/operations/models.py(576): class AlterOrderWithRespectTo(ModelOptionOperation):
0.48 /testbed/django/db/migrations/operations/models.py(577):     """Represent a change with the order_with_respect_to option."""
0.48 /testbed/django/db/migrations/operations/models.py(579):     option_name = 'order_with_respect_to'
0.48 /testbed/django/db/migrations/operations/models.py(581):     def __init__(self, name, order_with_respect_to):
0.48 /testbed/django/db/migrations/operations/models.py(585):     def deconstruct(self):
0.48 /testbed/django/db/migrations/operations/models.py(596):     def state_forwards(self, app_label, state):
0.48 /testbed/django/db/migrations/operations/models.py(601):     def database_forwards(self, app_label, schema_editor, from_state, to_state):
0.48 /testbed/django/db/migrations/operations/models.py(619):     def database_backwards(self, app_label, schema_editor, from_state, to_state):
0.48 /testbed/django/db/migrations/operations/models.py(622):     def references_field(self, model_name, name, app_label):
0.48 /testbed/django/db/migrations/operations/models.py(631):     def describe(self):
0.48 /testbed/django/db/migrations/operations/models.py(634):     @property
0.49 /testbed/django/db/migrations/operations/models.py(639): class AlterModelOptions(ModelOptionOperation):
0.49 /testbed/django/db/migrations/operations/models.py(639): class AlterModelOptions(ModelOptionOperation):
0.49 /testbed/django/db/migrations/operations/models.py(644):     """
0.49 /testbed/django/db/migrations/operations/models.py(648):         "base_manager_name",
0.49 /testbed/django/db/migrations/operations/models.py(649):         "default_manager_name",
0.49 /testbed/django/db/migrations/operations/models.py(650):         "default_related_name",
0.49 /testbed/django/db/migrations/operations/models.py(651):         "get_latest_by",
0.49 /testbed/django/db/migrations/operations/models.py(652):         "managed",
0.49 /testbed/django/db/migrations/operations/models.py(653):         "ordering",
0.49 /testbed/django/db/migrations/operations/models.py(654):         "permissions",
0.49 /testbed/django/db/migrations/operations/models.py(655):         "default_permissions",
0.49 /testbed/django/db/migrations/operations/models.py(656):         "select_on_save",
0.49 /testbed/django/db/migrations/operations/models.py(657):         "verbose_name",
0.49 /testbed/django/db/migrations/operations/models.py(658):         "verbose_name_plural",
0.49 /testbed/django/db/migrations/operations/models.py(661):     def __init__(self, name, options):
0.49 /testbed/django/db/migrations/operations/models.py(665):     def deconstruct(self):
0.49 /testbed/django/db/migrations/operations/models.py(676):     def state_forwards(self, app_label, state):
0.49 /testbed/django/db/migrations/operations/models.py(684):     def database_forwards(self, app_label, schema_editor, from_state, to_state):
0.49 /testbed/django/db/migrations/operations/models.py(687):     def database_backwards(self, app_label, schema_editor, from_state, to_state):
0.49 /testbed/django/db/migrations/operations/models.py(690):     def describe(self):
0.49 /testbed/django/db/migrations/operations/models.py(693):     @property
0.49 /testbed/django/db/migrations/operations/models.py(698): class AlterModelManagers(ModelOptionOperation):
0.49 /testbed/django/db/migrations/operations/models.py(698): class AlterModelManagers(ModelOptionOperation):
0.49 /testbed/django/db/migrations/operations/models.py(699):     """Alter the model's managers."""
0.49 /testbed/django/db/migrations/operations/models.py(701):     serialization_expand_args = ['managers']
0.49 /testbed/django/db/migrations/operations/models.py(703):     def __init__(self, name, managers):
0.49 /testbed/django/db/migrations/operations/models.py(707):     def deconstruct(self):
0.49 /testbed/django/db/migrations/operations/models.py(714):     def state_forwards(self, app_label, state):
0.49 /testbed/django/db/migrations/operations/models.py(719):     def database_forwards(self, app_label, schema_editor, from_state, to_state):
0.49 /testbed/django/db/migrations/operations/models.py(722):     def database_backwards(self, app_label, schema_editor, from_state, to_state):
0.49 /testbed/django/db/migrations/operations/models.py(725):     def describe(self):
0.49 /testbed/django/db/migrations/operations/models.py(728):     @property
0.49 /testbed/django/db/migrations/operations/models.py(733): class IndexOperation(Operation):
0.49 /testbed/django/db/migrations/operations/models.py(733): class IndexOperation(Operation):
0.49 /testbed/django/db/migrations/operations/models.py(734):     option_name = 'indexes'
0.49 /testbed/django/db/migrations/operations/models.py(736):     @cached_property
0.49 /testbed/django/db/migrations/operations/models.py(741): class AddIndex(IndexOperation):
0.49 /testbed/django/db/migrations/operations/models.py(741): class AddIndex(IndexOperation):
0.49 /testbed/django/db/migrations/operations/models.py(742):     """Add an index on a model."""
0.49 /testbed/django/db/migrations/operations/models.py(744):     def __init__(self, model_name, index):
0.49 /testbed/django/db/migrations/operations/models.py(753):     def state_forwards(self, app_label, state):
0.49 /testbed/django/db/migrations/operations/models.py(758):     def database_forwards(self, app_label, schema_editor, from_state, to_state):
0.49 /testbed/django/db/migrations/operations/models.py(763):     def database_backwards(self, app_label, schema_editor, from_state, to_state):
0.49 /testbed/django/db/migrations/operations/models.py(768):     def deconstruct(self):
0.49 /testbed/django/db/migrations/operations/models.py(779):     def describe(self):
0.49 /testbed/django/db/migrations/operations/models.py(786):     @property
0.49 /testbed/django/db/migrations/operations/models.py(791): class RemoveIndex(IndexOperation):
0.49 /testbed/django/db/migrations/operations/models.py(791): class RemoveIndex(IndexOperation):
0.49 /testbed/django/db/migrations/operations/models.py(792):     """Remove an index from a model."""
0.49 /testbed/django/db/migrations/operations/models.py(794):     def __init__(self, model_name, name):
0.49 /testbed/django/db/migrations/operations/models.py(798):     def state_forwards(self, app_label, state):
0.49 /testbed/django/db/migrations/operations/models.py(804):     def database_forwards(self, app_label, schema_editor, from_state, to_state):
0.49 /testbed/django/db/migrations/operations/models.py(811):     def database_backwards(self, app_label, schema_editor, from_state, to_state):
0.49 /testbed/django/db/migrations/operations/models.py(818):     def deconstruct(self):
0.49 /testbed/django/db/migrations/operations/models.py(829):     def describe(self):
0.49 /testbed/django/db/migrations/operations/models.py(832):     @property
0.49 /testbed/django/db/migrations/operations/models.py(837): class AddConstraint(IndexOperation):
0.49 /testbed/django/db/migrations/operations/models.py(837): class AddConstraint(IndexOperation):
0.49 /testbed/django/db/migrations/operations/models.py(838):     option_name = 'constraints'
0.49 /testbed/django/db/migrations/operations/models.py(840):     def __init__(self, model_name, constraint):
0.49 /testbed/django/db/migrations/operations/models.py(844):     def state_forwards(self, app_label, state):
0.49 /testbed/django/db/migrations/operations/models.py(849):     def database_forwards(self, app_label, schema_editor, from_state, to_state):
0.49 /testbed/django/db/migrations/operations/models.py(854):     def database_backwards(self, app_label, schema_editor, from_state, to_state):
0.49 /testbed/django/db/migrations/operations/models.py(859):     def deconstruct(self):
0.49 /testbed/django/db/migrations/operations/models.py(865):     def describe(self):
0.49 /testbed/django/db/migrations/operations/models.py(868):     @property
0.49 /testbed/django/db/migrations/operations/models.py(873): class RemoveConstraint(IndexOperation):
0.49 /testbed/django/db/migrations/operations/models.py(873): class RemoveConstraint(IndexOperation):
0.49 /testbed/django/db/migrations/operations/models.py(874):     option_name = 'constraints'
0.49 /testbed/django/db/migrations/operations/models.py(876):     def __init__(self, model_name, name):
0.49 /testbed/django/db/migrations/operations/models.py(880):     def state_forwards(self, app_label, state):
0.49 /testbed/django/db/migrations/operations/models.py(886):     def database_forwards(self, app_label, schema_editor, from_state, to_state):
0.49 /testbed/django/db/migrations/operations/models.py(893):     def database_backwards(self, app_label, schema_editor, from_state, to_state):
0.49 /testbed/django/db/migrations/operations/models.py(900):     def deconstruct(self):
0.49 /testbed/django/db/migrations/operations/models.py(906):     def describe(self):
0.49 /testbed/django/db/migrations/operations/models.py(909):     @property
Skipping setup of unused database(s): default, other.
System check identified no issues (0 silenced).
test_reduce_with_empty_alter_model_options (test_coverup_django__django-13786.CreateModelReduceTest) ... 0.64 /testbed/django/db/migrations/operations/models.py(47):         self.fields = fields
0.64 /testbed/django/db/migrations/operations/models.py(48):         self.options = options or {}
0.64 /testbed/django/db/migrations/operations/models.py(49):         self.bases = bases or (models.Model,)
0.64 /testbed/django/db/migrations/operations/models.py(50):         self.managers = managers or []
0.64 /testbed/django/db/migrations/operations/models.py(51):         super().__init__(name)
0.64 /testbed/django/db/migrations/operations/models.py(25):         self.name = name
0.64 /testbed/django/db/migrations/operations/models.py(54):         _check_for_duplicates('fields', (name for name, _ in self.fields))
0.64 /testbed/django/db/migrations/operations/models.py(14):     used_vals = set()
0.64 /testbed/django/db/migrations/operations/models.py(15):     for val in objs:
0.64 /testbed/django/db/migrations/operations/models.py(54):         _check_for_duplicates('fields', (name for name, _ in self.fields))
0.64 /testbed/django/db/migrations/operations/models.py(55):         _check_for_duplicates('bases', (
0.64 /testbed/django/db/migrations/operations/models.py(56):             base._meta.label_lower if hasattr(base, '_meta') else
0.64 /testbed/django/db/migrations/operations/models.py(58):             for base in self.bases
0.64 /testbed/django/db/migrations/operations/models.py(14):     used_vals = set()
0.64 /testbed/django/db/migrations/operations/models.py(15):     for val in objs:
0.64 /testbed/django/db/migrations/operations/models.py(56):             base._meta.label_lower if hasattr(base, '_meta') else
0.64 /testbed/django/db/migrations/operations/models.py(58):             for base in self.bases
0.64 /testbed/django/db/migrations/operations/models.py(16):         if val in used_vals:
0.64 /testbed/django/db/migrations/operations/models.py(20):         used_vals.add(val)
0.64 /testbed/django/db/migrations/operations/models.py(15):     for val in objs:
0.64 /testbed/django/db/migrations/operations/models.py(56):             base._meta.label_lower if hasattr(base, '_meta') else
0.64 /testbed/django/db/migrations/operations/models.py(60):         _check_for_duplicates('managers', (name for name, _ in self.managers))
0.64 /testbed/django/db/migrations/operations/models.py(14):     used_vals = set()
0.64 /testbed/django/db/migrations/operations/models.py(15):     for val in objs:
0.64 /testbed/django/db/migrations/operations/models.py(60):         _check_for_duplicates('managers', (name for name, _ in self.managers))
0.64 /testbed/django/db/migrations/operations/models.py(662):         self.options = options
0.64 /testbed/django/db/migrations/operations/models.py(663):         super().__init__(name)
0.64 /testbed/django/db/migrations/operations/models.py(25):         self.name = name
0.64 /testbed/django/db/migrations/operations/models.py(125):         if (isinstance(operation, DeleteModel) and
0.64 /testbed/django/db/migrations/operations/models.py(129):         elif isinstance(operation, RenameModel) and self.name_lower == operation.old_name_lower:
0.64 /testbed/django/db/migrations/operations/models.py(139):         elif isinstance(operation, AlterModelOptions) and self.name_lower == operation.name_lower:
0.64 /testbed/django/db/migrations/operations/models.py(29):         return self.name.lower()
0.64 /testbed/django/db/migrations/operations/models.py(29):         return self.name.lower()
0.64 /testbed/django/db/migrations/operations/models.py(140):             options = {**self.options, **operation.options}
0.64 /testbed/django/db/migrations/operations/models.py(141):             for key in operation.ALTER_OPTION_KEYS:
0.64 /testbed/django/db/migrations/operations/models.py(142):                 if key not in operation.options:
0.64 /testbed/django/db/migrations/operations/models.py(143):                     options.pop(key, None)
0.64 /testbed/django/db/migrations/operations/models.py(141):             for key in operation.ALTER_OPTION_KEYS:
0.64 /testbed/django/db/migrations/operations/models.py(142):                 if key not in operation.options:
0.64 /testbed/django/db/migrations/operations/models.py(143):                     options.pop(key, None)
0.64 /testbed/django/db/migrations/operations/models.py(141):             for key in operation.ALTER_OPTION_KEYS:
0.64 /testbed/django/db/migrations/operations/models.py(142):                 if key not in operation.options:
0.64 /testbed/django/db/migrations/operations/models.py(143):                     options.pop(key, None)
0.64 /testbed/django/db/migrations/operations/models.py(141):             for key in operation.ALTER_OPTION_KEYS:
0.64 /testbed/django/db/migrations/operations/models.py(142):                 if key not in operation.options:
0.64 /testbed/django/db/migrations/operations/models.py(143):                     options.pop(key, None)
0.64 /testbed/django/db/migrations/operations/models.py(141):             for key in operation.ALTER_OPTION_KEYS:
0.64 /testbed/django/db/migrations/operations/models.py(142):                 if key not in operation.options:
0.64 /testbed/django/db/migrations/operations/models.py(143):                     options.pop(key, None)
0.64 /testbed/django/db/migrations/operations/models.py(141):             for key in operation.ALTER_OPTION_KEYS:
0.64 /testbed/django/db/migrations/operations/models.py(142):                 if key not in operation.options:
0.64 /testbed/django/db/migrations/operations/models.py(143):                     options.pop(key, None)
0.64 /testbed/django/db/migrations/operations/models.py(141):             for key in operation.ALTER_OPTION_KEYS:
0.64 /testbed/django/db/migrations/operations/models.py(142):                 if key not in operation.options:
0.64 /testbed/django/db/migrations/operations/models.py(143):                     options.pop(key, None)
0.64 /testbed/django/db/migrations/operations/models.py(141):             for key in operation.ALTER_OPTION_KEYS:
0.64 /testbed/django/db/migrations/operations/models.py(142):                 if key not in operation.options:
0.64 /testbed/django/db/migrations/operations/models.py(143):                     options.pop(key, None)
0.64 /testbed/django/db/migrations/operations/models.py(141):             for key in operation.ALTER_OPTION_KEYS:
0.64 /testbed/django/db/migrations/operations/models.py(142):                 if key not in operation.options:
0.64 /testbed/django/db/migrations/operations/models.py(143):                     options.pop(key, None)
0.64 /testbed/django/db/migrations/operations/models.py(141):             for key in operation.ALTER_OPTION_KEYS:
0.64 /testbed/django/db/migrations/operations/models.py(142):                 if key not in operation.options:
0.64 /testbed/django/db/migrations/operations/models.py(143):                     options.pop(key, None)
0.64 /testbed/django/db/migrations/operations/models.py(141):             for key in operation.ALTER_OPTION_KEYS:
0.64 /testbed/django/db/migrations/operations/models.py(142):                 if key not in operation.options:
0.64 /testbed/django/db/migrations/operations/models.py(143):                     options.pop(key, None)
0.64 /testbed/django/db/migrations/operations/models.py(141):             for key in operation.ALTER_OPTION_KEYS:
0.64 /testbed/django/db/migrations/operations/models.py(145):                 CreateModel(
0.64 /testbed/django/db/migrations/operations/models.py(146):                     self.name,
0.64 /testbed/django/db/migrations/operations/models.py(147):                     fields=self.fields,
0.64 /testbed/django/db/migrations/operations/models.py(148):                     options=options,
0.64 /testbed/django/db/migrations/operations/models.py(149):                     bases=self.bases,
0.64 /testbed/django/db/migrations/operations/models.py(150):                     managers=self.managers,
0.64 /testbed/django/db/migrations/operations/models.py(47):         self.fields = fields
0.64 /testbed/django/db/migrations/operations/models.py(48):         self.options = options or {}
0.64 /testbed/django/db/migrations/operations/models.py(49):         self.bases = bases or (models.Model,)
0.64 /testbed/django/db/migrations/operations/models.py(50):         self.managers = managers or []
0.64 /testbed/django/db/migrations/operations/models.py(51):         super().__init__(name)
0.64 /testbed/django/db/migrations/operations/models.py(25):         self.name = name
0.64 /testbed/django/db/migrations/operations/models.py(54):         _check_for_duplicates('fields', (name for name, _ in self.fields))
0.64 /testbed/django/db/migrations/operations/models.py(14):     used_vals = set()
0.64 /testbed/django/db/migrations/operations/models.py(15):     for val in objs:
0.64 /testbed/django/db/migrations/operations/models.py(54):         _check_for_duplicates('fields', (name for name, _ in self.fields))
0.64 /testbed/django/db/migrations/operations/models.py(55):         _check_for_duplicates('bases', (
0.64 /testbed/django/db/migrations/operations/models.py(56):             base._meta.label_lower if hasattr(base, '_meta') else
0.64 /testbed/django/db/migrations/operations/models.py(58):             for base in self.bases
0.64 /testbed/django/db/migrations/operations/models.py(14):     used_vals = set()
0.64 /testbed/django/db/migrations/operations/models.py(15):     for val in objs:
0.64 /testbed/django/db/migrations/operations/models.py(56):             base._meta.label_lower if hasattr(base, '_meta') else
0.64 /testbed/django/db/migrations/operations/models.py(58):             for base in self.bases
0.64 /testbed/django/db/migrations/operations/models.py(16):         if val in used_vals:
0.64 /testbed/django/db/migrations/operations/models.py(20):         used_vals.add(val)
0.64 /testbed/django/db/migrations/operations/models.py(15):     for val in objs:
0.64 /testbed/django/db/migrations/operations/models.py(56):             base._meta.label_lower if hasattr(base, '_meta') else
0.64 /testbed/django/db/migrations/operations/models.py(60):         _check_for_duplicates('managers', (name for name, _ in self.managers))
0.64 /testbed/django/db/migrations/operations/models.py(14):     used_vals = set()
0.64 /testbed/django/db/migrations/operations/models.py(15):     for val in objs:
0.64 /testbed/django/db/migrations/operations/models.py(60):         _check_for_duplicates('managers', (name for name, _ in self.managers))
ok

----------------------------------------------------------------------
Ran 1 test in 0.001s

OK
+ cat coverage.cover
{"/testbed/django/db/migrations/operations/models.py": {"1": 1, "2": 1, "3": 1, "4": 1, "5": 1, "7": 1, "10": 1, "13": 1, "23": 2, "41": 2, "250": 2, "289": 2, "433": 2, "440": 2, "494": 2, "554": 2, "565": 2, "576": 2, "639": 2, "698": 2, "733": 2, "741": 2, "791": 2, "837": 2, "873": 2, "14": 6, "15": 8, "16": 2, "17": 0, "18": 0, "20": 2, "24": 1, "27": 1, "31": 1, "34": 1, "25": 3, "29": 2, "32": 0, "36": 0, "37": 0, "44": 1, "46": 1, "62": 1, "79": 1, "89": 1, "94": 1, "99": 1, "102": 1, "106": 1, "124": 1, "47": 2, "48": 2, "49": 2, "50": 2, "51": 2, "54": 4, "55": 2, "56": 6, "58": 4, "60": 4, "64": 0, "65": 0, "67": 0, "68": 0, "69": 0, "70": 0, "71": 0, "72": 0, "74": 0, "75": 0, "76": 0, "80": 0, "81": 0, "82": 0, "83": 0, "84": 0, "85": 0, "86": 0, "90": 0, "91": 0, "92": 0, "95": 0, "96": 0, "97": 0, "100": 0, "104": 0, "107": 0, "108": 0, "109": 0, "112": 0, "113": 0, "114": 0, "115": 0, "116": 0, "119": 0, "120": 0, "121": 0, "122": 0, "125": 1, "126": 0, "127": 0, "128": 0, "129": 1, "131": 0, "132": 0, "133": 0, "134": 0, "135": 0, "136": 0, "139": 1, "140": 1, "141": 12, "142": 11, "143": 11, "145": 1, "146": 1, "147": 1, "148": 1, "149": 1, "150": 1, "153": 0, "155": 0, "156": 0, "157": 0, "158": 0, "159": 0, "160": 0, "163": 0, "165": 0, "166": 0, "167": 0, "168": 0, "169": 0, "170": 0, "173": 0, "174": 0, "176": 0, "177": 0, "178": 0, "179": 0, "180": 0, "181": 0, "184": 0, "186": 0, "187": 0, "189": 0, "190": 0, "192": 0, "193": 0, "194": 0, "197": 0, "198": 0, "199": 0, "200": 0, "201": 0, "202": 0, "203": 0, "205": 0, "206": 0, "207": 0, "208": 0, "209": 0, "211": 0, "212": 0, "214": 0, "215": 0, "218": 0, "219": 0, "220": 0, "223": 0, "224": 0, "225": 0, "226": 0, "227": 0, "228": 0, "230": 0, "232": 0, "233": 0, "234": 0, "236": 0, "237": 0, "239": 0, "240": 0, "242": 0, "243": 0, "244": 0, "247": 0, "216": 0, "229": 0, "253": 1, "263": 1, "266": 1, "271": 1, "276": 1, "281": 1, "284": 1, "255": 0, "258": 0, "259": 0, "260": 0, "264": 0, "267": 0, "268": 0, "269": 0, "272": 0, "273": 0, "274": 0, "279": 0, "282": 0, "286": 0, "292": 1, "297": 1, "301": 1, "305": 1, "316": 1, "343": 1, "394": 1, "403": 1, "409": 1, "412": 1, "416": 1, "293": 0, "294": 0, "295": 0, "299": 0, "303": 0, "307": 0, "308": 0, "311": 0, "312": 0, "313": 0, "318": 0, "319": 0, "320": 0, "322": 0, "323": 0, "324": 0, "325": 0, "326": 0, "327": 0, "328": 0, "329": 0, "330": 0, "331": 0, "332": 0, "333": 0, "334": 0, "335": 0, "336": 0, "338": 0, "340": 0, "341": 0, "344": 0, "345": 0, "346": 0, "348": 0, "349": 0, "350": 0, "351": 0, "354": 0, "355": 0, "356": 0, "357": 0, "359": 0, "361": 0, "362": 0, "364": 0, "365": 0, "366": 0, "367": 0, "368": 0, "369": 0, "370": 0, "373": 0, "374": 0, "376": 0, "377": 0, "379": 0, "380": 0, "381": 0, "382": 0, "383": 0, "384": 0, "388": 0, "389": 0, "390": 0, "391": 0, "395": 0, "396": 0, "398": 0, "400": 0, "401": 0, "405": 0, "406": 0, "410": 0, "414": 0, "417": 0, "418": 0, "420": 0, "421": 0, "422": 0, "428": 0, "429": 0, "434": 1, "435": 0, "436": 0, "437": 0, "443": 1, "447": 1, "458": 1, "462": 1, "480": 1, "483": 1, "489": 1, "444": 0, "445": 0, "449": 0, "450": 0, "453": 0, "454": 0, "455": 0, "459": 0, "460": 0, "463": 0, "464": 0, "465": 0, "466": 0, "467": 0, "468": 0, "469": 0, "472": 0, "473": 0, "474": 0, "475": 0, "476": 0, "477": 0, "481": 0, "484": 0, "485": 0, "486": 0, "491": 0, "495": 1, "497": 1, "503": 1, "507": 1, "518": 1, "523": 1, "534": 1, "537": 1, "546": 1, "549": 1, "498": 0, "499": 0, "500": 0, "501": 0, "505": 0, "509": 0, "510": 0, "513": 0, "514": 0, "515": 0, "519": 0, "520": 0, "521": 0, "524": 0, "525": 0, "526": 0, "527": 0, "528": 0, "529": 0, "530": 0, "531": 0, "535": 0, "539": 0, "541": 0, "542": 0, "547": 0, "551": 0, "559": 1, "561": 1, "562": 0, "570": 1, "572": 1, "573": 0, "579": 1, "581": 1, "585": 1, "596": 1, "601": 1, "619": 1, "622": 1, "631": 1, "634": 1, "582": 0, "583": 0, "587": 0, "588": 0, "591": 0, "592": 0, "593": 0, "597": 0, "598": 0, "599": 0, "602": 0, "603": 0, "604": 0, "606": 0, "607": 0, "610": 0, "611": 0, "612": 0, "613": 0, "614": 0, "615": 0, "616": 0, "620": 0, "624": 0, "626": 0, "627": 0, "632": 0, "636": 0, "648": 1, "649": 1, "650": 1, "651": 1, "652": 1, "653": 1, "654": 1, "655": 1, "656": 1, "657": 1, "658": 1, "661": 1, "665": 1, "676": 1, "684": 1, "687": 1, "690": 1, "693": 1, "662": 1, "663": 1, "667": 0, "668": 0, "671": 0, "672": 0, "673": 0, "677": 0, "678": 0, "679": 0, "680": 0, "681": 0, "682": 0, "685": 0, "688": 0, "691": 0, "695": 0, "701": 1, "703": 1, "707": 1, "714": 1, "719": 1, "722": 1, "725": 1, "728": 1, "704": 0, "705": 0, "709": 0, "710": 0, "711": 0, "715": 0, "716": 0, "717": 0, "720": 0, "723": 0, "726": 0, "730": 0, "734": 1, "736": 1, "738": 0, "744": 1, "753": 1, "758": 1, "763": 1, "768": 1, "779": 1, "786": 1, "745": 0, "746": 0, "747": 0, "748": 0, "749": 0, "751": 0, "754": 0, "755": 0, "756": 0, "759": 0, "760": 0, "761": 0, "764": 0, "765": 0, "766": 0, "770": 0, "771": 0, "774": 0, "775": 0, "776": 0, "780": 0, "781": 0, "782": 0, "783": 0, "788": 0, "794": 1, "798": 1, "804": 1, "811": 1, "818": 1, "829": 1, "832": 1, "795": 0, "796": 0, "799": 0, "800": 0, "801": 0, "802": 0, "805": 0, "806": 0, "807": 0, "808": 0, "809": 0, "812": 0, "813": 0, "814": 0, "815": 0, "816": 0, "820": 0, "821": 0, "824": 0, "825": 0, "826": 0, "830": 0, "834": 0, "838": 1, "840": 1, "844": 1, "849": 1, "854": 1, "859": 1, "865": 1, "868": 1, "841": 0, "842": 0, "845": 0, "846": 0, "847": 0, "850": 0, "851": 0, "852": 0, "855": 0, "856": 0, "857": 0, "860": 0, "861": 0, "862": 0, "866": 0, "870": 0, "874": 1, "876": 1, "880": 1, "886": 1, "893": 1, "900": 1, "906": 1, "909": 1, "877": 0, "878": 0, "881": 0, "882": 0, "883": 0, "884": 0, "887": 0, "888": 0, "889": 0, "890": 0, "891": 0, "894": 0, "895": 0, "896": 0, "897": 0, "898": 0, "901": 0, "902": 0, "903": 0, "907": 0, "911": 0}}
+ git checkout bb64b99b78a579cb2f6178011a4cf9366e634438
Note: switching to 'bb64b99b78a579cb2f6178011a4cf9366e634438'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at bb64b99b78 Fixed #29867 -- Added support for storing None value in caches.
M	django/db/migrations/operations/models.py
+ git apply /root/pre_state.patch
error: unrecognized input
