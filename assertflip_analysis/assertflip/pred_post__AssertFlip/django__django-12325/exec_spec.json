{"instance_id": "django__django-12325", "repo": "django/django", "version": "3.1", "environment_setup_commit": "0668164b4ac93a5be79f5b87fae83c657124d9ab", "patch_list": ["diff --git a/django/db/models/base.py b/django/db/models/base.py\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -202,7 +202,7 @@ def __new__(cls, name, bases, attrs, **kwargs):\n                 continue\n             # Locate OneToOneField instances.\n             for field in base._meta.local_fields:\n-                if isinstance(field, OneToOneField):\n+                if isinstance(field, OneToOneField) and field.remote_field.parent_link:\n                     related = resolve_relation(new_class, field.remote_field.model)\n                     parent_links[make_model_tuple(related)] = field\n \ndiff --git a/django/db/models/options.py b/django/db/models/options.py\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -5,7 +5,7 @@\n \n from django.apps import apps\n from django.conf import settings\n-from django.core.exceptions import FieldDoesNotExist, ImproperlyConfigured\n+from django.core.exceptions import FieldDoesNotExist\n from django.db import connections\n from django.db.models import Manager\n from django.db.models.fields import AutoField\n@@ -251,10 +251,6 @@ def _prepare(self, model):\n                     field = already_created[0]\n                 field.primary_key = True\n                 self.setup_pk(field)\n-                if not field.remote_field.parent_link:\n-                    raise ImproperlyConfigured(\n-                        'Add parent_link=True to %s.' % field,\n-                    )\n             else:\n                 auto = AutoField(verbose_name='ID', primary_key=True, auto_created=True)\n                 model.add_to_class('id', auto)\n", "diff --git a/dev/null b/tests/test_coverup_django__django-12325.py\nnew file mode 100644\nindex e69de29..f1ab7eb 100644\n--- /dev/null\n+++ b/tests/test_coverup_django__django-12325.py\n@@ -0,0 +1,33 @@\n+from django.test import TestCase\n+from django.db import models\n+from django.core.exceptions import ImproperlyConfigured\n+\n+class Document(models.Model):\n+    class Meta:\n+        app_label = 'test_app'\n+\n+class PickingModelTest(TestCase):\n+    databases = {'default'}\n+\n+    def test_mti_field_order_bug(self):\n+        \"\"\"\n+        Test that the order of OneToOneField declarations in a model using MTI\n+        does not raise an ImproperlyConfigured error when 'origin' is declared before 'document_ptr'.\n+        \"\"\"\n+\n+        # Define the Picking model with fields in the problematic order\n+        class Picking(Document):\n+            class Meta:\n+                app_label = 'test_app'\n+            origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+            document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+\n+        # Attempt to access the model's meta options to trigger configuration checks\n+        try:\n+            # Accessing the field should trigger the ImproperlyConfigured error\n+            Picking._meta.get_field('origin')\n+            # If the exception is raised, the test should pass, indicating the bug is fixed\n+            assert False, \"ImproperlyConfigured exception was not raised, indicating the bug is still present.\"\n+        except ImproperlyConfigured:\n+            # The test should pass if the ImproperlyConfigured exception is raised\n+            assert True, \"ImproperlyConfigured exception was raised as expected.\"\n"], "arch": "x86_64", "base_commit": "29c126bb349526b5f1cd78facbe9f25906f18563", "test_directives": ["test_coverup_django__django-12325"], "coverage_files": ["django/db/models/base.py", "django/db/models/options.py"], "env_name": "testbed", "run_id": "assertflip", "patch_id": "pred_post__AssertFlip", "timeout": 1800, "rm_image": false, "force_rebuild": false, "exec_mode": "unit_test", "reproduction_script_name": null, "compute_coverage": true, "install": {"python": "3.6", "packages": "requirements.txt", "install": "python -m pip install -e .", "eval_commands": ["sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen && locale-gen", "export LANG=en_US.UTF-8", "export LANGUAGE=en_US:en", "export LC_ALL=en_US.UTF-8"]}, "cache_level": "instance", "test_command": "python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/db/models/base\\.py|django/db/models/options\\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-12325", "req_install_commands": ["conda create -n testbed python=3.6 -y", "cat <<'EOF_59812759871' > $HOME/requirements.txt\nasgiref >= 3.2\nargon2-cffi >= 16.1.0\nbcrypt\ndocutils\ngeoip2\njinja2 >= 2.9.2\nnumpy\nPillow >= 6.2.0\npylibmc; sys.platform != 'win32'\npython-memcached >= 1.59\npytz\npywatchman; sys.platform != 'win32'\nPyYAML\nselenium\nsqlparse >= 0.2.2\ntblib >= 1.5.0\n\nEOF_59812759871", "conda activate testbed && python -m pip install -r $HOME/requirements.txt", "rm $HOME/requirements.txt"]}