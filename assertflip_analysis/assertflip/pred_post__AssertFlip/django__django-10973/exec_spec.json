{"instance_id": "django__django-10973", "repo": "django/django", "version": "3.0", "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27", "patch_list": ["diff --git a/django/db/backends/postgresql/client.py b/django/db/backends/postgresql/client.py\n--- a/django/db/backends/postgresql/client.py\n+++ b/django/db/backends/postgresql/client.py\n@@ -2,17 +2,9 @@\n import signal\n import subprocess\n \n-from django.core.files.temp import NamedTemporaryFile\n from django.db.backends.base.client import BaseDatabaseClient\n \n \n-def _escape_pgpass(txt):\n-    \"\"\"\n-    Escape a fragment of a PostgreSQL .pgpass file.\n-    \"\"\"\n-    return txt.replace('\\\\', '\\\\\\\\').replace(':', '\\\\:')\n-\n-\n class DatabaseClient(BaseDatabaseClient):\n     executable_name = 'psql'\n \n@@ -34,38 +26,17 @@ def runshell_db(cls, conn_params):\n             args += ['-p', str(port)]\n         args += [dbname]\n \n-        temp_pgpass = None\n         sigint_handler = signal.getsignal(signal.SIGINT)\n+        subprocess_env = os.environ.copy()\n+        if passwd:\n+            subprocess_env['PGPASSWORD'] = str(passwd)\n         try:\n-            if passwd:\n-                # Create temporary .pgpass file.\n-                temp_pgpass = NamedTemporaryFile(mode='w+')\n-                try:\n-                    print(\n-                        _escape_pgpass(host) or '*',\n-                        str(port) or '*',\n-                        _escape_pgpass(dbname) or '*',\n-                        _escape_pgpass(user) or '*',\n-                        _escape_pgpass(passwd),\n-                        file=temp_pgpass,\n-                        sep=':',\n-                        flush=True,\n-                    )\n-                    os.environ['PGPASSFILE'] = temp_pgpass.name\n-                except UnicodeEncodeError:\n-                    # If the current locale can't encode the data, let the\n-                    # user input the password manually.\n-                    pass\n             # Allow SIGINT to pass to psql to abort queries.\n             signal.signal(signal.SIGINT, signal.SIG_IGN)\n-            subprocess.check_call(args)\n+            subprocess.run(args, check=True, env=subprocess_env)\n         finally:\n             # Restore the original SIGINT handler.\n             signal.signal(signal.SIGINT, sigint_handler)\n-            if temp_pgpass:\n-                temp_pgpass.close()\n-                if 'PGPASSFILE' in os.environ:  # unit tests need cleanup\n-                    del os.environ['PGPASSFILE']\n \n     def runshell(self):\n         DatabaseClient.runshell_db(self.connection.get_connection_params())\n", "diff --git a/dev/null b/tests/test_coverup_django__django-10973.py\nnew file mode 100644\nindex e69de29..30db560 100644\n--- /dev/null\n+++ b/tests/test_coverup_django__django-10973.py\n@@ -0,0 +1,37 @@\n+from django.test import SimpleTestCase\n+from unittest.mock import patch, MagicMock\n+import os\n+from django.db.backends.postgresql.client import DatabaseClient\n+\n+class DatabaseClientTest(SimpleTestCase):\n+    @patch('django.db.backends.postgresql.client.subprocess.check_call')\n+    @patch('django.db.backends.postgresql.client.NamedTemporaryFile')\n+    @patch('django.db.backends.postgresql.client.os.environ', {})\n+    def test_runshell_db_with_pgpassword(self, mock_tempfile, mock_subprocess):\n+        # Mock the NamedTemporaryFile to simulate the creation of a .pgpass file\n+        mock_temp_file = MagicMock()\n+        mock_temp_file.name = '/fake/path/to/.pgpass'\n+        mock_tempfile.return_value = mock_temp_file\n+\n+        conn_params = {\n+            'host': 'localhost',\n+            'port': '5432',\n+            'database': 'testdb',\n+            'user': 'testuser',\n+            'password': 'testpassword'\n+        }\n+        \n+        # Set PGPASSWORD in the environment to simulate the correct behavior\n+        os.environ['PGPASSWORD'] = conn_params['password']\n+        \n+        DatabaseClient.runshell_db(conn_params)\n+        \n+        # Check that subprocess.check_call was called with the expected arguments\n+        mock_subprocess.assert_called_once()\n+        \n+        # Assert that 'PGPASSWORD' is set in the environment\n+        self.assertNotIn('PGPASSWORD', os.environ)\n+        \n+        # Clean up the environment variable\n+        if 'PGPASSWORD' in os.environ:\n+            del os.environ['PGPASSWORD']\n"], "arch": "x86_64", "base_commit": "ddb293685235fd09e932805771ae97f72e817181", "test_directives": ["test_coverup_django__django-10973"], "coverage_files": ["django/db/backends/postgresql/client.py"], "env_name": "testbed", "run_id": "assertflip", "patch_id": "pred_post__AssertFlip", "timeout": 1800, "rm_image": false, "force_rebuild": false, "exec_mode": "unit_test", "reproduction_script_name": null, "compute_coverage": true, "install": {"python": "3.6", "packages": "requirements.txt", "install": "python -m pip install -e .", "eval_commands": ["sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen && locale-gen", "export LANG=en_US.UTF-8", "export LANGUAGE=en_US:en", "export LC_ALL=en_US.UTF-8"]}, "cache_level": "instance", "test_command": "python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/db/backends/postgresql/client\\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-10973", "req_install_commands": ["conda create -n testbed python=3.6 -y", "cat <<'EOF_59812759871' > $HOME/requirements.txt\nasgiref ~= 3.2\nargon2-cffi >= 16.1.0\nbcrypt\ndocutils\ngeoip2\njinja2 >= 2.9.2\nnumpy\nPillow != 5.4.0\npylibmc; sys.platform != 'win32'\npython-memcached >= 1.59\npytz\npywatchman; sys.platform != 'win32'\nPyYAML\nselenium\nsqlparse >= 0.2.2\ntblib >= 1.5.0\n\nEOF_59812759871", "conda activate testbed && python -m pip install -r $HOME/requirements.txt", "rm $HOME/requirements.txt"]}