diff --git a/dev/null b/tests/test_coverup_django__django-15380.py
new file mode 100644
index e69de29..7f696cc 100644
--- /dev/null
+++ b/tests/test_coverup_django__django-15380.py
@@ -0,0 +1,51 @@
+from django.test import SimpleTestCase
+from django.db import models
+from django.db.migrations.state import ProjectState, ModelState
+from django.db.migrations.autodetector import MigrationAutodetector
+from django.db.migrations.questioner import NonInteractiveMigrationQuestioner
+
+class MigrationAutodetectorTest(SimpleTestCase):
+    def test_rename_model_and_field_triggers_keyerror(self):
+        """
+        Test that renaming a model and a field in a single migration step
+        does not trigger a KeyError in the migration autodetector.
+        """
+        # Initial state with MyModel and a field my_field
+        initial_state = ProjectState()
+        initial_state.add_model(ModelState(
+            app_label='test_one',
+            name='MyModel',
+            fields=[
+                ('id', models.AutoField(primary_key=True)),
+                ('my_field', models.CharField(max_length=100)),
+            ]
+        ))
+
+        # Target state with MyModel2 and a field my_field2
+        target_state = ProjectState()
+        target_state.add_model(ModelState(
+            app_label='test_one',
+            name='MyModel2',
+            fields=[
+                ('id', models.AutoField(primary_key=True)),
+                ('my_field2', models.CharField(max_length=100)),
+            ]
+        ))
+
+        # Initialize the autodetector
+        autodetector = MigrationAutodetector(
+            from_state=initial_state,
+            to_state=target_state,
+            questioner=NonInteractiveMigrationQuestioner()
+        )
+
+        # Simulate the renaming of a model and a field
+        autodetector.renamed_models = {('test_one', 'mymodel'): 'MyModel2'}
+        autodetector.new_field_keys = {('test_one', 'MyModel2', 'my_field2')}
+        autodetector.old_field_keys = {('test_one', 'MyModel', 'my_field')}
+
+        # Run the autodetector to ensure no KeyError is raised
+        try:
+            autodetector.generate_renamed_fields()
+        except KeyError:
+            self.fail("KeyError was raised when renaming a model and a field, which indicates a bug.")
