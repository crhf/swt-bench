{"instance_id": "astropy__astropy-14309", "repo": "astropy/astropy", "version": "5.1", "environment_setup_commit": "5f74eacbcc7fff707a44d8eb58adaa514cb7dcb5", "patch_list": ["diff --git a/astropy/io/fits/connect.py b/astropy/io/fits/connect.py\n--- a/astropy/io/fits/connect.py\n+++ b/astropy/io/fits/connect.py\n@@ -65,10 +65,9 @@ def is_fits(origin, filepath, fileobj, *args, **kwargs):\n         fileobj.seek(pos)\n         return sig == FITS_SIGNATURE\n     elif filepath is not None:\n-        if filepath.lower().endswith(\n+        return filepath.lower().endswith(\n             (\".fits\", \".fits.gz\", \".fit\", \".fit.gz\", \".fts\", \".fts.gz\")\n-        ):\n-            return True\n+        )\n     return isinstance(args[0], (HDUList, TableHDU, BinTableHDU, GroupsHDU))\n \n \n", "diff --git a/dev/null b/astropy/tests/test_coverup_astropy__astropy-14309.py\nnew file mode 100644\nindex e69de29..97d24b7 100644\n--- /dev/null\n+++ b/astropy/tests/test_coverup_astropy__astropy-14309.py\n@@ -0,0 +1,14 @@\n+import pytest\n+from astropy.io.registry import identify_format\n+from astropy.table import Table\n+\n+def test_identify_format_with_empty_args():\n+    # Prepare a non-FITS file path and empty args\n+    non_fits_filepath = \"bububu.ecsv\"\n+    empty_args = []\n+\n+    # Call identify_format with parameters that lead to is_fits being called with empty args\n+    result = identify_format(\"write\", Table, non_fits_filepath, None, empty_args, {})\n+    \n+    # Assert that the function handles empty args gracefully and does not raise IndexError\n+    assert result is not None\n"], "arch": "x86_64", "base_commit": "cdb66059a2feb44ee49021874605ba90801f9986", "test_directives": ["astropy/tests/test_coverup_astropy__astropy-14309.py"], "coverage_files": ["astropy/io/fits/connect.py"], "env_name": "testbed", "run_id": "assertflip", "patch_id": "pred_post__AssertFlip", "timeout": 1800, "rm_image": false, "force_rebuild": false, "exec_mode": "unit_test", "reproduction_script_name": null, "compute_coverage": true, "install": {"python": "3.9", "install": "python -m pip install -e .[test] --verbose", "pip_packages": ["attrs==23.1.0", "exceptiongroup==1.1.3", "execnet==2.0.2", "hypothesis==6.82.6", "iniconfig==2.0.0", "numpy==1.25.2", "packaging==23.1", "pluggy==1.3.0", "psutil==5.9.5", "pyerfa==2.0.0.3", "pytest-arraydiff==0.5.0", "pytest-astropy-header==0.2.2", "pytest-astropy==0.10.0", "pytest-cov==4.1.0", "pytest-doctestplus==1.0.0", "pytest-filter-subpackage==0.1.2", "pytest-mock==3.11.1", "pytest-openfiles==0.5.0", "pytest-remotedata==0.4.0", "pytest-xdist==3.3.1", "pytest==7.4.0", "PyYAML==6.0.1", "setuptools==68.0.0", "sortedcontainers==2.4.0", "tomli==2.0.1"], "pre_install": ["sed -i 's/requires = \\[\"setuptools\",/requires = \\[\"setuptools==68.0.0\",/' pyproject.toml"]}, "cache_level": "instance", "test_command": "python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(astropy/io/fits/connect\\.py)' -m pytest --no-header -rA  -p no:cacheprovider astropy/tests/test_coverup_astropy__astropy-14309.py", "req_install_commands": ["conda create -n testbed python=3.9  -y"]}