+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD 1659712001810f5fc563a443949f8e3bb38af4bd
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch master
nothing to commit, working tree clean
+ git show
commit 1659712001810f5fc563a443949f8e3bb38af4bd
Merge: e27cad7710 9dce6aba31
Author: Chris Smith <smichr@gmail.com>
Date:   Sat Jan 27 07:33:30 2018 -0600

    Merge pull request #14012 from ishanaj/xfail_10214_solveset
    
    solveset is now able to solve XFAIL

diff --cc sympy/solvers/tests/test_solveset.py
index 72db239984,88885497d6..03eb18c3c5
--- a/sympy/solvers/tests/test_solveset.py
+++ b/sympy/solvers/tests/test_solveset.py
@@@ -1553,13 -1532,18 +1553,18 @@@ def test_issue_9557()
  def test_issue_9778():
      assert solveset(x**3 + 1, x, S.Reals) == FiniteSet(-1)
      assert solveset(x**(S(3)/5) + 1, x, S.Reals) == S.EmptySet
 -    assert solveset(x**3 + y, x, S.Reals) == Intersection(Interval(-oo, oo), \
 -        FiniteSet((-y)**(S(1)/3)*Piecewise((1, Ne(-im(y), 0)), ((-1)**(S(2)/3), -y < 0), (1, True))))
 +    assert solveset(x**3 + y, x, S.Reals) == \
 +        FiniteSet(-Abs(y)**(S(1)/3)*sign(y))
  
  
- @XFAIL
- def test_issue_failing_pow():
+ def test_issue_10214():
      assert solveset(x**(S(3)/2) + 4, x, S.Reals) == S.EmptySet
+     assert solveset(x**(S(-3)/2) + 4, x, S.Reals) == S.EmptySet
+ 
+     ans = FiniteSet(-2**(S(2)/3))
+     assert solveset(x**(S(3)) + 4, x, S.Reals) == ans
+     assert (x**(S(3)) + 4).subs(x,list(ans)[0]) == 0 # substituting ans and verifying the result.
+     assert (x**(S(3)) + 4).subs(x,-(-2)**(2/S(3))) == 0
  
  
  def test_issue_9849():
+ git diff 1659712001810f5fc563a443949f8e3bb38af4bd
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Requirement already satisfied: mpmath>=0.19 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from sympy==1.1.2.dev0) (1.3.0)
Installing collected packages: sympy
  Attempting uninstall: sympy
    Found existing installation: sympy 1.1.2.dev0
    Uninstalling sympy-1.1.2.dev0:
      Successfully uninstalled sympy-1.1.2.dev0
  DEPRECATION: Legacy editable install of sympy==1.1.2.dev0 from file:///testbed (setup.py develop) is deprecated. pip 25.3 will enforce this behaviour change. A possible replacement is to add a pyproject.toml or enable --use-pep517, and use setuptools >= 64. If the resulting installation is not behaving as expected, try using --config-settings editable_mode=compat. Please consult the setuptools documentation for more information. Discussion can be found at https://github.com/pypa/pip/issues/11457
  Running setup.py develop for sympy
Successfully installed sympy
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git apply -v -
Checking patch sympy/matrices/matrices.py...
Hunk #1 succeeded at 6 (offset 1 line).
Hunk #2 succeeded at 22 (offset 1 line).
Hunk #3 succeeded at 40 (offset 1 line).
Hunk #4 succeeded at 181 (offset 1 line).
Hunk #5 succeeded at 190 (offset 1 line).
Checking patch sympy/utilities/randtest.py...
Applied patch sympy/matrices/matrices.py cleanly.
Applied patch sympy/utilities/randtest.py cleanly.
+ git apply -v -
<stdin>:13: trailing whitespace.
    
<stdin>:17: trailing whitespace.
    
Checking patch sympy/polys/tests/test_coverup_sympy__sympy-13877.py...
Applied patch sympy/polys/tests/test_coverup_sympy__sympy-13877.py cleanly.
warning: 2 lines add whitespace errors.
+ PYTHONWARNINGS=ignore::UserWarning,ignore::SyntaxWarning
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(sympy/utilities/randtest\.py|sympy/matrices/matrices\.py)' bin/test -C --verbose sympy/polys/tests/test_coverup_sympy__sympy-13877.p
/testbed/sympy/core/basic.py:3: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
  from collections import Mapping, defaultdict
/testbed/sympy/core/containers.py:271: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
  class OrderedSet(collections.MutableSet):
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(sympy/utilities/randtest\\.py|sympy/matrices/matrices\\.py)']
0.75 /testbed/sympy/matrices/matrices.py(1): from __future__ import print_function, division
0.75 /testbed/sympy/matrices/matrices.py(3): import collections
0.75 /testbed/sympy/matrices/matrices.py(4): from mpmath.libmp.libmpf import prec_to_dps
0.75 /testbed/sympy/matrices/matrices.py(5): from sympy.assumptions.refine import refine
0.75 /testbed/sympy/matrices/matrices.py(6): from sympy.core.add import Add
0.75 /testbed/sympy/matrices/matrices.py(7): from sympy.core.basic import Basic, Atom
0.75 /testbed/sympy/matrices/matrices.py(8): from sympy.core.expr import Expr
0.75 /testbed/sympy/matrices/matrices.py(9): from sympy.core.function import expand_mul
0.75 /testbed/sympy/matrices/matrices.py(10): from sympy.core.power import Pow
0.75 /testbed/sympy/matrices/matrices.py(11): from sympy.core.symbol import (Symbol, Dummy, symbols,
0.75 /testbed/sympy/matrices/matrices.py(13): from sympy.core.numbers import Integer, ilcm, Float
0.75 /testbed/sympy/matrices/matrices.py(14): from sympy.core.singleton import S
0.75 /testbed/sympy/matrices/matrices.py(15): from sympy.core.sympify import sympify
0.75 /testbed/sympy/matrices/matrices.py(16): from sympy.functions.elementary.miscellaneous import sqrt, Max, Min
0.75 /testbed/sympy/matrices/matrices.py(17): from sympy.functions import Abs, exp, factorial
0.75 /testbed/sympy/matrices/matrices.py(18): from sympy.polys import PurePoly, roots, cancel, gcd
0.75 /testbed/sympy/matrices/matrices.py(19): from sympy.printing import sstr
0.75 /testbed/sympy/matrices/matrices.py(20): from sympy.simplify import simplify as _simplify, signsimp, nsimplify
0.75 /testbed/sympy/matrices/matrices.py(21): from sympy.core.compatibility import reduce, as_int, string_types
0.75 /testbed/sympy/matrices/matrices.py(23): from sympy.utilities.iterables import flatten, numbered_symbols
0.75 /testbed/sympy/matrices/matrices.py(24): from sympy.core.decorators import call_highest_priority
0.75 /testbed/sympy/matrices/matrices.py(25): from sympy.core.compatibility import (is_sequence, default_sort_key, range,
0.75 /testbed/sympy/matrices/matrices.py(29): from types import FunctionType
0.75 /testbed/sympy/matrices/matrices.py(31): from .common import (a2idx, classof, MatrixError, ShapeError,
0.76 /testbed/sympy/matrices/matrices.py(35): def _iszero(x):
0.76 /testbed/sympy/matrices/matrices.py(43): def _is_zero_after_expand_mul(x):
0.76 /testbed/sympy/matrices/matrices.py(49): class DeferredVector(Symbol, NotIterable):
0.76 /testbed/sympy/matrices/matrices.py(49): class DeferredVector(Symbol, NotIterable):
0.76 /testbed/sympy/matrices/matrices.py(50):     """A vector whose components are deferred (e.g. for use with lambdify)
0.76 /testbed/sympy/matrices/matrices.py(65):     def __getitem__(self, i):
0.76 /testbed/sympy/matrices/matrices.py(73):     def __str__(self):
0.76 /testbed/sympy/matrices/matrices.py(76):     def __repr__(self):
0.76 /testbed/sympy/matrices/matrices.py(80): class MatrixDeterminant(MatrixCommon):
0.76 /testbed/sympy/matrices/matrices.py(80): class MatrixDeterminant(MatrixCommon):
0.76 /testbed/sympy/matrices/matrices.py(81):     """Provides basic matrix determinant operations.
0.76 /testbed/sympy/matrices/matrices.py(84):     def _eval_berkowitz_toeplitz_matrix(self):
0.76 /testbed/sympy/matrices/matrices.py(128):     def _eval_berkowitz_vector(self):
0.76 /testbed/sympy/matrices/matrices.py(172):     def _eval_det_bareiss(self):
0.76 /testbed/sympy/matrices/matrices.py(220):     def _eval_det_berkowitz(self):
0.76 /testbed/sympy/matrices/matrices.py(225):     def _eval_det_lu(self, iszerofunc=_iszero, simpfunc=None):
0.76 /testbed/sympy/matrices/matrices.py(272):     def _eval_determinant(self):
0.76 /testbed/sympy/matrices/matrices.py(277):     def adjugate(self, method="berkowitz"):
0.76 /testbed/sympy/matrices/matrices.py(292):     def charpoly(self, x='lambda', simplify=_simplify):
0.76 /testbed/sympy/matrices/matrices.py(351):     def cofactor(self, i, j, method="berkowitz"):
0.76 /testbed/sympy/matrices/matrices.py(367):     def cofactor_matrix(self, method="berkowitz"):
0.76 /testbed/sympy/matrices/matrices.py(385):     def det(self, method="bareiss"):
0.76 /testbed/sympy/matrices/matrices.py(434):     def minor(self, i, j, method="berkowitz"):
0.76 /testbed/sympy/matrices/matrices.py(452):     def minor_submatrix(self, i, j):
0.76 /testbed/sympy/matrices/matrices.py(477): class MatrixReductions(MatrixDeterminant):
0.76 /testbed/sympy/matrices/matrices.py(477): class MatrixReductions(MatrixDeterminant):
0.76 /testbed/sympy/matrices/matrices.py(478):     """Provides basic matrix row/column operations.
0.76 /testbed/sympy/matrices/matrices.py(481):     def _eval_col_op_swap(self, col1, col2):
0.76 /testbed/sympy/matrices/matrices.py(490):     def _eval_col_op_multiply_col_by_const(self, col, k):
0.76 /testbed/sympy/matrices/matrices.py(497):     def _eval_col_op_add_multiple_to_other_col(self, col, k, col2):
0.76 /testbed/sympy/matrices/matrices.py(504):     def _eval_row_op_swap(self, row1, row2):
0.76 /testbed/sympy/matrices/matrices.py(513):     def _eval_row_op_multiply_row_by_const(self, row, k):
0.76 /testbed/sympy/matrices/matrices.py(520):     def _eval_row_op_add_multiple_to_other_row(self, row, k, row2):
0.76 /testbed/sympy/matrices/matrices.py(527):     def _eval_echelon_form(self, iszerofunc, simpfunc):
0.76 /testbed/sympy/matrices/matrices.py(536):     def _eval_is_echelon(self, iszerofunc):
0.76 /testbed/sympy/matrices/matrices.py(544):     def _eval_rref(self, iszerofunc, simpfunc, normalize_last=True):
0.76 /testbed/sympy/matrices/matrices.py(550):     def _normalize_op_args(self, op, col, k, col1, col2, error_str="col"):
0.76 /testbed/sympy/matrices/matrices.py(599):     def _permute_complexity_right(self, iszerofunc):
0.76 /testbed/sympy/matrices/matrices.py(618):     def _row_reduce(self, iszerofunc, simpfunc, normalize_last=True,
0.76 /testbed/sympy/matrices/matrices.py(716):     def echelon_form(self, iszerofunc=_iszero, simplify=False, with_pivots=False):
0.76 /testbed/sympy/matrices/matrices.py(729):     def elementary_col_op(self, op="n->kn", col=None, k=None, col1=None, col2=None):
0.76 /testbed/sympy/matrices/matrices.py(759):     def elementary_row_op(self, op="n->kn", row=None, k=None, row1=None, row2=None):
0.76 /testbed/sympy/matrices/matrices.py(789):     @property
0.76 /testbed/sympy/matrices/matrices.py(790):     def is_echelon(self, iszerofunc=_iszero):
0.76 /testbed/sympy/matrices/matrices.py(797):     def rank(self, iszerofunc=_iszero, simplify=False):
0.76 /testbed/sympy/matrices/matrices.py(836):     def rref(self, iszerofunc=_iszero, simplify=False, pivots=True, normalize_last=True):
0.76 /testbed/sympy/matrices/matrices.py(898): class MatrixSubspaces(MatrixReductions):
0.76 /testbed/sympy/matrices/matrices.py(898): class MatrixSubspaces(MatrixReductions):
0.76 /testbed/sympy/matrices/matrices.py(899):     """Provides methods relating to the fundamental subspaces
0.76 /testbed/sympy/matrices/matrices.py(902):     def columnspace(self, simplify=False):
0.76 /testbed/sympy/matrices/matrices.py(934):     def nullspace(self, simplify=False):
0.76 /testbed/sympy/matrices/matrices.py(977):     def rowspace(self, simplify=False):
0.76 /testbed/sympy/matrices/matrices.py(984):     @classmethod
0.76 /testbed/sympy/matrices/matrices.py(985):     def orthogonalize(cls, *vecs, **kwargs):
0.76 /testbed/sympy/matrices/matrices.py(1026): class MatrixEigen(MatrixSubspaces):
0.76 /testbed/sympy/matrices/matrices.py(1026): class MatrixEigen(MatrixSubspaces):
0.76 /testbed/sympy/matrices/matrices.py(1027):     """Provides basic matrix eigenvalue/vector operations.
0.76 /testbed/sympy/matrices/matrices.py(1030):     _cache_is_diagonalizable = None
0.76 /testbed/sympy/matrices/matrices.py(1031):     _cache_eigenvects = None
0.76 /testbed/sympy/matrices/matrices.py(1033):     def diagonalize(self, reals_only=False, sort=False, normalize=False):
0.76 /testbed/sympy/matrices/matrices.py(1106):     def eigenvals(self, error_when_incomplete=True, **flags):
0.76 /testbed/sympy/matrices/matrices.py(1138):     def eigenvects(self, error_when_incomplete=True, **flags):
0.76 /testbed/sympy/matrices/matrices.py(1207):     def is_diagonalizable(self, reals_only=False, **kwargs):
0.76 /testbed/sympy/matrices/matrices.py(1296):     def jordan_form(self, calc_transform=True, **kwargs):
0.76 /testbed/sympy/matrices/matrices.py(1488):     def left_eigenvects(self, **flags):
0.76 /testbed/sympy/matrices/matrices.py(1521):     def singular_values(self):
0.76 /testbed/sympy/matrices/matrices.py(1553): class MatrixCalculus(MatrixCommon):
0.76 /testbed/sympy/matrices/matrices.py(1553): class MatrixCalculus(MatrixCommon):
0.76 /testbed/sympy/matrices/matrices.py(1554):     """Provides calculus-related matrix operations."""
0.76 /testbed/sympy/matrices/matrices.py(1556):     def diff(self, *args):
0.76 /testbed/sympy/matrices/matrices.py(1580):     def _eval_derivative(self, arg):
0.76 /testbed/sympy/matrices/matrices.py(1583):     def integrate(self, *args):
0.76 /testbed/sympy/matrices/matrices.py(1610):     def jacobian(self, X):
0.76 /testbed/sympy/matrices/matrices.py(1667):     def limit(self, *args):
0.76 /testbed/sympy/matrices/matrices.py(1692): class MatrixDeprecated(MatrixCommon):
0.76 /testbed/sympy/matrices/matrices.py(1692): class MatrixDeprecated(MatrixCommon):
0.76 /testbed/sympy/matrices/matrices.py(1693):     """A class to house deprecated matrix methods."""
0.76 /testbed/sympy/matrices/matrices.py(1695):     def berkowitz_charpoly(self, x=Dummy('lambda'), simplify=_simplify):
0.76 /testbed/sympy/matrices/matrices.py(1698):     def berkowitz_det(self):
0.76 /testbed/sympy/matrices/matrices.py(1709):     def berkowitz_eigenvals(self, **flags):
0.76 /testbed/sympy/matrices/matrices.py(1719):     def berkowitz_minors(self):
0.76 /testbed/sympy/matrices/matrices.py(1735):     def berkowitz(self):
0.76 /testbed/sympy/matrices/matrices.py(1775):     def cofactorMatrix(self, method="berkowitz"):
0.76 /testbed/sympy/matrices/matrices.py(1778):     def det_bareis(self):
0.76 /testbed/sympy/matrices/matrices.py(1781):     def det_bareiss(self):
0.76 /testbed/sympy/matrices/matrices.py(1800):     def det_LU_decomposition(self):
0.76 /testbed/sympy/matrices/matrices.py(1821):     def jordan_cell(self, eigenval, n):
0.76 /testbed/sympy/matrices/matrices.py(1824):     def jordan_cells(self, calc_transformation=True):
0.76 /testbed/sympy/matrices/matrices.py(1828):     def minorEntry(self, i, j, method="berkowitz"):
0.76 /testbed/sympy/matrices/matrices.py(1831):     def minorMatrix(self, i, j):
0.76 /testbed/sympy/matrices/matrices.py(1834):     def permuteBkwd(self, perm):
0.76 /testbed/sympy/matrices/matrices.py(1838):     def permuteFwd(self, perm):
0.76 /testbed/sympy/matrices/matrices.py(1843): class MatrixBase(MatrixDeprecated,
0.76 /testbed/sympy/matrices/matrices.py(1844):                  MatrixCalculus,
0.76 /testbed/sympy/matrices/matrices.py(1845):                  MatrixEigen,
0.76 /testbed/sympy/matrices/matrices.py(1846):                  MatrixCommon):
0.76 /testbed/sympy/matrices/matrices.py(1843): class MatrixBase(MatrixDeprecated,
0.76 /testbed/sympy/matrices/matrices.py(1843): class MatrixBase(MatrixDeprecated,
0.76 /testbed/sympy/matrices/matrices.py(1847):     """Base class for matrix objects."""
0.76 /testbed/sympy/matrices/matrices.py(1849):     __array_priority__ = 11
0.76 /testbed/sympy/matrices/matrices.py(1851):     is_Matrix = True
0.76 /testbed/sympy/matrices/matrices.py(1852):     _class_priority = 3
0.76 /testbed/sympy/matrices/matrices.py(1853):     _sympify = staticmethod(sympify)
0.76 /testbed/sympy/matrices/matrices.py(1855):     __hash__ = None  # Mutable
0.76 /testbed/sympy/matrices/matrices.py(1857):     def __array__(self):
0.76 /testbed/sympy/matrices/matrices.py(1861):     def __getattr__(self, attr):
0.76 /testbed/sympy/matrices/matrices.py(1872):     def __len__(self):
0.76 /testbed/sympy/matrices/matrices.py(1879):     def __mathml__(self):
0.76 /testbed/sympy/matrices/matrices.py(1889):     def __ne__(self, other):
0.76 /testbed/sympy/matrices/matrices.py(1892):     def _matrix_pow_by_jordan_blocks(self, num):
0.76 /testbed/sympy/matrices/matrices.py(1918):     def __repr__(self):
0.76 /testbed/sympy/matrices/matrices.py(1921):     def __str__(self):
0.76 /testbed/sympy/matrices/matrices.py(1926):     def _diagonalize_clear_subproducts(self):
0.76 /testbed/sympy/matrices/matrices.py(1931):     def _format_str(self, printer=None):
0.76 /testbed/sympy/matrices/matrices.py(1942):     @classmethod
0.76 /testbed/sympy/matrices/matrices.py(1943):     def _handle_creation_inputs(cls, *args, **kwargs):
0.76 /testbed/sympy/matrices/matrices.py(2090):     def _setitem(self, key, value):
0.76 /testbed/sympy/matrices/matrices.py(2160):     def add(self, b):
0.76 /testbed/sympy/matrices/matrices.py(2164):     def cholesky_solve(self, rhs):
0.76 /testbed/sympy/matrices/matrices.py(2193):     def cholesky(self):
0.76 /testbed/sympy/matrices/matrices.py(2230):     def condition_number(self):
0.76 /testbed/sympy/matrices/matrices.py(2253):     def copy(self):
0.76 /testbed/sympy/matrices/matrices.py(2270):     def cross(self, b):
0.76 /testbed/sympy/matrices/matrices.py(2302):     @property
0.76 /testbed/sympy/matrices/matrices.py(2303):     def D(self):
0.76 /testbed/sympy/matrices/matrices.py(2345):     def diagonal_solve(self, rhs):
0.76 /testbed/sympy/matrices/matrices.py(2376):     def dot(self, b):
0.76 /testbed/sympy/matrices/matrices.py(2435):     def dual(self):
0.76 /testbed/sympy/matrices/matrices.py(2474):     def exp(self):
0.76 /testbed/sympy/matrices/matrices.py(2513):     def gauss_jordan_solve(self, b, freevar=False):
0.76 /testbed/sympy/matrices/matrices.py(2647):     def inv_mod(self, m):
0.76 /testbed/sympy/matrices/matrices.py(2689):     def inverse_ADJ(self, iszerofunc=_iszero):
0.76 /testbed/sympy/matrices/matrices.py(2713):     def inverse_GE(self, iszerofunc=_iszero):
0.76 /testbed/sympy/matrices/matrices.py(2734):     def inverse_LU(self, iszerofunc=_iszero):
0.76 /testbed/sympy/matrices/matrices.py(2753):     def inv(self, method=None, **kwargs):
0.76 /testbed/sympy/matrices/matrices.py(2817):     def is_nilpotent(self):
0.76 /testbed/sympy/matrices/matrices.py(2846):     def key2bounds(self, keys):
0.76 /testbed/sympy/matrices/matrices.py(2876):     def key2ij(self, key):
0.76 /testbed/sympy/matrices/matrices.py(2896):     def LDLdecomposition(self):
0.76 /testbed/sympy/matrices/matrices.py(2936):     def LDLsolve(self, rhs):
0.76 /testbed/sympy/matrices/matrices.py(2977):     def lower_triangular_solve(self, rhs):
0.76 /testbed/sympy/matrices/matrices.py(3002):                         iszerofunc=_iszero,
0.76 /testbed/sympy/matrices/matrices.py(3003):                         simpfunc=None,
0.76 /testbed/sympy/matrices/matrices.py(3004):                         rankcheck=False):
0.76 /testbed/sympy/matrices/matrices.py(3001):     def LUdecomposition(self,
0.76 /testbed/sympy/matrices/matrices.py(3073):                                iszerofunc=_iszero,
0.76 /testbed/sympy/matrices/matrices.py(3074):                                simpfunc=None,
0.76 /testbed/sympy/matrices/matrices.py(3075):                                rankcheck=False):
0.76 /testbed/sympy/matrices/matrices.py(3072):     def LUdecomposition_Simple(self,
0.76 /testbed/sympy/matrices/matrices.py(3269):     def LUdecompositionFF(self):
0.76 /testbed/sympy/matrices/matrices.py(3318):     def LUsolve(self, rhs, iszerofunc=_iszero):
0.76 /testbed/sympy/matrices/matrices.py(3358):     def multiply(self, b):
0.76 /testbed/sympy/matrices/matrices.py(3370):     def normalized(self):
0.76 /testbed/sympy/matrices/matrices.py(3384):     def norm(self, ord=None):
0.76 /testbed/sympy/matrices/matrices.py(3484):     def pinv_solve(self, B, arbitrary_matrix=None):
0.76 /testbed/sympy/matrices/matrices.py(3570):     def pinv(self):
0.76 /testbed/sympy/matrices/matrices.py(3614):     def print_nonzero(self, symb="X"):
0.76 /testbed/sympy/matrices/matrices.py(3648):     def project(self, v):
/testbed/sympy/plotting/plot.py:28: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
  from collections import Callable
/testbed/sympy/core/basic.py:3: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
  from collections import Mapping, defaultdict
/testbed/sympy/core/containers.py:271: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
  class OrderedSet(collections.MutableSet):
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(sympy/utilities/randtest\\.py|sympy/matrices/matrices\\.py)']
0.33 /testbed/sympy/matrices/matrices.py(1): from __future__ import print_function, division
0.33 /testbed/sympy/matrices/matrices.py(3): import collections
0.33 /testbed/sympy/matrices/matrices.py(4): from mpmath.libmp.libmpf import prec_to_dps
0.33 /testbed/sympy/matrices/matrices.py(5): from sympy.assumptions.refine import refine
0.33 /testbed/sympy/matrices/matrices.py(6): from sympy.core.add import Add
0.33 /testbed/sympy/matrices/matrices.py(7): from sympy.core.basic import Basic, Atom
0.33 /testbed/sympy/matrices/matrices.py(8): from sympy.core.expr import Expr
0.33 /testbed/sympy/matrices/matrices.py(9): from sympy.core.function import expand_mul
0.33 /testbed/sympy/matrices/matrices.py(10): from sympy.core.power import Pow
0.33 /testbed/sympy/matrices/matrices.py(11): from sympy.core.symbol import (Symbol, Dummy, symbols,
0.33 /testbed/sympy/matrices/matrices.py(13): from sympy.core.numbers import Integer, ilcm, Float
0.33 /testbed/sympy/matrices/matrices.py(14): from sympy.core.singleton import S
0.33 /testbed/sympy/matrices/matrices.py(15): from sympy.core.sympify import sympify
0.33 /testbed/sympy/matrices/matrices.py(16): from sympy.functions.elementary.miscellaneous import sqrt, Max, Min
0.33 /testbed/sympy/matrices/matrices.py(17): from sympy.functions import Abs, exp, factorial
0.33 /testbed/sympy/matrices/matrices.py(18): from sympy.polys import PurePoly, roots, cancel, gcd
0.33 /testbed/sympy/matrices/matrices.py(19): from sympy.printing import sstr
0.33 /testbed/sympy/matrices/matrices.py(20): from sympy.simplify import simplify as _simplify, signsimp, nsimplify
0.33 /testbed/sympy/matrices/matrices.py(21): from sympy.core.compatibility import reduce, as_int, string_types
0.33 /testbed/sympy/matrices/matrices.py(23): from sympy.utilities.iterables import flatten, numbered_symbols
0.33 /testbed/sympy/matrices/matrices.py(24): from sympy.core.decorators import call_highest_priority
0.33 /testbed/sympy/matrices/matrices.py(25): from sympy.core.compatibility import (is_sequence, default_sort_key, range,
0.33 /testbed/sympy/matrices/matrices.py(29): from types import FunctionType
0.33 /testbed/sympy/matrices/matrices.py(31): from .common import (a2idx, classof, MatrixError, ShapeError,
0.33 /testbed/sympy/matrices/matrices.py(35): def _iszero(x):
0.33 /testbed/sympy/matrices/matrices.py(43): def _is_zero_after_expand_mul(x):
0.33 /testbed/sympy/matrices/matrices.py(49): class DeferredVector(Symbol, NotIterable):
0.33 /testbed/sympy/matrices/matrices.py(49): class DeferredVector(Symbol, NotIterable):
0.33 /testbed/sympy/matrices/matrices.py(50):     """A vector whose components are deferred (e.g. for use with lambdify)
0.33 /testbed/sympy/matrices/matrices.py(65):     def __getitem__(self, i):
0.33 /testbed/sympy/matrices/matrices.py(73):     def __str__(self):
0.33 /testbed/sympy/matrices/matrices.py(76):     def __repr__(self):
0.33 /testbed/sympy/matrices/matrices.py(80): class MatrixDeterminant(MatrixCommon):
0.33 /testbed/sympy/matrices/matrices.py(80): class MatrixDeterminant(MatrixCommon):
0.33 /testbed/sympy/matrices/matrices.py(81):     """Provides basic matrix determinant operations.
0.33 /testbed/sympy/matrices/matrices.py(84):     def _eval_berkowitz_toeplitz_matrix(self):
0.33 /testbed/sympy/matrices/matrices.py(128):     def _eval_berkowitz_vector(self):
0.33 /testbed/sympy/matrices/matrices.py(172):     def _eval_det_bareiss(self):
0.33 /testbed/sympy/matrices/matrices.py(220):     def _eval_det_berkowitz(self):
0.33 /testbed/sympy/matrices/matrices.py(225):     def _eval_det_lu(self, iszerofunc=_iszero, simpfunc=None):
0.33 /testbed/sympy/matrices/matrices.py(272):     def _eval_determinant(self):
0.33 /testbed/sympy/matrices/matrices.py(277):     def adjugate(self, method="berkowitz"):
0.33 /testbed/sympy/matrices/matrices.py(292):     def charpoly(self, x='lambda', simplify=_simplify):
0.33 /testbed/sympy/matrices/matrices.py(351):     def cofactor(self, i, j, method="berkowitz"):
0.33 /testbed/sympy/matrices/matrices.py(367):     def cofactor_matrix(self, method="berkowitz"):
0.33 /testbed/sympy/matrices/matrices.py(385):     def det(self, method="bareiss"):
0.33 /testbed/sympy/matrices/matrices.py(434):     def minor(self, i, j, method="berkowitz"):
0.33 /testbed/sympy/matrices/matrices.py(452):     def minor_submatrix(self, i, j):
0.33 /testbed/sympy/matrices/matrices.py(477): class MatrixReductions(MatrixDeterminant):
0.33 /testbed/sympy/matrices/matrices.py(477): class MatrixReductions(MatrixDeterminant):
0.33 /testbed/sympy/matrices/matrices.py(478):     """Provides basic matrix row/column operations.
0.33 /testbed/sympy/matrices/matrices.py(481):     def _eval_col_op_swap(self, col1, col2):
0.33 /testbed/sympy/matrices/matrices.py(490):     def _eval_col_op_multiply_col_by_const(self, col, k):
0.33 /testbed/sympy/matrices/matrices.py(497):     def _eval_col_op_add_multiple_to_other_col(self, col, k, col2):
0.33 /testbed/sympy/matrices/matrices.py(504):     def _eval_row_op_swap(self, row1, row2):
0.33 /testbed/sympy/matrices/matrices.py(513):     def _eval_row_op_multiply_row_by_const(self, row, k):
0.33 /testbed/sympy/matrices/matrices.py(520):     def _eval_row_op_add_multiple_to_other_row(self, row, k, row2):
0.33 /testbed/sympy/matrices/matrices.py(527):     def _eval_echelon_form(self, iszerofunc, simpfunc):
0.33 /testbed/sympy/matrices/matrices.py(536):     def _eval_is_echelon(self, iszerofunc):
0.33 /testbed/sympy/matrices/matrices.py(544):     def _eval_rref(self, iszerofunc, simpfunc, normalize_last=True):
0.33 /testbed/sympy/matrices/matrices.py(550):     def _normalize_op_args(self, op, col, k, col1, col2, error_str="col"):
0.33 /testbed/sympy/matrices/matrices.py(599):     def _permute_complexity_right(self, iszerofunc):
0.33 /testbed/sympy/matrices/matrices.py(618):     def _row_reduce(self, iszerofunc, simpfunc, normalize_last=True,
0.33 /testbed/sympy/matrices/matrices.py(716):     def echelon_form(self, iszerofunc=_iszero, simplify=False, with_pivots=False):
0.33 /testbed/sympy/matrices/matrices.py(729):     def elementary_col_op(self, op="n->kn", col=None, k=None, col1=None, col2=None):
0.33 /testbed/sympy/matrices/matrices.py(759):     def elementary_row_op(self, op="n->kn", row=None, k=None, row1=None, row2=None):
0.33 /testbed/sympy/matrices/matrices.py(789):     @property
0.33 /testbed/sympy/matrices/matrices.py(790):     def is_echelon(self, iszerofunc=_iszero):
0.33 /testbed/sympy/matrices/matrices.py(797):     def rank(self, iszerofunc=_iszero, simplify=False):
0.33 /testbed/sympy/matrices/matrices.py(836):     def rref(self, iszerofunc=_iszero, simplify=False, pivots=True, normalize_last=True):
0.33 /testbed/sympy/matrices/matrices.py(898): class MatrixSubspaces(MatrixReductions):
0.33 /testbed/sympy/matrices/matrices.py(898): class MatrixSubspaces(MatrixReductions):
0.33 /testbed/sympy/matrices/matrices.py(899):     """Provides methods relating to the fundamental subspaces
0.33 /testbed/sympy/matrices/matrices.py(902):     def columnspace(self, simplify=False):
0.33 /testbed/sympy/matrices/matrices.py(934):     def nullspace(self, simplify=False):
0.33 /testbed/sympy/matrices/matrices.py(977):     def rowspace(self, simplify=False):
0.33 /testbed/sympy/matrices/matrices.py(984):     @classmethod
0.33 /testbed/sympy/matrices/matrices.py(985):     def orthogonalize(cls, *vecs, **kwargs):
0.33 /testbed/sympy/matrices/matrices.py(1026): class MatrixEigen(MatrixSubspaces):
0.33 /testbed/sympy/matrices/matrices.py(1026): class MatrixEigen(MatrixSubspaces):
0.33 /testbed/sympy/matrices/matrices.py(1027):     """Provides basic matrix eigenvalue/vector operations.
0.33 /testbed/sympy/matrices/matrices.py(1030):     _cache_is_diagonalizable = None
0.33 /testbed/sympy/matrices/matrices.py(1031):     _cache_eigenvects = None
0.33 /testbed/sympy/matrices/matrices.py(1033):     def diagonalize(self, reals_only=False, sort=False, normalize=False):
0.33 /testbed/sympy/matrices/matrices.py(1106):     def eigenvals(self, error_when_incomplete=True, **flags):
0.33 /testbed/sympy/matrices/matrices.py(1138):     def eigenvects(self, error_when_incomplete=True, **flags):
0.33 /testbed/sympy/matrices/matrices.py(1207):     def is_diagonalizable(self, reals_only=False, **kwargs):
0.33 /testbed/sympy/matrices/matrices.py(1296):     def jordan_form(self, calc_transform=True, **kwargs):
0.33 /testbed/sympy/matrices/matrices.py(1488):     def left_eigenvects(self, **flags):
0.33 /testbed/sympy/matrices/matrices.py(1521):     def singular_values(self):
0.33 /testbed/sympy/matrices/matrices.py(1553): class MatrixCalculus(MatrixCommon):
0.33 /testbed/sympy/matrices/matrices.py(1553): class MatrixCalculus(MatrixCommon):
0.33 /testbed/sympy/matrices/matrices.py(1554):     """Provides calculus-related matrix operations."""
0.33 /testbed/sympy/matrices/matrices.py(1556):     def diff(self, *args):
0.33 /testbed/sympy/matrices/matrices.py(1580):     def _eval_derivative(self, arg):
0.33 /testbed/sympy/matrices/matrices.py(1583):     def integrate(self, *args):
0.33 /testbed/sympy/matrices/matrices.py(1610):     def jacobian(self, X):
0.33 /testbed/sympy/matrices/matrices.py(1667):     def limit(self, *args):
0.33 /testbed/sympy/matrices/matrices.py(1692): class MatrixDeprecated(MatrixCommon):
0.33 /testbed/sympy/matrices/matrices.py(1692): class MatrixDeprecated(MatrixCommon):
0.33 /testbed/sympy/matrices/matrices.py(1693):     """A class to house deprecated matrix methods."""
0.33 /testbed/sympy/matrices/matrices.py(1695):     def berkowitz_charpoly(self, x=Dummy('lambda'), simplify=_simplify):
0.33 /testbed/sympy/matrices/matrices.py(1698):     def berkowitz_det(self):
0.33 /testbed/sympy/matrices/matrices.py(1709):     def berkowitz_eigenvals(self, **flags):
0.33 /testbed/sympy/matrices/matrices.py(1719):     def berkowitz_minors(self):
0.33 /testbed/sympy/matrices/matrices.py(1735):     def berkowitz(self):
0.33 /testbed/sympy/matrices/matrices.py(1775):     def cofactorMatrix(self, method="berkowitz"):
0.33 /testbed/sympy/matrices/matrices.py(1778):     def det_bareis(self):
0.33 /testbed/sympy/matrices/matrices.py(1781):     def det_bareiss(self):
0.33 /testbed/sympy/matrices/matrices.py(1800):     def det_LU_decomposition(self):
0.33 /testbed/sympy/matrices/matrices.py(1821):     def jordan_cell(self, eigenval, n):
0.33 /testbed/sympy/matrices/matrices.py(1824):     def jordan_cells(self, calc_transformation=True):
0.33 /testbed/sympy/matrices/matrices.py(1828):     def minorEntry(self, i, j, method="berkowitz"):
0.33 /testbed/sympy/matrices/matrices.py(1831):     def minorMatrix(self, i, j):
0.33 /testbed/sympy/matrices/matrices.py(1834):     def permuteBkwd(self, perm):
0.33 /testbed/sympy/matrices/matrices.py(1838):     def permuteFwd(self, perm):
0.33 /testbed/sympy/matrices/matrices.py(1843): class MatrixBase(MatrixDeprecated,
0.33 /testbed/sympy/matrices/matrices.py(1844):                  MatrixCalculus,
0.33 /testbed/sympy/matrices/matrices.py(1845):                  MatrixEigen,
0.33 /testbed/sympy/matrices/matrices.py(1846):                  MatrixCommon):
0.33 /testbed/sympy/matrices/matrices.py(1843): class MatrixBase(MatrixDeprecated,
0.33 /testbed/sympy/matrices/matrices.py(1843): class MatrixBase(MatrixDeprecated,
0.33 /testbed/sympy/matrices/matrices.py(1847):     """Base class for matrix objects."""
0.33 /testbed/sympy/matrices/matrices.py(1849):     __array_priority__ = 11
0.33 /testbed/sympy/matrices/matrices.py(1851):     is_Matrix = True
0.33 /testbed/sympy/matrices/matrices.py(1852):     _class_priority = 3
0.33 /testbed/sympy/matrices/matrices.py(1853):     _sympify = staticmethod(sympify)
0.33 /testbed/sympy/matrices/matrices.py(1855):     __hash__ = None  # Mutable
0.33 /testbed/sympy/matrices/matrices.py(1857):     def __array__(self):
0.33 /testbed/sympy/matrices/matrices.py(1861):     def __getattr__(self, attr):
0.33 /testbed/sympy/matrices/matrices.py(1872):     def __len__(self):
0.33 /testbed/sympy/matrices/matrices.py(1879):     def __mathml__(self):
0.33 /testbed/sympy/matrices/matrices.py(1889):     def __ne__(self, other):
0.33 /testbed/sympy/matrices/matrices.py(1892):     def _matrix_pow_by_jordan_blocks(self, num):
0.33 /testbed/sympy/matrices/matrices.py(1918):     def __repr__(self):
0.33 /testbed/sympy/matrices/matrices.py(1921):     def __str__(self):
0.33 /testbed/sympy/matrices/matrices.py(1926):     def _diagonalize_clear_subproducts(self):
0.33 /testbed/sympy/matrices/matrices.py(1931):     def _format_str(self, printer=None):
0.33 /testbed/sympy/matrices/matrices.py(1942):     @classmethod
0.33 /testbed/sympy/matrices/matrices.py(1943):     def _handle_creation_inputs(cls, *args, **kwargs):
0.33 /testbed/sympy/matrices/matrices.py(2090):     def _setitem(self, key, value):
0.33 /testbed/sympy/matrices/matrices.py(2160):     def add(self, b):
0.33 /testbed/sympy/matrices/matrices.py(2164):     def cholesky_solve(self, rhs):
0.33 /testbed/sympy/matrices/matrices.py(2193):     def cholesky(self):
0.33 /testbed/sympy/matrices/matrices.py(2230):     def condition_number(self):
0.33 /testbed/sympy/matrices/matrices.py(2253):     def copy(self):
0.33 /testbed/sympy/matrices/matrices.py(2270):     def cross(self, b):
0.33 /testbed/sympy/matrices/matrices.py(2302):     @property
0.33 /testbed/sympy/matrices/matrices.py(2303):     def D(self):
0.33 /testbed/sympy/matrices/matrices.py(2345):     def diagonal_solve(self, rhs):
0.33 /testbed/sympy/matrices/matrices.py(2376):     def dot(self, b):
0.33 /testbed/sympy/matrices/matrices.py(2435):     def dual(self):
0.33 /testbed/sympy/matrices/matrices.py(2474):     def exp(self):
0.33 /testbed/sympy/matrices/matrices.py(2513):     def gauss_jordan_solve(self, b, freevar=False):
0.33 /testbed/sympy/matrices/matrices.py(2647):     def inv_mod(self, m):
0.33 /testbed/sympy/matrices/matrices.py(2689):     def inverse_ADJ(self, iszerofunc=_iszero):
0.33 /testbed/sympy/matrices/matrices.py(2713):     def inverse_GE(self, iszerofunc=_iszero):
0.33 /testbed/sympy/matrices/matrices.py(2734):     def inverse_LU(self, iszerofunc=_iszero):
0.33 /testbed/sympy/matrices/matrices.py(2753):     def inv(self, method=None, **kwargs):
0.33 /testbed/sympy/matrices/matrices.py(2817):     def is_nilpotent(self):
0.33 /testbed/sympy/matrices/matrices.py(2846):     def key2bounds(self, keys):
0.33 /testbed/sympy/matrices/matrices.py(2876):     def key2ij(self, key):
0.33 /testbed/sympy/matrices/matrices.py(2896):     def LDLdecomposition(self):
0.33 /testbed/sympy/matrices/matrices.py(2936):     def LDLsolve(self, rhs):
0.33 /testbed/sympy/matrices/matrices.py(2977):     def lower_triangular_solve(self, rhs):
0.33 /testbed/sympy/matrices/matrices.py(3002):                         iszerofunc=_iszero,
0.33 /testbed/sympy/matrices/matrices.py(3003):                         simpfunc=None,
0.33 /testbed/sympy/matrices/matrices.py(3004):                         rankcheck=False):
0.33 /testbed/sympy/matrices/matrices.py(3001):     def LUdecomposition(self,
0.33 /testbed/sympy/matrices/matrices.py(3073):                                iszerofunc=_iszero,
0.33 /testbed/sympy/matrices/matrices.py(3074):                                simpfunc=None,
0.33 /testbed/sympy/matrices/matrices.py(3075):                                rankcheck=False):
0.33 /testbed/sympy/matrices/matrices.py(3072):     def LUdecomposition_Simple(self,
0.33 /testbed/sympy/matrices/matrices.py(3269):     def LUdecompositionFF(self):
0.33 /testbed/sympy/matrices/matrices.py(3318):     def LUsolve(self, rhs, iszerofunc=_iszero):
0.33 /testbed/sympy/matrices/matrices.py(3358):     def multiply(self, b):
0.33 /testbed/sympy/matrices/matrices.py(3370):     def normalized(self):
0.33 /testbed/sympy/matrices/matrices.py(3384):     def norm(self, ord=None):
0.33 /testbed/sympy/matrices/matrices.py(3484):     def pinv_solve(self, B, arbitrary_matrix=None):
0.33 /testbed/sympy/matrices/matrices.py(3570):     def pinv(self):
0.33 /testbed/sympy/matrices/matrices.py(3614):     def print_nonzero(self, symb="X"):
0.33 /testbed/sympy/matrices/matrices.py(3648):     def project(self, v):
/testbed/sympy/plotting/plot.py:28: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
  from collections import Callable
0.33 /testbed/sympy/matrices/matrices.py(3664):     def QRdecomposition(self):
0.33 /testbed/sympy/matrices/matrices.py(3743):     def QRsolve(self, b):
0.33 /testbed/sympy/matrices/matrices.py(3788):     def solve_least_squares(self, rhs, method='CH'):
0.33 /testbed/sympy/matrices/matrices.py(3847):     def solve(self, rhs, method='GE'):
0.33 /testbed/sympy/matrices/matrices.py(3863):     def table(self, printer, rowstart='[', rowend=']', rowsep='\n',
0.33 /testbed/sympy/matrices/matrices.py(3941):     def upper_triangular_solve(self, rhs):
0.33 /testbed/sympy/matrices/matrices.py(3964):     def vech(self, diagonal=True, check_symmetry=True):
0.33 /testbed/sympy/matrices/matrices.py(4020): def classof(A, B):
0.33 /testbed/sympy/matrices/matrices.py(4054): def a2idx(j, n=None):
0.33 /testbed/sympy/matrices/matrices.py(4069): def _find_reasonable_pivot(col, iszerofunc=_iszero, simpfunc=_simplify):
0.33 /testbed/sympy/matrices/matrices.py(4172): def _find_reasonable_pivot_naive(col, iszerofunc=_iszero, simpfunc=None):
============================= test process starts ==============================
executable:         /opt/miniconda3/envs/testbed/bin/python3  (3.9.23-final-0) [CPython]
architecture:       64-bit
cache:              no
ground types:       python 
numpy:              None
random seed:        60265826
hash randomization: on (PYTHONHASHSEED=908693201)

sympy/polys/tests/test_coverup_sympy__sympy-13877.py[1] 
test_determinant_nan_and_typeerror 0.39 /testbed/sympy/matrices/matrices.py(1985):         from sympy.matrices.sparse import SparseMatrix
0.39 /testbed/sympy/matrices/matrices.py(1987):         flat_list = None
0.39 /testbed/sympy/matrices/matrices.py(1989):         if len(args) == 1:
0.39 /testbed/sympy/matrices/matrices.py(1991):             if isinstance(args[0], SparseMatrix):
0.39 /testbed/sympy/matrices/matrices.py(1995):             elif isinstance(args[0], MatrixBase):
0.39 /testbed/sympy/matrices/matrices.py(1999):             elif isinstance(args[0], Basic) and args[0].is_Matrix:
0.39 /testbed/sympy/matrices/matrices.py(2003):             elif hasattr(args[0], "__array__"):
0.39 /testbed/sympy/matrices/matrices.py(2023):             elif is_sequence(args[0]) \
0.39 /testbed/sympy/matrices/matrices.py(2024):                     and not isinstance(args[0], DeferredVector):
0.39 /testbed/sympy/matrices/matrices.py(2023):             elif is_sequence(args[0]) \
0.39 /testbed/sympy/matrices/matrices.py(2025):                 in_mat = []
0.39 /testbed/sympy/matrices/matrices.py(2026):                 ncol = set()
0.39 /testbed/sympy/matrices/matrices.py(2027):                 for row in args[0]:
0.39 /testbed/sympy/matrices/matrices.py(2028):                     if isinstance(row, MatrixBase):
0.39 /testbed/sympy/matrices/matrices.py(2033):                         in_mat.append(row)
0.39 /testbed/sympy/matrices/matrices.py(2034):                         try:
0.39 /testbed/sympy/matrices/matrices.py(2035):                             ncol.add(len(row))
0.39 /testbed/sympy/matrices/matrices.py(2027):                 for row in args[0]:
0.39 /testbed/sympy/matrices/matrices.py(2028):                     if isinstance(row, MatrixBase):
0.39 /testbed/sympy/matrices/matrices.py(2033):                         in_mat.append(row)
0.39 /testbed/sympy/matrices/matrices.py(2034):                         try:
0.39 /testbed/sympy/matrices/matrices.py(2035):                             ncol.add(len(row))
0.39 /testbed/sympy/matrices/matrices.py(2027):                 for row in args[0]:
0.39 /testbed/sympy/matrices/matrices.py(2028):                     if isinstance(row, MatrixBase):
0.39 /testbed/sympy/matrices/matrices.py(2033):                         in_mat.append(row)
0.39 /testbed/sympy/matrices/matrices.py(2034):                         try:
0.39 /testbed/sympy/matrices/matrices.py(2035):                             ncol.add(len(row))
0.39 /testbed/sympy/matrices/matrices.py(2027):                 for row in args[0]:
0.39 /testbed/sympy/matrices/matrices.py(2028):                     if isinstance(row, MatrixBase):
0.39 /testbed/sympy/matrices/matrices.py(2033):                         in_mat.append(row)
0.39 /testbed/sympy/matrices/matrices.py(2034):                         try:
0.39 /testbed/sympy/matrices/matrices.py(2035):                             ncol.add(len(row))
0.39 /testbed/sympy/matrices/matrices.py(2027):                 for row in args[0]:
0.39 /testbed/sympy/matrices/matrices.py(2028):                     if isinstance(row, MatrixBase):
0.39 /testbed/sympy/matrices/matrices.py(2033):                         in_mat.append(row)
0.39 /testbed/sympy/matrices/matrices.py(2034):                         try:
0.39 /testbed/sympy/matrices/matrices.py(2035):                             ncol.add(len(row))
0.39 /testbed/sympy/matrices/matrices.py(2027):                 for row in args[0]:
0.39 /testbed/sympy/matrices/matrices.py(2038):                 if len(ncol) > 1:
0.39 /testbed/sympy/matrices/matrices.py(2041):                 cols = ncol.pop() if ncol else 0
0.39 /testbed/sympy/matrices/matrices.py(2042):                 rows = len(in_mat) if cols else 0
0.39 /testbed/sympy/matrices/matrices.py(2043):                 if rows:
0.39 /testbed/sympy/matrices/matrices.py(2044):                     if not is_sequence(in_mat[0]):
0.39 /testbed/sympy/matrices/matrices.py(2048):                 flat_list = []
0.39 /testbed/sympy/matrices/matrices.py(2049):                 for j in range(rows):
0.39 /testbed/sympy/matrices/matrices.py(2050):                     for i in range(cols):
0.39 /testbed/sympy/matrices/matrices.py(2051):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.39 /testbed/sympy/matrices/matrices.py(2050):                     for i in range(cols):
0.39 /testbed/sympy/matrices/matrices.py(2051):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.39 /testbed/sympy/matrices/matrices.py(2050):                     for i in range(cols):
0.39 /testbed/sympy/matrices/matrices.py(2051):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.39 /testbed/sympy/matrices/matrices.py(2050):                     for i in range(cols):
0.39 /testbed/sympy/matrices/matrices.py(2051):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.39 /testbed/sympy/matrices/matrices.py(2050):                     for i in range(cols):
0.39 /testbed/sympy/matrices/matrices.py(2051):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.39 /testbed/sympy/matrices/matrices.py(2050):                     for i in range(cols):
0.39 /testbed/sympy/matrices/matrices.py(2049):                 for j in range(rows):
0.39 /testbed/sympy/matrices/matrices.py(2050):                     for i in range(cols):
0.39 /testbed/sympy/matrices/matrices.py(2051):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.39 /testbed/sympy/matrices/matrices.py(2050):                     for i in range(cols):
0.39 /testbed/sympy/matrices/matrices.py(2051):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.39 /testbed/sympy/matrices/matrices.py(2050):                     for i in range(cols):
0.39 /testbed/sympy/matrices/matrices.py(2051):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.39 /testbed/sympy/matrices/matrices.py(2050):                     for i in range(cols):
0.39 /testbed/sympy/matrices/matrices.py(2051):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.39 /testbed/sympy/matrices/matrices.py(2050):                     for i in range(cols):
0.39 /testbed/sympy/matrices/matrices.py(2051):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.39 /testbed/sympy/matrices/matrices.py(2050):                     for i in range(cols):
0.39 /testbed/sympy/matrices/matrices.py(2049):                 for j in range(rows):
0.39 /testbed/sympy/matrices/matrices.py(2050):                     for i in range(cols):
0.39 /testbed/sympy/matrices/matrices.py(2051):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.39 /testbed/sympy/matrices/matrices.py(2050):                     for i in range(cols):
0.39 /testbed/sympy/matrices/matrices.py(2051):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.39 /testbed/sympy/matrices/matrices.py(2050):                     for i in range(cols):
0.39 /testbed/sympy/matrices/matrices.py(2051):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.39 /testbed/sympy/matrices/matrices.py(2050):                     for i in range(cols):
0.39 /testbed/sympy/matrices/matrices.py(2051):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.39 /testbed/sympy/matrices/matrices.py(2050):                     for i in range(cols):
0.39 /testbed/sympy/matrices/matrices.py(2051):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.39 /testbed/sympy/matrices/matrices.py(2050):                     for i in range(cols):
0.39 /testbed/sympy/matrices/matrices.py(2049):                 for j in range(rows):
0.39 /testbed/sympy/matrices/matrices.py(2050):                     for i in range(cols):
0.39 /testbed/sympy/matrices/matrices.py(2051):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.39 /testbed/sympy/matrices/matrices.py(2050):                     for i in range(cols):
0.39 /testbed/sympy/matrices/matrices.py(2051):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.39 /testbed/sympy/matrices/matrices.py(2050):                     for i in range(cols):
0.39 /testbed/sympy/matrices/matrices.py(2051):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.39 /testbed/sympy/matrices/matrices.py(2050):                     for i in range(cols):
0.39 /testbed/sympy/matrices/matrices.py(2051):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.39 /testbed/sympy/matrices/matrices.py(2050):                     for i in range(cols):
0.39 /testbed/sympy/matrices/matrices.py(2051):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.39 /testbed/sympy/matrices/matrices.py(2050):                     for i in range(cols):
0.39 /testbed/sympy/matrices/matrices.py(2049):                 for j in range(rows):
0.39 /testbed/sympy/matrices/matrices.py(2050):                     for i in range(cols):
0.39 /testbed/sympy/matrices/matrices.py(2051):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.39 /testbed/sympy/matrices/matrices.py(2050):                     for i in range(cols):
0.39 /testbed/sympy/matrices/matrices.py(2051):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.39 /testbed/sympy/matrices/matrices.py(2050):                     for i in range(cols):
0.39 /testbed/sympy/matrices/matrices.py(2051):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.39 /testbed/sympy/matrices/matrices.py(2050):                     for i in range(cols):
0.39 /testbed/sympy/matrices/matrices.py(2051):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.39 /testbed/sympy/matrices/matrices.py(2050):                     for i in range(cols):
0.39 /testbed/sympy/matrices/matrices.py(2051):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.39 /testbed/sympy/matrices/matrices.py(2050):                     for i in range(cols):
0.39 /testbed/sympy/matrices/matrices.py(2049):                 for j in range(rows):
0.39 /testbed/sympy/matrices/matrices.py(2085):         if flat_list is None:
0.39 /testbed/sympy/matrices/matrices.py(2088):         return rows, cols, flat_list
0.39 /testbed/sympy/matrices/matrices.py(1985):         from sympy.matrices.sparse import SparseMatrix
0.39 /testbed/sympy/matrices/matrices.py(1987):         flat_list = None
0.39 /testbed/sympy/matrices/matrices.py(1989):         if len(args) == 1:
0.39 /testbed/sympy/matrices/matrices.py(1991):             if isinstance(args[0], SparseMatrix):
0.39 /testbed/sympy/matrices/matrices.py(1995):             elif isinstance(args[0], MatrixBase):
0.39 /testbed/sympy/matrices/matrices.py(1999):             elif isinstance(args[0], Basic) and args[0].is_Matrix:
0.39 /testbed/sympy/matrices/matrices.py(2003):             elif hasattr(args[0], "__array__"):
0.39 /testbed/sympy/matrices/matrices.py(2023):             elif is_sequence(args[0]) \
0.39 /testbed/sympy/matrices/matrices.py(2024):                     and not isinstance(args[0], DeferredVector):
0.39 /testbed/sympy/matrices/matrices.py(2023):             elif is_sequence(args[0]) \
0.39 /testbed/sympy/matrices/matrices.py(2025):                 in_mat = []
0.39 /testbed/sympy/matrices/matrices.py(2026):                 ncol = set()
0.39 /testbed/sympy/matrices/matrices.py(2027):                 for row in args[0]:
0.39 /testbed/sympy/matrices/matrices.py(2028):                     if isinstance(row, MatrixBase):
0.39 /testbed/sympy/matrices/matrices.py(2033):                         in_mat.append(row)
0.39 /testbed/sympy/matrices/matrices.py(2034):                         try:
0.39 /testbed/sympy/matrices/matrices.py(2035):                             ncol.add(len(row))
0.39 /testbed/sympy/matrices/matrices.py(2027):                 for row in args[0]:
0.39 /testbed/sympy/matrices/matrices.py(2028):                     if isinstance(row, MatrixBase):
0.39 /testbed/sympy/matrices/matrices.py(2033):                         in_mat.append(row)
0.39 /testbed/sympy/matrices/matrices.py(2034):                         try:
0.39 /testbed/sympy/matrices/matrices.py(2035):                             ncol.add(len(row))
0.39 /testbed/sympy/matrices/matrices.py(2027):                 for row in args[0]:
0.39 /testbed/sympy/matrices/matrices.py(2028):                     if isinstance(row, MatrixBase):
0.39 /testbed/sympy/matrices/matrices.py(2033):                         in_mat.append(row)
0.39 /testbed/sympy/matrices/matrices.py(2034):                         try:
0.39 /testbed/sympy/matrices/matrices.py(2035):                             ncol.add(len(row))
0.39 /testbed/sympy/matrices/matrices.py(2027):                 for row in args[0]:
0.39 /testbed/sympy/matrices/matrices.py(2028):                     if isinstance(row, MatrixBase):
0.39 /testbed/sympy/matrices/matrices.py(2033):                         in_mat.append(row)
0.39 /testbed/sympy/matrices/matrices.py(2034):                         try:
0.39 /testbed/sympy/matrices/matrices.py(2035):                             ncol.add(len(row))
0.39 /testbed/sympy/matrices/matrices.py(2027):                 for row in args[0]:
0.39 /testbed/sympy/matrices/matrices.py(2028):                     if isinstance(row, MatrixBase):
0.39 /testbed/sympy/matrices/matrices.py(2033):                         in_mat.append(row)
0.39 /testbed/sympy/matrices/matrices.py(2034):                         try:
0.39 /testbed/sympy/matrices/matrices.py(2035):                             ncol.add(len(row))
0.39 /testbed/sympy/matrices/matrices.py(2027):                 for row in args[0]:
0.39 /testbed/sympy/matrices/matrices.py(2038):                 if len(ncol) > 1:
0.39 /testbed/sympy/matrices/matrices.py(2041):                 cols = ncol.pop() if ncol else 0
0.39 /testbed/sympy/matrices/matrices.py(2042):                 rows = len(in_mat) if cols else 0
0.39 /testbed/sympy/matrices/matrices.py(2043):                 if rows:
0.39 /testbed/sympy/matrices/matrices.py(2044):                     if not is_sequence(in_mat[0]):
0.39 /testbed/sympy/matrices/matrices.py(2048):                 flat_list = []
0.39 /testbed/sympy/matrices/matrices.py(2049):                 for j in range(rows):
0.39 /testbed/sympy/matrices/matrices.py(2050):                     for i in range(cols):
0.39 /testbed/sympy/matrices/matrices.py(2051):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.39 /testbed/sympy/matrices/matrices.py(2050):                     for i in range(cols):
0.39 /testbed/sympy/matrices/matrices.py(2051):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.39 /testbed/sympy/matrices/matrices.py(2050):                     for i in range(cols):
0.39 /testbed/sympy/matrices/matrices.py(2051):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.39 /testbed/sympy/matrices/matrices.py(2050):                     for i in range(cols):
0.39 /testbed/sympy/matrices/matrices.py(2051):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.39 /testbed/sympy/matrices/matrices.py(2050):                     for i in range(cols):
0.39 /testbed/sympy/matrices/matrices.py(2051):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.39 /testbed/sympy/matrices/matrices.py(2050):                     for i in range(cols):
0.39 /testbed/sympy/matrices/matrices.py(2049):                 for j in range(rows):
0.39 /testbed/sympy/matrices/matrices.py(2050):                     for i in range(cols):
0.39 /testbed/sympy/matrices/matrices.py(2051):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.39 /testbed/sympy/matrices/matrices.py(2050):                     for i in range(cols):
0.39 /testbed/sympy/matrices/matrices.py(2051):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.39 /testbed/sympy/matrices/matrices.py(2050):                     for i in range(cols):
0.39 /testbed/sympy/matrices/matrices.py(2051):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.39 /testbed/sympy/matrices/matrices.py(2050):                     for i in range(cols):
0.39 /testbed/sympy/matrices/matrices.py(2051):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.39 /testbed/sympy/matrices/matrices.py(2050):                     for i in range(cols):
0.39 /testbed/sympy/matrices/matrices.py(2051):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.39 /testbed/sympy/matrices/matrices.py(2050):                     for i in range(cols):
0.39 /testbed/sympy/matrices/matrices.py(2049):                 for j in range(rows):
0.39 /testbed/sympy/matrices/matrices.py(2050):                     for i in range(cols):
0.39 /testbed/sympy/matrices/matrices.py(2051):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.39 /testbed/sympy/matrices/matrices.py(2050):                     for i in range(cols):
0.39 /testbed/sympy/matrices/matrices.py(2051):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.39 /testbed/sympy/matrices/matrices.py(2050):                     for i in range(cols):
0.39 /testbed/sympy/matrices/matrices.py(2051):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.39 /testbed/sympy/matrices/matrices.py(2050):                     for i in range(cols):
0.39 /testbed/sympy/matrices/matrices.py(2051):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.39 /testbed/sympy/matrices/matrices.py(2050):                     for i in range(cols):
0.39 /testbed/sympy/matrices/matrices.py(2051):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.39 /testbed/sympy/matrices/matrices.py(2050):                     for i in range(cols):
0.39 /testbed/sympy/matrices/matrices.py(2049):                 for j in range(rows):
0.39 /testbed/sympy/matrices/matrices.py(2050):                     for i in range(cols):
0.39 /testbed/sympy/matrices/matrices.py(2051):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.39 /testbed/sympy/matrices/matrices.py(2050):                     for i in range(cols):
0.39 /testbed/sympy/matrices/matrices.py(2051):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.39 /testbed/sympy/matrices/matrices.py(2050):                     for i in range(cols):
0.39 /testbed/sympy/matrices/matrices.py(2051):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.39 /testbed/sympy/matrices/matrices.py(2050):                     for i in range(cols):
0.39 /testbed/sympy/matrices/matrices.py(2051):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.39 /testbed/sympy/matrices/matrices.py(2050):                     for i in range(cols):
0.39 /testbed/sympy/matrices/matrices.py(2051):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.39 /testbed/sympy/matrices/matrices.py(2050):                     for i in range(cols):
0.39 /testbed/sympy/matrices/matrices.py(2049):                 for j in range(rows):
0.39 /testbed/sympy/matrices/matrices.py(2050):                     for i in range(cols):
0.39 /testbed/sympy/matrices/matrices.py(2051):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.39 /testbed/sympy/matrices/matrices.py(2050):                     for i in range(cols):
0.39 /testbed/sympy/matrices/matrices.py(2051):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.39 /testbed/sympy/matrices/matrices.py(2050):                     for i in range(cols):
0.39 /testbed/sympy/matrices/matrices.py(2051):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.39 /testbed/sympy/matrices/matrices.py(2050):                     for i in range(cols):
0.39 /testbed/sympy/matrices/matrices.py(2051):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.39 /testbed/sympy/matrices/matrices.py(2050):                     for i in range(cols):
0.39 /testbed/sympy/matrices/matrices.py(2051):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.39 /testbed/sympy/matrices/matrices.py(2050):                     for i in range(cols):
0.39 /testbed/sympy/matrices/matrices.py(2049):                 for j in range(rows):
0.39 /testbed/sympy/matrices/matrices.py(2085):         if flat_list is None:
0.39 /testbed/sympy/matrices/matrices.py(2088):         return rows, cols, flat_list
0.39 /testbed/sympy/matrices/matrices.py(275):         return self.det()
0.39 /testbed/sympy/matrices/matrices.py(398):         method = method.lower()
0.39 /testbed/sympy/matrices/matrices.py(399):         if method == "bareis":
0.39 /testbed/sympy/matrices/matrices.py(401):         if method == "det_lu":
0.39 /testbed/sympy/matrices/matrices.py(403):         if method not in ("bareiss", "berkowitz", "lu"):
0.39 /testbed/sympy/matrices/matrices.py(409):         if self.rows != self.cols:
0.39 /testbed/sympy/matrices/matrices.py(412):         n = self.rows
0.39 /testbed/sympy/matrices/matrices.py(413):         if n == 0:
0.39 /testbed/sympy/matrices/matrices.py(415):         elif n == 1:
0.39 /testbed/sympy/matrices/matrices.py(417):         elif n == 2:
0.39 /testbed/sympy/matrices/matrices.py(419):         elif n == 3:
0.39 /testbed/sympy/matrices/matrices.py(427):         if method == "bareiss":
0.39 /testbed/sympy/matrices/matrices.py(428):             return self._eval_det_bareiss()
0.39 /testbed/sympy/matrices/matrices.py(186):         def bareiss(mat, cumm=1):
0.39 /testbed/sympy/matrices/matrices.py(218):         return cancel(bareiss(self))
0.39 /testbed/sympy/matrices/matrices.py(187):             if mat.rows == 0:
0.39 /testbed/sympy/matrices/matrices.py(189):             elif mat.rows == 1:
0.39 /testbed/sympy/matrices/matrices.py(196):             pivot_pos, pivot_val, _, _ = _find_reasonable_pivot(mat[:, 0],
0.39 /testbed/sympy/matrices/matrices.py(2886):         if is_sequence(key):
0.39 /testbed/sympy/matrices/matrices.py(2887):             if not len(key) == 2:
0.39 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.39 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.39 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.39 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.39 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.39 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.39 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.39 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.39 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.39 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.39 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.39 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.39 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.39 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.39 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.39 /testbed/sympy/matrices/matrices.py(197):                                          iszerofunc=_is_zero_after_expand_mul)
0.39 /testbed/sympy/matrices/matrices.py(196):             pivot_pos, pivot_val, _, _ = _find_reasonable_pivot(mat[:, 0],
0.39 /testbed/sympy/matrices/matrices.py(4087):     newly_determined = []
0.39 /testbed/sympy/matrices/matrices.py(4088):     col = list(col)
0.39 /testbed/sympy/matrices/matrices.py(1877):         return self.rows * self.cols
0.39 /testbed/sympy/matrices/matrices.py(1877):         return self.rows * self.cols
0.39 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.39 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.39 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.39 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.39 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.39 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.39 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.39 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.39 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.39 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.39 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.39 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.39 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.39 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.39 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.39 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.39 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.39 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.39 /testbed/sympy/matrices/matrices.py(4092):     if all(isinstance(x, (Float, Integer)) for x in col) and any(
0.39 /testbed/sympy/matrices/matrices.py(4092):     if all(isinstance(x, (Float, Integer)) for x in col) and any(
0.39 /testbed/sympy/matrices/matrices.py(4092):     if all(isinstance(x, (Float, Integer)) for x in col) and any(
0.39 /testbed/sympy/matrices/matrices.py(4107):     possible_zeros = []
0.39 /testbed/sympy/matrices/matrices.py(4108):     for i, x in enumerate(col):
0.39 /testbed/sympy/matrices/matrices.py(4109):         is_zero = iszerofunc(x)
0.39 /testbed/sympy/matrices/matrices.py(46):     return expand_mul(x) == 0
0.39 /testbed/sympy/matrices/matrices.py(4113):         if is_zero == False:
0.39 /testbed/sympy/matrices/matrices.py(4116):         possible_zeros.append(is_zero)
0.39 /testbed/sympy/matrices/matrices.py(4108):     for i, x in enumerate(col):
0.39 /testbed/sympy/matrices/matrices.py(4109):         is_zero = iszerofunc(x)
0.39 /testbed/sympy/matrices/matrices.py(46):     return expand_mul(x) == 0
0.39 /testbed/sympy/matrices/matrices.py(4113):         if is_zero == False:
0.39 /testbed/sympy/matrices/matrices.py(4115):             return (i, x, False, newly_determined)
0.39 /testbed/sympy/matrices/matrices.py(198):             if pivot_pos == None:
0.39 /testbed/sympy/matrices/matrices.py(203):             sign = (-1) ** (pivot_pos % 2)
0.39 /testbed/sympy/matrices/matrices.py(206):             rows = list(i for i in range(mat.rows) if i != pivot_pos)
0.39 /testbed/sympy/matrices/matrices.py(206):             rows = list(i for i in range(mat.rows) if i != pivot_pos)
0.39 /testbed/sympy/matrices/matrices.py(206):             rows = list(i for i in range(mat.rows) if i != pivot_pos)
0.39 /testbed/sympy/matrices/matrices.py(206):             rows = list(i for i in range(mat.rows) if i != pivot_pos)
0.39 /testbed/sympy/matrices/matrices.py(206):             rows = list(i for i in range(mat.rows) if i != pivot_pos)
0.39 /testbed/sympy/matrices/matrices.py(206):             rows = list(i for i in range(mat.rows) if i != pivot_pos)
0.39 /testbed/sympy/matrices/matrices.py(206):             rows = list(i for i in range(mat.rows) if i != pivot_pos)
0.39 /testbed/sympy/matrices/matrices.py(207):             cols = list(range(mat.cols))
0.39 /testbed/sympy/matrices/matrices.py(208):             tmp_mat = mat.extract(rows, cols)
0.39 /testbed/sympy/matrices/matrices.py(210):             def entry(i, j):
0.39 /testbed/sympy/matrices/matrices.py(216):             return sign*bareiss(self._new(mat.rows - 1, mat.cols - 1, entry), pivot_val)
0.39 /testbed/sympy/matrices/matrices.py(1985):         from sympy.matrices.sparse import SparseMatrix
0.39 /testbed/sympy/matrices/matrices.py(1987):         flat_list = None
0.39 /testbed/sympy/matrices/matrices.py(1989):         if len(args) == 1:
0.39 /testbed/sympy/matrices/matrices.py(2053):         elif len(args) == 3:
0.39 /testbed/sympy/matrices/matrices.py(2054):             rows = as_int(args[0])
0.39 /testbed/sympy/matrices/matrices.py(2055):             cols = as_int(args[1])
0.39 /testbed/sympy/matrices/matrices.py(2057):             if rows < 0 or cols < 0:
0.39 /testbed/sympy/matrices/matrices.py(2062):             if len(args) == 3 and isinstance(args[2], collections.Callable):
0.39 /testbed/sympy/matrices/matrices.py(2063):                 op = args[2]
0.39 /testbed/sympy/matrices/matrices.py(2064):                 flat_list = []
0.39 /testbed/sympy/matrices/matrices.py(2065):                 for i in range(rows):
0.39 /testbed/sympy/matrices/matrices.py(2066):                     flat_list.extend(
0.39 /testbed/sympy/matrices/matrices.py(2067):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.39 /testbed/sympy/matrices/matrices.py(2068):                          for j in range(cols)])
0.39 /testbed/sympy/matrices/matrices.py(2067):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.39 /testbed/sympy/matrices/matrices.py(2067):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.39 /testbed/sympy/matrices/matrices.py(2068):                          for j in range(cols)])
0.39 /testbed/sympy/matrices/matrices.py(2067):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.39 /testbed/sympy/matrices/matrices.py(211):                 ret = (pivot_val*tmp_mat[i, j + 1] - mat[pivot_pos, j + 1]*tmp_mat[i, 0]) / cumm
0.39 /testbed/sympy/matrices/matrices.py(2886):         if is_sequence(key):
0.39 /testbed/sympy/matrices/matrices.py(2887):             if not len(key) == 2:
0.39 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.39 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.39 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.39 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.39 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.39 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.39 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.39 /testbed/sympy/matrices/matrices.py(4057):         try:
0.39 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.39 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.39 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.39 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.39 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.39 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.39 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.39 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.39 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.39 /testbed/sympy/matrices/matrices.py(4057):         try:
0.39 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.39 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.39 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.39 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.39 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.39 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.39 /testbed/sympy/matrices/matrices.py(2886):         if is_sequence(key):
0.39 /testbed/sympy/matrices/matrices.py(2887):             if not len(key) == 2:
0.39 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.39 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.39 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.39 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.39 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.39 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.39 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.39 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.39 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.39 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.39 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.39 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.39 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.39 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.39 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.39 /testbed/sympy/matrices/matrices.py(4057):         try:
0.39 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.39 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.39 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.39 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.39 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.39 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.39 /testbed/sympy/matrices/matrices.py(2886):         if is_sequence(key):
0.39 /testbed/sympy/matrices/matrices.py(2887):             if not len(key) == 2:
0.39 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.39 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.39 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.39 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.39 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.39 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.39 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.39 /testbed/sympy/matrices/matrices.py(4057):         try:
0.39 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.39 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.39 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.39 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.39 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.39 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.39 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.39 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.39 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.39 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.39 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.39 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.39 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.39 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.40 /testbed/sympy/matrices/matrices.py(212):                 if not ret.is_Atom:
0.40 /testbed/sympy/matrices/matrices.py(214):                 return ret
0.40 /testbed/sympy/matrices/matrices.py(2067):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.40 /testbed/sympy/matrices/matrices.py(2068):                          for j in range(cols)])
0.40 /testbed/sympy/matrices/matrices.py(2067):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.40 /testbed/sympy/matrices/matrices.py(211):                 ret = (pivot_val*tmp_mat[i, j + 1] - mat[pivot_pos, j + 1]*tmp_mat[i, 0]) / cumm
0.40 /testbed/sympy/matrices/matrices.py(2886):         if is_sequence(key):
0.40 /testbed/sympy/matrices/matrices.py(2887):             if not len(key) == 2:
0.40 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.40 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.40 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.40 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.40 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.40 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.40 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.40 /testbed/sympy/matrices/matrices.py(4057):         try:
0.40 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.40 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.40 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.40 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.40 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.40 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.40 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.40 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.40 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.40 /testbed/sympy/matrices/matrices.py(4057):         try:
0.40 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.40 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.40 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.40 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.40 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.40 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.40 /testbed/sympy/matrices/matrices.py(2886):         if is_sequence(key):
0.40 /testbed/sympy/matrices/matrices.py(2887):             if not len(key) == 2:
0.40 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.40 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.40 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.40 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.40 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.40 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.40 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.40 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.40 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.40 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.40 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.40 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.40 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.40 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.40 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.40 /testbed/sympy/matrices/matrices.py(4057):         try:
0.40 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.40 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.40 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.40 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.40 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.40 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.40 /testbed/sympy/matrices/matrices.py(2886):         if is_sequence(key):
0.40 /testbed/sympy/matrices/matrices.py(2887):             if not len(key) == 2:
0.40 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.40 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.40 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.40 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.40 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.40 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.40 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.40 /testbed/sympy/matrices/matrices.py(4057):         try:
0.40 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.40 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.40 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.40 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.40 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.40 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.40 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.40 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.40 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.40 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.40 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.40 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.40 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.40 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.40 /testbed/sympy/matrices/matrices.py(212):                 if not ret.is_Atom:
0.40 /testbed/sympy/matrices/matrices.py(213):                     cancel(ret)
0.40 /testbed/sympy/matrices/matrices.py(214):                 return ret
0.40 /testbed/sympy/matrices/matrices.py(2067):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.40 /testbed/sympy/matrices/matrices.py(2068):                          for j in range(cols)])
0.40 /testbed/sympy/matrices/matrices.py(2067):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.40 /testbed/sympy/matrices/matrices.py(211):                 ret = (pivot_val*tmp_mat[i, j + 1] - mat[pivot_pos, j + 1]*tmp_mat[i, 0]) / cumm
0.40 /testbed/sympy/matrices/matrices.py(2886):         if is_sequence(key):
0.40 /testbed/sympy/matrices/matrices.py(2887):             if not len(key) == 2:
0.40 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.40 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.40 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.40 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.40 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.40 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.40 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.40 /testbed/sympy/matrices/matrices.py(4057):         try:
0.40 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.40 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.40 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.40 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.40 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.40 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.40 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.40 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.40 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.40 /testbed/sympy/matrices/matrices.py(4057):         try:
0.40 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.40 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.40 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.40 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.40 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.40 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.40 /testbed/sympy/matrices/matrices.py(2886):         if is_sequence(key):
0.40 /testbed/sympy/matrices/matrices.py(2887):             if not len(key) == 2:
0.40 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.40 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.40 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.40 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.40 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.40 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.40 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.40 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.40 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.40 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.40 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.40 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.40 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.40 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.40 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.40 /testbed/sympy/matrices/matrices.py(4057):         try:
0.40 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.40 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.40 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.40 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.40 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.40 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.40 /testbed/sympy/matrices/matrices.py(2886):         if is_sequence(key):
0.40 /testbed/sympy/matrices/matrices.py(2887):             if not len(key) == 2:
0.40 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.40 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.40 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.40 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.40 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.40 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.40 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.40 /testbed/sympy/matrices/matrices.py(4057):         try:
0.40 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.40 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.40 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.40 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.40 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.40 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.40 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.40 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.40 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.40 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.40 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.40 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.40 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.40 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.40 /testbed/sympy/matrices/matrices.py(212):                 if not ret.is_Atom:
0.40 /testbed/sympy/matrices/matrices.py(213):                     cancel(ret)
0.40 /testbed/sympy/matrices/matrices.py(214):                 return ret
0.40 /testbed/sympy/matrices/matrices.py(2067):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.40 /testbed/sympy/matrices/matrices.py(2068):                          for j in range(cols)])
0.40 /testbed/sympy/matrices/matrices.py(2067):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.40 /testbed/sympy/matrices/matrices.py(211):                 ret = (pivot_val*tmp_mat[i, j + 1] - mat[pivot_pos, j + 1]*tmp_mat[i, 0]) / cumm
0.40 /testbed/sympy/matrices/matrices.py(2886):         if is_sequence(key):
0.40 /testbed/sympy/matrices/matrices.py(2887):             if not len(key) == 2:
0.40 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.40 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.40 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.40 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.40 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.40 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.40 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.40 /testbed/sympy/matrices/matrices.py(4057):         try:
0.40 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.40 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.40 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.40 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.40 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.40 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.40 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.40 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.40 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.40 /testbed/sympy/matrices/matrices.py(4057):         try:
0.40 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.40 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.40 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.40 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.40 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.40 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.40 /testbed/sympy/matrices/matrices.py(2886):         if is_sequence(key):
0.40 /testbed/sympy/matrices/matrices.py(2887):             if not len(key) == 2:
0.40 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.40 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.40 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.40 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.40 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.40 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.40 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.40 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.40 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.40 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.40 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.40 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.40 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.40 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.40 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.40 /testbed/sympy/matrices/matrices.py(4057):         try:
0.40 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.40 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.40 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.40 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.40 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.40 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.40 /testbed/sympy/matrices/matrices.py(2886):         if is_sequence(key):
0.40 /testbed/sympy/matrices/matrices.py(2887):             if not len(key) == 2:
0.40 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.40 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.40 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.40 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.40 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.40 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.40 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.40 /testbed/sympy/matrices/matrices.py(4057):         try:
0.40 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.40 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.40 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.40 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.40 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.40 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.40 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.40 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.40 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.40 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.40 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.40 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.40 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.40 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.40 /testbed/sympy/matrices/matrices.py(212):                 if not ret.is_Atom:
0.40 /testbed/sympy/matrices/matrices.py(213):                     cancel(ret)
0.41 /testbed/sympy/matrices/matrices.py(214):                 return ret
0.41 /testbed/sympy/matrices/matrices.py(2067):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.41 /testbed/sympy/matrices/matrices.py(2066):                     flat_list.extend(
0.41 /testbed/sympy/matrices/matrices.py(2065):                 for i in range(rows):
0.41 /testbed/sympy/matrices/matrices.py(2066):                     flat_list.extend(
0.41 /testbed/sympy/matrices/matrices.py(2067):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.41 /testbed/sympy/matrices/matrices.py(2068):                          for j in range(cols)])
0.41 /testbed/sympy/matrices/matrices.py(2067):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.41 /testbed/sympy/matrices/matrices.py(2067):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.41 /testbed/sympy/matrices/matrices.py(2068):                          for j in range(cols)])
0.41 /testbed/sympy/matrices/matrices.py(2067):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.41 /testbed/sympy/matrices/matrices.py(211):                 ret = (pivot_val*tmp_mat[i, j + 1] - mat[pivot_pos, j + 1]*tmp_mat[i, 0]) / cumm
0.41 /testbed/sympy/matrices/matrices.py(2886):         if is_sequence(key):
0.41 /testbed/sympy/matrices/matrices.py(2887):             if not len(key) == 2:
0.41 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.41 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.41 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.41 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.41 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.41 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.41 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.41 /testbed/sympy/matrices/matrices.py(4057):         try:
0.41 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.41 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.41 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.41 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.41 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.41 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.41 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.41 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.41 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.41 /testbed/sympy/matrices/matrices.py(4057):         try:
0.41 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.41 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.41 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.41 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.41 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.41 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.41 /testbed/sympy/matrices/matrices.py(2886):         if is_sequence(key):
0.41 /testbed/sympy/matrices/matrices.py(2887):             if not len(key) == 2:
0.41 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.41 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.41 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.41 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.41 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.41 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.41 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.41 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.41 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.41 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.41 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.41 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.41 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.41 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.41 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.41 /testbed/sympy/matrices/matrices.py(4057):         try:
0.41 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.41 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.41 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.41 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.41 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.41 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.41 /testbed/sympy/matrices/matrices.py(2886):         if is_sequence(key):
0.41 /testbed/sympy/matrices/matrices.py(2887):             if not len(key) == 2:
0.41 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.41 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.41 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.41 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.41 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.41 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.41 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.41 /testbed/sympy/matrices/matrices.py(4057):         try:
0.41 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.41 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.41 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.41 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.41 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.41 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.41 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.41 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.41 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.41 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.41 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.41 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.41 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.41 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.41 /testbed/sympy/matrices/matrices.py(212):                 if not ret.is_Atom:
0.41 /testbed/sympy/matrices/matrices.py(213):                     cancel(ret)
0.41 /testbed/sympy/matrices/matrices.py(214):                 return ret
0.41 /testbed/sympy/matrices/matrices.py(2067):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.41 /testbed/sympy/matrices/matrices.py(2068):                          for j in range(cols)])
0.41 /testbed/sympy/matrices/matrices.py(2067):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.41 /testbed/sympy/matrices/matrices.py(211):                 ret = (pivot_val*tmp_mat[i, j + 1] - mat[pivot_pos, j + 1]*tmp_mat[i, 0]) / cumm
0.41 /testbed/sympy/matrices/matrices.py(2886):         if is_sequence(key):
0.41 /testbed/sympy/matrices/matrices.py(2887):             if not len(key) == 2:
0.41 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.41 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.41 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.41 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.41 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.41 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.41 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.41 /testbed/sympy/matrices/matrices.py(4057):         try:
0.41 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.41 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.41 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.41 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.41 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.41 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.41 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.41 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.41 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.41 /testbed/sympy/matrices/matrices.py(4057):         try:
0.41 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.41 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.41 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.41 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.41 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.41 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.41 /testbed/sympy/matrices/matrices.py(2886):         if is_sequence(key):
0.41 /testbed/sympy/matrices/matrices.py(2887):             if not len(key) == 2:
0.41 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.41 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.41 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.41 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.41 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.41 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.41 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.41 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.41 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.41 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.41 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.41 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.41 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.41 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.41 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.41 /testbed/sympy/matrices/matrices.py(4057):         try:
0.41 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.41 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.41 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.41 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.41 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.41 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.41 /testbed/sympy/matrices/matrices.py(2886):         if is_sequence(key):
0.41 /testbed/sympy/matrices/matrices.py(2887):             if not len(key) == 2:
0.41 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.41 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.41 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.41 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.41 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.41 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.41 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.41 /testbed/sympy/matrices/matrices.py(4057):         try:
0.41 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.41 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.41 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.41 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.41 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.41 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.41 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.41 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.41 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.41 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.41 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.41 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.41 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.41 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.41 /testbed/sympy/matrices/matrices.py(212):                 if not ret.is_Atom:
0.41 /testbed/sympy/matrices/matrices.py(213):                     cancel(ret)
0.42 /testbed/sympy/matrices/matrices.py(214):                 return ret
0.42 /testbed/sympy/matrices/matrices.py(2067):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.42 /testbed/sympy/matrices/matrices.py(2068):                          for j in range(cols)])
0.42 /testbed/sympy/matrices/matrices.py(2067):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.42 /testbed/sympy/matrices/matrices.py(211):                 ret = (pivot_val*tmp_mat[i, j + 1] - mat[pivot_pos, j + 1]*tmp_mat[i, 0]) / cumm
0.42 /testbed/sympy/matrices/matrices.py(2886):         if is_sequence(key):
0.42 /testbed/sympy/matrices/matrices.py(2887):             if not len(key) == 2:
0.42 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.42 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.42 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.42 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.42 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.42 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.42 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.42 /testbed/sympy/matrices/matrices.py(4057):         try:
0.42 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.42 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.42 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.42 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.42 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.42 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.42 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.42 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.42 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.42 /testbed/sympy/matrices/matrices.py(4057):         try:
0.42 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.42 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.42 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.42 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.42 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.42 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.42 /testbed/sympy/matrices/matrices.py(2886):         if is_sequence(key):
0.42 /testbed/sympy/matrices/matrices.py(2887):             if not len(key) == 2:
0.42 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.42 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.42 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.42 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.42 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.42 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.42 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.42 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.42 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.42 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.42 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.42 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.42 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.42 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.42 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.42 /testbed/sympy/matrices/matrices.py(4057):         try:
0.42 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.42 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.42 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.42 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.42 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.42 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.42 /testbed/sympy/matrices/matrices.py(2886):         if is_sequence(key):
0.42 /testbed/sympy/matrices/matrices.py(2887):             if not len(key) == 2:
0.42 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.42 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.42 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.42 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.42 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.42 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.42 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.42 /testbed/sympy/matrices/matrices.py(4057):         try:
0.42 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.42 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.42 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.42 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.42 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.42 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.42 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.42 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.42 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.42 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.42 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.42 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.42 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.42 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.42 /testbed/sympy/matrices/matrices.py(212):                 if not ret.is_Atom:
0.42 /testbed/sympy/matrices/matrices.py(213):                     cancel(ret)
0.42 /testbed/sympy/matrices/matrices.py(214):                 return ret
0.42 /testbed/sympy/matrices/matrices.py(2067):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.42 /testbed/sympy/matrices/matrices.py(2068):                          for j in range(cols)])
0.42 /testbed/sympy/matrices/matrices.py(2067):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.42 /testbed/sympy/matrices/matrices.py(211):                 ret = (pivot_val*tmp_mat[i, j + 1] - mat[pivot_pos, j + 1]*tmp_mat[i, 0]) / cumm
0.42 /testbed/sympy/matrices/matrices.py(2886):         if is_sequence(key):
0.42 /testbed/sympy/matrices/matrices.py(2887):             if not len(key) == 2:
0.42 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.42 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.42 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.42 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.42 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.42 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.42 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.42 /testbed/sympy/matrices/matrices.py(4057):         try:
0.42 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.42 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.42 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.42 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.42 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.42 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.42 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.42 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.42 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.42 /testbed/sympy/matrices/matrices.py(4057):         try:
0.42 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.42 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.42 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.42 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.42 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.42 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.42 /testbed/sympy/matrices/matrices.py(2886):         if is_sequence(key):
0.42 /testbed/sympy/matrices/matrices.py(2887):             if not len(key) == 2:
0.42 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.42 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.42 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.42 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.42 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.42 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.42 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.42 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.42 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.42 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.42 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.42 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.42 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.42 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.42 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.42 /testbed/sympy/matrices/matrices.py(4057):         try:
0.42 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.42 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.42 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.42 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.42 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.42 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.42 /testbed/sympy/matrices/matrices.py(2886):         if is_sequence(key):
0.42 /testbed/sympy/matrices/matrices.py(2887):             if not len(key) == 2:
0.42 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.42 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.42 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.42 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.42 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.42 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.42 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.42 /testbed/sympy/matrices/matrices.py(4057):         try:
0.42 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.42 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.42 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.42 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.42 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.42 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.42 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.42 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.42 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.42 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.42 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.42 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.42 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.42 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.42 /testbed/sympy/matrices/matrices.py(212):                 if not ret.is_Atom:
0.42 /testbed/sympy/matrices/matrices.py(213):                     cancel(ret)
0.43 /testbed/sympy/matrices/matrices.py(214):                 return ret
0.43 /testbed/sympy/matrices/matrices.py(2067):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.43 /testbed/sympy/matrices/matrices.py(2066):                     flat_list.extend(
0.43 /testbed/sympy/matrices/matrices.py(2065):                 for i in range(rows):
0.43 /testbed/sympy/matrices/matrices.py(2066):                     flat_list.extend(
0.43 /testbed/sympy/matrices/matrices.py(2067):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.43 /testbed/sympy/matrices/matrices.py(2068):                          for j in range(cols)])
0.43 /testbed/sympy/matrices/matrices.py(2067):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.43 /testbed/sympy/matrices/matrices.py(2067):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.43 /testbed/sympy/matrices/matrices.py(2068):                          for j in range(cols)])
0.43 /testbed/sympy/matrices/matrices.py(2067):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.43 /testbed/sympy/matrices/matrices.py(211):                 ret = (pivot_val*tmp_mat[i, j + 1] - mat[pivot_pos, j + 1]*tmp_mat[i, 0]) / cumm
0.43 /testbed/sympy/matrices/matrices.py(2886):         if is_sequence(key):
0.43 /testbed/sympy/matrices/matrices.py(2887):             if not len(key) == 2:
0.43 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.43 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.43 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.43 /testbed/sympy/matrices/matrices.py(4057):         try:
0.43 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.43 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.43 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.43 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.43 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.43 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.43 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.43 /testbed/sympy/matrices/matrices.py(4057):         try:
0.43 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.43 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.43 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.43 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.43 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.43 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(2886):         if is_sequence(key):
0.43 /testbed/sympy/matrices/matrices.py(2887):             if not len(key) == 2:
0.43 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.43 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.43 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.43 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.43 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.43 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.43 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.43 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.43 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.43 /testbed/sympy/matrices/matrices.py(4057):         try:
0.43 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.43 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.43 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.43 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.43 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.43 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(2886):         if is_sequence(key):
0.43 /testbed/sympy/matrices/matrices.py(2887):             if not len(key) == 2:
0.43 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.43 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.43 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.43 /testbed/sympy/matrices/matrices.py(4057):         try:
0.43 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.43 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.43 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.43 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.43 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.43 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.43 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.43 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.43 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.43 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.43 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.43 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(212):                 if not ret.is_Atom:
0.43 /testbed/sympy/matrices/matrices.py(213):                     cancel(ret)
0.43 /testbed/sympy/matrices/matrices.py(214):                 return ret
0.43 /testbed/sympy/matrices/matrices.py(2067):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.43 /testbed/sympy/matrices/matrices.py(2068):                          for j in range(cols)])
0.43 /testbed/sympy/matrices/matrices.py(2067):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.43 /testbed/sympy/matrices/matrices.py(211):                 ret = (pivot_val*tmp_mat[i, j + 1] - mat[pivot_pos, j + 1]*tmp_mat[i, 0]) / cumm
0.43 /testbed/sympy/matrices/matrices.py(2886):         if is_sequence(key):
0.43 /testbed/sympy/matrices/matrices.py(2887):             if not len(key) == 2:
0.43 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.43 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.43 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.43 /testbed/sympy/matrices/matrices.py(4057):         try:
0.43 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.43 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.43 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.43 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.43 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.43 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.43 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.43 /testbed/sympy/matrices/matrices.py(4057):         try:
0.43 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.43 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.43 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.43 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.43 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.43 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(2886):         if is_sequence(key):
0.43 /testbed/sympy/matrices/matrices.py(2887):             if not len(key) == 2:
0.43 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.43 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.43 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.43 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.43 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.43 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.43 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.43 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.43 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.43 /testbed/sympy/matrices/matrices.py(4057):         try:
0.43 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.43 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.43 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.43 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.43 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.43 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(2886):         if is_sequence(key):
0.43 /testbed/sympy/matrices/matrices.py(2887):             if not len(key) == 2:
0.43 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.43 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.43 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.43 /testbed/sympy/matrices/matrices.py(4057):         try:
0.43 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.43 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.43 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.43 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.43 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.43 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.43 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.43 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.43 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.43 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.43 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.43 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(212):                 if not ret.is_Atom:
0.43 /testbed/sympy/matrices/matrices.py(213):                     cancel(ret)
0.44 /testbed/sympy/matrices/matrices.py(214):                 return ret
0.44 /testbed/sympy/matrices/matrices.py(2067):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.44 /testbed/sympy/matrices/matrices.py(2068):                          for j in range(cols)])
0.44 /testbed/sympy/matrices/matrices.py(2067):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.44 /testbed/sympy/matrices/matrices.py(211):                 ret = (pivot_val*tmp_mat[i, j + 1] - mat[pivot_pos, j + 1]*tmp_mat[i, 0]) / cumm
0.44 /testbed/sympy/matrices/matrices.py(2886):         if is_sequence(key):
0.44 /testbed/sympy/matrices/matrices.py(2887):             if not len(key) == 2:
0.44 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.44 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.44 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.44 /testbed/sympy/matrices/matrices.py(4057):         try:
0.44 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.44 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.44 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.44 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.44 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.44 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.44 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.44 /testbed/sympy/matrices/matrices.py(4057):         try:
0.44 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.44 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.44 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.44 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.44 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.44 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(2886):         if is_sequence(key):
0.44 /testbed/sympy/matrices/matrices.py(2887):             if not len(key) == 2:
0.44 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.44 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.44 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.44 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.44 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.44 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.44 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.44 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.44 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.44 /testbed/sympy/matrices/matrices.py(4057):         try:
0.44 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.44 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.44 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.44 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.44 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.44 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(2886):         if is_sequence(key):
0.44 /testbed/sympy/matrices/matrices.py(2887):             if not len(key) == 2:
0.44 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.44 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.44 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.44 /testbed/sympy/matrices/matrices.py(4057):         try:
0.44 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.44 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.44 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.44 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.44 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.44 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.44 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.44 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.44 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.44 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.44 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.44 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(212):                 if not ret.is_Atom:
0.44 /testbed/sympy/matrices/matrices.py(213):                     cancel(ret)
0.44 /testbed/sympy/matrices/matrices.py(214):                 return ret
0.44 /testbed/sympy/matrices/matrices.py(2067):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.44 /testbed/sympy/matrices/matrices.py(2068):                          for j in range(cols)])
0.44 /testbed/sympy/matrices/matrices.py(2067):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.44 /testbed/sympy/matrices/matrices.py(211):                 ret = (pivot_val*tmp_mat[i, j + 1] - mat[pivot_pos, j + 1]*tmp_mat[i, 0]) / cumm
0.44 /testbed/sympy/matrices/matrices.py(2886):         if is_sequence(key):
0.44 /testbed/sympy/matrices/matrices.py(2887):             if not len(key) == 2:
0.44 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.44 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.44 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.44 /testbed/sympy/matrices/matrices.py(4057):         try:
0.44 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.44 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.44 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.44 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.44 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.44 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.44 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.44 /testbed/sympy/matrices/matrices.py(4057):         try:
0.44 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.44 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.44 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.44 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.44 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.44 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.45 /testbed/sympy/matrices/matrices.py(2886):         if is_sequence(key):
0.45 /testbed/sympy/matrices/matrices.py(2887):             if not len(key) == 2:
0.45 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.45 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.45 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.45 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.45 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.45 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.45 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.45 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.45 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.45 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.45 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.45 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.45 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.45 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.45 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.45 /testbed/sympy/matrices/matrices.py(4057):         try:
0.45 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.45 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.45 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.45 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.45 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.45 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.45 /testbed/sympy/matrices/matrices.py(2886):         if is_sequence(key):
0.45 /testbed/sympy/matrices/matrices.py(2887):             if not len(key) == 2:
0.45 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.45 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.45 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.45 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.45 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.45 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.45 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.45 /testbed/sympy/matrices/matrices.py(4057):         try:
0.45 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.45 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.45 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.45 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.45 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.45 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.45 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.45 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.45 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.45 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.45 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.45 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.45 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.45 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.45 /testbed/sympy/matrices/matrices.py(212):                 if not ret.is_Atom:
0.45 /testbed/sympy/matrices/matrices.py(213):                     cancel(ret)
0.45 /testbed/sympy/matrices/matrices.py(214):                 return ret
0.45 /testbed/sympy/matrices/matrices.py(2067):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.45 /testbed/sympy/matrices/matrices.py(2066):                     flat_list.extend(
0.45 /testbed/sympy/matrices/matrices.py(2065):                 for i in range(rows):
0.45 /testbed/sympy/matrices/matrices.py(2066):                     flat_list.extend(
0.45 /testbed/sympy/matrices/matrices.py(2067):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.45 /testbed/sympy/matrices/matrices.py(2068):                          for j in range(cols)])
0.45 /testbed/sympy/matrices/matrices.py(2067):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.45 /testbed/sympy/matrices/matrices.py(2067):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.45 /testbed/sympy/matrices/matrices.py(2068):                          for j in range(cols)])
0.45 /testbed/sympy/matrices/matrices.py(2067):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.45 /testbed/sympy/matrices/matrices.py(211):                 ret = (pivot_val*tmp_mat[i, j + 1] - mat[pivot_pos, j + 1]*tmp_mat[i, 0]) / cumm
0.45 /testbed/sympy/matrices/matrices.py(2886):         if is_sequence(key):
0.45 /testbed/sympy/matrices/matrices.py(2887):             if not len(key) == 2:
0.45 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.45 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.45 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.45 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.45 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.45 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.45 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.45 /testbed/sympy/matrices/matrices.py(4057):         try:
0.45 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.45 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.45 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.45 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.45 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.45 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.45 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.45 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.45 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.45 /testbed/sympy/matrices/matrices.py(4057):         try:
0.45 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.45 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.45 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.45 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.45 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.45 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.45 /testbed/sympy/matrices/matrices.py(2886):         if is_sequence(key):
0.45 /testbed/sympy/matrices/matrices.py(2887):             if not len(key) == 2:
0.45 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.45 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.45 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.45 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.45 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.45 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.45 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.45 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.45 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.45 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.45 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.45 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.45 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.45 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.45 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.45 /testbed/sympy/matrices/matrices.py(4057):         try:
0.45 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.45 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.45 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.45 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.45 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.45 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.45 /testbed/sympy/matrices/matrices.py(2886):         if is_sequence(key):
0.45 /testbed/sympy/matrices/matrices.py(2887):             if not len(key) == 2:
0.45 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.45 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.45 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.45 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.45 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.45 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.45 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.45 /testbed/sympy/matrices/matrices.py(4057):         try:
0.45 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.45 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.45 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.45 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.45 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.45 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.45 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.45 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.45 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.45 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.45 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.45 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.45 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.45 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.45 /testbed/sympy/matrices/matrices.py(212):                 if not ret.is_Atom:
0.45 /testbed/sympy/matrices/matrices.py(213):                     cancel(ret)
0.46 /testbed/sympy/matrices/matrices.py(214):                 return ret
0.46 /testbed/sympy/matrices/matrices.py(2067):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.46 /testbed/sympy/matrices/matrices.py(2068):                          for j in range(cols)])
0.46 /testbed/sympy/matrices/matrices.py(2067):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.46 /testbed/sympy/matrices/matrices.py(211):                 ret = (pivot_val*tmp_mat[i, j + 1] - mat[pivot_pos, j + 1]*tmp_mat[i, 0]) / cumm
0.46 /testbed/sympy/matrices/matrices.py(2886):         if is_sequence(key):
0.46 /testbed/sympy/matrices/matrices.py(2887):             if not len(key) == 2:
0.46 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.46 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.46 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.46 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.46 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.46 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.46 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.46 /testbed/sympy/matrices/matrices.py(4057):         try:
0.46 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.46 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.46 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.46 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.46 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.46 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.46 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.46 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.46 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.46 /testbed/sympy/matrices/matrices.py(4057):         try:
0.46 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.46 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.46 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.46 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.46 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.46 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.46 /testbed/sympy/matrices/matrices.py(2886):         if is_sequence(key):
0.46 /testbed/sympy/matrices/matrices.py(2887):             if not len(key) == 2:
0.46 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.46 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.46 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.46 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.46 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.46 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.46 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.46 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.46 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.46 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.46 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.46 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.46 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.46 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.46 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.46 /testbed/sympy/matrices/matrices.py(4057):         try:
0.46 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.46 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.46 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.46 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.46 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.46 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.46 /testbed/sympy/matrices/matrices.py(2886):         if is_sequence(key):
0.46 /testbed/sympy/matrices/matrices.py(2887):             if not len(key) == 2:
0.46 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.46 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.46 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.46 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.46 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.46 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.46 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.46 /testbed/sympy/matrices/matrices.py(4057):         try:
0.46 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.46 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.46 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.46 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.46 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.46 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.46 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.46 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.46 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.46 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.46 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.46 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.46 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.46 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.46 /testbed/sympy/matrices/matrices.py(212):                 if not ret.is_Atom:
0.46 /testbed/sympy/matrices/matrices.py(213):                     cancel(ret)
0.46 /testbed/sympy/matrices/matrices.py(214):                 return ret
0.46 /testbed/sympy/matrices/matrices.py(2067):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.46 /testbed/sympy/matrices/matrices.py(2068):                          for j in range(cols)])
0.46 /testbed/sympy/matrices/matrices.py(2067):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.46 /testbed/sympy/matrices/matrices.py(211):                 ret = (pivot_val*tmp_mat[i, j + 1] - mat[pivot_pos, j + 1]*tmp_mat[i, 0]) / cumm
0.46 /testbed/sympy/matrices/matrices.py(2886):         if is_sequence(key):
0.46 /testbed/sympy/matrices/matrices.py(2887):             if not len(key) == 2:
0.46 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.46 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.46 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.46 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.46 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.46 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.46 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.46 /testbed/sympy/matrices/matrices.py(4057):         try:
0.46 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.46 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.46 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.46 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.46 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.46 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.46 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.46 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.46 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.46 /testbed/sympy/matrices/matrices.py(4057):         try:
0.46 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.46 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.46 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.46 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.46 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.46 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.46 /testbed/sympy/matrices/matrices.py(2886):         if is_sequence(key):
0.46 /testbed/sympy/matrices/matrices.py(2887):             if not len(key) == 2:
0.46 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.46 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.46 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.46 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.46 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.46 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.46 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.46 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.46 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.46 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.46 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.46 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.46 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.46 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.46 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.46 /testbed/sympy/matrices/matrices.py(4057):         try:
0.46 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.46 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.46 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.46 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.46 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.46 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.46 /testbed/sympy/matrices/matrices.py(2886):         if is_sequence(key):
0.46 /testbed/sympy/matrices/matrices.py(2887):             if not len(key) == 2:
0.46 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.46 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.46 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.46 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.46 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.46 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.46 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.46 /testbed/sympy/matrices/matrices.py(4057):         try:
0.46 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.46 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.46 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.46 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.46 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.46 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.46 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.46 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.46 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.46 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.46 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.46 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.46 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.46 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.46 /testbed/sympy/matrices/matrices.py(212):                 if not ret.is_Atom:
0.46 /testbed/sympy/matrices/matrices.py(213):                     cancel(ret)
0.47 /testbed/sympy/matrices/matrices.py(214):                 return ret
0.47 /testbed/sympy/matrices/matrices.py(2067):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.47 /testbed/sympy/matrices/matrices.py(2068):                          for j in range(cols)])
0.47 /testbed/sympy/matrices/matrices.py(2067):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.47 /testbed/sympy/matrices/matrices.py(211):                 ret = (pivot_val*tmp_mat[i, j + 1] - mat[pivot_pos, j + 1]*tmp_mat[i, 0]) / cumm
0.47 /testbed/sympy/matrices/matrices.py(2886):         if is_sequence(key):
0.47 /testbed/sympy/matrices/matrices.py(2887):             if not len(key) == 2:
0.47 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.47 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.47 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.47 /testbed/sympy/matrices/matrices.py(4057):         try:
0.47 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.47 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.47 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.47 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.47 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.47 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.47 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.47 /testbed/sympy/matrices/matrices.py(4057):         try:
0.47 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.47 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.47 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.47 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.47 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.47 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(2886):         if is_sequence(key):
0.47 /testbed/sympy/matrices/matrices.py(2887):             if not len(key) == 2:
0.47 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.47 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.47 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.47 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.47 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.47 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.47 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.47 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.47 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.47 /testbed/sympy/matrices/matrices.py(4057):         try:
0.47 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.47 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.47 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.47 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.47 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.47 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(2886):         if is_sequence(key):
0.47 /testbed/sympy/matrices/matrices.py(2887):             if not len(key) == 2:
0.47 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.47 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.47 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.47 /testbed/sympy/matrices/matrices.py(4057):         try:
0.47 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.47 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.47 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.47 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.47 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.47 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.47 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.47 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.47 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.47 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.47 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.47 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(212):                 if not ret.is_Atom:
0.47 /testbed/sympy/matrices/matrices.py(213):                     cancel(ret)
0.47 /testbed/sympy/matrices/matrices.py(214):                 return ret
0.47 /testbed/sympy/matrices/matrices.py(2067):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.47 /testbed/sympy/matrices/matrices.py(2066):                     flat_list.extend(
0.47 /testbed/sympy/matrices/matrices.py(2065):                 for i in range(rows):
0.47 /testbed/sympy/matrices/matrices.py(2085):         if flat_list is None:
0.47 /testbed/sympy/matrices/matrices.py(2088):         return rows, cols, flat_list
0.47 /testbed/sympy/matrices/matrices.py(187):             if mat.rows == 0:
0.47 /testbed/sympy/matrices/matrices.py(189):             elif mat.rows == 1:
0.47 /testbed/sympy/matrices/matrices.py(196):             pivot_pos, pivot_val, _, _ = _find_reasonable_pivot(mat[:, 0],
0.47 /testbed/sympy/matrices/matrices.py(2886):         if is_sequence(key):
0.47 /testbed/sympy/matrices/matrices.py(2887):             if not len(key) == 2:
0.47 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.47 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.47 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.47 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.47 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.47 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.47 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.47 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.47 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(197):                                          iszerofunc=_is_zero_after_expand_mul)
0.47 /testbed/sympy/matrices/matrices.py(196):             pivot_pos, pivot_val, _, _ = _find_reasonable_pivot(mat[:, 0],
0.47 /testbed/sympy/matrices/matrices.py(4087):     newly_determined = []
0.47 /testbed/sympy/matrices/matrices.py(4088):     col = list(col)
0.47 /testbed/sympy/matrices/matrices.py(1877):         return self.rows * self.cols
0.47 /testbed/sympy/matrices/matrices.py(1877):         return self.rows * self.cols
0.47 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.47 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.47 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.47 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.47 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.47 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.47 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.47 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.47 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.47 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.47 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.47 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.47 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.47 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.47 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.47 /testbed/sympy/matrices/matrices.py(4092):     if all(isinstance(x, (Float, Integer)) for x in col) and any(
0.47 /testbed/sympy/matrices/matrices.py(4092):     if all(isinstance(x, (Float, Integer)) for x in col) and any(
0.47 /testbed/sympy/matrices/matrices.py(4107):     possible_zeros = []
0.47 /testbed/sympy/matrices/matrices.py(4108):     for i, x in enumerate(col):
0.47 /testbed/sympy/matrices/matrices.py(4109):         is_zero = iszerofunc(x)
0.47 /testbed/sympy/matrices/matrices.py(46):     return expand_mul(x) == 0
0.47 /testbed/sympy/matrices/matrices.py(4113):         if is_zero == False:
0.47 /testbed/sympy/matrices/matrices.py(4115):             return (i, x, False, newly_determined)
0.47 /testbed/sympy/matrices/matrices.py(198):             if pivot_pos == None:
0.47 /testbed/sympy/matrices/matrices.py(203):             sign = (-1) ** (pivot_pos % 2)
0.47 /testbed/sympy/matrices/matrices.py(206):             rows = list(i for i in range(mat.rows) if i != pivot_pos)
0.47 /testbed/sympy/matrices/matrices.py(206):             rows = list(i for i in range(mat.rows) if i != pivot_pos)
0.47 /testbed/sympy/matrices/matrices.py(206):             rows = list(i for i in range(mat.rows) if i != pivot_pos)
0.47 /testbed/sympy/matrices/matrices.py(206):             rows = list(i for i in range(mat.rows) if i != pivot_pos)
0.47 /testbed/sympy/matrices/matrices.py(206):             rows = list(i for i in range(mat.rows) if i != pivot_pos)
0.47 /testbed/sympy/matrices/matrices.py(206):             rows = list(i for i in range(mat.rows) if i != pivot_pos)
0.47 /testbed/sympy/matrices/matrices.py(207):             cols = list(range(mat.cols))
0.47 /testbed/sympy/matrices/matrices.py(208):             tmp_mat = mat.extract(rows, cols)
0.47 /testbed/sympy/matrices/matrices.py(210):             def entry(i, j):
0.47 /testbed/sympy/matrices/matrices.py(216):             return sign*bareiss(self._new(mat.rows - 1, mat.cols - 1, entry), pivot_val)
0.47 /testbed/sympy/matrices/matrices.py(1985):         from sympy.matrices.sparse import SparseMatrix
0.47 /testbed/sympy/matrices/matrices.py(1987):         flat_list = None
0.47 /testbed/sympy/matrices/matrices.py(1989):         if len(args) == 1:
0.47 /testbed/sympy/matrices/matrices.py(2053):         elif len(args) == 3:
0.47 /testbed/sympy/matrices/matrices.py(2054):             rows = as_int(args[0])
0.47 /testbed/sympy/matrices/matrices.py(2055):             cols = as_int(args[1])
0.47 /testbed/sympy/matrices/matrices.py(2057):             if rows < 0 or cols < 0:
0.47 /testbed/sympy/matrices/matrices.py(2062):             if len(args) == 3 and isinstance(args[2], collections.Callable):
0.47 /testbed/sympy/matrices/matrices.py(2063):                 op = args[2]
0.47 /testbed/sympy/matrices/matrices.py(2064):                 flat_list = []
0.47 /testbed/sympy/matrices/matrices.py(2065):                 for i in range(rows):
0.47 /testbed/sympy/matrices/matrices.py(2066):                     flat_list.extend(
0.47 /testbed/sympy/matrices/matrices.py(2067):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.47 /testbed/sympy/matrices/matrices.py(2068):                          for j in range(cols)])
0.47 /testbed/sympy/matrices/matrices.py(2067):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.47 /testbed/sympy/matrices/matrices.py(2067):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.47 /testbed/sympy/matrices/matrices.py(2068):                          for j in range(cols)])
0.47 /testbed/sympy/matrices/matrices.py(2067):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.47 /testbed/sympy/matrices/matrices.py(211):                 ret = (pivot_val*tmp_mat[i, j + 1] - mat[pivot_pos, j + 1]*tmp_mat[i, 0]) / cumm
0.47 /testbed/sympy/matrices/matrices.py(2886):         if is_sequence(key):
0.47 /testbed/sympy/matrices/matrices.py(2887):             if not len(key) == 2:
0.47 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.47 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.47 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.47 /testbed/sympy/matrices/matrices.py(4057):         try:
0.47 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.47 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.47 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.47 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.47 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.47 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.47 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.47 /testbed/sympy/matrices/matrices.py(4057):         try:
0.47 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.47 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.47 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.47 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.47 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.47 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(2886):         if is_sequence(key):
0.47 /testbed/sympy/matrices/matrices.py(2887):             if not len(key) == 2:
0.47 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.47 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.47 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.47 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.47 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.47 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.47 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.47 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.47 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.47 /testbed/sympy/matrices/matrices.py(4057):         try:
0.47 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.47 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.47 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.47 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.47 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.47 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(2886):         if is_sequence(key):
0.47 /testbed/sympy/matrices/matrices.py(2887):             if not len(key) == 2:
0.47 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.47 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.47 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.47 /testbed/sympy/matrices/matrices.py(4057):         try:
0.47 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.47 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.47 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.47 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.47 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.47 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.47 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.47 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.47 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.47 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.47 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.47 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.49 /testbed/sympy/matrices/matrices.py(212):                 if not ret.is_Atom:
0.49 /testbed/sympy/matrices/matrices.py(213):                     cancel(ret)
0.51 /testbed/sympy/matrices/matrices.py(214):                 return ret
0.51 /testbed/sympy/matrices/matrices.py(2067):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.51 /testbed/sympy/matrices/matrices.py(2068):                          for j in range(cols)])
0.51 /testbed/sympy/matrices/matrices.py(2067):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.51 /testbed/sympy/matrices/matrices.py(211):                 ret = (pivot_val*tmp_mat[i, j + 1] - mat[pivot_pos, j + 1]*tmp_mat[i, 0]) / cumm
0.51 /testbed/sympy/matrices/matrices.py(2886):         if is_sequence(key):
0.51 /testbed/sympy/matrices/matrices.py(2887):             if not len(key) == 2:
0.51 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.51 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.51 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.51 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.51 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.51 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.51 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.51 /testbed/sympy/matrices/matrices.py(4057):         try:
0.51 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.51 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.51 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.51 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.51 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.51 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.51 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.51 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.51 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.51 /testbed/sympy/matrices/matrices.py(4057):         try:
0.51 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.51 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.51 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.51 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.51 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.51 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.51 /testbed/sympy/matrices/matrices.py(2886):         if is_sequence(key):
0.51 /testbed/sympy/matrices/matrices.py(2887):             if not len(key) == 2:
0.51 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.51 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.51 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.51 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.51 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.51 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.51 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.51 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.51 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.51 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.51 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.51 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.51 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.51 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.51 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.51 /testbed/sympy/matrices/matrices.py(4057):         try:
0.51 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.51 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.51 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.51 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.51 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.51 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.51 /testbed/sympy/matrices/matrices.py(2886):         if is_sequence(key):
0.51 /testbed/sympy/matrices/matrices.py(2887):             if not len(key) == 2:
0.51 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.51 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.51 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.51 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.51 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.51 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.51 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.51 /testbed/sympy/matrices/matrices.py(4057):         try:
0.51 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.51 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.51 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.51 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.51 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.51 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.51 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.51 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.51 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.51 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.51 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.51 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.51 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.51 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.51 /testbed/sympy/matrices/matrices.py(212):                 if not ret.is_Atom:
0.51 /testbed/sympy/matrices/matrices.py(213):                     cancel(ret)
0.53 /testbed/sympy/matrices/matrices.py(214):                 return ret
0.53 /testbed/sympy/matrices/matrices.py(2067):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.53 /testbed/sympy/matrices/matrices.py(2068):                          for j in range(cols)])
0.53 /testbed/sympy/matrices/matrices.py(2067):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.53 /testbed/sympy/matrices/matrices.py(211):                 ret = (pivot_val*tmp_mat[i, j + 1] - mat[pivot_pos, j + 1]*tmp_mat[i, 0]) / cumm
0.53 /testbed/sympy/matrices/matrices.py(2886):         if is_sequence(key):
0.53 /testbed/sympy/matrices/matrices.py(2887):             if not len(key) == 2:
0.53 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.53 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.53 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.53 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.53 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.53 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.53 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.53 /testbed/sympy/matrices/matrices.py(4057):         try:
0.53 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.53 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.53 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.53 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.53 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.53 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.53 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.53 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.53 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.53 /testbed/sympy/matrices/matrices.py(4057):         try:
0.53 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.53 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.53 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.53 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.53 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.53 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.53 /testbed/sympy/matrices/matrices.py(2886):         if is_sequence(key):
0.53 /testbed/sympy/matrices/matrices.py(2887):             if not len(key) == 2:
0.53 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.53 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.53 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.53 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.53 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.53 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.53 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.53 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.53 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.53 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.53 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.53 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.53 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.53 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.53 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.53 /testbed/sympy/matrices/matrices.py(4057):         try:
0.53 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.53 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.53 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.53 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.53 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.53 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.53 /testbed/sympy/matrices/matrices.py(2886):         if is_sequence(key):
0.53 /testbed/sympy/matrices/matrices.py(2887):             if not len(key) == 2:
0.53 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.53 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.53 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.53 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.53 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.53 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.53 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.53 /testbed/sympy/matrices/matrices.py(4057):         try:
0.53 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.53 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.53 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.53 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.53 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.53 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.53 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.53 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.53 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.53 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.53 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.53 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.53 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.53 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.54 /testbed/sympy/matrices/matrices.py(212):                 if not ret.is_Atom:
0.54 /testbed/sympy/matrices/matrices.py(213):                     cancel(ret)
0.56 /testbed/sympy/matrices/matrices.py(214):                 return ret
0.56 /testbed/sympy/matrices/matrices.py(2067):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.56 /testbed/sympy/matrices/matrices.py(2066):                     flat_list.extend(
0.56 /testbed/sympy/matrices/matrices.py(2065):                 for i in range(rows):
0.56 /testbed/sympy/matrices/matrices.py(2066):                     flat_list.extend(
0.56 /testbed/sympy/matrices/matrices.py(2067):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.56 /testbed/sympy/matrices/matrices.py(2068):                          for j in range(cols)])
0.56 /testbed/sympy/matrices/matrices.py(2067):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.56 /testbed/sympy/matrices/matrices.py(2067):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.56 /testbed/sympy/matrices/matrices.py(2068):                          for j in range(cols)])
0.56 /testbed/sympy/matrices/matrices.py(2067):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.56 /testbed/sympy/matrices/matrices.py(211):                 ret = (pivot_val*tmp_mat[i, j + 1] - mat[pivot_pos, j + 1]*tmp_mat[i, 0]) / cumm
0.56 /testbed/sympy/matrices/matrices.py(2886):         if is_sequence(key):
0.56 /testbed/sympy/matrices/matrices.py(2887):             if not len(key) == 2:
0.56 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.56 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.56 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.56 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.56 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.56 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.56 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.56 /testbed/sympy/matrices/matrices.py(4057):         try:
0.56 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.56 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.56 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.56 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.56 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.56 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.56 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.56 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.56 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.56 /testbed/sympy/matrices/matrices.py(4057):         try:
0.56 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.56 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.56 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.56 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.56 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.56 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.56 /testbed/sympy/matrices/matrices.py(2886):         if is_sequence(key):
0.56 /testbed/sympy/matrices/matrices.py(2887):             if not len(key) == 2:
0.56 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.56 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.56 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.56 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.56 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.56 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.56 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.56 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.56 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.56 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.56 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.56 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.56 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.56 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.56 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.56 /testbed/sympy/matrices/matrices.py(4057):         try:
0.56 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.56 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.56 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.56 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.56 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.56 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.56 /testbed/sympy/matrices/matrices.py(2886):         if is_sequence(key):
0.56 /testbed/sympy/matrices/matrices.py(2887):             if not len(key) == 2:
0.56 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.56 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.56 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.56 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.56 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.56 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.56 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.56 /testbed/sympy/matrices/matrices.py(4057):         try:
0.56 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.56 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.56 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.56 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.56 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.56 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.56 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.56 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.56 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.56 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.56 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.56 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.56 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.56 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.57 /testbed/sympy/matrices/matrices.py(212):                 if not ret.is_Atom:
0.57 /testbed/sympy/matrices/matrices.py(213):                     cancel(ret)
0.59 /testbed/sympy/matrices/matrices.py(214):                 return ret
0.59 /testbed/sympy/matrices/matrices.py(2067):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.59 /testbed/sympy/matrices/matrices.py(2068):                          for j in range(cols)])
0.59 /testbed/sympy/matrices/matrices.py(2067):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.59 /testbed/sympy/matrices/matrices.py(211):                 ret = (pivot_val*tmp_mat[i, j + 1] - mat[pivot_pos, j + 1]*tmp_mat[i, 0]) / cumm
0.59 /testbed/sympy/matrices/matrices.py(2886):         if is_sequence(key):
0.59 /testbed/sympy/matrices/matrices.py(2887):             if not len(key) == 2:
0.59 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.59 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.59 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.59 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.59 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.59 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.59 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.59 /testbed/sympy/matrices/matrices.py(4057):         try:
0.59 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.59 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.59 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.59 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.59 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.59 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.59 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.59 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.59 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.59 /testbed/sympy/matrices/matrices.py(4057):         try:
0.59 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.59 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.59 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.59 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.59 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.59 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.59 /testbed/sympy/matrices/matrices.py(2886):         if is_sequence(key):
0.59 /testbed/sympy/matrices/matrices.py(2887):             if not len(key) == 2:
0.59 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.59 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.59 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.59 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.59 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.59 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.59 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.59 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.59 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.59 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.59 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.59 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.59 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.59 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.59 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.59 /testbed/sympy/matrices/matrices.py(4057):         try:
0.59 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.59 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.59 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.59 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.59 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.59 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.59 /testbed/sympy/matrices/matrices.py(2886):         if is_sequence(key):
0.59 /testbed/sympy/matrices/matrices.py(2887):             if not len(key) == 2:
0.59 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.59 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.59 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.59 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.59 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.59 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.59 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.59 /testbed/sympy/matrices/matrices.py(4057):         try:
0.59 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.59 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.59 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.59 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.59 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.59 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.59 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.59 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.59 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.59 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.59 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.59 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.59 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.59 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.60 /testbed/sympy/matrices/matrices.py(212):                 if not ret.is_Atom:
0.60 /testbed/sympy/matrices/matrices.py(213):                     cancel(ret)
0.62 /testbed/sympy/matrices/matrices.py(214):                 return ret
0.62 /testbed/sympy/matrices/matrices.py(2067):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.62 /testbed/sympy/matrices/matrices.py(2068):                          for j in range(cols)])
0.62 /testbed/sympy/matrices/matrices.py(2067):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.62 /testbed/sympy/matrices/matrices.py(211):                 ret = (pivot_val*tmp_mat[i, j + 1] - mat[pivot_pos, j + 1]*tmp_mat[i, 0]) / cumm
0.62 /testbed/sympy/matrices/matrices.py(2886):         if is_sequence(key):
0.62 /testbed/sympy/matrices/matrices.py(2887):             if not len(key) == 2:
0.62 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.62 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.62 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.62 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.62 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.62 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.62 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.62 /testbed/sympy/matrices/matrices.py(4057):         try:
0.62 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.62 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.62 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.62 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.62 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.62 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.62 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.62 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.62 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.62 /testbed/sympy/matrices/matrices.py(4057):         try:
0.62 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.62 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.62 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.62 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.62 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.62 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.62 /testbed/sympy/matrices/matrices.py(2886):         if is_sequence(key):
0.62 /testbed/sympy/matrices/matrices.py(2887):             if not len(key) == 2:
0.62 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.62 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.62 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.62 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.62 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.62 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.62 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.62 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.62 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.62 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.62 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.62 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.62 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.62 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.62 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.62 /testbed/sympy/matrices/matrices.py(4057):         try:
0.62 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.62 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.62 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.62 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.62 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.62 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.62 /testbed/sympy/matrices/matrices.py(2886):         if is_sequence(key):
0.62 /testbed/sympy/matrices/matrices.py(2887):             if not len(key) == 2:
0.62 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.62 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.62 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.62 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.62 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.62 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.62 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.62 /testbed/sympy/matrices/matrices.py(4057):         try:
0.62 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.62 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.62 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.62 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.62 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.62 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.62 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.62 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.62 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.62 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.62 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.62 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.62 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.62 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.63 /testbed/sympy/matrices/matrices.py(212):                 if not ret.is_Atom:
0.63 /testbed/sympy/matrices/matrices.py(213):                     cancel(ret)
0.65 /testbed/sympy/matrices/matrices.py(214):                 return ret
0.65 /testbed/sympy/matrices/matrices.py(2067):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.65 /testbed/sympy/matrices/matrices.py(2066):                     flat_list.extend(
0.65 /testbed/sympy/matrices/matrices.py(2065):                 for i in range(rows):
0.65 /testbed/sympy/matrices/matrices.py(2066):                     flat_list.extend(
0.65 /testbed/sympy/matrices/matrices.py(2067):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.65 /testbed/sympy/matrices/matrices.py(2068):                          for j in range(cols)])
0.65 /testbed/sympy/matrices/matrices.py(2067):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.65 /testbed/sympy/matrices/matrices.py(2067):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.65 /testbed/sympy/matrices/matrices.py(2068):                          for j in range(cols)])
0.65 /testbed/sympy/matrices/matrices.py(2067):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.65 /testbed/sympy/matrices/matrices.py(211):                 ret = (pivot_val*tmp_mat[i, j + 1] - mat[pivot_pos, j + 1]*tmp_mat[i, 0]) / cumm
0.65 /testbed/sympy/matrices/matrices.py(2886):         if is_sequence(key):
0.65 /testbed/sympy/matrices/matrices.py(2887):             if not len(key) == 2:
0.65 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.65 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.65 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.65 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.65 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.65 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.65 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.65 /testbed/sympy/matrices/matrices.py(4057):         try:
0.65 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.65 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.65 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.65 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.65 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.65 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.65 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.65 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.65 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.65 /testbed/sympy/matrices/matrices.py(4057):         try:
0.65 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.65 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.65 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.65 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.65 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.65 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.65 /testbed/sympy/matrices/matrices.py(2886):         if is_sequence(key):
0.65 /testbed/sympy/matrices/matrices.py(2887):             if not len(key) == 2:
0.65 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.65 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.65 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.65 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.65 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.65 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.65 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.65 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.65 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.65 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.65 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.65 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.65 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.65 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.65 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.65 /testbed/sympy/matrices/matrices.py(4057):         try:
0.65 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.65 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.65 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.65 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.65 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.65 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.65 /testbed/sympy/matrices/matrices.py(2886):         if is_sequence(key):
0.65 /testbed/sympy/matrices/matrices.py(2887):             if not len(key) == 2:
0.65 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.65 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.65 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.65 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.65 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.65 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.65 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.65 /testbed/sympy/matrices/matrices.py(4057):         try:
0.65 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.65 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.65 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.65 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.65 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.65 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.65 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.65 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.65 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.65 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.65 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.65 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.65 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.65 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.66 /testbed/sympy/matrices/matrices.py(212):                 if not ret.is_Atom:
0.66 /testbed/sympy/matrices/matrices.py(213):                     cancel(ret)
0.68 /testbed/sympy/matrices/matrices.py(214):                 return ret
0.68 /testbed/sympy/matrices/matrices.py(2067):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.68 /testbed/sympy/matrices/matrices.py(2068):                          for j in range(cols)])
0.68 /testbed/sympy/matrices/matrices.py(2067):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.68 /testbed/sympy/matrices/matrices.py(211):                 ret = (pivot_val*tmp_mat[i, j + 1] - mat[pivot_pos, j + 1]*tmp_mat[i, 0]) / cumm
0.68 /testbed/sympy/matrices/matrices.py(2886):         if is_sequence(key):
0.68 /testbed/sympy/matrices/matrices.py(2887):             if not len(key) == 2:
0.68 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.68 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.68 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.68 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.68 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.68 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.68 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.68 /testbed/sympy/matrices/matrices.py(4057):         try:
0.68 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.68 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.68 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.68 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.68 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.68 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.68 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.68 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.68 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.68 /testbed/sympy/matrices/matrices.py(4057):         try:
0.68 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.68 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.68 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.68 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.68 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.68 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.68 /testbed/sympy/matrices/matrices.py(2886):         if is_sequence(key):
0.68 /testbed/sympy/matrices/matrices.py(2887):             if not len(key) == 2:
0.68 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.68 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.68 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.68 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.68 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.68 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.68 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.68 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.68 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.68 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.68 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.68 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.68 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.68 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.68 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.68 /testbed/sympy/matrices/matrices.py(4057):         try:
0.68 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.68 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.68 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.68 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.68 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.68 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.68 /testbed/sympy/matrices/matrices.py(2886):         if is_sequence(key):
0.68 /testbed/sympy/matrices/matrices.py(2887):             if not len(key) == 2:
0.68 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.68 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.68 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.68 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.68 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.68 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.68 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.68 /testbed/sympy/matrices/matrices.py(4057):         try:
0.68 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.68 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.68 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.68 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.68 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.68 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.68 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.68 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.68 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.68 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.68 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.68 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.68 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.68 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.69 /testbed/sympy/matrices/matrices.py(212):                 if not ret.is_Atom:
0.69 /testbed/sympy/matrices/matrices.py(213):                     cancel(ret)
0.71 /testbed/sympy/matrices/matrices.py(214):                 return ret
0.71 /testbed/sympy/matrices/matrices.py(2067):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.71 /testbed/sympy/matrices/matrices.py(2068):                          for j in range(cols)])
0.71 /testbed/sympy/matrices/matrices.py(2067):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.71 /testbed/sympy/matrices/matrices.py(211):                 ret = (pivot_val*tmp_mat[i, j + 1] - mat[pivot_pos, j + 1]*tmp_mat[i, 0]) / cumm
0.71 /testbed/sympy/matrices/matrices.py(2886):         if is_sequence(key):
0.71 /testbed/sympy/matrices/matrices.py(2887):             if not len(key) == 2:
0.71 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.71 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.71 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.71 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.71 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.71 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.71 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.71 /testbed/sympy/matrices/matrices.py(4057):         try:
0.71 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.71 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.71 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.71 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.71 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.71 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.71 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.71 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.71 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.71 /testbed/sympy/matrices/matrices.py(4057):         try:
0.71 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.71 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.71 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.71 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.71 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.71 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.71 /testbed/sympy/matrices/matrices.py(2886):         if is_sequence(key):
0.71 /testbed/sympy/matrices/matrices.py(2887):             if not len(key) == 2:
0.71 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.71 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.71 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.71 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.71 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.71 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.71 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.71 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.71 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.71 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.71 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.71 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.71 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.71 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.71 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.71 /testbed/sympy/matrices/matrices.py(4057):         try:
0.71 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.71 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.71 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.71 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.71 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.71 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.71 /testbed/sympy/matrices/matrices.py(2886):         if is_sequence(key):
0.71 /testbed/sympy/matrices/matrices.py(2887):             if not len(key) == 2:
0.71 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.71 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.71 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.71 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.71 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.71 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.71 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.71 /testbed/sympy/matrices/matrices.py(4057):         try:
0.71 /testbed/sympy/matrices/matrices.py(4058):             j = j.__index__()
0.71 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.71 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.71 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.71 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.71 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.71 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.71 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.71 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.71 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.71 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.71 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.71 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.71 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.72 /testbed/sympy/matrices/matrices.py(212):                 if not ret.is_Atom:
0.72 /testbed/sympy/matrices/matrices.py(213):                     cancel(ret)
0.74 /testbed/sympy/matrices/matrices.py(214):                 return ret
0.74 /testbed/sympy/matrices/matrices.py(2067):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.74 /testbed/sympy/matrices/matrices.py(2066):                     flat_list.extend(
0.74 /testbed/sympy/matrices/matrices.py(2065):                 for i in range(rows):
0.74 /testbed/sympy/matrices/matrices.py(2085):         if flat_list is None:
0.74 /testbed/sympy/matrices/matrices.py(2088):         return rows, cols, flat_list
0.74 /testbed/sympy/matrices/matrices.py(187):             if mat.rows == 0:
0.74 /testbed/sympy/matrices/matrices.py(189):             elif mat.rows == 1:
0.74 /testbed/sympy/matrices/matrices.py(196):             pivot_pos, pivot_val, _, _ = _find_reasonable_pivot(mat[:, 0],
0.74 /testbed/sympy/matrices/matrices.py(2886):         if is_sequence(key):
0.74 /testbed/sympy/matrices/matrices.py(2887):             if not len(key) == 2:
0.74 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.74 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.74 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.74 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.74 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.74 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.74 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.74 /testbed/sympy/matrices/matrices.py(2890):                     for i, n in zip(key, self.shape)]
0.74 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.74 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.74 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.74 /testbed/sympy/matrices/matrices.py(4062):         if j < 0:
0.74 /testbed/sympy/matrices/matrices.py(4064):         if not (j >= 0 and j < n):
0.74 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.74 /testbed/sympy/matrices/matrices.py(2889):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.74 /testbed/sympy/matrices/matrices.py(197):                                          iszerofunc=_is_zero_after_expand_mul)
0.74 /testbed/sympy/matrices/matrices.py(196):             pivot_pos, pivot_val, _, _ = _find_reasonable_pivot(mat[:, 0],
0.74 /testbed/sympy/matrices/matrices.py(4087):     newly_determined = []
0.74 /testbed/sympy/matrices/matrices.py(4088):     col = list(col)
0.74 /testbed/sympy/matrices/matrices.py(1877):         return self.rows * self.cols
0.74 /testbed/sympy/matrices/matrices.py(1877):         return self.rows * self.cols
0.74 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.74 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.74 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.74 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.74 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.74 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.74 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.74 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.74 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.74 /testbed/sympy/matrices/matrices.py(4056):     if type(j) is not int:
0.74 /testbed/sympy/matrices/matrices.py(4061):     if n is not None:
0.74 /testbed/sympy/matrices/matrices.py(4066):     return int(j)
0.74 /testbed/sympy/matrices/matrices.py(4092):     if all(isinstance(x, (Float, Integer)) for x in col) and any(
0.74 /testbed/sympy/matrices/matrices.py(4092):     if all(isinstance(x, (Float, Integer)) for x in col) and any(
0.74 /testbed/sympy/matrices/matrices.py(4107):     possible_zeros = []
0.74 /testbed/sympy/matrices/matrices.py(4108):     for i, x in enumerate(col):
0.74 /testbed/sympy/matrices/matrices.py(4109):         is_zero = iszerofunc(x)
0.74 /testbed/sympy/matrices/matrices.py(46):     return expand_mul(x) == 0
0.74 /testbed/sympy/matrices/matrices.py(4113):         if is_zero == False:
0.74 /testbed/sympy/matrices/matrices.py(4116):         possible_zeros.append(is_zero)
0.74 /testbed/sympy/matrices/matrices.py(4108):     for i, x in enumerate(col):
0.74 /testbed/sympy/matrices/matrices.py(4109):         is_zero = iszerofunc(x)
0.74 /testbed/sympy/matrices/matrices.py(46):     return expand_mul(x) == 0
0.75 /testbed/sympy/matrices/matrices.py(4113):         if is_zero == False:
0.75 /testbed/sympy/matrices/matrices.py(4116):         possible_zeros.append(is_zero)
0.75 /testbed/sympy/matrices/matrices.py(4108):     for i, x in enumerate(col):
0.75 /testbed/sympy/matrices/matrices.py(4109):         is_zero = iszerofunc(x)
0.75 /testbed/sympy/matrices/matrices.py(46):     return expand_mul(x) == 0
0.75 /testbed/sympy/matrices/matrices.py(4113):         if is_zero == False:
0.75 /testbed/sympy/matrices/matrices.py(4116):         possible_zeros.append(is_zero)
0.75 /testbed/sympy/matrices/matrices.py(4108):     for i, x in enumerate(col):
0.75 /testbed/sympy/matrices/matrices.py(4119):     if all(possible_zeros):
0.76 /testbed/sympy/matrices/matrices.py(4122):         return (None, None, False, newly_determined)
0.76 /testbed/sympy/matrices/matrices.py(198):             if pivot_pos == None:
0.76 /testbed/sympy/matrices/matrices.py(199):                 return S.Zero
E                                      [FAIL]


________________________________________________________________________________
 sympy/polys/tests/test_coverup_sympy__sympy-13877.py:test_determinant_nan_and_typeerror 
  File "/testbed/sympy/polys/tests/test_coverup_sympy__sympy-13877.py", line 13, in test_determinant_nan_and_typeerror
    with raises(TypeError, match="Invalid NaN comparison"):
TypeError: raises() got an unexpected keyword argument 'match'

=========== tests finished: 0 passed, 1 exceptions, in 0.38 seconds ============
DO *NOT* COMMIT!
0.76 /testbed/sympy/matrices/matrices.py(3664):     def QRdecomposition(self):
0.76 /testbed/sympy/matrices/matrices.py(3743):     def QRsolve(self, b):
0.76 /testbed/sympy/matrices/matrices.py(3788):     def solve_least_squares(self, rhs, method='CH'):
0.76 /testbed/sympy/matrices/matrices.py(3847):     def solve(self, rhs, method='GE'):
0.76 /testbed/sympy/matrices/matrices.py(3863):     def table(self, printer, rowstart='[', rowend=']', rowsep='\n',
0.76 /testbed/sympy/matrices/matrices.py(3941):     def upper_triangular_solve(self, rhs):
0.76 /testbed/sympy/matrices/matrices.py(3964):     def vech(self, diagonal=True, check_symmetry=True):
0.76 /testbed/sympy/matrices/matrices.py(4020): def classof(A, B):
0.76 /testbed/sympy/matrices/matrices.py(4054): def a2idx(j, n=None):
0.76 /testbed/sympy/matrices/matrices.py(4069): def _find_reasonable_pivot(col, iszerofunc=_iszero, simpfunc=_simplify):
0.76 /testbed/sympy/matrices/matrices.py(4172): def _find_reasonable_pivot_naive(col, iszerofunc=_iszero, simpfunc=None):
+ cat coverage.cover
{"/testbed/sympy/matrices/matrices.py": {"1": 1, "3": 1, "4": 1, "5": 1, "6": 1, "7": 1, "8": 1, "9": 1, "10": 1, "11": 1, "13": 1, "14": 1, "15": 1, "16": 1, "17": 1, "18": 1, "19": 1, "20": 1, "21": 1, "23": 1, "24": 1, "25": 1, "29": 1, "31": 1, "35": 1, "43": 1, "49": 2, "80": 2, "477": 2, "898": 2, "1026": 2, "1553": 2, "1692": 2, "1843": 3, "1844": 1, "1845": 1, "1846": 1, "4020": 1, "4054": 1, "4069": 1, "4172": 1, "37": 0, "38": 0, "39": 0, "40": 0, "46": 6, "65": 1, "73": 1, "76": 1, "66": 0, "67": 0, "68": 0, "69": 0, "70": 0, "71": 0, "74": 0, "77": 0, "84": 1, "128": 1, "172": 1, "220": 1, "225": 1, "272": 1, "277": 1, "292": 1, "351": 1, "367": 1, "385": 1, "434": 1, "452": 1, "89": 0, "90": 0, "97": 0, "98": 0, "114": 0, "115": 0, "116": 0, "117": 0, "118": 0, "120": 0, "125": 0, "126": 0, "121": 0, "122": 0, "123": 0, "164": 0, "165": 0, "166": 0, "167": 0, "169": 0, "170": 0, "186": 1, "218": 1, "187": 3, "188": 0, "189": 3, "190": 0, "196": 6, "197": 3, "198": 3, "199": 1, "203": 2, "206": 13, "207": 2, "208": 2, "210": 2, "216": 2, "211": 25, "212": 25, "213": 24, "214": 25, "222": 0, "223": 0, "240": 0, "241": 0, "246": 0, "257": 0, "258": 0, "261": 0, "266": 0, "267": 0, "270": 0, "275": 1, "290": 0, "344": 0, "345": 0, "347": 0, "348": 0, "349": 0, "362": 0, "363": 0, "365": 0, "379": 0, "380": 0, "382": 0, "383": 0, "398": 1, "399": 1, "400": 0, "401": 1, "402": 0, "403": 1, "404": 0, "409": 1, "410": 0, "412": 1, "413": 1, "414": 0, "415": 1, "416": 0, "417": 1, "418": 0, "419": 1, "420": 0, "421": 0, "422": 0, "423": 0, "424": 0, "425": 0, "427": 1, "428": 1, "429": 0, "430": 0, "431": 0, "432": 0, "447": 0, "448": 0, "450": 0, "463": 0, "464": 0, "465": 0, "466": 0, "468": 0, "469": 0, "470": 0, "472": 0, "473": 0, "474": 0, "481": 1, "490": 1, "497": 1, "504": 1, "513": 1, "520": 1, "527": 1, "536": 1, "544": 1, "550": 1, "599": 1, "618": 1, "716": 1, "729": 1, "759": 1, "789": 1, "790": 1, "797": 1, "836": 1, "482": 0, "488": 0, "483": 0, "484": 0, "485": 0, "486": 0, "487": 0, "491": 0, "495": 0, "492": 0, "493": 0, "494": 0, "498": 0, "502": 0, "499": 0, "500": 0, "501": 0, "505": 0, "511": 0, "506": 0, "507": 0, "508": 0, "509": 0, "510": 0, "514": 0, "518": 0, "515": 0, "516": 0, "517": 0, "521": 0, "525": 0, "522": 0, "523": 0, "524": 0, "530": 0, "531": 0, "532": 0, "533": 0, "534": 0, "537": 0, "538": 0, "539": 0, "540": 0, "541": 0, "542": 0, "545": 0, "546": 0, "547": 0, "548": 0, "553": 0, "554": 0, "555": 0, "558": 0, "559": 0, "560": 0, "561": 0, "562": 0, "563": 0, "564": 0, "566": 0, "570": 0, "571": 0, "573": 0, "574": 0, "575": 0, "576": 0, "577": 0, "578": 0, "579": 0, "580": 0, "581": 0, "583": 0, "584": 0, "585": 0, "586": 0, "587": 0, "588": 0, "589": 0, "590": 0, "591": 0, "592": 0, "593": 0, "594": 0, "595": 0, "597": 0, "609": 0, "613": 0, "614": 0, "616": 0, "612": 0, "641": 0, "642": 0, "643": 0, "646": 0, "650": 0, "656": 0, "657": 0, "658": 0, "660": 0, "662": 0, "663": 0, "661": 0, "667": 0, "668": 0, "669": 0, "671": 0, "672": 0, "673": 0, "675": 0, "676": 0, "677": 0, "678": 0, "682": 0, "683": 0, "684": 0, "685": 0, "686": 0, "688": 0, "691": 0, "693": 0, "694": 0, "696": 0, "697": 0, "699": 0, "700": 0, "701": 0, "703": 0, "704": 0, "707": 0, "708": 0, "709": 0, "710": 0, "711": 0, "712": 0, "714": 0, "644": 0, "648": 0, "647": 0, "652": 0, "653": 0, "654": 0, "721": 0, "722": 0, "724": 0, "725": 0, "726": 0, "727": 0, "749": 0, "752": 0, "753": 0, "754": 0, "755": 0, "756": 0, "757": 0, "779": 0, "782": 0, "783": 0, "784": 0, "785": 0, "786": 0, "787": 0, "795": 0, "810": 0, "811": 0, "816": 0, "817": 0, "818": 0, "819": 0, "820": 0, "821": 0, "822": 0, "823": 0, "824": 0, "825": 0, "826": 0, "827": 0, "828": 0, "829": 0, "830": 0, "832": 0, "833": 0, "834": 0, "887": 0, "888": 0, "890": 0, "891": 0, "892": 0, "893": 0, "894": 0, "895": 0, "902": 1, "934": 1, "977": 1, "984": 1, "985": 1, "930": 0, "932": 0, "960": 0, "962": 0, "964": 0, "965": 0, "968": 0, "969": 0, "970": 0, "971": 0, "972": 0, "973": 0, "975": 0, "980": 0, "982": 0, "997": 0, "999": 0, "1002": 0, "1010": 0, "1012": 0, "1013": 0, "1015": 0, "1016": 0, "1017": 0, "1018": 0, "1020": 0, "1021": 0, "1023": 0, "1000": 0, "1005": 0, "1006": 0, "1007": 0, "1008": 0, "1030": 1, "1031": 1, "1033": 1, "1106": 1, "1138": 1, "1207": 1, "1296": 1, "1488": 1, "1521": 1, "1083": 0, "1084": 0, "1086": 0, "1087": 0, "1089": 0, "1090": 0, "1091": 0, "1093": 0, "1094": 0, "1096": 0, "1097": 0, "1098": 0, "1099": 0, "1101": 0, "1102": 0, "1104": 0, "1121": 0, "1122": 0, "1123": 0, "1124": 0, "1125": 0, "1126": 0, "1128": 0, "1129": 0, "1133": 0, "1134": 0, "1136": 0, "1160": 0, "1162": 0, "1163": 0, "1164": 0, "1165": 0, "1166": 0, "1168": 0, "1170": 0, "1172": 0, "1173": 0, "1174": 0, "1176": 0, "1190": 0, "1191": 0, "1192": 0, "1193": 0, "1194": 0, "1195": 0, "1198": 0, "1201": 0, "1202": 0, "1204": 0, "1205": 0, "1178": 0, "1179": 0, "1183": 0, "1184": 0, "1185": 0, "1186": 0, "1187": 0, "1188": 0, "1199": 0, "1200": 0, "1258": 0, "1259": 0, "1260": 0, "1262": 0, "1268": 0, "1269": 0, "1270": 0, "1273": 0, "1274": 0, "1275": 0, "1276": 0, "1278": 0, "1280": 0, "1281": 0, "1282": 0, "1284": 0, "1285": 0, "1286": 0, "1288": 0, "1289": 0, "1291": 0, "1292": 0, "1293": 0, "1294": 0, "1264": 0, "1265": 0, "1266": 0, "1332": 0, "1333": 0, "1335": 0, "1336": 0, "1337": 0, "1339": 0, "1340": 0, "1341": 0, "1342": 0, "1345": 0, "1348": 0, "1350": 0, "1360": 0, "1361": 0, "1373": 0, "1388": 0, "1401": 0, "1412": 0, "1413": 0, "1416": 0, "1420": 0, "1421": 0, "1426": 0, "1427": 0, "1428": 0, "1429": 0, "1430": 0, "1431": 0, "1432": 0, "1433": 0, "1435": 0, "1436": 0, "1437": 0, "1438": 0, "1443": 0, "1445": 0, "1447": 0, "1448": 0, "1449": 0, "1450": 0, "1452": 0, "1453": 0, "1466": 0, "1468": 0, "1469": 0, "1470": 0, "1471": 0, "1472": 0, "1473": 0, "1474": 0, "1479": 0, "1480": 0, "1481": 0, "1482": 0, "1484": 0, "1486": 0, "1353": 0, "1354": 0, "1355": 0, "1356": 0, "1357": 0, "1364": 0, "1365": 0, "1366": 0, "1367": 0, "1369": 0, "1370": 0, "1378": 0, "1379": 0, "1380": 0, "1381": 0, "1382": 0, "1383": 0, "1384": 0, "1385": 0, "1386": 0, "1395": 0, "1398": 0, "1399": 0, "1404": 0, "1405": 0, "1406": 0, "1407": 0, "1408": 0, "1409": 0, "1517": 0, "1519": 0, "1538": 0, "1540": 0, "1543": 0, "1544": 0, "1545": 0, "1547": 0, "1549": 0, "1556": 1, "1580": 1, "1583": 1, "1610": 1, "1667": 1, "1577": 0, "1578": 0, "1581": 0, "1608": 0, "1646": 0, "1647": 0, "1650": 0, "1651": 0, "1652": 0, "1653": 0, "1655": 0, "1656": 0, "1657": 0, "1658": 0, "1659": 0, "1661": 0, "1665": 0, "1688": 0, "1695": 1, "1698": 1, "1709": 1, "1719": 1, "1735": 1, "1775": 1, "1778": 1, "1781": 1, "1800": 1, "1821": 1, "1824": 1, "1828": 1, "1831": 1, "1834": 1, "1838": 1, "1696": 0, "1707": 0, "1717": 0, "1727": 0, "1729": 0, "1730": 0, "1731": 0, "1733": 0, "1736": 0, "1737": 0, "1738": 0, "1739": 0, "1741": 0, "1742": 0, "1744": 0, "1745": 0, "1747": 0, "1748": 0, "1750": 0, "1751": 0, "1753": 0, "1755": 0, "1756": 0, "1758": 0, "1759": 0, "1761": 0, "1763": 0, "1764": 0, "1766": 0, "1768": 0, "1770": 0, "1771": 0, "1773": 0, "1776": 0, "1779": 0, "1798": 0, "1819": 0, "1822": 0, "1825": 0, "1826": 0, "1829": 0, "1832": 0, "1836": 0, "1840": 0, "1849": 1, "1851": 1, "1852": 1, "1853": 1, "1855": 1, "1857": 1, "1861": 1, "1872": 1, "1879": 1, "1889": 1, "1892": 1, "1918": 1, "1921": 1, "1926": 1, "1931": 1, "1942": 1, "1943": 1, "2090": 1, "2160": 1, "2164": 1, "2193": 1, "2230": 1, "2253": 1, "2270": 1, "2302": 1, "2303": 1, "2345": 1, "2376": 1, "2435": 1, "2474": 1, "2513": 1, "2647": 1, "2689": 1, "2713": 1, "2734": 1, "2753": 1, "2817": 1, "2846": 1, "2876": 1, "2896": 1, "2936": 1, "2977": 1, "3002": 1, "3003": 1, "3004": 1, "3001": 1, "3073": 1, "3074": 1, "3075": 1, "3072": 1, "3269": 1, "3318": 1, "3358": 1, "3370": 1, "3384": 1, "3484": 1, "3570": 1, "3614": 1, "3648": 1, "3664": 1, "3743": 1, "3788": 1, "3847": 1, "3863": 1, "3941": 1, "3964": 1, "1858": 0, "1859": 0, "1862": 0, "1863": 0, "1867": 0, "1869": 0, "1870": 0, "1864": 0, "1865": 0, "1877": 6, "1880": 0, "1881": 0, "1882": 0, "1883": 0, "1884": 0, "1885": 0, "1886": 0, "1890": 0, "1893": 0, "1894": 0, "1896": 0, "1910": 0, "1911": 0, "1913": 0, "1914": 0, "1915": 0, "1916": 0, "1897": 0, "1898": 0, "1899": 0, "1900": 0, "1901": 0, "1902": 0, "1903": 0, "1904": 0, "1905": 0, "1906": 0, "1907": 0, "1908": 0, "1919": 0, "1922": 0, "1923": 0, "1924": 0, "1927": 0, "1928": 0, "1929": 0, "1932": 0, "1933": 0, "1934": 0, "1936": 0, "1937": 0, "1938": 0, "1939": 0, "1940": 0, "1985": 4, "1987": 4, "1989": 4, "1991": 2, "1992": 0, "1995": 2, "1996": 0, "1999": 2, "2000": 0, "2003": 2, "2007": 0, "2008": 0, "2009": 0, "2010": 0, "2011": 0, "2012": 0, "2013": 0, "2014": 0, "2015": 0, "2016": 0, "2017": 0, "2019": 0, "2020": 0, "2023": 4, "2024": 2, "2025": 2, "2026": 2, "2027": 12, "2028": 10, "2029": 0, "2030": 0, "2031": 0, "2033": 10, "2034": 10, "2035": 10, "2036": 0, "2037": 0, "2038": 2, "2039": 0, "2040": 0, "2041": 2, "2042": 2, "2043": 2, "2044": 2, "2045": 0, "2046": 0, "2047": 0, "2048": 2, "2049": 12, "2050": 60, "2051": 50, "2053": 2, "2054": 2, "2055": 2, "2057": 2, "2058": 0, "2059": 0, "2062": 2, "2063": 2, "2064": 2, "2065": 9, "2066": 14, "2067": 71, "2068": 32, "2071": 0, "2072": 0, "2073": 0, "2074": 0, "2075": 0, "2076": 0, "2080": 0, "2082": 0, "2083": 0, "2085": 4, "2086": 0, "2088": 4, "2130": 0, "2132": 0, "2133": 0, "2134": 0, "2135": 0, "2136": 0, "2137": 0, "2138": 0, "2139": 0, "2140": 0, "2141": 0, "2142": 0, "2144": 0, "2145": 0, "2146": 0, "2147": 0, "2148": 0, "2149": 0, "2150": 0, "2151": 0, "2153": 0, "2154": 0, "2155": 0, "2157": 0, "2158": 0, "2162": 0, "2182": 0, "2183": 0, "2184": 0, "2185": 0, "2186": 0, "2188": 0, "2190": 0, "2191": 0, "2224": 0, "2225": 0, "2226": 0, "2227": 0, "2228": 0, "2248": 0, "2249": 0, "2250": 0, "2251": 0, "2268": 0, "2289": 0, "2290": 0, "2291": 0, "2292": 0, "2293": 0, "2294": 0, "2295": 0, "2297": 0, "2298": 0, "2299": 0, "2300": 0, "2336": 0, "2337": 0, "2342": 0, "2343": 0, "2370": 0, "2371": 0, "2372": 0, "2373": 0, "2374": 0, "2404": 0, "2406": 0, "2407": 0, "2408": 0, "2409": 0, "2410": 0, "2411": 0, "2412": 0, "2414": 0, "2415": 0, "2416": 0, "2418": 0, "2419": 0, "2420": 0, "2421": 0, "2422": 0, "2423": 0, "2424": 0, "2425": 0, "2426": 0, "2427": 0, "2428": 0, "2429": 0, "2430": 0, "2432": 0, "2433": 0, "2447": 0, "2448": 0, "2450": 0, "2451": 0, "2452": 0, "2453": 0, "2455": 0, "2456": 0, "2457": 0, "2458": 0, "2459": 0, "2460": 0, "2461": 0, "2463": 0, "2464": 0, "2465": 0, "2466": 0, "2467": 0, "2468": 0, "2469": 0, "2470": 0, "2472": 0, "2476": 0, "2477": 0, "2478": 0, "2479": 0, "2480": 0, "2481": 0, "2482": 0, "2483": 0, "2484": 0, "2486": 0, "2506": 0, "2507": 0, "2508": 0, "2510": 0, "2511": 0, "2488": 0, "2489": 0, "2490": 0, "2491": 0, "2493": 0, "2495": 0, "2497": 0, "2499": 0, "2500": 0, "2501": 0, "2503": 0, "2504": 0, "2596": 0, "2598": 0, "2599": 0, "2602": 0, "2603": 0, "2604": 0, "2605": 0, "2608": 0, "2609": 0, "2611": 0, "2612": 0, "2614": 0, "2618": 0, "2619": 0, "2622": 0, "2623": 0, "2627": 0, "2628": 0, "2629": 0, "2630": 0, "2633": 0, "2634": 0, "2635": 0, "2638": 0, "2639": 0, "2640": 0, "2642": 0, "2643": 0, "2645": 0, "2674": 0, "2675": 0, "2676": 0, "2677": 0, "2678": 0, "2679": 0, "2680": 0, "2681": 0, "2682": 0, "2683": 0, "2684": 0, "2685": 0, "2687": 0, "2686": 0, "2699": 0, "2700": 0, "2702": 0, "2703": 0, "2704": 0, "2706": 0, "2707": 0, "2708": 0, "2709": 0, "2711": 0, "2723": 0, "2724": 0, "2725": 0, "2727": 0, "2728": 0, "2729": 0, "2730": 0, "2732": 0, "2744": 0, "2745": 0, "2747": 0, "2748": 0, "2749": 0, "2751": 0, "2811": 0, "2812": 0, "2813": 0, "2814": 0, "2815": 0, "2835": 0, "2836": 0, "2837": 0, "2838": 0, "2839": 0, "2840": 0, "2841": 0, "2842": 0, "2843": 0, "2844": 0, "2857": 0, "2858": 0, "2859": 0, "2860": 0, "2862": 0, "2864": 0, "2865": 0, "2866": 0, "2867": 0, "2868": 0, "2870": 0, "2872": 0, "2873": 0, "2874": 0, "2886": 78, "2887": 78, "2888": 0, "2889": 546, "2890": 234, "2891": 0, "2892": 0, "2894": 0, "2930": 0, "2931": 0, "2932": 0, "2933": 0, "2934": 0, "2965": 0, "2966": 0, "2967": 0, "2968": 0, "2969": 0, "2971": 0, "2973": 0, "2974": 0, "2975": 0, "2993": 0, "2994": 0, "2995": 0, "2996": 0, "2997": 0, "2998": 0, "2999": 0, "3040": 0, "3041": 0, "3042": 0, "3051": 0, "3063": 0, "3066": 0, "3067": 0, "3069": 0, "3052": 0, "3054": 0, "3055": 0, "3056": 0, "3057": 0, "3058": 0, "3061": 0, "3064": 0, "3155": 0, "3159": 0, "3162": 0, "3164": 0, "3165": 0, "3167": 0, "3168": 0, "3179": 0, "3180": 0, "3181": 0, "3183": 0, "3182": 0, "3184": 0, "3185": 0, "3188": 0, "3190": 0, "3196": 0, "3202": 0, "3204": 0, "3210": 0, "3213": 0, "3214": 0, "3216": 0, "3222": 0, "3226": 0, "3225": 0, "3230": 0, "3229": 0, "3237": 0, "3238": 0, "3242": 0, "3241": 0, "3250": 0, "3251": 0, "3253": 0, "3258": 0, "3259": 0, "3261": 0, "3262": 0, "3265": 0, "3267": 0, "3288": 0, "3289": 0, "3290": 0, "3292": 0, "3293": 0, "3294": 0, "3295": 0, "3297": 0, "3298": 0, "3299": 0, "3300": 0, "3301": 0, "3303": 0, "3304": 0, "3305": 0, "3306": 0, "3307": 0, "3308": 0, "3309": 0, "3310": 0, "3311": 0, "3312": 0, "3313": 0, "3314": 0, "3315": 0, "3316": 0, "3337": 0, "3338": 0, "3339": 0, "3341": 0, "3342": 0, "3343": 0, "3345": 0, "3346": 0, "3347": 0, "3348": 0, "3350": 0, "3351": 0, "3352": 0, "3353": 0, "3354": 0, "3355": 0, "3356": 0, "3368": 0, "3378": 0, "3379": 0, "3380": 0, "3381": 0, "3382": 0, "3436": 0, "3437": 0, "3438": 0, "3439": 0, "3441": 0, "3442": 0, "3444": 0, "3445": 0, "3447": 0, "3448": 0, "3452": 0, "3453": 0, "3454": 0, "3455": 0, "3459": 0, "3460": 0, "3461": 0, "3463": 0, "3465": 0, "3467": 0, "3469": 0, "3471": 0, "3472": 0, "3473": 0, "3475": 0, "3476": 0, "3477": 0, "3479": 0, "3482": 0, "3561": 0, "3562": 0, "3563": 0, "3564": 0, "3565": 0, "3566": 0, "3567": 0, "3568": 0, "3599": 0, "3600": 0, "3602": 0, "3603": 0, "3604": 0, "3605": 0, "3606": 0, "3608": 0, "3609": 0, "3611": 0, "3637": 0, "3638": 0, "3639": 0, "3640": 0, "3641": 0, "3642": 0, "3644": 0, "3645": 0, "3646": 0, "3662": 0, "3711": 0, "3712": 0, "3714": 0, "3715": 0, "3716": 0, "3717": 0, "3718": 0, "3719": 0, "3720": 0, "3721": 0, "3722": 0, "3723": 0, "3724": 0, "3725": 0, "3726": 0, "3727": 0, "3728": 0, "3729": 0, "3731": 0, "3732": 0, "3734": 0, "3735": 0, "3736": 0, "3737": 0, "3738": 0, "3739": 0, "3740": 0, "3741": 0, "3773": 0, "3774": 0, "3779": 0, "3780": 0, "3781": 0, "3782": 0, "3783": 0, "3784": 0, "3785": 0, "3786": 0, "3842": 0, "3843": 0, "3844": 0, "3845": 0, "3853": 0, "3854": 0, "3855": 0, "3857": 0, "3858": 0, "3861": 0, "3914": 0, "3915": 0, "3917": 0, "3919": 0, "3920": 0, "3921": 0, "3922": 0, "3923": 0, "3924": 0, "3925": 0, "3928": 0, "3929": 0, "3930": 0, "3931": 0, "3932": 0, "3933": 0, "3927": 0, "3934": 0, "3935": 0, "3936": 0, "3937": 0, "3938": 0, "3939": 0, "3956": 0, "3957": 0, "3958": 0, "3959": 0, "3960": 0, "3961": 0, "3962": 0, "3994": 0, "3996": 0, "3997": 0, "3998": 0, "3999": 0, "4000": 0, "4001": 0, "4002": 0, "4003": 0, "4004": 0, "4005": 0, "4006": 0, "4007": 0, "4008": 0, "4009": 0, "4010": 0, "4012": 0, "4013": 0, "4014": 0, "4015": 0, "4016": 0, "4017": 0, "4036": 0, "4037": 0, "4038": 0, "4040": 0, "4041": 0, "4042": 0, "4043": 0, "4044": 0, "4045": 0, "4046": 0, "4047": 0, "4048": 0, "4049": 0, "4050": 0, "4051": 0, "4056": 168, "4057": 100, "4058": 100, "4059": 0, "4060": 0, "4061": 168, "4062": 153, "4063": 0, "4064": 153, "4065": 0, "4066": 168, "4087": 3, "4088": 3, "4092": 7, "4093": 0, "4094": 0, "4095": 0, "4096": 0, "4100": 0, "4101": 0, "4102": 0, "4103": 0, "4104": 0, "4107": 3, "4108": 7, "4109": 6, "4113": 6, "4115": 2, "4116": 4, "4119": 1, "4122": 1, "4129": 0, "4130": 0, "4131": 0, "4132": 0, "4133": 0, "4134": 0, "4135": 0, "4136": 0, "4137": 0, "4138": 0, "4142": 0, "4145": 0, "4151": 0, "4152": 0, "4153": 0, "4154": 0, "4159": 0, "4160": 0, "4162": 0, "4163": 0, "4169": 0, "4170": 0, "4215": 0, "4216": 0, "4217": 0, "4218": 0, "4220": 0, "4221": 0, "4224": 0, "4226": 0, "4229": 0, "4231": 0, "4236": 0, "4240": 0, "4241": 0, "4242": 0, "4243": 0, "4245": 0, "4246": 0, "4248": 0, "4250": 0}}
{"/testbed/sympy/matrices/matrices.py": {"1": 1, "3": 1, "4": 1, "5": 1, "6": 1, "7": 1, "8": 1, "9": 1, "10": 1, "11": 1, "13": 1, "14": 1, "15": 1, "16": 1, "17": 1, "18": 1, "19": 1, "20": 1, "21": 1, "23": 1, "24": 1, "25": 1, "29": 1, "31": 1, "35": 1, "43": 1, "49": 2, "80": 2, "477": 2, "898": 2, "1026": 2, "1553": 2, "1692": 2, "1843": 3, "1844": 1, "1845": 1, "1846": 1, "4020": 1, "4054": 1, "4069": 1, "4172": 1, "37": 0, "38": 0, "39": 0, "40": 0, "46": 0, "65": 1, "73": 1, "76": 1, "66": 0, "67": 0, "68": 0, "69": 0, "70": 0, "71": 0, "74": 0, "77": 0, "84": 1, "128": 1, "172": 1, "220": 1, "225": 1, "272": 1, "277": 1, "292": 1, "351": 1, "367": 1, "385": 1, "434": 1, "452": 1, "89": 0, "90": 0, "97": 0, "98": 0, "114": 0, "115": 0, "116": 0, "117": 0, "118": 0, "120": 0, "125": 0, "126": 0, "121": 0, "122": 0, "123": 0, "164": 0, "165": 0, "166": 0, "167": 0, "169": 0, "170": 0, "186": 0, "218": 0, "187": 0, "188": 0, "189": 0, "190": 0, "196": 0, "197": 0, "198": 0, "199": 0, "203": 0, "206": 0, "207": 0, "208": 0, "210": 0, "216": 0, "211": 0, "212": 0, "213": 0, "214": 0, "222": 0, "223": 0, "240": 0, "241": 0, "246": 0, "257": 0, "258": 0, "261": 0, "266": 0, "267": 0, "270": 0, "275": 0, "290": 0, "344": 0, "345": 0, "347": 0, "348": 0, "349": 0, "362": 0, "363": 0, "365": 0, "379": 0, "380": 0, "382": 0, "383": 0, "398": 0, "399": 0, "400": 0, "401": 0, "402": 0, "403": 0, "404": 0, "409": 0, "410": 0, "412": 0, "413": 0, "414": 0, "415": 0, "416": 0, "417": 0, "418": 0, "419": 0, "420": 0, "421": 0, "422": 0, "423": 0, "424": 0, "425": 0, "427": 0, "428": 0, "429": 0, "430": 0, "431": 0, "432": 0, "447": 0, "448": 0, "450": 0, "463": 0, "464": 0, "465": 0, "466": 0, "468": 0, "469": 0, "470": 0, "472": 0, "473": 0, "474": 0, "481": 1, "490": 1, "497": 1, "504": 1, "513": 1, "520": 1, "527": 1, "536": 1, "544": 1, "550": 1, "599": 1, "618": 1, "716": 1, "729": 1, "759": 1, "789": 1, "790": 1, "797": 1, "836": 1, "482": 0, "488": 0, "483": 0, "484": 0, "485": 0, "486": 0, "487": 0, "491": 0, "495": 0, "492": 0, "493": 0, "494": 0, "498": 0, "502": 0, "499": 0, "500": 0, "501": 0, "505": 0, "511": 0, "506": 0, "507": 0, "508": 0, "509": 0, "510": 0, "514": 0, "518": 0, "515": 0, "516": 0, "517": 0, "521": 0, "525": 0, "522": 0, "523": 0, "524": 0, "530": 0, "531": 0, "532": 0, "533": 0, "534": 0, "537": 0, "538": 0, "539": 0, "540": 0, "541": 0, "542": 0, "545": 0, "546": 0, "547": 0, "548": 0, "553": 0, "554": 0, "555": 0, "558": 0, "559": 0, "560": 0, "561": 0, "562": 0, "563": 0, "564": 0, "566": 0, "570": 0, "571": 0, "573": 0, "574": 0, "575": 0, "576": 0, "577": 0, "578": 0, "579": 0, "580": 0, "581": 0, "583": 0, "584": 0, "585": 0, "586": 0, "587": 0, "588": 0, "589": 0, "590": 0, "591": 0, "592": 0, "593": 0, "594": 0, "595": 0, "597": 0, "609": 0, "613": 0, "614": 0, "616": 0, "612": 0, "641": 0, "642": 0, "643": 0, "646": 0, "650": 0, "656": 0, "657": 0, "658": 0, "660": 0, "662": 0, "663": 0, "661": 0, "667": 0, "668": 0, "669": 0, "671": 0, "672": 0, "673": 0, "675": 0, "676": 0, "677": 0, "678": 0, "682": 0, "683": 0, "684": 0, "685": 0, "686": 0, "688": 0, "691": 0, "693": 0, "694": 0, "696": 0, "697": 0, "699": 0, "700": 0, "701": 0, "703": 0, "704": 0, "707": 0, "708": 0, "709": 0, "710": 0, "711": 0, "712": 0, "714": 0, "644": 0, "648": 0, "647": 0, "652": 0, "653": 0, "654": 0, "721": 0, "722": 0, "724": 0, "725": 0, "726": 0, "727": 0, "749": 0, "752": 0, "753": 0, "754": 0, "755": 0, "756": 0, "757": 0, "779": 0, "782": 0, "783": 0, "784": 0, "785": 0, "786": 0, "787": 0, "795": 0, "810": 0, "811": 0, "816": 0, "817": 0, "818": 0, "819": 0, "820": 0, "821": 0, "822": 0, "823": 0, "824": 0, "825": 0, "826": 0, "827": 0, "828": 0, "829": 0, "830": 0, "832": 0, "833": 0, "834": 0, "887": 0, "888": 0, "890": 0, "891": 0, "892": 0, "893": 0, "894": 0, "895": 0, "902": 1, "934": 1, "977": 1, "984": 1, "985": 1, "930": 0, "932": 0, "960": 0, "962": 0, "964": 0, "965": 0, "968": 0, "969": 0, "970": 0, "971": 0, "972": 0, "973": 0, "975": 0, "980": 0, "982": 0, "997": 0, "999": 0, "1002": 0, "1010": 0, "1012": 0, "1013": 0, "1015": 0, "1016": 0, "1017": 0, "1018": 0, "1020": 0, "1021": 0, "1023": 0, "1000": 0, "1005": 0, "1006": 0, "1007": 0, "1008": 0, "1030": 1, "1031": 1, "1033": 1, "1106": 1, "1138": 1, "1207": 1, "1296": 1, "1488": 1, "1521": 1, "1083": 0, "1084": 0, "1086": 0, "1087": 0, "1089": 0, "1090": 0, "1091": 0, "1093": 0, "1094": 0, "1096": 0, "1097": 0, "1098": 0, "1099": 0, "1101": 0, "1102": 0, "1104": 0, "1121": 0, "1122": 0, "1123": 0, "1124": 0, "1125": 0, "1126": 0, "1128": 0, "1129": 0, "1133": 0, "1134": 0, "1136": 0, "1160": 0, "1162": 0, "1163": 0, "1164": 0, "1165": 0, "1166": 0, "1168": 0, "1170": 0, "1172": 0, "1173": 0, "1174": 0, "1176": 0, "1190": 0, "1191": 0, "1192": 0, "1193": 0, "1194": 0, "1195": 0, "1198": 0, "1201": 0, "1202": 0, "1204": 0, "1205": 0, "1178": 0, "1179": 0, "1183": 0, "1184": 0, "1185": 0, "1186": 0, "1187": 0, "1188": 0, "1199": 0, "1200": 0, "1258": 0, "1259": 0, "1260": 0, "1262": 0, "1268": 0, "1269": 0, "1270": 0, "1273": 0, "1274": 0, "1275": 0, "1276": 0, "1278": 0, "1280": 0, "1281": 0, "1282": 0, "1284": 0, "1285": 0, "1286": 0, "1288": 0, "1289": 0, "1291": 0, "1292": 0, "1293": 0, "1294": 0, "1264": 0, "1265": 0, "1266": 0, "1332": 0, "1333": 0, "1335": 0, "1336": 0, "1337": 0, "1339": 0, "1340": 0, "1341": 0, "1342": 0, "1345": 0, "1348": 0, "1350": 0, "1360": 0, "1361": 0, "1373": 0, "1388": 0, "1401": 0, "1412": 0, "1413": 0, "1416": 0, "1420": 0, "1421": 0, "1426": 0, "1427": 0, "1428": 0, "1429": 0, "1430": 0, "1431": 0, "1432": 0, "1433": 0, "1435": 0, "1436": 0, "1437": 0, "1438": 0, "1443": 0, "1445": 0, "1447": 0, "1448": 0, "1449": 0, "1450": 0, "1452": 0, "1453": 0, "1466": 0, "1468": 0, "1469": 0, "1470": 0, "1471": 0, "1472": 0, "1473": 0, "1474": 0, "1479": 0, "1480": 0, "1481": 0, "1482": 0, "1484": 0, "1486": 0, "1353": 0, "1354": 0, "1355": 0, "1356": 0, "1357": 0, "1364": 0, "1365": 0, "1366": 0, "1367": 0, "1369": 0, "1370": 0, "1378": 0, "1379": 0, "1380": 0, "1381": 0, "1382": 0, "1383": 0, "1384": 0, "1385": 0, "1386": 0, "1395": 0, "1398": 0, "1399": 0, "1404": 0, "1405": 0, "1406": 0, "1407": 0, "1408": 0, "1409": 0, "1517": 0, "1519": 0, "1538": 0, "1540": 0, "1543": 0, "1544": 0, "1545": 0, "1547": 0, "1549": 0, "1556": 1, "1580": 1, "1583": 1, "1610": 1, "1667": 1, "1577": 0, "1578": 0, "1581": 0, "1608": 0, "1646": 0, "1647": 0, "1650": 0, "1651": 0, "1652": 0, "1653": 0, "1655": 0, "1656": 0, "1657": 0, "1658": 0, "1659": 0, "1661": 0, "1665": 0, "1688": 0, "1695": 1, "1698": 1, "1709": 1, "1719": 1, "1735": 1, "1775": 1, "1778": 1, "1781": 1, "1800": 1, "1821": 1, "1824": 1, "1828": 1, "1831": 1, "1834": 1, "1838": 1, "1696": 0, "1707": 0, "1717": 0, "1727": 0, "1729": 0, "1730": 0, "1731": 0, "1733": 0, "1736": 0, "1737": 0, "1738": 0, "1739": 0, "1741": 0, "1742": 0, "1744": 0, "1745": 0, "1747": 0, "1748": 0, "1750": 0, "1751": 0, "1753": 0, "1755": 0, "1756": 0, "1758": 0, "1759": 0, "1761": 0, "1763": 0, "1764": 0, "1766": 0, "1768": 0, "1770": 0, "1771": 0, "1773": 0, "1776": 0, "1779": 0, "1798": 0, "1819": 0, "1822": 0, "1825": 0, "1826": 0, "1829": 0, "1832": 0, "1836": 0, "1840": 0, "1849": 1, "1851": 1, "1852": 1, "1853": 1, "1855": 1, "1857": 1, "1861": 1, "1872": 1, "1879": 1, "1889": 1, "1892": 1, "1918": 1, "1921": 1, "1926": 1, "1931": 1, "1942": 1, "1943": 1, "2090": 1, "2160": 1, "2164": 1, "2193": 1, "2230": 1, "2253": 1, "2270": 1, "2302": 1, "2303": 1, "2345": 1, "2376": 1, "2435": 1, "2474": 1, "2513": 1, "2647": 1, "2689": 1, "2713": 1, "2734": 1, "2753": 1, "2817": 1, "2846": 1, "2876": 1, "2896": 1, "2936": 1, "2977": 1, "3002": 1, "3003": 1, "3004": 1, "3001": 1, "3073": 1, "3074": 1, "3075": 1, "3072": 1, "3269": 1, "3318": 1, "3358": 1, "3370": 1, "3384": 1, "3484": 1, "3570": 1, "3614": 1, "3648": 1, "3664": 1, "3743": 1, "3788": 1, "3847": 1, "3863": 1, "3941": 1, "3964": 1, "1858": 0, "1859": 0, "1862": 0, "1863": 0, "1867": 0, "1869": 0, "1870": 0, "1864": 0, "1865": 0, "1877": 0, "1880": 0, "1881": 0, "1882": 0, "1883": 0, "1884": 0, "1885": 0, "1886": 0, "1890": 0, "1893": 0, "1894": 0, "1896": 0, "1910": 0, "1911": 0, "1913": 0, "1914": 0, "1915": 0, "1916": 0, "1897": 0, "1898": 0, "1899": 0, "1900": 0, "1901": 0, "1902": 0, "1903": 0, "1904": 0, "1905": 0, "1906": 0, "1907": 0, "1908": 0, "1919": 0, "1922": 0, "1923": 0, "1924": 0, "1927": 0, "1928": 0, "1929": 0, "1932": 0, "1933": 0, "1934": 0, "1936": 0, "1937": 0, "1938": 0, "1939": 0, "1940": 0, "1985": 0, "1987": 0, "1989": 0, "1991": 0, "1992": 0, "1995": 0, "1996": 0, "1999": 0, "2000": 0, "2003": 0, "2007": 0, "2008": 0, "2009": 0, "2010": 0, "2011": 0, "2012": 0, "2013": 0, "2014": 0, "2015": 0, "2016": 0, "2017": 0, "2019": 0, "2020": 0, "2023": 0, "2024": 0, "2025": 0, "2026": 0, "2027": 0, "2028": 0, "2029": 0, "2030": 0, "2031": 0, "2033": 0, "2034": 0, "2035": 0, "2036": 0, "2037": 0, "2038": 0, "2039": 0, "2040": 0, "2041": 0, "2042": 0, "2043": 0, "2044": 0, "2045": 0, "2046": 0, "2047": 0, "2048": 0, "2049": 0, "2050": 0, "2051": 0, "2053": 0, "2054": 0, "2055": 0, "2057": 0, "2058": 0, "2059": 0, "2062": 0, "2063": 0, "2064": 0, "2065": 0, "2066": 0, "2067": 0, "2068": 0, "2071": 0, "2072": 0, "2073": 0, "2074": 0, "2075": 0, "2076": 0, "2080": 0, "2082": 0, "2083": 0, "2085": 0, "2086": 0, "2088": 0, "2130": 0, "2132": 0, "2133": 0, "2134": 0, "2135": 0, "2136": 0, "2137": 0, "2138": 0, "2139": 0, "2140": 0, "2141": 0, "2142": 0, "2144": 0, "2145": 0, "2146": 0, "2147": 0, "2148": 0, "2149": 0, "2150": 0, "2151": 0, "2153": 0, "2154": 0, "2155": 0, "2157": 0, "2158": 0, "2162": 0, "2182": 0, "2183": 0, "2184": 0, "2185": 0, "2186": 0, "2188": 0, "2190": 0, "2191": 0, "2224": 0, "2225": 0, "2226": 0, "2227": 0, "2228": 0, "2248": 0, "2249": 0, "2250": 0, "2251": 0, "2268": 0, "2289": 0, "2290": 0, "2291": 0, "2292": 0, "2293": 0, "2294": 0, "2295": 0, "2297": 0, "2298": 0, "2299": 0, "2300": 0, "2336": 0, "2337": 0, "2342": 0, "2343": 0, "2370": 0, "2371": 0, "2372": 0, "2373": 0, "2374": 0, "2404": 0, "2406": 0, "2407": 0, "2408": 0, "2409": 0, "2410": 0, "2411": 0, "2412": 0, "2414": 0, "2415": 0, "2416": 0, "2418": 0, "2419": 0, "2420": 0, "2421": 0, "2422": 0, "2423": 0, "2424": 0, "2425": 0, "2426": 0, "2427": 0, "2428": 0, "2429": 0, "2430": 0, "2432": 0, "2433": 0, "2447": 0, "2448": 0, "2450": 0, "2451": 0, "2452": 0, "2453": 0, "2455": 0, "2456": 0, "2457": 0, "2458": 0, "2459": 0, "2460": 0, "2461": 0, "2463": 0, "2464": 0, "2465": 0, "2466": 0, "2467": 0, "2468": 0, "2469": 0, "2470": 0, "2472": 0, "2476": 0, "2477": 0, "2478": 0, "2479": 0, "2480": 0, "2481": 0, "2482": 0, "2483": 0, "2484": 0, "2486": 0, "2506": 0, "2507": 0, "2508": 0, "2510": 0, "2511": 0, "2488": 0, "2489": 0, "2490": 0, "2491": 0, "2493": 0, "2495": 0, "2497": 0, "2499": 0, "2500": 0, "2501": 0, "2503": 0, "2504": 0, "2596": 0, "2598": 0, "2599": 0, "2602": 0, "2603": 0, "2604": 0, "2605": 0, "2608": 0, "2609": 0, "2611": 0, "2612": 0, "2614": 0, "2618": 0, "2619": 0, "2622": 0, "2623": 0, "2627": 0, "2628": 0, "2629": 0, "2630": 0, "2633": 0, "2634": 0, "2635": 0, "2638": 0, "2639": 0, "2640": 0, "2642": 0, "2643": 0, "2645": 0, "2674": 0, "2675": 0, "2676": 0, "2677": 0, "2678": 0, "2679": 0, "2680": 0, "2681": 0, "2682": 0, "2683": 0, "2684": 0, "2685": 0, "2687": 0, "2686": 0, "2699": 0, "2700": 0, "2702": 0, "2703": 0, "2704": 0, "2706": 0, "2707": 0, "2708": 0, "2709": 0, "2711": 0, "2723": 0, "2724": 0, "2725": 0, "2727": 0, "2728": 0, "2729": 0, "2730": 0, "2732": 0, "2744": 0, "2745": 0, "2747": 0, "2748": 0, "2749": 0, "2751": 0, "2811": 0, "2812": 0, "2813": 0, "2814": 0, "2815": 0, "2835": 0, "2836": 0, "2837": 0, "2838": 0, "2839": 0, "2840": 0, "2841": 0, "2842": 0, "2843": 0, "2844": 0, "2857": 0, "2858": 0, "2859": 0, "2860": 0, "2862": 0, "2864": 0, "2865": 0, "2866": 0, "2867": 0, "2868": 0, "2870": 0, "2872": 0, "2873": 0, "2874": 0, "2886": 0, "2887": 0, "2888": 0, "2889": 0, "2890": 0, "2891": 0, "2892": 0, "2894": 0, "2930": 0, "2931": 0, "2932": 0, "2933": 0, "2934": 0, "2965": 0, "2966": 0, "2967": 0, "2968": 0, "2969": 0, "2971": 0, "2973": 0, "2974": 0, "2975": 0, "2993": 0, "2994": 0, "2995": 0, "2996": 0, "2997": 0, "2998": 0, "2999": 0, "3040": 0, "3041": 0, "3042": 0, "3051": 0, "3063": 0, "3066": 0, "3067": 0, "3069": 0, "3052": 0, "3054": 0, "3055": 0, "3056": 0, "3057": 0, "3058": 0, "3061": 0, "3064": 0, "3155": 0, "3159": 0, "3162": 0, "3164": 0, "3165": 0, "3167": 0, "3168": 0, "3179": 0, "3180": 0, "3181": 0, "3183": 0, "3182": 0, "3184": 0, "3185": 0, "3188": 0, "3190": 0, "3196": 0, "3202": 0, "3204": 0, "3210": 0, "3213": 0, "3214": 0, "3216": 0, "3222": 0, "3226": 0, "3225": 0, "3230": 0, "3229": 0, "3237": 0, "3238": 0, "3242": 0, "3241": 0, "3250": 0, "3251": 0, "3253": 0, "3258": 0, "3259": 0, "3261": 0, "3262": 0, "3265": 0, "3267": 0, "3288": 0, "3289": 0, "3290": 0, "3292": 0, "3293": 0, "3294": 0, "3295": 0, "3297": 0, "3298": 0, "3299": 0, "3300": 0, "3301": 0, "3303": 0, "3304": 0, "3305": 0, "3306": 0, "3307": 0, "3308": 0, "3309": 0, "3310": 0, "3311": 0, "3312": 0, "3313": 0, "3314": 0, "3315": 0, "3316": 0, "3337": 0, "3338": 0, "3339": 0, "3341": 0, "3342": 0, "3343": 0, "3345": 0, "3346": 0, "3347": 0, "3348": 0, "3350": 0, "3351": 0, "3352": 0, "3353": 0, "3354": 0, "3355": 0, "3356": 0, "3368": 0, "3378": 0, "3379": 0, "3380": 0, "3381": 0, "3382": 0, "3436": 0, "3437": 0, "3438": 0, "3439": 0, "3441": 0, "3442": 0, "3444": 0, "3445": 0, "3447": 0, "3448": 0, "3452": 0, "3453": 0, "3454": 0, "3455": 0, "3459": 0, "3460": 0, "3461": 0, "3463": 0, "3465": 0, "3467": 0, "3469": 0, "3471": 0, "3472": 0, "3473": 0, "3475": 0, "3476": 0, "3477": 0, "3479": 0, "3482": 0, "3561": 0, "3562": 0, "3563": 0, "3564": 0, "3565": 0, "3566": 0, "3567": 0, "3568": 0, "3599": 0, "3600": 0, "3602": 0, "3603": 0, "3604": 0, "3605": 0, "3606": 0, "3608": 0, "3609": 0, "3611": 0, "3637": 0, "3638": 0, "3639": 0, "3640": 0, "3641": 0, "3642": 0, "3644": 0, "3645": 0, "3646": 0, "3662": 0, "3711": 0, "3712": 0, "3714": 0, "3715": 0, "3716": 0, "3717": 0, "3718": 0, "3719": 0, "3720": 0, "3721": 0, "3722": 0, "3723": 0, "3724": 0, "3725": 0, "3726": 0, "3727": 0, "3728": 0, "3729": 0, "3731": 0, "3732": 0, "3734": 0, "3735": 0, "3736": 0, "3737": 0, "3738": 0, "3739": 0, "3740": 0, "3741": 0, "3773": 0, "3774": 0, "3779": 0, "3780": 0, "3781": 0, "3782": 0, "3783": 0, "3784": 0, "3785": 0, "3786": 0, "3842": 0, "3843": 0, "3844": 0, "3845": 0, "3853": 0, "3854": 0, "3855": 0, "3857": 0, "3858": 0, "3861": 0, "3914": 0, "3915": 0, "3917": 0, "3919": 0, "3920": 0, "3921": 0, "3922": 0, "3923": 0, "3924": 0, "3925": 0, "3928": 0, "3929": 0, "3930": 0, "3931": 0, "3932": 0, "3933": 0, "3927": 0, "3934": 0, "3935": 0, "3936": 0, "3937": 0, "3938": 0, "3939": 0, "3956": 0, "3957": 0, "3958": 0, "3959": 0, "3960": 0, "3961": 0, "3962": 0, "3994": 0, "3996": 0, "3997": 0, "3998": 0, "3999": 0, "4000": 0, "4001": 0, "4002": 0, "4003": 0, "4004": 0, "4005": 0, "4006": 0, "4007": 0, "4008": 0, "4009": 0, "4010": 0, "4012": 0, "4013": 0, "4014": 0, "4015": 0, "4016": 0, "4017": 0, "4036": 0, "4037": 0, "4038": 0, "4040": 0, "4041": 0, "4042": 0, "4043": 0, "4044": 0, "4045": 0, "4046": 0, "4047": 0, "4048": 0, "4049": 0, "4050": 0, "4051": 0, "4056": 0, "4057": 0, "4058": 0, "4059": 0, "4060": 0, "4061": 0, "4062": 0, "4063": 0, "4064": 0, "4065": 0, "4066": 0, "4087": 0, "4088": 0, "4092": 0, "4093": 0, "4094": 0, "4095": 0, "4096": 0, "4100": 0, "4101": 0, "4102": 0, "4103": 0, "4104": 0, "4107": 0, "4108": 0, "4109": 0, "4113": 0, "4115": 0, "4116": 0, "4119": 0, "4122": 0, "4129": 0, "4130": 0, "4131": 0, "4132": 0, "4133": 0, "4134": 0, "4135": 0, "4136": 0, "4137": 0, "4138": 0, "4142": 0, "4145": 0, "4151": 0, "4152": 0, "4153": 0, "4154": 0, "4159": 0, "4160": 0, "4162": 0, "4163": 0, "4169": 0, "4170": 0, "4215": 0, "4216": 0, "4217": 0, "4218": 0, "4220": 0, "4221": 0, "4224": 0, "4226": 0, "4229": 0, "4231": 0, "4236": 0, "4240": 0, "4241": 0, "4242": 0, "4243": 0, "4245": 0, "4246": 0, "4248": 0, "4250": 0}}
+ git checkout 1659712001810f5fc563a443949f8e3bb38af4bd
Note: switching to '1659712001810f5fc563a443949f8e3bb38af4bd'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at 1659712001 Merge pull request #14012 from ishanaj/xfail_10214_solveset
M	sympy/matrices/matrices.py
M	sympy/utilities/randtest.py
+ git apply /root/pre_state.patch
error: unrecognized input
