{"instance_id": "django__django-17029", "repo": "django/django", "version": "5.0", "environment_setup_commit": "4a72da71001f154ea60906a2f74898d32b7322a7", "patch_list": ["diff --git a/django/apps/registry.py b/django/apps/registry.py\n--- a/django/apps/registry.py\n+++ b/django/apps/registry.py\n@@ -373,6 +373,7 @@ def clear_cache(self):\n \n         This is mostly used in tests.\n         \"\"\"\n+        self.get_swappable_settings_name.cache_clear()\n         # Call expire cache on each model. This will purge\n         # the relation tree and the fields cache.\n         self.get_models.cache_clear()\n", "diff --git a/dev/null b/tests/test_coverup_django__django-17029.py\nnew file mode 100644\nindex e69de29..384111f 100644\n--- /dev/null\n+++ b/tests/test_coverup_django__django-17029.py\n@@ -0,0 +1,26 @@\n+from django.test import SimpleTestCase\n+from django.apps.registry import Apps\n+from unittest.mock import patch\n+\n+class ClearCacheTest(SimpleTestCase):\n+    def test_clear_cache_does_not_clear_get_swappable_settings_name(self):\n+        # Create an instance of the Apps class\n+        apps = Apps()\n+\n+        # Mock the get_swappable_settings_name to track calls\n+        with patch.object(apps, 'get_swappable_settings_name', wraps=apps.get_swappable_settings_name) as mocked_method:\n+            # Call get_swappable_settings_name with a known swappable model to populate the cache\n+            mocked_method(\"auth.user\")\n+\n+            # Ensure the method was called once\n+            self.assertEqual(mocked_method.call_count, 1)\n+\n+            # Call clear_cache to attempt to clear all caches\n+            apps.clear_cache()\n+\n+            # Call get_swappable_settings_name again with the same argument\n+            mocked_method(\"auth.user\")\n+\n+            # Assert that the cache was cleared by checking the call count\n+            # The correct behavior should be that the cache is cleared, so the call count should be 2\n+            self.assertEqual(mocked_method.call_count, 1)\n"], "arch": "x86_64", "base_commit": "953f29f700a60fc09b08b2c2270c12c447490c6a", "test_directives": ["test_coverup_django__django-17029"], "coverage_files": ["django/apps/registry.py"], "env_name": "testbed", "run_id": "assertflip", "patch_id": "pred_post__AssertFlip", "timeout": 1800, "rm_image": false, "force_rebuild": false, "exec_mode": "unit_test", "reproduction_script_name": null, "compute_coverage": true, "install": {"python": "3.11", "packages": "requirements.txt", "install": "python -m pip install -e ."}, "cache_level": "instance", "test_command": "python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/apps/registry\\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-17029", "req_install_commands": ["conda create -n testbed python=3.11 -y", "cat <<'EOF_59812759871' > $HOME/requirements.txt\naiosmtpd\nasgiref >= 3.7.0\nargon2-cffi >= 19.2.0\nbcrypt\nblack\ndocutils\ngeoip2; python_version < '3.12'\njinja2 >= 2.11.0\nnumpy; python_version < '3.12'\nPillow >= 6.2.1; sys.platform != 'win32' or python_version < '3.12'\npylibmc; sys.platform != 'win32'\npymemcache >= 3.4.0\npywatchman; sys.platform != 'win32'\nPyYAML\nredis >= 3.4.0\nselenium >= 4.8.0\nsqlparse >= 0.3.1\ntblib >= 1.5.0\ntzdata\ncolorama; sys.platform == 'win32'\n\nEOF_59812759871", "conda activate testbed && python -m pip install -r $HOME/requirements.txt", "rm $HOME/requirements.txt"]}