+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD 6a5ef557f80a8eb6a758ebe99c8bb477ca47459e
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
nothing to commit, working tree clean
+ git show
commit 6a5ef557f80a8eb6a758ebe99c8bb477ca47459e
Author: abhiabhi94 <13880786+abhiabhi94@users.noreply.github.com>
Date:   Thu Jul 1 18:49:09 2021 +0530

    Added test for errors when saving timezone-aware times if not supported.

diff --git a/tests/timezones/models.py b/tests/timezones/models.py
index f7747d5937..a6e276f2f4 100644
--- a/tests/timezones/models.py
+++ b/tests/timezones/models.py
@@ -25,3 +25,7 @@ class Timestamp(models.Model):
 
 class AllDayEvent(models.Model):
     day = models.DateField()
+
+
+class DailyEvent(models.Model):
+    time = models.TimeField()
diff --git a/tests/timezones/tests.py b/tests/timezones/tests.py
index 861636ddf1..58c69bf769 100644
--- a/tests/timezones/tests.py
+++ b/tests/timezones/tests.py
@@ -37,7 +37,8 @@ from .forms import (
     EventSplitForm,
 )
 from .models import (
-    AllDayEvent, Event, MaybeEvent, Session, SessionEvent, Timestamp,
+    AllDayEvent, DailyEvent, Event, MaybeEvent, Session, SessionEvent,
+    Timestamp,
 )
 
 try:
@@ -270,6 +271,13 @@ class LegacyDatabaseTests(TestCase):
 class NewDatabaseTests(TestCase):
     naive_warning = 'DateTimeField Event.dt received a naive datetime'
 
+    @skipIfDBFeature('supports_timezones')
+    def test_aware_time_unsupported(self):
+        t = datetime.time(13, 20, 30, tzinfo=EAT)
+        msg = 'backend does not support timezone-aware times.'
+        with self.assertRaisesMessage(ValueError, msg):
+            DailyEvent.objects.create(time=t)
+
     @requires_tz_support
     def test_naive_datetime(self):
         dt = datetime.datetime(2011, 9, 1, 13, 20, 30)
+ git diff 6a5ef557f80a8eb6a758ebe99c8bb477ca47459e
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Checking if build backend supports build_editable: started
  Checking if build backend supports build_editable: finished with status 'done'
  Getting requirements to build editable: started
  Getting requirements to build editable: finished with status 'done'
  Preparing editable metadata (pyproject.toml): started
  Preparing editable metadata (pyproject.toml): finished with status 'done'
Requirement already satisfied: asgiref>=3.3.2 in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from Django==4.0.dev20210706084406) (3.8.1)
Requirement already satisfied: pytz in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from Django==4.0.dev20210706084406) (2025.2)
Requirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from Django==4.0.dev20210706084406) (0.5.3)
Requirement already satisfied: typing-extensions>=4 in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from asgiref>=3.3.2->Django==4.0.dev20210706084406) (4.13.2)
Building wheels for collected packages: Django
  Building editable for Django (pyproject.toml): started
  Building editable for Django (pyproject.toml): finished with status 'done'
  Created wheel for Django: filename=django-4.0.dev20210706084406-0.editable-py3-none-any.whl size=26217 sha256=8080244d97358e51c5d9ca0434654182c259f44bb3c1f886311f1a9ee202053f
  Stored in directory: /tmp/pip-ephem-wheel-cache-pi7hh7mi/wheels/b2/50/f1/218f2e9962a80d01a4b1297698978f9fb3b60056aa24343f24
Successfully built Django
Installing collected packages: Django
  Attempting uninstall: Django
    Found existing installation: Django 4.0.dev20210706084406
    Uninstalling Django-4.0.dev20210706084406:
      Successfully uninstalled Django-4.0.dev20210706084406
Successfully installed Django-4.0.dev20210706084406
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable.It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git apply -v -
Checking patch django/utils/html.py...
Applied patch django/utils/html.py cleanly.
+ git apply -v -
<stdin>:14: trailing whitespace.
        
<stdin>:17: trailing whitespace.
        
Checking patch tests/test_coverup_django__django-14539.py...
Applied patch tests/test_coverup_django__django-14539.py cleanly.
warning: 2 lines add whitespace errors.
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/utils/html\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-14539
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(django/utils/html\\.py)']
0.16 /testbed/django/utils/html.py(1): """HTML utilities suitable for global use."""
0.16 /testbed/django/utils/html.py(3): import html
0.16 /testbed/django/utils/html.py(4): import json
0.16 /testbed/django/utils/html.py(5): import re
0.16 /testbed/django/utils/html.py(6): from html.parser import HTMLParser
0.17 /testbed/django/utils/html.py(7): from urllib.parse import (
0.17 /testbed/django/utils/html.py(11): from django.utils.encoding import punycode
0.17 /testbed/django/utils/html.py(12): from django.utils.functional import Promise, keep_lazy, keep_lazy_text
0.17 /testbed/django/utils/html.py(13): from django.utils.http import RFC3986_GENDELIMS, RFC3986_SUBDELIMS
0.17 /testbed/django/utils/html.py(14): from django.utils.regex_helper import _lazy_re_compile
0.17 /testbed/django/utils/html.py(15): from django.utils.safestring import SafeData, SafeString, mark_safe
0.17 /testbed/django/utils/html.py(16): from django.utils.text import normalize_newlines
0.17 /testbed/django/utils/html.py(19): TRAILING_PUNCTUATION_CHARS = '.,:;!'
0.17 /testbed/django/utils/html.py(20): WRAPPING_PUNCTUATION = [('(', ')'), ('[', ']')]
0.17 /testbed/django/utils/html.py(23): DOTS = ['&middot;', '*', '\u2022', '&#149;', '&bull;', '&#8226;']
0.17 /testbed/django/utils/html.py(25): word_split_re = _lazy_re_compile(r'''([\s<>"']+)''')
0.17 /testbed/django/utils/html.py(26): simple_url_re = _lazy_re_compile(r'^https?://\[?\w', re.IGNORECASE)
0.17 /testbed/django/utils/html.py(27): simple_url_2_re = _lazy_re_compile(
0.17 /testbed/django/utils/html.py(28):     r'^www\.|^(?!http)\w[^@]+\.(com|edu|gov|int|mil|net|org)($|/.*)$',
0.17 /testbed/django/utils/html.py(29):     re.IGNORECASE
0.17 /testbed/django/utils/html.py(27): simple_url_2_re = _lazy_re_compile(
0.17 /testbed/django/utils/html.py(33): @keep_lazy(str, SafeString)
0.17 /testbed/django/utils/html.py(34): def escape(text):
0.17 /testbed/django/utils/html.py(47):     ord('\\'): '\\u005C',
0.17 /testbed/django/utils/html.py(48):     ord('\''): '\\u0027',
0.17 /testbed/django/utils/html.py(49):     ord('"'): '\\u0022',
0.17 /testbed/django/utils/html.py(50):     ord('>'): '\\u003E',
0.17 /testbed/django/utils/html.py(51):     ord('<'): '\\u003C',
0.17 /testbed/django/utils/html.py(52):     ord('&'): '\\u0026',
0.17 /testbed/django/utils/html.py(53):     ord('='): '\\u003D',
0.17 /testbed/django/utils/html.py(54):     ord('-'): '\\u002D',
0.17 /testbed/django/utils/html.py(55):     ord(';'): '\\u003B',
0.17 /testbed/django/utils/html.py(56):     ord('`'): '\\u0060',
0.17 /testbed/django/utils/html.py(57):     ord('\u2028'): '\\u2028',
0.17 /testbed/django/utils/html.py(58):     ord('\u2029'): '\\u2029'
0.17 /testbed/django/utils/html.py(46): _js_escapes = {
0.17 /testbed/django/utils/html.py(62): _js_escapes.update((ord('%c' % z), '\\u%04X' % z) for z in range(32))
0.17 /testbed/django/utils/html.py(62): _js_escapes.update((ord('%c' % z), '\\u%04X' % z) for z in range(32))
0.17 /testbed/django/utils/html.py(62): _js_escapes.update((ord('%c' % z), '\\u%04X' % z) for z in range(32))
0.17 /testbed/django/utils/html.py(62): _js_escapes.update((ord('%c' % z), '\\u%04X' % z) for z in range(32))
0.17 /testbed/django/utils/html.py(62): _js_escapes.update((ord('%c' % z), '\\u%04X' % z) for z in range(32))
0.17 /testbed/django/utils/html.py(62): _js_escapes.update((ord('%c' % z), '\\u%04X' % z) for z in range(32))
0.17 /testbed/django/utils/html.py(62): _js_escapes.update((ord('%c' % z), '\\u%04X' % z) for z in range(32))
0.17 /testbed/django/utils/html.py(62): _js_escapes.update((ord('%c' % z), '\\u%04X' % z) for z in range(32))
0.17 /testbed/django/utils/html.py(62): _js_escapes.update((ord('%c' % z), '\\u%04X' % z) for z in range(32))
0.17 /testbed/django/utils/html.py(62): _js_escapes.update((ord('%c' % z), '\\u%04X' % z) for z in range(32))
0.17 /testbed/django/utils/html.py(62): _js_escapes.update((ord('%c' % z), '\\u%04X' % z) for z in range(32))
0.17 /testbed/django/utils/html.py(62): _js_escapes.update((ord('%c' % z), '\\u%04X' % z) for z in range(32))
0.17 /testbed/django/utils/html.py(62): _js_escapes.update((ord('%c' % z), '\\u%04X' % z) for z in range(32))
0.17 /testbed/django/utils/html.py(62): _js_escapes.update((ord('%c' % z), '\\u%04X' % z) for z in range(32))
0.17 /testbed/django/utils/html.py(62): _js_escapes.update((ord('%c' % z), '\\u%04X' % z) for z in range(32))
0.17 /testbed/django/utils/html.py(62): _js_escapes.update((ord('%c' % z), '\\u%04X' % z) for z in range(32))
0.17 /testbed/django/utils/html.py(62): _js_escapes.update((ord('%c' % z), '\\u%04X' % z) for z in range(32))
0.17 /testbed/django/utils/html.py(62): _js_escapes.update((ord('%c' % z), '\\u%04X' % z) for z in range(32))
0.17 /testbed/django/utils/html.py(62): _js_escapes.update((ord('%c' % z), '\\u%04X' % z) for z in range(32))
0.17 /testbed/django/utils/html.py(62): _js_escapes.update((ord('%c' % z), '\\u%04X' % z) for z in range(32))
0.17 /testbed/django/utils/html.py(62): _js_escapes.update((ord('%c' % z), '\\u%04X' % z) for z in range(32))
0.17 /testbed/django/utils/html.py(62): _js_escapes.update((ord('%c' % z), '\\u%04X' % z) for z in range(32))
0.17 /testbed/django/utils/html.py(62): _js_escapes.update((ord('%c' % z), '\\u%04X' % z) for z in range(32))
0.17 /testbed/django/utils/html.py(62): _js_escapes.update((ord('%c' % z), '\\u%04X' % z) for z in range(32))
0.17 /testbed/django/utils/html.py(62): _js_escapes.update((ord('%c' % z), '\\u%04X' % z) for z in range(32))
0.17 /testbed/django/utils/html.py(62): _js_escapes.update((ord('%c' % z), '\\u%04X' % z) for z in range(32))
0.17 /testbed/django/utils/html.py(62): _js_escapes.update((ord('%c' % z), '\\u%04X' % z) for z in range(32))
0.17 /testbed/django/utils/html.py(62): _js_escapes.update((ord('%c' % z), '\\u%04X' % z) for z in range(32))
0.17 /testbed/django/utils/html.py(62): _js_escapes.update((ord('%c' % z), '\\u%04X' % z) for z in range(32))
0.17 /testbed/django/utils/html.py(62): _js_escapes.update((ord('%c' % z), '\\u%04X' % z) for z in range(32))
0.17 /testbed/django/utils/html.py(62): _js_escapes.update((ord('%c' % z), '\\u%04X' % z) for z in range(32))
0.17 /testbed/django/utils/html.py(62): _js_escapes.update((ord('%c' % z), '\\u%04X' % z) for z in range(32))
0.17 /testbed/django/utils/html.py(62): _js_escapes.update((ord('%c' % z), '\\u%04X' % z) for z in range(32))
0.17 /testbed/django/utils/html.py(62): _js_escapes.update((ord('%c' % z), '\\u%04X' % z) for z in range(32))
0.17 /testbed/django/utils/html.py(65): @keep_lazy(str, SafeString)
0.17 /testbed/django/utils/html.py(66): def escapejs(value):
0.17 /testbed/django/utils/html.py(72):     ord('>'): '\\u003E',
0.17 /testbed/django/utils/html.py(73):     ord('<'): '\\u003C',
0.17 /testbed/django/utils/html.py(74):     ord('&'): '\\u0026',
0.17 /testbed/django/utils/html.py(71): _json_script_escapes = {
0.17 /testbed/django/utils/html.py(78): def json_script(value, element_id):
0.17 /testbed/django/utils/html.py(92): def conditional_escape(text):
0.17 /testbed/django/utils/html.py(107): def format_html(format_string, *args, **kwargs):
0.17 /testbed/django/utils/html.py(118): def format_html_join(sep, format_string, args_generator):
0.17 /testbed/django/utils/html.py(138): @keep_lazy_text
0.17 /testbed/django/utils/html.py(139): def linebreaks(value, autoescape=False):
0.17 /testbed/django/utils/html.py(150): class MLStripper(HTMLParser):
0.17 /testbed/django/utils/html.py(150): class MLStripper(HTMLParser):
0.17 /testbed/django/utils/html.py(151):     def __init__(self):
0.17 /testbed/django/utils/html.py(156):     def handle_data(self, d):
0.17 /testbed/django/utils/html.py(159):     def handle_entityref(self, name):
0.17 /testbed/django/utils/html.py(162):     def handle_charref(self, name):
0.17 /testbed/django/utils/html.py(165):     def get_data(self):
0.17 /testbed/django/utils/html.py(169): def _strip_once(value):
0.17 /testbed/django/utils/html.py(179): @keep_lazy_text
0.17 /testbed/django/utils/html.py(180): def strip_tags(value):
0.17 test_urlize_with_html_escaped_and_trailing_punctuation (test_coverup_django__django-14539.UrlizeBugTest) ... /testbed/django/utils/html.py(194): @keep_lazy_text
0.17 /testbed/django/utils/html.py(195): def strip_spaces_between_tags(value):
0.17 /testbed/django/utils/html.py(200): def smart_urlquote(url):
0.17 /testbed/django/utils/html.py(235): @keep_lazy_text
0.17 /testbed/django/utils/html.py(236): def urlize(text, trim_url_limit=None, nofollow=False, autoescape=False):
0.17 /testbed/django/utils/html.py(353): def avoid_wrapping(value):
0.17 /testbed/django/utils/html.py(361): def html_safe(klass):
0.17 /testbed/django/utils/html.py(366):     if '__html__' in klass.__dict__:
0.17 /testbed/django/utils/html.py(371):     if '__str__' not in klass.__dict__:
0.17 /testbed/django/utils/html.py(376):     klass_str = klass.__str__
0.17 /testbed/django/utils/html.py(377):     klass.__str__ = lambda self: mark_safe(klass_str(self))
0.17 /testbed/django/utils/html.py(378):     klass.__html__ = lambda self: str(self)
0.17 /testbed/django/utils/html.py(379):     return klass
0.17 /testbed/django/utils/html.py(366):     if '__html__' in klass.__dict__:
0.17 /testbed/django/utils/html.py(371):     if '__str__' not in klass.__dict__:
0.17 /testbed/django/utils/html.py(376):     klass_str = klass.__str__
0.17 /testbed/django/utils/html.py(377):     klass.__str__ = lambda self: mark_safe(klass_str(self))
0.17 /testbed/django/utils/html.py(378):     klass.__html__ = lambda self: str(self)
0.17 /testbed/django/utils/html.py(379):     return klass
0.20 /testbed/django/utils/html.py(366):     if '__html__' in klass.__dict__:
0.20 /testbed/django/utils/html.py(371):     if '__str__' not in klass.__dict__:
0.20 /testbed/django/utils/html.py(376):     klass_str = klass.__str__
0.20 /testbed/django/utils/html.py(377):     klass.__str__ = lambda self: mark_safe(klass_str(self))
0.20 /testbed/django/utils/html.py(378):     klass.__html__ = lambda self: str(self)
0.20 /testbed/django/utils/html.py(379):     return klass
0.20 /testbed/django/utils/html.py(366):     if '__html__' in klass.__dict__:
0.20 /testbed/django/utils/html.py(371):     if '__str__' not in klass.__dict__:
0.20 /testbed/django/utils/html.py(376):     klass_str = klass.__str__
0.20 /testbed/django/utils/html.py(377):     klass.__str__ = lambda self: mark_safe(klass_str(self))
0.20 /testbed/django/utils/html.py(378):     klass.__html__ = lambda self: str(self)
0.20 /testbed/django/utils/html.py(379):     return klass
0.20 /testbed/django/utils/html.py(366):     if '__html__' in klass.__dict__:
0.20 /testbed/django/utils/html.py(371):     if '__str__' not in klass.__dict__:
0.20 /testbed/django/utils/html.py(376):     klass_str = klass.__str__
0.20 /testbed/django/utils/html.py(377):     klass.__str__ = lambda self: mark_safe(klass_str(self))
0.20 /testbed/django/utils/html.py(378):     klass.__html__ = lambda self: str(self)
0.20 /testbed/django/utils/html.py(379):     return klass
0.22 /testbed/django/utils/html.py(366):     if '__html__' in klass.__dict__:
0.22 /testbed/django/utils/html.py(371):     if '__str__' not in klass.__dict__:
0.22 /testbed/django/utils/html.py(376):     klass_str = klass.__str__
0.22 /testbed/django/utils/html.py(377):     klass.__str__ = lambda self: mark_safe(klass_str(self))
0.22 /testbed/django/utils/html.py(378):     klass.__html__ = lambda self: str(self)
0.22 /testbed/django/utils/html.py(379):     return klass
0.22 /testbed/django/utils/html.py(366):     if '__html__' in klass.__dict__:
0.22 /testbed/django/utils/html.py(371):     if '__str__' not in klass.__dict__:
0.22 /testbed/django/utils/html.py(376):     klass_str = klass.__str__
0.22 /testbed/django/utils/html.py(377):     klass.__str__ = lambda self: mark_safe(klass_str(self))
0.22 /testbed/django/utils/html.py(378):     klass.__html__ = lambda self: str(self)
0.22 /testbed/django/utils/html.py(379):     return klass
Testing against Django installed in '/testbed/django'
Found 1 test(s).
Skipping setup of unused database(s): default, other.
System check identified no issues (0 silenced).
0.68 /testbed/django/utils/html.py(252):     safe_input = isinstance(text, SafeData)
0.68 /testbed/django/utils/html.py(254):     def trim_url(x, limit=trim_url_limit):
0.68 /testbed/django/utils/html.py(259):     def trim_punctuation(lead, middle, trail):
0.68 /testbed/django/utils/html.py(292):     def is_email_simple(value):
0.68 /testbed/django/utils/html.py(307):     words = word_split_re.split(str(text))
0.68 /testbed/django/utils/html.py(308):     for i, word in enumerate(words):
0.68 /testbed/django/utils/html.py(309):         if '.' in word or '@' in word or ':' in word:
0.68 /testbed/django/utils/html.py(346):         elif safe_input:
0.68 /testbed/django/utils/html.py(348):         elif autoescape:
0.68 /testbed/django/utils/html.py(308):     for i, word in enumerate(words):
0.68 /testbed/django/utils/html.py(309):         if '.' in word or '@' in word or ':' in word:
0.68 /testbed/django/utils/html.py(346):         elif safe_input:
0.68 /testbed/django/utils/html.py(348):         elif autoescape:
0.68 /testbed/django/utils/html.py(308):     for i, word in enumerate(words):
0.68 /testbed/django/utils/html.py(309):         if '.' in word or '@' in word or ':' in word:
0.68 /testbed/django/utils/html.py(346):         elif safe_input:
0.68 /testbed/django/utils/html.py(348):         elif autoescape:
0.68 /testbed/django/utils/html.py(308):     for i, word in enumerate(words):
0.68 /testbed/django/utils/html.py(309):         if '.' in word or '@' in word or ':' in word:
0.68 /testbed/django/utils/html.py(346):         elif safe_input:
0.68 /testbed/django/utils/html.py(348):         elif autoescape:
0.68 /testbed/django/utils/html.py(308):     for i, word in enumerate(words):
0.68 /testbed/django/utils/html.py(309):         if '.' in word or '@' in word or ':' in word:
0.68 /testbed/django/utils/html.py(313):             lead, middle, trail = '', word, ''
0.68 /testbed/django/utils/html.py(315):             lead, middle, trail = trim_punctuation(lead, middle, trail)
0.68 /testbed/django/utils/html.py(265):         trimmed_something = True
0.68 /testbed/django/utils/html.py(266):         while trimmed_something:
0.68 /testbed/django/utils/html.py(267):             trimmed_something = False
0.68 /testbed/django/utils/html.py(269):             for opening, closing in WRAPPING_PUNCTUATION:
0.68 /testbed/django/utils/html.py(270):                 if middle.startswith(opening):
0.68 /testbed/django/utils/html.py(275):                 if (middle.endswith(closing) and
0.68 /testbed/django/utils/html.py(269):             for opening, closing in WRAPPING_PUNCTUATION:
0.68 /testbed/django/utils/html.py(270):                 if middle.startswith(opening):
0.68 /testbed/django/utils/html.py(275):                 if (middle.endswith(closing) and
0.68 /testbed/django/utils/html.py(269):             for opening, closing in WRAPPING_PUNCTUATION:
0.68 /testbed/django/utils/html.py(283):             middle_unescaped = html.unescape(middle)
0.68 /testbed/django/utils/html.py(284):             stripped = middle_unescaped.rstrip(TRAILING_PUNCTUATION_CHARS)
0.68 /testbed/django/utils/html.py(285):             if middle_unescaped != stripped:
0.68 /testbed/django/utils/html.py(286):                 punctuation_count = len(middle_unescaped) - len(stripped)
0.68 /testbed/django/utils/html.py(287):                 trail = middle[-punctuation_count:] + trail
0.68 /testbed/django/utils/html.py(288):                 middle = middle[:-punctuation_count]
0.68 /testbed/django/utils/html.py(289):                 trimmed_something = True
0.68 /testbed/django/utils/html.py(266):         while trimmed_something:
0.68 /testbed/django/utils/html.py(267):             trimmed_something = False
0.68 /testbed/django/utils/html.py(269):             for opening, closing in WRAPPING_PUNCTUATION:
0.68 /testbed/django/utils/html.py(270):                 if middle.startswith(opening):
0.68 /testbed/django/utils/html.py(275):                 if (middle.endswith(closing) and
0.68 /testbed/django/utils/html.py(269):             for opening, closing in WRAPPING_PUNCTUATION:
0.68 /testbed/django/utils/html.py(270):                 if middle.startswith(opening):
0.68 /testbed/django/utils/html.py(275):                 if (middle.endswith(closing) and
0.68 /testbed/django/utils/html.py(269):             for opening, closing in WRAPPING_PUNCTUATION:
0.68 /testbed/django/utils/html.py(283):             middle_unescaped = html.unescape(middle)
0.68 /testbed/django/utils/html.py(284):             stripped = middle_unescaped.rstrip(TRAILING_PUNCTUATION_CHARS)
0.68 /testbed/django/utils/html.py(285):             if middle_unescaped != stripped:
0.68 /testbed/django/utils/html.py(266):         while trimmed_something:
0.68 /testbed/django/utils/html.py(290):         return lead, middle, trail
0.68 /testbed/django/utils/html.py(318):             url = None
0.68 /testbed/django/utils/html.py(319):             nofollow_attr = ' rel="nofollow"' if nofollow else ''
0.68 /testbed/django/utils/html.py(320):             if simple_url_re.match(middle):
0.68 /testbed/django/utils/html.py(322):             elif simple_url_2_re.match(middle):
0.68 /testbed/django/utils/html.py(323):                 url = smart_urlquote('http://%s' % html.unescape(middle))
0.68 /testbed/django/utils/html.py(202):     def unquote_quote(segment):
0.68 /testbed/django/utils/html.py(210):     try:
0.68 /testbed/django/utils/html.py(211):         scheme, netloc, path, query, fragment = urlsplit(url)
0.68 /testbed/django/utils/html.py(216):     try:
0.68 /testbed/django/utils/html.py(217):         netloc = punycode(netloc)  # IDN -> ACE
0.68 /testbed/django/utils/html.py(221):     if query:
0.68 /testbed/django/utils/html.py(224):         query_parts = [(unquote(q[0]), unquote(q[1]))
0.68 /testbed/django/utils/html.py(225):                        for q in parse_qsl(query, keep_blank_values=True)]
0.68 /testbed/django/utils/html.py(224):         query_parts = [(unquote(q[0]), unquote(q[1]))
0.68 /testbed/django/utils/html.py(224):         query_parts = [(unquote(q[0]), unquote(q[1]))
0.68 /testbed/django/utils/html.py(225):                        for q in parse_qsl(query, keep_blank_values=True)]
0.68 /testbed/django/utils/html.py(224):         query_parts = [(unquote(q[0]), unquote(q[1]))
0.68 /testbed/django/utils/html.py(224):         query_parts = [(unquote(q[0]), unquote(q[1]))
0.68 /testbed/django/utils/html.py(227):         query = urlencode(query_parts)
0.68 /testbed/django/utils/html.py(229):     path = unquote_quote(path)
0.68 /testbed/django/utils/html.py(203):         segment = unquote(segment)
0.68 /testbed/django/utils/html.py(207):         return quote(segment, safe=RFC3986_SUBDELIMS + RFC3986_GENDELIMS + '~')
0.68 /testbed/django/utils/html.py(230):     fragment = unquote_quote(fragment)
0.68 /testbed/django/utils/html.py(203):         segment = unquote(segment)
0.68 /testbed/django/utils/html.py(207):         return quote(segment, safe=RFC3986_SUBDELIMS + RFC3986_GENDELIMS + '~')
0.68 /testbed/django/utils/html.py(232):     return urlunsplit((scheme, netloc, path, query, fragment))
0.68 /testbed/django/utils/html.py(334):             if url:
0.68 /testbed/django/utils/html.py(335):                 trimmed = trim_url(middle)
0.68 /testbed/django/utils/html.py(255):         if limit is None or len(x) <= limit:
0.68 /testbed/django/utils/html.py(256):             return x
0.68 /testbed/django/utils/html.py(336):                 if autoescape and not safe_input:
0.68 /testbed/django/utils/html.py(339):                 middle = '<a href="%s"%s>%s</a>' % (escape(url), nofollow_attr, trimmed)
0.68 /testbed/django/utils/html.py(43):     return mark_safe(html.escape(str(text)))
0.68 /testbed/django/utils/html.py(340):                 words[i] = mark_safe('%s%s%s' % (lead, middle, trail))
0.68 /testbed/django/utils/html.py(308):     for i, word in enumerate(words):
0.68 /testbed/django/utils/html.py(309):         if '.' in word or '@' in word or ':' in word:
0.68 /testbed/django/utils/html.py(346):         elif safe_input:
0.68 /testbed/django/utils/html.py(348):         elif autoescape:
0.68 /testbed/django/utils/html.py(308):     for i, word in enumerate(words):
0.68 /testbed/django/utils/html.py(309):         if '.' in word or '@' in word or ':' in word:
0.68 /testbed/django/utils/html.py(346):         elif safe_input:
0.68 /testbed/django/utils/html.py(348):         elif autoescape:
0.68 /testbed/django/utils/html.py(308):     for i, word in enumerate(words):
0.68 /testbed/django/utils/html.py(309):         if '.' in word or '@' in word or ':' in word:
0.68 /testbed/django/utils/html.py(346):         elif safe_input:
0.68 /testbed/django/utils/html.py(348):         elif autoescape:
0.68 /testbed/django/utils/html.py(308):     for i, word in enumerate(words):
0.68 /testbed/django/utils/html.py(309):         if '.' in word or '@' in word or ':' in word:
0.68 /testbed/django/utils/html.py(313):             lead, middle, trail = '', word, ''
0.68 /testbed/django/utils/html.py(315):             lead, middle, trail = trim_punctuation(lead, middle, trail)
0.68 /testbed/django/utils/html.py(265):         trimmed_something = True
0.68 /testbed/django/utils/html.py(266):         while trimmed_something:
0.68 /testbed/django/utils/html.py(267):             trimmed_something = False
0.68 /testbed/django/utils/html.py(269):             for opening, closing in WRAPPING_PUNCTUATION:
0.68 /testbed/django/utils/html.py(270):                 if middle.startswith(opening):
0.68 /testbed/django/utils/html.py(275):                 if (middle.endswith(closing) and
0.68 /testbed/django/utils/html.py(269):             for opening, closing in WRAPPING_PUNCTUATION:
0.68 /testbed/django/utils/html.py(270):                 if middle.startswith(opening):
0.68 /testbed/django/utils/html.py(275):                 if (middle.endswith(closing) and
0.68 /testbed/django/utils/html.py(269):             for opening, closing in WRAPPING_PUNCTUATION:
0.68 /testbed/django/utils/html.py(283):             middle_unescaped = html.unescape(middle)
0.68 /testbed/django/utils/html.py(284):             stripped = middle_unescaped.rstrip(TRAILING_PUNCTUATION_CHARS)
0.68 /testbed/django/utils/html.py(285):             if middle_unescaped != stripped:
0.68 /testbed/django/utils/html.py(286):                 punctuation_count = len(middle_unescaped) - len(stripped)
0.68 /testbed/django/utils/html.py(287):                 trail = middle[-punctuation_count:] + trail
0.68 /testbed/django/utils/html.py(288):                 middle = middle[:-punctuation_count]
0.68 /testbed/django/utils/html.py(289):                 trimmed_something = True
0.68 /testbed/django/utils/html.py(266):         while trimmed_something:
0.68 /testbed/django/utils/html.py(267):             trimmed_something = False
0.68 /testbed/django/utils/html.py(269):             for opening, closing in WRAPPING_PUNCTUATION:
0.68 /testbed/django/utils/html.py(270):                 if middle.startswith(opening):
0.68 /testbed/django/utils/html.py(275):                 if (middle.endswith(closing) and
0.68 /testbed/django/utils/html.py(269):             for opening, closing in WRAPPING_PUNCTUATION:
0.68 /testbed/django/utils/html.py(270):                 if middle.startswith(opening):
0.68 /testbed/django/utils/html.py(275):                 if (middle.endswith(closing) and
0.68 /testbed/django/utils/html.py(269):             for opening, closing in WRAPPING_PUNCTUATION:
0.68 /testbed/django/utils/html.py(283):             middle_unescaped = html.unescape(middle)
0.68 /testbed/django/utils/html.py(284):             stripped = middle_unescaped.rstrip(TRAILING_PUNCTUATION_CHARS)
0.68 /testbed/django/utils/html.py(285):             if middle_unescaped != stripped:
0.68 /testbed/django/utils/html.py(266):         while trimmed_something:
0.68 /testbed/django/utils/html.py(290):         return lead, middle, trail
0.68 /testbed/django/utils/html.py(318):             url = None
0.68 /testbed/django/utils/html.py(319):             nofollow_attr = ' rel="nofollow"' if nofollow else ''
0.68 /testbed/django/utils/html.py(320):             if simple_url_re.match(middle):
0.68 /testbed/django/utils/html.py(322):             elif simple_url_2_re.match(middle):
0.68 /testbed/django/utils/html.py(324):             elif ':' not in middle and is_email_simple(middle):
0.68 /testbed/django/utils/html.py(295):         if '@' not in value or value.startswith('@') or value.endswith('@'):
0.68 /testbed/django/utils/html.py(296):             return False
0.68 /testbed/django/utils/html.py(334):             if url:
0.68 /testbed/django/utils/html.py(342):                 if safe_input:
0.68 /testbed/django/utils/html.py(344):                 elif autoescape:
0.68 /testbed/django/utils/html.py(308):     for i, word in enumerate(words):
0.68 /testbed/django/utils/html.py(350):     return ''.join(words)
ok

----------------------------------------------------------------------
Ran 1 test in 0.004s

OK
+ cat coverage.cover
{"/testbed/django/utils/html.py": {"3": 1, "4": 1, "5": 1, "6": 1, "7": 1, "11": 1, "12": 1, "13": 1, "14": 1, "15": 1, "16": 1, "19": 1, "20": 1, "23": 1, "25": 1, "26": 1, "27": 2, "28": 1, "29": 1, "33": 1, "34": 1, "47": 1, "48": 1, "49": 1, "50": 1, "51": 1, "52": 1, "53": 1, "54": 1, "55": 1, "56": 1, "57": 1, "58": 1, "46": 1, "62": 34, "65": 1, "66": 1, "72": 1, "73": 1, "74": 1, "71": 1, "78": 1, "92": 1, "107": 1, "118": 1, "138": 1, "139": 1, "150": 2, "169": 1, "179": 1, "180": 1, "194": 1, "195": 1, "200": 1, "235": 1, "236": 1, "353": 1, "361": 1, "43": 1, "68": 0, "84": 0, "85": 0, "86": 0, "87": 0, "88": 0, "99": 0, "100": 0, "101": 0, "102": 0, "104": 0, "113": 0, "114": 0, "115": 0, "132": 0, "134": 0, "133": 0, "141": 0, "142": 0, "143": 0, "144": 0, "146": 0, "147": 0, "151": 1, "156": 1, "159": 1, "162": 1, "165": 1, "152": 0, "153": 0, "154": 0, "157": 0, "160": 0, "163": 0, "166": 0, "173": 0, "174": 0, "175": 0, "176": 0, "184": 0, "185": 0, "186": 0, "187": 0, "189": 0, "190": 0, "191": 0, "197": 0, "202": 1, "210": 1, "211": 1, "212": 0, "214": 0, "216": 1, "217": 1, "218": 0, "219": 0, "221": 1, "224": 5, "225": 2, "227": 1, "229": 1, "230": 1, "232": 1, "203": 2, "207": 2, "252": 1, "254": 1, "259": 1, "292": 1, "307": 1, "308": 10, "309": 9, "313": 2, "315": 2, "318": 2, "319": 2, "320": 2, "321": 0, "322": 2, "323": 1, "324": 1, "325": 0, "326": 0, "327": 0, "328": 0, "329": 0, "330": 0, "331": 0, "334": 2, "335": 1, "336": 1, "337": 0, "338": 0, "339": 1, "340": 1, "342": 1, "343": 0, "344": 1, "345": 0, "346": 7, "347": 0, "348": 7, "349": 0, "350": 1, "255": 1, "256": 1, "257": 0, "265": 2, "266": 6, "267": 4, "269": 12, "270": 8, "271": 0, "272": 0, "273": 0, "275": 8, "276": 0, "277": 0, "278": 0, "279": 0, "283": 4, "284": 4, "285": 4, "286": 2, "287": 2, "288": 2, "289": 2, "290": 2, "295": 1, "296": 1, "297": 0, "298": 0, "299": 0, "301": 0, "303": 0, "304": 0, "305": 0, "358": 0, "366": 7, "367": 0, "368": 0, "369": 0, "371": 7, "372": 0, "373": 0, "374": 0, "376": 7, "377": 7, "378": 7, "379": 7}}
+ git checkout 6a5ef557f80a8eb6a758ebe99c8bb477ca47459e
Note: switching to '6a5ef557f80a8eb6a758ebe99c8bb477ca47459e'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at 6a5ef557f8 Added test for errors when saving timezone-aware times if not supported.
M	django/utils/html.py
+ git apply /root/pre_state.patch
error: unrecognized input
