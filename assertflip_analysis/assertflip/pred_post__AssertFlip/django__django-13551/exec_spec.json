{"instance_id": "django__django-13551", "repo": "django/django", "version": "3.2", "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d", "patch_list": ["diff --git a/django/contrib/auth/tokens.py b/django/contrib/auth/tokens.py\n--- a/django/contrib/auth/tokens.py\n+++ b/django/contrib/auth/tokens.py\n@@ -78,9 +78,9 @@ def _make_token_with_timestamp(self, user, timestamp, legacy=False):\n \n     def _make_hash_value(self, user, timestamp):\n         \"\"\"\n-        Hash the user's primary key and some user state that's sure to change\n-        after a password reset to produce a token that invalidated when it's\n-        used:\n+        Hash the user's primary key, email (if available), and some user state\n+        that's sure to change after a password reset to produce a token that is\n+        invalidated when it's used:\n         1. The password field will change upon a password reset (even if the\n            same password is chosen, due to password salting).\n         2. The last_login field will usually be updated very shortly after\n@@ -94,7 +94,9 @@ def _make_hash_value(self, user, timestamp):\n         # Truncate microseconds so that tokens are consistent even if the\n         # database doesn't support microseconds.\n         login_timestamp = '' if user.last_login is None else user.last_login.replace(microsecond=0, tzinfo=None)\n-        return str(user.pk) + user.password + str(login_timestamp) + str(timestamp)\n+        email_field = user.get_email_field_name()\n+        email = getattr(user, email_field, '') or ''\n+        return f'{user.pk}{user.password}{login_timestamp}{timestamp}{email}'\n \n     def _num_seconds(self, dt):\n         return int((dt - datetime(2001, 1, 1)).total_seconds())\n", "diff --git a/dev/null b/tests/test_coverup_django__django-13551.py\nnew file mode 100644\nindex e69de29..abb8619 100644\n--- /dev/null\n+++ b/tests/test_coverup_django__django-13551.py\n@@ -0,0 +1,27 @@\n+from django.test import TestCase\n+from django.contrib.auth.models import User\n+from django.contrib.auth.tokens import default_token_generator\n+from django.utils.http import urlsafe_base64_encode\n+from django.utils.encoding import force_bytes\n+\n+class PasswordResetTokenTest(TestCase):\n+    def setUp(self):\n+        # Create a user with an email address\n+        self.user = User.objects.create_user(username='testuser', email='original@example.com', password='password123')\n+        self.uidb64 = urlsafe_base64_encode(force_bytes(self.user.pk))\n+        self.token = default_token_generator.make_token(self.user)\n+\n+    def test_password_reset_token_invalid_after_email_change(self):\n+        # Change the user's email address\n+        self.user.email = 'new@example.com'\n+        self.user.save()\n+\n+        # Attempt to use the password reset token generated before the email change\n+        is_token_valid = default_token_generator.check_token(self.user, self.token)\n+\n+        # Assert that the token is correctly rejected after the email change\n+        self.assertFalse(is_token_valid)\n+\n+    def tearDown(self):\n+        # Clean up the user created for the test\n+        self.user.delete()\n"], "arch": "x86_64", "base_commit": "7f9e4524d6b23424cf44fbe1bf1f4e70f6bb066e", "test_directives": ["test_coverup_django__django-13551"], "coverage_files": ["django/contrib/auth/tokens.py"], "env_name": "testbed", "run_id": "assertflip", "patch_id": "pred_post__AssertFlip", "timeout": 1800, "rm_image": false, "force_rebuild": false, "exec_mode": "unit_test", "reproduction_script_name": null, "compute_coverage": true, "install": {"python": "3.6", "packages": "requirements.txt", "install": "python -m pip install -e .", "eval_commands": ["sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen && locale-gen", "export LANG=en_US.UTF-8", "export LANGUAGE=en_US:en", "export LC_ALL=en_US.UTF-8"]}, "cache_level": "instance", "test_command": "python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/contrib/auth/tokens\\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-13551", "req_install_commands": ["conda create -n testbed python=3.6 -y", "cat <<'EOF_59812759871' > $HOME/requirements.txt\nasgiref >= 3.3.2\nargon2-cffi >= 16.1.0\nbackports.zoneinfo; python_version < '3.9'\nbcrypt\ndocutils\ngeoip2\njinja2 >= 2.9.2\nnumpy\nPillow >= 6.2.0\npylibmc; sys.platform != 'win32'\npymemcache >= 3.4.0\npython-memcached >= 1.59\npytz\npywatchman; sys.platform != 'win32'\nPyYAML\nselenium\nsqlparse >= 0.2.2\ntblib >= 1.5.0\ntzdata\ncolorama; sys.platform == 'win32'\n\nEOF_59812759871", "conda activate testbed && python -m pip install -r $HOME/requirements.txt", "rm $HOME/requirements.txt"]}