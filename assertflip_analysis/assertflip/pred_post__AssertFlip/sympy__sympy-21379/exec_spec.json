{"instance_id": "sympy__sympy-21379", "repo": "sympy/sympy", "version": "1.9", "environment_setup_commit": "f9a6f50ec0c74d935c50a6e9c9b2cb0469570d91", "patch_list": ["diff --git a/sympy/core/mod.py b/sympy/core/mod.py\n--- a/sympy/core/mod.py\n+++ b/sympy/core/mod.py\n@@ -40,6 +40,7 @@ def eval(cls, p, q):\n         from sympy.core.mul import Mul\n         from sympy.core.singleton import S\n         from sympy.core.exprtools import gcd_terms\n+        from sympy.polys.polyerrors import PolynomialError\n         from sympy.polys.polytools import gcd\n \n         def doit(p, q):\n@@ -166,10 +167,13 @@ def doit(p, q):\n         # XXX other possibilities?\n \n         # extract gcd; any further simplification should be done by the user\n-        G = gcd(p, q)\n-        if G != 1:\n-            p, q = [\n-                gcd_terms(i/G, clear=False, fraction=False) for i in (p, q)]\n+        try:\n+            G = gcd(p, q)\n+            if G != 1:\n+                p, q = [gcd_terms(i/G, clear=False, fraction=False)\n+                        for i in (p, q)]\n+        except PolynomialError:  # issue 21373\n+            G = S.One\n         pwas, qwas = p, q\n \n         # simplify terms\n", "diff --git a/dev/null b/sympy/polys/tests/test_coverup_sympy__sympy-21379.py\nnew file mode 100644\nindex e69de29..ab1f297 100644\n--- /dev/null\n+++ b/sympy/polys/tests/test_coverup_sympy__sympy-21379.py\n@@ -0,0 +1,23 @@\n+from sympy import symbols, exp, sinh, Piecewise\n+from sympy.core.cache import clear_cache\n+from sympy.polys.polyerrors import PolynomialError\n+from sympy.testing.pytest import raises\n+\n+def test_subs_polynomial_error_with_real_symbols():\n+    from sympy import exp, sinh, Piecewise, symbols\n+\n+    # Clear cache to ensure the bug is triggered\n+    from sympy.core.cache import clear_cache\n+    clear_cache()\n+\n+    # Define real symbols\n+    x, y, z = symbols('x y z', real=True)\n+\n+    # Define the expression as described in the issue ticket\n+    expr = exp(sinh(Piecewise((x, y > x), (y, True)) / z))\n+\n+    # Assert that no PolynomialError is raised when subs is called\n+    try:\n+        expr.subs({1: 1.0})\n+    except PolynomialError:\n+        assert False, \"PolynomialError was raised unexpectedly\"\n"], "arch": "x86_64", "base_commit": "624217179aaf8d094e6ff75b7493ad1ee47599b0", "test_directives": ["sympy/polys/tests/test_coverup_sympy__sympy-21379.py"], "coverage_files": ["sympy/core/mod.py"], "env_name": "testbed", "run_id": "assertflip", "patch_id": "pred_post__AssertFlip", "timeout": 1800, "rm_image": false, "force_rebuild": false, "exec_mode": "unit_test", "reproduction_script_name": null, "compute_coverage": true, "install": {"python": "3.9", "packages": "mpmath flake8", "pip_packages": ["mpmath==1.3.0", "flake8-comprehensions"], "install": "python -m pip install -e ."}, "cache_level": "instance", "test_command": "PYTHONWARNINGS='ignore::UserWarning,ignore::SyntaxWarning' python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(sympy/core/mod\\.py)' bin/test -C --verbose sympy/polys/tests/test_coverup_sympy__sympy-21379.p", "req_install_commands": ["conda create -n testbed python=3.9 mpmath flake8 -y"]}