{"instance_id": "django__django-14999", "repo": "django/django", "version": "4.1", "environment_setup_commit": "647480166bfe7532e8c471fef0146e3a17e6c0c9", "patch_list": ["diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -320,12 +320,13 @@ def database_forwards(self, app_label, schema_editor, from_state, to_state):\n         new_model = to_state.apps.get_model(app_label, self.new_name)\n         if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n             old_model = from_state.apps.get_model(app_label, self.old_name)\n+            old_db_table = old_model._meta.db_table\n+            new_db_table = new_model._meta.db_table\n+            # Don't alter when a table name is not changed.\n+            if old_db_table == new_db_table:\n+                return\n             # Move the main table\n-            schema_editor.alter_db_table(\n-                new_model,\n-                old_model._meta.db_table,\n-                new_model._meta.db_table,\n-            )\n+            schema_editor.alter_db_table(new_model, old_db_table, new_db_table)\n             # Alter the fields pointing to us\n             for related_object in old_model._meta.related_objects:\n                 if related_object.related_model == old_model:\n", "diff --git a/dev/null b/tests/test_coverup_django__django-14999.py\nnew file mode 100644\nindex e69de29..96dac57 100644\n--- /dev/null\n+++ b/tests/test_coverup_django__django-14999.py\n@@ -0,0 +1,45 @@\n+from django.test import TestCase\n+from django.db import connection, models\n+from django.db.migrations.state import ProjectState\n+from django.db.migrations.operations.models import RenameModel\n+from django.db.migrations.state import ModelState\n+\n+class RenameModelNoopTests(TestCase):\n+    databases = {'default'}\n+\n+    def setUp(self):\n+        self.app_label = 'testapp'\n+        self.old_name = 'OldModel'\n+        self.new_name = 'NewModel'\n+        self.db_table = 'custom_table_name'\n+        self.state = ProjectState()\n+        self.state.add_model(ModelState(\n+            self.app_label,\n+            self.old_name,\n+            [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('name', models.CharField(max_length=255)),\n+            ],\n+            options={'db_table': self.db_table},\n+        ))\n+\n+    def test_rename_model_with_db_table_noop(self):\n+        # Apply the RenameModel operation\n+        migration = RenameModel(self.old_name, self.new_name)\n+        with connection.cursor() as cursor:\n+            # Disable foreign key checks for SQLite\n+            cursor.execute('PRAGMA foreign_keys = OFF;')\n+\n+            # Simulate the database forwards operation\n+            from_state = self.state.clone()\n+            to_state = from_state.clone()\n+            migration.state_forwards(self.app_label, to_state)\n+            migration.database_forwards(self.app_label, connection.schema_editor(), from_state, to_state)\n+\n+            # Check if the table was not recreated (correct behavior)\n+            cursor.execute(\"SELECT name FROM sqlite_master WHERE type='table' AND name=%s\", [self.db_table])\n+            result = cursor.fetchone()\n+            self.assertIsNotNone(result)  # The table should exist, indicating no recreation\n+\n+            # Re-enable foreign key checks\n+            cursor.execute('PRAGMA foreign_keys = ON;')\n"], "arch": "x86_64", "base_commit": "a754b82dac511475b6276039471ccd17cc64aeb8", "test_directives": ["test_coverup_django__django-14999"], "coverage_files": ["django/db/migrations/operations/models.py"], "env_name": "testbed", "run_id": "assertflip", "patch_id": "pred_post__AssertFlip", "timeout": 1800, "rm_image": false, "force_rebuild": false, "exec_mode": "unit_test", "reproduction_script_name": null, "compute_coverage": true, "install": {"python": "3.9", "packages": "requirements.txt", "install": "python -m pip install -e ."}, "cache_level": "instance", "test_command": "python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/db/migrations/operations/models\\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-14999", "req_install_commands": ["conda create -n testbed python=3.9 -y", "cat <<'EOF_59812759871' > $HOME/requirements.txt\naiosmtpd\nasgiref >= 3.4.1\nargon2-cffi >= 16.1.0\nbackports.zoneinfo; python_version < '3.9'\nbcrypt\nblack\ndocutils\ngeoip2\njinja2 >= 2.9.2\nnumpy\nPillow >= 6.2.0\npylibmc; sys.platform != 'win32'\npymemcache >= 3.4.0\npytz\npywatchman; sys.platform != 'win32'\nPyYAML\nredis >= 3.0.0\nselenium\nsqlparse >= 0.2.2\ntblib >= 1.5.0\ntzdata\ncolorama; sys.platform == 'win32'\n\nEOF_59812759871", "conda activate testbed && python -m pip install -r $HOME/requirements.txt", "rm $HOME/requirements.txt"]}