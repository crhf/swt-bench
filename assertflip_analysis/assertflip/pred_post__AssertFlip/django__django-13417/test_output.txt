+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD 71ae1ab0123582cc5bfe0f7d5f4cc19a9412f396
+ sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen
+ locale-gen
Generating locales (this might take a while)...
  en_US.UTF-8... done
Generation complete.
+ export LANG=en_US.UTF-8
+ LANG=en_US.UTF-8
+ export LANGUAGE=en_US:en
+ LANGUAGE=en_US:en
+ export LC_ALL=en_US.UTF-8
+ LC_ALL=en_US.UTF-8
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
nothing to commit, working tree clean
+ git show
commit 71ae1ab0123582cc5bfe0f7d5f4cc19a9412f396
Author: Tim Graham <timograham@gmail.com>
Date:   Mon Sep 14 01:58:05 2020 -0400

    Removed hardcoded paths to SpatialRefSys models in tests.

diff --git a/tests/gis_tests/test_spatialrefsys.py b/tests/gis_tests/test_spatialrefsys.py
index e4638baa31..bd24aaed00 100644
--- a/tests/gis_tests/test_spatialrefsys.py
+++ b/tests/gis_tests/test_spatialrefsys.py
@@ -1,8 +1,10 @@
 import re
 
+from django.db import connection
 from django.test import TestCase, skipUnlessDBFeature
+from django.utils.functional import cached_property
 
-from .utils import SpatialRefSys, oracle, postgis, spatialite
+from .utils import oracle, postgis, spatialite
 
 test_srs = ({
     'srid': 4326,
@@ -51,9 +53,13 @@ test_srs = ({
 @skipUnlessDBFeature("has_spatialrefsys_table")
 class SpatialRefSysTest(TestCase):
 
+    @cached_property
+    def SpatialRefSys(self):
+        return connection.ops.connection.ops.spatial_ref_sys()
+
     def test_get_units(self):
         epsg_4326 = next(f for f in test_srs if f['srid'] == 4326)
-        unit, unit_name = SpatialRefSys().get_units(epsg_4326['wkt'])
+        unit, unit_name = self.SpatialRefSys().get_units(epsg_4326['wkt'])
         self.assertEqual(unit_name, 'degree')
         self.assertAlmostEqual(unit, 0.01745329251994328)
 
@@ -62,7 +68,7 @@ class SpatialRefSysTest(TestCase):
         Test retrieval of SpatialRefSys model objects.
         """
         for sd in test_srs:
-            srs = SpatialRefSys.objects.get(srid=sd['srid'])
+            srs = self.SpatialRefSys.objects.get(srid=sd['srid'])
             self.assertEqual(sd['srid'], srs.srid)
 
             # Some of the authority names are borked on Oracle, e.g., SRID=32140.
@@ -84,7 +90,7 @@ class SpatialRefSysTest(TestCase):
         Test getting OSR objects from SpatialRefSys model objects.
         """
         for sd in test_srs:
-            sr = SpatialRefSys.objects.get(srid=sd['srid'])
+            sr = self.SpatialRefSys.objects.get(srid=sd['srid'])
             self.assertTrue(sr.spheroid.startswith(sd['spheroid']))
             self.assertEqual(sd['geographic'], sr.geographic)
             self.assertEqual(sd['projected'], sr.projected)
@@ -110,7 +116,7 @@ class SpatialRefSysTest(TestCase):
             prec = sd['eprec']
 
             # Getting our spatial reference and its ellipsoid
-            srs = SpatialRefSys.objects.get(srid=sd['srid'])
+            srs = self.SpatialRefSys.objects.get(srid=sd['srid'])
             ellps2 = srs.ellipsoid
 
             for i in range(3):
@@ -126,9 +132,9 @@ class SpatialRefSysTest(TestCase):
 
         add_srs_entry(3857)
         self.assertTrue(
-            SpatialRefSys.objects.filter(srid=3857).exists()
+            self.SpatialRefSys.objects.filter(srid=3857).exists()
         )
-        srs = SpatialRefSys.objects.get(srid=3857)
+        srs = self.SpatialRefSys.objects.get(srid=3857)
         self.assertTrue(
-            SpatialRefSys.get_spheroid(srs.wkt).startswith('SPHEROID[')
+            self.SpatialRefSys.get_spheroid(srs.wkt).startswith('SPHEROID[')
         )
diff --git a/tests/gis_tests/utils.py b/tests/gis_tests/utils.py
index 857a608f48..7eb61701f8 100644
--- a/tests/gis_tests/utils.py
+++ b/tests/gis_tests/utils.py
@@ -52,21 +52,6 @@ spatialite = _default_db == 'spatialite'
 # MySQL spatial indices can't handle NULL geometries.
 gisfield_may_be_null = not mysql
 
-if oracle and 'gis' in settings.DATABASES[DEFAULT_DB_ALIAS]['ENGINE']:
-    from django.contrib.gis.db.backends.oracle.models import (
-        OracleSpatialRefSys as SpatialRefSys,
-    )
-elif postgis:
-    from django.contrib.gis.db.backends.postgis.models import (
-        PostGISSpatialRefSys as SpatialRefSys,
-    )
-elif spatialite:
-    from django.contrib.gis.db.backends.spatialite.models import (
-        SpatialiteSpatialRefSys as SpatialRefSys,
-    )
-else:
-    SpatialRefSys = None
-
 
 class FuncTestMixin:
     """Assert that Func expressions aren't mutated during their as_sql()."""
+ git diff 71ae1ab0123582cc5bfe0f7d5f4cc19a9412f396
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
Requirement already satisfied: asgiref>=3.2.10 in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.2) (3.4.1)
Requirement already satisfied: pytz in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.2) (2025.2)
Requirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.2) (0.4.4)
Requirement already satisfied: typing-extensions in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from asgiref>=3.2.10->Django==3.2) (4.1.1)
Installing collected packages: Django
  Attempting uninstall: Django
    Found existing installation: Django 3.2
    Uninstalling Django-3.2:
      Successfully uninstalled Django-3.2
  Running setup.py develop for Django
Successfully installed Django-3.2
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv
+ git apply -v -
Checking patch django/db/models/query.py...
Applied patch django/db/models/query.py cleanly.
+ git apply -v -
Checking patch tests/test_coverup_django__django-13417.py...
Applied patch tests/test_coverup_django__django-13417.py cleanly.
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/db/models/query\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-13417
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(django/db/models/query\\.py)']
0.32 /testbed/django/db/models/query.py(3): """
0.32 /testbed/django/db/models/query.py(5): import copy
0.32 /testbed/django/db/models/query.py(6): import operator
0.32 /testbed/django/db/models/query.py(7): import warnings
0.32 /testbed/django/db/models/query.py(8): from collections import namedtuple
0.32 /testbed/django/db/models/query.py(9): from functools import lru_cache
0.32 /testbed/django/db/models/query.py(10): from itertools import chain
0.32 /testbed/django/db/models/query.py(12): import django
0.32 /testbed/django/db/models/query.py(13): from django.conf import settings
0.32 /testbed/django/db/models/query.py(14): from django.core import exceptions
0.32 /testbed/django/db/models/query.py(15): from django.db import (
0.32 /testbed/django/db/models/query.py(19): from django.db.models import AutoField, DateField, DateTimeField, sql
0.32 /testbed/django/db/models/query.py(20): from django.db.models.constants import LOOKUP_SEP
0.32 /testbed/django/db/models/query.py(21): from django.db.models.deletion import Collector
0.32 /testbed/django/db/models/query.py(22): from django.db.models.expressions import Case, Expression, F, Value, When
0.32 /testbed/django/db/models/query.py(23): from django.db.models.functions import Cast, Trunc
0.32 /testbed/django/db/models/query.py(24): from django.db.models.query_utils import FilteredRelation, Q
0.32 /testbed/django/db/models/query.py(25): from django.db.models.sql.constants import CURSOR, GET_ITERATOR_CHUNK_SIZE
0.32 /testbed/django/db/models/query.py(26): from django.db.models.utils import resolve_callables
0.32 /testbed/django/db/models/query.py(27): from django.utils import timezone
0.32 /testbed/django/db/models/query.py(28): from django.utils.functional import cached_property, partition
0.32 /testbed/django/db/models/query.py(31): MAX_GET_RESULTS = 21
0.32 /testbed/django/db/models/query.py(34): REPR_OUTPUT_SIZE = 20
0.32 /testbed/django/db/models/query.py(37): class BaseIterable:
0.32 /testbed/django/db/models/query.py(37): class BaseIterable:
0.32 /testbed/django/db/models/query.py(38):     def __init__(self, queryset, chunked_fetch=False, chunk_size=GET_ITERATOR_CHUNK_SIZE):
0.32 /testbed/django/db/models/query.py(44): class ModelIterable(BaseIterable):
0.32 /testbed/django/db/models/query.py(44): class ModelIterable(BaseIterable):
0.32 /testbed/django/db/models/query.py(45):     """Iterable that yields a model instance for each row."""
0.32 /testbed/django/db/models/query.py(47):     def __iter__(self):
0.32 /testbed/django/db/models/query.py(94): class ValuesIterable(BaseIterable):
0.32 /testbed/django/db/models/query.py(94): class ValuesIterable(BaseIterable):
0.32 /testbed/django/db/models/query.py(97):     """
0.32 /testbed/django/db/models/query.py(99):     def __iter__(self):
0.32 /testbed/django/db/models/query.py(115): class ValuesListIterable(BaseIterable):
0.32 /testbed/django/db/models/query.py(115): class ValuesListIterable(BaseIterable):
0.32 /testbed/django/db/models/query.py(119):     """
0.32 /testbed/django/db/models/query.py(121):     def __iter__(self):
0.32 /testbed/django/db/models/query.py(145): class NamedValuesListIterable(ValuesListIterable):
0.32 /testbed/django/db/models/query.py(145): class NamedValuesListIterable(ValuesListIterable):
0.32 /testbed/django/db/models/query.py(149):     """
0.32 /testbed/django/db/models/query.py(151):     @staticmethod
0.32 /testbed/django/db/models/query.py(152):     @lru_cache()
0.32 /testbed/django/db/models/query.py(158):     def __iter__(self):
0.32 /testbed/django/db/models/query.py(171): class FlatValuesListIterable(BaseIterable):
0.32 /testbed/django/db/models/query.py(171): class FlatValuesListIterable(BaseIterable):
0.32 /testbed/django/db/models/query.py(175):     """
0.32 /testbed/django/db/models/query.py(177):     def __iter__(self):
0.32 /testbed/django/db/models/query.py(184): class QuerySet:
0.32 /testbed/django/db/models/query.py(184): class QuerySet:
0.32 /testbed/django/db/models/query.py(185):     """Represent a lazy database lookup for a set of objects."""
0.32 /testbed/django/db/models/query.py(187):     def __init__(self, model=None, query=None, using=None, hints=None):
0.32 /testbed/django/db/models/query.py(203):     @property
0.32 /testbed/django/db/models/query.py(211):     @query.setter
0.32 /testbed/django/db/models/query.py(217):     def as_manager(cls):
0.32 /testbed/django/db/models/query.py(223):     as_manager.queryset_only = True
0.32 /testbed/django/db/models/query.py(224):     as_manager = classmethod(as_manager)
0.32 /testbed/django/db/models/query.py(230):     def __deepcopy__(self, memo):
0.32 /testbed/django/db/models/query.py(240):     def __getstate__(self):
0.32 /testbed/django/db/models/query.py(245):     def __setstate__(self, state):
0.32 /testbed/django/db/models/query.py(264):     def __repr__(self):
0.32 /testbed/django/db/models/query.py(270):     def __len__(self):
0.32 /testbed/django/db/models/query.py(274):     def __iter__(self):
0.32 /testbed/django/db/models/query.py(292):     def __bool__(self):
0.32 /testbed/django/db/models/query.py(296):     def __getitem__(self, k):
0.32 /testbed/django/db/models/query.py(329):     def __class_getitem__(cls, *args, **kwargs):
0.32 /testbed/django/db/models/query.py(332):     def __and__(self, other):
0.32 /testbed/django/db/models/query.py(343):     def __or__(self, other):
0.32 /testbed/django/db/models/query.py(361):     def _iterator(self, use_chunked_fetch, chunk_size):
0.32 /testbed/django/db/models/query.py(364):     def iterator(self, chunk_size=2000):
0.32 /testbed/django/db/models/query.py(374):     def aggregate(self, *args, **kwargs):
0.32 /testbed/django/db/models/query.py(402):     def count(self):
0.32 /testbed/django/db/models/query.py(415):     def get(self, *args, **kwargs):
0.32 /testbed/django/db/models/query.py(442):     def create(self, **kwargs):
0.32 /testbed/django/db/models/query.py(452):     def _populate_pk_values(self, objs):
0.32 /testbed/django/db/models/query.py(457):     def bulk_create(self, objs, batch_size=None, ignore_conflicts=False):
0.32 /testbed/django/db/models/query.py(521):     def bulk_update(self, objs, fields, batch_size=None):
0.32 /testbed/django/db/models/query.py(563):     bulk_update.alters_data = True
0.32 /testbed/django/db/models/query.py(565):     def get_or_create(self, defaults=None, **kwargs):
0.32 /testbed/django/db/models/query.py(590):     def update_or_create(self, defaults=None, **kwargs):
0.32 /testbed/django/db/models/query.py(610):     def _extract_model_params(self, defaults, **kwargs):
0.32 /testbed/django/db/models/query.py(635):     def _earliest(self, *fields):
0.32 /testbed/django/db/models/query.py(660):     def earliest(self, *fields):
0.32 /testbed/django/db/models/query.py(663):     def latest(self, *fields):
0.32 /testbed/django/db/models/query.py(666):     def first(self):
0.32 /testbed/django/db/models/query.py(671):     def last(self):
0.32 /testbed/django/db/models/query.py(676):     def in_bulk(self, id_list=None, *, field_name='pk'):
0.32 /testbed/django/db/models/query.py(715):     def delete(self):
0.32 /testbed/django/db/models/query.py(744):     delete.alters_data = True
0.32 /testbed/django/db/models/query.py(745):     delete.queryset_only = True
0.32 /testbed/django/db/models/query.py(747):     def _raw_delete(self, using):
0.32 /testbed/django/db/models/query.py(759):     _raw_delete.alters_data = True
0.32 /testbed/django/db/models/query.py(761):     def update(self, **kwargs):
0.32 /testbed/django/db/models/query.py(778):     update.alters_data = True
0.32 /testbed/django/db/models/query.py(780):     def _update(self, values):
0.32 /testbed/django/db/models/query.py(795):     _update.alters_data = True
0.32 /testbed/django/db/models/query.py(796):     _update.queryset_only = False
0.32 /testbed/django/db/models/query.py(798):     def exists(self):
0.32 /testbed/django/db/models/query.py(803):     def _prefetch_related_objects(self):
0.32 /testbed/django/db/models/query.py(808):     def explain(self, *, format=None, **options):
test_ordered_property_with_group_by (test_coverup_django__django-13417.QuerySetOrderedPropertyTests) ... 0.32 /testbed/django/db/models/query.py(815):     def raw(self, raw_query, params=None, translations=None, using=None):
0.32 /testbed/django/db/models/query.py(822):     def _values(self, *fields, **expressions):
0.32 /testbed/django/db/models/query.py(830):     def values(self, *fields, **expressions):
0.32 /testbed/django/db/models/query.py(836):     def values_list(self, *fields, flat=False, named=False):
0.32 /testbed/django/db/models/query.py(867):     def dates(self, field_name, kind, order='ASC'):
0.32 /testbed/django/db/models/query.py(883):     def datetimes(self, field_name, kind, order='ASC', tzinfo=None, is_dst=None):
0.32 /testbed/django/db/models/query.py(910):     def none(self):
0.32 /testbed/django/db/models/query.py(920):     def all(self):
0.32 /testbed/django/db/models/query.py(927):     def filter(self, *args, **kwargs):
0.32 /testbed/django/db/models/query.py(935):     def exclude(self, *args, **kwargs):
0.32 /testbed/django/db/models/query.py(943):     def _filter_or_exclude(self, negate, args, kwargs):
0.32 /testbed/django/db/models/query.py(956):     def _filter_or_exclude_inplace(self, negate, args, kwargs):
0.32 /testbed/django/db/models/query.py(962):     def complex_filter(self, filter_obj):
0.32 /testbed/django/db/models/query.py(979):     def _combinator_query(self, combinator, *other_qs, all=False):
0.32 /testbed/django/db/models/query.py(990):     def union(self, *other_qs, all=False):
0.32 /testbed/django/db/models/query.py(997):     def intersection(self, *other_qs):
0.32 /testbed/django/db/models/query.py(1006):     def difference(self, *other_qs):
0.32 /testbed/django/db/models/query.py(1012):     def select_for_update(self, nowait=False, skip_locked=False, of=(), no_key=False):
0.32 /testbed/django/db/models/query.py(1028):     def select_related(self, *fields):
0.32 /testbed/django/db/models/query.py(1050):     def prefetch_related(self, *lookups):
0.32 /testbed/django/db/models/query.py(1073):     def annotate(self, *args, **kwargs):
0.32 /testbed/django/db/models/query.py(1081):     def alias(self, *args, **kwargs):
0.32 /testbed/django/db/models/query.py(1088):     def _annotate(self, args, kwargs, select=True):
0.32 /testbed/django/db/models/query.py(1131):     def order_by(self, *field_names):
0.32 /testbed/django/db/models/query.py(1140):     def distinct(self, *field_names):
0.32 /testbed/django/db/models/query.py(1152):               order_by=None, select_params=None):
0.32 /testbed/django/db/models/query.py(1161):     def reverse(self):
0.32 /testbed/django/db/models/query.py(1169):     def defer(self, *fields):
0.32 /testbed/django/db/models/query.py(1186):     def only(self, *fields):
0.32 /testbed/django/db/models/query.py(1207):     def using(self, alias):
0.32 /testbed/django/db/models/query.py(1217):     @property
0.32 /testbed/django/db/models/query.py(1237):     @property
0.32 /testbed/django/db/models/query.py(1248):     def _insert(self, objs, fields, returning_fields=None, raw=False, using=None, ignore_conflicts=False):
0.32 /testbed/django/db/models/query.py(1259):     _insert.alters_data = True
0.32 /testbed/django/db/models/query.py(1260):     _insert.queryset_only = False
0.32 /testbed/django/db/models/query.py(1262):     def _batched_insert(self, objs, fields, batch_size, ignore_conflicts=False):
0.32 /testbed/django/db/models/query.py(1284):     def _chain(self, **kwargs):
0.32 /testbed/django/db/models/query.py(1296):     def _clone(self):
0.32 /testbed/django/db/models/query.py(1310):     def _fetch_all(self):
0.32 /testbed/django/db/models/query.py(1316):     def _next_is_sticky(self):
0.32 /testbed/django/db/models/query.py(1330):     def _merge_sanity_check(self, other):
0.32 /testbed/django/db/models/query.py(1341):     def _merge_known_related_objects(self, other):
0.32 /testbed/django/db/models/query.py(1348):     def resolve_expression(self, *args, **kwargs):
0.32 /testbed/django/db/models/query.py(1356):     resolve_expression.queryset_only = True
0.32 /testbed/django/db/models/query.py(1358):     def _add_hints(self, **hints):
0.32 /testbed/django/db/models/query.py(1365):     def _has_filters(self):
0.32 /testbed/django/db/models/query.py(1373):     @staticmethod
0.32 /testbed/django/db/models/query.py(1384):     def _not_support_combined_queries(self, operation_name):
0.32 /testbed/django/db/models/query.py(1392): class InstanceCheckMeta(type):
0.32 /testbed/django/db/models/query.py(1392): class InstanceCheckMeta(type):
0.32 /testbed/django/db/models/query.py(1393):     def __instancecheck__(self, instance):
0.32 /testbed/django/db/models/query.py(1397): class EmptyQuerySet(metaclass=InstanceCheckMeta):
0.32 /testbed/django/db/models/query.py(1397): class EmptyQuerySet(metaclass=InstanceCheckMeta):
0.32 /testbed/django/db/models/query.py(1401):     """
0.32 /testbed/django/db/models/query.py(1403):     def __init__(self, *args, **kwargs):
0.32 /testbed/django/db/models/query.py(1407): class RawQuerySet:
0.32 /testbed/django/db/models/query.py(1407): class RawQuerySet:
0.32 /testbed/django/db/models/query.py(1411):     """
0.32 /testbed/django/db/models/query.py(1413):                  translations=None, using=None, hints=None):
0.32 /testbed/django/db/models/query.py(1425):     def resolve_model_init_order(self):
0.32 /testbed/django/db/models/query.py(1435):     def prefetch_related(self, *lookups):
0.32 /testbed/django/db/models/query.py(1444):     def _prefetch_related_objects(self):
0.32 /testbed/django/db/models/query.py(1448):     def _clone(self):
0.32 /testbed/django/db/models/query.py(1457):     def _fetch_all(self):
0.32 /testbed/django/db/models/query.py(1463):     def __len__(self):
0.32 /testbed/django/db/models/query.py(1467):     def __bool__(self):
0.32 /testbed/django/db/models/query.py(1471):     def __iter__(self):
0.33 /testbed/django/db/models/query.py(1475):     def iterator(self):
0.33 /testbed/django/db/models/query.py(1510):     def __repr__(self):
0.33 /testbed/django/db/models/query.py(1513):     def __getitem__(self, k):
0.33 /testbed/django/db/models/query.py(1516):     @property
0.33 /testbed/django/db/models/query.py(1521):     def using(self, alias):
0.33 /testbed/django/db/models/query.py(1530):     @cached_property
0.33 /testbed/django/db/models/query.py(1548):     @cached_property
0.33 /testbed/django/db/models/query.py(1559): class Prefetch:
0.33 /testbed/django/db/models/query.py(1559): class Prefetch:
0.33 /testbed/django/db/models/query.py(1560):     def __init__(self, lookup, queryset=None, to_attr=None):
0.33 /testbed/django/db/models/query.py(1581):     def __getstate__(self):
0.33 /testbed/django/db/models/query.py(1591):     def add_prefix(self, prefix):
0.33 /testbed/django/db/models/query.py(1595):     def get_current_prefetch_to(self, level):
0.33 /testbed/django/db/models/query.py(1598):     def get_current_to_attr(self, level):
0.33 /testbed/django/db/models/query.py(1604):     def get_current_queryset(self, level):
0.33 /testbed/django/db/models/query.py(1609):     def __eq__(self, other):
0.33 /testbed/django/db/models/query.py(1614):     def __hash__(self):
0.33 /testbed/django/db/models/query.py(1618): def normalize_prefetch_lookups(lookups, prefix=None):
0.33 /testbed/django/db/models/query.py(1630): def prefetch_related_objects(model_instances, *related_lookups):
0.33 /testbed/django/db/models/query.py(1756): def get_prefetcher(instance, through_attr, to_attr):
0.33 /testbed/django/db/models/query.py(1803): def prefetch_one_level(instances, prefetcher, lookup, level):
0.33 /testbed/django/db/models/query.py(1903): class RelatedPopulator:
0.33 /testbed/django/db/models/query.py(1903): class RelatedPopulator:
0.33 /testbed/django/db/models/query.py(1917):     """
0.33 /testbed/django/db/models/query.py(1918):     def __init__(self, klass_info, select, db):
0.33 /testbed/django/db/models/query.py(1964):     def populate(self, row, from_obj):
0.33 /testbed/django/db/models/query.py(1980): def get_related_populators(klass_info, select, db):
Testing against Django installed in '/testbed/django'
Skipping setup of unused database(s): default, other.
System check identified no issues (0 silenced).
0.62 /testbed/django/db/models/query.py(188):         self.model = model
0.62 /testbed/django/db/models/query.py(189):         self._db = using
0.62 /testbed/django/db/models/query.py(190):         self._hints = hints or {}
0.62 /testbed/django/db/models/query.py(191):         self._query = query or sql.Query(self.model)
0.62 /testbed/django/db/models/query.py(192):         self._result_cache = None
0.62 /testbed/django/db/models/query.py(193):         self._sticky_filter = False
0.62 /testbed/django/db/models/query.py(194):         self._for_write = False
0.62 /testbed/django/db/models/query.py(195):         self._prefetch_related_lookups = ()
0.62 /testbed/django/db/models/query.py(196):         self._prefetch_done = False
0.62 /testbed/django/db/models/query.py(197):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.62 /testbed/django/db/models/query.py(198):         self._iterable_class = ModelIterable
0.62 /testbed/django/db/models/query.py(199):         self._fields = None
0.62 /testbed/django/db/models/query.py(200):         self._defer_next_filter = False
0.62 /testbed/django/db/models/query.py(201):         self._deferred_filter = None
0.62 /testbed/django/db/models/query.py(1223):         if isinstance(self, EmptyQuerySet):
0.62 /testbed/django/db/models/query.py(1394):         return isinstance(instance, QuerySet) and instance.query.is_empty()
0.62 /testbed/django/db/models/query.py(205):         if self._deferred_filter:
0.62 /testbed/django/db/models/query.py(209):         return self._query
0.62 /testbed/django/db/models/query.py(1225):         if self.query.extra_order_by or self.query.order_by:
0.62 /testbed/django/db/models/query.py(205):         if self._deferred_filter:
0.62 /testbed/django/db/models/query.py(209):         return self._query
0.62 /testbed/django/db/models/query.py(205):         if self._deferred_filter:
0.62 /testbed/django/db/models/query.py(209):         return self._query
0.62 /testbed/django/db/models/query.py(1228):             self.query.default_ordering and
0.62 /testbed/django/db/models/query.py(205):         if self._deferred_filter:
0.62 /testbed/django/db/models/query.py(209):         return self._query
0.62 /testbed/django/db/models/query.py(1229):             self.query.get_meta().ordering and
0.62 /testbed/django/db/models/query.py(205):         if self._deferred_filter:
0.62 /testbed/django/db/models/query.py(209):         return self._query
0.62 /testbed/django/db/models/query.py(1231):             not self.query.group_by
0.62 /testbed/django/db/models/query.py(205):         if self._deferred_filter:
0.62 /testbed/django/db/models/query.py(209):         return self._query
0.62 /testbed/django/db/models/query.py(1233):             return True
0.62 /testbed/django/db/models/query.py(188):         self.model = model
0.62 /testbed/django/db/models/query.py(189):         self._db = using
0.62 /testbed/django/db/models/query.py(190):         self._hints = hints or {}
0.62 /testbed/django/db/models/query.py(191):         self._query = query or sql.Query(self.model)
0.62 /testbed/django/db/models/query.py(192):         self._result_cache = None
0.62 /testbed/django/db/models/query.py(193):         self._sticky_filter = False
0.62 /testbed/django/db/models/query.py(194):         self._for_write = False
0.62 /testbed/django/db/models/query.py(195):         self._prefetch_related_lookups = ()
0.62 /testbed/django/db/models/query.py(196):         self._prefetch_done = False
0.62 /testbed/django/db/models/query.py(197):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.62 /testbed/django/db/models/query.py(198):         self._iterable_class = ModelIterable
0.62 /testbed/django/db/models/query.py(199):         self._fields = None
0.62 /testbed/django/db/models/query.py(200):         self._defer_next_filter = False
0.62 /testbed/django/db/models/query.py(201):         self._deferred_filter = None
0.62 /testbed/django/db/models/query.py(1078):         self._not_support_combined_queries('annotate')
0.62 /testbed/django/db/models/query.py(1385):         if self.query.combinator:
0.62 /testbed/django/db/models/query.py(205):         if self._deferred_filter:
0.62 /testbed/django/db/models/query.py(209):         return self._query
0.62 /testbed/django/db/models/query.py(1079):         return self._annotate(args, kwargs, select=True)
0.62 /testbed/django/db/models/query.py(1089):         self._validate_values_are_expressions(args + tuple(kwargs.values()), method_name='annotate')
0.62 /testbed/django/db/models/query.py(1375):         invalid_args = sorted(str(arg) for arg in values if not hasattr(arg, 'resolve_expression'))
0.62 /testbed/django/db/models/query.py(1375):         invalid_args = sorted(str(arg) for arg in values if not hasattr(arg, 'resolve_expression'))
0.62 /testbed/django/db/models/query.py(1375):         invalid_args = sorted(str(arg) for arg in values if not hasattr(arg, 'resolve_expression'))
0.62 /testbed/django/db/models/query.py(1376):         if invalid_args:
0.62 /testbed/django/db/models/query.py(1090):         annotations = {}
0.62 /testbed/django/db/models/query.py(1091):         for arg in args:
0.62 /testbed/django/db/models/query.py(1093):             try:
0.62 /testbed/django/db/models/query.py(1094):                 if arg.default_alias in kwargs:
0.62 /testbed/django/db/models/query.py(1100):             annotations[arg.default_alias] = arg
0.62 /testbed/django/db/models/query.py(1091):         for arg in args:
0.62 /testbed/django/db/models/query.py(1101):         annotations.update(kwargs)
0.62 /testbed/django/db/models/query.py(1103):         clone = self._chain()
0.62 /testbed/django/db/models/query.py(1289):         obj = self._clone()
0.62 /testbed/django/db/models/query.py(1301):         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)
0.62 /testbed/django/db/models/query.py(205):         if self._deferred_filter:
0.62 /testbed/django/db/models/query.py(209):         return self._query
0.62 /testbed/django/db/models/query.py(188):         self.model = model
0.62 /testbed/django/db/models/query.py(189):         self._db = using
0.62 /testbed/django/db/models/query.py(190):         self._hints = hints or {}
0.62 /testbed/django/db/models/query.py(191):         self._query = query or sql.Query(self.model)
0.62 /testbed/django/db/models/query.py(192):         self._result_cache = None
0.62 /testbed/django/db/models/query.py(193):         self._sticky_filter = False
0.62 /testbed/django/db/models/query.py(194):         self._for_write = False
0.62 /testbed/django/db/models/query.py(195):         self._prefetch_related_lookups = ()
0.62 /testbed/django/db/models/query.py(196):         self._prefetch_done = False
0.62 /testbed/django/db/models/query.py(197):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.62 /testbed/django/db/models/query.py(198):         self._iterable_class = ModelIterable
0.62 /testbed/django/db/models/query.py(199):         self._fields = None
0.62 /testbed/django/db/models/query.py(200):         self._defer_next_filter = False
0.62 /testbed/django/db/models/query.py(201):         self._deferred_filter = None
0.62 /testbed/django/db/models/query.py(1302):         c._sticky_filter = self._sticky_filter
0.62 /testbed/django/db/models/query.py(1303):         c._for_write = self._for_write
0.62 /testbed/django/db/models/query.py(1304):         c._prefetch_related_lookups = self._prefetch_related_lookups[:]
0.62 /testbed/django/db/models/query.py(1305):         c._known_related_objects = self._known_related_objects
0.62 /testbed/django/db/models/query.py(1306):         c._iterable_class = self._iterable_class
0.62 /testbed/django/db/models/query.py(1307):         c._fields = self._fields
0.62 /testbed/django/db/models/query.py(1308):         return c
0.62 /testbed/django/db/models/query.py(1290):         if obj._sticky_filter:
0.62 /testbed/django/db/models/query.py(1293):         obj.__dict__.update(kwargs)
0.62 /testbed/django/db/models/query.py(1294):         return obj
0.62 /testbed/django/db/models/query.py(1104):         names = self._fields
0.62 /testbed/django/db/models/query.py(1105):         if names is None:
0.62 /testbed/django/db/models/query.py(1106):             names = set(chain.from_iterable(
0.62 /testbed/django/db/models/query.py(1107):                 (field.name, field.attname) if hasattr(field, 'attname') else (field.name,)
0.62 /testbed/django/db/models/query.py(1108):                 for field in self.model._meta.get_fields()
0.62 /testbed/django/db/models/query.py(1107):                 (field.name, field.attname) if hasattr(field, 'attname') else (field.name,)
0.62 /testbed/django/db/models/query.py(1108):                 for field in self.model._meta.get_fields()
0.62 /testbed/django/db/models/query.py(1107):                 (field.name, field.attname) if hasattr(field, 'attname') else (field.name,)
0.62 /testbed/django/db/models/query.py(1108):                 for field in self.model._meta.get_fields()
0.62 /testbed/django/db/models/query.py(1107):                 (field.name, field.attname) if hasattr(field, 'attname') else (field.name,)
0.62 /testbed/django/db/models/query.py(1111):         for alias, annotation in annotations.items():
0.62 /testbed/django/db/models/query.py(1112):             if alias in names:
0.62 /testbed/django/db/models/query.py(1115):             if isinstance(annotation, FilteredRelation):
0.62 /testbed/django/db/models/query.py(1118):                 clone.query.add_annotation(
0.62 /testbed/django/db/models/query.py(205):         if self._deferred_filter:
0.62 /testbed/django/db/models/query.py(209):         return self._query
0.62 /testbed/django/db/models/query.py(1119):                     annotation, alias, is_summary=False, select=select,
0.63 /testbed/django/db/models/query.py(1111):         for alias, annotation in annotations.items():
0.63 /testbed/django/db/models/query.py(1121):         for alias, annotation in clone.query.annotations.items():
0.63 /testbed/django/db/models/query.py(205):         if self._deferred_filter:
0.63 /testbed/django/db/models/query.py(209):         return self._query
0.63 /testbed/django/db/models/query.py(1122):             if alias in annotations and annotation.contains_aggregate:
0.63 /testbed/django/db/models/query.py(1123):                 if clone._fields is None:
0.63 /testbed/django/db/models/query.py(1124):                     clone.query.group_by = True
0.63 /testbed/django/db/models/query.py(205):         if self._deferred_filter:
0.63 /testbed/django/db/models/query.py(209):         return self._query
0.63 /testbed/django/db/models/query.py(1127):                 break
0.63 /testbed/django/db/models/query.py(1129):         return clone
0.63 /testbed/django/db/models/query.py(925):         return self._chain()
0.63 /testbed/django/db/models/query.py(1289):         obj = self._clone()
0.63 /testbed/django/db/models/query.py(1301):         c = self.__class__(model=self.model, query=self.query.chain(), using=self._db, hints=self._hints)
0.63 /testbed/django/db/models/query.py(205):         if self._deferred_filter:
0.63 /testbed/django/db/models/query.py(209):         return self._query
0.63 /testbed/django/db/models/query.py(188):         self.model = model
0.63 /testbed/django/db/models/query.py(189):         self._db = using
0.63 /testbed/django/db/models/query.py(190):         self._hints = hints or {}
0.63 /testbed/django/db/models/query.py(191):         self._query = query or sql.Query(self.model)
0.63 /testbed/django/db/models/query.py(192):         self._result_cache = None
0.63 /testbed/django/db/models/query.py(193):         self._sticky_filter = False
0.63 /testbed/django/db/models/query.py(194):         self._for_write = False
0.63 /testbed/django/db/models/query.py(195):         self._prefetch_related_lookups = ()
0.63 /testbed/django/db/models/query.py(196):         self._prefetch_done = False
0.63 /testbed/django/db/models/query.py(197):         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}
0.63 /testbed/django/db/models/query.py(198):         self._iterable_class = ModelIterable
0.63 /testbed/django/db/models/query.py(199):         self._fields = None
0.63 /testbed/django/db/models/query.py(200):         self._defer_next_filter = False
0.63 /testbed/django/db/models/query.py(201):         self._deferred_filter = None
0.63 /testbed/django/db/models/query.py(1302):         c._sticky_filter = self._sticky_filter
0.63 /testbed/django/db/models/query.py(1303):         c._for_write = self._for_write
0.63 /testbed/django/db/models/query.py(1304):         c._prefetch_related_lookups = self._prefetch_related_lookups[:]
0.63 /testbed/django/db/models/query.py(1305):         c._known_related_objects = self._known_related_objects
0.63 /testbed/django/db/models/query.py(1306):         c._iterable_class = self._iterable_class
0.63 /testbed/django/db/models/query.py(1307):         c._fields = self._fields
0.63 /testbed/django/db/models/query.py(1308):         return c
0.63 /testbed/django/db/models/query.py(1290):         if obj._sticky_filter:
0.63 /testbed/django/db/models/query.py(1293):         obj.__dict__.update(kwargs)
0.63 /testbed/django/db/models/query.py(1294):         return obj
0.63 /testbed/django/db/models/query.py(1223):         if isinstance(self, EmptyQuerySet):
0.63 /testbed/django/db/models/query.py(1394):         return isinstance(instance, QuerySet) and instance.query.is_empty()
0.63 /testbed/django/db/models/query.py(205):         if self._deferred_filter:
0.63 /testbed/django/db/models/query.py(209):         return self._query
0.63 /testbed/django/db/models/query.py(1225):         if self.query.extra_order_by or self.query.order_by:
0.63 /testbed/django/db/models/query.py(205):         if self._deferred_filter:
0.63 /testbed/django/db/models/query.py(209):         return self._query
0.63 /testbed/django/db/models/query.py(205):         if self._deferred_filter:
0.63 /testbed/django/db/models/query.py(209):         return self._query
0.63 /testbed/django/db/models/query.py(1228):             self.query.default_ordering and
0.63 /testbed/django/db/models/query.py(205):         if self._deferred_filter:
0.63 /testbed/django/db/models/query.py(209):         return self._query
0.63 /testbed/django/db/models/query.py(1229):             self.query.get_meta().ordering and
0.63 /testbed/django/db/models/query.py(205):         if self._deferred_filter:
0.63 /testbed/django/db/models/query.py(209):         return self._query
0.63 /testbed/django/db/models/query.py(1231):             not self.query.group_by
0.63 /testbed/django/db/models/query.py(205):         if self._deferred_filter:
0.63 /testbed/django/db/models/query.py(209):         return self._query
0.63 /testbed/django/db/models/query.py(1235):             return False
ok

----------------------------------------------------------------------
Ran 1 test in 0.002s

OK
+ cat coverage.cover
{"/testbed/django/db/models/query.py": {"5": 1, "6": 1, "7": 1, "8": 1, "9": 1, "10": 1, "12": 1, "13": 1, "14": 1, "15": 1, "19": 1, "20": 1, "21": 1, "22": 1, "23": 1, "24": 1, "25": 1, "26": 1, "27": 1, "28": 1, "31": 1, "34": 1, "37": 2, "44": 2, "94": 2, "115": 2, "145": 2, "171": 2, "184": 2, "1392": 2, "1397": 2, "1407": 2, "1559": 2, "1618": 1, "1630": 1, "1756": 1, "1803": 1, "1903": 2, "1980": 1, "38": 1, "39": 0, "40": 0, "41": 0, "47": 1, "48": 0, "49": 0, "50": 0, "53": 0, "54": 0, "55": 0, "56": 0, "57": 0, "58": 0, "59": 0, "60": 0, "61": 0, "63": 0, "68": 0, "70": 0, "71": 0, "72": 0, "73": 0, "74": 0, "75": 0, "76": 0, "79": 0, "81": 0, "82": 0, "83": 0, "84": 0, "85": 0, "86": 0, "87": 0, "89": 0, "91": 0, "64": 0, "67": 0, "99": 1, "100": 0, "101": 0, "102": 0, "106": 0, "107": 0, "108": 0, "110": 0, "111": 0, "112": 0, "121": 1, "122": 0, "123": 0, "124": 0, "126": 0, "129": 0, "130": 0, "131": 0, "133": 0, "134": 0, "136": 0, "137": 0, "138": 0, "139": 0, "140": 0, "142": 0, "151": 1, "152": 1, "158": 1, "156": 0, "159": 0, "160": 0, "161": 0, "163": 0, "164": 0, "165": 0, "166": 0, "167": 0, "168": 0, "177": 1, "178": 0, "179": 0, "180": 0, "181": 0, "187": 1, "203": 1, "211": 1, "217": 1, "223": 1, "224": 1, "230": 1, "240": 1, "245": 1, "264": 1, "270": 1, "274": 1, "292": 1, "296": 1, "329": 1, "332": 1, "343": 1, "361": 1, "364": 1, "374": 1, "402": 1, "415": 1, "442": 1, "452": 1, "457": 1, "521": 1, "563": 1, "565": 1, "590": 1, "610": 1, "635": 1, "660": 1, "663": 1, "666": 1, "671": 1, "676": 1, "715": 1, "744": 1, "745": 1, "747": 1, "759": 1, "761": 1, "778": 1, "780": 1, "795": 1, "796": 1, "798": 1, "803": 1, "808": 1, "815": 1, "822": 1, "830": 1, "836": 1, "867": 1, "883": 1, "910": 1, "920": 1, "927": 1, "935": 1, "943": 1, "956": 1, "962": 1, "979": 1, "990": 1, "997": 1, "1006": 1, "1012": 1, "1028": 1, "1050": 1, "1073": 1, "1081": 1, "1088": 1, "1131": 1, "1140": 1, "1152": 1, "1161": 1, "1169": 1, "1186": 1, "1207": 1, "1217": 1, "1237": 1, "1248": 1, "1259": 1, "1260": 1, "1262": 1, "1284": 1, "1296": 1, "1310": 1, "1316": 1, "1330": 1, "1341": 1, "1348": 1, "1356": 1, "1358": 1, "1365": 1, "1373": 1, "1384": 1, "188": 4, "189": 4, "190": 4, "191": 4, "192": 4, "193": 4, "194": 4, "195": 4, "196": 4, "197": 4, "198": 4, "199": 4, "200": 4, "201": 4, "205": 18, "206": 0, "207": 0, "208": 0, "209": 18, "213": 0, "214": 0, "215": 0, "219": 0, "220": 0, "221": 0, "222": 0, "232": 0, "233": 0, "234": 0, "235": 0, "237": 0, "238": 0, "242": 0, "243": 0, "246": 0, "247": 0, "248": 0, "249": 0, "250": 0, "252": 0, "253": 0, "254": 0, "257": 0, "258": 0, "259": 0, "260": 0, "262": 0, "265": 0, "266": 0, "267": 0, "268": 0, "271": 0, "272": 0, "289": 0, "290": 0, "293": 0, "294": 0, "298": 0, "299": 0, "300": 0, "301": 0, "303": 0, "304": 0, "305": 0, "306": 0, "308": 0, "309": 0, "311": 0, "312": 0, "313": 0, "314": 0, "316": 0, "317": 0, "318": 0, "320": 0, "321": 0, "322": 0, "324": 0, "325": 0, "326": 0, "327": 0, "330": 0, "333": 0, "334": 0, "335": 0, "336": 0, "337": 0, "338": 0, "339": 0, "340": 0, "341": 0, "344": 0, "345": 0, "346": 0, "347": 0, "348": 0, "349": 0, "350": 0, "351": 0, "352": 0, "353": 0, "354": 0, "355": 0, "362": 0, "369": 0, "370": 0, "371": 0, "372": 0, "382": 0, "383": 0, "384": 0, "385": 0, "389": 0, "390": 0, "391": 0, "392": 0, "393": 0, "395": 0, "396": 0, "397": 0, "398": 0, "399": 0, "400": 0, "410": 0, "411": 0, "413": 0, "420": 0, "421": 0, "422": 0, "423": 0, "424": 0, "425": 0, "426": 0, "427": 0, "428": 0, "429": 0, "430": 0, "431": 0, "432": 0, "433": 0, "435": 0, "436": 0, "437": 0, "438": 0, "447": 0, "448": 0, "449": 0, "450": 0, "453": 0, "454": 0, "455": 0, "477": 0, "482": 0, "483": 0, "484": 0, "485": 0, "486": 0, "487": 0, "488": 0, "489": 0, "490": 0, "491": 0, "492": 0, "493": 0, "494": 0, "495": 0, "496": 0, "497": 0, "499": 0, "500": 0, "501": 0, "502": 0, "503": 0, "504": 0, "505": 0, "506": 0, "507": 0, "508": 0, "509": 0, "511": 0, "512": 0, "513": 0, "514": 0, "515": 0, "516": 0, "517": 0, "519": 0, "525": 0, "526": 0, "527": 0, "528": 0, "529": 0, "530": 0, "531": 0, "532": 0, "533": 0, "534": 0, "535": 0, "536": 0, "537": 0, "538": 0, "541": 0, "542": 0, "543": 0, "544": 0, "545": 0, "546": 0, "547": 0, "548": 0, "549": 0, "550": 0, "551": 0, "552": 0, "553": 0, "554": 0, "555": 0, "556": 0, "557": 0, "558": 0, "559": 0, "560": 0, "561": 0, "562": 0, "573": 0, "574": 0, "575": 0, "576": 0, "577": 0, "579": 0, "580": 0, "581": 0, "582": 0, "583": 0, "584": 0, "585": 0, "586": 0, "587": 0, "588": 0, "597": 0, "598": 0, "599": 0, "602": 0, "603": 0, "604": 0, "605": 0, "606": 0, "607": 0, "608": 0, "615": 0, "616": 0, "617": 0, "618": 0, "619": 0, "620": 0, "621": 0, "622": 0, "623": 0, "625": 0, "626": 0, "627": 0, "628": 0, "629": 0, "630": 0, "631": 0, "633": 0, "640": 0, "641": 0, "643": 0, "644": 0, "645": 0, "646": 0, "647": 0, "648": 0, "652": 0, "653": 0, "654": 0, "655": 0, "656": 0, "657": 0, "658": 0, "661": 0, "664": 0, "668": 0, "669": 0, "673": 0, "674": 0, "681": 0, "682": 0, "683": 0, "685": 0, "686": 0, "690": 0, "691": 0, "692": 0, "693": 0, "695": 0, "696": 0, "697": 0, "698": 0, "699": 0, "700": 0, "701": 0, "704": 0, "705": 0, "706": 0, "707": 0, "708": 0, "710": 0, "712": 0, "713": 0, "687": 0, "717": 0, "718": 0, "719": 0, "721": 0, "722": 0, "724": 0, "729": 0, "732": 0, "733": 0, "734": 0, "736": 0, "737": 0, "738": 0, "741": 0, "742": 0, "752": 0, "753": 0, "754": 0, "755": 0, "756": 0, "757": 0, "758": 0, "766": 0, "767": 0, "768": 0, "769": 0, "770": 0, "771": 0, "773": 0, "774": 0, "775": 0, "776": 0, "777": 0, "787": 0, "788": 0, "789": 0, "790": 0, "792": 0, "793": 0, "794": 0, "799": 0, "800": 0, "801": 0, "805": 0, "806": 0, "809": 0, "816": 0, "817": 0, "818": 0, "819": 0, "820": 0, "823": 0, "824": 0, "825": 0, "826": 0, "827": 0, "828": 0, "831": 0, "832": 0, "833": 0, "834": 0, "837": 0, "838": 0, "839": 0, "840": 0, "842": 0, "843": 0, "844": 0, "845": 0, "846": 0, "847": 0, "848": 0, "849": 0, "850": 0, "851": 0, "852": 0, "853": 0, "854": 0, "855": 0, "857": 0, "859": 0, "861": 0, "862": 0, "863": 0, "865": 0, "872": 0, "873": 0, "874": 0, "875": 0, "876": 0, "877": 0, "878": 0, "880": 0, "881": 0, "888": 0, "889": 0, "890": 0, "891": 0, "892": 0, "893": 0, "894": 0, "896": 0, "897": 0, "898": 0, "899": 0, "900": 0, "901": 0, "902": 0, "903": 0, "905": 0, "907": 0, "908": 0, "912": 0, "913": 0, "914": 0, "925": 1, "932": 0, "933": 0, "940": 0, "941": 0, "944": 0, "945": 0, "946": 0, "948": 0, "949": 0, "950": 0, "951": 0, "953": 0, "954": 0, "957": 0, "958": 0, "960": 0, "972": 0, "973": 0, "974": 0, "975": 0, "977": 0, "981": 0, "983": 0, "984": 0, "985": 0, "986": 0, "987": 0, "988": 0, "992": 0, "993": 0, "994": 0, "995": 0, "999": 0, "1000": 0, "1001": 0, "1002": 0, "1003": 0, "1004": 0, "1008": 0, "1009": 0, "1010": 0, "1017": 0, "1018": 0, "1019": 0, "1020": 0, "1021": 0, "1022": 0, "1023": 0, "1024": 0, "1025": 0, "1026": 0, "1037": 0, "1038": 0, "1039": 0, "1041": 0, "1042": 0, "1043": 0, "1044": 0, "1045": 0, "1047": 0, "1048": 0, "1059": 0, "1060": 0, "1061": 0, "1062": 0, "1064": 0, "1065": 0, "1066": 0, "1067": 0, "1068": 0, "1069": 0, "1070": 0, "1071": 0, "1078": 1, "1079": 1, "1085": 0, "1086": 0, "1089": 1, "1090": 1, "1091": 2, "1093": 1, "1094": 1, "1095": 0, "1097": 0, "1098": 0, "1099": 0, "1100": 1, "1101": 1, "1103": 1, "1104": 1, "1105": 1, "1106": 1, "1107": 4, "1108": 3, "1111": 2, "1112": 1, "1113": 0, "1114": 0, "1115": 1, "1116": 0, "1118": 1, "1119": 1, "1121": 1, "1122": 1, "1123": 1, "1124": 1, "1126": 0, "1127": 1, "1129": 1, "1133": 0, "1134": 0, "1135": 0, "1136": 0, "1137": 0, "1138": 0, "1144": 0, "1145": 0, "1146": 0, "1147": 0, "1148": 0, "1149": 0, "1154": 0, "1155": 0, "1156": 0, "1157": 0, "1158": 0, "1159": 0, "1163": 0, "1164": 0, "1165": 0, "1166": 0, "1167": 0, "1176": 0, "1177": 0, "1178": 0, "1179": 0, "1180": 0, "1181": 0, "1183": 0, "1184": 0, "1192": 0, "1193": 0, "1194": 0, "1195": 0, "1198": 0, "1199": 0, "1200": 0, "1201": 0, "1202": 0, "1203": 0, "1204": 0, "1205": 0, "1209": 0, "1210": 0, "1211": 0, "1223": 2, "1224": 0, "1225": 2, "1226": 0, "1228": 2, "1229": 2, "1231": 2, "1233": 1, "1235": 1, "1240": 0, "1241": 0, "1242": 0, "1253": 0, "1254": 0, "1255": 0, "1256": 0, "1257": 0, "1258": 0, "1266": 0, "1267": 0, "1268": 0, "1269": 0, "1270": 0, "1271": 0, "1272": 0, "1273": 0, "1274": 0, "1275": 0, "1276": 0, "1277": 0, "1278": 0, "1281": 0, "1282": 0, "1289": 2, "1290": 2, "1291": 0, "1292": 0, "1293": 2, "1294": 2, "1301": 2, "1302": 2, "1303": 2, "1304": 2, "1305": 2, "1306": 2, "1307": 2, "1308": 2, "1311": 0, "1312": 0, "1313": 0, "1314": 0, "1327": 0, "1328": 0, "1332": 0, "1333": 0, "1334": 0, "1335": 0, "1336": 0, "1337": 0, "1338": 0, "1345": 0, "1346": 0, "1349": 0, "1352": 0, "1353": 0, "1354": 0, "1355": 0, "1363": 0, "1371": 0, "1375": 3, "1376": 1, "1377": 0, "1378": 0, "1379": 0, "1380": 0, "1385": 1, "1386": 0, "1387": 0, "1388": 0, "1393": 1, "1394": 2, "1403": 1, "1404": 0, "1413": 1, "1425": 1, "1435": 1, "1444": 1, "1448": 1, "1457": 1, "1463": 1, "1467": 1, "1471": 1, "1475": 1, "1510": 1, "1513": 1, "1516": 1, "1521": 1, "1530": 1, "1548": 1, "1414": 0, "1415": 0, "1416": 0, "1417": 0, "1418": 0, "1419": 0, "1420": 0, "1421": 0, "1422": 0, "1423": 0, "1427": 0, "1428": 0, "1429": 0, "1431": 0, "1432": 0, "1433": 0, "1430": 0, "1437": 0, "1438": 0, "1439": 0, "1441": 0, "1442": 0, "1445": 0, "1446": 0, "1450": 0, "1451": 0, "1452": 0, "1454": 0, "1455": 0, "1458": 0, "1459": 0, "1460": 0, "1461": 0, "1464": 0, "1465": 0, "1468": 0, "1469": 0, "1472": 0, "1473": 0, "1477": 0, "1478": 0, "1479": 0, "1482": 0, "1484": 0, "1485": 0, "1486": 0, "1487": 0, "1488": 0, "1490": 0, "1491": 0, "1492": 0, "1493": 0, "1495": 0, "1496": 0, "1497": 0, "1499": 0, "1500": 0, "1501": 0, "1502": 0, "1503": 0, "1504": 0, "1507": 0, "1508": 0, "1511": 0, "1514": 0, "1519": 0, "1523": 0, "1524": 0, "1525": 0, "1526": 0, "1527": 0, "1536": 0, "1538": 0, "1540": 0, "1541": 0, "1542": 0, "1543": 0, "1545": 0, "1546": 0, "1551": 0, "1552": 0, "1553": 0, "1554": 0, "1555": 0, "1556": 0, "1560": 1, "1581": 1, "1591": 1, "1595": 1, "1598": 1, "1604": 1, "1609": 1, "1614": 1, "1562": 0, "1564": 0, "1565": 0, "1566": 0, "1567": 0, "1568": 0, "1571": 0, "1572": 0, "1575": 0, "1576": 0, "1578": 0, "1579": 0, "1582": 0, "1583": 0, "1585": 0, "1586": 0, "1587": 0, "1589": 0, "1592": 0, "1593": 0, "1596": 0, "1599": 0, "1600": 0, "1601": 0, "1602": 0, "1605": 0, "1606": 0, "1607": 0, "1610": 0, "1611": 0, "1612": 0, "1615": 0, "1620": 0, "1621": 0, "1622": 0, "1623": 0, "1624": 0, "1625": 0, "1626": 0, "1627": 0, "1635": 0, "1636": 0, "1641": 0, "1643": 0, "1644": 0, "1646": 0, "1647": 0, "1648": 0, "1649": 0, "1650": 0, "1651": 0, "1652": 0, "1654": 0, "1658": 0, "1660": 0, "1661": 0, "1663": 0, "1664": 0, "1666": 0, "1667": 0, "1669": 0, "1670": 0, "1673": 0, "1674": 0, "1678": 0, "1679": 0, "1680": 0, "1681": 0, "1687": 0, "1688": 0, "1689": 0, "1690": 0, "1696": 0, "1697": 0, "1698": 0, "1700": 0, "1701": 0, "1703": 0, "1705": 0, "1709": 0, "1711": 0, "1713": 0, "1714": 0, "1719": 0, "1720": 0, "1721": 0, "1722": 0, "1723": 0, "1724": 0, "1733": 0, "1734": 0, "1735": 0, "1738": 0, "1740": 0, "1741": 0, "1742": 0, "1743": 0, "1744": 0, "1745": 0, "1749": 0, "1750": 0, "1752": 0, "1753": 0, "1766": 0, "1767": 0, "1772": 0, "1773": 0, "1774": 0, "1776": 0, "1777": 0, "1780": 0, "1781": 0, "1782": 0, "1783": 0, "1788": 0, "1789": 0, "1790": 0, "1791": 0, "1794": 0, "1795": 0, "1797": 0, "1799": 0, "1800": 0, "1827": 0, "1835": 0, "1836": 0, "1838": 0, "1842": 0, "1844": 0, "1846": 0, "1847": 0, "1848": 0, "1849": 0, "1851": 0, "1853": 0, "1856": 0, "1857": 0, "1858": 0, "1859": 0, "1860": 0, "1862": 0, "1863": 0, "1866": 0, "1868": 0, "1869": 0, "1870": 0, "1872": 0, "1873": 0, "1874": 0, "1876": 0, "1877": 0, "1880": 0, "1885": 0, "1887": 0, "1888": 0, "1890": 0, "1891": 0, "1892": 0, "1894": 0, "1895": 0, "1898": 0, "1899": 0, "1900": 0, "1918": 1, "1964": 1, "1919": 0, "1943": 0, "1944": 0, "1945": 0, "1946": 0, "1947": 0, "1949": 0, "1951": 0, "1953": 0, "1954": 0, "1955": 0, "1956": 0, "1958": 0, "1959": 0, "1960": 0, "1961": 0, "1962": 0, "1965": 0, "1966": 0, "1968": 0, "1969": 0, "1970": 0, "1972": 0, "1973": 0, "1974": 0, "1975": 0, "1976": 0, "1977": 0, "1981": 0, "1982": 0, "1983": 0, "1984": 0, "1985": 0, "1986": 0}}
+ git checkout 71ae1ab0123582cc5bfe0f7d5f4cc19a9412f396
Note: switching to '71ae1ab0123582cc5bfe0f7d5f4cc19a9412f396'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at 71ae1ab012 Removed hardcoded paths to SpatialRefSys models in tests.
M	django/db/models/query.py
+ git apply /root/pre_state.patch
error: unrecognized input
