{"instance_id": "django__django-13417", "repo": "django/django", "version": "3.2", "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d", "patch_list": ["diff --git a/django/db/models/query.py b/django/db/models/query.py\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1224,7 +1224,12 @@ def ordered(self):\n             return True\n         if self.query.extra_order_by or self.query.order_by:\n             return True\n-        elif self.query.default_ordering and self.query.get_meta().ordering:\n+        elif (\n+            self.query.default_ordering and\n+            self.query.get_meta().ordering and\n+            # A default ordering doesn't affect GROUP BY queries.\n+            not self.query.group_by\n+        ):\n             return True\n         else:\n             return False\n", "diff --git a/dev/null b/tests/test_coverup_django__django-13417.py\nnew file mode 100644\nindex e69de29..50440cd 100644\n--- /dev/null\n+++ b/tests/test_coverup_django__django-13417.py\n@@ -0,0 +1,27 @@\n+from django.test import SimpleTestCase\n+from django.db.models import Count, Model, CharField, UUIDField\n+from django.apps import apps\n+\n+# Define the model within the test app\n+class Foo(Model):\n+    name = CharField(max_length=100)\n+    uuid = UUIDField(primary_key=True)\n+\n+    class Meta:\n+        app_label = 'test_app'\n+        ordering = ['name']\n+\n+class QuerySetOrderedPropertyTests(SimpleTestCase):\n+    def test_ordered_property_with_group_by(self):\n+        \"\"\"\n+        Test that the ordered property is incorrectly True for a queryset with GROUP BY.\n+        \"\"\"\n+        # Create a queryset with default ordering\n+        qs = Foo.objects.all()\n+        self.assertTrue(qs.ordered)\n+\n+        # Create a queryset with annotate and GROUP BY\n+        qs2 = Foo.objects.annotate(Count(\"pk\")).all()\n+\n+        # Check if the ordered property is False, which is correct for a GROUP BY query\n+        self.assertFalse(qs2.ordered)  # This should be False once the bug is fixed\n"], "arch": "x86_64", "base_commit": "71ae1ab0123582cc5bfe0f7d5f4cc19a9412f396", "test_directives": ["test_coverup_django__django-13417"], "coverage_files": ["django/db/models/query.py"], "env_name": "testbed", "run_id": "assertflip", "patch_id": "pred_post__AssertFlip", "timeout": 1800, "rm_image": false, "force_rebuild": false, "exec_mode": "unit_test", "reproduction_script_name": null, "compute_coverage": true, "install": {"python": "3.6", "packages": "requirements.txt", "install": "python -m pip install -e .", "eval_commands": ["sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen && locale-gen", "export LANG=en_US.UTF-8", "export LANGUAGE=en_US:en", "export LC_ALL=en_US.UTF-8"]}, "cache_level": "instance", "test_command": "python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/db/models/query\\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-13417", "req_install_commands": ["conda create -n testbed python=3.6 -y", "cat <<'EOF_59812759871' > $HOME/requirements.txt\nasgiref >= 3.3.2\nargon2-cffi >= 16.1.0\nbackports.zoneinfo; python_version < '3.9'\nbcrypt\ndocutils\ngeoip2\njinja2 >= 2.9.2\nnumpy\nPillow >= 6.2.0\npylibmc; sys.platform != 'win32'\npymemcache >= 3.4.0\npython-memcached >= 1.59\npytz\npywatchman; sys.platform != 'win32'\nPyYAML\nselenium\nsqlparse >= 0.2.2\ntblib >= 1.5.0\ntzdata\ncolorama; sys.platform == 'win32'\n\nEOF_59812759871", "conda activate testbed && python -m pip install -r $HOME/requirements.txt", "rm $HOME/requirements.txt"]}