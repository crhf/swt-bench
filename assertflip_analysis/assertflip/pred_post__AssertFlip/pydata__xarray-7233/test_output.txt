+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\''
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/esmf-activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/esmpy-activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/gdal-activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/geotiff-activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/libxml2_activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/proj4-activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/udunits2-activate.sh"'
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\''
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/esmf-activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/esmpy-activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/gdal-activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/geotiff-activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/libxml2_activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/proj4-activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/udunits2-activate.sh"'
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ . /opt/miniconda3/envs/testbed/etc/conda/activate.d/esmf-activate.sh
+++ '[' -n '' ']'
+++ '[' -f /opt/miniconda3/envs/testbed/lib/esmf.mk ']'
+++ export ESMFMKFILE=/opt/miniconda3/envs/testbed/lib/esmf.mk
+++ ESMFMKFILE=/opt/miniconda3/envs/testbed/lib/esmf.mk
++ . /opt/miniconda3/envs/testbed/etc/conda/activate.d/esmpy-activate.sh
+++ '[' -n /opt/miniconda3/envs/testbed/lib/esmf.mk ']'
+++ export _CONDA_SET_ESMFMKFILE=/opt/miniconda3/envs/testbed/lib/esmf.mk
+++ _CONDA_SET_ESMFMKFILE=/opt/miniconda3/envs/testbed/lib/esmf.mk
+++ '[' -f /opt/miniconda3/envs/testbed/lib/esmf.mk ']'
+++ export ESMFMKFILE=/opt/miniconda3/envs/testbed/lib/esmf.mk
+++ ESMFMKFILE=/opt/miniconda3/envs/testbed/lib/esmf.mk
++ . /opt/miniconda3/envs/testbed/etc/conda/activate.d/gdal-activate.sh
+++ '[' -n '' ']'
+++ '[' -n '' ']'
+++ '[' -d /opt/miniconda3/envs/testbed/share/gdal ']'
+++ export GDAL_DATA=/opt/miniconda3/envs/testbed/share/gdal
+++ GDAL_DATA=/opt/miniconda3/envs/testbed/share/gdal
+++ export GDAL_DRIVER_PATH=/opt/miniconda3/envs/testbed/lib/gdalplugins
+++ GDAL_DRIVER_PATH=/opt/miniconda3/envs/testbed/lib/gdalplugins
+++ '[' '!' -d /opt/miniconda3/envs/testbed/lib/gdalplugins ']'
+++ export CPL_ZIP_ENCODING=UTF-8
+++ CPL_ZIP_ENCODING=UTF-8
+++ '[' -n '5.1.16(1)-release' ']'
+++ '[' -f /opt/miniconda3/envs/testbed/share/bash-completion/completions/gdalinfo ']'
+++ source /opt/miniconda3/envs/testbed/share/bash-completion/completions/gdalinfo
++++ function_exists _get_comp_words_by_ref
++++ declare -f -F _get_comp_words_by_ref
++++ return 1
++++ return 0
++ . /opt/miniconda3/envs/testbed/etc/conda/activate.d/geotiff-activate.sh
+++ '[' -n '' ']'
+++ '[' -d /opt/miniconda3/envs/testbed/share/epsg_csv ']'
+++ '[' -d /opt/miniconda3/envs/testbed/Library/share/epsg_csv ']'
++ . /opt/miniconda3/envs/testbed/etc/conda/activate.d/libxml2_activate.sh
+++ test -n ''
+++ xml_catalog_files_libxml2=
+++ XML_CATALOG_FILES=
+++ conda_catalog_files=
+++ ifs_libxml2=' 	
'
+++ IFS=' '
+++ rem=/opt/miniconda3/envs/testbed
+++ for pre in ${rem}
+++ test '' = /opt/miniconda3/envs/testbed
+++ conda_catalog_files=/opt/miniconda3/envs/testbed
+++ rem=
+++ IFS=' 	
'
+++ conda_catalog_files='file:///opt/miniconda3/envs/testbed/etc/xml/catalog file:///etc/xml/catalog'
+++ export 'XML_CATALOG_FILES=file:///opt/miniconda3/envs/testbed/etc/xml/catalog file:///etc/xml/catalog'
+++ XML_CATALOG_FILES='file:///opt/miniconda3/envs/testbed/etc/xml/catalog file:///etc/xml/catalog'
+++ unset conda_catalog_files ifs_libxml2 rem
++ . /opt/miniconda3/envs/testbed/etc/conda/activate.d/proj4-activate.sh
+++ '[' -n '' ']'
+++ '[' -d /opt/miniconda3/envs/testbed/share/proj ']'
+++ export PROJ_DATA=/opt/miniconda3/envs/testbed/share/proj
+++ PROJ_DATA=/opt/miniconda3/envs/testbed/share/proj
+++ '[' -f /opt/miniconda3/envs/testbed/share/proj/copyright_and_licenses.csv ']'
+++ export PROJ_NETWORK=ON
+++ PROJ_NETWORK=ON
++ . /opt/miniconda3/envs/testbed/etc/conda/activate.d/udunits2-activate.sh
+++ '[' -n '' ']'
+++ '[' -d /opt/miniconda3/envs/testbed/share/udunits ']'
+++ export UDUNITS2_XML_PATH=/opt/miniconda3/envs/testbed/share/udunits/udunits2.xml
+++ UDUNITS2_XML_PATH=/opt/miniconda3/envs/testbed/share/udunits/udunits2.xml
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD 51d37d1be95547059251076b3fadaa317750aab3
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
nothing to commit, working tree clean
+ git show
commit 51d37d1be95547059251076b3fadaa317750aab3
Author: Mick <mick.niklas@gmail.com>
Date:   Fri Oct 28 18:44:31 2022 +0200

    Raise TypeError if plotting empty data (#7228)
    
    * raise TypeError if plotting empty data
    
    * add to whats-new
    
    * raise TypeError in all DataArray plot methods
    
    * maybe fix tests
    
    * fix test
    
    * fix mypy
    
    Co-authored-by: Deepak Cherian <dcherian@users.noreply.github.com>

diff --git a/doc/whats-new.rst b/doc/whats-new.rst
index 136049d9..36c84e24 100644
--- a/doc/whats-new.rst
+++ b/doc/whats-new.rst
@@ -61,6 +61,8 @@ Bug fixes
   now reopens the file from scratch for h5netcdf and scipy netCDF backends,
   rather than reusing a cached version (:issue:`4240`, :issue:`4862`).
   By `Stephan Hoyer <https://github.com/shoyer>`_.
+- Raise a TypeError when trying to plot empty data (:issue:`7156`, :pull:`7228`).
+  By `Michael Niklas <https://github.com/headtr1ck>`_.
 
 Documentation
 ~~~~~~~~~~~~~
diff --git a/xarray/plot/dataarray_plot.py b/xarray/plot/dataarray_plot.py
index ae22f23f..ac23f7dc 100644
--- a/xarray/plot/dataarray_plot.py
+++ b/xarray/plot/dataarray_plot.py
@@ -280,7 +280,10 @@ def plot(
     ndims = len(plot_dims)
 
     plotfunc: Callable
-    if ndims in [1, 2]:
+
+    if ndims == 0 or darray.size == 0:
+        raise TypeError("No numeric data to plot.")
+    if ndims in (1, 2):
         if row or col:
             kwargs["subplot_kws"] = subplot_kws
             kwargs["row"] = row
@@ -483,6 +486,9 @@ def line(
         return _easy_facetgrid(darray, line, kind="line", **allargs)
 
     ndims = len(darray.dims)
+    if ndims == 0 or darray.size == 0:
+        # TypeError to be consistent with pandas
+        raise TypeError("No numeric data to plot.")
     if ndims > 2:
         raise ValueError(
             "Line plots are for 1- or 2-dimensional DataArrays. "
@@ -699,6 +705,10 @@ def hist(
     """
     assert len(args) == 0
 
+    if darray.ndim == 0 or darray.size == 0:
+        # TypeError to be consistent with pandas
+        raise TypeError("No numeric data to plot.")
+
     ax = get_axis(figsize, size, aspect, ax)
 
     no_nan = np.ravel(darray.to_numpy())
@@ -899,6 +909,10 @@ def _plot1d(plotfunc):
 
             return _easy_facetgrid(darray, kind="plot1d", **allargs)
 
+        if darray.ndim == 0 or darray.size == 0:
+            # TypeError to be consistent with pandas
+            raise TypeError("No numeric data to plot.")
+
         # The allargs dict passed to _easy_facetgrid above contains args
         if args == ():
             args = kwargs.pop("args", ())
@@ -1496,6 +1510,10 @@ def _plot2d(plotfunc):
             allargs["plotfunc"] = globals()[plotfunc.__name__]
             return _easy_facetgrid(darray, kind="dataarray", **allargs)
 
+        if darray.ndim == 0 or darray.size == 0:
+            # TypeError to be consistent with pandas
+            raise TypeError("No numeric data to plot.")
+
         plt = import_matplotlib_pyplot()
 
         if (
diff --git a/xarray/tests/test_plot.py b/xarray/tests/test_plot.py
index 7e1c8a0b..01f616f9 100644
--- a/xarray/tests/test_plot.py
+++ b/xarray/tests/test_plot.py
@@ -3180,6 +3180,31 @@ def test_assert_valid_xy() -> None:
         _assert_valid_xy(darray=darray, xy="error_now", name="x")
 
 
+@requires_matplotlib
+@pytest.mark.parametrize(
+    "val", [pytest.param([], id="empty"), pytest.param(0, id="scalar")]
+)
+@pytest.mark.parametrize(
+    "method",
+    [
+        "__call__",
+        "line",
+        "step",
+        "contour",
+        "contourf",
+        "hist",
+        "imshow",
+        "pcolormesh",
+        "scatter",
+        "surface",
+    ],
+)
+def test_plot_empty_raises(val: list | float, method: str) -> None:
+    da = xr.DataArray(val)
+    with pytest.raises(TypeError, match="No numeric data"):
+        getattr(da.plot, method)()
+
+
 @requires_matplotlib
 def test_facetgrid_axes_raises_deprecation_warning():
     with pytest.warns(
+ git diff 51d37d1be95547059251076b3fadaa317750aab3
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='. "/opt/miniconda3/envs/testbed/etc/conda/deactivate.d/udunits2-deactivate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/deactivate.d/proj4-deactivate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/deactivate.d/libxml2_deactivate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/deactivate.d/geotiff-deactivate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/deactivate.d/gdal-deactivate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/deactivate.d/esmpy-deactivate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/deactivate.d/esmf-deactivate.sh"
PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval '. "/opt/miniconda3/envs/testbed/etc/conda/deactivate.d/udunits2-deactivate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/deactivate.d/proj4-deactivate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/deactivate.d/libxml2_deactivate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/deactivate.d/geotiff-deactivate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/deactivate.d/gdal-deactivate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/deactivate.d/esmpy-deactivate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/deactivate.d/esmf-deactivate.sh"
PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ . /opt/miniconda3/envs/testbed/etc/conda/deactivate.d/udunits2-deactivate.sh
++++ unset UDUNITS2_XML_PATH
++++ '[' -n '' ']'
+++ . /opt/miniconda3/envs/testbed/etc/conda/deactivate.d/proj4-deactivate.sh
++++ unset PROJ_DATA
++++ unset PROJ_NETWORK
++++ '[' -n '' ']'
+++ . /opt/miniconda3/envs/testbed/etc/conda/deactivate.d/libxml2_deactivate.sh
++++ test -n ''
++++ unset XML_CATALOG_FILES
++++ unset xml_catalog_files_libxml2
+++ . /opt/miniconda3/envs/testbed/etc/conda/deactivate.d/geotiff-deactivate.sh
++++ unset GEOTIFF_CSV
++++ '[' -n '' ']'
+++ . /opt/miniconda3/envs/testbed/etc/conda/deactivate.d/gdal-deactivate.sh
++++ unset GDAL_DATA
++++ '[' -n '' ']'
++++ unset GDAL_DRIVER_PATH
++++ '[' -n '' ']'
++++ unset CPL_ZIP_ENCODING
+++ . /opt/miniconda3/envs/testbed/etc/conda/deactivate.d/esmpy-deactivate.sh
++++ unset ESMFMKFILE
++++ '[' -n /opt/miniconda3/envs/testbed/lib/esmf.mk ']'
++++ export ESMFMKFILE=/opt/miniconda3/envs/testbed/lib/esmf.mk
++++ ESMFMKFILE=/opt/miniconda3/envs/testbed/lib/esmf.mk
++++ unset _CONDA_SET_ESMFMKFILE
+++ . /opt/miniconda3/envs/testbed/etc/conda/deactivate.d/esmf-deactivate.sh
++++ unset ESMFMKFILE
++++ '[' -n '' ']'
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\''
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/esmf-activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/esmpy-activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/gdal-activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/geotiff-activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/libxml2_activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/proj4-activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/udunits2-activate.sh"'
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\''
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/esmf-activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/esmpy-activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/gdal-activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/geotiff-activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/libxml2_activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/proj4-activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/udunits2-activate.sh"'
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ . /opt/miniconda3/envs/testbed/etc/conda/activate.d/esmf-activate.sh
+++ '[' -n '' ']'
+++ '[' -f /opt/miniconda3/envs/testbed/lib/esmf.mk ']'
+++ export ESMFMKFILE=/opt/miniconda3/envs/testbed/lib/esmf.mk
+++ ESMFMKFILE=/opt/miniconda3/envs/testbed/lib/esmf.mk
++ . /opt/miniconda3/envs/testbed/etc/conda/activate.d/esmpy-activate.sh
+++ '[' -n /opt/miniconda3/envs/testbed/lib/esmf.mk ']'
+++ export _CONDA_SET_ESMFMKFILE=/opt/miniconda3/envs/testbed/lib/esmf.mk
+++ _CONDA_SET_ESMFMKFILE=/opt/miniconda3/envs/testbed/lib/esmf.mk
+++ '[' -f /opt/miniconda3/envs/testbed/lib/esmf.mk ']'
+++ export ESMFMKFILE=/opt/miniconda3/envs/testbed/lib/esmf.mk
+++ ESMFMKFILE=/opt/miniconda3/envs/testbed/lib/esmf.mk
++ . /opt/miniconda3/envs/testbed/etc/conda/activate.d/gdal-activate.sh
+++ '[' -n '' ']'
+++ '[' -n '' ']'
+++ '[' -d /opt/miniconda3/envs/testbed/share/gdal ']'
+++ export GDAL_DATA=/opt/miniconda3/envs/testbed/share/gdal
+++ GDAL_DATA=/opt/miniconda3/envs/testbed/share/gdal
+++ export GDAL_DRIVER_PATH=/opt/miniconda3/envs/testbed/lib/gdalplugins
+++ GDAL_DRIVER_PATH=/opt/miniconda3/envs/testbed/lib/gdalplugins
+++ '[' '!' -d /opt/miniconda3/envs/testbed/lib/gdalplugins ']'
+++ export CPL_ZIP_ENCODING=UTF-8
+++ CPL_ZIP_ENCODING=UTF-8
+++ '[' -n '5.1.16(1)-release' ']'
+++ '[' -f /opt/miniconda3/envs/testbed/share/bash-completion/completions/gdalinfo ']'
+++ source /opt/miniconda3/envs/testbed/share/bash-completion/completions/gdalinfo
++++ function_exists _get_comp_words_by_ref
++++ declare -f -F _get_comp_words_by_ref
++++ return 1
++++ return 0
++ . /opt/miniconda3/envs/testbed/etc/conda/activate.d/geotiff-activate.sh
+++ '[' -n '' ']'
+++ '[' -d /opt/miniconda3/envs/testbed/share/epsg_csv ']'
+++ '[' -d /opt/miniconda3/envs/testbed/Library/share/epsg_csv ']'
++ . /opt/miniconda3/envs/testbed/etc/conda/activate.d/libxml2_activate.sh
+++ test -n ''
+++ xml_catalog_files_libxml2=
+++ XML_CATALOG_FILES=
+++ conda_catalog_files=
+++ ifs_libxml2=' 	
'
+++ IFS=' '
+++ rem=/opt/miniconda3/envs/testbed
+++ for pre in ${rem}
+++ test '' = /opt/miniconda3/envs/testbed
+++ conda_catalog_files=/opt/miniconda3/envs/testbed
+++ rem=
+++ IFS=' 	
'
+++ conda_catalog_files='file:///opt/miniconda3/envs/testbed/etc/xml/catalog file:///etc/xml/catalog'
+++ export 'XML_CATALOG_FILES=file:///opt/miniconda3/envs/testbed/etc/xml/catalog file:///etc/xml/catalog'
+++ XML_CATALOG_FILES='file:///opt/miniconda3/envs/testbed/etc/xml/catalog file:///etc/xml/catalog'
+++ unset conda_catalog_files ifs_libxml2 rem
++ . /opt/miniconda3/envs/testbed/etc/conda/activate.d/proj4-activate.sh
+++ '[' -n '' ']'
+++ '[' -d /opt/miniconda3/envs/testbed/share/proj ']'
+++ export PROJ_DATA=/opt/miniconda3/envs/testbed/share/proj
+++ PROJ_DATA=/opt/miniconda3/envs/testbed/share/proj
+++ '[' -f /opt/miniconda3/envs/testbed/share/proj/copyright_and_licenses.csv ']'
+++ export PROJ_NETWORK=ON
+++ PROJ_NETWORK=ON
++ . /opt/miniconda3/envs/testbed/etc/conda/activate.d/udunits2-activate.sh
+++ '[' -n '' ']'
+++ '[' -d /opt/miniconda3/envs/testbed/share/udunits ']'
+++ export UDUNITS2_XML_PATH=/opt/miniconda3/envs/testbed/share/udunits/udunits2.xml
+++ UDUNITS2_XML_PATH=/opt/miniconda3/envs/testbed/share/udunits/udunits2.xml
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Checking if build backend supports build_editable: started
  Checking if build backend supports build_editable: finished with status 'done'
  Getting requirements to build editable: started
  Getting requirements to build editable: finished with status 'done'
  Preparing editable metadata (pyproject.toml): started
  Preparing editable metadata (pyproject.toml): finished with status 'done'
Requirement already satisfied: numpy>=1.20 in /opt/miniconda3/envs/testbed/lib/python3.10/site-packages (from xarray==2022.10.1.dev37+g51d37d1be) (1.23.0)
Requirement already satisfied: pandas>=1.3 in /opt/miniconda3/envs/testbed/lib/python3.10/site-packages (from xarray==2022.10.1.dev37+g51d37d1be) (1.5.3)
Requirement already satisfied: packaging>=21.0 in /opt/miniconda3/envs/testbed/lib/python3.10/site-packages (from xarray==2022.10.1.dev37+g51d37d1be) (23.1)
Requirement already satisfied: python-dateutil>=2.8.1 in /opt/miniconda3/envs/testbed/lib/python3.10/site-packages (from pandas>=1.3->xarray==2022.10.1.dev37+g51d37d1be) (2.8.2)
Requirement already satisfied: pytz>=2020.1 in /opt/miniconda3/envs/testbed/lib/python3.10/site-packages (from pandas>=1.3->xarray==2022.10.1.dev37+g51d37d1be) (2023.3)
Requirement already satisfied: six>=1.5 in /opt/miniconda3/envs/testbed/lib/python3.10/site-packages (from python-dateutil>=2.8.1->pandas>=1.3->xarray==2022.10.1.dev37+g51d37d1be) (1.16.0)
Building wheels for collected packages: xarray
  Building editable for xarray (pyproject.toml): started
  Building editable for xarray (pyproject.toml): finished with status 'done'
  Created wheel for xarray: filename=xarray-2022.10.1.dev37+g51d37d1be-0.editable-py3-none-any.whl size=9058 sha256=9419e0bbdd0dd50500bcf135872dd53c05fb9d9af64bfa71497d713edd06be81
  Stored in directory: /tmp/pip-ephem-wheel-cache-fmhnzubn/wheels/0d/a6/cb/465a7b303d624cc531250fa27c75d038ddc29430bdb6ba7c9f
Successfully built xarray
Installing collected packages: xarray
  Attempting uninstall: xarray
    Found existing installation: xarray 2022.10.1.dev37+g51d37d1be
    Uninstalling xarray-2022.10.1.dev37+g51d37d1be:
      Successfully uninstalled xarray-2022.10.1.dev37+g51d37d1be
Successfully installed xarray-2022.10.1.dev37+g51d37d1be
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git apply -v -
Checking patch xarray/core/rolling.py...
Applied patch xarray/core/rolling.py cleanly.
+ git apply -v -
Checking patch xarray/tests/test_coverup_pydata__xarray-7233.py...
Applied patch xarray/tests/test_coverup_pydata__xarray-7233.py cleanly.
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(xarray/core/rolling\.py)' -m pytest --no-header -rA -p no:cacheprovider xarray/tests/test_coverup_pydata__xarray-7233.py
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(xarray/core/rolling\\.py)']
============================= test session starts ==============================
collected 1 item

xarray/tests/test_coverup_pydata__xarray-7233.py F                       [100%]

=================================== FAILURES ===================================
_________________ test_coarsen_construct_preserves_coordinates _________________

    def test_coarsen_construct_preserves_coordinates():
        # Setup: Create a DataArray with a non-dimensional coordinate
        da = xr.DataArray(np.arange(24), dims=["time"])
        da = da.assign_coords(day=365 * da)
        ds = da.to_dataset(name="T")
    
        # Apply coarsen.construct
        result = ds.coarsen(time=12).construct(time=("year", "month"))
    
        # Assert that 'day' remains a coordinate
        assert 'day' in result.coords
    
        # Assert that 'day' is not demoted to a variable
>       assert 'day' not in result.variables
E       AssertionError: assert 'day' not in Frozen({'day': <xarray.Variable (year: 2, month: 12)>\narray([[   0,  365,  730, 1095, 1460, 1825, 2190, 2555, 2920, 32...)>\narray([[ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11],\n       [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]])})
E        +  where Frozen({'day': <xarray.Variable (year: 2, month: 12)>\narray([[   0,  365,  730, 1095, 1460, 1825, 2190, 2555, 2920, 32...)>\narray([[ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11],\n       [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]])}) = <xarray.Dataset>\nDimensions:  (year: 2, month: 12)\nCoordinates:\n    day      (year, month) int64 0 365 730 1095 1460 ....coordinates: year, month\nData variables:\n    T        (year, month) int64 0 1 2 3 4 5 6 7 8 ... 16 17 18 19 20 21 22 23.variables

/testbed/xarray/tests/test_coverup_pydata__xarray-7233.py:18: AssertionError
----------------------------- Captured stdout call -----------------------------
3.47 /testbed/xarray/core/rolling.py(1): from __future__ import annotations
3.47 /testbed/xarray/core/rolling.py(3): import functools
3.47 /testbed/xarray/core/rolling.py(4): import itertools
3.47 /testbed/xarray/core/rolling.py(5): import math
3.47 /testbed/xarray/core/rolling.py(6): import warnings
3.47 /testbed/xarray/core/rolling.py(7): from typing import (
3.47 /testbed/xarray/core/rolling.py(18): import numpy as np
3.47 /testbed/xarray/core/rolling.py(20): from . import dtypes, duck_array_ops, utils
3.47 /testbed/xarray/core/rolling.py(21): from .arithmetic import CoarsenArithmetic
3.47 /testbed/xarray/core/rolling.py(22): from .options import OPTIONS, _get_keep_attrs
3.47 /testbed/xarray/core/rolling.py(23): from .pycompat import is_duck_dask_array
3.47 /testbed/xarray/core/rolling.py(24): from .types import CoarsenBoundaryOptions, SideOptions, T_Xarray
3.47 /testbed/xarray/core/rolling.py(25): from .utils import either_dict_or_kwargs
3.47 /testbed/xarray/core/rolling.py(27): try:
3.47 /testbed/xarray/core/rolling.py(28):     import bottleneck
3.47 /testbed/xarray/core/rolling.py(33): if TYPE_CHECKING:
3.47 /testbed/xarray/core/rolling.py(40): _ROLLING_REDUCE_DOCSTRING_TEMPLATE = """\
3.47 /testbed/xarray/core/rolling.py(59): class Rolling(Generic[T_Xarray]):
3.47 /testbed/xarray/core/rolling.py(59): class Rolling(Generic[T_Xarray]):
3.47 /testbed/xarray/core/rolling.py(60):     """A object that implements the moving window pattern.
3.47 /testbed/xarray/core/rolling.py(70):     __slots__ = ("obj", "window", "min_periods", "center", "dim")
3.47 /testbed/xarray/core/rolling.py(71):     _attributes = ("window", "min_periods", "center", "dim")
3.47 /testbed/xarray/core/rolling.py(77):         min_periods: int | None = None,
3.47 /testbed/xarray/core/rolling.py(78):         center: bool | Mapping[Any, bool] = False,
3.47 /testbed/xarray/core/rolling.py(73):     def __init__(
3.48 /testbed/xarray/core/rolling.py(121):     def __repr__(self) -> str:
3.48 /testbed/xarray/core/rolling.py(132):     def __len__(self) -> int:
3.48 /testbed/xarray/core/rolling.py(135):     @property
3.48 /testbed/xarray/core/rolling.py(136):     def ndim(self) -> int:
3.48 /testbed/xarray/core/rolling.py(140):         name: str, fillna: Any, rolling_agg_func: Callable | None = None
3.48 /testbed/xarray/core/rolling.py(139):     def _reduce_method(  # type: ignore[misc]
3.48 /testbed/xarray/core/rolling.py(168):     def _mean(self, keep_attrs, **kwargs):
3.48 /testbed/xarray/core/rolling.py(176):     _mean.__doc__ = _ROLLING_REDUCE_DOCSTRING_TEMPLATE.format(name="mean")
3.48 /testbed/xarray/core/rolling.py(178):     argmax = _reduce_method("argmax", dtypes.NINF)
3.48 /testbed/xarray/core/rolling.py(144):         if rolling_agg_func:
3.48 /testbed/xarray/core/rolling.py(147):             array_agg_func = getattr(duck_array_ops, name)
3.48 /testbed/xarray/core/rolling.py(149):         bottleneck_move_func = getattr(bottleneck, "move_" + name, None)
3.48 /testbed/xarray/core/rolling.py(151):         def method(self, keep_attrs=None, **kwargs):
3.48 /testbed/xarray/core/rolling.py(164):         method.__name__ = name
3.48 /testbed/xarray/core/rolling.py(165):         method.__doc__ = _ROLLING_REDUCE_DOCSTRING_TEMPLATE.format(name=name)
3.48 /testbed/xarray/core/rolling.py(166):         return method
3.48 /testbed/xarray/core/rolling.py(179):     argmin = _reduce_method("argmin", dtypes.INF)
3.48 /testbed/xarray/core/rolling.py(144):         if rolling_agg_func:
3.48 /testbed/xarray/core/rolling.py(147):             array_agg_func = getattr(duck_array_ops, name)
3.48 /testbed/xarray/core/rolling.py(149):         bottleneck_move_func = getattr(bottleneck, "move_" + name, None)
3.48 /testbed/xarray/core/rolling.py(151):         def method(self, keep_attrs=None, **kwargs):
3.48 /testbed/xarray/core/rolling.py(164):         method.__name__ = name
3.48 /testbed/xarray/core/rolling.py(165):         method.__doc__ = _ROLLING_REDUCE_DOCSTRING_TEMPLATE.format(name=name)
3.48 /testbed/xarray/core/rolling.py(166):         return method
3.48 /testbed/xarray/core/rolling.py(180):     max = _reduce_method("max", dtypes.NINF)
3.48 /testbed/xarray/core/rolling.py(144):         if rolling_agg_func:
3.48 /testbed/xarray/core/rolling.py(147):             array_agg_func = getattr(duck_array_ops, name)
3.48 /testbed/xarray/core/rolling.py(149):         bottleneck_move_func = getattr(bottleneck, "move_" + name, None)
3.48 /testbed/xarray/core/rolling.py(151):         def method(self, keep_attrs=None, **kwargs):
3.48 /testbed/xarray/core/rolling.py(164):         method.__name__ = name
3.48 /testbed/xarray/core/rolling.py(165):         method.__doc__ = _ROLLING_REDUCE_DOCSTRING_TEMPLATE.format(name=name)
3.48 /testbed/xarray/core/rolling.py(166):         return method
3.48 /testbed/xarray/core/rolling.py(181):     min = _reduce_method("min", dtypes.INF)
3.48 /testbed/xarray/core/rolling.py(144):         if rolling_agg_func:
3.48 /testbed/xarray/core/rolling.py(147):             array_agg_func = getattr(duck_array_ops, name)
3.48 /testbed/xarray/core/rolling.py(149):         bottleneck_move_func = getattr(bottleneck, "move_" + name, None)
3.48 /testbed/xarray/core/rolling.py(151):         def method(self, keep_attrs=None, **kwargs):
3.48 /testbed/xarray/core/rolling.py(164):         method.__name__ = name
3.48 /testbed/xarray/core/rolling.py(165):         method.__doc__ = _ROLLING_REDUCE_DOCSTRING_TEMPLATE.format(name=name)
3.48 /testbed/xarray/core/rolling.py(166):         return method
3.48 /testbed/xarray/core/rolling.py(182):     prod = _reduce_method("prod", 1)
3.48 /testbed/xarray/core/rolling.py(144):         if rolling_agg_func:
3.48 /testbed/xarray/core/rolling.py(147):             array_agg_func = getattr(duck_array_ops, name)
3.48 /testbed/xarray/core/rolling.py(149):         bottleneck_move_func = getattr(bottleneck, "move_" + name, None)
3.48 /testbed/xarray/core/rolling.py(151):         def method(self, keep_attrs=None, **kwargs):
3.48 /testbed/xarray/core/rolling.py(164):         method.__name__ = name
3.48 /testbed/xarray/core/rolling.py(165):         method.__doc__ = _ROLLING_REDUCE_DOCSTRING_TEMPLATE.format(name=name)
3.48 /testbed/xarray/core/rolling.py(166):         return method
3.48 /testbed/xarray/core/rolling.py(183):     sum = _reduce_method("sum", 0)
3.48 /testbed/xarray/core/rolling.py(144):         if rolling_agg_func:
3.48 /testbed/xarray/core/rolling.py(147):             array_agg_func = getattr(duck_array_ops, name)
3.48 /testbed/xarray/core/rolling.py(149):         bottleneck_move_func = getattr(bottleneck, "move_" + name, None)
3.48 /testbed/xarray/core/rolling.py(151):         def method(self, keep_attrs=None, **kwargs):
3.48 /testbed/xarray/core/rolling.py(164):         method.__name__ = name
3.48 /testbed/xarray/core/rolling.py(165):         method.__doc__ = _ROLLING_REDUCE_DOCSTRING_TEMPLATE.format(name=name)
3.48 /testbed/xarray/core/rolling.py(166):         return method
3.48 /testbed/xarray/core/rolling.py(184):     mean = _reduce_method("mean", None, _mean)
3.48 /testbed/xarray/core/rolling.py(144):         if rolling_agg_func:
3.48 /testbed/xarray/core/rolling.py(145):             array_agg_func = None
3.48 /testbed/xarray/core/rolling.py(149):         bottleneck_move_func = getattr(bottleneck, "move_" + name, None)
3.48 /testbed/xarray/core/rolling.py(151):         def method(self, keep_attrs=None, **kwargs):
3.48 /testbed/xarray/core/rolling.py(164):         method.__name__ = name
3.48 /testbed/xarray/core/rolling.py(165):         method.__doc__ = _ROLLING_REDUCE_DOCSTRING_TEMPLATE.format(name=name)
3.48 /testbed/xarray/core/rolling.py(166):         return method
3.48 /testbed/xarray/core/rolling.py(185):     std = _reduce_method("std", None)
3.48 /testbed/xarray/core/rolling.py(144):         if rolling_agg_func:
3.48 /testbed/xarray/core/rolling.py(147):             array_agg_func = getattr(duck_array_ops, name)
3.48 /testbed/xarray/core/rolling.py(149):         bottleneck_move_func = getattr(bottleneck, "move_" + name, None)
3.48 /testbed/xarray/core/rolling.py(151):         def method(self, keep_attrs=None, **kwargs):
3.48 /testbed/xarray/core/rolling.py(164):         method.__name__ = name
3.48 /testbed/xarray/core/rolling.py(165):         method.__doc__ = _ROLLING_REDUCE_DOCSTRING_TEMPLATE.format(name=name)
3.48 /testbed/xarray/core/rolling.py(166):         return method
3.48 /testbed/xarray/core/rolling.py(186):     var = _reduce_method("var", None)
3.48 /testbed/xarray/core/rolling.py(144):         if rolling_agg_func:
3.48 /testbed/xarray/core/rolling.py(147):             array_agg_func = getattr(duck_array_ops, name)
3.48 /testbed/xarray/core/rolling.py(149):         bottleneck_move_func = getattr(bottleneck, "move_" + name, None)
3.48 /testbed/xarray/core/rolling.py(151):         def method(self, keep_attrs=None, **kwargs):
3.48 /testbed/xarray/core/rolling.py(164):         method.__name__ = name
3.48 /testbed/xarray/core/rolling.py(165):         method.__doc__ = _ROLLING_REDUCE_DOCSTRING_TEMPLATE.format(name=name)
3.48 /testbed/xarray/core/rolling.py(166):         return method
3.48 /testbed/xarray/core/rolling.py(187):     median = _reduce_method("median", None)
3.48 /testbed/xarray/core/rolling.py(144):         if rolling_agg_func:
3.48 /testbed/xarray/core/rolling.py(147):             array_agg_func = getattr(duck_array_ops, name)
3.48 /testbed/xarray/core/rolling.py(149):         bottleneck_move_func = getattr(bottleneck, "move_" + name, None)
3.48 /testbed/xarray/core/rolling.py(151):         def method(self, keep_attrs=None, **kwargs):
3.48 /testbed/xarray/core/rolling.py(164):         method.__name__ = name
3.48 /testbed/xarray/core/rolling.py(165):         method.__doc__ = _ROLLING_REDUCE_DOCSTRING_TEMPLATE.format(name=name)
3.48 /testbed/xarray/core/rolling.py(166):         return method
3.48 /testbed/xarray/core/rolling.py(189):     def _counts(self, keep_attrs: bool | None) -> T_Xarray:
3.48 /testbed/xarray/core/rolling.py(192):     def count(self, keep_attrs: bool | None = None) -> T_Xarray:
3.48 /testbed/xarray/core/rolling.py(198):     count.__doc__ = _ROLLING_REDUCE_DOCSTRING_TEMPLATE.format(name="count")
3.48 /testbed/xarray/core/rolling.py(203):         default: _T | None = None,
3.48 /testbed/xarray/core/rolling.py(204):         allow_default: bool = True,
3.48 /testbed/xarray/core/rolling.py(205):         allow_allsame: bool = True,
3.48 /testbed/xarray/core/rolling.py(200):     def _mapping_to_list(
3.48 /testbed/xarray/core/rolling.py(220):     def _get_keep_attrs(self, keep_attrs):
3.48 /testbed/xarray/core/rolling.py(227): class DataArrayRolling(Rolling["DataArray"]):
3.48 /testbed/xarray/core/rolling.py(227): class DataArrayRolling(Rolling["DataArray"]):
3.48 /testbed/xarray/core/rolling.py(228):     __slots__ = ("window_labels",)
3.48 /testbed/xarray/core/rolling.py(234):         min_periods: int | None = None,
3.48 /testbed/xarray/core/rolling.py(235):         center: bool | Mapping[Any, bool] = False,
3.48 /testbed/xarray/core/rolling.py(230):     def __init__(
3.48 /testbed/xarray/core/rolling.py(272):     def __iter__(self) -> Iterator[tuple[DataArray, DataArray]]:
3.48 /testbed/xarray/core/rolling.py(293):         window_dim: Hashable | Mapping[Any, Hashable] | None = None,
3.48 /testbed/xarray/core/rolling.py(294):         stride: int | Mapping[Any, int] = 1,
3.48 /testbed/xarray/core/rolling.py(295):         fill_value: Any = dtypes.NA,
3.48 /testbed/xarray/core/rolling.py(296):         keep_attrs: bool | None = None,
3.48 /testbed/xarray/core/rolling.py(291):     def construct(
3.48 /testbed/xarray/core/rolling.py(369):         window_dim: Hashable | Mapping[Any, Hashable] | None = None,
3.48 /testbed/xarray/core/rolling.py(370):         stride: int | Mapping[Any, int] = 1,
3.48 /testbed/xarray/core/rolling.py(371):         fill_value: Any = dtypes.NA,
3.48 /testbed/xarray/core/rolling.py(372):         keep_attrs: bool | None = None,
3.48 /testbed/xarray/core/rolling.py(366):     def _construct(
3.48 /testbed/xarray/core/rolling.py(407):         self, func: Callable, keep_attrs: bool | None = None, **kwargs: Any
3.48 /testbed/xarray/core/rolling.py(406):     def reduce(
3.48 /testbed/xarray/core/rolling.py(486):     def _counts(self, keep_attrs: bool | None) -> DataArray:
3.48 /testbed/xarray/core/rolling.py(508):     def _bottleneck_reduce(self, func, keep_attrs, **kwargs):
3.48 /testbed/xarray/core/rolling.py(550):     def _numpy_or_bottleneck_reduce(
3.48 /testbed/xarray/core/rolling.py(594): class DatasetRolling(Rolling["Dataset"]):
3.48 /testbed/xarray/core/rolling.py(594): class DatasetRolling(Rolling["Dataset"]):
3.48 /testbed/xarray/core/rolling.py(595):     __slots__ = ("rollings",)
3.48 /testbed/xarray/core/rolling.py(601):         min_periods: int | None = None,
3.48 /testbed/xarray/core/rolling.py(602):         center: bool | Mapping[Any, bool] = False,
3.48 /testbed/xarray/core/rolling.py(597):     def __init__(
3.48 /testbed/xarray/core/rolling.py(651):     def _dataset_implementation(self, func, keep_attrs, **kwargs):
3.48 /testbed/xarray/core/rolling.py(670):         self, func: Callable, keep_attrs: bool | None = None, **kwargs: Any
3.48 /testbed/xarray/core/rolling.py(669):     def reduce(
3.48 /testbed/xarray/core/rolling.py(699):     def _counts(self, keep_attrs: bool | None) -> Dataset:
3.48 /testbed/xarray/core/rolling.py(704):     def _numpy_or_bottleneck_reduce(
3.48 /testbed/xarray/core/rolling.py(725):         window_dim: Hashable | Mapping[Any, Hashable] | None = None,
3.48 /testbed/xarray/core/rolling.py(726):         stride: int | Mapping[Any, int] = 1,
3.48 /testbed/xarray/core/rolling.py(727):         fill_value: Any = dtypes.NA,
3.48 /testbed/xarray/core/rolling.py(728):         keep_attrs: bool | None = None,
3.48 /testbed/xarray/core/rolling.py(723):     def construct(
3.48 /testbed/xarray/core/rolling.py(796): class Coarsen(CoarsenArithmetic, Generic[T_Xarray]):
3.48 /testbed/xarray/core/rolling.py(796): class Coarsen(CoarsenArithmetic, Generic[T_Xarray]):
3.48 /testbed/xarray/core/rolling.py(797):     """A object that implements the coarsen.
3.48 /testbed/xarray/core/rolling.py(805):     __slots__ = (
3.48 /testbed/xarray/core/rolling.py(813):     _attributes = ("windows", "side", "trim_excess")
3.48 /testbed/xarray/core/rolling.py(814):     obj: T_Xarray
3.48 /testbed/xarray/core/rolling.py(816):     def __init__(
3.48 /testbed/xarray/core/rolling.py(862):     def _get_keep_attrs(self, keep_attrs):
3.48 /testbed/xarray/core/rolling.py(868):     def __repr__(self) -> str:
3.48 /testbed/xarray/core/rolling.py(882):         window_dim=None,
3.48 /testbed/xarray/core/rolling.py(883):         keep_attrs=None,
3.48 /testbed/xarray/core/rolling.py(880):     def construct(
3.48 /testbed/xarray/core/rolling.py(987): class DataArrayCoarsen(Coarsen["DataArray"]):
3.48 /testbed/xarray/core/rolling.py(987): class DataArrayCoarsen(Coarsen["DataArray"]):
3.48 /testbed/xarray/core/rolling.py(988):     __slots__ = ()
3.48 /testbed/xarray/core/rolling.py(990):     _reduce_extra_args_docstring = """"""
3.48 /testbed/xarray/core/rolling.py(992):     @classmethod
3.48 /testbed/xarray/core/rolling.py(994):         cls, func: Callable, include_skipna: bool = False, numeric_only: bool = False
3.48 /testbed/xarray/core/rolling.py(993):     def _reduce_method(
3.48 /testbed/xarray/core/rolling.py(1036):     def reduce(self, func: Callable, keep_attrs: bool = None, **kwargs) -> DataArray:
3.48 /testbed/xarray/core/rolling.py(1000):         kwargs: dict[str, Any] = {}
3.48 /testbed/xarray/core/rolling.py(1001):         if include_skipna:
3.48 /testbed/xarray/core/rolling.py(1005):             self: DataArrayCoarsen, keep_attrs: bool = None, **kwargs
3.48 /testbed/xarray/core/rolling.py(1004):         def wrapped_func(
3.48 /testbed/xarray/core/rolling.py(1034):         return wrapped_func
3.48 /testbed/xarray/core/rolling.py(1000):         kwargs: dict[str, Any] = {}
3.48 /testbed/xarray/core/rolling.py(1001):         if include_skipna:
3.48 /testbed/xarray/core/rolling.py(1005):             self: DataArrayCoarsen, keep_attrs: bool = None, **kwargs
3.48 /testbed/xarray/core/rolling.py(1004):         def wrapped_func(
3.48 /testbed/xarray/core/rolling.py(1034):         return wrapped_func
3.48 /testbed/xarray/core/rolling.py(1000):         kwargs: dict[str, Any] = {}
3.48 /testbed/xarray/core/rolling.py(1001):         if include_skipna:
3.48 /testbed/xarray/core/rolling.py(1002):             kwargs["skipna"] = None
3.48 /testbed/xarray/core/rolling.py(1005):             self: DataArrayCoarsen, keep_attrs: bool = None, **kwargs
3.48 /testbed/xarray/core/rolling.py(1004):         def wrapped_func(
3.48 /testbed/xarray/core/rolling.py(1034):         return wrapped_func
3.48 /testbed/xarray/core/rolling.py(1000):         kwargs: dict[str, Any] = {}
3.48 /testbed/xarray/core/rolling.py(1001):         if include_skipna:
3.48 /testbed/xarray/core/rolling.py(1002):             kwargs["skipna"] = None
3.48 /testbed/xarray/core/rolling.py(1005):             self: DataArrayCoarsen, keep_attrs: bool = None, **kwargs
3.48 /testbed/xarray/core/rolling.py(1004):         def wrapped_func(
3.48 /testbed/xarray/core/rolling.py(1034):         return wrapped_func
3.48 /testbed/xarray/core/rolling.py(1000):         kwargs: dict[str, Any] = {}
3.48 /testbed/xarray/core/rolling.py(1001):         if include_skipna:
3.48 /testbed/xarray/core/rolling.py(1002):             kwargs["skipna"] = None
3.48 /testbed/xarray/core/rolling.py(1005):             self: DataArrayCoarsen, keep_attrs: bool = None, **kwargs
3.48 /testbed/xarray/core/rolling.py(1004):         def wrapped_func(
3.48 /testbed/xarray/core/rolling.py(1034):         return wrapped_func
3.48 /testbed/xarray/core/rolling.py(1000):         kwargs: dict[str, Any] = {}
3.48 /testbed/xarray/core/rolling.py(1001):         if include_skipna:
3.48 /testbed/xarray/core/rolling.py(1002):             kwargs["skipna"] = None
3.48 /testbed/xarray/core/rolling.py(1005):             self: DataArrayCoarsen, keep_attrs: bool = None, **kwargs
3.48 /testbed/xarray/core/rolling.py(1004):         def wrapped_func(
3.48 /testbed/xarray/core/rolling.py(1034):         return wrapped_func
3.48 /testbed/xarray/core/rolling.py(1000):         kwargs: dict[str, Any] = {}
3.48 /testbed/xarray/core/rolling.py(1001):         if include_skipna:
3.48 /testbed/xarray/core/rolling.py(1002):             kwargs["skipna"] = None
3.48 /testbed/xarray/core/rolling.py(1005):             self: DataArrayCoarsen, keep_attrs: bool = None, **kwargs
3.48 /testbed/xarray/core/rolling.py(1004):         def wrapped_func(
3.48 /testbed/xarray/core/rolling.py(1034):         return wrapped_func
3.48 /testbed/xarray/core/rolling.py(1000):         kwargs: dict[str, Any] = {}
3.48 /testbed/xarray/core/rolling.py(1001):         if include_skipna:
3.48 /testbed/xarray/core/rolling.py(1002):             kwargs["skipna"] = None
3.48 /testbed/xarray/core/rolling.py(1005):             self: DataArrayCoarsen, keep_attrs: bool = None, **kwargs
3.48 /testbed/xarray/core/rolling.py(1004):         def wrapped_func(
3.48 /testbed/xarray/core/rolling.py(1034):         return wrapped_func
3.48 /testbed/xarray/core/rolling.py(1000):         kwargs: dict[str, Any] = {}
3.48 /testbed/xarray/core/rolling.py(1001):         if include_skipna:
3.48 /testbed/xarray/core/rolling.py(1002):             kwargs["skipna"] = None
3.48 /testbed/xarray/core/rolling.py(1005):             self: DataArrayCoarsen, keep_attrs: bool = None, **kwargs
3.48 /testbed/xarray/core/rolling.py(1004):         def wrapped_func(
3.48 /testbed/xarray/core/rolling.py(1034):         return wrapped_func
3.48 /testbed/xarray/core/rolling.py(1000):         kwargs: dict[str, Any] = {}
3.48 /testbed/xarray/core/rolling.py(1001):         if include_skipna:
3.48 /testbed/xarray/core/rolling.py(1002):             kwargs["skipna"] = None
3.48 /testbed/xarray/core/rolling.py(1005):             self: DataArrayCoarsen, keep_attrs: bool = None, **kwargs
3.48 /testbed/xarray/core/rolling.py(1004):         def wrapped_func(
3.48 /testbed/xarray/core/rolling.py(1034):         return wrapped_func
3.48 /testbed/xarray/core/rolling.py(1000):         kwargs: dict[str, Any] = {}
3.48 /testbed/xarray/core/rolling.py(1001):         if include_skipna:
3.48 /testbed/xarray/core/rolling.py(1005):             self: DataArrayCoarsen, keep_attrs: bool = None, **kwargs
3.48 /testbed/xarray/core/rolling.py(1004):         def wrapped_func(
3.48 /testbed/xarray/core/rolling.py(1034):         return wrapped_func
3.48 /testbed/xarray/core/rolling.py(1073): class DatasetCoarsen(Coarsen["Dataset"]):
3.48 /testbed/xarray/core/rolling.py(1073): class DatasetCoarsen(Coarsen["Dataset"]):
3.48 /testbed/xarray/core/rolling.py(1074):     __slots__ = ()
3.48 /testbed/xarray/core/rolling.py(1076):     _reduce_extra_args_docstring = """"""
3.48 /testbed/xarray/core/rolling.py(1078):     @classmethod
3.48 /testbed/xarray/core/rolling.py(1080):         cls, func: Callable, include_skipna: bool = False, numeric_only: bool = False
3.48 /testbed/xarray/core/rolling.py(1079):     def _reduce_method(
3.48 /testbed/xarray/core/rolling.py(1130):     def reduce(self, func: Callable, keep_attrs=None, **kwargs) -> Dataset:
3.48 /testbed/xarray/core/rolling.py(1086):         kwargs: dict[str, Any] = {}
3.48 /testbed/xarray/core/rolling.py(1087):         if include_skipna:
3.48 /testbed/xarray/core/rolling.py(1091):             self: DatasetCoarsen, keep_attrs: bool = None, **kwargs
3.48 /testbed/xarray/core/rolling.py(1090):         def wrapped_func(
3.48 /testbed/xarray/core/rolling.py(1128):         return wrapped_func
3.48 /testbed/xarray/core/rolling.py(1086):         kwargs: dict[str, Any] = {}
3.48 /testbed/xarray/core/rolling.py(1087):         if include_skipna:
3.48 /testbed/xarray/core/rolling.py(1091):             self: DatasetCoarsen, keep_attrs: bool = None, **kwargs
3.48 /testbed/xarray/core/rolling.py(1090):         def wrapped_func(
3.48 /testbed/xarray/core/rolling.py(1128):         return wrapped_func
3.48 /testbed/xarray/core/rolling.py(1086):         kwargs: dict[str, Any] = {}
3.48 /testbed/xarray/core/rolling.py(1087):         if include_skipna:
3.48 /testbed/xarray/core/rolling.py(1088):             kwargs["skipna"] = None
3.48 /testbed/xarray/core/rolling.py(1091):             self: DatasetCoarsen, keep_attrs: bool = None, **kwargs
3.48 /testbed/xarray/core/rolling.py(1090):         def wrapped_func(
3.48 /testbed/xarray/core/rolling.py(1128):         return wrapped_func
3.48 /testbed/xarray/core/rolling.py(1086):         kwargs: dict[str, Any] = {}
3.48 /testbed/xarray/core/rolling.py(1087):         if include_skipna:
3.48 /testbed/xarray/core/rolling.py(1088):             kwargs["skipna"] = None
3.48 /testbed/xarray/core/rolling.py(1091):             self: DatasetCoarsen, keep_attrs: bool = None, **kwargs
3.48 /testbed/xarray/core/rolling.py(1090):         def wrapped_func(
3.48 /testbed/xarray/core/rolling.py(1128):         return wrapped_func
3.48 /testbed/xarray/core/rolling.py(1086):         kwargs: dict[str, Any] = {}
3.48 /testbed/xarray/core/rolling.py(1087):         if include_skipna:
3.48 /testbed/xarray/core/rolling.py(1088):             kwargs["skipna"] = None
3.48 /testbed/xarray/core/rolling.py(1091):             self: DatasetCoarsen, keep_attrs: bool = None, **kwargs
3.48 /testbed/xarray/core/rolling.py(1090):         def wrapped_func(
3.48 /testbed/xarray/core/rolling.py(1128):         return wrapped_func
3.48 /testbed/xarray/core/rolling.py(1086):         kwargs: dict[str, Any] = {}
3.48 /testbed/xarray/core/rolling.py(1087):         if include_skipna:
3.48 /testbed/xarray/core/rolling.py(1088):             kwargs["skipna"] = None
3.48 /testbed/xarray/core/rolling.py(1091):             self: DatasetCoarsen, keep_attrs: bool = None, **kwargs
3.48 /testbed/xarray/core/rolling.py(1090):         def wrapped_func(
3.48 /testbed/xarray/core/rolling.py(1128):         return wrapped_func
3.48 /testbed/xarray/core/rolling.py(1086):         kwargs: dict[str, Any] = {}
3.48 /testbed/xarray/core/rolling.py(1087):         if include_skipna:
3.48 /testbed/xarray/core/rolling.py(1088):             kwargs["skipna"] = None
3.48 /testbed/xarray/core/rolling.py(1091):             self: DatasetCoarsen, keep_attrs: bool = None, **kwargs
3.48 /testbed/xarray/core/rolling.py(1090):         def wrapped_func(
3.48 /testbed/xarray/core/rolling.py(1128):         return wrapped_func
3.48 /testbed/xarray/core/rolling.py(1086):         kwargs: dict[str, Any] = {}
3.48 /testbed/xarray/core/rolling.py(1087):         if include_skipna:
3.48 /testbed/xarray/core/rolling.py(1088):             kwargs["skipna"] = None
3.48 /testbed/xarray/core/rolling.py(1091):             self: DatasetCoarsen, keep_attrs: bool = None, **kwargs
3.48 /testbed/xarray/core/rolling.py(1090):         def wrapped_func(
3.48 /testbed/xarray/core/rolling.py(1128):         return wrapped_func
3.48 /testbed/xarray/core/rolling.py(1086):         kwargs: dict[str, Any] = {}
3.48 /testbed/xarray/core/rolling.py(1087):         if include_skipna:
3.48 /testbed/xarray/core/rolling.py(1088):             kwargs["skipna"] = None
3.48 /testbed/xarray/core/rolling.py(1091):             self: DatasetCoarsen, keep_attrs: bool = None, **kwargs
3.48 /testbed/xarray/core/rolling.py(1090):         def wrapped_func(
3.48 /testbed/xarray/core/rolling.py(1128):         return wrapped_func
3.48 /testbed/xarray/core/rolling.py(1086):         kwargs: dict[str, Any] = {}
3.48 /testbed/xarray/core/rolling.py(1087):         if include_skipna:
3.48 /testbed/xarray/core/rolling.py(1088):             kwargs["skipna"] = None
3.48 /testbed/xarray/core/rolling.py(1091):             self: DatasetCoarsen, keep_attrs: bool = None, **kwargs
3.48 /testbed/xarray/core/rolling.py(1090):         def wrapped_func(
3.48 /testbed/xarray/core/rolling.py(1128):         return wrapped_func
3.48 /testbed/xarray/core/rolling.py(1086):         kwargs: dict[str, Any] = {}
3.48 /testbed/xarray/core/rolling.py(1087):         if include_skipna:
3.48 /testbed/xarray/core/rolling.py(1091):             self: DatasetCoarsen, keep_attrs: bool = None, **kwargs
3.48 /testbed/xarray/core/rolling.py(1090):         def wrapped_func(
3.48 /testbed/xarray/core/rolling.py(1128):         return wrapped_func
3.48 /testbed/xarray/core/rolling.py(845):         self.obj = obj
3.48 /testbed/xarray/core/rolling.py(846):         self.windows = windows
3.48 /testbed/xarray/core/rolling.py(847):         self.side = side
3.48 /testbed/xarray/core/rolling.py(848):         self.boundary = boundary
3.48 /testbed/xarray/core/rolling.py(850):         absent_dims = [dim for dim in windows.keys() if dim not in self.obj.dims]
3.48 /testbed/xarray/core/rolling.py(850):         absent_dims = [dim for dim in windows.keys() if dim not in self.obj.dims]
3.48 /testbed/xarray/core/rolling.py(850):         absent_dims = [dim for dim in windows.keys() if dim not in self.obj.dims]
3.48 /testbed/xarray/core/rolling.py(851):         if absent_dims:
3.48 /testbed/xarray/core/rolling.py(855):         if not utils.is_dict_like(coord_func):
3.48 /testbed/xarray/core/rolling.py(856):             coord_func = {d: coord_func for d in self.obj.dims}  # type: ignore[misc]
3.48 /testbed/xarray/core/rolling.py(856):             coord_func = {d: coord_func for d in self.obj.dims}  # type: ignore[misc]
3.48 /testbed/xarray/core/rolling.py(856):             coord_func = {d: coord_func for d in self.obj.dims}  # type: ignore[misc]
3.48 /testbed/xarray/core/rolling.py(857):         for c in self.obj.coords:
3.48 /testbed/xarray/core/rolling.py(858):             if c not in coord_func:
3.48 /testbed/xarray/core/rolling.py(859):                 coord_func[c] = duck_array_ops.mean  # type: ignore[index]
3.48 /testbed/xarray/core/rolling.py(857):         for c in self.obj.coords:
3.48 /testbed/xarray/core/rolling.py(860):         self.coord_func: Mapping[Hashable, str | Callable] = coord_func
3.48 /testbed/xarray/core/rolling.py(921):         from .dataarray import DataArray
3.48 /testbed/xarray/core/rolling.py(922):         from .dataset import Dataset
3.48 /testbed/xarray/core/rolling.py(924):         window_dim = either_dict_or_kwargs(
3.48 /testbed/xarray/core/rolling.py(925):             window_dim, window_dim_kwargs, "Coarsen.construct"
3.48 /testbed/xarray/core/rolling.py(924):         window_dim = either_dict_or_kwargs(
3.48 /testbed/xarray/core/rolling.py(927):         if not window_dim:
3.48 /testbed/xarray/core/rolling.py(932):         bad_new_dims = tuple(
3.48 /testbed/xarray/core/rolling.py(934):             for win, dims in window_dim.items()
3.48 /testbed/xarray/core/rolling.py(932):         bad_new_dims = tuple(
3.48 /testbed/xarray/core/rolling.py(932):         bad_new_dims = tuple(
3.48 /testbed/xarray/core/rolling.py(934):             for win, dims in window_dim.items()
3.48 /testbed/xarray/core/rolling.py(935):             if len(dims) != 2 or isinstance(dims, str)
3.48 /testbed/xarray/core/rolling.py(932):         bad_new_dims = tuple(
3.48 /testbed/xarray/core/rolling.py(937):         if bad_new_dims:
3.48 /testbed/xarray/core/rolling.py(942):         if keep_attrs is None:
3.48 /testbed/xarray/core/rolling.py(943):             keep_attrs = _get_keep_attrs(default=True)
3.48 /testbed/xarray/core/rolling.py(945):         missing_dims = set(window_dim) - set(self.windows)
3.48 /testbed/xarray/core/rolling.py(946):         if missing_dims:
3.48 /testbed/xarray/core/rolling.py(950):         extra_windows = set(self.windows) - set(window_dim)
3.48 /testbed/xarray/core/rolling.py(951):         if extra_windows:
3.48 /testbed/xarray/core/rolling.py(956):         reshaped = Dataset()
3.48 /testbed/xarray/core/rolling.py(957):         if isinstance(self.obj, DataArray):
3.48 /testbed/xarray/core/rolling.py(960):             obj = self.obj
3.48 /testbed/xarray/core/rolling.py(962):         reshaped.attrs = obj.attrs if keep_attrs else {}
3.48 /testbed/xarray/core/rolling.py(964):         for key, var in obj.variables.items():
3.48 /testbed/xarray/core/rolling.py(965):             reshaped_dims = tuple(
3.48 /testbed/xarray/core/rolling.py(966):                 itertools.chain(*[window_dim.get(dim, [dim]) for dim in list(var.dims)])
3.48 /testbed/xarray/core/rolling.py(966):                 itertools.chain(*[window_dim.get(dim, [dim]) for dim in list(var.dims)])
3.48 /testbed/xarray/core/rolling.py(966):                 itertools.chain(*[window_dim.get(dim, [dim]) for dim in list(var.dims)])
3.48 /testbed/xarray/core/rolling.py(965):             reshaped_dims = tuple(
3.48 /testbed/xarray/core/rolling.py(968):             if reshaped_dims != var.dims:
3.48 /testbed/xarray/core/rolling.py(969):                 windows = {w: self.windows[w] for w in window_dim if w in var.dims}
3.48 /testbed/xarray/core/rolling.py(969):                 windows = {w: self.windows[w] for w in window_dim if w in var.dims}
3.48 /testbed/xarray/core/rolling.py(969):                 windows = {w: self.windows[w] for w in window_dim if w in var.dims}
3.48 /testbed/xarray/core/rolling.py(970):                 reshaped_var, _ = var.coarsen_reshape(windows, self.boundary, self.side)
3.48 /testbed/xarray/core/rolling.py(971):                 attrs = var.attrs if keep_attrs else {}
3.48 /testbed/xarray/core/rolling.py(972):                 reshaped[key] = (reshaped_dims, reshaped_var, attrs)
3.48 /testbed/xarray/core/rolling.py(964):         for key, var in obj.variables.items():
3.48 /testbed/xarray/core/rolling.py(965):             reshaped_dims = tuple(
3.48 /testbed/xarray/core/rolling.py(966):                 itertools.chain(*[window_dim.get(dim, [dim]) for dim in list(var.dims)])
3.48 /testbed/xarray/core/rolling.py(966):                 itertools.chain(*[window_dim.get(dim, [dim]) for dim in list(var.dims)])
3.48 /testbed/xarray/core/rolling.py(966):                 itertools.chain(*[window_dim.get(dim, [dim]) for dim in list(var.dims)])
3.48 /testbed/xarray/core/rolling.py(965):             reshaped_dims = tuple(
3.48 /testbed/xarray/core/rolling.py(968):             if reshaped_dims != var.dims:
3.48 /testbed/xarray/core/rolling.py(969):                 windows = {w: self.windows[w] for w in window_dim if w in var.dims}
3.48 /testbed/xarray/core/rolling.py(969):                 windows = {w: self.windows[w] for w in window_dim if w in var.dims}
3.48 /testbed/xarray/core/rolling.py(969):                 windows = {w: self.windows[w] for w in window_dim if w in var.dims}
3.48 /testbed/xarray/core/rolling.py(970):                 reshaped_var, _ = var.coarsen_reshape(windows, self.boundary, self.side)
3.48 /testbed/xarray/core/rolling.py(971):                 attrs = var.attrs if keep_attrs else {}
3.48 /testbed/xarray/core/rolling.py(972):                 reshaped[key] = (reshaped_dims, reshaped_var, attrs)
3.48 /testbed/xarray/core/rolling.py(964):         for key, var in obj.variables.items():
3.48 /testbed/xarray/core/rolling.py(977):         should_be_coords = (set(window_dim) & set(self.obj.coords)) | set(
3.48 /testbed/xarray/core/rolling.py(978):             self.obj.coords
3.48 /testbed/xarray/core/rolling.py(977):         should_be_coords = (set(window_dim) & set(self.obj.coords)) | set(
3.48 /testbed/xarray/core/rolling.py(980):         result = reshaped.set_coords(should_be_coords)
3.48 /testbed/xarray/core/rolling.py(981):         if isinstance(self.obj, DataArray):
3.48 /testbed/xarray/core/rolling.py(984):             return result
=========================== short test summary info ============================
FAILED xarray/tests/test_coverup_pydata__xarray-7233.py::test_coarsen_construct_preserves_coordinates
============================== 1 failed in 1.36s ===============================
+ cat coverage.cover
{"/testbed/xarray/core/rolling.py": {"1": 1, "3": 1, "4": 1, "5": 1, "6": 1, "7": 1, "18": 1, "20": 1, "21": 1, "22": 1, "23": 1, "24": 1, "25": 1, "27": 1, "28": 1, "29": 0, "31": 0, "33": 1, "34": 0, "35": 0, "37": 0, "38": 0, "40": 1, "59": 2, "227": 2, "594": 2, "796": 2, "987": 2, "1073": 2, "70": 1, "71": 1, "77": 1, "78": 1, "73": 1, "121": 1, "132": 1, "135": 1, "136": 1, "140": 1, "139": 1, "168": 1, "176": 1, "178": 1, "179": 1, "180": 1, "181": 1, "182": 1, "183": 1, "184": 1, "185": 1, "186": 1, "187": 1, "189": 1, "192": 1, "198": 1, "203": 1, "204": 1, "205": 1, "200": 1, "220": 1, "102": 0, "103": 0, "104": 0, "105": 0, "106": 0, "107": 0, "108": 0, "110": 0, "111": 0, "114": 0, "115": 0, "118": 0, "117": 0, "124": 0, "126": 0, "128": 0, "129": 0, "125": 0, "133": 0, "137": 0, "144": 10, "145": 1, "147": 9, "149": 10, "151": 10, "164": 10, "165": 10, "166": 10, "153": 0, "155": 0, "156": 0, "157": 0, "158": 0, "159": 0, "160": 0, "161": 0, "169": 0, "170": 0, "171": 0, "172": 0, "173": 0, "174": 0, "190": 0, "193": 0, "194": 0, "195": 0, "196": 0, "207": 0, "208": 0, "209": 0, "210": 0, "211": 0, "212": 0, "213": 0, "214": 0, "215": 0, "216": 0, "217": 0, "218": 0, "221": 0, "222": 0, "224": 0, "228": 1, "234": 1, "235": 1, "230": 1, "272": 1, "293": 1, "294": 1, "295": 1, "296": 1, "291": 1, "369": 1, "370": 1, "371": 1, "372": 1, "366": 1, "407": 1, "406": 1, "486": 1, "508": 1, "550": 1, "267": 0, "270": 0, "273": 0, "274": 0, "276": 0, "277": 0, "278": 0, "279": 0, "280": 0, "281": 0, "283": 0, "284": 0, "286": 0, "287": 0, "289": 0, "357": 0, "358": 0, "359": 0, "360": 0, "361": 0, "362": 0, "363": 0, "375": 0, "377": 0, "379": 0, "380": 0, "381": 0, "382": 0, "384": 0, "386": 0, "387": 0, "389": 0, "391": 0, "392": 0, "395": 0, "397": 0, "398": 0, "399": 0, "400": 0, "401": 0, "402": 0, "404": 0, "461": 0, "463": 0, "465": 0, "469": 0, "470": 0, "471": 0, "473": 0, "474": 0, "475": 0, "478": 0, "479": 0, "483": 0, "484": 0, "464": 0, "489": 0, "491": 0, "498": 0, "499": 0, "500": 0, "501": 0, "503": 0, "504": 0, "497": 0, "506": 0, "490": 0, "509": 0, "514": 0, "515": 0, "517": 0, "519": 0, "521": 0, "522": 0, "523": 0, "526": 0, "527": 0, "528": 0, "529": 0, "532": 0, "533": 0, "534": 0, "536": 0, "537": 0, "539": 0, "540": 0, "543": 0, "544": 0, "546": 0, "548": 0, "559": 0, "560": 0, "561": 0, "562": 0, "564": 0, "565": 0, "567": 0, "570": 0, "569": 0, "571": 0, "572": 0, "573": 0, "578": 0, "579": 0, "581": 0, "582": 0, "583": 0, "584": 0, "585": 0, "586": 0, "587": 0, "588": 0, "589": 0, "591": 0, "595": 1, "601": 1, "602": 1, "597": 1, "651": 1, "670": 1, "669": 1, "699": 1, "704": 1, "725": 1, "726": 1, "727": 1, "728": 1, "723": 1, "634": 0, "635": 0, "636": 0, "638": 0, "639": 0, "641": 0, "642": 0, "643": 0, "644": 0, "645": 0, "647": 0, "648": 0, "649": 0, "652": 0, "654": 0, "656": 0, "657": 0, "658": 0, "659": 0, "661": 0, "663": 0, "664": 0, "666": 0, "667": 0, "693": 0, "694": 0, "695": 0, "696": 0, "700": 0, "701": 0, "712": 0, "713": 0, "714": 0, "715": 0, "716": 0, "717": 0, "719": 0, "720": 0, "752": 0, "754": 0, "756": 0, "757": 0, "758": 0, "759": 0, "761": 0, "763": 0, "764": 0, "766": 0, "768": 0, "769": 0, "771": 0, "772": 0, "773": 0, "774": 0, "776": 0, "777": 0, "778": 0, "779": 0, "780": 0, "783": 0, "786": 0, "787": 0, "789": 0, "791": 0, "792": 0, "805": 1, "813": 1, "814": 1, "816": 1, "862": 1, "868": 1, "882": 1, "883": 1, "880": 1, "845": 1, "846": 1, "847": 1, "848": 1, "850": 3, "851": 1, "852": 0, "853": 0, "855": 1, "856": 3, "857": 2, "858": 1, "859": 1, "860": 1, "863": 0, "864": 0, "866": 0, "871": 0, "873": 0, "876": 0, "877": 0, "874": 0, "872": 0, "921": 1, "922": 1, "924": 2, "925": 1, "927": 1, "928": 0, "929": 0, "932": 4, "934": 2, "937": 1, "938": 0, "939": 0, "942": 1, "943": 1, "945": 1, "946": 1, "947": 0, "948": 0, "950": 1, "951": 1, "952": 0, "953": 0, "956": 1, "957": 1, "958": 0, "960": 1, "962": 1, "964": 3, "965": 4, "966": 6, "968": 2, "969": 6, "970": 2, "971": 2, "972": 2, "974": 0, "977": 2, "978": 1, "980": 1, "981": 1, "982": 0, "984": 1, "935": 1, "933": 0, "988": 1, "990": 1, "992": 1, "994": 1, "993": 1, "1036": 1, "1000": 11, "1001": 11, "1002": 8, "1005": 11, "1004": 11, "1034": 11, "1007": 0, "1009": 0, "1011": 0, "1012": 0, "1014": 0, "1015": 0, "1016": 0, "1017": 0, "1019": 0, "1020": 0, "1021": 0, "1022": 0, "1023": 0, "1024": 0, "1025": 0, "1026": 0, "1029": 0, "1030": 0, "1031": 0, "1069": 0, "1070": 0, "1074": 1, "1076": 1, "1078": 1, "1080": 1, "1079": 1, "1130": 1, "1086": 11, "1087": 11, "1088": 8, "1091": 11, "1090": 11, "1128": 11, "1093": 0, "1095": 0, "1097": 0, "1098": 0, "1100": 0, "1102": 0, "1103": 0, "1104": 0, "1105": 0, "1106": 0, "1107": 0, "1108": 0, "1109": 0, "1110": 0, "1113": 0, "1114": 0, "1117": 0, "1118": 0, "1119": 0, "1120": 0, "1121": 0, "1122": 0, "1123": 0, "1126": 0, "1153": 0, "1154": 0}}
+ git checkout 51d37d1be95547059251076b3fadaa317750aab3
Note: switching to '51d37d1be95547059251076b3fadaa317750aab3'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at 51d37d1b Raise TypeError if plotting empty data (#7228)
M	xarray/core/rolling.py
+ git apply /root/pre_state.patch
error: unrecognized input
