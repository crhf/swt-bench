{"instance_id": "django__django-16899", "repo": "django/django", "version": "5.0", "environment_setup_commit": "4a72da71001f154ea60906a2f74898d32b7322a7", "patch_list": ["diff --git a/django/contrib/admin/checks.py b/django/contrib/admin/checks.py\n--- a/django/contrib/admin/checks.py\n+++ b/django/contrib/admin/checks.py\n@@ -771,10 +771,11 @@ def _check_readonly_fields_item(self, obj, field_name, label):\n             except FieldDoesNotExist:\n                 return [\n                     checks.Error(\n-                        \"The value of '%s' is not a callable, an attribute of \"\n-                        \"'%s', or an attribute of '%s'.\"\n+                        \"The value of '%s' refers to '%s', which is not a callable, \"\n+                        \"an attribute of '%s', or an attribute of '%s'.\"\n                         % (\n                             label,\n+                            field_name,\n                             obj.__class__.__name__,\n                             obj.model._meta.label,\n                         ),\n", "diff --git a/dev/null b/tests/test_coverup_django__django-16899.py\nnew file mode 100644\nindex e69de29..0d2af7f 100644\n--- /dev/null\n+++ b/tests/test_coverup_django__django-16899.py\n@@ -0,0 +1,37 @@\n+from django.test import SimpleTestCase\n+from django.contrib.admin import ModelAdmin, AdminSite\n+from django.core import checks\n+from django.db import models\n+\n+class MockModel(models.Model):\n+    name = models.CharField(max_length=100)\n+\n+    class Meta:\n+        app_label = 'test_app'\n+\n+class MockAdminSite(AdminSite):\n+    pass\n+\n+class MockModelAdmin(ModelAdmin):\n+    model = MockModel\n+    readonly_fields = ['non_existent_field']\n+\n+class ReadonlyFieldsErrorMessageTest(SimpleTestCase):\n+    def test_readonly_fields_error_message(self):\n+        \"\"\"\n+        Test that the error message for readonly_fields includes the field name.\n+        This test fails because the current behavior is incorrect and does not include the field name.\n+        \"\"\"\n+        admin_site = MockAdminSite()\n+        admin_obj = MockModelAdmin(MockModel, admin_site)\n+        errors = admin_obj.check()\n+\n+        # Find the specific error related to readonly_fields\n+        readonly_fields_error = next(\n+            (error for error in errors if error.id == 'admin.E035'), None\n+        )\n+\n+        self.assertIsNotNone(readonly_fields_error, \"Expected an error related to readonly_fields.\")\n+        self.assertIn(\"readonly_fields[0]\", readonly_fields_error.msg)\n+        # Correct behavior: the field name should be included in the error message\n+        self.assertIn(\"non_existent_field\", readonly_fields_error.msg)\n"], "arch": "x86_64", "base_commit": "d3d173425fc0a1107836da5b4567f1c88253191b", "test_directives": ["test_coverup_django__django-16899"], "coverage_files": ["django/contrib/admin/checks.py"], "env_name": "testbed", "run_id": "assertflip", "patch_id": "pred_post__AssertFlip", "timeout": 1800, "rm_image": false, "force_rebuild": false, "exec_mode": "unit_test", "reproduction_script_name": null, "compute_coverage": true, "install": {"python": "3.11", "packages": "requirements.txt", "install": "python -m pip install -e ."}, "cache_level": "instance", "test_command": "python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/contrib/admin/checks\\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-16899", "req_install_commands": ["conda create -n testbed python=3.11 -y", "cat <<'EOF_59812759871' > $HOME/requirements.txt\naiosmtpd\nasgiref >= 3.7.0\nargon2-cffi >= 19.2.0\nbcrypt\nblack\ndocutils\ngeoip2; python_version < '3.12'\njinja2 >= 2.11.0\nnumpy; python_version < '3.12'\nPillow >= 6.2.1; sys.platform != 'win32' or python_version < '3.12'\npylibmc; sys.platform != 'win32'\npymemcache >= 3.4.0\npywatchman; sys.platform != 'win32'\nPyYAML\nredis >= 3.4.0\nselenium >= 4.8.0\nsqlparse >= 0.3.1\ntblib >= 1.5.0\ntzdata\ncolorama; sys.platform == 'win32'\n\nEOF_59812759871", "conda activate testbed && python -m pip install -r $HOME/requirements.txt", "rm $HOME/requirements.txt"]}