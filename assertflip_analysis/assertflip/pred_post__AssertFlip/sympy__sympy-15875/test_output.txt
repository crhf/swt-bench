+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD b506169ad727ee39cb3d60c8b3ff5e315d443d8e
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch master
nothing to commit, working tree clean
+ git show
commit b506169ad727ee39cb3d60c8b3ff5e315d443d8e
Merge: 0b5dde6ae0 6939a21c20
Author: Oscar Benjamin <oscar.j.benjamin@gmail.com>
Date:   Tue Jan 29 01:07:09 2019 +0000

    Merge pull request #15712 from jmig5776/fix_matrixpowerfailure
    
    Fix of matrix power failure error

+ git diff b506169ad727ee39cb3d60c8b3ff5e315d443d8e
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Requirement already satisfied: mpmath>=0.19 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from sympy==1.4.dev0) (1.3.0)
Installing collected packages: sympy
  Attempting uninstall: sympy
    Found existing installation: sympy 1.4.dev0
    Uninstalling sympy-1.4.dev0:
      Successfully uninstalled sympy-1.4.dev0
  DEPRECATION: Legacy editable install of sympy==1.4.dev0 from file:///testbed (setup.py develop) is deprecated. pip 25.3 will enforce this behaviour change. A possible replacement is to add a pyproject.toml or enable --use-pep517, and use setuptools >= 64. If the resulting installation is not behaving as expected, try using --config-settings editable_mode=compat. Please consult the setuptools documentation for more information. Discussion can be found at https://github.com/pypa/pip/issues/11457
  Running setup.py develop for sympy
Successfully installed sympy
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git apply -v -
Checking patch sympy/core/add.py...
Applied patch sympy/core/add.py cleanly.
+ git apply -v -
<stdin>:12: trailing whitespace.
    
<stdin>:15: trailing whitespace.
    
Checking patch sympy/polys/tests/test_coverup_sympy__sympy-15875.py...
Applied patch sympy/polys/tests/test_coverup_sympy__sympy-15875.py cleanly.
warning: 2 lines add whitespace errors.
+ PYTHONWARNINGS=ignore::UserWarning,ignore::SyntaxWarning
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(sympy/core/add\.py)' bin/test -C --verbose sympy/polys/tests/test_coverup_sympy__sympy-15875.p
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(sympy/core/add\\.py)']
0.29 /testbed/sympy/core/add.py(1): from __future__ import print_function, division
0.29 /testbed/sympy/core/add.py(3): from collections import defaultdict
0.29 /testbed/sympy/core/add.py(4): from functools import cmp_to_key
0.29 /testbed/sympy/core/add.py(6): from .basic import Basic
0.29 /testbed/sympy/core/add.py(7): from .compatibility import reduce, is_sequence, range
0.29 /testbed/sympy/core/add.py(8): from .logic import _fuzzy_group, fuzzy_or, fuzzy_not
0.29 /testbed/sympy/core/add.py(9): from .singleton import S
0.29 /testbed/sympy/core/add.py(10): from .operations import AssocOp
0.29 /testbed/sympy/core/add.py(11): from .cache import cacheit
0.29 /testbed/sympy/core/add.py(12): from .numbers import ilcm, igcd
0.29 /testbed/sympy/core/add.py(13): from .expr import Expr
0.29 /testbed/sympy/core/add.py(16): _args_sortkey = cmp_to_key(Basic.compare)
0.29 /testbed/sympy/core/add.py(19): def _addsort(args):
0.29 /testbed/sympy/core/add.py(24): def _unevaluated_Add(*args):
0.29 /testbed/sympy/core/add.py(72): class Add(Expr, AssocOp):
0.29 /testbed/sympy/core/add.py(72): class Add(Expr, AssocOp):
0.29 /testbed/sympy/core/add.py(74):     __slots__ = []
0.29 /testbed/sympy/core/add.py(76):     is_Add = True
0.29 /testbed/sympy/core/add.py(78):     @classmethod
0.29 /testbed/sympy/core/add.py(79):     def flatten(cls, seq):
0.29 /testbed/sympy/core/add.py(285):     @classmethod
0.29 /testbed/sympy/core/add.py(286):     def class_key(cls):
0.29 /testbed/sympy/core/add.py(290):     def as_coefficients_dict(a):
0.29 /testbed/sympy/core/add.py(321):     @cacheit
0.29 /testbed/sympy/core/add.py(322):     def as_coeff_add(self, *deps):
0.29 /testbed/sympy/core/add.py(350):     def as_coeff_Add(self, rational=False):
0.29 /testbed/sympy/core/add.py(362):     def _eval_power(self, e):
0.29 /testbed/sympy/core/add.py(386):     @cacheit
0.29 /testbed/sympy/core/add.py(387):     def _eval_derivative(self, s):
0.29 /testbed/sympy/core/add.py(390):     def _eval_nseries(self, x, n, logx):
0.29 /testbed/sympy/core/add.py(394):     def _matches_simple(self, expr, repl_dict):
0.29 /testbed/sympy/core/add.py(401):     def matches(self, expr, repl_dict={}, old=False):
0.29 /testbed/sympy/core/add.py(404):     @staticmethod
0.29 /testbed/sympy/core/add.py(405):     def _combine_inverse(lhs, rhs):
0.29 /testbed/sympy/core/add.py(428):     @cacheit
0.29 /testbed/sympy/core/add.py(429):     def as_two_terms(self):
0.29 /testbed/sympy/core/add.py(448):     def as_numer_denom(self):
0.29 /testbed/sympy/core/add.py(480):     def _eval_is_polynomial(self, syms):
0.29 /testbed/sympy/core/add.py(483):     def _eval_is_rational_function(self, syms):
0.29 /testbed/sympy/core/add.py(486):     def _eval_is_algebraic_expr(self, syms):
0.29 /testbed/sympy/core/add.py(490):     _eval_is_real = lambda self: _fuzzy_group(
0.29 /testbed/sympy/core/add.py(492):     _eval_is_complex = lambda self: _fuzzy_group(
0.29 /testbed/sympy/core/add.py(494):     _eval_is_antihermitian = lambda self: _fuzzy_group(
0.29 /testbed/sympy/core/add.py(496):     _eval_is_finite = lambda self: _fuzzy_group(
0.29 /testbed/sympy/core/add.py(498):     _eval_is_hermitian = lambda self: _fuzzy_group(
0.29 /testbed/sympy/core/add.py(500):     _eval_is_integer = lambda self: _fuzzy_group(
0.29 /testbed/sympy/core/add.py(502):     _eval_is_rational = lambda self: _fuzzy_group(
0.29 /testbed/sympy/core/add.py(504):     _eval_is_algebraic = lambda self: _fuzzy_group(
0.29 /testbed/sympy/core/add.py(506):     _eval_is_commutative = lambda self: _fuzzy_group(
0.29 /testbed/sympy/core/add.py(509):     def _eval_is_imaginary(self):
0.29 /testbed/sympy/core/add.py(532):     def _eval_is_zero(self):
0.29 /testbed/sympy/core/add.py(568):     def _eval_is_odd(self):
0.29 /testbed/sympy/core/add.py(575):     def _eval_is_irrational(self):
0.29 /testbed/sympy/core/add.py(588):     def _eval_is_positive(self):
0.29 /testbed/sympy/core/add.py(642):     def _eval_is_nonnegative(self):
0.29 /testbed/sympy/core/add.py(657):     def _eval_is_nonpositive(self):
0.29 /testbed/sympy/core/add.py(672):     def _eval_is_negative(self):
0.29 /testbed/sympy/core/add.py(726):     def _eval_subs(self, old, new):
0.29 /testbed/sympy/core/add.py(763):     def removeO(self):
0.29 /testbed/sympy/core/add.py(767):     def getO(self):
0.29 /testbed/sympy/core/add.py(772):     @cacheit
0.29 /testbed/sympy/core/add.py(773):     def extract_leading_order(self, symbols, point=None):
0.29 /testbed/sympy/core/add.py(810):     def as_real_imag(self, deep=True, **hints):
0.29 /testbed/sympy/core/add.py(833):     def _eval_as_leading_term(self, x):
0.29 /testbed/sympy/core/add.py(865):     def _eval_adjoint(self):
0.29 /testbed/sympy/core/add.py(868):     def _eval_conjugate(self):
0.29 /testbed/sympy/core/add.py(871):     def _eval_transpose(self):
0.29 /testbed/sympy/core/add.py(874):     def __neg__(self):
0.29 /testbed/sympy/core/add.py(877):     def _sage_(self):
0.29 /testbed/sympy/core/add.py(883):     def primitive(self):
0.29 /testbed/sympy/core/add.py(963):     def as_content_primitive(self, radical=False, clear=True):
0.29 /testbed/sympy/core/add.py(1035):     @property
0.29 /testbed/sympy/core/add.py(1036):     def _sorted_args(self):
0.29 /testbed/sympy/core/add.py(1040):     def _eval_difference_delta(self, n, step):
0.29 /testbed/sympy/core/add.py(1044):     @property
0.29 /testbed/sympy/core/add.py(1045):     def _mpc_(self):
0.29 /testbed/sympy/core/add.py(1060): from .mul import Mul, _keep_coeff, prod
0.29 /testbed/sympy/core/add.py(1061): from sympy.core.numbers import Rational
0.90 /testbed/sympy/core/add.py(96):         from sympy.calculus.util import AccumBounds
0.90 /testbed/sympy/core/add.py(97):         from sympy.matrices.expressions import MatrixExpr
0.90 /testbed/sympy/core/add.py(98):         from sympy.tensor.tensor import TensExpr
1.15 /testbed/sympy/core/add.py(99):         rv = None
1.15 /testbed/sympy/core/add.py(100):         if len(seq) == 2:
1.15 /testbed/sympy/core/add.py(101):             a, b = seq
1.15 /testbed/sympy/core/add.py(102):             if b.is_Rational:
1.15 /testbed/sympy/core/add.py(104):             if a.is_Rational:
1.15 /testbed/sympy/core/add.py(107):             if rv:
1.15 /testbed/sympy/core/add.py(112):         terms = {}      # term -> coeff
1.15 /testbed/sympy/core/add.py(115):         coeff = S.Zero  # coefficient (Number or zoo) to always be in slot 0
1.15 /testbed/sympy/core/add.py(117):         order_factors = []
1.15 /testbed/sympy/core/add.py(119):         for o in seq:
1.15 /testbed/sympy/core/add.py(122):             if o.is_Order:
1.15 /testbed/sympy/core/add.py(134):             elif o.is_Number:
1.15 /testbed/sympy/core/add.py(146):             elif isinstance(o, AccumBounds):
1.15 /testbed/sympy/core/add.py(150):             elif isinstance(o, MatrixExpr):
1.15 /testbed/sympy/core/add.py(155):             elif isinstance(o, TensExpr):
1.15 /testbed/sympy/core/add.py(159):             elif o is S.ComplexInfinity:
1.15 /testbed/sympy/core/add.py(167):             elif o.is_Add:
1.15 /testbed/sympy/core/add.py(173):             elif o.is_Mul:
1.15 /testbed/sympy/core/add.py(177):             elif o.is_Pow:
1.15 /testbed/sympy/core/add.py(187):                 c = S.One
1.15 /testbed/sympy/core/add.py(188):                 s = o
1.15 /testbed/sympy/core/add.py(197):             if s in terms:
1.15 /testbed/sympy/core/add.py(203):                 terms[s] = c
1.15 /testbed/sympy/core/add.py(119):         for o in seq:
1.15 /testbed/sympy/core/add.py(122):             if o.is_Order:
1.15 /testbed/sympy/core/add.py(134):             elif o.is_Number:
1.15 /testbed/sympy/core/add.py(146):             elif isinstance(o, AccumBounds):
1.15 /testbed/sympy/core/add.py(150):             elif isinstance(o, MatrixExpr):
1.15 /testbed/sympy/core/add.py(155):             elif isinstance(o, TensExpr):
1.15 /testbed/sympy/core/add.py(159):             elif o is S.ComplexInfinity:
1.15 /testbed/sympy/core/add.py(167):             elif o.is_Add:
1.15 ['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(sympy/core/add\\.py)']
0.20 /testbed/sympy/core/add.py(1): from __future__ import print_function, division
0.20 /testbed/sympy/core/add.py(3): from collections import defaultdict
0.20 /testbed/sympy/core/add.py(4): from functools import cmp_to_key
0.20 /testbed/sympy/core/add.py(6): from .basic import Basic
0.20 /testbed/sympy/core/add.py(7): from .compatibility import reduce, is_sequence, range
0.20 /testbed/sympy/core/add.py(8): from .logic import _fuzzy_group, fuzzy_or, fuzzy_not
0.20 /testbed/sympy/core/add.py(9): from .singleton import S
0.20 /testbed/sympy/core/add.py(10): from .operations import AssocOp
0.20 /testbed/sympy/core/add.py(11): from .cache import cacheit
0.20 /testbed/sympy/core/add.py(12): from .numbers import ilcm, igcd
0.20 /testbed/sympy/core/add.py(13): from .expr import Expr
0.20 /testbed/sympy/core/add.py(16): _args_sortkey = cmp_to_key(Basic.compare)
0.20 /testbed/sympy/core/add.py(19): def _addsort(args):
0.20 /testbed/sympy/core/add.py(24): def _unevaluated_Add(*args):
0.20 /testbed/sympy/core/add.py(72): class Add(Expr, AssocOp):
0.20 /testbed/sympy/core/add.py(72): class Add(Expr, AssocOp):
0.20 /testbed/sympy/core/add.py(74):     __slots__ = []
0.20 /testbed/sympy/core/add.py(76):     is_Add = True
0.20 /testbed/sympy/core/add.py(78):     @classmethod
0.20 /testbed/sympy/core/add.py(79):     def flatten(cls, seq):
0.20 /testbed/sympy/core/add.py(285):     @classmethod
0.20 /testbed/sympy/core/add.py(286):     def class_key(cls):
0.20 /testbed/sympy/core/add.py(290):     def as_coefficients_dict(a):
0.20 /testbed/sympy/core/add.py(321):     @cacheit
0.20 /testbed/sympy/core/add.py(322):     def as_coeff_add(self, *deps):
0.20 /testbed/sympy/core/add.py(350):     def as_coeff_Add(self, rational=False):
0.20 /testbed/sympy/core/add.py(362):     def _eval_power(self, e):
0.20 /testbed/sympy/core/add.py(386):     @cacheit
0.20 /testbed/sympy/core/add.py(387):     def _eval_derivative(self, s):
0.20 /testbed/sympy/core/add.py(390):     def _eval_nseries(self, x, n, logx):
0.20 /testbed/sympy/core/add.py(394):     def _matches_simple(self, expr, repl_dict):
0.20 /testbed/sympy/core/add.py(401):     def matches(self, expr, repl_dict={}, old=False):
0.20 /testbed/sympy/core/add.py(404):     @staticmethod
0.20 /testbed/sympy/core/add.py(405):     def _combine_inverse(lhs, rhs):
0.20 /testbed/sympy/core/add.py(428):     @cacheit
0.20 /testbed/sympy/core/add.py(429):     def as_two_terms(self):
0.20 /testbed/sympy/core/add.py(448):     def as_numer_denom(self):
0.20 /testbed/sympy/core/add.py(480):     def _eval_is_polynomial(self, syms):
0.20 /testbed/sympy/core/add.py(483):     def _eval_is_rational_function(self, syms):
0.20 /testbed/sympy/core/add.py(486):     def _eval_is_algebraic_expr(self, syms):
0.20 /testbed/sympy/core/add.py(490):     _eval_is_real = lambda self: _fuzzy_group(
0.20 /testbed/sympy/core/add.py(492):     _eval_is_complex = lambda self: _fuzzy_group(
0.20 /testbed/sympy/core/add.py(494):     _eval_is_antihermitian = lambda self: _fuzzy_group(
0.20 /testbed/sympy/core/add.py(496):     _eval_is_finite = lambda self: _fuzzy_group(
0.20 /testbed/sympy/core/add.py(498):     _eval_is_hermitian = lambda self: _fuzzy_group(
0.20 /testbed/sympy/core/add.py(500):     _eval_is_integer = lambda self: _fuzzy_group(
0.20 /testbed/sympy/core/add.py(502):     _eval_is_rational = lambda self: _fuzzy_group(
0.20 /testbed/sympy/core/add.py(504):     _eval_is_algebraic = lambda self: _fuzzy_group(
0.20 /testbed/sympy/core/add.py(506):     _eval_is_commutative = lambda self: _fuzzy_group(
0.20 /testbed/sympy/core/add.py(509):     def _eval_is_imaginary(self):
0.20 /testbed/sympy/core/add.py(532):     def _eval_is_zero(self):
0.20 /testbed/sympy/core/add.py(568):     def _eval_is_odd(self):
0.20 /testbed/sympy/core/add.py(575):     def _eval_is_irrational(self):
0.20 /testbed/sympy/core/add.py(588):     def _eval_is_positive(self):
0.20 /testbed/sympy/core/add.py(642):     def _eval_is_nonnegative(self):
0.20 /testbed/sympy/core/add.py(657):     def _eval_is_nonpositive(self):
0.20 /testbed/sympy/core/add.py(672):     def _eval_is_negative(self):
0.20 /testbed/sympy/core/add.py(726):     def _eval_subs(self, old, new):
0.20 /testbed/sympy/core/add.py(763):     def removeO(self):
0.20 /testbed/sympy/core/add.py(767):     def getO(self):
0.20 /testbed/sympy/core/add.py(772):     @cacheit
0.20 /testbed/sympy/core/add.py(773):     def extract_leading_order(self, symbols, point=None):
0.20 /testbed/sympy/core/add.py(810):     def as_real_imag(self, deep=True, **hints):
0.20 /testbed/sympy/core/add.py(833):     def _eval_as_leading_term(self, x):
0.20 /testbed/sympy/core/add.py(865):     def _eval_adjoint(self):
0.20 /testbed/sympy/core/add.py(868):     def _eval_conjugate(self):
0.20 /testbed/sympy/core/add.py(871):     def _eval_transpose(self):
0.20 /testbed/sympy/core/add.py(874):     def __neg__(self):
0.20 /testbed/sympy/core/add.py(877):     def _sage_(self):
0.20 /testbed/sympy/core/add.py(883):     def primitive(self):
0.20 /testbed/sympy/core/add.py(963):     def as_content_primitive(self, radical=False, clear=True):
0.20 /testbed/sympy/core/add.py(1035):     @property
0.20 /testbed/sympy/core/add.py(1036):     def _sorted_args(self):
0.20 /testbed/sympy/core/add.py(1040):     def _eval_difference_delta(self, n, step):
0.20 /testbed/sympy/core/add.py(1044):     @property
0.20 /testbed/sympy/core/add.py(1045):     def _mpc_(self):
0.20 /testbed/sympy/core/add.py(1060): from .mul import Mul, _keep_coeff, prod
0.20 /testbed/sympy/core/add.py(1061): from sympy.core.numbers import Rational
0.35 /testbed/sympy/core/add.py(96):         from sympy.calculus.util import AccumBounds
0.35 /testbed/sympy/core/add.py(97):         from sympy.matrices.expressions import MatrixExpr
0.35 /testbed/sympy/core/add.py(98):         from sympy.tensor.tensor import TensExpr
0.55 /testbed/sympy/core/add.py(99):         rv = None
0.55 /testbed/sympy/core/add.py(100):         if len(seq) == 2:
0.55 /testbed/sympy/core/add.py(101):             a, b = seq
0.55 /testbed/sympy/core/add.py(102):             if b.is_Rational:
0.55 /testbed/sympy/core/add.py(104):             if a.is_Rational:
0.55 /testbed/sympy/core/add.py(107):             if rv:
0.55 /testbed/sympy/core/add.py(112):         terms = {}      # term -> coeff
0.55 /testbed/sympy/core/add.py(115):         coeff = S.Zero  # coefficient (Number or zoo) to always be in slot 0
0.55 /testbed/sympy/core/add.py(117):         order_factors = []
0.55 /testbed/sympy/core/add.py(119):         for o in seq:
0.55 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.55 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.55 /testbed/sympy/core/add.py(146):             elif isinstance(o, AccumBounds):
0.55 /testbed/sympy/core/add.py(150):             elif isinstance(o, MatrixExpr):
0.55 /testbed/sympy/core/add.py(155):             elif isinstance(o, TensExpr):
0.55 /testbed/sympy/core/add.py(159):             elif o is S.ComplexInfinity:
0.55 /testbed/sympy/core/add.py(167):             elif o.is_Add:
0.55 /testbed/sympy/core/add.py(173):             elif o.is_Mul:
0.55 /testbed/sympy/core/add.py(177):             elif o.is_Pow:
0.55 /testbed/sympy/core/add.py(187):                 c = S.One
0.55 /testbed/sympy/core/add.py(188):                 s = o
0.55 /testbed/sympy/core/add.py(197):             if s in terms:
0.55 /testbed/sympy/core/add.py(203):                 terms[s] = c
0.55 /testbed/sympy/core/add.py(119):         for o in seq:
0.55 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.55 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.55 /testbed/sympy/core/add.py(146):             elif isinstance(o, AccumBounds):
0.55 /testbed/sympy/core/add.py(150):             elif isinstance(o, MatrixExpr):
0.55 /testbed/sympy/core/add.py(155):             elif isinstance(o, TensExpr):
0.55 /testbed/sympy/core/add.py(159):             elif o is S.ComplexInfinity:
0.55 /testbed/sympy/core/add.py(167):             elif o.is_Add:
0.55 /testbed/sympy/core/add.py(173):             elif o.is_Mul:
0.55 /testbed/sympy/core/add.py(174):                 c, s = o.as_coeff_Mul()
0.55 /testbed/sympy/core/add.py(197):             if s in terms:
0.55 /testbed/sympy/core/add.py(203):                 terms[s] = c
0.55 /testbed/sympy/core/add.py(119):         for o in seq:
0.55 /testbed/sympy/core/add.py(207):         newseq = []
0.55 /testbed/sympy/core/add.py(208):         noncommutative = False
0.55 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
0.55 /testbed/sympy/core/add.py(211):             if c is S.Zero:
0.55 /testbed/sympy/core/add.py(214):             elif c is S.One:
0.55 /testbed/sympy/core/add.py(215):                 newseq.append(s)
0.55 /testbed/sympy/core/add.py(230):             noncommutative = noncommutative or not s.is_commutative
0.55 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
0.55 /testbed/sympy/core/add.py(211):             if c is S.Zero:
0.55 /testbed/sympy/core/add.py(214):             elif c is S.One:
0.55 /testbed/sympy/core/add.py(215):                 newseq.append(s)
0.55 /testbed/sympy/core/add.py(230):             noncommutative = noncommutative or not s.is_commutative
0.55 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
0.55 /testbed/sympy/core/add.py(233):         if coeff is S.Infinity:
0.55 /testbed/sympy/core/add.py(237):         elif coeff is S.NegativeInfinity:
0.55 /testbed/sympy/core/add.py(241):         if coeff is S.ComplexInfinity:
0.55 /testbed/sympy/core/add.py(254):         if order_factors:
0.55 /testbed/sympy/core/add.py(273):         _addsort(newseq)
0.55 /testbed/sympy/core/add.py(21):     args.sort(key=_args_sortkey)
0.55 /testbed/sympy/core/add.py(276):         if coeff is not S.Zero:
0.55 /testbed/sympy/core/add.py(280):         if noncommutative:
0.55 /testbed/sympy/core/add.py(283):             return newseq, [], None
0.55 /testbed/sympy/core/add.py(96):         from sympy.calculus.util import AccumBounds
0.55 /testbed/sympy/core/add.py(97):         from sympy.matrices.expressions import MatrixExpr
0.55 /testbed/sympy/core/add.py(98):         from sympy.tensor.tensor import TensExpr
0.55 /testbed/sympy/core/add.py(99):         rv = None
0.55 /testbed/sympy/core/add.py(100):         if len(seq) == 2:
0.55 /testbed/sympy/core/add.py(101):             a, b = seq
0.55 /testbed/sympy/core/add.py(102):             if b.is_Rational:
0.55 /testbed/sympy/core/add.py(104):             if a.is_Rational:
0.55 /testbed/sympy/core/add.py(107):             if rv:
0.55 /testbed/sympy/core/add.py(112):         terms = {}      # term -> coeff
0.55 /testbed/sympy/core/add.py(115):         coeff = S.Zero  # coefficient (Number or zoo) to always be in slot 0
0.55 /testbed/sympy/core/add.py(117):         order_factors = []
0.55 /testbed/sympy/core/add.py(119):         for o in seq:
0.55 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.55 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.55 /testbed/sympy/core/add.py(146):             elif isinstance(o, AccumBounds):
0.55 /testbed/sympy/core/add.py(150):             elif isinstance(o, MatrixExpr):
0.55 /testbed/sympy/core/add.py(155):             elif isinstance(o, TensExpr):
0.55 /testbed/sympy/core/add.py(159):             elif o is S.ComplexInfinity:
0.55 /testbed/sympy/core/add.py(167):             elif o.is_Add:
0.55 /testbed/sympy/core/add.py(173):             elif o.is_Mul:
0.55 /testbed/sympy/core/add.py(177):             elif o.is_Pow:
0.55 /testbed/sympy/core/add.py(187):                 c = S.One
0.55 /testbed/sympy/core/add.py(188):                 s = o
0.55 /testbed/sympy/core/add.py(197):             if s in terms:
0.55 /testbed/sympy/core/add.py(203):                 terms[s] = c
0.55 /testbed/sympy/core/add.py(119):         for o in seq:
0.55 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.55 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.55 /testbed/sympy/core/add.py(146):             elif isinstance(o, AccumBounds):
0.55 /testbed/sympy/core/add.py(150):             elif isinstance(o, MatrixExpr):
0.55 /testbed/sympy/core/add.py(155):             elif isinstance(o, TensExpr):
0.55 /testbed/sympy/core/add.py(159):             elif o is S.ComplexInfinity:
0.55 /testbed/sympy/core/add.py(167):             elif o.is_Add:
0.55 /testbed/sympy/core/add.py(173):             elif o.is_Mul:
0.55 /testbed/sympy/core/add.py(174):                 c, s = o.as_coeff_Mul()
0.55 /testbed/sympy/core/add.py(197):             if s in terms:
0.55 /testbed/sympy/core/add.py(203):                 terms[s] = c
0.55 /testbed/sympy/core/add.py(119):         for o in seq:
0.55 /testbed/sympy/core/add.py(207):         newseq = []
0.55 /testbed/sympy/core/add.py(208):         noncommutative = False
0.55 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
0.55 /testbed/sympy/core/add.py(211):             if c is S.Zero:
0.55 /testbed/sympy/core/add.py(214):             elif c is S.One:
0.55 /testbed/sympy/core/add.py(215):                 newseq.append(s)
0.55 /testbed/sympy/core/add.py(230):             noncommutative = noncommutative or not s.is_commutative
0.55 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
0.55 /testbed/sympy/core/add.py(211):             if c is S.Zero:
0.55 /testbed/sympy/core/add.py(214):             elif c is S.One:
0.55 /testbed/sympy/core/add.py(215):                 newseq.append(s)
0.55 /testbed/sympy/core/add.py(230):             noncommutative = noncommutative or not s.is_commutative
0.55 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
0.55 /testbed/sympy/core/add.py(233):         if coeff is S.Infinity:
0.55 /testbed/sympy/core/add.py(237):         elif coeff is S.NegativeInfinity:
0.55 /testbed/sympy/core/add.py(241):         if coeff is S.ComplexInfinity:
0.55 /testbed/sympy/core/add.py(254):         if order_factors:
0.55 /testbed/sympy/core/add.py(273):         _addsort(newseq)
0.55 /testbed/sympy/core/add.py(21):     args.sort(key=_args_sortkey)
0.55 /testbed/sympy/core/add.py(276):         if coeff is not S.Zero:
0.55 /testbed/sympy/core/add.py(280):         if noncommutative:
0.55 /testbed/sympy/core/add.py(283):             return newseq, [], None
============================= test process starts ==============================
executable:         /opt/miniconda3/envs/testbed/bin/python3  (3.9.23-final-0) [CPython]
architecture:       64-bit
cache:              no
ground types:       python 
numpy:              None
random seed:        64325970
hash randomization: on (PYTHONHASHSEED=4066606887)

sympy/polys/tests/test_coverup_sympy__sympy-15875.py[1] 
test_is_zero_bug 0.61 /testbed/sympy/core/add.py(96):         from sympy.calculus.util import AccumBounds
0.61 /testbed/sympy/core/add.py(97):         from sympy.matrices.expressions import MatrixExpr
0.61 /testbed/sympy/core/add.py(98):         from sympy.tensor.tensor import TensExpr
0.61 /testbed/sympy/core/add.py(99):         rv = None
0.61 /testbed/sympy/core/add.py(100):         if len(seq) == 2:
0.61 /testbed/sympy/core/add.py(101):             a, b = seq
0.61 /testbed/sympy/core/add.py(102):             if b.is_Rational:
0.61 /testbed/sympy/core/add.py(104):             if a.is_Rational:
0.61 /testbed/sympy/core/add.py(105):                 if b.is_Mul:
0.61 /testbed/sympy/core/add.py(107):             if rv:
0.61 /testbed/sympy/core/add.py(112):         terms = {}      # term -> coeff
0.61 /testbed/sympy/core/add.py(115):         coeff = S.Zero  # coefficient (Number or zoo) to always be in slot 0
0.61 /testbed/sympy/core/add.py(117):         order_factors = []
0.61 /testbed/sympy/core/add.py(119):         for o in seq:
0.61 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.61 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.61 /testbed/sympy/core/add.py(135):                 if (o is S.NaN or coeff is S.ComplexInfinity and
0.61 /testbed/sympy/core/add.py(139):                 if coeff.is_Number:
0.61 /testbed/sympy/core/add.py(140):                     coeff += o
0.61 /testbed/sympy/core/add.py(141):                     if coeff is S.NaN:
0.61 /testbed/sympy/core/add.py(119):         for o in seq:
0.61 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.61 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.61 /testbed/sympy/core/add.py(146):             elif isinstance(o, AccumBounds):
0.61 /testbed/sympy/core/add.py(150):             elif isinstance(o, MatrixExpr):
0.61 /testbed/sympy/core/add.py(155):             elif isinstance(o, TensExpr):
0.61 /testbed/sympy/core/add.py(159):             elif o is S.ComplexInfinity:
0.61 /testbed/sympy/core/add.py(167):             elif o.is_Add:
0.61 /testbed/sympy/core/add.py(173):             elif o.is_Mul:
0.61 /testbed/sympy/core/add.py(177):             elif o.is_Pow:
0.61 /testbed/sympy/core/add.py(187):                 c = S.One
0.61 /testbed/sympy/core/add.py(188):                 s = o
0.61 /testbed/sympy/core/add.py(197):             if s in terms:
0.61 /testbed/sympy/core/add.py(203):                 terms[s] = c
0.61 /testbed/sympy/core/add.py(119):         for o in seq:
0.61 /testbed/sympy/core/add.py(207):         newseq = []
0.61 /testbed/sympy/core/add.py(208):         noncommutative = False
0.61 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
0.61 /testbed/sympy/core/add.py(211):             if c is S.Zero:
0.61 /testbed/sympy/core/add.py(214):             elif c is S.One:
0.61 /testbed/sympy/core/add.py(215):                 newseq.append(s)
0.61 /testbed/sympy/core/add.py(230):             noncommutative = noncommutative or not s.is_commutative
0.61 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
0.61 /testbed/sympy/core/add.py(233):         if coeff is S.Infinity:
0.61 /testbed/sympy/core/add.py(237):         elif coeff is S.NegativeInfinity:
0.61 /testbed/sympy/core/add.py(241):         if coeff is S.ComplexInfinity:
0.61 /testbed/sympy/core/add.py(254):         if order_factors:
0.61 /testbed/sympy/core/add.py(273):         _addsort(newseq)
0.61 /testbed/sympy/core/add.py(21):     args.sort(key=_args_sortkey)
0.61 /testbed/sympy/core/add.py(276):         if coeff is not S.Zero:
0.61 /testbed/sympy/core/add.py(277):             newseq.insert(0, coeff)
0.61 /testbed/sympy/core/add.py(280):         if noncommutative:
0.61 /testbed/sympy/core/add.py(283):             return newseq, [], None
0.61 /testbed/sympy/core/add.py(363):         if e.is_Rational and self.is_number:
0.61 /testbed/sympy/core/add.py(364):             from sympy.core.evalf import pure_complex
0.61 /testbed/sympy/core/add.py(365):             from sympy.core.mul import _unevaluated_Mul
0.61 /testbed/sympy/core/add.py(366):             from sympy.core.exprtools import factor_terms
0.61 /testbed/sympy/core/add.py(367):             from sympy.core.function import expand_multinomial
0.61 /testbed/sympy/core/add.py(368):             from sympy.functions.elementary.complexes import sign
0.61 /testbed/sympy/core/add.py(369):             from sympy.functions.elementary.miscellaneous import sqrt
0.61 /testbed/sympy/core/add.py(370):             ri = pure_complex(self)
0.61 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.61 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.61 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.61 /testbed/sympy/core/add.py(371):             if ri:
0.61 /testbed/sympy/core/add.py(372):                 r, i = ri
0.61 /testbed/sympy/core/add.py(373):                 if e.q == 2:
0.61 /testbed/sympy/core/add.py(381):                 elif e == -1:
0.61 /testbed/sympy/core/add.py(96):         from sympy.calculus.util import AccumBounds
0.61 /testbed/sympy/core/add.py(97):         from sympy.matrices.expressions import MatrixExpr
0.61 /testbed/sympy/core/add.py(98):         from sympy.tensor.tensor import TensExpr
0.61 /testbed/sympy/core/add.py(99):         rv = None
0.61 /testbed/sympy/core/add.py(100):         if len(seq) == 2:
0.61 /testbed/sympy/core/add.py(101):             a, b = seq
0.61 /testbed/sympy/core/add.py(102):             if b.is_Rational:
0.61 /testbed/sympy/core/add.py(104):             if a.is_Rational:
0.61 /testbed/sympy/core/add.py(107):             if rv:
0.61 /testbed/sympy/core/add.py(112):         terms = {}      # term -> coeff
0.61 /testbed/sympy/core/add.py(115):         coeff = S.Zero  # coefficient (Number or zoo) to always be in slot 0
0.61 /testbed/sympy/core/add.py(117):         order_factors = []
0.61 /testbed/sympy/core/add.py(119):         for o in seq:
0.61 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.61 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.61 /testbed/sympy/core/add.py(146):             elif isinstance(o, AccumBounds):
0.61 /testbed/sympy/core/add.py(150):             elif isinstance(o, MatrixExpr):
0.61 /testbed/sympy/core/add.py(155):             elif isinstance(o, TensExpr):
0.61 /testbed/sympy/core/add.py(159):             elif o is S.ComplexInfinity:
0.61 /testbed/sympy/core/add.py(167):             elif o.is_Add:
0.61 /testbed/sympy/core/add.py(173):             elif o.is_Mul:
0.61 /testbed/sympy/core/add.py(174):                 c, s = o.as_coeff_Mul()
0.61 /testbed/sympy/core/add.py(197):             if s in terms:
0.61 /testbed/sympy/core/add.py(203):                 terms[s] = c
0.61 /testbed/sympy/core/add.py(119):         for o in seq:
0.61 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.61 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.61 /testbed/sympy/core/add.py(146):             elif isinstance(o, AccumBounds):
0.61 /testbed/sympy/core/add.py(150):             elif isinstance(o, MatrixExpr):
0.61 /testbed/sympy/core/add.py(155):             elif isinstance(o, TensExpr):
0.61 /testbed/sympy/core/add.py(159):             elif o is S.ComplexInfinity:
0.61 /testbed/sympy/core/add.py(167):             elif o.is_Add:
0.61 /testbed/sympy/core/add.py(173):             elif o.is_Mul:
0.61 /testbed/sympy/core/add.py(177):             elif o.is_Pow:
0.61 /testbed/sympy/core/add.py(178):                 b, e = o.as_base_exp()
0.61 /testbed/sympy/core/add.py(179):                 if b.is_Number and (e.is_Integer or
0.61 /testbed/sympy/core/add.py(183):                 c, s = S.One, o
0.61 /testbed/sympy/core/add.py(197):             if s in terms:
0.61 /testbed/sympy/core/add.py(203):                 terms[s] = c
0.61 /testbed/sympy/core/add.py(119):         for o in seq:
0.61 /testbed/sympy/core/add.py(207):         newseq = []
0.61 /testbed/sympy/core/add.py(208):         noncommutative = False
0.61 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
0.61 /testbed/sympy/core/add.py(211):             if c is S.Zero:
0.61 /testbed/sympy/core/add.py(214):             elif c is S.One:
0.61 /testbed/sympy/core/add.py(218):                 if s.is_Mul:
0.61 /testbed/sympy/core/add.py(223):                 elif s.is_Add:
0.61 /testbed/sympy/core/add.py(228):                     newseq.append(Mul(c, s))
0.61 /testbed/sympy/core/add.py(230):             noncommutative = noncommutative or not s.is_commutative
0.61 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
0.61 /testbed/sympy/core/add.py(211):             if c is S.Zero:
0.61 /testbed/sympy/core/add.py(214):             elif c is S.One:
0.61 /testbed/sympy/core/add.py(215):                 newseq.append(s)
0.61 /testbed/sympy/core/add.py(230):             noncommutative = noncommutative or not s.is_commutative
0.61 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
0.61 /testbed/sympy/core/add.py(233):         if coeff is S.Infinity:
0.61 /testbed/sympy/core/add.py(237):         elif coeff is S.NegativeInfinity:
0.61 /testbed/sympy/core/add.py(241):         if coeff is S.ComplexInfinity:
0.61 /testbed/sympy/core/add.py(254):         if order_factors:
0.61 /testbed/sympy/core/add.py(273):         _addsort(newseq)
0.61 /testbed/sympy/core/add.py(21):     args.sort(key=_args_sortkey)
0.61 /testbed/sympy/core/add.py(276):         if coeff is not S.Zero:
0.61 /testbed/sympy/core/add.py(280):         if noncommutative:
0.61 /testbed/sympy/core/add.py(283):             return newseq, [], None
0.61 /testbed/sympy/core/add.py(533):         if self.is_commutative is False:
0.61 /testbed/sympy/core/add.py(537):         nz = []
0.61 /testbed/sympy/core/add.py(538):         z = 0
0.61 /testbed/sympy/core/add.py(539):         im_or_z = False
0.61 /testbed/sympy/core/add.py(540):         im = False
0.61 /testbed/sympy/core/add.py(541):         for a in self.args:
0.61 /testbed/sympy/core/add.py(542):             if a.is_real:
0.61 /testbed/sympy/core/add.py(490):     _eval_is_real = lambda self: _fuzzy_group(
0.61 /testbed/sympy/core/add.py(491):         (a.is_real for a in self.args), quick_exit=True)
0.61 /testbed/sympy/core/add.py(490):     _eval_is_real = lambda self: _fuzzy_group(
0.61 /testbed/sympy/core/add.py(491):         (a.is_real for a in self.args), quick_exit=True)
0.61 /testbed/sympy/core/add.py(491):         (a.is_real for a in self.args), quick_exit=True)
0.61 /testbed/sympy/core/add.py(491):         (a.is_real for a in self.args), quick_exit=True)
0.61 /testbed/sympy/core/add.py(510):         nz = []
0.61 /testbed/sympy/core/add.py(511):         im_I = []
0.61 /testbed/sympy/core/add.py(512):         for a in self.args:
0.61 /testbed/sympy/core/add.py(513):             if a.is_real:
0.61 /testbed/sympy/core/add.py(514):                 if a.is_zero:
0.61 /testbed/sympy/core/add.py(516):                 elif a.is_zero is False:
0.61 /testbed/sympy/core/add.py(517):                     nz.append(a)
0.61 /testbed/sympy/core/add.py(512):         for a in self.args:
0.61 /testbed/sympy/core/add.py(513):             if a.is_real:
0.61 /testbed/sympy/core/add.py(520):             elif a.is_imaginary:
0.61 /testbed/sympy/core/add.py(521):                 im_I.append(a*S.ImaginaryUnit)
0.61 /testbed/sympy/core/add.py(512):         for a in self.args:
0.61 /testbed/sympy/core/add.py(526):         b = self.func(*nz)
0.61 /testbed/sympy/core/add.py(527):         if b.is_zero:
0.61 /testbed/sympy/core/add.py(529):         elif b.is_zero is False:
0.61 /testbed/sympy/core/add.py(530):             return False
0.61 /testbed/sympy/core/add.py(983):         con, prim = self.func(*[_keep_coeff(*a.as_content_primitive(
0.61 /testbed/sympy/core/add.py(984):             radical=radical, clear=clear)) for a in self.args]).primitive()
0.61 /testbed/sympy/core/add.py(983):         con, prim = self.func(*[_keep_coeff(*a.as_content_primitive(
0.61 /testbed/sympy/core/add.py(983):         con, prim = self.func(*[_keep_coeff(*a.as_content_primitive(
0.61 /testbed/sympy/core/add.py(984):             radical=radical, clear=clear)) for a in self.args]).primitive()
0.61 /testbed/sympy/core/add.py(983):         con, prim = self.func(*[_keep_coeff(*a.as_content_primitive(
0.61 /testbed/sympy/core/add.py(984):             radical=radical, clear=clear)) for a in self.args]).primitive()
0.61 /testbed/sympy/core/add.py(983):         con, prim = self.func(*[_keep_coeff(*a.as_content_primitive(
0.61 /testbed/sympy/core/add.py(983):         con, prim = self.func(*[_keep_coeff(*a.as_content_primitive(
0.61 /testbed/sympy/core/add.py(984):             radical=radical, clear=clear)) for a in self.args]).primitive()
0.61 /testbed/sympy/core/add.py(983):         con, prim = self.func(*[_keep_coeff(*a.as_content_primitive(
0.61 /testbed/sympy/core/add.py(984):             radical=radical, clear=clear)) for a in self.args]).primitive()
0.61 /testbed/sympy/core/add.py(983):         con, prim = self.func(*[_keep_coeff(*a.as_content_primitive(
0.61 /testbed/sympy/core/add.py(983):         con, prim = self.func(*[_keep_coeff(*a.as_content_primitive(
0.61 /testbed/sympy/core/add.py(96):         from sympy.calculus.util import AccumBounds
0.61 /testbed/sympy/core/add.py(97):         from sympy.matrices.expressions import MatrixExpr
0.61 /testbed/sympy/core/add.py(98):         from sympy.tensor.tensor import TensExpr
0.61 /testbed/sympy/core/add.py(99):         rv = None
0.61 /testbed/sympy/core/add.py(100):         if len(seq) == 2:
0.61 /testbed/sympy/core/add.py(101):             a, b = seq
0.61 /testbed/sympy/core/add.py(102):             if b.is_Rational:
0.61 /testbed/sympy/core/add.py(104):             if a.is_Rational:
0.61 /testbed/sympy/core/add.py(105):                 if b.is_Mul:
0.61 /testbed/sympy/core/add.py(107):             if rv:
0.61 /testbed/sympy/core/add.py(112):         terms = {}      # term -> coeff
0.61 /testbed/sympy/core/add.py(115):         coeff = S.Zero  # coefficient (Number or zoo) to always be in slot 0
0.61 /testbed/sympy/core/add.py(117):         order_factors = []
0.61 /testbed/sympy/core/add.py(119):         for o in seq:
0.61 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.61 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.61 /testbed/sympy/core/add.py(135):                 if (o is S.NaN or coeff is S.ComplexInfinity and
0.61 /testbed/sympy/core/add.py(139):                 if coeff.is_Number:
0.61 /testbed/sympy/core/add.py(140):                     coeff += o
0.61 /testbed/sympy/core/add.py(141):                     if coeff is S.NaN:
0.61 /testbed/sympy/core/add.py(119):         for o in seq:
0.61 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.61 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.61 /testbed/sympy/core/add.py(146):             elif isinstance(o, AccumBounds):
0.61 /testbed/sympy/core/add.py(150):             elif isinstance(o, MatrixExpr):
0.61 /testbed/sympy/core/add.py(155):             elif isinstance(o, TensExpr):
0.61 /testbed/sympy/core/add.py(159):             elif o is S.ComplexInfinity:
0.61 /testbed/sympy/core/add.py(167):             elif o.is_Add:
0.61 /testbed/sympy/core/add.py(173):             elif o.is_Mul:
0.61 /testbed/sympy/core/add.py(177):             elif o.is_Pow:
0.61 /testbed/sympy/core/add.py(187):                 c = S.One
0.61 /testbed/sympy/core/add.py(188):                 s = o
0.61 /testbed/sympy/core/add.py(197):             if s in terms:
0.61 /testbed/sympy/core/add.py(203):                 terms[s] = c
0.61 /testbed/sympy/core/add.py(119):         for o in seq:
0.61 /testbed/sympy/core/add.py(207):         newseq = []
0.61 /testbed/sympy/core/add.py(208):         noncommutative = False
0.61 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
0.61 /testbed/sympy/core/add.py(211):             if c is S.Zero:
0.61 /testbed/sympy/core/add.py(214):             elif c is S.One:
0.61 /testbed/sympy/core/add.py(215):                 newseq.append(s)
0.61 /testbed/sympy/core/add.py(230):             noncommutative = noncommutative or not s.is_commutative
0.61 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
0.61 /testbed/sympy/core/add.py(233):         if coeff is S.Infinity:
0.61 /testbed/sympy/core/add.py(237):         elif coeff is S.NegativeInfinity:
0.61 /testbed/sympy/core/add.py(241):         if coeff is S.ComplexInfinity:
0.61 /testbed/sympy/core/add.py(254):         if order_factors:
0.61 /testbed/sympy/core/add.py(273):         _addsort(newseq)
0.61 /testbed/sympy/core/add.py(21):     args.sort(key=_args_sortkey)
0.61 /testbed/sympy/core/add.py(276):         if coeff is not S.Zero:
0.61 /testbed/sympy/core/add.py(277):             newseq.insert(0, coeff)
0.61 /testbed/sympy/core/add.py(280):         if noncommutative:
0.61 /testbed/sympy/core/add.py(283):             return newseq, [], None
0.61 /testbed/sympy/core/add.py(918):         terms = []
0.61 /testbed/sympy/core/add.py(919):         inf = False
0.61 /testbed/sympy/core/add.py(920):         for a in self.args:
0.61 /testbed/sympy/core/add.py(921):             c, m = a.as_coeff_Mul()
0.61 /testbed/sympy/core/add.py(922):             if not c.is_Rational:
0.61 /testbed/sympy/core/add.py(925):             inf = inf or m is S.ComplexInfinity
0.61 /testbed/sympy/core/add.py(926):             terms.append((c.p, c.q, m))
0.61 /testbed/sympy/core/add.py(920):         for a in self.args:
0.61 /testbed/sympy/core/add.py(921):             c, m = a.as_coeff_Mul()
0.61 /testbed/sympy/core/add.py(922):             if not c.is_Rational:
0.61 /testbed/sympy/core/add.py(925):             inf = inf or m is S.ComplexInfinity
0.61 /testbed/sympy/core/add.py(926):             terms.append((c.p, c.q, m))
0.61 /testbed/sympy/core/add.py(920):         for a in self.args:
0.61 /testbed/sympy/core/add.py(928):         if not inf:
0.61 /testbed/sympy/core/add.py(929):             ngcd = reduce(igcd, [t[0] for t in terms], 0)
0.61 /testbed/sympy/core/add.py(929):             ngcd = reduce(igcd, [t[0] for t in terms], 0)
0.61 /testbed/sympy/core/add.py(929):             ngcd = reduce(igcd, [t[0] for t in terms], 0)
0.61 /testbed/sympy/core/add.py(929):             ngcd = reduce(igcd, [t[0] for t in terms], 0)
0.61 /testbed/sympy/core/add.py(930):             dlcm = reduce(ilcm, [t[1] for t in terms], 1)
0.61 /testbed/sympy/core/add.py(930):             dlcm = reduce(ilcm, [t[1] for t in terms], 1)
0.61 /testbed/sympy/core/add.py(930):             dlcm = reduce(ilcm, [t[1] for t in terms], 1)
0.61 /testbed/sympy/core/add.py(930):             dlcm = reduce(ilcm, [t[1] for t in terms], 1)
0.61 /testbed/sympy/core/add.py(935):         if ngcd == dlcm == 1:
0.61 /testbed/sympy/core/add.py(936):             return S.One, self
0.61 /testbed/sympy/core/add.py(985):         if not clear and not con.is_Integer and prim.is_Add:
0.61 /testbed/sympy/core/add.py(992):         if radical and prim.is_Add:
0.61 /testbed/sympy/core/add.py(1033):         return con, prim
0.61 /testbed/sympy/core/add.py(96):         from sympy.calculus.util import AccumBounds
0.61 /testbed/sympy/core/add.py(97):         from sympy.matrices.expressions import MatrixExpr
0.61 /testbed/sympy/core/add.py(98):         from sympy.tensor.tensor import TensExpr
0.61 /testbed/sympy/core/add.py(99):         rv = None
0.61 /testbed/sympy/core/add.py(100):         if len(seq) == 2:
0.61 /testbed/sympy/core/add.py(101):             a, b = seq
0.61 /testbed/sympy/core/add.py(102):             if b.is_Rational:
0.61 /testbed/sympy/core/add.py(104):             if a.is_Rational:
0.61 /testbed/sympy/core/add.py(105):                 if b.is_Mul:
0.61 /testbed/sympy/core/add.py(107):             if rv:
0.61 /testbed/sympy/core/add.py(112):         terms = {}      # term -> coeff
0.61 /testbed/sympy/core/add.py(115):         coeff = S.Zero  # coefficient (Number or zoo) to always be in slot 0
0.61 /testbed/sympy/core/add.py(117):         order_factors = []
0.61 /testbed/sympy/core/add.py(119):         for o in seq:
0.61 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.61 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.61 /testbed/sympy/core/add.py(135):                 if (o is S.NaN or coeff is S.ComplexInfinity and
0.61 /testbed/sympy/core/add.py(139):                 if coeff.is_Number:
0.61 /testbed/sympy/core/add.py(140):                     coeff += o
0.61 /testbed/sympy/core/add.py(141):                     if coeff is S.NaN:
0.61 /testbed/sympy/core/add.py(119):         for o in seq:
0.61 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.61 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.61 /testbed/sympy/core/add.py(146):             elif isinstance(o, AccumBounds):
0.61 /testbed/sympy/core/add.py(150):             elif isinstance(o, MatrixExpr):
0.61 /testbed/sympy/core/add.py(155):             elif isinstance(o, TensExpr):
0.61 /testbed/sympy/core/add.py(159):             elif o is S.ComplexInfinity:
0.61 /testbed/sympy/core/add.py(167):             elif o.is_Add:
0.61 /testbed/sympy/core/add.py(173):             elif o.is_Mul:
0.61 /testbed/sympy/core/add.py(177):             elif o.is_Pow:
0.61 /testbed/sympy/core/add.py(187):                 c = S.One
0.61 /testbed/sympy/core/add.py(188):                 s = o
0.61 /testbed/sympy/core/add.py(197):             if s in terms:
0.61 /testbed/sympy/core/add.py(203):                 terms[s] = c
0.61 /testbed/sympy/core/add.py(119):         for o in seq:
0.61 /testbed/sympy/core/add.py(207):         newseq = []
0.61 /testbed/sympy/core/add.py(208):         noncommutative = False
0.61 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
0.61 /testbed/sympy/core/add.py(211):             if c is S.Zero:
0.61 /testbed/sympy/core/add.py(214):             elif c is S.One:
0.61 /testbed/sympy/core/add.py(215):                 newseq.append(s)
0.61 /testbed/sympy/core/add.py(230):             noncommutative = noncommutative or not s.is_commutative
0.61 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
0.61 /testbed/sympy/core/add.py(233):         if coeff is S.Infinity:
0.61 /testbed/sympy/core/add.py(237):         elif coeff is S.NegativeInfinity:
0.61 /testbed/sympy/core/add.py(241):         if coeff is S.ComplexInfinity:
0.61 /testbed/sympy/core/add.py(254):         if order_factors:
0.61 /testbed/sympy/core/add.py(273):         _addsort(newseq)
0.61 /testbed/sympy/core/add.py(21):     args.sort(key=_args_sortkey)
0.61 /testbed/sympy/core/add.py(276):         if coeff is not S.Zero:
0.61 /testbed/sympy/core/add.py(277):             newseq.insert(0, coeff)
0.61 /testbed/sympy/core/add.py(280):         if noncommutative:
0.61 /testbed/sympy/core/add.py(283):             return newseq, [], None
0.61 /testbed/sympy/core/add.py(825):         sargs = self.args
0.61 /testbed/sympy/core/add.py(826):         re_part, im_part = [], []
0.61 /testbed/sympy/core/add.py(827):         for term in sargs:
0.61 /testbed/sympy/core/add.py(828):             re, im = term.as_real_imag(deep=deep)
0.61 /testbed/sympy/core/add.py(829):             re_part.append(re)
0.61 /testbed/sympy/core/add.py(830):             im_part.append(im)
0.61 /testbed/sympy/core/add.py(827):         for term in sargs:
0.61 /testbed/sympy/core/add.py(828):             re, im = term.as_real_imag(deep=deep)
0.61 /testbed/sympy/core/add.py(829):             re_part.append(re)
0.61 /testbed/sympy/core/add.py(830):             im_part.append(im)
0.61 /testbed/sympy/core/add.py(827):         for term in sargs:
0.61 /testbed/sympy/core/add.py(831):         return (self.func(*re_part), self.func(*im_part))
0.62 /testbed/sympy/core/add.py(96):         from sympy.calculus.util import AccumBounds
0.62 /testbed/sympy/core/add.py(97):         from sympy.matrices.expressions import MatrixExpr
0.62 /testbed/sympy/core/add.py(98):         from sympy.tensor.tensor import TensExpr
0.62 /testbed/sympy/core/add.py(99):         rv = None
0.62 /testbed/sympy/core/add.py(100):         if len(seq) == 2:
0.62 /testbed/sympy/core/add.py(101):             a, b = seq
0.62 /testbed/sympy/core/add.py(102):             if b.is_Rational:
0.62 /testbed/sympy/core/add.py(103):                 a, b = b, a
0.62 /testbed/sympy/core/add.py(104):             if a.is_Rational:
0.62 /testbed/sympy/core/add.py(105):                 if b.is_Mul:
0.62 /testbed/sympy/core/add.py(107):             if rv:
0.62 /testbed/sympy/core/add.py(112):         terms = {}      # term -> coeff
0.62 /testbed/sympy/core/add.py(115):         coeff = S.Zero  # coefficient (Number or zoo) to always be in slot 0
0.62 /testbed/sympy/core/add.py(117):         order_factors = []
0.62 /testbed/sympy/core/add.py(119):         for o in seq:
0.62 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.62 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.62 /testbed/sympy/core/add.py(135):                 if (o is S.NaN or coeff is S.ComplexInfinity and
0.62 /testbed/sympy/core/add.py(139):                 if coeff.is_Number:
0.62 /testbed/sympy/core/add.py(140):                     coeff += o
0.62 /testbed/sympy/core/add.py(141):                     if coeff is S.NaN:
0.62 /testbed/sympy/core/add.py(119):         for o in seq:
0.62 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.62 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.62 /testbed/sympy/core/add.py(135):                 if (o is S.NaN or coeff is S.ComplexInfinity and
0.62 /testbed/sympy/core/add.py(139):                 if coeff.is_Number:
0.62 /testbed/sympy/core/add.py(140):                     coeff += o
0.62 /testbed/sympy/core/add.py(141):                     if coeff is S.NaN:
0.62 /testbed/sympy/core/add.py(119):         for o in seq:
0.62 /testbed/sympy/core/add.py(207):         newseq = []
0.62 /testbed/sympy/core/add.py(208):         noncommutative = False
0.62 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
0.62 /testbed/sympy/core/add.py(233):         if coeff is S.Infinity:
0.62 /testbed/sympy/core/add.py(237):         elif coeff is S.NegativeInfinity:
0.62 /testbed/sympy/core/add.py(241):         if coeff is S.ComplexInfinity:
0.62 /testbed/sympy/core/add.py(254):         if order_factors:
0.62 /testbed/sympy/core/add.py(273):         _addsort(newseq)
0.62 /testbed/sympy/core/add.py(21):     args.sort(key=_args_sortkey)
0.62 /testbed/sympy/core/add.py(276):         if coeff is not S.Zero:
0.62 /testbed/sympy/core/add.py(280):         if noncommutative:
0.62 /testbed/sympy/core/add.py(283):             return newseq, [], None
0.62 /testbed/sympy/core/add.py(549):             elif a.is_imaginary:
0.62 /testbed/sympy/core/add.py(983):         con, prim = self.func(*[_keep_coeff(*a.as_content_primitive(
0.62 /testbed/sympy/core/add.py(984):             radical=radical, clear=clear)) for a in self.args]).primitive()
0.62 /testbed/sympy/core/add.py(983):         con, prim = self.func(*[_keep_coeff(*a.as_content_primitive(
0.62 /testbed/sympy/core/add.py(983):         con, prim = self.func(*[_keep_coeff(*a.as_content_primitive(
0.62 /testbed/sympy/core/add.py(984):             radical=radical, clear=clear)) for a in self.args]).primitive()
0.62 /testbed/sympy/core/add.py(983):         con, prim = self.func(*[_keep_coeff(*a.as_content_primitive(
0.62 /testbed/sympy/core/add.py(984):             radical=radical, clear=clear)) for a in self.args]).primitive()
0.62 /testbed/sympy/core/add.py(983):         con, prim = self.func(*[_keep_coeff(*a.as_content_primitive(
0.62 /testbed/sympy/core/add.py(983):         con, prim = self.func(*[_keep_coeff(*a.as_content_primitive(
0.62 /testbed/sympy/core/add.py(984):             radical=radical, clear=clear)) for a in self.args]).primitive()
0.62 /testbed/sympy/core/add.py(983):         con, prim = self.func(*[_keep_coeff(*a.as_content_primitive(
0.62 /testbed/sympy/core/add.py(984):             radical=radical, clear=clear)) for a in self.args]).primitive()
0.62 /testbed/sympy/core/add.py(983):         con, prim = self.func(*[_keep_coeff(*a.as_content_primitive(
0.62 /testbed/sympy/core/add.py(983):         con, prim = self.func(*[_keep_coeff(*a.as_content_primitive(
0.62 /testbed/sympy/core/add.py(96):         from sympy.calculus.util import AccumBounds
0.62 /testbed/sympy/core/add.py(97):         from sympy.matrices.expressions import MatrixExpr
0.62 /testbed/sympy/core/add.py(98):         from sympy.tensor.tensor import TensExpr
0.62 /testbed/sympy/core/add.py(99):         rv = None
0.62 /testbed/sympy/core/add.py(100):         if len(seq) == 2:
0.62 /testbed/sympy/core/add.py(101):             a, b = seq
0.62 /testbed/sympy/core/add.py(102):             if b.is_Rational:
0.62 /testbed/sympy/core/add.py(104):             if a.is_Rational:
0.62 /testbed/sympy/core/add.py(105):                 if b.is_Mul:
0.62 /testbed/sympy/core/add.py(107):             if rv:
0.62 /testbed/sympy/core/add.py(112):         terms = {}      # term -> coeff
0.62 /testbed/sympy/core/add.py(115):         coeff = S.Zero  # coefficient (Number or zoo) to always be in slot 0
0.62 /testbed/sympy/core/add.py(117):         order_factors = []
0.62 /testbed/sympy/core/add.py(119):         for o in seq:
0.62 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.62 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.62 /testbed/sympy/core/add.py(135):                 if (o is S.NaN or coeff is S.ComplexInfinity and
0.62 /testbed/sympy/core/add.py(139):                 if coeff.is_Number:
0.62 /testbed/sympy/core/add.py(140):                     coeff += o
0.62 /testbed/sympy/core/add.py(141):                     if coeff is S.NaN:
0.62 /testbed/sympy/core/add.py(119):         for o in seq:
0.62 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.62 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.62 /testbed/sympy/core/add.py(146):             elif isinstance(o, AccumBounds):
0.62 /testbed/sympy/core/add.py(150):             elif isinstance(o, MatrixExpr):
0.62 /testbed/sympy/core/add.py(155):             elif isinstance(o, TensExpr):
0.62 /testbed/sympy/core/add.py(159):             elif o is S.ComplexInfinity:
0.62 /testbed/sympy/core/add.py(167):             elif o.is_Add:
0.62 /testbed/sympy/core/add.py(173):             elif o.is_Mul:
0.62 /testbed/sympy/core/add.py(177):             elif o.is_Pow:
0.62 /testbed/sympy/core/add.py(187):                 c = S.One
0.62 /testbed/sympy/core/add.py(188):                 s = o
0.62 /testbed/sympy/core/add.py(197):             if s in terms:
0.62 /testbed/sympy/core/add.py(203):                 terms[s] = c
0.62 /testbed/sympy/core/add.py(119):         for o in seq:
0.62 /testbed/sympy/core/add.py(207):         newseq = []
0.62 /testbed/sympy/core/add.py(208):         noncommutative = False
0.62 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
0.62 /testbed/sympy/core/add.py(211):             if c is S.Zero:
0.62 /testbed/sympy/core/add.py(214):             elif c is S.One:
0.62 /testbed/sympy/core/add.py(215):                 newseq.append(s)
0.62 /testbed/sympy/core/add.py(230):             noncommutative = noncommutative or not s.is_commutative
0.62 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
0.62 /testbed/sympy/core/add.py(233):         if coeff is S.Infinity:
0.62 /testbed/sympy/core/add.py(237):         elif coeff is S.NegativeInfinity:
0.62 /testbed/sympy/core/add.py(241):         if coeff is S.ComplexInfinity:
0.62 /testbed/sympy/core/add.py(254):         if order_factors:
0.62 /testbed/sympy/core/add.py(273):         _addsort(newseq)
0.62 /testbed/sympy/core/add.py(21):     args.sort(key=_args_sortkey)
0.62 /testbed/sympy/core/add.py(276):         if coeff is not S.Zero:
0.62 /testbed/sympy/core/add.py(277):             newseq.insert(0, coeff)
0.62 /testbed/sympy/core/add.py(280):         if noncommutative:
0.62 /testbed/sympy/core/add.py(283):             return newseq, [], None
0.62 /testbed/sympy/core/add.py(918):         terms = []
0.62 /testbed/sympy/core/add.py(919):         inf = False
0.62 /testbed/sympy/core/add.py(920):         for a in self.args:
0.62 /testbed/sympy/core/add.py(921):             c, m = a.as_coeff_Mul()
0.62 /testbed/sympy/core/add.py(922):             if not c.is_Rational:
0.62 /testbed/sympy/core/add.py(925):             inf = inf or m is S.ComplexInfinity
0.62 /testbed/sympy/core/add.py(926):             terms.append((c.p, c.q, m))
0.62 /testbed/sympy/core/add.py(920):         for a in self.args:
0.62 /testbed/sympy/core/add.py(921):             c, m = a.as_coeff_Mul()
0.62 /testbed/sympy/core/add.py(922):             if not c.is_Rational:
0.62 /testbed/sympy/core/add.py(925):             inf = inf or m is S.ComplexInfinity
0.62 /testbed/sympy/core/add.py(926):             terms.append((c.p, c.q, m))
0.62 /testbed/sympy/core/add.py(920):         for a in self.args:
0.62 /testbed/sympy/core/add.py(928):         if not inf:
0.62 /testbed/sympy/core/add.py(929):             ngcd = reduce(igcd, [t[0] for t in terms], 0)
0.62 /testbed/sympy/core/add.py(929):             ngcd = reduce(igcd, [t[0] for t in terms], 0)
0.62 /testbed/sympy/core/add.py(929):             ngcd = reduce(igcd, [t[0] for t in terms], 0)
0.62 /testbed/sympy/core/add.py(929):             ngcd = reduce(igcd, [t[0] for t in terms], 0)
0.62 /testbed/sympy/core/add.py(930):             dlcm = reduce(ilcm, [t[1] for t in terms], 1)
0.62 /testbed/sympy/core/add.py(930):             dlcm = reduce(ilcm, [t[1] for t in terms], 1)
0.62 /testbed/sympy/core/add.py(930):             dlcm = reduce(ilcm, [t[1] for t in terms], 1)
0.62 /testbed/sympy/core/add.py(930):             dlcm = reduce(ilcm, [t[1] for t in terms], 1)
0.62 /testbed/sympy/core/add.py(935):         if ngcd == dlcm == 1:
0.62 /testbed/sympy/core/add.py(936):             return S.One, self
0.62 /testbed/sympy/core/add.py(985):         if not clear and not con.is_Integer and prim.is_Add:
0.62 /testbed/sympy/core/add.py(992):         if radical and prim.is_Add:
0.62 /testbed/sympy/core/add.py(1033):         return con, prim
0.62 /testbed/sympy/core/add.py(96):         from sympy.calculus.util import AccumBounds
0.62 /testbed/sympy/core/add.py(97):         from sympy.matrices.expressions import MatrixExpr
0.62 /testbed/sympy/core/add.py(98):         from sympy.tensor.tensor import TensExpr
0.62 /testbed/sympy/core/add.py(99):         rv = None
0.62 /testbed/sympy/core/add.py(100):         if len(seq) == 2:
0.62 /testbed/sympy/core/add.py(101):             a, b = seq
0.62 /testbed/sympy/core/add.py(102):             if b.is_Rational:
0.62 /testbed/sympy/core/add.py(104):             if a.is_Rational:
0.62 /testbed/sympy/core/add.py(105):                 if b.is_Mul:
0.62 /testbed/sympy/core/add.py(107):             if rv:
0.62 /testbed/sympy/core/add.py(112):         terms = {}      # term -> coeff
0.62 /testbed/sympy/core/add.py(115):         coeff = S.Zero  # coefficient (Number or zoo) to always be in slot 0
0.62 /testbed/sympy/core/add.py(117):         order_factors = []
0.62 /testbed/sympy/core/add.py(119):         for o in seq:
0.62 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.62 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.62 /testbed/sympy/core/add.py(135):                 if (o is S.NaN or coeff is S.ComplexInfinity and
0.62 /testbed/sympy/core/add.py(139):                 if coeff.is_Number:
0.62 /testbed/sympy/core/add.py(140):                     coeff += o
0.62 /testbed/sympy/core/add.py(141):                     if coeff is S.NaN:
0.62 /testbed/sympy/core/add.py(119):         for o in seq:
0.62 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.62 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.62 /testbed/sympy/core/add.py(146):             elif isinstance(o, AccumBounds):
0.62 /testbed/sympy/core/add.py(150):             elif isinstance(o, MatrixExpr):
0.62 /testbed/sympy/core/add.py(155):             elif isinstance(o, TensExpr):
0.62 /testbed/sympy/core/add.py(159):             elif o is S.ComplexInfinity:
0.62 /testbed/sympy/core/add.py(167):             elif o.is_Add:
0.62 /testbed/sympy/core/add.py(173):             elif o.is_Mul:
0.62 /testbed/sympy/core/add.py(177):             elif o.is_Pow:
0.62 /testbed/sympy/core/add.py(187):                 c = S.One
0.62 /testbed/sympy/core/add.py(188):                 s = o
0.62 /testbed/sympy/core/add.py(197):             if s in terms:
0.62 /testbed/sympy/core/add.py(203):                 terms[s] = c
0.62 /testbed/sympy/core/add.py(119):         for o in seq:
0.62 /testbed/sympy/core/add.py(207):         newseq = []
0.62 /testbed/sympy/core/add.py(208):         noncommutative = False
0.62 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
0.62 /testbed/sympy/core/add.py(211):             if c is S.Zero:
0.62 /testbed/sympy/core/add.py(214):             elif c is S.One:
0.62 /testbed/sympy/core/add.py(215):                 newseq.append(s)
0.62 /testbed/sympy/core/add.py(230):             noncommutative = noncommutative or not s.is_commutative
0.62 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
0.62 /testbed/sympy/core/add.py(233):         if coeff is S.Infinity:
0.62 /testbed/sympy/core/add.py(237):         elif coeff is S.NegativeInfinity:
0.62 /testbed/sympy/core/add.py(241):         if coeff is S.ComplexInfinity:
0.62 /testbed/sympy/core/add.py(254):         if order_factors:
0.62 /testbed/sympy/core/add.py(273):         _addsort(newseq)
0.62 /testbed/sympy/core/add.py(21):     args.sort(key=_args_sortkey)
0.62 /testbed/sympy/core/add.py(276):         if coeff is not S.Zero:
0.62 /testbed/sympy/core/add.py(277):             newseq.insert(0, coeff)
0.62 /testbed/sympy/core/add.py(280):         if noncommutative:
0.62 /testbed/sympy/core/add.py(283):             return newseq, [], None
0.62 /testbed/sympy/core/add.py(825):         sargs = self.args
0.62 /testbed/sympy/core/add.py(826):         re_part, im_part = [], []
0.62 /testbed/sympy/core/add.py(827):         for term in sargs:
0.62 /testbed/sympy/core/add.py(828):             re, im = term.as_real_imag(deep=deep)
0.62 /testbed/sympy/core/add.py(829):             re_part.append(re)
0.62 /testbed/sympy/core/add.py(830):             im_part.append(im)
0.62 /testbed/sympy/core/add.py(827):         for term in sargs:
0.62 /testbed/sympy/core/add.py(828):             re, im = term.as_real_imag(deep=deep)
0.62 /testbed/sympy/core/add.py(829):             re_part.append(re)
0.62 /testbed/sympy/core/add.py(830):             im_part.append(im)
0.62 /testbed/sympy/core/add.py(827):         for term in sargs:
0.62 /testbed/sympy/core/add.py(831):         return (self.func(*re_part), self.func(*im_part))
0.62 /testbed/sympy/core/add.py(96):         from sympy.calculus.util import AccumBounds
0.62 /testbed/sympy/core/add.py(97):         from sympy.matrices.expressions import MatrixExpr
0.62 /testbed/sympy/core/add.py(98):         from sympy.tensor.tensor import TensExpr
0.62 /testbed/sympy/core/add.py(99):         rv = None
0.62 /testbed/sympy/core/add.py(100):         if len(seq) == 2:
0.62 /testbed/sympy/core/add.py(101):             a, b = seq
0.62 /testbed/sympy/core/add.py(102):             if b.is_Rational:
0.62 /testbed/sympy/core/add.py(103):                 a, b = b, a
0.62 /testbed/sympy/core/add.py(104):             if a.is_Rational:
0.62 /testbed/sympy/core/add.py(105):                 if b.is_Mul:
0.62 /testbed/sympy/core/add.py(107):             if rv:
0.62 /testbed/sympy/core/add.py(112):         terms = {}      # term -> coeff
0.62 /testbed/sympy/core/add.py(115):         coeff = S.Zero  # coefficient (Number or zoo) to always be in slot 0
0.62 /testbed/sympy/core/add.py(117):         order_factors = []
0.62 /testbed/sympy/core/add.py(119):         for o in seq:
0.62 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.62 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.62 /testbed/sympy/core/add.py(135):                 if (o is S.NaN or coeff is S.ComplexInfinity and
0.62 /testbed/sympy/core/add.py(139):                 if coeff.is_Number:
0.62 /testbed/sympy/core/add.py(140):                     coeff += o
0.62 /testbed/sympy/core/add.py(141):                     if coeff is S.NaN:
0.62 /testbed/sympy/core/add.py(119):         for o in seq:
0.62 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.62 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.62 /testbed/sympy/core/add.py(135):                 if (o is S.NaN or coeff is S.ComplexInfinity and
0.62 /testbed/sympy/core/add.py(139):                 if coeff.is_Number:
0.62 /testbed/sympy/core/add.py(140):                     coeff += o
0.62 /testbed/sympy/core/add.py(141):                     if coeff is S.NaN:
0.62 /testbed/sympy/core/add.py(119):         for o in seq:
0.62 /testbed/sympy/core/add.py(207):         newseq = []
0.62 /testbed/sympy/core/add.py(208):         noncommutative = False
0.62 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
0.62 /testbed/sympy/core/add.py(233):         if coeff is S.Infinity:
0.62 /testbed/sympy/core/add.py(237):         elif coeff is S.NegativeInfinity:
0.62 /testbed/sympy/core/add.py(241):         if coeff is S.ComplexInfinity:
0.62 /testbed/sympy/core/add.py(254):         if order_factors:
0.62 /testbed/sympy/core/add.py(273):         _addsort(newseq)
0.62 /testbed/sympy/core/add.py(21):     args.sort(key=_args_sortkey)
0.62 /testbed/sympy/core/add.py(276):         if coeff is not S.Zero:
0.62 /testbed/sympy/core/add.py(280):         if noncommutative:
0.62 /testbed/sympy/core/add.py(283):             return newseq, [], None
0.62 /testbed/sympy/core/add.py(550):                 im = True
0.62 /testbed/sympy/core/add.py(541):         for a in self.args:
0.62 /testbed/sympy/core/add.py(542):             if a.is_real:
0.62 /testbed/sympy/core/add.py(549):             elif a.is_imaginary:
0.62 /testbed/sympy/core/add.py(550):                 im = True
0.62 /testbed/sympy/core/add.py(541):         for a in self.args:
0.62 /testbed/sympy/core/add.py(555):         if z == len(self.args):
0.62 /testbed/sympy/core/add.py(557):         if len(nz) == 0 or len(nz) == len(self.args):
0.62 /testbed/sympy/core/add.py(558):             return None
0.62 /testbed/sympy/core/add.py(490):     _eval_is_real = lambda self: _fuzzy_group(
0.62 /testbed/sympy/core/add.py(491):         (a.is_real for a in self.args), quick_exit=True)
0.62 /testbed/sympy/core/add.py(490):     _eval_is_real = lambda self: _fuzzy_group(
0.62 /testbed/sympy/core/add.py(491):         (a.is_real for a in self.args), quick_exit=True)
0.62 /testbed/sympy/core/add.py(491):         (a.is_real for a in self.args), quick_exit=True)
0.62 /testbed/sympy/core/add.py(506):     _eval_is_commutative = lambda self: _fuzzy_group(
0.62 /testbed/sympy/core/add.py(507):         a.is_commutative for a in self.args)
0.62 /testbed/sympy/core/add.py(506):     _eval_is_commutative = lambda self: _fuzzy_group(
0.62 /testbed/sympy/core/add.py(506):     _eval_is_commutative = lambda self: _fuzzy_group(
0.62 /testbed/sympy/core/add.py(507):         a.is_commutative for a in self.args)
0.62 /testbed/sympy/core/add.py(506):     _eval_is_commutative = lambda self: _fuzzy_group(
0.62 /testbed/sympy/core/add.py(507):         a.is_commutative for a in self.args)
0.62 /testbed/sympy/core/add.py(506):     _eval_is_commutative = lambda self: _fuzzy_group(
0.62 /testbed/sympy/core/add.py(673):         from sympy.core.exprtools import _monotonic_sign
0.62 /testbed/sympy/core/add.py(674):         if self.is_number:
0.62 /testbed/sympy/core/add.py(675):             return super(Add, self)._eval_is_negative()
0.62 /testbed/sympy/core/add.py(96):         from sympy.calculus.util import AccumBounds
0.62 /testbed/sympy/core/add.py(97):         from sympy.matrices.expressions import MatrixExpr
0.62 /testbed/sympy/core/add.py(98):         from sympy.tensor.tensor import TensExpr
0.62 /testbed/sympy/core/add.py(99):         rv = None
0.62 /testbed/sympy/core/add.py(100):         if len(seq) == 2:
0.62 /testbed/sympy/core/add.py(101):             a, b = seq
0.62 /testbed/sympy/core/add.py(102):             if b.is_Rational:
0.62 /testbed/sympy/core/add.py(104):             if a.is_Rational:
0.62 /testbed/sympy/core/add.py(107):             if rv:
0.62 /testbed/sympy/core/add.py(112):         terms = {}      # term -> coeff
0.62 /testbed/sympy/core/add.py(115):         coeff = S.Zero  # coefficient (Number or zoo) to always be in slot 0
0.62 /testbed/sympy/core/add.py(117):         order_factors = []
0.62 /testbed/sympy/core/add.py(119):         for o in seq:
0.62 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.62 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.62 /testbed/sympy/core/add.py(146):             elif isinstance(o, AccumBounds):
0.62 /testbed/sympy/core/add.py(150):             elif isinstance(o, MatrixExpr):
0.62 /testbed/sympy/core/add.py(155):             elif isinstance(o, TensExpr):
0.62 /testbed/sympy/core/add.py(159):             elif o is S.ComplexInfinity:
0.62 /testbed/sympy/core/add.py(167):             elif o.is_Add:
0.62 /testbed/sympy/core/add.py(173):             elif o.is_Mul:
0.62 /testbed/sympy/core/add.py(177):             elif o.is_Pow:
0.62 /testbed/sympy/core/add.py(178):                 b, e = o.as_base_exp()
0.62 /testbed/sympy/core/add.py(179):                 if b.is_Number and (e.is_Integer or
0.62 /testbed/sympy/core/add.py(183):                 c, s = S.One, o
0.62 /testbed/sympy/core/add.py(197):             if s in terms:
0.62 /testbed/sympy/core/add.py(203):                 terms[s] = c
0.62 /testbed/sympy/core/add.py(119):         for o in seq:
0.62 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.62 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.62 /testbed/sympy/core/add.py(146):             elif isinstance(o, AccumBounds):
0.62 /testbed/sympy/core/add.py(150):             elif isinstance(o, MatrixExpr):
0.62 /testbed/sympy/core/add.py(155):             elif isinstance(o, TensExpr):
0.62 /testbed/sympy/core/add.py(159):             elif o is S.ComplexInfinity:
0.62 /testbed/sympy/core/add.py(167):             elif o.is_Add:
0.62 /testbed/sympy/core/add.py(173):             elif o.is_Mul:
0.62 /testbed/sympy/core/add.py(174):                 c, s = o.as_coeff_Mul()
0.62 /testbed/sympy/core/add.py(197):             if s in terms:
0.62 /testbed/sympy/core/add.py(203):                 terms[s] = c
0.62 /testbed/sympy/core/add.py(119):         for o in seq:
0.62 /testbed/sympy/core/add.py(207):         newseq = []
0.62 /testbed/sympy/core/add.py(208):         noncommutative = False
0.62 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
0.62 /testbed/sympy/core/add.py(211):             if c is S.Zero:
0.62 /testbed/sympy/core/add.py(214):             elif c is S.One:
0.62 /testbed/sympy/core/add.py(215):                 newseq.append(s)
0.62 /testbed/sympy/core/add.py(230):             noncommutative = noncommutative or not s.is_commutative
0.62 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
0.62 /testbed/sympy/core/add.py(211):             if c is S.Zero:
0.62 /testbed/sympy/core/add.py(214):             elif c is S.One:
0.62 /testbed/sympy/core/add.py(218):                 if s.is_Mul:
0.62 /testbed/sympy/core/add.py(223):                 elif s.is_Add:
0.62 /testbed/sympy/core/add.py(228):                     newseq.append(Mul(c, s))
0.62 /testbed/sympy/core/add.py(230):             noncommutative = noncommutative or not s.is_commutative
0.62 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
0.62 /testbed/sympy/core/add.py(233):         if coeff is S.Infinity:
0.62 /testbed/sympy/core/add.py(237):         elif coeff is S.NegativeInfinity:
0.62 /testbed/sympy/core/add.py(241):         if coeff is S.ComplexInfinity:
0.62 /testbed/sympy/core/add.py(254):         if order_factors:
0.62 /testbed/sympy/core/add.py(273):         _addsort(newseq)
0.62 /testbed/sympy/core/add.py(21):     args.sort(key=_args_sortkey)
0.62 /testbed/sympy/core/add.py(276):         if coeff is not S.Zero:
0.62 /testbed/sympy/core/add.py(280):         if noncommutative:
0.62 /testbed/sympy/core/add.py(283):             return newseq, [], None
0.62 /testbed/sympy/core/add.py(53):     args = list(args)
0.62 /testbed/sympy/core/add.py(54):     newargs = []
0.62 /testbed/sympy/core/add.py(55):     co = S.Zero
0.62 /testbed/sympy/core/add.py(56):     while args:
0.62 /testbed/sympy/core/add.py(66):     _addsort(newargs)
0.62 /testbed/sympy/core/add.py(21):     args.sort(key=_args_sortkey)
0.62 /testbed/sympy/core/add.py(67):     if co:
0.62 /testbed/sympy/core/add.py(69):     return Add._from_args(newargs)
0.62 /testbed/sympy/core/add.py(96):         from sympy.calculus.util import AccumBounds
0.62 /testbed/sympy/core/add.py(97):         from sympy.matrices.expressions import MatrixExpr
0.62 /testbed/sympy/core/add.py(98):         from sympy.tensor.tensor import TensExpr
0.62 /testbed/sympy/core/add.py(99):         rv = None
0.62 /testbed/sympy/core/add.py(100):         if len(seq) == 2:
0.62 /testbed/sympy/core/add.py(101):             a, b = seq
0.62 /testbed/sympy/core/add.py(102):             if b.is_Rational:
0.62 /testbed/sympy/core/add.py(104):             if a.is_Rational:
0.62 /testbed/sympy/core/add.py(105):                 if b.is_Mul:
0.62 /testbed/sympy/core/add.py(107):             if rv:
0.62 /testbed/sympy/core/add.py(112):         terms = {}      # term -> coeff
0.62 /testbed/sympy/core/add.py(115):         coeff = S.Zero  # coefficient (Number or zoo) to always be in slot 0
0.62 /testbed/sympy/core/add.py(117):         order_factors = []
0.62 /testbed/sympy/core/add.py(119):         for o in seq:
0.62 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.62 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.62 /testbed/sympy/core/add.py(135):                 if (o is S.NaN or coeff is S.ComplexInfinity and
0.62 /testbed/sympy/core/add.py(139):                 if coeff.is_Number:
0.62 /testbed/sympy/core/add.py(140):                     coeff += o
0.62 /testbed/sympy/core/add.py(141):                     if coeff is S.NaN:
0.62 /testbed/sympy/core/add.py(119):         for o in seq:
0.62 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.62 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.62 /testbed/sympy/core/add.py(146):             elif isinstance(o, AccumBounds):
0.62 /testbed/sympy/core/add.py(150):             elif isinstance(o, MatrixExpr):
0.62 /testbed/sympy/core/add.py(155):             elif isinstance(o, TensExpr):
0.62 /testbed/sympy/core/add.py(159):             elif o is S.ComplexInfinity:
0.62 /testbed/sympy/core/add.py(167):             elif o.is_Add:
0.62 /testbed/sympy/core/add.py(173):             elif o.is_Mul:
0.62 /testbed/sympy/core/add.py(177):             elif o.is_Pow:
0.62 /testbed/sympy/core/add.py(187):                 c = S.One
0.62 /testbed/sympy/core/add.py(188):                 s = o
0.62 /testbed/sympy/core/add.py(197):             if s in terms:
0.62 /testbed/sympy/core/add.py(203):                 terms[s] = c
0.62 /testbed/sympy/core/add.py(119):         for o in seq:
0.62 /testbed/sympy/core/add.py(207):         newseq = []
0.62 /testbed/sympy/core/add.py(208):         noncommutative = False
0.62 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
0.62 /testbed/sympy/core/add.py(211):             if c is S.Zero:
0.62 /testbed/sympy/core/add.py(214):             elif c is S.One:
0.62 /testbed/sympy/core/add.py(215):                 newseq.append(s)
0.62 /testbed/sympy/core/add.py(230):             noncommutative = noncommutative or not s.is_commutative
0.62 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
0.62 /testbed/sympy/core/add.py(233):         if coeff is S.Infinity:
0.62 /testbed/sympy/core/add.py(237):         elif coeff is S.NegativeInfinity:
0.62 /testbed/sympy/core/add.py(241):         if coeff is S.ComplexInfinity:
0.62 /testbed/sympy/core/add.py(254):         if order_factors:
0.62 /testbed/sympy/core/add.py(273):         _addsort(newseq)
0.62 /testbed/sympy/core/add.py(21):     args.sort(key=_args_sortkey)
0.62 /testbed/sympy/core/add.py(276):         if coeff is not S.Zero:
0.62 /testbed/sympy/core/add.py(277):             newseq.insert(0, coeff)
0.62 /testbed/sympy/core/add.py(280):         if noncommutative:
0.62 /testbed/sympy/core/add.py(283):             return newseq, [], None
0.62 /testbed/sympy/core/add.py(53):     args = list(args)
0.62 /testbed/sympy/core/add.py(54):     newargs = []
0.62 /testbed/sympy/core/add.py(55):     co = S.Zero
0.62 /testbed/sympy/core/add.py(56):     while args:
0.62 /testbed/sympy/core/add.py(66):     _addsort(newargs)
0.62 /testbed/sympy/core/add.py(21):     args.sort(key=_args_sortkey)
0.62 /testbed/sympy/core/add.py(67):     if co:
0.62 /testbed/sympy/core/add.py(69):     return Add._from_args(newargs)
0.62 /testbed/sympy/core/add.py(96):         from sympy.calculus.util import AccumBounds
0.62 /testbed/sympy/core/add.py(97):         from sympy.matrices.expressions import MatrixExpr
0.62 /testbed/sympy/core/add.py(98):         from sympy.tensor.tensor import TensExpr
0.62 /testbed/sympy/core/add.py(99):         rv = None
0.62 /testbed/sympy/core/add.py(100):         if len(seq) == 2:
0.62 /testbed/sympy/core/add.py(101):             a, b = seq
0.62 /testbed/sympy/core/add.py(102):             if b.is_Rational:
0.62 /testbed/sympy/core/add.py(104):             if a.is_Rational:
0.62 /testbed/sympy/core/add.py(107):             if rv:
0.62 /testbed/sympy/core/add.py(112):         terms = {}      # term -> coeff
0.62 /testbed/sympy/core/add.py(115):         coeff = S.Zero  # coefficient (Number or zoo) to always be in slot 0
0.62 /testbed/sympy/core/add.py(117):         order_factors = []
0.62 /testbed/sympy/core/add.py(119):         for o in seq:
0.62 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.62 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.62 /testbed/sympy/core/add.py(135):                 if (o is S.NaN or coeff is S.ComplexInfinity and
0.62 /testbed/sympy/core/add.py(139):                 if coeff.is_Number:
0.62 /testbed/sympy/core/add.py(140):                     coeff += o
0.62 /testbed/sympy/core/add.py(141):                     if coeff is S.NaN:
0.62 /testbed/sympy/core/add.py(119):         for o in seq:
0.62 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.62 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.62 /testbed/sympy/core/add.py(146):             elif isinstance(o, AccumBounds):
0.62 /testbed/sympy/core/add.py(150):             elif isinstance(o, MatrixExpr):
0.62 /testbed/sympy/core/add.py(155):             elif isinstance(o, TensExpr):
0.62 /testbed/sympy/core/add.py(159):             elif o is S.ComplexInfinity:
0.62 /testbed/sympy/core/add.py(167):             elif o.is_Add:
0.62 /testbed/sympy/core/add.py(173):             elif o.is_Mul:
0.62 /testbed/sympy/core/add.py(177):             elif o.is_Pow:
0.62 /testbed/sympy/core/add.py(187):                 c = S.One
0.62 /testbed/sympy/core/add.py(188):                 s = o
0.62 /testbed/sympy/core/add.py(197):             if s in terms:
0.62 /testbed/sympy/core/add.py(203):                 terms[s] = c
0.62 /testbed/sympy/core/add.py(119):         for o in seq:
0.62 /testbed/sympy/core/add.py(207):         newseq = []
0.62 /testbed/sympy/core/add.py(208):         noncommutative = False
0.62 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
0.62 /testbed/sympy/core/add.py(211):             if c is S.Zero:
0.62 /testbed/sympy/core/add.py(214):             elif c is S.One:
0.62 /testbed/sympy/core/add.py(215):                 newseq.append(s)
0.62 /testbed/sympy/core/add.py(230):             noncommutative = noncommutative or not s.is_commutative
0.62 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
0.62 /testbed/sympy/core/add.py(233):         if coeff is S.Infinity:
0.62 /testbed/sympy/core/add.py(237):         elif coeff is S.NegativeInfinity:
0.62 /testbed/sympy/core/add.py(241):         if coeff is S.ComplexInfinity:
0.62 /testbed/sympy/core/add.py(254):         if order_factors:
0.62 /testbed/sympy/core/add.py(273):         _addsort(newseq)
0.62 /testbed/sympy/core/add.py(21):     args.sort(key=_args_sortkey)
0.62 /testbed/sympy/core/add.py(276):         if coeff is not S.Zero:
0.62 /testbed/sympy/core/add.py(277):             newseq.insert(0, coeff)
0.62 /testbed/sympy/core/add.py(280):         if noncommutative:
0.62 /testbed/sympy/core/add.py(283):             return newseq, [], None
0.62 /testbed/sympy/core/add.py(363):         if e.is_Rational and self.is_number:
0.62 /testbed/sympy/core/add.py(364):             from sympy.core.evalf import pure_complex
0.62 /testbed/sympy/core/add.py(365):             from sympy.core.mul import _unevaluated_Mul
0.62 /testbed/sympy/core/add.py(366):             from sympy.core.exprtools import factor_terms
0.62 /testbed/sympy/core/add.py(367):             from sympy.core.function import expand_multinomial
0.62 /testbed/sympy/core/add.py(368):             from sympy.functions.elementary.complexes import sign
0.62 /testbed/sympy/core/add.py(369):             from sympy.functions.elementary.miscellaneous import sqrt
0.62 /testbed/sympy/core/add.py(370):             ri = pure_complex(self)
0.62 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.62 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.62 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.62 /testbed/sympy/core/add.py(371):             if ri:
0.62 /testbed/sympy/core/add.py(372):                 r, i = ri
0.62 /testbed/sympy/core/add.py(373):                 if e.q == 2:
0.62 /testbed/sympy/core/add.py(381):                 elif e == -1:
0.62 /testbed/sympy/core/add.py(96):         from sympy.calculus.util import AccumBounds
0.62 /testbed/sympy/core/add.py(97):         from sympy.matrices.expressions import MatrixExpr
0.62 /testbed/sympy/core/add.py(98):         from sympy.tensor.tensor import TensExpr
0.62 /testbed/sympy/core/add.py(99):         rv = None
0.62 /testbed/sympy/core/add.py(100):         if len(seq) == 2:
0.62 /testbed/sympy/core/add.py(101):             a, b = seq
0.62 /testbed/sympy/core/add.py(102):             if b.is_Rational:
0.62 /testbed/sympy/core/add.py(104):             if a.is_Rational:
0.62 /testbed/sympy/core/add.py(107):             if rv:
0.62 /testbed/sympy/core/add.py(112):         terms = {}      # term -> coeff
0.62 /testbed/sympy/core/add.py(115):         coeff = S.Zero  # coefficient (Number or zoo) to always be in slot 0
0.62 /testbed/sympy/core/add.py(117):         order_factors = []
0.62 /testbed/sympy/core/add.py(119):         for o in seq:
0.62 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.62 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.62 /testbed/sympy/core/add.py(146):             elif isinstance(o, AccumBounds):
0.62 /testbed/sympy/core/add.py(150):             elif isinstance(o, MatrixExpr):
0.62 /testbed/sympy/core/add.py(155):             elif isinstance(o, TensExpr):
0.62 /testbed/sympy/core/add.py(159):             elif o is S.ComplexInfinity:
0.62 /testbed/sympy/core/add.py(167):             elif o.is_Add:
0.62 /testbed/sympy/core/add.py(173):             elif o.is_Mul:
0.62 /testbed/sympy/core/add.py(177):             elif o.is_Pow:
0.62 /testbed/sympy/core/add.py(178):                 b, e = o.as_base_exp()
0.62 /testbed/sympy/core/add.py(179):                 if b.is_Number and (e.is_Integer or
0.62 /testbed/sympy/core/add.py(183):                 c, s = S.One, o
0.62 /testbed/sympy/core/add.py(197):             if s in terms:
0.62 /testbed/sympy/core/add.py(203):                 terms[s] = c
0.62 /testbed/sympy/core/add.py(119):         for o in seq:
0.62 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.62 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.62 /testbed/sympy/core/add.py(146):             elif isinstance(o, AccumBounds):
0.62 /testbed/sympy/core/add.py(150):             elif isinstance(o, MatrixExpr):
0.62 /testbed/sympy/core/add.py(155):             elif isinstance(o, TensExpr):
0.62 /testbed/sympy/core/add.py(159):             elif o is S.ComplexInfinity:
0.62 /testbed/sympy/core/add.py(167):             elif o.is_Add:
0.62 /testbed/sympy/core/add.py(173):             elif o.is_Mul:
0.62 /testbed/sympy/core/add.py(174):                 c, s = o.as_coeff_Mul()
0.62 /testbed/sympy/core/add.py(197):             if s in terms:
0.62 /testbed/sympy/core/add.py(203):                 terms[s] = c
0.62 /testbed/sympy/core/add.py(119):         for o in seq:
0.62 /testbed/sympy/core/add.py(207):         newseq = []
0.62 /testbed/sympy/core/add.py(208):         noncommutative = False
0.62 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
0.62 /testbed/sympy/core/add.py(211):             if c is S.Zero:
0.62 /testbed/sympy/core/add.py(214):             elif c is S.One:
0.62 /testbed/sympy/core/add.py(215):                 newseq.append(s)
0.62 /testbed/sympy/core/add.py(230):             noncommutative = noncommutative or not s.is_commutative
0.62 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
0.62 /testbed/sympy/core/add.py(211):             if c is S.Zero:
0.62 /testbed/sympy/core/add.py(214):             elif c is S.One:
0.62 /testbed/sympy/core/add.py(218):                 if s.is_Mul:
0.62 /testbed/sympy/core/add.py(223):                 elif s.is_Add:
0.62 /testbed/sympy/core/add.py(228):                     newseq.append(Mul(c, s))
0.62 /testbed/sympy/core/add.py(230):             noncommutative = noncommutative or not s.is_commutative
0.62 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
0.62 /testbed/sympy/core/add.py(233):         if coeff is S.Infinity:
0.62 /testbed/sympy/core/add.py(237):         elif coeff is S.NegativeInfinity:
0.62 /testbed/sympy/core/add.py(241):         if coeff is S.ComplexInfinity:
0.62 /testbed/sympy/core/add.py(254):         if order_factors:
0.62 /testbed/sympy/core/add.py(273):         _addsort(newseq)
0.62 /testbed/sympy/core/add.py(21):     args.sort(key=_args_sortkey)
0.62 /testbed/sympy/core/add.py(276):         if coeff is not S.Zero:
0.62 /testbed/sympy/core/add.py(280):         if noncommutative:
0.62 /testbed/sympy/core/add.py(283):             return newseq, [], None
0.62 /testbed/sympy/core/add.py(492):     _eval_is_complex = lambda self: _fuzzy_group(
0.62 /testbed/sympy/core/add.py(493):         (a.is_complex for a in self.args), quick_exit=True)
0.62 /testbed/sympy/core/add.py(492):     _eval_is_complex = lambda self: _fuzzy_group(
0.62 /testbed/sympy/core/add.py(493):         (a.is_complex for a in self.args), quick_exit=True)
0.62 /testbed/sympy/core/add.py(493):         (a.is_complex for a in self.args), quick_exit=True)
0.62 /testbed/sympy/core/add.py(493):         (a.is_complex for a in self.args), quick_exit=True)
0.62 /testbed/sympy/core/add.py(589):         from sympy.core.exprtools import _monotonic_sign
0.62 /testbed/sympy/core/add.py(590):         if self.is_number:
0.62 /testbed/sympy/core/add.py(591):             return super(Add, self)._eval_is_positive()
0.62 /testbed/sympy/core/add.py(96):         from sympy.calculus.util import AccumBounds
0.62 /testbed/sympy/core/add.py(97):         from sympy.matrices.expressions import MatrixExpr
0.62 /testbed/sympy/core/add.py(98):         from sympy.tensor.tensor import TensExpr
0.62 /testbed/sympy/core/add.py(99):         rv = None
0.62 /testbed/sympy/core/add.py(100):         if len(seq) == 2:
0.62 /testbed/sympy/core/add.py(101):             a, b = seq
0.62 /testbed/sympy/core/add.py(102):             if b.is_Rational:
0.62 /testbed/sympy/core/add.py(104):             if a.is_Rational:
0.62 /testbed/sympy/core/add.py(107):             if rv:
0.62 /testbed/sympy/core/add.py(112):         terms = {}      # term -> coeff
0.62 /testbed/sympy/core/add.py(115):         coeff = S.Zero  # coefficient (Number or zoo) to always be in slot 0
0.62 /testbed/sympy/core/add.py(117):         order_factors = []
0.62 /testbed/sympy/core/add.py(119):         for o in seq:
0.62 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.62 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.62 /testbed/sympy/core/add.py(146):             elif isinstance(o, AccumBounds):
0.62 /testbed/sympy/core/add.py(150):             elif isinstance(o, MatrixExpr):
0.62 /testbed/sympy/core/add.py(155):             elif isinstance(o, TensExpr):
0.62 /testbed/sympy/core/add.py(159):             elif o is S.ComplexInfinity:
0.62 /testbed/sympy/core/add.py(167):             elif o.is_Add:
0.62 /testbed/sympy/core/add.py(173):             elif o.is_Mul:
0.62 /testbed/sympy/core/add.py(177):             elif o.is_Pow:
0.62 /testbed/sympy/core/add.py(178):                 b, e = o.as_base_exp()
0.62 /testbed/sympy/core/add.py(179):                 if b.is_Number and (e.is_Integer or
0.62 /testbed/sympy/core/add.py(183):                 c, s = S.One, o
0.62 /testbed/sympy/core/add.py(197):             if s in terms:
0.62 /testbed/sympy/core/add.py(203):                 terms[s] = c
0.62 /testbed/sympy/core/add.py(119):         for o in seq:
0.62 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.62 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.62 /testbed/sympy/core/add.py(146):             elif isinstance(o, AccumBounds):
0.62 /testbed/sympy/core/add.py(150):             elif isinstance(o, MatrixExpr):
0.62 /testbed/sympy/core/add.py(155):             elif isinstance(o, TensExpr):
0.62 /testbed/sympy/core/add.py(159):             elif o is S.ComplexInfinity:
0.62 /testbed/sympy/core/add.py(167):             elif o.is_Add:
0.62 /testbed/sympy/core/add.py(173):             elif o.is_Mul:
0.62 /testbed/sympy/core/add.py(174):                 c, s = o.as_coeff_Mul()
0.62 /testbed/sympy/core/add.py(197):             if s in terms:
0.62 /testbed/sympy/core/add.py(203):                 terms[s] = c
0.62 /testbed/sympy/core/add.py(119):         for o in seq:
0.62 /testbed/sympy/core/add.py(207):         newseq = []
0.62 /testbed/sympy/core/add.py(208):         noncommutative = False
0.62 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
0.62 /testbed/sympy/core/add.py(211):             if c is S.Zero:
0.62 /testbed/sympy/core/add.py(214):             elif c is S.One:
0.62 /testbed/sympy/core/add.py(215):                 newseq.append(s)
0.62 /testbed/sympy/core/add.py(230):             noncommutative = noncommutative or not s.is_commutative
0.62 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
0.62 /testbed/sympy/core/add.py(211):             if c is S.Zero:
0.62 /testbed/sympy/core/add.py(214):             elif c is S.One:
0.62 /testbed/sympy/core/add.py(218):                 if s.is_Mul:
0.62 /testbed/sympy/core/add.py(223):                 elif s.is_Add:
0.62 /testbed/sympy/core/add.py(228):                     newseq.append(Mul(c, s))
0.62 /testbed/sympy/core/add.py(230):             noncommutative = noncommutative or not s.is_commutative
0.62 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
0.62 /testbed/sympy/core/add.py(233):         if coeff is S.Infinity:
0.62 /testbed/sympy/core/add.py(237):         elif coeff is S.NegativeInfinity:
0.62 /testbed/sympy/core/add.py(241):         if coeff is S.ComplexInfinity:
0.62 /testbed/sympy/core/add.py(254):         if order_factors:
0.62 /testbed/sympy/core/add.py(273):         _addsort(newseq)
0.62 /testbed/sympy/core/add.py(21):     args.sort(key=_args_sortkey)
0.62 /testbed/sympy/core/add.py(276):         if coeff is not S.Zero:
0.62 /testbed/sympy/core/add.py(280):         if noncommutative:
0.62 /testbed/sympy/core/add.py(283):             return newseq, [], None
0.62 /testbed/sympy/core/add.py(53):     args = list(args)
0.62 /testbed/sympy/core/add.py(54):     newargs = []
0.62 /testbed/sympy/core/add.py(55):     co = S.Zero
0.62 /testbed/sympy/core/add.py(56):     while args:
0.62 /testbed/sympy/core/add.py(66):     _addsort(newargs)
0.62 /testbed/sympy/core/add.py(21):     args.sort(key=_args_sortkey)
0.62 /testbed/sympy/core/add.py(67):     if co:
0.62 /testbed/sympy/core/add.py(69):     return Add._from_args(newargs)
0.62 /testbed/sympy/core/add.py(96):         from sympy.calculus.util import AccumBounds
0.62 /testbed/sympy/core/add.py(97):         from sympy.matrices.expressions import MatrixExpr
0.62 /testbed/sympy/core/add.py(98):         from sympy.tensor.tensor import TensExpr
0.62 /testbed/sympy/core/add.py(99):         rv = None
0.62 /testbed/sympy/core/add.py(100):         if len(seq) == 2:
0.62 /testbed/sympy/core/add.py(101):             a, b = seq
0.62 /testbed/sympy/core/add.py(102):             if b.is_Rational:
0.62 /testbed/sympy/core/add.py(104):             if a.is_Rational:
0.62 /testbed/sympy/core/add.py(105):                 if b.is_Mul:
0.62 /testbed/sympy/core/add.py(107):             if rv:
0.62 /testbed/sympy/core/add.py(112):         terms = {}      # term -> coeff
0.62 /testbed/sympy/core/add.py(115):         coeff = S.Zero  # coefficient (Number or zoo) to always be in slot 0
0.62 /testbed/sympy/core/add.py(117):         order_factors = []
0.62 /testbed/sympy/core/add.py(119):         for o in seq:
0.62 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.62 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.62 /testbed/sympy/core/add.py(135):                 if (o is S.NaN or coeff is S.ComplexInfinity and
0.62 /testbed/sympy/core/add.py(139):                 if coeff.is_Number:
0.62 /testbed/sympy/core/add.py(140):                     coeff += o
0.62 /testbed/sympy/core/add.py(141):                     if coeff is S.NaN:
0.62 /testbed/sympy/core/add.py(119):         for o in seq:
0.62 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.62 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.62 /testbed/sympy/core/add.py(146):             elif isinstance(o, AccumBounds):
0.62 /testbed/sympy/core/add.py(150):             elif isinstance(o, MatrixExpr):
0.62 /testbed/sympy/core/add.py(155):             elif isinstance(o, TensExpr):
0.62 /testbed/sympy/core/add.py(159):             elif o is S.ComplexInfinity:
0.62 /testbed/sympy/core/add.py(167):             elif o.is_Add:
0.62 /testbed/sympy/core/add.py(173):             elif o.is_Mul:
0.62 /testbed/sympy/core/add.py(177):             elif o.is_Pow:
0.62 /testbed/sympy/core/add.py(187):                 c = S.One
0.62 /testbed/sympy/core/add.py(188):                 s = o
0.62 /testbed/sympy/core/add.py(197):             if s in terms:
0.62 /testbed/sympy/core/add.py(203):                 terms[s] = c
0.62 /testbed/sympy/core/add.py(119):         for o in seq:
0.62 /testbed/sympy/core/add.py(207):         newseq = []
0.62 /testbed/sympy/core/add.py(208):         noncommutative = False
0.62 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
0.62 /testbed/sympy/core/add.py(211):             if c is S.Zero:
0.62 /testbed/sympy/core/add.py(214):             elif c is S.One:
0.62 /testbed/sympy/core/add.py(215):                 newseq.append(s)
0.62 /testbed/sympy/core/add.py(230):             noncommutative = noncommutative or not s.is_commutative
0.62 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
0.62 /testbed/sympy/core/add.py(233):         if coeff is S.Infinity:
0.62 /testbed/sympy/core/add.py(237):         elif coeff is S.NegativeInfinity:
0.62 /testbed/sympy/core/add.py(241):         if coeff is S.ComplexInfinity:
0.62 /testbed/sympy/core/add.py(254):         if order_factors:
0.62 /testbed/sympy/core/add.py(273):         _addsort(newseq)
0.62 /testbed/sympy/core/add.py(21):     args.sort(key=_args_sortkey)
0.62 /testbed/sympy/core/add.py(276):         if coeff is not S.Zero:
0.62 /testbed/sympy/core/add.py(277):             newseq.insert(0, coeff)
0.62 /testbed/sympy/core/add.py(280):         if noncommutative:
0.62 /testbed/sympy/core/add.py(283):             return newseq, [], None
0.62 /testbed/sympy/core/add.py(53):     args = list(args)
0.62 /testbed/sympy/core/add.py(54):     newargs = []
0.62 /testbed/sympy/core/add.py(55):     co = S.Zero
0.62 /testbed/sympy/core/add.py(56):     while args:
0.62 /testbed/sympy/core/add.py(66):     _addsort(newargs)
0.62 /testbed/sympy/core/add.py(21):     args.sort(key=_args_sortkey)
0.62 /testbed/sympy/core/add.py(67):     if co:
0.62 /testbed/sympy/core/add.py(69):     return Add._from_args(newargs)
0.62 /testbed/sympy/core/add.py(96):         from sympy.calculus.util import AccumBounds
0.62 /testbed/sympy/core/add.py(97):         from sympy.matrices.expressions import MatrixExpr
0.62 /testbed/sympy/core/add.py(98):         from sympy.tensor.tensor import TensExpr
0.62 /testbed/sympy/core/add.py(99):         rv = None
0.62 /testbed/sympy/core/add.py(100):         if len(seq) == 2:
0.62 /testbed/sympy/core/add.py(101):             a, b = seq
0.62 /testbed/sympy/core/add.py(102):             if b.is_Rational:
0.62 /testbed/sympy/core/add.py(104):             if a.is_Rational:
0.62 /testbed/sympy/core/add.py(107):             if rv:
0.62 /testbed/sympy/core/add.py(112):         terms = {}      # term -> coeff
0.62 /testbed/sympy/core/add.py(115):         coeff = S.Zero  # coefficient (Number or zoo) to always be in slot 0
0.62 /testbed/sympy/core/add.py(117):         order_factors = []
0.62 /testbed/sympy/core/add.py(119):         for o in seq:
0.62 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.62 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.62 /testbed/sympy/core/add.py(135):                 if (o is S.NaN or coeff is S.ComplexInfinity and
0.62 /testbed/sympy/core/add.py(139):                 if coeff.is_Number:
0.62 /testbed/sympy/core/add.py(140):                     coeff += o
0.62 /testbed/sympy/core/add.py(141):                     if coeff is S.NaN:
0.62 /testbed/sympy/core/add.py(119):         for o in seq:
0.62 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.62 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.62 /testbed/sympy/core/add.py(146):             elif isinstance(o, AccumBounds):
0.62 /testbed/sympy/core/add.py(150):             elif isinstance(o, MatrixExpr):
0.62 /testbed/sympy/core/add.py(155):             elif isinstance(o, TensExpr):
0.62 /testbed/sympy/core/add.py(159):             elif o is S.ComplexInfinity:
0.62 /testbed/sympy/core/add.py(167):             elif o.is_Add:
0.62 /testbed/sympy/core/add.py(173):             elif o.is_Mul:
0.62 /testbed/sympy/core/add.py(177):             elif o.is_Pow:
0.62 /testbed/sympy/core/add.py(187):                 c = S.One
0.62 /testbed/sympy/core/add.py(188):                 s = o
0.62 /testbed/sympy/core/add.py(197):             if s in terms:
0.62 /testbed/sympy/core/add.py(203):                 terms[s] = c
0.62 /testbed/sympy/core/add.py(119):         for o in seq:
0.62 /testbed/sympy/core/add.py(207):         newseq = []
0.62 /testbed/sympy/core/add.py(208):         noncommutative = False
0.62 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
0.62 /testbed/sympy/core/add.py(211):             if c is S.Zero:
0.62 /testbed/sympy/core/add.py(214):             elif c is S.One:
0.62 /testbed/sympy/core/add.py(215):                 newseq.append(s)
0.62 /testbed/sympy/core/add.py(230):             noncommutative = noncommutative or not s.is_commutative
0.62 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
0.62 /testbed/sympy/core/add.py(233):         if coeff is S.Infinity:
0.62 /testbed/sympy/core/add.py(237):         elif coeff is S.NegativeInfinity:
0.62 /testbed/sympy/core/add.py(241):         if coeff is S.ComplexInfinity:
0.62 /testbed/sympy/core/add.py(254):         if order_factors:
0.62 /testbed/sympy/core/add.py(273):         _addsort(newseq)
0.62 /testbed/sympy/core/add.py(21):     args.sort(key=_args_sortkey)
0.62 /testbed/sympy/core/add.py(276):         if coeff is not S.Zero:
0.62 /testbed/sympy/core/add.py(277):             newseq.insert(0, coeff)
0.62 /testbed/sympy/core/add.py(280):         if noncommutative:
0.62 /testbed/sympy/core/add.py(283):             return newseq, [], None
0.62 /testbed/sympy/core/add.py(363):         if e.is_Rational and self.is_number:
0.62 /testbed/sympy/core/add.py(364):             from sympy.core.evalf import pure_complex
0.62 /testbed/sympy/core/add.py(365):             from sympy.core.mul import _unevaluated_Mul
0.62 /testbed/sympy/core/add.py(366):             from sympy.core.exprtools import factor_terms
0.62 /testbed/sympy/core/add.py(367):             from sympy.core.function import expand_multinomial
0.62 /testbed/sympy/core/add.py(368):             from sympy.functions.elementary.complexes import sign
0.62 /testbed/sympy/core/add.py(369):             from sympy.functions.elementary.miscellaneous import sqrt
0.62 /testbed/sympy/core/add.py(370):             ri = pure_complex(self)
0.62 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.62 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.62 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.62 /testbed/sympy/core/add.py(371):             if ri:
0.62 /testbed/sympy/core/add.py(372):                 r, i = ri
0.62 /testbed/sympy/core/add.py(373):                 if e.q == 2:
0.62 /testbed/sympy/core/add.py(381):                 elif e == -1:
0.62 /testbed/sympy/core/add.py(96):         from sympy.calculus.util import AccumBounds
0.62 /testbed/sympy/core/add.py(97):         from sympy.matrices.expressions import MatrixExpr
0.62 /testbed/sympy/core/add.py(98):         from sympy.tensor.tensor import TensExpr
0.62 /testbed/sympy/core/add.py(99):         rv = None
0.62 /testbed/sympy/core/add.py(100):         if len(seq) == 2:
0.62 /testbed/sympy/core/add.py(101):             a, b = seq
0.62 /testbed/sympy/core/add.py(102):             if b.is_Rational:
0.62 /testbed/sympy/core/add.py(104):             if a.is_Rational:
0.62 /testbed/sympy/core/add.py(107):             if rv:
0.62 /testbed/sympy/core/add.py(112):         terms = {}      # term -> coeff
0.62 /testbed/sympy/core/add.py(115):         coeff = S.Zero  # coefficient (Number or zoo) to always be in slot 0
0.62 /testbed/sympy/core/add.py(117):         order_factors = []
0.62 /testbed/sympy/core/add.py(119):         for o in seq:
0.62 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.62 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.62 /testbed/sympy/core/add.py(146):             elif isinstance(o, AccumBounds):
0.62 /testbed/sympy/core/add.py(150):             elif isinstance(o, MatrixExpr):
0.62 /testbed/sympy/core/add.py(155):             elif isinstance(o, TensExpr):
0.62 /testbed/sympy/core/add.py(159):             elif o is S.ComplexInfinity:
0.62 /testbed/sympy/core/add.py(167):             elif o.is_Add:
0.62 /testbed/sympy/core/add.py(173):             elif o.is_Mul:
0.62 /testbed/sympy/core/add.py(177):             elif o.is_Pow:
0.62 /testbed/sympy/core/add.py(178):                 b, e = o.as_base_exp()
0.62 /testbed/sympy/core/add.py(179):                 if b.is_Number and (e.is_Integer or
0.62 /testbed/sympy/core/add.py(183):                 c, s = S.One, o
0.62 /testbed/sympy/core/add.py(197):             if s in terms:
0.62 /testbed/sympy/core/add.py(203):                 terms[s] = c
0.62 /testbed/sympy/core/add.py(119):         for o in seq:
0.62 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.62 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.62 /testbed/sympy/core/add.py(146):             elif isinstance(o, AccumBounds):
0.62 /testbed/sympy/core/add.py(150):             elif isinstance(o, MatrixExpr):
0.62 /testbed/sympy/core/add.py(155):             elif isinstance(o, TensExpr):
0.62 /testbed/sympy/core/add.py(159):             elif o is S.ComplexInfinity:
0.62 /testbed/sympy/core/add.py(167):             elif o.is_Add:
0.62 /testbed/sympy/core/add.py(173):             elif o.is_Mul:
0.62 /testbed/sympy/core/add.py(174):                 c, s = o.as_coeff_Mul()
0.62 /testbed/sympy/core/add.py(197):             if s in terms:
0.62 /testbed/sympy/core/add.py(203):                 terms[s] = c
0.62 /testbed/sympy/core/add.py(119):         for o in seq:
0.62 /testbed/sympy/core/add.py(207):         newseq = []
0.62 /testbed/sympy/core/add.py(208):         noncommutative = False
0.62 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
0.62 /testbed/sympy/core/add.py(211):             if c is S.Zero:
0.62 /testbed/sympy/core/add.py(214):             elif c is S.One:
0.62 /testbed/sympy/core/add.py(215):                 newseq.append(s)
0.62 /testbed/sympy/core/add.py(230):             noncommutative = noncommutative or not s.is_commutative
0.62 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
0.62 /testbed/sympy/core/add.py(211):             if c is S.Zero:
0.62 /testbed/sympy/core/add.py(214):             elif c is S.One:
0.62 /testbed/sympy/core/add.py(218):                 if s.is_Mul:
0.62 /testbed/sympy/core/add.py(223):                 elif s.is_Add:
0.62 /testbed/sympy/core/add.py(228):                     newseq.append(Mul(c, s))
0.62 /testbed/sympy/core/add.py(230):             noncommutative = noncommutative or not s.is_commutative
0.62 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
0.62 /testbed/sympy/core/add.py(233):         if coeff is S.Infinity:
0.62 /testbed/sympy/core/add.py(237):         elif coeff is S.NegativeInfinity:
0.62 /testbed/sympy/core/add.py(241):         if coeff is S.ComplexInfinity:
0.62 /testbed/sympy/core/add.py(254):         if order_factors:
0.62 /testbed/sympy/core/add.py(273):         _addsort(newseq)
0.62 /testbed/sympy/core/add.py(21):     args.sort(key=_args_sortkey)
0.62 /testbed/sympy/core/add.py(276):         if coeff is not S.Zero:
0.62 /testbed/sympy/core/add.py(280):         if noncommutative:
0.62 /testbed/sympy/core/add.py(283):             return newseq, [], None
0.62 /testbed/sympy/core/add.py(643):         from sympy.core.exprtools import _monotonic_sign
0.62 /testbed/sympy/core/add.py(644):         if not self.is_number:
0.62 /testbed/sympy/core/add.py(498):     _eval_is_hermitian = lambda self: _fuzzy_group(
0.62 /testbed/sympy/core/add.py(499):         (a.is_hermitian for a in self.args), quick_exit=True)
0.62 /testbed/sympy/core/add.py(498):     _eval_is_hermitian = lambda self: _fuzzy_group(
0.62 /testbed/sympy/core/add.py(499):         (a.is_hermitian for a in self.args), quick_exit=True)
0.63 /testbed/sympy/core/add.py(500):     _eval_is_integer = lambda self: _fuzzy_group(
0.63 /testbed/sympy/core/add.py(501):         (a.is_integer for a in self.args), quick_exit=True)
0.63 /testbed/sympy/core/add.py(500):     _eval_is_integer = lambda self: _fuzzy_group(
0.63 /testbed/sympy/core/add.py(501):         (a.is_integer for a in self.args), quick_exit=True)
0.63 /testbed/sympy/core/add.py(501):         (a.is_integer for a in self.args), quick_exit=True)
0.63 /testbed/sympy/core/add.py(504):     _eval_is_algebraic = lambda self: _fuzzy_group(
0.63 /testbed/sympy/core/add.py(505):         (a.is_algebraic for a in self.args), quick_exit=True)
0.63 /testbed/sympy/core/add.py(504):     _eval_is_algebraic = lambda self: _fuzzy_group(
0.63 /testbed/sympy/core/add.py(505):         (a.is_algebraic for a in self.args), quick_exit=True)
0.63 /testbed/sympy/core/add.py(96):         from sympy.calculus.util import AccumBounds
0.63 /testbed/sympy/core/add.py(97):         from sympy.matrices.expressions import MatrixExpr
0.63 /testbed/sympy/core/add.py(98):         from sympy.tensor.tensor import TensExpr
0.63 /testbed/sympy/core/add.py(99):         rv = None
0.63 /testbed/sympy/core/add.py(100):         if len(seq) == 2:
0.63 /testbed/sympy/core/add.py(101):             a, b = seq
0.63 /testbed/sympy/core/add.py(102):             if b.is_Rational:
0.63 /testbed/sympy/core/add.py(103):                 a, b = b, a
0.63 /testbed/sympy/core/add.py(104):             if a.is_Rational:
0.63 /testbed/sympy/core/add.py(105):                 if b.is_Mul:
0.63 /testbed/sympy/core/add.py(107):             if rv:
0.63 /testbed/sympy/core/add.py(112):         terms = {}      # term -> coeff
0.63 /testbed/sympy/core/add.py(115):         coeff = S.Zero  # coefficient (Number or zoo) to always be in slot 0
0.63 /testbed/sympy/core/add.py(117):         order_factors = []
0.63 /testbed/sympy/core/add.py(119):         for o in seq:
0.63 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.63 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.63 /testbed/sympy/core/add.py(146):             elif isinstance(o, AccumBounds):
0.63 /testbed/sympy/core/add.py(150):             elif isinstance(o, MatrixExpr):
0.63 /testbed/sympy/core/add.py(155):             elif isinstance(o, TensExpr):
0.63 /testbed/sympy/core/add.py(159):             elif o is S.ComplexInfinity:
0.63 /testbed/sympy/core/add.py(167):             elif o.is_Add:
0.63 /testbed/sympy/core/add.py(169):                 seq.extend(o.args)  # TODO zerocopy?
0.63 /testbed/sympy/core/add.py(170):                 continue
0.63 /testbed/sympy/core/add.py(119):         for o in seq:
0.63 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.63 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.63 /testbed/sympy/core/add.py(135):                 if (o is S.NaN or coeff is S.ComplexInfinity and
0.63 /testbed/sympy/core/add.py(139):                 if coeff.is_Number:
0.63 /testbed/sympy/core/add.py(140):                     coeff += o
0.63 /testbed/sympy/core/add.py(141):                     if coeff is S.NaN:
0.63 /testbed/sympy/core/add.py(119):         for o in seq:
0.63 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.63 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.63 /testbed/sympy/core/add.py(135):                 if (o is S.NaN or coeff is S.ComplexInfinity and
0.63 /testbed/sympy/core/add.py(139):                 if coeff.is_Number:
0.63 /testbed/sympy/core/add.py(140):                     coeff += o
0.63 /testbed/sympy/core/add.py(141):                     if coeff is S.NaN:
0.63 /testbed/sympy/core/add.py(119):         for o in seq:
0.63 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.63 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.63 /testbed/sympy/core/add.py(146):             elif isinstance(o, AccumBounds):
0.63 /testbed/sympy/core/add.py(150):             elif isinstance(o, MatrixExpr):
0.63 /testbed/sympy/core/add.py(155):             elif isinstance(o, TensExpr):
0.63 /testbed/sympy/core/add.py(159):             elif o is S.ComplexInfinity:
0.63 /testbed/sympy/core/add.py(167):             elif o.is_Add:
0.63 /testbed/sympy/core/add.py(173):             elif o.is_Mul:
0.63 /testbed/sympy/core/add.py(177):             elif o.is_Pow:
0.63 /testbed/sympy/core/add.py(187):                 c = S.One
0.63 /testbed/sympy/core/add.py(188):                 s = o
0.63 /testbed/sympy/core/add.py(197):             if s in terms:
0.63 /testbed/sympy/core/add.py(203):                 terms[s] = c
0.63 /testbed/sympy/core/add.py(119):         for o in seq:
0.63 /testbed/sympy/core/add.py(207):         newseq = []
0.63 /testbed/sympy/core/add.py(208):         noncommutative = False
0.63 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
0.63 /testbed/sympy/core/add.py(211):             if c is S.Zero:
0.63 /testbed/sympy/core/add.py(214):             elif c is S.One:
0.63 /testbed/sympy/core/add.py(215):                 newseq.append(s)
0.63 /testbed/sympy/core/add.py(230):             noncommutative = noncommutative or not s.is_commutative
0.63 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
0.63 /testbed/sympy/core/add.py(233):         if coeff is S.Infinity:
0.63 /testbed/sympy/core/add.py(237):         elif coeff is S.NegativeInfinity:
0.63 /testbed/sympy/core/add.py(241):         if coeff is S.ComplexInfinity:
0.63 /testbed/sympy/core/add.py(254):         if order_factors:
0.63 /testbed/sympy/core/add.py(273):         _addsort(newseq)
0.63 /testbed/sympy/core/add.py(21):     args.sort(key=_args_sortkey)
0.63 /testbed/sympy/core/add.py(276):         if coeff is not S.Zero:
0.63 /testbed/sympy/core/add.py(280):         if noncommutative:
0.63 /testbed/sympy/core/add.py(283):             return newseq, [], None
0.63 /testbed/sympy/core/add.py(504):     _eval_is_algebraic = lambda self: _fuzzy_group(
0.63 /testbed/sympy/core/add.py(505):         (a.is_algebraic for a in self.args), quick_exit=True)
0.63 /testbed/sympy/core/add.py(504):     _eval_is_algebraic = lambda self: _fuzzy_group(
0.63 /testbed/sympy/core/add.py(505):         (a.is_algebraic for a in self.args), quick_exit=True)
0.63 /testbed/sympy/core/add.py(505):         (a.is_algebraic for a in self.args), quick_exit=True)
0.63 /testbed/sympy/core/add.py(505):         (a.is_algebraic for a in self.args), quick_exit=True)
0.63 /testbed/sympy/core/add.py(505):         (a.is_algebraic for a in self.args), quick_exit=True)
0.63 /testbed/sympy/core/add.py(505):         (a.is_algebraic for a in self.args), quick_exit=True)
0.63 /testbed/sympy/core/add.py(510):         nz = []
0.63 /testbed/sympy/core/add.py(511):         im_I = []
0.63 /testbed/sympy/core/add.py(512):         for a in self.args:
0.63 /testbed/sympy/core/add.py(513):             if a.is_real:
0.63 /testbed/sympy/core/add.py(520):             elif a.is_imaginary:
0.63 /testbed/sympy/core/add.py(521):                 im_I.append(a*S.ImaginaryUnit)
0.63 /testbed/sympy/core/add.py(363):         if e.is_Rational and self.is_number:
0.63 /testbed/sympy/core/add.py(364):             from sympy.core.evalf import pure_complex
0.63 /testbed/sympy/core/add.py(365):             from sympy.core.mul import _unevaluated_Mul
0.63 /testbed/sympy/core/add.py(366):             from sympy.core.exprtools import factor_terms
0.63 /testbed/sympy/core/add.py(367):             from sympy.core.function import expand_multinomial
0.63 /testbed/sympy/core/add.py(368):             from sympy.functions.elementary.complexes import sign
0.63 /testbed/sympy/core/add.py(369):             from sympy.functions.elementary.miscellaneous import sqrt
0.63 /testbed/sympy/core/add.py(370):             ri = pure_complex(self)
0.63 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.63 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.63 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.63 /testbed/sympy/core/add.py(371):             if ri:
0.63 /testbed/sympy/core/add.py(372):                 r, i = ri
0.63 /testbed/sympy/core/add.py(373):                 if e.q == 2:
0.63 /testbed/sympy/core/add.py(381):                 elif e == -1:
0.63 /testbed/sympy/core/add.py(512):         for a in self.args:
0.63 /testbed/sympy/core/add.py(513):             if a.is_real:
0.63 /testbed/sympy/core/add.py(520):             elif a.is_imaginary:
0.63 /testbed/sympy/core/add.py(521):                 im_I.append(a*S.ImaginaryUnit)
0.63 /testbed/sympy/core/add.py(512):         for a in self.args:
0.63 /testbed/sympy/core/add.py(526):         b = self.func(*nz)
0.63 /testbed/sympy/core/add.py(527):         if b.is_zero:
0.63 /testbed/sympy/core/add.py(528):             return fuzzy_not(self.func(*im_I).is_zero)
0.63 /testbed/sympy/core/add.py(96):         from sympy.calculus.util import AccumBounds
0.63 /testbed/sympy/core/add.py(97):         from sympy.matrices.expressions import MatrixExpr
0.63 /testbed/sympy/core/add.py(98):         from sympy.tensor.tensor import TensExpr
0.63 /testbed/sympy/core/add.py(99):         rv = None
0.63 /testbed/sympy/core/add.py(100):         if len(seq) == 2:
0.63 /testbed/sympy/core/add.py(101):             a, b = seq
0.63 /testbed/sympy/core/add.py(102):             if b.is_Rational:
0.63 /testbed/sympy/core/add.py(103):                 a, b = b, a
0.63 /testbed/sympy/core/add.py(104):             if a.is_Rational:
0.63 /testbed/sympy/core/add.py(105):                 if b.is_Mul:
0.63 /testbed/sympy/core/add.py(106):                     rv = [a, b], [], None
0.63 /testbed/sympy/core/add.py(107):             if rv:
0.63 /testbed/sympy/core/add.py(108):                 if all(s.is_commutative for s in rv[0]):
0.63 /testbed/sympy/core/add.py(108):                 if all(s.is_commutative for s in rv[0]):
0.63 /testbed/sympy/core/add.py(108):                 if all(s.is_commutative for s in rv[0]):
0.63 /testbed/sympy/core/add.py(108):                 if all(s.is_commutative for s in rv[0]):
0.63 /testbed/sympy/core/add.py(109):                     return rv
0.63 /testbed/sympy/core/add.py(533):         if self.is_commutative is False:
0.63 /testbed/sympy/core/add.py(537):         nz = []
0.63 /testbed/sympy/core/add.py(538):         z = 0
0.63 /testbed/sympy/core/add.py(539):         im_or_z = False
0.63 /testbed/sympy/core/add.py(540):         im = False
0.63 /testbed/sympy/core/add.py(541):         for a in self.args:
0.63 /testbed/sympy/core/add.py(542):             if a.is_real:
0.63 /testbed/sympy/core/add.py(543):                 if a.is_zero:
0.63 /testbed/sympy/core/add.py(545):                 elif a.is_zero is False:
0.63 /testbed/sympy/core/add.py(546):                     nz.append(a)
0.63 /testbed/sympy/core/add.py(541):         for a in self.args:
0.63 /testbed/sympy/core/add.py(542):             if a.is_real:
0.63 /testbed/sympy/core/add.py(983):         con, prim = self.func(*[_keep_coeff(*a.as_content_primitive(
0.63 /testbed/sympy/core/add.py(984):             radical=radical, clear=clear)) for a in self.args]).primitive()
0.63 /testbed/sympy/core/add.py(983):         con, prim = self.func(*[_keep_coeff(*a.as_content_primitive(
0.63 /testbed/sympy/core/add.py(983):         con, prim = self.func(*[_keep_coeff(*a.as_content_primitive(
0.63 /testbed/sympy/core/add.py(984):             radical=radical, clear=clear)) for a in self.args]).primitive()
0.63 /testbed/sympy/core/add.py(983):         con, prim = self.func(*[_keep_coeff(*a.as_content_primitive(
0.63 /testbed/sympy/core/add.py(984):             radical=radical, clear=clear)) for a in self.args]).primitive()
0.63 /testbed/sympy/core/add.py(983):         con, prim = self.func(*[_keep_coeff(*a.as_content_primitive(
0.63 /testbed/sympy/core/add.py(983):         con, prim = self.func(*[_keep_coeff(*a.as_content_primitive(
0.63 /testbed/sympy/core/add.py(984):             radical=radical, clear=clear)) for a in self.args]).primitive()
0.63 /testbed/sympy/core/add.py(983):         con, prim = self.func(*[_keep_coeff(*a.as_content_primitive(
0.63 /testbed/sympy/core/add.py(984):             radical=radical, clear=clear)) for a in self.args]).primitive()
0.63 /testbed/sympy/core/add.py(983):         con, prim = self.func(*[_keep_coeff(*a.as_content_primitive(
0.63 /testbed/sympy/core/add.py(983):         con, prim = self.func(*[_keep_coeff(*a.as_content_primitive(
0.63 /testbed/sympy/core/add.py(96):         from sympy.calculus.util import AccumBounds
0.63 /testbed/sympy/core/add.py(97):         from sympy.matrices.expressions import MatrixExpr
0.63 /testbed/sympy/core/add.py(98):         from sympy.tensor.tensor import TensExpr
0.63 /testbed/sympy/core/add.py(99):         rv = None
0.63 /testbed/sympy/core/add.py(100):         if len(seq) == 2:
0.63 /testbed/sympy/core/add.py(101):             a, b = seq
0.63 /testbed/sympy/core/add.py(102):             if b.is_Rational:
0.63 /testbed/sympy/core/add.py(104):             if a.is_Rational:
0.63 /testbed/sympy/core/add.py(105):                 if b.is_Mul:
0.63 /testbed/sympy/core/add.py(107):             if rv:
0.63 /testbed/sympy/core/add.py(112):         terms = {}      # term -> coeff
0.63 /testbed/sympy/core/add.py(115):         coeff = S.Zero  # coefficient (Number or zoo) to always be in slot 0
0.63 /testbed/sympy/core/add.py(117):         order_factors = []
0.63 /testbed/sympy/core/add.py(119):         for o in seq:
0.63 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.63 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.63 /testbed/sympy/core/add.py(135):                 if (o is S.NaN or coeff is S.ComplexInfinity and
0.63 /testbed/sympy/core/add.py(139):                 if coeff.is_Number:
0.63 /testbed/sympy/core/add.py(140):                     coeff += o
0.63 /testbed/sympy/core/add.py(141):                     if coeff is S.NaN:
0.63 /testbed/sympy/core/add.py(119):         for o in seq:
0.63 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.63 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.63 /testbed/sympy/core/add.py(146):             elif isinstance(o, AccumBounds):
0.63 /testbed/sympy/core/add.py(150):             elif isinstance(o, MatrixExpr):
0.63 /testbed/sympy/core/add.py(155):             elif isinstance(o, TensExpr):
0.63 /testbed/sympy/core/add.py(159):             elif o is S.ComplexInfinity:
0.63 /testbed/sympy/core/add.py(167):             elif o.is_Add:
0.63 /testbed/sympy/core/add.py(173):             elif o.is_Mul:
0.63 /testbed/sympy/core/add.py(177):             elif o.is_Pow:
0.63 /testbed/sympy/core/add.py(187):                 c = S.One
0.63 /testbed/sympy/core/add.py(188):                 s = o
0.63 /testbed/sympy/core/add.py(197):             if s in terms:
0.63 /testbed/sympy/core/add.py(203):                 terms[s] = c
0.63 /testbed/sympy/core/add.py(119):         for o in seq:
0.63 /testbed/sympy/core/add.py(207):         newseq = []
0.63 /testbed/sympy/core/add.py(208):         noncommutative = False
0.63 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
0.63 /testbed/sympy/core/add.py(211):             if c is S.Zero:
0.63 /testbed/sympy/core/add.py(214):             elif c is S.One:
0.63 /testbed/sympy/core/add.py(215):                 newseq.append(s)
0.63 /testbed/sympy/core/add.py(230):             noncommutative = noncommutative or not s.is_commutative
0.63 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
0.63 /testbed/sympy/core/add.py(233):         if coeff is S.Infinity:
0.63 /testbed/sympy/core/add.py(237):         elif coeff is S.NegativeInfinity:
0.63 /testbed/sympy/core/add.py(241):         if coeff is S.ComplexInfinity:
0.63 /testbed/sympy/core/add.py(254):         if order_factors:
0.63 /testbed/sympy/core/add.py(273):         _addsort(newseq)
0.63 /testbed/sympy/core/add.py(21):     args.sort(key=_args_sortkey)
0.63 /testbed/sympy/core/add.py(276):         if coeff is not S.Zero:
0.63 /testbed/sympy/core/add.py(277):             newseq.insert(0, coeff)
0.63 /testbed/sympy/core/add.py(280):         if noncommutative:
0.63 /testbed/sympy/core/add.py(283):             return newseq, [], None
0.63 /testbed/sympy/core/add.py(918):         terms = []
0.63 /testbed/sympy/core/add.py(919):         inf = False
0.63 /testbed/sympy/core/add.py(920):         for a in self.args:
0.63 /testbed/sympy/core/add.py(921):             c, m = a.as_coeff_Mul()
0.63 /testbed/sympy/core/add.py(922):             if not c.is_Rational:
0.63 /testbed/sympy/core/add.py(925):             inf = inf or m is S.ComplexInfinity
0.63 /testbed/sympy/core/add.py(926):             terms.append((c.p, c.q, m))
0.63 /testbed/sympy/core/add.py(920):         for a in self.args:
0.63 /testbed/sympy/core/add.py(921):             c, m = a.as_coeff_Mul()
0.63 /testbed/sympy/core/add.py(922):             if not c.is_Rational:
0.63 /testbed/sympy/core/add.py(925):             inf = inf or m is S.ComplexInfinity
0.63 /testbed/sympy/core/add.py(926):             terms.append((c.p, c.q, m))
0.63 /testbed/sympy/core/add.py(920):         for a in self.args:
0.63 /testbed/sympy/core/add.py(928):         if not inf:
0.63 /testbed/sympy/core/add.py(929):             ngcd = reduce(igcd, [t[0] for t in terms], 0)
0.63 /testbed/sympy/core/add.py(929):             ngcd = reduce(igcd, [t[0] for t in terms], 0)
0.63 /testbed/sympy/core/add.py(929):             ngcd = reduce(igcd, [t[0] for t in terms], 0)
0.63 /testbed/sympy/core/add.py(929):             ngcd = reduce(igcd, [t[0] for t in terms], 0)
0.63 /testbed/sympy/core/add.py(930):             dlcm = reduce(ilcm, [t[1] for t in terms], 1)
0.63 /testbed/sympy/core/add.py(930):             dlcm = reduce(ilcm, [t[1] for t in terms], 1)
0.63 /testbed/sympy/core/add.py(930):             dlcm = reduce(ilcm, [t[1] for t in terms], 1)
0.63 /testbed/sympy/core/add.py(930):             dlcm = reduce(ilcm, [t[1] for t in terms], 1)
0.63 /testbed/sympy/core/add.py(935):         if ngcd == dlcm == 1:
0.63 /testbed/sympy/core/add.py(936):             return S.One, self
0.63 /testbed/sympy/core/add.py(985):         if not clear and not con.is_Integer and prim.is_Add:
0.63 /testbed/sympy/core/add.py(992):         if radical and prim.is_Add:
0.63 /testbed/sympy/core/add.py(1033):         return con, prim
0.63 /testbed/sympy/core/add.py(96):         from sympy.calculus.util import AccumBounds
0.63 /testbed/sympy/core/add.py(97):         from sympy.matrices.expressions import MatrixExpr
0.63 /testbed/sympy/core/add.py(98):         from sympy.tensor.tensor import TensExpr
0.63 /testbed/sympy/core/add.py(99):         rv = None
0.63 /testbed/sympy/core/add.py(100):         if len(seq) == 2:
0.63 /testbed/sympy/core/add.py(101):             a, b = seq
0.63 /testbed/sympy/core/add.py(102):             if b.is_Rational:
0.63 /testbed/sympy/core/add.py(104):             if a.is_Rational:
0.63 /testbed/sympy/core/add.py(105):                 if b.is_Mul:
0.63 /testbed/sympy/core/add.py(107):             if rv:
0.63 /testbed/sympy/core/add.py(112):         terms = {}      # term -> coeff
0.63 /testbed/sympy/core/add.py(115):         coeff = S.Zero  # coefficient (Number or zoo) to always be in slot 0
0.63 /testbed/sympy/core/add.py(117):         order_factors = []
0.63 /testbed/sympy/core/add.py(119):         for o in seq:
0.63 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.63 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.63 /testbed/sympy/core/add.py(135):                 if (o is S.NaN or coeff is S.ComplexInfinity and
0.63 /testbed/sympy/core/add.py(139):                 if coeff.is_Number:
0.63 /testbed/sympy/core/add.py(140):                     coeff += o
0.63 /testbed/sympy/core/add.py(141):                     if coeff is S.NaN:
0.63 /testbed/sympy/core/add.py(119):         for o in seq:
0.63 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.63 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.63 /testbed/sympy/core/add.py(146):             elif isinstance(o, AccumBounds):
0.63 /testbed/sympy/core/add.py(150):             elif isinstance(o, MatrixExpr):
0.63 /testbed/sympy/core/add.py(155):             elif isinstance(o, TensExpr):
0.63 /testbed/sympy/core/add.py(159):             elif o is S.ComplexInfinity:
0.63 /testbed/sympy/core/add.py(167):             elif o.is_Add:
0.63 /testbed/sympy/core/add.py(173):             elif o.is_Mul:
0.63 /testbed/sympy/core/add.py(177):             elif o.is_Pow:
0.63 /testbed/sympy/core/add.py(187):                 c = S.One
0.63 /testbed/sympy/core/add.py(188):                 s = o
0.63 /testbed/sympy/core/add.py(197):             if s in terms:
0.63 /testbed/sympy/core/add.py(203):                 terms[s] = c
0.63 /testbed/sympy/core/add.py(119):         for o in seq:
0.63 /testbed/sympy/core/add.py(207):         newseq = []
0.63 /testbed/sympy/core/add.py(208):         noncommutative = False
0.63 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
0.63 /testbed/sympy/core/add.py(211):             if c is S.Zero:
0.63 /testbed/sympy/core/add.py(214):             elif c is S.One:
0.63 /testbed/sympy/core/add.py(215):                 newseq.append(s)
0.63 /testbed/sympy/core/add.py(230):             noncommutative = noncommutative or not s.is_commutative
0.63 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
0.63 /testbed/sympy/core/add.py(233):         if coeff is S.Infinity:
0.63 /testbed/sympy/core/add.py(237):         elif coeff is S.NegativeInfinity:
0.63 /testbed/sympy/core/add.py(241):         if coeff is S.ComplexInfinity:
0.63 /testbed/sympy/core/add.py(254):         if order_factors:
0.63 /testbed/sympy/core/add.py(273):         _addsort(newseq)
0.63 /testbed/sympy/core/add.py(21):     args.sort(key=_args_sortkey)
0.63 /testbed/sympy/core/add.py(276):         if coeff is not S.Zero:
0.63 /testbed/sympy/core/add.py(277):             newseq.insert(0, coeff)
0.63 /testbed/sympy/core/add.py(280):         if noncommutative:
0.63 /testbed/sympy/core/add.py(283):             return newseq, [], None
0.63 /testbed/sympy/core/add.py(825):         sargs = self.args
0.63 /testbed/sympy/core/add.py(826):         re_part, im_part = [], []
0.63 /testbed/sympy/core/add.py(827):         for term in sargs:
0.63 /testbed/sympy/core/add.py(828):             re, im = term.as_real_imag(deep=deep)
0.63 /testbed/sympy/core/add.py(829):             re_part.append(re)
0.63 /testbed/sympy/core/add.py(830):             im_part.append(im)
0.63 /testbed/sympy/core/add.py(827):         for term in sargs:
0.63 /testbed/sympy/core/add.py(828):             re, im = term.as_real_imag(deep=deep)
0.63 /testbed/sympy/core/add.py(829):             re_part.append(re)
0.63 /testbed/sympy/core/add.py(830):             im_part.append(im)
0.63 /testbed/sympy/core/add.py(827):         for term in sargs:
0.63 /testbed/sympy/core/add.py(831):         return (self.func(*re_part), self.func(*im_part))
0.63 /testbed/sympy/core/add.py(96):         from sympy.calculus.util import AccumBounds
0.63 /testbed/sympy/core/add.py(97):         from sympy.matrices.expressions import MatrixExpr
0.63 /testbed/sympy/core/add.py(98):         from sympy.tensor.tensor import TensExpr
0.63 /testbed/sympy/core/add.py(99):         rv = None
0.63 /testbed/sympy/core/add.py(100):         if len(seq) == 2:
0.63 /testbed/sympy/core/add.py(101):             a, b = seq
0.63 /testbed/sympy/core/add.py(102):             if b.is_Rational:
0.63 /testbed/sympy/core/add.py(103):                 a, b = b, a
0.63 /testbed/sympy/core/add.py(104):             if a.is_Rational:
0.63 /testbed/sympy/core/add.py(105):                 if b.is_Mul:
0.63 /testbed/sympy/core/add.py(107):             if rv:
0.63 /testbed/sympy/core/add.py(112):         terms = {}      # term -> coeff
0.63 /testbed/sympy/core/add.py(115):         coeff = S.Zero  # coefficient (Number or zoo) to always be in slot 0
0.63 /testbed/sympy/core/add.py(117):         order_factors = []
0.63 /testbed/sympy/core/add.py(119):         for o in seq:
0.63 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.63 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.63 /testbed/sympy/core/add.py(135):                 if (o is S.NaN or coeff is S.ComplexInfinity and
0.63 /testbed/sympy/core/add.py(139):                 if coeff.is_Number:
0.63 /testbed/sympy/core/add.py(140):                     coeff += o
0.63 /testbed/sympy/core/add.py(141):                     if coeff is S.NaN:
0.63 /testbed/sympy/core/add.py(119):         for o in seq:
0.63 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.63 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.63 /testbed/sympy/core/add.py(135):                 if (o is S.NaN or coeff is S.ComplexInfinity and
0.63 /testbed/sympy/core/add.py(139):                 if coeff.is_Number:
0.63 /testbed/sympy/core/add.py(140):                     coeff += o
0.63 /testbed/sympy/core/add.py(141):                     if coeff is S.NaN:
0.63 /testbed/sympy/core/add.py(119):         for o in seq:
0.63 /testbed/sympy/core/add.py(207):         newseq = []
0.63 /testbed/sympy/core/add.py(208):         noncommutative = False
0.63 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
0.63 /testbed/sympy/core/add.py(233):         if coeff is S.Infinity:
0.63 /testbed/sympy/core/add.py(237):         elif coeff is S.NegativeInfinity:
0.63 /testbed/sympy/core/add.py(241):         if coeff is S.ComplexInfinity:
0.63 /testbed/sympy/core/add.py(254):         if order_factors:
0.63 /testbed/sympy/core/add.py(273):         _addsort(newseq)
0.63 /testbed/sympy/core/add.py(21):     args.sort(key=_args_sortkey)
0.63 /testbed/sympy/core/add.py(276):         if coeff is not S.Zero:
0.63 /testbed/sympy/core/add.py(280):         if noncommutative:
0.63 /testbed/sympy/core/add.py(283):             return newseq, [], None
0.63 /testbed/sympy/core/add.py(543):                 if a.is_zero:
0.63 /testbed/sympy/core/add.py(496):     _eval_is_finite = lambda self: _fuzzy_group(
0.63 /testbed/sympy/core/add.py(497):         (a.is_finite for a in self.args), quick_exit=True)
0.63 /testbed/sympy/core/add.py(496):     _eval_is_finite = lambda self: _fuzzy_group(
0.63 /testbed/sympy/core/add.py(497):         (a.is_finite for a in self.args), quick_exit=True)
0.63 /testbed/sympy/core/add.py(497):         (a.is_finite for a in self.args), quick_exit=True)
0.63 /testbed/sympy/core/add.py(497):         (a.is_finite for a in self.args), quick_exit=True)
0.63 /testbed/sympy/core/add.py(545):                 elif a.is_zero is False:
0.63 /testbed/sympy/core/add.py(546):                     nz.append(a)
0.63 /testbed/sympy/core/add.py(541):         for a in self.args:
0.63 /testbed/sympy/core/add.py(555):         if z == len(self.args):
0.63 /testbed/sympy/core/add.py(557):         if len(nz) == 0 or len(nz) == len(self.args):
0.63 /testbed/sympy/core/add.py(558):             return None
0.63 /testbed/sympy/core/add.py(498):     _eval_is_hermitian = lambda self: _fuzzy_group(
0.63 /testbed/sympy/core/add.py(499):         (a.is_hermitian for a in self.args), quick_exit=True)
0.63 /testbed/sympy/core/add.py(498):     _eval_is_hermitian = lambda self: _fuzzy_group(
0.63 /testbed/sympy/core/add.py(499):         (a.is_hermitian for a in self.args), quick_exit=True)
0.63 /testbed/sympy/core/add.py(499):         (a.is_hermitian for a in self.args), quick_exit=True)
0.63 /testbed/sympy/core/add.py(499):         (a.is_hermitian for a in self.args), quick_exit=True)
0.63 /testbed/sympy/core/add.py(500):     _eval_is_integer = lambda self: _fuzzy_group(
0.63 /testbed/sympy/core/add.py(501):         (a.is_integer for a in self.args), quick_exit=True)
0.63 /testbed/sympy/core/add.py(500):     _eval_is_integer = lambda self: _fuzzy_group(
0.63 /testbed/sympy/core/add.py(501):         (a.is_integer for a in self.args), quick_exit=True)
0.63 /testbed/sympy/core/add.py(501):         (a.is_integer for a in self.args), quick_exit=True)
0.63 /testbed/sympy/core/add.py(96):         from sympy.calculus.util import AccumBounds
0.63 /testbed/sympy/core/add.py(97):         from sympy.matrices.expressions import MatrixExpr
0.63 /testbed/sympy/core/add.py(98):         from sympy.tensor.tensor import TensExpr
0.63 /testbed/sympy/core/add.py(99):         rv = None
0.63 /testbed/sympy/core/add.py(100):         if len(seq) == 2:
0.63 /testbed/sympy/core/add.py(101):             a, b = seq
0.63 /testbed/sympy/core/add.py(102):             if b.is_Rational:
0.63 /testbed/sympy/core/add.py(103):                 a, b = b, a
0.63 /testbed/sympy/core/add.py(104):             if a.is_Rational:
0.63 /testbed/sympy/core/add.py(105):                 if b.is_Mul:
0.63 /testbed/sympy/core/add.py(107):             if rv:
0.63 /testbed/sympy/core/add.py(112):         terms = {}      # term -> coeff
0.63 /testbed/sympy/core/add.py(115):         coeff = S.Zero  # coefficient (Number or zoo) to always be in slot 0
0.63 /testbed/sympy/core/add.py(117):         order_factors = []
0.63 /testbed/sympy/core/add.py(119):         for o in seq:
0.63 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.63 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.63 /testbed/sympy/core/add.py(146):             elif isinstance(o, AccumBounds):
0.63 /testbed/sympy/core/add.py(150):             elif isinstance(o, MatrixExpr):
0.63 /testbed/sympy/core/add.py(155):             elif isinstance(o, TensExpr):
0.63 /testbed/sympy/core/add.py(159):             elif o is S.ComplexInfinity:
0.63 /testbed/sympy/core/add.py(167):             elif o.is_Add:
0.63 /testbed/sympy/core/add.py(169):                 seq.extend(o.args)  # TODO zerocopy?
0.63 /testbed/sympy/core/add.py(170):                 continue
0.63 /testbed/sympy/core/add.py(119):         for o in seq:
0.63 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.63 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.63 /testbed/sympy/core/add.py(135):                 if (o is S.NaN or coeff is S.ComplexInfinity and
0.63 /testbed/sympy/core/add.py(139):                 if coeff.is_Number:
0.63 /testbed/sympy/core/add.py(140):                     coeff += o
0.63 /testbed/sympy/core/add.py(141):                     if coeff is S.NaN:
0.63 /testbed/sympy/core/add.py(119):         for o in seq:
0.63 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.63 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.63 /testbed/sympy/core/add.py(135):                 if (o is S.NaN or coeff is S.ComplexInfinity and
0.63 /testbed/sympy/core/add.py(139):                 if coeff.is_Number:
0.63 /testbed/sympy/core/add.py(140):                     coeff += o
0.63 /testbed/sympy/core/add.py(141):                     if coeff is S.NaN:
0.63 /testbed/sympy/core/add.py(119):         for o in seq:
0.63 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.63 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.63 /testbed/sympy/core/add.py(146):             elif isinstance(o, AccumBounds):
0.63 /testbed/sympy/core/add.py(150):             elif isinstance(o, MatrixExpr):
0.63 /testbed/sympy/core/add.py(155):             elif isinstance(o, TensExpr):
0.63 /testbed/sympy/core/add.py(159):             elif o is S.ComplexInfinity:
0.63 /testbed/sympy/core/add.py(167):             elif o.is_Add:
0.63 /testbed/sympy/core/add.py(173):             elif o.is_Mul:
0.63 /testbed/sympy/core/add.py(177):             elif o.is_Pow:
0.63 /testbed/sympy/core/add.py(187):                 c = S.One
0.63 /testbed/sympy/core/add.py(188):                 s = o
0.63 /testbed/sympy/core/add.py(197):             if s in terms:
0.63 /testbed/sympy/core/add.py(203):                 terms[s] = c
0.63 /testbed/sympy/core/add.py(119):         for o in seq:
0.63 /testbed/sympy/core/add.py(207):         newseq = []
0.63 /testbed/sympy/core/add.py(208):         noncommutative = False
0.63 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
0.63 /testbed/sympy/core/add.py(211):             if c is S.Zero:
0.63 /testbed/sympy/core/add.py(214):             elif c is S.One:
0.63 /testbed/sympy/core/add.py(215):                 newseq.append(s)
0.63 /testbed/sympy/core/add.py(230):             noncommutative = noncommutative or not s.is_commutative
0.63 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
0.63 /testbed/sympy/core/add.py(233):         if coeff is S.Infinity:
0.63 /testbed/sympy/core/add.py(237):         elif coeff is S.NegativeInfinity:
0.63 /testbed/sympy/core/add.py(241):         if coeff is S.ComplexInfinity:
0.63 /testbed/sympy/core/add.py(254):         if order_factors:
0.63 /testbed/sympy/core/add.py(273):         _addsort(newseq)
0.63 /testbed/sympy/core/add.py(21):     args.sort(key=_args_sortkey)
0.63 /testbed/sympy/core/add.py(276):         if coeff is not S.Zero:
0.63 /testbed/sympy/core/add.py(280):         if noncommutative:
0.63 /testbed/sympy/core/add.py(283):             return newseq, [], None
0.63 /testbed/sympy/core/add.py(502):     _eval_is_rational = lambda self: _fuzzy_group(
0.63 /testbed/sympy/core/add.py(503):         (a.is_rational for a in self.args), quick_exit=True)
0.63 /testbed/sympy/core/add.py(502):     _eval_is_rational = lambda self: _fuzzy_group(
0.63 /testbed/sympy/core/add.py(503):         (a.is_rational for a in self.args), quick_exit=True)
0.63 /testbed/sympy/core/add.py(503):         (a.is_rational for a in self.args), quick_exit=True)
0.63 /testbed/sympy/core/add.py(576):         for t in self.args:
0.63 /testbed/sympy/core/add.py(577):             a = t.is_irrational
0.63 /testbed/sympy/core/add.py(578):             if a:
0.63 /testbed/sympy/core/add.py(584):             if a is None:
0.63 /testbed/sympy/core/add.py(576):         for t in self.args:
0.63 /testbed/sympy/core/add.py(577):             a = t.is_irrational
0.63 /testbed/sympy/core/add.py(578):             if a:
0.63 /testbed/sympy/core/add.py(584):             if a is None:
0.63 /testbed/sympy/core/add.py(576):         for t in self.args:
0.63 /testbed/sympy/core/add.py(586):         return False
0.63 /testbed/sympy/core/add.py(569):         l = [f for f in self.args if not (f.is_even is True)]
0.63 /testbed/sympy/core/add.py(569):         l = [f for f in self.args if not (f.is_even is True)]
0.63 /testbed/sympy/core/add.py(569):         l = [f for f in self.args if not (f.is_even is True)]
0.63 /testbed/sympy/core/add.py(569):         l = [f for f in self.args if not (f.is_even is True)]
0.63 /testbed/sympy/core/add.py(570):         if not l:
0.63 /testbed/sympy/core/add.py(572):         if l[0].is_odd:
0.63 /testbed/sympy/core/add.py(504):     _eval_is_algebraic = lambda self: _fuzzy_group(
0.63 /testbed/sympy/core/add.py(505):         (a.is_algebraic for a in self.args), quick_exit=True)
0.63 /testbed/sympy/core/add.py(504):     _eval_is_algebraic = lambda self: _fuzzy_group(
0.63 /testbed/sympy/core/add.py(505):         (a.is_algebraic for a in self.args), quick_exit=True)
0.63 /testbed/sympy/core/add.py(505):         (a.is_algebraic for a in self.args), quick_exit=True)
0.63 /testbed/sympy/core/add.py(505):         (a.is_algebraic for a in self.args), quick_exit=True)
0.63 /testbed/sympy/core/add.py(510):         nz = []
0.63 /testbed/sympy/core/add.py(511):         im_I = []
0.63 /testbed/sympy/core/add.py(512):         for a in self.args:
0.63 /testbed/sympy/core/add.py(513):             if a.is_real:
0.63 /testbed/sympy/core/add.py(514):                 if a.is_zero:
0.63 /testbed/sympy/core/add.py(516):                 elif a.is_zero is False:
0.63 /testbed/sympy/core/add.py(517):                     nz.append(a)
0.63 /testbed/sympy/core/add.py(512):         for a in self.args:
0.63 /testbed/sympy/core/add.py(513):             if a.is_real:
0.63 /testbed/sympy/core/add.py(514):                 if a.is_zero:
0.63 /testbed/sympy/core/add.py(516):                 elif a.is_zero is False:
0.63 /testbed/sympy/core/add.py(517):                     nz.append(a)
0.63 /testbed/sympy/core/add.py(512):         for a in self.args:
0.63 /testbed/sympy/core/add.py(526):         b = self.func(*nz)
0.63 /testbed/sympy/core/add.py(96):         from sympy.calculus.util import AccumBounds
0.63 /testbed/sympy/core/add.py(97):         from sympy.matrices.expressions import MatrixExpr
0.63 /testbed/sympy/core/add.py(98):         from sympy.tensor.tensor import TensExpr
0.63 /testbed/sympy/core/add.py(99):         rv = None
0.63 /testbed/sympy/core/add.py(100):         if len(seq) == 2:
0.63 /testbed/sympy/core/add.py(101):             a, b = seq
0.63 /testbed/sympy/core/add.py(102):             if b.is_Rational:
0.63 /testbed/sympy/core/add.py(104):             if a.is_Rational:
0.63 /testbed/sympy/core/add.py(105):                 if b.is_Mul:
0.63 /testbed/sympy/core/add.py(106):                     rv = [a, b], [], None
0.63 /testbed/sympy/core/add.py(107):             if rv:
0.63 /testbed/sympy/core/add.py(108):                 if all(s.is_commutative for s in rv[0]):
0.63 /testbed/sympy/core/add.py(108):                 if all(s.is_commutative for s in rv[0]):
0.63 /testbed/sympy/core/add.py(108):                 if all(s.is_commutative for s in rv[0]):
0.63 /testbed/sympy/core/add.py(108):                 if all(s.is_commutative for s in rv[0]):
0.63 /testbed/sympy/core/add.py(109):                     return rv
0.63 /testbed/sympy/core/add.py(527):         if b.is_zero:
0.63 /testbed/sympy/core/add.py(533):         if self.is_commutative is False:
0.63 /testbed/sympy/core/add.py(537):         nz = []
0.63 /testbed/sympy/core/add.py(538):         z = 0
0.63 /testbed/sympy/core/add.py(539):         im_or_z = False
0.63 /testbed/sympy/core/add.py(540):         im = False
0.63 /testbed/sympy/core/add.py(541):         for a in self.args:
0.63 /testbed/sympy/core/add.py(542):             if a.is_real:
0.63 /testbed/sympy/core/add.py(543):                 if a.is_zero:
0.63 /testbed/sympy/core/add.py(545):                 elif a.is_zero is False:
0.63 /testbed/sympy/core/add.py(546):                     nz.append(a)
0.63 /testbed/sympy/core/add.py(541):         for a in self.args:
0.63 /testbed/sympy/core/add.py(542):             if a.is_real:
0.63 /testbed/sympy/core/add.py(543):                 if a.is_zero:
0.63 /testbed/sympy/core/add.py(545):                 elif a.is_zero is False:
0.63 /testbed/sympy/core/add.py(546):                     nz.append(a)
0.63 /testbed/sympy/core/add.py(541):         for a in self.args:
0.63 /testbed/sympy/core/add.py(555):         if z == len(self.args):
0.63 /testbed/sympy/core/add.py(557):         if len(nz) == 0 or len(nz) == len(self.args):
0.63 /testbed/sympy/core/add.py(558):             return None
0.63 /testbed/sympy/core/add.py(673):         from sympy.core.exprtools import _monotonic_sign
0.63 /testbed/sympy/core/add.py(674):         if self.is_number:
0.63 /testbed/sympy/core/add.py(675):             return super(Add, self)._eval_is_negative()
0.63 /testbed/sympy/core/add.py(490):     _eval_is_real = lambda self: _fuzzy_group(
0.63 /testbed/sympy/core/add.py(491):         (a.is_real for a in self.args), quick_exit=True)
0.63 /testbed/sympy/core/add.py(490):     _eval_is_real = lambda self: _fuzzy_group(
0.63 /testbed/sympy/core/add.py(491):         (a.is_real for a in self.args), quick_exit=True)
0.63 /testbed/sympy/core/add.py(491):         (a.is_real for a in self.args), quick_exit=True)
0.63 /testbed/sympy/core/add.py(491):         (a.is_real for a in self.args), quick_exit=True)
0.63 /testbed/sympy/core/add.py(96):         from sympy.calculus.util import AccumBounds
0.63 /testbed/sympy/core/add.py(97):         from sympy.matrices.expressions import MatrixExpr
0.63 /testbed/sympy/core/add.py(98):         from sympy.tensor.tensor import TensExpr
0.63 /testbed/sympy/core/add.py(99):         rv = None
0.63 /testbed/sympy/core/add.py(100):         if len(seq) == 2:
0.63 /testbed/sympy/core/add.py(101):             a, b = seq
0.63 /testbed/sympy/core/add.py(102):             if b.is_Rational:
0.63 /testbed/sympy/core/add.py(104):             if a.is_Rational:
0.63 /testbed/sympy/core/add.py(105):                 if b.is_Mul:
0.63 /testbed/sympy/core/add.py(106):                     rv = [a, b], [], None
0.63 /testbed/sympy/core/add.py(107):             if rv:
0.63 /testbed/sympy/core/add.py(108):                 if all(s.is_commutative for s in rv[0]):
0.63 /testbed/sympy/core/add.py(108):                 if all(s.is_commutative for s in rv[0]):
0.63 /testbed/sympy/core/add.py(108):                 if all(s.is_commutative for s in rv[0]):
0.63 /testbed/sympy/core/add.py(108):                 if all(s.is_commutative for s in rv[0]):
0.63 /testbed/sympy/core/add.py(109):                     return rv
0.63 /testbed/sympy/core/add.py(53):     args = list(args)
0.63 /testbed/sympy/core/add.py(54):     newargs = []
0.63 /testbed/sympy/core/add.py(55):     co = S.Zero
0.63 /testbed/sympy/core/add.py(56):     while args:
0.63 /testbed/sympy/core/add.py(66):     _addsort(newargs)
0.63 /testbed/sympy/core/add.py(21):     args.sort(key=_args_sortkey)
0.63 /testbed/sympy/core/add.py(67):     if co:
0.63 /testbed/sympy/core/add.py(69):     return Add._from_args(newargs)
0.63 /testbed/sympy/core/add.py(363):         if e.is_Rational and self.is_number:
0.63 /testbed/sympy/core/add.py(364):             from sympy.core.evalf import pure_complex
0.63 /testbed/sympy/core/add.py(365):             from sympy.core.mul import _unevaluated_Mul
0.63 /testbed/sympy/core/add.py(366):             from sympy.core.exprtools import factor_terms
0.63 /testbed/sympy/core/add.py(367):             from sympy.core.function import expand_multinomial
0.63 /testbed/sympy/core/add.py(368):             from sympy.functions.elementary.complexes import sign
0.63 /testbed/sympy/core/add.py(369):             from sympy.functions.elementary.miscellaneous import sqrt
0.63 /testbed/sympy/core/add.py(370):             ri = pure_complex(self)
0.63 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.63 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.63 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.63 /testbed/sympy/core/add.py(371):             if ri:
0.63 /testbed/sympy/core/add.py(372):                 r, i = ri
0.63 /testbed/sympy/core/add.py(373):                 if e.q == 2:
0.63 /testbed/sympy/core/add.py(381):                 elif e == -1:
0.63 /testbed/sympy/core/add.py(96):         from sympy.calculus.util import AccumBounds
0.63 /testbed/sympy/core/add.py(97):         from sympy.matrices.expressions import MatrixExpr
0.63 /testbed/sympy/core/add.py(98):         from sympy.tensor.tensor import TensExpr
0.63 /testbed/sympy/core/add.py(99):         rv = None
0.63 /testbed/sympy/core/add.py(100):         if len(seq) == 2:
0.63 /testbed/sympy/core/add.py(101):             a, b = seq
0.63 /testbed/sympy/core/add.py(102):             if b.is_Rational:
0.63 /testbed/sympy/core/add.py(104):             if a.is_Rational:
0.63 /testbed/sympy/core/add.py(105):                 if b.is_Mul:
0.63 /testbed/sympy/core/add.py(107):             if rv:
0.63 /testbed/sympy/core/add.py(112):         terms = {}      # term -> coeff
0.63 /testbed/sympy/core/add.py(115):         coeff = S.Zero  # coefficient (Number or zoo) to always be in slot 0
0.63 /testbed/sympy/core/add.py(117):         order_factors = []
0.63 /testbed/sympy/core/add.py(119):         for o in seq:
0.63 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.63 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.63 /testbed/sympy/core/add.py(135):                 if (o is S.NaN or coeff is S.ComplexInfinity and
0.63 /testbed/sympy/core/add.py(139):                 if coeff.is_Number:
0.63 /testbed/sympy/core/add.py(140):                     coeff += o
0.63 /testbed/sympy/core/add.py(141):                     if coeff is S.NaN:
0.63 /testbed/sympy/core/add.py(119):         for o in seq:
0.63 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.63 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.63 /testbed/sympy/core/add.py(146):             elif isinstance(o, AccumBounds):
0.63 /testbed/sympy/core/add.py(150):             elif isinstance(o, MatrixExpr):
0.63 /testbed/sympy/core/add.py(155):             elif isinstance(o, TensExpr):
0.63 /testbed/sympy/core/add.py(159):             elif o is S.ComplexInfinity:
0.63 /testbed/sympy/core/add.py(167):             elif o.is_Add:
0.63 /testbed/sympy/core/add.py(173):             elif o.is_Mul:
0.63 /testbed/sympy/core/add.py(177):             elif o.is_Pow:
0.63 /testbed/sympy/core/add.py(187):                 c = S.One
0.63 /testbed/sympy/core/add.py(188):                 s = o
0.63 /testbed/sympy/core/add.py(197):             if s in terms:
0.63 /testbed/sympy/core/add.py(203):                 terms[s] = c
0.63 /testbed/sympy/core/add.py(119):         for o in seq:
0.63 /testbed/sympy/core/add.py(207):         newseq = []
0.63 /testbed/sympy/core/add.py(208):         noncommutative = False
0.63 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
0.63 /testbed/sympy/core/add.py(211):             if c is S.Zero:
0.63 /testbed/sympy/core/add.py(214):             elif c is S.One:
0.63 /testbed/sympy/core/add.py(215):                 newseq.append(s)
0.63 /testbed/sympy/core/add.py(230):             noncommutative = noncommutative or not s.is_commutative
0.63 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
0.63 /testbed/sympy/core/add.py(233):         if coeff is S.Infinity:
0.63 /testbed/sympy/core/add.py(237):         elif coeff is S.NegativeInfinity:
0.63 /testbed/sympy/core/add.py(241):         if coeff is S.ComplexInfinity:
0.63 /testbed/sympy/core/add.py(254):         if order_factors:
0.63 /testbed/sympy/core/add.py(273):         _addsort(newseq)
0.63 /testbed/sympy/core/add.py(21):     args.sort(key=_args_sortkey)
0.63 /testbed/sympy/core/add.py(276):         if coeff is not S.Zero:
0.63 /testbed/sympy/core/add.py(277):             newseq.insert(0, coeff)
0.63 /testbed/sympy/core/add.py(280):         if noncommutative:
0.63 /testbed/sympy/core/add.py(283):             return newseq, [], None
0.63 /testbed/sympy/core/add.py(53):     args = list(args)
0.63 /testbed/sympy/core/add.py(54):     newargs = []
0.63 /testbed/sympy/core/add.py(55):     co = S.Zero
0.63 /testbed/sympy/core/add.py(56):     while args:
0.63 /testbed/sympy/core/add.py(66):     _addsort(newargs)
0.63 /testbed/sympy/core/add.py(21):     args.sort(key=_args_sortkey)
0.63 /testbed/sympy/core/add.py(67):     if co:
0.63 /testbed/sympy/core/add.py(69):     return Add._from_args(newargs)
0.63 /testbed/sympy/core/add.py(96):         from sympy.calculus.util import AccumBounds
0.63 /testbed/sympy/core/add.py(97):         from sympy.matrices.expressions import MatrixExpr
0.63 /testbed/sympy/core/add.py(98):         from sympy.tensor.tensor import TensExpr
0.63 /testbed/sympy/core/add.py(99):         rv = None
0.63 /testbed/sympy/core/add.py(100):         if len(seq) == 2:
0.63 /testbed/sympy/core/add.py(101):             a, b = seq
0.63 /testbed/sympy/core/add.py(102):             if b.is_Rational:
0.63 /testbed/sympy/core/add.py(104):             if a.is_Rational:
0.63 /testbed/sympy/core/add.py(107):             if rv:
0.63 /testbed/sympy/core/add.py(112):         terms = {}      # term -> coeff
0.63 /testbed/sympy/core/add.py(115):         coeff = S.Zero  # coefficient (Number or zoo) to always be in slot 0
0.63 /testbed/sympy/core/add.py(117):         order_factors = []
0.63 /testbed/sympy/core/add.py(119):         for o in seq:
0.63 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.63 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.63 /testbed/sympy/core/add.py(135):                 if (o is S.NaN or coeff is S.ComplexInfinity and
0.63 /testbed/sympy/core/add.py(139):                 if coeff.is_Number:
0.63 /testbed/sympy/core/add.py(140):                     coeff += o
0.63 /testbed/sympy/core/add.py(141):                     if coeff is S.NaN:
0.63 /testbed/sympy/core/add.py(119):         for o in seq:
0.63 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.63 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.63 /testbed/sympy/core/add.py(146):             elif isinstance(o, AccumBounds):
0.63 /testbed/sympy/core/add.py(150):             elif isinstance(o, MatrixExpr):
0.63 /testbed/sympy/core/add.py(155):             elif isinstance(o, TensExpr):
0.63 /testbed/sympy/core/add.py(159):             elif o is S.ComplexInfinity:
0.63 /testbed/sympy/core/add.py(167):             elif o.is_Add:
0.63 /testbed/sympy/core/add.py(173):             elif o.is_Mul:
0.63 /testbed/sympy/core/add.py(177):             elif o.is_Pow:
0.63 /testbed/sympy/core/add.py(187):                 c = S.One
0.63 /testbed/sympy/core/add.py(188):                 s = o
0.63 /testbed/sympy/core/add.py(197):             if s in terms:
0.63 /testbed/sympy/core/add.py(203):                 terms[s] = c
0.63 /testbed/sympy/core/add.py(119):         for o in seq:
0.63 /testbed/sympy/core/add.py(207):         newseq = []
0.63 /testbed/sympy/core/add.py(208):         noncommutative = False
0.63 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
0.63 /testbed/sympy/core/add.py(211):             if c is S.Zero:
0.63 /testbed/sympy/core/add.py(214):             elif c is S.One:
0.63 /testbed/sympy/core/add.py(215):                 newseq.append(s)
0.63 /testbed/sympy/core/add.py(230):             noncommutative = noncommutative or not s.is_commutative
0.63 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
0.63 /testbed/sympy/core/add.py(233):         if coeff is S.Infinity:
0.63 /testbed/sympy/core/add.py(237):         elif coeff is S.NegativeInfinity:
0.63 /testbed/sympy/core/add.py(241):         if coeff is S.ComplexInfinity:
0.63 /testbed/sympy/core/add.py(254):         if order_factors:
0.63 /testbed/sympy/core/add.py(273):         _addsort(newseq)
0.63 /testbed/sympy/core/add.py(21):     args.sort(key=_args_sortkey)
0.63 /testbed/sympy/core/add.py(276):         if coeff is not S.Zero:
0.63 /testbed/sympy/core/add.py(277):             newseq.insert(0, coeff)
0.63 /testbed/sympy/core/add.py(280):         if noncommutative:
0.63 /testbed/sympy/core/add.py(283):             return newseq, [], None
0.63 /testbed/sympy/core/add.py(363):         if e.is_Rational and self.is_number:
0.63 /testbed/sympy/core/add.py(364):             from sympy.core.evalf import pure_complex
0.63 /testbed/sympy/core/add.py(365):             from sympy.core.mul import _unevaluated_Mul
0.63 /testbed/sympy/core/add.py(366):             from sympy.core.exprtools import factor_terms
0.63 /testbed/sympy/core/add.py(367):             from sympy.core.function import expand_multinomial
0.63 /testbed/sympy/core/add.py(368):             from sympy.functions.elementary.complexes import sign
0.63 /testbed/sympy/core/add.py(369):             from sympy.functions.elementary.miscellaneous import sqrt
0.63 /testbed/sympy/core/add.py(370):             ri = pure_complex(self)
0.63 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.63 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.63 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.63 /testbed/sympy/core/add.py(371):             if ri:
0.63 /testbed/sympy/core/add.py(372):                 r, i = ri
0.63 /testbed/sympy/core/add.py(373):                 if e.q == 2:
0.63 /testbed/sympy/core/add.py(381):                 elif e == -1:
0.63 /testbed/sympy/core/add.py(363):         if e.is_Rational and self.is_number:
0.63 /testbed/sympy/core/add.py(364):             from sympy.core.evalf import pure_complex
0.63 /testbed/sympy/core/add.py(365):             from sympy.core.mul import _unevaluated_Mul
0.63 /testbed/sympy/core/add.py(366):             from sympy.core.exprtools import factor_terms
0.63 /testbed/sympy/core/add.py(367):             from sympy.core.function import expand_multinomial
0.63 /testbed/sympy/core/add.py(368):             from sympy.functions.elementary.complexes import sign
0.63 /testbed/sympy/core/add.py(369):             from sympy.functions.elementary.miscellaneous import sqrt
0.63 /testbed/sympy/core/add.py(370):             ri = pure_complex(self)
0.63 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.63 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.63 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.63 /testbed/sympy/core/add.py(371):             if ri:
0.63 /testbed/sympy/core/add.py(372):                 r, i = ri
0.63 /testbed/sympy/core/add.py(373):                 if e.q == 2:
0.63 /testbed/sympy/core/add.py(381):                 elif e == -1:
0.63 /testbed/sympy/core/add.py(825):         sargs = self.args
0.63 /testbed/sympy/core/add.py(826):         re_part, im_part = [], []
0.63 /testbed/sympy/core/add.py(827):         for term in sargs:
0.63 /testbed/sympy/core/add.py(828):             re, im = term.as_real_imag(deep=deep)
0.63 /testbed/sympy/core/add.py(829):             re_part.append(re)
0.63 /testbed/sympy/core/add.py(830):             im_part.append(im)
0.63 /testbed/sympy/core/add.py(827):         for term in sargs:
0.63 /testbed/sympy/core/add.py(828):             re, im = term.as_real_imag(deep=deep)
0.63 /testbed/sympy/core/add.py(829):             re_part.append(re)
0.63 /testbed/sympy/core/add.py(830):             im_part.append(im)
0.63 /testbed/sympy/core/add.py(827):         for term in sargs:
0.63 /testbed/sympy/core/add.py(831):         return (self.func(*re_part), self.func(*im_part))
0.63 /testbed/sympy/core/add.py(96):         from sympy.calculus.util import AccumBounds
0.63 /testbed/sympy/core/add.py(97):         from sympy.matrices.expressions import MatrixExpr
0.63 /testbed/sympy/core/add.py(98):         from sympy.tensor.tensor import TensExpr
0.63 /testbed/sympy/core/add.py(99):         rv = None
0.63 /testbed/sympy/core/add.py(100):         if len(seq) == 2:
0.63 /testbed/sympy/core/add.py(112):         terms = {}      # term -> coeff
0.63 /testbed/sympy/core/add.py(115):         coeff = S.Zero  # coefficient (Number or zoo) to always be in slot 0
0.63 /testbed/sympy/core/add.py(117):         order_factors = []
0.63 /testbed/sympy/core/add.py(119):         for o in seq:
0.63 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.63 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.63 /testbed/sympy/core/add.py(135):                 if (o is S.NaN or coeff is S.ComplexInfinity and
0.63 /testbed/sympy/core/add.py(139):                 if coeff.is_Number:
0.63 /testbed/sympy/core/add.py(140):                     coeff += o
0.63 /testbed/sympy/core/add.py(141):                     if coeff is S.NaN:
0.63 /testbed/sympy/core/add.py(119):         for o in seq:
0.63 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.63 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.63 /testbed/sympy/core/add.py(135):                 if (o is S.NaN or coeff is S.ComplexInfinity and
0.63 /testbed/sympy/core/add.py(139):                 if coeff.is_Number:
0.63 /testbed/sympy/core/add.py(140):                     coeff += o
0.63 /testbed/sympy/core/add.py(141):                     if coeff is S.NaN:
0.63 /testbed/sympy/core/add.py(119):         for o in seq:
0.63 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.63 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.63 /testbed/sympy/core/add.py(146):             elif isinstance(o, AccumBounds):
0.63 /testbed/sympy/core/add.py(150):             elif isinstance(o, MatrixExpr):
0.63 /testbed/sympy/core/add.py(155):             elif isinstance(o, TensExpr):
0.63 /testbed/sympy/core/add.py(159):             elif o is S.ComplexInfinity:
0.63 /testbed/sympy/core/add.py(167):             elif o.is_Add:
0.63 /testbed/sympy/core/add.py(173):             elif o.is_Mul:
0.63 /testbed/sympy/core/add.py(174):                 c, s = o.as_coeff_Mul()
0.63 /testbed/sympy/core/add.py(197):             if s in terms:
0.63 /testbed/sympy/core/add.py(203):                 terms[s] = c
0.63 /testbed/sympy/core/add.py(119):         for o in seq:
0.63 /testbed/sympy/core/add.py(207):         newseq = []
0.63 /testbed/sympy/core/add.py(208):         noncommutative = False
0.63 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
0.63 /testbed/sympy/core/add.py(211):             if c is S.Zero:
0.63 /testbed/sympy/core/add.py(214):             elif c is S.One:
0.63 /testbed/sympy/core/add.py(218):                 if s.is_Mul:
0.63 /testbed/sympy/core/add.py(223):                 elif s.is_Add:
0.63 /testbed/sympy/core/add.py(228):                     newseq.append(Mul(c, s))
0.63 /testbed/sympy/core/add.py(230):             noncommutative = noncommutative or not s.is_commutative
0.63 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
0.63 /testbed/sympy/core/add.py(233):         if coeff is S.Infinity:
0.63 /testbed/sympy/core/add.py(237):         elif coeff is S.NegativeInfinity:
0.63 /testbed/sympy/core/add.py(241):         if coeff is S.ComplexInfinity:
0.63 /testbed/sympy/core/add.py(254):         if order_factors:
0.63 /testbed/sympy/core/add.py(273):         _addsort(newseq)
0.63 /testbed/sympy/core/add.py(21):     args.sort(key=_args_sortkey)
0.63 /testbed/sympy/core/add.py(276):         if coeff is not S.Zero:
0.63 /testbed/sympy/core/add.py(280):         if noncommutative:
0.63 /testbed/sympy/core/add.py(283):             return newseq, [], None
0.63 /testbed/sympy/core/add.py(96):         from sympy.calculus.util import AccumBounds
0.63 /testbed/sympy/core/add.py(97):         from sympy.matrices.expressions import MatrixExpr
0.63 /testbed/sympy/core/add.py(98):         from sympy.tensor.tensor import TensExpr
0.63 /testbed/sympy/core/add.py(99):         rv = None
0.63 /testbed/sympy/core/add.py(100):         if len(seq) == 2:
0.63 /testbed/sympy/core/add.py(101):             a, b = seq
0.63 /testbed/sympy/core/add.py(102):             if b.is_Rational:
0.63 /testbed/sympy/core/add.py(104):             if a.is_Rational:
0.63 /testbed/sympy/core/add.py(107):             if rv:
0.63 /testbed/sympy/core/add.py(112):         terms = {}      # term -> coeff
0.63 /testbed/sympy/core/add.py(115):         coeff = S.Zero  # coefficient (Number or zoo) to always be in slot 0
0.63 /testbed/sympy/core/add.py(117):         order_factors = []
0.63 /testbed/sympy/core/add.py(119):         for o in seq:
0.63 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.63 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.63 /testbed/sympy/core/add.py(135):                 if (o is S.NaN or coeff is S.ComplexInfinity and
0.63 /testbed/sympy/core/add.py(139):                 if coeff.is_Number:
0.63 /testbed/sympy/core/add.py(140):                     coeff += o
0.63 /testbed/sympy/core/add.py(141):                     if coeff is S.NaN:
0.63 /testbed/sympy/core/add.py(119):         for o in seq:
0.63 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.63 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.63 /testbed/sympy/core/add.py(135):                 if (o is S.NaN or coeff is S.ComplexInfinity and
0.63 /testbed/sympy/core/add.py(139):                 if coeff.is_Number:
0.63 /testbed/sympy/core/add.py(140):                     coeff += o
0.63 /testbed/sympy/core/add.py(141):                     if coeff is S.NaN:
0.63 /testbed/sympy/core/add.py(119):         for o in seq:
0.63 /testbed/sympy/core/add.py(207):         newseq = []
0.63 /testbed/sympy/core/add.py(208):         noncommutative = False
0.63 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
0.63 /testbed/sympy/core/add.py(233):         if coeff is S.Infinity:
0.63 /testbed/sympy/core/add.py(237):         elif coeff is S.NegativeInfinity:
0.63 /testbed/sympy/core/add.py(241):         if coeff is S.ComplexInfinity:
0.63 /testbed/sympy/core/add.py(254):         if order_factors:
0.63 /testbed/sympy/core/add.py(273):         _addsort(newseq)
0.63 /testbed/sympy/core/add.py(21):     args.sort(key=_args_sortkey)
0.63 /testbed/sympy/core/add.py(276):         if coeff is not S.Zero:
0.63 /testbed/sympy/core/add.py(280):         if noncommutative:
0.63 /testbed/sympy/core/add.py(283):             return newseq, [], None
0.63 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.63 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.63 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.63 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.63 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.63 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.63 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.63 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.63 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.63 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.63 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.63 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.64 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.64 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.64 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.64 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.64 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.64 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.64 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.64 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.64 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.64 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.64 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.64 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.64 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.64 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.64 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.64 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.64 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.64 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.64 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.64 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.64 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.64 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.64 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.64 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.64 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.64 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.64 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.64 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.64 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.64 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.64 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.64 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.64 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.64 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.64 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.64 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.64 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.64 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.64 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.64 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.64 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.64 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.64 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.64 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.64 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.64 /testbed/sympy/core/add.py(504):     _eval_is_algebraic = lambda self: _fuzzy_group(
0.64 /testbed/sympy/core/add.py(505):         (a.is_algebraic for a in self.args), quick_exit=True)
0.64 /testbed/sympy/core/add.py(504):     _eval_is_algebraic = lambda self: _fuzzy_group(
0.64 /testbed/sympy/core/add.py(505):         (a.is_algebraic for a in self.args), quick_exit=True)
0.64 /testbed/sympy/core/add.py(505):         (a.is_algebraic for a in self.args), quick_exit=True)
0.64 /testbed/sympy/core/add.py(505):         (a.is_algebraic for a in self.args), quick_exit=True)
0.64 /testbed/sympy/core/add.py(825):         sargs = self.args
0.64 /testbed/sympy/core/add.py(826):         re_part, im_part = [], []
0.64 /testbed/sympy/core/add.py(827):         for term in sargs:
0.64 /testbed/sympy/core/add.py(828):             re, im = term.as_real_imag(deep=deep)
0.64 /testbed/sympy/core/add.py(829):             re_part.append(re)
0.64 /testbed/sympy/core/add.py(830):             im_part.append(im)
0.64 /testbed/sympy/core/add.py(827):         for term in sargs:
0.64 /testbed/sympy/core/add.py(828):             re, im = term.as_real_imag(deep=deep)
0.64 /testbed/sympy/core/add.py(829):             re_part.append(re)
0.64 /testbed/sympy/core/add.py(830):             im_part.append(im)
0.64 /testbed/sympy/core/add.py(827):         for term in sargs:
0.64 /testbed/sympy/core/add.py(831):         return (self.func(*re_part), self.func(*im_part))
0.64 /testbed/sympy/core/add.py(96):         from sympy.calculus.util import AccumBounds
0.64 /testbed/sympy/core/add.py(97):         from sympy.matrices.expressions import MatrixExpr
0.64 /testbed/sympy/core/add.py(98):         from sympy.tensor.tensor import TensExpr
0.64 /testbed/sympy/core/add.py(99):         rv = None
0.64 /testbed/sympy/core/add.py(100):         if len(seq) == 2:
0.64 /testbed/sympy/core/add.py(101):             a, b = seq
0.64 /testbed/sympy/core/add.py(102):             if b.is_Rational:
0.64 /testbed/sympy/core/add.py(103):                 a, b = b, a
0.64 /testbed/sympy/core/add.py(104):             if a.is_Rational:
0.64 /testbed/sympy/core/add.py(105):                 if b.is_Mul:
0.64 /testbed/sympy/core/add.py(107):             if rv:
0.64 /testbed/sympy/core/add.py(112):         terms = {}      # term -> coeff
0.64 /testbed/sympy/core/add.py(115):         coeff = S.Zero  # coefficient (Number or zoo) to always be in slot 0
0.64 /testbed/sympy/core/add.py(117):         order_factors = []
0.64 /testbed/sympy/core/add.py(119):         for o in seq:
0.64 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.64 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.64 /testbed/sympy/core/add.py(135):                 if (o is S.NaN or coeff is S.ComplexInfinity and
0.64 /testbed/sympy/core/add.py(139):                 if coeff.is_Number:
0.64 /testbed/sympy/core/add.py(140):                     coeff += o
0.64 /testbed/sympy/core/add.py(141):                     if coeff is S.NaN:
0.64 /testbed/sympy/core/add.py(119):         for o in seq:
0.64 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.64 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.64 /testbed/sympy/core/add.py(135):                 if (o is S.NaN or coeff is S.ComplexInfinity and
0.64 /testbed/sympy/core/add.py(139):                 if coeff.is_Number:
0.64 /testbed/sympy/core/add.py(140):                     coeff += o
0.64 /testbed/sympy/core/add.py(141):                     if coeff is S.NaN:
0.64 /testbed/sympy/core/add.py(119):         for o in seq:
0.64 /testbed/sympy/core/add.py(207):         newseq = []
0.64 /testbed/sympy/core/add.py(208):         noncommutative = False
0.64 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
0.64 /testbed/sympy/core/add.py(233):         if coeff is S.Infinity:
0.64 /testbed/sympy/core/add.py(237):         elif coeff is S.NegativeInfinity:
0.64 /testbed/sympy/core/add.py(241):         if coeff is S.ComplexInfinity:
0.64 /testbed/sympy/core/add.py(254):         if order_factors:
0.64 /testbed/sympy/core/add.py(273):         _addsort(newseq)
0.64 /testbed/sympy/core/add.py(21):     args.sort(key=_args_sortkey)
0.64 /testbed/sympy/core/add.py(276):         if coeff is not S.Zero:
0.64 /testbed/sympy/core/add.py(280):         if noncommutative:
0.64 /testbed/sympy/core/add.py(283):             return newseq, [], None
0.64 /testbed/sympy/core/add.py(658):         from sympy.core.exprtools import _monotonic_sign
0.64 /testbed/sympy/core/add.py(659):         if not self.is_number:
0.64 /testbed/sympy/core/add.py(589):         from sympy.core.exprtools import _monotonic_sign
0.64 /testbed/sympy/core/add.py(590):         if self.is_number:
0.64 /testbed/sympy/core/add.py(591):             return super(Add, self)._eval_is_positive()
0.64 /testbed/sympy/core/add.py(96):         from sympy.calculus.util import AccumBounds
0.64 /testbed/sympy/core/add.py(97):         from sympy.matrices.expressions import MatrixExpr
0.64 /testbed/sympy/core/add.py(98):         from sympy.tensor.tensor import TensExpr
0.64 /testbed/sympy/core/add.py(99):         rv = None
0.64 /testbed/sympy/core/add.py(100):         if len(seq) == 2:
0.64 /testbed/sympy/core/add.py(101):             a, b = seq
0.64 /testbed/sympy/core/add.py(102):             if b.is_Rational:
0.64 /testbed/sympy/core/add.py(104):             if a.is_Rational:
0.64 /testbed/sympy/core/add.py(105):                 if b.is_Mul:
0.64 /testbed/sympy/core/add.py(106):                     rv = [a, b], [], None
0.64 /testbed/sympy/core/add.py(107):             if rv:
0.64 /testbed/sympy/core/add.py(108):                 if all(s.is_commutative for s in rv[0]):
0.64 /testbed/sympy/core/add.py(108):                 if all(s.is_commutative for s in rv[0]):
0.64 /testbed/sympy/core/add.py(108):                 if all(s.is_commutative for s in rv[0]):
0.64 /testbed/sympy/core/add.py(108):                 if all(s.is_commutative for s in rv[0]):
0.64 /testbed/sympy/core/add.py(109):                     return rv
0.64 /testbed/sympy/core/add.py(53):     args = list(args)
0.64 /testbed/sympy/core/add.py(54):     newargs = []
0.64 /testbed/sympy/core/add.py(55):     co = S.Zero
0.64 /testbed/sympy/core/add.py(56):     while args:
0.64 /testbed/sympy/core/add.py(66):     _addsort(newargs)
0.64 /testbed/sympy/core/add.py(21):     args.sort(key=_args_sortkey)
0.64 /testbed/sympy/core/add.py(67):     if co:
0.64 /testbed/sympy/core/add.py(69):     return Add._from_args(newargs)
0.64 /testbed/sympy/core/add.py(363):         if e.is_Rational and self.is_number:
0.64 /testbed/sympy/core/add.py(364):             from sympy.core.evalf import pure_complex
0.64 /testbed/sympy/core/add.py(365):             from sympy.core.mul import _unevaluated_Mul
0.64 /testbed/sympy/core/add.py(366):             from sympy.core.exprtools import factor_terms
0.64 /testbed/sympy/core/add.py(367):             from sympy.core.function import expand_multinomial
0.64 /testbed/sympy/core/add.py(368):             from sympy.functions.elementary.complexes import sign
0.64 /testbed/sympy/core/add.py(369):             from sympy.functions.elementary.miscellaneous import sqrt
0.64 /testbed/sympy/core/add.py(370):             ri = pure_complex(self)
0.64 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.64 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.64 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.64 /testbed/sympy/core/add.py(371):             if ri:
0.64 /testbed/sympy/core/add.py(372):                 r, i = ri
0.64 /testbed/sympy/core/add.py(373):                 if e.q == 2:
0.64 /testbed/sympy/core/add.py(381):                 elif e == -1:
0.64 /testbed/sympy/core/add.py(96):         from sympy.calculus.util import AccumBounds
0.64 /testbed/sympy/core/add.py(97):         from sympy.matrices.expressions import MatrixExpr
0.64 /testbed/sympy/core/add.py(98):         from sympy.tensor.tensor import TensExpr
0.64 /testbed/sympy/core/add.py(99):         rv = None
0.64 /testbed/sympy/core/add.py(100):         if len(seq) == 2:
0.64 /testbed/sympy/core/add.py(101):             a, b = seq
0.64 /testbed/sympy/core/add.py(102):             if b.is_Rational:
0.64 /testbed/sympy/core/add.py(104):             if a.is_Rational:
0.64 /testbed/sympy/core/add.py(105):                 if b.is_Mul:
0.64 /testbed/sympy/core/add.py(107):             if rv:
0.64 /testbed/sympy/core/add.py(112):         terms = {}      # term -> coeff
0.64 /testbed/sympy/core/add.py(115):         coeff = S.Zero  # coefficient (Number or zoo) to always be in slot 0
0.64 /testbed/sympy/core/add.py(117):         order_factors = []
0.64 /testbed/sympy/core/add.py(119):         for o in seq:
0.64 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.64 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.64 /testbed/sympy/core/add.py(135):                 if (o is S.NaN or coeff is S.ComplexInfinity and
0.64 /testbed/sympy/core/add.py(139):                 if coeff.is_Number:
0.64 /testbed/sympy/core/add.py(140):                     coeff += o
0.64 /testbed/sympy/core/add.py(141):                     if coeff is S.NaN:
0.64 /testbed/sympy/core/add.py(119):         for o in seq:
0.64 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.64 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.64 /testbed/sympy/core/add.py(146):             elif isinstance(o, AccumBounds):
0.64 /testbed/sympy/core/add.py(150):             elif isinstance(o, MatrixExpr):
0.64 /testbed/sympy/core/add.py(155):             elif isinstance(o, TensExpr):
0.64 /testbed/sympy/core/add.py(159):             elif o is S.ComplexInfinity:
0.64 /testbed/sympy/core/add.py(167):             elif o.is_Add:
0.64 /testbed/sympy/core/add.py(173):             elif o.is_Mul:
0.64 /testbed/sympy/core/add.py(177):             elif o.is_Pow:
0.64 /testbed/sympy/core/add.py(187):                 c = S.One
0.64 /testbed/sympy/core/add.py(188):                 s = o
0.64 /testbed/sympy/core/add.py(197):             if s in terms:
0.64 /testbed/sympy/core/add.py(203):                 terms[s] = c
0.64 /testbed/sympy/core/add.py(119):         for o in seq:
0.64 /testbed/sympy/core/add.py(207):         newseq = []
0.64 /testbed/sympy/core/add.py(208):         noncommutative = False
0.64 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
0.64 /testbed/sympy/core/add.py(211):             if c is S.Zero:
0.64 /testbed/sympy/core/add.py(214):             elif c is S.One:
0.64 /testbed/sympy/core/add.py(215):                 newseq.append(s)
0.64 /testbed/sympy/core/add.py(230):             noncommutative = noncommutative or not s.is_commutative
0.64 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
0.64 /testbed/sympy/core/add.py(233):         if coeff is S.Infinity:
0.64 /testbed/sympy/core/add.py(237):         elif coeff is S.NegativeInfinity:
0.64 /testbed/sympy/core/add.py(241):         if coeff is S.ComplexInfinity:
0.64 /testbed/sympy/core/add.py(254):         if order_factors:
0.64 /testbed/sympy/core/add.py(273):         _addsort(newseq)
0.64 /testbed/sympy/core/add.py(21):     args.sort(key=_args_sortkey)
0.64 /testbed/sympy/core/add.py(276):         if coeff is not S.Zero:
0.64 /testbed/sympy/core/add.py(277):             newseq.insert(0, coeff)
0.64 /testbed/sympy/core/add.py(280):         if noncommutative:
0.64 /testbed/sympy/core/add.py(283):             return newseq, [], None
0.64 /testbed/sympy/core/add.py(53):     args = list(args)
0.64 /testbed/sympy/core/add.py(54):     newargs = []
0.64 /testbed/sympy/core/add.py(55):     co = S.Zero
0.64 /testbed/sympy/core/add.py(56):     while args:
0.64 /testbed/sympy/core/add.py(66):     _addsort(newargs)
0.64 /testbed/sympy/core/add.py(21):     args.sort(key=_args_sortkey)
0.64 /testbed/sympy/core/add.py(67):     if co:
0.64 /testbed/sympy/core/add.py(69):     return Add._from_args(newargs)
0.64 /testbed/sympy/core/add.py(96):         from sympy.calculus.util import AccumBounds
0.64 /testbed/sympy/core/add.py(97):         from sympy.matrices.expressions import MatrixExpr
0.64 /testbed/sympy/core/add.py(98):         from sympy.tensor.tensor import TensExpr
0.64 /testbed/sympy/core/add.py(99):         rv = None
0.64 /testbed/sympy/core/add.py(100):         if len(seq) == 2:
0.64 /testbed/sympy/core/add.py(101):             a, b = seq
0.64 /testbed/sympy/core/add.py(102):             if b.is_Rational:
0.64 /testbed/sympy/core/add.py(104):             if a.is_Rational:
0.64 /testbed/sympy/core/add.py(107):             if rv:
0.64 /testbed/sympy/core/add.py(112):         terms = {}      # term -> coeff
0.64 /testbed/sympy/core/add.py(115):         coeff = S.Zero  # coefficient (Number or zoo) to always be in slot 0
0.64 /testbed/sympy/core/add.py(117):         order_factors = []
0.64 /testbed/sympy/core/add.py(119):         for o in seq:
0.64 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.64 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.64 /testbed/sympy/core/add.py(135):                 if (o is S.NaN or coeff is S.ComplexInfinity and
0.64 /testbed/sympy/core/add.py(139):                 if coeff.is_Number:
0.64 /testbed/sympy/core/add.py(140):                     coeff += o
0.64 /testbed/sympy/core/add.py(141):                     if coeff is S.NaN:
0.64 /testbed/sympy/core/add.py(119):         for o in seq:
0.64 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.64 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.64 /testbed/sympy/core/add.py(146):             elif isinstance(o, AccumBounds):
0.64 /testbed/sympy/core/add.py(150):             elif isinstance(o, MatrixExpr):
0.64 /testbed/sympy/core/add.py(155):             elif isinstance(o, TensExpr):
0.64 /testbed/sympy/core/add.py(159):             elif o is S.ComplexInfinity:
0.64 /testbed/sympy/core/add.py(167):             elif o.is_Add:
0.64 /testbed/sympy/core/add.py(173):             elif o.is_Mul:
0.64 /testbed/sympy/core/add.py(177):             elif o.is_Pow:
0.64 /testbed/sympy/core/add.py(187):                 c = S.One
0.64 /testbed/sympy/core/add.py(188):                 s = o
0.64 /testbed/sympy/core/add.py(197):             if s in terms:
0.64 /testbed/sympy/core/add.py(203):                 terms[s] = c
0.64 /testbed/sympy/core/add.py(119):         for o in seq:
0.64 /testbed/sympy/core/add.py(207):         newseq = []
0.64 /testbed/sympy/core/add.py(208):         noncommutative = False
0.64 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
0.64 /testbed/sympy/core/add.py(211):             if c is S.Zero:
0.64 /testbed/sympy/core/add.py(214):             elif c is S.One:
0.64 /testbed/sympy/core/add.py(215):                 newseq.append(s)
0.64 /testbed/sympy/core/add.py(230):             noncommutative = noncommutative or not s.is_commutative
0.64 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
0.64 /testbed/sympy/core/add.py(233):         if coeff is S.Infinity:
0.64 /testbed/sympy/core/add.py(237):         elif coeff is S.NegativeInfinity:
0.64 /testbed/sympy/core/add.py(241):         if coeff is S.ComplexInfinity:
0.64 /testbed/sympy/core/add.py(254):         if order_factors:
0.64 /testbed/sympy/core/add.py(273):         _addsort(newseq)
0.64 /testbed/sympy/core/add.py(21):     args.sort(key=_args_sortkey)
0.64 /testbed/sympy/core/add.py(276):         if coeff is not S.Zero:
0.64 /testbed/sympy/core/add.py(277):             newseq.insert(0, coeff)
0.64 /testbed/sympy/core/add.py(280):         if noncommutative:
0.64 /testbed/sympy/core/add.py(283):             return newseq, [], None
0.64 /testbed/sympy/core/add.py(363):         if e.is_Rational and self.is_number:
0.64 /testbed/sympy/core/add.py(364):             from sympy.core.evalf import pure_complex
0.64 /testbed/sympy/core/add.py(365):             from sympy.core.mul import _unevaluated_Mul
0.64 /testbed/sympy/core/add.py(366):             from sympy.core.exprtools import factor_terms
0.64 /testbed/sympy/core/add.py(367):             from sympy.core.function import expand_multinomial
0.64 /testbed/sympy/core/add.py(368):             from sympy.functions.elementary.complexes import sign
0.64 /testbed/sympy/core/add.py(369):             from sympy.functions.elementary.miscellaneous import sqrt
0.64 /testbed/sympy/core/add.py(370):             ri = pure_complex(self)
0.64 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.64 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.64 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.64 /testbed/sympy/core/add.py(371):             if ri:
0.64 /testbed/sympy/core/add.py(372):                 r, i = ri
0.64 /testbed/sympy/core/add.py(373):                 if e.q == 2:
0.64 /testbed/sympy/core/add.py(381):                 elif e == -1:
0.64 /testbed/sympy/core/add.py(363):         if e.is_Rational and self.is_number:
0.64 /testbed/sympy/core/add.py(364):             from sympy.core.evalf import pure_complex
0.64 /testbed/sympy/core/add.py(365):             from sympy.core.mul import _unevaluated_Mul
0.64 /testbed/sympy/core/add.py(366):             from sympy.core.exprtools import factor_terms
0.64 /testbed/sympy/core/add.py(367):             from sympy.core.function import expand_multinomial
0.64 /testbed/sympy/core/add.py(368):             from sympy.functions.elementary.complexes import sign
0.64 /testbed/sympy/core/add.py(369):             from sympy.functions.elementary.miscellaneous import sqrt
0.64 /testbed/sympy/core/add.py(370):             ri = pure_complex(self)
0.64 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.64 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.64 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.64 /testbed/sympy/core/add.py(371):             if ri:
0.64 /testbed/sympy/core/add.py(372):                 r, i = ri
0.64 /testbed/sympy/core/add.py(373):                 if e.q == 2:
0.64 /testbed/sympy/core/add.py(381):                 elif e == -1:
0.64 /testbed/sympy/core/add.py(825):         sargs = self.args
0.64 /testbed/sympy/core/add.py(826):         re_part, im_part = [], []
0.64 /testbed/sympy/core/add.py(827):         for term in sargs:
0.64 /testbed/sympy/core/add.py(828):             re, im = term.as_real_imag(deep=deep)
0.64 /testbed/sympy/core/add.py(829):             re_part.append(re)
0.64 /testbed/sympy/core/add.py(830):             im_part.append(im)
0.64 /testbed/sympy/core/add.py(827):         for term in sargs:
0.64 /testbed/sympy/core/add.py(828):             re, im = term.as_real_imag(deep=deep)
0.64 /testbed/sympy/core/add.py(829):             re_part.append(re)
0.64 /testbed/sympy/core/add.py(830):             im_part.append(im)
0.64 /testbed/sympy/core/add.py(827):         for term in sargs:
0.64 /testbed/sympy/core/add.py(831):         return (self.func(*re_part), self.func(*im_part))
0.64 /testbed/sympy/core/add.py(96):         from sympy.calculus.util import AccumBounds
0.64 /testbed/sympy/core/add.py(97):         from sympy.matrices.expressions import MatrixExpr
0.64 /testbed/sympy/core/add.py(98):         from sympy.tensor.tensor import TensExpr
0.64 /testbed/sympy/core/add.py(99):         rv = None
0.64 /testbed/sympy/core/add.py(100):         if len(seq) == 2:
0.64 /testbed/sympy/core/add.py(112):         terms = {}      # term -> coeff
0.64 /testbed/sympy/core/add.py(115):         coeff = S.Zero  # coefficient (Number or zoo) to always be in slot 0
0.64 /testbed/sympy/core/add.py(117):         order_factors = []
0.64 /testbed/sympy/core/add.py(119):         for o in seq:
0.64 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.64 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.64 /testbed/sympy/core/add.py(135):                 if (o is S.NaN or coeff is S.ComplexInfinity and
0.64 /testbed/sympy/core/add.py(139):                 if coeff.is_Number:
0.64 /testbed/sympy/core/add.py(140):                     coeff += o
0.64 /testbed/sympy/core/add.py(141):                     if coeff is S.NaN:
0.64 /testbed/sympy/core/add.py(119):         for o in seq:
0.64 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.64 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.64 /testbed/sympy/core/add.py(135):                 if (o is S.NaN or coeff is S.ComplexInfinity and
0.64 /testbed/sympy/core/add.py(139):                 if coeff.is_Number:
0.64 /testbed/sympy/core/add.py(140):                     coeff += o
0.64 /testbed/sympy/core/add.py(141):                     if coeff is S.NaN:
0.64 /testbed/sympy/core/add.py(119):         for o in seq:
0.64 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.64 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.64 /testbed/sympy/core/add.py(146):             elif isinstance(o, AccumBounds):
0.64 /testbed/sympy/core/add.py(150):             elif isinstance(o, MatrixExpr):
0.64 /testbed/sympy/core/add.py(155):             elif isinstance(o, TensExpr):
0.64 /testbed/sympy/core/add.py(159):             elif o is S.ComplexInfinity:
0.64 /testbed/sympy/core/add.py(167):             elif o.is_Add:
0.64 /testbed/sympy/core/add.py(173):             elif o.is_Mul:
0.64 /testbed/sympy/core/add.py(174):                 c, s = o.as_coeff_Mul()
0.64 /testbed/sympy/core/add.py(197):             if s in terms:
0.64 /testbed/sympy/core/add.py(203):                 terms[s] = c
0.64 /testbed/sympy/core/add.py(119):         for o in seq:
0.64 /testbed/sympy/core/add.py(207):         newseq = []
0.64 /testbed/sympy/core/add.py(208):         noncommutative = False
0.64 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
0.64 /testbed/sympy/core/add.py(211):             if c is S.Zero:
0.64 /testbed/sympy/core/add.py(214):             elif c is S.One:
0.64 /testbed/sympy/core/add.py(218):                 if s.is_Mul:
0.64 /testbed/sympy/core/add.py(223):                 elif s.is_Add:
0.64 /testbed/sympy/core/add.py(228):                     newseq.append(Mul(c, s))
0.64 /testbed/sympy/core/add.py(230):             noncommutative = noncommutative or not s.is_commutative
0.64 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
0.64 /testbed/sympy/core/add.py(233):         if coeff is S.Infinity:
0.64 /testbed/sympy/core/add.py(237):         elif coeff is S.NegativeInfinity:
0.64 /testbed/sympy/core/add.py(241):         if coeff is S.ComplexInfinity:
0.64 /testbed/sympy/core/add.py(254):         if order_factors:
0.64 /testbed/sympy/core/add.py(273):         _addsort(newseq)
0.64 /testbed/sympy/core/add.py(21):     args.sort(key=_args_sortkey)
0.64 /testbed/sympy/core/add.py(276):         if coeff is not S.Zero:
0.64 /testbed/sympy/core/add.py(280):         if noncommutative:
0.64 /testbed/sympy/core/add.py(283):             return newseq, [], None
0.64 /testbed/sympy/core/add.py(96):         from sympy.calculus.util import AccumBounds
0.64 /testbed/sympy/core/add.py(97):         from sympy.matrices.expressions import MatrixExpr
0.64 /testbed/sympy/core/add.py(98):         from sympy.tensor.tensor import TensExpr
0.64 /testbed/sympy/core/add.py(99):         rv = None
0.64 /testbed/sympy/core/add.py(100):         if len(seq) == 2:
0.64 /testbed/sympy/core/add.py(101):             a, b = seq
0.64 /testbed/sympy/core/add.py(102):             if b.is_Rational:
0.64 /testbed/sympy/core/add.py(104):             if a.is_Rational:
0.64 /testbed/sympy/core/add.py(107):             if rv:
0.64 /testbed/sympy/core/add.py(112):         terms = {}      # term -> coeff
0.64 /testbed/sympy/core/add.py(115):         coeff = S.Zero  # coefficient (Number or zoo) to always be in slot 0
0.64 /testbed/sympy/core/add.py(117):         order_factors = []
0.64 /testbed/sympy/core/add.py(119):         for o in seq:
0.64 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.64 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.64 /testbed/sympy/core/add.py(135):                 if (o is S.NaN or coeff is S.ComplexInfinity and
0.64 /testbed/sympy/core/add.py(139):                 if coeff.is_Number:
0.64 /testbed/sympy/core/add.py(140):                     coeff += o
0.64 /testbed/sympy/core/add.py(141):                     if coeff is S.NaN:
0.64 /testbed/sympy/core/add.py(119):         for o in seq:
0.64 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.64 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.64 /testbed/sympy/core/add.py(135):                 if (o is S.NaN or coeff is S.ComplexInfinity and
0.64 /testbed/sympy/core/add.py(139):                 if coeff.is_Number:
0.64 /testbed/sympy/core/add.py(140):                     coeff += o
0.64 /testbed/sympy/core/add.py(141):                     if coeff is S.NaN:
0.64 /testbed/sympy/core/add.py(119):         for o in seq:
0.64 /testbed/sympy/core/add.py(207):         newseq = []
0.64 /testbed/sympy/core/add.py(208):         noncommutative = False
0.64 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
0.64 /testbed/sympy/core/add.py(233):         if coeff is S.Infinity:
0.64 /testbed/sympy/core/add.py(237):         elif coeff is S.NegativeInfinity:
0.64 /testbed/sympy/core/add.py(241):         if coeff is S.ComplexInfinity:
0.64 /testbed/sympy/core/add.py(254):         if order_factors:
0.64 /testbed/sympy/core/add.py(273):         _addsort(newseq)
0.64 /testbed/sympy/core/add.py(21):     args.sort(key=_args_sortkey)
0.64 /testbed/sympy/core/add.py(276):         if coeff is not S.Zero:
0.64 /testbed/sympy/core/add.py(280):         if noncommutative:
0.64 /testbed/sympy/core/add.py(283):             return newseq, [], None
0.64 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.64 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.64 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.64 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.64 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.64 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.64 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.64 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.64 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.64 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.64 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.64 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.64 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.64 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.64 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.64 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.64 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.64 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.64 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.64 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.64 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.65 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.65 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.65 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.65 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.65 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.65 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.65 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.65 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.65 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.65 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.65 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.65 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.65 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.65 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.65 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.65 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.65 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.65 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.65 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.65 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.65 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.65 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.65 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.65 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.65 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.65 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.65 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.65 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.65 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.65 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.65 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.65 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.65 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.65 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.65 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.65 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.65 /testbed/sympy/core/add.py(825):         sargs = self.args
0.65 /testbed/sympy/core/add.py(826):         re_part, im_part = [], []
0.65 /testbed/sympy/core/add.py(827):         for term in sargs:
0.65 /testbed/sympy/core/add.py(828):             re, im = term.as_real_imag(deep=deep)
0.65 /testbed/sympy/core/add.py(829):             re_part.append(re)
0.65 /testbed/sympy/core/add.py(830):             im_part.append(im)
0.65 /testbed/sympy/core/add.py(827):         for term in sargs:
0.65 /testbed/sympy/core/add.py(828):             re, im = term.as_real_imag(deep=deep)
0.65 /testbed/sympy/core/add.py(829):             re_part.append(re)
0.65 /testbed/sympy/core/add.py(830):             im_part.append(im)
0.65 /testbed/sympy/core/add.py(827):         for term in sargs:
0.65 /testbed/sympy/core/add.py(831):         return (self.func(*re_part), self.func(*im_part))
0.65 /testbed/sympy/core/add.py(96):         from sympy.calculus.util import AccumBounds
0.65 /testbed/sympy/core/add.py(97):         from sympy.matrices.expressions import MatrixExpr
0.65 /testbed/sympy/core/add.py(98):         from sympy.tensor.tensor import TensExpr
0.65 /testbed/sympy/core/add.py(99):         rv = None
0.65 /testbed/sympy/core/add.py(100):         if len(seq) == 2:
0.65 /testbed/sympy/core/add.py(101):             a, b = seq
0.65 /testbed/sympy/core/add.py(102):             if b.is_Rational:
0.65 /testbed/sympy/core/add.py(103):                 a, b = b, a
0.65 /testbed/sympy/core/add.py(104):             if a.is_Rational:
0.65 /testbed/sympy/core/add.py(105):                 if b.is_Mul:
0.65 /testbed/sympy/core/add.py(107):             if rv:
0.65 /testbed/sympy/core/add.py(112):         terms = {}      # term -> coeff
0.65 /testbed/sympy/core/add.py(115):         coeff = S.Zero  # coefficient (Number or zoo) to always be in slot 0
0.65 /testbed/sympy/core/add.py(117):         order_factors = []
0.65 /testbed/sympy/core/add.py(119):         for o in seq:
0.65 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.65 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.65 /testbed/sympy/core/add.py(135):                 if (o is S.NaN or coeff is S.ComplexInfinity and
0.65 /testbed/sympy/core/add.py(139):                 if coeff.is_Number:
0.65 /testbed/sympy/core/add.py(140):                     coeff += o
0.65 /testbed/sympy/core/add.py(141):                     if coeff is S.NaN:
0.65 /testbed/sympy/core/add.py(119):         for o in seq:
0.65 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.65 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.65 /testbed/sympy/core/add.py(135):                 if (o is S.NaN or coeff is S.ComplexInfinity and
0.65 /testbed/sympy/core/add.py(139):                 if coeff.is_Number:
0.65 /testbed/sympy/core/add.py(140):                     coeff += o
0.65 /testbed/sympy/core/add.py(141):                     if coeff is S.NaN:
0.65 /testbed/sympy/core/add.py(119):         for o in seq:
0.65 /testbed/sympy/core/add.py(207):         newseq = []
0.65 /testbed/sympy/core/add.py(208):         noncommutative = False
0.65 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
0.65 /testbed/sympy/core/add.py(233):         if coeff is S.Infinity:
0.65 /testbed/sympy/core/add.py(237):         elif coeff is S.NegativeInfinity:
0.65 /testbed/sympy/core/add.py(241):         if coeff is S.ComplexInfinity:
0.65 /testbed/sympy/core/add.py(254):         if order_factors:
0.65 /testbed/sympy/core/add.py(273):         _addsort(newseq)
0.65 /testbed/sympy/core/add.py(21):     args.sort(key=_args_sortkey)
0.65 /testbed/sympy/core/add.py(276):         if coeff is not S.Zero:
0.65 /testbed/sympy/core/add.py(280):         if noncommutative:
0.65 /testbed/sympy/core/add.py(283):             return newseq, [], None
0.65 /testbed/sympy/core/add.py(528):             return fuzzy_not(self.func(*im_I).is_zero)
0.65 /testbed/sympy/core/add.py(490):     _eval_is_real = lambda self: _fuzzy_group(
0.65 /testbed/sympy/core/add.py(491):         (a.is_real for a in self.args), quick_exit=True)
0.65 /testbed/sympy/core/add.py(490):     _eval_is_real = lambda self: _fuzzy_group(
0.65 /testbed/sympy/core/add.py(491):         (a.is_real for a in self.args), quick_exit=True)
0.65 /testbed/sympy/core/add.py(491):         (a.is_real for a in self.args), quick_exit=True)
0.65 /testbed/sympy/core/add.py(491):         (a.is_real for a in self.args), quick_exit=True)
0.65 /testbed/sympy/core/add.py(589):         from sympy.core.exprtools import _monotonic_sign
0.65 /testbed/sympy/core/add.py(590):         if self.is_number:
0.65 /testbed/sympy/core/add.py(591):             return super(Add, self)._eval_is_positive()
0.65 /testbed/sympy/core/add.py(96):         from sympy.calculus.util import AccumBounds
0.65 /testbed/sympy/core/add.py(97):         from sympy.matrices.expressions import MatrixExpr
0.65 /testbed/sympy/core/add.py(98):         from sympy.tensor.tensor import TensExpr
0.65 /testbed/sympy/core/add.py(99):         rv = None
0.65 /testbed/sympy/core/add.py(100):         if len(seq) == 2:
0.65 /testbed/sympy/core/add.py(101):             a, b = seq
0.65 /testbed/sympy/core/add.py(102):             if b.is_Rational:
0.65 /testbed/sympy/core/add.py(104):             if a.is_Rational:
0.65 /testbed/sympy/core/add.py(105):                 if b.is_Mul:
0.65 /testbed/sympy/core/add.py(106):                     rv = [a, b], [], None
0.65 /testbed/sympy/core/add.py(107):             if rv:
0.65 /testbed/sympy/core/add.py(108):                 if all(s.is_commutative for s in rv[0]):
0.65 /testbed/sympy/core/add.py(108):                 if all(s.is_commutative for s in rv[0]):
0.65 /testbed/sympy/core/add.py(108):                 if all(s.is_commutative for s in rv[0]):
0.65 /testbed/sympy/core/add.py(108):                 if all(s.is_commutative for s in rv[0]):
0.65 /testbed/sympy/core/add.py(109):                     return rv
0.65 /testbed/sympy/core/add.py(53):     args = list(args)
0.65 /testbed/sympy/core/add.py(54):     newargs = []
0.65 /testbed/sympy/core/add.py(55):     co = S.Zero
0.65 /testbed/sympy/core/add.py(56):     while args:
0.65 /testbed/sympy/core/add.py(66):     _addsort(newargs)
0.65 /testbed/sympy/core/add.py(21):     args.sort(key=_args_sortkey)
0.65 /testbed/sympy/core/add.py(67):     if co:
0.65 /testbed/sympy/core/add.py(69):     return Add._from_args(newargs)
0.65 /testbed/sympy/core/add.py(363):         if e.is_Rational and self.is_number:
0.65 /testbed/sympy/core/add.py(364):             from sympy.core.evalf import pure_complex
0.65 /testbed/sympy/core/add.py(365):             from sympy.core.mul import _unevaluated_Mul
0.65 /testbed/sympy/core/add.py(366):             from sympy.core.exprtools import factor_terms
0.65 /testbed/sympy/core/add.py(367):             from sympy.core.function import expand_multinomial
0.65 /testbed/sympy/core/add.py(368):             from sympy.functions.elementary.complexes import sign
0.65 /testbed/sympy/core/add.py(369):             from sympy.functions.elementary.miscellaneous import sqrt
0.65 /testbed/sympy/core/add.py(370):             ri = pure_complex(self)
0.65 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.65 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.65 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.65 /testbed/sympy/core/add.py(371):             if ri:
0.65 /testbed/sympy/core/add.py(372):                 r, i = ri
0.65 /testbed/sympy/core/add.py(373):                 if e.q == 2:
0.65 /testbed/sympy/core/add.py(381):                 elif e == -1:
0.65 /testbed/sympy/core/add.py(96):         from sympy.calculus.util import AccumBounds
0.65 /testbed/sympy/core/add.py(97):         from sympy.matrices.expressions import MatrixExpr
0.65 /testbed/sympy/core/add.py(98):         from sympy.tensor.tensor import TensExpr
0.65 /testbed/sympy/core/add.py(99):         rv = None
0.65 /testbed/sympy/core/add.py(100):         if len(seq) == 2:
0.65 /testbed/sympy/core/add.py(101):             a, b = seq
0.65 /testbed/sympy/core/add.py(102):             if b.is_Rational:
0.65 /testbed/sympy/core/add.py(104):             if a.is_Rational:
0.65 /testbed/sympy/core/add.py(105):                 if b.is_Mul:
0.65 /testbed/sympy/core/add.py(107):             if rv:
0.65 /testbed/sympy/core/add.py(112):         terms = {}      # term -> coeff
0.65 /testbed/sympy/core/add.py(115):         coeff = S.Zero  # coefficient (Number or zoo) to always be in slot 0
0.65 /testbed/sympy/core/add.py(117):         order_factors = []
0.65 /testbed/sympy/core/add.py(119):         for o in seq:
0.65 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.65 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.65 /testbed/sympy/core/add.py(135):                 if (o is S.NaN or coeff is S.ComplexInfinity and
0.65 /testbed/sympy/core/add.py(139):                 if coeff.is_Number:
0.65 /testbed/sympy/core/add.py(140):                     coeff += o
0.65 /testbed/sympy/core/add.py(141):                     if coeff is S.NaN:
0.65 /testbed/sympy/core/add.py(119):         for o in seq:
0.65 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.65 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.65 /testbed/sympy/core/add.py(146):             elif isinstance(o, AccumBounds):
0.65 /testbed/sympy/core/add.py(150):             elif isinstance(o, MatrixExpr):
0.65 /testbed/sympy/core/add.py(155):             elif isinstance(o, TensExpr):
0.65 /testbed/sympy/core/add.py(159):             elif o is S.ComplexInfinity:
0.65 /testbed/sympy/core/add.py(167):             elif o.is_Add:
0.65 /testbed/sympy/core/add.py(173):             elif o.is_Mul:
0.65 /testbed/sympy/core/add.py(177):             elif o.is_Pow:
0.65 /testbed/sympy/core/add.py(187):                 c = S.One
0.65 /testbed/sympy/core/add.py(188):                 s = o
0.65 /testbed/sympy/core/add.py(197):             if s in terms:
0.65 /testbed/sympy/core/add.py(203):                 terms[s] = c
0.65 /testbed/sympy/core/add.py(119):         for o in seq:
0.65 /testbed/sympy/core/add.py(207):         newseq = []
0.65 /testbed/sympy/core/add.py(208):         noncommutative = False
0.65 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
0.65 /testbed/sympy/core/add.py(211):             if c is S.Zero:
0.65 /testbed/sympy/core/add.py(214):             elif c is S.One:
0.65 /testbed/sympy/core/add.py(215):                 newseq.append(s)
0.65 /testbed/sympy/core/add.py(230):             noncommutative = noncommutative or not s.is_commutative
0.65 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
0.65 /testbed/sympy/core/add.py(233):         if coeff is S.Infinity:
0.65 /testbed/sympy/core/add.py(237):         elif coeff is S.NegativeInfinity:
0.65 /testbed/sympy/core/add.py(241):         if coeff is S.ComplexInfinity:
0.65 /testbed/sympy/core/add.py(254):         if order_factors:
0.65 /testbed/sympy/core/add.py(273):         _addsort(newseq)
0.65 /testbed/sympy/core/add.py(21):     args.sort(key=_args_sortkey)
0.65 /testbed/sympy/core/add.py(276):         if coeff is not S.Zero:
0.65 /testbed/sympy/core/add.py(277):             newseq.insert(0, coeff)
0.65 /testbed/sympy/core/add.py(280):         if noncommutative:
0.65 /testbed/sympy/core/add.py(283):             return newseq, [], None
0.65 /testbed/sympy/core/add.py(53):     args = list(args)
0.65 /testbed/sympy/core/add.py(54):     newargs = []
0.65 /testbed/sympy/core/add.py(55):     co = S.Zero
0.65 /testbed/sympy/core/add.py(56):     while args:
0.65 /testbed/sympy/core/add.py(66):     _addsort(newargs)
0.65 /testbed/sympy/core/add.py(21):     args.sort(key=_args_sortkey)
0.65 /testbed/sympy/core/add.py(67):     if co:
0.65 /testbed/sympy/core/add.py(69):     return Add._from_args(newargs)
0.65 /testbed/sympy/core/add.py(96):         from sympy.calculus.util import AccumBounds
0.65 /testbed/sympy/core/add.py(97):         from sympy.matrices.expressions import MatrixExpr
0.65 /testbed/sympy/core/add.py(98):         from sympy.tensor.tensor import TensExpr
0.65 /testbed/sympy/core/add.py(99):         rv = None
0.65 /testbed/sympy/core/add.py(100):         if len(seq) == 2:
0.65 /testbed/sympy/core/add.py(101):             a, b = seq
0.65 /testbed/sympy/core/add.py(102):             if b.is_Rational:
0.65 /testbed/sympy/core/add.py(104):             if a.is_Rational:
0.65 /testbed/sympy/core/add.py(107):             if rv:
0.65 /testbed/sympy/core/add.py(112):         terms = {}      # term -> coeff
0.65 /testbed/sympy/core/add.py(115):         coeff = S.Zero  # coefficient (Number or zoo) to always be in slot 0
0.65 /testbed/sympy/core/add.py(117):         order_factors = []
0.65 /testbed/sympy/core/add.py(119):         for o in seq:
0.65 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.65 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.65 /testbed/sympy/core/add.py(135):                 if (o is S.NaN or coeff is S.ComplexInfinity and
0.65 /testbed/sympy/core/add.py(139):                 if coeff.is_Number:
0.65 /testbed/sympy/core/add.py(140):                     coeff += o
0.65 /testbed/sympy/core/add.py(141):                     if coeff is S.NaN:
0.65 /testbed/sympy/core/add.py(119):         for o in seq:
0.65 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.65 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.65 /testbed/sympy/core/add.py(146):             elif isinstance(o, AccumBounds):
0.65 /testbed/sympy/core/add.py(150):             elif isinstance(o, MatrixExpr):
0.65 /testbed/sympy/core/add.py(155):             elif isinstance(o, TensExpr):
0.65 /testbed/sympy/core/add.py(159):             elif o is S.ComplexInfinity:
0.65 /testbed/sympy/core/add.py(167):             elif o.is_Add:
0.65 /testbed/sympy/core/add.py(173):             elif o.is_Mul:
0.65 /testbed/sympy/core/add.py(177):             elif o.is_Pow:
0.65 /testbed/sympy/core/add.py(187):                 c = S.One
0.65 /testbed/sympy/core/add.py(188):                 s = o
0.65 /testbed/sympy/core/add.py(197):             if s in terms:
0.65 /testbed/sympy/core/add.py(203):                 terms[s] = c
0.65 /testbed/sympy/core/add.py(119):         for o in seq:
0.65 /testbed/sympy/core/add.py(207):         newseq = []
0.65 /testbed/sympy/core/add.py(208):         noncommutative = False
0.65 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
0.65 /testbed/sympy/core/add.py(211):             if c is S.Zero:
0.65 /testbed/sympy/core/add.py(214):             elif c is S.One:
0.65 /testbed/sympy/core/add.py(215):                 newseq.append(s)
0.65 /testbed/sympy/core/add.py(230):             noncommutative = noncommutative or not s.is_commutative
0.65 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
0.65 /testbed/sympy/core/add.py(233):         if coeff is S.Infinity:
0.65 /testbed/sympy/core/add.py(237):         elif coeff is S.NegativeInfinity:
0.65 /testbed/sympy/core/add.py(241):         if coeff is S.ComplexInfinity:
0.65 /testbed/sympy/core/add.py(254):         if order_factors:
0.65 /testbed/sympy/core/add.py(273):         _addsort(newseq)
0.65 /testbed/sympy/core/add.py(21):     args.sort(key=_args_sortkey)
0.65 /testbed/sympy/core/add.py(276):         if coeff is not S.Zero:
0.65 /testbed/sympy/core/add.py(277):             newseq.insert(0, coeff)
0.65 /testbed/sympy/core/add.py(280):         if noncommutative:
0.65 /testbed/sympy/core/add.py(283):             return newseq, [], None
0.65 /testbed/sympy/core/add.py(363):         if e.is_Rational and self.is_number:
0.65 /testbed/sympy/core/add.py(364):             from sympy.core.evalf import pure_complex
0.65 /testbed/sympy/core/add.py(365):             from sympy.core.mul import _unevaluated_Mul
0.65 /testbed/sympy/core/add.py(366):             from sympy.core.exprtools import factor_terms
0.65 /testbed/sympy/core/add.py(367):             from sympy.core.function import expand_multinomial
0.65 /testbed/sympy/core/add.py(368):             from sympy.functions.elementary.complexes import sign
0.65 /testbed/sympy/core/add.py(369):             from sympy.functions.elementary.miscellaneous import sqrt
0.65 /testbed/sympy/core/add.py(370):             ri = pure_complex(self)
0.65 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.65 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.65 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.65 /testbed/sympy/core/add.py(371):             if ri:
0.65 /testbed/sympy/core/add.py(372):                 r, i = ri
0.65 /testbed/sympy/core/add.py(373):                 if e.q == 2:
0.65 /testbed/sympy/core/add.py(381):                 elif e == -1:
0.65 /testbed/sympy/core/add.py(363):         if e.is_Rational and self.is_number:
0.65 /testbed/sympy/core/add.py(364):             from sympy.core.evalf import pure_complex
0.65 /testbed/sympy/core/add.py(365):             from sympy.core.mul import _unevaluated_Mul
0.65 /testbed/sympy/core/add.py(366):             from sympy.core.exprtools import factor_terms
0.65 /testbed/sympy/core/add.py(367):             from sympy.core.function import expand_multinomial
0.65 /testbed/sympy/core/add.py(368):             from sympy.functions.elementary.complexes import sign
0.65 /testbed/sympy/core/add.py(369):             from sympy.functions.elementary.miscellaneous import sqrt
0.65 /testbed/sympy/core/add.py(370):             ri = pure_complex(self)
0.65 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.65 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.65 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.65 /testbed/sympy/core/add.py(371):             if ri:
0.65 /testbed/sympy/core/add.py(372):                 r, i = ri
0.65 /testbed/sympy/core/add.py(373):                 if e.q == 2:
0.65 /testbed/sympy/core/add.py(381):                 elif e == -1:
0.65 /testbed/sympy/core/add.py(825):         sargs = self.args
0.65 /testbed/sympy/core/add.py(826):         re_part, im_part = [], []
0.65 /testbed/sympy/core/add.py(827):         for term in sargs:
0.65 /testbed/sympy/core/add.py(828):             re, im = term.as_real_imag(deep=deep)
0.65 /testbed/sympy/core/add.py(829):             re_part.append(re)
0.65 /testbed/sympy/core/add.py(830):             im_part.append(im)
0.65 /testbed/sympy/core/add.py(827):         for term in sargs:
0.65 /testbed/sympy/core/add.py(828):             re, im = term.as_real_imag(deep=deep)
0.65 /testbed/sympy/core/add.py(829):             re_part.append(re)
0.65 /testbed/sympy/core/add.py(830):             im_part.append(im)
0.65 /testbed/sympy/core/add.py(827):         for term in sargs:
0.65 /testbed/sympy/core/add.py(831):         return (self.func(*re_part), self.func(*im_part))
0.65 /testbed/sympy/core/add.py(96):         from sympy.calculus.util import AccumBounds
0.65 /testbed/sympy/core/add.py(97):         from sympy.matrices.expressions import MatrixExpr
0.65 /testbed/sympy/core/add.py(98):         from sympy.tensor.tensor import TensExpr
0.65 /testbed/sympy/core/add.py(99):         rv = None
0.65 /testbed/sympy/core/add.py(100):         if len(seq) == 2:
0.65 /testbed/sympy/core/add.py(112):         terms = {}      # term -> coeff
0.65 /testbed/sympy/core/add.py(115):         coeff = S.Zero  # coefficient (Number or zoo) to always be in slot 0
0.65 /testbed/sympy/core/add.py(117):         order_factors = []
0.65 /testbed/sympy/core/add.py(119):         for o in seq:
0.65 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.65 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.65 /testbed/sympy/core/add.py(135):                 if (o is S.NaN or coeff is S.ComplexInfinity and
0.65 /testbed/sympy/core/add.py(139):                 if coeff.is_Number:
0.65 /testbed/sympy/core/add.py(140):                     coeff += o
0.65 /testbed/sympy/core/add.py(141):                     if coeff is S.NaN:
0.65 /testbed/sympy/core/add.py(119):         for o in seq:
0.65 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.65 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.65 /testbed/sympy/core/add.py(135):                 if (o is S.NaN or coeff is S.ComplexInfinity and
0.65 /testbed/sympy/core/add.py(139):                 if coeff.is_Number:
0.65 /testbed/sympy/core/add.py(140):                     coeff += o
0.65 /testbed/sympy/core/add.py(141):                     if coeff is S.NaN:
0.65 /testbed/sympy/core/add.py(119):         for o in seq:
0.65 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.65 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.65 /testbed/sympy/core/add.py(146):             elif isinstance(o, AccumBounds):
0.65 /testbed/sympy/core/add.py(150):             elif isinstance(o, MatrixExpr):
0.65 /testbed/sympy/core/add.py(155):             elif isinstance(o, TensExpr):
0.65 /testbed/sympy/core/add.py(159):             elif o is S.ComplexInfinity:
0.65 /testbed/sympy/core/add.py(167):             elif o.is_Add:
0.65 /testbed/sympy/core/add.py(173):             elif o.is_Mul:
0.65 /testbed/sympy/core/add.py(174):                 c, s = o.as_coeff_Mul()
0.65 /testbed/sympy/core/add.py(197):             if s in terms:
0.65 /testbed/sympy/core/add.py(203):                 terms[s] = c
0.65 /testbed/sympy/core/add.py(119):         for o in seq:
0.65 /testbed/sympy/core/add.py(207):         newseq = []
0.65 /testbed/sympy/core/add.py(208):         noncommutative = False
0.65 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
0.65 /testbed/sympy/core/add.py(211):             if c is S.Zero:
0.65 /testbed/sympy/core/add.py(214):             elif c is S.One:
0.65 /testbed/sympy/core/add.py(218):                 if s.is_Mul:
0.65 /testbed/sympy/core/add.py(223):                 elif s.is_Add:
0.65 /testbed/sympy/core/add.py(228):                     newseq.append(Mul(c, s))
0.65 /testbed/sympy/core/add.py(230):             noncommutative = noncommutative or not s.is_commutative
0.65 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
0.65 /testbed/sympy/core/add.py(233):         if coeff is S.Infinity:
0.65 /testbed/sympy/core/add.py(237):         elif coeff is S.NegativeInfinity:
0.65 /testbed/sympy/core/add.py(241):         if coeff is S.ComplexInfinity:
0.65 /testbed/sympy/core/add.py(254):         if order_factors:
0.65 /testbed/sympy/core/add.py(273):         _addsort(newseq)
0.65 /testbed/sympy/core/add.py(21):     args.sort(key=_args_sortkey)
0.65 /testbed/sympy/core/add.py(276):         if coeff is not S.Zero:
0.65 /testbed/sympy/core/add.py(280):         if noncommutative:
0.65 /testbed/sympy/core/add.py(283):             return newseq, [], None
0.65 /testbed/sympy/core/add.py(96):         from sympy.calculus.util import AccumBounds
0.65 /testbed/sympy/core/add.py(97):         from sympy.matrices.expressions import MatrixExpr
0.65 /testbed/sympy/core/add.py(98):         from sympy.tensor.tensor import TensExpr
0.65 /testbed/sympy/core/add.py(99):         rv = None
0.65 /testbed/sympy/core/add.py(100):         if len(seq) == 2:
0.65 /testbed/sympy/core/add.py(101):             a, b = seq
0.65 /testbed/sympy/core/add.py(102):             if b.is_Rational:
0.65 /testbed/sympy/core/add.py(104):             if a.is_Rational:
0.65 /testbed/sympy/core/add.py(107):             if rv:
0.65 /testbed/sympy/core/add.py(112):         terms = {}      # term -> coeff
0.65 /testbed/sympy/core/add.py(115):         coeff = S.Zero  # coefficient (Number or zoo) to always be in slot 0
0.65 /testbed/sympy/core/add.py(117):         order_factors = []
0.65 /testbed/sympy/core/add.py(119):         for o in seq:
0.65 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.65 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.65 /testbed/sympy/core/add.py(135):                 if (o is S.NaN or coeff is S.ComplexInfinity and
0.65 /testbed/sympy/core/add.py(139):                 if coeff.is_Number:
0.65 /testbed/sympy/core/add.py(140):                     coeff += o
0.65 /testbed/sympy/core/add.py(141):                     if coeff is S.NaN:
0.65 /testbed/sympy/core/add.py(119):         for o in seq:
0.65 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.65 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.65 /testbed/sympy/core/add.py(135):                 if (o is S.NaN or coeff is S.ComplexInfinity and
0.65 /testbed/sympy/core/add.py(139):                 if coeff.is_Number:
0.65 /testbed/sympy/core/add.py(140):                     coeff += o
0.65 /testbed/sympy/core/add.py(141):                     if coeff is S.NaN:
0.65 /testbed/sympy/core/add.py(119):         for o in seq:
0.65 /testbed/sympy/core/add.py(207):         newseq = []
0.65 /testbed/sympy/core/add.py(208):         noncommutative = False
0.65 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
0.65 /testbed/sympy/core/add.py(233):         if coeff is S.Infinity:
0.65 /testbed/sympy/core/add.py(237):         elif coeff is S.NegativeInfinity:
0.65 /testbed/sympy/core/add.py(241):         if coeff is S.ComplexInfinity:
0.65 /testbed/sympy/core/add.py(254):         if order_factors:
0.65 /testbed/sympy/core/add.py(273):         _addsort(newseq)
0.65 /testbed/sympy/core/add.py(21):     args.sort(key=_args_sortkey)
0.65 /testbed/sympy/core/add.py(276):         if coeff is not S.Zero:
0.65 /testbed/sympy/core/add.py(280):         if noncommutative:
0.65 /testbed/sympy/core/add.py(283):             return newseq, [], None
0.65 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.65 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.65 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.65 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.65 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.65 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.65 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.65 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.65 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.65 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.65 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.65 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.65 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.65 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.65 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.65 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.65 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.65 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.65 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.65 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.65 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.65 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.65 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.65 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.65 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.65 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.65 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.65 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.65 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.65 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.65 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.65 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.65 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.66 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.66 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.66 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.66 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.66 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.66 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.66 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.66 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.66 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.66 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.66 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.66 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.66 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.66 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.66 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.66 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.66 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.66 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.66 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.66 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.66 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.66 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.66 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.66 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.66 /testbed/sympy/core/add.py(825):         sargs = self.args
0.66 /testbed/sympy/core/add.py(826):         re_part, im_part = [], []
0.66 /testbed/sympy/core/add.py(827):         for term in sargs:
0.66 /testbed/sympy/core/add.py(828):             re, im = term.as_real_imag(deep=deep)
0.66 /testbed/sympy/core/add.py(829):             re_part.append(re)
0.66 /testbed/sympy/core/add.py(830):             im_part.append(im)
0.66 /testbed/sympy/core/add.py(827):         for term in sargs:
0.66 /testbed/sympy/core/add.py(828):             re, im = term.as_real_imag(deep=deep)
0.66 /testbed/sympy/core/add.py(829):             re_part.append(re)
0.66 /testbed/sympy/core/add.py(830):             im_part.append(im)
0.66 /testbed/sympy/core/add.py(827):         for term in sargs:
0.66 /testbed/sympy/core/add.py(831):         return (self.func(*re_part), self.func(*im_part))
0.66 /testbed/sympy/core/add.py(96):         from sympy.calculus.util import AccumBounds
0.66 /testbed/sympy/core/add.py(97):         from sympy.matrices.expressions import MatrixExpr
0.66 /testbed/sympy/core/add.py(98):         from sympy.tensor.tensor import TensExpr
0.66 /testbed/sympy/core/add.py(99):         rv = None
0.66 /testbed/sympy/core/add.py(100):         if len(seq) == 2:
0.66 /testbed/sympy/core/add.py(101):             a, b = seq
0.66 /testbed/sympy/core/add.py(102):             if b.is_Rational:
0.66 /testbed/sympy/core/add.py(103):                 a, b = b, a
0.66 /testbed/sympy/core/add.py(104):             if a.is_Rational:
0.66 /testbed/sympy/core/add.py(105):                 if b.is_Mul:
0.66 /testbed/sympy/core/add.py(107):             if rv:
0.66 /testbed/sympy/core/add.py(112):         terms = {}      # term -> coeff
0.66 /testbed/sympy/core/add.py(115):         coeff = S.Zero  # coefficient (Number or zoo) to always be in slot 0
0.66 /testbed/sympy/core/add.py(117):         order_factors = []
0.66 /testbed/sympy/core/add.py(119):         for o in seq:
0.66 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.66 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.66 /testbed/sympy/core/add.py(135):                 if (o is S.NaN or coeff is S.ComplexInfinity and
0.66 /testbed/sympy/core/add.py(139):                 if coeff.is_Number:
0.66 /testbed/sympy/core/add.py(140):                     coeff += o
0.66 /testbed/sympy/core/add.py(141):                     if coeff is S.NaN:
0.66 /testbed/sympy/core/add.py(119):         for o in seq:
0.66 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.66 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.66 /testbed/sympy/core/add.py(135):                 if (o is S.NaN or coeff is S.ComplexInfinity and
0.66 /testbed/sympy/core/add.py(139):                 if coeff.is_Number:
0.66 /testbed/sympy/core/add.py(140):                     coeff += o
0.66 /testbed/sympy/core/add.py(141):                     if coeff is S.NaN:
0.66 /testbed/sympy/core/add.py(119):         for o in seq:
0.66 /testbed/sympy/core/add.py(207):         newseq = []
0.66 /testbed/sympy/core/add.py(208):         noncommutative = False
0.66 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
0.66 /testbed/sympy/core/add.py(233):         if coeff is S.Infinity:
0.66 /testbed/sympy/core/add.py(237):         elif coeff is S.NegativeInfinity:
0.66 /testbed/sympy/core/add.py(241):         if coeff is S.ComplexInfinity:
0.66 /testbed/sympy/core/add.py(254):         if order_factors:
0.66 /testbed/sympy/core/add.py(273):         _addsort(newseq)
0.66 /testbed/sympy/core/add.py(21):     args.sort(key=_args_sortkey)
0.66 /testbed/sympy/core/add.py(276):         if coeff is not S.Zero:
0.66 /testbed/sympy/core/add.py(280):         if noncommutative:
0.66 /testbed/sympy/core/add.py(283):             return newseq, [], None
0.66 /testbed/sympy/core/add.py(643):         from sympy.core.exprtools import _monotonic_sign
0.66 /testbed/sympy/core/add.py(644):         if not self.is_number:
0.66 /testbed/sympy/core/add.py(673):         from sympy.core.exprtools import _monotonic_sign
0.66 /testbed/sympy/core/add.py(674):         if self.is_number:
0.66 /testbed/sympy/core/add.py(675):             return super(Add, self)._eval_is_negative()
0.66 /testbed/sympy/core/add.py(96):         from sympy.calculus.util import AccumBounds
0.66 /testbed/sympy/core/add.py(97):         from sympy.matrices.expressions import MatrixExpr
0.66 /testbed/sympy/core/add.py(98):         from sympy.tensor.tensor import TensExpr
0.66 /testbed/sympy/core/add.py(99):         rv = None
0.66 /testbed/sympy/core/add.py(100):         if len(seq) == 2:
0.66 /testbed/sympy/core/add.py(101):             a, b = seq
0.66 /testbed/sympy/core/add.py(102):             if b.is_Rational:
0.66 /testbed/sympy/core/add.py(104):             if a.is_Rational:
0.66 /testbed/sympy/core/add.py(105):                 if b.is_Mul:
0.66 /testbed/sympy/core/add.py(106):                     rv = [a, b], [], None
0.66 /testbed/sympy/core/add.py(107):             if rv:
0.66 /testbed/sympy/core/add.py(108):                 if all(s.is_commutative for s in rv[0]):
0.66 /testbed/sympy/core/add.py(108):                 if all(s.is_commutative for s in rv[0]):
0.66 /testbed/sympy/core/add.py(108):                 if all(s.is_commutative for s in rv[0]):
0.66 /testbed/sympy/core/add.py(108):                 if all(s.is_commutative for s in rv[0]):
0.66 /testbed/sympy/core/add.py(109):                     return rv
0.66 /testbed/sympy/core/add.py(53):     args = list(args)
0.66 /testbed/sympy/core/add.py(54):     newargs = []
0.66 /testbed/sympy/core/add.py(55):     co = S.Zero
0.66 /testbed/sympy/core/add.py(56):     while args:
0.66 /testbed/sympy/core/add.py(66):     _addsort(newargs)
0.66 /testbed/sympy/core/add.py(21):     args.sort(key=_args_sortkey)
0.66 /testbed/sympy/core/add.py(67):     if co:
0.66 /testbed/sympy/core/add.py(69):     return Add._from_args(newargs)
0.66 /testbed/sympy/core/add.py(363):         if e.is_Rational and self.is_number:
0.66 /testbed/sympy/core/add.py(364):             from sympy.core.evalf import pure_complex
0.66 /testbed/sympy/core/add.py(365):             from sympy.core.mul import _unevaluated_Mul
0.66 /testbed/sympy/core/add.py(366):             from sympy.core.exprtools import factor_terms
0.66 /testbed/sympy/core/add.py(367):             from sympy.core.function import expand_multinomial
0.66 /testbed/sympy/core/add.py(368):             from sympy.functions.elementary.complexes import sign
0.66 /testbed/sympy/core/add.py(369):             from sympy.functions.elementary.miscellaneous import sqrt
0.66 /testbed/sympy/core/add.py(370):             ri = pure_complex(self)
0.66 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.66 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.66 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.66 /testbed/sympy/core/add.py(371):             if ri:
0.66 /testbed/sympy/core/add.py(372):                 r, i = ri
0.66 /testbed/sympy/core/add.py(373):                 if e.q == 2:
0.66 /testbed/sympy/core/add.py(381):                 elif e == -1:
0.66 /testbed/sympy/core/add.py(96):         from sympy.calculus.util import AccumBounds
0.66 /testbed/sympy/core/add.py(97):         from sympy.matrices.expressions import MatrixExpr
0.66 /testbed/sympy/core/add.py(98):         from sympy.tensor.tensor import TensExpr
0.66 /testbed/sympy/core/add.py(99):         rv = None
0.66 /testbed/sympy/core/add.py(100):         if len(seq) == 2:
0.66 /testbed/sympy/core/add.py(101):             a, b = seq
0.66 /testbed/sympy/core/add.py(102):             if b.is_Rational:
0.66 /testbed/sympy/core/add.py(104):             if a.is_Rational:
0.66 /testbed/sympy/core/add.py(105):                 if b.is_Mul:
0.66 /testbed/sympy/core/add.py(107):             if rv:
0.66 /testbed/sympy/core/add.py(112):         terms = {}      # term -> coeff
0.66 /testbed/sympy/core/add.py(115):         coeff = S.Zero  # coefficient (Number or zoo) to always be in slot 0
0.66 /testbed/sympy/core/add.py(117):         order_factors = []
0.66 /testbed/sympy/core/add.py(119):         for o in seq:
0.66 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.66 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.66 /testbed/sympy/core/add.py(135):                 if (o is S.NaN or coeff is S.ComplexInfinity and
0.66 /testbed/sympy/core/add.py(139):                 if coeff.is_Number:
0.66 /testbed/sympy/core/add.py(140):                     coeff += o
0.66 /testbed/sympy/core/add.py(141):                     if coeff is S.NaN:
0.66 /testbed/sympy/core/add.py(119):         for o in seq:
0.66 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.66 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.66 /testbed/sympy/core/add.py(146):             elif isinstance(o, AccumBounds):
0.66 /testbed/sympy/core/add.py(150):             elif isinstance(o, MatrixExpr):
0.66 /testbed/sympy/core/add.py(155):             elif isinstance(o, TensExpr):
0.66 /testbed/sympy/core/add.py(159):             elif o is S.ComplexInfinity:
0.66 /testbed/sympy/core/add.py(167):             elif o.is_Add:
0.66 /testbed/sympy/core/add.py(173):             elif o.is_Mul:
0.66 /testbed/sympy/core/add.py(177):             elif o.is_Pow:
0.66 /testbed/sympy/core/add.py(187):                 c = S.One
0.66 /testbed/sympy/core/add.py(188):                 s = o
0.66 /testbed/sympy/core/add.py(197):             if s in terms:
0.66 /testbed/sympy/core/add.py(203):                 terms[s] = c
0.66 /testbed/sympy/core/add.py(119):         for o in seq:
0.66 /testbed/sympy/core/add.py(207):         newseq = []
0.66 /testbed/sympy/core/add.py(208):         noncommutative = False
0.66 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
0.66 /testbed/sympy/core/add.py(211):             if c is S.Zero:
0.66 /testbed/sympy/core/add.py(214):             elif c is S.One:
0.66 /testbed/sympy/core/add.py(215):                 newseq.append(s)
0.66 /testbed/sympy/core/add.py(230):             noncommutative = noncommutative or not s.is_commutative
0.66 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
0.66 /testbed/sympy/core/add.py(233):         if coeff is S.Infinity:
0.66 /testbed/sympy/core/add.py(237):         elif coeff is S.NegativeInfinity:
0.66 /testbed/sympy/core/add.py(241):         if coeff is S.ComplexInfinity:
0.66 /testbed/sympy/core/add.py(254):         if order_factors:
0.66 /testbed/sympy/core/add.py(273):         _addsort(newseq)
0.66 /testbed/sympy/core/add.py(21):     args.sort(key=_args_sortkey)
0.66 /testbed/sympy/core/add.py(276):         if coeff is not S.Zero:
0.66 /testbed/sympy/core/add.py(277):             newseq.insert(0, coeff)
0.66 /testbed/sympy/core/add.py(280):         if noncommutative:
0.66 /testbed/sympy/core/add.py(283):             return newseq, [], None
0.66 /testbed/sympy/core/add.py(53):     args = list(args)
0.66 /testbed/sympy/core/add.py(54):     newargs = []
0.66 /testbed/sympy/core/add.py(55):     co = S.Zero
0.66 /testbed/sympy/core/add.py(56):     while args:
0.66 /testbed/sympy/core/add.py(66):     _addsort(newargs)
0.66 /testbed/sympy/core/add.py(21):     args.sort(key=_args_sortkey)
0.66 /testbed/sympy/core/add.py(67):     if co:
0.66 /testbed/sympy/core/add.py(69):     return Add._from_args(newargs)
0.66 /testbed/sympy/core/add.py(96):         from sympy.calculus.util import AccumBounds
0.66 /testbed/sympy/core/add.py(97):         from sympy.matrices.expressions import MatrixExpr
0.66 /testbed/sympy/core/add.py(98):         from sympy.tensor.tensor import TensExpr
0.66 /testbed/sympy/core/add.py(99):         rv = None
0.66 /testbed/sympy/core/add.py(100):         if len(seq) == 2:
0.66 /testbed/sympy/core/add.py(101):             a, b = seq
0.66 /testbed/sympy/core/add.py(102):             if b.is_Rational:
0.66 /testbed/sympy/core/add.py(104):             if a.is_Rational:
0.66 /testbed/sympy/core/add.py(107):             if rv:
0.66 /testbed/sympy/core/add.py(112):         terms = {}      # term -> coeff
0.66 /testbed/sympy/core/add.py(115):         coeff = S.Zero  # coefficient (Number or zoo) to always be in slot 0
0.66 /testbed/sympy/core/add.py(117):         order_factors = []
0.66 /testbed/sympy/core/add.py(119):         for o in seq:
0.66 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.66 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.66 /testbed/sympy/core/add.py(135):                 if (o is S.NaN or coeff is S.ComplexInfinity and
0.66 /testbed/sympy/core/add.py(139):                 if coeff.is_Number:
0.66 /testbed/sympy/core/add.py(140):                     coeff += o
0.66 /testbed/sympy/core/add.py(141):                     if coeff is S.NaN:
0.66 /testbed/sympy/core/add.py(119):         for o in seq:
0.66 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.66 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.66 /testbed/sympy/core/add.py(146):             elif isinstance(o, AccumBounds):
0.66 /testbed/sympy/core/add.py(150):             elif isinstance(o, MatrixExpr):
0.66 /testbed/sympy/core/add.py(155):             elif isinstance(o, TensExpr):
0.66 /testbed/sympy/core/add.py(159):             elif o is S.ComplexInfinity:
0.66 /testbed/sympy/core/add.py(167):             elif o.is_Add:
0.66 /testbed/sympy/core/add.py(173):             elif o.is_Mul:
0.66 /testbed/sympy/core/add.py(177):             elif o.is_Pow:
0.66 /testbed/sympy/core/add.py(187):                 c = S.One
0.66 /testbed/sympy/core/add.py(188):                 s = o
0.66 /testbed/sympy/core/add.py(197):             if s in terms:
0.66 /testbed/sympy/core/add.py(203):                 terms[s] = c
0.66 /testbed/sympy/core/add.py(119):         for o in seq:
0.66 /testbed/sympy/core/add.py(207):         newseq = []
0.66 /testbed/sympy/core/add.py(208):         noncommutative = False
0.66 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
0.66 /testbed/sympy/core/add.py(211):             if c is S.Zero:
0.66 /testbed/sympy/core/add.py(214):             elif c is S.One:
0.66 /testbed/sympy/core/add.py(215):                 newseq.append(s)
0.66 /testbed/sympy/core/add.py(230):             noncommutative = noncommutative or not s.is_commutative
0.66 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
0.66 /testbed/sympy/core/add.py(233):         if coeff is S.Infinity:
0.66 /testbed/sympy/core/add.py(237):         elif coeff is S.NegativeInfinity:
0.66 /testbed/sympy/core/add.py(241):         if coeff is S.ComplexInfinity:
0.66 /testbed/sympy/core/add.py(254):         if order_factors:
0.66 /testbed/sympy/core/add.py(273):         _addsort(newseq)
0.66 /testbed/sympy/core/add.py(21):     args.sort(key=_args_sortkey)
0.66 /testbed/sympy/core/add.py(276):         if coeff is not S.Zero:
0.66 /testbed/sympy/core/add.py(277):             newseq.insert(0, coeff)
0.66 /testbed/sympy/core/add.py(280):         if noncommutative:
0.66 /testbed/sympy/core/add.py(283):             return newseq, [], None
0.66 /testbed/sympy/core/add.py(363):         if e.is_Rational and self.is_number:
0.66 /testbed/sympy/core/add.py(364):             from sympy.core.evalf import pure_complex
0.66 /testbed/sympy/core/add.py(365):             from sympy.core.mul import _unevaluated_Mul
0.66 /testbed/sympy/core/add.py(366):             from sympy.core.exprtools import factor_terms
0.66 /testbed/sympy/core/add.py(367):             from sympy.core.function import expand_multinomial
0.66 /testbed/sympy/core/add.py(368):             from sympy.functions.elementary.complexes import sign
0.66 /testbed/sympy/core/add.py(369):             from sympy.functions.elementary.miscellaneous import sqrt
0.66 /testbed/sympy/core/add.py(370):             ri = pure_complex(self)
0.66 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.66 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.66 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.66 /testbed/sympy/core/add.py(371):             if ri:
0.66 /testbed/sympy/core/add.py(372):                 r, i = ri
0.66 /testbed/sympy/core/add.py(373):                 if e.q == 2:
0.66 /testbed/sympy/core/add.py(381):                 elif e == -1:
0.66 /testbed/sympy/core/add.py(363):         if e.is_Rational and self.is_number:
0.66 /testbed/sympy/core/add.py(364):             from sympy.core.evalf import pure_complex
0.66 /testbed/sympy/core/add.py(365):             from sympy.core.mul import _unevaluated_Mul
0.66 /testbed/sympy/core/add.py(366):             from sympy.core.exprtools import factor_terms
0.66 /testbed/sympy/core/add.py(367):             from sympy.core.function import expand_multinomial
0.66 /testbed/sympy/core/add.py(368):             from sympy.functions.elementary.complexes import sign
0.66 /testbed/sympy/core/add.py(369):             from sympy.functions.elementary.miscellaneous import sqrt
0.66 /testbed/sympy/core/add.py(370):             ri = pure_complex(self)
0.66 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.66 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.66 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.66 /testbed/sympy/core/add.py(371):             if ri:
0.66 /testbed/sympy/core/add.py(372):                 r, i = ri
0.66 /testbed/sympy/core/add.py(373):                 if e.q == 2:
0.66 /testbed/sympy/core/add.py(381):                 elif e == -1:
0.66 /testbed/sympy/core/add.py(825):         sargs = self.args
0.66 /testbed/sympy/core/add.py(826):         re_part, im_part = [], []
0.66 /testbed/sympy/core/add.py(827):         for term in sargs:
0.66 /testbed/sympy/core/add.py(828):             re, im = term.as_real_imag(deep=deep)
0.66 /testbed/sympy/core/add.py(829):             re_part.append(re)
0.66 /testbed/sympy/core/add.py(830):             im_part.append(im)
0.66 /testbed/sympy/core/add.py(827):         for term in sargs:
0.66 /testbed/sympy/core/add.py(828):             re, im = term.as_real_imag(deep=deep)
0.66 /testbed/sympy/core/add.py(829):             re_part.append(re)
0.66 /testbed/sympy/core/add.py(830):             im_part.append(im)
0.66 /testbed/sympy/core/add.py(827):         for term in sargs:
0.66 /testbed/sympy/core/add.py(831):         return (self.func(*re_part), self.func(*im_part))
0.66 /testbed/sympy/core/add.py(96):         from sympy.calculus.util import AccumBounds
0.66 /testbed/sympy/core/add.py(97):         from sympy.matrices.expressions import MatrixExpr
0.66 /testbed/sympy/core/add.py(98):         from sympy.tensor.tensor import TensExpr
0.66 /testbed/sympy/core/add.py(99):         rv = None
0.66 /testbed/sympy/core/add.py(100):         if len(seq) == 2:
0.66 /testbed/sympy/core/add.py(112):         terms = {}      # term -> coeff
0.66 /testbed/sympy/core/add.py(115):         coeff = S.Zero  # coefficient (Number or zoo) to always be in slot 0
0.66 /testbed/sympy/core/add.py(117):         order_factors = []
0.66 /testbed/sympy/core/add.py(119):         for o in seq:
0.66 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.66 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.66 /testbed/sympy/core/add.py(135):                 if (o is S.NaN or coeff is S.ComplexInfinity and
0.66 /testbed/sympy/core/add.py(139):                 if coeff.is_Number:
0.66 /testbed/sympy/core/add.py(140):                     coeff += o
0.66 /testbed/sympy/core/add.py(141):                     if coeff is S.NaN:
0.66 /testbed/sympy/core/add.py(119):         for o in seq:
0.66 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.66 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.66 /testbed/sympy/core/add.py(135):                 if (o is S.NaN or coeff is S.ComplexInfinity and
0.66 /testbed/sympy/core/add.py(139):                 if coeff.is_Number:
0.66 /testbed/sympy/core/add.py(140):                     coeff += o
0.66 /testbed/sympy/core/add.py(141):                     if coeff is S.NaN:
0.66 /testbed/sympy/core/add.py(119):         for o in seq:
0.66 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.66 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.66 /testbed/sympy/core/add.py(146):             elif isinstance(o, AccumBounds):
0.66 /testbed/sympy/core/add.py(150):             elif isinstance(o, MatrixExpr):
0.66 /testbed/sympy/core/add.py(155):             elif isinstance(o, TensExpr):
0.66 /testbed/sympy/core/add.py(159):             elif o is S.ComplexInfinity:
0.66 /testbed/sympy/core/add.py(167):             elif o.is_Add:
0.66 /testbed/sympy/core/add.py(173):             elif o.is_Mul:
0.66 /testbed/sympy/core/add.py(174):                 c, s = o.as_coeff_Mul()
0.66 /testbed/sympy/core/add.py(197):             if s in terms:
0.66 /testbed/sympy/core/add.py(203):                 terms[s] = c
0.66 /testbed/sympy/core/add.py(119):         for o in seq:
0.66 /testbed/sympy/core/add.py(207):         newseq = []
0.66 /testbed/sympy/core/add.py(208):         noncommutative = False
0.66 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
0.66 /testbed/sympy/core/add.py(211):             if c is S.Zero:
0.66 /testbed/sympy/core/add.py(214):             elif c is S.One:
0.66 /testbed/sympy/core/add.py(218):                 if s.is_Mul:
0.66 /testbed/sympy/core/add.py(223):                 elif s.is_Add:
0.66 /testbed/sympy/core/add.py(228):                     newseq.append(Mul(c, s))
0.66 /testbed/sympy/core/add.py(230):             noncommutative = noncommutative or not s.is_commutative
0.66 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
0.66 /testbed/sympy/core/add.py(233):         if coeff is S.Infinity:
0.66 /testbed/sympy/core/add.py(237):         elif coeff is S.NegativeInfinity:
0.66 /testbed/sympy/core/add.py(241):         if coeff is S.ComplexInfinity:
0.66 /testbed/sympy/core/add.py(254):         if order_factors:
0.66 /testbed/sympy/core/add.py(273):         _addsort(newseq)
0.66 /testbed/sympy/core/add.py(21):     args.sort(key=_args_sortkey)
0.66 /testbed/sympy/core/add.py(276):         if coeff is not S.Zero:
0.66 /testbed/sympy/core/add.py(280):         if noncommutative:
0.66 /testbed/sympy/core/add.py(283):             return newseq, [], None
0.66 /testbed/sympy/core/add.py(96):         from sympy.calculus.util import AccumBounds
0.66 /testbed/sympy/core/add.py(97):         from sympy.matrices.expressions import MatrixExpr
0.66 /testbed/sympy/core/add.py(98):         from sympy.tensor.tensor import TensExpr
0.66 /testbed/sympy/core/add.py(99):         rv = None
0.66 /testbed/sympy/core/add.py(100):         if len(seq) == 2:
0.66 /testbed/sympy/core/add.py(101):             a, b = seq
0.66 /testbed/sympy/core/add.py(102):             if b.is_Rational:
0.66 /testbed/sympy/core/add.py(104):             if a.is_Rational:
0.66 /testbed/sympy/core/add.py(107):             if rv:
0.66 /testbed/sympy/core/add.py(112):         terms = {}      # term -> coeff
0.66 /testbed/sympy/core/add.py(115):         coeff = S.Zero  # coefficient (Number or zoo) to always be in slot 0
0.66 /testbed/sympy/core/add.py(117):         order_factors = []
0.66 /testbed/sympy/core/add.py(119):         for o in seq:
0.66 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.66 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.66 /testbed/sympy/core/add.py(135):                 if (o is S.NaN or coeff is S.ComplexInfinity and
0.66 /testbed/sympy/core/add.py(139):                 if coeff.is_Number:
0.66 /testbed/sympy/core/add.py(140):                     coeff += o
0.66 /testbed/sympy/core/add.py(141):                     if coeff is S.NaN:
0.66 /testbed/sympy/core/add.py(119):         for o in seq:
0.66 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.66 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.66 /testbed/sympy/core/add.py(135):                 if (o is S.NaN or coeff is S.ComplexInfinity and
0.66 /testbed/sympy/core/add.py(139):                 if coeff.is_Number:
0.66 /testbed/sympy/core/add.py(140):                     coeff += o
0.66 /testbed/sympy/core/add.py(141):                     if coeff is S.NaN:
0.66 /testbed/sympy/core/add.py(119):         for o in seq:
0.66 /testbed/sympy/core/add.py(207):         newseq = []
0.66 /testbed/sympy/core/add.py(208):         noncommutative = False
0.66 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
0.66 /testbed/sympy/core/add.py(233):         if coeff is S.Infinity:
0.66 /testbed/sympy/core/add.py(237):         elif coeff is S.NegativeInfinity:
0.66 /testbed/sympy/core/add.py(241):         if coeff is S.ComplexInfinity:
0.66 /testbed/sympy/core/add.py(254):         if order_factors:
0.66 /testbed/sympy/core/add.py(273):         _addsort(newseq)
0.66 /testbed/sympy/core/add.py(21):     args.sort(key=_args_sortkey)
0.66 /testbed/sympy/core/add.py(276):         if coeff is not S.Zero:
0.66 /testbed/sympy/core/add.py(280):         if noncommutative:
0.66 /testbed/sympy/core/add.py(283):             return newseq, [], None
0.66 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.66 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.66 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.66 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.66 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.66 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.66 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.66 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.66 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.66 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.66 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.66 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.66 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.66 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.66 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.66 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.66 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.66 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.66 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.66 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.66 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.66 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.66 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.66 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.66 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.66 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.66 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.66 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.66 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.66 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.66 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.66 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.66 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.66 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.66 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.66 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.66 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.66 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.66 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.66 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.66 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.66 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.66 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.66 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.66 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.66 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.66 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.66 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.66 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.66 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.66 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.66 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.66 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.66 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.67 /testbed/sympy/core/add.py(352):         coeff, args = self.args[0], self.args[1:]
0.67 /testbed/sympy/core/add.py(354):         if coeff.is_Number and not rational or coeff.is_Rational:
0.67 /testbed/sympy/core/add.py(355):             return coeff, self._new_rawargs(*args)
0.67 /testbed/sympy/core/add.py(825):         sargs = self.args
0.67 /testbed/sympy/core/add.py(826):         re_part, im_part = [], []
0.67 /testbed/sympy/core/add.py(827):         for term in sargs:
0.67 /testbed/sympy/core/add.py(828):             re, im = term.as_real_imag(deep=deep)
0.67 /testbed/sympy/core/add.py(829):             re_part.append(re)
0.67 /testbed/sympy/core/add.py(830):             im_part.append(im)
0.67 /testbed/sympy/core/add.py(827):         for term in sargs:
0.67 /testbed/sympy/core/add.py(828):             re, im = term.as_real_imag(deep=deep)
0.67 /testbed/sympy/core/add.py(829):             re_part.append(re)
0.67 /testbed/sympy/core/add.py(830):             im_part.append(im)
0.67 /testbed/sympy/core/add.py(827):         for term in sargs:
0.67 /testbed/sympy/core/add.py(831):         return (self.func(*re_part), self.func(*im_part))
0.67 /testbed/sympy/core/add.py(96):         from sympy.calculus.util import AccumBounds
0.67 /testbed/sympy/core/add.py(97):         from sympy.matrices.expressions import MatrixExpr
0.67 /testbed/sympy/core/add.py(98):         from sympy.tensor.tensor import TensExpr
0.67 /testbed/sympy/core/add.py(99):         rv = None
0.67 /testbed/sympy/core/add.py(100):         if len(seq) == 2:
0.67 /testbed/sympy/core/add.py(101):             a, b = seq
0.67 /testbed/sympy/core/add.py(102):             if b.is_Rational:
0.67 /testbed/sympy/core/add.py(103):                 a, b = b, a
0.67 /testbed/sympy/core/add.py(104):             if a.is_Rational:
0.67 /testbed/sympy/core/add.py(105):                 if b.is_Mul:
0.67 /testbed/sympy/core/add.py(107):             if rv:
0.67 /testbed/sympy/core/add.py(112):         terms = {}      # term -> coeff
0.67 /testbed/sympy/core/add.py(115):         coeff = S.Zero  # coefficient (Number or zoo) to always be in slot 0
0.67 /testbed/sympy/core/add.py(117):         order_factors = []
0.67 /testbed/sympy/core/add.py(119):         for o in seq:
0.67 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.67 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.67 /testbed/sympy/core/add.py(135):                 if (o is S.NaN or coeff is S.ComplexInfinity and
0.67 /testbed/sympy/core/add.py(139):                 if coeff.is_Number:
0.67 /testbed/sympy/core/add.py(140):                     coeff += o
0.67 /testbed/sympy/core/add.py(141):                     if coeff is S.NaN:
0.67 /testbed/sympy/core/add.py(119):         for o in seq:
0.67 /testbed/sympy/core/add.py(122):             if o.is_Order:
0.67 /testbed/sympy/core/add.py(134):             elif o.is_Number:
0.67 /testbed/sympy/core/add.py(135):                 if (o is S.NaN or coeff is S.ComplexInfinity and
0.67 /testbed/sympy/core/add.py(139):                 if coeff.is_Number:
0.67 /testbed/sympy/core/add.py(140):                     coeff += o
0.67 /testbed/sympy/core/add.py(141):                     if coeff is S.NaN:
0.67 /testbed/sympy/core/add.py(119):         for o in seq:
0.67 /testbed/sympy/core/add.py(207):         newseq = []
0.67 /testbed/sympy/core/add.py(208):         noncommutative = False
0.67 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
0.67 /testbed/sympy/core/add.py(233):         if coeff is S.Infinity:
0.67 /testbed/sympy/core/add.py(237):         elif coeff is S.NegativeInfinity:
0.67 /testbed/sympy/core/add.py(241):         if coeff is S.ComplexInfinity:
0.67 /testbed/sympy/core/add.py(254):         if order_factors:
0.67 /testbed/sympy/core/add.py(273):         _addsort(newseq)
0.67 /testbed/sympy/core/add.py(21):     args.sort(key=_args_sortkey)
0.67 /testbed/sympy/core/add.py(276):         if coeff is not S.Zero:
0.67 /testbed/sympy/core/add.py(280):         if noncommutative:
0.67 /testbed/sympy/core/add.py(283):             return newseq, [], None
0.67 /testbed/sympy/core/add.py(576):         for t in self.args:
0.67 /testbed/sympy/core/add.py(577):             a = t.is_irrational
0.67 /testbed/sympy/core/add.py(578):             if a:
0.67 /testbed/sympy/core/add.py(584):             if a is None:
0.67 /testbed/sympy/core/add.py(576):         for t in self.args:
0.67 /testbed/sympy/core/add.py(577):             a = t.is_irrational
0.67 /testbed/sympy/core/add.py(578):             if a:
0.67 /testbed/sympy/core/add.py(584):             if a is None:
0.67 /testbed/sympy/core/add.py(576):         for t in self.args:
0.67 /testbed/sympy/core/add.py(586):         return False
0.67 /testbed/sympy/core/add.py(569):         l = [f for f in self.args if not (f.is_even is True)]
0.67 /testbed/sympy/core/add.py(569):         l = [f for f in self.args if not (f.is_even is True)]
0.67 /testbed/sympy/core/add.py(569):         l = [f for f in self.args if not (f.is_even is True)]
0.67 /testbed/sympy/core/add.py(569):         l = [f for f in self.args if not (f.is_even is True)]
0.67 /testbed/sympy/core/add.py(570):         if not l:
0.67 /testbed/sympy/core/add.py(572):         if l[0].is_odd:
0.67 /testbed/sympy/core/add.py(502):     _eval_is_rational = lambda self: _fuzzy_group(
0.67 /testbed/sympy/core/add.py(503):         (a.is_rational for a in self.args), quick_exit=True)
0.67 /testbed/sympy/core/add.py(502):     _eval_is_rational = lambda self: _fuzzy_group(
0.67 /testbed/sympy/core/add.py(503):         (a.is_rational for a in self.args), quick_exit=True)
0.67 /testbed/sympy/core/add.py(503):         (a.is_rational for a in self.args), quick_exit=True)
0.67 /testbed/sympy/core/add.py(658):         from sympy.core.exprtools import _monotonic_sign
0.67 /testbed/sympy/core/add.py(659):         if not self.is_number:
0.67 /testbed/sympy/core/add.py(496):     _eval_is_finite = lambda self: _fuzzy_group(
0.67 /testbed/sympy/core/add.py(497):         (a.is_finite for a in self.args), quick_exit=True)
0.67 /testbed/sympy/core/add.py(496):     _eval_is_finite = lambda self: _fuzzy_group(
0.67 /testbed/sympy/core/add.py(497):         (a.is_finite for a in self.args), quick_exit=True)
0.67 /testbed/sympy/core/add.py(497):         (a.is_finite for a in self.args), quick_exit=True)
0.67 /testbed/sympy/core/add.py(497):         (a.is_finite for a in self.args), quick_exit=True)
ok                                                         [OK]


================== tests finished: 1 passed, in 0.07 seconds ===================
/testbed/sympy/core/add.py(173):             elif o.is_Mul:
1.15 /testbed/sympy/core/add.py(174):                 c, s = o.as_coeff_Mul()
1.15 /testbed/sympy/core/add.py(197):             if s in terms:
1.15 /testbed/sympy/core/add.py(203):                 terms[s] = c
1.15 /testbed/sympy/core/add.py(119):         for o in seq:
1.15 /testbed/sympy/core/add.py(207):         newseq = []
1.15 /testbed/sympy/core/add.py(208):         noncommutative = False
1.15 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
1.15 /testbed/sympy/core/add.py(211):             if c is S.Zero:
1.15 /testbed/sympy/core/add.py(214):             elif c is S.One:
1.15 /testbed/sympy/core/add.py(215):                 newseq.append(s)
1.15 /testbed/sympy/core/add.py(230):             noncommutative = noncommutative or not s.is_commutative
1.15 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
1.15 /testbed/sympy/core/add.py(211):             if c is S.Zero:
1.15 /testbed/sympy/core/add.py(214):             elif c is S.One:
1.15 /testbed/sympy/core/add.py(215):                 newseq.append(s)
1.15 /testbed/sympy/core/add.py(230):             noncommutative = noncommutative or not s.is_commutative
1.15 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
1.15 /testbed/sympy/core/add.py(233):         if coeff is S.Infinity:
1.15 /testbed/sympy/core/add.py(237):         elif coeff is S.NegativeInfinity:
1.15 /testbed/sympy/core/add.py(241):         if coeff is S.ComplexInfinity:
1.15 /testbed/sympy/core/add.py(254):         if order_factors:
1.15 /testbed/sympy/core/add.py(273):         _addsort(newseq)
1.15 /testbed/sympy/core/add.py(21):     args.sort(key=_args_sortkey)
1.15 /testbed/sympy/core/add.py(276):         if coeff is not S.Zero:
1.15 /testbed/sympy/core/add.py(280):         if noncommutative:
1.15 /testbed/sympy/core/add.py(283):             return newseq, [], None
1.15 /testbed/sympy/core/add.py(96):         from sympy.calculus.util import AccumBounds
1.15 /testbed/sympy/core/add.py(97):         from sympy.matrices.expressions import MatrixExpr
1.15 /testbed/sympy/core/add.py(98):         from sympy.tensor.tensor import TensExpr
1.15 /testbed/sympy/core/add.py(99):         rv = None
1.15 /testbed/sympy/core/add.py(100):         if len(seq) == 2:
1.15 /testbed/sympy/core/add.py(101):             a, b = seq
1.15 /testbed/sympy/core/add.py(102):             if b.is_Rational:
1.15 /testbed/sympy/core/add.py(104):             if a.is_Rational:
1.15 /testbed/sympy/core/add.py(107):             if rv:
1.15 /testbed/sympy/core/add.py(112):         terms = {}      # term -> coeff
1.15 /testbed/sympy/core/add.py(115):         coeff = S.Zero  # coefficient (Number or zoo) to always be in slot 0
1.15 /testbed/sympy/core/add.py(117):         order_factors = []
1.15 /testbed/sympy/core/add.py(119):         for o in seq:
1.15 /testbed/sympy/core/add.py(122):             if o.is_Order:
1.15 /testbed/sympy/core/add.py(134):             elif o.is_Number:
1.15 /testbed/sympy/core/add.py(146):             elif isinstance(o, AccumBounds):
1.15 /testbed/sympy/core/add.py(150):             elif isinstance(o, MatrixExpr):
1.15 /testbed/sympy/core/add.py(155):             elif isinstance(o, TensExpr):
1.15 /testbed/sympy/core/add.py(159):             elif o is S.ComplexInfinity:
1.15 /testbed/sympy/core/add.py(167):             elif o.is_Add:
1.15 /testbed/sympy/core/add.py(173):             elif o.is_Mul:
1.15 /testbed/sympy/core/add.py(177):             elif o.is_Pow:
1.15 /testbed/sympy/core/add.py(187):                 c = S.One
1.15 /testbed/sympy/core/add.py(188):                 s = o
1.15 /testbed/sympy/core/add.py(197):             if s in terms:
1.15 /testbed/sympy/core/add.py(203):                 terms[s] = c
1.15 /testbed/sympy/core/add.py(119):         for o in seq:
1.15 /testbed/sympy/core/add.py(122):             if o.is_Order:
1.15 /testbed/sympy/core/add.py(134):             elif o.is_Number:
1.15 /testbed/sympy/core/add.py(146):             elif isinstance(o, AccumBounds):
1.15 /testbed/sympy/core/add.py(150):             elif isinstance(o, MatrixExpr):
1.15 /testbed/sympy/core/add.py(155):             elif isinstance(o, TensExpr):
1.15 /testbed/sympy/core/add.py(159):             elif o is S.ComplexInfinity:
1.15 /testbed/sympy/core/add.py(167):             elif o.is_Add:
1.15 /testbed/sympy/core/add.py(173):             elif o.is_Mul:
1.15 /testbed/sympy/core/add.py(174):                 c, s = o.as_coeff_Mul()
1.15 /testbed/sympy/core/add.py(197):             if s in terms:
1.15 /testbed/sympy/core/add.py(203):                 terms[s] = c
1.15 /testbed/sympy/core/add.py(119):         for o in seq:
1.15 /testbed/sympy/core/add.py(207):         newseq = []
1.15 /testbed/sympy/core/add.py(208):         noncommutative = False
1.15 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
1.15 /testbed/sympy/core/add.py(211):             if c is S.Zero:
1.15 /testbed/sympy/core/add.py(214):             elif c is S.One:
1.15 /testbed/sympy/core/add.py(215):                 newseq.append(s)
1.15 /testbed/sympy/core/add.py(230):             noncommutative = noncommutative or not s.is_commutative
1.15 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
1.15 /testbed/sympy/core/add.py(211):             if c is S.Zero:
1.15 /testbed/sympy/core/add.py(214):             elif c is S.One:
1.15 /testbed/sympy/core/add.py(215):                 newseq.append(s)
1.15 /testbed/sympy/core/add.py(230):             noncommutative = noncommutative or not s.is_commutative
1.15 /testbed/sympy/core/add.py(209):         for s, c in terms.items():
1.15 /testbed/sympy/core/add.py(233):         if coeff is S.Infinity:
1.15 /testbed/sympy/core/add.py(237):         elif coeff is S.NegativeInfinity:
1.15 /testbed/sympy/core/add.py(241):         if coeff is S.ComplexInfinity:
1.15 /testbed/sympy/core/add.py(254):         if order_factors:
1.15 /testbed/sympy/core/add.py(273):         _addsort(newseq)
1.15 /testbed/sympy/core/add.py(21):     args.sort(key=_args_sortkey)
1.15 /testbed/sympy/core/add.py(276):         if coeff is not S.Zero:
1.15 /testbed/sympy/core/add.py(280):         if noncommutative:
1.15 /testbed/sympy/core/add.py(283):             return newseq, [], None
+ cat coverage.cover
{"/testbed/sympy/core/add.py": {"1": 1, "3": 1, "4": 1, "6": 1, "7": 1, "8": 1, "9": 1, "10": 1, "11": 1, "12": 1, "13": 1, "16": 1, "19": 1, "24": 1, "72": 2, "1060": 1, "1061": 1, "21": 55, "53": 12, "54": 12, "55": 12, "56": 12, "57": 0, "58": 0, "61": 0, "62": 0, "63": 0, "65": 0, "66": 12, "67": 12, "68": 0, "69": 12, "74": 1, "76": 1, "78": 1, "79": 1, "285": 1, "286": 1, "290": 1, "321": 1, "322": 1, "350": 1, "362": 1, "386": 1, "387": 1, "390": 1, "394": 1, "401": 1, "404": 1, "405": 1, "428": 1, "429": 1, "448": 1, "480": 1, "483": 1, "486": 1, "490": 9, "492": 3, "494": 1, "496": 5, "498": 5, "500": 5, "502": 5, "504": 9, "506": 6, "509": 1, "532": 1, "568": 1, "575": 1, "588": 1, "642": 1, "657": 1, "672": 1, "726": 1, "763": 1, "767": 1, "772": 1, "773": 1, "810": 1, "833": 1, "865": 1, "868": 1, "871": 1, "874": 1, "877": 1, "883": 1, "963": 1, "1035": 1, "1036": 1, "1040": 1, "1044": 1, "1045": 1, "96": 49, "97": 49, "98": 49, "99": 49, "100": 49, "101": 45, "102": 45, "103": 10, "104": 45, "105": 28, "106": 6, "107": 45, "108": 24, "109": 6, "110": 0, "112": 43, "115": 43, "117": 43, "119": 137, "122": 94, "123": 0, "124": 0, "125": 0, "126": 0, "127": 0, "128": 0, "129": 0, "130": 0, "131": 0, "134": 94, "135": 53, "136": 0, "138": 0, "139": 53, "140": 53, "141": 53, "143": 0, "144": 0, "146": 41, "147": 0, "148": 0, "150": 41, "152": 0, "153": 0, "155": 41, "156": 0, "157": 0, "159": 41, "160": 0, "162": 0, "163": 0, "164": 0, "167": 41, "169": 2, "170": 2, "173": 39, "174": 11, "177": 28, "178": 5, "179": 5, "180": 0, "181": 0, "182": 0, "183": 5, "187": 23, "188": 23, "197": 39, "198": 0, "199": 0, "201": 0, "203": 39, "207": 43, "208": 43, "209": 82, "211": 39, "212": 0, "214": 39, "215": 30, "218": 9, "221": 0, "222": 0, "223": 9, "225": 0, "228": 9, "230": 39, "233": 43, "234": 0, "237": 43, "238": 0, "241": 43, "250": 0, "254": 43, "255": 0, "256": 0, "257": 0, "259": 0, "260": 0, "261": 0, "263": 0, "264": 0, "265": 0, "267": 0, "268": 0, "269": 0, "270": 0, "273": 43, "276": 43, "277": 19, "280": 43, "281": 0, "283": 43, "235": 0, "239": 0, "251": 0, "288": 0, "308": 0, "309": 0, "310": 0, "311": 0, "312": 0, "313": 0, "314": 0, "316": 0, "317": 0, "318": 0, "319": 0, "336": 0, "337": 0, "338": 0, "339": 0, "340": 0, "341": 0, "343": 0, "344": 0, "345": 0, "346": 0, "347": 0, "348": 0, "352": 92, "354": 92, "355": 92, "356": 0, "363": 16, "364": 16, "365": 16, "366": 16, "367": 16, "368": 16, "369": 16, "370": 16, "371": 16, "372": 16, "373": 16, "374": 0, "375": 0, "377": 0, "378": 0, "380": 0, "381": 16, "382": 0, "383": 0, "384": 0, "388": 0, "391": 0, "392": 0, "396": 0, "397": 0, "398": 0, "399": 0, "402": 0, "410": 0, "411": 0, "412": 0, "413": 0, "414": 0, "416": 0, "417": 0, "415": 0, "418": 0, "419": 0, "420": 0, "421": 0, "422": 0, "423": 0, "424": 0, "426": 0, "446": 0, "451": 0, "452": 0, "455": 0, "456": 0, "457": 0, "458": 0, "461": 0, "462": 0, "463": 0, "464": 0, "467": 0, "468": 0, "469": 0, "471": 0, "474": 0, "475": 0, "476": 0, "478": 0, "481": 0, "484": 0, "487": 0, "491": 15, "493": 4, "495": 0, "497": 8, "499": 6, "501": 6, "503": 6, "505": 16, "507": 3, "510": 3, "511": 3, "512": 9, "513": 6, "514": 3, "515": 0, "516": 3, "517": 3, "519": 0, "520": 3, "521": 3, "522": 0, "523": 0, "525": 0, "526": 3, "527": 3, "528": 2, "529": 1, "530": 1, "533": 3, "536": 0, "537": 3, "538": 3, "539": 3, "540": 3, "541": 9, "542": 6, "543": 4, "544": 0, "545": 4, "546": 4, "548": 0, "549": 2, "550": 2, "551": 0, "552": 0, "554": 0, "555": 3, "556": 0, "557": 3, "558": 3, "559": 0, "560": 0, "561": 0, "562": 0, "563": 0, "564": 0, "565": 0, "566": 0, "569": 8, "570": 2, "571": 0, "572": 2, "573": 0, "576": 6, "577": 4, "578": 4, "579": 0, "580": 0, "581": 0, "582": 0, "583": 0, "584": 4, "585": 0, "586": 2, "589": 3, "590": 3, "591": 3, "592": 0, "593": 0, "594": 0, "595": 0, "596": 0, "597": 0, "598": 0, "599": 0, "600": 0, "601": 0, "602": 0, "603": 0, "604": 0, "605": 0, "606": 0, "607": 0, "608": 0, "609": 0, "610": 0, "611": 0, "612": 0, "613": 0, "614": 0, "615": 0, "616": 0, "617": 0, "618": 0, "619": 0, "620": 0, "621": 0, "622": 0, "623": 0, "625": 0, "626": 0, "627": 0, "629": 0, "630": 0, "631": 0, "632": 0, "633": 0, "634": 0, "635": 0, "636": 0, "637": 0, "638": 0, "639": 0, "640": 0, "643": 2, "644": 2, "645": 0, "646": 0, "647": 0, "648": 0, "649": 0, "650": 0, "651": 0, "652": 0, "653": 0, "654": 0, "655": 0, "658": 2, "659": 2, "660": 0, "661": 0, "662": 0, "663": 0, "664": 0, "665": 0, "666": 0, "667": 0, "668": 0, "669": 0, "670": 0, "673": 3, "674": 3, "675": 3, "676": 0, "677": 0, "678": 0, "679": 0, "680": 0, "681": 0, "682": 0, "683": 0, "684": 0, "685": 0, "686": 0, "687": 0, "688": 0, "689": 0, "690": 0, "691": 0, "692": 0, "693": 0, "694": 0, "695": 0, "696": 0, "697": 0, "698": 0, "699": 0, "700": 0, "701": 0, "702": 0, "703": 0, "704": 0, "705": 0, "706": 0, "707": 0, "709": 0, "710": 0, "711": 0, "713": 0, "714": 0, "715": 0, "716": 0, "717": 0, "718": 0, "719": 0, "720": 0, "721": 0, "722": 0, "723": 0, "724": 0, "727": 0, "728": 0, "730": 0, "731": 0, "733": 0, "734": 0, "736": 0, "737": 0, "738": 0, "739": 0, "740": 0, "742": 0, "743": 0, "744": 0, "745": 0, "746": 0, "747": 0, "748": 0, "750": 0, "751": 0, "752": 0, "753": 0, "755": 0, "756": 0, "757": 0, "758": 0, "759": 0, "760": 0, "761": 0, "764": 0, "765": 0, "768": 0, "769": 0, "770": 0, "789": 0, "790": 0, "791": 0, "792": 0, "793": 0, "794": 0, "795": 0, "796": 0, "797": 0, "798": 0, "799": 0, "800": 0, "801": 0, "802": 0, "803": 0, "804": 0, "805": 0, "806": 0, "807": 0, "808": 0, "825": 11, "826": 11, "827": 33, "828": 22, "829": 22, "830": 22, "831": 11, "834": 0, "836": 0, "838": 0, "839": 0, "840": 0, "842": 0, "844": 0, "845": 0, "848": 0, "849": 0, "850": 0, "851": 0, "852": 0, "854": 0, "855": 0, "856": 0, "859": 0, "860": 0, "861": 0, "862": 0, "863": 0, "866": 0, "869": 0, "872": 0, "875": 0, "878": 0, "879": 0, "880": 0, "881": 0, "918": 3, "919": 3, "920": 9, "921": 6, "922": 6, "923": 0, "924": 0, "925": 6, "926": 6, "928": 3, "929": 12, "930": 12, "932": 0, "933": 0, "935": 3, "936": 3, "937": 0, "938": 0, "939": 0, "941": 0, "942": 0, "943": 0, "945": 0, "954": 0, "955": 0, "957": 0, "958": 0, "959": 0, "960": 0, "961": 0, "983": 27, "984": 15, "985": 3, "986": 0, "987": 0, "988": 0, "989": 0, "991": 0, "992": 3, "994": 0, "995": 0, "996": 0, "997": 0, "998": 0, "999": 0, "1000": 0, "1001": 0, "1002": 0, "1003": 0, "1004": 0, "1005": 0, "1006": 0, "1007": 0, "1009": 0, "1010": 0, "1011": 0, "1012": 0, "1016": 0, "1017": 0, "1018": 0, "1019": 0, "1020": 0, "1021": 0, "1023": 0, "1024": 0, "1025": 0, "1026": 0, "1027": 0, "1028": 0, "1029": 0, "1030": 0, "1031": 0, "1033": 3, "1037": 0, "1038": 0, "1041": 0, "1042": 0, "1049": 0, "1050": 0, "1051": 0, "1052": 0, "1056": 0, "1058": 0}}
{"/testbed/sympy/core/add.py": {"1": 1, "3": 1, "4": 1, "6": 1, "7": 1, "8": 1, "9": 1, "10": 1, "11": 1, "12": 1, "13": 1, "16": 1, "19": 1, "24": 1, "72": 2, "1060": 1, "1061": 1, "21": 2, "53": 0, "54": 0, "55": 0, "56": 0, "57": 0, "58": 0, "61": 0, "62": 0, "63": 0, "65": 0, "66": 0, "67": 0, "68": 0, "69": 0, "74": 1, "76": 1, "78": 1, "79": 1, "285": 1, "286": 1, "290": 1, "321": 1, "322": 1, "350": 1, "362": 1, "386": 1, "387": 1, "390": 1, "394": 1, "401": 1, "404": 1, "405": 1, "428": 1, "429": 1, "448": 1, "480": 1, "483": 1, "486": 1, "490": 1, "492": 1, "494": 1, "496": 1, "498": 1, "500": 1, "502": 1, "504": 1, "506": 1, "509": 1, "532": 1, "568": 1, "575": 1, "588": 1, "642": 1, "657": 1, "672": 1, "726": 1, "763": 1, "767": 1, "772": 1, "773": 1, "810": 1, "833": 1, "865": 1, "868": 1, "871": 1, "874": 1, "877": 1, "883": 1, "963": 1, "1035": 1, "1036": 1, "1040": 1, "1044": 1, "1045": 1, "96": 2, "97": 2, "98": 2, "99": 2, "100": 2, "101": 2, "102": 2, "103": 0, "104": 2, "105": 0, "106": 0, "107": 2, "108": 0, "109": 0, "110": 0, "112": 2, "115": 2, "117": 2, "119": 6, "122": 4, "123": 0, "124": 0, "125": 0, "126": 0, "127": 0, "128": 0, "129": 0, "130": 0, "131": 0, "134": 4, "135": 0, "136": 0, "138": 0, "139": 0, "140": 0, "141": 0, "143": 0, "144": 0, "146": 4, "147": 0, "148": 0, "150": 4, "152": 0, "153": 0, "155": 4, "156": 0, "157": 0, "159": 4, "160": 0, "162": 0, "163": 0, "164": 0, "167": 4, "169": 0, "170": 0, "173": 4, "174": 2, "177": 2, "178": 0, "179": 0, "180": 0, "181": 0, "182": 0, "183": 0, "187": 2, "188": 2, "197": 4, "198": 0, "199": 0, "201": 0, "203": 4, "207": 2, "208": 2, "209": 6, "211": 4, "212": 0, "214": 4, "215": 4, "218": 0, "221": 0, "222": 0, "223": 0, "225": 0, "228": 0, "230": 4, "233": 2, "234": 0, "237": 2, "238": 0, "241": 2, "250": 0, "254": 2, "255": 0, "256": 0, "257": 0, "259": 0, "260": 0, "261": 0, "263": 0, "264": 0, "265": 0, "267": 0, "268": 0, "269": 0, "270": 0, "273": 2, "276": 2, "277": 0, "280": 2, "281": 0, "283": 2, "235": 0, "239": 0, "251": 0, "288": 0, "308": 0, "309": 0, "310": 0, "311": 0, "312": 0, "313": 0, "314": 0, "316": 0, "317": 0, "318": 0, "319": 0, "336": 0, "337": 0, "338": 0, "339": 0, "340": 0, "341": 0, "343": 0, "344": 0, "345": 0, "346": 0, "347": 0, "348": 0, "352": 0, "354": 0, "355": 0, "356": 0, "363": 0, "364": 0, "365": 0, "366": 0, "367": 0, "368": 0, "369": 0, "370": 0, "371": 0, "372": 0, "373": 0, "374": 0, "375": 0, "377": 0, "378": 0, "380": 0, "381": 0, "382": 0, "383": 0, "384": 0, "388": 0, "391": 0, "392": 0, "396": 0, "397": 0, "398": 0, "399": 0, "402": 0, "410": 0, "411": 0, "412": 0, "413": 0, "414": 0, "416": 0, "417": 0, "415": 0, "418": 0, "419": 0, "420": 0, "421": 0, "422": 0, "423": 0, "424": 0, "426": 0, "446": 0, "451": 0, "452": 0, "455": 0, "456": 0, "457": 0, "458": 0, "461": 0, "462": 0, "463": 0, "464": 0, "467": 0, "468": 0, "469": 0, "471": 0, "474": 0, "475": 0, "476": 0, "478": 0, "481": 0, "484": 0, "487": 0, "491": 0, "493": 0, "495": 0, "497": 0, "499": 0, "501": 0, "503": 0, "505": 0, "507": 0, "510": 0, "511": 0, "512": 0, "513": 0, "514": 0, "515": 0, "516": 0, "517": 0, "519": 0, "520": 0, "521": 0, "522": 0, "523": 0, "525": 0, "526": 0, "527": 0, "528": 0, "529": 0, "530": 0, "533": 0, "536": 0, "537": 0, "538": 0, "539": 0, "540": 0, "541": 0, "542": 0, "543": 0, "544": 0, "545": 0, "546": 0, "548": 0, "549": 0, "550": 0, "551": 0, "552": 0, "554": 0, "555": 0, "556": 0, "557": 0, "558": 0, "559": 0, "560": 0, "561": 0, "562": 0, "563": 0, "564": 0, "565": 0, "566": 0, "569": 0, "570": 0, "571": 0, "572": 0, "573": 0, "576": 0, "577": 0, "578": 0, "579": 0, "580": 0, "581": 0, "582": 0, "583": 0, "584": 0, "585": 0, "586": 0, "589": 0, "590": 0, "591": 0, "592": 0, "593": 0, "594": 0, "595": 0, "596": 0, "597": 0, "598": 0, "599": 0, "600": 0, "601": 0, "602": 0, "603": 0, "604": 0, "605": 0, "606": 0, "607": 0, "608": 0, "609": 0, "610": 0, "611": 0, "612": 0, "613": 0, "614": 0, "615": 0, "616": 0, "617": 0, "618": 0, "619": 0, "620": 0, "621": 0, "622": 0, "623": 0, "625": 0, "626": 0, "627": 0, "629": 0, "630": 0, "631": 0, "632": 0, "633": 0, "634": 0, "635": 0, "636": 0, "637": 0, "638": 0, "639": 0, "640": 0, "643": 0, "644": 0, "645": 0, "646": 0, "647": 0, "648": 0, "649": 0, "650": 0, "651": 0, "652": 0, "653": 0, "654": 0, "655": 0, "658": 0, "659": 0, "660": 0, "661": 0, "662": 0, "663": 0, "664": 0, "665": 0, "666": 0, "667": 0, "668": 0, "669": 0, "670": 0, "673": 0, "674": 0, "675": 0, "676": 0, "677": 0, "678": 0, "679": 0, "680": 0, "681": 0, "682": 0, "683": 0, "684": 0, "685": 0, "686": 0, "687": 0, "688": 0, "689": 0, "690": 0, "691": 0, "692": 0, "693": 0, "694": 0, "695": 0, "696": 0, "697": 0, "698": 0, "699": 0, "700": 0, "701": 0, "702": 0, "703": 0, "704": 0, "705": 0, "706": 0, "707": 0, "709": 0, "710": 0, "711": 0, "713": 0, "714": 0, "715": 0, "716": 0, "717": 0, "718": 0, "719": 0, "720": 0, "721": 0, "722": 0, "723": 0, "724": 0, "727": 0, "728": 0, "730": 0, "731": 0, "733": 0, "734": 0, "736": 0, "737": 0, "738": 0, "739": 0, "740": 0, "742": 0, "743": 0, "744": 0, "745": 0, "746": 0, "747": 0, "748": 0, "750": 0, "751": 0, "752": 0, "753": 0, "755": 0, "756": 0, "757": 0, "758": 0, "759": 0, "760": 0, "761": 0, "764": 0, "765": 0, "768": 0, "769": 0, "770": 0, "789": 0, "790": 0, "791": 0, "792": 0, "793": 0, "794": 0, "795": 0, "796": 0, "797": 0, "798": 0, "799": 0, "800": 0, "801": 0, "802": 0, "803": 0, "804": 0, "805": 0, "806": 0, "807": 0, "808": 0, "825": 0, "826": 0, "827": 0, "828": 0, "829": 0, "830": 0, "831": 0, "834": 0, "836": 0, "838": 0, "839": 0, "840": 0, "842": 0, "844": 0, "845": 0, "848": 0, "849": 0, "850": 0, "851": 0, "852": 0, "854": 0, "855": 0, "856": 0, "859": 0, "860": 0, "861": 0, "862": 0, "863": 0, "866": 0, "869": 0, "872": 0, "875": 0, "878": 0, "879": 0, "880": 0, "881": 0, "918": 0, "919": 0, "920": 0, "921": 0, "922": 0, "923": 0, "924": 0, "925": 0, "926": 0, "928": 0, "929": 0, "930": 0, "932": 0, "933": 0, "935": 0, "936": 0, "937": 0, "938": 0, "939": 0, "941": 0, "942": 0, "943": 0, "945": 0, "954": 0, "955": 0, "957": 0, "958": 0, "959": 0, "960": 0, "961": 0, "983": 0, "984": 0, "985": 0, "986": 0, "987": 0, "988": 0, "989": 0, "991": 0, "992": 0, "994": 0, "995": 0, "996": 0, "997": 0, "998": 0, "999": 0, "1000": 0, "1001": 0, "1002": 0, "1003": 0, "1004": 0, "1005": 0, "1006": 0, "1007": 0, "1009": 0, "1010": 0, "1011": 0, "1012": 0, "1016": 0, "1017": 0, "1018": 0, "1019": 0, "1020": 0, "1021": 0, "1023": 0, "1024": 0, "1025": 0, "1026": 0, "1027": 0, "1028": 0, "1029": 0, "1030": 0, "1031": 0, "1033": 0, "1037": 0, "1038": 0, "1041": 0, "1042": 0, "1049": 0, "1050": 0, "1051": 0, "1052": 0, "1056": 0, "1058": 0}}
+ git checkout b506169ad727ee39cb3d60c8b3ff5e315d443d8e
Note: switching to 'b506169ad727ee39cb3d60c8b3ff5e315d443d8e'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at b506169ad7 Merge pull request #15712 from jmig5776/fix_matrixpowerfailure
M	sympy/core/add.py
+ git apply /root/pre_state.patch
error: unrecognized input
