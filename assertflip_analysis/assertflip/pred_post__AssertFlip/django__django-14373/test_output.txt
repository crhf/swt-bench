+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD b1a4b1f0bdf05adbd3dc4dde14228e68da54c1a3
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
nothing to commit, working tree clean
+ git show
commit b1a4b1f0bdf05adbd3dc4dde14228e68da54c1a3
Author: Mariusz Felisiak <felisiak.mariusz@gmail.com>
Date:   Fri May 7 08:46:22 2021 +0200

    Fixed #32722 -- Fixed comparing to TruncTime() on Oracle.

diff --git a/django/db/backends/oracle/features.py b/django/db/backends/oracle/features.py
index 604f2316bc..07f16eee71 100644
--- a/django/db/backends/oracle/features.py
+++ b/django/db/backends/oracle/features.py
@@ -87,10 +87,6 @@ class DatabaseFeatures(BaseDatabaseFeatures):
         'Raises ORA-00600: internal error code.': {
             'model_fields.test_jsonfield.TestQuerying.test_usage_in_subquery',
         },
-        "Comparing to TruncTime() doesn't work on Oracle (#32722).": {
-            'db_functions.datetime.test_extract_trunc.DateFunctionWithTimeZoneTests.test_trunc_time_no_microseconds',
-            'db_functions.datetime.test_extract_trunc.DateFunctionTests.test_trunc_time_no_microseconds',
-        },
     }
     django_test_expected_failures = {
         # A bug in Django/cx_Oracle with respect to string handling (#23843).
diff --git a/django/db/backends/oracle/operations.py b/django/db/backends/oracle/operations.py
index d48c8dd868..095a125ced 100644
--- a/django/db/backends/oracle/operations.py
+++ b/django/db/backends/oracle/operations.py
@@ -135,9 +135,15 @@ END;
         return 'TRUNC(%s)' % field_name
 
     def datetime_cast_time_sql(self, field_name, tzname):
-        # Since `TimeField` values are stored as TIMESTAMP where only the date
-        # part is ignored, convert the field to the specified timezone.
-        return self._convert_field_to_tz(field_name, tzname)
+        # Since `TimeField` values are stored as TIMESTAMP change to the
+        # default date and convert the field to the specified timezone.
+        convert_datetime_sql = (
+            "TO_TIMESTAMP(CONCAT('1900-01-01 ', TO_CHAR(%s, 'HH24:MI:SS.FF')), "
+            "'YYYY-MM-DD HH24:MI:SS.FF')"
+        ) % self._convert_field_to_tz(field_name, tzname)
+        return "CASE WHEN %s IS NOT NULL THEN %s ELSE NULL END" % (
+            field_name, convert_datetime_sql,
+        )
 
     def datetime_extract_sql(self, lookup_type, field_name, tzname):
         field_name = self._convert_field_to_tz(field_name, tzname)
diff --git a/tests/db_functions/datetime/test_extract_trunc.py b/tests/db_functions/datetime/test_extract_trunc.py
index 75b8a4f0f9..fe80904330 100644
--- a/tests/db_functions/datetime/test_extract_trunc.py
+++ b/tests/db_functions/datetime/test_extract_trunc.py
@@ -923,19 +923,28 @@ class DateFunctionTests(TestCase):
         self.create_model(None, None)
         self.assertIsNone(DTModel.objects.annotate(truncated=TruncTime('start_datetime')).first().truncated)
 
-    def test_trunc_time_no_microseconds(self):
-        start_datetime = datetime(2015, 6, 15, 14, 30, 26)
+    def test_trunc_time_comparison(self):
+        start_datetime = datetime(2015, 6, 15, 14, 30, 26)  # 0 microseconds.
+        end_datetime = datetime(2015, 6, 15, 14, 30, 26, 321)
         if settings.USE_TZ:
             start_datetime = timezone.make_aware(start_datetime, is_dst=False)
-        self.create_model(start_datetime, None)
+            end_datetime = timezone.make_aware(end_datetime, is_dst=False)
+        self.create_model(start_datetime, end_datetime)
         self.assertIs(
-            DTModel.objects.filter(start_datetime__time=start_datetime.time()).exists(),
+            DTModel.objects.filter(
+                start_datetime__time=start_datetime.time(),
+                end_datetime__time=end_datetime.time(),
+            ).exists(),
             True,
         )
         self.assertIs(
             DTModel.objects.annotate(
-                extracted=TruncTime('start_datetime'),
-            ).filter(extracted=start_datetime.time()).exists(),
+                extracted_start=TruncTime('start_datetime'),
+                extracted_end=TruncTime('end_datetime'),
+            ).filter(
+                extracted_start=start_datetime.time(),
+                extracted_end=end_datetime.time(),
+            ).exists(),
             True,
         )
 
+ git diff b1a4b1f0bdf05adbd3dc4dde14228e68da54c1a3
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Checking if build backend supports build_editable: started
  Checking if build backend supports build_editable: finished with status 'done'
  Getting requirements to build editable: started
  Getting requirements to build editable: finished with status 'done'
  Preparing editable metadata (pyproject.toml): started
  Preparing editable metadata (pyproject.toml): finished with status 'done'
Requirement already satisfied: asgiref>=3.3.2 in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from Django==4.0.dev20210511071925) (3.8.1)
Requirement already satisfied: pytz in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from Django==4.0.dev20210511071925) (2025.2)
Requirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from Django==4.0.dev20210511071925) (0.5.3)
Requirement already satisfied: typing-extensions>=4 in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from asgiref>=3.3.2->Django==4.0.dev20210511071925) (4.13.2)
Building wheels for collected packages: Django
  Building editable for Django (pyproject.toml): started
  Building editable for Django (pyproject.toml): finished with status 'done'
  Created wheel for Django: filename=django-4.0.dev20210511071925-0.editable-py3-none-any.whl size=26102 sha256=5acb037964c6c975bb0fca3107c2c4d494be255eabdefa3078407c2dfcfe091f
  Stored in directory: /tmp/pip-ephem-wheel-cache-_f9ifjhj/wheels/b2/50/f1/218f2e9962a80d01a4b1297698978f9fb3b60056aa24343f24
Successfully built Django
Installing collected packages: Django
  Attempting uninstall: Django
    Found existing installation: Django 4.0.dev20210511071925
    Uninstalling Django-4.0.dev20210511071925:
      Successfully uninstalled Django-4.0.dev20210511071925
Successfully installed Django-4.0.dev20210511071925
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable.It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git apply -v -
Checking patch django/utils/dateformat.py...
Applied patch django/utils/dateformat.py cleanly.
+ git apply -v -
<stdin>:16: trailing whitespace.
        
<stdin>:19: trailing whitespace.
        
Checking patch tests/test_coverup_django__django-14373.py...
Applied patch tests/test_coverup_django__django-14373.py cleanly.
warning: 2 lines add whitespace errors.
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/utils/dateformat\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-14373
test_year_zero_padding_bug (test_coverup_django__django-14373.DateFormatYearTest) ... ok

----------------------------------------------------------------------
Ran 1 test in 0.028s

OK
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(django/utils/dateformat\\.py)']
0.21 /testbed/django/utils/dateformat.py(1): """
0.21 /testbed/django/utils/dateformat.py(13): import calendar
0.21 /testbed/django/utils/dateformat.py(14): import datetime
0.21 /testbed/django/utils/dateformat.py(15): import time
0.21 /testbed/django/utils/dateformat.py(16): from email.utils import format_datetime as format_datetime_rfc5322
0.21 /testbed/django/utils/dateformat.py(18): from django.utils.dates import (
0.21 /testbed/django/utils/dateformat.py(21): from django.utils.regex_helper import _lazy_re_compile
0.21 /testbed/django/utils/dateformat.py(22): from django.utils.timezone import (
0.21 /testbed/django/utils/dateformat.py(26): from django.utils.translation import gettext as _
0.21 /testbed/django/utils/dateformat.py(28): re_formatchars = _lazy_re_compile(r'(?<!\\)([aAbcdDeEfFgGhHiIjlLmMnNoOPrsStTUuwWyYzZ])')
0.21 /testbed/django/utils/dateformat.py(29): re_escaped = _lazy_re_compile(r'\\(.)')
0.21 /testbed/django/utils/dateformat.py(32): class Formatter:
0.21 /testbed/django/utils/dateformat.py(32): class Formatter:
0.21 /testbed/django/utils/dateformat.py(33):     def format(self, formatstr):
0.21 /testbed/django/utils/dateformat.py(48): class TimeFormat(Formatter):
0.21 /testbed/django/utils/dateformat.py(48): class TimeFormat(Formatter):
0.21 /testbed/django/utils/dateformat.py(50):     def __init__(self, obj):
0.21 /testbed/django/utils/dateformat.py(63):     def a(self):
0.21 /testbed/django/utils/dateformat.py(69):     def A(self):
0.21 /testbed/django/utils/dateformat.py(75):     def e(self):
0.21 /testbed/django/utils/dateformat.py(91):     def f(self):
0.21 /testbed/django/utils/dateformat.py(102):     def g(self):
0.21 /testbed/django/utils/dateformat.py(106):     def G(self):
0.21 /testbed/django/utils/dateformat.py(110):     def h(self):
0.21 /testbed/django/utils/dateformat.py(114):     def H(self):
0.21 /testbed/django/utils/dateformat.py(118):     def i(self):
0.21 /testbed/django/utils/dateformat.py(122):     def O(self):  # NOQA: E743, E741
0.21 /testbed/django/utils/dateformat.py(138):     def P(self):
0.21 /testbed/django/utils/dateformat.py(151):     def s(self):
0.21 /testbed/django/utils/dateformat.py(155):     def T(self):
0.21 /testbed/django/utils/dateformat.py(170):     def u(self):
0.21 /testbed/django/utils/dateformat.py(174):     def Z(self):
0.21 /testbed/django/utils/dateformat.py(197): class DateFormat(TimeFormat):
0.21 /testbed/django/utils/dateformat.py(197): class DateFormat(TimeFormat):
0.21 /testbed/django/utils/dateformat.py(198):     def b(self):
0.21 /testbed/django/utils/dateformat.py(202):     def c(self):
0.21 /testbed/django/utils/dateformat.py(209):     def d(self):
0.21 /testbed/django/utils/dateformat.py(213):     def D(self):
0.21 /testbed/django/utils/dateformat.py(217):     def E(self):
0.21 /testbed/django/utils/dateformat.py(221):     def F(self):
0.21 /testbed/django/utils/dateformat.py(225):     def I(self):  # NOQA: E743, E741
0.21 /testbed/django/utils/dateformat.py(234):     def j(self):
0.21 /testbed/django/utils/dateformat.py(238):     def l(self):  # NOQA: E743, E741
0.21 /testbed/django/utils/dateformat.py(242):     def L(self):
0.21 /testbed/django/utils/dateformat.py(246):     def m(self):
0.21 /testbed/django/utils/dateformat.py(250):     def M(self):
0.21 /testbed/django/utils/dateformat.py(254):     def n(self):
0.21 /testbed/django/utils/dateformat.py(258):     def N(self):
0.21 /testbed/django/utils/dateformat.py(262):     def o(self):
0.21 /testbed/django/utils/dateformat.py(266):     def r(self):
0.21 /testbed/django/utils/dateformat.py(279):     def S(self):
0.21 /testbed/django/utils/dateformat.py(292):     def t(self):
0.21 /testbed/django/utils/dateformat.py(296):     def U(self):
0.21 /testbed/django/utils/dateformat.py(303):     def w(self):
0.21 /testbed/django/utils/dateformat.py(307):     def W(self):
0.21 /testbed/django/utils/dateformat.py(311):     def y(self):
0.21 /testbed/django/utils/dateformat.py(315):     def Y(self):
0.21 /testbed/django/utils/dateformat.py(319):     def z(self):
0.21 /testbed/django/utils/dateformat.py(324): def format(value, format_string):
0.21 /testbed/django/utils/dateformat.py(330): def time_format(value, format_string):
Testing against Django installed in '/testbed/django'
Found 1 tests.
Skipping setup of unused database(s): default, other.
System check identified no issues (0 silenced).
0.63 /testbed/django/utils/dateformat.py(51):         self.data = obj
0.63 /testbed/django/utils/dateformat.py(52):         self.timezone = None
0.63 /testbed/django/utils/dateformat.py(57):         if isinstance(obj, datetime.datetime):
0.63 /testbed/django/utils/dateformat.py(58):             if is_naive(obj):
0.63 /testbed/django/utils/dateformat.py(59):                 self.timezone = get_default_timezone()
0.66 /testbed/django/utils/dateformat.py(317):         return '%04d' % self.data.year
+ cat coverage.cover
{"/testbed/django/utils/dateformat.py": {"13": 1, "14": 1, "15": 1, "16": 1, "18": 1, "21": 1, "22": 1, "26": 1, "28": 1, "29": 1, "32": 2, "48": 2, "197": 2, "324": 1, "330": 1, "33": 1, "34": 0, "35": 0, "36": 0, "37": 0, "38": 0, "39": 0, "40": 0, "42": 0, "43": 0, "44": 0, "45": 0, "50": 1, "63": 1, "69": 1, "75": 1, "91": 1, "102": 1, "106": 1, "110": 1, "114": 1, "118": 1, "122": 1, "138": 1, "151": 1, "155": 1, "170": 1, "174": 1, "51": 1, "52": 1, "57": 1, "58": 1, "59": 1, "61": 0, "65": 0, "66": 0, "67": 0, "71": 0, "72": 0, "73": 0, "81": 0, "82": 0, "84": 0, "85": 0, "86": 0, "87": 0, "88": 0, "89": 0, "98": 0, "99": 0, "100": 0, "104": 0, "108": 0, "112": 0, "116": 0, "120": 0, "128": 0, "129": 0, "131": 0, "132": 0, "133": 0, "134": 0, "135": 0, "136": 0, "145": 0, "146": 0, "147": 0, "148": 0, "149": 0, "153": 0, "161": 0, "162": 0, "164": 0, "165": 0, "167": 0, "168": 0, "172": 0, "183": 0, "182": 0, "184": 0, "186": 0, "188": 0, "194": 0, "198": 1, "202": 1, "209": 1, "213": 1, "217": 1, "221": 1, "225": 1, "234": 1, "238": 1, "242": 1, "246": 1, "250": 1, "254": 1, "258": 1, "262": 1, "266": 1, "279": 1, "292": 1, "296": 1, "303": 1, "307": 1, "311": 1, "315": 1, "319": 1, "200": 0, "207": 0, "211": 0, "215": 0, "219": 0, "223": 0, "228": 0, "227": 0, "229": 0, "231": 0, "232": 0, "236": 0, "240": 0, "244": 0, "248": 0, "252": 0, "256": 0, "260": 0, "264": 0, "268": 0, "269": 0, "270": 0, "273": 0, "274": 0, "276": 0, "277": 0, "281": 0, "282": 0, "283": 0, "284": 0, "285": 0, "286": 0, "287": 0, "288": 0, "289": 0, "290": 0, "294": 0, "298": 0, "299": 0, "301": 0, "305": 0, "309": 0, "313": 0, "317": 1, "321": 0, "326": 0, "327": 0, "332": 0, "333": 0}}
+ git checkout b1a4b1f0bdf05adbd3dc4dde14228e68da54c1a3
Note: switching to 'b1a4b1f0bdf05adbd3dc4dde14228e68da54c1a3'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at b1a4b1f0bd Fixed #32722 -- Fixed comparing to TruncTime() on Oracle.
M	django/utils/dateformat.py
+ git apply /root/pre_state.patch
error: unrecognized input
