+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD c6753448b5c34f95e250105d76709fe4d349ca1f
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch master
nothing to commit, working tree clean
+ git show
commit c6753448b5c34f95e250105d76709fe4d349ca1f
Merge: 14307a995e 7a30e0f54b
Author: Aaron Meurer <asmeurer@gmail.com>
Date:   Thu May 10 14:51:21 2018 -0500

    Merge pull request #14691 from caley/14654_lambdify
    
    lambdify: Improved speed of generated code when unpacking arguments

+ git diff c6753448b5c34f95e250105d76709fe4d349ca1f
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Requirement already satisfied: mpmath>=0.19 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from sympy==1.1.2.dev0) (1.3.0)
Installing collected packages: sympy
  Attempting uninstall: sympy
    Found existing installation: sympy 1.1.2.dev0
    Uninstalling sympy-1.1.2.dev0:
      Successfully uninstalled sympy-1.1.2.dev0
  DEPRECATION: Legacy editable install of sympy==1.1.2.dev0 from file:///testbed (setup.py develop) is deprecated. pip 25.3 will enforce this behaviour change. A possible replacement is to add a pyproject.toml or enable --use-pep517, and use setuptools >= 64. If the resulting installation is not behaving as expected, try using --config-settings editable_mode=compat. Please consult the setuptools documentation for more information. Discussion can be found at https://github.com/pypa/pip/issues/11457
  Running setup.py develop for sympy
Successfully installed sympy
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git apply -v -
Checking patch sympy/physics/vector/vector.py...
Applied patch sympy/physics/vector/vector.py cleanly.
+ git apply -v -
Checking patch sympy/polys/tests/test_coverup_sympy__sympy-14711.py...
Applied patch sympy/polys/tests/test_coverup_sympy__sympy-14711.py cleanly.
+ PYTHONWARNINGS=ignore::UserWarning,ignore::SyntaxWarning
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(sympy/physics/vector/vector\.py)' bin/test -C --verbose sympy/polys/tests/test_coverup_sympy__sympy-14711.p
/testbed/sympy/core/basic.py:3: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
  from collections import Mapping, defaultdict
/testbed/sympy/core/expr.py:12: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
  from collections import defaultdict, Iterable
/testbed/sympy/core/containers.py:271: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
  class OrderedSet(collections.MutableSet):
/testbed/sympy/plotting/plot.py:28: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
  from collections import Callable
/testbed/sympy/core/basic.py:3: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
  from collections import Mapping, defaultdict
/testbed/sympy/core/expr.py:12: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
  from collections import defaultdict, Iterable
/testbed/sympy/core/containers.py:271: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
  class OrderedSet(collections.MutableSet):
/testbed/sympy/plotting/plot.py:28: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
  from collections import Callable
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(sympy/physics/vector/vector\\.py)']
============================= test process starts ==============================
executable:         /opt/miniconda3/envs/testbed/bin/python3  (3.9.23-final-0) [CPython]
architecture:       64-bit
cache:              no
ground types:       python 
numpy:              None
random seed:        83609011
hash randomization: on (PYTHONHASHSEED=1661781715)

0.94 /testbed/sympy/physics/vector/vector.py(1): from sympy.core.backend import (S, sympify, expand, sqrt, Add, zeros,
0.94 /testbed/sympy/physics/vector/vector.py(3): from sympy import trigsimp
0.94 /testbed/sympy/physics/vector/vector.py(4): from sympy.core.compatibility import unicode
0.94 /testbed/sympy/physics/vector/vector.py(5): from sympy.utilities.misc import filldedent
0.94 /testbed/sympy/physics/vector/vector.py(7): __all__ = ['Vector']
0.94 /testbed/sympy/physics/vector/vector.py(10): class Vector(object):
0.94 /testbed/sympy/physics/vector/vector.py(10): class Vector(object):
0.94 /testbed/sympy/physics/vector/vector.py(11):     """The class used to define vectors.
0.94 /testbed/sympy/physics/vector/vector.py(24):     simp = False
0.94 /testbed/sympy/physics/vector/vector.py(26):     def __init__(self, inlist):
0.94 /testbed/sympy/physics/vector/vector.py(55):     def __hash__(self):
0.94 /testbed/sympy/physics/vector/vector.py(58):     def __add__(self, other):
0.94 /testbed/sympy/physics/vector/vector.py(65):     def __and__(self, other):
0.94 /testbed/sympy/physics/vector/vector.py(108):     def __div__(self, other):
0.94 /testbed/sympy/physics/vector/vector.py(112):     __truediv__ = __div__
0.94 /testbed/sympy/physics/vector/vector.py(114):     def __eq__(self, other):
0.94 /testbed/sympy/physics/vector/vector.py(143):     def __mul__(self, other):
0.94 /testbed/sympy/physics/vector/vector.py(170):     def __ne__(self, other):
0.94 /testbed/sympy/physics/vector/vector.py(173):     def __neg__(self):
0.94 /testbed/sympy/physics/vector/vector.py(176):     def __or__(self, other):
0.94 /testbed/sympy/physics/vector/vector.py(216):     def _latex(self, printer=None):
0.94 /testbed/sympy/physics/vector/vector.py(252):     def _pretty(self, printer=None):
0.94 /testbed/sympy/physics/vector/vector.py(302):     def __ror__(self, other):
0.94 /testbed/sympy/physics/vector/vector.py(342):     def __rsub__(self, other):
0.94 /testbed/sympy/physics/vector/vector.py(345):     def __str__(self, printer=None, order=True):
0.94 /testbed/sympy/physics/vector/vector.py(387):     def __sub__(self, other):
0.94 /testbed/sympy/physics/vector/vector.py(391):     def __xor__(self, other):
0.94 /testbed/sympy/physics/vector/vector.py(451):     _sympystr = __str__
0.94 /testbed/sympy/physics/vector/vector.py(452):     _sympyrepr = _sympystr
0.94 /testbed/sympy/physics/vector/vector.py(453):     __repr__ = __str__
0.94 /testbed/sympy/physics/vector/vector.py(454):     __radd__ = __add__
0.94 /testbed/sympy/physics/vector/vector.py(455):     __rand__ = __and__
0.94 /testbed/sympy/physics/vector/vector.py(456):     __rmul__ = __mul__
0.94 /testbed/sympy/physics/vector/vector.py(458):     def separate(self):
0.94 /testbed/sympy/physics/vector/vector.py(483):     def dot(self, other):
0.94 /testbed/sympy/physics/vector/vector.py(485):     dot.__doc__ = __and__.__doc__
0.94 /testbed/sympy/physics/vector/vector.py(487):     def cross(self, other):
0.94 /testbed/sympy/physics/vector/vector.py(489):     cross.__doc__ = __xor__.__doc__
0.94 /testbed/sympy/physics/vector/vector.py(491):     def outer(self, other):
0.94 /testbed/sympy/physics/vector/vector.py(493):     outer.__doc__ = __or__.__doc__
0.94 /testbed/sympy/physics/vector/vector.py(495):     def diff(self, var, frame, var_in_dcm=True):
0.94 /testbed/sympy/physics/vector/vector.py(560):     def express(self, otherframe, variables=False):
0.94 /testbed/sympy/physics/vector/vector.py(589):     def to_matrix(self, reference_frame):
0.94 /testbed/sympy/physics/vector/vector.py(630):     def doit(self, **hints):
0.94 /testbed/sympy/physics/vector/vector.py(637):     def dt(self, otherframe):
0.94 /testbed/sympy/physics/vector/vector.py(654):     def simplify(self):
0.94 /testbed/sympy/physics/vector/vector.py(661):     def subs(self, *args, **kwargs):
0.94 /testbed/sympy/physics/vector/vector.py(682):     def magnitude(self):
0.94 /testbed/sympy/physics/vector/vector.py(686):     def normalize(self):
0.94 /testbed/sympy/physics/vector/vector.py(690):     def applyfunc(self, f):
0.94 /testbed/sympy/physics/vector/vector.py(700):     def free_symbols(self, reference_frame):
0.94 /testbed/sympy/physics/vector/vector.py(717): class VectorTypeError(TypeError):
0.94 /testbed/sympy/physics/vector/vector.py(717): class VectorTypeError(TypeError):
0.94 /testbed/sympy/physics/vector/vector.py(719):     def __init__(self, other, want):
0.94 /testbed/sympy/physics/vector/vector.py(725): def _check_vector(other):
sympy/polys/tests/test_coverup_sympy__sympy-14711.py[1] 
test_vector_add_zero_multiplication 0.95 /testbed/sympy/physics/vector/vector.py(38):         self.args = []
0.95 /testbed/sympy/physics/vector/vector.py(39):         if inlist == 0:
0.95 /testbed/sympy/physics/vector/vector.py(41):         if isinstance(inlist, dict):
0.95 /testbed/sympy/physics/vector/vector.py(44):             d = {}
0.95 /testbed/sympy/physics/vector/vector.py(45):             for inp in inlist:
0.95 /testbed/sympy/physics/vector/vector.py(46):                 if inp[1] in d:
0.95 /testbed/sympy/physics/vector/vector.py(49):                     d[inp[1]] = inp[0]
0.95 /testbed/sympy/physics/vector/vector.py(45):             for inp in inlist:
0.95 /testbed/sympy/physics/vector/vector.py(51):         for k, v in d.items():
0.95 /testbed/sympy/physics/vector/vector.py(52):             if v != Matrix([0, 0, 0]):
0.95 /testbed/sympy/physics/vector/vector.py(53):                 self.args.append((v, k))
0.95 /testbed/sympy/physics/vector/vector.py(51):         for k, v in d.items():
0.95 /testbed/sympy/physics/vector/vector.py(38):         self.args = []
0.95 /testbed/sympy/physics/vector/vector.py(39):         if inlist == 0:
0.95 /testbed/sympy/physics/vector/vector.py(41):         if isinstance(inlist, dict):
0.95 /testbed/sympy/physics/vector/vector.py(44):             d = {}
0.95 /testbed/sympy/physics/vector/vector.py(45):             for inp in inlist:
0.95 /testbed/sympy/physics/vector/vector.py(46):                 if inp[1] in d:
0.95 /testbed/sympy/physics/vector/vector.py(49):                     d[inp[1]] = inp[0]
0.95 /testbed/sympy/physics/vector/vector.py(45):             for inp in inlist:
0.95 /testbed/sympy/physics/vector/vector.py(51):         for k, v in d.items():
0.95 /testbed/sympy/physics/vector/vector.py(52):             if v != Matrix([0, 0, 0]):
0.95 /testbed/sympy/physics/vector/vector.py(53):                 self.args.append((v, k))
0.95 /testbed/sympy/physics/vector/vector.py(51):         for k, v in d.items():
0.95 /testbed/sympy/physics/vector/vector.py(38):         self.args = []
0.95 /testbed/sympy/physics/vector/vector.py(39):         if inlist == 0:
0.95 /testbed/sympy/physics/vector/vector.py(41):         if isinstance(inlist, dict):
0.95 /testbed/sympy/physics/vector/vector.py(44):             d = {}
0.95 /testbed/sympy/physics/vector/vector.py(45):             for inp in inlist:
0.95 /testbed/sympy/physics/vector/vector.py(46):                 if inp[1] in d:
0.95 /testbed/sympy/physics/vector/vector.py(49):                     d[inp[1]] = inp[0]
0.95 /testbed/sympy/physics/vector/vector.py(45):             for inp in inlist:
0.95 /testbed/sympy/physics/vector/vector.py(51):         for k, v in d.items():
0.95 /testbed/sympy/physics/vector/vector.py(52):             if v != Matrix([0, 0, 0]):
0.95 /testbed/sympy/physics/vector/vector.py(53):                 self.args.append((v, k))
0.95 /testbed/sympy/physics/vector/vector.py(51):         for k, v in d.items():
0.95 /testbed/sympy/physics/vector/vector.py(165):         newlist = [v for v in self.args]
0.95 /testbed/sympy/physics/vector/vector.py(165):         newlist = [v for v in self.args]
0.95 /testbed/sympy/physics/vector/vector.py(165):         newlist = [v for v in self.args]
0.95 /testbed/sympy/physics/vector/vector.py(166):         for i, v in enumerate(newlist):
0.95 /testbed/sympy/physics/vector/vector.py(167):             newlist[i] = (sympify(other) * newlist[i][0], newlist[i][1])
0.95 /testbed/sympy/physics/vector/vector.py(166):         for i, v in enumerate(newlist):
0.95 /testbed/sympy/physics/vector/vector.py(168):         return Vector(newlist)
0.95 /testbed/sympy/physics/vector/vector.py(38):         self.args = []
0.95 /testbed/sympy/physics/vector/vector.py(39):         if inlist == 0:
0.95 /testbed/sympy/physics/vector/vector.py(41):         if isinstance(inlist, dict):
0.95 /testbed/sympy/physics/vector/vector.py(44):             d = {}
0.95 /testbed/sympy/physics/vector/vector.py(45):             for inp in inlist:
0.95 /testbed/sympy/physics/vector/vector.py(46):                 if inp[1] in d:
0.95 /testbed/sympy/physics/vector/vector.py(49):                     d[inp[1]] = inp[0]
0.95 /testbed/sympy/physics/vector/vector.py(45):             for inp in inlist:
0.95 /testbed/sympy/physics/vector/vector.py(51):         for k, v in d.items():
0.95 /testbed/sympy/physics/vector/vector.py(52):             if v != Matrix([0, 0, 0]):
0.95 /testbed/sympy/physics/vector/vector.py(51):         for k, v in d.items():
0.95 /testbed/sympy/physics/vector/vector.py(60):         if other == 0:
0.95 /testbed/sympy/physics/vector/vector.py(61):             return self
0.95 /testbed/sympy/physics/vector/vector.py(60):         if other == 0:
0.95 /testbed/sympy/physics/vector/vector.py(126):         if other == 0:
0.95 /testbed/sympy/physics/vector/vector.py(127):             other = Vector(0)
0.95 /testbed/sympy/physics/vector/vector.py(38):         self.args = []
0.95 /testbed/sympy/physics/vector/vector.py(39):         if inlist == 0:
0.95 /testbed/sympy/physics/vector/vector.py(40):             inlist = []
0.95 /testbed/sympy/physics/vector/vector.py(41):         if isinstance(inlist, dict):
0.95 /testbed/sympy/physics/vector/vector.py(44):             d = {}
0.95 /testbed/sympy/physics/vector/vector.py(45):             for inp in inlist:
0.95 /testbed/sympy/physics/vector/vector.py(51):         for k, v in d.items():
0.95 /testbed/sympy/physics/vector/vector.py(128):         try:
0.95 /testbed/sympy/physics/vector/vector.py(129):             other = _check_vector(other)
0.95 /testbed/sympy/physics/vector/vector.py(726):     if not isinstance(other, Vector):
0.95 /testbed/sympy/physics/vector/vector.py(728):     return other
0.95 /testbed/sympy/physics/vector/vector.py(132):         if (self.args == []) and (other.args == []):
0.95 /testbed/sympy/physics/vector/vector.py(133):             return True
0.95 /testbed/sympy/physics/vector/vector.py(61):             return self
0.95 /testbed/sympy/physics/vector/vector.py(126):         if other == 0:
0.95 /testbed/sympy/physics/vector/vector.py(126):         if other == 0:
0.95 /testbed/sympy/physics/vector/vector.py(127):             other = Vector(0)
0.95 /testbed/sympy/physics/vector/vector.py(38):         self.args = []
0.95 /testbed/sympy/physics/vector/vector.py(39):         if inlist == 0:
0.95 /testbed/sympy/physics/vector/vector.py(40):             inlist = []
0.95 /testbed/sympy/physics/vector/vector.py(41):         if isinstance(inlist, dict):
0.95 /testbed/sympy/physics/vector/vector.py(44):             d = {}
0.95 /testbed/sympy/physics/vector/vector.py(45):             for inp in inlist:
0.95 /testbed/sympy/physics/vector/vector.py(51):         for k, v in d.items():
0.95 /testbed/sympy/physics/vector/vector.py(128):         try:
0.95 /testbed/sympy/physics/vector/vector.py(129):             other = _check_vector(other)
0.95 /testbed/sympy/physics/vector/vector.py(726):     if not isinstance(other, Vector):
0.95 /testbed/sympy/physics/vector/vector.py(728):     return other
0.95 /testbed/sympy/physics/vector/vector.py(132):         if (self.args == []) and (other.args == []):
0.95 /testbed/sympy/physics/vector/vector.py(134):         elif (self.args == []) or (other.args == []):
0.95 /testbed/sympy/physics/vector/vector.py(135):             return False
0.95 /testbed/sympy/physics/vector/vector.py(128):         try:
0.95 /testbed/sympy/physics/vector/vector.py(129):             other = _check_vector(other)
0.95 /testbed/sympy/physics/vector/vector.py(726):     if not isinstance(other, Vector):
0.95 /testbed/sympy/physics/vector/vector.py(728):     return other
0.95 /testbed/sympy/physics/vector/vector.py(132):         if (self.args == []) and (other.args == []):
0.95 /testbed/sympy/physics/vector/vector.py(134):         elif (self.args == []) or (other.args == []):
0.95 /testbed/sympy/physics/vector/vector.py(137):         frame = self.args[0][1]
0.95 /testbed/sympy/physics/vector/vector.py(138):         for v in frame:
0.95 /testbed/sympy/physics/vector/vector.py(139):             if expand((self - other) & v) != 0:
0.95 /testbed/sympy/physics/vector/vector.py(389):         return self.__add__(other * -1)
0.95 /testbed/sympy/physics/vector/vector.py(165):         newlist = [v for v in self.args]
0.95 /testbed/sympy/physics/vector/vector.py(165):         newlist = [v for v in self.args]
0.95 /testbed/sympy/physics/vector/vector.py(165):         newlist = [v for v in self.args]
0.95 /testbed/sympy/physics/vector/vector.py(166):         for i, v in enumerate(newlist):
0.95 /testbed/sympy/physics/vector/vector.py(167):             newlist[i] = (sympify(other) * newlist[i][0], newlist[i][1])
0.95 /testbed/sympy/physics/vector/vector.py(166):         for i, v in enumerate(newlist):
0.95 /testbed/sympy/physics/vector/vector.py(168):         return Vector(newlist)
0.95 /testbed/sympy/physics/vector/vector.py(38):         self.args = []
0.95 /testbed/sympy/physics/vector/vector.py(39):         if inlist == 0:
0.95 /testbed/sympy/physics/vector/vector.py(41):         if isinstance(inlist, dict):
0.95 /testbed/sympy/physics/vector/vector.py(44):             d = {}
0.95 /testbed/sympy/physics/vector/vector.py(45):             for inp in inlist:
0.95 /testbed/sympy/physics/vector/vector.py(46):                 if inp[1] in d:
0.95 /testbed/sympy/physics/vector/vector.py(49):                     d[inp[1]] = inp[0]
0.95 /testbed/sympy/physics/vector/vector.py(45):             for inp in inlist:
0.95 /testbed/sympy/physics/vector/vector.py(51):         for k, v in d.items():
0.95 /testbed/sympy/physics/vector/vector.py(52):             if v != Matrix([0, 0, 0]):
0.95 /testbed/sympy/physics/vector/vector.py(53):                 self.args.append((v, k))
0.95 /testbed/sympy/physics/vector/vector.py(51):         for k, v in d.items():
0.95 /testbed/sympy/physics/vector/vector.py(60):         if other == 0:
0.95 /testbed/sympy/physics/vector/vector.py(126):         if other == 0:
0.95 /testbed/sympy/physics/vector/vector.py(127):             other = Vector(0)
0.95 /testbed/sympy/physics/vector/vector.py(38):         self.args = []
0.95 /testbed/sympy/physics/vector/vector.py(39):         if inlist == 0:
0.95 /testbed/sympy/physics/vector/vector.py(40):             inlist = []
0.95 /testbed/sympy/physics/vector/vector.py(41):         if isinstance(inlist, dict):
0.95 /testbed/sympy/physics/vector/vector.py(44):             d = {}
0.95 /testbed/sympy/physics/vector/vector.py(45):             for inp in inlist:
0.95 /testbed/sympy/physics/vector/vector.py(51):         for k, v in d.items():
0.95 /testbed/sympy/physics/vector/vector.py(128):         try:
0.95 /testbed/sympy/physics/vector/vector.py(129):             other = _check_vector(other)
0.95 /testbed/sympy/physics/vector/vector.py(726):     if not isinstance(other, Vector):
0.95 /testbed/sympy/physics/vector/vector.py(728):     return other
0.95 /testbed/sympy/physics/vector/vector.py(132):         if (self.args == []) and (other.args == []):
0.95 /testbed/sympy/physics/vector/vector.py(134):         elif (self.args == []) or (other.args == []):
0.95 /testbed/sympy/physics/vector/vector.py(135):             return False
0.95 /testbed/sympy/physics/vector/vector.py(62):         other = _check_vector(other)
0.95 /testbed/sympy/physics/vector/vector.py(726):     if not isinstance(other, Vector):
0.95 /testbed/sympy/physics/vector/vector.py(728):     return other
0.95 /testbed/sympy/physics/vector/vector.py(63):         return Vector(self.args + other.args)
0.95 /testbed/sympy/physics/vector/vector.py(38):         self.args = []
0.95 /testbed/sympy/physics/vector/vector.py(39):         if inlist == 0:
0.95 /testbed/sympy/physics/vector/vector.py(41):         if isinstance(inlist, dict):
0.95 /testbed/sympy/physics/vector/vector.py(44):             d = {}
0.95 /testbed/sympy/physics/vector/vector.py(45):             for inp in inlist:
0.95 /testbed/sympy/physics/vector/vector.py(46):                 if inp[1] in d:
0.95 /testbed/sympy/physics/vector/vector.py(49):                     d[inp[1]] = inp[0]
0.95 /testbed/sympy/physics/vector/vector.py(45):             for inp in inlist:
0.95 /testbed/sympy/physics/vector/vector.py(46):                 if inp[1] in d:
0.95 /testbed/sympy/physics/vector/vector.py(47):                     d[inp[1]] += inp[0]
0.95 /testbed/sympy/physics/vector/vector.py(45):             for inp in inlist:
0.95 /testbed/sympy/physics/vector/vector.py(51):         for k, v in d.items():
0.95 /testbed/sympy/physics/vector/vector.py(52):             if v != Matrix([0, 0, 0]):
0.95 /testbed/sympy/physics/vector/vector.py(51):         for k, v in d.items():
0.95 /testbed/sympy/physics/vector/vector.py(93):         from sympy.physics.vector.dyadic import Dyadic
0.95 /testbed/sympy/physics/vector/vector.py(94):         if isinstance(other, Dyadic):
0.95 /testbed/sympy/physics/vector/vector.py(96):         other = _check_vector(other)
0.95 /testbed/sympy/physics/vector/vector.py(726):     if not isinstance(other, Vector):
0.95 /testbed/sympy/physics/vector/vector.py(728):     return other
0.95 /testbed/sympy/physics/vector/vector.py(97):         out = S(0)
0.95 /testbed/sympy/physics/vector/vector.py(98):         for i, v1 in enumerate(self.args):
0.95 /testbed/sympy/physics/vector/vector.py(103):         if Vector.simp:
0.95 /testbed/sympy/physics/vector/vector.py(106):             return sympify(out)
0.95 /testbed/sympy/physics/vector/vector.py(138):         for v in frame:
0.95 /testbed/sympy/physics/vector/vector.py(139):             if expand((self - other) & v) != 0:
0.95 /testbed/sympy/physics/vector/vector.py(389):         return self.__add__(other * -1)
0.95 /testbed/sympy/physics/vector/vector.py(165):         newlist = [v for v in self.args]
0.95 /testbed/sympy/physics/vector/vector.py(165):         newlist = [v for v in self.args]
0.95 /testbed/sympy/physics/vector/vector.py(165):         newlist = [v for v in self.args]
0.95 /testbed/sympy/physics/vector/vector.py(166):         for i, v in enumerate(newlist):
0.95 /testbed/sympy/physics/vector/vector.py(167):             newlist[i] = (sympify(other) * newlist[i][0], newlist[i][1])
0.95 /testbed/sympy/physics/vector/vector.py(166):         for i, v in enumerate(newlist):
0.95 /testbed/sympy/physics/vector/vector.py(168):         return Vector(newlist)
0.95 /testbed/sympy/physics/vector/vector.py(38):         self.args = []
0.95 /testbed/sympy/physics/vector/vector.py(39):         if inlist == 0:
0.95 /testbed/sympy/physics/vector/vector.py(41):         if isinstance(inlist, dict):
0.95 /testbed/sympy/physics/vector/vector.py(44):             d = {}
0.95 /testbed/sympy/physics/vector/vector.py(45):             for inp in inlist:
0.95 /testbed/sympy/physics/vector/vector.py(46):                 if inp[1] in d:
0.95 /testbed/sympy/physics/vector/vector.py(49):                     d[inp[1]] = inp[0]
0.95 /testbed/sympy/physics/vector/vector.py(45):             for inp in inlist:
0.95 /testbed/sympy/physics/vector/vector.py(51):         for k, v in d.items():
0.95 /testbed/sympy/physics/vector/vector.py(52):             if v != Matrix([0, 0, 0]):
0.95 /testbed/sympy/physics/vector/vector.py(53):                 self.args.append((v, k))
0.95 /testbed/sympy/physics/vector/vector.py(51):         for k, v in d.items():
0.95 /testbed/sympy/physics/vector/vector.py(60):         if other == 0:
0.95 /testbed/sympy/physics/vector/vector.py(126):         if other == 0:
0.95 /testbed/sympy/physics/vector/vector.py(127):             other = Vector(0)
0.95 /testbed/sympy/physics/vector/vector.py(38):         self.args = []
0.95 /testbed/sympy/physics/vector/vector.py(39):         if inlist == 0:
0.95 /testbed/sympy/physics/vector/vector.py(40):             inlist = []
0.95 /testbed/sympy/physics/vector/vector.py(41):         if isinstance(inlist, dict):
0.95 /testbed/sympy/physics/vector/vector.py(44):             d = {}
0.95 /testbed/sympy/physics/vector/vector.py(45):             for inp in inlist:
0.95 /testbed/sympy/physics/vector/vector.py(51):         for k, v in d.items():
0.95 /testbed/sympy/physics/vector/vector.py(128):         try:
0.95 /testbed/sympy/physics/vector/vector.py(129):             other = _check_vector(other)
0.95 /testbed/sympy/physics/vector/vector.py(726):     if not isinstance(other, Vector):
0.95 /testbed/sympy/physics/vector/vector.py(728):     return other
0.95 /testbed/sympy/physics/vector/vector.py(132):         if (self.args == []) and (other.args == []):
0.95 /testbed/sympy/physics/vector/vector.py(134):         elif (self.args == []) or (other.args == []):
0.95 /testbed/sympy/physics/vector/vector.py(135):             return False
0.95 /testbed/sympy/physics/vector/vector.py(62):         other = _check_vector(other)
0.95 /testbed/sympy/physics/vector/vector.py(726):     if not isinstance(other, Vector):
0.95 /testbed/sympy/physics/vector/vector.py(728):     return other
0.95 /testbed/sympy/physics/vector/vector.py(63):         return Vector(self.args + other.args)
0.95 /testbed/sympy/physics/vector/vector.py(38):         self.args = []
0.95 /testbed/sympy/physics/vector/vector.py(39):         if inlist == 0:
0.95 /testbed/sympy/physics/vector/vector.py(41):         if isinstance(inlist, dict):
0.95 /testbed/sympy/physics/vector/vector.py(44):             d = {}
0.95 /testbed/sympy/physics/vector/vector.py(45):             for inp in inlist:
0.95 /testbed/sympy/physics/vector/vector.py(46):                 if inp[1] in d:
0.95 /testbed/sympy/physics/vector/vector.py(49):                     d[inp[1]] = inp[0]
0.95 /testbed/sympy/physics/vector/vector.py(45):             for inp in inlist:
0.95 /testbed/sympy/physics/vector/vector.py(46):                 if inp[1] in d:
0.95 /testbed/sympy/physics/vector/vector.py(47):                     d[inp[1]] += inp[0]
0.95 /testbed/sympy/physics/vector/vector.py(45):             for inp in inlist:
0.95 /testbed/sympy/physics/vector/vector.py(51):         for k, v in d.items():
0.95 /testbed/sympy/physics/vector/vector.py(52):             if v != Matrix([0, 0, 0]):
0.95 /testbed/sympy/physics/vector/vector.py(51):         for k, v in d.items():
0.95 /testbed/sympy/physics/vector/vector.py(93):         from sympy.physics.vector.dyadic import Dyadic
0.95 /testbed/sympy/physics/vector/vector.py(94):         if isinstance(other, Dyadic):
0.95 /testbed/sympy/physics/vector/vector.py(96):         other = _check_vector(other)
0.95 /testbed/sympy/physics/vector/vector.py(726):     if not isinstance(other, Vector):
0.95 /testbed/sympy/physics/vector/vector.py(728):     return other
0.95 /testbed/sympy/physics/vector/vector.py(97):         out = S(0)
0.95 /testbed/sympy/physics/vector/vector.py(98):         for i, v1 in enumerate(self.args):
0.95 /testbed/sympy/physics/vector/vector.py(103):         if Vector.simp:
0.95 /testbed/sympy/physics/vector/vector.py(106):             return sympify(out)
0.95 /testbed/sympy/physics/vector/vector.py(138):         for v in frame:
0.95 /testbed/sympy/physics/vector/vector.py(139):             if expand((self - other) & v) != 0:
0.95 /testbed/sympy/physics/vector/vector.py(389):         return self.__add__(other * -1)
0.95 /testbed/sympy/physics/vector/vector.py(165):         newlist = [v for v in self.args]
0.95 /testbed/sympy/physics/vector/vector.py(165):         newlist = [v for v in self.args]
0.95 /testbed/sympy/physics/vector/vector.py(165):         newlist = [v for v in self.args]
0.95 /testbed/sympy/physics/vector/vector.py(166):         for i, v in enumerate(newlist):
0.95 /testbed/sympy/physics/vector/vector.py(167):             newlist[i] = (sympify(other) * newlist[i][0], newlist[i][1])
0.95 /testbed/sympy/physics/vector/vector.py(166):         for i, v in enumerate(newlist):
0.95 /testbed/sympy/physics/vector/vector.py(168):         return Vector(newlist)
0.95 /testbed/sympy/physics/vector/vector.py(38):         self.args = []
0.95 /testbed/sympy/physics/vector/vector.py(39):         if inlist == 0:
0.95 /testbed/sympy/physics/vector/vector.py(41):         if isinstance(inlist, dict):
0.95 /testbed/sympy/physics/vector/vector.py(44):             d = {}
0.95 /testbed/sympy/physics/vector/vector.py(45):             for inp in inlist:
0.95 /testbed/sympy/physics/vector/vector.py(46):                 if inp[1] in d:
0.95 /testbed/sympy/physics/vector/vector.py(49):                     d[inp[1]] = inp[0]
0.95 /testbed/sympy/physics/vector/vector.py(45):             for inp in inlist:
0.95 /testbed/sympy/physics/vector/vector.py(51):         for k, v in d.items():
0.95 /testbed/sympy/physics/vector/vector.py(52):             if v != Matrix([0, 0, 0]):
0.95 /testbed/sympy/physics/vector/vector.py(53):                 self.args.append((v, k))
0.95 /testbed/sympy/physics/vector/vector.py(51):         for k, v in d.items():
0.95 /testbed/sympy/physics/vector/vector.py(60):         if other == 0:
0.95 /testbed/sympy/physics/vector/vector.py(126):         if other == 0:
0.95 /testbed/sympy/physics/vector/vector.py(127):             other = Vector(0)
0.95 /testbed/sympy/physics/vector/vector.py(38):         self.args = []
0.95 /testbed/sympy/physics/vector/vector.py(39):         if inlist == 0:
0.95 /testbed/sympy/physics/vector/vector.py(40):             inlist = []
0.95 /testbed/sympy/physics/vector/vector.py(41):         if isinstance(inlist, dict):
0.95 /testbed/sympy/physics/vector/vector.py(44):             d = {}
0.95 /testbed/sympy/physics/vector/vector.py(45):             for inp in inlist:
0.95 /testbed/sympy/physics/vector/vector.py(51):         for k, v in d.items():
0.95 /testbed/sympy/physics/vector/vector.py(128):         try:
0.95 /testbed/sympy/physics/vector/vector.py(129):             other = _check_vector(other)
0.95 /testbed/sympy/physics/vector/vector.py(726):     if not isinstance(other, Vector):
0.95 /testbed/sympy/physics/vector/vector.py(728):     return other
0.95 /testbed/sympy/physics/vector/vector.py(132):         if (self.args == []) and (other.args == []):
0.95 /testbed/sympy/physics/vector/vector.py(134):         elif (self.args == []) or (other.args == []):
0.95 /testbed/sympy/physics/vector/vector.py(135):             return False
0.95 /testbed/sympy/physics/vector/vector.py(62):         other = _check_vector(other)
0.95 /testbed/sympy/physics/vector/vector.py(726):     if not isinstance(other, Vector):
0.95 /testbed/sympy/physics/vector/vector.py(728):     return other
0.95 /testbed/sympy/physics/vector/vector.py(63):         return Vector(self.args + other.args)
0.95 /testbed/sympy/physics/vector/vector.py(38):         self.args = []
0.95 /testbed/sympy/physics/vector/vector.py(39):         if inlist == 0:
0.95 /testbed/sympy/physics/vector/vector.py(41):         if isinstance(inlist, dict):
0.95 /testbed/sympy/physics/vector/vector.py(44):             d = {}
0.95 /testbed/sympy/physics/vector/vector.py(45):             for inp in inlist:
0.95 /testbed/sympy/physics/vector/vector.py(46):                 if inp[1] in d:
0.95 /testbed/sympy/physics/vector/vector.py(49):                     d[inp[1]] = inp[0]
0.95 /testbed/sympy/physics/vector/vector.py(45):             for inp in inlist:
0.95 /testbed/sympy/physics/vector/vector.py(46):                 if inp[1] in d:
0.95 /testbed/sympy/physics/vector/vector.py(47):                     d[inp[1]] += inp[0]
0.95 /testbed/sympy/physics/vector/vector.py(45):             for inp in inlist:
0.95 /testbed/sympy/physics/vector/vector.py(51):         for k, v in d.items():
0.95 /testbed/sympy/physics/vector/vector.py(52):             if v != Matrix([0, 0, 0]):
0.95 /testbed/sympy/physics/vector/vector.py(51):         for k, v in d.items():
0.95 /testbed/sympy/physics/vector/vector.py(93):         from sympy.physics.vector.dyadic import Dyadic
0.95 /testbed/sympy/physics/vector/vector.py(94):         if isinstance(other, Dyadic):
0.95 /testbed/sympy/physics/vector/vector.py(96):         other = _check_vector(other)
0.95 /testbed/sympy/physics/vector/vector.py(726):     if not isinstance(other, Vector):
0.95 /testbed/sympy/physics/vector/vector.py(728):     return other
0.95 /testbed/sympy/physics/vector/vector.py(97):         out = S(0)
0.95 /testbed/sympy/physics/vector/vector.py(98):         for i, v1 in enumerate(self.args):
0.95 /testbed/sympy/physics/vector/vector.py(103):         if Vector.simp:
0.95 /testbed/sympy/physics/vector/vector.py(106):             return sympify(out)
0.95 /testbed/sympy/physics/vector/vector.py(138):         for v in frame:
0.95 /testbed/sympy/physics/vector/vector.py(141):         return True
ok                                      [OK]


================== tests finished: 1 passed, in 0.58 seconds ===================
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(sympy/physics/vector/vector\\.py)']
+ cat coverage.cover
{"/testbed/sympy/physics/vector/vector.py": {"1": 1, "3": 1, "4": 1, "5": 1, "7": 1, "10": 2, "717": 2, "725": 1, "24": 1, "26": 1, "55": 1, "58": 1, "65": 1, "108": 1, "112": 1, "114": 1, "143": 1, "170": 1, "173": 1, "176": 1, "216": 1, "252": 1, "302": 1, "342": 1, "345": 1, "387": 1, "391": 1, "451": 1, "452": 1, "453": 1, "454": 1, "455": 1, "456": 1, "458": 1, "483": 1, "485": 1, "487": 1, "489": 1, "491": 1, "493": 1, "495": 1, "560": 1, "589": 1, "630": 1, "637": 1, "654": 1, "661": 1, "682": 1, "686": 1, "690": 1, "700": 1, "38": 15, "39": 15, "40": 5, "41": 15, "42": 0, "44": 15, "45": 28, "46": 13, "47": 3, "49": 10, "51": 25, "52": 10, "53": 6, "56": 0, "60": 5, "61": 2, "62": 3, "63": 3, "93": 3, "94": 3, "95": 0, "96": 3, "97": 3, "98": 3, "99": 0, "100": 0, "101": 0, "102": 0, "103": 3, "104": 0, "106": 3, "110": 0, "126": 6, "127": 5, "128": 6, "129": 6, "130": 0, "131": 0, "132": 6, "133": 1, "134": 5, "135": 4, "137": 1, "138": 4, "139": 3, "140": 0, "141": 1, "165": 12, "166": 8, "167": 4, "168": 4, "171": 0, "174": 0, "197": 0, "198": 0, "199": 0, "200": 0, "201": 0, "205": 0, "206": 0, "207": 0, "208": 0, "209": 0, "210": 0, "211": 0, "212": 0, "213": 0, "214": 0, "219": 0, "221": 0, "222": 0, "223": 0, "224": 0, "225": 0, "226": 0, "228": 0, "229": 0, "231": 0, "232": 0, "233": 0, "236": 0, "237": 0, "238": 0, "239": 0, "240": 0, "241": 0, "243": 0, "244": 0, "245": 0, "246": 0, "247": 0, "248": 0, "249": 0, "250": 0, "254": 0, "255": 0, "256": 0, "258": 0, "300": 0, "260": 0, "261": 0, "262": 0, "263": 0, "264": 0, "265": 0, "266": 0, "267": 0, "268": 0, "270": 0, "271": 0, "273": 0, "274": 0, "275": 0, "276": 0, "277": 0, "278": 0, "281": 0, "282": 0, "283": 0, "285": 0, "286": 0, "287": 0, "288": 0, "290": 0, "291": 0, "293": 0, "294": 0, "295": 0, "296": 0, "297": 0, "298": 0, "323": 0, "324": 0, "325": 0, "326": 0, "327": 0, "331": 0, "332": 0, "333": 0, "334": 0, "335": 0, "336": 0, "337": 0, "338": 0, "339": 0, "340": 0, "343": 0, "347": 0, "349": 0, "350": 0, "351": 0, "352": 0, "354": 0, "355": 0, "356": 0, "357": 0, "358": 0, "359": 0, "360": 0, "361": 0, "363": 0, "364": 0, "366": 0, "367": 0, "368": 0, "371": 0, "372": 0, "373": 0, "374": 0, "375": 0, "376": 0, "378": 0, "379": 0, "380": 0, "381": 0, "382": 0, "383": 0, "384": 0, "385": 0, "389": 3, "419": 0, "420": 0, "421": 0, "422": 0, "423": 0, "424": 0, "426": 0, "439": 0, "440": 0, "441": 0, "442": 0, "443": 0, "444": 0, "445": 0, "446": 0, "447": 0, "448": 0, "449": 0, "434": 0, "435": 0, "436": 0, "437": 0, "478": 0, "479": 0, "480": 0, "481": 0, "484": 0, "488": 0, "492": 0, "534": 0, "536": 0, "537": 0, "539": 0, "541": 0, "542": 0, "543": 0, "544": 0, "545": 0, "549": 0, "550": 0, "551": 0, "552": 0, "554": 0, "555": 0, "556": 0, "558": 0, "586": 0, "587": 0, "627": 0, "628": 0, "632": 0, "633": 0, "634": 0, "635": 0, "651": 0, "652": 0, "656": 0, "657": 0, "658": 0, "659": 0, "677": 0, "678": 0, "679": 0, "680": 0, "684": 0, "688": 0, "692": 0, "693": 0, "695": 0, "696": 0, "697": 0, "698": 0, "714": 0, "719": 1, "720": 0, "721": 0, "722": 0, "726": 12, "727": 0, "728": 12}}
+ git checkout c6753448b5c34f95e250105d76709fe4d349ca1f
Note: switching to 'c6753448b5c34f95e250105d76709fe4d349ca1f'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at c6753448b5 Merge pull request #14691 from caley/14654_lambdify
M	sympy/physics/vector/vector.py
+ git apply /root/pre_state.patch
error: unrecognized input
