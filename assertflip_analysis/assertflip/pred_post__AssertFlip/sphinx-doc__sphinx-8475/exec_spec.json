{"instance_id": "sphinx-doc__sphinx-8475", "repo": "sphinx-doc/sphinx", "version": "3.4", "environment_setup_commit": "3f560cd67239f75840cc7a439ab54d8509c855f6", "patch_list": ["diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -20,7 +20,7 @@\n \n from docutils import nodes\n from docutils.nodes import Node\n-from requests.exceptions import HTTPError\n+from requests.exceptions import HTTPError, TooManyRedirects\n \n from sphinx.application import Sphinx\n from sphinx.builders import Builder\n@@ -172,7 +172,7 @@ def check_uri() -> Tuple[str, str, int]:\n                                                  config=self.app.config, auth=auth_info,\n                                                  **kwargs)\n                         response.raise_for_status()\n-                    except HTTPError:\n+                    except (HTTPError, TooManyRedirects):\n                         # retry with GET request if that fails, some servers\n                         # don't like HEAD requests.\n                         response = requests.get(req_url, stream=True, config=self.app.config,\n", "diff --git a/dev/null b/tests/test_coverup_sphinx-doc__sphinx-8475.py\nnew file mode 100644\nindex e69de29..a1f4222 100644\n--- /dev/null\n+++ b/tests/test_coverup_sphinx-doc__sphinx-8475.py\n@@ -0,0 +1,66 @@\n+import pytest\n+from unittest.mock import patch, Mock\n+from requests.exceptions import TooManyRedirects\n+from sphinx.builders.linkcheck import CheckExternalLinksBuilder\n+from sphinx.application import Sphinx\n+import queue\n+\n+def test_too_many_redirects_fallback():\n+    # Mock the URL to simulate a TooManyRedirects behavior\n+    test_url = \"https://idr.openmicroscopy.org/webclient/?show=well-119093\"\n+\n+    # Create a mock Sphinx app\n+    mock_app = Mock(spec=Sphinx)\n+    mock_app.config = Mock()\n+    mock_app.config.linkcheck_timeout = None\n+    mock_app.config.linkcheck_anchors = False\n+    mock_app.config.linkcheck_retries = 1\n+    mock_app.config.linkcheck_request_headers = {}\n+    mock_app.srcdir = '/mock/srcdir'\n+    mock_app.confdir = '/mock/confdir'\n+    mock_app.outdir = '/mock/outdir'\n+    mock_app.doctreedir = '/mock/doctreedir'\n+    mock_app.events = Mock()  # Add missing attribute\n+    mock_app.tags = Mock()  # Add missing attribute\n+\n+    # Create an instance of the CheckExternalLinksBuilder with the mock app\n+    builder = CheckExternalLinksBuilder(mock_app)\n+\n+    # Initialize the queues as queue.Queue() objects\n+    builder.wqueue = queue.Queue()\n+    builder.rqueue = queue.Queue()\n+\n+    # Initialize necessary attributes\n+    builder.good = set()\n+    builder.broken = {}\n+    builder.redirected = {}\n+    builder.anchors_ignore = []\n+    builder.to_ignore = []\n+    builder.auth = []  # Initialize auth to avoid AttributeError\n+\n+    # Mock requests.head to raise TooManyRedirects\n+    with patch('sphinx.util.requests.head') as mock_head:\n+        mock_head.side_effect = TooManyRedirects\n+\n+        # Mock requests.get to return a successful response\n+        with patch('sphinx.util.requests.get') as mock_get:\n+            mock_response = Mock()\n+            mock_response.raise_for_status.return_value = None\n+            mock_response.url = test_url\n+            mock_get.return_value = mock_response\n+\n+            # Simulate the check_thread method's behavior\n+            builder.wqueue.put((test_url, 'docname', 1))\n+            builder.wqueue.put((None, None, None))\n+\n+            # Run the check_thread method\n+            builder.check_thread()\n+\n+            # Retrieve the result from the rqueue\n+            result = builder.rqueue.get()\n+\n+            # Assert that the status is 'working' when the bug is fixed\n+            assert result[3] == 'working', \"The URL should be reported as working when the bug is fixed.\"\n+\n+            # Assert that the GET request was made\n+            assert mock_get.called, \"The GET request should be made when the bug is fixed.\"\n"], "arch": "x86_64", "base_commit": "3ea1ec84cc610f7a9f4f6b354e264565254923ff", "test_directives": ["tests/test_coverup_sphinx-doc__sphinx-8475.py"], "coverage_files": ["sphinx/builders/linkcheck.py"], "env_name": "testbed", "run_id": "assertflip", "patch_id": "pred_post__AssertFlip", "timeout": 1800, "rm_image": false, "force_rebuild": false, "exec_mode": "unit_test", "reproduction_script_name": null, "compute_coverage": true, "install": {"python": "3.9", "pip_packages": ["tox==4.16.0", "tox-current-env==0.0.11"], "install": "python -m pip install -e .[test]", "pre_install": ["sed -i 's/pytest/pytest -rA/' tox.ini", "sed -i 's/Jinja2>=2.3/Jinja2<3.0/' setup.py", "sed -i 's/sphinxcontrib-applehelp/sphinxcontrib-applehelp<=1.0.7/' setup.py", "sed -i 's/sphinxcontrib-devhelp/sphinxcontrib-devhelp<=1.0.5/' setup.py", "sed -i 's/sphinxcontrib-qthelp/sphinxcontrib-qthelp<=1.0.6/' setup.py", "sed -i 's/alabaster>=0.7,<0.8/alabaster>=0.7,<0.7.12/' setup.py", "sed -i \"s/'packaging',/'packaging', 'markupsafe<=2.0.1',/\" setup.py", "sed -i 's/sphinxcontrib-htmlhelp/sphinxcontrib-htmlhelp<=2.0.4/' setup.py", "sed -i 's/sphinxcontrib-serializinghtml/sphinxcontrib-serializinghtml<=1.1.9/' setup.py"]}, "cache_level": "instance", "test_command": "python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(sphinx/builders/linkcheck\\.py)' -m tox -epy39 -v -- tests/test_coverup_sphinx-doc__sphinx-8475.py", "req_install_commands": ["conda create -n testbed python=3.9  -y"]}