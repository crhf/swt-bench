+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD 93cedc82f29076c824d476354527af1150888e4f
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
nothing to commit, working tree clean
+ git show
commit 93cedc82f29076c824d476354527af1150888e4f
Author: Mehrdad <mhrddmoradii@gmail.com>
Date:   Fri May 27 13:18:06 2022 -0400

    Refs #33697 -- Fixed multipart parsing of headers with double quotes and semicolons.
    
    See https://github.com/python/cpython/commit/1ef0c0349e8fdb5415e21231cb42edbf232b742a

diff --git a/django/http/multipartparser.py b/django/http/multipartparser.py
index 308fbfa385..26fb2bc41f 100644
--- a/django/http/multipartparser.py
+++ b/django/http/multipartparser.py
@@ -748,7 +748,7 @@ def _parse_header_params(s):
     while s[:1] == b";":
         s = s[1:]
         end = s.find(b";")
-        while end > 0 and s.count(b'"', 0, end) % 2:
+        while end > 0 and (s.count(b'"', 0, end) - s.count(b'\\"', 0, end)) % 2:
             end = s.find(b";", end + 1)
         if end < 0:
             end = len(s)
diff --git a/tests/file_uploads/tests.py b/tests/file_uploads/tests.py
index c96f36e2a1..44c54d908e 100644
--- a/tests/file_uploads/tests.py
+++ b/tests/file_uploads/tests.py
@@ -944,3 +944,9 @@ class MultiParserTests(SimpleTestCase):
         for raw_line, expected_title in test_data:
             parsed = parse_header(raw_line)
             self.assertEqual(parsed[1]["title"], expected_title)
+
+    def test_parse_header_with_double_quotes_and_semicolon(self):
+        self.assertEqual(
+            parse_header(b'form-data; name="files"; filename="fo\\"o;bar"'),
+            ("form-data", {"name": b"files", "filename": b'fo"o;bar'}),
+        )
+ git diff 93cedc82f29076c824d476354527af1150888e4f
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Checking if build backend supports build_editable: started
  Checking if build backend supports build_editable: finished with status 'done'
  Getting requirements to build editable: started
  Getting requirements to build editable: finished with status 'done'
  Preparing editable metadata (pyproject.toml): started
  Preparing editable metadata (pyproject.toml): finished with status 'done'
Requirement already satisfied: asgiref>=3.4.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Django==4.2.dev20220601081107) (3.9.1)
Requirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Django==4.2.dev20220601081107) (0.5.3)
Requirement already satisfied: typing_extensions>=4 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from asgiref>=3.4.1->Django==4.2.dev20220601081107) (4.14.1)
Building wheels for collected packages: Django
  Building editable for Django (pyproject.toml): started
  Building editable for Django (pyproject.toml): finished with status 'done'
  Created wheel for Django: filename=django-4.2.dev20220601081107-0.editable-py3-none-any.whl size=27102 sha256=e55ad7749ac6c2526010c9cf9db5873ce603a726cb3cbe37d5a7f1122ead4a85
  Stored in directory: /tmp/pip-ephem-wheel-cache-nmgnrcnw/wheels/7d/66/67/70d1ee2124ccf21d601c352e25cdca10f611f7c8b3f9ffb9e4
Successfully built Django
Installing collected packages: Django
  Attempting uninstall: Django
    Found existing installation: Django 4.2.dev20220601081107
    Uninstalling Django-4.2.dev20220601081107:
      Successfully uninstalled Django-4.2.dev20220601081107
Successfully installed Django-4.2.dev20220601081107
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git apply -v -
Checking patch django/db/models/manager.py...
Applied patch django/db/models/manager.py cleanly.
+ git apply -v -
<stdin>:22: trailing whitespace.
        
Checking patch tests/test_coverup_django__django-15731.py...
Applied patch tests/test_coverup_django__django-15731.py cleanly.
warning: 1 line adds whitespace errors.
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/db/models/manager\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-15731
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(django/db/models/manager\\.py)']
0.29 /testbed/django/db/models/manager.py(1): import copy
0.29 /testbed/django/db/models/manager.py(2): import inspect
0.29 /testbed/django/db/models/manager.py(3): from functools import wraps
0.29 /testbed/django/db/models/manager.py(4): from importlib import import_module
0.29 /testbed/django/db/models/manager.py(6): from django.db import router
0.29 /testbed/django/db/models/manager.py(7): from django.db.models.query import QuerySet
0.30 /testbed/django/db/models/manager.py(10): class BaseManager:
0.30 /testbed/django/db/models/manager.py(10): class BaseManager:
0.30 /testbed/django/db/models/manager.py(12):     creation_counter = 0
0.30 /testbed/django/db/models/manager.py(15):     auto_created = False
0.30 /testbed/django/db/models/manager.py(19):     use_in_migrations = False
0.30 /testbed/django/db/models/manager.py(21):     def __new__(cls, *args, **kwargs):
0.30 /testbed/django/db/models/manager.py(27):     def __init__(self):
0.30 /testbed/django/db/models/manager.py(35):     def __str__(self):
0.30 /testbed/django/db/models/manager.py(39):     def __class_getitem__(cls, *args, **kwargs):
0.30 /testbed/django/db/models/manager.py(42):     def deconstruct(self):
0.30 /testbed/django/db/models/manager.py(79):     def check(self, **kwargs):
0.30 /testbed/django/db/models/manager.py(82):     @classmethod
0.30 /testbed/django/db/models/manager.py(83):     def _get_queryset_methods(cls, queryset_class):
0.30 /testbed/django/db/models/manager.py(107):     @classmethod
0.30 /testbed/django/db/models/manager.py(108):     def from_queryset(cls, queryset_class, class_name=None):
0.30 /testbed/django/db/models/manager.py(120):     def contribute_to_class(self, cls, name):
0.30 /testbed/django/db/models/manager.py(128):     def _set_creation_counter(self):
0.30 /testbed/django/db/models/manager.py(136):     def db_manager(self, using=None, hints=None):
0.30 /testbed/django/db/models/manager.py(142):     @property
0.30 /testbed/django/db/models/manager.py(143):     def db(self):
0.30 /testbed/django/db/models/manager.py(150):     def get_queryset(self):
0.30 /testbed/django/db/models/manager.py(157):     def all(self):
0.30 /testbed/django/db/models/manager.py(166):     def __eq__(self, other):
0.30 /testbed/django/db/models/manager.py(172):     def __hash__(self):
0.30 /testbed/django/db/models/manager.py(176): class Manager(BaseManager.from_queryset(QuerySet)):
0.30 /testbed/django/db/models/manager.py(109):         if class_name is None:
0.30 /testbed/django/db/models/manager.py(110):             class_name = "%sFrom%s" % (cls.__name__, queryset_class.__name__)
0.30 /testbed/django/db/models/manager.py(111):         return type(
0.30 /testbed/django/db/models/manager.py(112):             class_name,
0.30 /testbed/django/db/models/manager.py(113):             (cls,),
0.30 /testbed/django/db/models/manager.py(115):                 "_queryset_class": queryset_class,
0.30 /testbed/django/db/models/manager.py(114):             {
0.30 /testbed/django/db/models/manager.py(116):                 **cls._get_queryset_methods(queryset_class),
0.30 /testbed/django/db/models/manager.py(84):         def create_method(name, method):
0.30 /testbed/django/db/models/manager.py(91):         new_methods = {}
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(93):             queryset_class, predicate=inspect.isfunction
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(102):                 continue
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(102):                 continue
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(102):                 continue
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(102):                 continue
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(102):                 continue
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(102):                 continue
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(97):                 continue
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(102):                 continue
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(102):                 continue
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(102):                 continue
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(97):                 continue
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(102):                 continue
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(102):                 continue
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(102):                 continue
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(102):                 continue
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(102):                 continue
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(102):                 continue
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(102):                 continue
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(102):                 continue
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(102):                 continue
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(102):                 continue
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(102):                 continue
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(102):                 continue
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(102):                 continue
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(102):                 continue
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(102):                 continue
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(102):                 continue
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(104):             new_methods[name] = create_method(name, method)
0.30 /testbed/django/db/models/manager.py(85):             @wraps(method)
0.30 /testbed/django/db/models/manager.py(86):             def manager_method(self, *args, **kwargs):
0.30 /testbed/django/db/models/manager.py(89):             return manager_method
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(102):                 continue
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(102):                 continue
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(102):                 continue
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(102):                 continue
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(102):                 continue
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(102):                 continue
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(102):                 continue
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(102):                 continue
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(104):             new_methods[name] = create_method(name, method)
0.30 /testbed/django/db/models/manager.py(85):             @wraps(method)
0.30 /testbed/django/db/models/manager.py(86):             def manager_method(self, *args, **kwargs):
0.30 /testbed/django/db/models/manager.py(89):             return manager_method
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(102):                 continue
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(102):                 continue
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(104):             new_methods[name] = create_method(name, method)
0.30 /testbed/django/db/models/manager.py(85):             @wraps(method)
0.30 /testbed/django/db/models/manager.py(86):             def manager_method(self, *args, **kwargs):
0.30 /testbed/django/db/models/manager.py(89):             return manager_method
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(104):             new_methods[name] = create_method(name, method)
0.30 /testbed/django/db/models/manager.py(85):             @wraps(method)
0.30 /testbed/django/db/models/manager.py(86):             def manager_method(self, *args, **kwargs):
0.30 /testbed/django/db/models/manager.py(89):             return manager_method
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(104):             new_methods[name] = create_method(name, method)
0.30 /testbed/django/db/models/manager.py(85):             @wraps(method)
0.30 /testbed/django/db/models/manager.py(86):             def manager_method(self, *args, **kwargs):
0.30 /testbed/django/db/models/manager.py(89):             return manager_method
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(104):             new_methods[name] = create_method(name, method)
0.30 /testbed/django/db/models/manager.py(85):             @wraps(method)
0.30 /testbed/django/db/models/manager.py(86):             def manager_method(self, *args, **kwargs):
0.30 /testbed/django/db/models/manager.py(89):             return manager_method
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(104):             new_methods[name] = create_method(name, method)
0.30 /testbed/django/db/models/manager.py(85):             @wraps(method)
0.30 /testbed/django/db/models/manager.py(86):             def manager_method(self, *args, **kwargs):
0.30 /testbed/django/db/models/manager.py(89):             return manager_method
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(104):             new_methods[name] = create_method(name, method)
0.30 /testbed/django/db/models/manager.py(85):             @wraps(method)
0.30 /testbed/django/db/models/manager.py(86):             def manager_method(self, *args, **kwargs):
0.30 /testbed/django/db/models/manager.py(89):             return manager_method
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(104):             new_methods[name] = create_method(name, method)
0.30 /testbed/django/db/models/manager.py(85):             @wraps(method)
0.30 /testbed/django/db/models/manager.py(86):             def manager_method(self, *args, **kwargs):
0.30 /testbed/django/db/models/manager.py(89):             return manager_method
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(104):             new_methods[name] = create_method(name, method)
0.30 /testbed/django/db/models/manager.py(85):             @wraps(method)
0.30 /testbed/django/db/models/manager.py(86):             def manager_method(self, *args, **kwargs):
0.30 /testbed/django/db/models/manager.py(89):             return manager_method
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(104):             new_methods[name] = create_method(name, method)
0.30 /testbed/django/db/models/manager.py(85):             @wraps(method)
0.30 /testbed/django/db/models/manager.py(86):             def manager_method(self, *args, **kwargs):
0.30 /testbed/django/db/models/manager.py(89):             return manager_method
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(104):             new_methods[name] = create_method(name, method)
0.30 /testbed/django/db/models/manager.py(85):             @wraps(method)
0.30 /testbed/django/db/models/manager.py(86):             def manager_method(self, *args, **kwargs):
0.30 /testbed/django/db/models/manager.py(89):             return manager_method
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(104):             new_methods[name] = create_method(name, method)
0.30 /testbed/django/db/models/manager.py(85):             @wraps(method)
0.30 /testbed/django/db/models/manager.py(86):             def manager_method(self, *args, **kwargs):
0.30 /testbed/django/db/models/manager.py(89):             return manager_method
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(104):             new_methods[name] = create_method(name, method)
0.30 /testbed/django/db/models/manager.py(85):             @wraps(method)
0.30 /testbed/django/db/models/manager.py(86):             def manager_method(self, *args, **kwargs):
0.30 /testbed/django/db/models/manager.py(89):             return manager_method
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(104):             new_methods[name] = create_method(name, method)
0.30 /testbed/django/db/models/manager.py(85):             @wraps(method)
0.30 /testbed/django/db/models/manager.py(86):             def manager_method(self, *args, **kwargs):
0.30 /testbed/django/db/models/manager.py(89):             return manager_method
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(104):             new_methods[name] = create_method(name, method)
0.30 /testbed/django/db/models/manager.py(85):             @wraps(method)
0.30 /testbed/django/db/models/manager.py(86):             def manager_method(self, *args, **kwargs):
0.30 /testbed/django/db/models/manager.py(89):             return manager_method
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(104):             new_methods[name] = create_method(name, method)
0.30 /testbed/django/db/models/manager.py(85):             @wraps(method)
0.30 /testbed/django/db/models/manager.py(86):             def manager_method(self, *args, **kwargs):
0.30 /testbed/django/db/models/manager.py(89):             return manager_method
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(104):             new_methods[name] = create_method(name, method)
0.30 /testbed/django/db/models/manager.py(85):             @wraps(method)
0.30 /testbed/django/db/models/manager.py(86):             def manager_method(self, *args, **kwargs):
0.30 /testbed/django/db/models/manager.py(89):             return manager_method
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(104):             new_methods[name] = create_method(name, method)
0.30 /testbed/django/db/models/manager.py(85):             @wraps(method)
0.30 /testbed/django/db/models/manager.py(86):             def manager_method(self, *args, **kwargs):
0.30 /testbed/django/db/models/manager.py(89):             return manager_method
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(104):             new_methods[name] = create_method(name, method)
0.30 /testbed/django/db/models/manager.py(85):             @wraps(method)
0.30 /testbed/django/db/models/manager.py(86):             def manager_method(self, *args, **kwargs):
0.30 /testbed/django/db/models/manager.py(89):             return manager_method
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(97):                 continue
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(104):             new_methods[name] = create_method(name, method)
0.30 /testbed/django/db/models/manager.py(85):             @wraps(method)
0.30 /testbed/django/db/models/manager.py(86):             def manager_method(self, *args, **kwargs):
0.30 /testbed/django/db/models/manager.py(89):             return manager_method
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(104):             new_methods[name] = create_method(name, method)
0.30 /testbed/django/db/models/manager.py(85):             @wraps(method)
0.30 /testbed/django/db/models/manager.py(86):             def manager_method(self, *args, **kwargs):
0.30 /testbed/django/db/models/manager.py(89):             return manager_method
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(104):             new_methods[name] = create_method(name, method)
0.30 /testbed/django/db/models/manager.py(85):             @wraps(method)
0.30 /testbed/django/db/models/manager.py(86):             def manager_method(self, *args, **kwargs):
0.30 /testbed/django/db/models/manager.py(89):             return manager_method
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(104):             new_methods[name] = create_method(name, method)
0.30 /testbed/django/db/models/manager.py(85):             @wraps(method)
0.30 /testbed/django/db/models/manager.py(86):             def manager_method(self, *args, **kwargs):
0.30 /testbed/django/db/models/manager.py(89):             return manager_method
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(104):             new_methods[name] = create_method(name, method)
0.30 /testbed/django/db/models/manager.py(85):             @wraps(method)
0.30 /testbed/django/db/models/manager.py(86):             def manager_method(self, *args, **kwargs):
0.30 /testbed/django/db/models/manager.py(89):             return manager_method
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(104):             new_methods[name] = create_method(name, method)
0.30 /testbed/django/db/models/manager.py(85):             @wraps(method)
0.30 /testbed/django/db/models/manager.py(86):             def manager_method(self, *args, **kwargs):
0.30 /testbed/django/db/models/manager.py(89):             return manager_method
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(104):             new_methods[name] = create_method(name, method)
0.30 /testbed/django/db/models/manager.py(85):             @wraps(method)
0.30 /testbed/django/db/models/manager.py(86):             def manager_method(self, *args, **kwargs):
0.30 /testbed/django/db/models/manager.py(89):             return manager_method
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(104):             new_methods[name] = create_method(name, method)
0.30 /testbed/django/db/models/manager.py(85):             @wraps(method)
0.30 /testbed/django/db/models/manager.py(86):             def manager_method(self, *args, **kwargs):
0.30 /testbed/django/db/models/manager.py(89):             return manager_method
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(104):             new_methods[name] = create_method(name, method)
0.30 /testbed/django/db/models/manager.py(85):             @wraps(method)
0.30 /testbed/django/db/models/manager.py(86):             def manager_method(self, *args, **kwargs):
0.30 /testbed/django/db/models/manager.py(89):             return manager_method
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(104):             new_methods[name] = create_method(name, method)
0.30 /testbed/django/db/models/manager.py(85):             @wraps(method)
0.30 /testbed/django/db/models/manager.py(86):             def manager_method(self, *args, **kwargs):
0.30 /testbed/django/db/models/manager.py(89):             return manager_method
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(104):             new_methods[name] = create_method(name, method)
0.30 /testbed/django/db/models/manager.py(85):             @wraps(method)
0.30 /testbed/django/db/models/manager.py(86):             def manager_method(self, *args, **kwargs):
0.30 /testbed/django/db/models/manager.py(89):             return manager_method
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(104):             new_methods[name] = create_method(name, method)
0.30 /testbed/django/db/models/manager.py(85):             @wraps(method)
0.30 /testbed/django/db/models/manager.py(86):             def manager_method(self, *args, **kwargs):
0.30 /testbed/django/db/models/manager.py(89):             return manager_method
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(104):             new_methods[name] = create_method(name, method)
0.30 /testbed/django/db/models/manager.py(85):             @wraps(method)
0.30 /testbed/django/db/models/manager.py(86):             def manager_method(self, *args, **kwargs):
0.30 /testbed/django/db/models/manager.py(89):             return manager_method
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(104):             new_methods[name] = create_method(name, method)
0.30 /testbed/django/db/models/manager.py(85):             @wraps(method)
0.30 /testbed/django/db/models/manager.py(86):             def manager_method(self, *args, **kwargs):
0.30 /testbed/django/db/models/manager.py(89):             return manager_method
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(104):             new_methods[name] = create_method(name, method)
0.30 /testbed/django/db/models/manager.py(85):             @wraps(method)
0.30 /testbed/django/db/models/manager.py(86):             def manager_method(self, *args, **kwargs):
0.30 /testbed/django/db/models/manager.py(89):             return manager_method
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(104):             new_methods[name] = create_method(name, method)
0.30 /testbed/django/db/models/manager.py(85):             @wraps(method)
0.30 /testbed/django/db/models/manager.py(86):             def manager_method(self, *args, **kwargs):
0.30 /testbed/django/db/models/manager.py(89):             return manager_method
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(104):             new_methods[name] = create_method(name, method)
0.30 /testbed/django/db/models/manager.py(85):             @wraps(method)
0.30 /testbed/django/db/models/manager.py(86):             def manager_method(self, *args, **kwargs):
0.30 /testbed/django/db/models/manager.py(89):             return manager_method
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(104):             new_methods[name] = create_method(name, method)
0.30 /testbed/django/db/models/manager.py(85):             @wraps(method)
0.30 /testbed/django/db/models/manager.py(86):             def manager_method(self, *args, **kwargs):
0.30 /testbed/django/db/models/manager.py(89):             return manager_method
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(104):             new_methods[name] = create_method(name, method)
0.30 /testbed/django/db/models/manager.py(85):             @wraps(method)
0.30 /testbed/django/db/models/manager.py(86):             def manager_method(self, *args, **kwargs):
0.30 /testbed/django/db/models/manager.py(89):             return manager_method
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(104):             new_methods[name] = create_method(name, method)
0.30 /testbed/django/db/models/manager.py(85):             @wraps(method)
0.30 /testbed/django/db/models/manager.py(86):             def manager_method(self, *args, **kwargs):
0.30 /testbed/django/db/models/manager.py(89):             return manager_method
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(104):             new_methods[name] = create_method(name, method)
0.30 /testbed/django/db/models/manager.py(85):             @wraps(method)
0.30 /testbed/django/db/models/manager.py(86):             def manager_method(self, *args, **kwargs):
0.30 /testbed/django/db/models/manager.py(89):             return manager_method
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(104):             new_methods[name] = create_method(name, method)
0.30 /testbed/django/db/models/manager.py(85):             @wraps(method)
0.30 /testbed/django/db/models/manager.py(86):             def manager_method(self, *args, **kwargs):
0.30 /testbed/django/db/models/manager.py(89):             return manager_method
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(104):             new_methods[name] = create_method(name, method)
0.30 /testbed/django/db/models/manager.py(85):             @wraps(method)
0.30 /testbed/django/db/models/manager.py(86):             def manager_method(self, *args, **kwargs):
0.30 /testbed/django/db/models/manager.py(89):             return manager_method
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(104):             new_methods[name] = create_method(name, method)
0.30 /testbed/django/db/models/manager.py(85):             @wraps(method)
0.30 /testbed/django/db/models/manager.py(86):             def manager_method(self, *args, **kwargs):
0.30 /testbed/django/db/models/manager.py(89):             return manager_method
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(104):             new_methods[name] = create_method(name, method)
0.30 /testbed/django/db/models/manager.py(85):             @wraps(method)
0.30 /testbed/django/db/models/manager.py(86):             def manager_method(self, *args, **kwargs):
0.30 /testbed/django/db/models/manager.py(89):             return manager_method
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(104):             new_methods[name] = create_method(name, method)
0.30 /testbed/django/db/models/manager.py(85):             @wraps(method)
0.30 /testbed/django/db/models/manager.py(86):             def manager_method(self, *args, **kwargs):
0.30 /testbed/django/db/models/manager.py(89):             return manager_method
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(104):             new_methods[name] = create_method(name, method)
0.30 /testbed/django/db/models/manager.py(85):             @wraps(method)
0.30 /testbed/django/db/models/manager.py(86):             def manager_method(self, *args, **kwargs):
0.30 /testbed/django/db/models/manager.py(89):             return manager_method
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(104):             new_methods[name] = create_method(name, method)
0.30 /testbed/django/db/models/manager.py(85):             @wraps(method)
0.30 /testbed/django/db/models/manager.py(86):             def manager_method(self, *args, **kwargs):
0.30 /testbed/django/db/models/manager.py(89):             return manager_method
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(104):             new_methods[name] = create_method(name, method)
0.30 /testbed/django/db/models/manager.py(85):             @wraps(method)
0.30 /testbed/django/db/models/manager.py(86):             def manager_method(self, *args, **kwargs):
0.30 /testbed/django/db/models/manager.py(89):             return manager_method
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(104):             new_methods[name] = create_method(name, method)
0.30 /testbed/django/db/models/manager.py(85):             @wraps(method)
0.30 /testbed/django/db/models/manager.py(86):             def manager_method(self, *args, **kwargs):
0.30 /testbed/django/db/models/manager.py(89):             return manager_method
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(104):             new_methods[name] = create_method(name, method)
0.30 /testbed/django/db/models/manager.py(85):             @wraps(method)
0.30 /testbed/django/db/models/manager.py(86):             def manager_method(self, *args, **kwargs):
0.30 /testbed/django/db/models/manager.py(89):             return manager_method
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(104):             new_methods[name] = create_method(name, method)
0.30 /testbed/django/db/models/manager.py(85):             @wraps(method)
0.30 /testbed/django/db/models/manager.py(86):             def manager_method(self, *args, **kwargs):
0.30 /testbed/django/db/models/manager.py(89):             return manager_method
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(104):             new_methods[name] = create_method(name, method)
0.30 /testbed/django/db/models/manager.py(85):             @wraps(method)
0.30 /testbed/django/db/models/manager.py(86):             def manager_method(self, *args, **kwargs):
0.30 /testbed/django/db/models/manager.py(89):             return manager_method
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(104):             new_methods[name] = create_method(name, method)
0.30 /testbed/django/db/models/manager.py(85):             @wraps(method)
0.30 /testbed/django/db/models/manager.py(86):             def manager_method(self, *args, **kwargs):
0.30 /testbed/django/db/models/manager.py(89):             return manager_method
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(104):             new_methods[name] = create_method(name, method)
0.30 /testbed/django/db/models/manager.py(85):             @wraps(method)
0.30 /testbed/django/db/models/manager.py(86):             def manager_method(self, *args, **kwargs):
0.30 /testbed/django/db/models/manager.py(89):             return manager_method
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(104):             new_methods[name] = create_method(name, method)
0.30 /testbed/django/db/models/manager.py(85):             @wraps(method)
0.30 /testbed/django/db/models/manager.py(86):             def manager_method(self, *args, **kwargs):
0.30 /testbed/django/db/models/manager.py(89):             return manager_method
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(104):             new_methods[name] = create_method(name, method)
0.30 /testbed/django/db/models/manager.py(85):             @wraps(method)
0.30 /testbed/django/db/models/manager.py(86):             def manager_method(self, *args, **kwargs):
0.30 /testbed/django/db/models/manager.py(89):             return manager_method
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(104):             new_methods[name] = create_method(name, method)
0.30 /testbed/django/db/models/manager.py(85):             @wraps(method)
0.30 /testbed/django/db/models/manager.py(86):             def manager_method(self, *args, **kwargs):
0.30 /testbed/django/db/models/manager.py(89):             return manager_method
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(104):             new_methods[name] = create_method(name, method)
0.30 /testbed/django/db/models/manager.py(85):             @wraps(method)
0.30 /testbed/django/db/models/manager.py(86):             def manager_method(self, *args, **kwargs):
0.30 /testbed/django/db/models/manager.py(89):             return manager_method
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(104):             new_methods[name] = create_method(name, method)
0.30 /testbed/django/db/models/manager.py(85):             @wraps(method)
0.30 /testbed/django/db/models/manager.py(86):             def manager_method(self, *args, **kwargs):
0.30 /testbed/django/db/models/manager.py(89):             return manager_method
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(104):             new_methods[name] = create_method(name, method)
0.30 /testbed/django/db/models/manager.py(85):             @wraps(method)
0.30 /testbed/django/db/models/manager.py(86):             def manager_method(self, *args, **kwargs):
0.30 /testbed/django/db/models/manager.py(89):             return manager_method
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(96):             if hasattr(cls, name):
0.30 /testbed/django/db/models/manager.py(100):             queryset_only = getattr(method, "queryset_only", None)
0.30 /testbed/django/db/models/manager.py(101):             if queryset_only or (queryset_only is None and name.startswith("_")):
0.30 /testbed/django/db/models/manager.py(104):             new_methods[name] = create_method(name, method)
0.30 /testbed/django/db/models/manager.py(85):             @wraps(method)
0.30 /testbed/django/db/models/manager.py(86):             def manager_method(self, *args, **kwargs):
0.30 /testbed/django/db/models/manager.py(89):             return manager_method
0.30 /testbed/django/db/models/manager.py(92):         for name, method in inspect.getmembers(
0.30 /testbed/django/db/models/manager.py(105):         return new_methods
0.30 /testbed/django/db/models/manager.py(114):             {
0.30 /testbed/django/db/models/manager.py(111):         return type(
0.30 /testbed/django/db/models/manager.py(176): class Manager(BaseManager.from_queryset(QuerySet)):
0.30 /testbed/django/db/models/manager.py(177):     pass
0.30 /testbed/django/db/models/manager.py(180): class ManagerDescriptor:
0.30 /testbed/django/db/models/manager.py(180): class ManagerDescriptor:
0.30 /testbed/django/db/models/manager.py(181):     def __init__(self, manager):
0.30 /testbed/django/db/models/manager.py(184):     def __get__(self, instance, cls=None):
0.30 /testbed/django/db/models/manager.py(207): class EmptyManager(Manager):
0.30 /testbed/django/db/models/manager.py(207): class EmptyManager(Manager):
0.30 /testbed/django/db/models/manager.py(208):     def __init__(self, model):
0.30 /testbed/django/db/models/manager.py(212):     def get_queryset(self):
Testing against Django installed in '/testbed/django'
0.52 /testbed/django/db/models/manager.py(23):         obj = super().__new__(cls)
0.52 /testbed/django/db/models/manager.py(24):         obj._constructor_args = (args, kwargs)
0.52 /testbed/django/db/models/manager.py(25):         return obj
0.52 /testbed/django/db/models/manager.py(28):         super().__init__()
0.52 /testbed/django/db/models/manager.py(29):         self._set_creation_counter()
0.52 /testbed/django/db/models/manager.py(133):         self.creation_counter = BaseManager.creation_counter
0.52 /testbed/django/db/models/manager.py(134):         BaseManager.creation_counter += 1
0.52 /testbed/django/db/models/manager.py(30):         self.model = None
0.52 /testbed/django/db/models/manager.py(31):         self.name = None
0.52 /testbed/django/db/models/manager.py(32):         self._db = None
0.52 /testbed/django/db/models/manager.py(33):         self._hints = {}
0.52 /testbed/django/db/models/manager.py(121):         self.name = self.name or name
0.52 /testbed/django/db/models/manager.py(122):         self.model = cls
0.52 /testbed/django/db/models/manager.py(124):         setattr(cls, name, ManagerDescriptor(self))
0.52 /testbed/django/db/models/manager.py(182):         self.manager = manager
0.52 /testbed/django/db/models/manager.py(126):         cls._meta.add_manager(self)
0.52 /testbed/django/db/models/manager.py(23):         obj = super().__new__(cls)
0.52 /testbed/django/db/models/manager.py(24):         obj._constructor_args = (args, kwargs)
0.52 /testbed/django/db/models/manager.py(25):         return obj
0.56 /testbed/django/db/models/manager.py(23):         obj = super().__new__(cls)
0.56 /testbed/django/db/models/manager.py(24):         obj._constructor_args = (args, kwargs)
0.56 /testbed/django/db/models/manager.py(25):         return obj
0.56 /testbed/django/db/models/manager.py(28):         super().__init__()
0.56 /testbed/django/db/models/manager.py(29):         self._set_creation_counter()
0.56 /testbed/django/db/models/manager.py(133):         self.creation_counter = BaseManager.creation_counter
0.56 /testbed/django/db/models/manager.py(134):         BaseManager.creation_counter += 1
0.56 /testbed/django/db/models/manager.py(30):         self.model = None
0.56 /testbed/django/db/models/manager.py(31):         self.name = None
0.56 /testbed/django/db/models/manager.py(32):         self._db = None
0.56 /testbed/django/db/models/manager.py(33):         self._hints = {}
0.56 /testbed/django/db/models/manager.py(121):         self.name = self.name or name
0.56 /testbed/django/db/models/manager.py(122):         self.model = cls
0.57 /testbed/django/db/models/manager.py(124):         setattr(cls, name, ManagerDescriptor(self))
0.57 /testbed/django/db/models/manager.py(182):         self.manager = manager
0.57 /testbed/django/db/models/manager.py(126):         cls._meta.add_manager(self)
0.57 /testbed/django/db/models/manager.py(23):         obj = super().__new__(cls)
0.57 /testbed/django/db/models/manager.py(24):         obj._constructor_args = (args, kwargs)
0.57 /testbed/django/db/models/manager.py(25):         return obj
0.57 /testbed/django/db/models/manager.py(23):         obj = super().__new__(cls)
0.57 /testbed/django/db/models/manager.py(24):         obj._constructor_args = (args, kwargs)
0.57 /testbed/django/db/models/manager.py(25):         return obj
0.57 /testbed/django/db/models/manager.py(28):         super().__init__()
0.57 /testbed/django/db/models/manager.py(29):         self._set_creation_counter()
0.57 /testbed/django/db/models/manager.py(133):         self.creation_counter = BaseManager.creation_counter
0.57 /testbed/django/db/models/manager.py(134):         BaseManager.creation_counter += 1
0.57 /testbed/django/db/models/manager.py(30):         self.model = None
0.57 /testbed/django/db/models/manager.py(31):         self.name = None
0.57 /testbed/django/db/models/manager.py(32):         self._db = None
0.57 /testbed/django/db/models/manager.py(33):         self._hints = {}
0.57 /testbed/django/db/models/manager.py(23):         obj = super().__new__(cls)
0.57 /testbed/django/db/models/manager.py(24):         obj._constructor_args = (args, kwargs)
0.57 /testbed/django/db/models/manager.py(25):         return obj
0.57 /testbed/django/db/models/manager.py(28):         super().__init__()
0.57 /testbed/django/db/models/manager.py(29):         self._set_creation_counter()
0.57 /testbed/django/db/models/manager.py(133):         self.creation_counter = BaseManager.creation_counter
0.57 /testbed/django/db/models/manager.py(134):         BaseManager.creation_counter += 1
0.57 /testbed/django/db/models/manager.py(30):         self.model = None
0.57 /testbed/django/db/models/manager.py(31):         self.name = None
0.57 /testbed/django/db/models/manager.py(32):         self._db = None
0.57 /testbed/django/db/models/manager.py(33):         self._hints = {}
0.57 /testbed/django/db/models/manager.py(121):         self.name = self.name or name
0.57 /testbed/django/db/models/manager.py(122):         self.model = cls
0.57 /testbed/django/db/models/manager.py(124):         setattr(cls, name, ManagerDescriptor(self))
0.57 /testbed/django/db/models/manager.py(182):         self.manager = manager
0.57 /testbed/django/db/models/manager.py(126):         cls._meta.add_manager(self)
0.57 /testbed/django/db/models/manager.py(121):         self.name = self.name or name
0.57 /testbed/django/db/models/manager.py(122):         self.model = cls
0.57 /testbed/django/db/models/manager.py(124):         setattr(cls, name, ManagerDescriptor(self))
0.57 /testbed/django/db/models/manager.py(182):         self.manager = manager
0.57 /testbed/django/db/models/manager.py(126):         cls._meta.add_manager(self)
0.57 /testbed/django/db/models/manager.py(23):         obj = super().__new__(cls)
0.57 /testbed/django/db/models/manager.py(24):         obj._constructor_args = (args, kwargs)
0.57 /testbed/django/db/models/manager.py(25):         return obj
0.57 /testbed/django/db/models/manager.py(23):         obj = super().__new__(cls)
0.57 /testbed/django/db/models/manager.py(24):         obj._constructor_args = (args, kwargs)
0.57 /testbed/django/db/models/manager.py(25):         return obj
0.57 /testbed/django/db/models/manager.py(28):         super().__init__()
0.57 /testbed/django/db/models/manager.py(29):         self._set_creation_counter()
0.57 /testbed/django/db/models/manager.py(133):         self.creation_counter = BaseManager.creation_counter
0.57 /testbed/django/db/models/manager.py(134):         BaseManager.creation_counter += 1
0.57 /testbed/django/db/models/manager.py(30):         self.model = None
0.57 /testbed/django/db/models/manager.py(31):         self.name = None
0.57 /testbed/django/db/models/manager.py(32):         self._db = None
0.57 /testbed/django/db/models/manager.py(33):         self._hints = {}
0.57 /testbed/django/db/models/manager.py(121):         self.name = self.name or name
0.57 /testbed/django/db/models/manager.py(122):         self.model = cls
0.57 /testbed/django/db/models/manager.py(124):         setattr(cls, name, ManagerDescriptor(self))
0.57 /testbed/django/db/models/manager.py(182):         self.manager = manager
0.57 /testbed/django/db/models/manager.py(126):         cls._meta.add_manager(self)
0.57 /testbed/django/db/models/manager.py(23):         obj = super().__new__(cls)
0.57 /testbed/django/db/models/manager.py(24):         obj._constructor_args = (args, kwargs)
0.57 /testbed/django/db/models/manager.py(25):         return obj
0.57 /testbed/django/db/models/manager.py(28):         super().__init__()
0.57 /testbed/django/db/models/manager.py(29):         self._set_creation_counter()
0.57 /testbed/django/db/models/manager.py(133):         self.creation_counter = BaseManager.creation_counter
0.57 /testbed/django/db/models/manager.py(134):         BaseManager.creation_counter += 1
0.57 /testbed/django/db/models/manager.py(30):         self.model = None
0.57 /testbed/django/db/models/manager.py(31):         self.name = None
0.57 /testbed/django/db/models/manager.py(32):         self._db = None
0.57 /testbed/django/db/models/manager.py(33):         self._hints = {}
0.57 /testbed/django/db/models/manager.py(121):         self.name = self.name or name
0.57 /testbed/django/db/models/manager.py(122):         self.model = cls
0.57 /testbed/django/db/models/manager.py(124):         setattr(cls, name, ManagerDescriptor(self))
0.57 /testbed/django/db/models/manager.py(182):         self.manager = manager
0.57 /testbed/django/db/models/manager.py(126):         cls._meta.add_manager(self)
0.57 /testbed/django/db/models/manager.py(23):         obj = super().__new__(cls)
0.57 /testbed/django/db/models/manager.py(24):         obj._constructor_args = (args, kwargs)
0.57 /testbed/django/db/models/manager.py(25):         return obj
0.57 /testbed/django/db/models/manager.py(28):         super().__init__()
0.57 /testbed/django/db/models/manager.py(29):         self._set_creation_counter()
0.57 /testbed/django/db/models/manager.py(133):         self.creation_counter = BaseManager.creation_counter
0.57 /testbed/django/db/models/manager.py(134):         BaseManager.creation_counter += 1
0.57 /testbed/django/db/models/manager.py(30):         self.model = None
0.57 /testbed/django/db/models/manager.py(31):         self.name = None
0.57 /testbed/django/db/models/manager.py(32):         self._db = None
0.57 /testbed/django/db/models/manager.py(33):         self._hints = {}
0.57 /testbed/django/db/models/manager.py(121):         self.name = self.name or name
0.57 /testbed/django/db/models/manager.py(122):         self.model = cls
0.57 /testbed/django/db/models/manager.py(124):         setattr(cls, name, ManagerDescriptor(self))
0.57 /testbed/django/db/models/manager.py(182):         self.manager = manager
0.57 /testbed/django/db/models/manager.py(126):         cls._meta.add_manager(self)
0.57 /testbed/django/db/models/manager.py(23):         obj = super().__new__(cls)
0.57 /testbed/django/db/models/manager.py(24):         obj._constructor_args = (args, kwargs)
0.57 /testbed/django/db/models/manager.py(25):         return obj
0.57 /testbed/django/db/models/manager.py(23):         obj = super().__new__(cls)
0.57 /testbed/django/db/models/manager.py(24):         obj._constructor_args = (args, kwargs)
0.57 /testbed/django/db/models/manager.py(25):         return obj
0.57 /testbed/django/db/models/manager.py(209):         super().__init__()
0.57 /testbed/django/db/models/manager.py(28):         super().__init__()
0.57 /testbed/django/db/models/manager.py(29):         self._set_creation_counter()
0.57 /testbed/django/db/models/manager.py(133):         self.creation_counter = BaseManager.creation_counter
0.57 /testbed/django/db/models/manager.py(134):         BaseManager.creation_counter += 1
0.57 /testbed/django/db/models/manager.py(30):         self.model = None
0.57 /testbed/django/db/models/manager.py(31):         self.name = None
0.57 /testbed/django/db/models/manager.py(32):         self._db = None
0.57 /testbed/django/db/models/manager.py(33):         self._hints = {}
0.57 /testbed/django/db/models/manager.py(210):         self.model = model
0.57 /testbed/django/db/models/manager.py(23):         obj = super().__new__(cls)
0.57 /testbed/django/db/models/manager.py(24):         obj._constructor_args = (args, kwargs)
0.57 /testbed/django/db/models/manager.py(25):         return obj
0.57 /testbed/django/db/models/manager.py(209):         super().__init__()
0.57 /testbed/django/db/models/manager.py(28):         super().__init__()
0.57 /testbed/django/db/models/manager.py(29):         self._set_creation_counter()
0.57 /testbed/django/db/models/manager.py(133):         self.creation_counter = BaseManager.creation_counter
0.57 /testbed/django/db/models/manager.py(134):         BaseManager.creation_counter += 1
0.57 /testbed/django/db/models/manager.py(30):         self.model = None
0.57 /testbed/django/db/models/manager.py(31):         self.name = None
0.57 /testbed/django/db/models/manager.py(32):         self._db = None
0.57 /testbed/django/db/models/manager.py(33):         self._hints = {}
0.57 /testbed/django/db/models/manager.py(210):         self.model = model
0.57 /testbed/django/db/models/manager.py(23):         obj = super().__new__(cls)
0.57 /testbed/django/db/models/manager.py(24):         obj._constructor_args = (args, kwargs)
0.57 /testbed/django/db/models/manager.py(25):         return obj
0.57 /testbed/django/db/models/manager.py(28):         super().__init__()
0.57 /testbed/django/db/models/manager.py(29):         self._set_creation_counter()
0.57 /testbed/django/db/models/manager.py(133):         self.creation_counter = BaseManager.creation_counter
0.57 /testbed/django/db/models/manager.py(134):         BaseManager.creation_counter += 1
0.57 /testbed/django/db/models/manager.py(30):         self.model = None
0.57 /testbed/django/db/models/manager.py(31):         self.name = None
0.57 /testbed/django/db/models/manager.py(32):         self._db = None
0.57 /testbed/django/db/models/manager.py(33):         self._hints = {}
0.57 /testbed/django/db/models/manager.py(121):         self.name = self.name or name
0.57 /testbed/django/db/models/manager.py(122):         self.model = cls
0.57 /testbed/django/db/models/manager.py(124):         setattr(cls, name, ManagerDescriptor(self))
0.57 /testbed/django/db/models/manager.py(182):         self.manager = manager
0.57 /testbed/django/db/models/manager.py(126):         cls._meta.add_manager(self)
0.57 /testbed/django/db/models/manager.py(23):         obj = super().__new__(cls)
0.57 /testbed/django/db/models/manager.py(24):         obj._constructor_args = (args, kwargs)
0.57 /testbed/django/db/models/manager.py(25):         return obj
0.57 /testbed/django/db/models/manager.py(23):         obj = super().__new__(cls)
0.57 /testbed/django/db/models/manager.py(24):         obj._constructor_args = (args, kwargs)
0.57 /testbed/django/db/models/manager.py(25):         return obj
0.57 /testbed/django/db/models/manager.py(28):         super().__init__()
0.57 /testbed/django/db/models/manager.py(29):         self._set_creation_counter()
0.57 /testbed/django/db/models/manager.py(133):         self.creation_counter = BaseManager.creation_counter
0.57 /testbed/django/db/models/manager.py(134):         BaseManager.creation_counter += 1
0.57 /testbed/django/db/models/manager.py(30):         self.model = None
0.57 /testbed/django/db/models/manager.py(31):         self.name = None
0.57 /testbed/django/db/models/manager.py(32):         self._db = None
0.57 /testbed/django/db/models/manager.py(33):         self._hints = {}
0.57 /testbed/django/db/models/manager.py(121):         self.name = self.name or name
0.57 /testbed/django/db/models/manager.py(122):         self.model = cls
0.57 /testbed/django/db/models/manager.py(124):         setattr(cls, name, ManagerDescriptor(self))
0.57 /testbed/django/db/models/manager.py(182):         self.manager = manager
0.57 /testbed/django/db/models/manager.py(126):         cls._meta.add_manager(self)
0.57 /testbed/django/db/models/manager.py(23):         obj = super().__new__(cls)
0.57 /testbed/django/db/models/manager.py(24):         obj._constructor_args = (args, kwargs)
0.57 /testbed/django/db/models/manager.py(25):         return obj
0.57 /testbed/django/db/models/manager.py(28):         super().__init__()
0.57 /testbed/django/db/models/manager.py(29):         self._set_creation_counter()
0.57 /testbed/django/db/models/manager.py(133):         self.creation_counter = BaseManager.creation_counter
0.57 /testbed/django/db/models/manager.py(134):         BaseManager.creation_counter += 1
0.57 /testbed/django/db/models/manager.py(30):         self.model = None
0.57 /testbed/django/db/models/manager.py(31):         self.name = None
0.57 /testbed/django/db/models/manager.py(32):         self._db = None
0.57 /testbed/django/db/models/manager.py(33):         self._hints = {}
0.57 /testbed/django/db/models/manager.py(121):         self.name = self.name or name
0.57 /testbed/django/db/models/manager.py(122):         self.model = cls
0.57 /testbed/django/db/models/manager.py(124):         setattr(cls, name, ManagerDescriptor(self))
0.57 /testbed/django/db/models/manager.py(182):         self.manager = manager
0.57 /testbed/django/db/models/manager.py(126):         cls._meta.add_manager(self)
0.57 /testbed/django/db/models/manager.py(23):         obj = super().__new__(cls)
0.57 /testbed/django/db/models/manager.py(24):         obj._constructor_args = (args, kwargs)
0.57 /testbed/django/db/models/manager.py(25):         return obj
0.57 test_bulk_create_signature (test_coverup_django__django-15731.InspectSignatureTest) ... FAIL

======================================================================
FAIL: test_bulk_create_signature (test_coverup_django__django-15731.InspectSignatureTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/./tests/test_coverup_django__django-15731.py", line 18, in test_bulk_create_signature
    self.assertEqual(str(signature), '(objs, batch_size=None, ignore_conflicts=False)')
AssertionError: '(obj[37 chars]False, update_conflicts=False, update_fields=N[20 chars]one)' != '(obj[37 chars]False)'
- (objs, batch_size=None, ignore_conflicts=False, update_conflicts=False, update_fields=None, unique_fields=None)
+ (objs, batch_size=None, ignore_conflicts=False)


----------------------------------------------------------------------
Ran 1 test in 0.001s

FAILED (failures=1)
/testbed/django/db/models/manager.py(23):         obj = super().__new__(cls)
0.57 /testbed/django/db/models/manager.py(24):         obj._constructor_args = (args, kwargs)
0.57 /testbed/django/db/models/manager.py(25):         return obj
0.57 /testbed/django/db/models/manager.py(28):         super().__init__()
0.57 /testbed/django/db/models/manager.py(29):         self._set_creation_counter()
0.57 /testbed/django/db/models/manager.py(133):         self.creation_counter = BaseManager.creation_counter
0.57 /testbed/django/db/models/manager.py(134):         BaseManager.creation_counter += 1
0.57 /testbed/django/db/models/manager.py(30):         self.model = None
0.57 /testbed/django/db/models/manager.py(31):         self.name = None
0.57 /testbed/django/db/models/manager.py(32):         self._db = None
0.57 /testbed/django/db/models/manager.py(33):         self._hints = {}
0.57 /testbed/django/db/models/manager.py(121):         self.name = self.name or name
0.57 /testbed/django/db/models/manager.py(122):         self.model = cls
0.57 /testbed/django/db/models/manager.py(124):         setattr(cls, name, ManagerDescriptor(self))
0.57 /testbed/django/db/models/manager.py(182):         self.manager = manager
0.57 /testbed/django/db/models/manager.py(126):         cls._meta.add_manager(self)
0.58 /testbed/django/db/models/manager.py(23):         obj = super().__new__(cls)
0.58 /testbed/django/db/models/manager.py(24):         obj._constructor_args = (args, kwargs)
0.58 /testbed/django/db/models/manager.py(25):         return obj
0.58 /testbed/django/db/models/manager.py(23):         obj = super().__new__(cls)
0.58 /testbed/django/db/models/manager.py(24):         obj._constructor_args = (args, kwargs)
0.58 /testbed/django/db/models/manager.py(25):         return obj
0.58 /testbed/django/db/models/manager.py(28):         super().__init__()
0.58 /testbed/django/db/models/manager.py(29):         self._set_creation_counter()
0.58 /testbed/django/db/models/manager.py(133):         self.creation_counter = BaseManager.creation_counter
0.58 /testbed/django/db/models/manager.py(134):         BaseManager.creation_counter += 1
0.58 /testbed/django/db/models/manager.py(30):         self.model = None
0.58 /testbed/django/db/models/manager.py(31):         self.name = None
0.58 /testbed/django/db/models/manager.py(32):         self._db = None
0.58 /testbed/django/db/models/manager.py(33):         self._hints = {}
0.58 /testbed/django/db/models/manager.py(121):         self.name = self.name or name
0.58 /testbed/django/db/models/manager.py(122):         self.model = cls
0.58 /testbed/django/db/models/manager.py(124):         setattr(cls, name, ManagerDescriptor(self))
0.58 /testbed/django/db/models/manager.py(182):         self.manager = manager
0.58 /testbed/django/db/models/manager.py(126):         cls._meta.add_manager(self)
Found 1 test(s).
Skipping setup of unused database(s): default, other.
0.59 /testbed/django/db/models/manager.py(23):         obj = super().__new__(cls)
0.59 /testbed/django/db/models/manager.py(24):         obj._constructor_args = (args, kwargs)
0.59 /testbed/django/db/models/manager.py(25):         return obj
0.59 /testbed/django/db/models/manager.py(80):         return []
0.59 /testbed/django/db/models/manager.py(23):         obj = super().__new__(cls)
0.59 /testbed/django/db/models/manager.py(24):         obj._constructor_args = (args, kwargs)
0.59 /testbed/django/db/models/manager.py(25):         return obj
0.59 /testbed/django/db/models/manager.py(80):         return []
0.59 /testbed/django/db/models/manager.py(23):         obj = super().__new__(cls)
0.59 /testbed/django/db/models/manager.py(24):         obj._constructor_args = (args, kwargs)
0.59 /testbed/django/db/models/manager.py(25):         return obj
0.59 /testbed/django/db/models/manager.py(80):         return []
0.60 /testbed/django/db/models/manager.py(23):         obj = super().__new__(cls)
0.60 /testbed/django/db/models/manager.py(24):         obj._constructor_args = (args, kwargs)
0.60 /testbed/django/db/models/manager.py(25):         return obj
0.60 /testbed/django/db/models/manager.py(80):         return []
0.60 /testbed/django/db/models/manager.py(23):         obj = super().__new__(cls)
0.60 /testbed/django/db/models/manager.py(24):         obj._constructor_args = (args, kwargs)
0.60 /testbed/django/db/models/manager.py(25):         return obj
0.60 /testbed/django/db/models/manager.py(80):         return []
0.60 /testbed/django/db/models/manager.py(23):         obj = super().__new__(cls)
0.60 /testbed/django/db/models/manager.py(24):         obj._constructor_args = (args, kwargs)
0.60 /testbed/django/db/models/manager.py(25):         return obj
0.60 /testbed/django/db/models/manager.py(80):         return []
0.60 /testbed/django/db/models/manager.py(23):         obj = super().__new__(cls)
0.60 /testbed/django/db/models/manager.py(24):         obj._constructor_args = (args, kwargs)
0.60 /testbed/django/db/models/manager.py(25):         return obj
0.60 /testbed/django/db/models/manager.py(80):         return []
System check identified no issues (0 silenced).
0.63 /testbed/django/db/models/manager.py(185):         if instance is not None:
0.63 /testbed/django/db/models/manager.py(190):         if cls._meta.abstract:
0.63 /testbed/django/db/models/manager.py(195):         if cls._meta.swapped:
0.63 /testbed/django/db/models/manager.py(204):         return cls._meta.managers_map[self.manager.name]
0.63 /testbed/django/db/models/manager.py(23):         obj = super().__new__(cls)
0.63 /testbed/django/db/models/manager.py(24):         obj._constructor_args = (args, kwargs)
0.63 /testbed/django/db/models/manager.py(25):         return obj
+ cat coverage.cover
{"/testbed/django/db/models/manager.py": {"1": 1, "2": 1, "3": 1, "4": 1, "6": 1, "7": 1, "10": 2, "176": 2, "180": 2, "207": 2, "12": 1, "15": 1, "19": 1, "21": 1, "27": 1, "35": 1, "39": 1, "42": 1, "79": 1, "82": 1, "83": 1, "107": 1, "108": 1, "120": 1, "128": 1, "136": 1, "142": 1, "143": 1, "150": 1, "157": 1, "166": 1, "172": 1, "23": 29, "24": 29, "25": 29, "28": 14, "29": 14, "30": 14, "31": 14, "32": 14, "33": 14, "37": 0, "40": 0, "49": 0, "50": 0, "53": 0, "54": 0, "55": 0, "56": 0, "57": 0, "52": 0, "60": 0, "61": 0, "63": 0, "64": 0, "65": 0, "66": 0, "69": 0, "72": 0, "73": 0, "74": 0, "75": 0, "76": 0, "71": 0, "80": 7, "84": 1, "91": 1, "92": 105, "93": 1, "96": 103, "97": 3, "100": 100, "101": 100, "102": 35, "104": 62, "105": 1, "85": 62, "86": 62, "89": 62, "87": 0, "109": 1, "110": 1, "111": 2, "112": 1, "113": 1, "115": 1, "114": 2, "116": 1, "121": 12, "122": 12, "124": 12, "126": 12, "133": 14, "134": 14, "137": 0, "138": 0, "139": 0, "140": 0, "144": 0, "155": 0, "164": 0, "168": 0, "169": 0, "167": 0, "173": 0, "177": 1, "181": 1, "184": 1, "182": 12, "185": 1, "186": 0, "187": 0, "190": 1, "191": 0, "192": 0, "195": 1, "196": 0, "197": 0, "199": 0, "200": 0, "198": 0, "204": 1, "208": 1, "212": 1, "209": 2, "210": 2, "213": 0}}
+ git checkout 93cedc82f29076c824d476354527af1150888e4f
Note: switching to '93cedc82f29076c824d476354527af1150888e4f'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at 93cedc82f2 Refs #33697 -- Fixed multipart parsing of headers with double quotes and semicolons.
M	django/db/models/manager.py
+ git apply /root/pre_state.patch
error: unrecognized input
