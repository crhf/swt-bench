{"instance_id": "django__django-16642", "repo": "django/django", "version": "5.0", "environment_setup_commit": "4a72da71001f154ea60906a2f74898d32b7322a7", "patch_list": ["diff --git a/django/http/response.py b/django/http/response.py\n--- a/django/http/response.py\n+++ b/django/http/response.py\n@@ -609,7 +609,9 @@ def set_headers(self, filelike):\n                 # Encoding isn't set to prevent browsers from automatically\n                 # uncompressing files.\n                 content_type = {\n+                    \"br\": \"application/x-brotli\",\n                     \"bzip2\": \"application/x-bzip\",\n+                    \"compress\": \"application/x-compress\",\n                     \"gzip\": \"application/gzip\",\n                     \"xz\": \"application/x-xz\",\n                 }.get(encoding, content_type)\n", "diff --git a/dev/null b/tests/test_coverup_django__django-16642.py\nnew file mode 100644\nindex e69de29..4771d3e 100644\n--- /dev/null\n+++ b/tests/test_coverup_django__django-16642.py\n@@ -0,0 +1,28 @@\n+from django.test import SimpleTestCase\n+from django.http import FileResponse\n+import os\n+\n+class MimeTypeGuessingTests(SimpleTestCase):\n+    def setUp(self):\n+        # Create mock files with .Z and .br extensions\n+        self.z_file_path = 'test.html.Z'\n+        self.br_file_path = 'test.html.br'\n+        with open(self.z_file_path, 'wb') as f:\n+            f.write(b'Test content for .Z file')\n+        with open(self.br_file_path, 'wb') as f:\n+            f.write(b'Test content for .br file')\n+\n+    def tearDown(self):\n+        # Clean up the mock files\n+        os.remove(self.z_file_path)\n+        os.remove(self.br_file_path)\n+\n+    def test_mime_type_for_z_file(self):\n+        with open(self.z_file_path, 'rb') as f:\n+            response = FileResponse(f)\n+            self.assertNotEqual(response['Content-Type'], 'text/html')\n+\n+    def test_mime_type_for_br_file(self):\n+        with open(self.br_file_path, 'rb') as f:\n+            response = FileResponse(f)\n+            self.assertNotEqual(response['Content-Type'], 'text/html')\n"], "arch": "x86_64", "base_commit": "fbe850106b2e4b85f838219cb9e1df95fba6c164", "test_directives": ["test_coverup_django__django-16642"], "coverage_files": ["django/http/response.py"], "env_name": "testbed", "run_id": "assertflip", "patch_id": "pred_post__AssertFlip", "timeout": 1800, "rm_image": false, "force_rebuild": false, "exec_mode": "unit_test", "reproduction_script_name": null, "compute_coverage": true, "install": {"python": "3.11", "packages": "requirements.txt", "install": "python -m pip install -e ."}, "cache_level": "instance", "test_command": "python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/http/response\\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-16642", "req_install_commands": ["conda create -n testbed python=3.11 -y", "cat <<'EOF_59812759871' > $HOME/requirements.txt\naiosmtpd\nasgiref >= 3.7.0\nargon2-cffi >= 19.2.0\nbcrypt\nblack\ndocutils\ngeoip2; python_version < '3.12'\njinja2 >= 2.11.0\nnumpy; python_version < '3.12'\nPillow >= 6.2.1; sys.platform != 'win32' or python_version < '3.12'\npylibmc; sys.platform != 'win32'\npymemcache >= 3.4.0\npywatchman; sys.platform != 'win32'\nPyYAML\nredis >= 3.4.0\nselenium >= 4.8.0\nsqlparse >= 0.3.1\ntblib >= 1.5.0\ntzdata\ncolorama; sys.platform == 'win32'\n\nEOF_59812759871", "conda activate testbed && python -m pip install -r $HOME/requirements.txt", "rm $HOME/requirements.txt"]}