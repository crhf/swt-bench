diff --git a/dev/null b/tests/test_coverup_django__django-15930.py
new file mode 100644
index e69de29..c5c1b97 100644
--- /dev/null
+++ b/tests/test_coverup_django__django-15930.py
@@ -0,0 +1,26 @@
+from django.test import TestCase
+from django.db.models import Q, Value, BooleanField, Case, When
+from django.contrib.auth.models import User
+from django.db import connection
+
+class CaseExpressionTest(TestCase):
+    def test_case_with_negated_empty_q(self):
+        """
+        Test Case expression with a negated Q object checking for an empty list.
+        This should expose the bug where the SQL is malformed.
+        """
+        # Attempt to annotate using a Case expression with ~Q(pk__in=[])
+        queryset = User.objects.annotate(
+            _a=Case(
+                When(~Q(pk__in=[]), then=Value(True)),
+                default=Value(False),
+                output_field=BooleanField(),
+            )
+        ).order_by("-_a").values("pk")
+
+        # Capture the SQL generated by the query
+        sql = str(queryset.query)
+
+        # Assert that the SQL is correctly formed
+        # The test should fail by confirming the absence of the bug
+        self.assertNotIn("WHEN  THEN", sql)
