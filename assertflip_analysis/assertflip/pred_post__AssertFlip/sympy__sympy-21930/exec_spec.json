{"instance_id": "sympy__sympy-21930", "repo": "sympy/sympy", "version": "1.9", "environment_setup_commit": "f9a6f50ec0c74d935c50a6e9c9b2cb0469570d91", "patch_list": ["diff --git a/sympy/physics/secondquant.py b/sympy/physics/secondquant.py\n--- a/sympy/physics/secondquant.py\n+++ b/sympy/physics/secondquant.py\n@@ -218,7 +218,7 @@ def _sortkey(cls, index):\n             return (12, label, h)\n \n     def _latex(self, printer):\n-        return \"%s^{%s}_{%s}\" % (\n+        return \"{%s^{%s}_{%s}}\" % (\n             self.symbol,\n             \"\".join([ i.name for i in self.args[1]]),\n             \"\".join([ i.name for i in self.args[2]])\n@@ -478,7 +478,7 @@ def __repr__(self):\n         return \"CreateBoson(%s)\" % self.state\n \n     def _latex(self, printer):\n-        return \"b^\\\\dagger_{%s}\" % self.state.name\n+        return \"{b^\\\\dagger_{%s}}\" % self.state.name\n \n B = AnnihilateBoson\n Bd = CreateBoson\n@@ -939,7 +939,7 @@ def __repr__(self):\n         return \"CreateFermion(%s)\" % self.state\n \n     def _latex(self, printer):\n-        return \"a^\\\\dagger_{%s}\" % self.state.name\n+        return \"{a^\\\\dagger_{%s}}\" % self.state.name\n \n Fd = CreateFermion\n F = AnnihilateFermion\n", "diff --git a/dev/null b/sympy/polys/tests/test_coverup_sympy__sympy-21930.py\nnew file mode 100644\nindex e69de29..1fb618f 100644\n--- /dev/null\n+++ b/sympy/polys/tests/test_coverup_sympy__sympy-21930.py\n@@ -0,0 +1,20 @@\n+from sympy import Symbol\n+from sympy.physics.secondquant import B, Bd, Commutator\n+from sympy import init_printing\n+from sympy.printing.latex import latex\n+\n+def test_latex_rendering_issue():\n+    # Initialize Latex printing\n+    init_printing()\n+\n+    # Create a symbol\n+    a = Symbol('0')\n+\n+    # Construct the commutator expression\n+    expr = Commutator(Bd(a)**2, B(a))\n+\n+    # Capture the Latex output using the latex function\n+    latex_output = latex(expr)\n+\n+    # Assert that the correct format is present\n+    assert \"{b^\\\\dagger_{0}}^{2}\" in latex_output\n"], "arch": "x86_64", "base_commit": "de446c6d85f633271dfec1452f6f28ea783e293f", "test_directives": ["sympy/polys/tests/test_coverup_sympy__sympy-21930.py"], "coverage_files": ["sympy/physics/secondquant.py"], "env_name": "testbed", "run_id": "assertflip", "patch_id": "pred_post__AssertFlip", "timeout": 1800, "rm_image": false, "force_rebuild": false, "exec_mode": "unit_test", "reproduction_script_name": null, "compute_coverage": true, "install": {"python": "3.9", "packages": "mpmath flake8", "pip_packages": ["mpmath==1.3.0", "flake8-comprehensions"], "install": "python -m pip install -e ."}, "cache_level": "instance", "test_command": "PYTHONWARNINGS='ignore::UserWarning,ignore::SyntaxWarning' python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(sympy/physics/secondquant\\.py)' bin/test -C --verbose sympy/polys/tests/test_coverup_sympy__sympy-21930.p", "req_install_commands": ["conda create -n testbed python=3.9 mpmath flake8 -y"]}