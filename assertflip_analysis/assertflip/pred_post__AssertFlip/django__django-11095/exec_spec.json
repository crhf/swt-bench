{"instance_id": "django__django-11095", "repo": "django/django", "version": "3.0", "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27", "patch_list": ["diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -327,6 +327,10 @@ def get_fieldsets(self, request, obj=None):\n             return self.fieldsets\n         return [(None, {'fields': self.get_fields(request, obj)})]\n \n+    def get_inlines(self, request, obj):\n+        \"\"\"Hook for specifying custom inlines.\"\"\"\n+        return self.inlines\n+\n     def get_ordering(self, request):\n         \"\"\"\n         Hook for specifying field ordering.\n@@ -582,7 +586,7 @@ def __str__(self):\n \n     def get_inline_instances(self, request, obj=None):\n         inline_instances = []\n-        for inline_class in self.inlines:\n+        for inline_class in self.get_inlines(request, obj):\n             inline = inline_class(self.model, self.admin_site)\n             if request:\n                 if not (inline.has_view_or_change_permission(request, obj) or\n", "diff --git a/dev/null b/tests/test_coverup_django__django-11095.py\nnew file mode 100644\nindex e69de29..e5337ef 100644\n--- /dev/null\n+++ b/tests/test_coverup_django__django-11095.py\n@@ -0,0 +1,44 @@\n+from django.test import SimpleTestCase, RequestFactory\n+from django.contrib.admin import ModelAdmin\n+from django.contrib.auth.models import User\n+from django.contrib import admin\n+from django.db import models\n+\n+# Mock model to use with ModelAdmin\n+class MockModel(models.Model):\n+    name = models.CharField(max_length=100)\n+\n+    class Meta:\n+        app_label = 'test_app'\n+\n+# Mock inline class\n+class MockInline(admin.TabularInline):\n+    model = MockModel\n+\n+    def has_view_or_change_permission(self, request, obj=None):\n+        return True\n+\n+    def has_add_permission(self, request, obj=None):\n+        return True\n+\n+    def has_delete_permission(self, request, obj=None):\n+        return True\n+\n+# Mock ModelAdmin without a custom get_inlines method\n+class MockModelAdmin(ModelAdmin):\n+    inlines = [MockInline]\n+\n+class TestModelAdmin(SimpleTestCase):\n+    def setUp(self):\n+        self.factory = RequestFactory()\n+        self.request = self.factory.get('/admin/')\n+        self.admin_site = admin.sites.AdminSite()\n+        self.model = MockModel\n+\n+    def test_get_inline_instances_without_get_inlines(self):\n+        admin_instance = MockModelAdmin(self.model, self.admin_site)\n+        inline_instances = admin_instance.get_inline_instances(self.request)\n+\n+        # Assert that the inlines returned by get_inline_instances are dynamically set\n+        # This test should fail until the get_inlines method is implemented\n+        self.assertNotEqual(len(inline_instances), 1)\n"], "arch": "x86_64", "base_commit": "7d49ad76562e8c0597a0eb66046ab423b12888d8", "test_directives": ["test_coverup_django__django-11095"], "coverage_files": ["django/contrib/admin/options.py"], "env_name": "testbed", "run_id": "assertflip", "patch_id": "pred_post__AssertFlip", "timeout": 1800, "rm_image": false, "force_rebuild": false, "exec_mode": "unit_test", "reproduction_script_name": null, "compute_coverage": true, "install": {"python": "3.6", "packages": "requirements.txt", "install": "python -m pip install -e .", "eval_commands": ["sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen && locale-gen", "export LANG=en_US.UTF-8", "export LANGUAGE=en_US:en", "export LC_ALL=en_US.UTF-8"]}, "cache_level": "instance", "test_command": "python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/contrib/admin/options\\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-11095", "req_install_commands": ["conda create -n testbed python=3.6 -y", "cat <<'EOF_59812759871' > $HOME/requirements.txt\nasgiref ~= 3.2\nargon2-cffi >= 16.1.0\nbcrypt\ndocutils\ngeoip2\njinja2 >= 2.9.2\nnumpy\nPillow != 5.4.0\npylibmc; sys.platform != 'win32'\npython-memcached >= 1.59\npytz\npywatchman; sys.platform != 'win32'\nPyYAML\nselenium\nsqlparse >= 0.2.2\ntblib >= 1.5.0\n\nEOF_59812759871", "conda activate testbed && python -m pip install -r $HOME/requirements.txt", "rm $HOME/requirements.txt"]}