+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD 30613d6a748fce18919ff8b0da166d9fda2ed9bc
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
nothing to commit, working tree clean
+ git show
commit 30613d6a748fce18919ff8b0da166d9fda2ed9bc
Author: Mariusz Felisiak <felisiak.mariusz@gmail.com>
Date:   Tue Jan 4 05:50:00 2022 +0100

    Fixed #33408 -- Fixed adding nullable unique fields on SQLite.
    
    Regression in 2f73e5406d54cb8945e187eff302a3a3373350be.
    
    Thanks Alan Crosswell for the report.

diff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py
index 6752a8e3c0..3ff0a3f7db 100644
--- a/django/db/backends/sqlite3/schema.py
+++ b/django/db/backends/sqlite3/schema.py
@@ -324,10 +324,15 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):
 
     def add_field(self, model, field):
         """Create a field on a model."""
-        # Fields with default values cannot by handled by ALTER TABLE ADD
-        # COLUMN statement because DROP DEFAULT is not supported in
-        # ALTER TABLE.
-        if not field.null or self.effective_default(field) is not None:
+        if (
+            # Primary keys and unique fields are not supported in ALTER TABLE
+            # ADD COLUMN.
+            field.primary_key or field.unique or
+            # Fields with default values cannot by handled by ALTER TABLE ADD
+            # COLUMN statement because DROP DEFAULT is not supported in
+            # ALTER TABLE.
+            not field.null or self.effective_default(field) is not None
+        ):
             self._remake_table(model, create_field=field)
         else:
             super().add_field(model, field)
diff --git a/tests/schema/tests.py b/tests/schema/tests.py
index cd6a52f6af..60e69503cc 100644
--- a/tests/schema/tests.py
+++ b/tests/schema/tests.py
@@ -624,6 +624,18 @@ class SchemaTests(TransactionTestCase):
         # Make sure the values were transformed correctly
         self.assertEqual(Author.objects.extra(where=["thing = 1"]).count(), 2)
 
+    def test_add_field_o2o_nullable(self):
+        with connection.schema_editor() as editor:
+            editor.create_model(Author)
+            editor.create_model(Note)
+        new_field = OneToOneField(Note, CASCADE, null=True)
+        new_field.set_attributes_from_name('note')
+        with connection.schema_editor() as editor:
+            editor.add_field(Author, new_field)
+        columns = self.column_classes(Author)
+        self.assertIn('note_id', columns)
+        self.assertTrue(columns['note_id'][1][6])
+
     def test_add_field_binary(self):
         """
         Tests binary fields get a sane default (#22851)
+ git diff 30613d6a748fce18919ff8b0da166d9fda2ed9bc
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Checking if build backend supports build_editable: started
  Checking if build backend supports build_editable: finished with status 'done'
  Getting requirements to build editable: started
  Getting requirements to build editable: finished with status 'done'
  Preparing editable metadata (pyproject.toml): started
  Preparing editable metadata (pyproject.toml): finished with status 'done'
Requirement already satisfied: asgiref>=3.4.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Django==4.1.dev20220104045000) (3.9.1)
Requirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Django==4.1.dev20220104045000) (0.5.3)
Requirement already satisfied: typing_extensions>=4 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from asgiref>=3.4.1->Django==4.1.dev20220104045000) (4.14.1)
Building wheels for collected packages: Django
  Building editable for Django (pyproject.toml): started
  Building editable for Django (pyproject.toml): finished with status 'done'
  Created wheel for Django: filename=django-4.1.dev20220104045000-0.editable-py3-none-any.whl size=26944 sha256=360874da2187bca999f787a292677a91e2afdd983fa15b0c7f6c9e01bb19dcbd
  Stored in directory: /tmp/pip-ephem-wheel-cache-a00ezd4q/wheels/7d/66/67/70d1ee2124ccf21d601c352e25cdca10f611f7c8b3f9ffb9e4
Successfully built Django
Installing collected packages: Django
  Attempting uninstall: Django
    Found existing installation: Django 4.1.dev20220104045000
    Uninstalling Django-4.1.dev20220104045000:
      Successfully uninstalled Django-4.1.dev20220104045000
Successfully installed Django-4.1.dev20220104045000
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git apply -v -
Checking patch django/db/models/fields/__init__.py...
Applied patch django/db/models/fields/__init__.py cleanly.
+ git apply -v -
<stdin>:15: trailing whitespace.
        
<stdin>:18: trailing whitespace.
        
<stdin>:21: trailing whitespace.
        
Checking patch tests/test_coverup_django__django-15277.py...
Applied patch tests/test_coverup_django__django-15277.py cleanly.
warning: 3 lines add whitespace errors.
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/db/models/fields/__init__\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-15277
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(django/db/models/fields/__init__\\.py)']
0.16 /testbed/django/db/models/fields/__init__.py(1): import collections.abc
0.16 /testbed/django/db/models/fields/__init__.py(2): import copy
0.16 /testbed/django/db/models/fields/__init__.py(3): import datetime
0.16 /testbed/django/db/models/fields/__init__.py(4): import decimal
0.16 /testbed/django/db/models/fields/__init__.py(5): import math
0.16 /testbed/django/db/models/fields/__init__.py(6): import operator
0.16 /testbed/django/db/models/fields/__init__.py(7): import uuid
0.16 /testbed/django/db/models/fields/__init__.py(8): import warnings
0.16 /testbed/django/db/models/fields/__init__.py(9): from base64 import b64decode, b64encode
0.16 /testbed/django/db/models/fields/__init__.py(10): from functools import partialmethod, total_ordering
0.16 /testbed/django/db/models/fields/__init__.py(12): from django import forms
0.22 /testbed/django/db/models/fields/__init__.py(13): from django.apps import apps
0.22 /testbed/django/db/models/fields/__init__.py(14): from django.conf import settings
0.22 /testbed/django/db/models/fields/__init__.py(15): from django.core import checks, exceptions, validators
0.24 /testbed/django/db/models/fields/__init__.py(16): from django.db import connection, connections, router
0.24 /testbed/django/db/models/fields/__init__.py(17): from django.db.models.constants import LOOKUP_SEP
0.24 /testbed/django/db/models/fields/__init__.py(18): from django.db.models.query_utils import DeferredAttribute, RegisterLookupMixin
0.25 /testbed/django/db/models/fields/__init__.py(19): from django.utils import timezone
0.25 /testbed/django/db/models/fields/__init__.py(20): from django.utils.datastructures import DictWrapper
0.25 /testbed/django/db/models/fields/__init__.py(21): from django.utils.dateparse import (
0.25 /testbed/django/db/models/fields/__init__.py(24): from django.utils.duration import duration_microseconds, duration_string
0.25 /testbed/django/db/models/fields/__init__.py(25): from django.utils.functional import Promise, cached_property
0.25 /testbed/django/db/models/fields/__init__.py(26): from django.utils.ipv6 import clean_ipv6_address
0.25 /testbed/django/db/models/fields/__init__.py(27): from django.utils.itercompat import is_iterable
0.25 /testbed/django/db/models/fields/__init__.py(28): from django.utils.text import capfirst
0.25 /testbed/django/db/models/fields/__init__.py(29): from django.utils.translation import gettext_lazy as _
0.25 /testbed/django/db/models/fields/__init__.py(31): __all__ = [
0.25 /testbed/django/db/models/fields/__init__.py(43): class Empty:
0.25 /testbed/django/db/models/fields/__init__.py(43): class Empty:
0.25 /testbed/django/db/models/fields/__init__.py(44):     pass
0.25 /testbed/django/db/models/fields/__init__.py(47): class NOT_PROVIDED:
0.25 /testbed/django/db/models/fields/__init__.py(47): class NOT_PROVIDED:
0.25 /testbed/django/db/models/fields/__init__.py(48):     pass
0.25 /testbed/django/db/models/fields/__init__.py(53): BLANK_CHOICE_DASH = [("", "---------")]
0.25 /testbed/django/db/models/fields/__init__.py(56): def _load_field(app_label, model_name, field_name):
0.25 /testbed/django/db/models/fields/__init__.py(75): def _empty(of_cls):
0.25 /testbed/django/db/models/fields/__init__.py(81): def return_None():
0.25 /testbed/django/db/models/fields/__init__.py(85): @total_ordering
0.25 /testbed/django/db/models/fields/__init__.py(86): class Field(RegisterLookupMixin):
0.25 /testbed/django/db/models/fields/__init__.py(85): @total_ordering
0.25 /testbed/django/db/models/fields/__init__.py(87):     """Base class for all field types"""
0.25 /testbed/django/db/models/fields/__init__.py(91):     empty_strings_allowed = True
0.25 /testbed/django/db/models/fields/__init__.py(92):     empty_values = list(validators.EMPTY_VALUES)
0.25 /testbed/django/db/models/fields/__init__.py(97):     creation_counter = 0
0.25 /testbed/django/db/models/fields/__init__.py(98):     auto_creation_counter = -1
0.25 /testbed/django/db/models/fields/__init__.py(99):     default_validators = []  # Default set of validators
0.25 /testbed/django/db/models/fields/__init__.py(101):         'invalid_choice': _('Value %(value)r is not a valid choice.'),
0.25 /testbed/django/db/models/fields/__init__.py(102):         'null': _('This field cannot be null.'),
0.25 /testbed/django/db/models/fields/__init__.py(103):         'blank': _('This field cannot be blank.'),
0.25 /testbed/django/db/models/fields/__init__.py(104):         'unique': _('%(model_name)s with this %(field_label)s '
0.25 /testbed/django/db/models/fields/__init__.py(108):         'unique_for_date': _("%(field_label)s must be unique for "
0.25 /testbed/django/db/models/fields/__init__.py(100):     default_error_messages = {
0.25 /testbed/django/db/models/fields/__init__.py(111):     system_check_deprecated_details = None
0.25 /testbed/django/db/models/fields/__init__.py(112):     system_check_removed_details = None
0.25 /testbed/django/db/models/fields/__init__.py(115):     hidden = False
0.25 /testbed/django/db/models/fields/__init__.py(117):     many_to_many = None
0.25 /testbed/django/db/models/fields/__init__.py(118):     many_to_one = None
0.25 /testbed/django/db/models/fields/__init__.py(119):     one_to_many = None
0.25 /testbed/django/db/models/fields/__init__.py(120):     one_to_one = None
0.25 /testbed/django/db/models/fields/__init__.py(121):     related_model = None
0.25 /testbed/django/db/models/fields/__init__.py(123):     descriptor_class = DeferredAttribute
0.25 /testbed/django/db/models/fields/__init__.py(126):     def _description(self):
0.25 /testbed/django/db/models/fields/__init__.py(130):     description = property(_description)
0.25 /testbed/django/db/models/fields/__init__.py(132):     def __init__(self, verbose_name=None, name=None, primary_key=False,
0.25 /testbed/django/db/models/fields/__init__.py(133):                  max_length=None, unique=False, blank=False, null=False,
0.25 /testbed/django/db/models/fields/__init__.py(134):                  db_index=False, rel=None, default=NOT_PROVIDED, editable=True,
0.25 /testbed/django/db/models/fields/__init__.py(135):                  serialize=True, unique_for_date=None, unique_for_month=None,
0.25 /testbed/django/db/models/fields/__init__.py(136):                  unique_for_year=None, choices=None, help_text='', db_column=None,
0.25 /testbed/django/db/models/fields/__init__.py(137):                  db_tablespace=None, auto_created=False, validators=(),
0.25 /testbed/django/db/models/fields/__init__.py(138):                  error_messages=None):
0.25 /testbed/django/db/models/fields/__init__.py(132):     def __init__(self, verbose_name=None, name=None, primary_key=False,
0.25 /testbed/django/db/models/fields/__init__.py(179):     def __str__(self):
0.25 /testbed/django/db/models/fields/__init__.py(189):     def __repr__(self):
0.25 /testbed/django/db/models/fields/__init__.py(197):     def check(self, **kwargs):
0.25 /testbed/django/db/models/fields/__init__.py(208):     def _check_field_name(self):
0.25 /testbed/django/db/models/fields/__init__.py(240):     @classmethod
0.25 /testbed/django/db/models/fields/__init__.py(241):     def _choices_is_value(cls, value):
0.25 /testbed/django/db/models/fields/__init__.py(244):     def _check_choices(self):
0.25 /testbed/django/db/models/fields/__init__.py(308):     def _check_db_index(self):
0.25 /testbed/django/db/models/fields/__init__.py(320):     def _check_null_allowed_for_primary_keys(self):
0.25 /testbed/django/db/models/fields/__init__.py(338):     def _check_backend_specific_checks(self, databases=None, **kwargs):
0.25 /testbed/django/db/models/fields/__init__.py(348):     def _check_validators(self):
0.25 /testbed/django/db/models/fields/__init__.py(367):     def _check_deprecation_details(self):
0.25 /testbed/django/db/models/fields/__init__.py(395):     def get_col(self, alias, output_field=None):
0.25 /testbed/django/db/models/fields/__init__.py(404):     @cached_property
0.25 /testbed/django/db/models/fields/__init__.py(405):     def cached_col(self):
0.25 /testbed/django/db/models/fields/__init__.py(409):     def select_format(self, compiler, sql, params):
0.25 /testbed/django/db/models/fields/__init__.py(417):     def deconstruct(self):
0.25 /testbed/django/db/models/fields/__init__.py(508):     def clone(self):
0.25 /testbed/django/db/models/fields/__init__.py(516):     def __eq__(self, other):
0.25 /testbed/django/db/models/fields/__init__.py(525):     def __lt__(self, other):
0.25 /testbed/django/db/models/fields/__init__.py(544):     def __hash__(self):
0.25 /testbed/django/db/models/fields/__init__.py(551):     def __deepcopy__(self, memodict):
0.25 /testbed/django/db/models/fields/__init__.py(562):     def __copy__(self):
0.25 /testbed/django/db/models/fields/__init__.py(570):     def __reduce__(self):
0.25 /testbed/django/db/models/fields/__init__.py(590):     def get_pk_value_on_save(self, instance):
0.25 /testbed/django/db/models/fields/__init__.py(601):     def to_python(self, value):
0.25 /testbed/django/db/models/fields/__init__.py(609):     @cached_property
0.25 /testbed/django/db/models/fields/__init__.py(610):     def validators(self):
0.25 /testbed/django/db/models/fields/__init__.py(617):     def run_validators(self, value):
0.25 /testbed/django/db/models/fields/__init__.py(633):     def validate(self, value, model_instance):
0.25 /testbed/django/db/models/fields/__init__.py(664):     def clean(self, value, model_instance):
0.25 /testbed/django/db/models/fields/__init__.py(675):     def db_type_parameters(self, connection):
0.25 /testbed/django/db/models/fields/__init__.py(678):     def db_check(self, connection):
0.25 /testbed/django/db/models/fields/__init__.py(690):     def db_type(self, connection):
0.25 /testbed/django/db/models/fields/__init__.py(716):     def rel_db_type(self, connection):
0.25 /testbed/django/db/models/fields/__init__.py(724):     def cast_db_type(self, connection):
0.25 /testbed/django/db/models/fields/__init__.py(731):     def db_parameters(self, connection):
0.25 /testbed/django/db/models/fields/__init__.py(744):     def db_type_suffix(self, connection):
0.25 /testbed/django/db/models/fields/__init__.py(747):     def get_db_converters(self, connection):
0.25 /testbed/django/db/models/fields/__init__.py(752):     @property
0.25 /testbed/django/db/models/fields/__init__.py(753):     def unique(self):
0.25 /testbed/django/db/models/fields/__init__.py(756):     @property
0.25 /testbed/django/db/models/fields/__init__.py(757):     def db_tablespace(self):
0.25 /testbed/django/db/models/fields/__init__.py(760):     @property
0.25 /testbed/django/db/models/fields/__init__.py(761):     def db_returning(self):
0.25 /testbed/django/db/models/fields/__init__.py(768):     def set_attributes_from_name(self, name):
0.25 /testbed/django/db/models/fields/__init__.py(775):     def contribute_to_class(self, cls, name, private_only=False):
0.25 /testbed/django/db/models/fields/__init__.py(799):     def get_filter_kwargs_for_object(self, obj):
0.25 /testbed/django/db/models/fields/__init__.py(806):     def get_attname(self):
0.25 /testbed/django/db/models/fields/__init__.py(809):     def get_attname_column(self):
0.25 /testbed/django/db/models/fields/__init__.py(814):     def get_internal_type(self):
0.25 /testbed/django/db/models/fields/__init__.py(817):     def pre_save(self, model_instance, add):
0.25 /testbed/django/db/models/fields/__init__.py(821):     def get_prep_value(self, value):
0.25 /testbed/django/db/models/fields/__init__.py(827):     def get_db_prep_value(self, value, connection, prepared=False):
0.25 /testbed/django/db/models/fields/__init__.py(837):     def get_db_prep_save(self, value, connection):
0.25 /testbed/django/db/models/fields/__init__.py(841):     def has_default(self):
0.25 /testbed/django/db/models/fields/__init__.py(845):     def get_default(self):
0.25 /testbed/django/db/models/fields/__init__.py(849):     @cached_property
0.25 /testbed/django/db/models/fields/__init__.py(850):     def _get_default(self):
0.25 /testbed/django/db/models/fields/__init__.py(860):     def get_choices(self, include_blank=True, blank_choice=BLANK_CHOICE_DASH, limit_choices_to=None, ordering=()):
0.25 /testbed/django/db/models/fields/__init__.py(886):     def value_to_string(self, obj):
0.25 /testbed/django/db/models/fields/__init__.py(893):     def _get_flatchoices(self):
0.25 /testbed/django/db/models/fields/__init__.py(904):     flatchoices = property(_get_flatchoices)
0.25 /testbed/django/db/models/fields/__init__.py(906):     def save_form_data(self, instance, data):
0.25 /testbed/django/db/models/fields/__init__.py(909):     def formfield(self, form_class=None, choices_form_class=None, **kwargs):
0.25 /testbed/django/db/models/fields/__init__.py(947):     def value_from_object(self, obj):
0.25 /testbed/django/db/models/fields/__init__.py(952): class BooleanField(Field):
0.25 /testbed/django/db/models/fields/__init__.py(952): class BooleanField(Field):
0.25 /testbed/django/db/models/fields/__init__.py(953):     empty_strings_allowed = False
0.25 /testbed/django/db/models/fields/__init__.py(955):         'invalid': _('“%(value)s” value must be either True or False.'),
0.25 /testbed/django/db/models/fields/__init__.py(956):         'invalid_nullable': _('“%(value)s” value must be either True, False, or None.'),
0.25 /testbed/django/db/models/fields/__init__.py(954):     default_error_messages = {
0.25 /testbed/django/db/models/fields/__init__.py(958):     description = _("Boolean (Either True or False)")
0.25 /testbed/django/db/models/fields/__init__.py(960):     def get_internal_type(self):
0.25 /testbed/django/db/models/fields/__init__.py(963):     def to_python(self, value):
0.25 /testbed/django/db/models/fields/__init__.py(979):     def get_prep_value(self, value):
0.25 /testbed/django/db/models/fields/__init__.py(985):     def formfield(self, **kwargs):
0.25 /testbed/django/db/models/fields/__init__.py(997):     def select_format(self, compiler, sql, params):
0.25 /testbed/django/db/models/fields/__init__.py(1007): class CharField(Field):
0.25 /testbed/django/db/models/fields/__init__.py(1007): class CharField(Field):
0.25 /testbed/django/db/models/fields/__init__.py(1008):     description = _("String (up to %(max_length)s)")
0.25 /testbed/django/db/models/fields/__init__.py(1010):     def __init__(self, *args, db_collation=None, **kwargs):
0.25 /testbed/django/db/models/fields/__init__.py(1016):     def check(self, **kwargs):
0.25 /testbed/django/db/models/fields/__init__.py(1024):     def _check_max_length_attribute(self, **kwargs):
0.25 /testbed/django/db/models/fields/__init__.py(1045):     def _check_db_collation(self, databases):
0.25 /testbed/django/db/models/fields/__init__.py(1066):     def cast_db_type(self, connection):
0.25 /testbed/django/db/models/fields/__init__.py(1071):     def get_internal_type(self):
0.25 /testbed/django/db/models/fields/__init__.py(1074):     def to_python(self, value):
0.25 /testbed/django/db/models/fields/__init__.py(1079):     def get_prep_value(self, value):
0.25 /testbed/django/db/models/fields/__init__.py(1083):     def formfield(self, **kwargs):
0.25 /testbed/django/db/models/fields/__init__.py(1094):     def deconstruct(self):
0.25 /testbed/django/db/models/fields/__init__.py(1101): class CommaSeparatedIntegerField(CharField):
0.25 /testbed/django/db/models/fields/__init__.py(1101): class CommaSeparatedIntegerField(CharField):
0.25 /testbed/django/db/models/fields/__init__.py(1102):     default_validators = [validators.validate_comma_separated_integer_list]
0.25 /testbed/django/db/models/fields/__init__.py(1103):     description = _("Comma-separated integers")
0.25 /testbed/django/db/models/fields/__init__.py(1106):             'CommaSeparatedIntegerField is removed except for support in '
0.25 /testbed/django/db/models/fields/__init__.py(1110):             'Use CharField(validators=[validate_comma_separated_integer_list]) '
0.25 /testbed/django/db/models/fields/__init__.py(1113):         'id': 'fields.E901',
0.25 /testbed/django/db/models/fields/__init__.py(1104):     system_check_removed_details = {
0.25 /testbed/django/db/models/fields/__init__.py(1117): def _to_naive(value):
0.25 /testbed/django/db/models/fields/__init__.py(1123): def _get_naive_now():
0.25 /testbed/django/db/models/fields/__init__.py(1127): class DateTimeCheckMixin:
0.25 /testbed/django/db/models/fields/__init__.py(1127): class DateTimeCheckMixin:
0.25 /testbed/django/db/models/fields/__init__.py(1129):     def check(self, **kwargs):
0.25 /testbed/django/db/models/fields/__init__.py(1136):     def _check_mutually_exclusive_options(self):
0.25 /testbed/django/db/models/fields/__init__.py(1155):     def _check_fix_default_value(self):
0.25 /testbed/django/db/models/fields/__init__.py(1160):     def _check_if_value_fixed(self, value, now=None):
0.25 /testbed/django/db/models/fields/__init__.py(1195): class DateField(DateTimeCheckMixin, Field):
0.25 /testbed/django/db/models/fields/__init__.py(1195): class DateField(DateTimeCheckMixin, Field):
0.25 /testbed/django/db/models/fields/__init__.py(1196):     empty_strings_allowed = False
0.25 /testbed/django/db/models/fields/__init__.py(1198):         'invalid': _('“%(value)s” value has an invalid date format. It must be '
0.25 /testbed/django/db/models/fields/__init__.py(1200):         'invalid_date': _('“%(value)s” value has the correct format (YYYY-MM-DD) '
0.25 /testbed/django/db/models/fields/__init__.py(1197):     default_error_messages = {
0.25 /testbed/django/db/models/fields/__init__.py(1203):     description = _("Date (without time)")
0.25 /testbed/django/db/models/fields/__init__.py(1205):     def __init__(self, verbose_name=None, name=None, auto_now=False,
0.25 /testbed/django/db/models/fields/__init__.py(1213):     def _check_fix_default_value(self):
0.25 /testbed/django/db/models/fields/__init__.py(1232):     def deconstruct(self):
0.25 /testbed/django/db/models/fields/__init__.py(1243):     def get_internal_type(self):
0.25 /testbed/django/db/models/fields/__init__.py(1246):     def to_python(self, value):
0.25 /testbed/django/db/models/fields/__init__.py(1276):     def pre_save(self, model_instance, add):
0.25 /testbed/django/db/models/fields/__init__.py(1284):     def contribute_to_class(self, cls, name, **kwargs):
0.25 /testbed/django/db/models/fields/__init__.py(1296):     def get_prep_value(self, value):
0.25 /testbed/django/db/models/fields/__init__.py(1300):     def get_db_prep_value(self, value, connection, prepared=False):
0.25 /testbed/django/db/models/fields/__init__.py(1306):     def value_to_string(self, obj):
0.25 /testbed/django/db/models/fields/__init__.py(1310):     def formfield(self, **kwargs):
0.25 /testbed/django/db/models/fields/__init__.py(1317): class DateTimeField(DateField):
0.25 /testbed/django/db/models/fields/__init__.py(1317): class DateTimeField(DateField):
0.25 /testbed/django/db/models/fields/__init__.py(1318):     empty_strings_allowed = False
0.25 /testbed/django/db/models/fields/__init__.py(1320):         'invalid': _('“%(value)s” value has an invalid format. It must be in '
0.25 /testbed/django/db/models/fields/__init__.py(1322):         'invalid_date': _("“%(value)s” value has the correct format "
0.25 /testbed/django/db/models/fields/__init__.py(1324):         'invalid_datetime': _('“%(value)s” value has the correct format '
0.25 /testbed/django/db/models/fields/__init__.py(1319):     default_error_messages = {
0.25 /testbed/django/db/models/fields/__init__.py(1328):     description = _("Date (with time)")
0.25 /testbed/django/db/models/fields/__init__.py(1332):     def _check_fix_default_value(self):
0.25 /testbed/django/db/models/fields/__init__.py(1346):     def get_internal_type(self):
0.25 /testbed/django/db/models/fields/__init__.py(1349):     def to_python(self, value):
0.25 /testbed/django/db/models/fields/__init__.py(1397):     def pre_save(self, model_instance, add):
0.25 /testbed/django/db/models/fields/__init__.py(1408):     def get_prep_value(self, value):
0.25 /testbed/django/db/models/fields/__init__.py(1427):     def get_db_prep_value(self, value, connection, prepared=False):
0.25 /testbed/django/db/models/fields/__init__.py(1433):     def value_to_string(self, obj):
0.25 /testbed/django/db/models/fields/__init__.py(1437):     def formfield(self, **kwargs):
0.25 /testbed/django/db/models/fields/__init__.py(1444): class DecimalField(Field):
0.25 /testbed/django/db/models/fields/__init__.py(1444): class DecimalField(Field):
0.25 /testbed/django/db/models/fields/__init__.py(1445):     empty_strings_allowed = False
0.25 /testbed/django/db/models/fields/__init__.py(1447):         'invalid': _('“%(value)s” value must be a decimal number.'),
0.25 /testbed/django/db/models/fields/__init__.py(1446):     default_error_messages = {
0.25 /testbed/django/db/models/fields/__init__.py(1449):     description = _("Decimal number")
0.25 /testbed/django/db/models/fields/__init__.py(1451):     def __init__(self, verbose_name=None, name=None, max_digits=None,
0.25 /testbed/django/db/models/fields/__init__.py(1456):     def check(self, **kwargs):
0.25 /testbed/django/db/models/fields/__init__.py(1469):     def _check_decimal_places(self):
0.25 /testbed/django/db/models/fields/__init__.py(1493):     def _check_max_digits(self):
0.25 /testbed/django/db/models/fields/__init__.py(1517):     def _check_decimal_places_and_max_digits(self, **kwargs):
0.25 /testbed/django/db/models/fields/__init__.py(1528):     @cached_property
0.25 /testbed/django/db/models/fields/__init__.py(1529):     def validators(self):
0.25 /testbed/django/db/models/fields/__init__.py(1534):     @cached_property
0.25 /testbed/django/db/models/fields/__init__.py(1535):     def context(self):
0.25 /testbed/django/db/models/fields/__init__.py(1538):     def deconstruct(self):
0.25 /testbed/django/db/models/fields/__init__.py(1546):     def get_internal_type(self):
0.25 /testbed/django/db/models/fields/__init__.py(1549):     def to_python(self, value):
0.25 /testbed/django/db/models/fields/__init__.py(1569):     def get_db_prep_save(self, value, connection):
0.25 /testbed/django/db/models/fields/__init__.py(1572):     def get_prep_value(self, value):
0.25 /testbed/django/db/models/fields/__init__.py(1576):     def formfield(self, **kwargs):
0.25 /testbed/django/db/models/fields/__init__.py(1585): class DurationField(Field):
0.25 /testbed/django/db/models/fields/__init__.py(1585): class DurationField(Field):
0.25 /testbed/django/db/models/fields/__init__.py(1586):     """
0.25 /testbed/django/db/models/fields/__init__.py(1592):     empty_strings_allowed = False
0.25 /testbed/django/db/models/fields/__init__.py(1594):         'invalid': _('“%(value)s” value has an invalid format. It must be in '
0.25 /testbed/django/db/models/fields/__init__.py(1593):     default_error_messages = {
0.25 /testbed/django/db/models/fields/__init__.py(1597):     description = _("Duration")
0.25 /testbed/django/db/models/fields/__init__.py(1599):     def get_internal_type(self):
0.25 /testbed/django/db/models/fields/__init__.py(1602):     def to_python(self, value):
0.25 /testbed/django/db/models/fields/__init__.py(1621):     def get_db_prep_value(self, value, connection, prepared=False):
0.25 /testbed/django/db/models/fields/__init__.py(1628):     def get_db_converters(self, connection):
0.25 /testbed/django/db/models/fields/__init__.py(1634):     def value_to_string(self, obj):
0.25 /testbed/django/db/models/fields/__init__.py(1638):     def formfield(self, **kwargs):
0.25 /testbed/django/db/models/fields/__init__.py(1645): class EmailField(CharField):
0.25 /testbed/django/db/models/fields/__init__.py(1645): class EmailField(CharField):
0.25 /testbed/django/db/models/fields/__init__.py(1646):     default_validators = [validators.validate_email]
0.25 /testbed/django/db/models/fields/__init__.py(1647):     description = _("Email address")
0.25 /testbed/django/db/models/fields/__init__.py(1649):     def __init__(self, *args, **kwargs):
0.25 /testbed/django/db/models/fields/__init__.py(1654):     def deconstruct(self):
0.25 /testbed/django/db/models/fields/__init__.py(1660):     def formfield(self, **kwargs):
0.25 /testbed/django/db/models/fields/__init__.py(1669): class FilePathField(Field):
0.25 /testbed/django/db/models/fields/__init__.py(1669): class FilePathField(Field):
0.25 /testbed/django/db/models/fields/__init__.py(1670):     description = _("File path")
0.25 /testbed/django/db/models/fields/__init__.py(1672):     def __init__(self, verbose_name=None, name=None, path='', match=None,
0.25 /testbed/django/db/models/fields/__init__.py(1679):     def check(self, **kwargs):
0.25 /testbed/django/db/models/fields/__init__.py(1685):     def _check_allowing_files_or_folders(self, **kwargs):
0.25 /testbed/django/db/models/fields/__init__.py(1696):     def deconstruct(self):
0.25 /testbed/django/db/models/fields/__init__.py(1712):     def get_prep_value(self, value):
0.25 /testbed/django/db/models/fields/__init__.py(1718):     def formfield(self, **kwargs):
0.25 /testbed/django/db/models/fields/__init__.py(1729):     def get_internal_type(self):
0.25 /testbed/django/db/models/fields/__init__.py(1733): class FloatField(Field):
0.25 /testbed/django/db/models/fields/__init__.py(1733): class FloatField(Field):
0.25 /testbed/django/db/models/fields/__init__.py(1734):     empty_strings_allowed = False
0.25 /testbed/django/db/models/fields/__init__.py(1736):         'invalid': _('“%(value)s” value must be a float.'),
0.25 /testbed/django/db/models/fields/__init__.py(1735):     default_error_messages = {
0.25 /testbed/django/db/models/fields/__init__.py(1738):     description = _("Floating point number")
0.25 /testbed/django/db/models/fields/__init__.py(1740):     def get_prep_value(self, value):
0.25 /testbed/django/db/models/fields/__init__.py(1751):     def get_internal_type(self):
0.25 /testbed/django/db/models/fields/__init__.py(1754):     def to_python(self, value):
0.25 /testbed/django/db/models/fields/__init__.py(1766):     def formfield(self, **kwargs):
0.25 /testbed/django/db/models/fields/__init__.py(1773): class IntegerField(Field):
0.25 /testbed/django/db/models/fields/__init__.py(1773): class IntegerField(Field):
0.25 /testbed/django/db/models/fields/__init__.py(1774):     empty_strings_allowed = False
0.25 /testbed/django/db/models/fields/__init__.py(1776):         'invalid': _('“%(value)s” value must be an integer.'),
0.25 /testbed/django/db/models/fields/__init__.py(1775):     default_error_messages = {
0.25 /testbed/django/db/models/fields/__init__.py(1778):     description = _("Integer")
0.25 /testbed/django/db/models/fields/__init__.py(1780):     def check(self, **kwargs):
0.25 /testbed/django/db/models/fields/__init__.py(1786):     def _check_max_length_warning(self):
0.25 /testbed/django/db/models/fields/__init__.py(1798):     @cached_property
0.25 /testbed/django/db/models/fields/__init__.py(1799):     def validators(self):
0.25 /testbed/django/db/models/fields/__init__.py(1827):     def get_prep_value(self, value):
0.25 /testbed/django/db/models/fields/__init__.py(1838):     def get_internal_type(self):
0.25 /testbed/django/db/models/fields/__init__.py(1841):     def to_python(self, value):
0.25 /testbed/django/db/models/fields/__init__.py(1853):     def formfield(self, **kwargs):
0.25 /testbed/django/db/models/fields/__init__.py(1860): class BigIntegerField(IntegerField):
0.25 /testbed/django/db/models/fields/__init__.py(1860): class BigIntegerField(IntegerField):
0.25 /testbed/django/db/models/fields/__init__.py(1861):     description = _("Big (8 byte) integer")
0.25 /testbed/django/db/models/fields/__init__.py(1862):     MAX_BIGINT = 9223372036854775807
0.25 /testbed/django/db/models/fields/__init__.py(1864):     def get_internal_type(self):
0.25 /testbed/django/db/models/fields/__init__.py(1867):     def formfield(self, **kwargs):
0.25 /testbed/django/db/models/fields/__init__.py(1875): class SmallIntegerField(IntegerField):
0.25 /testbed/django/db/models/fields/__init__.py(1875): class SmallIntegerField(IntegerField):
0.25 /testbed/django/db/models/fields/__init__.py(1876):     description = _('Small integer')
0.25 /testbed/django/db/models/fields/__init__.py(1878):     def get_internal_type(self):
0.25 /testbed/django/db/models/fields/__init__.py(1882): class IPAddressField(Field):
0.25 /testbed/django/db/models/fields/__init__.py(1882): class IPAddressField(Field):
0.25 /testbed/django/db/models/fields/__init__.py(1883):     empty_strings_allowed = False
0.25 /testbed/django/db/models/fields/__init__.py(1884):     description = _("IPv4 address")
0.25 /testbed/django/db/models/fields/__init__.py(1887):             'IPAddressField has been removed except for support in '
0.25 /testbed/django/db/models/fields/__init__.py(1890):         'hint': 'Use GenericIPAddressField instead.',
0.25 /testbed/django/db/models/fields/__init__.py(1891):         'id': 'fields.E900',
0.25 /testbed/django/db/models/fields/__init__.py(1885):     system_check_removed_details = {
0.25 /testbed/django/db/models/fields/__init__.py(1894):     def __init__(self, *args, **kwargs):
0.25 /testbed/django/db/models/fields/__init__.py(1898):     def deconstruct(self):
0.25 /testbed/django/db/models/fields/__init__.py(1903):     def get_prep_value(self, value):
0.25 /testbed/django/db/models/fields/__init__.py(1909):     def get_internal_type(self):
0.25 /testbed/django/db/models/fields/__init__.py(1913): class GenericIPAddressField(Field):
0.25 /testbed/django/db/models/fields/__init__.py(1913): class GenericIPAddressField(Field):
0.25 /testbed/django/db/models/fields/__init__.py(1914):     empty_strings_allowed = False
0.25 /testbed/django/db/models/fields/__init__.py(1915):     description = _("IP address")
0.25 /testbed/django/db/models/fields/__init__.py(1916):     default_error_messages = {}
0.25 /testbed/django/db/models/fields/__init__.py(1918):     def __init__(self, verbose_name=None, name=None, protocol='both',
0.25 /testbed/django/db/models/fields/__init__.py(1928):     def check(self, **kwargs):
0.25 /testbed/django/db/models/fields/__init__.py(1934):     def _check_blank_and_null_values(self, **kwargs):
0.25 /testbed/django/db/models/fields/__init__.py(1946):     def deconstruct(self):
0.25 /testbed/django/db/models/fields/__init__.py(1956):     def get_internal_type(self):
0.25 /testbed/django/db/models/fields/__init__.py(1959):     def to_python(self, value):
0.25 /testbed/django/db/models/fields/__init__.py(1969):     def get_db_prep_value(self, value, connection, prepared=False):
0.25 /testbed/django/db/models/fields/__init__.py(1974):     def get_prep_value(self, value):
0.25 /testbed/django/db/models/fields/__init__.py(1985):     def formfield(self, **kwargs):
0.25 /testbed/django/db/models/fields/__init__.py(1993): class NullBooleanField(BooleanField):
0.25 /testbed/django/db/models/fields/__init__.py(1993): class NullBooleanField(BooleanField):
0.25 /testbed/django/db/models/fields/__init__.py(1995):         'invalid': _('“%(value)s” value must be either None, True or False.'),
0.25 /testbed/django/db/models/fields/__init__.py(1996):         'invalid_nullable': _('“%(value)s” value must be either None, True or False.'),
0.25 /testbed/django/db/models/fields/__init__.py(1994):     default_error_messages = {
0.25 /testbed/django/db/models/fields/__init__.py(1998):     description = _("Boolean (Either True, False or None)")
0.25 /testbed/django/db/models/fields/__init__.py(2001):             'NullBooleanField is removed except for support in historical '
0.25 /testbed/django/db/models/fields/__init__.py(2004):         'hint': 'Use BooleanField(null=True) instead.',
0.25 /testbed/django/db/models/fields/__init__.py(2005):         'id': 'fields.E903',
0.25 /testbed/django/db/models/fields/__init__.py(1999):     system_check_removed_details = {
0.25 /testbed/django/db/models/fields/__init__.py(2008):     def __init__(self, *args, **kwargs):
0.25 /testbed/django/db/models/fields/__init__.py(2013):     def deconstruct(self):
0.25 /testbed/django/db/models/fields/__init__.py(2020): class PositiveIntegerRelDbTypeMixin:
0.25 /testbed/django/db/models/fields/__init__.py(2020): class PositiveIntegerRelDbTypeMixin:
0.25 /testbed/django/db/models/fields/__init__.py(2021):     def __init_subclass__(cls, **kwargs):
0.25 /testbed/django/db/models/fields/__init__.py(2033):     def rel_db_type(self, connection):
0.25 /testbed/django/db/models/fields/__init__.py(2048): class PositiveBigIntegerField(PositiveIntegerRelDbTypeMixin, BigIntegerField):
0.25 /testbed/django/db/models/fields/__init__.py(2048): class PositiveBigIntegerField(PositiveIntegerRelDbTypeMixin, BigIntegerField):
0.25 /testbed/django/db/models/fields/__init__.py(2049):     description = _('Positive big integer')
0.25 /testbed/django/db/models/fields/__init__.py(2051):     def get_internal_type(self):
0.25 /testbed/django/db/models/fields/__init__.py(2054):     def formfield(self, **kwargs):
0.25 /testbed/django/db/models/fields/__init__.py(2022):         super().__init_subclass__(**kwargs)
0.25 /testbed/django/db/models/fields/__init__.py(2023):         if not hasattr(cls, 'integer_field_class'):
0.25 /testbed/django/db/models/fields/__init__.py(2024):             cls.integer_field_class = next(
0.25 /testbed/django/db/models/fields/__init__.py(2025):                 (
0.25 /testbed/django/db/models/fields/__init__.py(2027):                     for parent in cls.__mro__[1:]
0.25 /testbed/django/db/models/fields/__init__.py(2025):                 (
0.25 /testbed/django/db/models/fields/__init__.py(2030):                 None,
0.25 /testbed/django/db/models/fields/__init__.py(2024):             cls.integer_field_class = next(
0.25 /testbed/django/db/models/fields/__init__.py(2025):                 (
0.25 /testbed/django/db/models/fields/__init__.py(2027):                     for parent in cls.__mro__[1:]
0.25 /testbed/django/db/models/fields/__init__.py(2028):                     if issubclass(parent, IntegerField)
0.25 /testbed/django/db/models/fields/__init__.py(2025):                 (
0.25 /testbed/django/db/models/fields/__init__.py(2027):                     for parent in cls.__mro__[1:]
0.25 /testbed/django/db/models/fields/__init__.py(2028):                     if issubclass(parent, IntegerField)
0.25 /testbed/django/db/models/fields/__init__.py(2026):                     parent
0.25 /testbed/django/db/models/fields/__init__.py(2061): class PositiveIntegerField(PositiveIntegerRelDbTypeMixin, IntegerField):
0.25 /testbed/django/db/models/fields/__init__.py(2061): class PositiveIntegerField(PositiveIntegerRelDbTypeMixin, IntegerField):
0.25 /testbed/django/db/models/fields/__init__.py(2062):     description = _("Positive integer")
0.25 /testbed/django/db/models/fields/__init__.py(2064):     def get_internal_type(self):
0.25 /testbed/django/db/models/fields/__init__.py(2067):     def formfield(self, **kwargs):
0.25 /testbed/django/db/models/fields/__init__.py(2022):         super().__init_subclass__(**kwargs)
0.25 /testbed/django/db/models/fields/__init__.py(2023):         if not hasattr(cls, 'integer_field_class'):
0.25 /testbed/django/db/models/fields/__init__.py(2024):             cls.integer_field_class = next(
0.25 /testbed/django/db/models/fields/__init__.py(2025):                 (
0.25 /testbed/django/db/models/fields/__init__.py(2027):                     for parent in cls.__mro__[1:]
0.25 /testbed/django/db/models/fields/__init__.py(2025):                 (
0.25 /testbed/django/db/models/fields/__init__.py(2030):                 None,
0.25 /testbed/django/db/models/fields/__init__.py(2024):             cls.integer_field_class = next(
0.25 /testbed/django/db/models/fields/__init__.py(2025):                 (
0.25 /testbed/django/db/models/fields/__init__.py(2027):                     for parent in cls.__mro__[1:]
0.25 /testbed/django/db/models/fields/__init__.py(2028):                     if issubclass(parent, IntegerField)
0.25 /testbed/django/db/models/fields/__init__.py(2025):                 (
0.25 /testbed/django/db/models/fields/__init__.py(2027):                     for parent in cls.__mro__[1:]
0.25 /testbed/django/db/models/fields/__init__.py(2028):                     if issubclass(parent, IntegerField)
0.25 /testbed/django/db/models/fields/__init__.py(2026):                     parent
0.25 /testbed/django/db/models/fields/__init__.py(2074): class PositiveSmallIntegerField(PositiveIntegerRelDbTypeMixin, SmallIntegerField):
0.25 /testbed/django/db/models/fields/__init__.py(2074): class PositiveSmallIntegerField(PositiveIntegerRelDbTypeMixin, SmallIntegerField):
0.25 /testbed/django/db/models/fields/__init__.py(2075):     description = _("Positive small integer")
0.25 /testbed/django/db/models/fields/__init__.py(2077):     def get_internal_type(self):
0.25 /testbed/django/db/models/fields/__init__.py(2080):     def formfield(self, **kwargs):
0.25 /testbed/django/db/models/fields/__init__.py(2022):         super().__init_subclass__(**kwargs)
0.25 /testbed/django/db/models/fields/__init__.py(2023):         if not hasattr(cls, 'integer_field_class'):
0.25 /testbed/django/db/models/fields/__init__.py(2024):             cls.integer_field_class = next(
0.25 /testbed/django/db/models/fields/__init__.py(2025):                 (
0.25 /testbed/django/db/models/fields/__init__.py(2027):                     for parent in cls.__mro__[1:]
0.25 /testbed/django/db/models/fields/__init__.py(2025):                 (
0.25 /testbed/django/db/models/fields/__init__.py(2030):                 None,
0.25 /testbed/django/db/models/fields/__init__.py(2024):             cls.integer_field_class = next(
0.25 /testbed/django/db/models/fields/__init__.py(2025):                 (
0.25 /testbed/django/db/models/fields/__init__.py(2027):                     for parent in cls.__mro__[1:]
0.25 /testbed/django/db/models/fields/__init__.py(2028):                     if issubclass(parent, IntegerField)
0.25 /testbed/django/db/models/fields/__init__.py(2025):                 (
0.25 /testbed/django/db/models/fields/__init__.py(2027):                     for parent in cls.__mro__[1:]
0.25 /testbed/django/db/models/fields/__init__.py(2028):                     if issubclass(parent, IntegerField)
0.25 /testbed/django/db/models/fields/__init__.py(2026):                     parent
0.25 /testbed/django/db/models/fields/__init__.py(2087): class SlugField(CharField):
0.25 /testbed/django/db/models/fields/__init__.py(2087): class SlugField(CharField):
0.25 /testbed/django/db/models/fields/__init__.py(2088):     default_validators = [validators.validate_slug]
0.25 /testbed/django/db/models/fields/__init__.py(2089):     description = _("Slug (up to %(max_length)s)")
0.25 /testbed/django/db/models/fields/__init__.py(2091):     def __init__(self, *args, max_length=50, db_index=True, allow_unicode=False, **kwargs):
0.25 /testbed/django/db/models/fields/__init__.py(2097):     def deconstruct(self):
0.25 /testbed/django/db/models/fields/__init__.py(2109):     def get_internal_type(self):
0.25 /testbed/django/db/models/fields/__init__.py(2112):     def formfield(self, **kwargs):
0.25 /testbed/django/db/models/fields/__init__.py(2120): class TextField(Field):
0.25 /testbed/django/db/models/fields/__init__.py(2120): class TextField(Field):
0.25 /testbed/django/db/models/fields/__init__.py(2121):     description = _("Text")
0.25 /testbed/django/db/models/fields/__init__.py(2123):     def __init__(self, *args, db_collation=None, **kwargs):
0.25 /testbed/django/db/models/fields/__init__.py(2127):     def check(self, **kwargs):
0.25 /testbed/django/db/models/fields/__init__.py(2134):     def _check_db_collation(self, databases):
0.25 /testbed/django/db/models/fields/__init__.py(2155):     def get_internal_type(self):
0.25 /testbed/django/db/models/fields/__init__.py(2158):     def to_python(self, value):
0.25 /testbed/django/db/models/fields/__init__.py(2163):     def get_prep_value(self, value):
0.25 /testbed/django/db/models/fields/__init__.py(2167):     def formfield(self, **kwargs):
0.25 /testbed/django/db/models/fields/__init__.py(2177):     def deconstruct(self):
0.25 /testbed/django/db/models/fields/__init__.py(2184): class TimeField(DateTimeCheckMixin, Field):
0.25 /testbed/django/db/models/fields/__init__.py(2184): class TimeField(DateTimeCheckMixin, Field):
0.25 /testbed/django/db/models/fields/__init__.py(2185):     empty_strings_allowed = False
0.25 /testbed/django/db/models/fields/__init__.py(2187):         'invalid': _('“%(value)s” value has an invalid format. It must be in '
0.25 /testbed/django/db/models/fields/__init__.py(2189):         'invalid_time': _('“%(value)s” value has the correct format '
0.25 /testbed/django/db/models/fields/__init__.py(2186):     default_error_messages = {
0.25 /testbed/django/db/models/fields/__init__.py(2192):     description = _("Time")
0.25 /testbed/django/db/models/fields/__init__.py(2194):     def __init__(self, verbose_name=None, name=None, auto_now=False,
0.25 /testbed/django/db/models/fields/__init__.py(2202):     def _check_fix_default_value(self):
0.25 /testbed/django/db/models/fields/__init__.py(2224):     def deconstruct(self):
0.25 /testbed/django/db/models/fields/__init__.py(2235):     def get_internal_type(self):
0.25 /testbed/django/db/models/fields/__init__.py(2238):     def to_python(self, value):
0.25 /testbed/django/db/models/fields/__init__.py(2266):     def pre_save(self, model_instance, add):
0.25 /testbed/django/db/models/fields/__init__.py(2274):     def get_prep_value(self, value):
0.25 /testbed/django/db/models/fields/__init__.py(2278):     def get_db_prep_value(self, value, connection, prepared=False):
0.25 /testbed/django/db/models/fields/__init__.py(2284):     def value_to_string(self, obj):
0.25 /testbed/django/db/models/fields/__init__.py(2288):     def formfield(self, **kwargs):
0.25 /testbed/django/db/models/fields/__init__.py(2295): class URLField(CharField):
0.25 /testbed/django/db/models/fields/__init__.py(2295): class URLField(CharField):
0.25 /testbed/django/db/models/fields/__init__.py(2296):     default_validators = [validators.URLValidator()]
0.25 /testbed/django/db/models/fields/__init__.py(2297):     description = _("URL")
0.25 /testbed/django/db/models/fields/__init__.py(2299):     def __init__(self, verbose_name=None, name=None, **kwargs):
0.25 /testbed/django/db/models/fields/__init__.py(2303):     def deconstruct(self):
0.25 /testbed/django/db/models/fields/__init__.py(2309):     def formfield(self, **kwargs):
0.25 /testbed/django/db/models/fields/__init__.py(2318): class BinaryField(Field):
0.25 /testbed/django/db/models/fields/__init__.py(2318): class BinaryField(Field):
0.25 /testbed/django/db/models/fields/__init__.py(2319):     description = _("Raw binary data")
0.25 /testbed/django/db/models/fields/__init__.py(2320):     empty_values = [None, b'']
0.25 /testbed/django/db/models/fields/__init__.py(2322):     def __init__(self, *args, **kwargs):
0.25 /testbed/django/db/models/fields/__init__.py(2328):     def check(self, **kwargs):
0.25 /testbed/django/db/models/fields/__init__.py(2331):     def _check_str_default_value(self):
0.25 /testbed/django/db/models/fields/__init__.py(2343):     def deconstruct(self):
0.25 /testbed/django/db/models/fields/__init__.py(2351):     def get_internal_type(self):
0.25 /testbed/django/db/models/fields/__init__.py(2354):     def get_placeholder(self, value, compiler, connection):
0.25 /testbed/django/db/models/fields/__init__.py(2357):     def get_default(self):
0.25 /testbed/django/db/models/fields/__init__.py(2365):     def get_db_prep_value(self, value, connection, prepared=False):
0.25 /testbed/django/db/models/fields/__init__.py(2371):     def value_to_string(self, obj):
0.25 /testbed/django/db/models/fields/__init__.py(2375):     def to_python(self, value):
0.25 /testbed/django/db/models/fields/__init__.py(2382): class UUIDField(Field):
0.25 /testbed/django/db/models/fields/__init__.py(2382): class UUIDField(Field):
0.25 /testbed/django/db/models/fields/__init__.py(2384):         'invalid': _('“%(value)s” is not a valid UUID.'),
0.25 /testbed/django/db/models/fields/__init__.py(2383):     default_error_messages = {
0.25 /testbed/django/db/models/fields/__init__.py(2386):     description = _('Universally unique identifier')
0.25 /testbed/django/db/models/fields/__init__.py(2387):     empty_strings_allowed = False
0.25 /testbed/django/db/models/fields/__init__.py(2389):     def __init__(self, verbose_name=None, **kwargs):
0.25 /testbed/django/db/models/fields/__init__.py(2393):     def deconstruct(self):
0.25 /testbed/django/db/models/fields/__init__.py(2398):     def get_internal_type(self):
0.25 /testbed/django/db/models/fields/__init__.py(2401):     def get_prep_value(self, value):
0.25 /testbed/django/db/models/fields/__init__.py(2405):     def get_db_prep_value(self, value, connection, prepared=False):
0.25 /testbed/django/db/models/fields/__init__.py(2415):     def to_python(self, value):
0.25 /testbed/django/db/models/fields/__init__.py(2428):     def formfield(self, **kwargs):
0.25 /testbed/django/db/models/fields/__init__.py(2435): class AutoFieldMixin:
0.25 /testbed/django/db/models/fields/__init__.py(2435): class AutoFieldMixin:
0.25 /testbed/django/db/models/fields/__init__.py(2436):     db_returning = True
0.25 /testbed/django/db/models/fields/__init__.py(2438):     def __init__(self, *args, **kwargs):
0.25 /testbed/django/db/models/fields/__init__.py(2442):     def check(self, **kwargs):
0.25 /testbed/django/db/models/fields/__init__.py(2448):     def _check_primary_key(self):
0.25 /testbed/django/db/models/fields/__init__.py(2460):     def deconstruct(self):
0.25 /testbed/django/db/models/fields/__init__.py(2466):     def validate(self, value, model_instance):
0.25 /testbed/django/db/models/fields/__init__.py(2469):     def get_db_prep_value(self, value, connection, prepared=False):
0.25 /testbed/django/db/models/fields/__init__.py(2475):     def contribute_to_class(self, cls, name, **kwargs):
0.25 /testbed/django/db/models/fields/__init__.py(2484):     def formfield(self, **kwargs):
0.25 /testbed/django/db/models/fields/__init__.py(2488): class AutoFieldMeta(type):
0.25 /testbed/django/db/models/fields/__init__.py(2488): class AutoFieldMeta(type):
0.25 /testbed/django/db/models/fields/__init__.py(2489):     """
0.25 /testbed/django/db/models/fields/__init__.py(2505):     @property
0.25 /testbed/django/db/models/fields/__init__.py(2506):     def _subclasses(self):
0.25 /testbed/django/db/models/fields/__init__.py(2509):     def __instancecheck__(self, instance):
0.25 /testbed/django/db/models/fields/__init__.py(2512):     def __subclasscheck__(self, subclass):
0.25 /testbed/django/db/models/fields/__init__.py(2516): class AutoField(AutoFieldMixin, IntegerField, metaclass=AutoFieldMeta):
0.25 /testbed/django/db/models/fields/__init__.py(2516): class AutoField(AutoFieldMixin, IntegerField, metaclass=AutoFieldMeta):
0.25 /testbed/django/db/models/fields/__init__.py(2518):     def get_internal_type(self):
0.25 /testbed/django/db/models/fields/__init__.py(2521):     def rel_db_type(self, connection):
0.25 /testbed/django/db/models/fields/__init__.py(2525): class BigAutoField(AutoFieldMixin, BigIntegerField):
0.25 /testbed/django/db/models/fields/__init__.py(2525): class BigAutoField(AutoFieldMixin, BigIntegerField):
0.25 /testbed/django/db/models/fields/__init__.py(2527):     def get_internal_type(self):
0.25 /testbed/django/db/models/fields/__init__.py(2530):     def rel_db_type(self, connection):
0.25 /testbed/django/db/models/fields/__init__.py(2534): class SmallAutoField(AutoFieldMixin, SmallIntegerField):
0.25 /testbed/django/db/models/fields/__init__.py(2534): class SmallAutoField(AutoFieldMixin, SmallIntegerField):
0.25 /testbed/django/db/models/fields/__init__.py(2536):     def get_internal_type(self):
0.25 /testbed/django/db/models/fields/__init__.py(2539):     def rel_db_type(self, connection):
0.25 /testbed/django/db/models/fields/__init__.py(139):         self.name = name
0.25 /testbed/django/db/models/fields/__init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.25 /testbed/django/db/models/fields/__init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.25 /testbed/django/db/models/fields/__init__.py(142):         self.primary_key = primary_key
0.25 /testbed/django/db/models/fields/__init__.py(143):         self.max_length, self._unique = max_length, unique
0.25 /testbed/django/db/models/fields/__init__.py(144):         self.blank, self.null = blank, null
0.25 /testbed/django/db/models/fields/__init__.py(145):         self.remote_field = rel
0.25 /testbed/django/db/models/fields/__init__.py(146):         self.is_relation = self.remote_field is not None
0.25 /testbed/django/db/models/fields/__init__.py(147):         self.default = default
0.25 /testbed/django/db/models/fields/__init__.py(148):         self.editable = editable
0.25 /testbed/django/db/models/fields/__init__.py(149):         self.serialize = serialize
0.25 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_date = unique_for_date
0.25 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_month = unique_for_month
0.25 /testbed/django/db/models/fields/__init__.py(152):         self.unique_for_year = unique_for_year
0.25 /testbed/django/db/models/fields/__init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.25 /testbed/django/db/models/fields/__init__.py(155):         self.choices = choices
0.25 /testbed/django/db/models/fields/__init__.py(156):         self.help_text = help_text
0.25 /testbed/django/db/models/fields/__init__.py(157):         self.db_index = db_index
0.25 /testbed/django/db/models/fields/__init__.py(158):         self.db_column = db_column
0.25 /testbed/django/db/models/fields/__init__.py(159):         self._db_tablespace = db_tablespace
0.25 /testbed/django/db/models/fields/__init__.py(160):         self.auto_created = auto_created
0.25 /testbed/django/db/models/fields/__init__.py(163):         if auto_created:
0.25 /testbed/django/db/models/fields/__init__.py(167):             self.creation_counter = Field.creation_counter
0.25 /testbed/django/db/models/fields/__init__.py(168):             Field.creation_counter += 1
0.25 /testbed/django/db/models/fields/__init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.25 /testbed/django/db/models/fields/__init__.py(172):         messages = {}
0.25 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.25 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.25 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.25 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.25 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.25 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.25 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.25 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.25 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.25 /testbed/django/db/models/fields/__init__.py(175):         messages.update(error_messages or {})
0.25 /testbed/django/db/models/fields/__init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.25 /testbed/django/db/models/fields/__init__.py(177):         self.error_messages = messages
0.25 /testbed/django/db/models/fields/__init__.py(139):         self.name = name
0.25 /testbed/django/db/models/fields/__init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.25 /testbed/django/db/models/fields/__init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.25 /testbed/django/db/models/fields/__init__.py(142):         self.primary_key = primary_key
0.25 /testbed/django/db/models/fields/__init__.py(143):         self.max_length, self._unique = max_length, unique
0.25 /testbed/django/db/models/fields/__init__.py(144):         self.blank, self.null = blank, null
0.25 /testbed/django/db/models/fields/__init__.py(145):         self.remote_field = rel
0.25 /testbed/django/db/models/fields/__init__.py(146):         self.is_relation = self.remote_field is not None
0.25 /testbed/django/db/models/fields/__init__.py(147):         self.default = default
0.25 /testbed/django/db/models/fields/__init__.py(148):         self.editable = editable
0.25 /testbed/django/db/models/fields/__init__.py(149):         self.serialize = serialize
0.25 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_date = unique_for_date
0.25 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_month = unique_for_month
0.25 /testbed/django/db/models/fields/__init__.py(152):         self.unique_for_year = unique_for_year
0.25 /testbed/django/db/models/fields/__init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.25 /testbed/django/db/models/fields/__init__.py(155):         self.choices = choices
0.25 /testbed/django/db/models/fields/__init__.py(156):         self.help_text = help_text
0.25 /testbed/django/db/models/fields/__init__.py(157):         self.db_index = db_index
0.25 /testbed/django/db/models/fields/__init__.py(158):         self.db_column = db_column
0.25 /testbed/django/db/models/fields/__init__.py(159):         self._db_tablespace = db_tablespace
0.25 /testbed/django/db/models/fields/__init__.py(160):         self.auto_created = auto_created
0.25 /testbed/django/db/models/fields/__init__.py(163):         if auto_created:
0.25 /testbed/django/db/models/fields/__init__.py(167):             self.creation_counter = Field.creation_counter
0.25 /testbed/django/db/models/fields/__init__.py(168):             Field.creation_counter += 1
0.25 /testbed/django/db/models/fields/__init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.25 /testbed/django/db/models/fields/__init__.py(172):         messages = {}
0.25 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.25 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.25 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.25 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.25 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.25 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.25 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.25 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.25 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.25 /testbed/django/db/models/fields/__init__.py(175):         messages.update(error_messages or {})
0.25 /testbed/django/db/models/fields/__init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.25 /testbed/django/db/models/fields/__init__.py(177):         self.error_messages = messages
0.26 /testbed/django/db/models/fields/__init__.py(139):         self.name = name
0.26 /testbed/django/db/models/fields/__init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.26 /testbed/django/db/models/fields/__init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.26 /testbed/django/db/models/fields/__init__.py(142):         self.primary_key = primary_key
0.26 /testbed/django/db/models/fields/__init__.py(143):         self.max_length, self._unique = max_length, unique
0.26 /testbed/django/db/models/fields/__init__.py(144):         self.blank, self.null = blank, null
0.26 /testbed/django/db/models/fields/__init__.py(145):         self.remote_field = rel
0.26 /testbed/django/db/models/fields/__init__.py(146):         self.is_relation = self.remote_field is not None
0.26 /testbed/django/db/models/fields/__init__.py(147):         self.default = default
0.26 /testbed/django/db/models/fields/__init__.py(148):         self.editable = editable
0.26 /testbed/django/db/models/fields/__init__.py(149):         self.serialize = serialize
0.26 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_date = unique_for_date
0.26 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_month = unique_for_month
0.26 /testbed/django/db/models/fields/__init__.py(152):         self.unique_for_year = unique_for_year
0.26 /testbed/django/db/models/fields/__init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.26 /testbed/django/db/models/fields/__init__.py(155):         self.choices = choices
0.26 /testbed/django/db/models/fields/__init__.py(156):         self.help_text = help_text
0.26 /testbed/django/db/models/fields/__init__.py(157):         self.db_index = db_index
0.26 /testbed/django/db/models/fields/__init__.py(158):         self.db_column = db_column
0.26 /testbed/django/db/models/fields/__init__.py(159):         self._db_tablespace = db_tablespace
0.26 /testbed/django/db/models/fields/__init__.py(160):         self.auto_created = auto_created
0.26 /testbed/django/db/models/fields/__init__.py(163):         if auto_created:
0.26 /testbed/django/db/models/fields/__init__.py(167):             self.creation_counter = Field.creation_counter
0.26 /testbed/django/db/models/fields/__init__.py(168):             Field.creation_counter += 1
0.26 /testbed/django/db/models/fields/__init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.26 /testbed/django/db/models/fields/__init__.py(172):         messages = {}
0.26 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 /testbed/django/db/models/fields/__init__.py(175):         messages.update(error_messages or {})
0.26 /testbed/django/db/models/fields/__init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.26 /testbed/django/db/models/fields/__init__.py(177):         self.error_messages = messages
0.26 /testbed/django/db/models/fields/__init__.py(139):         self.name = name
0.26 /testbed/django/db/models/fields/__init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.26 /testbed/django/db/models/fields/__init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.26 /testbed/django/db/models/fields/__init__.py(142):         self.primary_key = primary_key
0.26 /testbed/django/db/models/fields/__init__.py(143):         self.max_length, self._unique = max_length, unique
0.26 /testbed/django/db/models/fields/__init__.py(144):         self.blank, self.null = blank, null
0.26 /testbed/django/db/models/fields/__init__.py(145):         self.remote_field = rel
0.26 /testbed/django/db/models/fields/__init__.py(146):         self.is_relation = self.remote_field is not None
0.26 /testbed/django/db/models/fields/__init__.py(147):         self.default = default
0.26 /testbed/django/db/models/fields/__init__.py(148):         self.editable = editable
0.26 /testbed/django/db/models/fields/__init__.py(149):         self.serialize = serialize
0.26 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_date = unique_for_date
0.26 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_month = unique_for_month
0.26 /testbed/django/db/models/fields/__init__.py(152):         self.unique_for_year = unique_for_year
0.26 /testbed/django/db/models/fields/__init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.26 /testbed/django/db/models/fields/__init__.py(155):         self.choices = choices
0.26 /testbed/django/db/models/fields/__init__.py(156):         self.help_text = help_text
0.26 /testbed/django/db/models/fields/__init__.py(157):         self.db_index = db_index
0.26 /testbed/django/db/models/fields/__init__.py(158):         self.db_column = db_column
0.26 /testbed/django/db/models/fields/__init__.py(159):         self._db_tablespace = db_tablespace
0.26 /testbed/django/db/models/fields/__init__.py(160):         self.auto_created = auto_created
0.26 /testbed/django/db/models/fields/__init__.py(163):         if auto_created:
0.26 /testbed/django/db/models/fields/__init__.py(167):             self.creation_counter = Field.creation_counter
0.26 /testbed/django/db/models/fields/__init__.py(168):             Field.creation_counter += 1
0.26 /testbed/django/db/models/fields/__init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.26 /testbed/django/db/models/fields/__init__.py(172):         messages = {}
0.26 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 /testbed/django/db/models/fields/__init__.py(175):         messages.update(error_messages or {})
0.26 /testbed/django/db/models/fields/__init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.26 /testbed/django/db/models/fields/__init__.py(177):         self.error_messages = messages
0.26 /testbed/django/db/models/fields/__init__.py(1207):         self.auto_now, self.auto_now_add = auto_now, auto_now_add
0.26 /testbed/django/db/models/fields/__init__.py(1208):         if auto_now or auto_now_add:
0.26 /testbed/django/db/models/fields/__init__.py(1211):         super().__init__(verbose_name, name, **kwargs)
0.26 /testbed/django/db/models/fields/__init__.py(139):         self.name = name
0.26 /testbed/django/db/models/fields/__init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.26 /testbed/django/db/models/fields/__init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.26 /testbed/django/db/models/fields/__init__.py(142):         self.primary_key = primary_key
0.26 /testbed/django/db/models/fields/__init__.py(143):         self.max_length, self._unique = max_length, unique
0.26 /testbed/django/db/models/fields/__init__.py(144):         self.blank, self.null = blank, null
0.26 /testbed/django/db/models/fields/__init__.py(145):         self.remote_field = rel
0.26 /testbed/django/db/models/fields/__init__.py(146):         self.is_relation = self.remote_field is not None
0.26 /testbed/django/db/models/fields/__init__.py(147):         self.default = default
0.26 /testbed/django/db/models/fields/__init__.py(148):         self.editable = editable
0.26 /testbed/django/db/models/fields/__init__.py(149):         self.serialize = serialize
0.26 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_date = unique_for_date
0.26 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_month = unique_for_month
0.26 /testbed/django/db/models/fields/__init__.py(152):         self.unique_for_year = unique_for_year
0.26 /testbed/django/db/models/fields/__init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.26 /testbed/django/db/models/fields/__init__.py(155):         self.choices = choices
0.26 /testbed/django/db/models/fields/__init__.py(156):         self.help_text = help_text
0.26 /testbed/django/db/models/fields/__init__.py(157):         self.db_index = db_index
0.26 /testbed/django/db/models/fields/__init__.py(158):         self.db_column = db_column
0.26 /testbed/django/db/models/fields/__init__.py(159):         self._db_tablespace = db_tablespace
0.26 /testbed/django/db/models/fields/__init__.py(160):         self.auto_created = auto_created
0.26 /testbed/django/db/models/fields/__init__.py(163):         if auto_created:
0.26 /testbed/django/db/models/fields/__init__.py(167):             self.creation_counter = Field.creation_counter
0.26 /testbed/django/db/models/fields/__init__.py(168):             Field.creation_counter += 1
0.26 /testbed/django/db/models/fields/__init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.26 /testbed/django/db/models/fields/__init__.py(172):         messages = {}
0.26 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 /testbed/django/db/models/fields/__init__.py(175):         messages.update(error_messages or {})
0.26 /testbed/django/db/models/fields/__init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.26 /testbed/django/db/models/fields/__init__.py(177):         self.error_messages = messages
0.26 /testbed/django/db/models/fields/__init__.py(1207):         self.auto_now, self.auto_now_add = auto_now, auto_now_add
0.26 /testbed/django/db/models/fields/__init__.py(1208):         if auto_now or auto_now_add:
0.26 /testbed/django/db/models/fields/__init__.py(1211):         super().__init__(verbose_name, name, **kwargs)
0.26 /testbed/django/db/models/fields/__init__.py(139):         self.name = name
0.26 /testbed/django/db/models/fields/__init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.26 /testbed/django/db/models/fields/__init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.26 /testbed/django/db/models/fields/__init__.py(142):         self.primary_key = primary_key
0.26 /testbed/django/db/models/fields/__init__.py(143):         self.max_length, self._unique = max_length, unique
0.26 /testbed/django/db/models/fields/__init__.py(144):         self.blank, self.null = blank, null
0.26 /testbed/django/db/models/fields/__init__.py(145):         self.remote_field = rel
0.26 /testbed/django/db/models/fields/__init__.py(146):         self.is_relation = self.remote_field is not None
0.26 /testbed/django/db/models/fields/__init__.py(147):         self.default = default
0.26 /testbed/django/db/models/fields/__init__.py(148):         self.editable = editable
0.26 /testbed/django/db/models/fields/__init__.py(149):         self.serialize = serialize
0.26 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_date = unique_for_date
0.26 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_month = unique_for_month
0.26 /testbed/django/db/models/fields/__init__.py(152):         self.unique_for_year = unique_for_year
0.26 /testbed/django/db/models/fields/__init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.26 /testbed/django/db/models/fields/__init__.py(155):         self.choices = choices
0.26 /testbed/django/db/models/fields/__init__.py(156):         self.help_text = help_text
0.26 /testbed/django/db/models/fields/__init__.py(157):         self.db_index = db_index
0.26 /testbed/django/db/models/fields/__init__.py(158):         self.db_column = db_column
0.26 /testbed/django/db/models/fields/__init__.py(159):         self._db_tablespace = db_tablespace
0.26 /testbed/django/db/models/fields/__init__.py(160):         self.auto_created = auto_created
0.26 /testbed/django/db/models/fields/__init__.py(163):         if auto_created:
0.26 /testbed/django/db/models/fields/__init__.py(167):             self.creation_counter = Field.creation_counter
0.26 /testbed/django/db/models/fields/__init__.py(168):             Field.creation_counter += 1
0.26 /testbed/django/db/models/fields/__init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.26 /testbed/django/db/models/fields/__init__.py(172):         messages = {}
0.26 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 /testbed/django/db/models/fields/__init__.py(175):         messages.update(error_messages or {})
0.26 /testbed/django/db/models/fields/__init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.26 /testbed/django/db/models/fields/__init__.py(177):         self.error_messages = messages
0.26 /testbed/django/db/models/fields/__init__.py(2196):         self.auto_now, self.auto_now_add = auto_now, auto_now_add
0.26 /testbed/django/db/models/fields/__init__.py(2197):         if auto_now or auto_now_add:
0.26 /testbed/django/db/models/fields/__init__.py(2200):         super().__init__(verbose_name, name, **kwargs)
0.26 /testbed/django/db/models/fields/__init__.py(139):         self.name = name
0.26 /testbed/django/db/models/fields/__init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.26 /testbed/django/db/models/fields/__init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.26 /testbed/django/db/models/fields/__init__.py(142):         self.primary_key = primary_key
0.26 /testbed/django/db/models/fields/__init__.py(143):         self.max_length, self._unique = max_length, unique
0.26 /testbed/django/db/models/fields/__init__.py(144):         self.blank, self.null = blank, null
0.26 /testbed/django/db/models/fields/__init__.py(145):         self.remote_field = rel
0.26 /testbed/django/db/models/fields/__init__.py(146):         self.is_relation = self.remote_field is not None
0.26 /testbed/django/db/models/fields/__init__.py(147):         self.default = default
0.26 /testbed/django/db/models/fields/__init__.py(148):         self.editable = editable
0.26 /testbed/django/db/models/fields/__init__.py(149):         self.serialize = serialize
0.26 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_date = unique_for_date
0.26 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_month = unique_for_month
0.26 /testbed/django/db/models/fields/__init__.py(152):         self.unique_for_year = unique_for_year
0.26 /testbed/django/db/models/fields/__init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.26 /testbed/django/db/models/fields/__init__.py(155):         self.choices = choices
0.26 /testbed/django/db/models/fields/__init__.py(156):         self.help_text = help_text
0.26 /testbed/django/db/models/fields/__init__.py(157):         self.db_index = db_index
0.26 /testbed/django/db/models/fields/__init__.py(158):         self.db_column = db_column
0.26 /testbed/django/db/models/fields/__init__.py(159):         self._db_tablespace = db_tablespace
0.26 /testbed/django/db/models/fields/__init__.py(160):         self.auto_created = auto_created
0.26 /testbed/django/db/models/fields/__init__.py(163):         if auto_created:
0.26 /testbed/django/db/models/fields/__init__.py(167):             self.creation_counter = Field.creation_counter
0.26 /testbed/django/db/models/fields/__init__.py(168):             Field.creation_counter += 1
0.26 /testbed/django/db/models/fields/__init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.26 /testbed/django/db/models/fields/__init__.py(172):         messages = {}
0.26 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 /testbed/django/db/models/fields/__init__.py(175):         messages.update(error_messages or {})
0.26 /testbed/django/db/models/fields/__init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.26 /testbed/django/db/models/fields/__init__.py(177):         self.error_messages = messages
0.26 /testbed/django/db/models/fields/__init__.py(1011):         super().__init__(*args, **kwargs)
0.26 /testbed/django/db/models/fields/__init__.py(139):         self.name = name
0.26 /testbed/django/db/models/fields/__init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.26 /testbed/django/db/models/fields/__init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.26 /testbed/django/db/models/fields/__init__.py(142):         self.primary_key = primary_key
0.26 /testbed/django/db/models/fields/__init__.py(143):         self.max_length, self._unique = max_length, unique
0.26 /testbed/django/db/models/fields/__init__.py(144):         self.blank, self.null = blank, null
0.26 /testbed/django/db/models/fields/__init__.py(145):         self.remote_field = rel
0.26 /testbed/django/db/models/fields/__init__.py(146):         self.is_relation = self.remote_field is not None
0.26 /testbed/django/db/models/fields/__init__.py(147):         self.default = default
0.26 /testbed/django/db/models/fields/__init__.py(148):         self.editable = editable
0.26 /testbed/django/db/models/fields/__init__.py(149):         self.serialize = serialize
0.26 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_date = unique_for_date
0.26 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_month = unique_for_month
0.26 /testbed/django/db/models/fields/__init__.py(152):         self.unique_for_year = unique_for_year
0.26 /testbed/django/db/models/fields/__init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.26 /testbed/django/db/models/fields/__init__.py(155):         self.choices = choices
0.26 /testbed/django/db/models/fields/__init__.py(156):         self.help_text = help_text
0.26 /testbed/django/db/models/fields/__init__.py(157):         self.db_index = db_index
0.26 /testbed/django/db/models/fields/__init__.py(158):         self.db_column = db_column
0.26 /testbed/django/db/models/fields/__init__.py(159):         self._db_tablespace = db_tablespace
0.26 /testbed/django/db/models/fields/__init__.py(160):         self.auto_created = auto_created
0.26 /testbed/django/db/models/fields/__init__.py(163):         if auto_created:
0.26 /testbed/django/db/models/fields/__init__.py(167):             self.creation_counter = Field.creation_counter
0.26 /testbed/django/db/models/fields/__init__.py(168):             Field.creation_counter += 1
0.26 /testbed/django/db/models/fields/__init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.26 /testbed/django/db/models/fields/__init__.py(172):         messages = {}
0.26 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 /testbed/django/db/models/fields/__init__.py(175):         messages.update(error_messages or {})
0.26 /testbed/django/db/models/fields/__init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.26 /testbed/django/db/models/fields/__init__.py(177):         self.error_messages = messages
0.26 /testbed/django/db/models/fields/__init__.py(1012):         self.db_collation = db_collation
0.26 /testbed/django/db/models/fields/__init__.py(1013):         if self.max_length is not None:
0.26 /testbed/django/db/models/fields/__init__.py(139):         self.name = name
0.26 /testbed/django/db/models/fields/__init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.26 /testbed/django/db/models/fields/__init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.26 /testbed/django/db/models/fields/__init__.py(142):         self.primary_key = primary_key
0.26 /testbed/django/db/models/fields/__init__.py(143):         self.max_length, self._unique = max_length, unique
0.26 /testbed/django/db/models/fields/__init__.py(144):         self.blank, self.null = blank, null
0.26 /testbed/django/db/models/fields/__init__.py(145):         self.remote_field = rel
0.26 /testbed/django/db/models/fields/__init__.py(146):         self.is_relation = self.remote_field is not None
0.26 /testbed/django/db/models/fields/__init__.py(147):         self.default = default
0.26 /testbed/django/db/models/fields/__init__.py(148):         self.editable = editable
0.26 /testbed/django/db/models/fields/__init__.py(149):         self.serialize = serialize
0.26 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_date = unique_for_date
0.26 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_month = unique_for_month
0.26 /testbed/django/db/models/fields/__init__.py(152):         self.unique_for_year = unique_for_year
0.26 /testbed/django/db/models/fields/__init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.26 /testbed/django/db/models/fields/__init__.py(155):         self.choices = choices
0.26 /testbed/django/db/models/fields/__init__.py(156):         self.help_text = help_text
0.26 /testbed/django/db/models/fields/__init__.py(157):         self.db_index = db_index
0.26 /testbed/django/db/models/fields/__init__.py(158):         self.db_column = db_column
0.26 /testbed/django/db/models/fields/__init__.py(159):         self._db_tablespace = db_tablespace
0.26 /testbed/django/db/models/fields/__init__.py(160):         self.auto_created = auto_created
0.26 /testbed/django/db/models/fields/__init__.py(163):         if auto_created:
0.26 /testbed/django/db/models/fields/__init__.py(167):             self.creation_counter = Field.creation_counter
0.26 /testbed/django/db/models/fields/__init__.py(168):             Field.creation_counter += 1
0.26 /testbed/django/db/models/fields/__init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.26 /testbed/django/db/models/fields/__init__.py(172):         messages = {}
0.26 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 /testbed/django/db/models/fields/__init__.py(175):         messages.update(error_messages or {})
0.26 /testbed/django/db/models/fields/__init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.26 /testbed/django/db/models/fields/__init__.py(177):         self.error_messages = messages
0.26 /testbed/django/db/models/fields/__init__.py(1011):         super().__init__(*args, **kwargs)
0.26 /testbed/django/db/models/fields/__init__.py(139):         self.name = name
0.26 /testbed/django/db/models/fields/__init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.26 /testbed/django/db/models/fields/__init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.26 /testbed/django/db/models/fields/__init__.py(142):         self.primary_key = primary_key
0.26 /testbed/django/db/models/fields/__init__.py(143):         self.max_length, self._unique = max_length, unique
0.26 /testbed/django/db/models/fields/__init__.py(144):         self.blank, self.null = blank, null
0.26 /testbed/django/db/models/fields/__init__.py(145):         self.remote_field = rel
0.26 /testbed/django/db/models/fields/__init__.py(146):         self.is_relation = self.remote_field is not None
0.26 /testbed/django/db/models/fields/__init__.py(147):         self.default = default
0.26 /testbed/django/db/models/fields/__init__.py(148):         self.editable = editable
0.26 /testbed/django/db/models/fields/__init__.py(149):         self.serialize = serialize
0.26 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_date = unique_for_date
0.26 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_month = unique_for_month
0.26 /testbed/django/db/models/fields/__init__.py(152):         self.unique_for_year = unique_for_year
0.26 /testbed/django/db/models/fields/__init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.26 /testbed/django/db/models/fields/__init__.py(155):         self.choices = choices
0.26 /testbed/django/db/models/fields/__init__.py(156):         self.help_text = help_text
0.26 /testbed/django/db/models/fields/__init__.py(157):         self.db_index = db_index
0.26 /testbed/django/db/models/fields/__init__.py(158):         self.db_column = db_column
0.26 /testbed/django/db/models/fields/__init__.py(159):         self._db_tablespace = db_tablespace
0.26 /testbed/django/db/models/fields/__init__.py(160):         self.auto_created = auto_created
0.26 /testbed/django/db/models/fields/__init__.py(163):         if auto_created:
0.26 /testbed/django/db/models/fields/__init__.py(167):             self.creation_counter = Field.creation_counter
0.26 /testbed/django/db/models/fields/__init__.py(168):             Field.creation_counter += 1
0.26 /testbed/django/db/models/fields/__init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.26 /testbed/django/db/models/fields/__init__.py(172):         messages = {}
0.26 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 /testbed/django/db/models/fields/__init__.py(175):         messages.update(error_messages or {})
0.26 /testbed/django/db/models/fields/__init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.26 /testbed/django/db/models/fields/__init__.py(177):         self.error_messages = messages
0.26 /testbed/django/db/models/fields/__init__.py(1012):         self.db_collation = db_collation
0.26 /testbed/django/db/models/fields/__init__.py(1013):         if self.max_length is not None:
0.26 /testbed/django/db/models/fields/__init__.py(139):         self.name = name
0.26 /testbed/django/db/models/fields/__init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.26 /testbed/django/db/models/fields/__init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.26 /testbed/django/db/models/fields/__init__.py(142):         self.primary_key = primary_key
0.26 /testbed/django/db/models/fields/__init__.py(143):         self.max_length, self._unique = max_length, unique
0.26 /testbed/django/db/models/fields/__init__.py(144):         self.blank, self.null = blank, null
0.26 /testbed/django/db/models/fields/__init__.py(145):         self.remote_field = rel
0.26 /testbed/django/db/models/fields/__init__.py(146):         self.is_relation = self.remote_field is not None
0.26 /testbed/django/db/models/fields/__init__.py(147):         self.default = default
0.26 /testbed/django/db/models/fields/__init__.py(148):         self.editable = editable
0.26 /testbed/django/db/models/fields/__init__.py(149):         self.serialize = serialize
0.26 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_date = unique_for_date
0.26 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_month = unique_for_month
0.26 /testbed/django/db/models/fields/__init__.py(152):         self.unique_for_year = unique_for_year
0.26 /testbed/django/db/models/fields/__init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.26 /testbed/django/db/models/fields/__init__.py(155):         self.choices = choices
0.26 /testbed/django/db/models/fields/__init__.py(156):         self.help_text = help_text
0.26 /testbed/django/db/models/fields/__init__.py(157):         self.db_index = db_index
0.26 /testbed/django/db/models/fields/__init__.py(158):         self.db_column = db_column
0.26 /testbed/django/db/models/fields/__init__.py(159):         self._db_tablespace = db_tablespace
0.26 /testbed/django/db/models/fields/__init__.py(160):         self.auto_created = auto_created
0.26 /testbed/django/db/models/fields/__init__.py(163):         if auto_created:
0.26 /testbed/django/db/models/fields/__init__.py(167):             self.creation_counter = Field.creation_counter
0.26 /testbed/django/db/models/fields/__init__.py(168):             Field.creation_counter += 1
0.26 /testbed/django/db/models/fields/__init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.26 /testbed/django/db/models/fields/__init__.py(172):         messages = {}
0.26 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 /testbed/django/db/models/fields/__init__.py(175):         messages.update(error_messages or {})
0.26 /testbed/django/db/models/fields/__init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.26 /testbed/django/db/models/fields/__init__.py(177):         self.error_messages = messages
0.26 /testbed/django/db/models/fields/__init__.py(1011):         super().__init__(*args, **kwargs)
0.26 /testbed/django/db/models/fields/__init__.py(139):         self.name = name
0.26 /testbed/django/db/models/fields/__init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.26 /testbed/django/db/models/fields/__init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.26 /testbed/django/db/models/fields/__init__.py(142):         self.primary_key = primary_key
0.26 /testbed/django/db/models/fields/__init__.py(143):         self.max_length, self._unique = max_length, unique
0.26 /testbed/django/db/models/fields/__init__.py(144):         self.blank, self.null = blank, null
0.26 /testbed/django/db/models/fields/__init__.py(145):         self.remote_field = rel
0.26 /testbed/django/db/models/fields/__init__.py(146):         self.is_relation = self.remote_field is not None
0.26 /testbed/django/db/models/fields/__init__.py(147):         self.default = default
0.26 /testbed/django/db/models/fields/__init__.py(148):         self.editable = editable
0.26 /testbed/django/db/models/fields/__init__.py(149):         self.serialize = serialize
0.26 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_date = unique_for_date
0.26 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_month = unique_for_month
0.26 /testbed/django/db/models/fields/__init__.py(152):         self.unique_for_year = unique_for_year
0.26 /testbed/django/db/models/fields/__init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.26 /testbed/django/db/models/fields/__init__.py(155):         self.choices = choices
0.26 /testbed/django/db/models/fields/__init__.py(156):         self.help_text = help_text
0.26 /testbed/django/db/models/fields/__init__.py(157):         self.db_index = db_index
0.26 /testbed/django/db/models/fields/__init__.py(158):         self.db_column = db_column
0.26 /testbed/django/db/models/fields/__init__.py(159):         self._db_tablespace = db_tablespace
0.26 /testbed/django/db/models/fields/__init__.py(160):         self.auto_created = auto_created
0.26 /testbed/django/db/models/fields/__init__.py(163):         if auto_created:
0.26 /testbed/django/db/models/fields/__init__.py(167):             self.creation_counter = Field.creation_counter
0.26 /testbed/django/db/models/fields/__init__.py(168):             Field.creation_counter += 1
0.26 /testbed/django/db/models/fields/__init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.26 /testbed/django/db/models/fields/__init__.py(172):         messages = {}
0.26 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 /testbed/django/db/models/fields/__init__.py(175):         messages.update(error_messages or {})
0.26 /testbed/django/db/models/fields/__init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.26 /testbed/django/db/models/fields/__init__.py(177):         self.error_messages = messages
0.26 /testbed/django/db/models/fields/__init__.py(1012):         self.db_collation = db_collation
0.26 /testbed/django/db/models/fields/__init__.py(1013):         if self.max_length is not None:
0.26 /testbed/django/db/models/fields/__init__.py(139):         self.name = name
0.26 /testbed/django/db/models/fields/__init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.26 /testbed/django/db/models/fields/__init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.26 /testbed/django/db/models/fields/__init__.py(142):         self.primary_key = primary_key
0.26 /testbed/django/db/models/fields/__init__.py(143):         self.max_length, self._unique = max_length, unique
0.26 /testbed/django/db/models/fields/__init__.py(144):         self.blank, self.null = blank, null
0.26 /testbed/django/db/models/fields/__init__.py(145):         self.remote_field = rel
0.26 /testbed/django/db/models/fields/__init__.py(146):         self.is_relation = self.remote_field is not None
0.26 /testbed/django/db/models/fields/__init__.py(147):         self.default = default
0.26 /testbed/django/db/models/fields/__init__.py(148):         self.editable = editable
0.26 /testbed/django/db/models/fields/__init__.py(149):         self.serialize = serialize
0.26 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_date = unique_for_date
0.26 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_month = unique_for_month
0.26 /testbed/django/db/models/fields/__init__.py(152):         self.unique_for_year = unique_for_year
0.26 /testbed/django/db/models/fields/__init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.26 /testbed/django/db/models/fields/__init__.py(155):         self.choices = choices
0.26 /testbed/django/db/models/fields/__init__.py(156):         self.help_text = help_text
0.26 /testbed/django/db/models/fields/__init__.py(157):         self.db_index = db_index
0.26 /testbed/django/db/models/fields/__init__.py(158):         self.db_column = db_column
0.26 /testbed/django/db/models/fields/__init__.py(159):         self._db_tablespace = db_tablespace
0.26 /testbed/django/db/models/fields/__init__.py(160):         self.auto_created = auto_created
0.26 /testbed/django/db/models/fields/__init__.py(163):         if auto_created:
0.26 /testbed/django/db/models/fields/__init__.py(167):             self.creation_counter = Field.creation_counter
0.26 /testbed/django/db/models/fields/__init__.py(168):             Field.creation_counter += 1
0.26 /testbed/django/db/models/fields/__init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.26 /testbed/django/db/models/fields/__init__.py(172):         messages = {}
0.26 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 /testbed/django/db/models/fields/__init__.py(175):         messages.update(error_messages or {})
0.26 /testbed/django/db/models/fields/__init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.26 /testbed/django/db/models/fields/__init__.py(177):         self.error_messages = messages
0.26 /testbed/django/db/models/fields/__init__.py(1011):         super().__init__(*args, **kwargs)
0.26 /testbed/django/db/models/fields/__init__.py(139):         self.name = name
0.26 /testbed/django/db/models/fields/__init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.26 /testbed/django/db/models/fields/__init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.26 /testbed/django/db/models/fields/__init__.py(142):         self.primary_key = primary_key
0.26 /testbed/django/db/models/fields/__init__.py(143):         self.max_length, self._unique = max_length, unique
0.26 /testbed/django/db/models/fields/__init__.py(144):         self.blank, self.null = blank, null
0.26 /testbed/django/db/models/fields/__init__.py(145):         self.remote_field = rel
0.26 /testbed/django/db/models/fields/__init__.py(146):         self.is_relation = self.remote_field is not None
0.26 /testbed/django/db/models/fields/__init__.py(147):         self.default = default
0.26 /testbed/django/db/models/fields/__init__.py(148):         self.editable = editable
0.26 /testbed/django/db/models/fields/__init__.py(149):         self.serialize = serialize
0.26 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_date = unique_for_date
0.26 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_month = unique_for_month
0.26 /testbed/django/db/models/fields/__init__.py(152):         self.unique_for_year = unique_for_year
0.26 /testbed/django/db/models/fields/__init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.26 /testbed/django/db/models/fields/__init__.py(155):         self.choices = choices
0.26 /testbed/django/db/models/fields/__init__.py(156):         self.help_text = help_text
0.26 /testbed/django/db/models/fields/__init__.py(157):         self.db_index = db_index
0.26 /testbed/django/db/models/fields/__init__.py(158):         self.db_column = db_column
0.26 /testbed/django/db/models/fields/__init__.py(159):         self._db_tablespace = db_tablespace
0.26 /testbed/django/db/models/fields/__init__.py(160):         self.auto_created = auto_created
0.26 /testbed/django/db/models/fields/__init__.py(163):         if auto_created:
0.26 /testbed/django/db/models/fields/__init__.py(167):             self.creation_counter = Field.creation_counter
0.26 /testbed/django/db/models/fields/__init__.py(168):             Field.creation_counter += 1
0.26 /testbed/django/db/models/fields/__init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.26 /testbed/django/db/models/fields/__init__.py(172):         messages = {}
0.26 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 /testbed/django/db/models/fields/__init__.py(175):         messages.update(error_messages or {})
0.26 /testbed/django/db/models/fields/__init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.26 /testbed/django/db/models/fields/__init__.py(177):         self.error_messages = messages
0.26 /testbed/django/db/models/fields/__init__.py(1012):         self.db_collation = db_collation
0.26 /testbed/django/db/models/fields/__init__.py(1013):         if self.max_length is not None:
0.26 /testbed/django/db/models/fields/__init__.py(139):         self.name = name
0.26 /testbed/django/db/models/fields/__init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.26 /testbed/django/db/models/fields/__init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.26 /testbed/django/db/models/fields/__init__.py(142):         self.primary_key = primary_key
0.26 /testbed/django/db/models/fields/__init__.py(143):         self.max_length, self._unique = max_length, unique
0.26 /testbed/django/db/models/fields/__init__.py(144):         self.blank, self.null = blank, null
0.26 /testbed/django/db/models/fields/__init__.py(145):         self.remote_field = rel
0.26 /testbed/django/db/models/fields/__init__.py(146):         self.is_relation = self.remote_field is not None
0.26 /testbed/django/db/models/fields/__init__.py(147):         self.default = default
0.26 /testbed/django/db/models/fields/__init__.py(148):         self.editable = editable
0.26 /testbed/django/db/models/fields/__init__.py(149):         self.serialize = serialize
0.26 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_date = unique_for_date
0.26 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_month = unique_for_month
0.26 /testbed/django/db/models/fields/__init__.py(152):         self.unique_for_year = unique_for_year
0.26 /testbed/django/db/models/fields/__init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.26 /testbed/django/db/models/fields/__init__.py(155):         self.choices = choices
0.26 /testbed/django/db/models/fields/__init__.py(156):         self.help_text = help_text
0.26 /testbed/django/db/models/fields/__init__.py(157):         self.db_index = db_index
0.26 /testbed/django/db/models/fields/__init__.py(158):         self.db_column = db_column
0.26 /testbed/django/db/models/fields/__init__.py(159):         self._db_tablespace = db_tablespace
0.26 /testbed/django/db/models/fields/__init__.py(160):         self.auto_created = auto_created
0.26 /testbed/django/db/models/fields/__init__.py(163):         if auto_created:
0.26 /testbed/django/db/models/fields/__init__.py(167):             self.creation_counter = Field.creation_counter
0.26 /testbed/django/db/models/fields/__init__.py(168):             Field.creation_counter += 1
0.26 /testbed/django/db/models/fields/__init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.26 /testbed/django/db/models/fields/__init__.py(172):         messages = {}
0.26 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 /testbed/django/db/models/fields/__init__.py(175):         messages.update(error_messages or {})
0.26 /testbed/django/db/models/fields/__init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.26 /testbed/django/db/models/fields/__init__.py(177):         self.error_messages = messages
0.26 /testbed/django/db/models/fields/__init__.py(139):         self.name = name
0.26 /testbed/django/db/models/fields/__init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.26 /testbed/django/db/models/fields/__init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.26 /testbed/django/db/models/fields/__init__.py(142):         self.primary_key = primary_key
0.26 /testbed/django/db/models/fields/__init__.py(143):         self.max_length, self._unique = max_length, unique
0.26 /testbed/django/db/models/fields/__init__.py(144):         self.blank, self.null = blank, null
0.26 /testbed/django/db/models/fields/__init__.py(145):         self.remote_field = rel
0.26 /testbed/django/db/models/fields/__init__.py(146):         self.is_relation = self.remote_field is not None
0.26 /testbed/django/db/models/fields/__init__.py(147):         self.default = default
0.26 /testbed/django/db/models/fields/__init__.py(148):         self.editable = editable
0.26 /testbed/django/db/models/fields/__init__.py(149):         self.serialize = serialize
0.26 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_date = unique_for_date
0.26 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_month = unique_for_month
0.26 /testbed/django/db/models/fields/__init__.py(152):         self.unique_for_year = unique_for_year
0.26 /testbed/django/db/models/fields/__init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.26 /testbed/django/db/models/fields/__init__.py(155):         self.choices = choices
0.26 /testbed/django/db/models/fields/__init__.py(156):         self.help_text = help_text
0.26 /testbed/django/db/models/fields/__init__.py(157):         self.db_index = db_index
0.26 /testbed/django/db/models/fields/__init__.py(158):         self.db_column = db_column
0.26 /testbed/django/db/models/fields/__init__.py(159):         self._db_tablespace = db_tablespace
0.26 /testbed/django/db/models/fields/__init__.py(160):         self.auto_created = auto_created
0.26 /testbed/django/db/models/fields/__init__.py(163):         if auto_created:
0.26 /testbed/django/db/models/fields/__init__.py(167):             self.creation_counter = Field.creation_counter
0.26 /testbed/django/db/models/fields/__init__.py(168):             Field.creation_counter += 1
0.26 /testbed/django/db/models/fields/__init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.26 /testbed/django/db/models/fields/__init__.py(172):         messages = {}
0.26 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 /testbed/django/db/models/fields/__init__.py(175):         messages.update(error_messages or {})
0.26 /testbed/django/db/models/fields/__init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.26 /testbed/django/db/models/fields/__init__.py(177):         self.error_messages = messages
0.26 /testbed/django/db/models/fields/__init__.py(139):         self.name = name
0.26 /testbed/django/db/models/fields/__init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.26 /testbed/django/db/models/fields/__init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.26 /testbed/django/db/models/fields/__init__.py(142):         self.primary_key = primary_key
0.26 /testbed/django/db/models/fields/__init__.py(143):         self.max_length, self._unique = max_length, unique
0.26 /testbed/django/db/models/fields/__init__.py(144):         self.blank, self.null = blank, null
0.26 /testbed/django/db/models/fields/__init__.py(145):         self.remote_field = rel
0.26 /testbed/django/db/models/fields/__init__.py(146):         self.is_relation = self.remote_field is not None
0.26 /testbed/django/db/models/fields/__init__.py(147):         self.default = default
0.26 /testbed/django/db/models/fields/__init__.py(148):         self.editable = editable
0.26 /testbed/django/db/models/fields/__init__.py(149):         self.serialize = serialize
0.26 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_date = unique_for_date
0.26 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_month = unique_for_month
0.26 /testbed/django/db/models/fields/__init__.py(152):         self.unique_for_year = unique_for_year
0.26 /testbed/django/db/models/fields/__init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.26 /testbed/django/db/models/fields/__init__.py(155):         self.choices = choices
0.26 /testbed/django/db/models/fields/__init__.py(156):         self.help_text = help_text
0.27 /testbed/django/db/models/fields/__init__.py(157):         self.db_index = db_index
0.27 /testbed/django/db/models/fields/__init__.py(158):         self.db_column = db_column
0.27 /testbed/django/db/models/fields/__init__.py(159):         self._db_tablespace = db_tablespace
0.27 /testbed/django/db/models/fields/__init__.py(160):         self.auto_created = auto_created
0.27 /testbed/django/db/models/fields/__init__.py(163):         if auto_created:
0.27 /testbed/django/db/models/fields/__init__.py(167):             self.creation_counter = Field.creation_counter
0.27 /testbed/django/db/models/fields/__init__.py(168):             Field.creation_counter += 1
0.27 /testbed/django/db/models/fields/__init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.27 /testbed/django/db/models/fields/__init__.py(172):         messages = {}
0.27 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.27 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.27 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.27 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.27 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.27 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.27 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.27 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.27 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.27 /testbed/django/db/models/fields/__init__.py(175):         messages.update(error_messages or {})
0.27 /testbed/django/db/models/fields/__init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.27 /testbed/django/db/models/fields/__init__.py(177):         self.error_messages = messages
0.27 /testbed/django/db/models/fields/__init__.py(139):         self.name = name
0.27 /testbed/django/db/models/fields/__init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.27 /testbed/django/db/models/fields/__init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.27 /testbed/django/db/models/fields/__init__.py(142):         self.primary_key = primary_key
0.27 /testbed/django/db/models/fields/__init__.py(143):         self.max_length, self._unique = max_length, unique
0.27 /testbed/django/db/models/fields/__init__.py(144):         self.blank, self.null = blank, null
0.27 /testbed/django/db/models/fields/__init__.py(145):         self.remote_field = rel
0.27 /testbed/django/db/models/fields/__init__.py(146):         self.is_relation = self.remote_field is not None
0.27 /testbed/django/db/models/fields/__init__.py(147):         self.default = default
0.27 /testbed/django/db/models/fields/__init__.py(148):         self.editable = editable
0.27 /testbed/django/db/models/fields/__init__.py(149):         self.serialize = serialize
0.27 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_date = unique_for_date
0.27 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_month = unique_for_month
0.27 /testbed/django/db/models/fields/__init__.py(152):         self.unique_for_year = unique_for_year
0.27 /testbed/django/db/models/fields/__init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.27 /testbed/django/db/models/fields/__init__.py(155):         self.choices = choices
0.27 /testbed/django/db/models/fields/__init__.py(156):         self.help_text = help_text
0.27 /testbed/django/db/models/fields/__init__.py(157):         self.db_index = db_index
0.27 /testbed/django/db/models/fields/__init__.py(158):         self.db_column = db_column
0.27 /testbed/django/db/models/fields/__init__.py(159):         self._db_tablespace = db_tablespace
0.27 /testbed/django/db/models/fields/__init__.py(160):         self.auto_created = auto_created
0.27 /testbed/django/db/models/fields/__init__.py(163):         if auto_created:
0.27 /testbed/django/db/models/fields/__init__.py(167):             self.creation_counter = Field.creation_counter
0.27 /testbed/django/db/models/fields/__init__.py(168):             Field.creation_counter += 1
0.27 /testbed/django/db/models/fields/__init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.27 /testbed/django/db/models/fields/__init__.py(172):         messages = {}
0.27 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.27 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.27 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.27 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.27 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.27 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.27 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.27 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.27 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.27 /testbed/django/db/models/fields/__init__.py(175):         messages.update(error_messages or {})
0.27 /testbed/django/db/models/fields/__init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.27 /testbed/django/db/models/fields/__init__.py(177):         self.error_messages = messages
0.27 /testbed/django/db/models/fields/__init__.py(139):         self.name = name
0.27 /testbed/django/db/models/fields/__init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.27 /testbed/django/db/models/fields/__init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.27 /testbed/django/db/models/fields/__init__.py(142):         self.primary_key = primary_key
0.27 /testbed/django/db/models/fields/__init__.py(143):         self.max_length, self._unique = max_length, unique
0.27 /testbed/django/db/models/fields/__init__.py(144):         self.blank, self.null = blank, null
0.27 /testbed/django/db/models/fields/__init__.py(145):         self.remote_field = rel
0.27 /testbed/django/db/models/fields/__init__.py(146):         self.is_relation = self.remote_field is not None
0.27 /testbed/django/db/models/fields/__init__.py(147):         self.default = default
0.27 /testbed/django/db/models/fields/__init__.py(148):         self.editable = editable
0.27 /testbed/django/db/models/fields/__init__.py(149):         self.serialize = serialize
0.27 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_date = unique_for_date
0.27 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_month = unique_for_month
0.27 /testbed/django/db/models/fields/__init__.py(152):         self.unique_for_year = unique_for_year
0.27 /testbed/django/db/models/fields/__init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.27 /testbed/django/db/models/fields/__init__.py(155):         self.choices = choices
0.27 /testbed/django/db/models/fields/__init__.py(156):         self.help_text = help_text
0.27 /testbed/django/db/models/fields/__init__.py(157):         self.db_index = db_index
0.27 /testbed/django/db/models/fields/__init__.py(158):         self.db_column = db_column
0.27 /testbed/django/db/models/fields/__init__.py(159):         self._db_tablespace = db_tablespace
0.27 /testbed/django/db/models/fields/__init__.py(160):         self.auto_created = auto_created
0.27 /testbed/django/db/models/fields/__init__.py(163):         if auto_created:
0.27 /testbed/django/db/models/fields/__init__.py(167):             self.creation_counter = Field.creation_counter
0.27 /testbed/django/db/models/fields/__init__.py(168):             Field.creation_counter += 1
0.27 /testbed/django/db/models/fields/__init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.27 /testbed/django/db/models/fields/__init__.py(172):         messages = {}
0.27 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.27 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.27 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.27 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.27 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.27 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.27 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.27 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.27 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.27 /testbed/django/db/models/fields/__init__.py(175):         messages.update(error_messages or {})
0.27 /testbed/django/db/models/fields/__init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.27 /testbed/django/db/models/fields/__init__.py(177):         self.error_messages = messages
0.27 /testbed/django/db/models/fields/__init__.py(139):         self.name = name
0.27 /testbed/django/db/models/fields/__init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.27 /testbed/django/db/models/fields/__init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.27 /testbed/django/db/models/fields/__init__.py(142):         self.primary_key = primary_key
0.27 /testbed/django/db/models/fields/__init__.py(143):         self.max_length, self._unique = max_length, unique
0.27 /testbed/django/db/models/fields/__init__.py(144):         self.blank, self.null = blank, null
0.27 /testbed/django/db/models/fields/__init__.py(145):         self.remote_field = rel
0.27 /testbed/django/db/models/fields/__init__.py(146):         self.is_relation = self.remote_field is not None
0.27 /testbed/django/db/models/fields/__init__.py(147):         self.default = default
0.27 /testbed/django/db/models/fields/__init__.py(148):         self.editable = editable
0.27 /testbed/django/db/models/fields/__init__.py(149):         self.serialize = serialize
0.27 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_date = unique_for_date
0.27 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_month = unique_for_month
0.27 /testbed/django/db/models/fields/__init__.py(152):         self.unique_for_year = unique_for_year
0.27 /testbed/django/db/models/fields/__init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.27 /testbed/django/db/models/fields/__init__.py(155):         self.choices = choices
0.27 /testbed/django/db/models/fields/__init__.py(156):         self.help_text = help_text
0.27 /testbed/django/db/models/fields/__init__.py(157):         self.db_index = db_index
0.27 /testbed/django/db/models/fields/__init__.py(158):         self.db_column = db_column
0.27 /testbed/django/db/models/fields/__init__.py(159):         self._db_tablespace = db_tablespace
0.27 /testbed/django/db/models/fields/__init__.py(160):         self.auto_created = auto_created
0.27 /testbed/django/db/models/fields/__init__.py(163):         if auto_created:
0.27 /testbed/django/db/models/fields/__init__.py(167):             self.creation_counter = Field.creation_counter
0.27 /testbed/django/db/models/fields/__init__.py(168):             Field.creation_counter += 1
0.27 /testbed/django/db/models/fields/__init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.27 /testbed/django/db/models/fields/__init__.py(172):         messages = {}
0.27 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.27 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.27 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.27 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.27 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.27 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.27 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.27 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.27 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.27 /testbed/django/db/models/fields/__init__.py(175):         messages.update(error_messages or {})
0.27 /testbed/django/db/models/fields/__init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.27 /testbed/django/db/models/fields/__init__.py(177):         self.error_messages = messages
0.27 /testbed/django/db/models/fields/__init__.py(139):         self.name = name
0.27 /testbed/django/db/models/fields/__init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.27 /testbed/django/db/models/fields/__init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.27 /testbed/django/db/models/fields/__init__.py(142):         self.primary_key = primary_key
0.27 /testbed/django/db/models/fields/__init__.py(143):         self.max_length, self._unique = max_length, unique
0.27 /testbed/django/db/models/fields/__init__.py(144):         self.blank, self.null = blank, null
0.27 /testbed/django/db/models/fields/__init__.py(145):         self.remote_field = rel
0.27 /testbed/django/db/models/fields/__init__.py(146):         self.is_relation = self.remote_field is not None
0.27 /testbed/django/db/models/fields/__init__.py(147):         self.default = default
0.27 /testbed/django/db/models/fields/__init__.py(148):         self.editable = editable
0.27 /testbed/django/db/models/fields/__init__.py(149):         self.serialize = serialize
0.27 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_date = unique_for_date
0.27 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_month = unique_for_month
0.27 /testbed/django/db/models/fields/__init__.py(152):         self.unique_for_year = unique_for_year
0.27 /testbed/django/db/models/fields/__init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.27 /testbed/django/db/models/fields/__init__.py(155):         self.choices = choices
0.27 /testbed/django/db/models/fields/__init__.py(156):         self.help_text = help_text
0.27 /testbed/django/db/models/fields/__init__.py(157):         self.db_index = db_index
0.27 /testbed/django/db/models/fields/__init__.py(158):         self.db_column = db_column
0.27 /testbed/django/db/models/fields/__init__.py(159):         self._db_tablespace = db_tablespace
0.27 /testbed/django/db/models/fields/__init__.py(160):         self.auto_created = auto_created
0.27 /testbed/django/db/models/fields/__init__.py(163):         if auto_created:
0.27 /testbed/django/db/models/fields/__init__.py(167):             self.creation_counter = Field.creation_counter
0.27 /testbed/django/db/models/fields/__init__.py(168):             Field.creation_counter += 1
0.27 /testbed/django/db/models/fields/__init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.27 /testbed/django/db/models/fields/__init__.py(172):         messages = {}
0.27 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.27 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.27 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.27 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.27 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.27 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.27 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.27 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.27 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.27 /testbed/django/db/models/fields/__init__.py(175):         messages.update(error_messages or {})
0.27 /testbed/django/db/models/fields/__init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.27 /testbed/django/db/models/fields/__init__.py(177):         self.error_messages = messages
Testing against Django installed in '/testbed/django'
0.51 /testbed/django/db/models/fields/__init__.py(1011):         super().__init__(*args, **kwargs)
0.51 /testbed/django/db/models/fields/__init__.py(139):         self.name = name
0.51 /testbed/django/db/models/fields/__init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.51 /testbed/django/db/models/fields/__init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.51 /testbed/django/db/models/fields/__init__.py(142):         self.primary_key = primary_key
0.51 /testbed/django/db/models/fields/__init__.py(143):         self.max_length, self._unique = max_length, unique
0.51 /testbed/django/db/models/fields/__init__.py(144):         self.blank, self.null = blank, null
0.51 /testbed/django/db/models/fields/__init__.py(145):         self.remote_field = rel
0.51 /testbed/django/db/models/fields/__init__.py(146):         self.is_relation = self.remote_field is not None
0.51 /testbed/django/db/models/fields/__init__.py(147):         self.default = default
0.51 /testbed/django/db/models/fields/__init__.py(148):         self.editable = editable
0.51 /testbed/django/db/models/fields/__init__.py(149):         self.serialize = serialize
0.51 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_date = unique_for_date
0.51 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_month = unique_for_month
0.51 /testbed/django/db/models/fields/__init__.py(152):         self.unique_for_year = unique_for_year
0.51 /testbed/django/db/models/fields/__init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.51 /testbed/django/db/models/fields/__init__.py(155):         self.choices = choices
0.51 /testbed/django/db/models/fields/__init__.py(156):         self.help_text = help_text
0.51 /testbed/django/db/models/fields/__init__.py(157):         self.db_index = db_index
0.51 /testbed/django/db/models/fields/__init__.py(158):         self.db_column = db_column
0.51 /testbed/django/db/models/fields/__init__.py(159):         self._db_tablespace = db_tablespace
0.51 /testbed/django/db/models/fields/__init__.py(160):         self.auto_created = auto_created
0.51 /testbed/django/db/models/fields/__init__.py(163):         if auto_created:
0.51 /testbed/django/db/models/fields/__init__.py(167):             self.creation_counter = Field.creation_counter
0.51 /testbed/django/db/models/fields/__init__.py(168):             Field.creation_counter += 1
0.51 /testbed/django/db/models/fields/__init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.51 /testbed/django/db/models/fields/__init__.py(172):         messages = {}
0.51 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.51 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.51 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.51 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.51 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.51 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.51 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.51 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.51 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.51 /testbed/django/db/models/fields/__init__.py(175):         messages.update(error_messages or {})
0.51 /testbed/django/db/models/fields/__init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.51 /testbed/django/db/models/fields/__init__.py(177):         self.error_messages = messages
0.51 /testbed/django/db/models/fields/__init__.py(1012):         self.db_collation = db_collation
0.51 /testbed/django/db/models/fields/__init__.py(1013):         if self.max_length is not None:
0.51 /testbed/django/db/models/fields/__init__.py(1014):             self.validators.append(validators.MaxLengthValidator(self.max_length))
0.51 /testbed/django/db/models/fields/__init__.py(615):         return [*self.default_validators, *self._validators]
0.51 /testbed/django/db/models/fields/__init__.py(1011):         super().__init__(*args, **kwargs)
0.51 /testbed/django/db/models/fields/__init__.py(139):         self.name = name
0.51 /testbed/django/db/models/fields/__init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.51 /testbed/django/db/models/fields/__init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.51 /testbed/django/db/models/fields/__init__.py(142):         self.primary_key = primary_key
0.51 /testbed/django/db/models/fields/__init__.py(143):         self.max_length, self._unique = max_length, unique
0.51 /testbed/django/db/models/fields/__init__.py(144):         self.blank, self.null = blank, null
0.51 /testbed/django/db/models/fields/__init__.py(145):         self.remote_field = rel
0.51 /testbed/django/db/models/fields/__init__.py(146):         self.is_relation = self.remote_field is not None
0.51 /testbed/django/db/models/fields/__init__.py(147):         self.default = default
0.51 /testbed/django/db/models/fields/__init__.py(148):         self.editable = editable
0.51 /testbed/django/db/models/fields/__init__.py(149):         self.serialize = serialize
0.51 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_date = unique_for_date
0.51 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_month = unique_for_month
0.51 /testbed/django/db/models/fields/__init__.py(152):         self.unique_for_year = unique_for_year
0.51 /testbed/django/db/models/fields/__init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.51 /testbed/django/db/models/fields/__init__.py(155):         self.choices = choices
0.51 /testbed/django/db/models/fields/__init__.py(156):         self.help_text = help_text
0.51 /testbed/django/db/models/fields/__init__.py(157):         self.db_index = db_index
0.51 /testbed/django/db/models/fields/__init__.py(158):         self.db_column = db_column
0.51 /testbed/django/db/models/fields/__init__.py(159):         self._db_tablespace = db_tablespace
0.51 /testbed/django/db/models/fields/__init__.py(160):         self.auto_created = auto_created
0.51 /testbed/django/db/models/fields/__init__.py(163):         if auto_created:
0.51 /testbed/django/db/models/fields/__init__.py(167):             self.creation_counter = Field.creation_counter
0.51 /testbed/django/db/models/fields/__init__.py(168):             Field.creation_counter += 1
0.51 /testbed/django/db/models/fields/__init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.51 /testbed/django/db/models/fields/__init__.py(172):         messages = {}
0.51 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.51 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.51 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.51 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.51 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.51 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.51 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.51 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.51 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.51 /testbed/django/db/models/fields/__init__.py(175):         messages.update(error_messages or {})
0.51 /testbed/django/db/models/fields/__init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.51 /testbed/django/db/models/fields/__init__.py(177):         self.error_messages = messages
0.51 /testbed/django/db/models/fields/__init__.py(1012):         self.db_collation = db_collation
0.51 /testbed/django/db/models/fields/__init__.py(1013):         if self.max_length is not None:
0.51 /testbed/django/db/models/fields/__init__.py(1014):             self.validators.append(validators.MaxLengthValidator(self.max_length))
0.51 /testbed/django/db/models/fields/__init__.py(615):         return [*self.default_validators, *self._validators]
0.51 /testbed/django/db/models/fields/__init__.py(782):         self.set_attributes_from_name(name)
0.51 /testbed/django/db/models/fields/__init__.py(769):         self.name = self.name or name
0.51 /testbed/django/db/models/fields/__init__.py(770):         self.attname, self.column = self.get_attname_column()
0.51 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.51 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.51 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.51 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.51 /testbed/django/db/models/fields/__init__.py(771):         self.concrete = self.column is not None
0.51 /testbed/django/db/models/fields/__init__.py(772):         if self.verbose_name is None and self.name:
0.51 /testbed/django/db/models/fields/__init__.py(773):             self.verbose_name = self.name.replace('_', ' ')
0.51 /testbed/django/db/models/fields/__init__.py(783):         self.model = cls
0.51 /testbed/django/db/models/fields/__init__.py(784):         cls._meta.add_field(self, private=private_only)
0.51 /testbed/django/db/models/fields/__init__.py(785):         if self.column:
0.51 /testbed/django/db/models/fields/__init__.py(786):             setattr(cls, self.attname, self.descriptor_class(self))
0.51 /testbed/django/db/models/fields/__init__.py(787):         if self.choices is not None:
0.51 /testbed/django/db/models/fields/__init__.py(782):         self.set_attributes_from_name(name)
0.51 /testbed/django/db/models/fields/__init__.py(769):         self.name = self.name or name
0.51 /testbed/django/db/models/fields/__init__.py(770):         self.attname, self.column = self.get_attname_column()
0.51 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.51 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.51 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.51 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.51 /testbed/django/db/models/fields/__init__.py(771):         self.concrete = self.column is not None
0.51 /testbed/django/db/models/fields/__init__.py(772):         if self.verbose_name is None and self.name:
0.51 /testbed/django/db/models/fields/__init__.py(783):         self.model = cls
0.51 /testbed/django/db/models/fields/__init__.py(784):         cls._meta.add_field(self, private=private_only)
0.51 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.51 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.51 /testbed/django/db/models/fields/__init__.py(529):             if (
0.51 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.51 /testbed/django/db/models/fields/__init__.py(785):         if self.column:
0.51 /testbed/django/db/models/fields/__init__.py(786):             setattr(cls, self.attname, self.descriptor_class(self))
0.51 /testbed/django/db/models/fields/__init__.py(787):         if self.choices is not None:
0.51 /testbed/django/db/models/fields/__init__.py(2513):         return issubclass(subclass, self._subclasses) or super().__subclasscheck__(subclass)
0.51 /testbed/django/db/models/fields/__init__.py(2507):         return (BigAutoField, SmallAutoField)
0.51 /testbed/django/db/models/fields/__init__.py(2439):         kwargs['blank'] = True
0.51 /testbed/django/db/models/fields/__init__.py(2440):         super().__init__(*args, **kwargs)
0.51 /testbed/django/db/models/fields/__init__.py(139):         self.name = name
0.51 /testbed/django/db/models/fields/__init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.51 /testbed/django/db/models/fields/__init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.51 /testbed/django/db/models/fields/__init__.py(142):         self.primary_key = primary_key
0.51 /testbed/django/db/models/fields/__init__.py(143):         self.max_length, self._unique = max_length, unique
0.51 /testbed/django/db/models/fields/__init__.py(144):         self.blank, self.null = blank, null
0.51 /testbed/django/db/models/fields/__init__.py(145):         self.remote_field = rel
0.51 /testbed/django/db/models/fields/__init__.py(146):         self.is_relation = self.remote_field is not None
0.51 /testbed/django/db/models/fields/__init__.py(147):         self.default = default
0.51 /testbed/django/db/models/fields/__init__.py(148):         self.editable = editable
0.51 /testbed/django/db/models/fields/__init__.py(149):         self.serialize = serialize
0.51 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_date = unique_for_date
0.51 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_month = unique_for_month
0.51 /testbed/django/db/models/fields/__init__.py(152):         self.unique_for_year = unique_for_year
0.51 /testbed/django/db/models/fields/__init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.51 /testbed/django/db/models/fields/__init__.py(155):         self.choices = choices
0.51 /testbed/django/db/models/fields/__init__.py(156):         self.help_text = help_text
0.51 /testbed/django/db/models/fields/__init__.py(157):         self.db_index = db_index
0.51 /testbed/django/db/models/fields/__init__.py(158):         self.db_column = db_column
0.51 /testbed/django/db/models/fields/__init__.py(159):         self._db_tablespace = db_tablespace
0.51 /testbed/django/db/models/fields/__init__.py(160):         self.auto_created = auto_created
0.51 /testbed/django/db/models/fields/__init__.py(163):         if auto_created:
0.51 /testbed/django/db/models/fields/__init__.py(164):             self.creation_counter = Field.auto_creation_counter
0.51 /testbed/django/db/models/fields/__init__.py(165):             Field.auto_creation_counter -= 1
0.51 /testbed/django/db/models/fields/__init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.51 /testbed/django/db/models/fields/__init__.py(172):         messages = {}
0.51 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.51 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.51 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.51 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.51 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.51 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.51 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.51 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.51 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.51 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.51 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.51 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.51 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.51 /testbed/django/db/models/fields/__init__.py(175):         messages.update(error_messages or {})
0.51 /testbed/django/db/models/fields/__init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.51 /testbed/django/db/models/fields/__init__.py(177):         self.error_messages = messages
0.51 /testbed/django/db/models/fields/__init__.py(2476):         if cls._meta.auto_field:
0.51 /testbed/django/db/models/fields/__init__.py(2481):         super().contribute_to_class(cls, name, **kwargs)
0.51 /testbed/django/db/models/fields/__init__.py(782):         self.set_attributes_from_name(name)
0.51 /testbed/django/db/models/fields/__init__.py(769):         self.name = self.name or name
0.51 /testbed/django/db/models/fields/__init__.py(770):         self.attname, self.column = self.get_attname_column()
0.51 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.51 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.51 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.51 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.51 /testbed/django/db/models/fields/__init__.py(771):         self.concrete = self.column is not None
0.51 /testbed/django/db/models/fields/__init__.py(772):         if self.verbose_name is None and self.name:
0.51 /testbed/django/db/models/fields/__init__.py(783):         self.model = cls
0.51 /testbed/django/db/models/fields/__init__.py(784):         cls._meta.add_field(self, private=private_only)
0.51 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.51 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.51 /testbed/django/db/models/fields/__init__.py(529):             if (
0.51 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.51 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.51 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.51 /testbed/django/db/models/fields/__init__.py(529):             if (
0.51 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.51 /testbed/django/db/models/fields/__init__.py(785):         if self.column:
0.51 /testbed/django/db/models/fields/__init__.py(786):             setattr(cls, self.attname, self.descriptor_class(self))
0.51 /testbed/django/db/models/fields/__init__.py(787):         if self.choices is not None:
0.51 /testbed/django/db/models/fields/__init__.py(2482):         cls._meta.auto_field = self
0.52 /testbed/django/db/models/fields/__init__.py(1011):         super().__init__(*args, **kwargs)
0.52 /testbed/django/db/models/fields/__init__.py(139):         self.name = name
0.52 /testbed/django/db/models/fields/__init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.52 /testbed/django/db/models/fields/__init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.52 /testbed/django/db/models/fields/__init__.py(142):         self.primary_key = primary_key
0.52 /testbed/django/db/models/fields/__init__.py(143):         self.max_length, self._unique = max_length, unique
0.52 /testbed/django/db/models/fields/__init__.py(144):         self.blank, self.null = blank, null
0.52 /testbed/django/db/models/fields/__init__.py(145):         self.remote_field = rel
0.52 /testbed/django/db/models/fields/__init__.py(146):         self.is_relation = self.remote_field is not None
0.52 /testbed/django/db/models/fields/__init__.py(147):         self.default = default
0.52 /testbed/django/db/models/fields/__init__.py(148):         self.editable = editable
0.52 /testbed/django/db/models/fields/__init__.py(149):         self.serialize = serialize
0.52 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_date = unique_for_date
0.52 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_month = unique_for_month
0.52 /testbed/django/db/models/fields/__init__.py(152):         self.unique_for_year = unique_for_year
0.52 /testbed/django/db/models/fields/__init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.52 /testbed/django/db/models/fields/__init__.py(155):         self.choices = choices
0.52 /testbed/django/db/models/fields/__init__.py(156):         self.help_text = help_text
0.52 /testbed/django/db/models/fields/__init__.py(157):         self.db_index = db_index
0.52 /testbed/django/db/models/fields/__init__.py(158):         self.db_column = db_column
0.52 /testbed/django/db/models/fields/__init__.py(159):         self._db_tablespace = db_tablespace
0.52 /testbed/django/db/models/fields/__init__.py(160):         self.auto_created = auto_created
0.52 /testbed/django/db/models/fields/__init__.py(163):         if auto_created:
0.52 /testbed/django/db/models/fields/__init__.py(167):             self.creation_counter = Field.creation_counter
0.52 /testbed/django/db/models/fields/__init__.py(168):             Field.creation_counter += 1
0.52 /testbed/django/db/models/fields/__init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.52 /testbed/django/db/models/fields/__init__.py(172):         messages = {}
0.52 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.52 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.52 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.52 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.52 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.52 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.52 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.52 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.52 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.52 /testbed/django/db/models/fields/__init__.py(175):         messages.update(error_messages or {})
0.52 /testbed/django/db/models/fields/__init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.52 /testbed/django/db/models/fields/__init__.py(177):         self.error_messages = messages
0.52 /testbed/django/db/models/fields/__init__.py(1012):         self.db_collation = db_collation
0.52 /testbed/django/db/models/fields/__init__.py(1013):         if self.max_length is not None:
0.52 /testbed/django/db/models/fields/__init__.py(1014):             self.validators.append(validators.MaxLengthValidator(self.max_length))
0.52 /testbed/django/db/models/fields/__init__.py(615):         return [*self.default_validators, *self._validators]
0.52 /testbed/django/db/models/fields/__init__.py(1207):         self.auto_now, self.auto_now_add = auto_now, auto_now_add
0.52 /testbed/django/db/models/fields/__init__.py(1208):         if auto_now or auto_now_add:
0.52 /testbed/django/db/models/fields/__init__.py(1211):         super().__init__(verbose_name, name, **kwargs)
0.52 /testbed/django/db/models/fields/__init__.py(139):         self.name = name
0.52 /testbed/django/db/models/fields/__init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.52 /testbed/django/db/models/fields/__init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.52 /testbed/django/db/models/fields/__init__.py(142):         self.primary_key = primary_key
0.52 /testbed/django/db/models/fields/__init__.py(143):         self.max_length, self._unique = max_length, unique
0.52 /testbed/django/db/models/fields/__init__.py(144):         self.blank, self.null = blank, null
0.52 /testbed/django/db/models/fields/__init__.py(145):         self.remote_field = rel
0.52 /testbed/django/db/models/fields/__init__.py(146):         self.is_relation = self.remote_field is not None
0.52 /testbed/django/db/models/fields/__init__.py(147):         self.default = default
0.52 /testbed/django/db/models/fields/__init__.py(148):         self.editable = editable
0.52 /testbed/django/db/models/fields/__init__.py(149):         self.serialize = serialize
0.52 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_date = unique_for_date
0.52 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_month = unique_for_month
0.52 /testbed/django/db/models/fields/__init__.py(152):         self.unique_for_year = unique_for_year
0.52 /testbed/django/db/models/fields/__init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.52 /testbed/django/db/models/fields/__init__.py(155):         self.choices = choices
0.52 /testbed/django/db/models/fields/__init__.py(156):         self.help_text = help_text
0.52 /testbed/django/db/models/fields/__init__.py(157):         self.db_index = db_index
0.52 /testbed/django/db/models/fields/__init__.py(158):         self.db_column = db_column
0.52 /testbed/django/db/models/fields/__init__.py(159):         self._db_tablespace = db_tablespace
0.52 /testbed/django/db/models/fields/__init__.py(160):         self.auto_created = auto_created
0.52 /testbed/django/db/models/fields/__init__.py(163):         if auto_created:
0.52 /testbed/django/db/models/fields/__init__.py(167):             self.creation_counter = Field.creation_counter
0.52 /testbed/django/db/models/fields/__init__.py(168):             Field.creation_counter += 1
0.52 /testbed/django/db/models/fields/__init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.52 /testbed/django/db/models/fields/__init__.py(172):         messages = {}
0.52 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.52 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.52 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.52 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.52 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.52 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.52 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.52 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.52 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.52 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.52 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.52 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.52 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.52 /testbed/django/db/models/fields/__init__.py(175):         messages.update(error_messages or {})
0.52 /testbed/django/db/models/fields/__init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.52 /testbed/django/db/models/fields/__init__.py(177):         self.error_messages = messages
0.55 /testbed/django/db/models/fields/__init__.py(782):         self.set_attributes_from_name(name)
0.55 /testbed/django/db/models/fields/__init__.py(769):         self.name = self.name or name
0.55 /testbed/django/db/models/fields/__init__.py(770):         self.attname, self.column = self.get_attname_column()
0.55 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.55 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.55 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.55 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.55 /testbed/django/db/models/fields/__init__.py(771):         self.concrete = self.column is not None
0.55 /testbed/django/db/models/fields/__init__.py(772):         if self.verbose_name is None and self.name:
0.55 /testbed/django/db/models/fields/__init__.py(783):         self.model = cls
0.55 /testbed/django/db/models/fields/__init__.py(784):         cls._meta.add_field(self, private=private_only)
0.55 /testbed/django/db/models/fields/__init__.py(785):         if self.column:
0.55 /testbed/django/db/models/fields/__init__.py(786):             setattr(cls, self.attname, self.descriptor_class(self))
0.55 /testbed/django/db/models/fields/__init__.py(787):         if self.choices is not None:
0.55 /testbed/django/db/models/fields/__init__.py(1285):         super().contribute_to_class(cls, name, **kwargs)
0.55 /testbed/django/db/models/fields/__init__.py(782):         self.set_attributes_from_name(name)
0.55 /testbed/django/db/models/fields/__init__.py(769):         self.name = self.name or name
0.55 /testbed/django/db/models/fields/__init__.py(770):         self.attname, self.column = self.get_attname_column()
0.55 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.55 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.55 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.55 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.55 /testbed/django/db/models/fields/__init__.py(771):         self.concrete = self.column is not None
0.55 /testbed/django/db/models/fields/__init__.py(772):         if self.verbose_name is None and self.name:
0.55 /testbed/django/db/models/fields/__init__.py(783):         self.model = cls
0.55 /testbed/django/db/models/fields/__init__.py(784):         cls._meta.add_field(self, private=private_only)
0.55 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.55 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.55 /testbed/django/db/models/fields/__init__.py(529):             if (
0.55 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.55 /testbed/django/db/models/fields/__init__.py(785):         if self.column:
0.55 /testbed/django/db/models/fields/__init__.py(786):             setattr(cls, self.attname, self.descriptor_class(self))
0.55 /testbed/django/db/models/fields/__init__.py(787):         if self.choices is not None:
0.55 /testbed/django/db/models/fields/__init__.py(1286):         if not self.null:
0.55 /testbed/django/db/models/fields/__init__.py(1011):         super().__init__(*args, **kwargs)
0.55 /testbed/django/db/models/fields/__init__.py(139):         self.name = name
0.55 /testbed/django/db/models/fields/__init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.55 /testbed/django/db/models/fields/__init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.55 /testbed/django/db/models/fields/__init__.py(142):         self.primary_key = primary_key
0.55 /testbed/django/db/models/fields/__init__.py(143):         self.max_length, self._unique = max_length, unique
0.55 /testbed/django/db/models/fields/__init__.py(144):         self.blank, self.null = blank, null
0.55 /testbed/django/db/models/fields/__init__.py(145):         self.remote_field = rel
0.55 /testbed/django/db/models/fields/__init__.py(146):         self.is_relation = self.remote_field is not None
0.55 /testbed/django/db/models/fields/__init__.py(147):         self.default = default
0.55 /testbed/django/db/models/fields/__init__.py(148):         self.editable = editable
0.55 /testbed/django/db/models/fields/__init__.py(149):         self.serialize = serialize
0.55 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_date = unique_for_date
0.55 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_month = unique_for_month
0.55 /testbed/django/db/models/fields/__init__.py(152):         self.unique_for_year = unique_for_year
0.55 /testbed/django/db/models/fields/__init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.55 /testbed/django/db/models/fields/__init__.py(155):         self.choices = choices
0.55 /testbed/django/db/models/fields/__init__.py(156):         self.help_text = help_text
0.55 /testbed/django/db/models/fields/__init__.py(157):         self.db_index = db_index
0.55 /testbed/django/db/models/fields/__init__.py(158):         self.db_column = db_column
0.55 /testbed/django/db/models/fields/__init__.py(159):         self._db_tablespace = db_tablespace
0.55 /testbed/django/db/models/fields/__init__.py(160):         self.auto_created = auto_created
0.55 /testbed/django/db/models/fields/__init__.py(163):         if auto_created:
0.55 /testbed/django/db/models/fields/__init__.py(167):             self.creation_counter = Field.creation_counter
0.55 /testbed/django/db/models/fields/__init__.py(168):             Field.creation_counter += 1
0.55 /testbed/django/db/models/fields/__init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.55 /testbed/django/db/models/fields/__init__.py(172):         messages = {}
0.55 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(175):         messages.update(error_messages or {})
0.55 /testbed/django/db/models/fields/__init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.55 /testbed/django/db/models/fields/__init__.py(177):         self.error_messages = messages
0.55 /testbed/django/db/models/fields/__init__.py(1012):         self.db_collation = db_collation
0.55 /testbed/django/db/models/fields/__init__.py(1013):         if self.max_length is not None:
0.55 /testbed/django/db/models/fields/__init__.py(1014):             self.validators.append(validators.MaxLengthValidator(self.max_length))
0.55 /testbed/django/db/models/fields/__init__.py(615):         return [*self.default_validators, *self._validators]
0.55 /testbed/django/db/models/fields/__init__.py(139):         self.name = name
0.55 /testbed/django/db/models/fields/__init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.55 /testbed/django/db/models/fields/__init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.55 /testbed/django/db/models/fields/__init__.py(142):         self.primary_key = primary_key
0.55 /testbed/django/db/models/fields/__init__.py(143):         self.max_length, self._unique = max_length, unique
0.55 /testbed/django/db/models/fields/__init__.py(144):         self.blank, self.null = blank, null
0.55 /testbed/django/db/models/fields/__init__.py(145):         self.remote_field = rel
0.55 /testbed/django/db/models/fields/__init__.py(146):         self.is_relation = self.remote_field is not None
0.55 /testbed/django/db/models/fields/__init__.py(147):         self.default = default
0.55 /testbed/django/db/models/fields/__init__.py(148):         self.editable = editable
0.55 /testbed/django/db/models/fields/__init__.py(149):         self.serialize = serialize
0.55 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_date = unique_for_date
0.55 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_month = unique_for_month
0.55 /testbed/django/db/models/fields/__init__.py(152):         self.unique_for_year = unique_for_year
0.55 /testbed/django/db/models/fields/__init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.55 /testbed/django/db/models/fields/__init__.py(155):         self.choices = choices
0.55 /testbed/django/db/models/fields/__init__.py(156):         self.help_text = help_text
0.55 /testbed/django/db/models/fields/__init__.py(157):         self.db_index = db_index
0.55 /testbed/django/db/models/fields/__init__.py(158):         self.db_column = db_column
0.55 /testbed/django/db/models/fields/__init__.py(159):         self._db_tablespace = db_tablespace
0.55 /testbed/django/db/models/fields/__init__.py(160):         self.auto_created = auto_created
0.55 /testbed/django/db/models/fields/__init__.py(163):         if auto_created:
0.55 /testbed/django/db/models/fields/__init__.py(167):             self.creation_counter = Field.creation_counter
0.55 /testbed/django/db/models/fields/__init__.py(168):             Field.creation_counter += 1
0.55 /testbed/django/db/models/fields/__init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.55 /testbed/django/db/models/fields/__init__.py(172):         messages = {}
0.55 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(175):         messages.update(error_messages or {})
0.55 /testbed/django/db/models/fields/__init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.55 /testbed/django/db/models/fields/__init__.py(177):         self.error_messages = messages
0.55 /testbed/django/db/models/fields/__init__.py(1011):         super().__init__(*args, **kwargs)
0.55 /testbed/django/db/models/fields/__init__.py(139):         self.name = name
0.55 /testbed/django/db/models/fields/__init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.55 /testbed/django/db/models/fields/__init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.55 /testbed/django/db/models/fields/__init__.py(142):         self.primary_key = primary_key
0.55 /testbed/django/db/models/fields/__init__.py(143):         self.max_length, self._unique = max_length, unique
0.55 /testbed/django/db/models/fields/__init__.py(144):         self.blank, self.null = blank, null
0.55 /testbed/django/db/models/fields/__init__.py(145):         self.remote_field = rel
0.55 /testbed/django/db/models/fields/__init__.py(146):         self.is_relation = self.remote_field is not None
0.55 /testbed/django/db/models/fields/__init__.py(147):         self.default = default
0.55 /testbed/django/db/models/fields/__init__.py(148):         self.editable = editable
0.55 /testbed/django/db/models/fields/__init__.py(149):         self.serialize = serialize
0.55 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_date = unique_for_date
0.55 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_month = unique_for_month
0.55 /testbed/django/db/models/fields/__init__.py(152):         self.unique_for_year = unique_for_year
0.55 /testbed/django/db/models/fields/__init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.55 /testbed/django/db/models/fields/__init__.py(155):         self.choices = choices
0.55 /testbed/django/db/models/fields/__init__.py(156):         self.help_text = help_text
0.55 /testbed/django/db/models/fields/__init__.py(157):         self.db_index = db_index
0.55 /testbed/django/db/models/fields/__init__.py(158):         self.db_column = db_column
0.55 /testbed/django/db/models/fields/__init__.py(159):         self._db_tablespace = db_tablespace
0.55 /testbed/django/db/models/fields/__init__.py(160):         self.auto_created = auto_created
0.55 /testbed/django/db/models/fields/__init__.py(163):         if auto_created:
0.56 /testbed/django/db/models/fields/__init__.py(167):             self.creation_counter = Field.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(168):             Field.creation_counter += 1
0.56 /testbed/django/db/models/fields/__init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.56 /testbed/django/db/models/fields/__init__.py(172):         messages = {}
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(175):         messages.update(error_messages or {})
0.56 /testbed/django/db/models/fields/__init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.56 /testbed/django/db/models/fields/__init__.py(177):         self.error_messages = messages
0.56 /testbed/django/db/models/fields/__init__.py(1012):         self.db_collation = db_collation
0.56 /testbed/django/db/models/fields/__init__.py(1013):         if self.max_length is not None:
0.56 /testbed/django/db/models/fields/__init__.py(1014):             self.validators.append(validators.MaxLengthValidator(self.max_length))
0.56 /testbed/django/db/models/fields/__init__.py(615):         return [*self.default_validators, *self._validators]
0.56 /testbed/django/db/models/fields/__init__.py(782):         self.set_attributes_from_name(name)
0.56 /testbed/django/db/models/fields/__init__.py(769):         self.name = self.name or name
0.56 /testbed/django/db/models/fields/__init__.py(770):         self.attname, self.column = self.get_attname_column()
0.56 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.56 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.56 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.56 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.56 /testbed/django/db/models/fields/__init__.py(771):         self.concrete = self.column is not None
0.56 /testbed/django/db/models/fields/__init__.py(772):         if self.verbose_name is None and self.name:
0.56 /testbed/django/db/models/fields/__init__.py(783):         self.model = cls
0.56 /testbed/django/db/models/fields/__init__.py(784):         cls._meta.add_field(self, private=private_only)
0.56 /testbed/django/db/models/fields/__init__.py(785):         if self.column:
0.56 /testbed/django/db/models/fields/__init__.py(786):             setattr(cls, self.attname, self.descriptor_class(self))
0.56 /testbed/django/db/models/fields/__init__.py(787):         if self.choices is not None:
0.56 /testbed/django/db/models/fields/__init__.py(782):         self.set_attributes_from_name(name)
0.56 /testbed/django/db/models/fields/__init__.py(769):         self.name = self.name or name
0.56 /testbed/django/db/models/fields/__init__.py(770):         self.attname, self.column = self.get_attname_column()
0.56 /testbed/django/db/models/fields/__init__.py(771):         self.concrete = self.column is not None
0.56 /testbed/django/db/models/fields/__init__.py(772):         if self.verbose_name is None and self.name:
0.56 /testbed/django/db/models/fields/__init__.py(783):         self.model = cls
0.56 /testbed/django/db/models/fields/__init__.py(784):         cls._meta.add_field(self, private=private_only)
0.56 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.56 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.56 /testbed/django/db/models/fields/__init__.py(529):             if (
0.56 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(785):         if self.column:
0.56 /testbed/django/db/models/fields/__init__.py(786):             setattr(cls, self.attname, self.descriptor_class(self))
0.56 /testbed/django/db/models/fields/__init__.py(787):         if self.choices is not None:
0.56 /testbed/django/db/models/fields/__init__.py(782):         self.set_attributes_from_name(name)
0.56 /testbed/django/db/models/fields/__init__.py(769):         self.name = self.name or name
0.56 /testbed/django/db/models/fields/__init__.py(770):         self.attname, self.column = self.get_attname_column()
0.56 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.56 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.56 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.56 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.56 /testbed/django/db/models/fields/__init__.py(771):         self.concrete = self.column is not None
0.56 /testbed/django/db/models/fields/__init__.py(772):         if self.verbose_name is None and self.name:
0.56 /testbed/django/db/models/fields/__init__.py(783):         self.model = cls
0.56 /testbed/django/db/models/fields/__init__.py(784):         cls._meta.add_field(self, private=private_only)
0.56 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.56 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.56 /testbed/django/db/models/fields/__init__.py(529):             if (
0.56 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(785):         if self.column:
0.56 /testbed/django/db/models/fields/__init__.py(786):             setattr(cls, self.attname, self.descriptor_class(self))
0.56 /testbed/django/db/models/fields/__init__.py(787):         if self.choices is not None:
0.56 /testbed/django/db/models/fields/__init__.py(2513):         return issubclass(subclass, self._subclasses) or super().__subclasscheck__(subclass)
0.56 /testbed/django/db/models/fields/__init__.py(2507):         return (BigAutoField, SmallAutoField)
0.56 /testbed/django/db/models/fields/__init__.py(2439):         kwargs['blank'] = True
0.56 /testbed/django/db/models/fields/__init__.py(2440):         super().__init__(*args, **kwargs)
0.56 /testbed/django/db/models/fields/__init__.py(139):         self.name = name
0.56 /testbed/django/db/models/fields/__init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.56 /testbed/django/db/models/fields/__init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.56 /testbed/django/db/models/fields/__init__.py(142):         self.primary_key = primary_key
0.56 /testbed/django/db/models/fields/__init__.py(143):         self.max_length, self._unique = max_length, unique
0.56 /testbed/django/db/models/fields/__init__.py(144):         self.blank, self.null = blank, null
0.56 /testbed/django/db/models/fields/__init__.py(145):         self.remote_field = rel
0.56 /testbed/django/db/models/fields/__init__.py(146):         self.is_relation = self.remote_field is not None
0.56 /testbed/django/db/models/fields/__init__.py(147):         self.default = default
0.56 /testbed/django/db/models/fields/__init__.py(148):         self.editable = editable
0.56 /testbed/django/db/models/fields/__init__.py(149):         self.serialize = serialize
0.56 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_date = unique_for_date
0.56 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_month = unique_for_month
0.56 /testbed/django/db/models/fields/__init__.py(152):         self.unique_for_year = unique_for_year
0.56 /testbed/django/db/models/fields/__init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.56 /testbed/django/db/models/fields/__init__.py(155):         self.choices = choices
0.56 /testbed/django/db/models/fields/__init__.py(156):         self.help_text = help_text
0.56 /testbed/django/db/models/fields/__init__.py(157):         self.db_index = db_index
0.56 /testbed/django/db/models/fields/__init__.py(158):         self.db_column = db_column
0.56 /testbed/django/db/models/fields/__init__.py(159):         self._db_tablespace = db_tablespace
0.56 /testbed/django/db/models/fields/__init__.py(160):         self.auto_created = auto_created
0.56 /testbed/django/db/models/fields/__init__.py(163):         if auto_created:
0.56 /testbed/django/db/models/fields/__init__.py(164):             self.creation_counter = Field.auto_creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(165):             Field.auto_creation_counter -= 1
0.56 /testbed/django/db/models/fields/__init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.56 /testbed/django/db/models/fields/__init__.py(172):         messages = {}
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(175):         messages.update(error_messages or {})
0.56 /testbed/django/db/models/fields/__init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.56 /testbed/django/db/models/fields/__init__.py(177):         self.error_messages = messages
0.56 /testbed/django/db/models/fields/__init__.py(2476):         if cls._meta.auto_field:
0.56 /testbed/django/db/models/fields/__init__.py(2481):         super().contribute_to_class(cls, name, **kwargs)
0.56 /testbed/django/db/models/fields/__init__.py(782):         self.set_attributes_from_name(name)
0.56 /testbed/django/db/models/fields/__init__.py(769):         self.name = self.name or name
0.56 /testbed/django/db/models/fields/__init__.py(770):         self.attname, self.column = self.get_attname_column()
0.56 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.56 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.56 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.56 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.56 /testbed/django/db/models/fields/__init__.py(771):         self.concrete = self.column is not None
0.56 /testbed/django/db/models/fields/__init__.py(772):         if self.verbose_name is None and self.name:
0.56 /testbed/django/db/models/fields/__init__.py(783):         self.model = cls
0.56 /testbed/django/db/models/fields/__init__.py(784):         cls._meta.add_field(self, private=private_only)
0.56 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.56 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.56 /testbed/django/db/models/fields/__init__.py(529):             if (
0.56 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.56 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.56 /testbed/django/db/models/fields/__init__.py(529):             if (
0.56 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(785):         if self.column:
0.56 /testbed/django/db/models/fields/__init__.py(786):             setattr(cls, self.attname, self.descriptor_class(self))
0.56 /testbed/django/db/models/fields/__init__.py(787):         if self.choices is not None:
0.56 /testbed/django/db/models/fields/__init__.py(2482):         cls._meta.auto_field = self
0.56 /testbed/django/db/models/fields/__init__.py(1011):         super().__init__(*args, **kwargs)
0.56 /testbed/django/db/models/fields/__init__.py(139):         self.name = name
0.56 /testbed/django/db/models/fields/__init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.56 /testbed/django/db/models/fields/__init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.56 /testbed/django/db/models/fields/__init__.py(142):         self.primary_key = primary_key
0.56 /testbed/django/db/models/fields/__init__.py(143):         self.max_length, self._unique = max_length, unique
0.56 /testbed/django/db/models/fields/__init__.py(144):         self.blank, self.null = blank, null
0.56 /testbed/django/db/models/fields/__init__.py(145):         self.remote_field = rel
0.56 /testbed/django/db/models/fields/__init__.py(146):         self.is_relation = self.remote_field is not None
0.56 /testbed/django/db/models/fields/__init__.py(147):         self.default = default
0.56 /testbed/django/db/models/fields/__init__.py(148):         self.editable = editable
0.56 /testbed/django/db/models/fields/__init__.py(149):         self.serialize = serialize
0.56 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_date = unique_for_date
0.56 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_month = unique_for_month
0.56 /testbed/django/db/models/fields/__init__.py(152):         self.unique_for_year = unique_for_year
0.56 /testbed/django/db/models/fields/__init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.56 /testbed/django/db/models/fields/__init__.py(155):         self.choices = choices
0.56 /testbed/django/db/models/fields/__init__.py(156):         self.help_text = help_text
0.56 /testbed/django/db/models/fields/__init__.py(157):         self.db_index = db_index
0.56 /testbed/django/db/models/fields/__init__.py(158):         self.db_column = db_column
0.56 /testbed/django/db/models/fields/__init__.py(159):         self._db_tablespace = db_tablespace
0.56 /testbed/django/db/models/fields/__init__.py(160):         self.auto_created = auto_created
0.56 /testbed/django/db/models/fields/__init__.py(163):         if auto_created:
0.56 /testbed/django/db/models/fields/__init__.py(167):             self.creation_counter = Field.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(168):             Field.creation_counter += 1
0.56 /testbed/django/db/models/fields/__init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.56 /testbed/django/db/models/fields/__init__.py(172):         messages = {}
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(175):         messages.update(error_messages or {})
0.56 /testbed/django/db/models/fields/__init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.56 /testbed/django/db/models/fields/__init__.py(177):         self.error_messages = messages
0.56 /testbed/django/db/models/fields/__init__.py(1012):         self.db_collation = db_collation
0.56 /testbed/django/db/models/fields/__init__.py(1013):         if self.max_length is not None:
0.56 /testbed/django/db/models/fields/__init__.py(1014):             self.validators.append(validators.MaxLengthValidator(self.max_length))
0.56 /testbed/django/db/models/fields/__init__.py(615):         return [*self.default_validators, *self._validators]
0.56 /testbed/django/db/models/fields/__init__.py(139):         self.name = name
0.56 /testbed/django/db/models/fields/__init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.56 /testbed/django/db/models/fields/__init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.56 /testbed/django/db/models/fields/__init__.py(142):         self.primary_key = primary_key
0.56 /testbed/django/db/models/fields/__init__.py(143):         self.max_length, self._unique = max_length, unique
0.56 /testbed/django/db/models/fields/__init__.py(144):         self.blank, self.null = blank, null
0.56 /testbed/django/db/models/fields/__init__.py(145):         self.remote_field = rel
0.56 /testbed/django/db/models/fields/__init__.py(146):         self.is_relation = self.remote_field is not None
0.56 /testbed/django/db/models/fields/__init__.py(147):         self.default = default
0.56 /testbed/django/db/models/fields/__init__.py(148):         self.editable = editable
0.56 /testbed/django/db/models/fields/__init__.py(149):         self.serialize = serialize
0.56 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_date = unique_for_date
0.56 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_month = unique_for_month
0.56 /testbed/django/db/models/fields/__init__.py(152):         self.unique_for_year = unique_for_year
0.56 /testbed/django/db/models/fields/__init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.56 /testbed/django/db/models/fields/__init__.py(155):         self.choices = choices
0.56 /testbed/django/db/models/fields/__init__.py(156):         self.help_text = help_text
0.56 /testbed/django/db/models/fields/__init__.py(157):         self.db_index = db_index
0.56 /testbed/django/db/models/fields/__init__.py(158):         self.db_column = db_column
0.56 /testbed/django/db/models/fields/__init__.py(159):         self._db_tablespace = db_tablespace
0.56 /testbed/django/db/models/fields/__init__.py(160):         self.auto_created = auto_created
0.56 /testbed/django/db/models/fields/__init__.py(163):         if auto_created:
0.56 /testbed/django/db/models/fields/__init__.py(167):             self.creation_counter = Field.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(168):             Field.creation_counter += 1
0.56 /testbed/django/db/models/fields/__init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.56 /testbed/django/db/models/fields/__init__.py(172):         messages = {}
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(175):         messages.update(error_messages or {})
0.56 /testbed/django/db/models/fields/__init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.56 /testbed/django/db/models/fields/__init__.py(177):         self.error_messages = messages
0.56 /testbed/django/db/models/fields/__init__.py(782):         self.set_attributes_from_name(name)
0.56 /testbed/django/db/models/fields/__init__.py(769):         self.name = self.name or name
0.56 /testbed/django/db/models/fields/__init__.py(770):         self.attname, self.column = self.get_attname_column()
0.56 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.56 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.56 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.56 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.56 /testbed/django/db/models/fields/__init__.py(771):         self.concrete = self.column is not None
0.56 /testbed/django/db/models/fields/__init__.py(772):         if self.verbose_name is None and self.name:
0.56 /testbed/django/db/models/fields/__init__.py(783):         self.model = cls
0.56 /testbed/django/db/models/fields/__init__.py(784):         cls._meta.add_field(self, private=private_only)
0.56 /testbed/django/db/models/fields/__init__.py(785):         if self.column:
0.56 /testbed/django/db/models/fields/__init__.py(786):             setattr(cls, self.attname, self.descriptor_class(self))
0.56 /testbed/django/db/models/fields/__init__.py(787):         if self.choices is not None:
0.56 /testbed/django/db/models/fields/__init__.py(782):         self.set_attributes_from_name(name)
0.56 /testbed/django/db/models/fields/__init__.py(769):         self.name = self.name or name
0.56 /testbed/django/db/models/fields/__init__.py(770):         self.attname, self.column = self.get_attname_column()
0.56 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.56 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.56 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.56 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.56 /testbed/django/db/models/fields/__init__.py(771):         self.concrete = self.column is not None
0.56 /testbed/django/db/models/fields/__init__.py(772):         if self.verbose_name is None and self.name:
0.56 /testbed/django/db/models/fields/__init__.py(783):         self.model = cls
0.56 /testbed/django/db/models/fields/__init__.py(784):         cls._meta.add_field(self, private=private_only)
0.56 /testbed/django/db/models/fields/__init__.py(785):         if self.column:
0.56 /testbed/django/db/models/fields/__init__.py(786):             setattr(cls, self.attname, self.descriptor_class(self))
0.56 /testbed/django/db/models/fields/__init__.py(787):         if self.choices is not None:
0.56 /testbed/django/db/models/fields/__init__.py(758):         return self._db_tablespace or settings.DEFAULT_INDEX_TABLESPACE
0.56 /testbed/django/db/models/fields/__init__.py(139):         self.name = name
0.56 /testbed/django/db/models/fields/__init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.56 /testbed/django/db/models/fields/__init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.56 /testbed/django/db/models/fields/__init__.py(142):         self.primary_key = primary_key
0.56 /testbed/django/db/models/fields/__init__.py(143):         self.max_length, self._unique = max_length, unique
0.56 /testbed/django/db/models/fields/__init__.py(144):         self.blank, self.null = blank, null
0.56 /testbed/django/db/models/fields/__init__.py(145):         self.remote_field = rel
0.56 /testbed/django/db/models/fields/__init__.py(146):         self.is_relation = self.remote_field is not None
0.56 /testbed/django/db/models/fields/__init__.py(147):         self.default = default
0.56 /testbed/django/db/models/fields/__init__.py(148):         self.editable = editable
0.56 /testbed/django/db/models/fields/__init__.py(149):         self.serialize = serialize
0.56 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_date = unique_for_date
0.56 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_month = unique_for_month
0.56 /testbed/django/db/models/fields/__init__.py(152):         self.unique_for_year = unique_for_year
0.56 /testbed/django/db/models/fields/__init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.56 /testbed/django/db/models/fields/__init__.py(155):         self.choices = choices
0.56 /testbed/django/db/models/fields/__init__.py(156):         self.help_text = help_text
0.56 /testbed/django/db/models/fields/__init__.py(157):         self.db_index = db_index
0.56 /testbed/django/db/models/fields/__init__.py(158):         self.db_column = db_column
0.56 /testbed/django/db/models/fields/__init__.py(159):         self._db_tablespace = db_tablespace
0.56 /testbed/django/db/models/fields/__init__.py(160):         self.auto_created = auto_created
0.56 /testbed/django/db/models/fields/__init__.py(163):         if auto_created:
0.56 /testbed/django/db/models/fields/__init__.py(167):             self.creation_counter = Field.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(168):             Field.creation_counter += 1
0.56 /testbed/django/db/models/fields/__init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.56 /testbed/django/db/models/fields/__init__.py(172):         messages = {}
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(175):         messages.update(error_messages or {})
0.56 /testbed/django/db/models/fields/__init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.56 /testbed/django/db/models/fields/__init__.py(177):         self.error_messages = messages
0.56 /testbed/django/db/models/fields/__init__.py(758):         return self._db_tablespace or settings.DEFAULT_INDEX_TABLESPACE
0.56 /testbed/django/db/models/fields/__init__.py(139):         self.name = name
0.56 /testbed/django/db/models/fields/__init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.56 /testbed/django/db/models/fields/__init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.56 /testbed/django/db/models/fields/__init__.py(142):         self.primary_key = primary_key
0.56 /testbed/django/db/models/fields/__init__.py(143):         self.max_length, self._unique = max_length, unique
0.56 /testbed/django/db/models/fields/__init__.py(144):         self.blank, self.null = blank, null
0.56 /testbed/django/db/models/fields/__init__.py(145):         self.remote_field = rel
0.56 /testbed/django/db/models/fields/__init__.py(146):         self.is_relation = self.remote_field is not None
0.56 /testbed/django/db/models/fields/__init__.py(147):         self.default = default
0.56 /testbed/django/db/models/fields/__init__.py(148):         self.editable = editable
0.56 /testbed/django/db/models/fields/__init__.py(149):         self.serialize = serialize
0.56 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_date = unique_for_date
0.56 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_month = unique_for_month
0.56 /testbed/django/db/models/fields/__init__.py(152):         self.unique_for_year = unique_for_year
0.56 /testbed/django/db/models/fields/__init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.56 /testbed/django/db/models/fields/__init__.py(155):         self.choices = choices
0.56 /testbed/django/db/models/fields/__init__.py(156):         self.help_text = help_text
0.56 /testbed/django/db/models/fields/__init__.py(157):         self.db_index = db_index
0.56 /testbed/django/db/models/fields/__init__.py(158):         self.db_column = db_column
0.56 /testbed/django/db/models/fields/__init__.py(159):         self._db_tablespace = db_tablespace
0.56 /testbed/django/db/models/fields/__init__.py(160):         self.auto_created = auto_created
0.56 /testbed/django/db/models/fields/__init__.py(163):         if auto_created:
0.56 /testbed/django/db/models/fields/__init__.py(167):             self.creation_counter = Field.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(168):             Field.creation_counter += 1
0.56 /testbed/django/db/models/fields/__init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.56 /testbed/django/db/models/fields/__init__.py(172):         messages = {}
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(175):         messages.update(error_messages or {})
0.56 /testbed/django/db/models/fields/__init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.56 /testbed/django/db/models/fields/__init__.py(177):         self.error_messages = messages
0.56 /testbed/django/db/models/fields/__init__.py(782):         self.set_attributes_from_name(name)
0.56 /testbed/django/db/models/fields/__init__.py(769):         self.name = self.name or name
0.56 /testbed/django/db/models/fields/__init__.py(770):         self.attname, self.column = self.get_attname_column()
0.56 /testbed/django/db/models/fields/__init__.py(771):         self.concrete = self.column is not None
0.56 /testbed/django/db/models/fields/__init__.py(772):         if self.verbose_name is None and self.name:
0.56 /testbed/django/db/models/fields/__init__.py(773):             self.verbose_name = self.name.replace('_', ' ')
0.56 /testbed/django/db/models/fields/__init__.py(783):         self.model = cls
0.56 /testbed/django/db/models/fields/__init__.py(784):         cls._meta.add_field(self, private=private_only)
0.56 /testbed/django/db/models/fields/__init__.py(785):         if self.column:
0.56 /testbed/django/db/models/fields/__init__.py(786):             setattr(cls, self.attname, self.descriptor_class(self))
0.56 /testbed/django/db/models/fields/__init__.py(787):         if self.choices is not None:
0.56 /testbed/django/db/models/fields/__init__.py(782):         self.set_attributes_from_name(name)
0.56 /testbed/django/db/models/fields/__init__.py(769):         self.name = self.name or name
0.56 /testbed/django/db/models/fields/__init__.py(770):         self.attname, self.column = self.get_attname_column()
0.56 /testbed/django/db/models/fields/__init__.py(771):         self.concrete = self.column is not None
0.56 /testbed/django/db/models/fields/__init__.py(772):         if self.verbose_name is None and self.name:
0.56 /testbed/django/db/models/fields/__init__.py(773):             self.verbose_name = self.name.replace('_', ' ')
0.56 /testbed/django/db/models/fields/__init__.py(783):         self.model = cls
0.56 /testbed/django/db/models/fields/__init__.py(784):         cls._meta.add_field(self, private=private_only)
0.56 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.56 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.56 /testbed/django/db/models/fields/__init__.py(529):             if (
0.56 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(785):         if self.column:
0.56 /testbed/django/db/models/fields/__init__.py(786):             setattr(cls, self.attname, self.descriptor_class(self))
0.56 /testbed/django/db/models/fields/__init__.py(787):         if self.choices is not None:
0.56 /testbed/django/db/models/fields/__init__.py(2513):         return issubclass(subclass, self._subclasses) or super().__subclasscheck__(subclass)
0.56 /testbed/django/db/models/fields/__init__.py(2507):         return (BigAutoField, SmallAutoField)
0.56 /testbed/django/db/models/fields/__init__.py(2439):         kwargs['blank'] = True
0.56 /testbed/django/db/models/fields/__init__.py(2440):         super().__init__(*args, **kwargs)
0.56 /testbed/django/db/models/fields/__init__.py(139):         self.name = name
0.56 /testbed/django/db/models/fields/__init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.56 /testbed/django/db/models/fields/__init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.56 /testbed/django/db/models/fields/__init__.py(142):         self.primary_key = primary_key
0.56 /testbed/django/db/models/fields/__init__.py(143):         self.max_length, self._unique = max_length, unique
0.56 /testbed/django/db/models/fields/__init__.py(144):         self.blank, self.null = blank, null
0.56 /testbed/django/db/models/fields/__init__.py(145):         self.remote_field = rel
0.56 /testbed/django/db/models/fields/__init__.py(146):         self.is_relation = self.remote_field is not None
0.56 /testbed/django/db/models/fields/__init__.py(147):         self.default = default
0.56 /testbed/django/db/models/fields/__init__.py(148):         self.editable = editable
0.56 /testbed/django/db/models/fields/__init__.py(149):         self.serialize = serialize
0.56 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_date = unique_for_date
0.56 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_month = unique_for_month
0.56 /testbed/django/db/models/fields/__init__.py(152):         self.unique_for_year = unique_for_year
0.56 /testbed/django/db/models/fields/__init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.56 /testbed/django/db/models/fields/__init__.py(155):         self.choices = choices
0.56 /testbed/django/db/models/fields/__init__.py(156):         self.help_text = help_text
0.56 /testbed/django/db/models/fields/__init__.py(157):         self.db_index = db_index
0.56 /testbed/django/db/models/fields/__init__.py(158):         self.db_column = db_column
0.56 /testbed/django/db/models/fields/__init__.py(159):         self._db_tablespace = db_tablespace
0.56 /testbed/django/db/models/fields/__init__.py(160):         self.auto_created = auto_created
0.56 /testbed/django/db/models/fields/__init__.py(163):         if auto_created:
0.56 /testbed/django/db/models/fields/__init__.py(164):             self.creation_counter = Field.auto_creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(165):             Field.auto_creation_counter -= 1
0.56 /testbed/django/db/models/fields/__init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.56 /testbed/django/db/models/fields/__init__.py(172):         messages = {}
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(175):         messages.update(error_messages or {})
0.56 /testbed/django/db/models/fields/__init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.56 /testbed/django/db/models/fields/__init__.py(177):         self.error_messages = messages
0.56 /testbed/django/db/models/fields/__init__.py(2476):         if cls._meta.auto_field:
0.56 /testbed/django/db/models/fields/__init__.py(2481):         super().contribute_to_class(cls, name, **kwargs)
0.56 /testbed/django/db/models/fields/__init__.py(782):         self.set_attributes_from_name(name)
0.56 /testbed/django/db/models/fields/__init__.py(769):         self.name = self.name or name
0.56 /testbed/django/db/models/fields/__init__.py(770):         self.attname, self.column = self.get_attname_column()
0.56 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.56 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.56 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.56 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.56 /testbed/django/db/models/fields/__init__.py(771):         self.concrete = self.column is not None
0.56 /testbed/django/db/models/fields/__init__.py(772):         if self.verbose_name is None and self.name:
0.56 /testbed/django/db/models/fields/__init__.py(783):         self.model = cls
0.56 /testbed/django/db/models/fields/__init__.py(784):         cls._meta.add_field(self, private=private_only)
0.56 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.56 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.56 /testbed/django/db/models/fields/__init__.py(529):             if (
0.56 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.56 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.56 /testbed/django/db/models/fields/__init__.py(529):             if (
0.56 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(785):         if self.column:
0.56 /testbed/django/db/models/fields/__init__.py(786):             setattr(cls, self.attname, self.descriptor_class(self))
0.56 /testbed/django/db/models/fields/__init__.py(787):         if self.choices is not None:
0.56 /testbed/django/db/models/fields/__init__.py(2482):         cls._meta.auto_field = self
0.56 /testbed/django/db/models/fields/__init__.py(2513):         return issubclass(subclass, self._subclasses) or super().__subclasscheck__(subclass)
0.56 /testbed/django/db/models/fields/__init__.py(2507):         return (BigAutoField, SmallAutoField)
0.56 /testbed/django/db/models/fields/__init__.py(2439):         kwargs['blank'] = True
0.56 /testbed/django/db/models/fields/__init__.py(2440):         super().__init__(*args, **kwargs)
0.56 /testbed/django/db/models/fields/__init__.py(139):         self.name = name
0.56 /testbed/django/db/models/fields/__init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.56 /testbed/django/db/models/fields/__init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.56 /testbed/django/db/models/fields/__init__.py(142):         self.primary_key = primary_key
0.56 /testbed/django/db/models/fields/__init__.py(143):         self.max_length, self._unique = max_length, unique
0.56 /testbed/django/db/models/fields/__init__.py(144):         self.blank, self.null = blank, null
0.56 /testbed/django/db/models/fields/__init__.py(145):         self.remote_field = rel
0.56 /testbed/django/db/models/fields/__init__.py(146):         self.is_relation = self.remote_field is not None
0.56 /testbed/django/db/models/fields/__init__.py(147):         self.default = default
0.56 /testbed/django/db/models/fields/__init__.py(148):         self.editable = editable
0.56 /testbed/django/db/models/fields/__init__.py(149):         self.serialize = serialize
0.56 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_date = unique_for_date
0.56 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_month = unique_for_month
0.56 /testbed/django/db/models/fields/__init__.py(152):         self.unique_for_year = unique_for_year
0.56 /testbed/django/db/models/fields/__init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.56 /testbed/django/db/models/fields/__init__.py(155):         self.choices = choices
0.56 /testbed/django/db/models/fields/__init__.py(156):         self.help_text = help_text
0.56 /testbed/django/db/models/fields/__init__.py(157):         self.db_index = db_index
0.56 /testbed/django/db/models/fields/__init__.py(158):         self.db_column = db_column
0.56 /testbed/django/db/models/fields/__init__.py(159):         self._db_tablespace = db_tablespace
0.56 /testbed/django/db/models/fields/__init__.py(160):         self.auto_created = auto_created
0.56 /testbed/django/db/models/fields/__init__.py(163):         if auto_created:
0.56 /testbed/django/db/models/fields/__init__.py(164):             self.creation_counter = Field.auto_creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(165):             Field.auto_creation_counter -= 1
0.56 /testbed/django/db/models/fields/__init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.56 /testbed/django/db/models/fields/__init__.py(172):         messages = {}
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(175):         messages.update(error_messages or {})
0.56 /testbed/django/db/models/fields/__init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.56 /testbed/django/db/models/fields/__init__.py(177):         self.error_messages = messages
0.56 /testbed/django/db/models/fields/__init__.py(2476):         if cls._meta.auto_field:
0.56 /testbed/django/db/models/fields/__init__.py(2481):         super().contribute_to_class(cls, name, **kwargs)
0.56 /testbed/django/db/models/fields/__init__.py(782):         self.set_attributes_from_name(name)
0.56 /testbed/django/db/models/fields/__init__.py(769):         self.name = self.name or name
0.56 /testbed/django/db/models/fields/__init__.py(770):         self.attname, self.column = self.get_attname_column()
0.56 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.56 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.56 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.56 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.56 /testbed/django/db/models/fields/__init__.py(771):         self.concrete = self.column is not None
0.56 /testbed/django/db/models/fields/__init__.py(772):         if self.verbose_name is None and self.name:
0.56 /testbed/django/db/models/fields/__init__.py(783):         self.model = cls
0.56 /testbed/django/db/models/fields/__init__.py(784):         cls._meta.add_field(self, private=private_only)
0.56 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.56 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.56 /testbed/django/db/models/fields/__init__.py(529):             if (
0.56 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(785):         if self.column:
0.56 /testbed/django/db/models/fields/__init__.py(786):             setattr(cls, self.attname, self.descriptor_class(self))
0.56 /testbed/django/db/models/fields/__init__.py(787):         if self.choices is not None:
0.56 /testbed/django/db/models/fields/__init__.py(2482):         cls._meta.auto_field = self
0.56 /testbed/django/db/models/fields/__init__.py(139):         self.name = name
0.56 /testbed/django/db/models/fields/__init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.56 /testbed/django/db/models/fields/__init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.56 /testbed/django/db/models/fields/__init__.py(142):         self.primary_key = primary_key
0.56 /testbed/django/db/models/fields/__init__.py(143):         self.max_length, self._unique = max_length, unique
0.56 /testbed/django/db/models/fields/__init__.py(144):         self.blank, self.null = blank, null
0.56 /testbed/django/db/models/fields/__init__.py(145):         self.remote_field = rel
0.56 /testbed/django/db/models/fields/__init__.py(146):         self.is_relation = self.remote_field is not None
0.56 /testbed/django/db/models/fields/__init__.py(147):         self.default = default
0.56 /testbed/django/db/models/fields/__init__.py(148):         self.editable = editable
0.56 /testbed/django/db/models/fields/__init__.py(149):         self.serialize = serialize
0.56 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_date = unique_for_date
0.56 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_month = unique_for_month
0.56 /testbed/django/db/models/fields/__init__.py(152):         self.unique_for_year = unique_for_year
0.56 /testbed/django/db/models/fields/__init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.56 /testbed/django/db/models/fields/__init__.py(155):         self.choices = choices
0.56 /testbed/django/db/models/fields/__init__.py(156):         self.help_text = help_text
0.56 /testbed/django/db/models/fields/__init__.py(157):         self.db_index = db_index
0.56 /testbed/django/db/models/fields/__init__.py(158):         self.db_column = db_column
0.56 /testbed/django/db/models/fields/__init__.py(159):         self._db_tablespace = db_tablespace
0.56 /testbed/django/db/models/fields/__init__.py(160):         self.auto_created = auto_created
0.56 /testbed/django/db/models/fields/__init__.py(163):         if auto_created:
0.56 /testbed/django/db/models/fields/__init__.py(167):             self.creation_counter = Field.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(168):             Field.creation_counter += 1
0.56 /testbed/django/db/models/fields/__init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.56 /testbed/django/db/models/fields/__init__.py(172):         messages = {}
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(175):         messages.update(error_messages or {})
0.56 /testbed/django/db/models/fields/__init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.56 /testbed/django/db/models/fields/__init__.py(177):         self.error_messages = messages
0.56 /testbed/django/db/models/fields/__init__.py(139):         self.name = name
0.56 /testbed/django/db/models/fields/__init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.56 /testbed/django/db/models/fields/__init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.56 /testbed/django/db/models/fields/__init__.py(142):         self.primary_key = primary_key
0.56 /testbed/django/db/models/fields/__init__.py(143):         self.max_length, self._unique = max_length, unique
0.56 /testbed/django/db/models/fields/__init__.py(144):         self.blank, self.null = blank, null
0.56 /testbed/django/db/models/fields/__init__.py(145):         self.remote_field = rel
0.56 /testbed/django/db/models/fields/__init__.py(146):         self.is_relation = self.remote_field is not None
0.56 /testbed/django/db/models/fields/__init__.py(147):         self.default = default
0.56 /testbed/django/db/models/fields/__init__.py(148):         self.editable = editable
0.56 /testbed/django/db/models/fields/__init__.py(149):         self.serialize = serialize
0.56 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_date = unique_for_date
0.56 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_month = unique_for_month
0.56 /testbed/django/db/models/fields/__init__.py(152):         self.unique_for_year = unique_for_year
0.56 /testbed/django/db/models/fields/__init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.56 /testbed/django/db/models/fields/__init__.py(155):         self.choices = choices
0.56 /testbed/django/db/models/fields/__init__.py(156):         self.help_text = help_text
0.56 /testbed/django/db/models/fields/__init__.py(157):         self.db_index = db_index
0.56 /testbed/django/db/models/fields/__init__.py(158):         self.db_column = db_column
0.56 /testbed/django/db/models/fields/__init__.py(159):         self._db_tablespace = db_tablespace
0.56 /testbed/django/db/models/fields/__init__.py(160):         self.auto_created = auto_created
0.56 /testbed/django/db/models/fields/__init__.py(163):         if auto_created:
0.56 /testbed/django/db/models/fields/__init__.py(167):             self.creation_counter = Field.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(168):             Field.creation_counter += 1
0.56 /testbed/django/db/models/fields/__init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.56 /testbed/django/db/models/fields/__init__.py(172):         messages = {}
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(175):         messages.update(error_messages or {})
0.56 /testbed/django/db/models/fields/__init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.56 /testbed/django/db/models/fields/__init__.py(177):         self.error_messages = messages
0.56 /testbed/django/db/models/fields/__init__.py(139):         self.name = name
0.56 /testbed/django/db/models/fields/__init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.56 /testbed/django/db/models/fields/__init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.56 /testbed/django/db/models/fields/__init__.py(142):         self.primary_key = primary_key
0.56 /testbed/django/db/models/fields/__init__.py(143):         self.max_length, self._unique = max_length, unique
0.56 /testbed/django/db/models/fields/__init__.py(144):         self.blank, self.null = blank, null
0.56 /testbed/django/db/models/fields/__init__.py(145):         self.remote_field = rel
0.56 /testbed/django/db/models/fields/__init__.py(146):         self.is_relation = self.remote_field is not None
0.56 /testbed/django/db/models/fields/__init__.py(147):         self.default = default
0.56 /testbed/django/db/models/fields/__init__.py(148):         self.editable = editable
0.56 /testbed/django/db/models/fields/__init__.py(149):         self.serialize = serialize
0.56 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_date = unique_for_date
0.56 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_month = unique_for_month
0.56 /testbed/django/db/models/fields/__init__.py(152):         self.unique_for_year = unique_for_year
0.56 /testbed/django/db/models/fields/__init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.56 /testbed/django/db/models/fields/__init__.py(155):         self.choices = choices
0.56 /testbed/django/db/models/fields/__init__.py(156):         self.help_text = help_text
0.56 /testbed/django/db/models/fields/__init__.py(157):         self.db_index = db_index
0.56 /testbed/django/db/models/fields/__init__.py(158):         self.db_column = db_column
0.56 /testbed/django/db/models/fields/__init__.py(159):         self._db_tablespace = db_tablespace
0.56 /testbed/django/db/models/fields/__init__.py(160):         self.auto_created = auto_created
0.56 /testbed/django/db/models/fields/__init__.py(163):         if auto_created:
0.56 /testbed/django/db/models/fields/__init__.py(167):             self.creation_counter = Field.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(168):             Field.creation_counter += 1
0.56 /testbed/django/db/models/fields/__init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.56 /testbed/django/db/models/fields/__init__.py(172):         messages = {}
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(175):         messages.update(error_messages or {})
0.56 /testbed/django/db/models/fields/__init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.56 /testbed/django/db/models/fields/__init__.py(177):         self.error_messages = messages
0.56 /testbed/django/db/models/fields/__init__.py(782):         self.set_attributes_from_name(name)
0.56 /testbed/django/db/models/fields/__init__.py(769):         self.name = self.name or name
0.56 /testbed/django/db/models/fields/__init__.py(770):         self.attname, self.column = self.get_attname_column()
0.56 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.56 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.56 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.56 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.56 /testbed/django/db/models/fields/__init__.py(771):         self.concrete = self.column is not None
0.56 /testbed/django/db/models/fields/__init__.py(772):         if self.verbose_name is None and self.name:
0.56 /testbed/django/db/models/fields/__init__.py(783):         self.model = cls
0.56 /testbed/django/db/models/fields/__init__.py(784):         cls._meta.add_field(self, private=private_only)
0.56 /testbed/django/db/models/fields/__init__.py(785):         if self.column:
0.56 /testbed/django/db/models/fields/__init__.py(786):             setattr(cls, self.attname, self.descriptor_class(self))
0.56 /testbed/django/db/models/fields/__init__.py(787):         if self.choices is not None:
0.56 /testbed/django/db/models/fields/__init__.py(782):         self.set_attributes_from_name(name)
0.56 /testbed/django/db/models/fields/__init__.py(769):         self.name = self.name or name
0.56 /testbed/django/db/models/fields/__init__.py(770):         self.attname, self.column = self.get_attname_column()
0.56 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.56 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.56 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.56 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.56 /testbed/django/db/models/fields/__init__.py(771):         self.concrete = self.column is not None
0.56 /testbed/django/db/models/fields/__init__.py(772):         if self.verbose_name is None and self.name:
0.56 /testbed/django/db/models/fields/__init__.py(783):         self.model = cls
0.56 /testbed/django/db/models/fields/__init__.py(784):         cls._meta.add_field(self, private=private_only)
0.56 /testbed/django/db/models/fields/__init__.py(785):         if self.column:
0.56 /testbed/django/db/models/fields/__init__.py(786):             setattr(cls, self.attname, self.descriptor_class(self))
0.56 /testbed/django/db/models/fields/__init__.py(787):         if self.choices is not None:
0.56 /testbed/django/db/models/fields/__init__.py(782):         self.set_attributes_from_name(name)
0.56 /testbed/django/db/models/fields/__init__.py(769):         self.name = self.name or name
0.56 /testbed/django/db/models/fields/__init__.py(770):         self.attname, self.column = self.get_attname_column()
0.56 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.56 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.56 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.56 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.56 /testbed/django/db/models/fields/__init__.py(771):         self.concrete = self.column is not None
0.56 /testbed/django/db/models/fields/__init__.py(772):         if self.verbose_name is None and self.name:
0.56 /testbed/django/db/models/fields/__init__.py(783):         self.model = cls
0.56 /testbed/django/db/models/fields/__init__.py(784):         cls._meta.add_field(self, private=private_only)
0.56 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.56 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.56 /testbed/django/db/models/fields/__init__.py(529):             if (
0.56 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(785):         if self.column:
0.56 /testbed/django/db/models/fields/__init__.py(786):             setattr(cls, self.attname, self.descriptor_class(self))
0.56 /testbed/django/db/models/fields/__init__.py(787):         if self.choices is not None:
0.56 /testbed/django/db/models/fields/__init__.py(1011):         super().__init__(*args, **kwargs)
0.56 /testbed/django/db/models/fields/__init__.py(139):         self.name = name
0.56 /testbed/django/db/models/fields/__init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.56 /testbed/django/db/models/fields/__init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.56 /testbed/django/db/models/fields/__init__.py(142):         self.primary_key = primary_key
0.56 /testbed/django/db/models/fields/__init__.py(143):         self.max_length, self._unique = max_length, unique
0.56 /testbed/django/db/models/fields/__init__.py(144):         self.blank, self.null = blank, null
0.56 /testbed/django/db/models/fields/__init__.py(145):         self.remote_field = rel
0.56 /testbed/django/db/models/fields/__init__.py(146):         self.is_relation = self.remote_field is not None
0.56 /testbed/django/db/models/fields/__init__.py(147):         self.default = default
0.56 /testbed/django/db/models/fields/__init__.py(148):         self.editable = editable
0.56 /testbed/django/db/models/fields/__init__.py(149):         self.serialize = serialize
0.56 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_date = unique_for_date
0.56 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_month = unique_for_month
0.56 /testbed/django/db/models/fields/__init__.py(152):         self.unique_for_year = unique_for_year
0.56 /testbed/django/db/models/fields/__init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.56 /testbed/django/db/models/fields/__init__.py(155):         self.choices = choices
0.56 /testbed/django/db/models/fields/__init__.py(156):         self.help_text = help_text
0.56 /testbed/django/db/models/fields/__init__.py(157):         self.db_index = db_index
0.56 /testbed/django/db/models/fields/__init__.py(158):         self.db_column = db_column
0.56 /testbed/django/db/models/fields/__init__.py(159):         self._db_tablespace = db_tablespace
0.56 /testbed/django/db/models/fields/__init__.py(160):         self.auto_created = auto_created
0.56 /testbed/django/db/models/fields/__init__.py(163):         if auto_created:
0.56 /testbed/django/db/models/fields/__init__.py(167):             self.creation_counter = Field.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(168):             Field.creation_counter += 1
0.56 /testbed/django/db/models/fields/__init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.56 /testbed/django/db/models/fields/__init__.py(172):         messages = {}
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(175):         messages.update(error_messages or {})
0.56 /testbed/django/db/models/fields/__init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.56 /testbed/django/db/models/fields/__init__.py(177):         self.error_messages = messages
0.56 /testbed/django/db/models/fields/__init__.py(1012):         self.db_collation = db_collation
0.56 /testbed/django/db/models/fields/__init__.py(1013):         if self.max_length is not None:
0.56 /testbed/django/db/models/fields/__init__.py(1014):             self.validators.append(validators.MaxLengthValidator(self.max_length))
0.56 /testbed/django/db/models/fields/__init__.py(615):         return [*self.default_validators, *self._validators]
0.56 /testbed/django/db/models/fields/__init__.py(1011):         super().__init__(*args, **kwargs)
0.56 /testbed/django/db/models/fields/__init__.py(139):         self.name = name
0.56 /testbed/django/db/models/fields/__init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.56 /testbed/django/db/models/fields/__init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.56 /testbed/django/db/models/fields/__init__.py(142):         self.primary_key = primary_key
0.56 /testbed/django/db/models/fields/__init__.py(143):         self.max_length, self._unique = max_length, unique
0.56 /testbed/django/db/models/fields/__init__.py(144):         self.blank, self.null = blank, null
0.56 /testbed/django/db/models/fields/__init__.py(145):         self.remote_field = rel
0.56 /testbed/django/db/models/fields/__init__.py(146):         self.is_relation = self.remote_field is not None
0.56 /testbed/django/db/models/fields/__init__.py(147):         self.default = default
0.56 /testbed/django/db/models/fields/__init__.py(148):         self.editable = editable
0.56 /testbed/django/db/models/fields/__init__.py(149):         self.serialize = serialize
0.56 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_date = unique_for_date
0.56 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_month = unique_for_month
0.56 /testbed/django/db/models/fields/__init__.py(152):         self.unique_for_year = unique_for_year
0.56 /testbed/django/db/models/fields/__init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.56 /testbed/django/db/models/fields/__init__.py(155):         self.choices = choices
0.56 /testbed/django/db/models/fields/__init__.py(156):         self.help_text = help_text
0.56 /testbed/django/db/models/fields/__init__.py(157):         self.db_index = db_index
0.56 /testbed/django/db/models/fields/__init__.py(158):         self.db_column = db_column
0.56 /testbed/django/db/models/fields/__init__.py(159):         self._db_tablespace = db_tablespace
0.56 /testbed/django/db/models/fields/__init__.py(160):         self.auto_created = auto_created
0.56 /testbed/django/db/models/fields/__init__.py(163):         if auto_created:
0.56 /testbed/django/db/models/fields/__init__.py(167):             self.creation_counter = Field.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(168):             Field.creation_counter += 1
0.56 /testbed/django/db/models/fields/__init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.56 /testbed/django/db/models/fields/__init__.py(172):         messages = {}
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(175):         messages.update(error_messages or {})
0.56 /testbed/django/db/models/fields/__init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.56 /testbed/django/db/models/fields/__init__.py(177):         self.error_messages = messages
0.56 /testbed/django/db/models/fields/__init__.py(1012):         self.db_collation = db_collation
0.56 /testbed/django/db/models/fields/__init__.py(1013):         if self.max_length is not None:
0.56 /testbed/django/db/models/fields/__init__.py(1014):             self.validators.append(validators.MaxLengthValidator(self.max_length))
0.56 /testbed/django/db/models/fields/__init__.py(615):         return [*self.default_validators, *self._validators]
0.56 /testbed/django/db/models/fields/__init__.py(1011):         super().__init__(*args, **kwargs)
0.56 /testbed/django/db/models/fields/__init__.py(139):         self.name = name
0.56 /testbed/django/db/models/fields/__init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.56 /testbed/django/db/models/fields/__init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.56 /testbed/django/db/models/fields/__init__.py(142):         self.primary_key = primary_key
0.56 /testbed/django/db/models/fields/__init__.py(143):         self.max_length, self._unique = max_length, unique
0.56 /testbed/django/db/models/fields/__init__.py(144):         self.blank, self.null = blank, null
0.56 /testbed/django/db/models/fields/__init__.py(145):         self.remote_field = rel
0.56 /testbed/django/db/models/fields/__init__.py(146):         self.is_relation = self.remote_field is not None
0.56 /testbed/django/db/models/fields/__init__.py(147):         self.default = default
0.56 /testbed/django/db/models/fields/__init__.py(148):         self.editable = editable
0.56 /testbed/django/db/models/fields/__init__.py(149):         self.serialize = serialize
0.56 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_date = unique_for_date
0.56 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_month = unique_for_month
0.56 /testbed/django/db/models/fields/__init__.py(152):         self.unique_for_year = unique_for_year
0.56 /testbed/django/db/models/fields/__init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.56 /testbed/django/db/models/fields/__init__.py(155):         self.choices = choices
0.56 /testbed/django/db/models/fields/__init__.py(156):         self.help_text = help_text
0.56 /testbed/django/db/models/fields/__init__.py(157):         self.db_index = db_index
0.56 /testbed/django/db/models/fields/__init__.py(158):         self.db_column = db_column
0.56 /testbed/django/db/models/fields/__init__.py(159):         self._db_tablespace = db_tablespace
0.56 /testbed/django/db/models/fields/__init__.py(160):         self.auto_created = auto_created
0.56 /testbed/django/db/models/fields/__init__.py(163):         if auto_created:
0.56 /testbed/django/db/models/fields/__init__.py(167):             self.creation_counter = Field.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(168):             Field.creation_counter += 1
0.56 /testbed/django/db/models/fields/__init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.56 /testbed/django/db/models/fields/__init__.py(172):         messages = {}
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(175):         messages.update(error_messages or {})
0.56 /testbed/django/db/models/fields/__init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.56 /testbed/django/db/models/fields/__init__.py(177):         self.error_messages = messages
0.56 /testbed/django/db/models/fields/__init__.py(1012):         self.db_collation = db_collation
0.56 /testbed/django/db/models/fields/__init__.py(1013):         if self.max_length is not None:
0.56 /testbed/django/db/models/fields/__init__.py(1014):             self.validators.append(validators.MaxLengthValidator(self.max_length))
0.56 /testbed/django/db/models/fields/__init__.py(615):         return [*self.default_validators, *self._validators]
0.56 /testbed/django/db/models/fields/__init__.py(1651):         kwargs.setdefault('max_length', 254)
0.56 /testbed/django/db/models/fields/__init__.py(1652):         super().__init__(*args, **kwargs)
0.56 /testbed/django/db/models/fields/__init__.py(1011):         super().__init__(*args, **kwargs)
0.56 /testbed/django/db/models/fields/__init__.py(139):         self.name = name
0.56 /testbed/django/db/models/fields/__init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.56 /testbed/django/db/models/fields/__init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.56 /testbed/django/db/models/fields/__init__.py(142):         self.primary_key = primary_key
0.56 /testbed/django/db/models/fields/__init__.py(143):         self.max_length, self._unique = max_length, unique
0.56 /testbed/django/db/models/fields/__init__.py(144):         self.blank, self.null = blank, null
0.56 /testbed/django/db/models/fields/__init__.py(145):         self.remote_field = rel
0.56 /testbed/django/db/models/fields/__init__.py(146):         self.is_relation = self.remote_field is not None
0.56 /testbed/django/db/models/fields/__init__.py(147):         self.default = default
0.56 /testbed/django/db/models/fields/__init__.py(148):         self.editable = editable
0.56 /testbed/django/db/models/fields/__init__.py(149):         self.serialize = serialize
0.56 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_date = unique_for_date
0.56 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_month = unique_for_month
0.56 /testbed/django/db/models/fields/__init__.py(152):         self.unique_for_year = unique_for_year
0.56 /testbed/django/db/models/fields/__init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.56 /testbed/django/db/models/fields/__init__.py(155):         self.choices = choices
0.56 /testbed/django/db/models/fields/__init__.py(156):         self.help_text = help_text
0.56 /testbed/django/db/models/fields/__init__.py(157):         self.db_index = db_index
0.56 /testbed/django/db/models/fields/__init__.py(158):         self.db_column = db_column
0.56 /testbed/django/db/models/fields/__init__.py(159):         self._db_tablespace = db_tablespace
0.56 /testbed/django/db/models/fields/__init__.py(160):         self.auto_created = auto_created
0.56 /testbed/django/db/models/fields/__init__.py(163):         if auto_created:
0.56 /testbed/django/db/models/fields/__init__.py(167):             self.creation_counter = Field.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(168):             Field.creation_counter += 1
0.56 /testbed/django/db/models/fields/__init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.56 /testbed/django/db/models/fields/__init__.py(172):         messages = {}
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(175):         messages.update(error_messages or {})
0.56 /testbed/django/db/models/fields/__init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.56 /testbed/django/db/models/fields/__init__.py(177):         self.error_messages = messages
0.56 /testbed/django/db/models/fields/__init__.py(1012):         self.db_collation = db_collation
0.56 /testbed/django/db/models/fields/__init__.py(1013):         if self.max_length is not None:
0.56 /testbed/django/db/models/fields/__init__.py(1014):             self.validators.append(validators.MaxLengthValidator(self.max_length))
0.56 /testbed/django/db/models/fields/__init__.py(615):         return [*self.default_validators, *self._validators]
0.56 /testbed/django/db/models/fields/__init__.py(139):         self.name = name
0.56 /testbed/django/db/models/fields/__init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.56 /testbed/django/db/models/fields/__init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.56 /testbed/django/db/models/fields/__init__.py(142):         self.primary_key = primary_key
0.56 /testbed/django/db/models/fields/__init__.py(143):         self.max_length, self._unique = max_length, unique
0.56 /testbed/django/db/models/fields/__init__.py(144):         self.blank, self.null = blank, null
0.56 /testbed/django/db/models/fields/__init__.py(145):         self.remote_field = rel
0.56 /testbed/django/db/models/fields/__init__.py(146):         self.is_relation = self.remote_field is not None
0.56 /testbed/django/db/models/fields/__init__.py(147):         self.default = default
0.56 /testbed/django/db/models/fields/__init__.py(148):         self.editable = editable
0.56 /testbed/django/db/models/fields/__init__.py(149):         self.serialize = serialize
0.56 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_date = unique_for_date
0.56 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_month = unique_for_month
0.56 /testbed/django/db/models/fields/__init__.py(152):         self.unique_for_year = unique_for_year
0.56 /testbed/django/db/models/fields/__init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.56 /testbed/django/db/models/fields/__init__.py(155):         self.choices = choices
0.56 /testbed/django/db/models/fields/__init__.py(156):         self.help_text = help_text
0.56 /testbed/django/db/models/fields/__init__.py(157):         self.db_index = db_index
0.56 /testbed/django/db/models/fields/__init__.py(158):         self.db_column = db_column
0.56 /testbed/django/db/models/fields/__init__.py(159):         self._db_tablespace = db_tablespace
0.56 /testbed/django/db/models/fields/__init__.py(160):         self.auto_created = auto_created
0.56 /testbed/django/db/models/fields/__init__.py(163):         if auto_created:
0.56 /testbed/django/db/models/fields/__init__.py(167):             self.creation_counter = Field.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(168):             Field.creation_counter += 1
0.56 /testbed/django/db/models/fields/__init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.56 /testbed/django/db/models/fields/__init__.py(172):         messages = {}
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(175):         messages.update(error_messages or {})
0.56 /testbed/django/db/models/fields/__init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.56 /testbed/django/db/models/fields/__init__.py(177):         self.error_messages = messages
0.56 /testbed/django/db/models/fields/__init__.py(139):         self.name = name
0.56 /testbed/django/db/models/fields/__init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.56 /testbed/django/db/models/fields/__init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.56 /testbed/django/db/models/fields/__init__.py(142):         self.primary_key = primary_key
0.56 /testbed/django/db/models/fields/__init__.py(143):         self.max_length, self._unique = max_length, unique
0.56 /testbed/django/db/models/fields/__init__.py(144):         self.blank, self.null = blank, null
0.56 /testbed/django/db/models/fields/__init__.py(145):         self.remote_field = rel
0.56 /testbed/django/db/models/fields/__init__.py(146):         self.is_relation = self.remote_field is not None
0.56 /testbed/django/db/models/fields/__init__.py(147):         self.default = default
0.56 /testbed/django/db/models/fields/__init__.py(148):         self.editable = editable
0.56 /testbed/django/db/models/fields/__init__.py(149):         self.serialize = serialize
0.56 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_date = unique_for_date
0.56 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_month = unique_for_month
0.56 /testbed/django/db/models/fields/__init__.py(152):         self.unique_for_year = unique_for_year
0.56 /testbed/django/db/models/fields/__init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.56 /testbed/django/db/models/fields/__init__.py(155):         self.choices = choices
0.56 /testbed/django/db/models/fields/__init__.py(156):         self.help_text = help_text
0.56 /testbed/django/db/models/fields/__init__.py(157):         self.db_index = db_index
0.56 /testbed/django/db/models/fields/__init__.py(158):         self.db_column = db_column
0.56 /testbed/django/db/models/fields/__init__.py(159):         self._db_tablespace = db_tablespace
0.56 /testbed/django/db/models/fields/__init__.py(160):         self.auto_created = auto_created
0.56 /testbed/django/db/models/fields/__init__.py(163):         if auto_created:
0.56 /testbed/django/db/models/fields/__init__.py(167):             self.creation_counter = Field.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(168):             Field.creation_counter += 1
0.56 /testbed/django/db/models/fields/__init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.56 /testbed/django/db/models/fields/__init__.py(172):         messages = {}
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(175):         messages.update(error_messages or {})
0.56 /testbed/django/db/models/fields/__init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.56 /testbed/django/db/models/fields/__init__.py(177):         self.error_messages = messages
0.56 /testbed/django/db/models/fields/__init__.py(1207):         self.auto_now, self.auto_now_add = auto_now, auto_now_add
0.56 /testbed/django/db/models/fields/__init__.py(1208):         if auto_now or auto_now_add:
0.56 /testbed/django/db/models/fields/__init__.py(1211):         super().__init__(verbose_name, name, **kwargs)
0.56 /testbed/django/db/models/fields/__init__.py(139):         self.name = name
0.56 /testbed/django/db/models/fields/__init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.56 /testbed/django/db/models/fields/__init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.56 /testbed/django/db/models/fields/__init__.py(142):         self.primary_key = primary_key
0.56 /testbed/django/db/models/fields/__init__.py(143):         self.max_length, self._unique = max_length, unique
0.56 /testbed/django/db/models/fields/__init__.py(144):         self.blank, self.null = blank, null
0.56 /testbed/django/db/models/fields/__init__.py(145):         self.remote_field = rel
0.56 /testbed/django/db/models/fields/__init__.py(146):         self.is_relation = self.remote_field is not None
0.56 /testbed/django/db/models/fields/__init__.py(147):         self.default = default
0.56 /testbed/django/db/models/fields/__init__.py(148):         self.editable = editable
0.56 /testbed/django/db/models/fields/__init__.py(149):         self.serialize = serialize
0.56 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_date = unique_for_date
0.56 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_month = unique_for_month
0.56 /testbed/django/db/models/fields/__init__.py(152):         self.unique_for_year = unique_for_year
0.56 /testbed/django/db/models/fields/__init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.56 /testbed/django/db/models/fields/__init__.py(155):         self.choices = choices
0.56 /testbed/django/db/models/fields/__init__.py(156):         self.help_text = help_text
0.56 /testbed/django/db/models/fields/__init__.py(157):         self.db_index = db_index
0.56 /testbed/django/db/models/fields/__init__.py(158):         self.db_column = db_column
0.56 /testbed/django/db/models/fields/__init__.py(159):         self._db_tablespace = db_tablespace
0.56 /testbed/django/db/models/fields/__init__.py(160):         self.auto_created = auto_created
0.56 /testbed/django/db/models/fields/__init__.py(163):         if auto_created:
0.56 /testbed/django/db/models/fields/__init__.py(167):             self.creation_counter = Field.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(168):             Field.creation_counter += 1
0.56 /testbed/django/db/models/fields/__init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.56 /testbed/django/db/models/fields/__init__.py(172):         messages = {}
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(175):         messages.update(error_messages or {})
0.56 /testbed/django/db/models/fields/__init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.56 /testbed/django/db/models/fields/__init__.py(177):         self.error_messages = messages
0.56 /testbed/django/db/models/fields/__init__.py(782):         self.set_attributes_from_name(name)
0.56 /testbed/django/db/models/fields/__init__.py(769):         self.name = self.name or name
0.56 /testbed/django/db/models/fields/__init__.py(770):         self.attname, self.column = self.get_attname_column()
0.56 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.56 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.56 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.56 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.56 /testbed/django/db/models/fields/__init__.py(771):         self.concrete = self.column is not None
0.56 /testbed/django/db/models/fields/__init__.py(772):         if self.verbose_name is None and self.name:
0.56 /testbed/django/db/models/fields/__init__.py(783):         self.model = cls
0.56 /testbed/django/db/models/fields/__init__.py(784):         cls._meta.add_field(self, private=private_only)
0.56 /testbed/django/db/models/fields/__init__.py(785):         if self.column:
0.56 /testbed/django/db/models/fields/__init__.py(786):             setattr(cls, self.attname, self.descriptor_class(self))
0.56 /testbed/django/db/models/fields/__init__.py(787):         if self.choices is not None:
0.56 /testbed/django/db/models/fields/__init__.py(782):         self.set_attributes_from_name(name)
0.56 /testbed/django/db/models/fields/__init__.py(769):         self.name = self.name or name
0.56 /testbed/django/db/models/fields/__init__.py(770):         self.attname, self.column = self.get_attname_column()
0.56 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.56 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.56 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.56 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.56 /testbed/django/db/models/fields/__init__.py(771):         self.concrete = self.column is not None
0.56 /testbed/django/db/models/fields/__init__.py(772):         if self.verbose_name is None and self.name:
0.56 /testbed/django/db/models/fields/__init__.py(783):         self.model = cls
0.56 /testbed/django/db/models/fields/__init__.py(784):         cls._meta.add_field(self, private=private_only)
0.56 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.56 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.56 /testbed/django/db/models/fields/__init__.py(529):             if (
0.56 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(785):         if self.column:
0.56 /testbed/django/db/models/fields/__init__.py(786):             setattr(cls, self.attname, self.descriptor_class(self))
0.56 /testbed/django/db/models/fields/__init__.py(787):         if self.choices is not None:
0.56 /testbed/django/db/models/fields/__init__.py(782):         self.set_attributes_from_name(name)
0.56 /testbed/django/db/models/fields/__init__.py(769):         self.name = self.name or name
0.56 /testbed/django/db/models/fields/__init__.py(770):         self.attname, self.column = self.get_attname_column()
0.56 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.56 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.56 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.56 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.56 /testbed/django/db/models/fields/__init__.py(771):         self.concrete = self.column is not None
0.56 /testbed/django/db/models/fields/__init__.py(772):         if self.verbose_name is None and self.name:
0.56 /testbed/django/db/models/fields/__init__.py(783):         self.model = cls
0.56 /testbed/django/db/models/fields/__init__.py(784):         cls._meta.add_field(self, private=private_only)
0.56 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.56 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.56 /testbed/django/db/models/fields/__init__.py(529):             if (
0.56 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(785):         if self.column:
0.56 /testbed/django/db/models/fields/__init__.py(786):             setattr(cls, self.attname, self.descriptor_class(self))
0.56 /testbed/django/db/models/fields/__init__.py(787):         if self.choices is not None:
0.56 /testbed/django/db/models/fields/__init__.py(782):         self.set_attributes_from_name(name)
0.56 /testbed/django/db/models/fields/__init__.py(769):         self.name = self.name or name
0.56 /testbed/django/db/models/fields/__init__.py(770):         self.attname, self.column = self.get_attname_column()
0.56 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.56 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.56 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.56 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.56 /testbed/django/db/models/fields/__init__.py(771):         self.concrete = self.column is not None
0.56 /testbed/django/db/models/fields/__init__.py(772):         if self.verbose_name is None and self.name:
0.56 /testbed/django/db/models/fields/__init__.py(783):         self.model = cls
0.56 /testbed/django/db/models/fields/__init__.py(784):         cls._meta.add_field(self, private=private_only)
0.56 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.56 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.56 /testbed/django/db/models/fields/__init__.py(529):             if (
0.56 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.56 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.56 /testbed/django/db/models/fields/__init__.py(529):             if (
0.56 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(785):         if self.column:
0.56 /testbed/django/db/models/fields/__init__.py(786):             setattr(cls, self.attname, self.descriptor_class(self))
0.56 /testbed/django/db/models/fields/__init__.py(787):         if self.choices is not None:
0.56 /testbed/django/db/models/fields/__init__.py(782):         self.set_attributes_from_name(name)
0.56 /testbed/django/db/models/fields/__init__.py(769):         self.name = self.name or name
0.56 /testbed/django/db/models/fields/__init__.py(770):         self.attname, self.column = self.get_attname_column()
0.56 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.56 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.56 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.56 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.56 /testbed/django/db/models/fields/__init__.py(771):         self.concrete = self.column is not None
0.56 /testbed/django/db/models/fields/__init__.py(772):         if self.verbose_name is None and self.name:
0.56 /testbed/django/db/models/fields/__init__.py(783):         self.model = cls
0.56 /testbed/django/db/models/fields/__init__.py(784):         cls._meta.add_field(self, private=private_only)
0.56 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.56 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.56 /testbed/django/db/models/fields/__init__.py(529):             if (
0.56 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.56 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.56 /testbed/django/db/models/fields/__init__.py(529):             if (
0.56 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(785):         if self.column:
0.56 /testbed/django/db/models/fields/__init__.py(786):             setattr(cls, self.attname, self.descriptor_class(self))
0.56 /testbed/django/db/models/fields/__init__.py(787):         if self.choices is not None:
0.56 /testbed/django/db/models/fields/__init__.py(782):         self.set_attributes_from_name(name)
0.56 /testbed/django/db/models/fields/__init__.py(769):         self.name = self.name or name
0.56 /testbed/django/db/models/fields/__init__.py(770):         self.attname, self.column = self.get_attname_column()
0.56 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.56 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.56 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.56 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.56 /testbed/django/db/models/fields/__init__.py(771):         self.concrete = self.column is not None
0.56 /testbed/django/db/models/fields/__init__.py(772):         if self.verbose_name is None and self.name:
0.56 /testbed/django/db/models/fields/__init__.py(783):         self.model = cls
0.56 /testbed/django/db/models/fields/__init__.py(784):         cls._meta.add_field(self, private=private_only)
0.56 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.56 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.56 /testbed/django/db/models/fields/__init__.py(529):             if (
0.56 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.56 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.56 /testbed/django/db/models/fields/__init__.py(529):             if (
0.56 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(785):         if self.column:
0.56 /testbed/django/db/models/fields/__init__.py(786):             setattr(cls, self.attname, self.descriptor_class(self))
0.56 /testbed/django/db/models/fields/__init__.py(787):         if self.choices is not None:
0.56 /testbed/django/db/models/fields/__init__.py(1285):         super().contribute_to_class(cls, name, **kwargs)
0.56 /testbed/django/db/models/fields/__init__.py(782):         self.set_attributes_from_name(name)
0.56 /testbed/django/db/models/fields/__init__.py(769):         self.name = self.name or name
0.56 /testbed/django/db/models/fields/__init__.py(770):         self.attname, self.column = self.get_attname_column()
0.56 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.56 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.56 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.56 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.56 /testbed/django/db/models/fields/__init__.py(771):         self.concrete = self.column is not None
0.56 /testbed/django/db/models/fields/__init__.py(772):         if self.verbose_name is None and self.name:
0.56 /testbed/django/db/models/fields/__init__.py(783):         self.model = cls
0.56 /testbed/django/db/models/fields/__init__.py(784):         cls._meta.add_field(self, private=private_only)
0.56 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.56 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.56 /testbed/django/db/models/fields/__init__.py(529):             if (
0.56 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.56 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.56 /testbed/django/db/models/fields/__init__.py(529):             if (
0.56 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(785):         if self.column:
0.56 /testbed/django/db/models/fields/__init__.py(786):             setattr(cls, self.attname, self.descriptor_class(self))
0.56 /testbed/django/db/models/fields/__init__.py(787):         if self.choices is not None:
0.56 /testbed/django/db/models/fields/__init__.py(1286):         if not self.null:
0.56 /testbed/django/db/models/fields/__init__.py(1287):             setattr(
0.56 /testbed/django/db/models/fields/__init__.py(1288):                 cls, 'get_next_by_%s' % self.name,
0.56 /testbed/django/db/models/fields/__init__.py(1289):                 partialmethod(cls._get_next_or_previous_by_FIELD, field=self, is_next=True)
0.56 /testbed/django/db/models/fields/__init__.py(1287):             setattr(
0.56 /testbed/django/db/models/fields/__init__.py(1291):             setattr(
0.56 /testbed/django/db/models/fields/__init__.py(1292):                 cls, 'get_previous_by_%s' % self.name,
0.56 /testbed/django/db/models/fields/__init__.py(1293):                 partialmethod(cls._get_next_or_previous_by_FIELD, field=self, is_next=False)
0.56 /testbed/django/db/models/fields/__init__.py(1291):             setattr(
0.56 /testbed/django/db/models/fields/__init__.py(554):         obj = copy.copy(self)
0.56 /testbed/django/db/models/fields/__init__.py(565):         obj = Empty()
0.56 /testbed/django/db/models/fields/__init__.py(566):         obj.__class__ = self.__class__
0.56 /testbed/django/db/models/fields/__init__.py(567):         obj.__dict__ = self.__dict__.copy()
0.56 /testbed/django/db/models/fields/__init__.py(568):         return obj
0.56 /testbed/django/db/models/fields/__init__.py(555):         if self.remote_field:
0.56 /testbed/django/db/models/fields/__init__.py(559):         memodict[id(self)] = obj
0.56 /testbed/django/db/models/fields/__init__.py(560):         return obj
0.56 /testbed/django/db/models/fields/__init__.py(782):         self.set_attributes_from_name(name)
0.56 /testbed/django/db/models/fields/__init__.py(769):         self.name = self.name or name
0.56 /testbed/django/db/models/fields/__init__.py(770):         self.attname, self.column = self.get_attname_column()
0.56 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.56 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.56 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.56 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.56 /testbed/django/db/models/fields/__init__.py(771):         self.concrete = self.column is not None
0.56 /testbed/django/db/models/fields/__init__.py(772):         if self.verbose_name is None and self.name:
0.56 /testbed/django/db/models/fields/__init__.py(783):         self.model = cls
0.56 /testbed/django/db/models/fields/__init__.py(784):         cls._meta.add_field(self, private=private_only)
0.56 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.56 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.56 /testbed/django/db/models/fields/__init__.py(529):             if (
0.56 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(518):         if isinstance(other, Field):
0.56 /testbed/django/db/models/fields/__init__.py(520):                 self.creation_counter == other.creation_counter and
0.56 /testbed/django/db/models/fields/__init__.py(519):             return (
0.56 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.56 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.56 /testbed/django/db/models/fields/__init__.py(529):             if (
0.56 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.56 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.56 /testbed/django/db/models/fields/__init__.py(529):             if (
0.56 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(785):         if self.column:
0.56 /testbed/django/db/models/fields/__init__.py(786):             setattr(cls, self.attname, self.descriptor_class(self))
0.56 /testbed/django/db/models/fields/__init__.py(787):         if self.choices is not None:
0.56 /testbed/django/db/models/fields/__init__.py(554):         obj = copy.copy(self)
0.56 /testbed/django/db/models/fields/__init__.py(565):         obj = Empty()
0.56 /testbed/django/db/models/fields/__init__.py(566):         obj.__class__ = self.__class__
0.56 /testbed/django/db/models/fields/__init__.py(567):         obj.__dict__ = self.__dict__.copy()
0.56 /testbed/django/db/models/fields/__init__.py(568):         return obj
0.56 /testbed/django/db/models/fields/__init__.py(555):         if self.remote_field:
0.56 /testbed/django/db/models/fields/__init__.py(559):         memodict[id(self)] = obj
0.56 /testbed/django/db/models/fields/__init__.py(560):         return obj
0.56 /testbed/django/db/models/fields/__init__.py(1285):         super().contribute_to_class(cls, name, **kwargs)
0.56 /testbed/django/db/models/fields/__init__.py(782):         self.set_attributes_from_name(name)
0.56 /testbed/django/db/models/fields/__init__.py(769):         self.name = self.name or name
0.56 /testbed/django/db/models/fields/__init__.py(770):         self.attname, self.column = self.get_attname_column()
0.56 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.56 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.56 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.56 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.56 /testbed/django/db/models/fields/__init__.py(771):         self.concrete = self.column is not None
0.56 /testbed/django/db/models/fields/__init__.py(772):         if self.verbose_name is None and self.name:
0.56 /testbed/django/db/models/fields/__init__.py(783):         self.model = cls
0.56 /testbed/django/db/models/fields/__init__.py(784):         cls._meta.add_field(self, private=private_only)
0.56 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.56 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.56 /testbed/django/db/models/fields/__init__.py(529):             if (
0.56 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.56 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.56 /testbed/django/db/models/fields/__init__.py(529):             if (
0.56 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.56 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.56 /testbed/django/db/models/fields/__init__.py(529):             if (
0.56 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.56 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.56 /testbed/django/db/models/fields/__init__.py(529):             if (
0.56 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(785):         if self.column:
0.56 /testbed/django/db/models/fields/__init__.py(786):             setattr(cls, self.attname, self.descriptor_class(self))
0.56 /testbed/django/db/models/fields/__init__.py(787):         if self.choices is not None:
0.56 /testbed/django/db/models/fields/__init__.py(1286):         if not self.null:
0.56 /testbed/django/db/models/fields/__init__.py(554):         obj = copy.copy(self)
0.56 /testbed/django/db/models/fields/__init__.py(565):         obj = Empty()
0.56 /testbed/django/db/models/fields/__init__.py(566):         obj.__class__ = self.__class__
0.56 /testbed/django/db/models/fields/__init__.py(567):         obj.__dict__ = self.__dict__.copy()
0.56 /testbed/django/db/models/fields/__init__.py(568):         return obj
0.56 /testbed/django/db/models/fields/__init__.py(555):         if self.remote_field:
0.56 /testbed/django/db/models/fields/__init__.py(559):         memodict[id(self)] = obj
0.56 /testbed/django/db/models/fields/__init__.py(560):         return obj
0.56 /testbed/django/db/models/fields/__init__.py(782):         self.set_attributes_from_name(name)
0.56 /testbed/django/db/models/fields/__init__.py(769):         self.name = self.name or name
0.56 /testbed/django/db/models/fields/__init__.py(770):         self.attname, self.column = self.get_attname_column()
0.56 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.56 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.56 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.56 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.56 /testbed/django/db/models/fields/__init__.py(771):         self.concrete = self.column is not None
0.56 /testbed/django/db/models/fields/__init__.py(772):         if self.verbose_name is None and self.name:
0.56 /testbed/django/db/models/fields/__init__.py(783):         self.model = cls
0.56 /testbed/django/db/models/fields/__init__.py(784):         cls._meta.add_field(self, private=private_only)
0.56 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.56 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.56 /testbed/django/db/models/fields/__init__.py(529):             if (
0.56 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.56 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.56 /testbed/django/db/models/fields/__init__.py(529):             if (
0.56 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.56 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.56 /testbed/django/db/models/fields/__init__.py(529):             if (
0.56 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(785):         if self.column:
0.56 /testbed/django/db/models/fields/__init__.py(786):             setattr(cls, self.attname, self.descriptor_class(self))
0.56 /testbed/django/db/models/fields/__init__.py(787):         if self.choices is not None:
0.56 /testbed/django/db/models/fields/__init__.py(554):         obj = copy.copy(self)
0.56 /testbed/django/db/models/fields/__init__.py(565):         obj = Empty()
0.56 /testbed/django/db/models/fields/__init__.py(566):         obj.__class__ = self.__class__
0.56 /testbed/django/db/models/fields/__init__.py(567):         obj.__dict__ = self.__dict__.copy()
0.56 /testbed/django/db/models/fields/__init__.py(568):         return obj
0.56 /testbed/django/db/models/fields/__init__.py(555):         if self.remote_field:
0.56 /testbed/django/db/models/fields/__init__.py(556):             obj.remote_field = copy.copy(self.remote_field)
0.56 /testbed/django/db/models/fields/__init__.py(557):             if hasattr(self.remote_field, 'field') and self.remote_field.field is self:
0.56 /testbed/django/db/models/fields/__init__.py(558):                 obj.remote_field.field = obj
0.56 /testbed/django/db/models/fields/__init__.py(559):         memodict[id(self)] = obj
0.56 /testbed/django/db/models/fields/__init__.py(560):         return obj
0.56 /testbed/django/db/models/fields/__init__.py(782):         self.set_attributes_from_name(name)
0.56 /testbed/django/db/models/fields/__init__.py(769):         self.name = self.name or name
0.56 /testbed/django/db/models/fields/__init__.py(770):         self.attname, self.column = self.get_attname_column()
0.56 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.56 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.56 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.56 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.56 /testbed/django/db/models/fields/__init__.py(771):         self.concrete = self.column is not None
0.56 /testbed/django/db/models/fields/__init__.py(772):         if self.verbose_name is None and self.name:
0.56 /testbed/django/db/models/fields/__init__.py(783):         self.model = cls
0.56 /testbed/django/db/models/fields/__init__.py(784):         cls._meta.add_field(self, private=private_only)
0.56 /testbed/django/db/models/fields/__init__.py(785):         if self.column:
0.56 /testbed/django/db/models/fields/__init__.py(786):             setattr(cls, self.attname, self.descriptor_class(self))
0.56 /testbed/django/db/models/fields/__init__.py(787):         if self.choices is not None:
0.56 /testbed/django/db/models/fields/__init__.py(554):         obj = copy.copy(self)
0.56 /testbed/django/db/models/fields/__init__.py(565):         obj = Empty()
0.56 /testbed/django/db/models/fields/__init__.py(566):         obj.__class__ = self.__class__
0.56 /testbed/django/db/models/fields/__init__.py(567):         obj.__dict__ = self.__dict__.copy()
0.56 /testbed/django/db/models/fields/__init__.py(568):         return obj
0.56 /testbed/django/db/models/fields/__init__.py(555):         if self.remote_field:
0.56 /testbed/django/db/models/fields/__init__.py(556):             obj.remote_field = copy.copy(self.remote_field)
0.56 /testbed/django/db/models/fields/__init__.py(557):             if hasattr(self.remote_field, 'field') and self.remote_field.field is self:
0.56 /testbed/django/db/models/fields/__init__.py(558):                 obj.remote_field.field = obj
0.56 /testbed/django/db/models/fields/__init__.py(559):         memodict[id(self)] = obj
0.56 /testbed/django/db/models/fields/__init__.py(560):         return obj
0.56 /testbed/django/db/models/fields/__init__.py(782):         self.set_attributes_from_name(name)
0.56 /testbed/django/db/models/fields/__init__.py(769):         self.name = self.name or name
0.56 /testbed/django/db/models/fields/__init__.py(770):         self.attname, self.column = self.get_attname_column()
0.56 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.56 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.56 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.56 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.56 /testbed/django/db/models/fields/__init__.py(771):         self.concrete = self.column is not None
0.56 /testbed/django/db/models/fields/__init__.py(772):         if self.verbose_name is None and self.name:
0.56 /testbed/django/db/models/fields/__init__.py(783):         self.model = cls
0.56 /testbed/django/db/models/fields/__init__.py(784):         cls._meta.add_field(self, private=private_only)
0.56 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.56 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.56 /testbed/django/db/models/fields/__init__.py(529):             if (
0.56 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(785):         if self.column:
0.56 /testbed/django/db/models/fields/__init__.py(786):             setattr(cls, self.attname, self.descriptor_class(self))
0.56 /testbed/django/db/models/fields/__init__.py(787):         if self.choices is not None:
0.56 /testbed/django/db/models/fields/__init__.py(554):         obj = copy.copy(self)
0.56 /testbed/django/db/models/fields/__init__.py(565):         obj = Empty()
0.56 /testbed/django/db/models/fields/__init__.py(566):         obj.__class__ = self.__class__
0.56 /testbed/django/db/models/fields/__init__.py(567):         obj.__dict__ = self.__dict__.copy()
0.56 /testbed/django/db/models/fields/__init__.py(568):         return obj
0.56 /testbed/django/db/models/fields/__init__.py(555):         if self.remote_field:
0.56 /testbed/django/db/models/fields/__init__.py(559):         memodict[id(self)] = obj
0.56 /testbed/django/db/models/fields/__init__.py(560):         return obj
0.56 /testbed/django/db/models/fields/__init__.py(782):         self.set_attributes_from_name(name)
0.56 /testbed/django/db/models/fields/__init__.py(769):         self.name = self.name or name
0.56 /testbed/django/db/models/fields/__init__.py(770):         self.attname, self.column = self.get_attname_column()
0.56 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.56 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.56 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.56 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.56 /testbed/django/db/models/fields/__init__.py(771):         self.concrete = self.column is not None
0.56 /testbed/django/db/models/fields/__init__.py(772):         if self.verbose_name is None and self.name:
0.56 /testbed/django/db/models/fields/__init__.py(783):         self.model = cls
0.56 /testbed/django/db/models/fields/__init__.py(784):         cls._meta.add_field(self, private=private_only)
0.56 /testbed/django/db/models/fields/__init__.py(785):         if self.column:
0.56 /testbed/django/db/models/fields/__init__.py(786):             setattr(cls, self.attname, self.descriptor_class(self))
0.56 /testbed/django/db/models/fields/__init__.py(787):         if self.choices is not None:
0.56 /testbed/django/db/models/fields/__init__.py(554):         obj = copy.copy(self)
0.56 /testbed/django/db/models/fields/__init__.py(565):         obj = Empty()
0.56 /testbed/django/db/models/fields/__init__.py(566):         obj.__class__ = self.__class__
0.56 /testbed/django/db/models/fields/__init__.py(567):         obj.__dict__ = self.__dict__.copy()
0.56 /testbed/django/db/models/fields/__init__.py(568):         return obj
0.56 /testbed/django/db/models/fields/__init__.py(555):         if self.remote_field:
0.56 /testbed/django/db/models/fields/__init__.py(559):         memodict[id(self)] = obj
0.56 /testbed/django/db/models/fields/__init__.py(560):         return obj
0.56 /testbed/django/db/models/fields/__init__.py(1285):         super().contribute_to_class(cls, name, **kwargs)
0.56 /testbed/django/db/models/fields/__init__.py(782):         self.set_attributes_from_name(name)
0.56 /testbed/django/db/models/fields/__init__.py(769):         self.name = self.name or name
0.56 /testbed/django/db/models/fields/__init__.py(770):         self.attname, self.column = self.get_attname_column()
0.56 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.56 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.56 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.56 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.56 /testbed/django/db/models/fields/__init__.py(771):         self.concrete = self.column is not None
0.56 /testbed/django/db/models/fields/__init__.py(772):         if self.verbose_name is None and self.name:
0.56 /testbed/django/db/models/fields/__init__.py(783):         self.model = cls
0.56 /testbed/django/db/models/fields/__init__.py(784):         cls._meta.add_field(self, private=private_only)
0.56 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.56 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.56 /testbed/django/db/models/fields/__init__.py(529):             if (
0.56 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(785):         if self.column:
0.56 /testbed/django/db/models/fields/__init__.py(786):             setattr(cls, self.attname, self.descriptor_class(self))
0.56 /testbed/django/db/models/fields/__init__.py(787):         if self.choices is not None:
0.56 /testbed/django/db/models/fields/__init__.py(1286):         if not self.null:
0.56 /testbed/django/db/models/fields/__init__.py(554):         obj = copy.copy(self)
0.56 /testbed/django/db/models/fields/__init__.py(565):         obj = Empty()
0.56 /testbed/django/db/models/fields/__init__.py(566):         obj.__class__ = self.__class__
0.56 /testbed/django/db/models/fields/__init__.py(567):         obj.__dict__ = self.__dict__.copy()
0.56 /testbed/django/db/models/fields/__init__.py(568):         return obj
0.56 /testbed/django/db/models/fields/__init__.py(555):         if self.remote_field:
0.56 /testbed/django/db/models/fields/__init__.py(559):         memodict[id(self)] = obj
0.56 /testbed/django/db/models/fields/__init__.py(560):         return obj
0.56 /testbed/django/db/models/fields/__init__.py(782):         self.set_attributes_from_name(name)
0.56 /testbed/django/db/models/fields/__init__.py(769):         self.name = self.name or name
0.56 /testbed/django/db/models/fields/__init__.py(770):         self.attname, self.column = self.get_attname_column()
0.56 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.56 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.56 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.56 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.56 /testbed/django/db/models/fields/__init__.py(771):         self.concrete = self.column is not None
0.56 /testbed/django/db/models/fields/__init__.py(772):         if self.verbose_name is None and self.name:
0.56 /testbed/django/db/models/fields/__init__.py(783):         self.model = cls
0.56 /testbed/django/db/models/fields/__init__.py(784):         cls._meta.add_field(self, private=private_only)
0.56 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.56 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.56 /testbed/django/db/models/fields/__init__.py(529):             if (
0.56 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(785):         if self.column:
0.56 /testbed/django/db/models/fields/__init__.py(786):             setattr(cls, self.attname, self.descriptor_class(self))
0.56 /testbed/django/db/models/fields/__init__.py(787):         if self.choices is not None:
0.56 /testbed/django/db/models/fields/__init__.py(554):         obj = copy.copy(self)
0.56 /testbed/django/db/models/fields/__init__.py(565):         obj = Empty()
0.56 /testbed/django/db/models/fields/__init__.py(566):         obj.__class__ = self.__class__
0.56 /testbed/django/db/models/fields/__init__.py(567):         obj.__dict__ = self.__dict__.copy()
0.56 /testbed/django/db/models/fields/__init__.py(568):         return obj
0.56 /testbed/django/db/models/fields/__init__.py(555):         if self.remote_field:
0.56 /testbed/django/db/models/fields/__init__.py(559):         memodict[id(self)] = obj
0.56 /testbed/django/db/models/fields/__init__.py(560):         return obj
0.56 /testbed/django/db/models/fields/__init__.py(782):         self.set_attributes_from_name(name)
0.56 /testbed/django/db/models/fields/__init__.py(769):         self.name = self.name or name
0.56 /testbed/django/db/models/fields/__init__.py(770):         self.attname, self.column = self.get_attname_column()
0.56 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.56 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.56 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.56 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.56 /testbed/django/db/models/fields/__init__.py(771):         self.concrete = self.column is not None
0.56 /testbed/django/db/models/fields/__init__.py(772):         if self.verbose_name is None and self.name:
0.56 /testbed/django/db/models/fields/__init__.py(783):         self.model = cls
0.56 /testbed/django/db/models/fields/__init__.py(784):         cls._meta.add_field(self, private=private_only)
0.56 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.56 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.56 /testbed/django/db/models/fields/__init__.py(529):             if (
0.56 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.56 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.56 /testbed/django/db/models/fields/__init__.py(529):             if (
0.56 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(785):         if self.column:
0.56 /testbed/django/db/models/fields/__init__.py(786):             setattr(cls, self.attname, self.descriptor_class(self))
0.56 /testbed/django/db/models/fields/__init__.py(787):         if self.choices is not None:
0.56 /testbed/django/db/models/fields/__init__.py(554):         obj = copy.copy(self)
0.56 /testbed/django/db/models/fields/__init__.py(565):         obj = Empty()
0.56 /testbed/django/db/models/fields/__init__.py(566):         obj.__class__ = self.__class__
0.56 /testbed/django/db/models/fields/__init__.py(567):         obj.__dict__ = self.__dict__.copy()
0.56 /testbed/django/db/models/fields/__init__.py(568):         return obj
0.56 /testbed/django/db/models/fields/__init__.py(555):         if self.remote_field:
0.56 /testbed/django/db/models/fields/__init__.py(559):         memodict[id(self)] = obj
0.56 /testbed/django/db/models/fields/__init__.py(560):         return obj
0.56 /testbed/django/db/models/fields/__init__.py(782):         self.set_attributes_from_name(name)
0.56 /testbed/django/db/models/fields/__init__.py(769):         self.name = self.name or name
0.56 /testbed/django/db/models/fields/__init__.py(770):         self.attname, self.column = self.get_attname_column()
0.56 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.56 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.56 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.56 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.56 /testbed/django/db/models/fields/__init__.py(771):         self.concrete = self.column is not None
0.56 /testbed/django/db/models/fields/__init__.py(772):         if self.verbose_name is None and self.name:
0.56 /testbed/django/db/models/fields/__init__.py(783):         self.model = cls
0.56 /testbed/django/db/models/fields/__init__.py(784):         cls._meta.add_field(self, private=private_only)
0.56 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.56 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.56 /testbed/django/db/models/fields/__init__.py(529):             if (
0.56 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.56 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.56 /testbed/django/db/models/fields/__init__.py(529):             if (
0.56 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(785):         if self.column:
0.56 /testbed/django/db/models/fields/__init__.py(786):             setattr(cls, self.attname, self.descriptor_class(self))
0.56 /testbed/django/db/models/fields/__init__.py(787):         if self.choices is not None:
0.56 /testbed/django/db/models/fields/__init__.py(554):         obj = copy.copy(self)
0.56 /testbed/django/db/models/fields/__init__.py(565):         obj = Empty()
0.56 /testbed/django/db/models/fields/__init__.py(566):         obj.__class__ = self.__class__
0.56 /testbed/django/db/models/fields/__init__.py(567):         obj.__dict__ = self.__dict__.copy()
0.56 /testbed/django/db/models/fields/__init__.py(568):         return obj
0.56 /testbed/django/db/models/fields/__init__.py(555):         if self.remote_field:
0.56 /testbed/django/db/models/fields/__init__.py(559):         memodict[id(self)] = obj
0.56 /testbed/django/db/models/fields/__init__.py(560):         return obj
0.56 /testbed/django/db/models/fields/__init__.py(782):         self.set_attributes_from_name(name)
0.56 /testbed/django/db/models/fields/__init__.py(769):         self.name = self.name or name
0.56 /testbed/django/db/models/fields/__init__.py(770):         self.attname, self.column = self.get_attname_column()
0.56 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.56 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.56 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.56 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.56 /testbed/django/db/models/fields/__init__.py(771):         self.concrete = self.column is not None
0.56 /testbed/django/db/models/fields/__init__.py(772):         if self.verbose_name is None and self.name:
0.56 /testbed/django/db/models/fields/__init__.py(783):         self.model = cls
0.56 /testbed/django/db/models/fields/__init__.py(784):         cls._meta.add_field(self, private=private_only)
0.56 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.56 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.56 /testbed/django/db/models/fields/__init__.py(529):             if (
0.56 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.56 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.56 /testbed/django/db/models/fields/__init__.py(529):             if (
0.56 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(785):         if self.column:
0.56 /testbed/django/db/models/fields/__init__.py(786):             setattr(cls, self.attname, self.descriptor_class(self))
0.56 /testbed/django/db/models/fields/__init__.py(787):         if self.choices is not None:
0.56 /testbed/django/db/models/fields/__init__.py(554):         obj = copy.copy(self)
0.56 /testbed/django/db/models/fields/__init__.py(565):         obj = Empty()
0.56 /testbed/django/db/models/fields/__init__.py(566):         obj.__class__ = self.__class__
0.56 /testbed/django/db/models/fields/__init__.py(567):         obj.__dict__ = self.__dict__.copy()
0.56 /testbed/django/db/models/fields/__init__.py(568):         return obj
0.56 /testbed/django/db/models/fields/__init__.py(555):         if self.remote_field:
0.56 /testbed/django/db/models/fields/__init__.py(559):         memodict[id(self)] = obj
0.56 /testbed/django/db/models/fields/__init__.py(560):         return obj
0.56 /testbed/django/db/models/fields/__init__.py(782):         self.set_attributes_from_name(name)
0.56 /testbed/django/db/models/fields/__init__.py(769):         self.name = self.name or name
0.56 /testbed/django/db/models/fields/__init__.py(770):         self.attname, self.column = self.get_attname_column()
0.56 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.56 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.56 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.56 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.56 /testbed/django/db/models/fields/__init__.py(771):         self.concrete = self.column is not None
0.56 /testbed/django/db/models/fields/__init__.py(772):         if self.verbose_name is None and self.name:
0.56 /testbed/django/db/models/fields/__init__.py(783):         self.model = cls
0.56 /testbed/django/db/models/fields/__init__.py(784):         cls._meta.add_field(self, private=private_only)
0.56 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.56 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.56 /testbed/django/db/models/fields/__init__.py(529):             if (
0.56 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.56 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.56 /testbed/django/db/models/fields/__init__.py(529):             if (
0.56 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(785):         if self.column:
0.56 /testbed/django/db/models/fields/__init__.py(786):             setattr(cls, self.attname, self.descriptor_class(self))
0.56 /testbed/django/db/models/fields/__init__.py(787):         if self.choices is not None:
0.56 /testbed/django/db/models/fields/__init__.py(554):         obj = copy.copy(self)
0.56 /testbed/django/db/models/fields/__init__.py(565):         obj = Empty()
0.56 /testbed/django/db/models/fields/__init__.py(566):         obj.__class__ = self.__class__
0.56 /testbed/django/db/models/fields/__init__.py(567):         obj.__dict__ = self.__dict__.copy()
0.56 /testbed/django/db/models/fields/__init__.py(568):         return obj
0.56 /testbed/django/db/models/fields/__init__.py(555):         if self.remote_field:
0.56 /testbed/django/db/models/fields/__init__.py(559):         memodict[id(self)] = obj
0.56 /testbed/django/db/models/fields/__init__.py(560):         return obj
0.56 /testbed/django/db/models/fields/__init__.py(782):         self.set_attributes_from_name(name)
0.56 /testbed/django/db/models/fields/__init__.py(769):         self.name = self.name or name
0.56 /testbed/django/db/models/fields/__init__.py(770):         self.attname, self.column = self.get_attname_column()
0.56 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.56 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.56 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.56 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.56 /testbed/django/db/models/fields/__init__.py(771):         self.concrete = self.column is not None
0.56 /testbed/django/db/models/fields/__init__.py(772):         if self.verbose_name is None and self.name:
0.56 /testbed/django/db/models/fields/__init__.py(783):         self.model = cls
0.56 /testbed/django/db/models/fields/__init__.py(784):         cls._meta.add_field(self, private=private_only)
0.56 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.56 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.56 /testbed/django/db/models/fields/__init__.py(529):             if (
0.56 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.56 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.56 /testbed/django/db/models/fields/__init__.py(529):             if (
0.56 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.56 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.56 /testbed/django/db/models/fields/__init__.py(529):             if (
0.56 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(785):         if self.column:
0.56 /testbed/django/db/models/fields/__init__.py(786):             setattr(cls, self.attname, self.descriptor_class(self))
0.56 /testbed/django/db/models/fields/__init__.py(787):         if self.choices is not None:
0.56 /testbed/django/db/models/fields/__init__.py(554):         obj = copy.copy(self)
0.56 /testbed/django/db/models/fields/__init__.py(565):         obj = Empty()
0.56 /testbed/django/db/models/fields/__init__.py(566):         obj.__class__ = self.__class__
0.56 /testbed/django/db/models/fields/__init__.py(567):         obj.__dict__ = self.__dict__.copy()
0.56 /testbed/django/db/models/fields/__init__.py(568):         return obj
0.56 /testbed/django/db/models/fields/__init__.py(555):         if self.remote_field:
0.56 /testbed/django/db/models/fields/__init__.py(559):         memodict[id(self)] = obj
0.56 /testbed/django/db/models/fields/__init__.py(560):         return obj
0.56 /testbed/django/db/models/fields/__init__.py(782):         self.set_attributes_from_name(name)
0.56 /testbed/django/db/models/fields/__init__.py(769):         self.name = self.name or name
0.56 /testbed/django/db/models/fields/__init__.py(770):         self.attname, self.column = self.get_attname_column()
0.56 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.56 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.56 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.56 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.56 /testbed/django/db/models/fields/__init__.py(771):         self.concrete = self.column is not None
0.56 /testbed/django/db/models/fields/__init__.py(772):         if self.verbose_name is None and self.name:
0.56 /testbed/django/db/models/fields/__init__.py(783):         self.model = cls
0.56 /testbed/django/db/models/fields/__init__.py(784):         cls._meta.add_field(self, private=private_only)
0.56 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.56 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.56 /testbed/django/db/models/fields/__init__.py(529):             if (
0.56 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.56 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.56 /testbed/django/db/models/fields/__init__.py(529):             if (
0.56 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.56 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.56 /testbed/django/db/models/fields/__init__.py(529):             if (
0.56 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(785):         if self.column:
0.56 /testbed/django/db/models/fields/__init__.py(786):             setattr(cls, self.attname, self.descriptor_class(self))
0.56 /testbed/django/db/models/fields/__init__.py(787):         if self.choices is not None:
0.56 /testbed/django/db/models/fields/__init__.py(554):         obj = copy.copy(self)
0.56 /testbed/django/db/models/fields/__init__.py(565):         obj = Empty()
0.56 /testbed/django/db/models/fields/__init__.py(566):         obj.__class__ = self.__class__
0.56 /testbed/django/db/models/fields/__init__.py(567):         obj.__dict__ = self.__dict__.copy()
0.56 /testbed/django/db/models/fields/__init__.py(568):         return obj
0.56 /testbed/django/db/models/fields/__init__.py(555):         if self.remote_field:
0.56 /testbed/django/db/models/fields/__init__.py(559):         memodict[id(self)] = obj
0.56 /testbed/django/db/models/fields/__init__.py(560):         return obj
0.56 /testbed/django/db/models/fields/__init__.py(1285):         super().contribute_to_class(cls, name, **kwargs)
0.56 /testbed/django/db/models/fields/__init__.py(782):         self.set_attributes_from_name(name)
0.56 /testbed/django/db/models/fields/__init__.py(769):         self.name = self.name or name
0.56 /testbed/django/db/models/fields/__init__.py(770):         self.attname, self.column = self.get_attname_column()
0.56 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.56 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.56 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.56 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.56 /testbed/django/db/models/fields/__init__.py(771):         self.concrete = self.column is not None
0.56 /testbed/django/db/models/fields/__init__.py(772):         if self.verbose_name is None and self.name:
0.56 /testbed/django/db/models/fields/__init__.py(783):         self.model = cls
0.56 /testbed/django/db/models/fields/__init__.py(784):         cls._meta.add_field(self, private=private_only)
0.56 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.56 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.56 /testbed/django/db/models/fields/__init__.py(529):             if (
0.56 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.56 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.56 /testbed/django/db/models/fields/__init__.py(529):             if (
0.56 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.56 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.56 /testbed/django/db/models/fields/__init__.py(529):             if (
0.56 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(785):         if self.column:
0.56 /testbed/django/db/models/fields/__init__.py(786):             setattr(cls, self.attname, self.descriptor_class(self))
0.56 /testbed/django/db/models/fields/__init__.py(787):         if self.choices is not None:
0.56 /testbed/django/db/models/fields/__init__.py(1286):         if not self.null:
0.56 /testbed/django/db/models/fields/__init__.py(1287):             setattr(
0.56 /testbed/django/db/models/fields/__init__.py(1288):                 cls, 'get_next_by_%s' % self.name,
0.56 /testbed/django/db/models/fields/__init__.py(1289):                 partialmethod(cls._get_next_or_previous_by_FIELD, field=self, is_next=True)
0.56 /testbed/django/db/models/fields/__init__.py(1287):             setattr(
0.56 /testbed/django/db/models/fields/__init__.py(1291):             setattr(
0.56 /testbed/django/db/models/fields/__init__.py(1292):                 cls, 'get_previous_by_%s' % self.name,
0.56 /testbed/django/db/models/fields/__init__.py(1293):                 partialmethod(cls._get_next_or_previous_by_FIELD, field=self, is_next=False)
0.56 /testbed/django/db/models/fields/__init__.py(1291):             setattr(
0.56 /testbed/django/db/models/fields/__init__.py(554):         obj = copy.copy(self)
0.56 /testbed/django/db/models/fields/__init__.py(565):         obj = Empty()
0.56 /testbed/django/db/models/fields/__init__.py(566):         obj.__class__ = self.__class__
0.56 /testbed/django/db/models/fields/__init__.py(567):         obj.__dict__ = self.__dict__.copy()
0.56 /testbed/django/db/models/fields/__init__.py(568):         return obj
0.56 /testbed/django/db/models/fields/__init__.py(555):         if self.remote_field:
0.56 /testbed/django/db/models/fields/__init__.py(556):             obj.remote_field = copy.copy(self.remote_field)
0.56 /testbed/django/db/models/fields/__init__.py(557):             if hasattr(self.remote_field, 'field') and self.remote_field.field is self:
0.56 /testbed/django/db/models/fields/__init__.py(558):                 obj.remote_field.field = obj
0.56 /testbed/django/db/models/fields/__init__.py(559):         memodict[id(self)] = obj
0.56 /testbed/django/db/models/fields/__init__.py(560):         return obj
0.56 /testbed/django/db/models/fields/__init__.py(782):         self.set_attributes_from_name(name)
0.56 /testbed/django/db/models/fields/__init__.py(769):         self.name = self.name or name
0.56 /testbed/django/db/models/fields/__init__.py(770):         self.attname, self.column = self.get_attname_column()
0.56 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.56 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.56 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.56 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.56 /testbed/django/db/models/fields/__init__.py(771):         self.concrete = self.column is not None
0.56 /testbed/django/db/models/fields/__init__.py(772):         if self.verbose_name is None and self.name:
0.56 /testbed/django/db/models/fields/__init__.py(783):         self.model = cls
0.56 /testbed/django/db/models/fields/__init__.py(784):         cls._meta.add_field(self, private=private_only)
0.56 /testbed/django/db/models/fields/__init__.py(785):         if self.column:
0.56 /testbed/django/db/models/fields/__init__.py(786):             setattr(cls, self.attname, self.descriptor_class(self))
0.56 /testbed/django/db/models/fields/__init__.py(787):         if self.choices is not None:
0.56 /testbed/django/db/models/fields/__init__.py(758):         return self._db_tablespace or settings.DEFAULT_INDEX_TABLESPACE
0.56 /testbed/django/db/models/fields/__init__.py(139):         self.name = name
0.56 /testbed/django/db/models/fields/__init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.56 /testbed/django/db/models/fields/__init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.56 /testbed/django/db/models/fields/__init__.py(142):         self.primary_key = primary_key
0.56 /testbed/django/db/models/fields/__init__.py(143):         self.max_length, self._unique = max_length, unique
0.56 /testbed/django/db/models/fields/__init__.py(144):         self.blank, self.null = blank, null
0.56 /testbed/django/db/models/fields/__init__.py(145):         self.remote_field = rel
0.56 /testbed/django/db/models/fields/__init__.py(146):         self.is_relation = self.remote_field is not None
0.56 /testbed/django/db/models/fields/__init__.py(147):         self.default = default
0.56 /testbed/django/db/models/fields/__init__.py(148):         self.editable = editable
0.56 /testbed/django/db/models/fields/__init__.py(149):         self.serialize = serialize
0.56 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_date = unique_for_date
0.56 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_month = unique_for_month
0.56 /testbed/django/db/models/fields/__init__.py(152):         self.unique_for_year = unique_for_year
0.56 /testbed/django/db/models/fields/__init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.56 /testbed/django/db/models/fields/__init__.py(155):         self.choices = choices
0.56 /testbed/django/db/models/fields/__init__.py(156):         self.help_text = help_text
0.56 /testbed/django/db/models/fields/__init__.py(157):         self.db_index = db_index
0.56 /testbed/django/db/models/fields/__init__.py(158):         self.db_column = db_column
0.56 /testbed/django/db/models/fields/__init__.py(159):         self._db_tablespace = db_tablespace
0.56 /testbed/django/db/models/fields/__init__.py(160):         self.auto_created = auto_created
0.56 /testbed/django/db/models/fields/__init__.py(163):         if auto_created:
0.56 /testbed/django/db/models/fields/__init__.py(167):             self.creation_counter = Field.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(168):             Field.creation_counter += 1
0.56 /testbed/django/db/models/fields/__init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.56 /testbed/django/db/models/fields/__init__.py(172):         messages = {}
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(175):         messages.update(error_messages or {})
0.56 /testbed/django/db/models/fields/__init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.56 /testbed/django/db/models/fields/__init__.py(177):         self.error_messages = messages
0.56 /testbed/django/db/models/fields/__init__.py(758):         return self._db_tablespace or settings.DEFAULT_INDEX_TABLESPACE
0.56 /testbed/django/db/models/fields/__init__.py(139):         self.name = name
0.56 /testbed/django/db/models/fields/__init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.56 /testbed/django/db/models/fields/__init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.56 /testbed/django/db/models/fields/__init__.py(142):         self.primary_key = primary_key
0.56 /testbed/django/db/models/fields/__init__.py(143):         self.max_length, self._unique = max_length, unique
0.56 /testbed/django/db/models/fields/__init__.py(144):         self.blank, self.null = blank, null
0.56 /testbed/django/db/models/fields/__init__.py(145):         self.remote_field = rel
0.56 /testbed/django/db/models/fields/__init__.py(146):         self.is_relation = self.remote_field is not None
0.56 /testbed/django/db/models/fields/__init__.py(147):         self.default = default
0.56 /testbed/django/db/models/fields/__init__.py(148):         self.editable = editable
0.56 /testbed/django/db/models/fields/__init__.py(149):         self.serialize = serialize
0.56 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_date = unique_for_date
0.56 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_month = unique_for_month
0.56 /testbed/django/db/models/fields/__init__.py(152):         self.unique_for_year = unique_for_year
0.56 /testbed/django/db/models/fields/__init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.56 /testbed/django/db/models/fields/__init__.py(155):         self.choices = choices
0.56 /testbed/django/db/models/fields/__init__.py(156):         self.help_text = help_text
0.56 /testbed/django/db/models/fields/__init__.py(157):         self.db_index = db_index
0.56 /testbed/django/db/models/fields/__init__.py(158):         self.db_column = db_column
0.56 /testbed/django/db/models/fields/__init__.py(159):         self._db_tablespace = db_tablespace
0.56 /testbed/django/db/models/fields/__init__.py(160):         self.auto_created = auto_created
0.56 /testbed/django/db/models/fields/__init__.py(163):         if auto_created:
0.56 /testbed/django/db/models/fields/__init__.py(167):             self.creation_counter = Field.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(168):             Field.creation_counter += 1
0.56 /testbed/django/db/models/fields/__init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.56 /testbed/django/db/models/fields/__init__.py(172):         messages = {}
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(175):         messages.update(error_messages or {})
0.56 /testbed/django/db/models/fields/__init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.56 /testbed/django/db/models/fields/__init__.py(177):         self.error_messages = messages
0.56 /testbed/django/db/models/fields/__init__.py(782):         self.set_attributes_from_name(name)
0.56 /testbed/django/db/models/fields/__init__.py(769):         self.name = self.name or name
0.56 /testbed/django/db/models/fields/__init__.py(770):         self.attname, self.column = self.get_attname_column()
0.56 /testbed/django/db/models/fields/__init__.py(771):         self.concrete = self.column is not None
0.56 /testbed/django/db/models/fields/__init__.py(772):         if self.verbose_name is None and self.name:
0.56 /testbed/django/db/models/fields/__init__.py(773):             self.verbose_name = self.name.replace('_', ' ')
0.56 /testbed/django/db/models/fields/__init__.py(783):         self.model = cls
0.56 /testbed/django/db/models/fields/__init__.py(784):         cls._meta.add_field(self, private=private_only)
0.56 /testbed/django/db/models/fields/__init__.py(785):         if self.column:
0.56 /testbed/django/db/models/fields/__init__.py(786):             setattr(cls, self.attname, self.descriptor_class(self))
0.56 /testbed/django/db/models/fields/__init__.py(787):         if self.choices is not None:
0.56 /testbed/django/db/models/fields/__init__.py(782):         self.set_attributes_from_name(name)
0.56 /testbed/django/db/models/fields/__init__.py(769):         self.name = self.name or name
0.56 /testbed/django/db/models/fields/__init__.py(770):         self.attname, self.column = self.get_attname_column()
0.56 /testbed/django/db/models/fields/__init__.py(771):         self.concrete = self.column is not None
0.56 /testbed/django/db/models/fields/__init__.py(772):         if self.verbose_name is None and self.name:
0.56 /testbed/django/db/models/fields/__init__.py(773):             self.verbose_name = self.name.replace('_', ' ')
0.56 /testbed/django/db/models/fields/__init__.py(783):         self.model = cls
0.56 /testbed/django/db/models/fields/__init__.py(784):         cls._meta.add_field(self, private=private_only)
0.56 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.56 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.56 /testbed/django/db/models/fields/__init__.py(529):             if (
0.56 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(785):         if self.column:
0.56 /testbed/django/db/models/fields/__init__.py(786):             setattr(cls, self.attname, self.descriptor_class(self))
0.56 /testbed/django/db/models/fields/__init__.py(787):         if self.choices is not None:
0.56 /testbed/django/db/models/fields/__init__.py(2513):         return issubclass(subclass, self._subclasses) or super().__subclasscheck__(subclass)
0.56 /testbed/django/db/models/fields/__init__.py(2507):         return (BigAutoField, SmallAutoField)
0.56 /testbed/django/db/models/fields/__init__.py(2439):         kwargs['blank'] = True
0.56 /testbed/django/db/models/fields/__init__.py(2440):         super().__init__(*args, **kwargs)
0.56 /testbed/django/db/models/fields/__init__.py(139):         self.name = name
0.56 /testbed/django/db/models/fields/__init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.56 /testbed/django/db/models/fields/__init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.56 /testbed/django/db/models/fields/__init__.py(142):         self.primary_key = primary_key
0.56 /testbed/django/db/models/fields/__init__.py(143):         self.max_length, self._unique = max_length, unique
0.56 /testbed/django/db/models/fields/__init__.py(144):         self.blank, self.null = blank, null
0.56 /testbed/django/db/models/fields/__init__.py(145):         self.remote_field = rel
0.56 /testbed/django/db/models/fields/__init__.py(146):         self.is_relation = self.remote_field is not None
0.56 /testbed/django/db/models/fields/__init__.py(147):         self.default = default
0.56 /testbed/django/db/models/fields/__init__.py(148):         self.editable = editable
0.56 /testbed/django/db/models/fields/__init__.py(149):         self.serialize = serialize
0.56 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_date = unique_for_date
0.56 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_month = unique_for_month
0.56 /testbed/django/db/models/fields/__init__.py(152):         self.unique_for_year = unique_for_year
0.56 /testbed/django/db/models/fields/__init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.56 /testbed/django/db/models/fields/__init__.py(155):         self.choices = choices
0.56 /testbed/django/db/models/fields/__init__.py(156):         self.help_text = help_text
0.56 /testbed/django/db/models/fields/__init__.py(157):         self.db_index = db_index
0.56 /testbed/django/db/models/fields/__init__.py(158):         self.db_column = db_column
0.56 /testbed/django/db/models/fields/__init__.py(159):         self._db_tablespace = db_tablespace
0.56 /testbed/django/db/models/fields/__init__.py(160):         self.auto_created = auto_created
0.56 /testbed/django/db/models/fields/__init__.py(163):         if auto_created:
0.56 /testbed/django/db/models/fields/__init__.py(164):             self.creation_counter = Field.auto_creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(165):             Field.auto_creation_counter -= 1
0.56 /testbed/django/db/models/fields/__init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.56 /testbed/django/db/models/fields/__init__.py(172):         messages = {}
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(175):         messages.update(error_messages or {})
0.56 /testbed/django/db/models/fields/__init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.56 /testbed/django/db/models/fields/__init__.py(177):         self.error_messages = messages
0.56 /testbed/django/db/models/fields/__init__.py(2476):         if cls._meta.auto_field:
0.56 /testbed/django/db/models/fields/__init__.py(2481):         super().contribute_to_class(cls, name, **kwargs)
0.56 /testbed/django/db/models/fields/__init__.py(782):         self.set_attributes_from_name(name)
0.56 /testbed/django/db/models/fields/__init__.py(769):         self.name = self.name or name
0.56 /testbed/django/db/models/fields/__init__.py(770):         self.attname, self.column = self.get_attname_column()
0.56 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.56 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.56 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.56 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.56 /testbed/django/db/models/fields/__init__.py(771):         self.concrete = self.column is not None
0.56 /testbed/django/db/models/fields/__init__.py(772):         if self.verbose_name is None and self.name:
0.56 /testbed/django/db/models/fields/__init__.py(783):         self.model = cls
0.56 /testbed/django/db/models/fields/__init__.py(784):         cls._meta.add_field(self, private=private_only)
0.56 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.56 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.56 /testbed/django/db/models/fields/__init__.py(529):             if (
0.56 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.56 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.56 /testbed/django/db/models/fields/__init__.py(529):             if (
0.56 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(785):         if self.column:
0.56 /testbed/django/db/models/fields/__init__.py(786):             setattr(cls, self.attname, self.descriptor_class(self))
0.56 /testbed/django/db/models/fields/__init__.py(787):         if self.choices is not None:
0.56 /testbed/django/db/models/fields/__init__.py(2482):         cls._meta.auto_field = self
0.56 /testbed/django/db/models/fields/__init__.py(554):         obj = copy.copy(self)
0.56 /testbed/django/db/models/fields/__init__.py(565):         obj = Empty()
0.56 /testbed/django/db/models/fields/__init__.py(566):         obj.__class__ = self.__class__
0.56 /testbed/django/db/models/fields/__init__.py(567):         obj.__dict__ = self.__dict__.copy()
0.56 /testbed/django/db/models/fields/__init__.py(568):         return obj
0.56 /testbed/django/db/models/fields/__init__.py(555):         if self.remote_field:
0.56 /testbed/django/db/models/fields/__init__.py(556):             obj.remote_field = copy.copy(self.remote_field)
0.56 /testbed/django/db/models/fields/__init__.py(557):             if hasattr(self.remote_field, 'field') and self.remote_field.field is self:
0.56 /testbed/django/db/models/fields/__init__.py(558):                 obj.remote_field.field = obj
0.56 /testbed/django/db/models/fields/__init__.py(559):         memodict[id(self)] = obj
0.56 /testbed/django/db/models/fields/__init__.py(560):         return obj
0.56 /testbed/django/db/models/fields/__init__.py(782):         self.set_attributes_from_name(name)
0.56 /testbed/django/db/models/fields/__init__.py(769):         self.name = self.name or name
0.56 /testbed/django/db/models/fields/__init__.py(770):         self.attname, self.column = self.get_attname_column()
0.56 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.56 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.56 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.56 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.56 /testbed/django/db/models/fields/__init__.py(771):         self.concrete = self.column is not None
0.56 /testbed/django/db/models/fields/__init__.py(772):         if self.verbose_name is None and self.name:
0.56 /testbed/django/db/models/fields/__init__.py(783):         self.model = cls
0.56 /testbed/django/db/models/fields/__init__.py(784):         cls._meta.add_field(self, private=private_only)
0.56 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.56 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.56 /testbed/django/db/models/fields/__init__.py(529):             if (
0.56 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(785):         if self.column:
0.56 /testbed/django/db/models/fields/__init__.py(786):             setattr(cls, self.attname, self.descriptor_class(self))
0.56 /testbed/django/db/models/fields/__init__.py(787):         if self.choices is not None:
0.56 /testbed/django/db/models/fields/__init__.py(758):         return self._db_tablespace or settings.DEFAULT_INDEX_TABLESPACE
0.56 /testbed/django/db/models/fields/__init__.py(139):         self.name = name
0.56 /testbed/django/db/models/fields/__init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.56 /testbed/django/db/models/fields/__init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.56 /testbed/django/db/models/fields/__init__.py(142):         self.primary_key = primary_key
0.56 /testbed/django/db/models/fields/__init__.py(143):         self.max_length, self._unique = max_length, unique
0.56 /testbed/django/db/models/fields/__init__.py(144):         self.blank, self.null = blank, null
0.56 /testbed/django/db/models/fields/__init__.py(145):         self.remote_field = rel
0.56 /testbed/django/db/models/fields/__init__.py(146):         self.is_relation = self.remote_field is not None
0.56 /testbed/django/db/models/fields/__init__.py(147):         self.default = default
0.56 /testbed/django/db/models/fields/__init__.py(148):         self.editable = editable
0.56 /testbed/django/db/models/fields/__init__.py(149):         self.serialize = serialize
0.56 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_date = unique_for_date
0.56 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_month = unique_for_month
0.56 /testbed/django/db/models/fields/__init__.py(152):         self.unique_for_year = unique_for_year
0.56 /testbed/django/db/models/fields/__init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.56 /testbed/django/db/models/fields/__init__.py(155):         self.choices = choices
0.56 /testbed/django/db/models/fields/__init__.py(156):         self.help_text = help_text
0.56 /testbed/django/db/models/fields/__init__.py(157):         self.db_index = db_index
0.56 /testbed/django/db/models/fields/__init__.py(158):         self.db_column = db_column
0.56 /testbed/django/db/models/fields/__init__.py(159):         self._db_tablespace = db_tablespace
0.56 /testbed/django/db/models/fields/__init__.py(160):         self.auto_created = auto_created
0.56 /testbed/django/db/models/fields/__init__.py(163):         if auto_created:
0.56 /testbed/django/db/models/fields/__init__.py(167):             self.creation_counter = Field.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(168):             Field.creation_counter += 1
0.56 /testbed/django/db/models/fields/__init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.56 /testbed/django/db/models/fields/__init__.py(172):         messages = {}
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(175):         messages.update(error_messages or {})
0.56 /testbed/django/db/models/fields/__init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.56 /testbed/django/db/models/fields/__init__.py(177):         self.error_messages = messages
0.56 /testbed/django/db/models/fields/__init__.py(758):         return self._db_tablespace or settings.DEFAULT_INDEX_TABLESPACE
0.56 /testbed/django/db/models/fields/__init__.py(139):         self.name = name
0.56 /testbed/django/db/models/fields/__init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.56 /testbed/django/db/models/fields/__init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.56 /testbed/django/db/models/fields/__init__.py(142):         self.primary_key = primary_key
0.56 /testbed/django/db/models/fields/__init__.py(143):         self.max_length, self._unique = max_length, unique
0.56 /testbed/django/db/models/fields/__init__.py(144):         self.blank, self.null = blank, null
0.56 /testbed/django/db/models/fields/__init__.py(145):         self.remote_field = rel
0.56 /testbed/django/db/models/fields/__init__.py(146):         self.is_relation = self.remote_field is not None
0.56 /testbed/django/db/models/fields/__init__.py(147):         self.default = default
0.56 /testbed/django/db/models/fields/__init__.py(148):         self.editable = editable
0.56 /testbed/django/db/models/fields/__init__.py(149):         self.serialize = serialize
0.56 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_date = unique_for_date
0.56 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_month = unique_for_month
0.56 /testbed/django/db/models/fields/__init__.py(152):         self.unique_for_year = unique_for_year
0.56 /testbed/django/db/models/fields/__init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.56 /testbed/django/db/models/fields/__init__.py(155):         self.choices = choices
0.56 /testbed/django/db/models/fields/__init__.py(156):         self.help_text = help_text
0.56 /testbed/django/db/models/fields/__init__.py(157):         self.db_index = db_index
0.56 /testbed/django/db/models/fields/__init__.py(158):         self.db_column = db_column
0.56 /testbed/django/db/models/fields/__init__.py(159):         self._db_tablespace = db_tablespace
0.56 /testbed/django/db/models/fields/__init__.py(160):         self.auto_created = auto_created
0.56 /testbed/django/db/models/fields/__init__.py(163):         if auto_created:
0.56 /testbed/django/db/models/fields/__init__.py(167):             self.creation_counter = Field.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(168):             Field.creation_counter += 1
0.56 /testbed/django/db/models/fields/__init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.56 /testbed/django/db/models/fields/__init__.py(172):         messages = {}
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(175):         messages.update(error_messages or {})
0.56 /testbed/django/db/models/fields/__init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.56 /testbed/django/db/models/fields/__init__.py(177):         self.error_messages = messages
0.56 /testbed/django/db/models/fields/__init__.py(782):         self.set_attributes_from_name(name)
0.56 /testbed/django/db/models/fields/__init__.py(769):         self.name = self.name or name
0.56 /testbed/django/db/models/fields/__init__.py(770):         self.attname, self.column = self.get_attname_column()
0.56 /testbed/django/db/models/fields/__init__.py(771):         self.concrete = self.column is not None
0.56 /testbed/django/db/models/fields/__init__.py(772):         if self.verbose_name is None and self.name:
0.56 /testbed/django/db/models/fields/__init__.py(773):             self.verbose_name = self.name.replace('_', ' ')
0.56 /testbed/django/db/models/fields/__init__.py(783):         self.model = cls
0.56 /testbed/django/db/models/fields/__init__.py(784):         cls._meta.add_field(self, private=private_only)
0.56 /testbed/django/db/models/fields/__init__.py(785):         if self.column:
0.56 /testbed/django/db/models/fields/__init__.py(786):             setattr(cls, self.attname, self.descriptor_class(self))
0.56 /testbed/django/db/models/fields/__init__.py(787):         if self.choices is not None:
0.56 /testbed/django/db/models/fields/__init__.py(782):         self.set_attributes_from_name(name)
0.56 /testbed/django/db/models/fields/__init__.py(769):         self.name = self.name or name
0.56 /testbed/django/db/models/fields/__init__.py(770):         self.attname, self.column = self.get_attname_column()
0.56 /testbed/django/db/models/fields/__init__.py(771):         self.concrete = self.column is not None
0.56 /testbed/django/db/models/fields/__init__.py(772):         if self.verbose_name is None and self.name:
0.56 /testbed/django/db/models/fields/__init__.py(773):             self.verbose_name = self.name.replace('_', ' ')
0.56 /testbed/django/db/models/fields/__init__.py(783):         self.model = cls
0.56 /testbed/django/db/models/fields/__init__.py(784):         cls._meta.add_field(self, private=private_only)
0.56 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.56 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.56 /testbed/django/db/models/fields/__init__.py(529):             if (
0.56 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(785):         if self.column:
0.56 /testbed/django/db/models/fields/__init__.py(786):             setattr(cls, self.attname, self.descriptor_class(self))
0.56 /testbed/django/db/models/fields/__init__.py(787):         if self.choices is not None:
0.56 /testbed/django/db/models/fields/__init__.py(2513):         return issubclass(subclass, self._subclasses) or super().__subclasscheck__(subclass)
0.56 /testbed/django/db/models/fields/__init__.py(2507):         return (BigAutoField, SmallAutoField)
0.56 /testbed/django/db/models/fields/__init__.py(2439):         kwargs['blank'] = True
0.56 /testbed/django/db/models/fields/__init__.py(2440):         super().__init__(*args, **kwargs)
0.56 /testbed/django/db/models/fields/__init__.py(139):         self.name = name
0.56 /testbed/django/db/models/fields/__init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.56 /testbed/django/db/models/fields/__init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.56 /testbed/django/db/models/fields/__init__.py(142):         self.primary_key = primary_key
0.56 /testbed/django/db/models/fields/__init__.py(143):         self.max_length, self._unique = max_length, unique
0.56 /testbed/django/db/models/fields/__init__.py(144):         self.blank, self.null = blank, null
0.56 /testbed/django/db/models/fields/__init__.py(145):         self.remote_field = rel
0.56 /testbed/django/db/models/fields/__init__.py(146):         self.is_relation = self.remote_field is not None
0.56 /testbed/django/db/models/fields/__init__.py(147):         self.default = default
0.56 /testbed/django/db/models/fields/__init__.py(148):         self.editable = editable
0.56 /testbed/django/db/models/fields/__init__.py(149):         self.serialize = serialize
0.56 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_date = unique_for_date
0.56 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_month = unique_for_month
0.56 /testbed/django/db/models/fields/__init__.py(152):         self.unique_for_year = unique_for_year
0.56 /testbed/django/db/models/fields/__init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.56 /testbed/django/db/models/fields/__init__.py(155):         self.choices = choices
0.56 /testbed/django/db/models/fields/__init__.py(156):         self.help_text = help_text
0.56 /testbed/django/db/models/fields/__init__.py(157):         self.db_index = db_index
0.56 /testbed/django/db/models/fields/__init__.py(158):         self.db_column = db_column
0.56 /testbed/django/db/models/fields/__init__.py(159):         self._db_tablespace = db_tablespace
0.56 /testbed/django/db/models/fields/__init__.py(160):         self.auto_created = auto_created
0.56 /testbed/django/db/models/fields/__init__.py(163):         if auto_created:
0.57 /testbed/django/db/models/fields/__init__.py(164):             self.creation_counter = Field.auto_creation_counter
0.57 /testbed/django/db/models/fields/__init__.py(165):             Field.auto_creation_counter -= 1
0.57 /testbed/django/db/models/fields/__init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.57 /testbed/django/db/models/fields/__init__.py(172):         messages = {}
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(175):         messages.update(error_messages or {})
0.57 /testbed/django/db/models/fields/__init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.57 /testbed/django/db/models/fields/__init__.py(177):         self.error_messages = messages
0.57 /testbed/django/db/models/fields/__init__.py(2476):         if cls._meta.auto_field:
0.57 /testbed/django/db/models/fields/__init__.py(2481):         super().contribute_to_class(cls, name, **kwargs)
0.57 /testbed/django/db/models/fields/__init__.py(782):         self.set_attributes_from_name(name)
0.57 /testbed/django/db/models/fields/__init__.py(769):         self.name = self.name or name
0.57 /testbed/django/db/models/fields/__init__.py(770):         self.attname, self.column = self.get_attname_column()
0.57 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.57 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.57 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.57 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.57 /testbed/django/db/models/fields/__init__.py(771):         self.concrete = self.column is not None
0.57 /testbed/django/db/models/fields/__init__.py(772):         if self.verbose_name is None and self.name:
0.57 /testbed/django/db/models/fields/__init__.py(783):         self.model = cls
0.57 /testbed/django/db/models/fields/__init__.py(784):         cls._meta.add_field(self, private=private_only)
0.57 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.57 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.57 /testbed/django/db/models/fields/__init__.py(529):             if (
0.57 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.57 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.57 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.57 /testbed/django/db/models/fields/__init__.py(529):             if (
0.57 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.57 /testbed/django/db/models/fields/__init__.py(785):         if self.column:
0.57 /testbed/django/db/models/fields/__init__.py(786):             setattr(cls, self.attname, self.descriptor_class(self))
0.57 /testbed/django/db/models/fields/__init__.py(787):         if self.choices is not None:
0.57 /testbed/django/db/models/fields/__init__.py(2482):         cls._meta.auto_field = self
0.57 /testbed/django/db/models/fields/__init__.py(2513):         return issubclass(subclass, self._subclasses) or super().__subclasscheck__(subclass)
0.57 /testbed/django/db/models/fields/__init__.py(2507):         return (BigAutoField, SmallAutoField)
0.57 /testbed/django/db/models/fields/__init__.py(2439):         kwargs['blank'] = True
0.57 /testbed/django/db/models/fields/__init__.py(2440):         super().__init__(*args, **kwargs)
0.57 /testbed/django/db/models/fields/__init__.py(139):         self.name = name
0.57 /testbed/django/db/models/fields/__init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.57 /testbed/django/db/models/fields/__init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.57 /testbed/django/db/models/fields/__init__.py(142):         self.primary_key = primary_key
0.57 /testbed/django/db/models/fields/__init__.py(143):         self.max_length, self._unique = max_length, unique
0.57 /testbed/django/db/models/fields/__init__.py(144):         self.blank, self.null = blank, null
0.57 /testbed/django/db/models/fields/__init__.py(145):         self.remote_field = rel
0.57 /testbed/django/db/models/fields/__init__.py(146):         self.is_relation = self.remote_field is not None
0.57 /testbed/django/db/models/fields/__init__.py(147):         self.default = default
0.57 /testbed/django/db/models/fields/__init__.py(148):         self.editable = editable
0.57 /testbed/django/db/models/fields/__init__.py(149):         self.serialize = serialize
0.57 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_date = unique_for_date
0.57 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_month = unique_for_month
0.57 /testbed/django/db/models/fields/__init__.py(152):         self.unique_for_year = unique_for_year
0.57 /testbed/django/db/models/fields/__init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.57 /testbed/django/db/models/fields/__init__.py(155):         self.choices = choices
0.57 /testbed/django/db/models/fields/__init__.py(156):         self.help_text = help_text
0.57 /testbed/django/db/models/fields/__init__.py(157):         self.db_index = db_index
0.57 /testbed/django/db/models/fields/__init__.py(158):         self.db_column = db_column
0.57 /testbed/django/db/models/fields/__init__.py(159):         self._db_tablespace = db_tablespace
0.57 /testbed/django/db/models/fields/__init__.py(160):         self.auto_created = auto_created
0.57 /testbed/django/db/models/fields/__init__.py(163):         if auto_created:
0.57 /testbed/django/db/models/fields/__init__.py(164):             self.creation_counter = Field.auto_creation_counter
0.57 /testbed/django/db/models/fields/__init__.py(165):             Field.auto_creation_counter -= 1
0.57 /testbed/django/db/models/fields/__init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.57 /testbed/django/db/models/fields/__init__.py(172):         messages = {}
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(175):         messages.update(error_messages or {})
0.57 /testbed/django/db/models/fields/__init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.57 /testbed/django/db/models/fields/__init__.py(177):         self.error_messages = messages
0.57 /testbed/django/db/models/fields/__init__.py(2476):         if cls._meta.auto_field:
0.57 /testbed/django/db/models/fields/__init__.py(2481):         super().contribute_to_class(cls, name, **kwargs)
0.57 /testbed/django/db/models/fields/__init__.py(782):         self.set_attributes_from_name(name)
0.57 /testbed/django/db/models/fields/__init__.py(769):         self.name = self.name or name
0.57 /testbed/django/db/models/fields/__init__.py(770):         self.attname, self.column = self.get_attname_column()
0.57 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.57 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.57 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.57 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.57 /testbed/django/db/models/fields/__init__.py(771):         self.concrete = self.column is not None
0.57 /testbed/django/db/models/fields/__init__.py(772):         if self.verbose_name is None and self.name:
0.57 /testbed/django/db/models/fields/__init__.py(783):         self.model = cls
0.57 /testbed/django/db/models/fields/__init__.py(784):         cls._meta.add_field(self, private=private_only)
0.57 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.57 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.57 /testbed/django/db/models/fields/__init__.py(529):             if (
0.57 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.57 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.57 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.57 /testbed/django/db/models/fields/__init__.py(529):             if (
0.57 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.57 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.57 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.57 /testbed/django/db/models/fields/__init__.py(529):             if (
0.57 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.57 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.57 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.57 /testbed/django/db/models/fields/__init__.py(529):             if (
0.57 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.57 /testbed/django/db/models/fields/__init__.py(785):         if self.column:
0.57 /testbed/django/db/models/fields/__init__.py(786):             setattr(cls, self.attname, self.descriptor_class(self))
0.57 /testbed/django/db/models/fields/__init__.py(787):         if self.choices is not None:
0.57 /testbed/django/db/models/fields/__init__.py(2482):         cls._meta.auto_field = self
0.57 /testbed/django/db/models/fields/__init__.py(1011):         super().__init__(*args, **kwargs)
0.57 /testbed/django/db/models/fields/__init__.py(139):         self.name = name
0.57 /testbed/django/db/models/fields/__init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.57 /testbed/django/db/models/fields/__init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.57 /testbed/django/db/models/fields/__init__.py(142):         self.primary_key = primary_key
0.57 /testbed/django/db/models/fields/__init__.py(143):         self.max_length, self._unique = max_length, unique
0.57 /testbed/django/db/models/fields/__init__.py(144):         self.blank, self.null = blank, null
0.57 /testbed/django/db/models/fields/__init__.py(145):         self.remote_field = rel
0.57 /testbed/django/db/models/fields/__init__.py(146):         self.is_relation = self.remote_field is not None
0.57 /testbed/django/db/models/fields/__init__.py(147):         self.default = default
0.57 /testbed/django/db/models/fields/__init__.py(148):         self.editable = editable
0.57 /testbed/django/db/models/fields/__init__.py(149):         self.serialize = serialize
0.57 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_date = unique_for_date
0.57 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_month = unique_for_month
0.57 /testbed/django/db/models/fields/__init__.py(152):         self.unique_for_year = unique_for_year
0.57 /testbed/django/db/models/fields/__init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.57 /testbed/django/db/models/fields/__init__.py(155):         self.choices = choices
0.57 /testbed/django/db/models/fields/__init__.py(156):         self.help_text = help_text
0.57 /testbed/django/db/models/fields/__init__.py(157):         self.db_index = db_index
0.57 /testbed/django/db/models/fields/__init__.py(158):         self.db_column = db_column
0.57 /testbed/django/db/models/fields/__init__.py(159):         self._db_tablespace = db_tablespace
0.57 /testbed/django/db/models/fields/__init__.py(160):         self.auto_created = auto_created
0.57 /testbed/django/db/models/fields/__init__.py(163):         if auto_created:
0.57 /testbed/django/db/models/fields/__init__.py(167):             self.creation_counter = Field.creation_counter
0.57 /testbed/django/db/models/fields/__init__.py(168):             Field.creation_counter += 1
0.57 /testbed/django/db/models/fields/__init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.57 /testbed/django/db/models/fields/__init__.py(172):         messages = {}
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(175):         messages.update(error_messages or {})
0.57 /testbed/django/db/models/fields/__init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.57 /testbed/django/db/models/fields/__init__.py(177):         self.error_messages = messages
0.57 /testbed/django/db/models/fields/__init__.py(1012):         self.db_collation = db_collation
0.57 /testbed/django/db/models/fields/__init__.py(1013):         if self.max_length is not None:
0.57 /testbed/django/db/models/fields/__init__.py(1014):             self.validators.append(validators.MaxLengthValidator(self.max_length))
0.57 /testbed/django/db/models/fields/__init__.py(615):         return [*self.default_validators, *self._validators]
0.57 /testbed/django/db/models/fields/__init__.py(1011):         super().__init__(*args, **kwargs)
0.57 /testbed/django/db/models/fields/__init__.py(139):         self.name = name
0.57 /testbed/django/db/models/fields/__init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.57 /testbed/django/db/models/fields/__init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.57 /testbed/django/db/models/fields/__init__.py(142):         self.primary_key = primary_key
0.57 /testbed/django/db/models/fields/__init__.py(143):         self.max_length, self._unique = max_length, unique
0.57 /testbed/django/db/models/fields/__init__.py(144):         self.blank, self.null = blank, null
0.57 /testbed/django/db/models/fields/__init__.py(145):         self.remote_field = rel
0.57 /testbed/django/db/models/fields/__init__.py(146):         self.is_relation = self.remote_field is not None
0.57 /testbed/django/db/models/fields/__init__.py(147):         self.default = default
0.57 /testbed/django/db/models/fields/__init__.py(148):         self.editable = editable
0.57 /testbed/django/db/models/fields/__init__.py(149):         self.serialize = serialize
0.57 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_date = unique_for_date
0.57 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_month = unique_for_month
0.57 /testbed/django/db/models/fields/__init__.py(152):         self.unique_for_year = unique_for_year
0.57 /testbed/django/db/models/fields/__init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.57 /testbed/django/db/models/fields/__init__.py(155):         self.choices = choices
0.57 /testbed/django/db/models/fields/__init__.py(156):         self.help_text = help_text
0.57 /testbed/django/db/models/fields/__init__.py(157):         self.db_index = db_index
0.57 /testbed/django/db/models/fields/__init__.py(158):         self.db_column = db_column
0.57 /testbed/django/db/models/fields/__init__.py(159):         self._db_tablespace = db_tablespace
0.57 /testbed/django/db/models/fields/__init__.py(160):         self.auto_created = auto_created
0.57 /testbed/django/db/models/fields/__init__.py(163):         if auto_created:
0.57 /testbed/django/db/models/fields/__init__.py(167):             self.creation_counter = Field.creation_counter
0.57 /testbed/django/db/models/fields/__init__.py(168):             Field.creation_counter += 1
0.57 /testbed/django/db/models/fields/__init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.57 /testbed/django/db/models/fields/__init__.py(172):         messages = {}
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(175):         messages.update(error_messages or {})
0.57 /testbed/django/db/models/fields/__init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.57 /testbed/django/db/models/fields/__init__.py(177):         self.error_messages = messages
0.57 /testbed/django/db/models/fields/__init__.py(1012):         self.db_collation = db_collation
0.57 /testbed/django/db/models/fields/__init__.py(1013):         if self.max_length is not None:
0.57 /testbed/django/db/models/fields/__init__.py(1014):             self.validators.append(validators.MaxLengthValidator(self.max_length))
0.57 /testbed/django/db/models/fields/__init__.py(615):         return [*self.default_validators, *self._validators]
0.57 /testbed/django/db/models/fields/__init__.py(782):         self.set_attributes_from_name(name)
0.57 /testbed/django/db/models/fields/__init__.py(769):         self.name = self.name or name
0.57 /testbed/django/db/models/fields/__init__.py(770):         self.attname, self.column = self.get_attname_column()
0.57 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.57 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.57 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.57 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.57 /testbed/django/db/models/fields/__init__.py(771):         self.concrete = self.column is not None
0.57 /testbed/django/db/models/fields/__init__.py(772):         if self.verbose_name is None and self.name:
0.57 /testbed/django/db/models/fields/__init__.py(783):         self.model = cls
0.57 /testbed/django/db/models/fields/__init__.py(784):         cls._meta.add_field(self, private=private_only)
0.57 /testbed/django/db/models/fields/__init__.py(785):         if self.column:
0.57 /testbed/django/db/models/fields/__init__.py(786):             setattr(cls, self.attname, self.descriptor_class(self))
0.57 /testbed/django/db/models/fields/__init__.py(787):         if self.choices is not None:
0.57 /testbed/django/db/models/fields/__init__.py(782):         self.set_attributes_from_name(name)
0.57 /testbed/django/db/models/fields/__init__.py(769):         self.name = self.name or name
0.57 /testbed/django/db/models/fields/__init__.py(770):         self.attname, self.column = self.get_attname_column()
0.57 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.57 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.57 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.57 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.57 /testbed/django/db/models/fields/__init__.py(771):         self.concrete = self.column is not None
0.57 /testbed/django/db/models/fields/__init__.py(772):         if self.verbose_name is None and self.name:
0.57 /testbed/django/db/models/fields/__init__.py(783):         self.model = cls
0.57 /testbed/django/db/models/fields/__init__.py(784):         cls._meta.add_field(self, private=private_only)
0.57 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.57 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.57 /testbed/django/db/models/fields/__init__.py(529):             if (
0.57 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.57 /testbed/django/db/models/fields/__init__.py(785):         if self.column:
0.57 /testbed/django/db/models/fields/__init__.py(786):             setattr(cls, self.attname, self.descriptor_class(self))
0.57 /testbed/django/db/models/fields/__init__.py(787):         if self.choices is not None:
0.57 /testbed/django/db/models/fields/__init__.py(2513):         return issubclass(subclass, self._subclasses) or super().__subclasscheck__(subclass)
0.57 /testbed/django/db/models/fields/__init__.py(2507):         return (BigAutoField, SmallAutoField)
0.57 /testbed/django/db/models/fields/__init__.py(2439):         kwargs['blank'] = True
0.57 /testbed/django/db/models/fields/__init__.py(2440):         super().__init__(*args, **kwargs)
0.57 /testbed/django/db/models/fields/__init__.py(139):         self.name = name
0.57 /testbed/django/db/models/fields/__init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.57 /testbed/django/db/models/fields/__init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.57 /testbed/django/db/models/fields/__init__.py(142):         self.primary_key = primary_key
0.57 /testbed/django/db/models/fields/__init__.py(143):         self.max_length, self._unique = max_length, unique
0.57 /testbed/django/db/models/fields/__init__.py(144):         self.blank, self.null = blank, null
0.57 /testbed/django/db/models/fields/__init__.py(145):         self.remote_field = rel
0.57 /testbed/django/db/models/fields/__init__.py(146):         self.is_relation = self.remote_field is not None
0.57 /testbed/django/db/models/fields/__init__.py(147):         self.default = default
0.57 /testbed/django/db/models/fields/__init__.py(148):         self.editable = editable
0.57 /testbed/django/db/models/fields/__init__.py(149):         self.serialize = serialize
0.57 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_date = unique_for_date
0.57 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_month = unique_for_month
0.57 /testbed/django/db/models/fields/__init__.py(152):         self.unique_for_year = unique_for_year
0.57 /testbed/django/db/models/fields/__init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.57 /testbed/django/db/models/fields/__init__.py(155):         self.choices = choices
0.57 /testbed/django/db/models/fields/__init__.py(156):         self.help_text = help_text
0.57 /testbed/django/db/models/fields/__init__.py(157):         self.db_index = db_index
0.57 /testbed/django/db/models/fields/__init__.py(158):         self.db_column = db_column
0.57 /testbed/django/db/models/fields/__init__.py(159):         self._db_tablespace = db_tablespace
0.57 /testbed/django/db/models/fields/__init__.py(160):         self.auto_created = auto_created
0.57 /testbed/django/db/models/fields/__init__.py(163):         if auto_created:
0.57 /testbed/django/db/models/fields/__init__.py(164):             self.creation_counter = Field.auto_creation_counter
0.57 /testbed/django/db/models/fields/__init__.py(165):             Field.auto_creation_counter -= 1
0.57 /testbed/django/db/models/fields/__init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.57 /testbed/django/db/models/fields/__init__.py(172):         messages = {}
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(175):         messages.update(error_messages or {})
0.57 /testbed/django/db/models/fields/__init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.57 /testbed/django/db/models/fields/__init__.py(177):         self.error_messages = messages
0.57 /testbed/django/db/models/fields/__init__.py(2476):         if cls._meta.auto_field:
0.57 /testbed/django/db/models/fields/__init__.py(2481):         super().contribute_to_class(cls, name, **kwargs)
0.57 /testbed/django/db/models/fields/__init__.py(782):         self.set_attributes_from_name(name)
0.57 /testbed/django/db/models/fields/__init__.py(769):         self.name = self.name or name
0.57 /testbed/django/db/models/fields/__init__.py(770):         self.attname, self.column = self.get_attname_column()
0.57 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.57 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.57 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.57 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.57 /testbed/django/db/models/fields/__init__.py(771):         self.concrete = self.column is not None
0.57 /testbed/django/db/models/fields/__init__.py(772):         if self.verbose_name is None and self.name:
0.57 /testbed/django/db/models/fields/__init__.py(783):         self.model = cls
0.57 /testbed/django/db/models/fields/__init__.py(784):         cls._meta.add_field(self, private=private_only)
0.57 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.57 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.57 /testbed/django/db/models/fields/__init__.py(529):             if (
0.57 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.57 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.57 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.57 /testbed/django/db/models/fields/__init__.py(529):             if (
0.57 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.57 /testbed/django/db/models/fields/__init__.py(785):         if self.column:
0.57 /testbed/django/db/models/fields/__init__.py(786):             setattr(cls, self.attname, self.descriptor_class(self))
0.57 /testbed/django/db/models/fields/__init__.py(787):         if self.choices is not None:
0.57 /testbed/django/db/models/fields/__init__.py(2482):         cls._meta.auto_field = self
0.57 /testbed/django/db/models/fields/__init__.py(1011):         super().__init__(*args, **kwargs)
0.57 /testbed/django/db/models/fields/__init__.py(139):         self.name = name
0.57 /testbed/django/db/models/fields/__init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.57 /testbed/django/db/models/fields/__init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.57 /testbed/django/db/models/fields/__init__.py(142):         self.primary_key = primary_key
0.57 /testbed/django/db/models/fields/__init__.py(143):         self.max_length, self._unique = max_length, unique
0.57 /testbed/django/db/models/fields/__init__.py(144):         self.blank, self.null = blank, null
0.57 /testbed/django/db/models/fields/__init__.py(145):         self.remote_field = rel
0.57 /testbed/django/db/models/fields/__init__.py(146):         self.is_relation = self.remote_field is not None
0.57 /testbed/django/db/models/fields/__init__.py(147):         self.default = default
0.57 /testbed/django/db/models/fields/__init__.py(148):         self.editable = editable
0.57 /testbed/django/db/models/fields/__init__.py(149):         self.serialize = serialize
0.57 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_date = unique_for_date
0.57 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_month = unique_for_month
0.57 /testbed/django/db/models/fields/__init__.py(152):         self.unique_for_year = unique_for_year
0.57 /testbed/django/db/models/fields/__init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.57 /testbed/django/db/models/fields/__init__.py(155):         self.choices = choices
0.57 /testbed/django/db/models/fields/__init__.py(156):         self.help_text = help_text
0.57 /testbed/django/db/models/fields/__init__.py(157):         self.db_index = db_index
0.57 /testbed/django/db/models/fields/__init__.py(158):         self.db_column = db_column
0.57 /testbed/django/db/models/fields/__init__.py(159):         self._db_tablespace = db_tablespace
0.57 /testbed/django/db/models/fields/__init__.py(160):         self.auto_created = auto_created
0.57 /testbed/django/db/models/fields/__init__.py(163):         if auto_created:
0.57 /testbed/django/db/models/fields/__init__.py(167):             self.creation_counter = Field.creation_counter
0.57 /testbed/django/db/models/fields/__init__.py(168):             Field.creation_counter += 1
0.57 /testbed/django/db/models/fields/__init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.57 /testbed/django/db/models/fields/__init__.py(172):         messages = {}
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(175):         messages.update(error_messages or {})
0.57 /testbed/django/db/models/fields/__init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.57 /testbed/django/db/models/fields/__init__.py(177):         self.error_messages = messages
0.57 /testbed/django/db/models/fields/__init__.py(1012):         self.db_collation = db_collation
0.57 /testbed/django/db/models/fields/__init__.py(1013):         if self.max_length is not None:
0.57 /testbed/django/db/models/fields/__init__.py(1014):             self.validators.append(validators.MaxLengthValidator(self.max_length))
0.57 /testbed/django/db/models/fields/__init__.py(615):         return [*self.default_validators, *self._validators]
0.57 /testbed/django/db/models/fields/__init__.py(2124):         super().__init__(*args, **kwargs)
0.57 /testbed/django/db/models/fields/__init__.py(139):         self.name = name
0.57 /testbed/django/db/models/fields/__init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.57 /testbed/django/db/models/fields/__init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.57 /testbed/django/db/models/fields/__init__.py(142):         self.primary_key = primary_key
0.57 /testbed/django/db/models/fields/__init__.py(143):         self.max_length, self._unique = max_length, unique
0.57 /testbed/django/db/models/fields/__init__.py(144):         self.blank, self.null = blank, null
0.57 /testbed/django/db/models/fields/__init__.py(145):         self.remote_field = rel
0.57 /testbed/django/db/models/fields/__init__.py(146):         self.is_relation = self.remote_field is not None
0.57 /testbed/django/db/models/fields/__init__.py(147):         self.default = default
0.57 /testbed/django/db/models/fields/__init__.py(148):         self.editable = editable
0.57 /testbed/django/db/models/fields/__init__.py(149):         self.serialize = serialize
0.57 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_date = unique_for_date
0.57 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_month = unique_for_month
0.57 /testbed/django/db/models/fields/__init__.py(152):         self.unique_for_year = unique_for_year
0.57 /testbed/django/db/models/fields/__init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.57 /testbed/django/db/models/fields/__init__.py(155):         self.choices = choices
0.57 /testbed/django/db/models/fields/__init__.py(156):         self.help_text = help_text
0.57 /testbed/django/db/models/fields/__init__.py(157):         self.db_index = db_index
0.57 /testbed/django/db/models/fields/__init__.py(158):         self.db_column = db_column
0.57 /testbed/django/db/models/fields/__init__.py(159):         self._db_tablespace = db_tablespace
0.57 /testbed/django/db/models/fields/__init__.py(160):         self.auto_created = auto_created
0.57 /testbed/django/db/models/fields/__init__.py(163):         if auto_created:
0.57 /testbed/django/db/models/fields/__init__.py(167):             self.creation_counter = Field.creation_counter
0.57 /testbed/django/db/models/fields/__init__.py(168):             Field.creation_counter += 1
0.57 /testbed/django/db/models/fields/__init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.57 /testbed/django/db/models/fields/__init__.py(172):         messages = {}
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(175):         messages.update(error_messages or {})
0.57 /testbed/django/db/models/fields/__init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.57 /testbed/django/db/models/fields/__init__.py(177):         self.error_messages = messages
0.57 /testbed/django/db/models/fields/__init__.py(2125):         self.db_collation = db_collation
0.57 /testbed/django/db/models/fields/__init__.py(1207):         self.auto_now, self.auto_now_add = auto_now, auto_now_add
0.57 /testbed/django/db/models/fields/__init__.py(1208):         if auto_now or auto_now_add:
0.57 /testbed/django/db/models/fields/__init__.py(1211):         super().__init__(verbose_name, name, **kwargs)
0.57 /testbed/django/db/models/fields/__init__.py(139):         self.name = name
0.57 /testbed/django/db/models/fields/__init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.57 /testbed/django/db/models/fields/__init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.57 /testbed/django/db/models/fields/__init__.py(142):         self.primary_key = primary_key
0.57 /testbed/django/db/models/fields/__init__.py(143):         self.max_length, self._unique = max_length, unique
0.57 /testbed/django/db/models/fields/__init__.py(144):         self.blank, self.null = blank, null
0.57 /testbed/django/db/models/fields/__init__.py(145):         self.remote_field = rel
0.57 /testbed/django/db/models/fields/__init__.py(146):         self.is_relation = self.remote_field is not None
0.57 /testbed/django/db/models/fields/__init__.py(147):         self.default = default
0.57 /testbed/django/db/models/fields/__init__.py(148):         self.editable = editable
0.57 /testbed/django/db/models/fields/__init__.py(149):         self.serialize = serialize
0.57 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_date = unique_for_date
0.57 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_month = unique_for_month
0.57 /testbed/django/db/models/fields/__init__.py(152):         self.unique_for_year = unique_for_year
0.57 /testbed/django/db/models/fields/__init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.57 /testbed/django/db/models/fields/__init__.py(155):         self.choices = choices
0.57 /testbed/django/db/models/fields/__init__.py(156):         self.help_text = help_text
0.57 /testbed/django/db/models/fields/__init__.py(157):         self.db_index = db_index
0.57 /testbed/django/db/models/fields/__init__.py(158):         self.db_column = db_column
0.57 /testbed/django/db/models/fields/__init__.py(159):         self._db_tablespace = db_tablespace
0.57 /testbed/django/db/models/fields/__init__.py(160):         self.auto_created = auto_created
0.57 /testbed/django/db/models/fields/__init__.py(163):         if auto_created:
0.57 /testbed/django/db/models/fields/__init__.py(167):             self.creation_counter = Field.creation_counter
0.57 /testbed/django/db/models/fields/__init__.py(168):             Field.creation_counter += 1
0.57 /testbed/django/db/models/fields/__init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.57 /testbed/django/db/models/fields/__init__.py(172):         messages = {}
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(175):         messages.update(error_messages or {})
0.57 /testbed/django/db/models/fields/__init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.57 /testbed/django/db/models/fields/__init__.py(177):         self.error_messages = messages
0.57 /testbed/django/db/models/fields/__init__.py(782):         self.set_attributes_from_name(name)
0.57 /testbed/django/db/models/fields/__init__.py(769):         self.name = self.name or name
0.57 /testbed/django/db/models/fields/__init__.py(770):         self.attname, self.column = self.get_attname_column()
0.57 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.57 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.57 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.57 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.57 /testbed/django/db/models/fields/__init__.py(771):         self.concrete = self.column is not None
0.57 /testbed/django/db/models/fields/__init__.py(772):         if self.verbose_name is None and self.name:
0.57 /testbed/django/db/models/fields/__init__.py(783):         self.model = cls
0.57 /testbed/django/db/models/fields/__init__.py(784):         cls._meta.add_field(self, private=private_only)
0.57 /testbed/django/db/models/fields/__init__.py(785):         if self.column:
0.57 /testbed/django/db/models/fields/__init__.py(786):             setattr(cls, self.attname, self.descriptor_class(self))
0.57 /testbed/django/db/models/fields/__init__.py(787):         if self.choices is not None:
0.57 /testbed/django/db/models/fields/__init__.py(782):         self.set_attributes_from_name(name)
0.57 /testbed/django/db/models/fields/__init__.py(769):         self.name = self.name or name
0.57 /testbed/django/db/models/fields/__init__.py(770):         self.attname, self.column = self.get_attname_column()
0.57 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.57 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.57 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.57 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.57 /testbed/django/db/models/fields/__init__.py(771):         self.concrete = self.column is not None
0.57 /testbed/django/db/models/fields/__init__.py(772):         if self.verbose_name is None and self.name:
0.57 /testbed/django/db/models/fields/__init__.py(783):         self.model = cls
0.57 /testbed/django/db/models/fields/__init__.py(784):         cls._meta.add_field(self, private=private_only)
0.57 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.57 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.57 /testbed/django/db/models/fields/__init__.py(529):             if (
0.57 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.57 /testbed/django/db/models/fields/__init__.py(785):         if self.column:
0.57 /testbed/django/db/models/fields/__init__.py(786):             setattr(cls, self.attname, self.descriptor_class(self))
0.57 /testbed/django/db/models/fields/__init__.py(787):         if self.choices is not None:
0.57 /testbed/django/db/models/fields/__init__.py(1285):         super().contribute_to_class(cls, name, **kwargs)
0.57 /testbed/django/db/models/fields/__init__.py(782):         self.set_attributes_from_name(name)
0.57 /testbed/django/db/models/fields/__init__.py(769):         self.name = self.name or name
0.57 /testbed/django/db/models/fields/__init__.py(770):         self.attname, self.column = self.get_attname_column()
0.57 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.57 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.57 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.57 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.57 /testbed/django/db/models/fields/__init__.py(771):         self.concrete = self.column is not None
0.57 /testbed/django/db/models/fields/__init__.py(772):         if self.verbose_name is None and self.name:
0.57 /testbed/django/db/models/fields/__init__.py(783):         self.model = cls
0.57 /testbed/django/db/models/fields/__init__.py(784):         cls._meta.add_field(self, private=private_only)
0.57 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.57 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.57 /testbed/django/db/models/fields/__init__.py(529):             if (
0.57 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.57 /testbed/django/db/models/fields/__init__.py(785):         if self.column:
0.57 /testbed/django/db/models/fields/__init__.py(786):             setattr(cls, self.attname, self.descriptor_class(self))
0.57 /testbed/django/db/models/fields/__init__.py(787):         if self.choices is not None:
0.57 /testbed/django/db/models/fields/__init__.py(1286):         if not self.null:
0.57 /testbed/django/db/models/fields/__init__.py(1287):             setattr(
0.57 /testbed/django/db/models/fields/__init__.py(1288):                 cls, 'get_next_by_%s' % self.name,
0.57 /testbed/django/db/models/fields/__init__.py(1289):                 partialmethod(cls._get_next_or_previous_by_FIELD, field=self, is_next=True)
0.57 /testbed/django/db/models/fields/__init__.py(1287):             setattr(
0.57 /testbed/django/db/models/fields/__init__.py(1291):             setattr(
0.57 /testbed/django/db/models/fields/__init__.py(1292):                 cls, 'get_previous_by_%s' % self.name,
0.57 /testbed/django/db/models/fields/__init__.py(1293):                 partialmethod(cls._get_next_or_previous_by_FIELD, field=self, is_next=False)
0.57 /testbed/django/db/models/fields/__init__.py(1291):             setattr(
0.57 /testbed/django/db/models/fields/__init__.py(554):         obj = copy.copy(self)
0.57 /testbed/django/db/models/fields/__init__.py(565):         obj = Empty()
0.57 /testbed/django/db/models/fields/__init__.py(566):         obj.__class__ = self.__class__
0.57 /testbed/django/db/models/fields/__init__.py(567):         obj.__dict__ = self.__dict__.copy()
0.57 /testbed/django/db/models/fields/__init__.py(568):         return obj
0.57 /testbed/django/db/models/fields/__init__.py(555):         if self.remote_field:
0.57 /testbed/django/db/models/fields/__init__.py(559):         memodict[id(self)] = obj
0.57 /testbed/django/db/models/fields/__init__.py(560):         return obj
0.57 /testbed/django/db/models/fields/__init__.py(782):         self.set_attributes_from_name(name)
0.57 /testbed/django/db/models/fields/__init__.py(769):         self.name = self.name or name
0.57 /testbed/django/db/models/fields/__init__.py(770):         self.attname, self.column = self.get_attname_column()
0.57 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.57 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.57 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.57 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.57 /testbed/django/db/models/fields/__init__.py(771):         self.concrete = self.column is not None
0.57 /testbed/django/db/models/fields/__init__.py(772):         if self.verbose_name is None and self.name:
0.57 /testbed/django/db/models/fields/__init__.py(783):         self.model = cls
0.57 /testbed/django/db/models/fields/__init__.py(784):         cls._meta.add_field(self, private=private_only)
0.57 /testbed/django/db/models/fields/__init__.py(785):         if self.column:
0.57 /testbed/django/db/models/fields/__init__.py(786):             setattr(cls, self.attname, self.descriptor_class(self))
0.57 /testbed/django/db/models/fields/__init__.py(787):         if self.choices is not None:
0.57 /testbed/django/db/models/fields/__init__.py(554):         obj = copy.copy(self)
0.57 /testbed/django/db/models/fields/__init__.py(565):         obj = Empty()
0.57 /testbed/django/db/models/fields/__init__.py(566):         obj.__class__ = self.__class__
0.57 /testbed/django/db/models/fields/__init__.py(567):         obj.__dict__ = self.__dict__.copy()
0.57 /testbed/django/db/models/fields/__init__.py(568):         return obj
0.57 /testbed/django/db/models/fields/__init__.py(555):         if self.remote_field:
0.57 /testbed/django/db/models/fields/__init__.py(559):         memodict[id(self)] = obj
0.57 /testbed/django/db/models/fields/__init__.py(560):         return obj
0.57 /testbed/django/db/models/fields/__init__.py(782):         self.set_attributes_from_name(name)
0.57 /testbed/django/db/models/fields/__init__.py(769):         self.name = self.name or name
0.57 /testbed/django/db/models/fields/__init__.py(770):         self.attname, self.column = self.get_attname_column()
0.57 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.57 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.57 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.57 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.57 /testbed/django/db/models/fields/__init__.py(771):         self.concrete = self.column is not None
0.57 /testbed/django/db/models/fields/__init__.py(772):         if self.verbose_name is None and self.name:
0.57 /testbed/django/db/models/fields/__init__.py(783):         self.model = cls
0.57 /testbed/django/db/models/fields/__init__.py(784):         cls._meta.add_field(self, private=private_only)
0.57 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.57 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.57 /testbed/django/db/models/fields/__init__.py(529):             if (
0.57 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.57 /testbed/django/db/models/fields/__init__.py(785):         if self.column:
0.57 /testbed/django/db/models/fields/__init__.py(786):             setattr(cls, self.attname, self.descriptor_class(self))
0.57 /testbed/django/db/models/fields/__init__.py(787):         if self.choices is not None:
0.57 /testbed/django/db/models/fields/__init__.py(554):         obj = copy.copy(self)
0.57 /testbed/django/db/models/fields/__init__.py(565):         obj = Empty()
0.57 /testbed/django/db/models/fields/__init__.py(566):         obj.__class__ = self.__class__
0.57 /testbed/django/db/models/fields/__init__.py(567):         obj.__dict__ = self.__dict__.copy()
0.57 /testbed/django/db/models/fields/__init__.py(568):         return obj
0.57 /testbed/django/db/models/fields/__init__.py(555):         if self.remote_field:
0.57 /testbed/django/db/models/fields/__init__.py(559):         memodict[id(self)] = obj
0.57 /testbed/django/db/models/fields/__init__.py(560):         return obj
0.57 /testbed/django/db/models/fields/__init__.py(1285):         super().contribute_to_class(cls, name, **kwargs)
0.57 /testbed/django/db/models/fields/__init__.py(782):         self.set_attributes_from_name(name)
0.57 /testbed/django/db/models/fields/__init__.py(769):         self.name = self.name or name
0.57 /testbed/django/db/models/fields/__init__.py(770):         self.attname, self.column = self.get_attname_column()
0.57 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.57 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.57 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.57 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.57 /testbed/django/db/models/fields/__init__.py(771):         self.concrete = self.column is not None
0.57 /testbed/django/db/models/fields/__init__.py(772):         if self.verbose_name is None and self.name:
0.57 /testbed/django/db/models/fields/__init__.py(783):         self.model = cls
0.57 /testbed/django/db/models/fields/__init__.py(784):         cls._meta.add_field(self, private=private_only)
0.57 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.57 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.57 /testbed/django/db/models/fields/__init__.py(529):             if (
0.57 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.57 /testbed/django/db/models/fields/__init__.py(785):         if self.column:
0.57 /testbed/django/db/models/fields/__init__.py(786):             setattr(cls, self.attname, self.descriptor_class(self))
0.57 /testbed/django/db/models/fields/__init__.py(787):         if self.choices is not None:
0.57 /testbed/django/db/models/fields/__init__.py(1286):         if not self.null:
0.57 /testbed/django/db/models/fields/__init__.py(1287):             setattr(
0.57 /testbed/django/db/models/fields/__init__.py(1288):                 cls, 'get_next_by_%s' % self.name,
0.57 /testbed/django/db/models/fields/__init__.py(1289):                 partialmethod(cls._get_next_or_previous_by_FIELD, field=self, is_next=True)
0.57 /testbed/django/db/models/fields/__init__.py(1287):             setattr(
0.57 /testbed/django/db/models/fields/__init__.py(1291):             setattr(
0.57 /testbed/django/db/models/fields/__init__.py(1292):                 cls, 'get_previous_by_%s' % self.name,
0.57 /testbed/django/db/models/fields/__init__.py(1293):                 partialmethod(cls._get_next_or_previous_by_FIELD, field=self, is_next=False)
0.57 /testbed/django/db/models/fields/__init__.py(1291):             setattr(
0.57 /testbed/django/db/models/fields/__init__.py(1207):         self.auto_now, self.auto_now_add = auto_now, auto_now_add
0.57 /testbed/django/db/models/fields/__init__.py(1208):         if auto_now or auto_now_add:
0.57 /testbed/django/db/models/fields/__init__.py(1211):         super().__init__(verbose_name, name, **kwargs)
0.57 /testbed/django/db/models/fields/__init__.py(139):         self.name = name
0.57 /testbed/django/db/models/fields/__init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.57 /testbed/django/db/models/fields/__init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.57 /testbed/django/db/models/fields/__init__.py(142):         self.primary_key = primary_key
0.57 /testbed/django/db/models/fields/__init__.py(143):         self.max_length, self._unique = max_length, unique
0.57 /testbed/django/db/models/fields/__init__.py(144):         self.blank, self.null = blank, null
0.57 /testbed/django/db/models/fields/__init__.py(145):         self.remote_field = rel
0.57 /testbed/django/db/models/fields/__init__.py(146):         self.is_relation = self.remote_field is not None
0.57 /testbed/django/db/models/fields/__init__.py(147):         self.default = default
0.57 /testbed/django/db/models/fields/__init__.py(148):         self.editable = editable
0.57 /testbed/django/db/models/fields/__init__.py(149):         self.serialize = serialize
0.57 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_date = unique_for_date
0.57 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_month = unique_for_month
0.57 /testbed/django/db/models/fields/__init__.py(152):         self.unique_for_year = unique_for_year
0.57 /testbed/django/db/models/fields/__init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.57 /testbed/django/db/models/fields/__init__.py(155):         self.choices = choices
0.57 /testbed/django/db/models/fields/__init__.py(156):         self.help_text = help_text
0.57 /testbed/django/db/models/fields/__init__.py(157):         self.db_index = db_index
0.57 /testbed/django/db/models/fields/__init__.py(158):         self.db_column = db_column
0.57 /testbed/django/db/models/fields/__init__.py(159):         self._db_tablespace = db_tablespace
0.57 /testbed/django/db/models/fields/__init__.py(160):         self.auto_created = auto_created
0.57 /testbed/django/db/models/fields/__init__.py(163):         if auto_created:
0.57 /testbed/django/db/models/fields/__init__.py(167):             self.creation_counter = Field.creation_counter
0.57 /testbed/django/db/models/fields/__init__.py(168):             Field.creation_counter += 1
0.57 /testbed/django/db/models/fields/__init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.57 /testbed/django/db/models/fields/__init__.py(172):         messages = {}
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(175):         messages.update(error_messages or {})
0.57 /testbed/django/db/models/fields/__init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.57 /testbed/django/db/models/fields/__init__.py(177):         self.error_messages = messages
0.57 /testbed/django/db/models/fields/__init__.py(139):         self.name = name
0.57 /testbed/django/db/models/fields/__init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.57 /testbed/django/db/models/fields/__init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.57 /testbed/django/db/models/fields/__init__.py(142):         self.primary_key = primary_key
0.57 /testbed/django/db/models/fields/__init__.py(143):         self.max_length, self._unique = max_length, unique
0.57 /testbed/django/db/models/fields/__init__.py(144):         self.blank, self.null = blank, null
0.57 /testbed/django/db/models/fields/__init__.py(145):         self.remote_field = rel
0.57 /testbed/django/db/models/fields/__init__.py(146):         self.is_relation = self.remote_field is not None
0.57 /testbed/django/db/models/fields/__init__.py(147):         self.default = default
0.57 /testbed/django/db/models/fields/__init__.py(148):         self.editable = editable
0.57 /testbed/django/db/models/fields/__init__.py(149):         self.serialize = serialize
0.57 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_date = unique_for_date
0.57 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_month = unique_for_month
0.57 /testbed/django/db/models/fields/__init__.py(152):         self.unique_for_year = unique_for_year
0.57 /testbed/django/db/models/fields/__init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.57 /testbed/django/db/models/fields/__init__.py(155):         self.choices = choices
0.57 /testbed/django/db/models/fields/__init__.py(156):         self.help_text = help_text
0.57 /testbed/django/db/models/fields/__init__.py(157):         self.db_index = db_index
0.57 /testbed/django/db/models/fields/__init__.py(158):         self.db_column = db_column
0.57 /testbed/django/db/models/fields/__init__.py(159):         self._db_tablespace = db_tablespace
0.57 /testbed/django/db/models/fields/__init__.py(160):         self.auto_created = auto_created
0.57 /testbed/django/db/models/fields/__init__.py(163):         if auto_created:
0.57 /testbed/django/db/models/fields/__init__.py(167):             self.creation_counter = Field.creation_counter
0.57 /testbed/django/db/models/fields/__init__.py(168):             Field.creation_counter += 1
0.57 /testbed/django/db/models/fields/__init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.57 /testbed/django/db/models/fields/__init__.py(172):         messages = {}
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(175):         messages.update(error_messages or {})
0.57 /testbed/django/db/models/fields/__init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.57 /testbed/django/db/models/fields/__init__.py(177):         self.error_messages = messages
0.57 /testbed/django/db/models/fields/__init__.py(139):         self.name = name
0.57 /testbed/django/db/models/fields/__init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.57 /testbed/django/db/models/fields/__init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.57 /testbed/django/db/models/fields/__init__.py(142):         self.primary_key = primary_key
0.57 /testbed/django/db/models/fields/__init__.py(143):         self.max_length, self._unique = max_length, unique
0.57 /testbed/django/db/models/fields/__init__.py(144):         self.blank, self.null = blank, null
0.57 /testbed/django/db/models/fields/__init__.py(145):         self.remote_field = rel
0.57 /testbed/django/db/models/fields/__init__.py(146):         self.is_relation = self.remote_field is not None
0.57 /testbed/django/db/models/fields/__init__.py(147):         self.default = default
0.57 /testbed/django/db/models/fields/__init__.py(148):         self.editable = editable
0.57 /testbed/django/db/models/fields/__init__.py(149):         self.serialize = serialize
0.57 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_date = unique_for_date
0.57 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_month = unique_for_month
0.57 /testbed/django/db/models/fields/__init__.py(152):         self.unique_for_year = unique_for_year
0.57 /testbed/django/db/models/fields/__init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.57 /testbed/django/db/models/fields/__init__.py(155):         self.choices = choices
0.57 /testbed/django/db/models/fields/__init__.py(156):         self.help_text = help_text
0.57 /testbed/django/db/models/fields/__init__.py(157):         self.db_index = db_index
0.57 /testbed/django/db/models/fields/__init__.py(158):         self.db_column = db_column
0.57 /testbed/django/db/models/fields/__init__.py(159):         self._db_tablespace = db_tablespace
0.57 /testbed/django/db/models/fields/__init__.py(160):         self.auto_created = auto_created
0.57 /testbed/django/db/models/fields/__init__.py(163):         if auto_created:
0.57 /testbed/django/db/models/fields/__init__.py(167):             self.creation_counter = Field.creation_counter
0.57 /testbed/django/db/models/fields/__init__.py(168):             Field.creation_counter += 1
0.57 /testbed/django/db/models/fields/__init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.57 /testbed/django/db/models/fields/__init__.py(172):         messages = {}
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(175):         messages.update(error_messages or {})
0.57 /testbed/django/db/models/fields/__init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.57 /testbed/django/db/models/fields/__init__.py(177):         self.error_messages = messages
0.57 /testbed/django/db/models/fields/__init__.py(2124):         super().__init__(*args, **kwargs)
0.57 /testbed/django/db/models/fields/__init__.py(139):         self.name = name
0.57 /testbed/django/db/models/fields/__init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.57 /testbed/django/db/models/fields/__init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.57 /testbed/django/db/models/fields/__init__.py(142):         self.primary_key = primary_key
0.57 /testbed/django/db/models/fields/__init__.py(143):         self.max_length, self._unique = max_length, unique
0.57 /testbed/django/db/models/fields/__init__.py(144):         self.blank, self.null = blank, null
0.57 /testbed/django/db/models/fields/__init__.py(145):         self.remote_field = rel
0.57 /testbed/django/db/models/fields/__init__.py(146):         self.is_relation = self.remote_field is not None
0.57 /testbed/django/db/models/fields/__init__.py(147):         self.default = default
0.57 /testbed/django/db/models/fields/__init__.py(148):         self.editable = editable
0.57 /testbed/django/db/models/fields/__init__.py(149):         self.serialize = serialize
0.57 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_date = unique_for_date
0.57 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_month = unique_for_month
0.57 /testbed/django/db/models/fields/__init__.py(152):         self.unique_for_year = unique_for_year
0.57 /testbed/django/db/models/fields/__init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.57 /testbed/django/db/models/fields/__init__.py(155):         self.choices = choices
0.57 /testbed/django/db/models/fields/__init__.py(156):         self.help_text = help_text
0.57 /testbed/django/db/models/fields/__init__.py(157):         self.db_index = db_index
0.57 /testbed/django/db/models/fields/__init__.py(158):         self.db_column = db_column
0.57 /testbed/django/db/models/fields/__init__.py(159):         self._db_tablespace = db_tablespace
0.57 /testbed/django/db/models/fields/__init__.py(160):         self.auto_created = auto_created
0.57 /testbed/django/db/models/fields/__init__.py(163):         if auto_created:
0.57 /testbed/django/db/models/fields/__init__.py(167):             self.creation_counter = Field.creation_counter
0.57 /testbed/django/db/models/fields/__init__.py(168):             Field.creation_counter += 1
0.57 /testbed/django/db/models/fields/__init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.57 /testbed/django/db/models/fields/__init__.py(172):         messages = {}
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(175):         messages.update(error_messages or {})
0.57 /testbed/django/db/models/fields/__init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.57 /testbed/django/db/models/fields/__init__.py(177):         self.error_messages = messages
0.57 /testbed/django/db/models/fields/__init__.py(2125):         self.db_collation = db_collation
0.57 /testbed/django/db/models/fields/__init__.py(1011):         super().__init__(*args, **kwargs)
0.57 /testbed/django/db/models/fields/__init__.py(139):         self.name = name
0.57 /testbed/django/db/models/fields/__init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.57 /testbed/django/db/models/fields/__init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.57 /testbed/django/db/models/fields/__init__.py(142):         self.primary_key = primary_key
0.57 /testbed/django/db/models/fields/__init__.py(143):         self.max_length, self._unique = max_length, unique
0.57 /testbed/django/db/models/fields/__init__.py(144):         self.blank, self.null = blank, null
0.57 /testbed/django/db/models/fields/__init__.py(145):         self.remote_field = rel
0.57 /testbed/django/db/models/fields/__init__.py(146):         self.is_relation = self.remote_field is not None
0.57 /testbed/django/db/models/fields/__init__.py(147):         self.default = default
0.57 /testbed/django/db/models/fields/__init__.py(148):         self.editable = editable
0.57 /testbed/django/db/models/fields/__init__.py(149):         self.serialize = serialize
0.57 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_date = unique_for_date
0.57 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_month = unique_for_month
0.57 /testbed/django/db/models/fields/__init__.py(152):         self.unique_for_year = unique_for_year
0.57 /testbed/django/db/models/fields/__init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.57 /testbed/django/db/models/fields/__init__.py(155):         self.choices = choices
0.57 /testbed/django/db/models/fields/__init__.py(156):         self.help_text = help_text
0.57 /testbed/django/db/models/fields/__init__.py(157):         self.db_index = db_index
0.57 /testbed/django/db/models/fields/__init__.py(158):         self.db_column = db_column
0.57 /testbed/django/db/models/fields/__init__.py(159):         self._db_tablespace = db_tablespace
0.57 /testbed/django/db/models/fields/__init__.py(160):         self.auto_created = auto_created
0.57 /testbed/django/db/models/fields/__init__.py(163):         if auto_created:
0.57 /testbed/django/db/models/fields/__init__.py(167):             self.creation_counter = Field.creation_counter
0.57 /testbed/django/db/models/fields/__init__.py(168):             Field.creation_counter += 1
0.57 /testbed/django/db/models/fields/__init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.57 /testbed/django/db/models/fields/__init__.py(172):         messages = {}
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(175):         messages.update(error_messages or {})
0.57 /testbed/django/db/models/fields/__init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.57 /testbed/django/db/models/fields/__init__.py(177):         self.error_messages = messages
0.57 /testbed/django/db/models/fields/__init__.py(1012):         self.db_collation = db_collation
0.57 /testbed/django/db/models/fields/__init__.py(1013):         if self.max_length is not None:
0.57 /testbed/django/db/models/fields/__init__.py(1014):             self.validators.append(validators.MaxLengthValidator(self.max_length))
0.57 /testbed/django/db/models/fields/__init__.py(615):         return [*self.default_validators, *self._validators]
0.57 /testbed/django/db/models/fields/__init__.py(139):         self.name = name
0.57 /testbed/django/db/models/fields/__init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.57 /testbed/django/db/models/fields/__init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.57 /testbed/django/db/models/fields/__init__.py(142):         self.primary_key = primary_key
0.57 /testbed/django/db/models/fields/__init__.py(143):         self.max_length, self._unique = max_length, unique
0.57 /testbed/django/db/models/fields/__init__.py(144):         self.blank, self.null = blank, null
0.57 /testbed/django/db/models/fields/__init__.py(145):         self.remote_field = rel
0.57 /testbed/django/db/models/fields/__init__.py(146):         self.is_relation = self.remote_field is not None
0.57 /testbed/django/db/models/fields/__init__.py(147):         self.default = default
0.57 /testbed/django/db/models/fields/__init__.py(148):         self.editable = editable
0.57 /testbed/django/db/models/fields/__init__.py(149):         self.serialize = serialize
0.57 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_date = unique_for_date
0.57 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_month = unique_for_month
0.57 /testbed/django/db/models/fields/__init__.py(152):         self.unique_for_year = unique_for_year
0.57 /testbed/django/db/models/fields/__init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.57 /testbed/django/db/models/fields/__init__.py(155):         self.choices = choices
0.57 /testbed/django/db/models/fields/__init__.py(156):         self.help_text = help_text
0.57 /testbed/django/db/models/fields/__init__.py(157):         self.db_index = db_index
0.57 /testbed/django/db/models/fields/__init__.py(158):         self.db_column = db_column
0.57 /testbed/django/db/models/fields/__init__.py(159):         self._db_tablespace = db_tablespace
0.57 /testbed/django/db/models/fields/__init__.py(160):         self.auto_created = auto_created
0.57 /testbed/django/db/models/fields/__init__.py(163):         if auto_created:
0.57 /testbed/django/db/models/fields/__init__.py(167):             self.creation_counter = Field.creation_counter
0.57 /testbed/django/db/models/fields/__init__.py(168):             Field.creation_counter += 1
0.57 /testbed/django/db/models/fields/__init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.57 /testbed/django/db/models/fields/__init__.py(172):         messages = {}
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(175):         messages.update(error_messages or {})
0.57 /testbed/django/db/models/fields/__init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.57 /testbed/django/db/models/fields/__init__.py(177):         self.error_messages = messages
0.57 /testbed/django/db/models/fields/__init__.py(2124):         super().__init__(*args, **kwargs)
0.57 /testbed/django/db/models/fields/__init__.py(139):         self.name = name
0.57 /testbed/django/db/models/fields/__init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.57 /testbed/django/db/models/fields/__init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.57 /testbed/django/db/models/fields/__init__.py(142):         self.primary_key = primary_key
0.57 /testbed/django/db/models/fields/__init__.py(143):         self.max_length, self._unique = max_length, unique
0.57 /testbed/django/db/models/fields/__init__.py(144):         self.blank, self.null = blank, null
0.57 /testbed/django/db/models/fields/__init__.py(145):         self.remote_field = rel
0.57 /testbed/django/db/models/fields/__init__.py(146):         self.is_relation = self.remote_field is not None
0.57 /testbed/django/db/models/fields/__init__.py(147):         self.default = default
0.57 /testbed/django/db/models/fields/__init__.py(148):         self.editable = editable
0.57 /testbed/django/db/models/fields/__init__.py(149):         self.serialize = serialize
0.57 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_date = unique_for_date
0.57 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_month = unique_for_month
0.57 /testbed/django/db/models/fields/__init__.py(152):         self.unique_for_year = unique_for_year
0.57 /testbed/django/db/models/fields/__init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.57 /testbed/django/db/models/fields/__init__.py(155):         self.choices = choices
0.57 /testbed/django/db/models/fields/__init__.py(156):         self.help_text = help_text
0.57 /testbed/django/db/models/fields/__init__.py(157):         self.db_index = db_index
0.57 /testbed/django/db/models/fields/__init__.py(158):         self.db_column = db_column
0.57 /testbed/django/db/models/fields/__init__.py(159):         self._db_tablespace = db_tablespace
0.57 /testbed/django/db/models/fields/__init__.py(160):         self.auto_created = auto_created
0.57 /testbed/django/db/models/fields/__init__.py(163):         if auto_created:
0.57 /testbed/django/db/models/fields/__init__.py(167):             self.creation_counter = Field.creation_counter
0.57 /testbed/django/db/models/fields/__init__.py(168):             Field.creation_counter += 1
0.57 /testbed/django/db/models/fields/__init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.57 /testbed/django/db/models/fields/__init__.py(172):         messages = {}
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(175):         messages.update(error_messages or {})
0.57 /testbed/django/db/models/fields/__init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.57 /testbed/django/db/models/fields/__init__.py(177):         self.error_messages = messages
0.57 /testbed/django/db/models/fields/__init__.py(2125):         self.db_collation = db_collation
0.57 /testbed/django/db/models/fields/__init__.py(1285):         super().contribute_to_class(cls, name, **kwargs)
0.57 /testbed/django/db/models/fields/__init__.py(782):         self.set_attributes_from_name(name)
0.57 /testbed/django/db/models/fields/__init__.py(769):         self.name = self.name or name
0.57 /testbed/django/db/models/fields/__init__.py(770):         self.attname, self.column = self.get_attname_column()
0.57 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.57 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.57 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.57 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.57 /testbed/django/db/models/fields/__init__.py(771):         self.concrete = self.column is not None
0.57 /testbed/django/db/models/fields/__init__.py(772):         if self.verbose_name is None and self.name:
0.57 /testbed/django/db/models/fields/__init__.py(783):         self.model = cls
0.57 /testbed/django/db/models/fields/__init__.py(784):         cls._meta.add_field(self, private=private_only)
0.57 /testbed/django/db/models/fields/__init__.py(785):         if self.column:
0.57 /testbed/django/db/models/fields/__init__.py(786):             setattr(cls, self.attname, self.descriptor_class(self))
0.57 /testbed/django/db/models/fields/__init__.py(787):         if self.choices is not None:
0.57 /testbed/django/db/models/fields/__init__.py(1286):         if not self.null:
0.57 /testbed/django/db/models/fields/__init__.py(1287):             setattr(
0.57 /testbed/django/db/models/fields/__init__.py(1288):                 cls, 'get_next_by_%s' % self.name,
0.57 /testbed/django/db/models/fields/__init__.py(1289):                 partialmethod(cls._get_next_or_previous_by_FIELD, field=self, is_next=True)
0.57 /testbed/django/db/models/fields/__init__.py(1287):             setattr(
0.57 /testbed/django/db/models/fields/__init__.py(1291):             setattr(
0.57 /testbed/django/db/models/fields/__init__.py(1292):                 cls, 'get_previous_by_%s' % self.name,
0.57 /testbed/django/db/models/fields/__init__.py(1293):                 partialmethod(cls._get_next_or_previous_by_FIELD, field=self, is_next=False)
0.57 /testbed/django/db/models/fields/__init__.py(1291):             setattr(
0.57 /testbed/django/db/models/fields/__init__.py(782):         self.set_attributes_from_name(name)
0.57 /testbed/django/db/models/fields/__init__.py(769):         self.name = self.name or name
0.57 /testbed/django/db/models/fields/__init__.py(770):         self.attname, self.column = self.get_attname_column()
0.57 /testbed/django/db/models/fields/__init__.py(771):         self.concrete = self.column is not None
0.57 /testbed/django/db/models/fields/__init__.py(772):         if self.verbose_name is None and self.name:
0.57 /testbed/django/db/models/fields/__init__.py(783):         self.model = cls
0.57 /testbed/django/db/models/fields/__init__.py(784):         cls._meta.add_field(self, private=private_only)
0.57 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.57 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.57 /testbed/django/db/models/fields/__init__.py(529):             if (
0.57 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.57 /testbed/django/db/models/fields/__init__.py(785):         if self.column:
0.57 /testbed/django/db/models/fields/__init__.py(786):             setattr(cls, self.attname, self.descriptor_class(self))
0.57 /testbed/django/db/models/fields/__init__.py(787):         if self.choices is not None:
0.57 /testbed/django/db/models/fields/__init__.py(782):         self.set_attributes_from_name(name)
0.57 /testbed/django/db/models/fields/__init__.py(769):         self.name = self.name or name
0.57 /testbed/django/db/models/fields/__init__.py(770):         self.attname, self.column = self.get_attname_column()
0.57 /testbed/django/db/models/fields/__init__.py(771):         self.concrete = self.column is not None
0.57 /testbed/django/db/models/fields/__init__.py(772):         if self.verbose_name is None and self.name:
0.57 /testbed/django/db/models/fields/__init__.py(783):         self.model = cls
0.57 /testbed/django/db/models/fields/__init__.py(784):         cls._meta.add_field(self, private=private_only)
0.57 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.57 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.57 /testbed/django/db/models/fields/__init__.py(529):             if (
0.57 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.57 /testbed/django/db/models/fields/__init__.py(785):         if self.column:
0.57 /testbed/django/db/models/fields/__init__.py(786):             setattr(cls, self.attname, self.descriptor_class(self))
0.57 /testbed/django/db/models/fields/__init__.py(787):         if self.choices is not None:
0.57 /testbed/django/db/models/fields/__init__.py(782):         self.set_attributes_from_name(name)
0.57 /testbed/django/db/models/fields/__init__.py(769):         self.name = self.name or name
0.57 /testbed/django/db/models/fields/__init__.py(770):         self.attname, self.column = self.get_attname_column()
0.57 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.57 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.57 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.57 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.57 /testbed/django/db/models/fields/__init__.py(771):         self.concrete = self.column is not None
0.57 /testbed/django/db/models/fields/__init__.py(772):         if self.verbose_name is None and self.name:
0.57 /testbed/django/db/models/fields/__init__.py(783):         self.model = cls
0.57 /testbed/django/db/models/fields/__init__.py(784):         cls._meta.add_field(self, private=private_only)
0.57 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.57 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.57 /testbed/django/db/models/fields/__init__.py(529):             if (
0.57 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.57 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.57 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.57 /testbed/django/db/models/fields/__init__.py(529):             if (
0.57 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.57 /testbed/django/db/models/fields/__init__.py(785):         if self.column:
0.57 /testbed/django/db/models/fields/__init__.py(786):             setattr(cls, self.attname, self.descriptor_class(self))
0.57 /testbed/django/db/models/fields/__init__.py(787):         if self.choices is not None:
0.57 /testbed/django/db/models/fields/__init__.py(782):         self.set_attributes_from_name(name)
0.57 /testbed/django/db/models/fields/__init__.py(769):         self.name = self.name or name
0.57 /testbed/django/db/models/fields/__init__.py(770):         self.attname, self.column = self.get_attname_column()
0.57 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.57 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.57 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.57 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.57 /testbed/django/db/models/fields/__init__.py(771):         self.concrete = self.column is not None
0.57 /testbed/django/db/models/fields/__init__.py(772):         if self.verbose_name is None and self.name:
0.57 /testbed/django/db/models/fields/__init__.py(783):         self.model = cls
0.57 /testbed/django/db/models/fields/__init__.py(784):         cls._meta.add_field(self, private=private_only)
0.57 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.57 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.57 /testbed/django/db/models/fields/__init__.py(529):             if (
0.57 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.57 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.57 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.57 /testbed/django/db/models/fields/__init__.py(529):             if (
0.57 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.57 /testbed/django/db/models/fields/__init__.py(785):         if self.column:
0.57 /testbed/django/db/models/fields/__init__.py(786):             setattr(cls, self.attname, self.descriptor_class(self))
0.57 /testbed/django/db/models/fields/__init__.py(787):         if self.choices is not None:
0.57 /testbed/django/db/models/fields/__init__.py(782):         self.set_attributes_from_name(name)
0.57 /testbed/django/db/models/fields/__init__.py(769):         self.name = self.name or name
0.57 /testbed/django/db/models/fields/__init__.py(770):         self.attname, self.column = self.get_attname_column()
0.57 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.57 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.57 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.57 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.57 /testbed/django/db/models/fields/__init__.py(771):         self.concrete = self.column is not None
0.57 /testbed/django/db/models/fields/__init__.py(772):         if self.verbose_name is None and self.name:
0.57 /testbed/django/db/models/fields/__init__.py(783):         self.model = cls
0.57 /testbed/django/db/models/fields/__init__.py(784):         cls._meta.add_field(self, private=private_only)
0.57 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.57 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.57 /testbed/django/db/models/fields/__init__.py(529):             if (
0.57 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.57 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.57 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.57 /testbed/django/db/models/fields/__init__.py(529):             if (
0.57 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.57 /testbed/django/db/models/fields/__init__.py(785):         if self.column:
0.57 /testbed/django/db/models/fields/__init__.py(786):             setattr(cls, self.attname, self.descriptor_class(self))
0.57 /testbed/django/db/models/fields/__init__.py(787):         if self.choices is not None:
0.57 /testbed/django/db/models/fields/__init__.py(792):             if 'get_%s_display' % self.name not in cls.__dict__:
0.57 /testbed/django/db/models/fields/__init__.py(793):                 setattr(
0.57 /testbed/django/db/models/fields/__init__.py(794):                     cls,
0.57 /testbed/django/db/models/fields/__init__.py(795):                     'get_%s_display' % self.name,
0.57 /testbed/django/db/models/fields/__init__.py(796):                     partialmethod(cls._get_FIELD_display, field=self),
0.57 /testbed/django/db/models/fields/__init__.py(793):                 setattr(
0.57 /testbed/django/db/models/fields/__init__.py(782):         self.set_attributes_from_name(name)
0.57 /testbed/django/db/models/fields/__init__.py(769):         self.name = self.name or name
0.57 /testbed/django/db/models/fields/__init__.py(770):         self.attname, self.column = self.get_attname_column()
0.57 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.57 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.57 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.57 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.57 /testbed/django/db/models/fields/__init__.py(771):         self.concrete = self.column is not None
0.57 /testbed/django/db/models/fields/__init__.py(772):         if self.verbose_name is None and self.name:
0.57 /testbed/django/db/models/fields/__init__.py(783):         self.model = cls
0.57 /testbed/django/db/models/fields/__init__.py(784):         cls._meta.add_field(self, private=private_only)
0.57 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.57 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.57 /testbed/django/db/models/fields/__init__.py(529):             if (
0.57 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.57 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.57 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.57 /testbed/django/db/models/fields/__init__.py(529):             if (
0.57 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.57 /testbed/django/db/models/fields/__init__.py(785):         if self.column:
0.57 /testbed/django/db/models/fields/__init__.py(786):             setattr(cls, self.attname, self.descriptor_class(self))
0.57 /testbed/django/db/models/fields/__init__.py(787):         if self.choices is not None:
0.57 /testbed/django/db/models/fields/__init__.py(2513):         return issubclass(subclass, self._subclasses) or super().__subclasscheck__(subclass)
0.57 /testbed/django/db/models/fields/__init__.py(2507):         return (BigAutoField, SmallAutoField)
0.57 /testbed/django/db/models/fields/__init__.py(2439):         kwargs['blank'] = True
0.57 /testbed/django/db/models/fields/__init__.py(2440):         super().__init__(*args, **kwargs)
0.57 /testbed/django/db/models/fields/__init__.py(139):         self.name = name
0.57 /testbed/django/db/models/fields/__init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.57 /testbed/django/db/models/fields/__init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.57 /testbed/django/db/models/fields/__init__.py(142):         self.primary_key = primary_key
0.57 /testbed/django/db/models/fields/__init__.py(143):         self.max_length, self._unique = max_length, unique
0.57 /testbed/django/db/models/fields/__init__.py(144):         self.blank, self.null = blank, null
0.57 /testbed/django/db/models/fields/__init__.py(145):         self.remote_field = rel
0.57 /testbed/django/db/models/fields/__init__.py(146):         self.is_relation = self.remote_field is not None
0.57 /testbed/django/db/models/fields/__init__.py(147):         self.default = default
0.57 /testbed/django/db/models/fields/__init__.py(148):         self.editable = editable
0.57 /testbed/django/db/models/fields/__init__.py(149):         self.serialize = serialize
0.57 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_date = unique_for_date
0.57 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_month = unique_for_month
0.57 /testbed/django/db/models/fields/__init__.py(152):         self.unique_for_year = unique_for_year
0.57 /testbed/django/db/models/fields/__init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.57 /testbed/django/db/models/fields/__init__.py(155):         self.choices = choices
0.57 /testbed/django/db/models/fields/__init__.py(156):         self.help_text = help_text
0.57 /testbed/django/db/models/fields/__init__.py(157):         self.db_index = db_index
0.57 /testbed/django/db/models/fields/__init__.py(158):         self.db_column = db_column
0.57 /testbed/django/db/models/fields/__init__.py(159):         self._db_tablespace = db_tablespace
0.57 /testbed/django/db/models/fields/__init__.py(160):         self.auto_created = auto_created
0.57 /testbed/django/db/models/fields/__init__.py(163):         if auto_created:
0.57 /testbed/django/db/models/fields/__init__.py(164):             self.creation_counter = Field.auto_creation_counter
0.57 /testbed/django/db/models/fields/__init__.py(165):             Field.auto_creation_counter -= 1
0.57 /testbed/django/db/models/fields/__init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.57 /testbed/django/db/models/fields/__init__.py(172):         messages = {}
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.57 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.57 /testbed/django/db/models/fields/__init__.py(175):         messages.update(error_messages or {})
0.57 /testbed/django/db/models/fields/__init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.57 /testbed/django/db/models/fields/__init__.py(177):         self.error_messages = messages
0.57 /testbed/django/db/models/fields/__init__.py(2476):         if cls._meta.auto_field:
0.57 /testbed/django/db/models/fields/__init__.py(2481):         super().contribute_to_class(cls, name, **kwargs)
0.57 /testbed/django/db/models/fields/__init__.py(782):         self.set_attributes_from_name(name)
0.57 /testbed/django/db/models/fields/__init__.py(769):         self.name = self.name or name
0.57 /testbed/django/db/models/fields/__init__.py(770):         self.attname, self.column = self.get_attname_column()
0.57 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.57 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.57 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.57 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.57 /testbed/django/db/models/fields/__init__.py(771):         self.concrete = self.column is not None
0.57 /testbed/django/db/models/fields/__init__.py(772):         if self.verbose_name is None and self.name:
0.57 /testbed/django/db/models/fields/__init__.py(783):         self.model = cls
0.57 /testbed/django/db/models/fields/__init__.py(784):         cls._meta.add_field(self, private=private_only)
0.57 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.57 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.57 /testbed/django/db/models/fields/__init__.py(529):             if (
0.57 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.57 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.57 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.57 /testbed/django/db/models/fields/__init__.py(529):             if (
0.57 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.57 /testbed/django/db/models/fields/__init__.py(528):         if isinstance(other, Field):
0.57 /testbed/django/db/models/fields/__init__.py(530):                 self.creation_counter != other.creation_counter or
0.57 /testbed/django/db/models/fields/__init__.py(529):             if (
0.57 /testbed/django/db/models/fields/__init__.py(533):                 return self.creation_counter < other.creation_counter
0.57 /testbed/django/db/models/fields/__init__.py(785):         if self.column:
0.57 /testbed/django/db/models/fields/__init__.py(786):             setattr(cls, self.attname, self.descriptor_class(self))
0.57 /testbed/django/db/models/fields/__init__.py(787):         if self.choices is not None:
0.57 /testbed/django/db/models/fields/__init__.py(2482):         cls._meta.auto_field = self
Found 1 test(s).
Skipping setup of unused database(s): default, other.
0.58 /testbed/django/db/models/fields/__init__.py(754):         return self._unique or self.primary_key
0.58 /testbed/django/db/models/fields/__init__.py(847):         return self._get_default()
0.58 /testbed/django/db/models/fields/__init__.py(851):         if self.has_default():
0.58 /testbed/django/db/models/fields/__init__.py(843):         return self.default is not NOT_PROVIDED
0.58 /testbed/django/db/models/fields/__init__.py(856):         if not self.empty_strings_allowed or self.null and not connection.features.interprets_empty_strings_as_nulls:
0.58 /testbed/django/db/models/fields/__init__.py(857):             return return_None
0.58 /testbed/django/db/models/fields/__init__.py(82):     return None
0.58 /testbed/django/db/models/fields/__init__.py(847):         return self._get_default()
0.58 /testbed/django/db/models/fields/__init__.py(851):         if self.has_default():
0.58 /testbed/django/db/models/fields/__init__.py(843):         return self.default is not NOT_PROVIDED
0.58 /testbed/django/db/models/fields/__init__.py(856):         if not self.empty_strings_allowed or self.null and not connection.features.interprets_empty_strings_as_nulls:
0.58 /testbed/django/db/models/fields/__init__.py(858):         return str  # return empty string
0.58 /testbed/django/db/models/fields/__init__.py(847):         return self._get_default()
0.58 /testbed/django/db/models/fields/__init__.py(851):         if self.has_default():
0.58 /testbed/django/db/models/fields/__init__.py(843):         return self.default is not NOT_PROVIDED
0.58 /testbed/django/db/models/fields/__init__.py(856):         if not self.empty_strings_allowed or self.null and not connection.features.interprets_empty_strings_as_nulls:
0.58 /testbed/django/db/models/fields/__init__.py(857):             return return_None
0.58 /testbed/django/db/models/fields/__init__.py(82):     return None
0.58 /testbed/django/db/models/fields/__init__.py(847):         return self._get_default()
0.58 /testbed/django/db/models/fields/__init__.py(851):         if self.has_default():
0.58 /testbed/django/db/models/fields/__init__.py(843):         return self.default is not NOT_PROVIDED
0.58 /testbed/django/db/models/fields/__init__.py(852):             if callable(self.default):
0.58 /testbed/django/db/models/fields/__init__.py(854):             return lambda: self.default
0.58 /testbed/django/db/models/fields/__init__.py(854):             return lambda: self.default
0.58 /testbed/django/db/models/fields/__init__.py(847):         return self._get_default()
0.58 /testbed/django/db/models/fields/__init__.py(851):         if self.has_default():
0.58 /testbed/django/db/models/fields/__init__.py(843):         return self.default is not NOT_PROVIDED
0.58 /testbed/django/db/models/fields/__init__.py(856):         if not self.empty_strings_allowed or self.null and not connection.features.interprets_empty_strings_as_nulls:
0.58 /testbed/django/db/models/fields/__init__.py(858):         return str  # return empty string
0.58 /testbed/django/db/models/fields/__init__.py(847):         return self._get_default()
0.58 /testbed/django/db/models/fields/__init__.py(851):         if self.has_default():
0.58 /testbed/django/db/models/fields/__init__.py(843):         return self.default is not NOT_PROVIDED
0.58 /testbed/django/db/models/fields/__init__.py(856):         if not self.empty_strings_allowed or self.null and not connection.features.interprets_empty_strings_as_nulls:
0.58 /testbed/django/db/models/fields/__init__.py(858):         return str  # return empty string
0.58 /testbed/django/db/models/fields/__init__.py(847):         return self._get_default()
0.58 /testbed/django/db/models/fields/__init__.py(851):         if self.has_default():
0.58 /testbed/django/db/models/fields/__init__.py(843):         return self.default is not NOT_PROVIDED
0.58 /testbed/django/db/models/fields/__init__.py(856):         if not self.empty_strings_allowed or self.null and not connection.features.interprets_empty_strings_as_nulls:
0.58 /testbed/django/db/models/fields/__init__.py(858):         return str  # return empty string
0.58 /testbed/django/db/models/fields/__init__.py(847):         return self._get_default()
0.58 /testbed/django/db/models/fields/__init__.py(851):         if self.has_default():
0.58 /testbed/django/db/models/fields/__init__.py(843):         return self.default is not NOT_PROVIDED
0.58 /testbed/django/db/models/fields/__init__.py(856):         if not self.empty_strings_allowed or self.null and not connection.features.interprets_empty_strings_as_nulls:
0.58 /testbed/django/db/models/fields/__init__.py(858):         return str  # return empty string
0.58 /testbed/django/db/models/fields/__init__.py(847):         return self._get_default()
0.58 /testbed/django/db/models/fields/__init__.py(851):         if self.has_default():
0.58 /testbed/django/db/models/fields/__init__.py(843):         return self.default is not NOT_PROVIDED
0.58 /testbed/django/db/models/fields/__init__.py(852):             if callable(self.default):
0.58 /testbed/django/db/models/fields/__init__.py(854):             return lambda: self.default
0.58 /testbed/django/db/models/fields/__init__.py(854):             return lambda: self.default
0.58 /testbed/django/db/models/fields/__init__.py(847):         return self._get_default()
0.58 /testbed/django/db/models/fields/__init__.py(851):         if self.has_default():
0.58 /testbed/django/db/models/fields/__init__.py(843):         return self.default is not NOT_PROVIDED
0.58 /testbed/django/db/models/fields/__init__.py(852):             if callable(self.default):
0.58 /testbed/django/db/models/fields/__init__.py(854):             return lambda: self.default
0.58 /testbed/django/db/models/fields/__init__.py(854):             return lambda: self.default
0.58 /testbed/django/db/models/fields/__init__.py(847):         return self._get_default()
0.58 /testbed/django/db/models/fields/__init__.py(851):         if self.has_default():
0.58 /testbed/django/db/models/fields/__init__.py(843):         return self.default is not NOT_PROVIDED
0.58 /testbed/django/db/models/fields/__init__.py(852):             if callable(self.default):
0.58 /testbed/django/db/models/fields/__init__.py(853):                 return self.default
0.58 /testbed/django/db/models/fields/__init__.py(847):         return self._get_default()
0.58 /testbed/django/db/models/fields/__init__.py(82):     return None
0.58 /testbed/django/db/models/fields/__init__.py(847):         return self._get_default()
0.58 /testbed/django/db/models/fields/__init__.py(847):         return self._get_default()
0.58 /testbed/django/db/models/fields/__init__.py(82):     return None
0.58 /testbed/django/db/models/fields/__init__.py(847):         return self._get_default()
0.58 /testbed/django/db/models/fields/__init__.py(854):             return lambda: self.default
0.58 /testbed/django/db/models/fields/__init__.py(847):         return self._get_default()
0.58 /testbed/django/db/models/fields/__init__.py(847):         return self._get_default()
0.58 /testbed/django/db/models/fields/__init__.py(847):         return self._get_default()
0.58 /testbed/django/db/models/fields/__init__.py(847):         return self._get_default()
0.58 /testbed/django/db/models/fields/__init__.py(847):         return self._get_default()
0.58 /testbed/django/db/models/fields/__init__.py(854):             return lambda: self.default
0.58 /testbed/django/db/models/fields/__init__.py(847):         return self._get_default()
0.58 /testbed/django/db/models/fields/__init__.py(854):             return lambda: self.default
0.58 /testbed/django/db/models/fields/__init__.py(847):         return self._get_default()
0.60 /testbed/django/db/models/fields/__init__.py(2443):         return [
0.60 /testbed/django/db/models/fields/__init__.py(2444):             *super().check(**kwargs),
0.60 /testbed/django/db/models/fields/__init__.py(1781):         return [
0.60 /testbed/django/db/models/fields/__init__.py(1782):             *super().check(**kwargs),
0.60 /testbed/django/db/models/fields/__init__.py(198):         return [
0.60 /testbed/django/db/models/fields/__init__.py(199):             *self._check_field_name(),
0.60 /testbed/django/db/models/fields/__init__.py(213):         if self.name.endswith('_'):
0.60 /testbed/django/db/models/fields/__init__.py(221):         elif LOOKUP_SEP in self.name:
0.60 /testbed/django/db/models/fields/__init__.py(229):         elif self.name == 'pk':
0.60 /testbed/django/db/models/fields/__init__.py(238):             return []
0.60 /testbed/django/db/models/fields/__init__.py(198):         return [
0.60 /testbed/django/db/models/fields/__init__.py(200):             *self._check_choices(),
0.60 /testbed/django/db/models/fields/__init__.py(245):         if not self.choices:
0.60 /testbed/django/db/models/fields/__init__.py(246):             return []
0.60 /testbed/django/db/models/fields/__init__.py(198):         return [
0.60 /testbed/django/db/models/fields/__init__.py(201):             *self._check_db_index(),
0.60 /testbed/django/db/models/fields/__init__.py(309):         if self.db_index not in (None, True, False):
0.60 /testbed/django/db/models/fields/__init__.py(318):             return []
0.60 /testbed/django/db/models/fields/__init__.py(198):         return [
0.60 /testbed/django/db/models/fields/__init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.60 /testbed/django/db/models/fields/__init__.py(321):         if (self.primary_key and self.null and
0.60 /testbed/django/db/models/fields/__init__.py(336):             return []
0.60 /testbed/django/db/models/fields/__init__.py(198):         return [
0.60 /testbed/django/db/models/fields/__init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.60 /testbed/django/db/models/fields/__init__.py(339):         if databases is None:
0.60 /testbed/django/db/models/fields/__init__.py(341):         app_label = self.model._meta.app_label
0.60 /testbed/django/db/models/fields/__init__.py(342):         errors = []
0.60 /testbed/django/db/models/fields/__init__.py(343):         for alias in databases:
0.60 /testbed/django/db/models/fields/__init__.py(346):         return errors
0.60 /testbed/django/db/models/fields/__init__.py(198):         return [
0.60 /testbed/django/db/models/fields/__init__.py(204):             *self._check_validators(),
0.60 /testbed/django/db/models/fields/__init__.py(349):         errors = []
0.60 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.60 /testbed/django/db/models/fields/__init__.py(1802):         validators_ = super().validators
0.60 /testbed/django/db/models/fields/__init__.py(615):         return [*self.default_validators, *self._validators]
0.60 /testbed/django/db/models/fields/__init__.py(1803):         internal_type = self.get_internal_type()
0.60 /testbed/django/db/models/fields/__init__.py(2519):         return 'AutoField'
0.60 /testbed/django/db/models/fields/__init__.py(1804):         min_value, max_value = connection.ops.integer_field_range(internal_type)
0.60 /testbed/django/db/models/fields/__init__.py(1805):         if min_value is not None and not any(
0.60 /testbed/django/db/models/fields/__init__.py(1815):         if max_value is not None and not any(
0.60 /testbed/django/db/models/fields/__init__.py(1825):         return validators_
0.60 /testbed/django/db/models/fields/__init__.py(365):         return errors
0.60 /testbed/django/db/models/fields/__init__.py(198):         return [
0.60 /testbed/django/db/models/fields/__init__.py(205):             *self._check_deprecation_details(),
0.60 /testbed/django/db/models/fields/__init__.py(368):         if self.system_check_removed_details is not None:
0.60 /testbed/django/db/models/fields/__init__.py(381):         elif self.system_check_deprecated_details is not None:
0.60 /testbed/django/db/models/fields/__init__.py(393):         return []
0.60 /testbed/django/db/models/fields/__init__.py(198):         return [
0.60 /testbed/django/db/models/fields/__init__.py(1781):         return [
0.60 /testbed/django/db/models/fields/__init__.py(1783):             *self._check_max_length_warning(),
0.60 /testbed/django/db/models/fields/__init__.py(1787):         if self.max_length is not None:
0.60 /testbed/django/db/models/fields/__init__.py(1796):         return []
0.60 /testbed/django/db/models/fields/__init__.py(1781):         return [
0.60 /testbed/django/db/models/fields/__init__.py(2443):         return [
0.60 /testbed/django/db/models/fields/__init__.py(2445):             *self._check_primary_key(),
0.60 /testbed/django/db/models/fields/__init__.py(2449):         if not self.primary_key:
0.60 /testbed/django/db/models/fields/__init__.py(2458):             return []
0.60 /testbed/django/db/models/fields/__init__.py(2443):         return [
0.60 /testbed/django/db/models/fields/__init__.py(1017):         databases = kwargs.get('databases') or []
0.60 /testbed/django/db/models/fields/__init__.py(1018):         return [
0.60 /testbed/django/db/models/fields/__init__.py(1019):             *super().check(**kwargs),
0.60 /testbed/django/db/models/fields/__init__.py(198):         return [
0.60 /testbed/django/db/models/fields/__init__.py(199):             *self._check_field_name(),
0.60 /testbed/django/db/models/fields/__init__.py(213):         if self.name.endswith('_'):
0.60 /testbed/django/db/models/fields/__init__.py(221):         elif LOOKUP_SEP in self.name:
0.60 /testbed/django/db/models/fields/__init__.py(229):         elif self.name == 'pk':
0.60 /testbed/django/db/models/fields/__init__.py(238):             return []
0.60 /testbed/django/db/models/fields/__init__.py(198):         return [
0.60 /testbed/django/db/models/fields/__init__.py(200):             *self._check_choices(),
0.60 /testbed/django/db/models/fields/__init__.py(245):         if not self.choices:
0.60 /testbed/django/db/models/fields/__init__.py(246):             return []
0.60 /testbed/django/db/models/fields/__init__.py(198):         return [
0.60 /testbed/django/db/models/fields/__init__.py(201):             *self._check_db_index(),
0.60 /testbed/django/db/models/fields/__init__.py(309):         if self.db_index not in (None, True, False):
0.60 /testbed/django/db/models/fields/__init__.py(318):             return []
0.60 /testbed/django/db/models/fields/__init__.py(198):         return [
0.60 /testbed/django/db/models/fields/__init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.60 /testbed/django/db/models/fields/__init__.py(321):         if (self.primary_key and self.null and
0.60 /testbed/django/db/models/fields/__init__.py(336):             return []
0.60 /testbed/django/db/models/fields/__init__.py(198):         return [
0.60 /testbed/django/db/models/fields/__init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.60 /testbed/django/db/models/fields/__init__.py(339):         if databases is None:
0.60 /testbed/django/db/models/fields/__init__.py(341):         app_label = self.model._meta.app_label
0.60 /testbed/django/db/models/fields/__init__.py(342):         errors = []
0.60 /testbed/django/db/models/fields/__init__.py(343):         for alias in databases:
0.60 /testbed/django/db/models/fields/__init__.py(346):         return errors
0.60 /testbed/django/db/models/fields/__init__.py(198):         return [
0.60 /testbed/django/db/models/fields/__init__.py(204):             *self._check_validators(),
0.60 /testbed/django/db/models/fields/__init__.py(349):         errors = []
0.60 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.60 /testbed/django/db/models/fields/__init__.py(351):             if not callable(validator):
0.60 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.60 /testbed/django/db/models/fields/__init__.py(365):         return errors
0.60 /testbed/django/db/models/fields/__init__.py(198):         return [
0.60 /testbed/django/db/models/fields/__init__.py(205):             *self._check_deprecation_details(),
0.60 /testbed/django/db/models/fields/__init__.py(368):         if self.system_check_removed_details is not None:
0.60 /testbed/django/db/models/fields/__init__.py(381):         elif self.system_check_deprecated_details is not None:
0.60 /testbed/django/db/models/fields/__init__.py(393):         return []
0.60 /testbed/django/db/models/fields/__init__.py(198):         return [
0.60 /testbed/django/db/models/fields/__init__.py(1018):         return [
0.60 /testbed/django/db/models/fields/__init__.py(1020):             *self._check_db_collation(databases),
0.60 /testbed/django/db/models/fields/__init__.py(1046):         errors = []
0.60 /testbed/django/db/models/fields/__init__.py(1047):         for db in databases:
0.60 /testbed/django/db/models/fields/__init__.py(1064):         return errors
0.60 /testbed/django/db/models/fields/__init__.py(1018):         return [
0.60 /testbed/django/db/models/fields/__init__.py(1021):             *self._check_max_length_attribute(**kwargs),
0.60 /testbed/django/db/models/fields/__init__.py(1025):         if self.max_length is None:
0.60 /testbed/django/db/models/fields/__init__.py(1033):         elif (not isinstance(self.max_length, int) or isinstance(self.max_length, bool) or
0.60 /testbed/django/db/models/fields/__init__.py(1034):                 self.max_length <= 0):
0.60 /testbed/django/db/models/fields/__init__.py(1033):         elif (not isinstance(self.max_length, int) or isinstance(self.max_length, bool) or
0.60 /testbed/django/db/models/fields/__init__.py(1043):             return []
0.60 /testbed/django/db/models/fields/__init__.py(1018):         return [
0.60 /testbed/django/db/models/fields/__init__.py(1017):         databases = kwargs.get('databases') or []
0.60 /testbed/django/db/models/fields/__init__.py(1018):         return [
0.60 /testbed/django/db/models/fields/__init__.py(1019):             *super().check(**kwargs),
0.60 /testbed/django/db/models/fields/__init__.py(198):         return [
0.60 /testbed/django/db/models/fields/__init__.py(199):             *self._check_field_name(),
0.60 /testbed/django/db/models/fields/__init__.py(213):         if self.name.endswith('_'):
0.60 /testbed/django/db/models/fields/__init__.py(221):         elif LOOKUP_SEP in self.name:
0.60 /testbed/django/db/models/fields/__init__.py(229):         elif self.name == 'pk':
0.60 /testbed/django/db/models/fields/__init__.py(238):             return []
0.60 /testbed/django/db/models/fields/__init__.py(198):         return [
0.60 /testbed/django/db/models/fields/__init__.py(200):             *self._check_choices(),
0.60 /testbed/django/db/models/fields/__init__.py(245):         if not self.choices:
0.60 /testbed/django/db/models/fields/__init__.py(246):             return []
0.60 /testbed/django/db/models/fields/__init__.py(198):         return [
0.60 /testbed/django/db/models/fields/__init__.py(201):             *self._check_db_index(),
0.60 /testbed/django/db/models/fields/__init__.py(309):         if self.db_index not in (None, True, False):
0.60 /testbed/django/db/models/fields/__init__.py(318):             return []
0.60 /testbed/django/db/models/fields/__init__.py(198):         return [
0.60 /testbed/django/db/models/fields/__init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.60 /testbed/django/db/models/fields/__init__.py(321):         if (self.primary_key and self.null and
0.60 /testbed/django/db/models/fields/__init__.py(336):             return []
0.60 /testbed/django/db/models/fields/__init__.py(198):         return [
0.60 /testbed/django/db/models/fields/__init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.60 /testbed/django/db/models/fields/__init__.py(339):         if databases is None:
0.60 /testbed/django/db/models/fields/__init__.py(341):         app_label = self.model._meta.app_label
0.60 /testbed/django/db/models/fields/__init__.py(342):         errors = []
0.60 /testbed/django/db/models/fields/__init__.py(343):         for alias in databases:
0.60 /testbed/django/db/models/fields/__init__.py(346):         return errors
0.60 /testbed/django/db/models/fields/__init__.py(198):         return [
0.60 /testbed/django/db/models/fields/__init__.py(204):             *self._check_validators(),
0.60 /testbed/django/db/models/fields/__init__.py(349):         errors = []
0.60 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.60 /testbed/django/db/models/fields/__init__.py(351):             if not callable(validator):
0.60 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.60 /testbed/django/db/models/fields/__init__.py(365):         return errors
0.60 /testbed/django/db/models/fields/__init__.py(198):         return [
0.60 /testbed/django/db/models/fields/__init__.py(205):             *self._check_deprecation_details(),
0.60 /testbed/django/db/models/fields/__init__.py(368):         if self.system_check_removed_details is not None:
0.60 /testbed/django/db/models/fields/__init__.py(381):         elif self.system_check_deprecated_details is not None:
0.60 /testbed/django/db/models/fields/__init__.py(393):         return []
0.60 /testbed/django/db/models/fields/__init__.py(198):         return [
0.60 /testbed/django/db/models/fields/__init__.py(1018):         return [
0.60 /testbed/django/db/models/fields/__init__.py(1020):             *self._check_db_collation(databases),
0.60 /testbed/django/db/models/fields/__init__.py(1046):         errors = []
0.60 /testbed/django/db/models/fields/__init__.py(1047):         for db in databases:
0.60 /testbed/django/db/models/fields/__init__.py(1064):         return errors
0.60 /testbed/django/db/models/fields/__init__.py(1018):         return [
0.60 /testbed/django/db/models/fields/__init__.py(1021):             *self._check_max_length_attribute(**kwargs),
0.60 /testbed/django/db/models/fields/__init__.py(1025):         if self.max_length is None:
0.60 /testbed/django/db/models/fields/__init__.py(1033):         elif (not isinstance(self.max_length, int) or isinstance(self.max_length, bool) or
0.60 /testbed/django/db/models/fields/__init__.py(1034):                 self.max_length <= 0):
0.60 /testbed/django/db/models/fields/__init__.py(1033):         elif (not isinstance(self.max_length, int) or isinstance(self.max_length, bool) or
0.60 /testbed/django/db/models/fields/__init__.py(1043):             return []
0.60 /testbed/django/db/models/fields/__init__.py(1018):         return [
0.60 /testbed/django/db/models/fields/__init__.py(518):         if isinstance(other, Field):
0.60 /testbed/django/db/models/fields/__init__.py(520):                 self.creation_counter == other.creation_counter and
0.60 /testbed/django/db/models/fields/__init__.py(521):                 getattr(self, 'model', None) == getattr(other, 'model', None)
0.60 /testbed/django/db/models/fields/__init__.py(519):             return (
0.60 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.60 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.60 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.60 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.60 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.60 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.60 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.60 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.60 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.60 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.60 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.60 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.60 /testbed/django/db/models/fields/__init__.py(518):         if isinstance(other, Field):
0.60 /testbed/django/db/models/fields/__init__.py(520):                 self.creation_counter == other.creation_counter and
0.60 /testbed/django/db/models/fields/__init__.py(519):             return (
0.60 /testbed/django/db/models/fields/__init__.py(518):         if isinstance(other, Field):
0.60 /testbed/django/db/models/fields/__init__.py(520):                 self.creation_counter == other.creation_counter and
0.60 /testbed/django/db/models/fields/__init__.py(519):             return (
0.60 /testbed/django/db/models/fields/__init__.py(518):         if isinstance(other, Field):
0.60 /testbed/django/db/models/fields/__init__.py(520):                 self.creation_counter == other.creation_counter and
0.60 /testbed/django/db/models/fields/__init__.py(519):             return (
0.60 /testbed/django/db/models/fields/__init__.py(2443):         return [
0.60 /testbed/django/db/models/fields/__init__.py(2444):             *super().check(**kwargs),
0.60 /testbed/django/db/models/fields/__init__.py(1781):         return [
0.60 /testbed/django/db/models/fields/__init__.py(1782):             *super().check(**kwargs),
0.60 /testbed/django/db/models/fields/__init__.py(198):         return [
0.60 /testbed/django/db/models/fields/__init__.py(199):             *self._check_field_name(),
0.60 /testbed/django/db/models/fields/__init__.py(213):         if self.name.endswith('_'):
0.60 /testbed/django/db/models/fields/__init__.py(221):         elif LOOKUP_SEP in self.name:
0.60 /testbed/django/db/models/fields/__init__.py(229):         elif self.name == 'pk':
0.60 /testbed/django/db/models/fields/__init__.py(238):             return []
0.60 /testbed/django/db/models/fields/__init__.py(198):         return [
0.60 /testbed/django/db/models/fields/__init__.py(200):             *self._check_choices(),
0.60 /testbed/django/db/models/fields/__init__.py(245):         if not self.choices:
0.60 /testbed/django/db/models/fields/__init__.py(246):             return []
0.60 /testbed/django/db/models/fields/__init__.py(198):         return [
0.60 /testbed/django/db/models/fields/__init__.py(201):             *self._check_db_index(),
0.60 /testbed/django/db/models/fields/__init__.py(309):         if self.db_index not in (None, True, False):
0.60 /testbed/django/db/models/fields/__init__.py(318):             return []
0.60 /testbed/django/db/models/fields/__init__.py(198):         return [
0.60 /testbed/django/db/models/fields/__init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.60 /testbed/django/db/models/fields/__init__.py(321):         if (self.primary_key and self.null and
0.60 /testbed/django/db/models/fields/__init__.py(336):             return []
0.60 /testbed/django/db/models/fields/__init__.py(198):         return [
0.60 /testbed/django/db/models/fields/__init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.60 /testbed/django/db/models/fields/__init__.py(339):         if databases is None:
0.60 /testbed/django/db/models/fields/__init__.py(341):         app_label = self.model._meta.app_label
0.60 /testbed/django/db/models/fields/__init__.py(342):         errors = []
0.60 /testbed/django/db/models/fields/__init__.py(343):         for alias in databases:
0.60 /testbed/django/db/models/fields/__init__.py(346):         return errors
0.60 /testbed/django/db/models/fields/__init__.py(198):         return [
0.60 /testbed/django/db/models/fields/__init__.py(204):             *self._check_validators(),
0.60 /testbed/django/db/models/fields/__init__.py(349):         errors = []
0.60 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.60 /testbed/django/db/models/fields/__init__.py(1802):         validators_ = super().validators
0.60 /testbed/django/db/models/fields/__init__.py(615):         return [*self.default_validators, *self._validators]
0.60 /testbed/django/db/models/fields/__init__.py(1803):         internal_type = self.get_internal_type()
0.60 /testbed/django/db/models/fields/__init__.py(2519):         return 'AutoField'
0.60 /testbed/django/db/models/fields/__init__.py(1804):         min_value, max_value = connection.ops.integer_field_range(internal_type)
0.60 /testbed/django/db/models/fields/__init__.py(1805):         if min_value is not None and not any(
0.60 /testbed/django/db/models/fields/__init__.py(1815):         if max_value is not None and not any(
0.60 /testbed/django/db/models/fields/__init__.py(1825):         return validators_
0.60 /testbed/django/db/models/fields/__init__.py(365):         return errors
0.60 /testbed/django/db/models/fields/__init__.py(198):         return [
0.60 /testbed/django/db/models/fields/__init__.py(205):             *self._check_deprecation_details(),
0.60 /testbed/django/db/models/fields/__init__.py(368):         if self.system_check_removed_details is not None:
0.60 /testbed/django/db/models/fields/__init__.py(381):         elif self.system_check_deprecated_details is not None:
0.60 /testbed/django/db/models/fields/__init__.py(393):         return []
0.60 /testbed/django/db/models/fields/__init__.py(198):         return [
0.60 /testbed/django/db/models/fields/__init__.py(1781):         return [
0.60 /testbed/django/db/models/fields/__init__.py(1783):             *self._check_max_length_warning(),
0.60 /testbed/django/db/models/fields/__init__.py(1787):         if self.max_length is not None:
0.60 /testbed/django/db/models/fields/__init__.py(1796):         return []
0.60 /testbed/django/db/models/fields/__init__.py(1781):         return [
0.60 /testbed/django/db/models/fields/__init__.py(2443):         return [
0.60 /testbed/django/db/models/fields/__init__.py(2445):             *self._check_primary_key(),
0.60 /testbed/django/db/models/fields/__init__.py(2449):         if not self.primary_key:
0.60 /testbed/django/db/models/fields/__init__.py(2458):             return []
0.60 /testbed/django/db/models/fields/__init__.py(2443):         return [
0.60 /testbed/django/db/models/fields/__init__.py(1017):         databases = kwargs.get('databases') or []
0.60 /testbed/django/db/models/fields/__init__.py(1018):         return [
0.60 /testbed/django/db/models/fields/__init__.py(1019):             *super().check(**kwargs),
0.60 /testbed/django/db/models/fields/__init__.py(198):         return [
0.60 /testbed/django/db/models/fields/__init__.py(199):             *self._check_field_name(),
0.60 /testbed/django/db/models/fields/__init__.py(213):         if self.name.endswith('_'):
0.60 /testbed/django/db/models/fields/__init__.py(221):         elif LOOKUP_SEP in self.name:
0.60 /testbed/django/db/models/fields/__init__.py(229):         elif self.name == 'pk':
0.60 /testbed/django/db/models/fields/__init__.py(238):             return []
0.60 /testbed/django/db/models/fields/__init__.py(198):         return [
0.60 /testbed/django/db/models/fields/__init__.py(200):             *self._check_choices(),
0.60 /testbed/django/db/models/fields/__init__.py(245):         if not self.choices:
0.60 /testbed/django/db/models/fields/__init__.py(246):             return []
0.60 /testbed/django/db/models/fields/__init__.py(198):         return [
0.60 /testbed/django/db/models/fields/__init__.py(201):             *self._check_db_index(),
0.60 /testbed/django/db/models/fields/__init__.py(309):         if self.db_index not in (None, True, False):
0.60 /testbed/django/db/models/fields/__init__.py(318):             return []
0.60 /testbed/django/db/models/fields/__init__.py(198):         return [
0.60 /testbed/django/db/models/fields/__init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.60 /testbed/django/db/models/fields/__init__.py(321):         if (self.primary_key and self.null and
0.60 /testbed/django/db/models/fields/__init__.py(336):             return []
0.60 /testbed/django/db/models/fields/__init__.py(198):         return [
0.60 /testbed/django/db/models/fields/__init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.60 /testbed/django/db/models/fields/__init__.py(339):         if databases is None:
0.60 /testbed/django/db/models/fields/__init__.py(341):         app_label = self.model._meta.app_label
0.60 /testbed/django/db/models/fields/__init__.py(342):         errors = []
0.60 /testbed/django/db/models/fields/__init__.py(343):         for alias in databases:
0.60 /testbed/django/db/models/fields/__init__.py(346):         return errors
0.60 /testbed/django/db/models/fields/__init__.py(198):         return [
0.60 /testbed/django/db/models/fields/__init__.py(204):             *self._check_validators(),
0.60 /testbed/django/db/models/fields/__init__.py(349):         errors = []
0.60 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.60 /testbed/django/db/models/fields/__init__.py(351):             if not callable(validator):
0.60 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.60 /testbed/django/db/models/fields/__init__.py(365):         return errors
0.60 /testbed/django/db/models/fields/__init__.py(198):         return [
0.60 /testbed/django/db/models/fields/__init__.py(205):             *self._check_deprecation_details(),
0.60 /testbed/django/db/models/fields/__init__.py(368):         if self.system_check_removed_details is not None:
0.60 /testbed/django/db/models/fields/__init__.py(381):         elif self.system_check_deprecated_details is not None:
0.60 /testbed/django/db/models/fields/__init__.py(393):         return []
0.60 /testbed/django/db/models/fields/__init__.py(198):         return [
0.60 /testbed/django/db/models/fields/__init__.py(1018):         return [
0.60 /testbed/django/db/models/fields/__init__.py(1020):             *self._check_db_collation(databases),
0.60 /testbed/django/db/models/fields/__init__.py(1046):         errors = []
0.60 /testbed/django/db/models/fields/__init__.py(1047):         for db in databases:
0.60 /testbed/django/db/models/fields/__init__.py(1064):         return errors
0.60 /testbed/django/db/models/fields/__init__.py(1018):         return [
0.60 /testbed/django/db/models/fields/__init__.py(1021):             *self._check_max_length_attribute(**kwargs),
0.60 /testbed/django/db/models/fields/__init__.py(1025):         if self.max_length is None:
0.60 /testbed/django/db/models/fields/__init__.py(1033):         elif (not isinstance(self.max_length, int) or isinstance(self.max_length, bool) or
0.60 /testbed/django/db/models/fields/__init__.py(1034):                 self.max_length <= 0):
0.60 /testbed/django/db/models/fields/__init__.py(1033):         elif (not isinstance(self.max_length, int) or isinstance(self.max_length, bool) or
0.60 /testbed/django/db/models/fields/__init__.py(1043):             return []
0.60 /testbed/django/db/models/fields/__init__.py(1018):         return [
0.60 /testbed/django/db/models/fields/__init__.py(198):         return [
0.60 /testbed/django/db/models/fields/__init__.py(199):             *self._check_field_name(),
0.60 /testbed/django/db/models/fields/__init__.py(213):         if self.name.endswith('_'):
0.60 /testbed/django/db/models/fields/__init__.py(221):         elif LOOKUP_SEP in self.name:
0.60 /testbed/django/db/models/fields/__init__.py(229):         elif self.name == 'pk':
0.60 /testbed/django/db/models/fields/__init__.py(238):             return []
0.60 /testbed/django/db/models/fields/__init__.py(198):         return [
0.60 /testbed/django/db/models/fields/__init__.py(200):             *self._check_choices(),
0.60 /testbed/django/db/models/fields/__init__.py(245):         if not self.choices:
0.60 /testbed/django/db/models/fields/__init__.py(246):             return []
0.60 /testbed/django/db/models/fields/__init__.py(198):         return [
0.60 /testbed/django/db/models/fields/__init__.py(201):             *self._check_db_index(),
0.60 /testbed/django/db/models/fields/__init__.py(309):         if self.db_index not in (None, True, False):
0.60 /testbed/django/db/models/fields/__init__.py(318):             return []
0.60 /testbed/django/db/models/fields/__init__.py(198):         return [
0.60 /testbed/django/db/models/fields/__init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.60 /testbed/django/db/models/fields/__init__.py(321):         if (self.primary_key and self.null and
0.60 /testbed/django/db/models/fields/__init__.py(336):             return []
0.60 /testbed/django/db/models/fields/__init__.py(198):         return [
0.60 /testbed/django/db/models/fields/__init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.60 /testbed/django/db/models/fields/__init__.py(339):         if databases is None:
0.60 /testbed/django/db/models/fields/__init__.py(341):         app_label = self.model._meta.app_label
0.60 /testbed/django/db/models/fields/__init__.py(342):         errors = []
0.60 /testbed/django/db/models/fields/__init__.py(343):         for alias in databases:
0.60 /testbed/django/db/models/fields/__init__.py(346):         return errors
0.60 /testbed/django/db/models/fields/__init__.py(198):         return [
0.60 /testbed/django/db/models/fields/__init__.py(204):             *self._check_validators(),
0.60 /testbed/django/db/models/fields/__init__.py(349):         errors = []
0.60 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.60 /testbed/django/db/models/fields/__init__.py(615):         return [*self.default_validators, *self._validators]
0.60 /testbed/django/db/models/fields/__init__.py(365):         return errors
0.60 /testbed/django/db/models/fields/__init__.py(198):         return [
0.60 /testbed/django/db/models/fields/__init__.py(205):             *self._check_deprecation_details(),
0.60 /testbed/django/db/models/fields/__init__.py(368):         if self.system_check_removed_details is not None:
0.60 /testbed/django/db/models/fields/__init__.py(381):         elif self.system_check_deprecated_details is not None:
0.60 /testbed/django/db/models/fields/__init__.py(393):         return []
0.60 /testbed/django/db/models/fields/__init__.py(198):         return [
0.60 /testbed/django/db/models/fields/__init__.py(754):         return self._unique or self.primary_key
0.60 /testbed/django/db/models/fields/__init__.py(754):         return self._unique or self.primary_key
0.60 /testbed/django/db/models/fields/__init__.py(754):         return self._unique or self.primary_key
0.60 /testbed/django/db/models/fields/__init__.py(754):         return self._unique or self.primary_key
0.60 /testbed/django/db/models/fields/__init__.py(1017):         databases = kwargs.get('databases') or []
0.60 /testbed/django/db/models/fields/__init__.py(1018):         return [
0.60 /testbed/django/db/models/fields/__init__.py(1019):             *super().check(**kwargs),
0.60 /testbed/django/db/models/fields/__init__.py(198):         return [
0.60 /testbed/django/db/models/fields/__init__.py(199):             *self._check_field_name(),
0.60 /testbed/django/db/models/fields/__init__.py(213):         if self.name.endswith('_'):
0.60 /testbed/django/db/models/fields/__init__.py(221):         elif LOOKUP_SEP in self.name:
0.60 /testbed/django/db/models/fields/__init__.py(229):         elif self.name == 'pk':
0.60 /testbed/django/db/models/fields/__init__.py(238):             return []
0.60 /testbed/django/db/models/fields/__init__.py(198):         return [
0.60 /testbed/django/db/models/fields/__init__.py(200):             *self._check_choices(),
0.60 /testbed/django/db/models/fields/__init__.py(245):         if not self.choices:
0.60 /testbed/django/db/models/fields/__init__.py(246):             return []
0.60 /testbed/django/db/models/fields/__init__.py(198):         return [
0.60 /testbed/django/db/models/fields/__init__.py(201):             *self._check_db_index(),
0.60 /testbed/django/db/models/fields/__init__.py(309):         if self.db_index not in (None, True, False):
0.60 /testbed/django/db/models/fields/__init__.py(318):             return []
0.60 /testbed/django/db/models/fields/__init__.py(198):         return [
0.60 /testbed/django/db/models/fields/__init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.60 /testbed/django/db/models/fields/__init__.py(321):         if (self.primary_key and self.null and
0.60 /testbed/django/db/models/fields/__init__.py(336):             return []
0.60 /testbed/django/db/models/fields/__init__.py(198):         return [
0.60 /testbed/django/db/models/fields/__init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.60 /testbed/django/db/models/fields/__init__.py(339):         if databases is None:
0.60 /testbed/django/db/models/fields/__init__.py(341):         app_label = self.model._meta.app_label
0.60 /testbed/django/db/models/fields/__init__.py(342):         errors = []
0.60 /testbed/django/db/models/fields/__init__.py(343):         for alias in databases:
0.60 /testbed/django/db/models/fields/__init__.py(346):         return errors
0.60 /testbed/django/db/models/fields/__init__.py(198):         return [
0.60 /testbed/django/db/models/fields/__init__.py(204):             *self._check_validators(),
0.60 /testbed/django/db/models/fields/__init__.py(349):         errors = []
0.60 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.60 /testbed/django/db/models/fields/__init__.py(351):             if not callable(validator):
0.60 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.60 /testbed/django/db/models/fields/__init__.py(365):         return errors
0.60 /testbed/django/db/models/fields/__init__.py(198):         return [
0.60 /testbed/django/db/models/fields/__init__.py(205):             *self._check_deprecation_details(),
0.60 /testbed/django/db/models/fields/__init__.py(368):         if self.system_check_removed_details is not None:
0.60 /testbed/django/db/models/fields/__init__.py(381):         elif self.system_check_deprecated_details is not None:
0.60 /testbed/django/db/models/fields/__init__.py(393):         return []
0.60 /testbed/django/db/models/fields/__init__.py(198):         return [
0.60 /testbed/django/db/models/fields/__init__.py(1018):         return [
0.60 /testbed/django/db/models/fields/__init__.py(1020):             *self._check_db_collation(databases),
0.60 /testbed/django/db/models/fields/__init__.py(1046):         errors = []
0.60 /testbed/django/db/models/fields/__init__.py(1047):         for db in databases:
0.60 /testbed/django/db/models/fields/__init__.py(1064):         return errors
0.60 /testbed/django/db/models/fields/__init__.py(1018):         return [
0.60 /testbed/django/db/models/fields/__init__.py(1021):             *self._check_max_length_attribute(**kwargs),
0.60 /testbed/django/db/models/fields/__init__.py(1025):         if self.max_length is None:
0.60 /testbed/django/db/models/fields/__init__.py(1033):         elif (not isinstance(self.max_length, int) or isinstance(self.max_length, bool) or
0.60 /testbed/django/db/models/fields/__init__.py(1034):                 self.max_length <= 0):
0.60 /testbed/django/db/models/fields/__init__.py(1033):         elif (not isinstance(self.max_length, int) or isinstance(self.max_length, bool) or
0.60 /testbed/django/db/models/fields/__init__.py(1043):             return []
0.60 /testbed/django/db/models/fields/__init__.py(1018):         return [
0.60 /testbed/django/db/models/fields/__init__.py(518):         if isinstance(other, Field):
0.60 /testbed/django/db/models/fields/__init__.py(520):                 self.creation_counter == other.creation_counter and
0.60 /testbed/django/db/models/fields/__init__.py(521):                 getattr(self, 'model', None) == getattr(other, 'model', None)
0.60 /testbed/django/db/models/fields/__init__.py(519):             return (
0.61 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.61 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.61 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.61 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.61 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.61 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.61 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.61 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.61 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.61 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.61 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.61 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.61 /testbed/django/db/models/fields/__init__.py(518):         if isinstance(other, Field):
0.61 /testbed/django/db/models/fields/__init__.py(520):                 self.creation_counter == other.creation_counter and
0.61 /testbed/django/db/models/fields/__init__.py(519):             return (
0.61 /testbed/django/db/models/fields/__init__.py(518):         if isinstance(other, Field):
0.61 /testbed/django/db/models/fields/__init__.py(520):                 self.creation_counter == other.creation_counter and
0.61 /testbed/django/db/models/fields/__init__.py(519):             return (
0.61 /testbed/django/db/models/fields/__init__.py(518):         if isinstance(other, Field):
0.61 /testbed/django/db/models/fields/__init__.py(520):                 self.creation_counter == other.creation_counter and
0.61 /testbed/django/db/models/fields/__init__.py(519):             return (
0.61 /testbed/django/db/models/fields/__init__.py(518):         if isinstance(other, Field):
0.61 /testbed/django/db/models/fields/__init__.py(520):                 self.creation_counter == other.creation_counter and
0.61 /testbed/django/db/models/fields/__init__.py(519):             return (
0.61 /testbed/django/db/models/fields/__init__.py(518):         if isinstance(other, Field):
0.61 /testbed/django/db/models/fields/__init__.py(520):                 self.creation_counter == other.creation_counter and
0.61 /testbed/django/db/models/fields/__init__.py(519):             return (
0.61 /testbed/django/db/models/fields/__init__.py(2443):         return [
0.61 /testbed/django/db/models/fields/__init__.py(2444):             *super().check(**kwargs),
0.61 /testbed/django/db/models/fields/__init__.py(1781):         return [
0.61 /testbed/django/db/models/fields/__init__.py(1782):             *super().check(**kwargs),
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(199):             *self._check_field_name(),
0.61 /testbed/django/db/models/fields/__init__.py(213):         if self.name.endswith('_'):
0.61 /testbed/django/db/models/fields/__init__.py(221):         elif LOOKUP_SEP in self.name:
0.61 /testbed/django/db/models/fields/__init__.py(229):         elif self.name == 'pk':
0.61 /testbed/django/db/models/fields/__init__.py(238):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(200):             *self._check_choices(),
0.61 /testbed/django/db/models/fields/__init__.py(245):         if not self.choices:
0.61 /testbed/django/db/models/fields/__init__.py(246):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(201):             *self._check_db_index(),
0.61 /testbed/django/db/models/fields/__init__.py(309):         if self.db_index not in (None, True, False):
0.61 /testbed/django/db/models/fields/__init__.py(318):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.61 /testbed/django/db/models/fields/__init__.py(321):         if (self.primary_key and self.null and
0.61 /testbed/django/db/models/fields/__init__.py(336):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.61 /testbed/django/db/models/fields/__init__.py(339):         if databases is None:
0.61 /testbed/django/db/models/fields/__init__.py(341):         app_label = self.model._meta.app_label
0.61 /testbed/django/db/models/fields/__init__.py(342):         errors = []
0.61 /testbed/django/db/models/fields/__init__.py(343):         for alias in databases:
0.61 /testbed/django/db/models/fields/__init__.py(346):         return errors
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(204):             *self._check_validators(),
0.61 /testbed/django/db/models/fields/__init__.py(349):         errors = []
0.61 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.61 /testbed/django/db/models/fields/__init__.py(1802):         validators_ = super().validators
0.61 /testbed/django/db/models/fields/__init__.py(615):         return [*self.default_validators, *self._validators]
0.61 /testbed/django/db/models/fields/__init__.py(1803):         internal_type = self.get_internal_type()
0.61 /testbed/django/db/models/fields/__init__.py(2519):         return 'AutoField'
0.61 /testbed/django/db/models/fields/__init__.py(1804):         min_value, max_value = connection.ops.integer_field_range(internal_type)
0.61 /testbed/django/db/models/fields/__init__.py(1805):         if min_value is not None and not any(
0.61 /testbed/django/db/models/fields/__init__.py(1815):         if max_value is not None and not any(
0.61 /testbed/django/db/models/fields/__init__.py(1825):         return validators_
0.61 /testbed/django/db/models/fields/__init__.py(365):         return errors
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(205):             *self._check_deprecation_details(),
0.61 /testbed/django/db/models/fields/__init__.py(368):         if self.system_check_removed_details is not None:
0.61 /testbed/django/db/models/fields/__init__.py(381):         elif self.system_check_deprecated_details is not None:
0.61 /testbed/django/db/models/fields/__init__.py(393):         return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(1781):         return [
0.61 /testbed/django/db/models/fields/__init__.py(1783):             *self._check_max_length_warning(),
0.61 /testbed/django/db/models/fields/__init__.py(1787):         if self.max_length is not None:
0.61 /testbed/django/db/models/fields/__init__.py(1796):         return []
0.61 /testbed/django/db/models/fields/__init__.py(1781):         return [
0.61 /testbed/django/db/models/fields/__init__.py(2443):         return [
0.61 /testbed/django/db/models/fields/__init__.py(2445):             *self._check_primary_key(),
0.61 /testbed/django/db/models/fields/__init__.py(2449):         if not self.primary_key:
0.61 /testbed/django/db/models/fields/__init__.py(2458):             return []
0.61 /testbed/django/db/models/fields/__init__.py(2443):         return [
0.61 /testbed/django/db/models/fields/__init__.py(1017):         databases = kwargs.get('databases') or []
0.61 /testbed/django/db/models/fields/__init__.py(1018):         return [
0.61 /testbed/django/db/models/fields/__init__.py(1019):             *super().check(**kwargs),
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(199):             *self._check_field_name(),
0.61 /testbed/django/db/models/fields/__init__.py(213):         if self.name.endswith('_'):
0.61 /testbed/django/db/models/fields/__init__.py(221):         elif LOOKUP_SEP in self.name:
0.61 /testbed/django/db/models/fields/__init__.py(229):         elif self.name == 'pk':
0.61 /testbed/django/db/models/fields/__init__.py(238):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(200):             *self._check_choices(),
0.61 /testbed/django/db/models/fields/__init__.py(245):         if not self.choices:
0.61 /testbed/django/db/models/fields/__init__.py(246):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(201):             *self._check_db_index(),
0.61 /testbed/django/db/models/fields/__init__.py(309):         if self.db_index not in (None, True, False):
0.61 /testbed/django/db/models/fields/__init__.py(318):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.61 /testbed/django/db/models/fields/__init__.py(321):         if (self.primary_key and self.null and
0.61 /testbed/django/db/models/fields/__init__.py(336):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.61 /testbed/django/db/models/fields/__init__.py(339):         if databases is None:
0.61 /testbed/django/db/models/fields/__init__.py(341):         app_label = self.model._meta.app_label
0.61 /testbed/django/db/models/fields/__init__.py(342):         errors = []
0.61 /testbed/django/db/models/fields/__init__.py(343):         for alias in databases:
0.61 /testbed/django/db/models/fields/__init__.py(346):         return errors
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(204):             *self._check_validators(),
0.61 /testbed/django/db/models/fields/__init__.py(349):         errors = []
0.61 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.61 /testbed/django/db/models/fields/__init__.py(351):             if not callable(validator):
0.61 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.61 /testbed/django/db/models/fields/__init__.py(365):         return errors
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(205):             *self._check_deprecation_details(),
0.61 /testbed/django/db/models/fields/__init__.py(368):         if self.system_check_removed_details is not None:
0.61 /testbed/django/db/models/fields/__init__.py(381):         elif self.system_check_deprecated_details is not None:
0.61 /testbed/django/db/models/fields/__init__.py(393):         return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(1018):         return [
0.61 /testbed/django/db/models/fields/__init__.py(1020):             *self._check_db_collation(databases),
0.61 /testbed/django/db/models/fields/__init__.py(1046):         errors = []
0.61 /testbed/django/db/models/fields/__init__.py(1047):         for db in databases:
0.61 /testbed/django/db/models/fields/__init__.py(1064):         return errors
0.61 /testbed/django/db/models/fields/__init__.py(1018):         return [
0.61 /testbed/django/db/models/fields/__init__.py(1021):             *self._check_max_length_attribute(**kwargs),
0.61 /testbed/django/db/models/fields/__init__.py(1025):         if self.max_length is None:
0.61 /testbed/django/db/models/fields/__init__.py(1033):         elif (not isinstance(self.max_length, int) or isinstance(self.max_length, bool) or
0.61 /testbed/django/db/models/fields/__init__.py(1034):                 self.max_length <= 0):
0.61 /testbed/django/db/models/fields/__init__.py(1033):         elif (not isinstance(self.max_length, int) or isinstance(self.max_length, bool) or
0.61 /testbed/django/db/models/fields/__init__.py(1043):             return []
0.61 /testbed/django/db/models/fields/__init__.py(1018):         return [
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(199):             *self._check_field_name(),
0.61 /testbed/django/db/models/fields/__init__.py(213):         if self.name.endswith('_'):
0.61 /testbed/django/db/models/fields/__init__.py(221):         elif LOOKUP_SEP in self.name:
0.61 /testbed/django/db/models/fields/__init__.py(229):         elif self.name == 'pk':
0.61 /testbed/django/db/models/fields/__init__.py(238):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(200):             *self._check_choices(),
0.61 /testbed/django/db/models/fields/__init__.py(245):         if not self.choices:
0.61 /testbed/django/db/models/fields/__init__.py(246):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(201):             *self._check_db_index(),
0.61 /testbed/django/db/models/fields/__init__.py(309):         if self.db_index not in (None, True, False):
0.61 /testbed/django/db/models/fields/__init__.py(318):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.61 /testbed/django/db/models/fields/__init__.py(321):         if (self.primary_key and self.null and
0.61 /testbed/django/db/models/fields/__init__.py(336):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.61 /testbed/django/db/models/fields/__init__.py(339):         if databases is None:
0.61 /testbed/django/db/models/fields/__init__.py(341):         app_label = self.model._meta.app_label
0.61 /testbed/django/db/models/fields/__init__.py(342):         errors = []
0.61 /testbed/django/db/models/fields/__init__.py(343):         for alias in databases:
0.61 /testbed/django/db/models/fields/__init__.py(346):         return errors
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(204):             *self._check_validators(),
0.61 /testbed/django/db/models/fields/__init__.py(349):         errors = []
0.61 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.61 /testbed/django/db/models/fields/__init__.py(615):         return [*self.default_validators, *self._validators]
0.61 /testbed/django/db/models/fields/__init__.py(365):         return errors
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(205):             *self._check_deprecation_details(),
0.61 /testbed/django/db/models/fields/__init__.py(368):         if self.system_check_removed_details is not None:
0.61 /testbed/django/db/models/fields/__init__.py(381):         elif self.system_check_deprecated_details is not None:
0.61 /testbed/django/db/models/fields/__init__.py(393):         return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(754):         return self._unique or self.primary_key
0.61 /testbed/django/db/models/fields/__init__.py(518):         if isinstance(other, Field):
0.61 /testbed/django/db/models/fields/__init__.py(520):                 self.creation_counter == other.creation_counter and
0.61 /testbed/django/db/models/fields/__init__.py(521):                 getattr(self, 'model', None) == getattr(other, 'model', None)
0.61 /testbed/django/db/models/fields/__init__.py(519):             return (
0.61 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.61 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.61 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.61 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.61 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.61 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.61 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.61 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.61 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.61 /testbed/django/db/models/fields/__init__.py(2443):         return [
0.61 /testbed/django/db/models/fields/__init__.py(2444):             *super().check(**kwargs),
0.61 /testbed/django/db/models/fields/__init__.py(1781):         return [
0.61 /testbed/django/db/models/fields/__init__.py(1782):             *super().check(**kwargs),
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(199):             *self._check_field_name(),
0.61 /testbed/django/db/models/fields/__init__.py(213):         if self.name.endswith('_'):
0.61 /testbed/django/db/models/fields/__init__.py(221):         elif LOOKUP_SEP in self.name:
0.61 /testbed/django/db/models/fields/__init__.py(229):         elif self.name == 'pk':
0.61 /testbed/django/db/models/fields/__init__.py(238):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(200):             *self._check_choices(),
0.61 /testbed/django/db/models/fields/__init__.py(245):         if not self.choices:
0.61 /testbed/django/db/models/fields/__init__.py(246):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(201):             *self._check_db_index(),
0.61 /testbed/django/db/models/fields/__init__.py(309):         if self.db_index not in (None, True, False):
0.61 /testbed/django/db/models/fields/__init__.py(318):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.61 /testbed/django/db/models/fields/__init__.py(321):         if (self.primary_key and self.null and
0.61 /testbed/django/db/models/fields/__init__.py(336):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.61 /testbed/django/db/models/fields/__init__.py(339):         if databases is None:
0.61 /testbed/django/db/models/fields/__init__.py(341):         app_label = self.model._meta.app_label
0.61 /testbed/django/db/models/fields/__init__.py(342):         errors = []
0.61 /testbed/django/db/models/fields/__init__.py(343):         for alias in databases:
0.61 /testbed/django/db/models/fields/__init__.py(346):         return errors
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(204):             *self._check_validators(),
0.61 /testbed/django/db/models/fields/__init__.py(349):         errors = []
0.61 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.61 /testbed/django/db/models/fields/__init__.py(1802):         validators_ = super().validators
0.61 /testbed/django/db/models/fields/__init__.py(615):         return [*self.default_validators, *self._validators]
0.61 /testbed/django/db/models/fields/__init__.py(1803):         internal_type = self.get_internal_type()
0.61 /testbed/django/db/models/fields/__init__.py(2519):         return 'AutoField'
0.61 /testbed/django/db/models/fields/__init__.py(1804):         min_value, max_value = connection.ops.integer_field_range(internal_type)
0.61 /testbed/django/db/models/fields/__init__.py(1805):         if min_value is not None and not any(
0.61 /testbed/django/db/models/fields/__init__.py(1815):         if max_value is not None and not any(
0.61 /testbed/django/db/models/fields/__init__.py(1825):         return validators_
0.61 /testbed/django/db/models/fields/__init__.py(365):         return errors
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(205):             *self._check_deprecation_details(),
0.61 /testbed/django/db/models/fields/__init__.py(368):         if self.system_check_removed_details is not None:
0.61 /testbed/django/db/models/fields/__init__.py(381):         elif self.system_check_deprecated_details is not None:
0.61 /testbed/django/db/models/fields/__init__.py(393):         return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(1781):         return [
0.61 /testbed/django/db/models/fields/__init__.py(1783):             *self._check_max_length_warning(),
0.61 /testbed/django/db/models/fields/__init__.py(1787):         if self.max_length is not None:
0.61 /testbed/django/db/models/fields/__init__.py(1796):         return []
0.61 /testbed/django/db/models/fields/__init__.py(1781):         return [
0.61 /testbed/django/db/models/fields/__init__.py(2443):         return [
0.61 /testbed/django/db/models/fields/__init__.py(2445):             *self._check_primary_key(),
0.61 /testbed/django/db/models/fields/__init__.py(2449):         if not self.primary_key:
0.61 /testbed/django/db/models/fields/__init__.py(2458):             return []
0.61 /testbed/django/db/models/fields/__init__.py(2443):         return [
0.61 /testbed/django/db/models/fields/__init__.py(1017):         databases = kwargs.get('databases') or []
0.61 /testbed/django/db/models/fields/__init__.py(1018):         return [
0.61 /testbed/django/db/models/fields/__init__.py(1019):             *super().check(**kwargs),
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(199):             *self._check_field_name(),
0.61 /testbed/django/db/models/fields/__init__.py(213):         if self.name.endswith('_'):
0.61 /testbed/django/db/models/fields/__init__.py(221):         elif LOOKUP_SEP in self.name:
0.61 /testbed/django/db/models/fields/__init__.py(229):         elif self.name == 'pk':
0.61 /testbed/django/db/models/fields/__init__.py(238):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(200):             *self._check_choices(),
0.61 /testbed/django/db/models/fields/__init__.py(245):         if not self.choices:
0.61 /testbed/django/db/models/fields/__init__.py(246):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(201):             *self._check_db_index(),
0.61 /testbed/django/db/models/fields/__init__.py(309):         if self.db_index not in (None, True, False):
0.61 /testbed/django/db/models/fields/__init__.py(318):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.61 /testbed/django/db/models/fields/__init__.py(321):         if (self.primary_key and self.null and
0.61 /testbed/django/db/models/fields/__init__.py(336):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.61 /testbed/django/db/models/fields/__init__.py(339):         if databases is None:
0.61 /testbed/django/db/models/fields/__init__.py(341):         app_label = self.model._meta.app_label
0.61 /testbed/django/db/models/fields/__init__.py(342):         errors = []
0.61 /testbed/django/db/models/fields/__init__.py(343):         for alias in databases:
0.61 /testbed/django/db/models/fields/__init__.py(346):         return errors
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(204):             *self._check_validators(),
0.61 /testbed/django/db/models/fields/__init__.py(349):         errors = []
0.61 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.61 /testbed/django/db/models/fields/__init__.py(351):             if not callable(validator):
0.61 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.61 /testbed/django/db/models/fields/__init__.py(365):         return errors
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(205):             *self._check_deprecation_details(),
0.61 /testbed/django/db/models/fields/__init__.py(368):         if self.system_check_removed_details is not None:
0.61 /testbed/django/db/models/fields/__init__.py(381):         elif self.system_check_deprecated_details is not None:
0.61 /testbed/django/db/models/fields/__init__.py(393):         return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(1018):         return [
0.61 /testbed/django/db/models/fields/__init__.py(1020):             *self._check_db_collation(databases),
0.61 /testbed/django/db/models/fields/__init__.py(1046):         errors = []
0.61 /testbed/django/db/models/fields/__init__.py(1047):         for db in databases:
0.61 /testbed/django/db/models/fields/__init__.py(1064):         return errors
0.61 /testbed/django/db/models/fields/__init__.py(1018):         return [
0.61 /testbed/django/db/models/fields/__init__.py(1021):             *self._check_max_length_attribute(**kwargs),
0.61 /testbed/django/db/models/fields/__init__.py(1025):         if self.max_length is None:
0.61 /testbed/django/db/models/fields/__init__.py(1033):         elif (not isinstance(self.max_length, int) or isinstance(self.max_length, bool) or
0.61 /testbed/django/db/models/fields/__init__.py(1034):                 self.max_length <= 0):
0.61 /testbed/django/db/models/fields/__init__.py(1033):         elif (not isinstance(self.max_length, int) or isinstance(self.max_length, bool) or
0.61 /testbed/django/db/models/fields/__init__.py(1043):             return []
0.61 /testbed/django/db/models/fields/__init__.py(1018):         return [
0.61 /testbed/django/db/models/fields/__init__.py(1130):         return [
0.61 /testbed/django/db/models/fields/__init__.py(1131):             *super().check(**kwargs),
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(199):             *self._check_field_name(),
0.61 /testbed/django/db/models/fields/__init__.py(213):         if self.name.endswith('_'):
0.61 /testbed/django/db/models/fields/__init__.py(221):         elif LOOKUP_SEP in self.name:
0.61 /testbed/django/db/models/fields/__init__.py(229):         elif self.name == 'pk':
0.61 /testbed/django/db/models/fields/__init__.py(238):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(200):             *self._check_choices(),
0.61 /testbed/django/db/models/fields/__init__.py(245):         if not self.choices:
0.61 /testbed/django/db/models/fields/__init__.py(246):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(201):             *self._check_db_index(),
0.61 /testbed/django/db/models/fields/__init__.py(309):         if self.db_index not in (None, True, False):
0.61 /testbed/django/db/models/fields/__init__.py(318):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.61 /testbed/django/db/models/fields/__init__.py(321):         if (self.primary_key and self.null and
0.61 /testbed/django/db/models/fields/__init__.py(336):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.61 /testbed/django/db/models/fields/__init__.py(339):         if databases is None:
0.61 /testbed/django/db/models/fields/__init__.py(341):         app_label = self.model._meta.app_label
0.61 /testbed/django/db/models/fields/__init__.py(342):         errors = []
0.61 /testbed/django/db/models/fields/__init__.py(343):         for alias in databases:
0.61 /testbed/django/db/models/fields/__init__.py(346):         return errors
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(204):             *self._check_validators(),
0.61 /testbed/django/db/models/fields/__init__.py(349):         errors = []
0.61 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.61 /testbed/django/db/models/fields/__init__.py(615):         return [*self.default_validators, *self._validators]
0.61 /testbed/django/db/models/fields/__init__.py(365):         return errors
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(205):             *self._check_deprecation_details(),
0.61 /testbed/django/db/models/fields/__init__.py(368):         if self.system_check_removed_details is not None:
0.61 /testbed/django/db/models/fields/__init__.py(381):         elif self.system_check_deprecated_details is not None:
0.61 /testbed/django/db/models/fields/__init__.py(393):         return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(1130):         return [
0.61 /testbed/django/db/models/fields/__init__.py(1132):             *self._check_mutually_exclusive_options(),
0.61 /testbed/django/db/models/fields/__init__.py(1140):         mutually_exclusive_options = [self.auto_now_add, self.auto_now, self.has_default()]
0.61 /testbed/django/db/models/fields/__init__.py(843):         return self.default is not NOT_PROVIDED
0.61 /testbed/django/db/models/fields/__init__.py(1141):         enabled_options = [option not in (None, False) for option in mutually_exclusive_options].count(True)
0.61 /testbed/django/db/models/fields/__init__.py(1141):         enabled_options = [option not in (None, False) for option in mutually_exclusive_options].count(True)
0.61 /testbed/django/db/models/fields/__init__.py(1141):         enabled_options = [option not in (None, False) for option in mutually_exclusive_options].count(True)
0.61 /testbed/django/db/models/fields/__init__.py(1141):         enabled_options = [option not in (None, False) for option in mutually_exclusive_options].count(True)
0.61 /testbed/django/db/models/fields/__init__.py(1141):         enabled_options = [option not in (None, False) for option in mutually_exclusive_options].count(True)
0.61 /testbed/django/db/models/fields/__init__.py(1142):         if enabled_options > 1:
0.61 /testbed/django/db/models/fields/__init__.py(1153):             return []
0.61 /testbed/django/db/models/fields/__init__.py(1130):         return [
0.61 /testbed/django/db/models/fields/__init__.py(1133):             *self._check_fix_default_value(),
0.61 /testbed/django/db/models/fields/__init__.py(1337):         if not self.has_default():
0.61 /testbed/django/db/models/fields/__init__.py(843):         return self.default is not NOT_PROVIDED
0.61 /testbed/django/db/models/fields/__init__.py(1338):             return []
0.61 /testbed/django/db/models/fields/__init__.py(1130):         return [
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(199):             *self._check_field_name(),
0.61 /testbed/django/db/models/fields/__init__.py(213):         if self.name.endswith('_'):
0.61 /testbed/django/db/models/fields/__init__.py(221):         elif LOOKUP_SEP in self.name:
0.61 /testbed/django/db/models/fields/__init__.py(229):         elif self.name == 'pk':
0.61 /testbed/django/db/models/fields/__init__.py(238):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(200):             *self._check_choices(),
0.61 /testbed/django/db/models/fields/__init__.py(245):         if not self.choices:
0.61 /testbed/django/db/models/fields/__init__.py(246):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(201):             *self._check_db_index(),
0.61 /testbed/django/db/models/fields/__init__.py(309):         if self.db_index not in (None, True, False):
0.61 /testbed/django/db/models/fields/__init__.py(318):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.61 /testbed/django/db/models/fields/__init__.py(321):         if (self.primary_key and self.null and
0.61 /testbed/django/db/models/fields/__init__.py(336):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.61 /testbed/django/db/models/fields/__init__.py(339):         if databases is None:
0.61 /testbed/django/db/models/fields/__init__.py(341):         app_label = self.model._meta.app_label
0.61 /testbed/django/db/models/fields/__init__.py(342):         errors = []
0.61 /testbed/django/db/models/fields/__init__.py(343):         for alias in databases:
0.61 /testbed/django/db/models/fields/__init__.py(346):         return errors
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(204):             *self._check_validators(),
0.61 /testbed/django/db/models/fields/__init__.py(349):         errors = []
0.61 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.61 /testbed/django/db/models/fields/__init__.py(615):         return [*self.default_validators, *self._validators]
0.61 /testbed/django/db/models/fields/__init__.py(365):         return errors
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(205):             *self._check_deprecation_details(),
0.61 /testbed/django/db/models/fields/__init__.py(368):         if self.system_check_removed_details is not None:
0.61 /testbed/django/db/models/fields/__init__.py(381):         elif self.system_check_deprecated_details is not None:
0.61 /testbed/django/db/models/fields/__init__.py(393):         return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(1017):         databases = kwargs.get('databases') or []
0.61 /testbed/django/db/models/fields/__init__.py(1018):         return [
0.61 /testbed/django/db/models/fields/__init__.py(1019):             *super().check(**kwargs),
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(199):             *self._check_field_name(),
0.61 /testbed/django/db/models/fields/__init__.py(213):         if self.name.endswith('_'):
0.61 /testbed/django/db/models/fields/__init__.py(221):         elif LOOKUP_SEP in self.name:
0.61 /testbed/django/db/models/fields/__init__.py(229):         elif self.name == 'pk':
0.61 /testbed/django/db/models/fields/__init__.py(238):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(200):             *self._check_choices(),
0.61 /testbed/django/db/models/fields/__init__.py(245):         if not self.choices:
0.61 /testbed/django/db/models/fields/__init__.py(246):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(201):             *self._check_db_index(),
0.61 /testbed/django/db/models/fields/__init__.py(309):         if self.db_index not in (None, True, False):
0.61 /testbed/django/db/models/fields/__init__.py(318):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.61 /testbed/django/db/models/fields/__init__.py(321):         if (self.primary_key and self.null and
0.61 /testbed/django/db/models/fields/__init__.py(336):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.61 /testbed/django/db/models/fields/__init__.py(339):         if databases is None:
0.61 /testbed/django/db/models/fields/__init__.py(341):         app_label = self.model._meta.app_label
0.61 /testbed/django/db/models/fields/__init__.py(342):         errors = []
0.61 /testbed/django/db/models/fields/__init__.py(343):         for alias in databases:
0.61 /testbed/django/db/models/fields/__init__.py(346):         return errors
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(204):             *self._check_validators(),
0.61 /testbed/django/db/models/fields/__init__.py(349):         errors = []
0.61 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.61 /testbed/django/db/models/fields/__init__.py(351):             if not callable(validator):
0.61 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.61 /testbed/django/db/models/fields/__init__.py(351):             if not callable(validator):
0.61 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.61 /testbed/django/db/models/fields/__init__.py(365):         return errors
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(205):             *self._check_deprecation_details(),
0.61 /testbed/django/db/models/fields/__init__.py(368):         if self.system_check_removed_details is not None:
0.61 /testbed/django/db/models/fields/__init__.py(381):         elif self.system_check_deprecated_details is not None:
0.61 /testbed/django/db/models/fields/__init__.py(393):         return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(1018):         return [
0.61 /testbed/django/db/models/fields/__init__.py(1020):             *self._check_db_collation(databases),
0.61 /testbed/django/db/models/fields/__init__.py(1046):         errors = []
0.61 /testbed/django/db/models/fields/__init__.py(1047):         for db in databases:
0.61 /testbed/django/db/models/fields/__init__.py(1064):         return errors
0.61 /testbed/django/db/models/fields/__init__.py(1018):         return [
0.61 /testbed/django/db/models/fields/__init__.py(1021):             *self._check_max_length_attribute(**kwargs),
0.61 /testbed/django/db/models/fields/__init__.py(1025):         if self.max_length is None:
0.61 /testbed/django/db/models/fields/__init__.py(1033):         elif (not isinstance(self.max_length, int) or isinstance(self.max_length, bool) or
0.61 /testbed/django/db/models/fields/__init__.py(1034):                 self.max_length <= 0):
0.61 /testbed/django/db/models/fields/__init__.py(1033):         elif (not isinstance(self.max_length, int) or isinstance(self.max_length, bool) or
0.61 /testbed/django/db/models/fields/__init__.py(1043):             return []
0.61 /testbed/django/db/models/fields/__init__.py(1018):         return [
0.61 /testbed/django/db/models/fields/__init__.py(1017):         databases = kwargs.get('databases') or []
0.61 /testbed/django/db/models/fields/__init__.py(1018):         return [
0.61 /testbed/django/db/models/fields/__init__.py(1019):             *super().check(**kwargs),
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(199):             *self._check_field_name(),
0.61 /testbed/django/db/models/fields/__init__.py(213):         if self.name.endswith('_'):
0.61 /testbed/django/db/models/fields/__init__.py(221):         elif LOOKUP_SEP in self.name:
0.61 /testbed/django/db/models/fields/__init__.py(229):         elif self.name == 'pk':
0.61 /testbed/django/db/models/fields/__init__.py(238):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(200):             *self._check_choices(),
0.61 /testbed/django/db/models/fields/__init__.py(245):         if not self.choices:
0.61 /testbed/django/db/models/fields/__init__.py(246):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(201):             *self._check_db_index(),
0.61 /testbed/django/db/models/fields/__init__.py(309):         if self.db_index not in (None, True, False):
0.61 /testbed/django/db/models/fields/__init__.py(318):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.61 /testbed/django/db/models/fields/__init__.py(321):         if (self.primary_key and self.null and
0.61 /testbed/django/db/models/fields/__init__.py(336):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.61 /testbed/django/db/models/fields/__init__.py(339):         if databases is None:
0.61 /testbed/django/db/models/fields/__init__.py(341):         app_label = self.model._meta.app_label
0.61 /testbed/django/db/models/fields/__init__.py(342):         errors = []
0.61 /testbed/django/db/models/fields/__init__.py(343):         for alias in databases:
0.61 /testbed/django/db/models/fields/__init__.py(346):         return errors
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(204):             *self._check_validators(),
0.61 /testbed/django/db/models/fields/__init__.py(349):         errors = []
0.61 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.61 /testbed/django/db/models/fields/__init__.py(351):             if not callable(validator):
0.61 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.61 /testbed/django/db/models/fields/__init__.py(365):         return errors
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(205):             *self._check_deprecation_details(),
0.61 /testbed/django/db/models/fields/__init__.py(368):         if self.system_check_removed_details is not None:
0.61 /testbed/django/db/models/fields/__init__.py(381):         elif self.system_check_deprecated_details is not None:
0.61 /testbed/django/db/models/fields/__init__.py(393):         return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(1018):         return [
0.61 /testbed/django/db/models/fields/__init__.py(1020):             *self._check_db_collation(databases),
0.61 /testbed/django/db/models/fields/__init__.py(1046):         errors = []
0.61 /testbed/django/db/models/fields/__init__.py(1047):         for db in databases:
0.61 /testbed/django/db/models/fields/__init__.py(1064):         return errors
0.61 /testbed/django/db/models/fields/__init__.py(1018):         return [
0.61 /testbed/django/db/models/fields/__init__.py(1021):             *self._check_max_length_attribute(**kwargs),
0.61 /testbed/django/db/models/fields/__init__.py(1025):         if self.max_length is None:
0.61 /testbed/django/db/models/fields/__init__.py(1033):         elif (not isinstance(self.max_length, int) or isinstance(self.max_length, bool) or
0.61 /testbed/django/db/models/fields/__init__.py(1034):                 self.max_length <= 0):
0.61 /testbed/django/db/models/fields/__init__.py(1033):         elif (not isinstance(self.max_length, int) or isinstance(self.max_length, bool) or
0.61 /testbed/django/db/models/fields/__init__.py(1043):             return []
0.61 /testbed/django/db/models/fields/__init__.py(1018):         return [
0.61 /testbed/django/db/models/fields/__init__.py(1017):         databases = kwargs.get('databases') or []
0.61 /testbed/django/db/models/fields/__init__.py(1018):         return [
0.61 /testbed/django/db/models/fields/__init__.py(1019):             *super().check(**kwargs),
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(199):             *self._check_field_name(),
0.61 /testbed/django/db/models/fields/__init__.py(213):         if self.name.endswith('_'):
0.61 /testbed/django/db/models/fields/__init__.py(221):         elif LOOKUP_SEP in self.name:
0.61 /testbed/django/db/models/fields/__init__.py(229):         elif self.name == 'pk':
0.61 /testbed/django/db/models/fields/__init__.py(238):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(200):             *self._check_choices(),
0.61 /testbed/django/db/models/fields/__init__.py(245):         if not self.choices:
0.61 /testbed/django/db/models/fields/__init__.py(246):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(201):             *self._check_db_index(),
0.61 /testbed/django/db/models/fields/__init__.py(309):         if self.db_index not in (None, True, False):
0.61 /testbed/django/db/models/fields/__init__.py(318):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.61 /testbed/django/db/models/fields/__init__.py(321):         if (self.primary_key and self.null and
0.61 /testbed/django/db/models/fields/__init__.py(336):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.61 /testbed/django/db/models/fields/__init__.py(339):         if databases is None:
0.61 /testbed/django/db/models/fields/__init__.py(341):         app_label = self.model._meta.app_label
0.61 /testbed/django/db/models/fields/__init__.py(342):         errors = []
0.61 /testbed/django/db/models/fields/__init__.py(343):         for alias in databases:
0.61 /testbed/django/db/models/fields/__init__.py(346):         return errors
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(204):             *self._check_validators(),
0.61 /testbed/django/db/models/fields/__init__.py(349):         errors = []
0.61 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.61 /testbed/django/db/models/fields/__init__.py(351):             if not callable(validator):
0.61 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.61 /testbed/django/db/models/fields/__init__.py(365):         return errors
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(205):             *self._check_deprecation_details(),
0.61 /testbed/django/db/models/fields/__init__.py(368):         if self.system_check_removed_details is not None:
0.61 /testbed/django/db/models/fields/__init__.py(381):         elif self.system_check_deprecated_details is not None:
0.61 /testbed/django/db/models/fields/__init__.py(393):         return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(1018):         return [
0.61 /testbed/django/db/models/fields/__init__.py(1020):             *self._check_db_collation(databases),
0.61 /testbed/django/db/models/fields/__init__.py(1046):         errors = []
0.61 /testbed/django/db/models/fields/__init__.py(1047):         for db in databases:
0.61 /testbed/django/db/models/fields/__init__.py(1064):         return errors
0.61 /testbed/django/db/models/fields/__init__.py(1018):         return [
0.61 /testbed/django/db/models/fields/__init__.py(1021):             *self._check_max_length_attribute(**kwargs),
0.61 /testbed/django/db/models/fields/__init__.py(1025):         if self.max_length is None:
0.61 /testbed/django/db/models/fields/__init__.py(1033):         elif (not isinstance(self.max_length, int) or isinstance(self.max_length, bool) or
0.61 /testbed/django/db/models/fields/__init__.py(1034):                 self.max_length <= 0):
0.61 /testbed/django/db/models/fields/__init__.py(1033):         elif (not isinstance(self.max_length, int) or isinstance(self.max_length, bool) or
0.61 /testbed/django/db/models/fields/__init__.py(1043):             return []
0.61 /testbed/django/db/models/fields/__init__.py(1018):         return [
0.61 /testbed/django/db/models/fields/__init__.py(1017):         databases = kwargs.get('databases') or []
0.61 /testbed/django/db/models/fields/__init__.py(1018):         return [
0.61 /testbed/django/db/models/fields/__init__.py(1019):             *super().check(**kwargs),
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(199):             *self._check_field_name(),
0.61 /testbed/django/db/models/fields/__init__.py(213):         if self.name.endswith('_'):
0.61 /testbed/django/db/models/fields/__init__.py(221):         elif LOOKUP_SEP in self.name:
0.61 /testbed/django/db/models/fields/__init__.py(229):         elif self.name == 'pk':
0.61 /testbed/django/db/models/fields/__init__.py(238):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(200):             *self._check_choices(),
0.61 /testbed/django/db/models/fields/__init__.py(245):         if not self.choices:
0.61 /testbed/django/db/models/fields/__init__.py(246):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(201):             *self._check_db_index(),
0.61 /testbed/django/db/models/fields/__init__.py(309):         if self.db_index not in (None, True, False):
0.61 /testbed/django/db/models/fields/__init__.py(318):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.61 /testbed/django/db/models/fields/__init__.py(321):         if (self.primary_key and self.null and
0.61 /testbed/django/db/models/fields/__init__.py(336):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.61 /testbed/django/db/models/fields/__init__.py(339):         if databases is None:
0.61 /testbed/django/db/models/fields/__init__.py(341):         app_label = self.model._meta.app_label
0.61 /testbed/django/db/models/fields/__init__.py(342):         errors = []
0.61 /testbed/django/db/models/fields/__init__.py(343):         for alias in databases:
0.61 /testbed/django/db/models/fields/__init__.py(346):         return errors
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(204):             *self._check_validators(),
0.61 /testbed/django/db/models/fields/__init__.py(349):         errors = []
0.61 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.61 /testbed/django/db/models/fields/__init__.py(351):             if not callable(validator):
0.61 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.61 /testbed/django/db/models/fields/__init__.py(351):             if not callable(validator):
0.61 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.61 /testbed/django/db/models/fields/__init__.py(365):         return errors
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(205):             *self._check_deprecation_details(),
0.61 /testbed/django/db/models/fields/__init__.py(368):         if self.system_check_removed_details is not None:
0.61 /testbed/django/db/models/fields/__init__.py(381):         elif self.system_check_deprecated_details is not None:
0.61 /testbed/django/db/models/fields/__init__.py(393):         return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(1018):         return [
0.61 /testbed/django/db/models/fields/__init__.py(1020):             *self._check_db_collation(databases),
0.61 /testbed/django/db/models/fields/__init__.py(1046):         errors = []
0.61 /testbed/django/db/models/fields/__init__.py(1047):         for db in databases:
0.61 /testbed/django/db/models/fields/__init__.py(1064):         return errors
0.61 /testbed/django/db/models/fields/__init__.py(1018):         return [
0.61 /testbed/django/db/models/fields/__init__.py(1021):             *self._check_max_length_attribute(**kwargs),
0.61 /testbed/django/db/models/fields/__init__.py(1025):         if self.max_length is None:
0.61 /testbed/django/db/models/fields/__init__.py(1033):         elif (not isinstance(self.max_length, int) or isinstance(self.max_length, bool) or
0.61 /testbed/django/db/models/fields/__init__.py(1034):                 self.max_length <= 0):
0.61 /testbed/django/db/models/fields/__init__.py(1033):         elif (not isinstance(self.max_length, int) or isinstance(self.max_length, bool) or
0.61 /testbed/django/db/models/fields/__init__.py(1043):             return []
0.61 /testbed/django/db/models/fields/__init__.py(1018):         return [
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(199):             *self._check_field_name(),
0.61 /testbed/django/db/models/fields/__init__.py(213):         if self.name.endswith('_'):
0.61 /testbed/django/db/models/fields/__init__.py(221):         elif LOOKUP_SEP in self.name:
0.61 /testbed/django/db/models/fields/__init__.py(229):         elif self.name == 'pk':
0.61 /testbed/django/db/models/fields/__init__.py(238):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(200):             *self._check_choices(),
0.61 /testbed/django/db/models/fields/__init__.py(245):         if not self.choices:
0.61 /testbed/django/db/models/fields/__init__.py(246):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(201):             *self._check_db_index(),
0.61 /testbed/django/db/models/fields/__init__.py(309):         if self.db_index not in (None, True, False):
0.61 /testbed/django/db/models/fields/__init__.py(318):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.61 /testbed/django/db/models/fields/__init__.py(321):         if (self.primary_key and self.null and
0.61 /testbed/django/db/models/fields/__init__.py(336):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.61 /testbed/django/db/models/fields/__init__.py(339):         if databases is None:
0.61 /testbed/django/db/models/fields/__init__.py(341):         app_label = self.model._meta.app_label
0.61 /testbed/django/db/models/fields/__init__.py(342):         errors = []
0.61 /testbed/django/db/models/fields/__init__.py(343):         for alias in databases:
0.61 /testbed/django/db/models/fields/__init__.py(346):         return errors
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(204):             *self._check_validators(),
0.61 /testbed/django/db/models/fields/__init__.py(349):         errors = []
0.61 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.61 /testbed/django/db/models/fields/__init__.py(615):         return [*self.default_validators, *self._validators]
0.61 /testbed/django/db/models/fields/__init__.py(365):         return errors
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(205):             *self._check_deprecation_details(),
0.61 /testbed/django/db/models/fields/__init__.py(368):         if self.system_check_removed_details is not None:
0.61 /testbed/django/db/models/fields/__init__.py(381):         elif self.system_check_deprecated_details is not None:
0.61 /testbed/django/db/models/fields/__init__.py(393):         return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(199):             *self._check_field_name(),
0.61 /testbed/django/db/models/fields/__init__.py(213):         if self.name.endswith('_'):
0.61 /testbed/django/db/models/fields/__init__.py(221):         elif LOOKUP_SEP in self.name:
0.61 /testbed/django/db/models/fields/__init__.py(229):         elif self.name == 'pk':
0.61 /testbed/django/db/models/fields/__init__.py(238):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(200):             *self._check_choices(),
0.61 /testbed/django/db/models/fields/__init__.py(245):         if not self.choices:
0.61 /testbed/django/db/models/fields/__init__.py(246):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(201):             *self._check_db_index(),
0.61 /testbed/django/db/models/fields/__init__.py(309):         if self.db_index not in (None, True, False):
0.61 /testbed/django/db/models/fields/__init__.py(318):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.61 /testbed/django/db/models/fields/__init__.py(321):         if (self.primary_key and self.null and
0.61 /testbed/django/db/models/fields/__init__.py(336):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.61 /testbed/django/db/models/fields/__init__.py(339):         if databases is None:
0.61 /testbed/django/db/models/fields/__init__.py(341):         app_label = self.model._meta.app_label
0.61 /testbed/django/db/models/fields/__init__.py(342):         errors = []
0.61 /testbed/django/db/models/fields/__init__.py(343):         for alias in databases:
0.61 /testbed/django/db/models/fields/__init__.py(346):         return errors
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(204):             *self._check_validators(),
0.61 /testbed/django/db/models/fields/__init__.py(349):         errors = []
0.61 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.61 /testbed/django/db/models/fields/__init__.py(615):         return [*self.default_validators, *self._validators]
0.61 /testbed/django/db/models/fields/__init__.py(365):         return errors
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(205):             *self._check_deprecation_details(),
0.61 /testbed/django/db/models/fields/__init__.py(368):         if self.system_check_removed_details is not None:
0.61 /testbed/django/db/models/fields/__init__.py(381):         elif self.system_check_deprecated_details is not None:
0.61 /testbed/django/db/models/fields/__init__.py(393):         return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(1130):         return [
0.61 /testbed/django/db/models/fields/__init__.py(1131):             *super().check(**kwargs),
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(199):             *self._check_field_name(),
0.61 /testbed/django/db/models/fields/__init__.py(213):         if self.name.endswith('_'):
0.61 /testbed/django/db/models/fields/__init__.py(221):         elif LOOKUP_SEP in self.name:
0.61 /testbed/django/db/models/fields/__init__.py(229):         elif self.name == 'pk':
0.61 /testbed/django/db/models/fields/__init__.py(238):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(200):             *self._check_choices(),
0.61 /testbed/django/db/models/fields/__init__.py(245):         if not self.choices:
0.61 /testbed/django/db/models/fields/__init__.py(246):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(201):             *self._check_db_index(),
0.61 /testbed/django/db/models/fields/__init__.py(309):         if self.db_index not in (None, True, False):
0.61 /testbed/django/db/models/fields/__init__.py(318):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.61 /testbed/django/db/models/fields/__init__.py(321):         if (self.primary_key and self.null and
0.61 /testbed/django/db/models/fields/__init__.py(336):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.61 /testbed/django/db/models/fields/__init__.py(339):         if databases is None:
0.61 /testbed/django/db/models/fields/__init__.py(341):         app_label = self.model._meta.app_label
0.61 /testbed/django/db/models/fields/__init__.py(342):         errors = []
0.61 /testbed/django/db/models/fields/__init__.py(343):         for alias in databases:
0.61 /testbed/django/db/models/fields/__init__.py(346):         return errors
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(204):             *self._check_validators(),
0.61 /testbed/django/db/models/fields/__init__.py(349):         errors = []
0.61 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.61 /testbed/django/db/models/fields/__init__.py(615):         return [*self.default_validators, *self._validators]
0.61 /testbed/django/db/models/fields/__init__.py(365):         return errors
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(205):             *self._check_deprecation_details(),
0.61 /testbed/django/db/models/fields/__init__.py(368):         if self.system_check_removed_details is not None:
0.61 /testbed/django/db/models/fields/__init__.py(381):         elif self.system_check_deprecated_details is not None:
0.61 /testbed/django/db/models/fields/__init__.py(393):         return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(1130):         return [
0.61 /testbed/django/db/models/fields/__init__.py(1132):             *self._check_mutually_exclusive_options(),
0.61 /testbed/django/db/models/fields/__init__.py(1140):         mutually_exclusive_options = [self.auto_now_add, self.auto_now, self.has_default()]
0.61 /testbed/django/db/models/fields/__init__.py(843):         return self.default is not NOT_PROVIDED
0.61 /testbed/django/db/models/fields/__init__.py(1141):         enabled_options = [option not in (None, False) for option in mutually_exclusive_options].count(True)
0.61 /testbed/django/db/models/fields/__init__.py(1141):         enabled_options = [option not in (None, False) for option in mutually_exclusive_options].count(True)
0.61 /testbed/django/db/models/fields/__init__.py(1141):         enabled_options = [option not in (None, False) for option in mutually_exclusive_options].count(True)
0.61 /testbed/django/db/models/fields/__init__.py(1141):         enabled_options = [option not in (None, False) for option in mutually_exclusive_options].count(True)
0.61 /testbed/django/db/models/fields/__init__.py(1141):         enabled_options = [option not in (None, False) for option in mutually_exclusive_options].count(True)
0.61 /testbed/django/db/models/fields/__init__.py(1142):         if enabled_options > 1:
0.61 /testbed/django/db/models/fields/__init__.py(1153):             return []
0.61 /testbed/django/db/models/fields/__init__.py(1130):         return [
0.61 /testbed/django/db/models/fields/__init__.py(1133):             *self._check_fix_default_value(),
0.61 /testbed/django/db/models/fields/__init__.py(1337):         if not self.has_default():
0.61 /testbed/django/db/models/fields/__init__.py(843):         return self.default is not NOT_PROVIDED
0.61 /testbed/django/db/models/fields/__init__.py(1340):         value = self.default
0.61 /testbed/django/db/models/fields/__init__.py(1341):         if isinstance(value, (datetime.datetime, datetime.date)):
0.61 /testbed/django/db/models/fields/__init__.py(1344):         return []
0.61 /testbed/django/db/models/fields/__init__.py(1130):         return [
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(199):             *self._check_field_name(),
0.61 /testbed/django/db/models/fields/__init__.py(213):         if self.name.endswith('_'):
0.61 /testbed/django/db/models/fields/__init__.py(221):         elif LOOKUP_SEP in self.name:
0.61 /testbed/django/db/models/fields/__init__.py(229):         elif self.name == 'pk':
0.61 /testbed/django/db/models/fields/__init__.py(238):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(200):             *self._check_choices(),
0.61 /testbed/django/db/models/fields/__init__.py(245):         if not self.choices:
0.61 /testbed/django/db/models/fields/__init__.py(246):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(201):             *self._check_db_index(),
0.61 /testbed/django/db/models/fields/__init__.py(309):         if self.db_index not in (None, True, False):
0.61 /testbed/django/db/models/fields/__init__.py(318):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.61 /testbed/django/db/models/fields/__init__.py(321):         if (self.primary_key and self.null and
0.61 /testbed/django/db/models/fields/__init__.py(336):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.61 /testbed/django/db/models/fields/__init__.py(339):         if databases is None:
0.61 /testbed/django/db/models/fields/__init__.py(341):         app_label = self.model._meta.app_label
0.61 /testbed/django/db/models/fields/__init__.py(342):         errors = []
0.61 /testbed/django/db/models/fields/__init__.py(343):         for alias in databases:
0.61 /testbed/django/db/models/fields/__init__.py(346):         return errors
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(204):             *self._check_validators(),
0.61 /testbed/django/db/models/fields/__init__.py(349):         errors = []
0.61 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.61 /testbed/django/db/models/fields/__init__.py(615):         return [*self.default_validators, *self._validators]
0.61 /testbed/django/db/models/fields/__init__.py(365):         return errors
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(205):             *self._check_deprecation_details(),
0.61 /testbed/django/db/models/fields/__init__.py(368):         if self.system_check_removed_details is not None:
0.61 /testbed/django/db/models/fields/__init__.py(381):         elif self.system_check_deprecated_details is not None:
0.61 /testbed/django/db/models/fields/__init__.py(393):         return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(754):         return self._unique or self.primary_key
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(199):             *self._check_field_name(),
0.61 /testbed/django/db/models/fields/__init__.py(213):         if self.name.endswith('_'):
0.61 /testbed/django/db/models/fields/__init__.py(221):         elif LOOKUP_SEP in self.name:
0.61 /testbed/django/db/models/fields/__init__.py(229):         elif self.name == 'pk':
0.61 /testbed/django/db/models/fields/__init__.py(238):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(200):             *self._check_choices(),
0.61 /testbed/django/db/models/fields/__init__.py(245):         if not self.choices:
0.61 /testbed/django/db/models/fields/__init__.py(246):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(201):             *self._check_db_index(),
0.61 /testbed/django/db/models/fields/__init__.py(309):         if self.db_index not in (None, True, False):
0.61 /testbed/django/db/models/fields/__init__.py(318):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.61 /testbed/django/db/models/fields/__init__.py(321):         if (self.primary_key and self.null and
0.61 /testbed/django/db/models/fields/__init__.py(336):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.61 /testbed/django/db/models/fields/__init__.py(339):         if databases is None:
0.61 /testbed/django/db/models/fields/__init__.py(341):         app_label = self.model._meta.app_label
0.61 /testbed/django/db/models/fields/__init__.py(342):         errors = []
0.61 /testbed/django/db/models/fields/__init__.py(343):         for alias in databases:
0.61 /testbed/django/db/models/fields/__init__.py(346):         return errors
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(204):             *self._check_validators(),
0.61 /testbed/django/db/models/fields/__init__.py(349):         errors = []
0.61 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.61 /testbed/django/db/models/fields/__init__.py(615):         return [*self.default_validators, *self._validators]
0.61 /testbed/django/db/models/fields/__init__.py(365):         return errors
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(205):             *self._check_deprecation_details(),
0.61 /testbed/django/db/models/fields/__init__.py(368):         if self.system_check_removed_details is not None:
0.61 /testbed/django/db/models/fields/__init__.py(381):         elif self.system_check_deprecated_details is not None:
0.61 /testbed/django/db/models/fields/__init__.py(393):         return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(754):         return self._unique or self.primary_key
0.61 /testbed/django/db/models/fields/__init__.py(518):         if isinstance(other, Field):
0.61 /testbed/django/db/models/fields/__init__.py(520):                 self.creation_counter == other.creation_counter and
0.61 /testbed/django/db/models/fields/__init__.py(521):                 getattr(self, 'model', None) == getattr(other, 'model', None)
0.61 /testbed/django/db/models/fields/__init__.py(519):             return (
0.61 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.61 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.61 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.61 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.61 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.61 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.61 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.61 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.61 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.61 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.61 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.61 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.61 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.61 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.61 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.61 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.61 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.61 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.61 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.61 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.61 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.61 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.61 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.61 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.61 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.61 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.61 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.61 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.61 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.61 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.61 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.61 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.61 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.61 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.61 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.61 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.61 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.61 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.61 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.61 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.61 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.61 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.61 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.61 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.61 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.61 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.61 /testbed/django/db/models/fields/__init__.py(2443):         return [
0.61 /testbed/django/db/models/fields/__init__.py(2444):             *super().check(**kwargs),
0.61 /testbed/django/db/models/fields/__init__.py(1781):         return [
0.61 /testbed/django/db/models/fields/__init__.py(1782):             *super().check(**kwargs),
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(199):             *self._check_field_name(),
0.61 /testbed/django/db/models/fields/__init__.py(213):         if self.name.endswith('_'):
0.61 /testbed/django/db/models/fields/__init__.py(221):         elif LOOKUP_SEP in self.name:
0.61 /testbed/django/db/models/fields/__init__.py(229):         elif self.name == 'pk':
0.61 /testbed/django/db/models/fields/__init__.py(238):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(200):             *self._check_choices(),
0.61 /testbed/django/db/models/fields/__init__.py(245):         if not self.choices:
0.61 /testbed/django/db/models/fields/__init__.py(246):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(201):             *self._check_db_index(),
0.61 /testbed/django/db/models/fields/__init__.py(309):         if self.db_index not in (None, True, False):
0.61 /testbed/django/db/models/fields/__init__.py(318):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.61 /testbed/django/db/models/fields/__init__.py(321):         if (self.primary_key and self.null and
0.61 /testbed/django/db/models/fields/__init__.py(336):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.61 /testbed/django/db/models/fields/__init__.py(339):         if databases is None:
0.61 /testbed/django/db/models/fields/__init__.py(341):         app_label = self.model._meta.app_label
0.61 /testbed/django/db/models/fields/__init__.py(342):         errors = []
0.61 /testbed/django/db/models/fields/__init__.py(343):         for alias in databases:
0.61 /testbed/django/db/models/fields/__init__.py(346):         return errors
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(204):             *self._check_validators(),
0.61 /testbed/django/db/models/fields/__init__.py(349):         errors = []
0.61 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.61 /testbed/django/db/models/fields/__init__.py(1802):         validators_ = super().validators
0.61 /testbed/django/db/models/fields/__init__.py(615):         return [*self.default_validators, *self._validators]
0.61 /testbed/django/db/models/fields/__init__.py(1803):         internal_type = self.get_internal_type()
0.61 /testbed/django/db/models/fields/__init__.py(2519):         return 'AutoField'
0.61 /testbed/django/db/models/fields/__init__.py(1804):         min_value, max_value = connection.ops.integer_field_range(internal_type)
0.61 /testbed/django/db/models/fields/__init__.py(1805):         if min_value is not None and not any(
0.61 /testbed/django/db/models/fields/__init__.py(1815):         if max_value is not None and not any(
0.61 /testbed/django/db/models/fields/__init__.py(1825):         return validators_
0.61 /testbed/django/db/models/fields/__init__.py(365):         return errors
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(205):             *self._check_deprecation_details(),
0.61 /testbed/django/db/models/fields/__init__.py(368):         if self.system_check_removed_details is not None:
0.61 /testbed/django/db/models/fields/__init__.py(381):         elif self.system_check_deprecated_details is not None:
0.61 /testbed/django/db/models/fields/__init__.py(393):         return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(1781):         return [
0.61 /testbed/django/db/models/fields/__init__.py(1783):             *self._check_max_length_warning(),
0.61 /testbed/django/db/models/fields/__init__.py(1787):         if self.max_length is not None:
0.61 /testbed/django/db/models/fields/__init__.py(1796):         return []
0.61 /testbed/django/db/models/fields/__init__.py(1781):         return [
0.61 /testbed/django/db/models/fields/__init__.py(2443):         return [
0.61 /testbed/django/db/models/fields/__init__.py(2445):             *self._check_primary_key(),
0.61 /testbed/django/db/models/fields/__init__.py(2449):         if not self.primary_key:
0.61 /testbed/django/db/models/fields/__init__.py(2458):             return []
0.61 /testbed/django/db/models/fields/__init__.py(2443):         return [
0.61 /testbed/django/db/models/fields/__init__.py(1017):         databases = kwargs.get('databases') or []
0.61 /testbed/django/db/models/fields/__init__.py(1018):         return [
0.61 /testbed/django/db/models/fields/__init__.py(1019):             *super().check(**kwargs),
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(199):             *self._check_field_name(),
0.61 /testbed/django/db/models/fields/__init__.py(213):         if self.name.endswith('_'):
0.61 /testbed/django/db/models/fields/__init__.py(221):         elif LOOKUP_SEP in self.name:
0.61 /testbed/django/db/models/fields/__init__.py(229):         elif self.name == 'pk':
0.61 /testbed/django/db/models/fields/__init__.py(238):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(200):             *self._check_choices(),
0.61 /testbed/django/db/models/fields/__init__.py(245):         if not self.choices:
0.61 /testbed/django/db/models/fields/__init__.py(246):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(201):             *self._check_db_index(),
0.61 /testbed/django/db/models/fields/__init__.py(309):         if self.db_index not in (None, True, False):
0.61 /testbed/django/db/models/fields/__init__.py(318):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.61 /testbed/django/db/models/fields/__init__.py(321):         if (self.primary_key and self.null and
0.61 /testbed/django/db/models/fields/__init__.py(336):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.61 /testbed/django/db/models/fields/__init__.py(339):         if databases is None:
0.61 /testbed/django/db/models/fields/__init__.py(341):         app_label = self.model._meta.app_label
0.61 /testbed/django/db/models/fields/__init__.py(342):         errors = []
0.61 /testbed/django/db/models/fields/__init__.py(343):         for alias in databases:
0.61 /testbed/django/db/models/fields/__init__.py(346):         return errors
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(204):             *self._check_validators(),
0.61 /testbed/django/db/models/fields/__init__.py(349):         errors = []
0.61 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.61 /testbed/django/db/models/fields/__init__.py(351):             if not callable(validator):
0.61 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.61 /testbed/django/db/models/fields/__init__.py(351):             if not callable(validator):
0.61 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.61 /testbed/django/db/models/fields/__init__.py(365):         return errors
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(205):             *self._check_deprecation_details(),
0.61 /testbed/django/db/models/fields/__init__.py(368):         if self.system_check_removed_details is not None:
0.61 /testbed/django/db/models/fields/__init__.py(381):         elif self.system_check_deprecated_details is not None:
0.61 /testbed/django/db/models/fields/__init__.py(393):         return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(1018):         return [
0.61 /testbed/django/db/models/fields/__init__.py(1020):             *self._check_db_collation(databases),
0.61 /testbed/django/db/models/fields/__init__.py(1046):         errors = []
0.61 /testbed/django/db/models/fields/__init__.py(1047):         for db in databases:
0.61 /testbed/django/db/models/fields/__init__.py(1064):         return errors
0.61 /testbed/django/db/models/fields/__init__.py(1018):         return [
0.61 /testbed/django/db/models/fields/__init__.py(1021):             *self._check_max_length_attribute(**kwargs),
0.61 /testbed/django/db/models/fields/__init__.py(1025):         if self.max_length is None:
0.61 /testbed/django/db/models/fields/__init__.py(1033):         elif (not isinstance(self.max_length, int) or isinstance(self.max_length, bool) or
0.61 /testbed/django/db/models/fields/__init__.py(1034):                 self.max_length <= 0):
0.61 /testbed/django/db/models/fields/__init__.py(1033):         elif (not isinstance(self.max_length, int) or isinstance(self.max_length, bool) or
0.61 /testbed/django/db/models/fields/__init__.py(1043):             return []
0.61 /testbed/django/db/models/fields/__init__.py(1018):         return [
0.61 /testbed/django/db/models/fields/__init__.py(1017):         databases = kwargs.get('databases') or []
0.61 /testbed/django/db/models/fields/__init__.py(1018):         return [
0.61 /testbed/django/db/models/fields/__init__.py(1019):             *super().check(**kwargs),
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(199):             *self._check_field_name(),
0.61 /testbed/django/db/models/fields/__init__.py(213):         if self.name.endswith('_'):
0.61 /testbed/django/db/models/fields/__init__.py(221):         elif LOOKUP_SEP in self.name:
0.61 /testbed/django/db/models/fields/__init__.py(229):         elif self.name == 'pk':
0.61 /testbed/django/db/models/fields/__init__.py(238):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(200):             *self._check_choices(),
0.61 /testbed/django/db/models/fields/__init__.py(245):         if not self.choices:
0.61 /testbed/django/db/models/fields/__init__.py(246):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(201):             *self._check_db_index(),
0.61 /testbed/django/db/models/fields/__init__.py(309):         if self.db_index not in (None, True, False):
0.61 /testbed/django/db/models/fields/__init__.py(318):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.61 /testbed/django/db/models/fields/__init__.py(321):         if (self.primary_key and self.null and
0.61 /testbed/django/db/models/fields/__init__.py(336):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.61 /testbed/django/db/models/fields/__init__.py(339):         if databases is None:
0.61 /testbed/django/db/models/fields/__init__.py(341):         app_label = self.model._meta.app_label
0.61 /testbed/django/db/models/fields/__init__.py(342):         errors = []
0.61 /testbed/django/db/models/fields/__init__.py(343):         for alias in databases:
0.61 /testbed/django/db/models/fields/__init__.py(346):         return errors
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(204):             *self._check_validators(),
0.61 /testbed/django/db/models/fields/__init__.py(349):         errors = []
0.61 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.61 /testbed/django/db/models/fields/__init__.py(351):             if not callable(validator):
0.61 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.61 /testbed/django/db/models/fields/__init__.py(365):         return errors
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(205):             *self._check_deprecation_details(),
0.61 /testbed/django/db/models/fields/__init__.py(368):         if self.system_check_removed_details is not None:
0.61 /testbed/django/db/models/fields/__init__.py(381):         elif self.system_check_deprecated_details is not None:
0.61 /testbed/django/db/models/fields/__init__.py(393):         return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(1018):         return [
0.61 /testbed/django/db/models/fields/__init__.py(1020):             *self._check_db_collation(databases),
0.61 /testbed/django/db/models/fields/__init__.py(1046):         errors = []
0.61 /testbed/django/db/models/fields/__init__.py(1047):         for db in databases:
0.61 /testbed/django/db/models/fields/__init__.py(1064):         return errors
0.61 /testbed/django/db/models/fields/__init__.py(1018):         return [
0.61 /testbed/django/db/models/fields/__init__.py(1021):             *self._check_max_length_attribute(**kwargs),
0.61 /testbed/django/db/models/fields/__init__.py(1025):         if self.max_length is None:
0.61 /testbed/django/db/models/fields/__init__.py(1033):         elif (not isinstance(self.max_length, int) or isinstance(self.max_length, bool) or
0.61 /testbed/django/db/models/fields/__init__.py(1034):                 self.max_length <= 0):
0.61 /testbed/django/db/models/fields/__init__.py(1033):         elif (not isinstance(self.max_length, int) or isinstance(self.max_length, bool) or
0.61 /testbed/django/db/models/fields/__init__.py(1043):             return []
0.61 /testbed/django/db/models/fields/__init__.py(1018):         return [
0.61 /testbed/django/db/models/fields/__init__.py(518):         if isinstance(other, Field):
0.61 /testbed/django/db/models/fields/__init__.py(520):                 self.creation_counter == other.creation_counter and
0.61 /testbed/django/db/models/fields/__init__.py(521):                 getattr(self, 'model', None) == getattr(other, 'model', None)
0.61 /testbed/django/db/models/fields/__init__.py(519):             return (
0.61 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.61 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.61 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.61 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.61 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.61 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.61 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.61 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.61 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.61 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.61 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.61 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.61 /testbed/django/db/models/fields/__init__.py(1017):         databases = kwargs.get('databases') or []
0.61 /testbed/django/db/models/fields/__init__.py(1018):         return [
0.61 /testbed/django/db/models/fields/__init__.py(1019):             *super().check(**kwargs),
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(199):             *self._check_field_name(),
0.61 /testbed/django/db/models/fields/__init__.py(213):         if self.name.endswith('_'):
0.61 /testbed/django/db/models/fields/__init__.py(221):         elif LOOKUP_SEP in self.name:
0.61 /testbed/django/db/models/fields/__init__.py(229):         elif self.name == 'pk':
0.61 /testbed/django/db/models/fields/__init__.py(238):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(200):             *self._check_choices(),
0.61 /testbed/django/db/models/fields/__init__.py(245):         if not self.choices:
0.61 /testbed/django/db/models/fields/__init__.py(246):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(201):             *self._check_db_index(),
0.61 /testbed/django/db/models/fields/__init__.py(309):         if self.db_index not in (None, True, False):
0.61 /testbed/django/db/models/fields/__init__.py(318):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.61 /testbed/django/db/models/fields/__init__.py(321):         if (self.primary_key and self.null and
0.61 /testbed/django/db/models/fields/__init__.py(336):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.61 /testbed/django/db/models/fields/__init__.py(339):         if databases is None:
0.61 /testbed/django/db/models/fields/__init__.py(341):         app_label = self.model._meta.app_label
0.61 /testbed/django/db/models/fields/__init__.py(342):         errors = []
0.61 /testbed/django/db/models/fields/__init__.py(343):         for alias in databases:
0.61 /testbed/django/db/models/fields/__init__.py(346):         return errors
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(204):             *self._check_validators(),
0.61 /testbed/django/db/models/fields/__init__.py(349):         errors = []
0.61 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.61 /testbed/django/db/models/fields/__init__.py(351):             if not callable(validator):
0.61 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.61 /testbed/django/db/models/fields/__init__.py(365):         return errors
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(205):             *self._check_deprecation_details(),
0.61 /testbed/django/db/models/fields/__init__.py(368):         if self.system_check_removed_details is not None:
0.61 /testbed/django/db/models/fields/__init__.py(381):         elif self.system_check_deprecated_details is not None:
0.61 /testbed/django/db/models/fields/__init__.py(393):         return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(1018):         return [
0.61 /testbed/django/db/models/fields/__init__.py(1020):             *self._check_db_collation(databases),
0.61 /testbed/django/db/models/fields/__init__.py(1046):         errors = []
0.61 /testbed/django/db/models/fields/__init__.py(1047):         for db in databases:
0.61 /testbed/django/db/models/fields/__init__.py(1064):         return errors
0.61 /testbed/django/db/models/fields/__init__.py(1018):         return [
0.61 /testbed/django/db/models/fields/__init__.py(1021):             *self._check_max_length_attribute(**kwargs),
0.61 /testbed/django/db/models/fields/__init__.py(1025):         if self.max_length is None:
0.61 /testbed/django/db/models/fields/__init__.py(1033):         elif (not isinstance(self.max_length, int) or isinstance(self.max_length, bool) or
0.61 /testbed/django/db/models/fields/__init__.py(1034):                 self.max_length <= 0):
0.61 /testbed/django/db/models/fields/__init__.py(1033):         elif (not isinstance(self.max_length, int) or isinstance(self.max_length, bool) or
0.61 /testbed/django/db/models/fields/__init__.py(1043):             return []
0.61 /testbed/django/db/models/fields/__init__.py(1018):         return [
0.61 /testbed/django/db/models/fields/__init__.py(2128):         databases = kwargs.get('databases') or []
0.61 /testbed/django/db/models/fields/__init__.py(2129):         return [
0.61 /testbed/django/db/models/fields/__init__.py(2130):             *super().check(**kwargs),
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(199):             *self._check_field_name(),
0.61 /testbed/django/db/models/fields/__init__.py(213):         if self.name.endswith('_'):
0.61 /testbed/django/db/models/fields/__init__.py(221):         elif LOOKUP_SEP in self.name:
0.61 /testbed/django/db/models/fields/__init__.py(229):         elif self.name == 'pk':
0.61 /testbed/django/db/models/fields/__init__.py(238):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(200):             *self._check_choices(),
0.61 /testbed/django/db/models/fields/__init__.py(245):         if not self.choices:
0.61 /testbed/django/db/models/fields/__init__.py(246):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(201):             *self._check_db_index(),
0.61 /testbed/django/db/models/fields/__init__.py(309):         if self.db_index not in (None, True, False):
0.61 /testbed/django/db/models/fields/__init__.py(318):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.61 /testbed/django/db/models/fields/__init__.py(321):         if (self.primary_key and self.null and
0.61 /testbed/django/db/models/fields/__init__.py(336):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.61 /testbed/django/db/models/fields/__init__.py(339):         if databases is None:
0.61 /testbed/django/db/models/fields/__init__.py(341):         app_label = self.model._meta.app_label
0.61 /testbed/django/db/models/fields/__init__.py(342):         errors = []
0.61 /testbed/django/db/models/fields/__init__.py(343):         for alias in databases:
0.61 /testbed/django/db/models/fields/__init__.py(346):         return errors
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(204):             *self._check_validators(),
0.61 /testbed/django/db/models/fields/__init__.py(349):         errors = []
0.61 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.61 /testbed/django/db/models/fields/__init__.py(615):         return [*self.default_validators, *self._validators]
0.61 /testbed/django/db/models/fields/__init__.py(365):         return errors
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(205):             *self._check_deprecation_details(),
0.61 /testbed/django/db/models/fields/__init__.py(368):         if self.system_check_removed_details is not None:
0.61 /testbed/django/db/models/fields/__init__.py(381):         elif self.system_check_deprecated_details is not None:
0.61 /testbed/django/db/models/fields/__init__.py(393):         return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(2129):         return [
0.61 /testbed/django/db/models/fields/__init__.py(2131):             *self._check_db_collation(databases),
0.61 /testbed/django/db/models/fields/__init__.py(2135):         errors = []
0.61 /testbed/django/db/models/fields/__init__.py(2136):         for db in databases:
0.61 /testbed/django/db/models/fields/__init__.py(2153):         return errors
0.61 /testbed/django/db/models/fields/__init__.py(2129):         return [
0.61 /testbed/django/db/models/fields/__init__.py(1130):         return [
0.61 /testbed/django/db/models/fields/__init__.py(1131):             *super().check(**kwargs),
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(199):             *self._check_field_name(),
0.61 /testbed/django/db/models/fields/__init__.py(213):         if self.name.endswith('_'):
0.61 /testbed/django/db/models/fields/__init__.py(221):         elif LOOKUP_SEP in self.name:
0.61 /testbed/django/db/models/fields/__init__.py(229):         elif self.name == 'pk':
0.61 /testbed/django/db/models/fields/__init__.py(238):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(200):             *self._check_choices(),
0.61 /testbed/django/db/models/fields/__init__.py(245):         if not self.choices:
0.61 /testbed/django/db/models/fields/__init__.py(246):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(201):             *self._check_db_index(),
0.61 /testbed/django/db/models/fields/__init__.py(309):         if self.db_index not in (None, True, False):
0.61 /testbed/django/db/models/fields/__init__.py(318):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.61 /testbed/django/db/models/fields/__init__.py(321):         if (self.primary_key and self.null and
0.61 /testbed/django/db/models/fields/__init__.py(336):             return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.61 /testbed/django/db/models/fields/__init__.py(339):         if databases is None:
0.61 /testbed/django/db/models/fields/__init__.py(341):         app_label = self.model._meta.app_label
0.61 /testbed/django/db/models/fields/__init__.py(342):         errors = []
0.61 /testbed/django/db/models/fields/__init__.py(343):         for alias in databases:
0.61 /testbed/django/db/models/fields/__init__.py(346):         return errors
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(204):             *self._check_validators(),
0.61 /testbed/django/db/models/fields/__init__.py(349):         errors = []
0.61 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.61 /testbed/django/db/models/fields/__init__.py(615):         return [*self.default_validators, *self._validators]
0.61 /testbed/django/db/models/fields/__init__.py(365):         return errors
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(205):             *self._check_deprecation_details(),
0.61 /testbed/django/db/models/fields/__init__.py(368):         if self.system_check_removed_details is not None:
0.61 /testbed/django/db/models/fields/__init__.py(381):         elif self.system_check_deprecated_details is not None:
0.61 /testbed/django/db/models/fields/__init__.py(393):         return []
0.61 /testbed/django/db/models/fields/__init__.py(198):         return [
0.61 /testbed/django/db/models/fields/__init__.py(1130):         return [
0.61 /testbed/django/db/models/fields/__init__.py(1132):             *self._check_mutually_exclusive_options(),
0.61 /testbed/django/db/models/fields/__init__.py(1140):         mutually_exclusive_options = [self.auto_now_add, self.auto_now, self.has_default()]
0.61 /testbed/django/db/models/fields/__init__.py(843):         return self.default is not NOT_PROVIDED
0.61 /testbed/django/db/models/fields/__init__.py(1141):         enabled_options = [option not in (None, False) for option in mutually_exclusive_options].count(True)
0.61 /testbed/django/db/models/fields/__init__.py(1141):         enabled_options = [option not in (None, False) for option in mutually_exclusive_options].count(True)
0.61 /testbed/django/db/models/fields/__init__.py(1141):         enabled_options = [option not in (None, False) for option in mutually_exclusive_options].count(True)
0.61 /testbed/django/db/models/fields/__init__.py(1141):         enabled_options = [option not in (None, False) for option in mutually_exclusive_options].count(True)
0.61 /testbed/django/db/models/fields/__init__.py(1141):         enabled_options = [option not in (None, False) for option in mutually_exclusive_options].count(True)
0.61 /testbed/django/db/models/fields/__init__.py(1142):         if enabled_options > 1:
0.61 /testbed/django/db/models/fields/__init__.py(1153):             return []
0.61 /testbed/django/db/models/fields/__init__.py(1130):         return [
0.61 /testbed/django/db/models/fields/__init__.py(1133):             *self._check_fix_default_value(),
0.61 /testbed/django/db/models/fields/__init__.py(1337):         if not self.has_default():
0.61 /testbed/django/db/models/fields/__init__.py(843):         return self.default is not NOT_PROVIDED
0.61 /testbed/django/db/models/fields/__init__.py(1338):             return []
0.61 /testbed/django/db/models/fields/__init__.py(1130):         return [
0.62 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.62 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.62 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.62 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.62 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.62 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.62 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.62 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.62 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.62 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.62 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.62 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.62 /testbed/django/db/models/fields/__init__.py(2443):         return [
0.62 /testbed/django/db/models/fields/__init__.py(2444):             *super().check(**kwargs),
0.62 /testbed/django/db/models/fields/__init__.py(1781):         return [
0.62 /testbed/django/db/models/fields/__init__.py(1782):             *super().check(**kwargs),
0.62 /testbed/django/db/models/fields/__init__.py(198):         return [
0.62 /testbed/django/db/models/fields/__init__.py(199):             *self._check_field_name(),
0.62 /testbed/django/db/models/fields/__init__.py(213):         if self.name.endswith('_'):
0.62 /testbed/django/db/models/fields/__init__.py(221):         elif LOOKUP_SEP in self.name:
0.62 /testbed/django/db/models/fields/__init__.py(229):         elif self.name == 'pk':
0.62 /testbed/django/db/models/fields/__init__.py(238):             return []
0.62 /testbed/django/db/models/fields/__init__.py(198):         return [
0.62 /testbed/django/db/models/fields/__init__.py(200):             *self._check_choices(),
0.62 /testbed/django/db/models/fields/__init__.py(245):         if not self.choices:
0.62 /testbed/django/db/models/fields/__init__.py(246):             return []
0.62 /testbed/django/db/models/fields/__init__.py(198):         return [
0.62 /testbed/django/db/models/fields/__init__.py(201):             *self._check_db_index(),
0.62 /testbed/django/db/models/fields/__init__.py(309):         if self.db_index not in (None, True, False):
0.62 /testbed/django/db/models/fields/__init__.py(318):             return []
0.62 /testbed/django/db/models/fields/__init__.py(198):         return [
0.62 /testbed/django/db/models/fields/__init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.62 /testbed/django/db/models/fields/__init__.py(321):         if (self.primary_key and self.null and
0.62 /testbed/django/db/models/fields/__init__.py(336):             return []
0.62 /testbed/django/db/models/fields/__init__.py(198):         return [
0.62 /testbed/django/db/models/fields/__init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.62 /testbed/django/db/models/fields/__init__.py(339):         if databases is None:
0.62 /testbed/django/db/models/fields/__init__.py(341):         app_label = self.model._meta.app_label
0.62 /testbed/django/db/models/fields/__init__.py(342):         errors = []
0.62 /testbed/django/db/models/fields/__init__.py(343):         for alias in databases:
0.62 /testbed/django/db/models/fields/__init__.py(346):         return errors
0.62 /testbed/django/db/models/fields/__init__.py(198):         return [
0.62 /testbed/django/db/models/fields/__init__.py(204):             *self._check_validators(),
0.62 /testbed/django/db/models/fields/__init__.py(349):         errors = []
0.62 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.62 /testbed/django/db/models/fields/__init__.py(1802):         validators_ = super().validators
0.62 /testbed/django/db/models/fields/__init__.py(615):         return [*self.default_validators, *self._validators]
0.62 /testbed/django/db/models/fields/__init__.py(1803):         internal_type = self.get_internal_type()
0.62 /testbed/django/db/models/fields/__init__.py(2519):         return 'AutoField'
0.62 /testbed/django/db/models/fields/__init__.py(1804):         min_value, max_value = connection.ops.integer_field_range(internal_type)
0.62 /testbed/django/db/models/fields/__init__.py(1805):         if min_value is not None and not any(
0.62 /testbed/django/db/models/fields/__init__.py(1815):         if max_value is not None and not any(
0.62 /testbed/django/db/models/fields/__init__.py(1825):         return validators_
0.62 /testbed/django/db/models/fields/__init__.py(365):         return errors
0.62 /testbed/django/db/models/fields/__init__.py(198):         return [
0.62 /testbed/django/db/models/fields/__init__.py(205):             *self._check_deprecation_details(),
0.62 /testbed/django/db/models/fields/__init__.py(368):         if self.system_check_removed_details is not None:
0.62 /testbed/django/db/models/fields/__init__.py(381):         elif self.system_check_deprecated_details is not None:
0.62 /testbed/django/db/models/fields/__init__.py(393):         return []
0.62 /testbed/django/db/models/fields/__init__.py(198):         return [
0.62 /testbed/django/db/models/fields/__init__.py(1781):         return [
0.62 /testbed/django/db/models/fields/__init__.py(1783):             *self._check_max_length_warning(),
0.62 /testbed/django/db/models/fields/__init__.py(1787):         if self.max_length is not None:
0.62 /testbed/django/db/models/fields/__init__.py(1796):         return []
0.62 /testbed/django/db/models/fields/__init__.py(1781):         return [
0.62 /testbed/django/db/models/fields/__init__.py(2443):         return [
0.62 /testbed/django/db/models/fields/__init__.py(2445):             *self._check_primary_key(),
0.62 /testbed/django/db/models/fields/__init__.py(2449):         if not self.primary_key:
0.62 /testbed/django/db/models/fields/__init__.py(2458):             return []
0.62 /testbed/django/db/models/fields/__init__.py(2443):         return [
0.62 /testbed/django/db/models/fields/__init__.py(1130):         return [
0.62 /testbed/django/db/models/fields/__init__.py(1131):             *super().check(**kwargs),
0.62 /testbed/django/db/models/fields/__init__.py(198):         return [
0.62 /testbed/django/db/models/fields/__init__.py(199):             *self._check_field_name(),
0.62 /testbed/django/db/models/fields/__init__.py(213):         if self.name.endswith('_'):
0.62 /testbed/django/db/models/fields/__init__.py(221):         elif LOOKUP_SEP in self.name:
0.62 /testbed/django/db/models/fields/__init__.py(229):         elif self.name == 'pk':
0.62 /testbed/django/db/models/fields/__init__.py(238):             return []
0.62 /testbed/django/db/models/fields/__init__.py(198):         return [
0.62 /testbed/django/db/models/fields/__init__.py(200):             *self._check_choices(),
0.62 /testbed/django/db/models/fields/__init__.py(245):         if not self.choices:
0.62 /testbed/django/db/models/fields/__init__.py(246):             return []
0.62 /testbed/django/db/models/fields/__init__.py(198):         return [
0.62 /testbed/django/db/models/fields/__init__.py(201):             *self._check_db_index(),
0.62 /testbed/django/db/models/fields/__init__.py(309):         if self.db_index not in (None, True, False):
0.62 /testbed/django/db/models/fields/__init__.py(318):             return []
0.62 /testbed/django/db/models/fields/__init__.py(198):         return [
0.62 /testbed/django/db/models/fields/__init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.62 /testbed/django/db/models/fields/__init__.py(321):         if (self.primary_key and self.null and
0.62 /testbed/django/db/models/fields/__init__.py(336):             return []
0.62 /testbed/django/db/models/fields/__init__.py(198):         return [
0.62 /testbed/django/db/models/fields/__init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.62 /testbed/django/db/models/fields/__init__.py(339):         if databases is None:
0.62 /testbed/django/db/models/fields/__init__.py(341):         app_label = self.model._meta.app_label
0.62 /testbed/django/db/models/fields/__init__.py(342):         errors = []
0.62 /testbed/django/db/models/fields/__init__.py(343):         for alias in databases:
0.62 /testbed/django/db/models/fields/__init__.py(346):         return errors
0.62 /testbed/django/db/models/fields/__init__.py(198):         return [
0.62 /testbed/django/db/models/fields/__init__.py(204):             *self._check_validators(),
0.62 /testbed/django/db/models/fields/__init__.py(349):         errors = []
0.62 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.62 /testbed/django/db/models/fields/__init__.py(615):         return [*self.default_validators, *self._validators]
0.62 /testbed/django/db/models/fields/__init__.py(365):         return errors
0.62 /testbed/django/db/models/fields/__init__.py(198):         return [
0.62 /testbed/django/db/models/fields/__init__.py(205):             *self._check_deprecation_details(),
0.62 /testbed/django/db/models/fields/__init__.py(368):         if self.system_check_removed_details is not None:
0.62 /testbed/django/db/models/fields/__init__.py(381):         elif self.system_check_deprecated_details is not None:
0.62 /testbed/django/db/models/fields/__init__.py(393):         return []
0.62 /testbed/django/db/models/fields/__init__.py(198):         return [
0.62 /testbed/django/db/models/fields/__init__.py(1130):         return [
0.62 /testbed/django/db/models/fields/__init__.py(1132):             *self._check_mutually_exclusive_options(),
0.62 /testbed/django/db/models/fields/__init__.py(1140):         mutually_exclusive_options = [self.auto_now_add, self.auto_now, self.has_default()]
0.62 /testbed/django/db/models/fields/__init__.py(843):         return self.default is not NOT_PROVIDED
0.62 /testbed/django/db/models/fields/__init__.py(1141):         enabled_options = [option not in (None, False) for option in mutually_exclusive_options].count(True)
0.62 /testbed/django/db/models/fields/__init__.py(1141):         enabled_options = [option not in (None, False) for option in mutually_exclusive_options].count(True)
0.62 /testbed/django/db/models/fields/__init__.py(1141):         enabled_options = [option not in (None, False) for option in mutually_exclusive_options].count(True)
0.62 /testbed/django/db/models/fields/__init__.py(1141):         enabled_options = [option not in (None, False) for option in mutually_exclusive_options].count(True)
0.62 /testbed/django/db/models/fields/__init__.py(1141):         enabled_options = [option not in (None, False) for option in mutually_exclusive_options].count(True)
0.62 /testbed/django/db/models/fields/__init__.py(1142):         if enabled_options > 1:
0.62 /testbed/django/db/models/fields/__init__.py(1153):             return []
0.62 /testbed/django/db/models/fields/__init__.py(1130):         return [
0.62 /testbed/django/db/models/fields/__init__.py(1133):             *self._check_fix_default_value(),
0.62 /testbed/django/db/models/fields/__init__.py(1337):         if not self.has_default():
0.62 /testbed/django/db/models/fields/__init__.py(843):         return self.default is not NOT_PROVIDED
0.62 /testbed/django/db/models/fields/__init__.py(1340):         value = self.default
0.62 /testbed/django/db/models/fields/__init__.py(1341):         if isinstance(value, (datetime.datetime, datetime.date)):
0.62 /testbed/django/db/models/fields/__init__.py(1344):         return []
0.62 /testbed/django/db/models/fields/__init__.py(1130):         return [
0.62 /testbed/django/db/models/fields/__init__.py(198):         return [
0.62 /testbed/django/db/models/fields/__init__.py(199):             *self._check_field_name(),
0.62 /testbed/django/db/models/fields/__init__.py(213):         if self.name.endswith('_'):
0.62 /testbed/django/db/models/fields/__init__.py(221):         elif LOOKUP_SEP in self.name:
0.62 /testbed/django/db/models/fields/__init__.py(229):         elif self.name == 'pk':
0.62 /testbed/django/db/models/fields/__init__.py(238):             return []
0.62 /testbed/django/db/models/fields/__init__.py(198):         return [
0.62 /testbed/django/db/models/fields/__init__.py(200):             *self._check_choices(),
0.62 /testbed/django/db/models/fields/__init__.py(245):         if not self.choices:
0.62 /testbed/django/db/models/fields/__init__.py(246):             return []
0.62 /testbed/django/db/models/fields/__init__.py(198):         return [
0.62 /testbed/django/db/models/fields/__init__.py(201):             *self._check_db_index(),
0.62 /testbed/django/db/models/fields/__init__.py(309):         if self.db_index not in (None, True, False):
0.62 /testbed/django/db/models/fields/__init__.py(318):             return []
0.62 /testbed/django/db/models/fields/__init__.py(198):         return [
0.62 /testbed/django/db/models/fields/__init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.62 /testbed/django/db/models/fields/__init__.py(321):         if (self.primary_key and self.null and
0.62 /testbed/django/db/models/fields/__init__.py(336):             return []
0.62 /testbed/django/db/models/fields/__init__.py(198):         return [
0.62 /testbed/django/db/models/fields/__init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.62 /testbed/django/db/models/fields/__init__.py(339):         if databases is None:
0.62 /testbed/django/db/models/fields/__init__.py(341):         app_label = self.model._meta.app_label
0.62 /testbed/django/db/models/fields/__init__.py(342):         errors = []
0.62 /testbed/django/db/models/fields/__init__.py(343):         for alias in databases:
0.62 /testbed/django/db/models/fields/__init__.py(346):         return errors
0.62 /testbed/django/db/models/fields/__init__.py(198):         return [
0.62 /testbed/django/db/models/fields/__init__.py(204):             *self._check_validators(),
0.62 /testbed/django/db/models/fields/__init__.py(349):         errors = []
0.62 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.62 /testbed/django/db/models/fields/__init__.py(615):         return [*self.default_validators, *self._validators]
0.62 /testbed/django/db/models/fields/__init__.py(365):         return errors
0.62 /testbed/django/db/models/fields/__init__.py(198):         return [
0.62 /testbed/django/db/models/fields/__init__.py(205):             *self._check_deprecation_details(),
0.62 /testbed/django/db/models/fields/__init__.py(368):         if self.system_check_removed_details is not None:
0.62 /testbed/django/db/models/fields/__init__.py(381):         elif self.system_check_deprecated_details is not None:
0.62 /testbed/django/db/models/fields/__init__.py(393):         return []
0.62 /testbed/django/db/models/fields/__init__.py(198):         return [
0.62 /testbed/django/db/models/fields/__init__.py(754):         return self._unique or self.primary_key
0.62 /testbed/django/db/models/fields/__init__.py(754):         return self._unique or self.primary_key
0.62 /testbed/django/db/models/fields/__init__.py(754):         return self._unique or self.primary_key
0.62 /testbed/django/db/models/fields/__init__.py(754):         return self._unique or self.primary_key
0.62 /testbed/django/db/models/fields/__init__.py(754):         return self._unique or self.primary_key
0.62 /testbed/django/db/models/fields/__init__.py(754):         return self._unique or self.primary_key
0.62 /testbed/django/db/models/fields/__init__.py(754):         return self._unique or self.primary_key
0.62 /testbed/django/db/models/fields/__init__.py(754):         return self._unique or self.primary_key
0.62 /testbed/django/db/models/fields/__init__.py(754):         return self._unique or self.primary_key
0.62 /testbed/django/db/models/fields/__init__.py(754):         return self._unique or self.primary_key
0.62 /testbed/django/db/models/fields/__init__.py(754):         return self._unique or self.primary_key
0.62 /testbed/django/db/models/fields/__init__.py(754):         return self._unique or self.primary_key
0.62 /testbed/django/db/models/fields/__init__.py(754):         return self._unique or self.primary_key
0.62 /testbed/django/db/models/fields/__init__.py(754):         return self._unique or self.primary_key
0.62 /testbed/django/db/models/fields/__init__.py(198):         return [
0.62 /testbed/django/db/models/fields/__init__.py(199):             *self._check_field_name(),
0.62 /testbed/django/db/models/fields/__init__.py(213):         if self.name.endswith('_'):
0.62 /testbed/django/db/models/fields/__init__.py(221):         elif LOOKUP_SEP in self.name:
0.62 /testbed/django/db/models/fields/__init__.py(229):         elif self.name == 'pk':
0.62 /testbed/django/db/models/fields/__init__.py(238):             return []
0.62 /testbed/django/db/models/fields/__init__.py(198):         return [
0.62 /testbed/django/db/models/fields/__init__.py(200):             *self._check_choices(),
0.62 /testbed/django/db/models/fields/__init__.py(245):         if not self.choices:
0.62 /testbed/django/db/models/fields/__init__.py(246):             return []
0.62 /testbed/django/db/models/fields/__init__.py(198):         return [
0.62 /testbed/django/db/models/fields/__init__.py(201):             *self._check_db_index(),
0.62 /testbed/django/db/models/fields/__init__.py(309):         if self.db_index not in (None, True, False):
0.62 /testbed/django/db/models/fields/__init__.py(318):             return []
0.62 /testbed/django/db/models/fields/__init__.py(198):         return [
0.62 /testbed/django/db/models/fields/__init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.62 /testbed/django/db/models/fields/__init__.py(321):         if (self.primary_key and self.null and
0.62 /testbed/django/db/models/fields/__init__.py(336):             return []
0.62 /testbed/django/db/models/fields/__init__.py(198):         return [
0.62 /testbed/django/db/models/fields/__init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.62 /testbed/django/db/models/fields/__init__.py(339):         if databases is None:
0.62 /testbed/django/db/models/fields/__init__.py(341):         app_label = self.model._meta.app_label
0.62 /testbed/django/db/models/fields/__init__.py(342):         errors = []
0.62 /testbed/django/db/models/fields/__init__.py(343):         for alias in databases:
0.62 /testbed/django/db/models/fields/__init__.py(346):         return errors
0.62 /testbed/django/db/models/fields/__init__.py(198):         return [
0.62 /testbed/django/db/models/fields/__init__.py(204):             *self._check_validators(),
0.62 /testbed/django/db/models/fields/__init__.py(349):         errors = []
0.62 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.62 /testbed/django/db/models/fields/__init__.py(615):         return [*self.default_validators, *self._validators]
0.62 /testbed/django/db/models/fields/__init__.py(365):         return errors
0.62 /testbed/django/db/models/fields/__init__.py(198):         return [
0.62 /testbed/django/db/models/fields/__init__.py(205):             *self._check_deprecation_details(),
0.62 /testbed/django/db/models/fields/__init__.py(368):         if self.system_check_removed_details is not None:
0.62 /testbed/django/db/models/fields/__init__.py(381):         elif self.system_check_deprecated_details is not None:
0.62 /testbed/django/db/models/fields/__init__.py(393):         return []
0.62 /testbed/django/db/models/fields/__init__.py(198):         return [
0.62 /testbed/django/db/models/fields/__init__.py(754):         return self._unique or self.primary_key
0.62 /testbed/django/db/models/fields/__init__.py(754):         return self._unique or self.primary_key
0.62 /testbed/django/db/models/fields/__init__.py(754):         return self._unique or self.primary_key
0.62 /testbed/django/db/models/fields/__init__.py(754):         return self._unique or self.primary_key
0.62 /testbed/django/db/models/fields/__init__.py(2128):         databases = kwargs.get('databases') or []
0.62 /testbed/django/db/models/fields/__init__.py(2129):         return [
0.62 /testbed/django/db/models/fields/__init__.py(2130):             *super().check(**kwargs),
0.62 /testbed/django/db/models/fields/__init__.py(198):         return [
0.62 /testbed/django/db/models/fields/__init__.py(199):             *self._check_field_name(),
0.62 /testbed/django/db/models/fields/__init__.py(213):         if self.name.endswith('_'):
0.62 /testbed/django/db/models/fields/__init__.py(221):         elif LOOKUP_SEP in self.name:
0.62 /testbed/django/db/models/fields/__init__.py(229):         elif self.name == 'pk':
0.62 /testbed/django/db/models/fields/__init__.py(238):             return []
0.62 /testbed/django/db/models/fields/__init__.py(198):         return [
0.62 /testbed/django/db/models/fields/__init__.py(200):             *self._check_choices(),
0.62 /testbed/django/db/models/fields/__init__.py(245):         if not self.choices:
0.62 /testbed/django/db/models/fields/__init__.py(246):             return []
0.62 /testbed/django/db/models/fields/__init__.py(198):         return [
0.62 /testbed/django/db/models/fields/__init__.py(201):             *self._check_db_index(),
0.62 /testbed/django/db/models/fields/__init__.py(309):         if self.db_index not in (None, True, False):
0.62 /testbed/django/db/models/fields/__init__.py(318):             return []
0.62 /testbed/django/db/models/fields/__init__.py(198):         return [
0.62 /testbed/django/db/models/fields/__init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.62 /testbed/django/db/models/fields/__init__.py(321):         if (self.primary_key and self.null and
0.62 /testbed/django/db/models/fields/__init__.py(336):             return []
0.62 /testbed/django/db/models/fields/__init__.py(198):         return [
0.62 /testbed/django/db/models/fields/__init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.62 /testbed/django/db/models/fields/__init__.py(339):         if databases is None:
0.62 /testbed/django/db/models/fields/__init__.py(341):         app_label = self.model._meta.app_label
0.62 /testbed/django/db/models/fields/__init__.py(342):         errors = []
0.62 /testbed/django/db/models/fields/__init__.py(343):         for alias in databases:
0.62 /testbed/django/db/models/fields/__init__.py(346):         return errors
0.62 /testbed/django/db/models/fields/__init__.py(198):         return [
0.62 /testbed/django/db/models/fields/__init__.py(204):             *self._check_validators(),
0.62 /testbed/django/db/models/fields/__init__.py(349):         errors = []
0.62 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.62 /testbed/django/db/models/fields/__init__.py(615):         return [*self.default_validators, *self._validators]
0.62 /testbed/django/db/models/fields/__init__.py(365):         return errors
0.62 /testbed/django/db/models/fields/__init__.py(198):         return [
0.62 /testbed/django/db/models/fields/__init__.py(205):             *self._check_deprecation_details(),
0.62 /testbed/django/db/models/fields/__init__.py(368):         if self.system_check_removed_details is not None:
0.62 /testbed/django/db/models/fields/__init__.py(381):         elif self.system_check_deprecated_details is not None:
0.62 /testbed/django/db/models/fields/__init__.py(393):         return []
0.62 /testbed/django/db/models/fields/__init__.py(198):         return [
0.62 /testbed/django/db/models/fields/__init__.py(2129):         return [
0.62 /testbed/django/db/models/fields/__init__.py(2131):             *self._check_db_collation(databases),
0.62 /testbed/django/db/models/fields/__init__.py(2135):         errors = []
0.62 /testbed/django/db/models/fields/__init__.py(2136):         for db in databases:
0.62 /testbed/django/db/models/fields/__init__.py(2153):         return errors
0.62 /testbed/django/db/models/fields/__init__.py(2129):         return [
0.62 /testbed/django/db/models/fields/__init__.py(1017):         databases = kwargs.get('databases') or []
0.62 /testbed/django/db/models/fields/__init__.py(1018):         return [
0.62 /testbed/django/db/models/fields/__init__.py(1019):             *super().check(**kwargs),
0.62 /testbed/django/db/models/fields/__init__.py(198):         return [
0.62 /testbed/django/db/models/fields/__init__.py(199):             *self._check_field_name(),
0.62 /testbed/django/db/models/fields/__init__.py(213):         if self.name.endswith('_'):
0.62 /testbed/django/db/models/fields/__init__.py(221):         elif LOOKUP_SEP in self.name:
0.62 /testbed/django/db/models/fields/__init__.py(229):         elif self.name == 'pk':
0.62 /testbed/django/db/models/fields/__init__.py(238):             return []
0.62 /testbed/django/db/models/fields/__init__.py(198):         return [
0.62 /testbed/django/db/models/fields/__init__.py(200):             *self._check_choices(),
0.62 /testbed/django/db/models/fields/__init__.py(245):         if not self.choices:
0.62 /testbed/django/db/models/fields/__init__.py(246):             return []
0.62 /testbed/django/db/models/fields/__init__.py(198):         return [
0.62 /testbed/django/db/models/fields/__init__.py(201):             *self._check_db_index(),
0.62 /testbed/django/db/models/fields/__init__.py(309):         if self.db_index not in (None, True, False):
0.62 /testbed/django/db/models/fields/__init__.py(318):             return []
0.62 /testbed/django/db/models/fields/__init__.py(198):         return [
0.62 /testbed/django/db/models/fields/__init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.62 /testbed/django/db/models/fields/__init__.py(321):         if (self.primary_key and self.null and
0.62 /testbed/django/db/models/fields/__init__.py(336):             return []
0.62 /testbed/django/db/models/fields/__init__.py(198):         return [
0.62 /testbed/django/db/models/fields/__init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.62 /testbed/django/db/models/fields/__init__.py(339):         if databases is None:
0.62 /testbed/django/db/models/fields/__init__.py(341):         app_label = self.model._meta.app_label
0.62 /testbed/django/db/models/fields/__init__.py(342):         errors = []
0.62 /testbed/django/db/models/fields/__init__.py(343):         for alias in databases:
0.62 /testbed/django/db/models/fields/__init__.py(346):         return errors
0.62 /testbed/django/db/models/fields/__init__.py(198):         return [
0.62 /testbed/django/db/models/fields/__init__.py(204):             *self._check_validators(),
0.62 /testbed/django/db/models/fields/__init__.py(349):         errors = []
0.62 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.62 /testbed/django/db/models/fields/__init__.py(351):             if not callable(validator):
0.62 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.62 /testbed/django/db/models/fields/__init__.py(365):         return errors
0.62 /testbed/django/db/models/fields/__init__.py(198):         return [
0.62 /testbed/django/db/models/fields/__init__.py(205):             *self._check_deprecation_details(),
0.62 /testbed/django/db/models/fields/__init__.py(368):         if self.system_check_removed_details is not None:
0.62 /testbed/django/db/models/fields/__init__.py(381):         elif self.system_check_deprecated_details is not None:
0.62 /testbed/django/db/models/fields/__init__.py(393):         return []
0.62 /testbed/django/db/models/fields/__init__.py(198):         return [
0.62 /testbed/django/db/models/fields/__init__.py(1018):         return [
0.62 /testbed/django/db/models/fields/__init__.py(1020):             *self._check_db_collation(databases),
0.62 /testbed/django/db/models/fields/__init__.py(1046):         errors = []
0.62 /testbed/django/db/models/fields/__init__.py(1047):         for db in databases:
0.62 /testbed/django/db/models/fields/__init__.py(1064):         return errors
0.62 /testbed/django/db/models/fields/__init__.py(1018):         return [
0.62 /testbed/django/db/models/fields/__init__.py(1021):             *self._check_max_length_attribute(**kwargs),
0.62 /testbed/django/db/models/fields/__init__.py(1025):         if self.max_length is None:
0.62 /testbed/django/db/models/fields/__init__.py(1033):         elif (not isinstance(self.max_length, int) or isinstance(self.max_length, bool) or
0.62 /testbed/django/db/models/fields/__init__.py(1034):                 self.max_length <= 0):
0.62 /testbed/django/db/models/fields/__init__.py(1033):         elif (not isinstance(self.max_length, int) or isinstance(self.max_length, bool) or
0.62 /testbed/django/db/models/fields/__init__.py(1043):             return []
0.62 /testbed/django/db/models/fields/__init__.py(1018):         return [
0.62 /testbed/django/db/models/fields/__init__.py(1781):         return [
0.62 /testbed/django/db/models/fields/__init__.py(1782):             *super().check(**kwargs),
0.62 /testbed/django/db/models/fields/__init__.py(198):         return [
0.62 /testbed/django/db/models/fields/__init__.py(199):             *self._check_field_name(),
0.62 /testbed/django/db/models/fields/__init__.py(213):         if self.name.endswith('_'):
0.62 /testbed/django/db/models/fields/__init__.py(221):         elif LOOKUP_SEP in self.name:
0.62 /testbed/django/db/models/fields/__init__.py(229):         elif self.name == 'pk':
0.62 /testbed/django/db/models/fields/__init__.py(238):             return []
0.62 /testbed/django/db/models/fields/__init__.py(198):         return [
0.62 /testbed/django/db/models/fields/__init__.py(200):             *self._check_choices(),
0.62 /testbed/django/db/models/fields/__init__.py(245):         if not self.choices:
0.62 /testbed/django/db/models/fields/__init__.py(248):         if not is_iterable(self.choices) or isinstance(self.choices, str):
0.62 /testbed/django/db/models/fields/__init__.py(257):         choice_max_length = 0
0.62 /testbed/django/db/models/fields/__init__.py(259):         for choices_group in self.choices:
0.62 /testbed/django/db/models/fields/__init__.py(260):             try:
0.62 /testbed/django/db/models/fields/__init__.py(261):                 group_name, group_choices = choices_group
0.62 /testbed/django/db/models/fields/__init__.py(265):             try:
0.62 /testbed/django/db/models/fields/__init__.py(266):                 if not all(
0.62 /testbed/django/db/models/fields/__init__.py(268):                     for value, human_name in group_choices
0.62 /testbed/django/db/models/fields/__init__.py(266):                 if not all(
0.62 /testbed/django/db/models/fields/__init__.py(266):                 if not all(
0.62 /testbed/django/db/models/fields/__init__.py(268):                     for value, human_name in group_choices
0.62 /testbed/django/db/models/fields/__init__.py(276):             except (TypeError, ValueError):
0.62 /testbed/django/db/models/fields/__init__.py(278):                 value, human_name = group_name, group_choices
0.62 /testbed/django/db/models/fields/__init__.py(279):                 if not self._choices_is_value(value) or not self._choices_is_value(human_name):
0.62 /testbed/django/db/models/fields/__init__.py(242):         return isinstance(value, (str, Promise)) or not is_iterable(value)
0.62 /testbed/django/db/models/fields/__init__.py(242):         return isinstance(value, (str, Promise)) or not is_iterable(value)
0.62 /testbed/django/db/models/fields/__init__.py(281):                 if self.max_length is not None and isinstance(value, str):
0.62 /testbed/django/db/models/fields/__init__.py(285):             if isinstance(choices_group, str):
0.62 /testbed/django/db/models/fields/__init__.py(259):         for choices_group in self.choices:
0.62 /testbed/django/db/models/fields/__init__.py(260):             try:
0.62 /testbed/django/db/models/fields/__init__.py(261):                 group_name, group_choices = choices_group
0.62 /testbed/django/db/models/fields/__init__.py(265):             try:
0.62 /testbed/django/db/models/fields/__init__.py(266):                 if not all(
0.62 /testbed/django/db/models/fields/__init__.py(268):                     for value, human_name in group_choices
0.62 /testbed/django/db/models/fields/__init__.py(266):                 if not all(
0.62 /testbed/django/db/models/fields/__init__.py(266):                 if not all(
0.62 /testbed/django/db/models/fields/__init__.py(268):                     for value, human_name in group_choices
0.62 /testbed/django/db/models/fields/__init__.py(276):             except (TypeError, ValueError):
0.62 /testbed/django/db/models/fields/__init__.py(278):                 value, human_name = group_name, group_choices
0.62 /testbed/django/db/models/fields/__init__.py(279):                 if not self._choices_is_value(value) or not self._choices_is_value(human_name):
0.62 /testbed/django/db/models/fields/__init__.py(242):         return isinstance(value, (str, Promise)) or not is_iterable(value)
0.62 /testbed/django/db/models/fields/__init__.py(242):         return isinstance(value, (str, Promise)) or not is_iterable(value)
0.62 /testbed/django/db/models/fields/__init__.py(281):                 if self.max_length is not None and isinstance(value, str):
0.62 /testbed/django/db/models/fields/__init__.py(285):             if isinstance(choices_group, str):
0.62 /testbed/django/db/models/fields/__init__.py(259):         for choices_group in self.choices:
0.62 /testbed/django/db/models/fields/__init__.py(260):             try:
0.62 /testbed/django/db/models/fields/__init__.py(261):                 group_name, group_choices = choices_group
0.62 /testbed/django/db/models/fields/__init__.py(265):             try:
0.62 /testbed/django/db/models/fields/__init__.py(266):                 if not all(
0.62 /testbed/django/db/models/fields/__init__.py(268):                     for value, human_name in group_choices
0.62 /testbed/django/db/models/fields/__init__.py(266):                 if not all(
0.62 /testbed/django/db/models/fields/__init__.py(266):                 if not all(
0.62 /testbed/django/db/models/fields/__init__.py(268):                     for value, human_name in group_choices
0.62 /testbed/django/db/models/fields/__init__.py(276):             except (TypeError, ValueError):
0.62 /testbed/django/db/models/fields/__init__.py(278):                 value, human_name = group_name, group_choices
0.62 /testbed/django/db/models/fields/__init__.py(279):                 if not self._choices_is_value(value) or not self._choices_is_value(human_name):
0.62 /testbed/django/db/models/fields/__init__.py(242):         return isinstance(value, (str, Promise)) or not is_iterable(value)
0.62 /testbed/django/db/models/fields/__init__.py(242):         return isinstance(value, (str, Promise)) or not is_iterable(value)
0.62 /testbed/django/db/models/fields/__init__.py(281):                 if self.max_length is not None and isinstance(value, str):
0.62 /testbed/django/db/models/fields/__init__.py(285):             if isinstance(choices_group, str):
0.62 /testbed/django/db/models/fields/__init__.py(259):         for choices_group in self.choices:
0.62 /testbed/django/db/models/fields/__init__.py(288):             if self.max_length is not None and choice_max_length > self.max_length:
0.62 /testbed/django/db/models/fields/__init__.py(297):             return []
0.62 /testbed/django/db/models/fields/__init__.py(198):         return [
0.62 /testbed/django/db/models/fields/__init__.py(201):             *self._check_db_index(),
0.62 /testbed/django/db/models/fields/__init__.py(309):         if self.db_index not in (None, True, False):
0.62 /testbed/django/db/models/fields/__init__.py(318):             return []
0.62 /testbed/django/db/models/fields/__init__.py(198):         return [
0.62 /testbed/django/db/models/fields/__init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.62 /testbed/django/db/models/fields/__init__.py(321):         if (self.primary_key and self.null and
0.62 /testbed/django/db/models/fields/__init__.py(336):             return []
0.62 /testbed/django/db/models/fields/__init__.py(198):         return [
0.62 /testbed/django/db/models/fields/__init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.62 /testbed/django/db/models/fields/__init__.py(339):         if databases is None:
0.62 /testbed/django/db/models/fields/__init__.py(341):         app_label = self.model._meta.app_label
0.62 /testbed/django/db/models/fields/__init__.py(342):         errors = []
0.62 /testbed/django/db/models/fields/__init__.py(343):         for alias in databases:
0.62 /testbed/django/db/models/fields/__init__.py(346):         return errors
0.62 /testbed/django/db/models/fields/__init__.py(198):         return [
0.62 /testbed/django/db/models/fields/__init__.py(204):             *self._check_validators(),
0.62 /testbed/django/db/models/fields/__init__.py(349):         errors = []
0.62 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.62 /testbed/django/db/models/fields/__init__.py(1802):         validators_ = super().validators
0.62 /testbed/django/db/models/fields/__init__.py(615):         return [*self.default_validators, *self._validators]
0.62 /testbed/django/db/models/fields/__init__.py(1803):         internal_type = self.get_internal_type()
0.62 /testbed/django/db/models/fields/__init__.py(2078):         return "PositiveSmallIntegerField"
0.62 /testbed/django/db/models/fields/__init__.py(1804):         min_value, max_value = connection.ops.integer_field_range(internal_type)
0.62 /testbed/django/db/models/fields/__init__.py(1805):         if min_value is not None and not any(
0.62 /testbed/django/db/models/fields/__init__.py(1815):         if max_value is not None and not any(
0.62 /testbed/django/db/models/fields/__init__.py(1825):         return validators_
0.62 /testbed/django/db/models/fields/__init__.py(365):         return errors
0.62 /testbed/django/db/models/fields/__init__.py(198):         return [
0.62 /testbed/django/db/models/fields/__init__.py(205):             *self._check_deprecation_details(),
0.62 /testbed/django/db/models/fields/__init__.py(368):         if self.system_check_removed_details is not None:
0.62 /testbed/django/db/models/fields/__init__.py(381):         elif self.system_check_deprecated_details is not None:
0.62 /testbed/django/db/models/fields/__init__.py(393):         return []
0.62 /testbed/django/db/models/fields/__init__.py(198):         return [
0.62 /testbed/django/db/models/fields/__init__.py(1781):         return [
0.62 /testbed/django/db/models/fields/__init__.py(1783):             *self._check_max_length_warning(),
0.62 /testbed/django/db/models/fields/__init__.py(1787):         if self.max_length is not None:
0.62 /testbed/django/db/models/fields/__init__.py(1796):         return []
0.62 /testbed/django/db/models/fields/__init__.py(1781):         return [
0.62 /testbed/django/db/models/fields/__init__.py(2128):         databases = kwargs.get('databases') or []
0.62 /testbed/django/db/models/fields/__init__.py(2129):         return [
0.62 /testbed/django/db/models/fields/__init__.py(2130):             *super().check(**kwargs),
0.62 /testbed/django/db/models/fields/__init__.py(198):         return [
0.62 /testbed/django/db/models/fields/__init__.py(199):             *self._check_field_name(),
0.62 /testbed/django/db/models/fields/__init__.py(213):         if self.name.endswith('_'):
0.62 /testbed/django/db/models/fields/__init__.py(221):         elif LOOKUP_SEP in self.name:
0.62 /testbed/django/db/models/fields/__init__.py(229):         elif self.name == 'pk':
0.62 /testbed/django/db/models/fields/__init__.py(238):             return []
0.62 /testbed/django/db/models/fields/__init__.py(198):         return [
0.62 /testbed/django/db/models/fields/__init__.py(200):             *self._check_choices(),
0.62 /testbed/django/db/models/fields/__init__.py(245):         if not self.choices:
0.62 /testbed/django/db/models/fields/__init__.py(246):             return []
0.62 /testbed/django/db/models/fields/__init__.py(198):         return [
0.62 /testbed/django/db/models/fields/__init__.py(201):             *self._check_db_index(),
0.62 /testbed/django/db/models/fields/__init__.py(309):         if self.db_index not in (None, True, False):
0.62 /testbed/django/db/models/fields/__init__.py(318):             return []
0.62 /testbed/django/db/models/fields/__init__.py(198):         return [
0.62 /testbed/django/db/models/fields/__init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.62 /testbed/django/db/models/fields/__init__.py(321):         if (self.primary_key and self.null and
0.62 /testbed/django/db/models/fields/__init__.py(336):             return []
0.62 /testbed/django/db/models/fields/__init__.py(198):         return [
0.62 /testbed/django/db/models/fields/__init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.62 test_resolve_output_field_with_string_value (test_coverup_django__django-15277.ResolveOutputFieldTest) ... /testbed/django/db/models/fields/__init__.py(339):         if databases is None:
0.62 /testbed/django/db/models/fields/__init__.py(341):         app_label = self.model._meta.app_label
0.62 /testbed/django/db/models/fields/__init__.py(342):         errors = []
0.62 /testbed/django/db/models/fields/__init__.py(343):         for alias in databases:
0.62 /testbed/django/db/models/fields/__init__.py(346):         return errors
0.62 /testbed/django/db/models/fields/__init__.py(198):         return [
0.62 /testbed/django/db/models/fields/__init__.py(204):             *self._check_validators(),
0.62 /testbed/django/db/models/fields/__init__.py(349):         errors = []
0.62 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.62 /testbed/django/db/models/fields/__init__.py(615):         return [*self.default_validators, *self._validators]
0.62 /testbed/django/db/models/fields/__init__.py(365):         return errors
0.62 /testbed/django/db/models/fields/__init__.py(198):         return [
0.62 /testbed/django/db/models/fields/__init__.py(205):             *self._check_deprecation_details(),
0.62 /testbed/django/db/models/fields/__init__.py(368):         if self.system_check_removed_details is not None:
0.62 /testbed/django/db/models/fields/__init__.py(381):         elif self.system_check_deprecated_details is not None:
0.62 /testbed/django/db/models/fields/__init__.py(393):         return []
0.62 /testbed/django/db/models/fields/__init__.py(198):         return [
0.62 /testbed/django/db/models/fields/__init__.py(2129):         return [
0.62 /testbed/django/db/models/fields/__init__.py(2131):             *self._check_db_collation(databases),
0.62 /testbed/django/db/models/fields/__init__.py(2135):         errors = []
0.62 /testbed/django/db/models/fields/__init__.py(2136):         for db in databases:
0.62 /testbed/django/db/models/fields/__init__.py(2153):         return errors
0.62 /testbed/django/db/models/fields/__init__.py(2129):         return [
0.62 /testbed/django/db/models/fields/__init__.py(518):         if isinstance(other, Field):
0.62 /testbed/django/db/models/fields/__init__.py(520):                 self.creation_counter == other.creation_counter and
0.62 /testbed/django/db/models/fields/__init__.py(521):                 getattr(self, 'model', None) == getattr(other, 'model', None)
0.62 /testbed/django/db/models/fields/__init__.py(519):             return (
0.62 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.62 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.62 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.62 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.62 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.62 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.62 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.62 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.62 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.62 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.62 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.62 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.62 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.62 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.62 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.62 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.62 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.62 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.62 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.62 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
0.62 /testbed/django/db/models/fields/__init__.py(810):         attname = self.get_attname()
0.62 /testbed/django/db/models/fields/__init__.py(807):         return self.name
0.62 /testbed/django/db/models/fields/__init__.py(811):         column = self.db_column or attname
0.62 /testbed/django/db/models/fields/__init__.py(812):         return attname, column
System check identified no issues (0 silenced).
0.63 /testbed/django/db/models/fields/__init__.py(1011):         super().__init__(*args, **kwargs)
0.63 /testbed/django/db/models/fields/__init__.py(139):         self.name = name
0.63 /testbed/django/db/models/fields/__init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.63 /testbed/django/db/models/fields/__init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.63 /testbed/django/db/models/fields/__init__.py(142):         self.primary_key = primary_key
0.63 /testbed/django/db/models/fields/__init__.py(143):         self.max_length, self._unique = max_length, unique
0.63 /testbed/django/db/models/fields/__init__.py(144):         self.blank, self.null = blank, null
0.63 /testbed/django/db/models/fields/__init__.py(145):         self.remote_field = rel
0.63 /testbed/django/db/models/fields/__init__.py(146):         self.is_relation = self.remote_field is not None
0.63 /testbed/django/db/models/fields/__init__.py(147):         self.default = default
0.63 /testbed/django/db/models/fields/__init__.py(148):         self.editable = editable
0.63 /testbed/django/db/models/fields/__init__.py(149):         self.serialize = serialize
0.63 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_date = unique_for_date
0.63 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_month = unique_for_month
0.63 /testbed/django/db/models/fields/__init__.py(152):         self.unique_for_year = unique_for_year
0.63 /testbed/django/db/models/fields/__init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.63 /testbed/django/db/models/fields/__init__.py(155):         self.choices = choices
0.63 /testbed/django/db/models/fields/__init__.py(156):         self.help_text = help_text
0.63 /testbed/django/db/models/fields/__init__.py(157):         self.db_index = db_index
0.63 /testbed/django/db/models/fields/__init__.py(158):         self.db_column = db_column
0.63 /testbed/django/db/models/fields/__init__.py(159):         self._db_tablespace = db_tablespace
0.63 /testbed/django/db/models/fields/__init__.py(160):         self.auto_created = auto_created
0.63 /testbed/django/db/models/fields/__init__.py(163):         if auto_created:
0.63 /testbed/django/db/models/fields/__init__.py(167):             self.creation_counter = Field.creation_counter
0.63 /testbed/django/db/models/fields/__init__.py(168):             Field.creation_counter += 1
0.63 /testbed/django/db/models/fields/__init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.63 /testbed/django/db/models/fields/__init__.py(172):         messages = {}
0.63 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.63 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.63 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.63 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.63 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.63 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.63 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
ok

----------------------------------------------------------------------
Ran 1 test in 0.001s

OK
0.63 /testbed/django/db/models/fields/__init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.63 /testbed/django/db/models/fields/__init__.py(173):         for c in reversed(self.__class__.__mro__):
0.63 /testbed/django/db/models/fields/__init__.py(175):         messages.update(error_messages or {})
0.63 /testbed/django/db/models/fields/__init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.63 /testbed/django/db/models/fields/__init__.py(177):         self.error_messages = messages
0.63 /testbed/django/db/models/fields/__init__.py(1012):         self.db_collation = db_collation
0.63 /testbed/django/db/models/fields/__init__.py(1013):         if self.max_length is not None:
0.63 /testbed/django/db/models/fields/__init__.py(615):         return [*self.default_validators, *self._validators]
0.63 /testbed/django/db/models/fields/__init__.py(670):         value = self.to_python(value)
0.63 /testbed/django/db/models/fields/__init__.py(1075):         if isinstance(value, str) or value is None:
0.63 /testbed/django/db/models/fields/__init__.py(1076):             return value
0.63 /testbed/django/db/models/fields/__init__.py(671):         self.validate(value, model_instance)
0.63 /testbed/django/db/models/fields/__init__.py(638):         if not self.editable:
0.63 /testbed/django/db/models/fields/__init__.py(642):         if self.choices is not None and value not in self.empty_values:
0.63 /testbed/django/db/models/fields/__init__.py(658):         if value is None and not self.null:
0.63 /testbed/django/db/models/fields/__init__.py(661):         if not self.blank and value in self.empty_values:
0.63 /testbed/django/db/models/fields/__init__.py(672):         self.run_validators(value)
0.63 /testbed/django/db/models/fields/__init__.py(618):         if value in self.empty_values:
0.63 /testbed/django/db/models/fields/__init__.py(621):         errors = []
0.63 /testbed/django/db/models/fields/__init__.py(622):         for v in self.validators:
0.63 /testbed/django/db/models/fields/__init__.py(630):         if errors:
0.63 /testbed/django/db/models/fields/__init__.py(673):         return value
+ cat coverage.cover
{"/testbed/django/db/models/fields/__init__.py": {"1": 1, "2": 1, "3": 1, "4": 1, "5": 1, "6": 1, "7": 1, "8": 1, "9": 1, "10": 1, "12": 1, "13": 1, "14": 1, "15": 1, "16": 1, "17": 1, "18": 1, "19": 1, "20": 1, "21": 1, "24": 1, "25": 1, "26": 1, "27": 1, "28": 1, "29": 1, "31": 1, "43": 2, "47": 2, "53": 1, "56": 1, "75": 1, "81": 1, "85": 2, "86": 1, "952": 2, "1007": 2, "1101": 2, "1117": 1, "1123": 1, "1127": 2, "1195": 2, "1317": 2, "1444": 2, "1585": 2, "1645": 2, "1669": 2, "1733": 2, "1773": 2, "1860": 2, "1875": 2, "1882": 2, "1913": 2, "1993": 2, "2020": 2, "2048": 2, "2061": 2, "2074": 2, "2087": 2, "2120": 2, "2184": 2, "2295": 2, "2318": 2, "2382": 2, "2435": 2, "2488": 2, "2516": 2, "2525": 2, "2534": 2, "44": 1, "48": 1, "57": 0, "76": 0, "77": 0, "78": 0, "82": 4, "91": 1, "92": 1, "97": 1, "98": 1, "99": 1, "101": 1, "102": 1, "103": 1, "104": 1, "108": 1, "100": 1, "111": 1, "112": 1, "115": 1, "117": 1, "118": 1, "119": 1, "120": 1, "121": 1, "123": 1, "126": 1, "130": 1, "132": 2, "133": 1, "134": 1, "135": 1, "136": 1, "137": 1, "138": 1, "179": 1, "189": 1, "197": 1, "208": 1, "240": 1, "241": 1, "244": 1, "308": 1, "320": 1, "338": 1, "348": 1, "367": 1, "395": 1, "404": 1, "405": 1, "409": 1, "417": 1, "508": 1, "516": 1, "525": 1, "544": 1, "551": 1, "562": 1, "570": 1, "590": 1, "601": 1, "609": 1, "610": 1, "617": 1, "633": 1, "664": 1, "675": 1, "678": 1, "690": 1, "716": 1, "724": 1, "731": 1, "744": 1, "747": 1, "752": 1, "753": 1, "756": 1, "757": 1, "760": 1, "761": 1, "768": 1, "775": 1, "799": 1, "806": 1, "809": 1, "814": 1, "817": 1, "821": 1, "827": 1, "837": 1, "841": 1, "845": 1, "849": 1, "850": 1, "860": 1, "886": 1, "893": 1, "904": 1, "906": 1, "909": 1, "947": 1, "127": 0, "128": 0, "139": 68, "140": 68, "141": 68, "142": 68, "143": 68, "144": 68, "145": 68, "146": 68, "147": 68, "148": 68, "149": 68, "150": 68, "151": 68, "152": 68, "153": 68, "154": 0, "155": 68, "156": 68, "157": 68, "158": 68, "159": 68, "160": 68, "163": 68, "164": 9, "165": 9, "167": 59, "168": 59, "170": 68, "172": 68, "173": 408, "174": 340, "175": 68, "176": 68, "177": 68, "184": 0, "185": 0, "186": 0, "187": 0, "191": 0, "192": 0, "193": 0, "194": 0, "195": 0, "198": 296, "199": 37, "200": 37, "201": 37, "202": 37, "203": 37, "204": 37, "205": 37, "213": 37, "215": 0, "216": 0, "217": 0, "218": 0, "214": 0, "221": 37, "223": 0, "224": 0, "225": 0, "226": 0, "222": 0, "229": 37, "231": 0, "232": 0, "233": 0, "234": 0, "230": 0, "238": 37, "242": 6, "245": 37, "246": 36, "248": 1, "250": 0, "251": 0, "252": 0, "253": 0, "249": 0, "257": 1, "259": 4, "260": 3, "261": 3, "262": 0, "264": 0, "265": 3, "266": 9, "268": 6, "270": 0, "271": 0, "272": 0, "273": 0, "274": 0, "276": 3, "278": 3, "279": 3, "280": 0, "281": 3, "282": 0, "285": 3, "286": 0, "288": 1, "290": 0, "291": 0, "292": 0, "293": 0, "294": 0, "289": 0, "297": 1, "300": 0, "301": 0, "303": 0, "304": 0, "299": 0, "267": 0, "309": 37, "311": 0, "312": 0, "313": 0, "314": 0, "310": 0, "318": 37, "321": 37, "322": 0, "327": 0, "328": 0, "329": 0, "331": 0, "332": 0, "326": 0, "336": 37, "339": 37, "340": 0, "341": 37, "342": 37, "343": 37, "344": 0, "345": 0, "346": 37, "349": 37, "350": 54, "351": 17, "352": 0, "353": 0, "354": 0, "356": 0, "358": 0, "361": 0, "362": 0, "365": 37, "368": 37, "370": 0, "371": 0, "372": 0, "373": 0, "374": 0, "376": 0, "377": 0, "378": 0, "369": 0, "381": 37, "383": 0, "384": 0, "385": 0, "386": 0, "388": 0, "389": 0, "390": 0, "382": 0, "393": 37, "397": 0, "396": 0, "398": 0, "400": 0, "401": 0, "402": 0, "406": 0, "407": 0, "415": 0, "450": 0, "452": 0, "453": 0, "454": 0, "455": 0, "456": 0, "457": 0, "458": 0, "459": 0, "460": 0, "461": 0, "462": 0, "463": 0, "464": 0, "465": 0, "466": 0, "467": 0, "468": 0, "469": 0, "470": 0, "471": 0, "451": 0, "474": 0, "475": 0, "476": 0, "477": 0, "478": 0, "473": 0, "480": 0, "481": 0, "482": 0, "484": 0, "485": 0, "487": 0, "488": 0, "489": 0, "491": 0, "492": 0, "494": 0, "495": 0, "496": 0, "497": 0, "498": 0, "499": 0, "500": 0, "501": 0, "502": 0, "503": 0, "504": 0, "506": 0, "513": 0, "514": 0, "518": 15, "520": 15, "521": 6, "519": 15, "523": 0, "528": 84, "530": 84, "529": 84, "531": 0, "533": 84, "534": 0, "535": 0, "539": 0, "540": 0, "538": 0, "542": 0, "545": 0, "546": 0, "547": 0, "548": 0, "554": 20, "555": 20, "556": 4, "557": 4, "558": 4, "559": 20, "560": 20, "565": 20, "566": 20, "567": 20, "568": 20, "576": 0, "582": 0, "585": 0, "586": 0, "587": 0, "588": 0, "597": 0, "598": 0, "599": 0, "607": 0, "615": 38, "618": 1, "619": 0, "621": 1, "622": 1, "623": 0, "624": 0, "625": 0, "626": 0, "627": 0, "628": 0, "630": 1, "631": 0, "638": 1, "640": 0, "642": 1, "643": 0, "644": 0, "647": 0, "648": 0, "649": 0, "650": 0, "651": 0, "652": 0, "653": 0, "654": 0, "655": 0, "658": 1, "659": 0, "661": 1, "662": 0, "670": 1, "671": 1, "672": 1, "673": 1, "676": 0, "684": 0, "685": 0, "686": 0, "687": 0, "688": 0, "710": 0, "711": 0, "712": 0, "713": 0, "714": 0, "722": 0, "726": 0, "727": 0, "728": 0, "729": 0, "737": 0, "738": 0, "740": 0, "741": 0, "739": 0, "745": 0, "748": 0, "749": 0, "750": 0, "754": 26, "758": 6, "766": 0, "769": 66, "770": 66, "771": 66, "772": 66, "773": 7, "782": 66, "783": 66, "784": 66, "785": 66, "786": 66, "787": 66, "792": 1, "793": 2, "794": 1, "795": 1, "796": 1, "804": 0, "807": 91, "810": 88, "811": 88, "812": 88, "815": 0, "819": 0, "823": 0, "824": 0, "825": 0, "833": 0, "834": 0, "835": 0, "839": 0, "843": 19, "847": 22, "851": 11, "852": 4, "853": 1, "854": 9, "856": 7, "857": 2, "858": 5, "865": 0, "866": 0, "867": 0, "868": 0, "869": 0, "870": 0, "871": 0, "872": 0, "873": 0, "874": 0, "876": 0, "875": 0, "877": 0, "879": 0, "880": 0, "881": 0, "882": 0, "883": 0, "891": 0, "895": 0, "896": 0, "897": 0, "898": 0, "899": 0, "900": 0, "902": 0, "903": 0, "907": 0, "912": 0, "913": 0, "914": 0, "911": 0, "916": 0, "917": 0, "918": 0, "919": 0, "921": 0, "922": 0, "924": 0, "925": 0, "926": 0, "927": 0, "928": 0, "929": 0, "930": 0, "931": 0, "933": 0, "937": 0, "938": 0, "941": 0, "942": 0, "943": 0, "944": 0, "945": 0, "949": 0, "953": 1, "955": 1, "956": 1, "954": 1, "958": 1, "960": 1, "963": 1, "979": 1, "985": 1, "997": 1, "961": 0, "964": 0, "965": 0, "966": 0, "968": 0, "969": 0, "970": 0, "971": 0, "972": 0, "973": 0, "974": 0, "975": 0, "976": 0, "980": 0, "981": 0, "982": 0, "983": 0, "986": 0, "987": 0, "988": 0, "990": 0, "994": 0, "995": 0, "998": 0, "1002": 0, "1003": 0, "1004": 0, "1008": 1, "1010": 1, "1016": 1, "1024": 1, "1045": 1, "1066": 1, "1071": 1, "1074": 1, "1079": 1, "1083": 1, "1094": 1, "1011": 19, "1012": 19, "1013": 19, "1014": 14, "1017": 14, "1018": 56, "1019": 14, "1020": 14, "1021": 14, "1025": 14, "1027": 0, "1028": 0, "1029": 0, "1030": 0, "1026": 0, "1033": 28, "1034": 14, "1036": 0, "1037": 0, "1038": 0, "1039": 0, "1035": 0, "1043": 14, "1046": 14, "1047": 14, "1048": 0, "1049": 0, "1050": 0, "1052": 0, "1051": 0, "1053": 0, "1054": 0, "1056": 0, "1057": 0, "1058": 0, "1059": 0, "1060": 0, "1061": 0, "1064": 14, "1067": 0, "1068": 0, "1069": 0, "1072": 0, "1075": 1, "1076": 1, "1077": 0, "1080": 0, "1081": 0, "1087": 0, "1089": 0, "1090": 0, "1091": 0, "1092": 0, "1095": 0, "1096": 0, "1097": 0, "1098": 0, "1102": 1, "1103": 1, "1106": 1, "1110": 1, "1113": 1, "1104": 1, "1118": 0, "1119": 0, "1120": 0, "1124": 0, "1129": 1, "1136": 1, "1155": 1, "1160": 1, "1130": 16, "1131": 4, "1132": 4, "1133": 4, "1140": 4, "1141": 20, "1142": 4, "1144": 0, "1145": 0, "1148": 0, "1149": 0, "1143": 0, "1153": 4, "1156": 0, "1167": 0, "1168": 0, "1169": 0, "1170": 0, "1171": 0, "1172": 0, "1173": 0, "1175": 0, "1176": 0, "1177": 0, "1178": 0, "1180": 0, "1181": 0, "1183": 0, "1188": 0, "1189": 0, "1179": 0, "1192": 0, "1196": 1, "1198": 1, "1200": 1, "1197": 1, "1203": 1, "1205": 1, "1213": 1, "1232": 1, "1243": 1, "1246": 1, "1276": 1, "1284": 1, "1296": 1, "1300": 1, "1306": 1, "1310": 1, "1207": 6, "1208": 6, "1209": 0, "1210": 0, "1211": 6, "1218": 0, "1219": 0, "1221": 0, "1222": 0, "1223": 0, "1224": 0, "1225": 0, "1228": 0, "1230": 0, "1233": 0, "1234": 0, "1235": 0, "1236": 0, "1237": 0, "1238": 0, "1239": 0, "1240": 0, "1241": 0, "1244": 0, "1247": 0, "1248": 0, "1249": 0, "1250": 0, "1253": 0, "1254": 0, "1255": 0, "1256": 0, "1257": 0, "1259": 0, "1260": 0, "1261": 0, "1262": 0, "1263": 0, "1264": 0, "1265": 0, "1266": 0, "1267": 0, "1270": 0, "1271": 0, "1272": 0, "1273": 0, "1277": 0, "1278": 0, "1279": 0, "1280": 0, "1282": 0, "1285": 8, "1286": 8, "1287": 10, "1288": 5, "1289": 5, "1291": 10, "1292": 5, "1293": 5, "1297": 0, "1298": 0, "1302": 0, "1303": 0, "1304": 0, "1307": 0, "1308": 0, "1311": 0, "1312": 0, "1313": 0, "1318": 1, "1320": 1, "1322": 1, "1324": 1, "1319": 1, "1328": 1, "1332": 1, "1346": 1, "1349": 1, "1397": 1, "1408": 1, "1427": 1, "1433": 1, "1437": 1, "1337": 4, "1338": 2, "1340": 2, "1341": 2, "1342": 0, "1344": 2, "1347": 0, "1350": 0, "1351": 0, "1352": 0, "1353": 0, "1354": 0, "1355": 0, "1356": 0, "1361": 0, "1363": 0, "1364": 0, "1365": 0, "1366": 0, "1367": 0, "1369": 0, "1370": 0, "1371": 0, "1372": 0, "1373": 0, "1374": 0, "1375": 0, "1376": 0, "1377": 0, "1380": 0, "1381": 0, "1382": 0, "1383": 0, "1384": 0, "1385": 0, "1386": 0, "1387": 0, "1388": 0, "1391": 0, "1392": 0, "1393": 0, "1394": 0, "1398": 0, "1399": 0, "1400": 0, "1401": 0, "1403": 0, "1409": 0, "1410": 0, "1411": 0, "1415": 0, "1416": 0, "1417": 0, "1418": 0, "1419": 0, "1421": 0, "1422": 0, "1423": 0, "1424": 0, "1425": 0, "1429": 0, "1430": 0, "1431": 0, "1434": 0, "1435": 0, "1438": 0, "1439": 0, "1440": 0, "1445": 1, "1447": 1, "1446": 1, "1449": 1, "1451": 1, "1456": 1, "1469": 1, "1493": 1, "1517": 1, "1528": 1, "1529": 1, "1534": 1, "1535": 1, "1538": 1, "1546": 1, "1549": 1, "1569": 1, "1572": 1, "1576": 1, "1453": 0, "1454": 0, "1457": 0, "1459": 0, "1460": 0, "1461": 0, "1463": 0, "1464": 0, "1466": 0, "1467": 0, "1470": 0, "1471": 0, "1472": 0, "1473": 0, "1474": 0, "1476": 0, "1477": 0, "1478": 0, "1479": 0, "1475": 0, "1482": 0, "1484": 0, "1485": 0, "1486": 0, "1487": 0, "1483": 0, "1491": 0, "1494": 0, "1495": 0, "1496": 0, "1497": 0, "1498": 0, "1500": 0, "1501": 0, "1502": 0, "1503": 0, "1499": 0, "1506": 0, "1508": 0, "1509": 0, "1510": 0, "1511": 0, "1507": 0, "1515": 0, "1518": 0, "1520": 0, "1521": 0, "1522": 0, "1523": 0, "1519": 0, "1526": 0, "1530": 0, "1531": 0, "1536": 0, "1539": 0, "1540": 0, "1541": 0, "1542": 0, "1543": 0, "1544": 0, "1547": 0, "1550": 0, "1551": 0, "1552": 0, "1553": 0, "1554": 0, "1555": 0, "1556": 0, "1557": 0, "1559": 0, "1560": 0, "1561": 0, "1562": 0, "1563": 0, "1564": 0, "1565": 0, "1566": 0, "1570": 0, "1573": 0, "1574": 0, "1577": 0, "1578": 0, "1579": 0, "1580": 0, "1581": 0, "1592": 1, "1594": 1, "1593": 1, "1597": 1, "1599": 1, "1602": 1, "1621": 1, "1628": 1, "1634": 1, "1638": 1, "1600": 0, "1603": 0, "1604": 0, "1605": 0, "1606": 0, "1607": 0, "1608": 0, "1609": 0, "1610": 0, "1612": 0, "1613": 0, "1615": 0, "1616": 0, "1617": 0, "1618": 0, "1622": 0, "1623": 0, "1624": 0, "1625": 0, "1626": 0, "1629": 0, "1630": 0, "1631": 0, "1632": 0, "1635": 0, "1636": 0, "1639": 0, "1640": 0, "1641": 0, "1646": 1, "1647": 1, "1649": 1, "1654": 1, "1660": 1, "1651": 1, "1652": 1, "1655": 0, "1658": 0, "1663": 0, "1664": 0, "1665": 0, "1670": 1, "1672": 1, "1679": 1, "1685": 1, "1696": 1, "1712": 1, "1718": 1, "1729": 1, "1674": 0, "1675": 0, "1676": 0, "1677": 0, "1680": 0, "1681": 0, "1682": 0, "1686": 0, "1688": 0, "1689": 0, "1690": 0, "1691": 0, "1687": 0, "1694": 0, "1697": 0, "1698": 0, "1699": 0, "1700": 0, "1701": 0, "1702": 0, "1703": 0, "1704": 0, "1705": 0, "1706": 0, "1707": 0, "1708": 0, "1709": 0, "1710": 0, "1713": 0, "1714": 0, "1715": 0, "1716": 0, "1719": 0, "1720": 0, "1721": 0, "1722": 0, "1723": 0, "1724": 0, "1725": 0, "1726": 0, "1730": 0, "1734": 1, "1736": 1, "1735": 1, "1738": 1, "1740": 1, "1751": 1, "1754": 1, "1766": 1, "1741": 0, "1742": 0, "1743": 0, "1744": 0, "1745": 0, "1746": 0, "1747": 0, "1748": 0, "1749": 0, "1752": 0, "1755": 0, "1756": 0, "1757": 0, "1758": 0, "1759": 0, "1760": 0, "1761": 0, "1762": 0, "1763": 0, "1767": 0, "1768": 0, "1769": 0, "1774": 1, "1776": 1, "1775": 1, "1778": 1, "1780": 1, "1786": 1, "1798": 1, "1799": 1, "1827": 1, "1838": 1, "1841": 1, "1853": 1, "1781": 21, "1782": 7, "1783": 7, "1787": 7, "1789": 0, "1790": 0, "1791": 0, "1792": 0, "1793": 0, "1788": 0, "1796": 7, "1802": 7, "1803": 7, "1804": 7, "1805": 7, "1812": 0, "1814": 0, "1815": 7, "1822": 0, "1824": 0, "1825": 7, "1807": 0, "1809": 0, "1808": 0, "1810": 0, "1811": 0, "1817": 0, "1819": 0, "1818": 0, "1820": 0, "1821": 0, "1828": 0, "1829": 0, "1830": 0, "1831": 0, "1832": 0, "1833": 0, "1834": 0, "1835": 0, "1836": 0, "1839": 0, "1842": 0, "1843": 0, "1844": 0, "1845": 0, "1846": 0, "1847": 0, "1848": 0, "1849": 0, "1850": 0, "1854": 0, "1855": 0, "1856": 0, "1861": 1, "1862": 1, "1864": 1, "1867": 1, "1865": 0, "1868": 0, "1869": 0, "1870": 0, "1871": 0, "1876": 1, "1878": 1, "1879": 0, "1883": 1, "1884": 1, "1887": 1, "1890": 1, "1891": 1, "1885": 1, "1894": 1, "1898": 1, "1903": 1, "1909": 1, "1895": 0, "1896": 0, "1899": 0, "1900": 0, "1901": 0, "1904": 0, "1905": 0, "1906": 0, "1907": 0, "1910": 0, "1914": 1, "1915": 1, "1916": 1, "1918": 1, "1928": 1, "1934": 1, "1946": 1, "1956": 1, "1959": 1, "1969": 1, "1974": 1, "1985": 1, "1920": 0, "1921": 0, "1923": 0, "1922": 0, "1924": 0, "1925": 0, "1926": 0, "1929": 0, "1930": 0, "1931": 0, "1935": 0, "1937": 0, "1938": 0, "1940": 0, "1941": 0, "1936": 0, "1944": 0, "1947": 0, "1948": 0, "1949": 0, "1950": 0, "1951": 0, "1952": 0, "1953": 0, "1954": 0, "1957": 0, "1960": 0, "1961": 0, "1962": 0, "1963": 0, "1964": 0, "1965": 0, "1966": 0, "1967": 0, "1970": 0, "1971": 0, "1972": 0, "1975": 0, "1976": 0, "1977": 0, "1978": 0, "1979": 0, "1980": 0, "1981": 0, "1982": 0, "1983": 0, "1986": 0, "1987": 0, "1988": 0, "1989": 0, "1995": 1, "1996": 1, "1994": 1, "1998": 1, "2001": 1, "2004": 1, "2005": 1, "1999": 1, "2008": 1, "2013": 1, "2009": 0, "2010": 0, "2011": 0, "2014": 0, "2015": 0, "2016": 0, "2017": 0, "2021": 1, "2033": 1, "2022": 3, "2023": 3, "2024": 6, "2025": 12, "2027": 9, "2030": 3, "2028": 6, "2026": 3, "2042": 0, "2043": 0, "2045": 0, "2049": 1, "2051": 1, "2054": 1, "2052": 0, "2055": 0, "2056": 0, "2057": 0, "2062": 1, "2064": 1, "2067": 1, "2065": 0, "2068": 0, "2069": 0, "2070": 0, "2075": 1, "2077": 1, "2080": 1, "2078": 1, "2081": 0, "2082": 0, "2083": 0, "2088": 1, "2089": 1, "2091": 1, "2097": 1, "2109": 1, "2112": 1, "2092": 0, "2093": 0, "2094": 0, "2095": 0, "2098": 0, "2099": 0, "2100": 0, "2101": 0, "2102": 0, "2104": 0, "2105": 0, "2106": 0, "2107": 0, "2110": 0, "2113": 0, "2114": 0, "2115": 0, "2116": 0, "2121": 1, "2123": 1, "2127": 1, "2134": 1, "2155": 1, "2158": 1, "2163": 1, "2167": 1, "2177": 1, "2124": 3, "2125": 3, "2128": 3, "2129": 9, "2130": 3, "2131": 3, "2135": 3, "2136": 3, "2137": 0, "2138": 0, "2139": 0, "2141": 0, "2140": 0, "2142": 0, "2143": 0, "2145": 0, "2146": 0, "2147": 0, "2148": 0, "2149": 0, "2150": 0, "2153": 3, "2156": 0, "2159": 0, "2160": 0, "2161": 0, "2164": 0, "2165": 0, "2171": 0, "2172": 0, "2173": 0, "2174": 0, "2178": 0, "2179": 0, "2180": 0, "2181": 0, "2185": 1, "2187": 1, "2189": 1, "2186": 1, "2192": 1, "2194": 1, "2202": 1, "2224": 1, "2235": 1, "2238": 1, "2266": 1, "2274": 1, "2278": 1, "2284": 1, "2288": 1, "2196": 1, "2197": 1, "2198": 0, "2199": 0, "2200": 1, "2207": 0, "2208": 0, "2210": 0, "2211": 0, "2212": 0, "2213": 0, "2214": 0, "2217": 0, "2220": 0, "2222": 0, "2225": 0, "2226": 0, "2227": 0, "2228": 0, "2229": 0, "2230": 0, "2231": 0, "2232": 0, "2233": 0, "2236": 0, "2239": 0, "2240": 0, "2241": 0, "2242": 0, "2243": 0, "2247": 0, "2249": 0, "2250": 0, "2251": 0, "2252": 0, "2253": 0, "2254": 0, "2255": 0, "2256": 0, "2257": 0, "2260": 0, "2261": 0, "2262": 0, "2263": 0, "2267": 0, "2268": 0, "2269": 0, "2270": 0, "2272": 0, "2275": 0, "2276": 0, "2280": 0, "2281": 0, "2282": 0, "2285": 0, "2286": 0, "2289": 0, "2290": 0, "2291": 0, "2296": 1, "2297": 1, "2299": 1, "2303": 1, "2309": 1, "2300": 0, "2301": 0, "2304": 0, "2305": 0, "2306": 0, "2307": 0, "2312": 0, "2313": 0, "2314": 0, "2319": 1, "2320": 1, "2322": 1, "2328": 1, "2331": 1, "2343": 1, "2351": 1, "2354": 1, "2357": 1, "2365": 1, "2371": 1, "2375": 1, "2323": 0, "2324": 0, "2325": 0, "2326": 0, "2329": 0, "2332": 0, "2334": 0, "2335": 0, "2337": 0, "2338": 0, "2333": 0, "2341": 0, "2344": 0, "2345": 0, "2346": 0, "2348": 0, "2349": 0, "2352": 0, "2355": 0, "2358": 0, "2359": 0, "2360": 0, "2361": 0, "2362": 0, "2363": 0, "2366": 0, "2367": 0, "2368": 0, "2369": 0, "2373": 0, "2377": 0, "2378": 0, "2379": 0, "2384": 1, "2383": 1, "2386": 1, "2387": 1, "2389": 1, "2393": 1, "2398": 1, "2401": 1, "2405": 1, "2415": 1, "2428": 1, "2390": 0, "2391": 0, "2394": 0, "2395": 0, "2396": 0, "2399": 0, "2402": 0, "2403": 0, "2406": 0, "2407": 0, "2408": 0, "2409": 0, "2411": 0, "2412": 0, "2413": 0, "2416": 0, "2417": 0, "2418": 0, "2419": 0, "2420": 0, "2421": 0, "2422": 0, "2423": 0, "2424": 0, "2426": 0, "2429": 0, "2430": 0, "2431": 0, "2436": 1, "2438": 1, "2442": 1, "2448": 1, "2460": 1, "2466": 1, "2469": 1, "2475": 1, "2484": 1, "2439": 9, "2440": 9, "2443": 18, "2444": 6, "2445": 6, "2449": 6, "2451": 0, "2452": 0, "2453": 0, "2454": 0, "2450": 0, "2458": 6, "2461": 0, "2462": 0, "2463": 0, "2464": 0, "2467": 0, "2470": 0, "2471": 0, "2472": 0, "2473": 0, "2476": 9, "2477": 0, "2478": 0, "2479": 0, "2481": 9, "2482": 9, "2485": 0, "2505": 1, "2506": 1, "2509": 1, "2512": 1, "2507": 9, "2510": 0, "2513": 9, "2518": 1, "2521": 1, "2519": 6, "2522": 0, "2527": 1, "2530": 1, "2528": 0, "2531": 0, "2536": 1, "2539": 1, "2537": 0, "2540": 0}}
+ git checkout 30613d6a748fce18919ff8b0da166d9fda2ed9bc
M	django/db/models/fields/__init__.py
Note: switching to '30613d6a748fce18919ff8b0da166d9fda2ed9bc'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at 30613d6a74 Fixed #33408 -- Fixed adding nullable unique fields on SQLite.
+ git apply /root/pre_state.patch
error: unrecognized input
