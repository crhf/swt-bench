+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD de32fe83a2e4a20887972c69a0693b94eb25a88b
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
nothing to commit, working tree clean
+ git show
commit de32fe83a2e4a20887972c69a0693b94eb25a88b
Author: William Schwartz <wkschwartz@gmail.com>
Date:   Wed Dec 30 11:32:46 2020 -0600

    Fixed #32317 -- Refactored loaddata command to make it extensible.
    
    Moved deeply nested blocks out of inner loops to improve readability
    and maintainability.
    
    Thanks to Mariusz Felisiak, Shreyas Ravi, and Paolo Melchiorre for
    feedback.

diff --git a/django/core/management/commands/loaddata.py b/django/core/management/commands/loaddata.py
index 021c6b7ee1..20428f9f10 100644
--- a/django/core/management/commands/loaddata.py
+++ b/django/core/management/commands/loaddata.py
@@ -84,6 +84,33 @@ class Command(BaseCommand):
         if transaction.get_autocommit(self.using):
             connections[self.using].close()
 
+    @cached_property
+    def compression_formats(self):
+        """A dict mapping format names to (open function, mode arg) tuples."""
+        # Forcing binary mode may be revisited after dropping Python 2 support (see #22399)
+        compression_formats = {
+            None: (open, 'rb'),
+            'gz': (gzip.GzipFile, 'rb'),
+            'zip': (SingleZipReader, 'r'),
+            'stdin': (lambda *args: sys.stdin, None),
+        }
+        if has_bz2:
+            compression_formats['bz2'] = (bz2.BZ2File, 'r')
+        if has_lzma:
+            compression_formats['lzma'] = (lzma.LZMAFile, 'r')
+            compression_formats['xz'] = (lzma.LZMAFile, 'r')
+        return compression_formats
+
+    def reset_sequences(self, connection, models):
+        """Reset database sequences for the given connection and models."""
+        sequence_sql = connection.ops.sequence_reset_sql(no_style(), models)
+        if sequence_sql:
+            if self.verbosity >= 2:
+                self.stdout.write('Resetting sequences')
+            with connection.cursor() as cursor:
+                for line in sequence_sql:
+                    cursor.execute(line)
+
     def loaddata(self, fixture_labels):
         connection = connections[self.using]
 
@@ -94,18 +121,6 @@ class Command(BaseCommand):
         self.models = set()
 
         self.serialization_formats = serializers.get_public_serializer_formats()
-        # Forcing binary mode may be revisited after dropping Python 2 support (see #22399)
-        self.compression_formats = {
-            None: (open, 'rb'),
-            'gz': (gzip.GzipFile, 'rb'),
-            'zip': (SingleZipReader, 'r'),
-            'stdin': (lambda *args: sys.stdin, None),
-        }
-        if has_bz2:
-            self.compression_formats['bz2'] = (bz2.BZ2File, 'r')
-        if has_lzma:
-            self.compression_formats['lzma'] = (lzma.LZMAFile, 'r')
-            self.compression_formats['xz'] = (lzma.LZMAFile, 'r')
 
         # Django's test suite repeatedly tries to load initial_data fixtures
         # from apps that don't have any fixtures. Because disabling constraint
@@ -136,13 +151,7 @@ class Command(BaseCommand):
         # If we found even one object in a fixture, we need to reset the
         # database sequences.
         if self.loaded_object_count > 0:
-            sequence_sql = connection.ops.sequence_reset_sql(no_style(), self.models)
-            if sequence_sql:
-                if self.verbosity >= 2:
-                    self.stdout.write('Resetting sequences')
-                with connection.cursor() as cursor:
-                    for line in sequence_sql:
-                        cursor.execute(line)
+            self.reset_sequences(connection, self.models)
 
         if self.verbosity >= 1:
             if self.fixture_object_count == self.loaded_object_count:
@@ -156,6 +165,31 @@ class Command(BaseCommand):
                     % (self.loaded_object_count, self.fixture_object_count, self.fixture_count)
                 )
 
+    def save_obj(self, obj):
+        """Save an object if permitted."""
+        if (
+            obj.object._meta.app_config in self.excluded_apps or
+            type(obj.object) in self.excluded_models
+        ):
+            return False
+        saved = False
+        if router.allow_migrate_model(self.using, obj.object.__class__):
+            saved = True
+            self.models.add(obj.object.__class__)
+            try:
+                obj.save(using=self.using)
+            # psycopg2 raises ValueError if data contains NUL chars.
+            except (DatabaseError, IntegrityError, ValueError) as e:
+                e.args = ('Could not load %(object_label)s(pk=%(pk)s): %(error_msg)s' % {
+                    'object_label': obj.object._meta.label,
+                    'pk': obj.object.pk,
+                    'error_msg': e,
+                },)
+                raise
+        if obj.deferred_fields:
+            self.objs_with_deferred_fields.append(obj)
+        return saved
+
     def load_label(self, fixture_label):
         """Load fixtures files for a given label."""
         show_progress = self.verbosity >= 3
@@ -179,29 +213,13 @@ class Command(BaseCommand):
 
                 for obj in objects:
                     objects_in_fixture += 1
-                    if (obj.object._meta.app_config in self.excluded_apps or
-                            type(obj.object) in self.excluded_models):
-                        continue
-                    if router.allow_migrate_model(self.using, obj.object.__class__):
+                    if self.save_obj(obj):
                         loaded_objects_in_fixture += 1
-                        self.models.add(obj.object.__class__)
-                        try:
-                            obj.save(using=self.using)
-                        # psycopg2 raises ValueError if data contains NUL chars.
-                        except (DatabaseError, IntegrityError, ValueError) as e:
-                            e.args = ("Could not load %(object_label)s(pk=%(pk)s): %(error_msg)s" % {
-                                'object_label': obj.object._meta.label,
-                                'pk': obj.object.pk,
-                                'error_msg': e,
-                            },)
-                            raise
                         if show_progress:
                             self.stdout.write(
                                 '\rProcessed %i object(s).' % loaded_objects_in_fixture,
                                 ending=''
                             )
-                    if obj.deferred_fields:
-                        self.objs_with_deferred_fields.append(obj)
             except Exception as e:
                 if not isinstance(e, CommandError):
                     e.args = ("Problem installing fixture '%s': %s" % (fixture_file, e),)
@@ -221,6 +239,37 @@ class Command(BaseCommand):
                     RuntimeWarning
                 )
 
+    def get_fixture_name_and_dirs(self, fixture_name):
+        dirname, basename = os.path.split(fixture_name)
+        if os.path.isabs(fixture_name):
+            fixture_dirs = [dirname]
+        else:
+            fixture_dirs = self.fixture_dirs
+            if os.path.sep in os.path.normpath(fixture_name):
+                fixture_dirs = [os.path.join(dir_, dirname) for dir_ in fixture_dirs]
+        return basename, fixture_dirs
+
+    def get_targets(self, fixture_name, ser_fmt, cmp_fmt):
+        databases = [self.using, None]
+        cmp_fmts = self.compression_formats if cmp_fmt is None else [cmp_fmt]
+        ser_fmts = self.serialization_formats if ser_fmt is None else [ser_fmt]
+        return {
+            '%s.%s' % (
+                fixture_name,
+                '.'.join([ext for ext in combo if ext]),
+            ) for combo in product(databases, ser_fmts, cmp_fmts)
+        }
+
+    def find_fixture_files_in_dir(self, fixture_dir, fixture_name, targets):
+        fixture_files_in_dir = []
+        path = os.path.join(fixture_dir, fixture_name)
+        for candidate in glob.iglob(glob.escape(path) + '*'):
+            if os.path.basename(candidate) in targets:
+                # Save the fixture_dir and fixture_name for future error
+                # messages.
+                fixture_files_in_dir.append((candidate, fixture_dir, fixture_name))
+        return fixture_files_in_dir
+
     @functools.lru_cache(maxsize=None)
     def find_fixtures(self, fixture_label):
         """Find fixture files for a given label."""
@@ -228,39 +277,18 @@ class Command(BaseCommand):
             return [(READ_STDIN, None, READ_STDIN)]
 
         fixture_name, ser_fmt, cmp_fmt = self.parse_name(fixture_label)
-        databases = [self.using, None]
-        cmp_fmts = list(self.compression_formats) if cmp_fmt is None else [cmp_fmt]
-        ser_fmts = self.serialization_formats if ser_fmt is None else [ser_fmt]
-
         if self.verbosity >= 2:
             self.stdout.write("Loading '%s' fixtures..." % fixture_name)
 
-        dirname, basename = os.path.split(fixture_name)
-        if os.path.isabs(fixture_name):
-            fixture_dirs = [dirname]
-        else:
-            fixture_dirs = self.fixture_dirs
-            if os.path.sep in os.path.normpath(fixture_name):
-                fixture_dirs = [os.path.join(dir_, dirname) for dir_ in fixture_dirs]
-        fixture_name = basename
-
-        suffixes = (
-            '.'.join(ext for ext in combo if ext)
-            for combo in product(databases, ser_fmts, cmp_fmts)
-        )
-        targets = {'.'.join((fixture_name, suffix)) for suffix in suffixes}
-
+        fixture_name, fixture_dirs = self.get_fixture_name_and_dirs(fixture_name)
+        targets = self.get_targets(fixture_name, ser_fmt, cmp_fmt)
         fixture_files = []
         for fixture_dir in fixture_dirs:
             if self.verbosity >= 2:
                 self.stdout.write("Checking %s for fixtures..." % humanize(fixture_dir))
-            fixture_files_in_dir = []
-            path = os.path.join(fixture_dir, fixture_name)
-            for candidate in glob.iglob(glob.escape(path) + '*'):
-                if os.path.basename(candidate) in targets:
-                    # Save the fixture_dir and fixture_name for future error messages.
-                    fixture_files_in_dir.append((candidate, fixture_dir, fixture_name))
-
+            fixture_files_in_dir = self.find_fixture_files_in_dir(
+                fixture_dir, fixture_name, targets,
+            )
             if self.verbosity >= 2 and not fixture_files_in_dir:
                 self.stdout.write("No fixture '%s' in %s." %
                                   (fixture_name, humanize(fixture_dir)))
+ git diff de32fe83a2e4a20887972c69a0693b94eb25a88b
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Checking if build backend supports build_editable: started
  Checking if build backend supports build_editable: finished with status 'done'
  Getting requirements to build editable: started
  Getting requirements to build editable: finished with status 'done'
  Preparing editable metadata (pyproject.toml): started
  Preparing editable metadata (pyproject.toml): finished with status 'done'
Requirement already satisfied: asgiref>=3.3.2 in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from Django==4.0.dev20210518050533) (3.8.1)
Requirement already satisfied: pytz in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from Django==4.0.dev20210518050533) (2025.2)
Requirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from Django==4.0.dev20210518050533) (0.5.3)
Requirement already satisfied: typing-extensions>=4 in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from asgiref>=3.3.2->Django==4.0.dev20210518050533) (4.13.2)
Building wheels for collected packages: Django
  Building editable for Django (pyproject.toml): started
  Building editable for Django (pyproject.toml): finished with status 'done'
  Created wheel for Django: filename=django-4.0.dev20210518050533-0.editable-py3-none-any.whl size=26114 sha256=939ed903e6711ccd2b3312b9cc694d09d5cd9ec3f42eaed73eb9961b7eec565d
  Stored in directory: /tmp/pip-ephem-wheel-cache-g03wccnb/wheels/b2/50/f1/218f2e9962a80d01a4b1297698978f9fb3b60056aa24343f24
Successfully built Django
Installing collected packages: Django
  Attempting uninstall: Django
    Found existing installation: Django 4.0.dev20210518050533
    Uninstalling Django-4.0.dev20210518050533:
      Successfully uninstalled Django-4.0.dev20210518050533
Successfully installed Django-4.0.dev20210518050533
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable.It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git apply -v -
Checking patch django/contrib/admin/sites.py...
Applied patch django/contrib/admin/sites.py cleanly.
+ git apply -v -
Checking patch tests/test_coverup_django__django-14404.py...
Applied patch tests/test_coverup_django__django-14404.py cleanly.
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/contrib/admin/sites\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-14404
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(django/contrib/admin/sites\\.py)']
Testing against Django installed in '/testbed/django'
0.50 /testbed/django/contrib/admin/sites.py(1): import re
0.50 /testbed/django/contrib/admin/sites.py(2): from functools import update_wrapper
0.50 /testbed/django/contrib/admin/sites.py(3): from weakref import WeakSet
0.50 /testbed/django/contrib/admin/sites.py(5): from django.apps import apps
0.50 /testbed/django/contrib/admin/sites.py(6): from django.conf import settings
0.50 /testbed/django/contrib/admin/sites.py(7): from django.contrib.admin import ModelAdmin, actions
0.50 /testbed/django/contrib/admin/sites.py(8): from django.contrib.admin.views.autocomplete import AutocompleteJsonView
0.50 /testbed/django/contrib/admin/sites.py(9): from django.contrib.auth import REDIRECT_FIELD_NAME
0.50 /testbed/django/contrib/admin/sites.py(10): from django.core.exceptions import ImproperlyConfigured
0.50 /testbed/django/contrib/admin/sites.py(11): from django.db.models.base import ModelBase
0.50 /testbed/django/contrib/admin/sites.py(12): from django.http import (
0.50 /testbed/django/contrib/admin/sites.py(15): from django.template.response import TemplateResponse
0.50 /testbed/django/contrib/admin/sites.py(16): from django.urls import NoReverseMatch, Resolver404, resolve, reverse
0.50 /testbed/django/contrib/admin/sites.py(17): from django.utils.decorators import method_decorator
0.50 /testbed/django/contrib/admin/sites.py(18): from django.utils.functional import LazyObject
0.50 /testbed/django/contrib/admin/sites.py(19): from django.utils.module_loading import import_string
0.50 /testbed/django/contrib/admin/sites.py(20): from django.utils.text import capfirst
0.50 /testbed/django/contrib/admin/sites.py(21): from django.utils.translation import gettext as _, gettext_lazy
0.50 /testbed/django/contrib/admin/sites.py(22): from django.views.decorators.cache import never_cache
0.50 /testbed/django/contrib/admin/sites.py(23): from django.views.decorators.common import no_append_slash
0.50 /testbed/django/contrib/admin/sites.py(24): from django.views.decorators.csrf import csrf_protect
0.50 /testbed/django/contrib/admin/sites.py(25): from django.views.i18n import JavaScriptCatalog
0.51 /testbed/django/contrib/admin/sites.py(27): all_sites = WeakSet()
0.51 /testbed/django/contrib/admin/sites.py(30): class AlreadyRegistered(Exception):
0.51 /testbed/django/contrib/admin/sites.py(30): class AlreadyRegistered(Exception):
0.51 /testbed/django/contrib/admin/sites.py(31):     pass
0.51 /testbed/django/contrib/admin/sites.py(34): class NotRegistered(Exception):
0.51 /testbed/django/contrib/admin/sites.py(34): class NotRegistered(Exception):
0.51 /testbed/django/contrib/admin/sites.py(35):     pass
0.51 /testbed/django/contrib/admin/sites.py(38): class AdminSite:
0.51 /testbed/django/contrib/admin/sites.py(38): class AdminSite:
0.51 /testbed/django/contrib/admin/sites.py(39):     """
0.51 /testbed/django/contrib/admin/sites.py(48):     site_title = gettext_lazy('Django site admin')
0.51 /testbed/django/contrib/admin/sites.py(51):     site_header = gettext_lazy('Django administration')
0.51 /testbed/django/contrib/admin/sites.py(54):     index_title = gettext_lazy('Site administration')
0.51 /testbed/django/contrib/admin/sites.py(57):     site_url = '/'
0.51 /testbed/django/contrib/admin/sites.py(59):     enable_nav_sidebar = True
0.51 /testbed/django/contrib/admin/sites.py(61):     empty_value_display = '-'
0.51 /testbed/django/contrib/admin/sites.py(63):     login_form = None
0.51 /testbed/django/contrib/admin/sites.py(64):     index_template = None
0.51 /testbed/django/contrib/admin/sites.py(65):     app_index_template = None
0.51 /testbed/django/contrib/admin/sites.py(66):     login_template = None
0.51 /testbed/django/contrib/admin/sites.py(67):     logout_template = None
0.51 /testbed/django/contrib/admin/sites.py(68):     password_change_template = None
0.51 /testbed/django/contrib/admin/sites.py(69):     password_change_done_template = None
0.51 /testbed/django/contrib/admin/sites.py(71):     final_catch_all_view = True
0.51 /testbed/django/contrib/admin/sites.py(73):     def __init__(self, name='admin'):
0.51 /testbed/django/contrib/admin/sites.py(80):     def check(self, app_configs):
0.51 /testbed/django/contrib/admin/sites.py(96):     def register(self, model_or_iterable, admin_class=None, **options):
0.51 /testbed/django/contrib/admin/sites.py(144):     def unregister(self, model_or_iterable):
0.51 /testbed/django/contrib/admin/sites.py(157):     def is_registered(self, model):
0.51 /testbed/django/contrib/admin/sites.py(163):     def add_action(self, action, name=None):
0.51 /testbed/django/contrib/admin/sites.py(171):     def disable_action(self, name):
0.51 /testbed/django/contrib/admin/sites.py(177):     def get_action(self, name):
0.51 /testbed/django/contrib/admin/sites.py(184):     @property
0.51 /testbed/django/contrib/admin/sites.py(185):     def actions(self):
0.51 /testbed/django/contrib/admin/sites.py(191):     def has_permission(self, request):
0.51 /testbed/django/contrib/admin/sites.py(198):     def admin_view(self, view, cacheable=False):
0.51 /testbed/django/contrib/admin/sites.py(242):     def get_urls(self):
0.51 /testbed/django/contrib/admin/sites.py(298):     @property
0.51 /testbed/django/contrib/admin/sites.py(299):     def urls(self):
0.51 /testbed/django/contrib/admin/sites.py(302):     def each_context(self, request):
0.51 /testbed/django/contrib/admin/sites.py(322):     def password_change(self, request, extra_context=None):
0.51 /testbed/django/contrib/admin/sites.py(339):     def password_change_done(self, request, extra_context=None):
0.51 /testbed/django/contrib/admin/sites.py(352):     def i18n_javascript(self, request, extra_context=None):
0.51 /testbed/django/contrib/admin/sites.py(361):     def logout(self, request, extra_context=None):
0.51 /testbed/django/contrib/admin/sites.py(382):     @method_decorator(never_cache)
0.51 /testbed/django/contrib/admin/sites.py(383):     def login(self, request, extra_context=None):
0.51 /testbed/django/contrib/admin/sites.py(416):     def autocomplete_view(self, request):
0.51 /testbed/django/contrib/admin/sites.py(419):     @no_append_slash
0.51 /testbed/django/contrib/admin/sites.py(420):     def catch_all_view(self, request, url):
0.51 /testbed/django/contrib/admin/sites.py(432):     def _build_app_dict(self, request, label=None):
0.51 /testbed/django/contrib/admin/sites.py(501):     def get_app_list(self, request):
0.51 /testbed/django/contrib/admin/sites.py(517):     def index(self, request, extra_context=None):
0.51 /testbed/django/contrib/admin/sites.py(536):     def app_index(self, request, app_label, extra_context=None):
0.51 /testbed/django/contrib/admin/sites.py(559): class DefaultAdminSite(LazyObject):
0.51 /testbed/django/contrib/admin/sites.py(559): class DefaultAdminSite(LazyObject):
0.51 /testbed/django/contrib/admin/sites.py(560):     def _setup(self):
0.51 /testbed/django/contrib/admin/sites.py(569): site = DefaultAdminSite()
Found 1 tests.
Skipping setup of unused database(s): other.
Operations to perform:
  Synchronize unmigrated apps: auth, contenttypes, messages, sessions, staticfiles
  Apply all migrations: admin, sites
Synchronizing apps without migrations:
  Creating tables...
    Creating table django_content_type
    Creating table auth_permission
    Creating table auth_group
    Creating table auth_user
    Creating table django_session
    Running deferred SQL...
Running migrations:
  Applying admin.0001_initial... OK
  Applying admin.0002_logentry_remove_auto_add... OK
  Applying admin.0003_logentry_add_action_flag_choices... OK
  Applying sites.0001_initial... OK
  Applying sites.0002_alter_domain_unique... OK
Creating test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
System check identified no issues (0 silenced).
test_catch_all_view_redirect (test_coverup_django__django-14404.CatchAllViewTest) ... FAIL

======================================================================
FAIL: test_catch_all_view_redirect (test_coverup_django__django-14404.CatchAllViewTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/django/test/utils.py", line 430, in inner
    return func(*args, **kwargs)
  File "/testbed/./tests/test_coverup_django__django-14404.py", line 26, in test_catch_all_view_redirect
    self.assertEqual(expected_redirect_url, actual_redirect_url)
AssertionError: '/myapp/some/path/' != '/some/path/'
- /myapp/some/path/
? ------
+ /some/path/


----------------------------------------------------------------------
Ran 1 test in 0.002s

FAILED (failures=1)
Destroying test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
+ cat coverage.cover
{"/testbed/django/contrib/admin/sites.py": {"1": 1, "2": 1, "3": 1, "5": 1, "6": 1, "7": 1, "8": 1, "9": 1, "10": 1, "11": 1, "12": 1, "15": 1, "16": 1, "17": 1, "18": 1, "19": 1, "20": 1, "21": 1, "22": 1, "23": 1, "24": 1, "25": 1, "27": 1, "30": 2, "34": 2, "38": 2, "559": 2, "569": 1, "31": 1, "35": 1, "48": 1, "51": 1, "54": 1, "57": 1, "59": 1, "61": 1, "63": 1, "64": 1, "65": 1, "66": 1, "67": 1, "68": 1, "69": 1, "71": 1, "73": 1, "80": 1, "96": 1, "144": 1, "157": 1, "163": 1, "171": 1, "177": 1, "184": 1, "185": 1, "191": 1, "198": 1, "242": 1, "298": 1, "299": 1, "302": 1, "322": 1, "339": 1, "352": 1, "361": 1, "382": 1, "383": 1, "416": 1, "419": 1, "420": 1, "432": 1, "501": 1, "517": 1, "536": 1, "74": 0, "75": 0, "76": 0, "77": 0, "78": 0, "85": 0, "86": 0, "87": 0, "89": 0, "90": 0, "91": 0, "92": 0, "93": 0, "94": 0, "110": 0, "111": 0, "112": 0, "113": 0, "114": 0, "115": 0, "116": 0, "119": 0, "120": 0, "121": 0, "122": 0, "124": 0, "126": 0, "127": 0, "131": 0, "134": 0, "138": 0, "139": 0, "142": 0, "150": 0, "151": 0, "152": 0, "153": 0, "154": 0, "155": 0, "161": 0, "167": 0, "168": 0, "169": 0, "175": 0, "182": 0, "189": 0, "196": 0, "221": 0, "234": 0, "235": 0, "238": 0, "239": 0, "240": 0, "222": 0, "223": 0, "224": 0, "225": 0, "228": 0, "229": 0, "230": 0, "231": 0, "233": 0, "246": 0, "247": 0, "249": 0, "257": 0, "258": 0, "259": 0, "260": 0, "261": 0, "262": 0, "263": 0, "264": 0, "266": 0, "267": 0, "268": 0, "269": 0, "270": 0, "271": 0, "256": 0, "277": 0, "278": 0, "279": 0, "280": 0, "282": 0, "283": 0, "287": 0, "288": 0, "289": 0, "290": 0, "293": 0, "294": 0, "296": 0, "250": 0, "252": 0, "253": 0, "251": 0, "300": 0, "310": 0, "311": 0, "313": 0, "314": 0, "315": 0, "316": 0, "317": 0, "318": 0, "319": 0, "312": 0, "326": 0, "327": 0, "328": 0, "330": 0, "331": 0, "332": 0, "329": 0, "334": 0, "335": 0, "336": 0, "337": 0, "343": 0, "345": 0, "344": 0, "347": 0, "348": 0, "349": 0, "350": 0, "359": 0, "367": 0, "369": 0, "370": 0, "373": 0, "374": 0, "368": 0, "377": 0, "378": 0, "379": 0, "380": 0, "387": 0, "389": 0, "390": 0, "395": 0, "396": 0, "398": 0, "399": 0, "400": 0, "401": 0, "397": 0, "403": 0, "404": 0, "405": 0, "406": 0, "409": 0, "410": 0, "411": 0, "408": 0, "413": 0, "414": 0, "417": 0, "421": 0, "422": 0, "423": 0, "424": 0, "425": 0, "426": 0, "428": 0, "429": 0, "430": 0, "437": 0, "439": 0, "440": 0, "441": 0, "445": 0, "447": 0, "448": 0, "450": 0, "451": 0, "452": 0, "454": 0, "458": 0, "459": 0, "461": 0, "463": 0, "464": 0, "465": 0, "466": 0, "467": 0, "468": 0, "462": 0, "470": 0, "471": 0, "472": 0, "473": 0, "474": 0, "475": 0, "476": 0, "477": 0, "478": 0, "479": 0, "480": 0, "482": 0, "483": 0, "486": 0, "487": 0, "488": 0, "489": 0, "490": 0, "491": 0, "493": 0, "494": 0, "485": 0, "497": 0, "498": 0, "499": 0, "442": 0, "506": 0, "509": 0, "512": 0, "513": 0, "515": 0, "522": 0, "525": 0, "526": 0, "527": 0, "528": 0, "524": 0, "529": 0, "532": 0, "534": 0, "537": 0, "538": 0, "539": 0, "541": 0, "543": 0, "544": 0, "545": 0, "546": 0, "547": 0, "542": 0, "548": 0, "551": 0, "553": 0, "554": 0, "555": 0, "556": 0, "560": 1, "561": 0, "562": 0}}
+ git checkout de32fe83a2e4a20887972c69a0693b94eb25a88b
Note: switching to 'de32fe83a2e4a20887972c69a0693b94eb25a88b'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at de32fe83a2 Fixed #32317 -- Refactored loaddata command to make it extensible.
M	django/contrib/admin/sites.py
+ git apply /root/pre_state.patch
error: unrecognized input
