+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD 4e8121e8e42a24acc3565851c9ef50ca8322b15c
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
nothing to commit, working tree clean
+ git show
commit 4e8121e8e42a24acc3565851c9ef50ca8322b15c
Author: Jonny Park <jonnythebard9@gmail.com>
Date:   Mon Aug 16 01:10:36 2021 +0900

    Fixed #32994 -- Fixed autoreloader tests when using 'python -m'.

diff --git a/AUTHORS b/AUTHORS
index 460cd0aba0..265163357e 100644
--- a/AUTHORS
+++ b/AUTHORS
@@ -487,6 +487,7 @@ answer newbie questions, and generally made Django that much better:
     Jonathan Daugherty (cygnus) <http://www.cprogrammer.org/>
     Jonathan Feignberg <jdf@pobox.com>
     Jonathan Slenders
+    Jonny Park <jonnythebard9@gmail.com>
     Jordan Bae <qoentlr37@gmail.com>
     Jordan Dimov <s3x3y1@gmail.com>
     Jordi J. Tablada <jordi.joan@gmail.com>
diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py
index a5b9ca20a6..1e43cecea9 100644
--- a/tests/utils_tests/test_autoreload.py
+++ b/tests/utils_tests/test_autoreload.py
@@ -191,6 +191,7 @@ class TestChildArguments(SimpleTestCase):
             [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],
         )
 
+    @mock.patch('__main__.__spec__', None)
     @mock.patch('sys.argv', [__file__, 'runserver'])
     @mock.patch('sys.warnoptions', ['error'])
     def test_warnoptions(self):
@@ -199,6 +200,7 @@ class TestChildArguments(SimpleTestCase):
             [sys.executable, '-Werror', __file__, 'runserver']
         )
 
+    @mock.patch('__main__.__spec__', None)
     @mock.patch('sys.warnoptions', [])
     def test_exe_fallback(self):
         with tempfile.TemporaryDirectory() as tmpdir:
@@ -210,6 +212,7 @@ class TestChildArguments(SimpleTestCase):
                     [exe_path, 'runserver']
                 )
 
+    @mock.patch('__main__.__spec__', None)
     @mock.patch('sys.warnoptions', [])
     def test_entrypoint_fallback(self):
         with tempfile.TemporaryDirectory() as tmpdir:
@@ -221,6 +224,7 @@ class TestChildArguments(SimpleTestCase):
                     [sys.executable, script_path, 'runserver']
                 )
 
+    @mock.patch('__main__.__spec__', None)
     @mock.patch('sys.argv', ['does-not-exist', 'runserver'])
     @mock.patch('sys.warnoptions', [])
     def test_raises_runtimeerror(self):
@@ -475,7 +479,8 @@ class RestartWithReloaderTests(SimpleTestCase):
             script.touch()
             argv = [str(script), 'runserver']
             mock_call = self.patch_autoreload(argv)
-            autoreload.restart_with_reloader()
+            with mock.patch('__main__.__spec__', None):
+                autoreload.restart_with_reloader()
             self.assertEqual(mock_call.call_count, 1)
             self.assertEqual(
                 mock_call.call_args[0][0],
+ git diff 4e8121e8e42a24acc3565851c9ef50ca8322b15c
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Checking if build backend supports build_editable: started
  Checking if build backend supports build_editable: finished with status 'done'
  Getting requirements to build editable: started
  Getting requirements to build editable: finished with status 'done'
  Preparing editable metadata (pyproject.toml): started
  Preparing editable metadata (pyproject.toml): finished with status 'done'
Requirement already satisfied: asgiref>=3.3.2 in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from Django==4.0.dev20210819072031) (3.8.1)
Requirement already satisfied: pytz in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from Django==4.0.dev20210819072031) (2025.2)
Requirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from Django==4.0.dev20210819072031) (0.5.3)
Requirement already satisfied: typing-extensions>=4 in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from asgiref>=3.3.2->Django==4.0.dev20210819072031) (4.13.2)
Building wheels for collected packages: Django
  Building editable for Django (pyproject.toml): started
  Building editable for Django (pyproject.toml): finished with status 'done'
  Created wheel for Django: filename=django-4.0.dev20210819072031-0.editable-py3-none-any.whl size=26633 sha256=7755b527d994235b310fa088ea9f37a870ebf5b030d05f25177542d317d57726
  Stored in directory: /tmp/pip-ephem-wheel-cache-wxhh8hb2/wheels/b2/50/f1/218f2e9962a80d01a4b1297698978f9fb3b60056aa24343f24
Successfully built Django
Installing collected packages: Django
  Attempting uninstall: Django
    Found existing installation: Django 4.0.dev20210819072031
    Uninstalling Django-4.0.dev20210819072031:
      Successfully uninstalled Django-4.0.dev20210819072031
Successfully installed Django-4.0.dev20210819072031
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable.It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git apply -v -
Checking patch django/db/migrations/state.py...
Applied patch django/db/migrations/state.py cleanly.
+ git apply -v -
Checking patch tests/test_coverup_django__django-14765.py...
Applied patch tests/test_coverup_django__django-14765.py cleanly.
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/db/migrations/state\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-14765
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(django/db/migrations/state\\.py)']
Testing against Django installed in '/testbed/django'
0.49 /testbed/django/db/migrations/state.py(1): import copy
0.49 /testbed/django/db/migrations/state.py(2): from collections import defaultdict
0.49 /testbed/django/db/migrations/state.py(3): from contextlib import contextmanager
0.49 /testbed/django/db/migrations/state.py(4): from functools import partial
0.49 /testbed/django/db/migrations/state.py(6): from django.apps import AppConfig
0.49 /testbed/django/db/migrations/state.py(7): from django.apps.registry import Apps, apps as global_apps
0.49 /testbed/django/db/migrations/state.py(8): from django.conf import settings
0.49 /testbed/django/db/migrations/state.py(9): from django.core.exceptions import FieldDoesNotExist
0.49 /testbed/django/db/migrations/state.py(10): from django.db import models
0.49 /testbed/django/db/migrations/state.py(11): from django.db.migrations.utils import field_is_referenced, get_references
0.49 /testbed/django/db/migrations/state.py(12): from django.db.models import NOT_PROVIDED
0.49 /testbed/django/db/migrations/state.py(13): from django.db.models.fields.related import RECURSIVE_RELATIONSHIP_CONSTANT
0.49 /testbed/django/db/migrations/state.py(14): from django.db.models.options import DEFAULT_NAMES, normalize_together
0.49 /testbed/django/db/migrations/state.py(15): from django.db.models.utils import make_model_tuple
0.49 /testbed/django/db/migrations/state.py(16): from django.utils.functional import cached_property
0.49 /testbed/django/db/migrations/state.py(17): from django.utils.module_loading import import_string
0.49 /testbed/django/db/migrations/state.py(18): from django.utils.version import get_docs_version
0.49 /testbed/django/db/migrations/state.py(20): from .exceptions import InvalidBasesError
0.49 /testbed/django/db/migrations/state.py(21): from .utils import resolve_relation
0.49 /testbed/django/db/migrations/state.py(24): def _get_app_label_and_model_name(model, app_label=''):
0.49 /testbed/django/db/migrations/state.py(32): def _get_related_models(m):
0.49 /testbed/django/db/migrations/state.py(51): def get_related_models_tuples(model):
0.49 /testbed/django/db/migrations/state.py(62): def get_related_models_recursive(model):
0.49 /testbed/django/db/migrations/state.py(84): class ProjectState:
0.49 /testbed/django/db/migrations/state.py(84): class ProjectState:
0.49 /testbed/django/db/migrations/state.py(85):     """
0.49 /testbed/django/db/migrations/state.py(91):     def __init__(self, models=None, real_apps=None):
0.49 /testbed/django/db/migrations/state.py(103):     def add_model(self, model_state):
0.49 /testbed/django/db/migrations/state.py(109):     def remove_model(self, app_label, model_name):
0.49 /testbed/django/db/migrations/state.py(117):     def rename_model(self, app_label, old_name, new_name):
0.49 /testbed/django/db/migrations/state.py(146):     def alter_model_options(self, app_label, model_name, options, option_keys=None):
0.49 /testbed/django/db/migrations/state.py(155):     def alter_model_managers(self, app_label, model_name, managers):
0.49 /testbed/django/db/migrations/state.py(160):     def _append_option(self, app_label, model_name, option_name, obj):
0.49 /testbed/django/db/migrations/state.py(165):     def _remove_option(self, app_label, model_name, option_name, obj_name):
0.49 /testbed/django/db/migrations/state.py(171):     def add_index(self, app_label, model_name, index):
0.49 /testbed/django/db/migrations/state.py(174):     def remove_index(self, app_label, model_name, index_name):
0.49 /testbed/django/db/migrations/state.py(177):     def add_constraint(self, app_label, model_name, constraint):
0.49 /testbed/django/db/migrations/state.py(180):     def remove_constraint(self, app_label, model_name, constraint_name):
0.49 /testbed/django/db/migrations/state.py(183):     def add_field(self, app_label, model_name, name, field, preserve_default):
0.49 /testbed/django/db/migrations/state.py(195):     def remove_field(self, app_label, model_name, name):
0.49 /testbed/django/db/migrations/state.py(202):     def alter_field(self, app_label, model_name, name, field, preserve_default):
0.49 /testbed/django/db/migrations/state.py(220):     def rename_field(self, app_label, model_name, old_name, new_name):
0.49 /testbed/django/db/migrations/state.py(263):     def _find_reload_model(self, app_label, model_name, delay=False):
0.49 /testbed/django/db/migrations/state.py(311):     def reload_model(self, app_label, model_name, delay=False):
0.49 /testbed/django/db/migrations/state.py(316):     def reload_models(self, models, delay=True):
0.49 /testbed/django/db/migrations/state.py(323):     def _reload(self, related_models):
0.49 /testbed/django/db/migrations/state.py(349):     def resolve_fields_and_relations(self):
0.49 /testbed/django/db/migrations/state.py(380):     def get_concrete_model_key(self, model):
0.49 /testbed/django/db/migrations/state.py(385):     def _get_concrete_models_mapping_and_proxy_models(self):
0.49 /testbed/django/db/migrations/state.py(400):     def _find_concrete_model_from_proxy(self, proxy_models, model_state):
0.49 /testbed/django/db/migrations/state.py(409):     def clone(self):
0.49 /testbed/django/db/migrations/state.py(420):     def clear_delayed_apps_cache(self):
0.49 /testbed/django/db/migrations/state.py(424):     @cached_property
0.49 /testbed/django/db/migrations/state.py(425):     def apps(self):
0.49 /testbed/django/db/migrations/state.py(428):     @classmethod
0.49 /testbed/django/db/migrations/state.py(429):     def from_apps(cls, apps):
0.49 /testbed/django/db/migrations/state.py(437):     def __eq__(self, other):
0.49 /testbed/django/db/migrations/state.py(441): class AppConfigStub(AppConfig):
0.49 /testbed/django/db/migrations/state.py(441): class AppConfigStub(AppConfig):
0.49 /testbed/django/db/migrations/state.py(442):     """Stub of an AppConfig. Only provides a label and a dict of models."""
0.49 /testbed/django/db/migrations/state.py(443):     def __init__(self, label):
0.49 /testbed/django/db/migrations/state.py(452):     def import_models(self):
0.49 /testbed/django/db/migrations/state.py(456): class StateApps(Apps):
0.49 /testbed/django/db/migrations/state.py(456): class StateApps(Apps):
0.49 /testbed/django/db/migrations/state.py(457):     """
0.49 /testbed/django/db/migrations/state.py(461):     def __init__(self, real_apps, models, ignore_swappable=False):
0.49 /testbed/django/db/migrations/state.py(492):     @contextmanager
0.49 /testbed/django/db/migrations/state.py(493):     def bulk_update(self):
0.49 /testbed/django/db/migrations/state.py(504):     def render_multiple(self, model_states):
0.49 /testbed/django/db/migrations/state.py(530):     def clone(self):
0.49 /testbed/django/db/migrations/state.py(542):     def register_model(self, app_label, model):
0.49 /testbed/django/db/migrations/state.py(551):     def unregister_model(self, app_label, model_name):
0.49 /testbed/django/db/migrations/state.py(559): class ModelState:
0.49 /testbed/django/db/migrations/state.py(559): class ModelState:
0.49 /testbed/django/db/migrations/state.py(560):     """
0.49 /testbed/django/db/migrations/state.py(570):     def __init__(self, app_label, name, fields, options=None, bases=None, managers=None):
0.49 /testbed/django/db/migrations/state.py(604):     @cached_property
0.49 /testbed/django/db/migrations/state.py(605):     def name_lower(self):
0.49 /testbed/django/db/migrations/state.py(608):     def get_field(self, field_name):
0.49 /testbed/django/db/migrations/state.py(616):     @classmethod
0.49 /testbed/django/db/migrations/state.py(617):     def from_model(cls, model, exclude_rels=False):
0.49 /testbed/django/db/migrations/state.py(745):     def construct_managers(self):
0.49 /testbed/django/db/migrations/state.py(758):     def clone(self):
0.49 /testbed/django/db/migrations/state.py(772):     def render(self, apps):
0.49 /testbed/django/db/migrations/state.py(795):     def get_index_by_name(self, name):
0.49 /testbed/django/db/migrations/state.py(801):     def get_constraint_by_name(self, name):
test_real_apps_conversion (test_coverup_django__django-14765.ProjectStateInitTests)
Test ProjectState.__init__() with non-set real_apps argument. ... 0.49 /testbed/django/db/migrations/state.py(807):     def __repr__(self):
0.49 /testbed/django/db/migrations/state.py(810):     def __eq__(self, other):
Found 1 test(s).
Skipping setup of unused database(s): default, other.
System check identified no issues (0 silenced).
0.64 /testbed/django/db/migrations/state.py(92):         self.models = models or {}
0.64 /testbed/django/db/migrations/state.py(94):         if real_apps is None:
0.64 /testbed/django/db/migrations/state.py(97):             assert isinstance(real_apps, set)
ok

----------------------------------------------------------------------
Ran 1 test in 0.000s

OK
+ cat coverage.cover
{"/testbed/django/db/migrations/state.py": {"1": 1, "2": 1, "3": 1, "4": 1, "6": 1, "7": 1, "8": 1, "9": 1, "10": 1, "11": 1, "12": 1, "13": 1, "14": 1, "15": 1, "16": 1, "17": 1, "18": 1, "20": 1, "21": 1, "24": 1, "32": 1, "51": 1, "62": 1, "84": 2, "441": 2, "456": 2, "559": 2, "25": 0, "26": 0, "27": 0, "29": 0, "34": 0, "35": 0, "38": 0, "39": 0, "40": 0, "41": 0, "42": 0, "45": 0, "46": 0, "47": 0, "48": 0, "36": 0, "56": 0, "58": 0, "57": 0, "73": 0, "74": 0, "75": 0, "76": 0, "77": 0, "78": 0, "79": 0, "80": 0, "81": 0, "91": 1, "103": 1, "109": 1, "117": 1, "146": 1, "155": 1, "160": 1, "165": 1, "171": 1, "174": 1, "177": 1, "180": 1, "183": 1, "195": 1, "202": 1, "220": 1, "263": 1, "311": 1, "316": 1, "323": 1, "349": 1, "380": 1, "385": 1, "400": 1, "409": 1, "420": 1, "424": 1, "425": 1, "428": 1, "429": 1, "437": 1, "92": 1, "94": 1, "95": 0, "97": 1, "98": 0, "99": 0, "101": 0, "104": 0, "105": 0, "106": 0, "107": 0, "110": 0, "111": 0, "112": 0, "115": 0, "119": 0, "120": 0, "121": 0, "122": 0, "123": 0, "125": 0, "126": 0, "127": 0, "128": 0, "129": 0, "130": 0, "131": 0, "132": 0, "133": 0, "134": 0, "135": 0, "136": 0, "137": 0, "138": 0, "139": 0, "141": 0, "143": 0, "144": 0, "147": 0, "148": 0, "149": 0, "150": 0, "151": 0, "152": 0, "153": 0, "156": 0, "157": 0, "158": 0, "161": 0, "162": 0, "163": 0, "166": 0, "167": 0, "168": 0, "169": 0, "172": 0, "175": 0, "178": 0, "181": 0, "185": 0, "186": 0, "187": 0, "189": 0, "190": 0, "192": 0, "193": 0, "196": 0, "197": 0, "199": 0, "200": 0, "203": 0, "204": 0, "205": 0, "207": 0, "208": 0, "209": 0, "215": 0, "216": 0, "214": 0, "218": 0, "221": 0, "223": 0, "224": 0, "225": 0, "226": 0, "227": 0, "228": 0, "230": 0, "231": 0, "233": 0, "234": 0, "235": 0, "237": 0, "240": 0, "241": 0, "242": 0, "243": 0, "245": 0, "248": 0, "249": 0, "250": 0, "251": 0, "252": 0, "253": 0, "254": 0, "255": 0, "256": 0, "257": 0, "259": 0, "261": 0, "236": 0, "244": 0, "258": 0, "264": 0, "265": 0, "267": 0, "269": 0, "270": 0, "271": 0, "272": 0, "276": 0, "277": 0, "279": 0, "282": 0, "285": 0, "286": 0, "287": 0, "288": 0, "289": 0, "290": 0, "291": 0, "294": 0, "295": 0, "296": 0, "297": 0, "298": 0, "299": 0, "301": 0, "302": 0, "304": 0, "307": 0, "309": 0, "312": 0, "313": 0, "314": 0, "317": 0, "318": 0, "319": 0, "320": 0, "321": 0, "325": 0, "326": 0, "327": 0, "329": 0, "333": 0, "334": 0, "335": 0, "338": 0, "339": 0, "340": 0, "341": 0, "342": 0, "344": 0, "347": 0, "351": 0, "352": 0, "353": 0, "356": 0, "357": 0, "359": 0, "360": 0, "361": 0, "362": 0, "363": 0, "364": 0, "365": 0, "366": 0, "367": 0, "368": 0, "370": 0, "371": 0, "372": 0, "373": 0, "374": 0, "375": 0, "376": 0, "377": 0, "378": 0, "381": 0, "382": 0, "383": 0, "386": 0, "387": 0, "389": 0, "390": 0, "391": 0, "393": 0, "394": 0, "397": 0, "398": 0, "401": 0, "402": 0, "403": 0, "404": 0, "406": 0, "407": 0, "411": 0, "412": 0, "413": 0, "415": 0, "416": 0, "417": 0, "418": 0, "421": 0, "422": 0, "426": 0, "431": 0, "432": 0, "433": 0, "434": 0, "435": 0, "438": 0, "443": 1, "452": 1, "444": 0, "445": 0, "449": 0, "450": 0, "453": 0, "461": 1, "492": 1, "493": 1, "504": 1, "530": 1, "542": 1, "551": 1, "467": 0, "468": 0, "469": 0, "470": 0, "471": 0, "473": 0, "474": 0, "475": 0, "480": 0, "481": 0, "483": 0, "486": 0, "487": 0, "488": 0, "489": 0, "490": 0, "496": 0, "497": 0, "498": 0, "499": 0, "501": 0, "502": 0, "509": 0, "510": 0, "512": 0, "513": 0, "514": 0, "515": 0, "516": 0, "517": 0, "518": 0, "519": 0, "520": 0, "521": 0, "522": 0, "523": 0, "526": 0, "528": 0, "532": 0, "533": 0, "534": 0, "536": 0, "537": 0, "539": 0, "540": 0, "543": 0, "544": 0, "545": 0, "546": 0, "547": 0, "548": 0, "549": 0, "552": 0, "553": 0, "554": 0, "555": 0, "556": 0, "570": 1, "604": 1, "605": 1, "608": 1, "616": 1, "617": 1, "745": 1, "758": 1, "772": 1, "795": 1, "801": 1, "807": 1, "810": 1, "571": 0, "572": 0, "573": 0, "574": 0, "575": 0, "576": 0, "577": 0, "578": 0, "579": 0, "581": 0, "582": 0, "583": 0, "586": 0, "587": 0, "588": 0, "589": 0, "591": 0, "592": 0, "593": 0, "594": 0, "597": 0, "598": 0, "599": 0, "600": 0, "601": 0, "606": 0, "611": 0, "610": 0, "612": 0, "609": 0, "614": 0, "620": 0, "621": 0, "622": 0, "623": 0, "624": 0, "625": 0, "626": 0, "627": 0, "628": 0, "629": 0, "630": 0, "631": 0, "632": 0, "633": 0, "635": 0, "636": 0, "637": 0, "638": 0, "639": 0, "640": 0, "641": 0, "642": 0, "643": 0, "644": 0, "647": 0, "648": 0, "650": 0, "651": 0, "652": 0, "653": 0, "654": 0, "655": 0, "656": 0, "657": 0, "658": 0, "659": 0, "660": 0, "661": 0, "662": 0, "663": 0, "664": 0, "665": 0, "666": 0, "668": 0, "671": 0, "672": 0, "673": 0, "674": 0, "676": 0, "677": 0, "679": 0, "693": 0, "696": 0, "702": 0, "705": 0, "706": 0, "708": 0, "709": 0, "710": 0, "711": 0, "712": 0, "714": 0, "715": 0, "717": 0, "718": 0, "719": 0, "721": 0, "722": 0, "723": 0, "724": 0, "725": 0, "727": 0, "728": 0, "729": 0, "732": 0, "733": 0, "736": 0, "737": 0, "738": 0, "739": 0, "740": 0, "741": 0, "742": 0, "680": 0, "681": 0, "682": 0, "683": 0, "685": 0, "686": 0, "699": 0, "698": 0, "700": 0, "748": 0, "749": 0, "750": 0, "751": 0, "752": 0, "753": 0, "755": 0, "756": 0, "760": 0, "761": 0, "762": 0, "763": 0, "767": 0, "768": 0, "769": 0, "775": 0, "776": 0, "778": 0, "779": 0, "781": 0, "783": 0, "784": 0, "786": 0, "787": 0, "788": 0, "791": 0, "793": 0, "780": 0, "796": 0, "797": 0, "798": 0, "799": 0, "802": 0, "803": 0, "804": 0, "805": 0, "808": 0, "812": 0, "813": 0, "814": 0, "815": 0, "817": 0, "818": 0, "819": 0, "822": 0, "823": 0, "824": 0, "811": 0, "816": 0}}
+ git checkout 4e8121e8e42a24acc3565851c9ef50ca8322b15c
Note: switching to '4e8121e8e42a24acc3565851c9ef50ca8322b15c'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at 4e8121e8e4 Fixed #32994 -- Fixed autoreloader tests when using 'python -m'.
M	django/db/migrations/state.py
+ git apply /root/pre_state.patch
error: unrecognized input
