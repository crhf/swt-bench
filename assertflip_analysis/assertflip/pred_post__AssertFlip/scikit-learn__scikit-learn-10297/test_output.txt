+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD b90661d6a46aa3619d3eec94d5281f5888add501
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
nothing to commit, working tree clean
+ git show
commit b90661d6a46aa3619d3eec94d5281f5888add501
Author: Joel Nothman <joel.nothman@gmail.com>
Date:   Fri Feb 9 12:34:02 2018 +1100

    [MRG+1] TST apply transformer checks to any estimator supporting 'transform' (#10474)

diff --git a/sklearn/utils/estimator_checks.py b/sklearn/utils/estimator_checks.py
index 7baf329a3c..b079c37f7b 100644
--- a/sklearn/utils/estimator_checks.py
+++ b/sklearn/utils/estimator_checks.py
@@ -219,7 +219,7 @@ def _yield_all_checks(name, estimator):
     if is_regressor(estimator):
         for check in _yield_regressor_checks(name, estimator):
             yield check
-    if isinstance(estimator, TransformerMixin):
+    if hasattr(estimator, 'transform'):
         for check in _yield_transformer_checks(name, estimator):
             yield check
     if isinstance(estimator, ClusterMixin):
diff --git a/sklearn/utils/tests/test_estimator_checks.py b/sklearn/utils/tests/test_estimator_checks.py
index a87091cf3b..950a3ce095 100644
--- a/sklearn/utils/tests/test_estimator_checks.py
+++ b/sklearn/utils/tests/test_estimator_checks.py
@@ -134,6 +134,16 @@ class NoSampleWeightPandasSeriesType(BaseEstimator):
         return np.ones(X.shape[0])
 
 
+class BadTransformerWithoutMixin(BaseEstimator):
+    def fit(self, X, y=None):
+        X = check_array(X)
+        return self
+
+    def transform(self, X):
+        X = check_array(X)
+        return X
+
+
 class NotInvariantPredict(BaseEstimator):
     def fit(self, X, y):
         # Convert data
@@ -232,6 +242,12 @@ def test_check_estimator():
     check_estimator(MultiTaskElasticNet())
 
 
+def test_check_estimator_transformer_no_mixin():
+    # check that TransformerMixin is not required for transformer tests to run
+    assert_raises_regex(AttributeError, '.*fit_transform.*',
+                        check_estimator, BadTransformerWithoutMixin())
+
+
 def test_check_estimator_clones():
     # check that check_estimator doesn't modify the estimator it receives
     from sklearn.datasets import load_iris
+ git diff b90661d6a46aa3619d3eec94d5281f5888add501
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -v --no-use-pep517 --no-build-isolation -e .
Using pip 21.2.2 from /opt/miniconda3/envs/testbed/lib/python3.6/site-packages/pip (python 3.6)
Obtaining file:///testbed
    Running command python setup.py egg_info
    running egg_info
    creating /tmp/pip-pip-egg-info-j63ma5r5/scikit_learn.egg-info
    writing /tmp/pip-pip-egg-info-j63ma5r5/scikit_learn.egg-info/PKG-INFO
    writing dependency_links to /tmp/pip-pip-egg-info-j63ma5r5/scikit_learn.egg-info/dependency_links.txt
    writing requirements to /tmp/pip-pip-egg-info-j63ma5r5/scikit_learn.egg-info/requires.txt
    writing top-level names to /tmp/pip-pip-egg-info-j63ma5r5/scikit_learn.egg-info/top_level.txt
    writing manifest file '/tmp/pip-pip-egg-info-j63ma5r5/scikit_learn.egg-info/SOURCES.txt'
    reading manifest file '/tmp/pip-pip-egg-info-j63ma5r5/scikit_learn.egg-info/SOURCES.txt'
    reading manifest template 'MANIFEST.in'
    adding license file 'COPYING'
    adding license file 'AUTHORS.rst'
    writing manifest file '/tmp/pip-pip-egg-info-j63ma5r5/scikit_learn.egg-info/SOURCES.txt'
    Partial import of sklearn during the build process.
Requirement already satisfied: numpy>=1.8.2 in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from scikit-learn==0.20.dev0) (1.19.2)
Requirement already satisfied: scipy>=0.13.3 in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from scikit-learn==0.20.dev0) (1.5.2)
Installing collected packages: scikit-learn
  Attempting uninstall: scikit-learn
    Found existing installation: scikit-learn 0.20.dev0
    Uninstalling scikit-learn-0.20.dev0:
      Removing file or directory /opt/miniconda3/envs/testbed/lib/python3.6/site-packages/scikit-learn.egg-link
      Removing pth entries from /opt/miniconda3/envs/testbed/lib/python3.6/site-packages/easy-install.pth:
      Removing entry: /testbed
      Successfully uninstalled scikit-learn-0.20.dev0
  Running setup.py develop for scikit-learn
    Running command /opt/miniconda3/envs/testbed/bin/python -c 'import io, os, sys, setuptools, tokenize; sys.argv[0] = '"'"'/testbed/setup.py'"'"'; __file__='"'"'/testbed/setup.py'"'"';f = getattr(tokenize, '"'"'open'"'"', open)(__file__) if os.path.exists(__file__) else io.StringIO('"'"'from setuptools import setup; setup()'"'"');code = f.read().replace('"'"'\r\n'"'"', '"'"'\n'"'"');f.close();exec(compile(code, __file__, '"'"'exec'"'"'))' develop --no-deps
    blas_opt_info:
    blas_mkl_info:
    customize UnixCCompiler
      libraries mkl_rt not found in ['/opt/miniconda3/envs/testbed/lib', '/usr/local/lib', '/usr/lib64', '/usr/lib', '/usr/lib/x86_64-linux-gnu']
      NOT AVAILABLE

    blis_info:
      libraries blis not found in ['/opt/miniconda3/envs/testbed/lib', '/usr/local/lib', '/usr/lib64', '/usr/lib', '/usr/lib/x86_64-linux-gnu']
      NOT AVAILABLE

    openblas_info:
    C compiler: gcc -pthread -B /opt/miniconda3/envs/testbed/compiler_compat -Wl,--sysroot=/ -Wsign-compare -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -fPIC

    creating /tmp/tmpa5e9mdz0/tmp
    creating /tmp/tmpa5e9mdz0/tmp/tmpa5e9mdz0
    compile options: '-c'
    gcc: /tmp/tmpa5e9mdz0/source.c
    gcc -pthread -B /opt/miniconda3/envs/testbed/compiler_compat -Wl,--sysroot=/ /tmp/tmpa5e9mdz0/tmp/tmpa5e9mdz0/source.o -L/opt/miniconda3/envs/testbed/lib -lopenblas -o /tmp/tmpa5e9mdz0/a.out
      FOUND:
        libraries = ['openblas', 'openblas']
        library_dirs = ['/opt/miniconda3/envs/testbed/lib']
        language = c
        define_macros = [('HAVE_CBLAS', None)]

      FOUND:
        libraries = ['openblas', 'openblas']
        library_dirs = ['/opt/miniconda3/envs/testbed/lib']
        language = c
        define_macros = [('HAVE_CBLAS', None)]

    running develop
    running build_scripts
    running egg_info
    running build_src
    build_src
    building library "libsvm-skl" sources
    building extension "sklearn.__check_build._check_build" sources
    building extension "sklearn.cluster._dbscan_inner" sources
    building extension "sklearn.cluster._hierarchical" sources
    building extension "sklearn.cluster._k_means_elkan" sources
    building extension "sklearn.cluster._k_means" sources
    building extension "sklearn.datasets._svmlight_format" sources
    building extension "sklearn.decomposition._online_lda" sources
    building extension "sklearn.decomposition.cdnmf_fast" sources
    building extension "sklearn.ensemble._gradient_boosting" sources
    building extension "sklearn.feature_extraction._hashing" sources
    building extension "sklearn.manifold._utils" sources
    building extension "sklearn.manifold._barnes_hut_tsne" sources
    building extension "sklearn.metrics.pairwise_fast" sources
    building extension "sklearn.metrics.cluster.expected_mutual_info_fast" sources
    building extension "sklearn.neighbors.ball_tree" sources
    building extension "sklearn.neighbors.kd_tree" sources
    building extension "sklearn.neighbors.dist_metrics" sources
    building extension "sklearn.neighbors.typedefs" sources
    building extension "sklearn.neighbors.quad_tree" sources
    building extension "sklearn.tree._tree" sources
    building extension "sklearn.tree._splitter" sources
    building extension "sklearn.tree._criterion" sources
    building extension "sklearn.tree._utils" sources
    building extension "sklearn.svm.libsvm" sources
    building extension "sklearn.svm.liblinear" sources
    building extension "sklearn.svm.libsvm_sparse" sources
    building extension "sklearn._isotonic" sources
    building extension "sklearn.linear_model.cd_fast" sources
    building extension "sklearn.linear_model.sgd_fast" sources
    building extension "sklearn.linear_model.sag_fast" sources
    building extension "sklearn.utils.sparsefuncs_fast" sources
    building extension "sklearn.utils.arrayfuncs" sources
    building extension "sklearn.utils.murmurhash" sources
    building extension "sklearn.utils.lgamma" sources
    building extension "sklearn.utils.graph_shortest_path" sources
    building extension "sklearn.utils.fast_dict" sources
    building extension "sklearn.utils.seq_dataset" sources
    building extension "sklearn.utils.weight_vector" sources
    building extension "sklearn.utils._random" sources
    building extension "sklearn.utils._logistic_sigmoid" sources
    building data_files sources
    build_src: building npy-pkg config files
    writing scikit_learn.egg-info/PKG-INFO
    writing dependency_links to scikit_learn.egg-info/dependency_links.txt
    writing requirements to scikit_learn.egg-info/requires.txt
    writing top-level names to scikit_learn.egg-info/top_level.txt
    reading manifest file 'scikit_learn.egg-info/SOURCES.txt'
    reading manifest template 'MANIFEST.in'
    adding license file 'COPYING'
    adding license file 'AUTHORS.rst'
    writing manifest file 'scikit_learn.egg-info/SOURCES.txt'
    running build_ext
    customize UnixCCompiler
    customize UnixCCompiler using build_clib
    customize UnixCCompiler
    customize UnixCCompiler using build_ext
    resetting extension 'sklearn.svm.liblinear' language from 'c' to 'c++'.
    customize UnixCCompiler
    customize UnixCCompiler using build_ext
    Creating /opt/miniconda3/envs/testbed/lib/python3.6/site-packages/scikit-learn.egg-link (link to .)
    Adding scikit-learn 0.20.dev0 to easy-install.pth file

    Installed /testbed
    Partial import of sklearn during the build process.
    Warning: Subpackage 'sklearn.metrics/cluster' configuration returned as 'sklearn.metrics.cluster'
Successfully installed scikit-learn-0.20.dev0
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv
+ git apply -v -
Checking patch sklearn/linear_model/ridge.py...
Applied patch sklearn/linear_model/ridge.py cleanly.
+ git apply -v -
Checking patch sklearn/tests/test_coverup_scikit-learn__scikit-learn-10297.py...
Applied patch sklearn/tests/test_coverup_scikit-learn__scikit-learn-10297.py cleanly.
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(sklearn/linear_model/ridge\.py)' -m pytest --no-header -rA -p no:cacheprovider sklearn/tests/test_coverup_scikit-learn__scikit-learn-10297.py
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(sklearn/linear_model/ridge\\.py)']
============================= test session starts ==============================
collected 1 item

sklearn/tests/test_coverup_scikit-learn__scikit-learn-10297.py .         [100%]

==================================== PASSES ====================================
___________________ test_ridge_classifier_cv_store_cv_values ___________________
----------------------------- Captured stdout call -----------------------------
0.69 /testbed/sklearn/linear_model/ridge.py(1343):         super(RidgeClassifierCV, self).__init__(
0.69 /testbed/sklearn/linear_model/ridge.py(1344):             alphas=alphas, fit_intercept=fit_intercept, normalize=normalize,
0.69 /testbed/sklearn/linear_model/ridge.py(1345):             scoring=scoring, cv=cv, store_cv_values=store_cv_values)
0.69 /testbed/sklearn/linear_model/ridge.py(1092):         self.alphas = alphas
0.69 /testbed/sklearn/linear_model/ridge.py(1093):         self.fit_intercept = fit_intercept
0.69 /testbed/sklearn/linear_model/ridge.py(1094):         self.normalize = normalize
0.69 /testbed/sklearn/linear_model/ridge.py(1095):         self.scoring = scoring
0.69 /testbed/sklearn/linear_model/ridge.py(1096):         self.cv = cv
0.69 /testbed/sklearn/linear_model/ridge.py(1097):         self.gcv_mode = gcv_mode
0.69 /testbed/sklearn/linear_model/ridge.py(1098):         self.store_cv_values = store_cv_values
0.69 /testbed/sklearn/linear_model/ridge.py(1346):         self.class_weight = class_weight
0.69 /testbed/sklearn/linear_model/ridge.py(1367):         check_X_y(X, y, accept_sparse=['csr', 'csc', 'coo'],
0.69 /testbed/sklearn/linear_model/ridge.py(1368):                   multi_output=True)
0.69 /testbed/sklearn/linear_model/ridge.py(1370):         self._label_binarizer = LabelBinarizer(pos_label=1, neg_label=-1)
0.69 /testbed/sklearn/linear_model/ridge.py(1371):         Y = self._label_binarizer.fit_transform(y)
0.69 /testbed/sklearn/linear_model/ridge.py(1372):         if not self._label_binarizer.y_type_.startswith('multilabel'):
0.69 /testbed/sklearn/linear_model/ridge.py(1373):             y = column_or_1d(y, warn=True)
0.69 /testbed/sklearn/linear_model/ridge.py(1375):         if self.class_weight:
0.69 /testbed/sklearn/linear_model/ridge.py(1382):         _BaseRidgeCV.fit(self, X, Y, sample_weight=sample_weight)
0.69 /testbed/sklearn/linear_model/ridge.py(1118):         if self.cv is None:
0.69 /testbed/sklearn/linear_model/ridge.py(1119):             estimator = _RidgeGCV(self.alphas,
0.69 /testbed/sklearn/linear_model/ridge.py(1120):                                   fit_intercept=self.fit_intercept,
0.69 /testbed/sklearn/linear_model/ridge.py(1121):                                   normalize=self.normalize,
0.69 /testbed/sklearn/linear_model/ridge.py(1122):                                   scoring=self.scoring,
0.69 /testbed/sklearn/linear_model/ridge.py(1123):                                   gcv_mode=self.gcv_mode,
0.69 /testbed/sklearn/linear_model/ridge.py(1124):                                   store_cv_values=self.store_cv_values)
0.69 /testbed/sklearn/linear_model/ridge.py(886):         self.alphas = np.asarray(alphas)
0.69 /testbed/sklearn/linear_model/ridge.py(887):         self.fit_intercept = fit_intercept
0.69 /testbed/sklearn/linear_model/ridge.py(888):         self.normalize = normalize
0.69 /testbed/sklearn/linear_model/ridge.py(889):         self.scoring = scoring
0.69 /testbed/sklearn/linear_model/ridge.py(890):         self.copy_X = copy_X
0.69 /testbed/sklearn/linear_model/ridge.py(891):         self.gcv_mode = gcv_mode
0.69 /testbed/sklearn/linear_model/ridge.py(892):         self.store_cv_values = store_cv_values
0.69 /testbed/sklearn/linear_model/ridge.py(1125):             estimator.fit(X, y, sample_weight=sample_weight)
0.69 /testbed/sklearn/linear_model/ridge.py(999):         X, y = check_X_y(X, y, ['csr', 'csc', 'coo'], dtype=np.float64,
0.69 /testbed/sklearn/linear_model/ridge.py(1000):                          multi_output=True, y_numeric=True)
0.69 /testbed/sklearn/linear_model/ridge.py(1001):         if sample_weight is not None and not isinstance(sample_weight, float):
0.69 /testbed/sklearn/linear_model/ridge.py(1003):         n_samples, n_features = X.shape
0.69 /testbed/sklearn/linear_model/ridge.py(1005):         X, y, X_offset, y_offset, X_scale = LinearModel._preprocess_data(
0.69 /testbed/sklearn/linear_model/ridge.py(1006):             X, y, self.fit_intercept, self.normalize, self.copy_X,
0.69 /testbed/sklearn/linear_model/ridge.py(1007):             sample_weight=sample_weight)
0.69 /testbed/sklearn/linear_model/ridge.py(1009):         gcv_mode = self.gcv_mode
0.69 /testbed/sklearn/linear_model/ridge.py(1010):         with_sw = len(np.shape(sample_weight))
0.69 /testbed/sklearn/linear_model/ridge.py(1012):         if gcv_mode is None or gcv_mode == 'auto':
0.69 /testbed/sklearn/linear_model/ridge.py(1013):             if sparse.issparse(X) or n_features > n_samples or with_sw:
0.69 /testbed/sklearn/linear_model/ridge.py(1016):                 gcv_mode = 'svd'
0.69 /testbed/sklearn/linear_model/ridge.py(1023):         if gcv_mode == 'eigen':
0.69 /testbed/sklearn/linear_model/ridge.py(1027):         elif gcv_mode == 'svd':
0.70 /testbed/sklearn/linear_model/ridge.py(1029):             _pre_compute = self._pre_compute_svd
0.70 /testbed/sklearn/linear_model/ridge.py(1030):             _errors = self._errors_svd
0.70 /testbed/sklearn/linear_model/ridge.py(1031):             _values = self._values_svd
0.70 /testbed/sklearn/linear_model/ridge.py(1035):         if sample_weight is not None:
0.70 /testbed/sklearn/linear_model/ridge.py(1038):         centered_kernel = not sparse.issparse(X) and self.fit_intercept
0.70 /testbed/sklearn/linear_model/ridge.py(1040):         v, Q, QT_y = _pre_compute(X, y, centered_kernel)
0.70 /testbed/sklearn/linear_model/ridge.py(946):         if sparse.issparse(X):
0.70 /testbed/sklearn/linear_model/ridge.py(948):         if centered_kernel:
0.70 /testbed/sklearn/linear_model/ridge.py(949):             X = np.hstack((X, np.ones((X.shape[0], 1))))
0.70 /testbed/sklearn/linear_model/ridge.py(952):         U, s, _ = linalg.svd(X, full_matrices=0)
0.70 /testbed/sklearn/linear_model/ridge.py(953):         v = s ** 2
0.70 /testbed/sklearn/linear_model/ridge.py(954):         UT_y = np.dot(U.T, y)
0.70 /testbed/sklearn/linear_model/ridge.py(955):         return v, U, UT_y
0.70 /testbed/sklearn/linear_model/ridge.py(1041):         n_y = 1 if len(y.shape) == 1 else y.shape[1]
0.70 /testbed/sklearn/linear_model/ridge.py(1042):         cv_values = np.zeros((n_samples * n_y, len(self.alphas)))
0.70 /testbed/sklearn/linear_model/ridge.py(1043):         C = []
0.70 /testbed/sklearn/linear_model/ridge.py(1045):         scorer = check_scoring(self, scoring=self.scoring, allow_none=True)
0.70 /testbed/sklearn/linear_model/ridge.py(1046):         error = scorer is None
0.70 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.70 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.70 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.70 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.70 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.70 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.70 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.70 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.70 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.70 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.70 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.70 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.70 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.70 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.70 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.70 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.70 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.70 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.70 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.70 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.70 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.70 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.70 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.70 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.70 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.70 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.70 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.70 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.70 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.70 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.70 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.70 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.70 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.70 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.70 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.70 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.70 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.70 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.70 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.70 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.70 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.70 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.70 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.70 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.70 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.70 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.70 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.70 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.70 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.70 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.70 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.70 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.70 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.70 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.70 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.70 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.70 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.70 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.70 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.70 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.70 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.70 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.70 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.70 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.70 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.70 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.70 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.70 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.70 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.70 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.70 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.70 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.70 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.70 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.70 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.70 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.70 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.70 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.70 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.70 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.70 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.70 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.70 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.70 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.70 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.70 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.70 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.70 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.70 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.70 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.70 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.70 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.70 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.70 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.70 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.70 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.70 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.70 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.70 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.70 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.70 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.70 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.70 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.70 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.70 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.70 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.70 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.70 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.70 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.70 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.70 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.70 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.70 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.70 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.70 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.70 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.70 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.70 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.70 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.70 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.70 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.70 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.70 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.70 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.70 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.70 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.70 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.70 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.70 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.70 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.70 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.70 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.70 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.70 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.70 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.70 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.70 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.70 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.70 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.70 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.70 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.70 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.70 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.70 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.70 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.70 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.70 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.70 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.70 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.70 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.70 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.70 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.70 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.70 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.70 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.70 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.70 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.70 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.70 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.70 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.70 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.70 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.70 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.70 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.70 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.70 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.70 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.70 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.70 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.70 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.70 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.70 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.70 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.70 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.70 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.70 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.70 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.70 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.70 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.70 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.70 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.70 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.70 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.70 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.70 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.70 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.70 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.70 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.70 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.70 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.70 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.70 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.70 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.70 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.70 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.70 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.70 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.70 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.70 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.70 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.70 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.70 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.70 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.70 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.70 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.70 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.70 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.70 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.70 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.70 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.70 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.70 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.70 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.70 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.70 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.70 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.70 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.70 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.70 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.70 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.70 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.70 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.70 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.70 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.70 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.70 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.70 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.70 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.70 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.70 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.70 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.70 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.70 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.70 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.70 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.70 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.70 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.70 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.70 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.70 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.70 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.70 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.70 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.70 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.70 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.70 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.70 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.70 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.70 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.70 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.70 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.70 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.70 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.70 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.70 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.70 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.70 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.70 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.70 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.70 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.70 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.70 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.70 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.70 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.70 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.70 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.70 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.70 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.70 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.70 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.70 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.70 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.70 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.70 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.70 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.70 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.70 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.70 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.70 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.70 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.70 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.70 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.70 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.70 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.70 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.70 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.70 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.70 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.70 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.70 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.70 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.70 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.70 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.70 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.70 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.70 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.70 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.70 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.70 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.70 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.70 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.70 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.70 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.70 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.70 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.70 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.70 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.70 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.70 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.70 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.70 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.70 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.70 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.70 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.70 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.70 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.70 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.70 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.70 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.70 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.70 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.70 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.70 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.70 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.70 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.70 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.70 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.70 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.70 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.70 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.70 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.70 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.70 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.70 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.70 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.70 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.70 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.70 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.70 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.70 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.70 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.70 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.70 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.70 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.70 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.70 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.70 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.70 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.70 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.70 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.70 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.70 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.70 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.70 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.70 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.70 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.70 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.70 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.70 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.70 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.70 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.70 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.70 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.70 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.70 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.70 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.70 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.70 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.70 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.70 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.70 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.70 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.70 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.70 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.70 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.70 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.70 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.70 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.70 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.70 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.70 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.70 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.70 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.70 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.70 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.70 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.70 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.70 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.70 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.70 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.70 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.70 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.70 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.70 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.70 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.70 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.70 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.70 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.70 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.70 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.70 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.70 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.70 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.70 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.70 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.70 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.70 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.70 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.70 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.70 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.70 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.70 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.70 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.70 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.70 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.70 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.70 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.70 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.70 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.70 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.70 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.70 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.70 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.70 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.70 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.70 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.70 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.70 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.70 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.70 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.70 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.70 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.70 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.70 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.70 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.70 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.70 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.70 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.70 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.70 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.70 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.70 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.70 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.70 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.70 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.70 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.71 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.71 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.71 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.71 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.71 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.71 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.71 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.71 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.71 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.71 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.71 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.71 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.71 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.71 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.71 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.71 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.71 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.71 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.71 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.71 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.71 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.71 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.71 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.71 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.71 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.71 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.71 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.71 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.71 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.71 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.71 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.71 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.71 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.71 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.71 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.71 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.71 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.71 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.71 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.71 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.71 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.71 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.71 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.71 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.71 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.71 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.71 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.71 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.71 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.71 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.71 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.71 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.71 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.71 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.71 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.71 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.71 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.71 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.71 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.71 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.71 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.71 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.71 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.71 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.71 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.71 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.71 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.71 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.71 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.71 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.71 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.71 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.71 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.71 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.71 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.71 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.71 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.71 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.71 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.71 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.71 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.71 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.71 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.71 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.71 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.71 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.71 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.71 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.71 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.71 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.71 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.71 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.71 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.71 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.71 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.71 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.71 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.71 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.71 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.71 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.71 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.71 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.71 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.71 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.71 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.71 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.71 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.71 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.71 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.71 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.71 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.71 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.71 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.71 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.71 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.71 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.71 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.71 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.71 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.71 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.71 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.71 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.71 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.71 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.71 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.71 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.71 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.71 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.71 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.71 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.71 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.71 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.71 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.71 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.71 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.71 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.71 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.71 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.71 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.71 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.71 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.71 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.71 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.71 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.71 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.71 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.71 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.71 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.71 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.71 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.71 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.71 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.71 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.71 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.71 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.71 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.71 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.71 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.71 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.71 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.71 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.71 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.71 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.71 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.71 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.71 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.71 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.71 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.71 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.71 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.71 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.71 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.71 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.71 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.71 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.71 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.71 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.71 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.71 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.71 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.71 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.71 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.71 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.71 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.71 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.71 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.71 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.71 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.71 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.71 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.71 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.71 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.71 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.71 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.71 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.71 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.71 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.71 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.71 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.71 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.71 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.71 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.71 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.71 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.71 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.71 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.71 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.71 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.71 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.71 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.71 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.71 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.71 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.71 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.71 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.71 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.71 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.71 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.71 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.71 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.71 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.71 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.71 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.71 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.71 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.71 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.71 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.71 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.71 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.71 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.71 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.71 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.71 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.71 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.71 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.71 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.71 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.71 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.71 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.71 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.71 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.71 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.71 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.71 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.71 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.71 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.71 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.71 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.71 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.71 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.71 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.71 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.71 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.71 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.71 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.71 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.71 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.71 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.71 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.71 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.71 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.71 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.71 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.71 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.71 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.71 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.71 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.71 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.71 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.71 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.71 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.71 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.71 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.71 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.71 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.71 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.71 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.71 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.71 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.71 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.71 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.71 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.71 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.71 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.71 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.71 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.71 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.71 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.71 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.71 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.71 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.71 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.71 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.71 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.71 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.71 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.71 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.71 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.71 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.71 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.71 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.71 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.71 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.71 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.71 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.71 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.71 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.71 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.71 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.71 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.71 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.71 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.71 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.71 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.71 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.71 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.71 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.71 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.71 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.71 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.71 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.71 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.71 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.71 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.71 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.71 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.71 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.71 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.71 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.71 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.71 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.71 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.71 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.71 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.71 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.71 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.71 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.71 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.71 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.71 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.71 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.71 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.71 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.71 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.71 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.71 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.71 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.71 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.71 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.71 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.71 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.71 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.71 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.71 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.71 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.71 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.71 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.71 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.71 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.71 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.71 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.71 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.71 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.71 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.71 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.71 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.71 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.71 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.71 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.71 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.71 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.71 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.71 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.71 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.71 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.71 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.71 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.71 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.71 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.71 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.71 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.71 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.71 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.71 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.71 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.71 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.71 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.71 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.71 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.71 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.71 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.71 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.71 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.71 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.71 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.71 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.71 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.71 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.71 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.71 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.71 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.71 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.71 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.71 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.71 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.71 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.71 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.71 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.71 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.71 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.71 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.71 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.71 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.71 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.71 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.71 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.71 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.71 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.71 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.71 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.71 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.71 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.71 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.71 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.71 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.71 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.71 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.71 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.71 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.71 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.71 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.71 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.71 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.71 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.71 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.71 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.71 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.71 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.71 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.71 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.71 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.71 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.71 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.71 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.71 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.71 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.71 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.71 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.71 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.71 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.71 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.71 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.71 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.71 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.71 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.71 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.71 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.71 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.71 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.71 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.71 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.71 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.71 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.71 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.71 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.71 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.71 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.71 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.71 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.71 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.71 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.71 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.71 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.71 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.71 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.71 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.71 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.71 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.71 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.71 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.71 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.72 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.72 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.72 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.72 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.72 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.72 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.72 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.72 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.72 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.72 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.72 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.72 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.72 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.72 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.72 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.72 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.72 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.72 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.72 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.72 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.72 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.72 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.72 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.72 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.72 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.72 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.72 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.72 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.72 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.72 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.72 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.72 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.72 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.72 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.72 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.72 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.72 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.72 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.72 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.72 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.72 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.72 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.72 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.72 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.72 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.72 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.72 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.72 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.72 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.72 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.72 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.72 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.72 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.72 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.72 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.72 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.72 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.72 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.72 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.72 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.72 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.72 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.72 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.72 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.72 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.72 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.72 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.72 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.72 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.72 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.72 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.72 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.72 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.72 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.72 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.72 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.72 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.72 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.72 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.72 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.72 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.72 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.72 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.72 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.72 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.72 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.72 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.72 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.72 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.72 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.72 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.72 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.72 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.72 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.72 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.72 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.72 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.72 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.72 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.72 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.72 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.72 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.72 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.72 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.72 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.72 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.72 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.72 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.72 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.72 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.72 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.72 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.72 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.72 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.72 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.72 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.72 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.72 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.72 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.72 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.72 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.72 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.72 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.72 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.72 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.72 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.72 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.72 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.72 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.72 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.72 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.72 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.72 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.72 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.72 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.72 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.72 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.72 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.72 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.72 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.72 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.72 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.72 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.72 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.72 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.72 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.72 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.72 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.72 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.72 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.72 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.72 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.72 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.72 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.72 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.72 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.72 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.72 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.72 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.72 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.72 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.72 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.72 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.72 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.72 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.72 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.72 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.72 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.72 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.72 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.72 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.72 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.72 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.72 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.72 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.72 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.72 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.72 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.72 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.72 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.72 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.72 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.72 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.72 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.72 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.72 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.72 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.72 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.72 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.72 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.72 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.72 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.72 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.72 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.72 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.72 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.72 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.72 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.72 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.72 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.72 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.72 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.72 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.72 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.72 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.72 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.72 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.72 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.72 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.72 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.72 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.72 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.72 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.72 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.72 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.72 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.72 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.72 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.72 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.72 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.72 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.72 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.72 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.72 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.72 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.72 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.72 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.72 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.72 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.72 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.72 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.72 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.72 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.72 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.72 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.72 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.72 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.72 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.72 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.72 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.72 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.72 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.72 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.72 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.72 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.72 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.72 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.72 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.72 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.72 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.72 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.72 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.72 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.72 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.72 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.72 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.72 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.72 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.72 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.72 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.72 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.72 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.72 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.72 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.72 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.72 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.72 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.72 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.72 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.72 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.72 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.72 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.72 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.72 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.72 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.72 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.72 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.72 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.72 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.72 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.72 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.72 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.72 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.72 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.72 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.72 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.72 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.72 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.72 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.72 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.72 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.72 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.72 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.72 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.72 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.72 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.72 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.72 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.72 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.72 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.72 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.72 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.72 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.72 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.72 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.72 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.72 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.72 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.72 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.72 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.72 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.72 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.72 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.72 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.72 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.72 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.72 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.72 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.72 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.72 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.72 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.72 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.72 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.72 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.72 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.72 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.72 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.72 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.72 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.72 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.72 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.72 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.72 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.72 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.72 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.72 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.72 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.72 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.72 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.72 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.72 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.72 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.72 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.72 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.72 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.72 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.72 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.72 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.72 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.72 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.72 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.72 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.72 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.72 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.72 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.72 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.72 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.72 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.72 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.72 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.72 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.72 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.72 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.72 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.72 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.72 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.72 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.72 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.72 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.72 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.72 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.72 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.72 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.72 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.72 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.72 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.72 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.72 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.72 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.72 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.72 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.72 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.72 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.72 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.72 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.72 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.72 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.72 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.72 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.72 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.72 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.72 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.72 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.72 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.72 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.72 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.72 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.72 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.72 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.72 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.72 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.72 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.72 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.72 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.72 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.72 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.72 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.72 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.72 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.72 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.72 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.72 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.72 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.72 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.72 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.72 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.72 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.72 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.72 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.72 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.72 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.72 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.72 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.72 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.72 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.72 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.72 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.72 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.72 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.72 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.72 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.72 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.72 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.72 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.72 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.72 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.72 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.72 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.72 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.72 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.72 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.72 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.72 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.72 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.72 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.72 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.72 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.72 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.72 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.72 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.72 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.72 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.72 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.72 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.72 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.72 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.72 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.72 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.72 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.72 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.72 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.72 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.72 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.72 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.72 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.72 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.72 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.72 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.72 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.72 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.72 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.72 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.72 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.72 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.72 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.73 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.73 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.73 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.73 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.73 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.73 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.73 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.73 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.73 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.73 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.73 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.73 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.73 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.73 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.73 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.73 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.73 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.73 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.73 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.73 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.73 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.73 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.73 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.73 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.73 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.73 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.73 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.73 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.73 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.73 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.73 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.73 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.73 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.73 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.73 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.73 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.73 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.73 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.73 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.73 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.73 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.73 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.73 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.73 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.73 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.73 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.73 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.73 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.73 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.73 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.73 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.73 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.73 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.73 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.73 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.73 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.73 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.73 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.73 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.73 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.73 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.73 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.73 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.73 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.73 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.73 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.73 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.73 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.73 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.73 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.73 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.73 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.73 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.73 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.73 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.73 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.73 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.73 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.73 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.73 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.73 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.73 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.73 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.73 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.73 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.73 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.73 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.73 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.73 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.73 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.73 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.73 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.73 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.73 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.73 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.73 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.73 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.73 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.73 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.73 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.73 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.73 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.73 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.73 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.73 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.73 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.73 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.73 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.73 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.73 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.73 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.73 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.73 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.73 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.73 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.73 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.73 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.73 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.73 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.73 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.73 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.73 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.73 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.73 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.73 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.73 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.73 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.73 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.73 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.73 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.73 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.73 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.73 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.73 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.73 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.73 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.73 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.73 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.73 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.73 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.73 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.73 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.73 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.73 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.73 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.73 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.73 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.73 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.73 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.73 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.73 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.73 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.73 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.73 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.73 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.73 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.73 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.73 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.73 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.73 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.73 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.73 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.73 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.73 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.73 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.73 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.73 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.73 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.73 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.73 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.73 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.73 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.73 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.73 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.73 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.73 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.73 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.73 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.73 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.73 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.73 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.73 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.73 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.73 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.73 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.73 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.73 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.73 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.73 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.73 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.73 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.73 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.73 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.73 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.73 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.73 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.73 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.73 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.73 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.73 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.73 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.73 /testbed/sklearn/linear_model/ridge.py(1049):             if error:
0.73 /testbed/sklearn/linear_model/ridge.py(1050):                 out, c = _errors(alpha, y, v, Q, QT_y)
0.73 /testbed/sklearn/linear_model/ridge.py(974):         G_diag, c = self._errors_and_values_svd_helper(alpha, y, v, U, UT_y)
0.73 /testbed/sklearn/linear_model/ridge.py(961):         constant_column = np.var(U, 0) < 1.e-12
0.73 /testbed/sklearn/linear_model/ridge.py(963):         w = ((v + alpha) ** -1) - (alpha ** -1)
0.73 /testbed/sklearn/linear_model/ridge.py(964):         w[constant_column] = - (alpha ** -1)
0.73 /testbed/sklearn/linear_model/ridge.py(966):         c = np.dot(U, self._diag_dot(w, UT_y)) + (alpha ** -1) * y
0.73 /testbed/sklearn/linear_model/ridge.py(912):         if len(B.shape) > 1:
0.73 /testbed/sklearn/linear_model/ridge.py(914):             D = D[(slice(None), ) + (np.newaxis, ) * (len(B.shape) - 1)]
0.73 /testbed/sklearn/linear_model/ridge.py(915):         return D * B
0.73 /testbed/sklearn/linear_model/ridge.py(967):         G_diag = self._decomp_diag(w, U) + (alpha ** -1)
0.73 /testbed/sklearn/linear_model/ridge.py(908):         return (v_prime * Q ** 2).sum(axis=-1)
0.73 /testbed/sklearn/linear_model/ridge.py(968):         if len(y.shape) != 1:
0.73 /testbed/sklearn/linear_model/ridge.py(970):             G_diag = G_diag[:, np.newaxis]
0.73 /testbed/sklearn/linear_model/ridge.py(971):         return G_diag, c
0.73 /testbed/sklearn/linear_model/ridge.py(975):         return (c / G_diag) ** 2, c
0.73 /testbed/sklearn/linear_model/ridge.py(1053):             cv_values[:, i] = out.ravel()
0.73 /testbed/sklearn/linear_model/ridge.py(1054):             C.append(c)
0.73 /testbed/sklearn/linear_model/ridge.py(1048):         for i, alpha in enumerate(self.alphas):
0.73 /testbed/sklearn/linear_model/ridge.py(1056):         if error:
0.73 /testbed/sklearn/linear_model/ridge.py(1057):             best = cv_values.mean(axis=0).argmin()
0.73 /testbed/sklearn/linear_model/ridge.py(1071):         self.alpha_ = self.alphas[best]
0.73 /testbed/sklearn/linear_model/ridge.py(1072):         self.dual_coef_ = C[best]
0.73 /testbed/sklearn/linear_model/ridge.py(1073):         self.coef_ = safe_sparse_dot(self.dual_coef_.T, X)
0.73 /testbed/sklearn/linear_model/ridge.py(1075):         self._set_intercept(X_offset, y_offset, X_scale)
0.73 /testbed/sklearn/linear_model/ridge.py(1077):         if self.store_cv_values:
0.73 /testbed/sklearn/linear_model/ridge.py(1078):             if len(y.shape) == 1:
0.73 /testbed/sklearn/linear_model/ridge.py(1081):                 cv_values_shape = n_samples, n_y, len(self.alphas)
0.73 /testbed/sklearn/linear_model/ridge.py(1082):             self.cv_values_ = cv_values.reshape(cv_values_shape)
0.73 /testbed/sklearn/linear_model/ridge.py(1084):         return self
0.73 /testbed/sklearn/linear_model/ridge.py(1126):             self.alpha_ = estimator.alpha_
0.73 /testbed/sklearn/linear_model/ridge.py(1127):             if self.store_cv_values:
0.73 /testbed/sklearn/linear_model/ridge.py(1128):                 self.cv_values_ = estimator.cv_values_
0.73 /testbed/sklearn/linear_model/ridge.py(1141):         self.coef_ = estimator.coef_
0.73 /testbed/sklearn/linear_model/ridge.py(1142):         self.intercept_ = estimator.intercept_
0.73 /testbed/sklearn/linear_model/ridge.py(1144):         return self
0.73 /testbed/sklearn/linear_model/ridge.py(1383):         return self
=========================== short test summary info ============================
PASSED sklearn/tests/test_coverup_scikit-learn__scikit-learn-10297.py::test_ridge_classifier_cv_store_cv_values
======================== 1 passed, 4 warnings in 0.47s =========================
+ cat coverage.cover
{"/testbed/sklearn/linear_model/ridge.py": {"12": 1, "13": 1, "15": 1, "16": 1, "17": 1, "18": 1, "20": 1, "21": 1, "22": 1, "23": 1, "24": 1, "25": 1, "26": 1, "27": 1, "28": 1, "29": 1, "30": 1, "31": 1, "32": 1, "33": 1, "36": 1, "81": 1, "99": 1, "123": 1, "184": 1, "197": 1, "459": 2, "512": 2, "675": 2, "843": 2, "1087": 2, "1147": 2, "1247": 2, "37": 0, "38": 0, "39": 0, "41": 0, "42": 0, "47": 0, "52": 0, "53": 0, "55": 0, "56": 0, "59": 0, "60": 0, "61": 0, "62": 0, "66": 0, "67": 0, "68": 0, "69": 0, "70": 0, "71": 0, "72": 0, "74": 0, "75": 0, "76": 0, "78": 0, "43": 0, "45": 0, "44": 0, "48": 0, "50": 0, "49": 0, "82": 0, "83": 0, "84": 0, "87": 0, "89": 0, "90": 0, "91": 0, "92": 0, "93": 0, "94": 0, "96": 0, "101": 0, "102": 0, "104": 0, "105": 0, "107": 0, "109": 0, "110": 0, "111": 0, "112": 0, "114": 0, "115": 0, "116": 0, "117": 0, "118": 0, "119": 0, "120": 0, "125": 0, "126": 0, "128": 0, "129": 0, "131": 0, "132": 0, "133": 0, "134": 0, "136": 0, "139": 0, "140": 0, "141": 0, "143": 0, "145": 0, "147": 0, "151": 0, "152": 0, "153": 0, "154": 0, "156": 0, "160": 0, "162": 0, "163": 0, "165": 0, "168": 0, "170": 0, "171": 0, "173": 0, "174": 0, "176": 0, "178": 0, "179": 0, "181": 0, "185": 0, "186": 0, "187": 0, "188": 0, "189": 0, "190": 0, "191": 0, "192": 0, "317": 0, "318": 0, "319": 0, "322": 0, "324": 0, "327": 0, "328": 0, "329": 0, "330": 0, "332": 0, "333": 0, "334": 0, "335": 0, "337": 0, "339": 0, "340": 0, "342": 0, "343": 0, "344": 0, "345": 0, "347": 0, "349": 0, "350": 0, "351": 0, "353": 0, "355": 0, "357": 0, "358": 0, "360": 0, "362": 0, "363": 0, "364": 0, "365": 0, "367": 0, "368": 0, "369": 0, "371": 0, "374": 0, "377": 0, "378": 0, "379": 0, "381": 0, "383": 0, "384": 0, "386": 0, "387": 0, "389": 0, "390": 0, "391": 0, "393": 0, "394": 0, "396": 0, "397": 0, "398": 0, "399": 0, "400": 0, "402": 0, "403": 0, "405": 0, "408": 0, "409": 0, "410": 0, "412": 0, "414": 0, "416": 0, "418": 0, "419": 0, "420": 0, "421": 0, "422": 0, "423": 0, "424": 0, "425": 0, "426": 0, "427": 0, "428": 0, "429": 0, "430": 0, "432": 0, "433": 0, "435": 0, "436": 0, "437": 0, "439": 0, "440": 0, "441": 0, "443": 0, "445": 0, "447": 0, "449": 0, "450": 0, "451": 0, "452": 0, "453": 0, "454": 0, "456": 0, "461": 1, "464": 1, "474": 1, "465": 0, "466": 0, "467": 0, "468": 0, "469": 0, "470": 0, "471": 0, "472": 0, "476": 0, "477": 0, "480": 0, "482": 0, "483": 0, "485": 0, "486": 0, "487": 0, "489": 0, "490": 0, "491": 0, "494": 0, "495": 0, "496": 0, "497": 0, "498": 0, "499": 0, "500": 0, "502": 0, "503": 0, "504": 0, "505": 0, "506": 0, "507": 0, "509": 0, "648": 1, "654": 1, "649": 0, "650": 0, "651": 0, "652": 0, "672": 0, "787": 1, "794": 1, "838": 1, "788": 0, "789": 0, "790": 0, "791": 0, "792": 0, "815": 0, "816": 0, "818": 0, "819": 0, "820": 0, "821": 0, "824": 0, "825": 0, "826": 0, "828": 0, "829": 0, "830": 0, "832": 0, "833": 0, "835": 0, "836": 0, "840": 0, "885": 1, "894": 1, "906": 1, "910": 1, "917": 1, "937": 1, "941": 1, "945": 1, "957": 1, "973": 1, "977": 1, "981": 1, "886": 1, "887": 1, "888": 1, "889": 1, "890": 1, "891": 1, "892": 1, "896": 0, "900": 0, "901": 0, "902": 0, "903": 0, "904": 0, "908": 99, "912": 99, "914": 99, "915": 99, "925": 0, "926": 0, "928": 0, "930": 0, "931": 0, "933": 0, "934": 0, "935": 0, "938": 0, "939": 0, "942": 0, "943": 0, "946": 1, "947": 0, "948": 1, "949": 1, "952": 1, "953": 1, "954": 1, "955": 1, "961": 99, "963": 99, "964": 99, "966": 99, "967": 99, "968": 99, "970": 99, "971": 99, "974": 99, "975": 99, "978": 0, "979": 0, "999": 1, "1000": 1, "1001": 1, "1002": 0, "1003": 1, "1005": 1, "1006": 1, "1007": 1, "1009": 1, "1010": 1, "1012": 1, "1013": 1, "1014": 0, "1016": 1, "1017": 0, "1019": 0, "1021": 0, "1023": 1, "1024": 0, "1025": 0, "1026": 0, "1027": 1, "1029": 1, "1030": 1, "1031": 1, "1033": 0, "1035": 1, "1036": 0, "1038": 1, "1040": 1, "1041": 1, "1042": 1, "1043": 1, "1045": 1, "1046": 1, "1048": 100, "1049": 99, "1050": 99, "1052": 0, "1053": 99, "1054": 99, "1056": 1, "1057": 1, "1062": 0, "1064": 0, "1065": 0, "1067": 0, "1068": 0, "1069": 0, "1071": 1, "1072": 1, "1073": 1, "1075": 1, "1077": 1, "1078": 1, "1079": 0, "1081": 1, "1082": 1, "1084": 1, "1063": 0, "1091": 1, "1100": 1, "1092": 1, "1093": 1, "1094": 1, "1095": 1, "1096": 1, "1097": 1, "1098": 1, "1118": 1, "1119": 1, "1120": 1, "1121": 1, "1122": 1, "1123": 1, "1124": 1, "1125": 1, "1126": 1, "1127": 1, "1128": 1, "1130": 0, "1131": 0, "1133": 0, "1134": 0, "1135": 0, "1136": 0, "1137": 0, "1138": 0, "1139": 0, "1141": 1, "1142": 1, "1144": 1, "1244": 1, "1342": 1, "1348": 1, "1385": 1, "1343": 1, "1344": 1, "1345": 1, "1346": 1, "1367": 1, "1368": 1, "1370": 1, "1371": 1, "1372": 1, "1373": 1, "1375": 1, "1376": 0, "1377": 0, "1379": 0, "1380": 0, "1382": 1, "1383": 1, "1387": 0}}
+ git checkout b90661d6a46aa3619d3eec94d5281f5888add501
Note: switching to 'b90661d6a46aa3619d3eec94d5281f5888add501'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at b90661d6a4 [MRG+1] TST apply transformer checks to any estimator supporting 'transform' (#10474)
M	sklearn/linear_model/ridge.py
+ git apply /root/pre_state.patch
error: unrecognized input
