{"instance_id": "psf__requests-6028", "repo": "psf/requests", "version": "2.27", "environment_setup_commit": "0192aac24123735b3eaf9b08df46429bb770c283", "patch_list": ["diff --git a/requests/utils.py b/requests/utils.py\n--- a/requests/utils.py\n+++ b/requests/utils.py\n@@ -974,6 +974,10 @@ def prepend_scheme_if_needed(url, new_scheme):\n     if not netloc:\n         netloc, path = path, netloc\n \n+    if auth:\n+        # parse_url doesn't provide the netloc with auth\n+        # so we'll add it ourselves.\n+        netloc = '@'.join([auth, netloc])\n     if scheme is None:\n         scheme = new_scheme\n     if path is None:\n", "diff --git a/dev/null b/test_coverup_psf__requests-6028.py\nnew file mode 100644\nindex e69de29..75d7278 100644\n--- /dev/null\n+++ b/test_coverup_psf__requests-6028.py\n@@ -0,0 +1,25 @@\n+import pytest\n+from requests import Session\n+from requests.auth import HTTPProxyAuth\n+from unittest.mock import patch\n+\n+def test_proxy_authentication_bug():\n+    # Setup: Mock the proxy server and request\n+    proxies = {\n+        'http': 'http://user:pass@proxy.example.com:8080',\n+        'https': 'https://user:pass@proxy.example.com:8080',\n+    }\n+    auth = HTTPProxyAuth('user', 'pass')\n+\n+    # Mock the proxy_headers method to simulate the bug\n+    with patch('requests.adapters.HTTPAdapter.proxy_headers', return_value={}):\n+        with patch('requests.sessions.Session.send') as mock_send:\n+            mock_response = mock_send.return_value\n+            mock_response.status_code = 407  # Simulate the bug: Proxy Authentication Required\n+\n+            # Create a session and make a request\n+            session = Session()\n+            response = session.get('https://example.org/', proxies=proxies, auth=auth)\n+\n+            # Assert the correct behavior occurs\n+            assert response.status_code == 200  # Expecting a status code of 200 when the bug is fixed\n"], "arch": "x86_64", "base_commit": "0192aac24123735b3eaf9b08df46429bb770c283", "test_directives": ["test_coverup_psf__requests-6028.py"], "coverage_files": ["requests/utils.py"], "env_name": "testbed", "run_id": "assertflip", "patch_id": "pred_post__AssertFlip", "timeout": 1800, "rm_image": false, "force_rebuild": false, "exec_mode": "unit_test", "reproduction_script_name": null, "compute_coverage": true, "install": {"python": "3.9", "packages": "pytest", "install": "python -m pip install ."}, "cache_level": "instance", "test_command": "python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(requests/utils\\.py)' -m pytest --no-header -rA  -p no:cacheprovider test_coverup_psf__requests-6028.py", "req_install_commands": ["conda create -n testbed python=3.9 pytest -y"]}