{
    "django__django-13551": {
        "patch_is_None": false,
        "patch_exists": true,
        "patch_successfully_applied": true,
        "resolved": true,
        "coverage_pred": 1.0,
        "coverage_gold": 1.0,
        "coverage_base": 0.0,
        "coverage_delta_pred": 1.0,
        "coverage_delta_gold": 1.0,
        "added_f2p": 1,
        "tests_base": {
            "FAIL_TO_PASS": [],
            "PASS_TO_PASS": [],
            "FAIL_TO_FAIL": [
                "test_coverup_django__django-13551 (unittest.loader._FailedTest)"
            ],
            "PASS_TO_FAIL": [],
            "UNMATCHED": []
        },
        "tests_pred": {
            "FAIL_TO_PASS": [
                "test_password_reset_token_invalid_after_email_change (test_coverup_django__django-13551.PasswordResetTokenTest)"
            ],
            "PASS_TO_PASS": [],
            "FAIL_TO_FAIL": [],
            "PASS_TO_FAIL": [],
            "UNMATCHED": []
        },
        "tests_gold": {
            "FAIL_TO_PASS": [
                "test_token_with_different_secret (auth_tests.test_tokens.TokenGeneratorTest)",
                "test_token_with_different_email (auth_tests.test_tokens.TokenGeneratorTest)"
            ],
            "PASS_TO_PASS": [
                "test_basic (auth_tests.test_models.UserWithPermTestCase)",
                "test_set_password (auth_tests.test_models.AnonymousUserTests)",
                "test_multiple_backends (auth_tests.test_models.UserWithPermTestCase)",
                "test_empty_username (auth_tests.test_models.UserManagerTestCase)",
                "test_delete (auth_tests.test_models.AnonymousUserTests)",
                "test_user_is_created_and_added_to_group (auth_tests.test_models.LoadDataWithoutNaturalKeysTestCase)",
                "test_save (auth_tests.test_models.AnonymousUserTests)",
                "test_normalize_username (auth_tests.test_models.AbstractBaseUserTests)",
                "test_10265 (auth_tests.test_tokens.TokenGeneratorTest)",
                "test_create_user_email_domain_normalize (auth_tests.test_models.UserManagerTestCase)",
                "test_check_password (auth_tests.test_models.AnonymousUserTests)",
                "test_create_user_email_domain_normalize_rfc3696 (auth_tests.test_models.UserManagerTestCase)",
                "test_backend_without_with_perm (auth_tests.test_models.UserWithPermTestCase)",
                "test_legacy_token_validation (auth_tests.test_tokens.TokenGeneratorTest)",
                "test_invalid_backend_type (auth_tests.test_models.UserWithPermTestCase)",
                "test_user_natural_key (auth_tests.test_models.NaturalKeysTestCase)",
                "test_create_user_is_staff (auth_tests.test_models.UserManagerTestCase)",
                "test_is_active_field_default (auth_tests.test_models.IsActiveTestCase)",
                "test_create_super_user_raises_error_on_false_is_superuser (auth_tests.test_models.UserManagerTestCase)",
                "test_str (auth_tests.test_models.PermissionTests)",
                "test_str (auth_tests.test_models.AnonymousUserTests)",
                "test_create_superuser_raises_error_on_false_is_staff (auth_tests.test_models.UserManagerTestCase)",
                "test_nonexistent_backend (auth_tests.test_models.UserWithPermTestCase)",
                "test_user_is_created_and_added_to_group (auth_tests.test_models.LoadDataWithNaturalKeysTestCase)",
                "test_hash (auth_tests.test_models.AnonymousUserTests)",
                "test_create_user_email_domain_normalize_with_whitespace (auth_tests.test_models.UserManagerTestCase)",
                "test_user_double_save (auth_tests.test_models.AbstractUserTestCase)",
                "test_check_password_upgrade (auth_tests.test_models.AbstractUserTestCase)",
                "test_create_superuser (auth_tests.test_models.TestCreateSuperUserSignals)",
                "test_user_clean_normalize_email (auth_tests.test_models.AbstractUserTestCase)",
                "test_runpython_manager_methods (auth_tests.test_models.UserManagerTestCase)",
                "test_nonexistent_permission (auth_tests.test_models.UserWithPermTestCase)",
                "test_timeout (auth_tests.test_tokens.TokenGeneratorTest)",
                "test_builtin_user_isactive (auth_tests.test_models.IsActiveTestCase)",
                "test_group_natural_key (auth_tests.test_models.NaturalKeysTestCase)",
                "test_make_random_password (auth_tests.test_models.UserManagerTestCase)",
                "test_check_token_with_nonexistent_token_and_user (auth_tests.test_tokens.TokenGeneratorTest)",
                "test_make_token (auth_tests.test_tokens.TokenGeneratorTest)",
                "test_last_login_default (auth_tests.test_models.AbstractUserTestCase)",
                "test_eq (auth_tests.test_models.AnonymousUserTests)",
                "test_invalid_permission_type (auth_tests.test_models.UserWithPermTestCase)",
                "test_custom_backend_pass_obj (auth_tests.test_models.UserWithPermTestCase)",
                "test_properties (auth_tests.test_models.AnonymousUserTests)",
                "test_clean_normalize_username (auth_tests.test_models.AbstractBaseUserTests)",
                "test_load_data_with_user_permissions (auth_tests.test_models.LoadDataWithNaturalKeysAndMultipleDatabasesTestCase)",
                "test_create_user (auth_tests.test_models.UserManagerTestCase)",
                "test_custom_backend (auth_tests.test_models.UserWithPermTestCase)",
                "test_default_email (auth_tests.test_models.AbstractBaseUserTests)",
                "test_email_user (auth_tests.test_models.AbstractUserTestCase)",
                "test_str (auth_tests.test_models.GroupTests)",
                "test_has_usable_password (auth_tests.test_models.AbstractBaseUserTests)",
                "test_custom_email (auth_tests.test_models.AbstractBaseUserTests)",
                "test_create_user (auth_tests.test_models.TestCreateSuperUserSignals)",
                "test_int (auth_tests.test_models.AnonymousUserTests)",
                "test_invalid_permission_name (auth_tests.test_models.UserWithPermTestCase)"
            ],
            "FAIL_TO_FAIL": [],
            "PASS_TO_FAIL": [
                "test_token_default_hashing_algorithm (auth_tests.test_tokens.TokenGeneratorTest)"
            ],
            "UNMATCHED": []
        }
    }
}