{
    "django__django-11138": {
        "patch_is_None": false,
        "patch_exists": true,
        "patch_successfully_applied": true,
        "resolved": false,
        "coverage_pred": 0.6346153846153846,
        "coverage_gold": 0.8846153846153846,
        "coverage_base": 0.23076923076923078,
        "coverage_delta_pred": 0.46153846153846156,
        "coverage_delta_gold": 0.7115384615384616,
        "added_f2p": 0,
        "tests_base": {
            "FAIL_TO_PASS": [],
            "PASS_TO_PASS": [],
            "FAIL_TO_FAIL": [
                "test_coverup_django__django-11138 (unittest.loader._FailedTest)"
            ],
            "PASS_TO_FAIL": [],
            "UNMATCHED": []
        },
        "tests_pred": {
            "FAIL_TO_PASS": [],
            "PASS_TO_PASS": [],
            "FAIL_TO_FAIL": [
                "test_date_lookup_bug (test_coverup_django__django-11138.TimeZoneTestCase)"
            ],
            "PASS_TO_FAIL": [],
            "UNMATCHED": []
        },
        "tests_gold": {
            "FAIL_TO_PASS": [
                "test_query_datetime_lookups (timezones.tests.NewDatabaseTests)",
                "test_query_convert_timezones (timezones.tests.NewDatabaseTests)"
            ],
            "PASS_TO_PASS": [
                "test_cursor_execute_accepts_naive_datetime (timezones.tests.LegacyDatabaseTests)",
                "test_null_datetime (timezones.tests.NewDatabaseTests)",
                "test_query_datetimes_in_other_timezone (timezones.tests.NewDatabaseTests)",
                "test_filter_date_field_with_aware_datetime (timezones.tests.NewDatabaseTests)",
                "test_raw_sql (timezones.tests.NewDatabaseTests)",
                "test_cursor_execute_returns_naive_datetime (timezones.tests.LegacyDatabaseTests)",
                "test_change_readonly_in_other_timezone (timezones.tests.AdminTests)",
                "test_change_readonly (timezones.tests.AdminTests)",
                "test_form_with_non_existent_time (timezones.tests.NewFormsTests)",
                "test_naive_datetime (timezones.tests.NewDatabaseTests)",
                "test_localtime_filters_with_pytz (timezones.tests.TemplateTests)",
                "test_get_current_timezone_templatetag_invalid_argument (timezones.tests.TemplateTests)",
                "test_naive_datetime_with_microsecond (timezones.tests.LegacyDatabaseTests)",
                "test_timezone_templatetag_with_pytz (timezones.tests.TemplateTests)",
                "test_form (timezones.tests.LegacyFormsTests)",
                "test_query_filter_with_pytz_timezones (timezones.tests.NewDatabaseTests)",
                "test_query_aggregation (timezones.tests.NewDatabaseTests)",
                "test_changelist (timezones.tests.AdminTests)",
                "test_form_with_ambiguous_time (timezones.tests.LegacyFormsTests)",
                "test_aware_datetime_unsupported (timezones.tests.LegacyDatabaseTests)",
                "test_query_annotation (timezones.tests.LegacyDatabaseTests)",
                "test_split_form (timezones.tests.NewFormsTests)",
                "test_localtime_templatetag_invalid_argument (timezones.tests.TemplateTests)",
                "test_query_datetime_lookups (timezones.tests.LegacyDatabaseTests)",
                "test_get_current_timezone_templatetag (timezones.tests.TemplateTests)",
                "test_timezone_templatetag (timezones.tests.TemplateTests)",
                "test_date_and_time_template_filters_honor_localtime (timezones.tests.TemplateTests)",
                "test_query_filter (timezones.tests.LegacyDatabaseTests)",
                "test_change_editable (timezones.tests.AdminTests)",
                "test_model_form (timezones.tests.NewFormsTests)",
                "test_tz_template_context_processor (timezones.tests.TemplateTests)",
                "test_aware_datetime_in_local_timezone_with_microsecond (timezones.tests.NewDatabaseTests)",
                "test_localized_model_form (timezones.tests.NewFormsTests)",
                "test_aware_datetime_in_local_timezone (timezones.tests.NewDatabaseTests)",
                "test_auto_now_and_auto_now_add (timezones.tests.NewDatabaseTests)",
                "test_form_with_explicit_timezone (timezones.tests.NewFormsTests)",
                "test_timezone_templatetag_invalid_argument (timezones.tests.TemplateTests)",
                "test_naive_datetime_with_microsecond (timezones.tests.SerializationTests)",
                "test_aware_datetime_in_other_timezone (timezones.tests.NewDatabaseTests)",
                "test_localized_form (timezones.tests.NewFormsTests)",
                "test_naive_datetime (timezones.tests.LegacyDatabaseTests)",
                "test_filter_date_field_with_aware_datetime (timezones.tests.LegacyDatabaseTests)",
                "test_query_datetime_lookups_in_other_timezone (timezones.tests.NewDatabaseTests)",
                "test_cursor_execute_returns_naive_datetime (timezones.tests.NewDatabaseTests)",
                "test_naive_datetime_with_microsecond (timezones.tests.NewDatabaseTests)",
                "test_form_with_non_existent_time (timezones.tests.LegacyFormsTests)",
                "test_localtime_filters_do_not_raise_exceptions (timezones.tests.TemplateTests)",
                "test_update_with_timedelta (timezones.tests.NewDatabaseTests)",
                "test_split_form (timezones.tests.LegacyFormsTests)",
                "test_query_datetimes (timezones.tests.LegacyDatabaseTests)",
                "test_form (timezones.tests.NewFormsTests)",
                "test_now_template_tag_uses_current_time_zone (timezones.tests.TemplateTests)",
                "test_change_editable_in_other_timezone (timezones.tests.AdminTests)",
                "test_model_form (timezones.tests.LegacyFormsTests)",
                "test_datetime_from_date (timezones.tests.NewDatabaseTests)",
                "test_changelist_in_other_timezone (timezones.tests.AdminTests)",
                "test_query_annotation (timezones.tests.NewDatabaseTests)",
                "test_raw_sql (timezones.tests.LegacyDatabaseTests)",
                "test_localtime_templatetag_and_filters (timezones.tests.TemplateTests)",
                "test_form_with_ambiguous_time (timezones.tests.NewFormsTests)",
                "test_cursor_execute_accepts_naive_datetime (timezones.tests.NewDatabaseTests)",
                "test_query_filter_with_naive_datetime (timezones.tests.NewDatabaseTests)",
                "test_query_aggregation (timezones.tests.LegacyDatabaseTests)",
                "test_form_with_other_timezone (timezones.tests.NewFormsTests)",
                "test_date_and_time_template_filters (timezones.tests.TemplateTests)",
                "test_query_datetimes (timezones.tests.NewDatabaseTests)",
                "test_get_current_timezone_templatetag_with_pytz (timezones.tests.TemplateTests)",
                "test_aware_datetime_in_utc (timezones.tests.NewDatabaseTests)",
                "test_query_filter (timezones.tests.NewDatabaseTests)"
            ],
            "FAIL_TO_FAIL": [
                "test_aware_datetime_in_local_timezone (timezones.tests.SerializationTests)",
                "test_aware_datetime_in_other_timezone (timezones.tests.SerializationTests)",
                "test_aware_datetime_with_microsecond (timezones.tests.SerializationTests)",
                "test_time_zone_parameter_not_supported_if_database_supports_timezone (timezones.tests.UnsupportedTimeZoneDatabaseTests)",
                "test_aware_datetime_in_local_timezone_with_microsecond (timezones.tests.LegacyDatabaseTests)",
                "test_cursor_execute_returns_aware_datetime (timezones.tests.NewDatabaseTests)",
                "test_aware_datetime_in_utc (timezones.tests.LegacyDatabaseTests)",
                "test_aware_datetime_in_other_timezone (timezones.tests.LegacyDatabaseTests)",
                "test_aware_datetime_in_local_timezone (timezones.tests.LegacyDatabaseTests)",
                "test_cursor_execute_accepts_aware_datetime (timezones.tests.NewDatabaseTests)"
            ],
            "PASS_TO_FAIL": [],
            "UNMATCHED": []
        }
    }
}