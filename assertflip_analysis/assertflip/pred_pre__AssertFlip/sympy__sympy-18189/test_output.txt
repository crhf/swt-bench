+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD 1923822ddf8265199dbd9ef9ce09641d3fd042b9
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch master
nothing to commit, working tree clean
+ git show
commit 1923822ddf8265199dbd9ef9ce09641d3fd042b9
Merge: d98abf000b a836f15b3c
Author: Oscar Benjamin <oscar.j.benjamin@gmail.com>
Date:   Tue Dec 31 15:17:38 2019 +0000

    Merge pull request #18187 from namannimmo10/new-patch
    
    Remove unused imports in test_evaluate

+ git diff 1923822ddf8265199dbd9ef9ce09641d3fd042b9
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Requirement already satisfied: mpmath>=0.19 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from sympy==1.6.dev0) (1.3.0)
Installing collected packages: sympy
  Attempting uninstall: sympy
    Found existing installation: sympy 1.6.dev0
    Uninstalling sympy-1.6.dev0:
      Successfully uninstalled sympy-1.6.dev0
  DEPRECATION: Legacy editable install of sympy==1.6.dev0 from file:///testbed (setup.py develop) is deprecated. pip 25.3 will enforce this behaviour change. A possible replacement is to add a pyproject.toml or enable --use-pep517, and use setuptools >= 64. If the resulting installation is not behaving as expected, try using --config-settings editable_mode=compat. Please consult the setuptools documentation for more information. Discussion can be found at https://github.com/pypa/pip/issues/11457
  Running setup.py develop for sympy
Successfully installed sympy
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git apply -v -
<stdin>:15: trailing whitespace.
    
Checking patch sympy/polys/tests/test_coverup_sympy__sympy-18189.py...
Applied patch sympy/polys/tests/test_coverup_sympy__sympy-18189.py cleanly.
warning: 1 line adds whitespace errors.
+ PYTHONWARNINGS=ignore::UserWarning,ignore::SyntaxWarning
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(sympy/solvers/diophantine\.py)' bin/test -C --verbose sympy/polys/tests/test_coverup_sympy__sympy-18189.p
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(sympy/solvers/diophantine\\.py)']
0.97 /testbed/sympy/solvers/diophantine.py(1): from __future__ import print_function, division
0.97 /testbed/sympy/solvers/diophantine.py(3): from sympy.core.add import Add
0.97 /testbed/sympy/solvers/diophantine.py(4): from sympy.core.compatibility import as_int, is_sequence, range
0.97 /testbed/sympy/solvers/diophantine.py(5): from sympy.core.exprtools import factor_terms
0.97 /testbed/sympy/solvers/diophantine.py(6): from sympy.core.function import _mexpand
0.97 /testbed/sympy/solvers/diophantine.py(7): from sympy.core.mul import Mul
0.97 /testbed/sympy/solvers/diophantine.py(8): from sympy.core.numbers import Rational
0.97 /testbed/sympy/solvers/diophantine.py(9): from sympy.core.numbers import igcdex, ilcm, igcd
0.97 /testbed/sympy/solvers/diophantine.py(10): from sympy.core.power import integer_nthroot, isqrt
0.97 /testbed/sympy/solvers/diophantine.py(11): from sympy.core.relational import Eq
0.97 /testbed/sympy/solvers/diophantine.py(12): from sympy.core.singleton import S
0.97 /testbed/sympy/solvers/diophantine.py(13): from sympy.core.symbol import Symbol, symbols
0.97 /testbed/sympy/solvers/diophantine.py(14): from sympy.functions.elementary.complexes import sign
0.97 /testbed/sympy/solvers/diophantine.py(15): from sympy.functions.elementary.integers import floor
0.97 /testbed/sympy/solvers/diophantine.py(16): from sympy.functions.elementary.miscellaneous import sqrt
0.97 /testbed/sympy/solvers/diophantine.py(17): from sympy.matrices.dense import MutableDenseMatrix as Matrix
0.97 /testbed/sympy/solvers/diophantine.py(18): from sympy.ntheory.factor_ import (
0.97 /testbed/sympy/solvers/diophantine.py(20): from sympy.ntheory.generate import nextprime
0.97 /testbed/sympy/solvers/diophantine.py(21): from sympy.ntheory.primetest import is_square, isprime
0.97 /testbed/sympy/solvers/diophantine.py(22): from sympy.ntheory.residue_ntheory import sqrt_mod
0.97 /testbed/sympy/solvers/diophantine.py(23): from sympy.polys.polyerrors import GeneratorsNeeded
0.97 /testbed/sympy/solvers/diophantine.py(24): from sympy.polys.polytools import Poly, factor_list
0.97 /testbed/sympy/solvers/diophantine.py(25): from sympy.simplify.simplify import signsimp
0.97 /testbed/sympy/solvers/diophantine.py(26): from sympy.solvers.solvers import check_assumptions
0.97 /testbed/sympy/solvers/diophantine.py(27): from sympy.solvers.solveset import solveset_real
0.98 /testbed/sympy/solvers/diophantine.py(28): from sympy.utilities import default_sort_key, numbered_symbols
0.98 /testbed/sympy/solvers/diophantine.py(29): from sympy.utilities.misc import filldedent
0.98 /testbed/sympy/solvers/diophantine.py(34): __all__ = ['diophantine', 'classify_diop']
0.98 /testbed/sympy/solvers/diophantine.py(38): diop_known = {
0.98 /testbed/sympy/solvers/diophantine.py(53): def _is_int(i):
0.98 /testbed/sympy/solvers/diophantine.py(61): def _sorted_tuple(*i):
0.98 /testbed/sympy/solvers/diophantine.py(65): def _remove_gcd(*x):
0.98 /testbed/sympy/solvers/diophantine.py(80): def _rational_pq(a, b):
0.98 /testbed/sympy/solvers/diophantine.py(85): def _nint_or_floor(p, q):
0.98 /testbed/sympy/solvers/diophantine.py(93): def _odd(i):
0.98 /testbed/sympy/solvers/diophantine.py(97): def _even(i):
0.98 /testbed/sympy/solvers/diophantine.py(101): def diophantine(eq, param=symbols("t", integer=True), syms=None,
0.98 /testbed/sympy/solvers/diophantine.py(102):                 permute=False):
0.98 /testbed/sympy/solvers/diophantine.py(101): def diophantine(eq, param=symbols("t", integer=True), syms=None,
0.98 /testbed/sympy/solvers/diophantine.py(354): def merge_solution(var, var_t, solution):
0.98 /testbed/sympy/solvers/diophantine.py(386): def diop_solve(eq, param=symbols("t", integer=True)):
0.98 /testbed/sympy/solvers/diophantine.py(476): def classify_diop(eq, _dict=True):
0.98 /testbed/sympy/solvers/diophantine.py(556): classify_diop.func_doc = '''
0.98 /testbed/sympy/solvers/diophantine.py(591):     ''' % ('\n    * '.join(sorted(diop_known)))
0.98 /testbed/sympy/solvers/diophantine.py(556): classify_diop.func_doc = '''
0.98 /testbed/sympy/solvers/diophantine.py(594): def diop_linear(eq, param=symbols("t", integer=True)):
0.98 /testbed/sympy/solvers/diophantine.py(640): def _diop_linear(var, coeff, param):
0.98 /testbed/sympy/solvers/diophantine.py(817): def base_solution_linear(c, a, b, t=None):
0.98 /testbed/sympy/solvers/diophantine.py(871): def divisible(a, b):
0.98 /testbed/sympy/solvers/diophantine.py(878): def diop_quadratic(eq, param=symbols("t", integer=True)):
0.98 /testbed/sympy/solvers/diophantine.py(927): def _diop_quadratic(var, coeff, t):
0.98 /testbed/sympy/solvers/diophantine.py(1108): def is_solution_quad(var, coeff, u, v):
0.98 /testbed/sympy/solvers/diophantine.py(1121): def diop_DN(D, N, t=symbols("t", integer=True)):
0.98 /testbed/sympy/solvers/diophantine.py(1317): def _special_diop_DN(D, N):
0.98 /testbed/sympy/solvers/diophantine.py(1412): def cornacchia(a, b, m):
0.98 /testbed/sympy/solvers/diophantine.py(1474): def PQa(P_0, Q_0, D):
0.98 /testbed/sympy/solvers/diophantine.py(1534): def diop_bf_DN(D, N, t=symbols("t", integer=True)):
0.98 /testbed/sympy/solvers/diophantine.py(1622): def equivalent(u, v, r, s, D, N):
0.98 /testbed/sympy/solvers/diophantine.py(1658): def length(P, Q, D):
0.98 /testbed/sympy/solvers/diophantine.py(1703): def transformation_to_DN(eq):
0.98 /testbed/sympy/solvers/diophantine.py(1784): def _transformation_to_DN(var, coeff):
0.98 /testbed/sympy/solvers/diophantine.py(1835): def find_DN(eq):
0.98 /testbed/sympy/solvers/diophantine.py(1879): def _find_DN(var, coeff):
0.98 /testbed/sympy/solvers/diophantine.py(1896): def check_param(x, y, a, t):
0.98 /testbed/sympy/solvers/diophantine.py(1924): def diop_ternary_quadratic(eq):
0.98 /testbed/sympy/solvers/diophantine.py(1966): def _diop_ternary_quadratic(_var, coeff):
0.98 /testbed/sympy/solvers/diophantine.py(2065): def transformation_to_normal(eq):
0.98 /testbed/sympy/solvers/diophantine.py(2081): def _transformation_to_normal(var, coeff):
0.98 /testbed/sympy/solvers/diophantine.py(2165): def parametrize_ternary_quadratic(eq):
0.98 /testbed/sympy/solvers/diophantine.py(2230): def _parametrize_ternary_quadratic(solution, _var, coeff):
0.98 /testbed/sympy/solvers/diophantine.py(2270): def diop_ternary_quadratic_normal(eq):
0.98 /testbed/sympy/solvers/diophantine.py(2303): def _diop_ternary_quadratic_normal(var, coeff):
0.98 /testbed/sympy/solvers/diophantine.py(2364): def sqf_normal(a, b, c, steps=False):
0.98 /testbed/sympy/solvers/diophantine.py(2421): def square_factor(a):
0.98 /testbed/sympy/solvers/diophantine.py(2447): def reconstruct(A, B, z):
0.98 /testbed/sympy/solvers/diophantine.py(2462): def ldescent(A, B):
0.98 /testbed/sympy/solvers/diophantine.py(2531): def descent(A, B):
0.98 /testbed/sympy/solvers/diophantine.py(2584): def gaussian_reduce(w, a, b):
0.98 /testbed/sympy/solvers/diophantine.py(2625): def dot(u, v, w, a, b):
0.98 /testbed/sympy/solvers/diophantine.py(2636): def norm(u, w, a, b):
0.98 /testbed/sympy/solvers/diophantine.py(2646): def holzer(x, y, z, a, b, c):
0.98 /testbed/sympy/solvers/diophantine.py(2710): def diop_general_pythagorean(eq, param=symbols("m", integer=True)):
0.98 /testbed/sympy/solvers/diophantine.py(2741): def _diop_general_pythagorean(var, coeff, t):
0.98 /testbed/sympy/solvers/diophantine.py(2774): def diop_general_sum_of_squares(eq, limit=1):
0.98 /testbed/sympy/solvers/diophantine.py(2814): def _diop_general_sum_of_squares(var, k, limit=1):
0.98 /testbed/sympy/solvers/diophantine.py(2840): def diop_general_sum_of_even_powers(eq, limit=1):
0.98 /testbed/sympy/solvers/diophantine.py(2876): def _diop_general_sum_of_even_powers(var, p, n, limit=1):
0.98 /testbed/sympy/solvers/diophantine.py(2905): def partition(n, k=None, zeros=False):
0.98 /testbed/sympy/solvers/diophantine.py(2959): def prime_as_sum_of_two_squares(p):
0.98 /testbed/sympy/solvers/diophantine.py(3002): def sum_of_three_squares(n):
0.98 /testbed/sympy/solvers/diophantine.py(3081): def sum_of_four_squares(n):
0.98 ['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(sympy/solvers/diophantine\\.py)']
0.38 /testbed/sympy/solvers/diophantine.py(1): from __future__ import print_function, division
0.38 /testbed/sympy/solvers/diophantine.py(3): from sympy.core.add import Add
0.38 /testbed/sympy/solvers/diophantine.py(4): from sympy.core.compatibility import as_int, is_sequence, range
0.38 /testbed/sympy/solvers/diophantine.py(5): from sympy.core.exprtools import factor_terms
0.38 /testbed/sympy/solvers/diophantine.py(6): from sympy.core.function import _mexpand
0.38 /testbed/sympy/solvers/diophantine.py(7): from sympy.core.mul import Mul
0.38 /testbed/sympy/solvers/diophantine.py(8): from sympy.core.numbers import Rational
0.38 /testbed/sympy/solvers/diophantine.py(9): from sympy.core.numbers import igcdex, ilcm, igcd
0.38 /testbed/sympy/solvers/diophantine.py(10): from sympy.core.power import integer_nthroot, isqrt
0.38 /testbed/sympy/solvers/diophantine.py(11): from sympy.core.relational import Eq
0.38 /testbed/sympy/solvers/diophantine.py(12): from sympy.core.singleton import S
0.38 /testbed/sympy/solvers/diophantine.py(13): from sympy.core.symbol import Symbol, symbols
0.38 /testbed/sympy/solvers/diophantine.py(14): from sympy.functions.elementary.complexes import sign
0.38 /testbed/sympy/solvers/diophantine.py(15): from sympy.functions.elementary.integers import floor
0.38 /testbed/sympy/solvers/diophantine.py(16): from sympy.functions.elementary.miscellaneous import sqrt
0.38 /testbed/sympy/solvers/diophantine.py(17): from sympy.matrices.dense import MutableDenseMatrix as Matrix
0.38 /testbed/sympy/solvers/diophantine.py(18): from sympy.ntheory.factor_ import (
0.38 /testbed/sympy/solvers/diophantine.py(20): from sympy.ntheory.generate import nextprime
0.38 /testbed/sympy/solvers/diophantine.py(21): from sympy.ntheory.primetest import is_square, isprime
0.38 /testbed/sympy/solvers/diophantine.py(22): from sympy.ntheory.residue_ntheory import sqrt_mod
0.38 /testbed/sympy/solvers/diophantine.py(23): from sympy.polys.polyerrors import GeneratorsNeeded
0.38 /testbed/sympy/solvers/diophantine.py(24): from sympy.polys.polytools import Poly, factor_list
0.38 /testbed/sympy/solvers/diophantine.py(25): from sympy.simplify.simplify import signsimp
0.38 /testbed/sympy/solvers/diophantine.py(26): from sympy.solvers.solvers import check_assumptions
0.38 /testbed/sympy/solvers/diophantine.py(27): from sympy.solvers.solveset import solveset_real
0.38 /testbed/sympy/solvers/diophantine.py(28): from sympy.utilities import default_sort_key, numbered_symbols
0.38 /testbed/sympy/solvers/diophantine.py(29): from sympy.utilities.misc import filldedent
0.38 /testbed/sympy/solvers/diophantine.py(34): __all__ = ['diophantine', 'classify_diop']
0.38 /testbed/sympy/solvers/diophantine.py(38): diop_known = {
0.38 /testbed/sympy/solvers/diophantine.py(53): def _is_int(i):
0.38 /testbed/sympy/solvers/diophantine.py(61): def _sorted_tuple(*i):
0.38 /testbed/sympy/solvers/diophantine.py(65): def _remove_gcd(*x):
0.38 /testbed/sympy/solvers/diophantine.py(80): def _rational_pq(a, b):
0.38 /testbed/sympy/solvers/diophantine.py(85): def _nint_or_floor(p, q):
0.38 /testbed/sympy/solvers/diophantine.py(93): def _odd(i):
0.38 /testbed/sympy/solvers/diophantine.py(97): def _even(i):
0.38 /testbed/sympy/solvers/diophantine.py(101): def diophantine(eq, param=symbols("t", integer=True), syms=None,
0.38 /testbed/sympy/solvers/diophantine.py(102):                 permute=False):
0.38 /testbed/sympy/solvers/diophantine.py(101): def diophantine(eq, param=symbols("t", integer=True), syms=None,
0.38 /testbed/sympy/solvers/diophantine.py(354): def merge_solution(var, var_t, solution):
0.38 /testbed/sympy/solvers/diophantine.py(386): def diop_solve(eq, param=symbols("t", integer=True)):
0.38 /testbed/sympy/solvers/diophantine.py(476): def classify_diop(eq, _dict=True):
0.38 /testbed/sympy/solvers/diophantine.py(556): classify_diop.func_doc = '''
0.38 /testbed/sympy/solvers/diophantine.py(591):     ''' % ('\n    * '.join(sorted(diop_known)))
0.38 /testbed/sympy/solvers/diophantine.py(556): classify_diop.func_doc = '''
0.38 /testbed/sympy/solvers/diophantine.py(594): def diop_linear(eq, param=symbols("t", integer=True)):
0.38 /testbed/sympy/solvers/diophantine.py(640): def _diop_linear(var, coeff, param):
0.38 /testbed/sympy/solvers/diophantine.py(817): def base_solution_linear(c, a, b, t=None):
0.38 /testbed/sympy/solvers/diophantine.py(871): def divisible(a, b):
0.38 /testbed/sympy/solvers/diophantine.py(878): def diop_quadratic(eq, param=symbols("t", integer=True)):
0.38 /testbed/sympy/solvers/diophantine.py(927): def _diop_quadratic(var, coeff, t):
0.38 /testbed/sympy/solvers/diophantine.py(1108): def is_solution_quad(var, coeff, u, v):
0.38 /testbed/sympy/solvers/diophantine.py(1121): def diop_DN(D, N, t=symbols("t", integer=True)):
0.38 /testbed/sympy/solvers/diophantine.py(1317): def _special_diop_DN(D, N):
0.38 /testbed/sympy/solvers/diophantine.py(1412): def cornacchia(a, b, m):
0.38 /testbed/sympy/solvers/diophantine.py(1474): def PQa(P_0, Q_0, D):
0.38 /testbed/sympy/solvers/diophantine.py(1534): def diop_bf_DN(D, N, t=symbols("t", integer=True)):
0.38 /testbed/sympy/solvers/diophantine.py(1622): def equivalent(u, v, r, s, D, N):
0.38 /testbed/sympy/solvers/diophantine.py(1658): def length(P, Q, D):
0.38 /testbed/sympy/solvers/diophantine.py(1703): def transformation_to_DN(eq):
0.38 /testbed/sympy/solvers/diophantine.py(1784): def _transformation_to_DN(var, coeff):
0.38 /testbed/sympy/solvers/diophantine.py(1835): def find_DN(eq):
0.38 /testbed/sympy/solvers/diophantine.py(1879): def _find_DN(var, coeff):
0.38 /testbed/sympy/solvers/diophantine.py(1896): def check_param(x, y, a, t):
0.38 /testbed/sympy/solvers/diophantine.py(1924): def diop_ternary_quadratic(eq):
0.38 /testbed/sympy/solvers/diophantine.py(1966): def _diop_ternary_quadratic(_var, coeff):
0.38 /testbed/sympy/solvers/diophantine.py(2065): def transformation_to_normal(eq):
0.38 /testbed/sympy/solvers/diophantine.py(2081): def _transformation_to_normal(var, coeff):
0.38 /testbed/sympy/solvers/diophantine.py(2165): def parametrize_ternary_quadratic(eq):
0.38 /testbed/sympy/solvers/diophantine.py(2230): def _parametrize_ternary_quadratic(solution, _var, coeff):
0.38 /testbed/sympy/solvers/diophantine.py(2270): def diop_ternary_quadratic_normal(eq):
0.38 /testbed/sympy/solvers/diophantine.py(2303): def _diop_ternary_quadratic_normal(var, coeff):
0.38 /testbed/sympy/solvers/diophantine.py(2364): def sqf_normal(a, b, c, steps=False):
0.38 /testbed/sympy/solvers/diophantine.py(2421): def square_factor(a):
0.38 /testbed/sympy/solvers/diophantine.py(2447): def reconstruct(A, B, z):
0.38 /testbed/sympy/solvers/diophantine.py(2462): def ldescent(A, B):
0.38 /testbed/sympy/solvers/diophantine.py(2531): def descent(A, B):
0.38 /testbed/sympy/solvers/diophantine.py(2584): def gaussian_reduce(w, a, b):
0.38 /testbed/sympy/solvers/diophantine.py(2625): def dot(u, v, w, a, b):
0.38 /testbed/sympy/solvers/diophantine.py(2636): def norm(u, w, a, b):
0.38 /testbed/sympy/solvers/diophantine.py(2646): def holzer(x, y, z, a, b, c):
0.38 /testbed/sympy/solvers/diophantine.py(2710): def diop_general_pythagorean(eq, param=symbols("m", integer=True)):
0.38 /testbed/sympy/solvers/diophantine.py(2741): def _diop_general_pythagorean(var, coeff, t):
0.38 /testbed/sympy/solvers/diophantine.py(2774): def diop_general_sum_of_squares(eq, limit=1):
0.38 /testbed/sympy/solvers/diophantine.py(2814): def _diop_general_sum_of_squares(var, k, limit=1):
0.38 /testbed/sympy/solvers/diophantine.py(2840): def diop_general_sum_of_even_powers(eq, limit=1):
0.38 /testbed/sympy/solvers/diophantine.py(2876): def _diop_general_sum_of_even_powers(var, p, n, limit=1):
0.38 /testbed/sympy/solvers/diophantine.py(2905): def partition(n, k=None, zeros=False):
0.38 /testbed/sympy/solvers/diophantine.py(2959): def prime_as_sum_of_two_squares(p):
0.38 /testbed/sympy/solvers/diophantine.py(3002): def sum_of_three_squares(n):
0.38 /testbed/sympy/solvers/diophantine.py(3081): def sum_of_four_squares(n):
0.38 /testbed/sympy/solvers/diophantine.py(3131): def power_representation(n, p, k, zeros=False):
0.38 /testbed/sympy/solvers/diophantine.py(3242): sum_of_powers = power_representation
0.38 /testbed/sympy/solvers/diophantine.py(3245): def pow_rep_recursive(n_i, k, n_remaining, terms, p):
0.38 /testbed/sympy/solvers/diophantine.py(3259): def sum_of_squares(n, k, zeros=False):
0.38 /testbed/sympy/solvers/diophantine.py(3307): def _can_do_sum_of_squares(n, k):
============================= test process starts ==============================
executable:         /opt/miniconda3/envs/testbed/bin/python3  (3.9.23-final-0) [CPython]
architecture:       64-bit
cache:              no
ground types:       python 
numpy:              None
random seed:        59523364
hash randomization: on (PYTHONHASHSEED=1788775774)

sympy/polys/tests/test_coverup_sympy__sympy-18189.py[1] 
test_diophantine_permute_syms_order_bug 0.54 /testbed/sympy/solvers/diophantine.py(168):     from sympy.utilities.iterables import (
0.54 /testbed/sympy/solvers/diophantine.py(171):     if isinstance(eq, Eq):
0.54 /testbed/sympy/solvers/diophantine.py(174):     try:
0.54 /testbed/sympy/solvers/diophantine.py(175):         var = list(eq.expand(force=True).free_symbols)
0.54 /testbed/sympy/solvers/diophantine.py(176):         var.sort(key=default_sort_key)
0.54 /testbed/sympy/solvers/diophantine.py(177):         if syms:
0.54 /testbed/sympy/solvers/diophantine.py(178):             if not is_sequence(syms):
0.54 /testbed/sympy/solvers/diophantine.py(181):             syms = [i for i in syms if i in var]
0.54 /testbed/sympy/solvers/diophantine.py(181):             syms = [i for i in syms if i in var]
0.54 /testbed/sympy/solvers/diophantine.py(181):             syms = [i for i in syms if i in var]
0.54 /testbed/sympy/solvers/diophantine.py(181):             syms = [i for i in syms if i in var]
0.54 /testbed/sympy/solvers/diophantine.py(182):             if syms != var:
0.54 /testbed/sympy/solvers/diophantine.py(186):         n, d = eq.as_numer_denom()
0.54 /testbed/sympy/solvers/diophantine.py(187):         if n.is_number:
0.54 /testbed/sympy/solvers/diophantine.py(189):         if not d.is_number:
0.54 /testbed/sympy/solvers/diophantine.py(194):             eq = n
0.54 /testbed/sympy/solvers/diophantine.py(195):         eq = factor_terms(eq)
0.54 /testbed/sympy/solvers/diophantine.py(196):         assert not eq.is_number
0.54 /testbed/sympy/solvers/diophantine.py(197):         eq = eq.as_independent(*var, as_Add=False)[1]
0.61 /testbed/sympy/solvers/diophantine.py(198):         p = Poly(eq)
0.61 /testbed/sympy/solvers/diophantine.py(199):         assert not any(g.is_number for g in p.gens)
0.61 /testbed/sympy/solvers/diophantine.py(199):         assert not any(g.is_number for g in p.gens)
0.61 /testbed/sympy/solvers/diophantine.py(199):         assert not any(g.is_number for g in p.gens)
0.61 /testbed/sympy/solvers/diophantine.py(199):         assert not any(g.is_number for g in p.gens)
0.61 /testbed/sympy/solvers/diophantine.py(200):         eq = p.as_expr()
0.61 /testbed/sympy/solvers/diophantine.py(201):         assert eq.is_polynomial()
0.61 /testbed/sympy/solvers/diophantine.py(207):     do_permute_signs = False
0.61 /testbed/sympy/solvers/diophantine.py(209):     do_permute_signs_var = False
0.61 /testbed/sympy/solvers/diophantine.py(211):     permute_few_signs = False
0.61 /testbed/sympy/solvers/diophantine.py(212):     try:
0.61 /testbed/sympy/solvers/diophantine.py(215):         v, c, t = classify_diop(eq)
0.61 /testbed/sympy/solvers/diophantine.py(478):     try:
0.61 /testbed/sympy/solvers/diophantine.py(479):         var = list(eq.free_symbols)
0.61 /testbed/sympy/solvers/diophantine.py(480):         assert var
0.61 /testbed/sympy/solvers/diophantine.py(483):     var.sort(key=default_sort_key)
0.61 /testbed/sympy/solvers/diophantine.py(484):     eq = eq.expand(force=True)
0.61 /testbed/sympy/solvers/diophantine.py(485):     coeff = eq.as_coefficients_dict()
0.61 /testbed/sympy/solvers/diophantine.py(486):     if not all(_is_int(c) for c in coeff.values()):
0.61 /testbed/sympy/solvers/diophantine.py(486):     if not all(_is_int(c) for c in coeff.values()):
0.61 /testbed/sympy/solvers/diophantine.py(54):     try:
0.61 /testbed/sympy/solvers/diophantine.py(55):         as_int(i)
0.61 /testbed/sympy/solvers/diophantine.py(56):         return True
0.61 /testbed/sympy/solvers/diophantine.py(486):     if not all(_is_int(c) for c in coeff.values()):
0.61 /testbed/sympy/solvers/diophantine.py(54):     try:
0.61 /testbed/sympy/solvers/diophantine.py(55):         as_int(i)
0.61 /testbed/sympy/solvers/diophantine.py(56):         return True
0.61 /testbed/sympy/solvers/diophantine.py(486):     if not all(_is_int(c) for c in coeff.values()):
0.61 /testbed/sympy/solvers/diophantine.py(54):     try:
0.61 /testbed/sympy/solvers/diophantine.py(55):         as_int(i)
0.61 /testbed/sympy/solvers/diophantine.py(56):         return True
0.61 /testbed/sympy/solvers/diophantine.py(486):     if not all(_is_int(c) for c in coeff.values()):
0.61 /testbed/sympy/solvers/diophantine.py(489):     diop_type = None
0.61 /testbed/sympy/solvers/diophantine.py(490):     total_degree = Poly(eq).total_degree()
0.61 /testbed/sympy/solvers/diophantine.py(491):     homogeneous = 1 not in coeff
0.61 /testbed/sympy/solvers/diophantine.py(492):     if total_degree == 1:
0.61 /testbed/sympy/solvers/diophantine.py(495):     elif len(var) == 1:
0.61 /testbed/sympy/solvers/diophantine.py(498):     elif total_degree == 2 and len(var) == 2:
0.61 /testbed/sympy/solvers/diophantine.py(501):     elif total_degree == 2 and len(var) == 3 and homogeneous:
0.61 /testbed/sympy/solvers/diophantine.py(511):     elif total_degree == 2 and len(var) >= 3:
0.61 /testbed/sympy/solvers/diophantine.py(531):     elif total_degree == 3 and len(var) == 2:
0.61 /testbed/sympy/solvers/diophantine.py(534):     elif (total_degree > 3 and total_degree % 2 == 0 and
0.61 /testbed/sympy/solvers/diophantine.py(535):             all(k.is_Pow and k.exp == total_degree for k in coeff if k != 1)):
0.61 /testbed/sympy/solvers/diophantine.py(535):             all(k.is_Pow and k.exp == total_degree for k in coeff if k != 1)):
0.61 /testbed/sympy/solvers/diophantine.py(535):             all(k.is_Pow and k.exp == total_degree for k in coeff if k != 1)):
0.61 /testbed/sympy/solvers/diophantine.py(535):             all(k.is_Pow and k.exp == total_degree for k in coeff if k != 1)):
0.61 /testbed/sympy/solvers/diophantine.py(535):             all(k.is_Pow and k.exp == total_degree for k in coeff if k != 1)):
0.61 /testbed/sympy/solvers/diophantine.py(534):     elif (total_degree > 3 and total_degree % 2 == 0 and
0.61 /testbed/sympy/solvers/diophantine.py(536):         if all(coeff[k] == 1 for k in coeff if k != 1):
0.61 /testbed/sympy/solvers/diophantine.py(536):         if all(coeff[k] == 1 for k in coeff if k != 1):
0.61 /testbed/sympy/solvers/diophantine.py(536):         if all(coeff[k] == 1 for k in coeff if k != 1):
0.61 /testbed/sympy/solvers/diophantine.py(536):         if all(coeff[k] == 1 for k in coeff if k != 1):
0.61 /testbed/sympy/solvers/diophantine.py(536):         if all(coeff[k] == 1 for k in coeff if k != 1):
0.61 /testbed/sympy/solvers/diophantine.py(537):             diop_type = 'general_sum_of_even_powers'
0.61 /testbed/sympy/solvers/diophantine.py(539):     if diop_type is not None:
0.61 /testbed/sympy/solvers/diophantine.py(540):         return var, dict(coeff) if _dict else coeff, diop_type
0.61 /testbed/sympy/solvers/diophantine.py(218):         if permute:
0.61 /testbed/sympy/solvers/diophantine.py(219):             len_var = len(v)
0.61 /testbed/sympy/solvers/diophantine.py(221):                 'general_sum_of_squares',
0.61 /testbed/sympy/solvers/diophantine.py(222):                 'general_sum_of_even_powers']
0.61 /testbed/sympy/solvers/diophantine.py(220):             permute_signs_for = [
0.61 /testbed/sympy/solvers/diophantine.py(223):             permute_signs_check = [
0.61 /testbed/sympy/solvers/diophantine.py(227):             if t in permute_signs_for:
0.61 /testbed/sympy/solvers/diophantine.py(228):                 do_permute_signs_var = True
0.61 /testbed/sympy/solvers/diophantine.py(291):         if t == 'general_sum_of_squares':
0.61 /testbed/sympy/solvers/diophantine.py(295):             raise TypeError
0.61 /testbed/sympy/solvers/diophantine.py(296):     except (TypeError, NotImplementedError):
0.61 /testbed/sympy/solvers/diophantine.py(297):         terms = factor_list(eq)[1]
0.62 /testbed/sympy/solvers/diophantine.py(299):     sols = set([])
0.62 /testbed/sympy/solvers/diophantine.py(301):     for term in terms:
0.62 /testbed/sympy/solvers/diophantine.py(303):         base, _ = term
0.62 /testbed/sympy/solvers/diophantine.py(304):         var_t, _, eq_type = classify_diop(base, _dict=False)
0.62 /testbed/sympy/solvers/diophantine.py(478):     try:
0.62 /testbed/sympy/solvers/diophantine.py(479):         var = list(eq.free_symbols)
0.62 /testbed/sympy/solvers/diophantine.py(480):         assert var
0.62 /testbed/sympy/solvers/diophantine.py(483):     var.sort(key=default_sort_key)
0.62 /testbed/sympy/solvers/diophantine.py(484):     eq = eq.expand(force=True)
0.62 /testbed/sympy/solvers/diophantine.py(485):     coeff = eq.as_coefficients_dict()
0.62 /testbed/sympy/solvers/diophantine.py(486):     if not all(_is_int(c) for c in coeff.values()):
0.62 /testbed/sympy/solvers/diophantine.py(486):     if not all(_is_int(c) for c in coeff.values()):
0.62 /testbed/sympy/solvers/diophantine.py(54):     try:
0.62 /testbed/sympy/solvers/diophantine.py(55):         as_int(i)
0.62 /testbed/sympy/solvers/diophantine.py(56):         return True
0.62 /testbed/sympy/solvers/diophantine.py(486):     if not all(_is_int(c) for c in coeff.values()):
0.62 /testbed/sympy/solvers/diophantine.py(54):     try:
0.62 /testbed/sympy/solvers/diophantine.py(55):         as_int(i)
0.62 /testbed/sympy/solvers/diophantine.py(56):         return True
0.62 /testbed/sympy/solvers/diophantine.py(486):     if not all(_is_int(c) for c in coeff.values()):
0.62 /testbed/sympy/solvers/diophantine.py(54):     try:
0.62 /testbed/sympy/solvers/diophantine.py(55):         as_int(i)
0.62 /testbed/sympy/solvers/diophantine.py(56):         return True
0.62 /testbed/sympy/solvers/diophantine.py(486):     if not all(_is_int(c) for c in coeff.values()):
0.62 /testbed/sympy/solvers/diophantine.py(489):     diop_type = None
0.62 /testbed/sympy/solvers/diophantine.py(490):     total_degree = Poly(eq).total_degree()
0.62 /testbed/sympy/solvers/diophantine.py(491):     homogeneous = 1 not in coeff
0.62 /testbed/sympy/solvers/diophantine.py(492):     if total_degree == 1:
0.62 /testbed/sympy/solvers/diophantine.py(495):     elif len(var) == 1:
0.62 /testbed/sympy/solvers/diophantine.py(498):     elif total_degree == 2 and len(var) == 2:
0.62 /testbed/sympy/solvers/diophantine.py(501):     elif total_degree == 2 and len(var) == 3 and homogeneous:
0.62 /testbed/sympy/solvers/diophantine.py(511):     elif total_degree == 2 and len(var) >= 3:
0.62 /testbed/sympy/solvers/diophantine.py(531):     elif total_degree == 3 and len(var) == 2:
0.62 /testbed/sympy/solvers/diophantine.py(534):     elif (total_degree > 3 and total_degree % 2 == 0 and
0.62 /testbed/sympy/solvers/diophantine.py(535):             all(k.is_Pow and k.exp == total_degree for k in coeff if k != 1)):
0.62 /testbed/sympy/solvers/diophantine.py(535):             all(k.is_Pow and k.exp == total_degree for k in coeff if k != 1)):
0.62 /testbed/sympy/solvers/diophantine.py(535):             all(k.is_Pow and k.exp == total_degree for k in coeff if k != 1)):
0.62 /testbed/sympy/solvers/diophantine.py(535):             all(k.is_Pow and k.exp == total_degree for k in coeff if k != 1)):
0.62 /testbed/sympy/solvers/diophantine.py(535):             all(k.is_Pow and k.exp == total_degree for k in coeff if k != 1)):
0.62 /testbed/sympy/solvers/diophantine.py(534):     elif (total_degree > 3 and total_degree % 2 == 0 and
0.62 /testbed/sympy/solvers/diophantine.py(536):         if all(coeff[k] == 1 for k in coeff if k != 1):
0.62 /testbed/sympy/solvers/diophantine.py(536):         if all(coeff[k] == 1 for k in coeff if k != 1):
0.62 /testbed/sympy/solvers/diophantine.py(536):         if all(coeff[k] == 1 for k in coeff if k != 1):
0.62 /testbed/sympy/solvers/diophantine.py(536):         if all(coeff[k] == 1 for k in coeff if k != 1):
0.62 /testbed/sympy/solvers/diophantine.py(536):         if all(coeff[k] == 1 for k in coeff if k != 1):
0.62 /testbed/sympy/solvers/diophantine.py(537):             diop_type = 'general_sum_of_even_powers'
0.62 /testbed/sympy/solvers/diophantine.py(539):     if diop_type is not None:
0.62 /testbed/sympy/solvers/diophantine.py(540):         return var, dict(coeff) if _dict else coeff, diop_type
0.62 /testbed/sympy/solvers/diophantine.py(305):         _, base = signsimp(base, evaluate=False).as_coeff_Mul()
0.63 /testbed/sympy/solvers/diophantine.py(306):         solution = diop_solve(base, param)
0.63 /testbed/sympy/solvers/diophantine.py(430):     var, coeff, eq_type = classify_diop(eq, _dict=False)
0.63 /testbed/sympy/solvers/diophantine.py(478):     try:
0.63 /testbed/sympy/solvers/diophantine.py(479):         var = list(eq.free_symbols)
0.63 /testbed/sympy/solvers/diophantine.py(480):         assert var
0.63 /testbed/sympy/solvers/diophantine.py(483):     var.sort(key=default_sort_key)
0.63 /testbed/sympy/solvers/diophantine.py(484):     eq = eq.expand(force=True)
0.63 /testbed/sympy/solvers/diophantine.py(485):     coeff = eq.as_coefficients_dict()
0.63 /testbed/sympy/solvers/diophantine.py(486):     if not all(_is_int(c) for c in coeff.values()):
0.63 /testbed/sympy/solvers/diophantine.py(486):     if not all(_is_int(c) for c in coeff.values()):
0.63 /testbed/sympy/solvers/diophantine.py(54):     try:
0.63 /testbed/sympy/solvers/diophantine.py(55):         as_int(i)
0.63 /testbed/sympy/solvers/diophantine.py(56):         return True
0.63 /testbed/sympy/solvers/diophantine.py(486):     if not all(_is_int(c) for c in coeff.values()):
0.63 /testbed/sympy/solvers/diophantine.py(54):     try:
0.63 /testbed/sympy/solvers/diophantine.py(55):         as_int(i)
0.63 /testbed/sympy/solvers/diophantine.py(56):         return True
0.63 /testbed/sympy/solvers/diophantine.py(486):     if not all(_is_int(c) for c in coeff.values()):
0.63 /testbed/sympy/solvers/diophantine.py(54):     try:
0.63 /testbed/sympy/solvers/diophantine.py(55):         as_int(i)
0.63 /testbed/sympy/solvers/diophantine.py(56):         return True
0.63 /testbed/sympy/solvers/diophantine.py(486):     if not all(_is_int(c) for c in coeff.values()):
0.63 /testbed/sympy/solvers/diophantine.py(489):     diop_type = None
0.63 /testbed/sympy/solvers/diophantine.py(490):     total_degree = Poly(eq).total_degree()
0.63 /testbed/sympy/solvers/diophantine.py(491):     homogeneous = 1 not in coeff
0.63 /testbed/sympy/solvers/diophantine.py(492):     if total_degree == 1:
0.63 /testbed/sympy/solvers/diophantine.py(495):     elif len(var) == 1:
0.63 /testbed/sympy/solvers/diophantine.py(498):     elif total_degree == 2 and len(var) == 2:
0.63 /testbed/sympy/solvers/diophantine.py(501):     elif total_degree == 2 and len(var) == 3 and homogeneous:
0.63 /testbed/sympy/solvers/diophantine.py(511):     elif total_degree == 2 and len(var) >= 3:
0.63 /testbed/sympy/solvers/diophantine.py(531):     elif total_degree == 3 and len(var) == 2:
0.63 /testbed/sympy/solvers/diophantine.py(534):     elif (total_degree > 3 and total_degree % 2 == 0 and
0.63 /testbed/sympy/solvers/diophantine.py(535):             all(k.is_Pow and k.exp == total_degree for k in coeff if k != 1)):
0.63 /testbed/sympy/solvers/diophantine.py(535):             all(k.is_Pow and k.exp == total_degree for k in coeff if k != 1)):
0.63 /testbed/sympy/solvers/diophantine.py(535):             all(k.is_Pow and k.exp == total_degree for k in coeff if k != 1)):
0.63 /testbed/sympy/solvers/diophantine.py(535):             all(k.is_Pow and k.exp == total_degree for k in coeff if k != 1)):
0.63 /testbed/sympy/solvers/diophantine.py(535):             all(k.is_Pow and k.exp == total_degree for k in coeff if k != 1)):
0.63 /testbed/sympy/solvers/diophantine.py(534):     elif (total_degree > 3 and total_degree % 2 == 0 and
0.63 /testbed/sympy/solvers/diophantine.py(536):         if all(coeff[k] == 1 for k in coeff if k != 1):
0.63 /testbed/sympy/solvers/diophantine.py(536):         if all(coeff[k] == 1 for k in coeff if k != 1):
0.63 /testbed/sympy/solvers/diophantine.py(536):         if all(coeff[k] == 1 for k in coeff if k != 1):
0.63 /testbed/sympy/solvers/diophantine.py(536):         if all(coeff[k] == 1 for k in coeff if k != 1):
0.63 /testbed/sympy/solvers/diophantine.py(536):         if all(coeff[k] == 1 for k in coeff if k != 1):
0.63 /testbed/sympy/solvers/diophantine.py(537):             diop_type = 'general_sum_of_even_powers'
0.63 /testbed/sympy/solvers/diophantine.py(539):     if diop_type is not None:
0.63 /testbed/sympy/solvers/diophantine.py(540):         return var, dict(coeff) if _dict else coeff, diop_type
0.63 /testbed/sympy/solvers/diophantine.py(432):     if eq_type == "linear":
0.63 /testbed/sympy/solvers/diophantine.py(435):     elif eq_type == "binary_quadratic":
0.63 /testbed/sympy/solvers/diophantine.py(438):     elif eq_type == "homogeneous_ternary_quadratic":
0.63 /testbed/sympy/solvers/diophantine.py(443):     elif eq_type == "homogeneous_ternary_quadratic_normal":
0.63 /testbed/sympy/solvers/diophantine.py(448):     elif eq_type == "general_pythagorean":
0.63 /testbed/sympy/solvers/diophantine.py(451):     elif eq_type == "univariate":
0.63 /testbed/sympy/solvers/diophantine.py(455):     elif eq_type == "general_sum_of_squares":
0.63 /testbed/sympy/solvers/diophantine.py(458):     elif eq_type == "general_sum_of_even_powers":
0.63 /testbed/sympy/solvers/diophantine.py(459):         for k in coeff.keys():
0.63 /testbed/sympy/solvers/diophantine.py(460):             if k.is_Pow and coeff[k]:
0.63 /testbed/sympy/solvers/diophantine.py(459):         for k in coeff.keys():
0.63 /testbed/sympy/solvers/diophantine.py(460):             if k.is_Pow and coeff[k]:
0.63 /testbed/sympy/solvers/diophantine.py(461):                 p = k.exp
0.63 /testbed/sympy/solvers/diophantine.py(459):         for k in coeff.keys():
0.63 /testbed/sympy/solvers/diophantine.py(460):             if k.is_Pow and coeff[k]:
0.63 /testbed/sympy/solvers/diophantine.py(461):                 p = k.exp
0.63 /testbed/sympy/solvers/diophantine.py(459):         for k in coeff.keys():
0.63 /testbed/sympy/solvers/diophantine.py(462):         return _diop_general_sum_of_even_powers(var, p, -int(coeff[1]), limit=S.Infinity)
0.63 /testbed/sympy/solvers/diophantine.py(2878):     k = len(var)
0.63 /testbed/sympy/solvers/diophantine.py(2880):     s = set()
0.63 /testbed/sympy/solvers/diophantine.py(2882):     if n < 0 or limit < 1:
0.63 /testbed/sympy/solvers/diophantine.py(2885):     sign = [-1 if x.is_nonpositive else 1 for x in var]
0.63 /testbed/sympy/solvers/diophantine.py(2885):     sign = [-1 if x.is_nonpositive else 1 for x in var]
0.63 /testbed/sympy/solvers/diophantine.py(2885):     sign = [-1 if x.is_nonpositive else 1 for x in var]
0.63 /testbed/sympy/solvers/diophantine.py(2885):     sign = [-1 if x.is_nonpositive else 1 for x in var]
0.63 /testbed/sympy/solvers/diophantine.py(2886):     negs = sign.count(-1) != 0
0.63 /testbed/sympy/solvers/diophantine.py(2888):     took = 0
0.63 /testbed/sympy/solvers/diophantine.py(2889):     for t in power_representation(n, p, k):
0.63 /testbed/sympy/solvers/diophantine.py(3177):     n, p, k = [as_int(i) for i in (n, p, k)]
0.63 /testbed/sympy/solvers/diophantine.py(3177):     n, p, k = [as_int(i) for i in (n, p, k)]
0.63 /testbed/sympy/solvers/diophantine.py(3177):     n, p, k = [as_int(i) for i in (n, p, k)]
0.63 /testbed/sympy/solvers/diophantine.py(3177):     n, p, k = [as_int(i) for i in (n, p, k)]
0.63 /testbed/sympy/solvers/diophantine.py(3177):     n, p, k = [as_int(i) for i in (n, p, k)]
0.63 /testbed/sympy/solvers/diophantine.py(3179):     if n < 0:
0.63 /testbed/sympy/solvers/diophantine.py(3185):     if p < 1 or k < 1:
0.63 /testbed/sympy/solvers/diophantine.py(3190):     if n == 0:
0.63 /testbed/sympy/solvers/diophantine.py(3195):     if k == 1:
0.63 /testbed/sympy/solvers/diophantine.py(3207):     if p == 1:
0.63 /testbed/sympy/solvers/diophantine.py(3212):     if p == 2:
0.63 /testbed/sympy/solvers/diophantine.py(3225):     if k == 2 and p > 2:
0.63 /testbed/sympy/solvers/diophantine.py(3226):         be = perfect_power(n)
0.63 /testbed/sympy/solvers/diophantine.py(3227):         if be and be[1] % p == 0:
0.63 /testbed/sympy/solvers/diophantine.py(3230):     if n >= k:
0.63 /testbed/sympy/solvers/diophantine.py(3231):         a = integer_nthroot(n - (k - 1), p)[0]
0.63 /testbed/sympy/solvers/diophantine.py(3232):         for t in pow_rep_recursive(a, k, n, [], p):
0.63 /testbed/sympy/solvers/diophantine.py(3247):     if k == 0 and n_remaining == 0:
0.63 /testbed/sympy/solvers/diophantine.py(3250):         if n_i >= 1 and k > 0:
0.63 /testbed/sympy/solvers/diophantine.py(3251):             for t in pow_rep_recursive(n_i - 1, k, n_remaining, terms, p):
0.63 /testbed/sympy/solvers/diophantine.py(3247):     if k == 0 and n_remaining == 0:
0.63 /testbed/sympy/solvers/diophantine.py(3250):         if n_i >= 1 and k > 0:
0.63 /testbed/sympy/solvers/diophantine.py(3251):             for t in pow_rep_recursive(n_i - 1, k, n_remaining, terms, p):
0.63 /testbed/sympy/solvers/diophantine.py(3247):     if k == 0 and n_remaining == 0:
0.63 /testbed/sympy/solvers/diophantine.py(3250):         if n_i >= 1 and k > 0:
0.63 /testbed/sympy/solvers/diophantine.py(3251):             for t in pow_rep_recursive(n_i - 1, k, n_remaining, terms, p):
0.63 /testbed/sympy/solvers/diophantine.py(3247):     if k == 0 and n_remaining == 0:
0.63 /testbed/sympy/solvers/diophantine.py(3250):         if n_i >= 1 and k > 0:
0.63 /testbed/sympy/solvers/diophantine.py(3253):             residual = n_remaining - pow(n_i, p)
0.63 /testbed/sympy/solvers/diophantine.py(3254):             if residual >= 0:
0.63 /testbed/sympy/solvers/diophantine.py(3255):                 for t in pow_rep_recursive(n_i, k - 1, residual, terms + [n_i], p):
0.63 /testbed/sympy/solvers/diophantine.py(3247):     if k == 0 and n_remaining == 0:
0.63 /testbed/sympy/solvers/diophantine.py(3250):         if n_i >= 1 and k > 0:
0.63 /testbed/sympy/solvers/diophantine.py(3251):             for t in pow_rep_recursive(n_i - 1, k, n_remaining, terms, p):
0.63 /testbed/sympy/solvers/diophantine.py(3247):     if k == 0 and n_remaining == 0:
0.63 /testbed/sympy/solvers/diophantine.py(3250):         if n_i >= 1 and k > 0:
0.63 /testbed/sympy/solvers/diophantine.py(3253):             residual = n_remaining - pow(n_i, p)
0.63 /testbed/sympy/solvers/diophantine.py(3254):             if residual >= 0:
0.63 /testbed/sympy/solvers/diophantine.py(3255):                 for t in pow_rep_recursive(n_i, k - 1, residual, terms + [n_i], p):
0.63 /testbed/sympy/solvers/diophantine.py(3247):     if k == 0 and n_remaining == 0:
0.63 /testbed/sympy/solvers/diophantine.py(3250):         if n_i >= 1 and k > 0:
0.63 /testbed/sympy/solvers/diophantine.py(3253):             residual = n_remaining - pow(n_i, p)
0.63 /testbed/sympy/solvers/diophantine.py(3254):             if residual >= 0:
0.63 /testbed/sympy/solvers/diophantine.py(3255):                 for t in pow_rep_recursive(n_i, k - 1, residual, terms + [n_i], p):
0.63 /testbed/sympy/solvers/diophantine.py(3247):     if k == 0 and n_remaining == 0:
0.63 /testbed/sympy/solvers/diophantine.py(3250):         if n_i >= 1 and k > 0:
0.63 /testbed/sympy/solvers/diophantine.py(3251):             for t in pow_rep_recursive(n_i - 1, k, n_remaining, terms, p):
0.63 /testbed/sympy/solvers/diophantine.py(3247):     if k == 0 and n_remaining == 0:
0.63 /testbed/sympy/solvers/diophantine.py(3250):         if n_i >= 1 and k > 0:
0.63 /testbed/sympy/solvers/diophantine.py(3251):             for t in pow_rep_recursive(n_i - 1, k, n_remaining, terms, p):
0.63 /testbed/sympy/solvers/diophantine.py(3247):     if k == 0 and n_remaining == 0:
0.63 /testbed/sympy/solvers/diophantine.py(3250):         if n_i >= 1 and k > 0:
0.63 /testbed/sympy/solvers/diophantine.py(3253):             residual = n_remaining - pow(n_i, p)
0.63 /testbed/sympy/solvers/diophantine.py(3254):             if residual >= 0:
0.63 /testbed/sympy/solvers/diophantine.py(3255):                 for t in pow_rep_recursive(n_i, k - 1, residual, terms + [n_i], p):
0.63 /testbed/sympy/solvers/diophantine.py(3247):     if k == 0 and n_remaining == 0:
0.63 /testbed/sympy/solvers/diophantine.py(3250):         if n_i >= 1 and k > 0:
0.63 /testbed/sympy/solvers/diophantine.py(3253):             residual = n_remaining - pow(n_i, p)
0.63 /testbed/sympy/solvers/diophantine.py(3254):             if residual >= 0:
0.63 /testbed/sympy/solvers/diophantine.py(3255):                 for t in pow_rep_recursive(n_i, k - 1, residual, terms + [n_i], p):
0.63 /testbed/sympy/solvers/diophantine.py(3247):     if k == 0 and n_remaining == 0:
0.63 /testbed/sympy/solvers/diophantine.py(3250):         if n_i >= 1 and k > 0:
0.63 /testbed/sympy/solvers/diophantine.py(3253):             residual = n_remaining - pow(n_i, p)
0.63 /testbed/sympy/solvers/diophantine.py(3254):             if residual >= 0:
0.63 /testbed/sympy/solvers/diophantine.py(3255):                 for t in pow_rep_recursive(n_i, k - 1, residual, terms + [n_i], p):
0.63 /testbed/sympy/solvers/diophantine.py(3247):     if k == 0 and n_remaining == 0:
0.63 /testbed/sympy/solvers/diophantine.py(3250):         if n_i >= 1 and k > 0:
0.63 /testbed/sympy/solvers/diophantine.py(3251):             for t in pow_rep_recursive(n_i - 1, k, n_remaining, terms, p):
0.63 /testbed/sympy/solvers/diophantine.py(3247):     if k == 0 and n_remaining == 0:
0.63 /testbed/sympy/solvers/diophantine.py(3250):         if n_i >= 1 and k > 0:
0.63 /testbed/sympy/solvers/diophantine.py(3251):             for t in pow_rep_recursive(n_i - 1, k, n_remaining, terms, p):
0.63 /testbed/sympy/solvers/diophantine.py(3247):     if k == 0 and n_remaining == 0:
0.63 /testbed/sympy/solvers/diophantine.py(3250):         if n_i >= 1 and k > 0:
0.63 /testbed/sympy/solvers/diophantine.py(3251):             for t in pow_rep_recursive(n_i - 1, k, n_remaining, terms, p):
0.63 /testbed/sympy/solvers/diophantine.py(3247):     if k == 0 and n_remaining == 0:
0.63 /testbed/sympy/solvers/diophantine.py(3250):         if n_i >= 1 and k > 0:
0.63 /testbed/sympy/solvers/diophantine.py(3253):             residual = n_remaining - pow(n_i, p)
0.63 /testbed/sympy/solvers/diophantine.py(3254):             if residual >= 0:
0.63 /testbed/sympy/solvers/diophantine.py(3255):                 for t in pow_rep_recursive(n_i, k - 1, residual, terms + [n_i], p):
0.63 /testbed/sympy/solvers/diophantine.py(3247):     if k == 0 and n_remaining == 0:
0.63 /testbed/sympy/solvers/diophantine.py(3250):         if n_i >= 1 and k > 0:
0.63 /testbed/sympy/solvers/diophantine.py(3253):             residual = n_remaining - pow(n_i, p)
0.63 /testbed/sympy/solvers/diophantine.py(3254):             if residual >= 0:
0.63 /testbed/sympy/solvers/diophantine.py(3255):                 for t in pow_rep_recursive(n_i, k - 1, residual, terms + [n_i], p):
0.63 /testbed/sympy/solvers/diophantine.py(3247):     if k == 0 and n_remaining == 0:
0.63 /testbed/sympy/solvers/diophantine.py(3248):         yield tuple(terms)
0.63 /testbed/sympy/solvers/diophantine.py(3256):                     yield t
0.63 /testbed/sympy/solvers/diophantine.py(3252):                 yield t
0.63 /testbed/sympy/solvers/diophantine.py(3256):                     yield t
0.63 /testbed/sympy/solvers/diophantine.py(3233):             yield tuple(reversed(t))
0.63 /testbed/sympy/solvers/diophantine.py(2890):         if negs:
0.63 /testbed/sympy/solvers/diophantine.py(2893):             s.add(t)
0.63 /testbed/sympy/solvers/diophantine.py(2894):         took += 1
0.63 /testbed/sympy/solvers/diophantine.py(2895):         if took == limit:
0.63 /testbed/sympy/solvers/diophantine.py(2889):     for t in power_representation(n, p, k):
0.63 /testbed/sympy/solvers/diophantine.py(3232):         for t in pow_rep_recursive(a, k, n, [], p):
0.63 /testbed/sympy/solvers/diophantine.py(3255):                 for t in pow_rep_recursive(n_i, k - 1, residual, terms + [n_i], p):
0.63 /testbed/sympy/solvers/diophantine.py(3251):             for t in pow_rep_recursive(n_i - 1, k, n_remaining, terms, p):
0.63 /testbed/sympy/solvers/diophantine.py(3255):                 for t in pow_rep_recursive(n_i, k - 1, residual, terms + [n_i], p):
0.63 /testbed/sympy/solvers/diophantine.py(3253):             residual = n_remaining - pow(n_i, p)
0.63 /testbed/sympy/solvers/diophantine.py(3254):             if residual >= 0:
0.63 /testbed/sympy/solvers/diophantine.py(3235):     if zeros:
0.63 /testbed/sympy/solvers/diophantine.py(2897):     return s
0.63 /testbed/sympy/solvers/diophantine.py(308):         if eq_type in [
0.63 /testbed/sympy/solvers/diophantine.py(315):         elif eq_type in [
0.63 /testbed/sympy/solvers/diophantine.py(320):             for sol in solution:
0.63 /testbed/sympy/solvers/diophantine.py(321):                 sols.add(merge_solution(var, var_t, sol))
0.63 /testbed/sympy/solvers/diophantine.py(366):     sol = []
0.63 /testbed/sympy/solvers/diophantine.py(368):     if None in solution:
0.63 /testbed/sympy/solvers/diophantine.py(371):     solution = iter(solution)
0.63 /testbed/sympy/solvers/diophantine.py(372):     params = numbered_symbols("n", integer=True, start=1)
0.63 /testbed/sympy/solvers/diophantine.py(373):     for v in var:
0.63 /testbed/sympy/solvers/diophantine.py(374):         if v in var_t:
0.63 /testbed/sympy/solvers/diophantine.py(375):             sol.append(next(solution))
0.63 /testbed/sympy/solvers/diophantine.py(373):     for v in var:
0.63 /testbed/sympy/solvers/diophantine.py(374):         if v in var_t:
0.63 /testbed/sympy/solvers/diophantine.py(375):             sol.append(next(solution))
0.63 /testbed/sympy/solvers/diophantine.py(373):     for v in var:
0.63 /testbed/sympy/solvers/diophantine.py(379):     for val, symb in zip(sol, var):
0.63 /testbed/sympy/solvers/diophantine.py(380):         if check_assumptions(val, **symb.assumptions0) is False:
0.63 /testbed/sympy/solvers/diophantine.py(379):     for val, symb in zip(sol, var):
0.63 /testbed/sympy/solvers/diophantine.py(380):         if check_assumptions(val, **symb.assumptions0) is False:
0.63 /testbed/sympy/solvers/diophantine.py(379):     for val, symb in zip(sol, var):
0.63 /testbed/sympy/solvers/diophantine.py(383):     return tuple(sol)
0.63 /testbed/sympy/solvers/diophantine.py(320):             for sol in solution:
0.63 /testbed/sympy/solvers/diophantine.py(301):     for term in terms:
0.63 /testbed/sympy/solvers/diophantine.py(327):     if () in sols:
0.63 /testbed/sympy/solvers/diophantine.py(329):     null = tuple([0]*len(var))
0.63 /testbed/sympy/solvers/diophantine.py(331):     if not sols and eq.subs(zip(var, null)).is_zero:
0.63 /testbed/sympy/solvers/diophantine.py(333):     final_soln = set([])
0.63 /testbed/sympy/solvers/diophantine.py(334):     for sol in sols:
0.63 /testbed/sympy/solvers/diophantine.py(335):         if all(_is_int(s) for s in sol):
0.63 /testbed/sympy/solvers/diophantine.py(335):         if all(_is_int(s) for s in sol):
0.63 /testbed/sympy/solvers/diophantine.py(54):     try:
0.63 /testbed/sympy/solvers/diophantine.py(55):         as_int(i)
0.63 /testbed/sympy/solvers/diophantine.py(56):         return True
0.63 /testbed/sympy/solvers/diophantine.py(335):         if all(_is_int(s) for s in sol):
0.63 /testbed/sympy/solvers/diophantine.py(54):     try:
0.63 /testbed/sympy/solvers/diophantine.py(55):         as_int(i)
0.63 /testbed/sympy/solvers/diophantine.py(56):         return True
0.63 /testbed/sympy/solvers/diophantine.py(335):         if all(_is_int(s) for s in sol):
0.63 /testbed/sympy/solvers/diophantine.py(336):             if do_permute_signs:
0.63 /testbed/sympy/solvers/diophantine.py(339):             elif permute_few_signs:
0.63 /testbed/sympy/solvers/diophantine.py(344):             elif do_permute_signs_var:
0.63 /testbed/sympy/solvers/diophantine.py(345):                 permuted_sign_var = set(signed_permutations(sol))
0.63 /testbed/sympy/solvers/diophantine.py(346):                 final_soln.update(permuted_sign_var)
0.63 /testbed/sympy/solvers/diophantine.py(334):     for sol in sols:
0.63 /testbed/sympy/solvers/diophantine.py(351):     return final_soln
0.63 /testbed/sympy/solvers/diophantine.py(168):     from sympy.utilities.iterables import (
0.63 /testbed/sympy/solvers/diophantine.py(171):     if isinstance(eq, Eq):
0.63 /testbed/sympy/solvers/diophantine.py(174):     try:
0.63 /testbed/sympy/solvers/diophantine.py(175):         var = list(eq.expand(force=True).free_symbols)
0.63 /testbed/sympy/solvers/diophantine.py(176):         var.sort(key=default_sort_key)
0.63 /testbed/sympy/solvers/diophantine.py(177):         if syms:
0.63 /testbed/sympy/solvers/diophantine.py(178):             if not is_sequence(syms):
0.63 /testbed/sympy/solvers/diophantine.py(181):             syms = [i for i in syms if i in var]
0.63 /testbed/sympy/solvers/diophantine.py(181):             syms = [i for i in syms if i in var]
0.63 /testbed/sympy/solvers/diophantine.py(181):             syms = [i for i in syms if i in var]
0.63 /testbed/sympy/solvers/diophantine.py(181):             syms = [i for i in syms if i in var]
0.63 /testbed/sympy/solvers/diophantine.py(182):             if syms != var:
0.63 /testbed/sympy/solvers/diophantine.py(183):                 dict_sym_index = dict(zip(syms, range(len(syms))))
0.63 /testbed/sympy/solvers/diophantine.py(184):                 return {tuple([t[dict_sym_index[i]] for i in var])
0.63 /testbed/sympy/solvers/diophantine.py(185):                             for t in diophantine(eq, param)}
0.63 /testbed/sympy/solvers/diophantine.py(168):     from sympy.utilities.iterables import (
0.63 /testbed/sympy/solvers/diophantine.py(171):     if isinstance(eq, Eq):
0.63 /testbed/sympy/solvers/diophantine.py(174):     try:
0.63 /testbed/sympy/solvers/diophantine.py(175):         var = list(eq.expand(force=True).free_symbols)
0.63 /testbed/sympy/solvers/diophantine.py(176):         var.sort(key=default_sort_key)
0.63 /testbed/sympy/solvers/diophantine.py(177):         if syms:
0.63 /testbed/sympy/solvers/diophantine.py(186):         n, d = eq.as_numer_denom()
0.63 /testbed/sympy/solvers/diophantine.py(187):         if n.is_number:
0.63 /testbed/sympy/solvers/diophantine.py(189):         if not d.is_number:
0.63 /testbed/sympy/solvers/diophantine.py(194):             eq = n
0.63 /testbed/sympy/solvers/diophantine.py(195):         eq = factor_terms(eq)
0.63 /testbed/sympy/solvers/diophantine.py(196):         assert not eq.is_number
0.63 /testbed/sympy/solvers/diophantine.py(197):         eq = eq.as_independent(*var, as_Add=False)[1]
0.70 /testbed/sympy/solvers/diophantine.py(198):         p = Poly(eq)
0.70 /testbed/sympy/solvers/diophantine.py(199):         assert not any(g.is_number for g in p.gens)
0.70 /testbed/sympy/solvers/diophantine.py(199):         assert not any(g.is_number for g in p.gens)
0.70 /testbed/sympy/solvers/diophantine.py(199):         assert not any(g.is_number for g in p.gens)
0.70 /testbed/sympy/solvers/diophantine.py(199):         assert not any(g.is_number for g in p.gens)
0.70 /testbed/sympy/solvers/diophantine.py(200):         eq = p.as_expr()
0.70 /testbed/sympy/solvers/diophantine.py(201):         assert eq.is_polynomial()
0.70 /testbed/sympy/solvers/diophantine.py(207):     do_permute_signs = False
0.70 /testbed/sympy/solvers/diophantine.py(209):     do_permute_signs_var = False
0.70 /testbed/sympy/solvers/diophantine.py(211):     permute_few_signs = False
0.70 /testbed/sympy/solvers/diophantine.py(212):     try:
0.70 /testbed/sympy/solvers/diophantine.py(215):         v, c, t = classify_diop(eq)
0.70 /testbed/sympy/solvers/diophantine.py(478):     try:
0.70 /testbed/sympy/solvers/diophantine.py(479):         var = list(eq.free_symbols)
0.70 /testbed/sympy/solvers/diophantine.py(480):         assert var
0.70 /testbed/sympy/solvers/diophantine.py(483):     var.sort(key=default_sort_key)
0.70 /testbed/sympy/solvers/diophantine.py(484):     eq = eq.expand(force=True)
0.70 /testbed/sympy/solvers/diophantine.py(485):     coeff = eq.as_coefficients_dict()
0.70 /testbed/sympy/solvers/diophantine.py(486):     if not all(_is_int(c) for c in coeff.values()):
0.70 /testbed/sympy/solvers/diophantine.py(486):     if not all(_is_int(c) for c in coeff.values()):
0.70 /testbed/sympy/solvers/diophantine.py(54):     try:
0.70 /testbed/sympy/solvers/diophantine.py(55):         as_int(i)
0.70 /testbed/sympy/solvers/diophantine.py(56):         return True
0.70 /testbed/sympy/solvers/diophantine.py(486):     if not all(_is_int(c) for c in coeff.values()):
0.70 /testbed/sympy/solvers/diophantine.py(54):     try:
0.70 /testbed/sympy/solvers/diophantine.py(55):         as_int(i)
0.70 /testbed/sympy/solvers/diophantine.py(56):         return True
0.70 /testbed/sympy/solvers/diophantine.py(486):     if not all(_is_int(c) for c in coeff.values()):
0.70 /testbed/sympy/solvers/diophantine.py(54):     try:
0.70 /testbed/sympy/solvers/diophantine.py(55):         as_int(i)
0.70 /testbed/sympy/solvers/diophantine.py(56):         return True
0.70 /testbed/sympy/solvers/diophantine.py(486):     if not all(_is_int(c) for c in coeff.values()):
0.70 /testbed/sympy/solvers/diophantine.py(489):     diop_type = None
0.70 /testbed/sympy/solvers/diophantine.py(490):     total_degree = Poly(eq).total_degree()
0.70 /testbed/sympy/solvers/diophantine.py(491):     homogeneous = 1 not in coeff
0.70 /testbed/sympy/solvers/diophantine.py(492):     if total_degree == 1:
0.70 /testbed/sympy/solvers/diophantine.py(495):     elif len(var) == 1:
0.70 /testbed/sympy/solvers/diophantine.py(498):     elif total_degree == 2 and len(var) == 2:
0.70 /testbed/sympy/solvers/diophantine.py(501):     elif total_degree == 2 and len(var) == 3 and homogeneous:
0.70 /testbed/sympy/solvers/diophantine.py(511):     elif total_degree == 2 and len(var) >= 3:
0.70 /testbed/sympy/solvers/diophantine.py(531):     elif total_degree == 3 and len(var) == 2:
0.70 /testbed/sympy/solvers/diophantine.py(534):     elif (total_degree > 3 and total_degree % 2 == 0 and
0.70 /testbed/sympy/solvers/diophantine.py(535):             all(k.is_Pow and k.exp == total_degree for k in coeff if k != 1)):
0.70 /testbed/sympy/solvers/diophantine.py(535):             all(k.is_Pow and k.exp == total_degree for k in coeff if k != 1)):
0.70 /testbed/sympy/solvers/diophantine.py(535):             all(k.is_Pow and k.exp == total_degree for k in coeff if k != 1)):
0.70 /testbed/sympy/solvers/diophantine.py(535):             all(k.is_Pow and k.exp == total_degree for k in coeff if k != 1)):
0.70 /testbed/sympy/solvers/diophantine.py(535):             all(k.is_Pow and k.exp == total_degree for k in coeff if k != 1)):
0.70 /testbed/sympy/solvers/diophantine.py(534):     elif (total_degree > 3 and total_degree % 2 == 0 and
0.70 /testbed/sympy/solvers/diophantine.py(536):         if all(coeff[k] == 1 for k in coeff if k != 1):
0.70 /testbed/sympy/solvers/diophantine.py(536):         if all(coeff[k] == 1 for k in coeff if k != 1):
0.70 /testbed/sympy/solvers/diophantine.py(536):         if all(coeff[k] == 1 for k in coeff if k != 1):
0.70 /testbed/sympy/solvers/diophantine.py(536):         if all(coeff[k] == 1 for k in coeff if k != 1):
0.70 /testbed/sympy/solvers/diophantine.py(536):         if all(coeff[k] == 1 for k in coeff if k != 1):
0.70 /testbed/sympy/solvers/diophantine.py(537):             diop_type = 'general_sum_of_even_powers'
0.70 /testbed/sympy/solvers/diophantine.py(539):     if diop_type is not None:
0.70 /testbed/sympy/solvers/diophantine.py(540):         return var, dict(coeff) if _dict else coeff, diop_type
0.70 /testbed/sympy/solvers/diophantine.py(218):         if permute:
0.70 /testbed/sympy/solvers/diophantine.py(291):         if t == 'general_sum_of_squares':
0.70 /testbed/sympy/solvers/diophantine.py(295):             raise TypeError
0.70 /testbed/sympy/solvers/diophantine.py(296):     except (TypeError, NotImplementedError):
0.70 /testbed/sympy/solvers/diophantine.py(297):         terms = factor_list(eq)[1]
0.71 /testbed/sympy/solvers/diophantine.py(299):     sols = set([])
0.71 /testbed/sympy/solvers/diophantine.py(301):     for term in terms:
0.71 /testbed/sympy/solvers/diophantine.py(303):         base, _ = term
0.71 /testbed/sympy/solvers/diophantine.py(304):         var_t, _, eq_type = classify_diop(base, _dict=False)
0.71 /testbed/sympy/solvers/diophantine.py(478):     try:
0.71 /testbed/sympy/solvers/diophantine.py(479):         var = list(eq.free_symbols)
0.71 /testbed/sympy/solvers/diophantine.py(480):         assert var
0.71 /testbed/sympy/solvers/diophantine.py(483):     var.sort(key=default_sort_key)
0.71 /testbed/sympy/solvers/diophantine.py(484):     eq = eq.expand(force=True)
0.71 /testbed/sympy/solvers/diophantine.py(485):     coeff = eq.as_coefficients_dict()
0.71 /testbed/sympy/solvers/diophantine.py(486):     if not all(_is_int(c) for c in coeff.values()):
0.71 /testbed/sympy/solvers/diophantine.py(486):     if not all(_is_int(c) for c in coeff.values()):
0.71 /testbed/sympy/solvers/diophantine.py(54):     try:
0.71 /testbed/sympy/solvers/diophantine.py(55):         as_int(i)
0.71 /testbed/sympy/solvers/diophantine.py(56):         return True
0.71 /testbed/sympy/solvers/diophantine.py(486):     if not all(_is_int(c) for c in coeff.values()):
0.71 /testbed/sympy/solvers/diophantine.py(54):     try:
0.71 /testbed/sympy/solvers/diophantine.py(55):         as_int(i)
0.71 /testbed/sympy/solvers/diophantine.py(56):         return True
0.71 /testbed/sympy/solvers/diophantine.py(486):     if not all(_is_int(c) for c in coeff.values()):
0.71 /testbed/sympy/solvers/diophantine.py(54):     try:
0.71 /testbed/sympy/solvers/diophantine.py(55):         as_int(i)
0.71 /testbed/sympy/solvers/diophantine.py(56):         return True
0.71 /testbed/sympy/solvers/diophantine.py(486):     if not all(_is_int(c) for c in coeff.values()):
0.71 /testbed/sympy/solvers/diophantine.py(489):     diop_type = None
0.71 /testbed/sympy/solvers/diophantine.py(490):     total_degree = Poly(eq).total_degree()
0.71 /testbed/sympy/solvers/diophantine.py(491):     homogeneous = 1 not in coeff
0.71 /testbed/sympy/solvers/diophantine.py(492):     if total_degree == 1:
0.71 /testbed/sympy/solvers/diophantine.py(495):     elif len(var) == 1:
0.71 /testbed/sympy/solvers/diophantine.py(498):     elif total_degree == 2 and len(var) == 2:
0.71 /testbed/sympy/solvers/diophantine.py(501):     elif total_degree == 2 and len(var) == 3 and homogeneous:
0.71 /testbed/sympy/solvers/diophantine.py(511):     elif total_degree == 2 and len(var) >= 3:
0.71 /testbed/sympy/solvers/diophantine.py(531):     elif total_degree == 3 and len(var) == 2:
0.71 /testbed/sympy/solvers/diophantine.py(534):     elif (total_degree > 3 and total_degree % 2 == 0 and
0.71 /testbed/sympy/solvers/diophantine.py(535):             all(k.is_Pow and k.exp == total_degree for k in coeff if k != 1)):
0.71 /testbed/sympy/solvers/diophantine.py(535):             all(k.is_Pow and k.exp == total_degree for k in coeff if k != 1)):
0.71 /testbed/sympy/solvers/diophantine.py(535):             all(k.is_Pow and k.exp == total_degree for k in coeff if k != 1)):
0.71 /testbed/sympy/solvers/diophantine.py(535):             all(k.is_Pow and k.exp == total_degree for k in coeff if k != 1)):
0.71 /testbed/sympy/solvers/diophantine.py(535):             all(k.is_Pow and k.exp == total_degree for k in coeff if k != 1)):
0.71 /testbed/sympy/solvers/diophantine.py(534):     elif (total_degree > 3 and total_degree % 2 == 0 and
0.71 /testbed/sympy/solvers/diophantine.py(536):         if all(coeff[k] == 1 for k in coeff if k != 1):
0.71 /testbed/sympy/solvers/diophantine.py(536):         if all(coeff[k] == 1 for k in coeff if k != 1):
0.71 /testbed/sympy/solvers/diophantine.py(536):         if all(coeff[k] == 1 for k in coeff if k != 1):
0.71 /testbed/sympy/solvers/diophantine.py(536):         if all(coeff[k] == 1 for k in coeff if k != 1):
0.71 /testbed/sympy/solvers/diophantine.py(536):         if all(coeff[k] == 1 for k in coeff if k != 1):
0.71 /testbed/sympy/solvers/diophantine.py(537):             diop_type = 'general_sum_of_even_powers'
0.71 /testbed/sympy/solvers/diophantine.py(539):     if diop_type is not None:
0.71 /testbed/sympy/solvers/diophantine.py(540):         return var, dict(coeff) if _dict else coeff, diop_type
0.71 /testbed/sympy/solvers/diophantine.py(305):         _, base = signsimp(base, evaluate=False).as_coeff_Mul()
0.72 /testbed/sympy/solvers/diophantine.py(306):         solution = diop_solve(base, param)
0.72 /testbed/sympy/solvers/diophantine.py(430):     var, coeff, eq_type = classify_diop(eq, _dict=False)
0.72 /testbed/sympy/solvers/diophantine.py(478):     try:
0.72 /testbed/sympy/solvers/diophantine.py(479):         var = list(eq.free_symbols)
0.72 /testbed/sympy/solvers/diophantine.py(480):         assert var
0.72 /testbed/sympy/solvers/diophantine.py(483):     var.sort(key=default_sort_key)
0.72 /testbed/sympy/solvers/diophantine.py(484):     eq = eq.expand(force=True)
0.72 /testbed/sympy/solvers/diophantine.py(485):     coeff = eq.as_coefficients_dict()
0.72 /testbed/sympy/solvers/diophantine.py(486):     if not all(_is_int(c) for c in coeff.values()):
0.72 /testbed/sympy/solvers/diophantine.py(486):     if not all(_is_int(c) for c in coeff.values()):
0.72 /testbed/sympy/solvers/diophantine.py(54):     try:
0.72 /testbed/sympy/solvers/diophantine.py(55):         as_int(i)
0.72 /testbed/sympy/solvers/diophantine.py(56):         return True
0.72 /testbed/sympy/solvers/diophantine.py(486):     if not all(_is_int(c) for c in coeff.values()):
0.72 /testbed/sympy/solvers/diophantine.py(54):     try:
0.72 /testbed/sympy/solvers/diophantine.py(55):         as_int(i)
0.72 /testbed/sympy/solvers/diophantine.py(56):         return True
0.72 /testbed/sympy/solvers/diophantine.py(486):     if not all(_is_int(c) for c in coeff.values()):
0.72 /testbed/sympy/solvers/diophantine.py(54):     try:
0.72 /testbed/sympy/solvers/diophantine.py(55):         as_int(i)
0.72 /testbed/sympy/solvers/diophantine.py(56):         return True
0.72 /testbed/sympy/solvers/diophantine.py(486):     if not all(_is_int(c) for c in coeff.values()):
0.72 /testbed/sympy/solvers/diophantine.py(489):     diop_type = None
0.72 /testbed/sympy/solvers/diophantine.py(490):     total_degree = Poly(eq).total_degree()
0.72 /testbed/sympy/solvers/diophantine.py(491):     homogeneous = 1 not in coeff
0.72 /testbed/sympy/solvers/diophantine.py(492):     if total_degree == 1:
0.72 /testbed/sympy/solvers/diophantine.py(495):     elif len(var) == 1:
0.72 /testbed/sympy/solvers/diophantine.py(498):     elif total_degree == 2 and len(var) == 2:
0.72 /testbed/sympy/solvers/diophantine.py(501):     elif total_degree == 2 and len(var) == 3 and homogeneous:
0.72 /testbed/sympy/solvers/diophantine.py(511):     elif total_degree == 2 and len(var) >= 3:
0.72 /testbed/sympy/solvers/diophantine.py(531):     elif total_degree == 3 and len(var) == 2:
0.72 /testbed/sympy/solvers/diophantine.py(534):     elif (total_degree > 3 and total_degree % 2 == 0 and
0.72 /testbed/sympy/solvers/diophantine.py(535):             all(k.is_Pow and k.exp == total_degree for k in coeff if k != 1)):
0.72 /testbed/sympy/solvers/diophantine.py(535):             all(k.is_Pow and k.exp == total_degree for k in coeff if k != 1)):
0.72 /testbed/sympy/solvers/diophantine.py(535):             all(k.is_Pow and k.exp == total_degree for k in coeff if k != 1)):
0.72 /testbed/sympy/solvers/diophantine.py(535):             all(k.is_Pow and k.exp == total_degree for k in coeff if k != 1)):
0.72 /testbed/sympy/solvers/diophantine.py(535):             all(k.is_Pow and k.exp == total_degree for k in coeff if k != 1)):
0.72 /testbed/sympy/solvers/diophantine.py(534):     elif (total_degree > 3 and total_degree % 2 == 0 and
0.72 /testbed/sympy/solvers/diophantine.py(536):         if all(coeff[k] == 1 for k in coeff if k != 1):
0.72 /testbed/sympy/solvers/diophantine.py(536):         if all(coeff[k] == 1 for k in coeff if k != 1):
0.72 /testbed/sympy/solvers/diophantine.py(536):         if all(coeff[k] == 1 for k in coeff if k != 1):
0.72 /testbed/sympy/solvers/diophantine.py(536):         if all(coeff[k] == 1 for k in coeff if k != 1):
0.72 /testbed/sympy/solvers/diophantine.py(536):         if all(coeff[k] == 1 for k in coeff if k != 1):
0.72 /testbed/sympy/solvers/diophantine.py(537):             diop_type = 'general_sum_of_even_powers'
0.72 /testbed/sympy/solvers/diophantine.py(539):     if diop_type is not None:
0.72 /testbed/sympy/solvers/diophantine.py(540):         return var, dict(coeff) if _dict else coeff, diop_type
0.72 /testbed/sympy/solvers/diophantine.py(432):     if eq_type == "linear":
0.72 /testbed/sympy/solvers/diophantine.py(435):     elif eq_type == "binary_quadratic":
0.72 /testbed/sympy/solvers/diophantine.py(438):     elif eq_type == "homogeneous_ternary_quadratic":
0.72 /testbed/sympy/solvers/diophantine.py(443):     elif eq_type == "homogeneous_ternary_quadratic_normal":
0.72 /testbed/sympy/solvers/diophantine.py(448):     elif eq_type == "general_pythagorean":
0.72 /testbed/sympy/solvers/diophantine.py(451):     elif eq_type == "univariate":
0.72 /testbed/sympy/solvers/diophantine.py(455):     elif eq_type == "general_sum_of_squares":
0.72 /testbed/sympy/solvers/diophantine.py(458):     elif eq_type == "general_sum_of_even_powers":
0.72 /testbed/sympy/solvers/diophantine.py(459):         for k in coeff.keys():
0.72 /testbed/sympy/solvers/diophantine.py(460):             if k.is_Pow and coeff[k]:
0.72 /testbed/sympy/solvers/diophantine.py(459):         for k in coeff.keys():
0.72 /testbed/sympy/solvers/diophantine.py(460):             if k.is_Pow and coeff[k]:
0.72 /testbed/sympy/solvers/diophantine.py(461):                 p = k.exp
0.72 /testbed/sympy/solvers/diophantine.py(459):         for k in coeff.keys():
0.72 /testbed/sympy/solvers/diophantine.py(460):             if k.is_Pow and coeff[k]:
0.72 /testbed/sympy/solvers/diophantine.py(461):                 p = k.exp
0.72 /testbed/sympy/solvers/diophantine.py(459):         for k in coeff.keys():
0.72 /testbed/sympy/solvers/diophantine.py(462):         return _diop_general_sum_of_even_powers(var, p, -int(coeff[1]), limit=S.Infinity)
0.72 /testbed/sympy/solvers/diophantine.py(2878):     k = len(var)
0.72 /testbed/sympy/solvers/diophantine.py(2880):     s = set()
0.72 /testbed/sympy/solvers/diophantine.py(2882):     if n < 0 or limit < 1:
0.72 /testbed/sympy/solvers/diophantine.py(2885):     sign = [-1 if x.is_nonpositive else 1 for x in var]
0.72 /testbed/sympy/solvers/diophantine.py(2885):     sign = [-1 if x.is_nonpositive else 1 for x in var]
0.72 /testbed/sympy/solvers/diophantine.py(2885):     sign = [-1 if x.is_nonpositive else 1 for x in var]
0.72 /testbed/sympy/solvers/diophantine.py(2885):     sign = [-1 if x.is_nonpositive else 1 for x in var]
0.72 /testbed/sympy/solvers/diophantine.py(2886):     negs = sign.count(-1) != 0
0.72 /testbed/sympy/solvers/diophantine.py(2888):     took = 0
0.72 /testbed/sympy/solvers/diophantine.py(2889):     for t in power_representation(n, p, k):
0.72 /testbed/sympy/solvers/diophantine.py(3177):     n, p, k = [as_int(i) for i in (n, p, k)]
0.72 /testbed/sympy/solvers/diophantine.py(3177):     n, p, k = [as_int(i) for i in (n, p, k)]
0.72 /testbed/sympy/solvers/diophantine.py(3177):     n, p, k = [as_int(i) for i in (n, p, k)]
0.72 /testbed/sympy/solvers/diophantine.py(3177):     n, p, k = [as_int(i) for i in (n, p, k)]
0.72 /testbed/sympy/solvers/diophantine.py(3177):     n, p, k = [as_int(i) for i in (n, p, k)]
0.72 /testbed/sympy/solvers/diophantine.py(3179):     if n < 0:
0.72 /testbed/sympy/solvers/diophantine.py(3185):     if p < 1 or k < 1:
0.72 /testbed/sympy/solvers/diophantine.py(3190):     if n == 0:
0.72 /testbed/sympy/solvers/diophantine.py(3195):     if k == 1:
0.72 /testbed/sympy/solvers/diophantine.py(3207):     if p == 1:
0.72 /testbed/sympy/solvers/diophantine.py(3212):     if p == 2:
0.72 /testbed/sympy/solvers/diophantine.py(3225):     if k == 2 and p > 2:
0.72 /testbed/sympy/solvers/diophantine.py(3226):         be = perfect_power(n)
0.72 /testbed/sympy/solvers/diophantine.py(3227):         if be and be[1] % p == 0:
0.72 /testbed/sympy/solvers/diophantine.py(3230):     if n >= k:
0.72 /testbed/sympy/solvers/diophantine.py(3231):         a = integer_nthroot(n - (k - 1), p)[0]
0.72 /testbed/sympy/solvers/diophantine.py(3232):         for t in pow_rep_recursive(a, k, n, [], p):
0.72 /testbed/sympy/solvers/diophantine.py(3247):     if k == 0 and n_remaining == 0:
0.72 /testbed/sympy/solvers/diophantine.py(3250):         if n_i >= 1 and k > 0:
0.72 /testbed/sympy/solvers/diophantine.py(3251):             for t in pow_rep_recursive(n_i - 1, k, n_remaining, terms, p):
0.72 /testbed/sympy/solvers/diophantine.py(3247):     if k == 0 and n_remaining == 0:
0.72 /testbed/sympy/solvers/diophantine.py(3250):         if n_i >= 1 and k > 0:
0.72 /testbed/sympy/solvers/diophantine.py(3251):             for t in pow_rep_recursive(n_i - 1, k, n_remaining, terms, p):
0.72 /testbed/sympy/solvers/diophantine.py(3247):     if k == 0 and n_remaining == 0:
0.72 /testbed/sympy/solvers/diophantine.py(3250):         if n_i >= 1 and k > 0:
0.72 /testbed/sympy/solvers/diophantine.py(3251):             for t in pow_rep_recursive(n_i - 1, k, n_remaining, terms, p):
0.72 /testbed/sympy/solvers/diophantine.py(3247):     if k == 0 and n_remaining == 0:
0.72 /testbed/sympy/solvers/diophantine.py(3250):         if n_i >= 1 and k > 0:
0.72 /testbed/sympy/solvers/diophantine.py(3253):             residual = n_remaining - pow(n_i, p)
0.72 /testbed/sympy/solvers/diophantine.py(3254):             if residual >= 0:
0.72 /testbed/sympy/solvers/diophantine.py(3255):                 for t in pow_rep_recursive(n_i, k - 1, residual, terms + [n_i], p):
0.72 /testbed/sympy/solvers/diophantine.py(3247):     if k == 0 and n_remaining == 0:
0.72 /testbed/sympy/solvers/diophantine.py(3250):         if n_i >= 1 and k > 0:
0.72 /testbed/sympy/solvers/diophantine.py(3251):             for t in pow_rep_recursive(n_i - 1, k, n_remaining, terms, p):
0.72 /testbed/sympy/solvers/diophantine.py(3247):     if k == 0 and n_remaining == 0:
0.72 /testbed/sympy/solvers/diophantine.py(3250):         if n_i >= 1 and k > 0:
0.72 /testbed/sympy/solvers/diophantine.py(3253):             residual = n_remaining - pow(n_i, p)
0.72 /testbed/sympy/solvers/diophantine.py(3254):             if residual >= 0:
0.72 /testbed/sympy/solvers/diophantine.py(3255):                 for t in pow_rep_recursive(n_i, k - 1, residual, terms + [n_i], p):
0.72 /testbed/sympy/solvers/diophantine.py(3247):     if k == 0 and n_remaining == 0:
0.72 /testbed/sympy/solvers/diophantine.py(3250):         if n_i >= 1 and k > 0:
0.72 /testbed/sympy/solvers/diophantine.py(3253):             residual = n_remaining - pow(n_i, p)
0.72 /testbed/sympy/solvers/diophantine.py(3254):             if residual >= 0:
0.72 /testbed/sympy/solvers/diophantine.py(3255):                 for t in pow_rep_recursive(n_i, k - 1, residual, terms + [n_i], p):
0.72 /testbed/sympy/solvers/diophantine.py(3247):     if k == 0 and n_remaining == 0:
0.72 /testbed/sympy/solvers/diophantine.py(3250):         if n_i >= 1 and k > 0:
0.72 /testbed/sympy/solvers/diophantine.py(3251):             for t in pow_rep_recursive(n_i - 1, k, n_remaining, terms, p):
0.72 /testbed/sympy/solvers/diophantine.py(3247):     if k == 0 and n_remaining == 0:
0.72 /testbed/sympy/solvers/diophantine.py(3250):         if n_i >= 1 and k > 0:
0.72 /testbed/sympy/solvers/diophantine.py(3251):             for t in pow_rep_recursive(n_i - 1, k, n_remaining, terms, p):
0.72 /testbed/sympy/solvers/diophantine.py(3247):     if k == 0 and n_remaining == 0:
0.72 /testbed/sympy/solvers/diophantine.py(3250):         if n_i >= 1 and k > 0:
0.72 /testbed/sympy/solvers/diophantine.py(3253):             residual = n_remaining - pow(n_i, p)
0.72 /testbed/sympy/solvers/diophantine.py(3254):             if residual >= 0:
0.72 /testbed/sympy/solvers/diophantine.py(3255):                 for t in pow_rep_recursive(n_i, k - 1, residual, terms + [n_i], p):
0.72 /testbed/sympy/solvers/diophantine.py(3247):     if k == 0 and n_remaining == 0:
0.72 /testbed/sympy/solvers/diophantine.py(3250):         if n_i >= 1 and k > 0:
0.72 /testbed/sympy/solvers/diophantine.py(3253):             residual = n_remaining - pow(n_i, p)
0.72 /testbed/sympy/solvers/diophantine.py(3254):             if residual >= 0:
0.72 /testbed/sympy/solvers/diophantine.py(3255):                 for t in pow_rep_recursive(n_i, k - 1, residual, terms + [n_i], p):
0.72 /testbed/sympy/solvers/diophantine.py(3247):     if k == 0 and n_remaining == 0:
0.72 /testbed/sympy/solvers/diophantine.py(3250):         if n_i >= 1 and k > 0:
0.72 /testbed/sympy/solvers/diophantine.py(3253):             residual = n_remaining - pow(n_i, p)
0.72 /testbed/sympy/solvers/diophantine.py(3254):             if residual >= 0:
0.72 /testbed/sympy/solvers/diophantine.py(3255):                 for t in pow_rep_recursive(n_i, k - 1, residual, terms + [n_i], p):
0.72 /testbed/sympy/solvers/diophantine.py(3247):     if k == 0 and n_remaining == 0:
0.72 /testbed/sympy/solvers/diophantine.py(3250):         if n_i >= 1 and k > 0:
0.72 /testbed/sympy/solvers/diophantine.py(3251):             for t in pow_rep_recursive(n_i - 1, k, n_remaining, terms, p):
0.72 /testbed/sympy/solvers/diophantine.py(3247):     if k == 0 and n_remaining == 0:
0.72 /testbed/sympy/solvers/diophantine.py(3250):         if n_i >= 1 and k > 0:
0.72 /testbed/sympy/solvers/diophantine.py(3251):             for t in pow_rep_recursive(n_i - 1, k, n_remaining, terms, p):
0.72 /testbed/sympy/solvers/diophantine.py(3247):     if k == 0 and n_remaining == 0:
0.72 /testbed/sympy/solvers/diophantine.py(3250):         if n_i >= 1 and k > 0:
0.72 /testbed/sympy/solvers/diophantine.py(3251):             for t in pow_rep_recursive(n_i - 1, k, n_remaining, terms, p):
0.72 /testbed/sympy/solvers/diophantine.py(3247):     if k == 0 and n_remaining == 0:
0.72 /testbed/sympy/solvers/diophantine.py(3250):         if n_i >= 1 and k > 0:
0.72 /testbed/sympy/solvers/diophantine.py(3253):             residual = n_remaining - pow(n_i, p)
0.72 /testbed/sympy/solvers/diophantine.py(3254):             if residual >= 0:
0.72 /testbed/sympy/solvers/diophantine.py(3255):                 for t in pow_rep_recursive(n_i, k - 1, residual, terms + [n_i], p):
0.72 /testbed/sympy/solvers/diophantine.py(3247):     if k == 0 and n_remaining == 0:
0.72 /testbed/sympy/solvers/diophantine.py(3250):         if n_i >= 1 and k > 0:
0.72 /testbed/sympy/solvers/diophantine.py(3253):             residual = n_remaining - pow(n_i, p)
0.72 /testbed/sympy/solvers/diophantine.py(3254):             if residual >= 0:
0.72 /testbed/sympy/solvers/diophantine.py(3255):                 for t in pow_rep_recursive(n_i, k - 1, residual, terms + [n_i], p):
0.72 /testbed/sympy/solvers/diophantine.py(3247):     if k == 0 and n_remaining == 0:
0.72 /testbed/sympy/solvers/diophantine.py(3248):         yield tuple(terms)
0.72 /testbed/sympy/solvers/diophantine.py(3256):                     yield t
0.72 /testbed/sympy/solvers/diophantine.py(3252):                 yield t
0.72 /testbed/sympy/solvers/diophantine.py(3256):                     yield t
0.72 /testbed/sympy/solvers/diophantine.py(3233):             yield tuple(reversed(t))
0.72 /testbed/sympy/solvers/diophantine.py(2890):         if negs:
0.72 /testbed/sympy/solvers/diophantine.py(2893):             s.add(t)
0.72 /testbed/sympy/solvers/diophantine.py(2894):         took += 1
0.72 /testbed/sympy/solvers/diophantine.py(2895):         if took == limit:
0.72 /testbed/sympy/solvers/diophantine.py(2889):     for t in power_representation(n, p, k):
0.72 /testbed/sympy/solvers/diophantine.py(3232):         for t in pow_rep_recursive(a, k, n, [], p):
0.72 /testbed/sympy/solvers/diophantine.py(3255):                 for t in pow_rep_recursive(n_i, k - 1, residual, terms + [n_i], p):
0.72 /testbed/sympy/solvers/diophantine.py(3251):             for t in pow_rep_recursive(n_i - 1, k, n_remaining, terms, p):
0.72 /testbed/sympy/solvers/diophantine.py(3255):                 for t in pow_rep_recursive(n_i, k - 1, residual, terms + [n_i], p):
0.72 /testbed/sympy/solvers/diophantine.py(3253):             residual = n_remaining - pow(n_i, p)
0.72 /testbed/sympy/solvers/diophantine.py(3254):             if residual >= 0:
0.72 /testbed/sympy/solvers/diophantine.py(3235):     if zeros:
0.72 /testbed/sympy/solvers/diophantine.py(2897):     return s
0.72 /testbed/sympy/solvers/diophantine.py(308):         if eq_type in [
0.72 /testbed/sympy/solvers/diophantine.py(315):         elif eq_type in [
0.72 /testbed/sympy/solvers/diophantine.py(320):             for sol in solution:
0.72 /testbed/sympy/solvers/diophantine.py(321):                 sols.add(merge_solution(var, var_t, sol))
0.72 /testbed/sympy/solvers/diophantine.py(366):     sol = []
0.72 /testbed/sympy/solvers/diophantine.py(368):     if None in solution:
0.72 /testbed/sympy/solvers/diophantine.py(371):     solution = iter(solution)
0.72 /testbed/sympy/solvers/diophantine.py(372):     params = numbered_symbols("n", integer=True, start=1)
0.72 /testbed/sympy/solvers/diophantine.py(373):     for v in var:
0.72 /testbed/sympy/solvers/diophantine.py(374):         if v in var_t:
0.72 /testbed/sympy/solvers/diophantine.py(375):             sol.append(next(solution))
0.72 /testbed/sympy/solvers/diophantine.py(373):     for v in var:
0.72 /testbed/sympy/solvers/diophantine.py(374):         if v in var_t:
0.72 /testbed/sympy/solvers/diophantine.py(375):             sol.append(next(solution))
0.72 /testbed/sympy/solvers/diophantine.py(373):     for v in var:
0.72 /testbed/sympy/solvers/diophantine.py(379):     for val, symb in zip(sol, var):
0.72 /testbed/sympy/solvers/diophantine.py(380):         if check_assumptions(val, **symb.assumptions0) is False:
0.72 /testbed/sympy/solvers/diophantine.py(379):     for val, symb in zip(sol, var):
0.72 /testbed/sympy/solvers/diophantine.py(380):         if check_assumptions(val, **symb.assumptions0) is False:
0.72 /testbed/sympy/solvers/diophantine.py(379):     for val, symb in zip(sol, var):
0.72 /testbed/sympy/solvers/diophantine.py(383):     return tuple(sol)
0.72 /testbed/sympy/solvers/diophantine.py(320):             for sol in solution:
0.72 /testbed/sympy/solvers/diophantine.py(301):     for term in terms:
0.72 /testbed/sympy/solvers/diophantine.py(327):     if () in sols:
0.72 /testbed/sympy/solvers/diophantine.py(329):     null = tuple([0]*len(var))
0.72 /testbed/sympy/solvers/diophantine.py(331):     if not sols and eq.subs(zip(var, null)).is_zero:
0.72 /testbed/sympy/solvers/diophantine.py(333):     final_soln = set([])
0.72 /testbed/sympy/solvers/diophantine.py(334):     for sol in sols:
0.72 /testbed/sympy/solvers/diophantine.py(335):         if all(_is_int(s) for s in sol):
0.72 /testbed/sympy/solvers/diophantine.py(335):         if all(_is_int(s) for s in sol):
0.72 /testbed/sympy/solvers/diophantine.py(54):     try:
0.72 /testbed/sympy/solvers/diophantine.py(55):         as_int(i)
0.72 /testbed/sympy/solvers/diophantine.py(56):         return True
0.72 /testbed/sympy/solvers/diophantine.py(335):         if all(_is_int(s) for s in sol):
0.72 /testbed/sympy/solvers/diophantine.py(54):     try:
0.72 /testbed/sympy/solvers/diophantine.py(55):         as_int(i)
0.72 /testbed/sympy/solvers/diophantine.py(56):         return True
0.72 /testbed/sympy/solvers/diophantine.py(335):         if all(_is_int(s) for s in sol):
0.72 /testbed/sympy/solvers/diophantine.py(336):             if do_permute_signs:
0.72 /testbed/sympy/solvers/diophantine.py(339):             elif permute_few_signs:
0.72 /testbed/sympy/solvers/diophantine.py(344):             elif do_permute_signs_var:
0.72 /testbed/sympy/solvers/diophantine.py(348):                 final_soln.add(sol)
0.72 /testbed/sympy/solvers/diophantine.py(334):     for sol in sols:
0.72 /testbed/sympy/solvers/diophantine.py(351):     return final_soln
0.72 /testbed/sympy/solvers/diophantine.py(184):                 return {tuple([t[dict_sym_index[i]] for i in var])
0.72 /testbed/sympy/solvers/diophantine.py(184):                 return {tuple([t[dict_sym_index[i]] for i in var])
0.72 /testbed/sympy/solvers/diophantine.py(185):                             for t in diophantine(eq, param)}
0.72 /testbed/sympy/solvers/diophantine.py(184):                 return {tuple([t[dict_sym_index[i]] for i in var])
0.72 /testbed/sympy/solvers/diophantine.py(184):                 return {tuple([t[dict_sym_index[i]] for i in var])
0.72 /testbed/sympy/solvers/diophantine.py(184):                 return {tuple([t[dict_sym_index[i]] for i in var])
0.72 /testbed/sympy/solvers/diophantine.py(184):                 return {tuple([t[dict_sym_index[i]] for i in var])
0.72 /testbed/sympy/solvers/diophantine.py(184):                 return {tuple([t[dict_sym_index[i]] for i in var])
F                                 [FAIL]


________________________________________________________________________________
 sympy/polys/tests/test_coverup_sympy__sympy-18189.py:test_diophantine_permute_syms_order_bug 
Traceback (most recent call last):
  File "/testbed/sympy/polys/tests/test_coverup_sympy__sympy-18189.py", line 11, in test_diophantine_permute_syms_order_bug
    assert result_mn == result_nm
AssertionError

============= tests finished: 0 passed, 1 failed, in 0.28 seconds ==============
DO *NOT* COMMIT!
/testbed/sympy/solvers/diophantine.py(3131): def power_representation(n, p, k, zeros=False):
0.98 /testbed/sympy/solvers/diophantine.py(3242): sum_of_powers = power_representation
0.98 /testbed/sympy/solvers/diophantine.py(3245): def pow_rep_recursive(n_i, k, n_remaining, terms, p):
0.98 /testbed/sympy/solvers/diophantine.py(3259): def sum_of_squares(n, k, zeros=False):
0.98 /testbed/sympy/solvers/diophantine.py(3307): def _can_do_sum_of_squares(n, k):
+ cat coverage.cover
{"/testbed/sympy/solvers/diophantine.py": {"1": 1, "3": 1, "4": 1, "5": 1, "6": 1, "7": 1, "8": 1, "9": 1, "10": 1, "11": 1, "12": 1, "13": 1, "14": 1, "15": 1, "16": 1, "17": 1, "18": 1, "20": 1, "21": 1, "22": 1, "23": 1, "24": 1, "25": 1, "26": 1, "27": 1, "28": 1, "29": 1, "34": 1, "38": 1, "53": 1, "61": 1, "65": 1, "80": 1, "85": 1, "93": 1, "97": 1, "101": 2, "102": 1, "354": 1, "386": 1, "476": 1, "556": 2, "591": 1, "594": 1, "640": 1, "817": 1, "871": 1, "878": 1, "927": 1, "1108": 1, "1121": 1, "1317": 1, "1412": 1, "1474": 1, "1534": 1, "1622": 1, "1658": 1, "1703": 1, "1784": 1, "1835": 1, "1879": 1, "1896": 1, "1924": 1, "1966": 1, "2065": 1, "2081": 1, "2165": 1, "2230": 1, "2270": 1, "2303": 1, "2364": 1, "2421": 1, "2447": 1, "2462": 1, "2531": 1, "2584": 1, "2625": 1, "2636": 1, "2646": 1, "2710": 1, "2741": 1, "2774": 1, "2814": 1, "2840": 1, "2876": 1, "2905": 1, "2959": 1, "3002": 1, "3081": 1, "3131": 1, "3242": 1, "3245": 1, "3259": 1, "3307": 1, "54": 22, "55": 22, "56": 22, "57": 0, "58": 0, "62": 0, "66": 0, "67": 0, "68": 0, "69": 0, "70": 0, "71": 0, "72": 0, "73": 0, "74": 0, "75": 0, "76": 0, "77": 0, "82": 0, "87": 0, "88": 0, "89": 0, "90": 0, "94": 0, "98": 0, "168": 3, "171": 3, "172": 0, "174": 3, "175": 3, "176": 3, "177": 3, "178": 2, "179": 0, "180": 0, "181": 8, "182": 2, "183": 1, "184": 8, "185": 2, "186": 2, "187": 2, "188": 0, "189": 2, "190": 0, "191": 0, "192": 0, "194": 2, "195": 2, "196": 2, "197": 2, "198": 2, "199": 8, "200": 2, "201": 2, "202": 0, "203": 0, "207": 2, "209": 2, "211": 2, "212": 2, "215": 2, "218": 2, "219": 1, "221": 1, "222": 1, "220": 1, "223": 1, "227": 1, "228": 1, "229": 0, "232": 0, "233": 0, "235": 0, "236": 0, "237": 0, "241": 0, "242": 0, "243": 0, "244": 0, "245": 0, "246": 0, "247": 0, "249": 0, "250": 0, "251": 0, "252": 0, "253": 0, "254": 0, "255": 0, "257": 0, "258": 0, "259": 0, "260": 0, "261": 0, "263": 0, "264": 0, "265": 0, "266": 0, "267": 0, "268": 0, "269": 0, "270": 0, "271": 0, "272": 0, "274": 0, "275": 0, "276": 0, "277": 0, "278": 0, "279": 0, "280": 0, "283": 0, "284": 0, "290": 0, "291": 2, "293": 0, "295": 2, "296": 2, "297": 2, "299": 2, "301": 4, "303": 2, "304": 2, "305": 2, "306": 2, "308": 2, "313": 0, "315": 2, "320": 4, "321": 2, "324": 0, "327": 2, "328": 0, "329": 2, "331": 2, "332": 0, "333": 2, "334": 4, "335": 8, "336": 2, "337": 0, "338": 0, "339": 2, "340": 0, "341": 0, "342": 0, "343": 0, "344": 2, "345": 1, "346": 1, "348": 1, "350": 0, "351": 2, "366": 2, "368": 2, "369": 0, "371": 2, "372": 2, "373": 6, "374": 4, "375": 4, "377": 0, "379": 6, "380": 4, "381": 0, "383": 2, "430": 2, "432": 2, "433": 0, "435": 2, "436": 0, "438": 2, "439": 0, "440": 0, "441": 0, "443": 2, "444": 0, "445": 0, "446": 0, "448": 2, "449": 0, "451": 2, "452": 0, "453": 0, "455": 2, "456": 0, "458": 2, "459": 8, "460": 6, "461": 4, "462": 2, "464": 0, "465": 0, "472": 0, "473": 0, "478": 6, "479": 6, "480": 6, "481": 0, "482": 0, "483": 6, "484": 6, "485": 6, "486": 30, "487": 0, "489": 6, "490": 6, "491": 6, "492": 6, "493": 0, "495": 6, "496": 0, "498": 6, "499": 0, "501": 6, "502": 0, "503": 0, "505": 0, "506": 0, "507": 0, "509": 0, "511": 6, "512": 0, "513": 0, "516": 0, "517": 0, "518": 0, "520": 0, "522": 0, "523": 0, "524": 0, "525": 0, "526": 0, "529": 0, "531": 6, "532": 0, "534": 12, "535": 30, "536": 30, "537": 6, "539": 6, "540": 6, "550": 0, "634": 0, "636": 0, "637": 0, "649": 0, "652": 0, "654": 0, "657": 0, "658": 0, "660": 0, "661": 0, "663": 0, "664": 0, "665": 0, "666": 0, "668": 0, "712": 0, "713": 0, "714": 0, "715": 0, "716": 0, "717": 0, "718": 0, "719": 0, "720": 0, "721": 0, "722": 0, "723": 0, "777": 0, "778": 0, "779": 0, "781": 0, "782": 0, "784": 0, "785": 0, "789": 0, "790": 0, "792": 0, "794": 0, "795": 0, "796": 0, "799": 0, "800": 0, "801": 0, "802": 0, "804": 0, "805": 0, "807": 0, "808": 0, "810": 0, "811": 0, "813": 0, "814": 0, "845": 0, "847": 0, "848": 0, "849": 0, "850": 0, "851": 0, "853": 0, "855": 0, "857": 0, "858": 0, "860": 0, "861": 0, "862": 0, "863": 0, "864": 0, "866": 0, "868": 0, "875": 0, "921": 0, "923": 0, "924": 0, "929": 0, "931": 0, "932": 0, "933": 0, "934": 0, "935": 0, "936": 0, "938": 0, "945": 0, "946": 0, "947": 0, "949": 0, "950": 0, "951": 0, "952": 0, "953": 0, "954": 0, "955": 0, "957": 0, "958": 0, "959": 0, "960": 0, "961": 0, "962": 0, "963": 0, "964": 0, "965": 0, "966": 0, "973": 0, "975": 0, "976": 0, "977": 0, "978": 0, "981": 0, "982": 0, "983": 0, "984": 0, "986": 0, "987": 0, "988": 0, "989": 0, "990": 0, "991": 0, "992": 0, "993": 0, "994": 0, "995": 0, "997": 0, "998": 0, "1001": 0, "1004": 0, "1006": 0, "1007": 0, "1008": 0, "1014": 0, "1015": 0, "1016": 0, "1017": 0, "1018": 0, "1019": 0, "1020": 0, "1022": 0, "1024": 0, "1026": 0, "1027": 0, "1028": 0, "1029": 0, "1030": 0, "1031": 0, "1032": 0, "1033": 0, "1034": 0, "1035": 0, "1038": 0, "1039": 0, "1040": 0, "1047": 0, "1048": 0, "1049": 0, "1051": 0, "1052": 0, "1053": 0, "1054": 0, "1055": 0, "1056": 0, "1057": 0, "1058": 0, "1059": 0, "1063": 0, "1064": 0, "1065": 0, "1067": 0, "1068": 0, "1069": 0, "1071": 0, "1072": 0, "1073": 0, "1074": 0, "1075": 0, "1076": 0, "1077": 0, "1078": 0, "1081": 0, "1083": 0, "1085": 0, "1086": 0, "1088": 0, "1089": 0, "1090": 0, "1092": 0, "1094": 0, "1095": 0, "1096": 0, "1097": 0, "1098": 0, "1099": 0, "1100": 0, "1101": 0, "1103": 0, "1105": 0, "999": 0, "1002": 0, "1116": 0, "1117": 0, "1118": 0, "1172": 0, "1173": 0, "1174": 0, "1175": 0, "1176": 0, "1177": 0, "1178": 0, "1179": 0, "1180": 0, "1181": 0, "1182": 0, "1183": 0, "1184": 0, "1185": 0, "1186": 0, "1188": 0, "1189": 0, "1190": 0, "1191": 0, "1192": 0, "1193": 0, "1194": 0, "1195": 0, "1197": 0, "1200": 0, "1201": 0, "1202": 0, "1203": 0, "1205": 0, "1207": 0, "1208": 0, "1209": 0, "1210": 0, "1211": 0, "1212": 0, "1213": 0, "1215": 0, "1217": 0, "1219": 0, "1222": 0, "1223": 0, "1225": 0, "1227": 0, "1228": 0, "1229": 0, "1230": 0, "1232": 0, "1234": 0, "1235": 0, "1236": 0, "1238": 0, "1239": 0, "1240": 0, "1242": 0, "1244": 0, "1245": 0, "1246": 0, "1248": 0, "1249": 0, "1250": 0, "1251": 0, "1252": 0, "1253": 0, "1255": 0, "1256": 0, "1258": 0, "1259": 0, "1260": 0, "1262": 0, "1264": 0, "1268": 0, "1269": 0, "1270": 0, "1272": 0, "1273": 0, "1274": 0, "1276": 0, "1277": 0, "1279": 0, "1280": 0, "1282": 0, "1283": 0, "1285": 0, "1287": 0, "1288": 0, "1289": 0, "1290": 0, "1292": 0, "1294": 0, "1295": 0, "1297": 0, "1298": 0, "1299": 0, "1301": 0, "1302": 0, "1304": 0, "1305": 0, "1306": 0, "1308": 0, "1310": 0, "1311": 0, "1312": 0, "1314": 0, "1371": 0, "1372": 0, "1373": 0, "1375": 0, "1376": 0, "1377": 0, "1378": 0, "1379": 0, "1380": 0, "1381": 0, "1383": 0, "1384": 0, "1385": 0, "1386": 0, "1388": 0, "1390": 0, "1392": 0, "1393": 0, "1394": 0, "1395": 0, "1396": 0, "1398": 0, "1399": 0, "1400": 0, "1402": 0, "1403": 0, "1404": 0, "1406": 0, "1407": 0, "1409": 0, "1443": 0, "1445": 0, "1446": 0, "1447": 0, "1448": 0, "1450": 0, "1451": 0, "1452": 0, "1454": 0, "1457": 0, "1458": 0, "1459": 0, "1461": 0, "1463": 0, "1464": 0, "1465": 0, "1466": 0, "1467": 0, "1468": 0, "1469": 0, "1471": 0, "1508": 0, "1509": 0, "1511": 0, "1512": 0, "1514": 0, "1515": 0, "1519": 0, "1520": 0, "1521": 0, "1522": 0, "1524": 0, "1526": 0, "1527": 0, "1528": 0, "1530": 0, "1531": 0, "1576": 0, "1577": 0, "1579": 0, "1580": 0, "1581": 0, "1583": 0, "1584": 0, "1586": 0, "1587": 0, "1588": 0, "1590": 0, "1591": 0, "1592": 0, "1593": 0, "1594": 0, "1597": 0, "1598": 0, "1599": 0, "1600": 0, "1602": 0, "1603": 0, "1604": 0, "1606": 0, "1609": 0, "1610": 0, "1611": 0, "1612": 0, "1613": 0, "1614": 0, "1615": 0, "1616": 0, "1617": 0, "1619": 0, "1655": 0, "1692": 0, "1693": 0, "1694": 0, "1695": 0, "1696": 0, "1698": 0, "1699": 0, "1700": 0, "1779": 0, "1780": 0, "1781": 0, "1786": 0, "1788": 0, "1789": 0, "1790": 0, "1791": 0, "1792": 0, "1793": 0, "1795": 0, "1797": 0, "1799": 0, "1800": 0, "1801": 0, "1804": 0, "1805": 0, "1806": 0, "1809": 0, "1810": 0, "1811": 0, "1814": 0, "1815": 0, "1816": 0, "1819": 0, "1820": 0, "1821": 0, "1824": 0, "1825": 0, "1826": 0, "1832": 0, "1874": 0, "1875": 0, "1876": 0, "1881": 0, "1882": 0, "1883": 0, "1885": 0, "1886": 0, "1887": 0, "1889": 0, "1891": 0, "1893": 0, "1904": 0, "1906": 0, "1907": 0, "1909": 0, "1910": 0, "1912": 0, "1913": 0, "1914": 0, "1915": 0, "1918": 0, "1919": 0, "1921": 0, "1958": 0, "1960": 0, "1963": 0, "1968": 0, "1969": 0, "1980": 0, "1981": 0, "1982": 0, "1983": 0, "1984": 0, "1986": 0, "1987": 0, "1988": 0, "1989": 0, "1990": 0, "1992": 0, "1995": 0, "1996": 0, "1998": 0, "2000": 0, "2002": 0, "2003": 0, "2004": 0, "2007": 0, "2008": 0, "2011": 0, "2013": 0, "2014": 0, "2015": 0, "2016": 0, "2017": 0, "2018": 0, "2020": 0, "2022": 0, "2023": 0, "2024": 0, "2025": 0, "2026": 0, "2027": 0, "2029": 0, "2031": 0, "2032": 0, "2034": 0, "2035": 0, "2037": 0, "2038": 0, "2039": 0, "2041": 0, "2042": 0, "2044": 0, "2046": 0, "2050": 0, "2051": 0, "2055": 0, "2056": 0, "2060": 0, "2062": 0, "2073": 0, "2075": 0, "2078": 0, "2083": 0, "2084": 0, "2086": 0, "2088": 0, "2089": 0, "2090": 0, "2091": 0, "2092": 0, "2093": 0, "2094": 0, "2095": 0, "2096": 0, "2097": 0, "2098": 0, "2099": 0, "2101": 0, "2103": 0, "2104": 0, "2105": 0, "2106": 0, "2107": 0, "2108": 0, "2111": 0, "2112": 0, "2113": 0, "2114": 0, "2115": 0, "2118": 0, "2119": 0, "2120": 0, "2121": 0, "2122": 0, "2123": 0, "2124": 0, "2126": 0, "2128": 0, "2129": 0, "2130": 0, "2131": 0, "2132": 0, "2133": 0, "2135": 0, "2136": 0, "2138": 0, "2139": 0, "2140": 0, "2143": 0, "2147": 0, "2148": 0, "2149": 0, "2150": 0, "2151": 0, "2155": 0, "2156": 0, "2157": 0, "2158": 0, "2159": 0, "2162": 0, "2220": 0, "2222": 0, "2225": 0, "2226": 0, "2227": 0, "2232": 0, "2234": 0, "2236": 0, "2238": 0, "2239": 0, "2241": 0, "2246": 0, "2248": 0, "2249": 0, "2250": 0, "2251": 0, "2252": 0, "2254": 0, "2255": 0, "2257": 0, "2258": 0, "2259": 0, "2260": 0, "2263": 0, "2264": 0, "2265": 0, "2267": 0, "2298": 0, "2299": 0, "2300": 0, "2305": 0, "2307": 0, "2308": 0, "2309": 0, "2310": 0, "2311": 0, "2312": 0, "2313": 0, "2314": 0, "2320": 0, "2319": 0, "2322": 0, "2323": 0, "2326": 0, "2327": 0, "2330": 0, "2329": 0, "2331": 0, "2332": 0, "2333": 0, "2335": 0, "2337": 0, "2338": 0, "2339": 0, "2341": 0, "2344": 0, "2345": 0, "2346": 0, "2347": 0, "2349": 0, "2351": 0, "2352": 0, "2353": 0, "2355": 0, "2357": 0, "2358": 0, "2359": 0, "2361": 0, "2398": 0, "2399": 0, "2400": 0, "2401": 0, "2402": 0, "2403": 0, "2404": 0, "2405": 0, "2406": 0, "2407": 0, "2408": 0, "2409": 0, "2411": 0, "2412": 0, "2413": 0, "2415": 0, "2416": 0, "2418": 0, "2443": 0, "2444": 0, "2454": 0, "2455": 0, "2456": 0, "2457": 0, "2458": 0, "2459": 0, "2496": 0, "2497": 0, "2498": 0, "2500": 0, "2501": 0, "2503": 0, "2504": 0, "2506": 0, "2507": 0, "2509": 0, "2511": 0, "2513": 0, "2514": 0, "2515": 0, "2517": 0, "2518": 0, "2520": 0, "2521": 0, "2522": 0, "2523": 0, "2524": 0, "2526": 0, "2527": 0, "2528": 0, "2558": 0, "2559": 0, "2560": 0, "2562": 0, "2563": 0, "2564": 0, "2565": 0, "2566": 0, "2567": 0, "2568": 0, "2569": 0, "2570": 0, "2572": 0, "2573": 0, "2575": 0, "2576": 0, "2577": 0, "2579": 0, "2581": 0, "2602": 0, "2603": 0, "2605": 0, "2606": 0, "2608": 0, "2609": 0, "2611": 0, "2612": 0, "2613": 0, "2615": 0, "2617": 0, "2618": 0, "2620": 0, "2622": 0, "2631": 0, "2632": 0, "2633": 0, "2642": 0, "2643": 0, "2665": 0, "2666": 0, "2668": 0, "2670": 0, "2671": 0, "2673": 0, "2675": 0, "2676": 0, "2677": 0, "2678": 0, "2679": 0, "2680": 0, "2682": 0, "2684": 0, "2685": 0, "2686": 0, "2688": 0, "2689": 0, "2690": 0, "2691": 0, "2692": 0, "2694": 0, "2695": 0, "2696": 0, "2697": 0, "2699": 0, "2700": 0, "2701": 0, "2702": 0, "2703": 0, "2704": 0, "2705": 0, "2707": 0, "2735": 0, "2737": 0, "2738": 0, "2743": 0, "2744": 0, "2745": 0, "2747": 0, "2748": 0, "2750": 0, "2751": 0, "2752": 0, "2754": 0, "2755": 0, "2756": 0, "2757": 0, "2758": 0, "2760": 0, "2761": 0, "2762": 0, "2763": 0, "2765": 0, "2766": 0, "2768": 0, "2769": 0, "2771": 0, "2808": 0, "2810": 0, "2811": 0, "2816": 0, "2817": 0, "2818": 0, "2820": 0, "2822": 0, "2823": 0, "2825": 0, "2826": 0, "2828": 0, "2829": 0, "2830": 0, "2831": 0, "2833": 0, "2834": 0, "2835": 0, "2836": 0, "2837": 0, "2867": 0, "2869": 0, "2870": 0, "2871": 0, "2872": 0, "2873": 0, "2878": 2, "2880": 2, "2882": 2, "2883": 0, "2885": 8, "2886": 2, "2888": 2, "2889": 4, "2890": 2, "2891": 0, "2893": 2, "2894": 2, "2895": 2, "2896": 0, "2897": 2, "2948": 0, "2949": 0, "2950": 0, "2951": 0, "2953": 0, "2954": 0, "2955": 0, "2956": 0, "2982": 0, "2983": 0, "2985": 0, "2986": 0, "2988": 0, "2990": 0, "2991": 0, "2993": 0, "2994": 0, "2996": 0, "2997": 0, "2999": 0, "3032": 0, "3033": 0, "3034": 0, "3035": 0, "3037": 0, "3039": 0, "3040": 0, "3042": 0, "3043": 0, "3045": 0, "3046": 0, "3048": 0, "3049": 0, "3050": 0, "3052": 0, "3054": 0, "3055": 0, "3057": 0, "3059": 0, "3060": 0, "3062": 0, "3063": 0, "3064": 0, "3065": 0, "3066": 0, "3067": 0, "3069": 0, "3070": 0, "3072": 0, "3074": 0, "3075": 0, "3076": 0, "3077": 0, "3078": 0, "3111": 0, "3112": 0, "3114": 0, "3115": 0, "3117": 0, "3118": 0, "3119": 0, "3120": 0, "3121": 0, "3122": 0, "3124": 0, "3126": 0, "3128": 0, "3177": 10, "3179": 2, "3180": 0, "3181": 0, "3182": 0, "3183": 0, "3185": 2, "3186": 0, "3188": 0, "3190": 2, "3191": 0, "3192": 0, "3193": 0, "3195": 2, "3196": 0, "3197": 0, "3199": 0, "3200": 0, "3201": 0, "3202": 0, "3203": 0, "3204": 0, "3205": 0, "3207": 2, "3208": 0, "3209": 0, "3210": 0, "3212": 2, "3213": 0, "3214": 0, "3215": 0, "3216": 0, "3220": 0, "3221": 0, "3222": 0, "3223": 0, "3225": 2, "3226": 2, "3227": 2, "3228": 0, "3230": 2, "3231": 2, "3232": 4, "3233": 2, "3235": 2, "3236": 0, "3237": 0, "3238": 0, "3239": 0, "3247": 36, "3248": 2, "3250": 34, "3251": 20, "3252": 2, "3253": 18, "3254": 18, "3255": 20, "3256": 4, "3303": 0, "3304": 0, "3314": 0, "3315": 0, "3316": 0, "3317": 0, "3318": 0, "3319": 0, "3320": 0, "3321": 0, "3322": 0, "3323": 0, "3324": 0, "3325": 0, "3326": 0, "3327": 0, "3328": 0, "3330": 0, "3331": 0, "3334": 0, "3335": 0, "3336": 0, "3337": 0, "3338": 0, "3339": 0, "3342": 0}}
{"/testbed/sympy/solvers/diophantine.py": {"1": 1, "3": 1, "4": 1, "5": 1, "6": 1, "7": 1, "8": 1, "9": 1, "10": 1, "11": 1, "12": 1, "13": 1, "14": 1, "15": 1, "16": 1, "17": 1, "18": 1, "20": 1, "21": 1, "22": 1, "23": 1, "24": 1, "25": 1, "26": 1, "27": 1, "28": 1, "29": 1, "34": 1, "38": 1, "53": 1, "61": 1, "65": 1, "80": 1, "85": 1, "93": 1, "97": 1, "101": 2, "102": 1, "354": 1, "386": 1, "476": 1, "556": 2, "591": 1, "594": 1, "640": 1, "817": 1, "871": 1, "878": 1, "927": 1, "1108": 1, "1121": 1, "1317": 1, "1412": 1, "1474": 1, "1534": 1, "1622": 1, "1658": 1, "1703": 1, "1784": 1, "1835": 1, "1879": 1, "1896": 1, "1924": 1, "1966": 1, "2065": 1, "2081": 1, "2165": 1, "2230": 1, "2270": 1, "2303": 1, "2364": 1, "2421": 1, "2447": 1, "2462": 1, "2531": 1, "2584": 1, "2625": 1, "2636": 1, "2646": 1, "2710": 1, "2741": 1, "2774": 1, "2814": 1, "2840": 1, "2876": 1, "2905": 1, "2959": 1, "3002": 1, "3081": 1, "3131": 1, "3242": 1, "3245": 1, "3259": 1, "3307": 1, "54": 0, "55": 0, "56": 0, "57": 0, "58": 0, "62": 0, "66": 0, "67": 0, "68": 0, "69": 0, "70": 0, "71": 0, "72": 0, "73": 0, "74": 0, "75": 0, "76": 0, "77": 0, "82": 0, "87": 0, "88": 0, "89": 0, "90": 0, "94": 0, "98": 0, "168": 0, "171": 0, "172": 0, "174": 0, "175": 0, "176": 0, "177": 0, "178": 0, "179": 0, "180": 0, "181": 0, "182": 0, "183": 0, "184": 0, "185": 0, "186": 0, "187": 0, "188": 0, "189": 0, "190": 0, "191": 0, "192": 0, "194": 0, "195": 0, "196": 0, "197": 0, "198": 0, "199": 0, "200": 0, "201": 0, "202": 0, "203": 0, "207": 0, "209": 0, "211": 0, "212": 0, "215": 0, "218": 0, "219": 0, "221": 0, "222": 0, "220": 0, "223": 0, "227": 0, "228": 0, "229": 0, "232": 0, "233": 0, "235": 0, "236": 0, "237": 0, "241": 0, "242": 0, "243": 0, "244": 0, "245": 0, "246": 0, "247": 0, "249": 0, "250": 0, "251": 0, "252": 0, "253": 0, "254": 0, "255": 0, "257": 0, "258": 0, "259": 0, "260": 0, "261": 0, "263": 0, "264": 0, "265": 0, "266": 0, "267": 0, "268": 0, "269": 0, "270": 0, "271": 0, "272": 0, "274": 0, "275": 0, "276": 0, "277": 0, "278": 0, "279": 0, "280": 0, "283": 0, "284": 0, "290": 0, "291": 0, "293": 0, "295": 0, "296": 0, "297": 0, "299": 0, "301": 0, "303": 0, "304": 0, "305": 0, "306": 0, "308": 0, "313": 0, "315": 0, "320": 0, "321": 0, "324": 0, "327": 0, "328": 0, "329": 0, "331": 0, "332": 0, "333": 0, "334": 0, "335": 0, "336": 0, "337": 0, "338": 0, "339": 0, "340": 0, "341": 0, "342": 0, "343": 0, "344": 0, "345": 0, "346": 0, "348": 0, "350": 0, "351": 0, "366": 0, "368": 0, "369": 0, "371": 0, "372": 0, "373": 0, "374": 0, "375": 0, "377": 0, "379": 0, "380": 0, "381": 0, "383": 0, "430": 0, "432": 0, "433": 0, "435": 0, "436": 0, "438": 0, "439": 0, "440": 0, "441": 0, "443": 0, "444": 0, "445": 0, "446": 0, "448": 0, "449": 0, "451": 0, "452": 0, "453": 0, "455": 0, "456": 0, "458": 0, "459": 0, "460": 0, "461": 0, "462": 0, "464": 0, "465": 0, "472": 0, "473": 0, "478": 0, "479": 0, "480": 0, "481": 0, "482": 0, "483": 0, "484": 0, "485": 0, "486": 0, "487": 0, "489": 0, "490": 0, "491": 0, "492": 0, "493": 0, "495": 0, "496": 0, "498": 0, "499": 0, "501": 0, "502": 0, "503": 0, "505": 0, "506": 0, "507": 0, "509": 0, "511": 0, "512": 0, "513": 0, "516": 0, "517": 0, "518": 0, "520": 0, "522": 0, "523": 0, "524": 0, "525": 0, "526": 0, "529": 0, "531": 0, "532": 0, "534": 0, "535": 0, "536": 0, "537": 0, "539": 0, "540": 0, "550": 0, "634": 0, "636": 0, "637": 0, "649": 0, "652": 0, "654": 0, "657": 0, "658": 0, "660": 0, "661": 0, "663": 0, "664": 0, "665": 0, "666": 0, "668": 0, "712": 0, "713": 0, "714": 0, "715": 0, "716": 0, "717": 0, "718": 0, "719": 0, "720": 0, "721": 0, "722": 0, "723": 0, "777": 0, "778": 0, "779": 0, "781": 0, "782": 0, "784": 0, "785": 0, "789": 0, "790": 0, "792": 0, "794": 0, "795": 0, "796": 0, "799": 0, "800": 0, "801": 0, "802": 0, "804": 0, "805": 0, "807": 0, "808": 0, "810": 0, "811": 0, "813": 0, "814": 0, "845": 0, "847": 0, "848": 0, "849": 0, "850": 0, "851": 0, "853": 0, "855": 0, "857": 0, "858": 0, "860": 0, "861": 0, "862": 0, "863": 0, "864": 0, "866": 0, "868": 0, "875": 0, "921": 0, "923": 0, "924": 0, "929": 0, "931": 0, "932": 0, "933": 0, "934": 0, "935": 0, "936": 0, "938": 0, "945": 0, "946": 0, "947": 0, "949": 0, "950": 0, "951": 0, "952": 0, "953": 0, "954": 0, "955": 0, "957": 0, "958": 0, "959": 0, "960": 0, "961": 0, "962": 0, "963": 0, "964": 0, "965": 0, "966": 0, "973": 0, "975": 0, "976": 0, "977": 0, "978": 0, "981": 0, "982": 0, "983": 0, "984": 0, "986": 0, "987": 0, "988": 0, "989": 0, "990": 0, "991": 0, "992": 0, "993": 0, "994": 0, "995": 0, "997": 0, "998": 0, "1001": 0, "1004": 0, "1006": 0, "1007": 0, "1008": 0, "1014": 0, "1015": 0, "1016": 0, "1017": 0, "1018": 0, "1019": 0, "1020": 0, "1022": 0, "1024": 0, "1026": 0, "1027": 0, "1028": 0, "1029": 0, "1030": 0, "1031": 0, "1032": 0, "1033": 0, "1034": 0, "1035": 0, "1038": 0, "1039": 0, "1040": 0, "1047": 0, "1048": 0, "1049": 0, "1051": 0, "1052": 0, "1053": 0, "1054": 0, "1055": 0, "1056": 0, "1057": 0, "1058": 0, "1059": 0, "1063": 0, "1064": 0, "1065": 0, "1067": 0, "1068": 0, "1069": 0, "1071": 0, "1072": 0, "1073": 0, "1074": 0, "1075": 0, "1076": 0, "1077": 0, "1078": 0, "1081": 0, "1083": 0, "1085": 0, "1086": 0, "1088": 0, "1089": 0, "1090": 0, "1092": 0, "1094": 0, "1095": 0, "1096": 0, "1097": 0, "1098": 0, "1099": 0, "1100": 0, "1101": 0, "1103": 0, "1105": 0, "999": 0, "1002": 0, "1116": 0, "1117": 0, "1118": 0, "1172": 0, "1173": 0, "1174": 0, "1175": 0, "1176": 0, "1177": 0, "1178": 0, "1179": 0, "1180": 0, "1181": 0, "1182": 0, "1183": 0, "1184": 0, "1185": 0, "1186": 0, "1188": 0, "1189": 0, "1190": 0, "1191": 0, "1192": 0, "1193": 0, "1194": 0, "1195": 0, "1197": 0, "1200": 0, "1201": 0, "1202": 0, "1203": 0, "1205": 0, "1207": 0, "1208": 0, "1209": 0, "1210": 0, "1211": 0, "1212": 0, "1213": 0, "1215": 0, "1217": 0, "1219": 0, "1222": 0, "1223": 0, "1225": 0, "1227": 0, "1228": 0, "1229": 0, "1230": 0, "1232": 0, "1234": 0, "1235": 0, "1236": 0, "1238": 0, "1239": 0, "1240": 0, "1242": 0, "1244": 0, "1245": 0, "1246": 0, "1248": 0, "1249": 0, "1250": 0, "1251": 0, "1252": 0, "1253": 0, "1255": 0, "1256": 0, "1258": 0, "1259": 0, "1260": 0, "1262": 0, "1264": 0, "1268": 0, "1269": 0, "1270": 0, "1272": 0, "1273": 0, "1274": 0, "1276": 0, "1277": 0, "1279": 0, "1280": 0, "1282": 0, "1283": 0, "1285": 0, "1287": 0, "1288": 0, "1289": 0, "1290": 0, "1292": 0, "1294": 0, "1295": 0, "1297": 0, "1298": 0, "1299": 0, "1301": 0, "1302": 0, "1304": 0, "1305": 0, "1306": 0, "1308": 0, "1310": 0, "1311": 0, "1312": 0, "1314": 0, "1371": 0, "1372": 0, "1373": 0, "1375": 0, "1376": 0, "1377": 0, "1378": 0, "1379": 0, "1380": 0, "1381": 0, "1383": 0, "1384": 0, "1385": 0, "1386": 0, "1388": 0, "1390": 0, "1392": 0, "1393": 0, "1394": 0, "1395": 0, "1396": 0, "1398": 0, "1399": 0, "1400": 0, "1402": 0, "1403": 0, "1404": 0, "1406": 0, "1407": 0, "1409": 0, "1443": 0, "1445": 0, "1446": 0, "1447": 0, "1448": 0, "1450": 0, "1451": 0, "1452": 0, "1454": 0, "1457": 0, "1458": 0, "1459": 0, "1461": 0, "1463": 0, "1464": 0, "1465": 0, "1466": 0, "1467": 0, "1468": 0, "1469": 0, "1471": 0, "1508": 0, "1509": 0, "1511": 0, "1512": 0, "1514": 0, "1515": 0, "1519": 0, "1520": 0, "1521": 0, "1522": 0, "1524": 0, "1526": 0, "1527": 0, "1528": 0, "1530": 0, "1531": 0, "1576": 0, "1577": 0, "1579": 0, "1580": 0, "1581": 0, "1583": 0, "1584": 0, "1586": 0, "1587": 0, "1588": 0, "1590": 0, "1591": 0, "1592": 0, "1593": 0, "1594": 0, "1597": 0, "1598": 0, "1599": 0, "1600": 0, "1602": 0, "1603": 0, "1604": 0, "1606": 0, "1609": 0, "1610": 0, "1611": 0, "1612": 0, "1613": 0, "1614": 0, "1615": 0, "1616": 0, "1617": 0, "1619": 0, "1655": 0, "1692": 0, "1693": 0, "1694": 0, "1695": 0, "1696": 0, "1698": 0, "1699": 0, "1700": 0, "1779": 0, "1780": 0, "1781": 0, "1786": 0, "1788": 0, "1789": 0, "1790": 0, "1791": 0, "1792": 0, "1793": 0, "1795": 0, "1797": 0, "1799": 0, "1800": 0, "1801": 0, "1804": 0, "1805": 0, "1806": 0, "1809": 0, "1810": 0, "1811": 0, "1814": 0, "1815": 0, "1816": 0, "1819": 0, "1820": 0, "1821": 0, "1824": 0, "1825": 0, "1826": 0, "1832": 0, "1874": 0, "1875": 0, "1876": 0, "1881": 0, "1882": 0, "1883": 0, "1885": 0, "1886": 0, "1887": 0, "1889": 0, "1891": 0, "1893": 0, "1904": 0, "1906": 0, "1907": 0, "1909": 0, "1910": 0, "1912": 0, "1913": 0, "1914": 0, "1915": 0, "1918": 0, "1919": 0, "1921": 0, "1958": 0, "1960": 0, "1963": 0, "1968": 0, "1969": 0, "1980": 0, "1981": 0, "1982": 0, "1983": 0, "1984": 0, "1986": 0, "1987": 0, "1988": 0, "1989": 0, "1990": 0, "1992": 0, "1995": 0, "1996": 0, "1998": 0, "2000": 0, "2002": 0, "2003": 0, "2004": 0, "2007": 0, "2008": 0, "2011": 0, "2013": 0, "2014": 0, "2015": 0, "2016": 0, "2017": 0, "2018": 0, "2020": 0, "2022": 0, "2023": 0, "2024": 0, "2025": 0, "2026": 0, "2027": 0, "2029": 0, "2031": 0, "2032": 0, "2034": 0, "2035": 0, "2037": 0, "2038": 0, "2039": 0, "2041": 0, "2042": 0, "2044": 0, "2046": 0, "2050": 0, "2051": 0, "2055": 0, "2056": 0, "2060": 0, "2062": 0, "2073": 0, "2075": 0, "2078": 0, "2083": 0, "2084": 0, "2086": 0, "2088": 0, "2089": 0, "2090": 0, "2091": 0, "2092": 0, "2093": 0, "2094": 0, "2095": 0, "2096": 0, "2097": 0, "2098": 0, "2099": 0, "2101": 0, "2103": 0, "2104": 0, "2105": 0, "2106": 0, "2107": 0, "2108": 0, "2111": 0, "2112": 0, "2113": 0, "2114": 0, "2115": 0, "2118": 0, "2119": 0, "2120": 0, "2121": 0, "2122": 0, "2123": 0, "2124": 0, "2126": 0, "2128": 0, "2129": 0, "2130": 0, "2131": 0, "2132": 0, "2133": 0, "2135": 0, "2136": 0, "2138": 0, "2139": 0, "2140": 0, "2143": 0, "2147": 0, "2148": 0, "2149": 0, "2150": 0, "2151": 0, "2155": 0, "2156": 0, "2157": 0, "2158": 0, "2159": 0, "2162": 0, "2220": 0, "2222": 0, "2225": 0, "2226": 0, "2227": 0, "2232": 0, "2234": 0, "2236": 0, "2238": 0, "2239": 0, "2241": 0, "2246": 0, "2248": 0, "2249": 0, "2250": 0, "2251": 0, "2252": 0, "2254": 0, "2255": 0, "2257": 0, "2258": 0, "2259": 0, "2260": 0, "2263": 0, "2264": 0, "2265": 0, "2267": 0, "2298": 0, "2299": 0, "2300": 0, "2305": 0, "2307": 0, "2308": 0, "2309": 0, "2310": 0, "2311": 0, "2312": 0, "2313": 0, "2314": 0, "2320": 0, "2319": 0, "2322": 0, "2323": 0, "2326": 0, "2327": 0, "2330": 0, "2329": 0, "2331": 0, "2332": 0, "2333": 0, "2335": 0, "2337": 0, "2338": 0, "2339": 0, "2341": 0, "2344": 0, "2345": 0, "2346": 0, "2347": 0, "2349": 0, "2351": 0, "2352": 0, "2353": 0, "2355": 0, "2357": 0, "2358": 0, "2359": 0, "2361": 0, "2398": 0, "2399": 0, "2400": 0, "2401": 0, "2402": 0, "2403": 0, "2404": 0, "2405": 0, "2406": 0, "2407": 0, "2408": 0, "2409": 0, "2411": 0, "2412": 0, "2413": 0, "2415": 0, "2416": 0, "2418": 0, "2443": 0, "2444": 0, "2454": 0, "2455": 0, "2456": 0, "2457": 0, "2458": 0, "2459": 0, "2496": 0, "2497": 0, "2498": 0, "2500": 0, "2501": 0, "2503": 0, "2504": 0, "2506": 0, "2507": 0, "2509": 0, "2511": 0, "2513": 0, "2514": 0, "2515": 0, "2517": 0, "2518": 0, "2520": 0, "2521": 0, "2522": 0, "2523": 0, "2524": 0, "2526": 0, "2527": 0, "2528": 0, "2558": 0, "2559": 0, "2560": 0, "2562": 0, "2563": 0, "2564": 0, "2565": 0, "2566": 0, "2567": 0, "2568": 0, "2569": 0, "2570": 0, "2572": 0, "2573": 0, "2575": 0, "2576": 0, "2577": 0, "2579": 0, "2581": 0, "2602": 0, "2603": 0, "2605": 0, "2606": 0, "2608": 0, "2609": 0, "2611": 0, "2612": 0, "2613": 0, "2615": 0, "2617": 0, "2618": 0, "2620": 0, "2622": 0, "2631": 0, "2632": 0, "2633": 0, "2642": 0, "2643": 0, "2665": 0, "2666": 0, "2668": 0, "2670": 0, "2671": 0, "2673": 0, "2675": 0, "2676": 0, "2677": 0, "2678": 0, "2679": 0, "2680": 0, "2682": 0, "2684": 0, "2685": 0, "2686": 0, "2688": 0, "2689": 0, "2690": 0, "2691": 0, "2692": 0, "2694": 0, "2695": 0, "2696": 0, "2697": 0, "2699": 0, "2700": 0, "2701": 0, "2702": 0, "2703": 0, "2704": 0, "2705": 0, "2707": 0, "2735": 0, "2737": 0, "2738": 0, "2743": 0, "2744": 0, "2745": 0, "2747": 0, "2748": 0, "2750": 0, "2751": 0, "2752": 0, "2754": 0, "2755": 0, "2756": 0, "2757": 0, "2758": 0, "2760": 0, "2761": 0, "2762": 0, "2763": 0, "2765": 0, "2766": 0, "2768": 0, "2769": 0, "2771": 0, "2808": 0, "2810": 0, "2811": 0, "2816": 0, "2817": 0, "2818": 0, "2820": 0, "2822": 0, "2823": 0, "2825": 0, "2826": 0, "2828": 0, "2829": 0, "2830": 0, "2831": 0, "2833": 0, "2834": 0, "2835": 0, "2836": 0, "2837": 0, "2867": 0, "2869": 0, "2870": 0, "2871": 0, "2872": 0, "2873": 0, "2878": 0, "2880": 0, "2882": 0, "2883": 0, "2885": 0, "2886": 0, "2888": 0, "2889": 0, "2890": 0, "2891": 0, "2893": 0, "2894": 0, "2895": 0, "2896": 0, "2897": 0, "2948": 0, "2949": 0, "2950": 0, "2951": 0, "2953": 0, "2954": 0, "2955": 0, "2956": 0, "2982": 0, "2983": 0, "2985": 0, "2986": 0, "2988": 0, "2990": 0, "2991": 0, "2993": 0, "2994": 0, "2996": 0, "2997": 0, "2999": 0, "3032": 0, "3033": 0, "3034": 0, "3035": 0, "3037": 0, "3039": 0, "3040": 0, "3042": 0, "3043": 0, "3045": 0, "3046": 0, "3048": 0, "3049": 0, "3050": 0, "3052": 0, "3054": 0, "3055": 0, "3057": 0, "3059": 0, "3060": 0, "3062": 0, "3063": 0, "3064": 0, "3065": 0, "3066": 0, "3067": 0, "3069": 0, "3070": 0, "3072": 0, "3074": 0, "3075": 0, "3076": 0, "3077": 0, "3078": 0, "3111": 0, "3112": 0, "3114": 0, "3115": 0, "3117": 0, "3118": 0, "3119": 0, "3120": 0, "3121": 0, "3122": 0, "3124": 0, "3126": 0, "3128": 0, "3177": 0, "3179": 0, "3180": 0, "3181": 0, "3182": 0, "3183": 0, "3185": 0, "3186": 0, "3188": 0, "3190": 0, "3191": 0, "3192": 0, "3193": 0, "3195": 0, "3196": 0, "3197": 0, "3199": 0, "3200": 0, "3201": 0, "3202": 0, "3203": 0, "3204": 0, "3205": 0, "3207": 0, "3208": 0, "3209": 0, "3210": 0, "3212": 0, "3213": 0, "3214": 0, "3215": 0, "3216": 0, "3220": 0, "3221": 0, "3222": 0, "3223": 0, "3225": 0, "3226": 0, "3227": 0, "3228": 0, "3230": 0, "3231": 0, "3232": 0, "3233": 0, "3235": 0, "3236": 0, "3237": 0, "3238": 0, "3239": 0, "3247": 0, "3248": 0, "3250": 0, "3251": 0, "3252": 0, "3253": 0, "3254": 0, "3255": 0, "3256": 0, "3303": 0, "3304": 0, "3314": 0, "3315": 0, "3316": 0, "3317": 0, "3318": 0, "3319": 0, "3320": 0, "3321": 0, "3322": 0, "3323": 0, "3324": 0, "3325": 0, "3326": 0, "3327": 0, "3328": 0, "3330": 0, "3331": 0, "3334": 0, "3335": 0, "3336": 0, "3337": 0, "3338": 0, "3339": 0, "3342": 0}}
+ git checkout 1923822ddf8265199dbd9ef9ce09641d3fd042b9
Note: switching to '1923822ddf8265199dbd9ef9ce09641d3fd042b9'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at 1923822ddf Merge pull request #18187 from namannimmo10/new-patch
+ git apply /root/pre_state.patch
error: unrecognized input
