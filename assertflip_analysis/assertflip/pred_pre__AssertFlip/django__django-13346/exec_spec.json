{"instance_id": "django__django-13346", "repo": "django/django", "version": "3.2", "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d", "patch_list": ["diff --git a/dev/null b/tests/test_coverup_django__django-13346.py\nnew file mode 100644\nindex e69de29..8104cc6 100644\n--- /dev/null\n+++ b/tests/test_coverup_django__django-13346.py\n@@ -0,0 +1,38 @@\n+from django.test import TestCase\n+from django.db import models, connection\n+\n+class JSONFieldInLookupTest(TestCase):\n+    databases = {'default'}\n+\n+    @classmethod\n+    def setUpTestData(cls):\n+        # Define the model within the test class to ensure it is created\n+        class TestModel(models.Model):\n+            our_field = models.JSONField()\n+\n+            class Meta:\n+                app_label = 'myapp'\n+\n+        cls.TestModel = TestModel\n+\n+        # Create the table for the model\n+        with connection.cursor() as cursor:\n+            cursor.execute('CREATE TABLE myapp_testmodel (id INTEGER PRIMARY KEY AUTOINCREMENT, our_field JSON);')\n+\n+        # Insert test data with 'our_field' containing a key with a value of 0\n+        cls.TestModel.objects.create(our_field={'key': 0})\n+        cls.TestModel.objects.create(our_field={'key': 0})\n+        cls.TestModel.objects.create(our_field={'key': 0})\n+        cls.TestModel.objects.create(our_field={'key': 1})\n+\n+    def test_in_lookup_on_key_transform(self):\n+        # Test with __in lookup on key transform\n+        first_filter = {'our_field__key__in': [0]}\n+        first_items = self.TestModel.objects.filter(**first_filter)\n+        # Assert that the correct behavior occurs\n+        self.assertEqual(len(first_items), 3)  # This should return 3 items as expected\n+\n+        # Control test to show that the key lookup works without __in\n+        second_filter = {'our_field__key': 0}\n+        second_items = self.TestModel.objects.filter(**second_filter)\n+        self.assertEqual(len(second_items), 3)  # This should return 3 items as expected\n"], "arch": "x86_64", "base_commit": "9c92924cd5d164701e2514e1c2d6574126bd7cc2", "test_directives": ["test_coverup_django__django-13346"], "coverage_files": ["django/db/models/fields/json.py"], "env_name": "testbed", "run_id": "assertflip", "patch_id": "pred_pre__AssertFlip", "timeout": 1800, "rm_image": false, "force_rebuild": false, "exec_mode": "unit_test", "reproduction_script_name": null, "compute_coverage": true, "install": {"python": "3.6", "packages": "requirements.txt", "install": "python -m pip install -e .", "eval_commands": ["sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen && locale-gen", "export LANG=en_US.UTF-8", "export LANGUAGE=en_US:en", "export LC_ALL=en_US.UTF-8"]}, "cache_level": "instance", "test_command": "python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/db/models/fields/json\\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-13346", "req_install_commands": ["conda create -n testbed python=3.6 -y", "cat <<'EOF_59812759871' > $HOME/requirements.txt\nasgiref >= 3.3.2\nargon2-cffi >= 16.1.0\nbackports.zoneinfo; python_version < '3.9'\nbcrypt\ndocutils\ngeoip2\njinja2 >= 2.9.2\nnumpy\nPillow >= 6.2.0\npylibmc; sys.platform != 'win32'\npymemcache >= 3.4.0\npython-memcached >= 1.59\npytz\npywatchman; sys.platform != 'win32'\nPyYAML\nselenium\nsqlparse >= 0.2.2\ntblib >= 1.5.0\ntzdata\ncolorama; sys.platform == 'win32'\n\nEOF_59812759871", "conda activate testbed && python -m pip install -r $HOME/requirements.txt", "rm $HOME/requirements.txt"]}