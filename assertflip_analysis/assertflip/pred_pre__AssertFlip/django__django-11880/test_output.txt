+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD 06909fe084f87a65459a83bd69d7cdbe4fce9a7c
+ sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen
+ locale-gen
Generating locales (this might take a while)...
  en_US.UTF-8... done
Generation complete.
+ export LANG=en_US.UTF-8
+ LANG=en_US.UTF-8
+ export LANGUAGE=en_US:en
+ LANGUAGE=en_US:en
+ export LC_ALL=en_US.UTF-8
+ LC_ALL=en_US.UTF-8
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
nothing to commit, working tree clean
+ git show
commit 06909fe084f87a65459a83bd69d7cdbe4fce9a7c
Author: Caio Ariede <caio.ariede@gmail.com>
Date:   Fri Oct 4 10:55:41 2019 -0300

    Fixed #28273 -- Doc'd fast nullable column creation with defaults.

diff --git a/docs/ref/migration-operations.txt b/docs/ref/migration-operations.txt
index cbb76f79f7..f082452a31 100644
--- a/docs/ref/migration-operations.txt
+++ b/docs/ref/migration-operations.txt
@@ -150,6 +150,21 @@ a default value to put into existing rows. It does not affect the behavior
 of setting defaults in the database directly - Django never sets database
 defaults and always applies them in the Django ORM code.
 
+.. warning::
+
+    On older databases, adding a field with a default value may cause a full
+    rewrite of the table. This happens even for nullable fields and may have a
+    negative performance impact. To avoid that, the following steps should be
+    taken.
+
+    * Add the nullable field without the default value and run the
+      :djadmin:`makemigrations` command. This should generate a migration with
+      an ``AddField`` operation.
+
+    * Add the default value to your field and run the :djadmin:`makemigrations`
+      command. This should generate a migration with an ``AlterField``
+      operation.
+
 ``RemoveField``
 ---------------
 
+ git diff 06909fe084f87a65459a83bd69d7cdbe4fce9a7c
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
Requirement already satisfied: pytz in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.1) (2025.2)
Requirement already satisfied: sqlparse in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.1) (0.4.4)
Requirement already satisfied: asgiref in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.1) (3.4.1)
Requirement already satisfied: typing-extensions in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from asgiref->Django==3.1) (4.1.1)
Installing collected packages: Django
  Attempting uninstall: Django
    Found existing installation: Django 3.1
    Uninstalling Django-3.1:
      Successfully uninstalled Django-3.1
  Running setup.py develop for Django
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv
Successfully installed Django-3.1
+ git apply -v -
Checking patch tests/test_coverup_django__django-11880.py...
Applied patch tests/test_coverup_django__django-11880.py cleanly.
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/forms/fields\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-11880
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(django/forms/fields\\.py)']
0.24 /testbed/django/forms/fields.py(3): """
0.24 /testbed/django/forms/fields.py(5): import copy
0.24 /testbed/django/forms/fields.py(6): import datetime
0.24 /testbed/django/forms/fields.py(7): import math
0.24 /testbed/django/forms/fields.py(8): import operator
0.24 /testbed/django/forms/fields.py(9): import os
0.24 /testbed/django/forms/fields.py(10): import re
0.24 /testbed/django/forms/fields.py(11): import uuid
0.24 /testbed/django/forms/fields.py(12): from decimal import Decimal, DecimalException
0.24 /testbed/django/forms/fields.py(13): from io import BytesIO
0.24 /testbed/django/forms/fields.py(14): from urllib.parse import urlsplit, urlunsplit
0.24 /testbed/django/forms/fields.py(16): from django.core import validators
0.24 /testbed/django/forms/fields.py(17): from django.core.exceptions import ValidationError
0.24 /testbed/django/forms/fields.py(18): from django.forms.boundfield import BoundField
0.24 /testbed/django/forms/fields.py(19): from django.forms.utils import from_current_timezone, to_current_timezone
0.24 /testbed/django/forms/fields.py(20): from django.forms.widgets import (
0.24 /testbed/django/forms/fields.py(27): from django.utils import formats
0.24 /testbed/django/forms/fields.py(28): from django.utils.dateparse import parse_duration
0.25 /testbed/django/forms/fields.py(29): from django.utils.duration import duration_string
0.25 /testbed/django/forms/fields.py(30): from django.utils.ipv6 import clean_ipv6_address
0.25 /testbed/django/forms/fields.py(31): from django.utils.translation import gettext_lazy as _, ngettext_lazy
0.25 /testbed/django/forms/fields.py(40):     'SlugField', 'TypedChoiceField', 'TypedMultipleChoiceField', 'UUIDField',
0.25 /testbed/django/forms/fields.py(44): class Field:
0.25 /testbed/django/forms/fields.py(44): class Field:
0.25 /testbed/django/forms/fields.py(45):     widget = TextInput  # Default widget to use when rendering this type of Field.
0.25 /testbed/django/forms/fields.py(46):     hidden_widget = HiddenInput  # Default widget to use when rendering this as "hidden".
0.25 /testbed/django/forms/fields.py(47):     default_validators = []  # Default set of validators
0.25 /testbed/django/forms/fields.py(51):         'required': _('This field is required.'),
0.25 /testbed/django/forms/fields.py(53):     empty_values = list(validators.EMPTY_VALUES)
0.25 /testbed/django/forms/fields.py(55):     def __init__(self, *, required=True, widget=None, label=None, initial=None,
0.25 /testbed/django/forms/fields.py(56):                  help_text='', error_messages=None, show_hidden_initial=False,
0.25 /testbed/django/forms/fields.py(57):                  validators=(), localize=False, disabled=False, label_suffix=None):
0.25 /testbed/django/forms/fields.py(117):     def prepare_value(self, value):
0.25 /testbed/django/forms/fields.py(120):     def to_python(self, value):
0.25 /testbed/django/forms/fields.py(123):     def validate(self, value):
0.25 /testbed/django/forms/fields.py(127):     def run_validators(self, value):
0.25 /testbed/django/forms/fields.py(141):     def clean(self, value):
0.25 /testbed/django/forms/fields.py(151):     def bound_data(self, data, initial):
0.25 /testbed/django/forms/fields.py(164):     def widget_attrs(self, widget):
0.25 /testbed/django/forms/fields.py(172):     def has_changed(self, initial, data):
0.25 /testbed/django/forms/fields.py(191):     def get_bound_field(self, form, field_name):
0.25 /testbed/django/forms/fields.py(198):     def __deepcopy__(self, memo):
0.25 /testbed/django/forms/fields.py(206): class CharField(Field):
0.25 /testbed/django/forms/fields.py(206): class CharField(Field):
0.25 /testbed/django/forms/fields.py(207):     def __init__(self, *, max_length=None, min_length=None, strip=True, empty_value='', **kwargs):
0.25 /testbed/django/forms/fields.py(219):     def to_python(self, value):
0.25 /testbed/django/forms/fields.py(229):     def widget_attrs(self, widget):
0.25 /testbed/django/forms/fields.py(240): class IntegerField(Field):
0.25 /testbed/django/forms/fields.py(240): class IntegerField(Field):
0.25 /testbed/django/forms/fields.py(241):     widget = NumberInput
0.25 /testbed/django/forms/fields.py(243):         'invalid': _('Enter a whole number.'),
0.25 /testbed/django/forms/fields.py(245):     re_decimal = re.compile(r'\.0*\s*$')
0.25 /testbed/django/forms/fields.py(247):     def __init__(self, *, max_value=None, min_value=None, **kwargs):
0.25 /testbed/django/forms/fields.py(259):     def to_python(self, value):
0.25 /testbed/django/forms/fields.py(276):     def widget_attrs(self, widget):
0.25 /testbed/django/forms/fields.py(286): class FloatField(IntegerField):
0.25 /testbed/django/forms/fields.py(286): class FloatField(IntegerField):
0.25 /testbed/django/forms/fields.py(288):         'invalid': _('Enter a number.'),
0.25 /testbed/django/forms/fields.py(291):     def to_python(self, value):
0.25 /testbed/django/forms/fields.py(307):     def validate(self, value):
0.25 /testbed/django/forms/fields.py(314):     def widget_attrs(self, widget):
0.25 /testbed/django/forms/fields.py(321): class DecimalField(IntegerField):
0.25 /testbed/django/forms/fields.py(321): class DecimalField(IntegerField):
0.25 /testbed/django/forms/fields.py(323):         'invalid': _('Enter a number.'),
0.25 /testbed/django/forms/fields.py(326):     def __init__(self, *, max_value=None, min_value=None, max_digits=None, decimal_places=None, **kwargs):
0.25 /testbed/django/forms/fields.py(331):     def to_python(self, value):
0.25 /testbed/django/forms/fields.py(349):     def validate(self, value):
0.25 /testbed/django/forms/fields.py(356):     def widget_attrs(self, widget):
0.25 /testbed/django/forms/fields.py(369): class BaseTemporalField(Field):
0.25 /testbed/django/forms/fields.py(369): class BaseTemporalField(Field):
0.25 /testbed/django/forms/fields.py(371):     def __init__(self, *, input_formats=None, **kwargs):
0.25 /testbed/django/forms/fields.py(376):     def to_python(self, value):
0.25 /testbed/django/forms/fields.py(386):     def strptime(self, value, format):
0.25 /testbed/django/forms/fields.py(390): class DateField(BaseTemporalField):
0.25 /testbed/django/forms/fields.py(390): class DateField(BaseTemporalField):
0.25 /testbed/django/forms/fields.py(391):     widget = DateInput
0.25 /testbed/django/forms/fields.py(392):     input_formats = formats.get_format_lazy('DATE_INPUT_FORMATS')
0.25 /testbed/django/forms/fields.py(394):         'invalid': _('Enter a valid date.'),
0.25 /testbed/django/forms/fields.py(397):     def to_python(self, value):
0.25 /testbed/django/forms/fields.py(410):     def strptime(self, value, format):
0.25 /testbed/django/forms/fields.py(414): class TimeField(BaseTemporalField):
0.25 /testbed/django/forms/fields.py(414): class TimeField(BaseTemporalField):
0.25 /testbed/django/forms/fields.py(415):     widget = TimeInput
0.25 /testbed/django/forms/fields.py(416):     input_formats = formats.get_format_lazy('TIME_INPUT_FORMATS')
0.25 /testbed/django/forms/fields.py(418):         'invalid': _('Enter a valid time.')
0.25 /testbed/django/forms/fields.py(421):     def to_python(self, value):
0.25 /testbed/django/forms/fields.py(432):     def strptime(self, value, format):
0.25 /testbed/django/forms/fields.py(436): class DateTimeField(BaseTemporalField):
0.25 /testbed/django/forms/fields.py(436): class DateTimeField(BaseTemporalField):
0.25 /testbed/django/forms/fields.py(437):     widget = DateTimeInput
0.25 /testbed/django/forms/fields.py(438):     input_formats = formats.get_format_lazy('DATETIME_INPUT_FORMATS')
0.25 /testbed/django/forms/fields.py(440):         'invalid': _('Enter a valid date/time.'),
0.25 /testbed/django/forms/fields.py(443):     def prepare_value(self, value):
0.25 /testbed/django/forms/fields.py(448):     def to_python(self, value):
0.25 /testbed/django/forms/fields.py(463):     def strptime(self, value, format):
0.25 /testbed/django/forms/fields.py(467): class DurationField(Field):
0.25 /testbed/django/forms/fields.py(467): class DurationField(Field):
0.25 /testbed/django/forms/fields.py(469):         'invalid': _('Enter a valid duration.'),
0.25 /testbed/django/forms/fields.py(470):         'overflow': _('The number of days must be between {min_days} and {max_days}.')
0.25 /testbed/django/forms/fields.py(473):     def prepare_value(self, value):
0.25 /testbed/django/forms/fields.py(478):     def to_python(self, value):
0.25 /testbed/django/forms/fields.py(495): class RegexField(CharField):
0.25 /testbed/django/forms/fields.py(495): class RegexField(CharField):
0.25 /testbed/django/forms/fields.py(496):     def __init__(self, regex, **kwargs):
0.25 /testbed/django/forms/fields.py(504):     def _get_regex(self):
0.25 /testbed/django/forms/fields.py(507):     def _set_regex(self, regex):
0.25 /testbed/django/forms/fields.py(516):     regex = property(_get_regex, _set_regex)
0.25 /testbed/django/forms/fields.py(519): class EmailField(CharField):
0.25 /testbed/django/forms/fields.py(519): class EmailField(CharField):
0.25 /testbed/django/forms/fields.py(520):     widget = EmailInput
0.25 /testbed/django/forms/fields.py(521):     default_validators = [validators.validate_email]
0.25 /testbed/django/forms/fields.py(523):     def __init__(self, **kwargs):
0.25 /testbed/django/forms/fields.py(527): class FileField(Field):
0.25 /testbed/django/forms/fields.py(527): class FileField(Field):
0.25 /testbed/django/forms/fields.py(528):     widget = ClearableFileInput
0.25 /testbed/django/forms/fields.py(530):         'invalid': _("No file was submitted. Check the encoding type on the form."),
0.25 /testbed/django/forms/fields.py(531):         'missing': _("No file was submitted."),
0.25 /testbed/django/forms/fields.py(532):         'empty': _("The submitted file is empty."),
0.25 /testbed/django/forms/fields.py(533):         'max_length': ngettext_lazy(
0.25 /testbed/django/forms/fields.py(534):             'Ensure this filename has at most %(max)d character (it has %(length)d).',
0.25 /testbed/django/forms/fields.py(535):             'Ensure this filename has at most %(max)d characters (it has %(length)d).',
0.25 /testbed/django/forms/fields.py(536):             'max'),
0.25 /testbed/django/forms/fields.py(537):         'contradiction': _('Please either submit a file or check the clear checkbox, not both.')
0.25 /testbed/django/forms/fields.py(540):     def __init__(self, *, max_length=None, allow_empty_file=False, **kwargs):
0.25 /testbed/django/forms/fields.py(545):     def to_python(self, data):
0.25 /testbed/django/forms/fields.py(566):     def clean(self, data, initial=None):
0.25 /testbed/django/forms/fields.py(585):     def bound_data(self, data, initial):
0.25 /testbed/django/forms/fields.py(590):     def has_changed(self, initial, data):
0.25 /testbed/django/forms/fields.py(594): class ImageField(FileField):
0.25 /testbed/django/forms/fields.py(594): class ImageField(FileField):
0.25 /testbed/django/forms/fields.py(595):     default_validators = [validators.validate_image_file_extension]
0.25 /testbed/django/forms/fields.py(597):         'invalid_image': _(
0.25 /testbed/django/forms/fields.py(598):             "Upload a valid image. The file you uploaded was either not an "
0.25 /testbed/django/forms/fields.py(603):     def to_python(self, data):
0.25 /testbed/django/forms/fields.py(646):     def widget_attrs(self, widget):
0.25 /testbed/django/forms/fields.py(653): class URLField(CharField):
0.25 /testbed/django/forms/fields.py(653): class URLField(CharField):
0.25 /testbed/django/forms/fields.py(654):     widget = URLInput
0.25 /testbed/django/forms/fields.py(656):         'invalid': _('Enter a valid URL.'),
0.25 /testbed/django/forms/fields.py(658):     default_validators = [validators.URLValidator()]
0.25 /testbed/django/forms/fields.py(660):     def __init__(self, **kwargs):
0.25 /testbed/django/forms/fields.py(663):     def to_python(self, value):
0.25 /testbed/django/forms/fields.py(695): class BooleanField(Field):
0.25 /testbed/django/forms/fields.py(695): class BooleanField(Field):
0.25 /testbed/django/forms/fields.py(696):     widget = CheckboxInput
0.25 /testbed/django/forms/fields.py(698):     def to_python(self, value):
0.25 /testbed/django/forms/fields.py(710):     def validate(self, value):
0.25 /testbed/django/forms/fields.py(714):     def has_changed(self, initial, data):
0.25 /testbed/django/forms/fields.py(722): class NullBooleanField(BooleanField):
0.25 /testbed/django/forms/fields.py(722): class NullBooleanField(BooleanField):
0.25 /testbed/django/forms/fields.py(726):     """
0.25 /testbed/django/forms/fields.py(727):     widget = NullBooleanSelect
0.25 /testbed/django/forms/fields.py(729):     def to_python(self, value):
0.25 /testbed/django/forms/fields.py(745):     def validate(self, value):
0.25 /testbed/django/forms/fields.py(749): class CallableChoiceIterator:
0.25 /testbed/django/forms/fields.py(749): class CallableChoiceIterator:
0.25 /testbed/django/forms/fields.py(750):     def __init__(self, choices_func):
0.25 /testbed/django/forms/fields.py(753):     def __iter__(self):
0.25 /testbed/django/forms/fields.py(757): class ChoiceField(Field):
0.25 /testbed/django/forms/fields.py(757): class ChoiceField(Field):
0.25 /testbed/django/forms/fields.py(758):     widget = Select
0.25 /testbed/django/forms/fields.py(760):         'invalid_choice': _('Select a valid choice. %(value)s is not one of the available choices.'),
0.25 /testbed/django/forms/fields.py(763):     def __init__(self, *, choices=(), **kwargs):
0.25 /testbed/django/forms/fields.py(767):     def __deepcopy__(self, memo):
0.25 /testbed/django/forms/fields.py(772):     def _get_choices(self):
0.25 /testbed/django/forms/fields.py(775):     def _set_choices(self, value):
0.25 /testbed/django/forms/fields.py(786):     choices = property(_get_choices, _set_choices)
0.25 /testbed/django/forms/fields.py(788):     def to_python(self, value):
0.25 /testbed/django/forms/fields.py(794):     def validate(self, value):
0.25 /testbed/django/forms/fields.py(804):     def valid_value(self, value):
0.25 /testbed/django/forms/fields.py(819): class TypedChoiceField(ChoiceField):
0.25 /testbed/django/forms/fields.py(819): class TypedChoiceField(ChoiceField):
0.25 /testbed/django/forms/fields.py(820):     def __init__(self, *, coerce=lambda val: val, empty_value='', **kwargs):
0.25 /testbed/django/forms/fields.py(825):     def _coerce(self, value):
0.25 /testbed/django/forms/fields.py(841):     def clean(self, value):
0.25 /testbed/django/forms/fields.py(846): class MultipleChoiceField(ChoiceField):
0.25 /testbed/django/forms/fields.py(846): class MultipleChoiceField(ChoiceField):
0.25 /testbed/django/forms/fields.py(847):     hidden_widget = MultipleHiddenInput
0.25 /testbed/django/forms/fields.py(848):     widget = SelectMultiple
0.25 /testbed/django/forms/fields.py(850):         'invalid_choice': _('Select a valid choice. %(value)s is not one of the available choices.'),
0.25 /testbed/django/forms/fields.py(851):         'invalid_list': _('Enter a list of values.'),
0.25 /testbed/django/forms/fields.py(854):     def to_python(self, value):
0.25 /testbed/django/forms/fields.py(861):     def validate(self, value):
0.25 /testbed/django/forms/fields.py(874):     def has_changed(self, initial, data):
0.25 /testbed/django/forms/fields.py(888): class TypedMultipleChoiceField(MultipleChoiceField):
0.25 /testbed/django/forms/fields.py(888): class TypedMultipleChoiceField(MultipleChoiceField):
0.25 /testbed/django/forms/fields.py(889):     def __init__(self, *, coerce=lambda val: val, **kwargs):
0.25 /testbed/django/forms/fields.py(894):     def _coerce(self, value):
0.25 /testbed/django/forms/fields.py(913):     def clean(self, value):
0.25 /testbed/django/forms/fields.py(917):     def validate(self, value):
0.25 /testbed/django/forms/fields.py(924): class ComboField(Field):
0.25 /testbed/django/forms/fields.py(924): class ComboField(Field):
0.25 /testbed/django/forms/fields.py(927):     """
0.25 /testbed/django/forms/fields.py(928):     def __init__(self, fields, **kwargs):
0.25 /testbed/django/forms/fields.py(937):     def clean(self, value):
0.25 /testbed/django/forms/fields.py(948): class MultiValueField(Field):
0.25 /testbed/django/forms/fields.py(948): class MultiValueField(Field):
0.25 /testbed/django/forms/fields.py(964):     """
test_deepcopy_error_messages (test_coverup_django__django-11880.FieldDeepCopyTest) ... 0.25 /testbed/django/forms/fields.py(966):         'invalid': _('Enter a list of values.'),
0.25 /testbed/django/forms/fields.py(967):         'incomplete': _('Enter a complete value.'),
0.25 /testbed/django/forms/fields.py(970):     def __init__(self, fields, *, require_all_fields=True, **kwargs):
0.25 /testbed/django/forms/fields.py(985):     def __deepcopy__(self, memo):
0.25 /testbed/django/forms/fields.py(990):     def validate(self, value):
0.25 /testbed/django/forms/fields.py(993):     def clean(self, value):
0.25 /testbed/django/forms/fields.py(1047):     def compress(self, data_list):
0.25 /testbed/django/forms/fields.py(1058):     def has_changed(self, initial, data):
0.25 /testbed/django/forms/fields.py(1076): class FilePathField(ChoiceField):
0.25 /testbed/django/forms/fields.py(1076): class FilePathField(ChoiceField):
0.25 /testbed/django/forms/fields.py(1077):     def __init__(self, path, *, match=None, recursive=False, allow_files=True,
0.25 /testbed/django/forms/fields.py(1078):                  allow_folders=False, **kwargs):
0.25 /testbed/django/forms/fields.py(1120): class SplitDateTimeField(MultiValueField):
0.25 /testbed/django/forms/fields.py(1120): class SplitDateTimeField(MultiValueField):
0.25 /testbed/django/forms/fields.py(1121):     widget = SplitDateTimeWidget
0.25 /testbed/django/forms/fields.py(1122):     hidden_widget = SplitHiddenDateTimeWidget
0.25 /testbed/django/forms/fields.py(1124):         'invalid_date': _('Enter a valid date.'),
0.25 /testbed/django/forms/fields.py(1125):         'invalid_time': _('Enter a valid time.'),
0.25 /testbed/django/forms/fields.py(1128):     def __init__(self, *, input_date_formats=None, input_time_formats=None, **kwargs):
0.25 /testbed/django/forms/fields.py(1143):     def compress(self, data_list):
0.25 /testbed/django/forms/fields.py(1156): class GenericIPAddressField(CharField):
0.25 /testbed/django/forms/fields.py(1156): class GenericIPAddressField(CharField):
0.25 /testbed/django/forms/fields.py(1157):     def __init__(self, *, protocol='both', unpack_ipv4=False, **kwargs):
0.25 /testbed/django/forms/fields.py(1162):     def to_python(self, value):
0.25 /testbed/django/forms/fields.py(1171): class SlugField(CharField):
0.25 /testbed/django/forms/fields.py(1171): class SlugField(CharField):
0.25 /testbed/django/forms/fields.py(1172):     default_validators = [validators.validate_slug]
0.25 /testbed/django/forms/fields.py(1174):     def __init__(self, *, allow_unicode=False, **kwargs):
0.25 /testbed/django/forms/fields.py(1181): class UUIDField(CharField):
0.25 /testbed/django/forms/fields.py(1181): class UUIDField(CharField):
0.25 /testbed/django/forms/fields.py(1183):         'invalid': _('Enter a valid UUID.'),
0.25 /testbed/django/forms/fields.py(1186):     def prepare_value(self, value):
0.25 /testbed/django/forms/fields.py(1191):     def to_python(self, value):
Testing against Django installed in '/testbed/django'
0.49 /testbed/django/forms/fields.py(764):         super().__init__(**kwargs)
0.49 /testbed/django/forms/fields.py(81):         self.required, self.label, self.initial = required, label, initial
0.49 /testbed/django/forms/fields.py(82):         self.show_hidden_initial = show_hidden_initial
0.49 /testbed/django/forms/fields.py(83):         self.help_text = help_text
0.49 /testbed/django/forms/fields.py(84):         self.disabled = disabled
0.49 /testbed/django/forms/fields.py(85):         self.label_suffix = label_suffix
0.49 /testbed/django/forms/fields.py(86):         widget = widget or self.widget
0.49 /testbed/django/forms/fields.py(87):         if isinstance(widget, type):
0.49 /testbed/django/forms/fields.py(88):             widget = widget()
0.49 /testbed/django/forms/fields.py(93):         self.localize = localize
0.49 /testbed/django/forms/fields.py(94):         if self.localize:
0.49 /testbed/django/forms/fields.py(98):         widget.is_required = self.required
0.49 /testbed/django/forms/fields.py(101):         extra_attrs = self.widget_attrs(widget)
0.49 /testbed/django/forms/fields.py(170):         return {}
0.49 /testbed/django/forms/fields.py(102):         if extra_attrs:
0.49 /testbed/django/forms/fields.py(105):         self.widget = widget
0.49 /testbed/django/forms/fields.py(107):         messages = {}
0.49 /testbed/django/forms/fields.py(108):         for c in reversed(self.__class__.__mro__):
0.49 /testbed/django/forms/fields.py(109):             messages.update(getattr(c, 'default_error_messages', {}))
0.49 /testbed/django/forms/fields.py(108):         for c in reversed(self.__class__.__mro__):
0.49 /testbed/django/forms/fields.py(109):             messages.update(getattr(c, 'default_error_messages', {}))
0.49 /testbed/django/forms/fields.py(108):         for c in reversed(self.__class__.__mro__):
0.49 /testbed/django/forms/fields.py(109):             messages.update(getattr(c, 'default_error_messages', {}))
0.49 /testbed/django/forms/fields.py(108):         for c in reversed(self.__class__.__mro__):
0.49 /testbed/django/forms/fields.py(110):         messages.update(error_messages or {})
0.49 /testbed/django/forms/fields.py(111):         self.error_messages = messages
0.49 /testbed/django/forms/fields.py(113):         self.validators = [*self.default_validators, *validators]
0.49 /testbed/django/forms/fields.py(115):         super().__init__()
0.49 /testbed/django/forms/fields.py(765):         self.choices = choices
0.49 /testbed/django/forms/fields.py(779):         if callable(value):
0.49 /testbed/django/forms/fields.py(782):             value = list(value)
0.49 /testbed/django/forms/fields.py(784):         self._choices = self.widget.choices = value
0.49 /testbed/django/forms/fields.py(81):         self.required, self.label, self.initial = required, label, initial
0.49 /testbed/django/forms/fields.py(82):         self.show_hidden_initial = show_hidden_initial
0.49 /testbed/django/forms/fields.py(83):         self.help_text = help_text
0.49 /testbed/django/forms/fields.py(84):         self.disabled = disabled
0.49 /testbed/django/forms/fields.py(85):         self.label_suffix = label_suffix
0.49 /testbed/django/forms/fields.py(86):         widget = widget or self.widget
0.49 /testbed/django/forms/fields.py(87):         if isinstance(widget, type):
0.49 /testbed/django/forms/fields.py(90):             widget = copy.deepcopy(widget)
0.49 /testbed/django/forms/fields.py(93):         self.localize = localize
0.49 /testbed/django/forms/fields.py(94):         if self.localize:
0.49 /testbed/django/forms/fields.py(98):         widget.is_required = self.required
0.49 /testbed/django/forms/fields.py(101):         extra_attrs = self.widget_attrs(widget)
0.49 /testbed/django/forms/fields.py(170):         return {}
0.49 /testbed/django/forms/fields.py(102):         if extra_attrs:
0.49 /testbed/django/forms/fields.py(105):         self.widget = widget
0.49 /testbed/django/forms/fields.py(107):         messages = {}
0.49 /testbed/django/forms/fields.py(108):         for c in reversed(self.__class__.__mro__):
0.49 /testbed/django/forms/fields.py(109):             messages.update(getattr(c, 'default_error_messages', {}))
0.49 /testbed/django/forms/fields.py(108):         for c in reversed(self.__class__.__mro__):
0.49 /testbed/django/forms/fields.py(109):             messages.update(getattr(c, 'default_error_messages', {}))
0.49 /testbed/django/forms/fields.py(108):         for c in reversed(self.__class__.__mro__):
0.49 /testbed/django/forms/fields.py(109):             messages.update(getattr(c, 'default_error_messages', {}))
0.49 /testbed/django/forms/fields.py(108):         for c in reversed(self.__class__.__mro__):
0.49 /testbed/django/forms/fields.py(110):         messages.update(error_messages or {})
0.49 /testbed/django/forms/fields.py(111):         self.error_messages = messages
0.49 /testbed/django/forms/fields.py(113):         self.validators = [*self.default_validators, *validators]
0.49 /testbed/django/forms/fields.py(115):         super().__init__()
Skipping setup of unused database(s): default, other.
System check identified no issues (0 silenced).
0.60 /testbed/django/forms/fields.py(208):         self.max_length = max_length
0.60 /testbed/django/forms/fields.py(209):         self.min_length = min_length
0.60 /testbed/django/forms/fields.py(210):         self.strip = strip
0.60 /testbed/django/forms/fields.py(211):         self.empty_value = empty_value
0.60 /testbed/django/forms/fields.py(212):         super().__init__(**kwargs)
0.60 /testbed/django/forms/fields.py(81):         self.required, self.label, self.initial = required, label, initial
0.60 /testbed/django/forms/fields.py(82):         self.show_hidden_initial = show_hidden_initial
0.60 /testbed/django/forms/fields.py(83):         self.help_text = help_text
0.60 /testbed/django/forms/fields.py(84):         self.disabled = disabled
0.60 /testbed/django/forms/fields.py(85):         self.label_suffix = label_suffix
0.60 /testbed/django/forms/fields.py(86):         widget = widget or self.widget
0.60 /testbed/django/forms/fields.py(87):         if isinstance(widget, type):
0.60 /testbed/django/forms/fields.py(88):             widget = widget()
0.60 /testbed/django/forms/fields.py(93):         self.localize = localize
0.60 /testbed/django/forms/fields.py(94):         if self.localize:
0.60 /testbed/django/forms/fields.py(98):         widget.is_required = self.required
0.60 /testbed/django/forms/fields.py(101):         extra_attrs = self.widget_attrs(widget)
0.60 /testbed/django/forms/fields.py(230):         attrs = super().widget_attrs(widget)
0.60 /testbed/django/forms/fields.py(170):         return {}
0.60 /testbed/django/forms/fields.py(231):         if self.max_length is not None and not widget.is_hidden:
0.60 /testbed/django/forms/fields.py(234):         if self.min_length is not None and not widget.is_hidden:
0.60 /testbed/django/forms/fields.py(237):         return attrs
0.60 /testbed/django/forms/fields.py(102):         if extra_attrs:
0.60 /testbed/django/forms/fields.py(105):         self.widget = widget
0.60 /testbed/django/forms/fields.py(107):         messages = {}
0.60 /testbed/django/forms/fields.py(108):         for c in reversed(self.__class__.__mro__):
0.60 /testbed/django/forms/fields.py(109):             messages.update(getattr(c, 'default_error_messages', {}))
0.60 /testbed/django/forms/fields.py(108):         for c in reversed(self.__class__.__mro__):
0.60 /testbed/django/forms/fields.py(109):             messages.update(getattr(c, 'default_error_messages', {}))
0.60 /testbed/django/forms/fields.py(108):         for c in reversed(self.__class__.__mro__):
0.60 /testbed/django/forms/fields.py(109):             messages.update(getattr(c, 'default_error_messages', {}))
0.60 /testbed/django/forms/fields.py(108):         for c in reversed(self.__class__.__mro__):
0.60 /testbed/django/forms/fields.py(110):         messages.update(error_messages or {})
0.60 /testbed/django/forms/fields.py(111):         self.error_messages = messages
0.60 /testbed/django/forms/fields.py(113):         self.validators = [*self.default_validators, *validators]
0.60 /testbed/django/forms/fields.py(115):         super().__init__()
0.60 /testbed/django/forms/fields.py(213):         if min_length is not None:
0.60 /testbed/django/forms/fields.py(215):         if max_length is not None:
0.60 /testbed/django/forms/fields.py(217):         self.validators.append(validators.ProhibitNullCharactersValidator())
0.60 /testbed/django/forms/fields.py(199):         result = copy.copy(self)
0.60 /testbed/django/forms/fields.py(200):         memo[id(self)] = result
0.60 /testbed/django/forms/fields.py(201):         result.widget = copy.deepcopy(self.widget, memo)
0.60 /testbed/django/forms/fields.py(202):         result.validators = self.validators[:]
0.60 /testbed/django/forms/fields.py(203):         return result
FAIL

======================================================================
FAIL: test_deepcopy_error_messages (test_coverup_django__django-11880.FieldDeepCopyTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "./tests/test_coverup_django__django-11880.py", line 19, in test_deepcopy_error_messages
    'This field is required.'
AssertionError: 'This field is absolutely required.' != 'This field is required.'
- This field is absolutely required.
?              -----------
+ This field is required.


----------------------------------------------------------------------
Ran 1 test in 0.001s

FAILED (failures=1)
+ cat coverage.cover
{"/testbed/django/forms/fields.py": {"5": 1, "6": 1, "7": 1, "8": 1, "9": 1, "10": 1, "11": 1, "12": 1, "13": 1, "14": 1, "16": 1, "17": 1, "18": 1, "19": 1, "20": 1, "27": 1, "28": 1, "29": 1, "30": 1, "31": 1, "40": 1, "44": 2, "206": 2, "240": 2, "286": 2, "321": 2, "369": 2, "390": 2, "414": 2, "436": 2, "467": 2, "495": 2, "519": 2, "527": 2, "594": 2, "653": 2, "695": 2, "722": 2, "749": 2, "757": 2, "819": 2, "846": 2, "888": 2, "924": 2, "948": 2, "1076": 2, "1120": 2, "1156": 2, "1171": 2, "1181": 2, "45": 1, "46": 1, "47": 1, "51": 1, "53": 1, "55": 1, "56": 1, "57": 1, "117": 1, "120": 1, "123": 1, "127": 1, "141": 1, "151": 1, "164": 1, "172": 1, "191": 1, "198": 1, "81": 3, "82": 3, "83": 3, "84": 3, "85": 3, "86": 3, "87": 3, "88": 2, "90": 1, "93": 3, "94": 3, "95": 0, "98": 3, "101": 3, "102": 3, "103": 0, "105": 3, "107": 3, "108": 12, "109": 9, "110": 3, "111": 3, "113": 3, "115": 3, "118": 0, "121": 0, "124": 0, "125": 0, "128": 0, "129": 0, "130": 0, "131": 0, "132": 0, "133": 0, "134": 0, "135": 0, "136": 0, "137": 0, "138": 0, "139": 0, "146": 0, "147": 0, "148": 0, "149": 0, "160": 0, "161": 0, "162": 0, "170": 3, "176": 0, "177": 0, "178": 0, "179": 0, "180": 0, "181": 0, "182": 0, "183": 0, "187": 0, "188": 0, "189": 0, "196": 0, "199": 1, "200": 1, "201": 1, "202": 1, "203": 1, "207": 1, "219": 1, "229": 1, "208": 1, "209": 1, "210": 1, "211": 1, "212": 1, "213": 1, "214": 0, "215": 1, "216": 0, "217": 1, "221": 0, "222": 0, "223": 0, "224": 0, "225": 0, "226": 0, "227": 0, "230": 1, "231": 1, "233": 0, "234": 1, "236": 0, "237": 1, "241": 1, "243": 1, "245": 1, "247": 1, "259": 1, "276": 1, "248": 0, "249": 0, "251": 0, "252": 0, "254": 0, "255": 0, "256": 0, "257": 0, "264": 0, "265": 0, "266": 0, "267": 0, "268": 0, "270": 0, "271": 0, "272": 0, "273": 0, "274": 0, "277": 0, "278": 0, "279": 0, "280": 0, "281": 0, "282": 0, "283": 0, "288": 1, "291": 1, "307": 1, "314": 1, "296": 0, "297": 0, "298": 0, "299": 0, "300": 0, "301": 0, "302": 0, "303": 0, "304": 0, "305": 0, "308": 0, "309": 0, "310": 0, "311": 0, "312": 0, "315": 0, "316": 0, "317": 0, "318": 0, "323": 1, "326": 1, "331": 1, "349": 1, "356": 1, "327": 0, "328": 0, "329": 0, "338": 0, "339": 0, "340": 0, "341": 0, "342": 0, "343": 0, "344": 0, "345": 0, "346": 0, "347": 0, "350": 0, "351": 0, "352": 0, "353": 0, "354": 0, "357": 0, "358": 0, "359": 0, "362": 0, "364": 0, "365": 0, "366": 0, "371": 1, "376": 1, "386": 1, "372": 0, "373": 0, "374": 0, "377": 0, "379": 0, "380": 0, "381": 0, "382": 0, "383": 0, "384": 0, "387": 0, "391": 1, "392": 1, "394": 1, "397": 1, "410": 1, "402": 0, "403": 0, "404": 0, "405": 0, "406": 0, "407": 0, "408": 0, "411": 0, "415": 1, "416": 1, "418": 1, "421": 1, "432": 1, "426": 0, "427": 0, "428": 0, "429": 0, "430": 0, "433": 0, "437": 1, "438": 1, "440": 1, "443": 1, "448": 1, "463": 1, "444": 0, "445": 0, "446": 0, "453": 0, "454": 0, "455": 0, "456": 0, "457": 0, "458": 0, "459": 0, "460": 0, "461": 0, "464": 0, "469": 1, "470": 1, "473": 1, "478": 1, "474": 0, "475": 0, "476": 0, "479": 0, "480": 0, "481": 0, "482": 0, "483": 0, "484": 0, "485": 0, "486": 0, "487": 0, "488": 0, "489": 0, "490": 0, "491": 0, "492": 0, "496": 1, "504": 1, "507": 1, "516": 1, "500": 0, "501": 0, "502": 0, "505": 0, "508": 0, "509": 0, "510": 0, "511": 0, "512": 0, "513": 0, "514": 0, "520": 1, "521": 1, "523": 1, "524": 0, "528": 1, "530": 1, "531": 1, "532": 1, "533": 1, "534": 1, "535": 1, "536": 1, "537": 1, "540": 1, "545": 1, "566": 1, "585": 1, "590": 1, "541": 0, "542": 0, "543": 0, "546": 0, "547": 0, "550": 0, "551": 0, "552": 0, "553": 0, "554": 0, "556": 0, "557": 0, "558": 0, "559": 0, "560": 0, "561": 0, "562": 0, "564": 0, "568": 0, "569": 0, "572": 0, "573": 0, "574": 0, "580": 0, "581": 0, "582": 0, "583": 0, "586": 0, "587": 0, "588": 0, "591": 0, "595": 1, "597": 1, "598": 1, "603": 1, "646": 1, "608": 0, "609": 0, "610": 0, "612": 0, "616": 0, "617": 0, "619": 0, "620": 0, "622": 0, "624": 0, "627": 0, "629": 0, "632": 0, "635": 0, "636": 0, "638": 0, "639": 0, "640": 0, "641": 0, "642": 0, "643": 0, "644": 0, "647": 0, "648": 0, "649": 0, "650": 0, "654": 1, "656": 1, "658": 1, "660": 1, "663": 1, "661": 0, "665": 0, "677": 0, "678": 0, "679": 0, "680": 0, "682": 0, "683": 0, "686": 0, "687": 0, "690": 0, "691": 0, "692": 0, "670": 0, "671": 0, "672": 0, "675": 0, "696": 1, "698": 1, "710": 1, "714": 1, "704": 0, "705": 0, "707": 0, "708": 0, "711": 0, "712": 0, "715": 0, "716": 0, "719": 0, "727": 1, "729": 1, "745": 1, "738": 0, "739": 0, "740": 0, "741": 0, "743": 0, "746": 0, "750": 1, "753": 1, "751": 0, "754": 0, "758": 1, "760": 1, "763": 1, "767": 1, "772": 1, "775": 1, "786": 1, "788": 1, "794": 1, "804": 1, "764": 1, "765": 1, "768": 0, "769": 0, "770": 0, "773": 0, "779": 1, "780": 0, "782": 1, "784": 1, "790": 0, "791": 0, "792": 0, "796": 0, "797": 0, "798": 0, "799": 0, "800": 0, "801": 0, "806": 0, "807": 0, "808": 0, "810": 0, "811": 0, "812": 0, "814": 0, "815": 0, "816": 0, "820": 1, "825": 1, "841": 1, "821": 0, "822": 0, "823": 0, "829": 0, "830": 0, "831": 0, "832": 0, "833": 0, "834": 0, "835": 0, "836": 0, "837": 0, "839": 0, "842": 0, "843": 0, "847": 1, "848": 1, "850": 1, "851": 1, "854": 1, "861": 1, "874": 1, "855": 0, "856": 0, "857": 0, "858": 0, "859": 0, "863": 0, "864": 0, "866": 0, "867": 0, "868": 0, "869": 0, "870": 0, "871": 0, "875": 0, "876": 0, "877": 0, "878": 0, "879": 0, "880": 0, "881": 0, "882": 0, "883": 0, "884": 0, "885": 0, "889": 1, "894": 1, "913": 1, "917": 1, "890": 0, "891": 0, "892": 0, "899": 0, "900": 0, "901": 0, "902": 0, "903": 0, "904": 0, "905": 0, "906": 0, "907": 0, "908": 0, "909": 0, "911": 0, "914": 0, "915": 0, "918": 0, "919": 0, "920": 0, "921": 0, "928": 1, "937": 1, "929": 0, "933": 0, "934": 0, "935": 0, "942": 0, "943": 0, "944": 0, "945": 0, "966": 1, "967": 1, "970": 1, "985": 1, "990": 1, "993": 1, "1047": 1, "1058": 1, "971": 0, "972": 0, "973": 0, "974": 0, "975": 0, "976": 0, "977": 0, "978": 0, "982": 0, "983": 0, "986": 0, "987": 0, "988": 0, "991": 0, "1002": 0, "1003": 0, "1004": 0, "1005": 0, "1006": 0, "1007": 0, "1008": 0, "1009": 0, "1011": 0, "1013": 0, "1014": 0, "1015": 0, "1016": 0, "1017": 0, "1018": 0, "1019": 0, "1020": 0, "1023": 0, "1024": 0, "1025": 0, "1029": 0, "1030": 0, "1031": 0, "1032": 0, "1033": 0, "1034": 0, "1038": 0, "1039": 0, "1040": 0, "1042": 0, "1043": 0, "1044": 0, "1045": 0, "1056": 0, "1059": 0, "1060": 0, "1061": 0, "1062": 0, "1064": 0, "1065": 0, "1066": 0, "1067": 0, "1068": 0, "1069": 0, "1070": 0, "1071": 0, "1072": 0, "1073": 0, "1077": 1, "1078": 1, "1079": 0, "1080": 0, "1081": 0, "1083": 0, "1084": 0, "1086": 0, "1088": 0, "1089": 0, "1091": 0, "1092": 0, "1093": 0, "1094": 0, "1095": 0, "1096": 0, "1097": 0, "1098": 0, "1099": 0, "1100": 0, "1101": 0, "1102": 0, "1103": 0, "1104": 0, "1106": 0, "1107": 0, "1108": 0, "1109": 0, "1110": 0, "1111": 0, "1112": 0, "1113": 0, "1114": 0, "1115": 0, "1117": 0, "1121": 1, "1122": 1, "1124": 1, "1125": 1, "1128": 1, "1143": 1, "1129": 0, "1130": 0, "1131": 0, "1132": 0, "1134": 0, "1135": 0, "1136": 0, "1137": 0, "1138": 0, "1139": 0, "1141": 0, "1144": 0, "1147": 0, "1148": 0, "1149": 0, "1150": 0, "1151": 0, "1152": 0, "1153": 0, "1157": 1, "1162": 1, "1158": 0, "1159": 0, "1160": 0, "1163": 0, "1164": 0, "1165": 0, "1166": 0, "1167": 0, "1168": 0, "1172": 1, "1174": 1, "1175": 0, "1176": 0, "1177": 0, "1178": 0, "1183": 1, "1186": 1, "1191": 1, "1187": 0, "1188": 0, "1189": 0, "1192": 0, "1193": 0, "1194": 0, "1195": 0, "1196": 0, "1197": 0, "1198": 0, "1199": 0, "1200": 0}}
+ git checkout 06909fe084f87a65459a83bd69d7cdbe4fce9a7c
Note: switching to '06909fe084f87a65459a83bd69d7cdbe4fce9a7c'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at 06909fe084 Fixed #28273 -- Doc'd fast nullable column creation with defaults.
+ git apply /root/pre_state.patch
error: unrecognized input
