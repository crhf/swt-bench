diff --git a/dev/null b/tests/test_coverup_django__django-11433.py
new file mode 100644
index e69de29..fa3fa30 100644
--- /dev/null
+++ b/tests/test_coverup_django__django-11433.py
@@ -0,0 +1,33 @@
+from django.test import TestCase
+from django.forms import ModelForm
+from django.db import models
+from django.forms.models import construct_instance
+
+# Step 1: Create a model with a field that has a default value
+class TestModel(models.Model):
+    name = models.CharField(max_length=100, default='default_name')
+
+    class Meta:
+        app_label = 'test_app'
+
+# Step 2: Create a form for this model, including the field with the default value
+class TestModelForm(ModelForm):
+    class Meta:
+        model = TestModel
+        fields = ['name']  # Include 'name' field
+
+    def clean(self):
+        # Step 3: Set up cleaned_data to include a value for the field
+        cleaned_data = super().clean()
+        cleaned_data['name'] = 'cleaned_name'
+        return cleaned_data
+
+class TestModelFormTest(TestCase):
+    def test_cleaned_data_overwrites_default(self):
+        # Step 4: Use construct_instance to apply cleaned_data to a model instance
+        form = TestModelForm(data={})
+        form.is_valid()  # Trigger the cleaning process
+        instance = construct_instance(form, TestModel())
+
+        # Step 5: Assert that the field's value is correctly set to the cleaned_data value
+        self.assertEqual(instance.name, 'cleaned_name')  # This should pass once the bug is fixed
