{"instance_id": "sympy__sympy-24213", "repo": "sympy/sympy", "version": "1.12", "environment_setup_commit": "c6cb7c5602fa48034ab1bd43c2347a7e8488f12e", "patch_list": ["diff --git a/dev/null b/sympy/polys/tests/test_coverup_sympy__sympy-24213.py\nnew file mode 100644\nindex e69de29..8d6513d 100644\n--- /dev/null\n+++ b/sympy/polys/tests/test_coverup_sympy__sympy-24213.py\n@@ -0,0 +1,23 @@\n+from sympy.physics import units\n+from sympy.physics.units.systems.si import SI\n+\n+def test_collect_factor_and_dimension_equivalent_dimensions():\n+    # Setup quantities with equivalent dimensions\n+    v1 = units.Quantity('v1')\n+    SI.set_quantity_dimension(v1, units.velocity)\n+    SI.set_quantity_scale_factor(v1, 2 * units.meter / units.second)\n+\n+    a1 = units.Quantity('a1')\n+    SI.set_quantity_dimension(a1, units.acceleration)\n+    SI.set_quantity_scale_factor(a1, -9.8 * units.meter / units.second**2)\n+\n+    t1 = units.Quantity('t1')\n+    SI.set_quantity_dimension(t1, units.time)\n+    SI.set_quantity_scale_factor(t1, 5 * units.second)\n+\n+    # Construct expression with equivalent dimensions\n+    expr1 = a1 * t1 + v1\n+\n+    # Call the method and assert the correct behavior\n+    # The test should pass when the bug is fixed and no exception is raised\n+    SI._collect_factor_and_dimension(expr1)\n"], "arch": "x86_64", "base_commit": "e8c22f6eac7314be8d92590bfff92ced79ee03e2", "test_directives": ["sympy/polys/tests/test_coverup_sympy__sympy-24213.py"], "coverage_files": ["sympy/physics/units/unitsystem.py"], "env_name": "testbed", "run_id": "assertflip", "patch_id": "pred_pre__AssertFlip", "timeout": 1800, "rm_image": false, "force_rebuild": false, "exec_mode": "unit_test", "reproduction_script_name": null, "compute_coverage": true, "install": {"python": "3.9", "packages": "mpmath flake8", "pip_packages": ["mpmath==1.3.0", "flake8-comprehensions"], "install": "python -m pip install -e ."}, "cache_level": "instance", "test_command": "PYTHONWARNINGS='ignore::UserWarning,ignore::SyntaxWarning' python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(sympy/physics/units/unitsystem\\.py)' bin/test -C --verbose sympy/polys/tests/test_coverup_sympy__sympy-24213.p", "req_install_commands": ["conda create -n testbed python=3.9 mpmath flake8 -y"]}