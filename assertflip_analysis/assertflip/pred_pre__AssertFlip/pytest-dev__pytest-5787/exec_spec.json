{"instance_id": "pytest-dev__pytest-5787", "repo": "pytest-dev/pytest", "version": "5.1", "environment_setup_commit": "c1361b48f83911aa721b21a4515a5446515642e2", "patch_list": ["diff --git a/dev/null b/testing/test_coverup_pytest-dev__pytest-5787.py\nnew file mode 100644\nindex e69de29..5f07119 100644\n--- /dev/null\n+++ b/testing/test_coverup_pytest-dev__pytest-5787.py\n@@ -0,0 +1,55 @@\n+import pytest\n+from _pytest.reports import TestReport\n+from _pytest._code.code import ExceptionInfo\n+\n+def test_chained_exception_serialization():\n+    # Simulate a test item and call with chained exceptions\n+    class FakeItem:\n+        nodeid = \"test_chained_exception\"\n+        location = (\"test_file.py\", 10, \"test_chained_exception\")\n+        keywords = {}\n+        user_properties = []\n+        _report_sections = []\n+\n+        def repr_failure(self, excinfo):\n+            return str(excinfo.value)\n+\n+        def _repr_failure_py(self, excinfo, style):\n+            return str(excinfo.value)\n+\n+    class Call:\n+        def __init__(self, when, excinfo):\n+            self.when = when\n+            self.excinfo = excinfo\n+            self.stop = 1\n+            self.start = 0\n+\n+    # Create a chained exception\n+    try:\n+        try:\n+            raise ValueError(11)\n+        except Exception as e1:\n+            raise ValueError(12) from e1\n+    except Exception as e2:\n+        excinfo = ExceptionInfo.from_current()\n+\n+    # Create a test report with the exception\n+    item = FakeItem()\n+    call = Call(\"call\", excinfo)\n+    report = TestReport.from_item_and_call(item, call)\n+\n+    # Serialize the report using the function from the codebase\n+    def pytest_report_to_serializable(report):\n+        if isinstance(report, TestReport):\n+            data = report._to_json()\n+            data['_report_type'] = report.__class__.__name__\n+            return data\n+\n+    serialized = pytest_report_to_serializable(report)\n+\n+    # Check if the serialized report contains the full exception chain\n+    # This is the correct behavior we want to enforce\n+    assert \"12\" in serialized['longrepr']\n+    assert \"11\" in serialized['longrepr']\n+\n+    # The test will now fail if the full exception chain is not serialized\n"], "arch": "x86_64", "base_commit": "955e54221008aba577ecbaefa15679f6777d3bf8", "test_directives": ["testing/test_coverup_pytest-dev__pytest-5787.py"], "coverage_files": ["src/_pytest/reports.py"], "env_name": "testbed", "run_id": "assertflip", "patch_id": "pred_pre__AssertFlip", "timeout": 1800, "rm_image": false, "force_rebuild": false, "exec_mode": "unit_test", "reproduction_script_name": null, "compute_coverage": true, "install": {"python": "3.9", "install": "python -m pip install -e .", "pip_packages": ["atomicwrites==1.4.1", "attrs==23.1.0", "more-itertools==10.1.0", "packaging==23.1", "pluggy==0.13.1", "py==1.11.0", "wcwidth==0.2.6"]}, "cache_level": "instance", "test_command": "python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(src/_pytest/reports\\.py)' -m pytest -rA testing/test_coverup_pytest-dev__pytest-5787.py", "req_install_commands": ["conda create -n testbed python=3.9  -y"]}