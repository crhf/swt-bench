+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD 179ee13eb37348cd87169a198aec18fedccc8668
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
nothing to commit, working tree clean
+ git show
commit 179ee13eb37348cd87169a198aec18fedccc8668
Author: David Smith <smithdc@gmail.com>
Date:   Fri Jan 29 19:21:26 2021 +0000

    Refs #24121 -- Added __repr__() to FilterExpression, Lexer, Parser, and Token.

diff --git a/django/template/base.py b/django/template/base.py
index 85ce3c2abd..b1eec99655 100644
--- a/django/template/base.py
+++ b/django/template/base.py
@@ -308,7 +308,7 @@ class Token:
         self.lineno = lineno
         self.position = position
 
-    def __str__(self):
+    def __repr__(self):
         token_name = self.token_type.name.capitalize()
         return ('<%s token: "%s...">' %
                 (token_name, self.contents[:20].replace('\n', '')))
@@ -334,6 +334,13 @@ class Lexer:
         self.template_string = template_string
         self.verbatim = False
 
+    def __repr__(self):
+        return '<%s template_string="%s...", verbatim=%s>' % (
+            self.__class__.__qualname__,
+            self.template_string[:20].replace('\n', ''),
+            self.verbatim,
+        )
+
     def tokenize(self):
         """
         Return a list of tokens from a given template_string.
@@ -423,6 +430,9 @@ class Parser:
             self.add_library(builtin)
         self.origin = origin
 
+    def __repr__(self):
+        return '<%s tokens=%r>' % (self.__class__.__qualname__, self.tokens)
+
     def parse(self, parse_until=None):
         """
         Iterate through the parser tokens and compiles each one into a node.
@@ -723,6 +733,9 @@ class FilterExpression:
     def __str__(self):
         return self.token
 
+    def __repr__(self):
+        return "<%s %r>" % (self.__class__.__qualname__, self.token)
+
 
 class Variable:
     """
diff --git a/tests/template_tests/test_parser.py b/tests/template_tests/test_parser.py
index 2370e0263e..6c8b70d16f 100644
--- a/tests/template_tests/test_parser.py
+++ b/tests/template_tests/test_parser.py
@@ -3,7 +3,7 @@ Testing some internals of the template processing. These are *not* examples to b
 """
 from django.template import Library, TemplateSyntaxError
 from django.template.base import (
-    FilterExpression, Parser, Token, TokenType, Variable,
+    FilterExpression, Lexer, Parser, Token, TokenType, Variable,
 )
 from django.template.defaultfilters import register as filter_library
 from django.test import SimpleTestCase
@@ -19,6 +19,22 @@ class ParserTests(SimpleTestCase):
         split = token.split_contents()
         self.assertEqual(split, ["sometag", '_("Page not found")', 'value|yesno:_("yes,no")'])
 
+    def test_repr(self):
+        token = Token(TokenType.BLOCK, 'some text')
+        self.assertEqual(repr(token), '<Block token: "some text...">')
+        parser = Parser([token], builtins=[filter_library])
+        self.assertEqual(
+            repr(parser),
+            '<Parser tokens=[<Block token: "some text...">]>',
+        )
+        filter_expression = FilterExpression('news|upper', parser)
+        self.assertEqual(repr(filter_expression), "<FilterExpression 'news|upper'>")
+        lexer = Lexer('{% for i in 1 %}{{ a }}\n{% endfor %}')
+        self.assertEqual(
+            repr(lexer),
+            '<Lexer template_string="{% for i in 1 %}{{ a...", verbatim=False>',
+        )
+
     def test_filter_parsing(self):
         c = {"article": {"section": "News"}}
         p = Parser("", builtins=[filter_library])
+ git diff 179ee13eb37348cd87169a198aec18fedccc8668
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Checking if build backend supports build_editable: started
  Checking if build backend supports build_editable: finished with status 'done'
  Getting requirements to build editable: started
  Getting requirements to build editable: finished with status 'done'
  Preparing editable metadata (pyproject.toml): started
  Preparing editable metadata (pyproject.toml): finished with status 'done'
Requirement already satisfied: asgiref>=3.2.10 in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from Django==4.0) (3.8.1)
Requirement already satisfied: pytz in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from Django==4.0) (2025.2)
Requirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from Django==4.0) (0.5.3)
Requirement already satisfied: typing-extensions>=4 in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from asgiref>=3.2.10->Django==4.0) (4.13.2)
Building wheels for collected packages: Django
  Building editable for Django (pyproject.toml): started
  Building editable for Django (pyproject.toml): finished with status 'done'
  Created wheel for Django: filename=django-4.0-0.editable-py3-none-any.whl size=25589 sha256=23f300c9672d29c6342c1129d4548020cc1758efc2299560c8f4d40ea3be2bb9
  Stored in directory: /tmp/pip-ephem-wheel-cache-kqm_m_so/wheels/b2/50/f1/218f2e9962a80d01a4b1297698978f9fb3b60056aa24343f24
Successfully built Django
Installing collected packages: Django
  Attempting uninstall: Django
    Found existing installation: Django 4.0
    Uninstalling Django-4.0:
      Successfully uninstalled Django-4.0
Successfully installed Django-4.0
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable.It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git apply -v -
Checking patch tests/test_coverup_django__django-14053.py...
Applied patch tests/test_coverup_django__django-14053.py cleanly.
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/contrib/staticfiles/storage\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-14053
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(django/contrib/staticfiles/storage\\.py)']
Testing against Django installed in '/testbed/django'
0.64 /testbed/django/contrib/staticfiles/storage.py(1): import hashlib
0.64 /testbed/django/contrib/staticfiles/storage.py(2): import json
0.64 /testbed/django/contrib/staticfiles/storage.py(3): import os
0.64 /testbed/django/contrib/staticfiles/storage.py(4): import posixpath
0.64 /testbed/django/contrib/staticfiles/storage.py(5): import re
0.64 /testbed/django/contrib/staticfiles/storage.py(6): from urllib.parse import unquote, urldefrag, urlsplit, urlunsplit
0.64 /testbed/django/contrib/staticfiles/storage.py(8): from django.conf import settings
0.64 /testbed/django/contrib/staticfiles/storage.py(9): from django.contrib.staticfiles.utils import check_settings, matches_patterns
0.64 /testbed/django/contrib/staticfiles/storage.py(10): from django.core.exceptions import ImproperlyConfigured
0.64 /testbed/django/contrib/staticfiles/storage.py(11): from django.core.files.base import ContentFile
0.64 /testbed/django/contrib/staticfiles/storage.py(12): from django.core.files.storage import FileSystemStorage, get_storage_class
0.64 /testbed/django/contrib/staticfiles/storage.py(13): from django.utils.functional import LazyObject
0.64 /testbed/django/contrib/staticfiles/storage.py(16): class StaticFilesStorage(FileSystemStorage):
0.64 /testbed/django/contrib/staticfiles/storage.py(16): class StaticFilesStorage(FileSystemStorage):
0.64 /testbed/django/contrib/staticfiles/storage.py(17):     """
0.64 /testbed/django/contrib/staticfiles/storage.py(23):     def __init__(self, location=None, base_url=None, *args, **kwargs):
0.64 /testbed/django/contrib/staticfiles/storage.py(36):     def path(self, name):
0.64 /testbed/django/contrib/staticfiles/storage.py(44): class HashedFilesMixin:
0.64 /testbed/django/contrib/staticfiles/storage.py(44): class HashedFilesMixin:
0.64 /testbed/django/contrib/staticfiles/storage.py(45):     default_template = """url("%s")"""
0.64 /testbed/django/contrib/staticfiles/storage.py(46):     max_post_process_passes = 5
0.64 /testbed/django/contrib/staticfiles/storage.py(47):     patterns = (
0.64 /testbed/django/contrib/staticfiles/storage.py(53):     keep_intermediate_files = True
0.64 /testbed/django/contrib/staticfiles/storage.py(55):     def __init__(self, *args, **kwargs):
0.64 /testbed/django/contrib/staticfiles/storage.py(68):     def file_hash(self, name, content=None):
0.64 /testbed/django/contrib/staticfiles/storage.py(79):     def hashed_name(self, name, content=None, filename=None):
0.64 /testbed/django/contrib/staticfiles/storage.py(112):     def _url(self, hashed_name_func, name, force=False, hashed_files=None):
0.64 /testbed/django/contrib/staticfiles/storage.py(143):     def url(self, name, force=False):
0.64 /testbed/django/contrib/staticfiles/storage.py(149):     def url_converter(self, name, hashed_files, template=None):
0.64 /testbed/django/contrib/staticfiles/storage.py(203):     def post_process(self, paths, dry_run=False, **options):
0.64 /testbed/django/contrib/staticfiles/storage.py(251):     def _post_process(self, paths, adjustable_paths, hashed_files):
0.64 /testbed/django/contrib/staticfiles/storage.py(323):     def clean_name(self, name):
0.64 /testbed/django/contrib/staticfiles/storage.py(326):     def hash_key(self, name):
0.64 /testbed/django/contrib/staticfiles/storage.py(329):     def _stored_name(self, name, hashed_files):
0.64 /testbed/django/contrib/staticfiles/storage.py(341):     def stored_name(self, name):
0.64 /testbed/django/contrib/staticfiles/storage.py(365): class ManifestFilesMixin(HashedFilesMixin):
0.64 /testbed/django/contrib/staticfiles/storage.py(365): class ManifestFilesMixin(HashedFilesMixin):
0.64 /testbed/django/contrib/staticfiles/storage.py(366):     manifest_version = '1.0'  # the manifest format standard
0.64 /testbed/django/contrib/staticfiles/storage.py(367):     manifest_name = 'staticfiles.json'
0.64 /testbed/django/contrib/staticfiles/storage.py(368):     manifest_strict = True
0.64 /testbed/django/contrib/staticfiles/storage.py(369):     keep_intermediate_files = False
0.64 /testbed/django/contrib/staticfiles/storage.py(371):     def __init__(self, *args, **kwargs):
0.64 /testbed/django/contrib/staticfiles/storage.py(375):     def read_manifest(self):
0.64 /testbed/django/contrib/staticfiles/storage.py(382):     def load_manifest(self):
0.64 /testbed/django/contrib/staticfiles/storage.py(397):     def post_process(self, *args, **kwargs):
0.64 /testbed/django/contrib/staticfiles/storage.py(403):     def save_manifest(self):
0.64 /testbed/django/contrib/staticfiles/storage.py(410):     def stored_name(self, name):
0.64 /testbed/django/contrib/staticfiles/storage.py(428): class ManifestStaticFilesStorage(ManifestFilesMixin, StaticFilesStorage):
0.64 /testbed/django/contrib/staticfiles/storage.py(428): class ManifestStaticFilesStorage(ManifestFilesMixin, StaticFilesStorage):
0.64 /testbed/django/contrib/staticfiles/storage.py(429):     """
0.64 /testbed/django/contrib/staticfiles/storage.py(433):     pass
0.64 /testbed/django/contrib/staticfiles/storage.py(436): class ConfiguredStorage(LazyObject):
0.64 /testbed/django/contrib/staticfiles/storage.py(436): class ConfiguredStorage(LazyObject):
0.64 /testbed/django/contrib/staticfiles/storage.py(437):     def _setup(self):
0.64 /testbed/django/contrib/staticfiles/storage.py(441): staticfiles_storage = ConfiguredStorage()
Skipping setup of unused database(s): default, other.
System check identified no issues (0 silenced).
test_post_process_yields_multiple_times (test_coverup_django__django-14053.HashedFilesMixinTest) ... 0.68 /testbed/django/contrib/staticfiles/storage.py(56):         super().__init__(*args, **kwargs)
0.68 /testbed/django/contrib/staticfiles/storage.py(57):         self._patterns = {}
0.68 /testbed/django/contrib/staticfiles/storage.py(58):         self.hashed_files = {}
0.68 /testbed/django/contrib/staticfiles/storage.py(59):         for extension, patterns in self.patterns:
0.68 /testbed/django/contrib/staticfiles/storage.py(60):             for pattern in patterns:
0.68 /testbed/django/contrib/staticfiles/storage.py(61):                 if isinstance(pattern, (tuple, list)):
0.68 /testbed/django/contrib/staticfiles/storage.py(64):                     template = self.default_template
0.68 /testbed/django/contrib/staticfiles/storage.py(65):                 compiled = re.compile(pattern, re.IGNORECASE)
0.68 /testbed/django/contrib/staticfiles/storage.py(66):                 self._patterns.setdefault(extension, []).append((compiled, template))
0.68 /testbed/django/contrib/staticfiles/storage.py(60):             for pattern in patterns:
0.68 /testbed/django/contrib/staticfiles/storage.py(61):                 if isinstance(pattern, (tuple, list)):
0.68 /testbed/django/contrib/staticfiles/storage.py(62):                     pattern, template = pattern
0.68 /testbed/django/contrib/staticfiles/storage.py(65):                 compiled = re.compile(pattern, re.IGNORECASE)
0.68 /testbed/django/contrib/staticfiles/storage.py(66):                 self._patterns.setdefault(extension, []).append((compiled, template))
0.68 /testbed/django/contrib/staticfiles/storage.py(60):             for pattern in patterns:
0.68 /testbed/django/contrib/staticfiles/storage.py(59):         for extension, patterns in self.patterns:
0.68 /testbed/django/contrib/staticfiles/storage.py(218):         if dry_run:
0.68 /testbed/django/contrib/staticfiles/storage.py(222):         hashed_files = {}
0.68 /testbed/django/contrib/staticfiles/storage.py(225):         adjustable_paths = [
0.68 /testbed/django/contrib/staticfiles/storage.py(226):             path for path in paths
0.68 /testbed/django/contrib/staticfiles/storage.py(225):         adjustable_paths = [
0.68 /testbed/django/contrib/staticfiles/storage.py(225):         adjustable_paths = [
0.68 /testbed/django/contrib/staticfiles/storage.py(226):             path for path in paths
0.68 /testbed/django/contrib/staticfiles/storage.py(227):             if matches_patterns(path, self._patterns)
0.68 /testbed/django/contrib/staticfiles/storage.py(225):         adjustable_paths = [
0.68 /testbed/django/contrib/staticfiles/storage.py(226):             path for path in paths
0.68 /testbed/django/contrib/staticfiles/storage.py(227):             if matches_patterns(path, self._patterns)
0.68 /testbed/django/contrib/staticfiles/storage.py(225):         adjustable_paths = [
0.68 /testbed/django/contrib/staticfiles/storage.py(231):         for name, hashed_name, processed, _ in self._post_process(paths, adjustable_paths, hashed_files):
0.68 /testbed/django/contrib/staticfiles/storage.py(232):             yield name, hashed_name, processed
0.68 /testbed/django/contrib/staticfiles/storage.py(231):         for name, hashed_name, processed, _ in self._post_process(paths, adjustable_paths, hashed_files):
0.68 /testbed/django/contrib/staticfiles/storage.py(232):             yield name, hashed_name, processed
0.68 /testbed/django/contrib/staticfiles/storage.py(231):         for name, hashed_name, processed, _ in self._post_process(paths, adjustable_paths, hashed_files):
0.68 /testbed/django/contrib/staticfiles/storage.py(232):             yield name, hashed_name, processed
0.68 /testbed/django/contrib/staticfiles/storage.py(231):         for name, hashed_name, processed, _ in self._post_process(paths, adjustable_paths, hashed_files):
0.68 /testbed/django/contrib/staticfiles/storage.py(232):             yield name, hashed_name, processed
0.68 /testbed/django/contrib/staticfiles/storage.py(231):         for name, hashed_name, processed, _ in self._post_process(paths, adjustable_paths, hashed_files):
0.68 /testbed/django/contrib/staticfiles/storage.py(234):         paths = {path: paths[path] for path in adjustable_paths}
0.68 /testbed/django/contrib/staticfiles/storage.py(234):         paths = {path: paths[path] for path in adjustable_paths}
0.68 /testbed/django/contrib/staticfiles/storage.py(236):         for i in range(self.max_post_process_passes):
0.68 /testbed/django/contrib/staticfiles/storage.py(237):             substitutions = False
0.68 /testbed/django/contrib/staticfiles/storage.py(238):             for name, hashed_name, processed, subst in self._post_process(paths, adjustable_paths, hashed_files):
0.68 /testbed/django/contrib/staticfiles/storage.py(239):                 yield name, hashed_name, processed
0.68 /testbed/django/contrib/staticfiles/storage.py(240):                 substitutions = substitutions or subst
0.68 /testbed/django/contrib/staticfiles/storage.py(238):             for name, hashed_name, processed, subst in self._post_process(paths, adjustable_paths, hashed_files):
0.68 /testbed/django/contrib/staticfiles/storage.py(239):                 yield name, hashed_name, processed
0.68 /testbed/django/contrib/staticfiles/storage.py(240):                 substitutions = substitutions or subst
0.68 /testbed/django/contrib/staticfiles/storage.py(238):             for name, hashed_name, processed, subst in self._post_process(paths, adjustable_paths, hashed_files):
0.68 /testbed/django/contrib/staticfiles/storage.py(239):                 yield name, hashed_name, processed
0.68 /testbed/django/contrib/staticfiles/storage.py(240):                 substitutions = substitutions or subst
0.68 /testbed/django/contrib/staticfiles/storage.py(238):             for name, hashed_name, processed, subst in self._post_process(paths, adjustable_paths, hashed_files):
0.68 /testbed/django/contrib/staticfiles/storage.py(239):                 yield name, hashed_name, processed
0.68 /testbed/django/contrib/staticfiles/storage.py(240):                 substitutions = substitutions or subst
0.68 /testbed/django/contrib/staticfiles/storage.py(238):             for name, hashed_name, processed, subst in self._post_process(paths, adjustable_paths, hashed_files):
0.68 /testbed/django/contrib/staticfiles/storage.py(242):             if not substitutions:
0.68 /testbed/django/contrib/staticfiles/storage.py(236):         for i in range(self.max_post_process_passes):
0.68 /testbed/django/contrib/staticfiles/storage.py(237):             substitutions = False
0.68 /testbed/django/contrib/staticfiles/storage.py(238):             for name, hashed_name, processed, subst in self._post_process(paths, adjustable_paths, hashed_files):
0.68 /testbed/django/contrib/staticfiles/storage.py(239):                 yield name, hashed_name, processed
0.68 /testbed/django/contrib/staticfiles/storage.py(240):                 substitutions = substitutions or subst
0.68 /testbed/django/contrib/staticfiles/storage.py(238):             for name, hashed_name, processed, subst in self._post_process(paths, adjustable_paths, hashed_files):
0.68 /testbed/django/contrib/staticfiles/storage.py(239):                 yield name, hashed_name, processed
0.68 /testbed/django/contrib/staticfiles/storage.py(240):                 substitutions = substitutions or subst
0.68 /testbed/django/contrib/staticfiles/storage.py(238):             for name, hashed_name, processed, subst in self._post_process(paths, adjustable_paths, hashed_files):
0.68 /testbed/django/contrib/staticfiles/storage.py(239):                 yield name, hashed_name, processed
0.68 /testbed/django/contrib/staticfiles/storage.py(240):                 substitutions = substitutions or subst
0.68 /testbed/django/contrib/staticfiles/storage.py(238):             for name, hashed_name, processed, subst in self._post_process(paths, adjustable_paths, hashed_files):
0.68 /testbed/django/contrib/staticfiles/storage.py(239):                 yield name, hashed_name, processed
0.68 /testbed/django/contrib/staticfiles/storage.py(240):                 substitutions = substitutions or subst
0.68 FAIL

======================================================================
FAIL: test_post_process_yields_multiple_times (test_coverup_django__django-14053.HashedFilesMixinTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/./tests/test_coverup_django__django-14053.py", line 35, in test_post_process_yields_multiple_times
    self.assertEqual(file_counts.get('admin/css/base.css', 0), 1)  # Expecting 1
AssertionError: 6 != 1

----------------------------------------------------------------------
Ran 1 test in 0.002s

FAILED (failures=1)
/testbed/django/contrib/staticfiles/storage.py(238):             for name, hashed_name, processed, subst in self._post_process(paths, adjustable_paths, hashed_files):
0.68 /testbed/django/contrib/staticfiles/storage.py(242):             if not substitutions:
0.68 /testbed/django/contrib/staticfiles/storage.py(236):         for i in range(self.max_post_process_passes):
0.68 /testbed/django/contrib/staticfiles/storage.py(245):         if substitutions:
0.68 /testbed/django/contrib/staticfiles/storage.py(246):             yield 'All', None, RuntimeError('Max post-process passes exceeded.')
0.68 /testbed/django/contrib/staticfiles/storage.py(249):         self.hashed_files.update(hashed_files)
+ cat coverage.cover
{"/testbed/django/contrib/staticfiles/storage.py": {"1": 1, "2": 1, "3": 1, "4": 1, "5": 1, "6": 1, "8": 1, "9": 1, "10": 1, "11": 1, "12": 1, "13": 1, "16": 2, "44": 2, "365": 2, "428": 2, "436": 2, "441": 1, "23": 1, "36": 1, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "32": 0, "33": 0, "34": 0, "37": 0, "38": 0, "41": 0, "45": 1, "46": 1, "47": 1, "53": 1, "55": 1, "68": 1, "79": 1, "112": 1, "143": 1, "149": 1, "203": 1, "251": 1, "323": 1, "326": 1, "329": 1, "341": 1, "56": 1, "57": 1, "58": 1, "59": 2, "60": 3, "61": 2, "62": 1, "64": 1, "65": 2, "66": 2, "72": 0, "73": 0, "74": 0, "75": 0, "76": 0, "77": 0, "82": 0, "83": 0, "84": 0, "85": 0, "86": 0, "87": 0, "88": 0, "89": 0, "90": 0, "91": 0, "93": 0, "94": 0, "95": 0, "97": 0, "98": 0, "99": 0, "100": 0, "101": 0, "102": 0, "103": 0, "104": 0, "105": 0, "108": 0, "109": 0, "110": 0, "116": 0, "117": 0, "119": 0, "120": 0, "121": 0, "123": 0, "124": 0, "125": 0, "126": 0, "128": 0, "132": 0, "133": 0, "134": 0, "135": 0, "136": 0, "137": 0, "138": 0, "139": 0, "141": 0, "147": 0, "153": 0, "154": 0, "156": 0, "201": 0, "163": 0, "166": 0, "167": 0, "171": 0, "172": 0, "175": 0, "177": 0, "179": 0, "180": 0, "183": 0, "184": 0, "187": 0, "188": 0, "189": 0, "192": 0, "195": 0, "196": 0, "199": 0, "218": 1, "219": 0, "222": 1, "225": 5, "226": 3, "231": 5, "232": 4, "234": 2, "236": 3, "237": 2, "238": 10, "239": 8, "240": 8, "242": 2, "243": 0, "245": 1, "246": 1, "249": 1, "227": 2, "253": 0, "256": 0, "257": 0, "260": 0, "261": 0, "262": 0, "263": 0, "267": 0, "268": 0, "270": 0, "273": 0, "274": 0, "276": 0, "277": 0, "280": 0, "281": 0, "282": 0, "283": 0, "284": 0, "285": 0, "286": 0, "287": 0, "288": 0, "289": 0, "290": 0, "291": 0, "292": 0, "294": 0, "295": 0, "297": 0, "298": 0, "300": 0, "301": 0, "303": 0, "304": 0, "306": 0, "307": 0, "308": 0, "310": 0, "313": 0, "314": 0, "315": 0, "316": 0, "319": 0, "321": 0, "254": 0, "324": 0, "327": 0, "333": 0, "334": 0, "335": 0, "336": 0, "337": 0, "338": 0, "339": 0, "342": 0, "343": 0, "344": 0, "345": 0, "346": 0, "348": 0, "349": 0, "350": 0, "351": 0, "353": 0, "355": 0, "356": 0, "359": 0, "362": 0, "366": 1, "367": 1, "368": 1, "369": 1, "371": 1, "375": 1, "382": 1, "397": 1, "403": 1, "410": 1, "372": 0, "373": 0, "376": 0, "377": 0, "378": 0, "379": 0, "380": 0, "383": 0, "384": 0, "385": 0, "386": 0, "387": 0, "388": 0, "389": 0, "391": 0, "392": 0, "393": 0, "394": 0, "395": 0, "398": 0, "399": 0, "400": 0, "401": 0, "404": 0, "405": 0, "406": 0, "407": 0, "408": 0, "411": 0, "412": 0, "413": 0, "414": 0, "415": 0, "416": 0, "417": 0, "418": 0, "419": 0, "420": 0, "423": 0, "424": 0, "425": 0, "433": 1, "437": 1, "438": 0}}
+ git checkout 179ee13eb37348cd87169a198aec18fedccc8668
Note: switching to '179ee13eb37348cd87169a198aec18fedccc8668'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at 179ee13eb3 Refs #24121 -- Added __repr__() to FilterExpression, Lexer, Parser, and Token.
+ git apply /root/pre_state.patch
error: unrecognized input
