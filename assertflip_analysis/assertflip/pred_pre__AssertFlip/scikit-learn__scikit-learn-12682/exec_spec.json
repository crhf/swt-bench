{"instance_id": "scikit-learn__scikit-learn-12682", "repo": "scikit-learn/scikit-learn", "version": "0.22", "environment_setup_commit": "7e85a6d1f038bbb932b36f18d75df6be937ed00d", "patch_list": ["diff --git a/dev/null b/sklearn/tests/test_coverup_scikit-learn__scikit-learn-12682.py\nnew file mode 100644\nindex e69de29..2c9e005 100644\n--- /dev/null\n+++ b/sklearn/tests/test_coverup_scikit-learn__scikit-learn-12682.py\n@@ -0,0 +1,25 @@\n+import pytest\n+import numpy as np\n+from sklearn.decomposition import SparseCoder\n+from sklearn.linear_model import Lasso\n+from sklearn.exceptions import ConvergenceWarning\n+import warnings\n+\n+def test_sparse_coder_lasso_cd_max_iter_bug():\n+    # Create a dataset and dictionary that are computationally intensive\n+    X = np.random.rand(100, 50)\n+    dictionary = np.random.rand(50, 50)\n+    \n+    # Initialize SparseCoder with lasso_cd algorithm\n+    coder = SparseCoder(dictionary=dictionary, transform_algorithm='lasso_cd', transform_alpha=0.1)\n+    \n+    # Capture warnings\n+    with warnings.catch_warnings(record=True) as w:\n+        warnings.simplefilter(\"always\")\n+        coder.transform(X)\n+        \n+        # Check if a ConvergenceWarning was raised\n+        convergence_warnings = [warning for warning in w if issubclass(warning.category, ConvergenceWarning)]\n+        \n+        # The test should fail if a warning is raised, indicating the bug is present\n+        assert len(convergence_warnings) == 0  # The test passes only if no warning is raised, indicating the bug is fixed\n"], "arch": "x86_64", "base_commit": "d360ffa7c5896a91ae498b3fb9cf464464ce8f34", "test_directives": ["sklearn/tests/test_coverup_scikit-learn__scikit-learn-12682.py"], "coverage_files": ["sklearn/decomposition/dict_learning.py", "examples/decomposition/plot_sparse_coding.py"], "env_name": "testbed", "run_id": "assertflip", "patch_id": "pred_pre__AssertFlip", "timeout": 1800, "rm_image": false, "force_rebuild": false, "exec_mode": "unit_test", "reproduction_script_name": null, "compute_coverage": true, "install": {"python": "3.6", "packages": "numpy scipy cython pytest pandas matplotlib", "install": "python -m pip install -v --no-use-pep517 --no-build-isolation -e .", "pip_packages": ["cython", "numpy==1.19.2", "setuptools", "scipy==1.5.2"]}, "cache_level": "instance", "test_command": "python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(sklearn/decomposition/dict_learning\\.py|examples/decomposition/plot_sparse_coding\\.py)' -m pytest --no-header -rA  -p no:cacheprovider sklearn/tests/test_coverup_scikit-learn__scikit-learn-12682.py", "req_install_commands": ["conda create -n testbed python=3.6 numpy scipy cython pytest pandas matplotlib -y"]}