{"instance_id": "django__django-15467", "repo": "django/django", "version": "4.1", "environment_setup_commit": "647480166bfe7532e8c471fef0146e3a17e6c0c9", "patch_list": ["diff --git a/dev/null b/tests/test_coverup_django__django-15467.py\nnew file mode 100644\nindex e69de29..b4cf350 100644\n--- /dev/null\n+++ b/tests/test_coverup_django__django-15467.py\n@@ -0,0 +1,33 @@\n+from django.test import SimpleTestCase\n+from django.contrib.admin import ModelAdmin\n+from django.db import models\n+from django.contrib import admin\n+from django.contrib.contenttypes.models import ContentType\n+from django.contrib.auth.models import Permission\n+\n+# Mock model to simulate the foreign key field\n+class MockModel(models.Model):\n+    myfield = models.ForeignKey('self', on_delete=models.CASCADE, blank=True, null=True)\n+\n+    class Meta:\n+        app_label = 'myapp'\n+\n+# Mock ModelAdmin to override formfield_for_foreignkey\n+class MockModelAdmin(ModelAdmin):\n+    radio_fields = {'myfield': None}\n+\n+    def formfield_for_foreignkey(self, db_field, request, **kwargs):\n+        if db_field.name == 'myfield':\n+            kwargs['empty_label'] = \"I WANT TO SET MY OWN EMPTY LABEL\"\n+        return super().formfield_for_foreignkey(db_field, request, **kwargs)\n+\n+class TestModelAdminEmptyLabel(SimpleTestCase):\n+    def test_empty_label_override(self):\n+        model_admin = MockModelAdmin(MockModel, admin.site)\n+        mock_field = MockModel._meta.get_field('myfield')\n+\n+        # Simulate calling formfield_for_foreignkey\n+        formfield = model_admin.formfield_for_foreignkey(mock_field, None)\n+\n+        # Check if the empty_label is overridden\n+        self.assertEqual(formfield.empty_label, \"I WANT TO SET MY OWN EMPTY LABEL\")\n"], "arch": "x86_64", "base_commit": "e0442a628eb480eac6a7888aed5a86f83499e299", "test_directives": ["test_coverup_django__django-15467"], "coverage_files": ["django/contrib/admin/options.py"], "env_name": "testbed", "run_id": "assertflip", "patch_id": "pred_pre__AssertFlip", "timeout": 1800, "rm_image": false, "force_rebuild": false, "exec_mode": "unit_test", "reproduction_script_name": null, "compute_coverage": true, "install": {"python": "3.9", "packages": "requirements.txt", "install": "python -m pip install -e ."}, "cache_level": "instance", "test_command": "python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/contrib/admin/options\\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-15467", "req_install_commands": ["conda create -n testbed python=3.9 -y", "cat <<'EOF_59812759871' > $HOME/requirements.txt\naiosmtpd\nasgiref >= 3.4.1\nargon2-cffi >= 16.1.0\nbackports.zoneinfo; python_version < '3.9'\nbcrypt\nblack\ndocutils\ngeoip2\njinja2 >= 2.9.2\nnumpy\nPillow >= 6.2.0\npylibmc; sys.platform != 'win32'\npymemcache >= 3.4.0\npytz\npywatchman; sys.platform != 'win32'\nPyYAML\nredis >= 3.0.0\nselenium\nsqlparse >= 0.2.2\ntblib >= 1.5.0\ntzdata\ncolorama; sys.platform == 'win32'\n\nEOF_59812759871", "conda activate testbed && python -m pip install -r $HOME/requirements.txt", "rm $HOME/requirements.txt"]}