+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD d4df5e1b0b1c643fe0fc521add0236764ec8e92a
+ sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen
+ locale-gen
Generating locales (this might take a while)...
  en_US.UTF-8... done
Generation complete.
+ export LANG=en_US.UTF-8
+ LANG=en_US.UTF-8
+ export LANGUAGE=en_US:en
+ LANGUAGE=en_US:en
+ export LC_ALL=en_US.UTF-8
+ LC_ALL=en_US.UTF-8
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
nothing to commit, working tree clean
+ git show
commit d4df5e1b0b1c643fe0fc521add0236764ec8e92a
Author: Hasan Ramezani <hasan.r67@gmail.com>
Date:   Sat Mar 23 18:10:06 2019 +0100

    Fixed #27360 -- Added app or ModelAdmin details for AreadyRegistered exceptions.

diff --git a/django/contrib/admin/sites.py b/django/contrib/admin/sites.py
index 6842f49684..116303c94a 100644
--- a/django/contrib/admin/sites.py
+++ b/django/contrib/admin/sites.py
@@ -1,3 +1,4 @@
+import re
 from functools import update_wrapper
 from weakref import WeakSet
 
@@ -106,7 +107,14 @@ class AdminSite:
                 )
 
             if model in self._registry:
-                raise AlreadyRegistered('The model %s is already registered' % model.__name__)
+                registered_admin = str(self._registry[model])
+                msg = 'The model %s is already registered ' % model.__name__
+                if registered_admin.endswith('.ModelAdmin'):
+                    # Most likely registered without a ModelAdmin subclass.
+                    msg += 'in app %r.' % re.sub(r'\.ModelAdmin$', '', registered_admin)
+                else:
+                    msg += 'with %r.' % registered_admin
+                raise AlreadyRegistered(msg)
 
             # Ignore the registration if the model has been
             # swapped out.
diff --git a/tests/admin_registration/tests.py b/tests/admin_registration/tests.py
index 8601328647..93031bfbf3 100644
--- a/tests/admin_registration/tests.py
+++ b/tests/admin_registration/tests.py
@@ -30,10 +30,19 @@ class TestRegistration(SimpleTestCase):
 
     def test_prevent_double_registration(self):
         self.site.register(Person)
-        msg = 'The model Person is already registered'
+        msg = "The model Person is already registered in app 'admin_registration'."
         with self.assertRaisesMessage(admin.sites.AlreadyRegistered, msg):
             self.site.register(Person)
 
+    def test_prevent_double_registration_for_custom_admin(self):
+        class PersonAdmin(admin.ModelAdmin):
+            pass
+
+        self.site.register(Person, PersonAdmin)
+        msg = "The model Person is already registered with 'admin_registration.PersonAdmin'."
+        with self.assertRaisesMessage(admin.sites.AlreadyRegistered, msg):
+            self.site.register(Person, PersonAdmin)
+
     def test_registration_with_star_star_options(self):
         self.site.register(Person, search_fields=['name'])
         self.assertEqual(self.site._registry[Person].search_fields, ['name'])
+ git diff d4df5e1b0b1c643fe0fc521add0236764ec8e92a
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
Requirement already satisfied: pytz in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.0.dev20190325213453) (2025.2)
Requirement already satisfied: sqlparse in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.0.dev20190325213453) (0.4.4)
Installing collected packages: Django
  Attempting uninstall: Django
    Found existing installation: Django 3.0.dev20190325213453
    Uninstalling Django-3.0.dev20190325213453:
      Successfully uninstalled Django-3.0.dev20190325213453
  Running setup.py develop for Django
Successfully installed Django-3.0.dev20190325213453
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv
+ git apply -v -
Checking patch tests/test_coverup_django__django-11119.py...
Applied patch tests/test_coverup_django__django-11119.py cleanly.
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/template/engine\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-11119
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(django/template/engine\\.py)']
0.19 /testbed/django/template/engine.py(1): import functools
0.19 /testbed/django/template/engine.py(3): from django.core.exceptions import ImproperlyConfigured
0.19 /testbed/django/template/engine.py(4): from django.utils.functional import cached_property
0.19 /testbed/django/template/engine.py(5): from django.utils.module_loading import import_string
0.19 /testbed/django/template/engine.py(7): from .base import Context, Template
0.21 /testbed/django/template/engine.py(8): from .context import _builtin_context_processors
0.21 /testbed/django/template/engine.py(9): from .exceptions import TemplateDoesNotExist
0.21 /testbed/django/template/engine.py(10): from .library import import_library
0.21 /testbed/django/template/engine.py(13): class Engine:
0.21 /testbed/django/template/engine.py(13): class Engine:
0.21 /testbed/django/template/engine.py(15):         'django.template.defaulttags',
0.21 /testbed/django/template/engine.py(16):         'django.template.defaultfilters',
0.21 /testbed/django/template/engine.py(17):         'django.template.loader_tags',
0.21 /testbed/django/template/engine.py(22):                  file_charset='utf-8', libraries=None, builtins=None, autoescape=True):
0.21 /testbed/django/template/engine.py(55):     @staticmethod
0.21 /testbed/django/template/engine.py(56):     @functools.lru_cache()
0.21 /testbed/django/template/engine.py(81):     @cached_property
0.21 /testbed/django/template/engine.py(87):     def get_template_builtins(self, builtins):
0.21 /testbed/django/template/engine.py(90):     def get_template_libraries(self, libraries):
0.21 /testbed/django/template/engine.py(96):     @cached_property
0.21 /testbed/django/template/engine.py(100):     def get_template_loaders(self, template_loaders):
0.21 /testbed/django/template/engine.py(108):     def find_template_loader(self, loader):
0.21 /testbed/django/template/engine.py(121):     def find_template(self, name, dirs=None, skip=None):
0.21 /testbed/django/template/engine.py(131):     def from_string(self, template_code):
0.21 /testbed/django/template/engine.py(138):     def get_template(self, template_name):
0.21 /testbed/django/template/engine.py(149):     def render_to_string(self, template_name, context=None):
0.21 /testbed/django/template/engine.py(165):     def select_template(self, template_name_list):
0.43 /testbed/django/template/engine.py(23):         if dirs is None:
0.43 /testbed/django/template/engine.py(24):             dirs = []
0.43 /testbed/django/template/engine.py(25):         if context_processors is None:
0.43 /testbed/django/template/engine.py(26):             context_processors = []
0.43 /testbed/django/template/engine.py(27):         if loaders is None:
0.43 /testbed/django/template/engine.py(28):             loaders = ['django.template.loaders.filesystem.Loader']
0.43 /testbed/django/template/engine.py(29):             if app_dirs:
0.43 /testbed/django/template/engine.py(31):             if not debug:
0.43 /testbed/django/template/engine.py(37):         if libraries is None:
0.43 /testbed/django/template/engine.py(39):         if builtins is None:
0.43 /testbed/django/template/engine.py(40):             builtins = []
0.43 /testbed/django/template/engine.py(42):         self.dirs = dirs
0.43 /testbed/django/template/engine.py(43):         self.app_dirs = app_dirs
0.43 /testbed/django/template/engine.py(44):         self.autoescape = autoescape
0.43 /testbed/django/template/engine.py(45):         self.context_processors = context_processors
0.43 /testbed/django/template/engine.py(46):         self.debug = debug
0.43 /testbed/django/template/engine.py(47):         self.loaders = loaders
0.43 /testbed/django/template/engine.py(48):         self.string_if_invalid = string_if_invalid
0.43 /testbed/django/template/engine.py(49):         self.file_charset = file_charset
0.43 /testbed/django/template/engine.py(50):         self.libraries = libraries
0.43 /testbed/django/template/engine.py(51):         self.template_libraries = self.get_template_libraries(libraries)
0.43 /testbed/django/template/engine.py(91):         loaded = {}
0.43 /testbed/django/template/engine.py(92):         for name, path in libraries.items():
0.43 /testbed/django/template/engine.py(93):             loaded[name] = import_library(path)
0.44 /testbed/django/template/engine.py(92):         for name, path in libraries.items():
0.44 /testbed/django/template/engine.py(94):         return loaded
0.44 /testbed/django/template/engine.py(52):         self.builtins = self.default_builtins + builtins
0.44 /testbed/django/template/engine.py(53):         self.template_builtins = self.get_template_builtins(self.builtins)
0.44 /testbed/django/template/engine.py(88):         return [import_library(x) for x in builtins]
0.44 /testbed/django/template/engine.py(88):         return [import_library(x) for x in builtins]
0.44 /testbed/django/template/engine.py(88):         return [import_library(x) for x in builtins]
0.44 /testbed/django/template/engine.py(88):         return [import_library(x) for x in builtins]
0.44 /testbed/django/template/engine.py(88):         return [import_library(x) for x in builtins]
Testing against Django installed in '/testbed/django'
Skipping setup of unused database(s): default, other.
0.66 /testbed/django/template/engine.py(23):         if dirs is None:
0.66 /testbed/django/template/engine.py(25):         if context_processors is None:
0.66 /testbed/django/template/engine.py(27):         if loaders is None:
0.66 /testbed/django/template/engine.py(28):             loaders = ['django.template.loaders.filesystem.Loader']
0.66 /testbed/django/template/engine.py(29):             if app_dirs:
0.66 /testbed/django/template/engine.py(30):                 loaders += ['django.template.loaders.app_directories.Loader']
0.66 /testbed/django/template/engine.py(31):             if not debug:
0.66 /testbed/django/template/engine.py(32):                 loaders = [('django.template.loaders.cached.Loader', loaders)]
0.66 /testbed/django/template/engine.py(37):         if libraries is None:
0.66 /testbed/django/template/engine.py(39):         if builtins is None:
0.66 /testbed/django/template/engine.py(40):             builtins = []
0.66 /testbed/django/template/engine.py(42):         self.dirs = dirs
0.66 /testbed/django/template/engine.py(43):         self.app_dirs = app_dirs
0.66 /testbed/django/template/engine.py(44):         self.autoescape = autoescape
0.66 /testbed/django/template/engine.py(45):         self.context_processors = context_processors
0.66 /testbed/django/template/engine.py(46):         self.debug = debug
0.66 /testbed/django/template/engine.py(47):         self.loaders = loaders
0.66 /testbed/django/template/engine.py(48):         self.string_if_invalid = string_if_invalid
0.66 /testbed/django/template/engine.py(49):         self.file_charset = file_charset
0.66 /testbed/django/template/engine.py(50):         self.libraries = libraries
0.66 /testbed/django/template/engine.py(51):         self.template_libraries = self.get_template_libraries(libraries)
0.66 /testbed/django/template/engine.py(91):         loaded = {}
0.66 /testbed/django/template/engine.py(92):         for name, path in libraries.items():
0.66 /testbed/django/template/engine.py(93):             loaded[name] = import_library(path)
0.66 /testbed/django/template/engine.py(92):         for name, path in libraries.items():
0.66 /testbed/django/template/engine.py(93):             loaded[name] = import_library(path)
0.66 /testbed/django/template/engine.py(92):         for name, path in libraries.items():
0.66 /testbed/django/template/engine.py(93):             loaded[name] = import_library(path)
0.66 /testbed/django/template/engine.py(92):         for name, path in libraries.items():
0.66 /testbed/django/template/engine.py(93):             loaded[name] = import_library(path)
0.66 /testbed/django/template/engine.py(92):         for name, path in libraries.items():
0.66 /testbed/django/template/engine.py(93):             loaded[name] = import_library(path)
0.66 /testbed/django/template/engine.py(92):         for name, path in libraries.items():
test_render_to_string_autoescape_false (test_coverup_django__django-11119.EngineRenderToStringAutoescapeTest) ... 0.66 /testbed/django/template/engine.py(93):             loaded[name] = import_library(path)
0.66 /testbed/django/template/engine.py(92):         for name, path in libraries.items():
0.66 /testbed/django/template/engine.py(93):             loaded[name] = import_library(path)
0.66 /testbed/django/template/engine.py(92):         for name, path in libraries.items():
0.66 /testbed/django/template/engine.py(93):             loaded[name] = import_library(path)
0.66 /testbed/django/template/engine.py(92):         for name, path in libraries.items():
0.66 /testbed/django/template/engine.py(93):             loaded[name] = import_library(path)
0.66 /testbed/django/template/engine.py(92):         for name, path in libraries.items():
0.66 /testbed/django/template/engine.py(94):         return loaded
0.66 /testbed/django/template/engine.py(52):         self.builtins = self.default_builtins + builtins
0.66 /testbed/django/template/engine.py(53):         self.template_builtins = self.get_template_builtins(self.builtins)
0.66 /testbed/django/template/engine.py(88):         return [import_library(x) for x in builtins]
0.66 /testbed/django/template/engine.py(88):         return [import_library(x) for x in builtins]
0.66 /testbed/django/template/engine.py(88):         return [import_library(x) for x in builtins]
0.66 /testbed/django/template/engine.py(88):         return [import_library(x) for x in builtins]
0.66 /testbed/django/template/engine.py(88):         return [import_library(x) for x in builtins]
System check identified no issues (0 silenced).
0.68 /testbed/django/template/engine.py(23):         if dirs is None:
0.68 /testbed/django/template/engine.py(25):         if context_processors is None:
0.68 /testbed/django/template/engine.py(26):             context_processors = []
0.68 /testbed/django/template/engine.py(27):         if loaders is None:
0.68 /testbed/django/template/engine.py(28):             loaders = ['django.template.loaders.filesystem.Loader']
0.68 /testbed/django/template/engine.py(29):             if app_dirs:
0.68 /testbed/django/template/engine.py(31):             if not debug:
0.68 /testbed/django/template/engine.py(32):                 loaders = [('django.template.loaders.cached.Loader', loaders)]
0.68 /testbed/django/template/engine.py(37):         if libraries is None:
0.68 /testbed/django/template/engine.py(38):             libraries = {}
0.68 /testbed/django/template/engine.py(39):         if builtins is None:
0.68 /testbed/django/template/engine.py(40):             builtins = []
0.68 /testbed/django/template/engine.py(42):         self.dirs = dirs
0.68 /testbed/django/template/engine.py(43):         self.app_dirs = app_dirs
0.68 /testbed/django/template/engine.py(44):         self.autoescape = autoescape
0.68 /testbed/django/template/engine.py(45):         self.context_processors = context_processors
0.68 /testbed/django/template/engine.py(46):         self.debug = debug
0.68 /testbed/django/template/engine.py(47):         self.loaders = loaders
0.68 /testbed/django/template/engine.py(48):         self.string_if_invalid = string_if_invalid
0.68 /testbed/django/template/engine.py(49):         self.file_charset = file_charset
0.68 /testbed/django/template/engine.py(50):         self.libraries = libraries
0.68 /testbed/django/template/engine.py(51):         self.template_libraries = self.get_template_libraries(libraries)
0.68 /testbed/django/template/engine.py(91):         loaded = {}
0.68 /testbed/django/template/engine.py(92):         for name, path in libraries.items():
0.68 /testbed/django/template/engine.py(94):         return loaded
0.68 /testbed/django/template/engine.py(52):         self.builtins = self.default_builtins + builtins
0.68 /testbed/django/template/engine.py(53):         self.template_builtins = self.get_template_builtins(self.builtins)
0.68 /testbed/django/template/engine.py(88):         return [import_library(x) for x in builtins]
0.68 /testbed/django/template/engine.py(88):         return [import_library(x) for x in builtins]
0.68 /testbed/django/template/engine.py(88):         return [import_library(x) for x in builtins]
0.68 /testbed/django/template/engine.py(88):         return [import_library(x) for x in builtins]
0.68 /testbed/django/template/engine.py(88):         return [import_library(x) for x in builtins]
0.68 /testbed/django/template/engine.py(154):         if isinstance(template_name, (list, tuple)):
0.68 /testbed/django/template/engine.py(157):             t = self.get_template(template_name)
0.68 /testbed/django/template/engine.py(143):         template, origin = self.find_template(template_name)
0.68 /testbed/django/template/engine.py(122):         tried = []
0.68 /testbed/django/template/engine.py(123):         for loader in self.template_loaders:
0.68 /testbed/django/template/engine.py(98):         return self.get_template_loaders(self.loaders)
0.68 /testbed/django/template/engine.py(101):         loaders = []
0.68 /testbed/django/template/engine.py(102):         for template_loader in template_loaders:
0.68 /testbed/django/template/engine.py(103):             loader = self.find_template_loader(template_loader)
0.68 /testbed/django/template/engine.py(109):         if isinstance(loader, (tuple, list)):
0.68 /testbed/django/template/engine.py(110):             loader, *args = loader
0.68 /testbed/django/template/engine.py(114):         if isinstance(loader, str):
0.68 /testbed/django/template/engine.py(115):             loader_class = import_string(loader)
0.68 /testbed/django/template/engine.py(116):             return loader_class(self, *args)
0.68 /testbed/django/template/engine.py(101):         loaders = []
0.68 /testbed/django/template/engine.py(102):         for template_loader in template_loaders:
0.68 /testbed/django/template/engine.py(103):             loader = self.find_template_loader(template_loader)
0.68 /testbed/django/template/engine.py(109):         if isinstance(loader, (tuple, list)):
0.68 /testbed/django/template/engine.py(112):             args = []
0.68 /testbed/django/template/engine.py(114):         if isinstance(loader, str):
0.68 /testbed/django/template/engine.py(115):             loader_class = import_string(loader)
0.68 /testbed/django/template/engine.py(116):             return loader_class(self, *args)
0.68 /testbed/django/template/engine.py(104):             if loader is not None:
0.68 /testbed/django/template/engine.py(105):                 loaders.append(loader)
0.68 /testbed/django/template/engine.py(102):         for template_loader in template_loaders:
0.68 /testbed/django/template/engine.py(106):         return loaders
0.68 /testbed/django/template/engine.py(104):             if loader is not None:
0.68 /testbed/django/template/engine.py(105):                 loaders.append(loader)
0.68 /testbed/django/template/engine.py(102):         for template_loader in template_loaders:
0.68 /testbed/django/template/engine.py(106):         return loaders
0.68 /testbed/django/template/engine.py(124):             try:
0.68 /testbed/django/template/engine.py(125):                 template = loader.get_template(name, skip=skip)
0.68 /testbed/django/template/engine.py(126):                 return template, template.origin
0.68 /testbed/django/template/engine.py(144):         if not hasattr(template, 'render'):
0.68 /testbed/django/template/engine.py(147):         return template
0.68 /testbed/django/template/engine.py(160):         if isinstance(context, Context):
0.68 /testbed/django/template/engine.py(163):             return t.render(Context(context))
FAIL

======================================================================
FAIL: test_render_to_string_autoescape_false (test_coverup_django__django-11119.EngineRenderToStringAutoescapeTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "./tests/test_coverup_django__django-11119.py", line 37, in test_render_to_string_autoescape_false
    self.assertIn('<strong>bold</strong>', output)
AssertionError: '<strong>bold</strong>' not found in 'Test &amp; &lt;strong&gt;bold&lt;/strong&gt;'

----------------------------------------------------------------------
Ran 1 test in 0.004s

FAILED (failures=1)
+ cat coverage.cover
{"/testbed/django/template/engine.py": {"1": 1, "3": 1, "4": 1, "5": 1, "7": 1, "8": 1, "9": 1, "10": 1, "13": 2, "15": 1, "16": 1, "17": 1, "22": 1, "55": 1, "56": 1, "81": 1, "87": 1, "90": 1, "96": 1, "100": 1, "108": 1, "121": 1, "131": 1, "138": 1, "149": 1, "165": 1, "23": 3, "24": 1, "25": 3, "26": 2, "27": 3, "28": 3, "29": 3, "30": 1, "31": 3, "32": 2, "34": 0, "35": 0, "36": 0, "37": 3, "38": 1, "39": 3, "40": 3, "42": 3, "43": 3, "44": 3, "45": 3, "46": 3, "47": 3, "48": 3, "49": 3, "50": 3, "51": 3, "52": 3, "53": 3, "74": 0, "75": 0, "76": 0, "77": 0, "78": 0, "79": 0, "83": 0, "84": 0, "85": 0, "88": 15, "91": 3, "92": 13, "93": 10, "94": 3, "98": 1, "101": 2, "102": 4, "103": 2, "104": 2, "105": 2, "106": 2, "109": 2, "110": 1, "112": 1, "114": 2, "115": 2, "116": 2, "118": 0, "119": 0, "122": 1, "123": 1, "124": 1, "125": 1, "126": 1, "127": 0, "128": 0, "129": 0, "136": 0, "143": 1, "144": 1, "146": 0, "147": 1, "154": 1, "155": 0, "157": 1, "160": 1, "161": 0, "163": 1, "169": 0, "170": 0, "171": 0, "172": 0, "173": 0, "174": 0, "175": 0, "176": 0, "177": 0, "178": 0, "180": 0}}
+ git checkout d4df5e1b0b1c643fe0fc521add0236764ec8e92a
Note: switching to 'd4df5e1b0b1c643fe0fc521add0236764ec8e92a'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at d4df5e1b0b Fixed #27360 -- Added app or ModelAdmin details for AreadyRegistered exceptions.
+ git apply /root/pre_state.patch
error: unrecognized input
