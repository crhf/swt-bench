+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD 33b47e4bd60e2302e42616141e76285038b724d6
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch master
nothing to commit, working tree clean
+ git show
commit 33b47e4bd60e2302e42616141e76285038b724d6
Merge: 6d27585c5b 7d414cdead
Author: Oscar Benjamin <oscar.j.benjamin@gmail.com>
Date:   Wed Dec 23 11:47:17 2020 +0000

    Merge pull request #20646 from Mohitbalwani26/refactor(test_ode)
    
    refactor lie_group examples

+ git diff 33b47e4bd60e2302e42616141e76285038b724d6
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Requirement already satisfied: mpmath>=0.19 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from sympy==1.8.dev0) (1.3.0)
Installing collected packages: sympy
  Attempting uninstall: sympy
    Found existing installation: sympy 1.8.dev0
    Uninstalling sympy-1.8.dev0:
      Successfully uninstalled sympy-1.8.dev0
  DEPRECATION: Legacy editable install of sympy==1.8.dev0 from file:///testbed (setup.py develop) is deprecated. pip 25.3 will enforce this behaviour change. A possible replacement is to add a pyproject.toml or enable --use-pep517, and use setuptools >= 64. If the resulting installation is not behaving as expected, try using --config-settings editable_mode=compat. Please consult the setuptools documentation for more information. Discussion can be found at https://github.com/pypa/pip/issues/11457
  Running setup.py develop for sympy
Successfully installed sympy
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git apply -v -
Checking patch sympy/polys/tests/test_coverup_sympy__sympy-20438.py...
Applied patch sympy/polys/tests/test_coverup_sympy__sympy-20438.py cleanly.
+ PYTHONWARNINGS=ignore::UserWarning,ignore::SyntaxWarning
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(sympy/core/relational\.py|sympy/sets/handlers/issubset\.py|sympy/sets/handlers/comparison\.py)' bin/test -C --verbose sympy/polys/tests/test_coverup_sympy__sympy-20438.p
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(sympy/core/relational\\.py|sympy/sets/handlers/issubset\\.py|sympy/sets/handlers/comparison\\.py)']
0.34 /testbed/sympy/core/relational.py(1): from typing import Dict, Union, Type
0.34 /testbed/sympy/core/relational.py(3): from sympy.utilities.exceptions import SymPyDeprecationWarning
0.34 /testbed/sympy/core/relational.py(4): from .basic import S, Atom
0.34 /testbed/sympy/core/relational.py(5): from .compatibility import ordered
0.34 /testbed/sympy/core/relational.py(6): from .basic import Basic
0.34 /testbed/sympy/core/relational.py(7): from .evalf import EvalfMixin
0.34 /testbed/sympy/core/relational.py(8): from .function import AppliedUndef
0.34 /testbed/sympy/core/relational.py(9): from .sympify import _sympify, SympifyError
0.34 /testbed/sympy/core/relational.py(10): from .parameters import global_parameters
0.34 /testbed/sympy/core/relational.py(11): from sympy.core.logic import fuzzy_bool, fuzzy_xor, fuzzy_and, fuzzy_not
0.34 /testbed/sympy/core/relational.py(12): from sympy.logic.boolalg import Boolean, BooleanAtom
0.34 /testbed/sympy/core/relational.py(14): __all__ = (
0.34 /testbed/sympy/core/relational.py(20): from .expr import Expr
0.34 /testbed/sympy/core/relational.py(21): from sympy.multipledispatch import dispatch
0.34 /testbed/sympy/core/relational.py(22): from .containers import Tuple
0.34 /testbed/sympy/core/relational.py(23): from .symbol import Symbol
0.34 /testbed/sympy/core/relational.py(26): def _nontrivBool(side):
0.34 /testbed/sympy/core/relational.py(36): def _canonical(cond):
0.34 /testbed/sympy/core/relational.py(44): class Relational(Boolean, EvalfMixin):
0.34 /testbed/sympy/core/relational.py(44): class Relational(Boolean, EvalfMixin):
0.34 /testbed/sympy/core/relational.py(45):     """Base class for all relation types.
0.34 /testbed/sympy/core/relational.py(70):     __slots__ = ()
0.34 /testbed/sympy/core/relational.py(72):     ValidRelationOperator = {}  # type: Dict[Union[str, None], Type[Relational]]
0.34 /testbed/sympy/core/relational.py(74):     is_Relational = True
0.34 /testbed/sympy/core/relational.py(79):     def __new__(cls, lhs, rhs, rop=None, **assumptions):
0.34 /testbed/sympy/core/relational.py(108):     @property
0.34 /testbed/sympy/core/relational.py(109):     def lhs(self):
0.34 /testbed/sympy/core/relational.py(113):     @property
0.34 /testbed/sympy/core/relational.py(114):     def rhs(self):
0.34 /testbed/sympy/core/relational.py(118):     @property
0.34 /testbed/sympy/core/relational.py(119):     def reversed(self):
0.34 /testbed/sympy/core/relational.py(140):     @property
0.34 /testbed/sympy/core/relational.py(141):     def reversedsign(self):
0.34 /testbed/sympy/core/relational.py(165):     @property
0.34 /testbed/sympy/core/relational.py(166):     def negated(self):
0.34 /testbed/sympy/core/relational.py(199):     def _eval_evalf(self, prec):
0.34 /testbed/sympy/core/relational.py(202):     @property
0.34 /testbed/sympy/core/relational.py(203):     def canonical(self):
0.34 /testbed/sympy/core/relational.py(255):     def equals(self, other, failing_expression=False):
0.34 /testbed/sympy/core/relational.py(303):     def _eval_simplify(self, **kwargs):
0.34 /testbed/sympy/core/relational.py(386):     def _eval_trigsimp(self, **opts):
0.34 /testbed/sympy/core/relational.py(390):     def expand(self, **kwargs):
0.34 /testbed/sympy/core/relational.py(394):     def __bool__(self):
0.34 /testbed/sympy/core/relational.py(397):     def _eval_as_set(self):
0.34 /testbed/sympy/core/relational.py(412):     @property
0.34 /testbed/sympy/core/relational.py(413):     def binary_symbols(self):
0.34 /testbed/sympy/core/relational.py(418): Rel = Relational
0.34 /testbed/sympy/core/relational.py(421): class Equality(Relational):
0.34 /testbed/sympy/core/relational.py(421): class Equality(Relational):
0.34 /testbed/sympy/core/relational.py(422):     """An equal relation between two objects.
0.34 /testbed/sympy/core/relational.py(483):     rel_op = '=='
0.34 /testbed/sympy/core/relational.py(485):     __slots__ = ()
0.34 /testbed/sympy/core/relational.py(487):     is_Equality = True
0.34 /testbed/sympy/core/relational.py(489):     def __new__(cls, lhs, rhs=None, **options):
0.34 /testbed/sympy/core/relational.py(511):     @classmethod
0.34 /testbed/sympy/core/relational.py(512):     def _eval_relation(cls, lhs, rhs):
0.34 /testbed/sympy/core/relational.py(515):     def _eval_rewrite_as_Add(self, *args, **kwargs):
0.34 /testbed/sympy/core/relational.py(549):     @property
0.34 /testbed/sympy/core/relational.py(550):     def binary_symbols(self):
0.34 /testbed/sympy/core/relational.py(558):     def _eval_simplify(self, **kwargs):
0.34 /testbed/sympy/core/relational.py(582):     def integrate(self, *args, **kwargs):
0.34 /testbed/sympy/core/relational.py(587):     def as_poly(self, *gens, **kwargs):
0.34 /testbed/sympy/core/relational.py(601): Eq = Equality
0.34 /testbed/sympy/core/relational.py(604): class Unequality(Relational):
0.34 /testbed/sympy/core/relational.py(604): class Unequality(Relational):
0.34 /testbed/sympy/core/relational.py(605):     """An unequal relation between two objects.
0.34 /testbed/sympy/core/relational.py(637):     rel_op = '!='
0.34 /testbed/sympy/core/relational.py(639):     __slots__ = ()
0.34 /testbed/sympy/core/relational.py(641):     def __new__(cls, lhs, rhs, **options):
0.34 /testbed/sympy/core/relational.py(654):     @classmethod
0.34 /testbed/sympy/core/relational.py(655):     def _eval_relation(cls, lhs, rhs):
0.34 /testbed/sympy/core/relational.py(658):     @property
0.34 /testbed/sympy/core/relational.py(659):     def binary_symbols(self):
0.34 /testbed/sympy/core/relational.py(667):     def _eval_simplify(self, **kwargs):
0.34 /testbed/sympy/core/relational.py(676): Ne = Unequality
0.34 /testbed/sympy/core/relational.py(679): class _Inequality(Relational):
0.34 /testbed/sympy/core/relational.py(679): class _Inequality(Relational):
0.34 /testbed/sympy/core/relational.py(680):     """Internal base class for all *Than types.
0.34 /testbed/sympy/core/relational.py(686):     __slots__ = ()
0.34 /testbed/sympy/core/relational.py(688):     def __new__(cls, lhs, rhs, **options):
0.34 /testbed/sympy/core/relational.py(716):     @classmethod
0.34 /testbed/sympy/core/relational.py(717):     def _eval_relation(cls, lhs, rhs, **options):
0.34 /testbed/sympy/core/relational.py(725): class _Greater(_Inequality):
0.34 /testbed/sympy/core/relational.py(725): class _Greater(_Inequality):
0.34 /testbed/sympy/core/relational.py(726):     """Not intended for general use
0.34 /testbed/sympy/core/relational.py(732):     __slots__ = ()
0.34 /testbed/sympy/core/relational.py(734):     @property
0.34 /testbed/sympy/core/relational.py(735):     def gts(self):
0.34 /testbed/sympy/core/relational.py(738):     @property
0.34 /testbed/sympy/core/relational.py(739):     def lts(self):
0.34 /testbed/sympy/core/relational.py(743): class _Less(_Inequality):
0.34 /testbed/sympy/core/relational.py(743): class _Less(_Inequality):
0.34 /testbed/sympy/core/relational.py(744):     """Not intended for general use.
0.34 /testbed/sympy/core/relational.py(750):     __slots__ = ()
0.34 /testbed/sympy/core/relational.py(752):     @property
0.34 /testbed/sympy/core/relational.py(753):     def gts(self):
0.34 /testbed/sympy/core/relational.py(756):     @property
0.34 /testbed/sympy/core/relational.py(757):     def lts(self):
0.34 /testbed/sympy/core/relational.py(761): class GreaterThan(_Greater):
0.34 /testbed/sympy/core/relational.py(761): class GreaterThan(_Greater):
0.34 /testbed/sympy/core/relational.py(762):     """Class representations of inequalities.
0.34 /testbed/sympy/core/relational.py(986):     __slots__ = ()
0.34 /testbed/sympy/core/relational.py(988):     rel_op = '>='
0.34 /testbed/sympy/core/relational.py(990):     @classmethod
0.34 /testbed/sympy/core/relational.py(991):     def _eval_fuzzy_relation(cls, lhs, rhs):
0.34 /testbed/sympy/core/relational.py(995): Ge = GreaterThan
0.34 /testbed/sympy/core/relational.py(998): class LessThan(_Less):
0.34 ['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(sympy/core/relational\\.py|sympy/sets/handlers/issubset\\.py|sympy/sets/handlers/comparison\\.py)']
0.23 /testbed/sympy/core/relational.py(1): from typing import Dict, Union, Type
0.23 /testbed/sympy/core/relational.py(3): from sympy.utilities.exceptions import SymPyDeprecationWarning
0.23 /testbed/sympy/core/relational.py(4): from .basic import S, Atom
0.23 /testbed/sympy/core/relational.py(5): from .compatibility import ordered
0.23 /testbed/sympy/core/relational.py(6): from .basic import Basic
0.23 /testbed/sympy/core/relational.py(7): from .evalf import EvalfMixin
0.23 /testbed/sympy/core/relational.py(8): from .function import AppliedUndef
0.23 /testbed/sympy/core/relational.py(9): from .sympify import _sympify, SympifyError
0.23 /testbed/sympy/core/relational.py(10): from .parameters import global_parameters
0.23 /testbed/sympy/core/relational.py(11): from sympy.core.logic import fuzzy_bool, fuzzy_xor, fuzzy_and, fuzzy_not
0.23 /testbed/sympy/core/relational.py(12): from sympy.logic.boolalg import Boolean, BooleanAtom
0.23 /testbed/sympy/core/relational.py(14): __all__ = (
0.23 /testbed/sympy/core/relational.py(20): from .expr import Expr
0.23 /testbed/sympy/core/relational.py(21): from sympy.multipledispatch import dispatch
0.23 /testbed/sympy/core/relational.py(22): from .containers import Tuple
0.23 /testbed/sympy/core/relational.py(23): from .symbol import Symbol
0.23 /testbed/sympy/core/relational.py(26): def _nontrivBool(side):
0.23 /testbed/sympy/core/relational.py(36): def _canonical(cond):
0.23 /testbed/sympy/core/relational.py(44): class Relational(Boolean, EvalfMixin):
0.23 /testbed/sympy/core/relational.py(44): class Relational(Boolean, EvalfMixin):
0.23 /testbed/sympy/core/relational.py(45):     """Base class for all relation types.
0.23 /testbed/sympy/core/relational.py(70):     __slots__ = ()
0.23 /testbed/sympy/core/relational.py(72):     ValidRelationOperator = {}  # type: Dict[Union[str, None], Type[Relational]]
0.23 /testbed/sympy/core/relational.py(74):     is_Relational = True
0.23 /testbed/sympy/core/relational.py(79):     def __new__(cls, lhs, rhs, rop=None, **assumptions):
0.23 /testbed/sympy/core/relational.py(108):     @property
0.23 /testbed/sympy/core/relational.py(109):     def lhs(self):
0.23 /testbed/sympy/core/relational.py(113):     @property
0.23 /testbed/sympy/core/relational.py(114):     def rhs(self):
0.23 /testbed/sympy/core/relational.py(118):     @property
0.23 /testbed/sympy/core/relational.py(119):     def reversed(self):
0.23 /testbed/sympy/core/relational.py(140):     @property
0.23 /testbed/sympy/core/relational.py(141):     def reversedsign(self):
0.23 /testbed/sympy/core/relational.py(165):     @property
0.23 /testbed/sympy/core/relational.py(166):     def negated(self):
0.23 /testbed/sympy/core/relational.py(199):     def _eval_evalf(self, prec):
0.23 /testbed/sympy/core/relational.py(202):     @property
0.23 /testbed/sympy/core/relational.py(203):     def canonical(self):
0.23 /testbed/sympy/core/relational.py(255):     def equals(self, other, failing_expression=False):
0.23 /testbed/sympy/core/relational.py(303):     def _eval_simplify(self, **kwargs):
0.23 /testbed/sympy/core/relational.py(386):     def _eval_trigsimp(self, **opts):
0.23 /testbed/sympy/core/relational.py(390):     def expand(self, **kwargs):
0.23 /testbed/sympy/core/relational.py(394):     def __bool__(self):
0.23 /testbed/sympy/core/relational.py(397):     def _eval_as_set(self):
0.23 /testbed/sympy/core/relational.py(412):     @property
0.23 /testbed/sympy/core/relational.py(413):     def binary_symbols(self):
0.23 /testbed/sympy/core/relational.py(418): Rel = Relational
0.23 /testbed/sympy/core/relational.py(421): class Equality(Relational):
0.23 /testbed/sympy/core/relational.py(421): class Equality(Relational):
0.23 /testbed/sympy/core/relational.py(422):     """An equal relation between two objects.
0.23 /testbed/sympy/core/relational.py(483):     rel_op = '=='
0.23 /testbed/sympy/core/relational.py(485):     __slots__ = ()
0.23 /testbed/sympy/core/relational.py(487):     is_Equality = True
0.23 /testbed/sympy/core/relational.py(489):     def __new__(cls, lhs, rhs=None, **options):
0.23 /testbed/sympy/core/relational.py(511):     @classmethod
0.23 /testbed/sympy/core/relational.py(512):     def _eval_relation(cls, lhs, rhs):
0.23 /testbed/sympy/core/relational.py(515):     def _eval_rewrite_as_Add(self, *args, **kwargs):
0.23 /testbed/sympy/core/relational.py(549):     @property
0.23 /testbed/sympy/core/relational.py(550):     def binary_symbols(self):
0.23 /testbed/sympy/core/relational.py(558):     def _eval_simplify(self, **kwargs):
0.23 /testbed/sympy/core/relational.py(582):     def integrate(self, *args, **kwargs):
0.23 /testbed/sympy/core/relational.py(587):     def as_poly(self, *gens, **kwargs):
0.23 /testbed/sympy/core/relational.py(601): Eq = Equality
0.23 /testbed/sympy/core/relational.py(604): class Unequality(Relational):
0.23 /testbed/sympy/core/relational.py(604): class Unequality(Relational):
0.23 /testbed/sympy/core/relational.py(605):     """An unequal relation between two objects.
0.23 /testbed/sympy/core/relational.py(637):     rel_op = '!='
0.23 /testbed/sympy/core/relational.py(639):     __slots__ = ()
0.23 /testbed/sympy/core/relational.py(641):     def __new__(cls, lhs, rhs, **options):
0.23 /testbed/sympy/core/relational.py(654):     @classmethod
0.23 /testbed/sympy/core/relational.py(655):     def _eval_relation(cls, lhs, rhs):
0.23 /testbed/sympy/core/relational.py(658):     @property
0.23 /testbed/sympy/core/relational.py(659):     def binary_symbols(self):
0.23 /testbed/sympy/core/relational.py(667):     def _eval_simplify(self, **kwargs):
0.23 /testbed/sympy/core/relational.py(676): Ne = Unequality
0.23 /testbed/sympy/core/relational.py(679): class _Inequality(Relational):
0.23 /testbed/sympy/core/relational.py(679): class _Inequality(Relational):
0.23 /testbed/sympy/core/relational.py(680):     """Internal base class for all *Than types.
0.23 /testbed/sympy/core/relational.py(686):     __slots__ = ()
0.23 /testbed/sympy/core/relational.py(688):     def __new__(cls, lhs, rhs, **options):
0.23 /testbed/sympy/core/relational.py(716):     @classmethod
0.23 /testbed/sympy/core/relational.py(717):     def _eval_relation(cls, lhs, rhs, **options):
0.23 /testbed/sympy/core/relational.py(725): class _Greater(_Inequality):
0.23 /testbed/sympy/core/relational.py(725): class _Greater(_Inequality):
0.23 /testbed/sympy/core/relational.py(726):     """Not intended for general use
0.23 /testbed/sympy/core/relational.py(732):     __slots__ = ()
0.23 /testbed/sympy/core/relational.py(734):     @property
0.23 /testbed/sympy/core/relational.py(735):     def gts(self):
0.23 /testbed/sympy/core/relational.py(738):     @property
0.23 /testbed/sympy/core/relational.py(739):     def lts(self):
0.23 /testbed/sympy/core/relational.py(743): class _Less(_Inequality):
0.23 /testbed/sympy/core/relational.py(743): class _Less(_Inequality):
0.23 /testbed/sympy/core/relational.py(744):     """Not intended for general use.
0.23 /testbed/sympy/core/relational.py(750):     __slots__ = ()
0.23 /testbed/sympy/core/relational.py(752):     @property
0.23 /testbed/sympy/core/relational.py(753):     def gts(self):
0.23 /testbed/sympy/core/relational.py(756):     @property
0.23 /testbed/sympy/core/relational.py(757):     def lts(self):
0.23 /testbed/sympy/core/relational.py(761): class GreaterThan(_Greater):
0.23 /testbed/sympy/core/relational.py(761): class GreaterThan(_Greater):
0.23 /testbed/sympy/core/relational.py(762):     """Class representations of inequalities.
0.23 /testbed/sympy/core/relational.py(986):     __slots__ = ()
0.23 /testbed/sympy/core/relational.py(988):     rel_op = '>='
0.23 /testbed/sympy/core/relational.py(990):     @classmethod
0.23 /testbed/sympy/core/relational.py(991):     def _eval_fuzzy_relation(cls, lhs, rhs):
0.23 /testbed/sympy/core/relational.py(995): Ge = GreaterThan
0.23 /testbed/sympy/core/relational.py(998): class LessThan(_Less):
0.23 /testbed/sympy/core/relational.py(998): class LessThan(_Less):
0.23 /testbed/sympy/core/relational.py(999):     __doc__ = GreaterThan.__doc__
0.23 /testbed/sympy/core/relational.py(1000):     __slots__ = ()
0.23 /testbed/sympy/core/relational.py(1002):     rel_op = '<='
0.23 /testbed/sympy/core/relational.py(1004):     @classmethod
0.23 /testbed/sympy/core/relational.py(1005):     def _eval_fuzzy_relation(cls, lhs, rhs):
0.23 /testbed/sympy/core/relational.py(1009): Le = LessThan
0.23 /testbed/sympy/core/relational.py(1012): class StrictGreaterThan(_Greater):
0.23 /testbed/sympy/core/relational.py(1012): class StrictGreaterThan(_Greater):
0.23 /testbed/sympy/core/relational.py(1013):     __doc__ = GreaterThan.__doc__
0.23 /testbed/sympy/core/relational.py(1014):     __slots__ = ()
0.23 /testbed/sympy/core/relational.py(1016):     rel_op = '>'
0.23 /testbed/sympy/core/relational.py(1018):     @classmethod
0.23 /testbed/sympy/core/relational.py(1019):     def _eval_fuzzy_relation(cls, lhs, rhs):
0.23 /testbed/sympy/core/relational.py(1023): Gt = StrictGreaterThan
0.23 /testbed/sympy/core/relational.py(1026): class StrictLessThan(_Less):
0.23 /testbed/sympy/core/relational.py(1026): class StrictLessThan(_Less):
0.23 /testbed/sympy/core/relational.py(1027):     __doc__ = GreaterThan.__doc__
0.23 /testbed/sympy/core/relational.py(1028):     __slots__ = ()
0.23 /testbed/sympy/core/relational.py(1030):     rel_op = '<'
0.23 /testbed/sympy/core/relational.py(1032):     @classmethod
0.23 /testbed/sympy/core/relational.py(1033):     def _eval_fuzzy_relation(cls, lhs, rhs):
0.23 /testbed/sympy/core/relational.py(1037): Lt = StrictLessThan
0.23 /testbed/sympy/core/relational.py(1043):     None: Equality,
0.23 /testbed/sympy/core/relational.py(1044):     '==': Equality,
0.23 /testbed/sympy/core/relational.py(1045):     'eq': Equality,
0.23 /testbed/sympy/core/relational.py(1046):     '!=': Unequality,
0.23 /testbed/sympy/core/relational.py(1047):     '<>': Unequality,
0.23 /testbed/sympy/core/relational.py(1048):     'ne': Unequality,
0.23 /testbed/sympy/core/relational.py(1049):     '>=': GreaterThan,
0.23 /testbed/sympy/core/relational.py(1050):     'ge': GreaterThan,
0.23 /testbed/sympy/core/relational.py(1051):     '<=': LessThan,
0.23 /testbed/sympy/core/relational.py(1052):     'le': LessThan,
0.23 /testbed/sympy/core/relational.py(1053):     '>': StrictGreaterThan,
0.23 /testbed/sympy/core/relational.py(1054):     'gt': StrictGreaterThan,
0.23 /testbed/sympy/core/relational.py(1055):     '<': StrictLessThan,
0.23 /testbed/sympy/core/relational.py(1056):     'lt': StrictLessThan,
0.23 /testbed/sympy/core/relational.py(1042): Relational.ValidRelationOperator = {
0.23 /testbed/sympy/core/relational.py(1060): def _n2(a, b):
0.23 /testbed/sympy/core/relational.py(1072): @dispatch(Expr, Expr)
0.23 /testbed/sympy/core/relational.py(1073): def _eval_is_ge(lhs, rhs):
0.23 /testbed/sympy/core/relational.py(1077): @dispatch(Basic, Basic)
0.23 /testbed/sympy/core/relational.py(1078): def _eval_is_eq(lhs, rhs):
0.23 /testbed/sympy/core/relational.py(1082): @dispatch(Tuple, Expr) # type: ignore
0.23 /testbed/sympy/core/relational.py(1083): def _eval_is_eq(lhs, rhs):  # noqa:F811
0.23 /testbed/sympy/core/relational.py(1087): @dispatch(Tuple, AppliedUndef) # type: ignore
0.23 /testbed/sympy/core/relational.py(1088): def _eval_is_eq(lhs, rhs):  # noqa:F811
0.23 /testbed/sympy/core/relational.py(1092): @dispatch(Tuple, Symbol) # type: ignore
0.23 /testbed/sympy/core/relational.py(1093): def _eval_is_eq(lhs, rhs):  # noqa:F811
0.23 /testbed/sympy/core/relational.py(1097): @dispatch(Tuple, Tuple) # type: ignore
0.23 /testbed/sympy/core/relational.py(1098): def _eval_is_eq(lhs, rhs):  # noqa:F811
0.23 /testbed/sympy/core/relational.py(1105): def is_lt(lhs, rhs):
0.23 /testbed/sympy/core/relational.py(1113): def is_gt(lhs, rhs):
0.23 /testbed/sympy/core/relational.py(1121): def is_le(lhs, rhs):
0.23 /testbed/sympy/core/relational.py(1129): def is_ge(lhs, rhs):
0.23 /testbed/sympy/core/relational.py(1239): def is_neq(lhs, rhs):
0.23 /testbed/sympy/core/relational.py(1247): def is_eq(lhs, rhs):
0.26 /testbed/sympy/sets/handlers/comparison.py(1): from sympy.core.relational import Eq, is_eq
0.26 /testbed/sympy/sets/handlers/comparison.py(2): from sympy.core.basic import Basic
0.26 /testbed/sympy/sets/handlers/comparison.py(3): from sympy.core.logic import fuzzy_and, fuzzy_bool
0.26 /testbed/sympy/sets/handlers/comparison.py(4): from sympy.logic.boolalg import And
0.26 /testbed/sympy/sets/handlers/comparison.py(5): from sympy.multipledispatch import dispatch
0.26 /testbed/sympy/sets/handlers/comparison.py(6): from sympy.sets.sets import tfn, ProductSet, Interval, FiniteSet, Set
0.26 /testbed/sympy/sets/handlers/comparison.py(9): @dispatch(Interval, FiniteSet) # type:ignore
0.26 /testbed/sympy/sets/handlers/comparison.py(10): def _eval_is_eq(lhs, rhs): # noqa: F811
0.26 /testbed/sympy/sets/handlers/comparison.py(14): @dispatch(FiniteSet, Interval) # type:ignore
0.26 /testbed/sympy/sets/handlers/comparison.py(15): def _eval_is_eq(lhs, rhs): # noqa: F811
0.26 /testbed/sympy/sets/handlers/comparison.py(19): @dispatch(Interval, Interval) # type:ignore
0.26 /testbed/sympy/sets/handlers/comparison.py(20): def _eval_is_eq(lhs, rhs): # noqa: F811
0.26 /testbed/sympy/sets/handlers/comparison.py(27): @dispatch(FiniteSet, Interval) # type:ignore
0.26 /testbed/sympy/sets/handlers/comparison.py(28): def _eval_is_eq(lhs, rhs): # noqa: F811
0.26 /testbed/sympy/sets/handlers/comparison.py(32): @dispatch(FiniteSet, FiniteSet) # type:ignore
0.26 /testbed/sympy/sets/handlers/comparison.py(33): def _eval_is_eq(lhs, rhs): # noqa: F811
0.26 /testbed/sympy/sets/handlers/comparison.py(43): @dispatch(ProductSet, ProductSet) # type:ignore
0.26 /testbed/sympy/sets/handlers/comparison.py(44): def _eval_is_eq(lhs, rhs): # noqa: F811
0.26 /testbed/sympy/sets/handlers/comparison.py(52): @dispatch(Set, Basic) # type:ignore
0.26 /testbed/sympy/sets/handlers/comparison.py(53): def _eval_is_eq(lhs, rhs): # noqa: F811
0.26 /testbed/sympy/sets/handlers/comparison.py(57): @dispatch(Set, Set) # type:ignore
0.26 /testbed/sympy/sets/handlers/comparison.py(58): def _eval_is_eq(lhs, rhs): # noqa: F811
0.26 /testbed/sympy/core/relational.py(1110):     return fuzzy_not(is_ge(lhs, rhs))
0.26 /testbed/sympy/core/relational.py(1214):     if not (isinstance(lhs, Expr) and isinstance(rhs, Expr)):
0.26 /testbed/sympy/core/relational.py(1217):     retval = _eval_is_ge(lhs, rhs)
0.26 /testbed/sympy/core/relational.py(1074):     return None
0.26 /testbed/sympy/core/relational.py(1219):     if retval is not None:
0.26 /testbed/sympy/core/relational.py(1222):         n2 = _n2(lhs, rhs)
0.26 /testbed/sympy/core/relational.py(1066):     if a.is_comparable and b.is_comparable:
0.26 /testbed/sympy/core/relational.py(1067):         dif = (a - b).evalf(2)
0.26 /testbed/sympy/core/relational.py(1068):         if dif.is_comparable:
0.26 /testbed/sympy/core/relational.py(1069):             return dif
0.26 /testbed/sympy/core/relational.py(1223):         if n2 is not None:
0.26 /testbed/sympy/core/relational.py(1226):             if n2 in (S.Infinity, S.NegativeInfinity):
0.26 /testbed/sympy/core/relational.py(1227):                 n2 = float(n2)
0.26 /testbed/sympy/core/relational.py(1228):             return _sympify(n2 >= 0)
============================= test process starts ==============================
executable:         /opt/miniconda3/envs/testbed/bin/python3  (3.9.23-final-0) [CPython]
architecture:       64-bit
cache:              no
ground types:       python 
numpy:              None
random seed:        36209935
hash randomization: on (PYTHONHASHSEED=3491451611)

sympy/polys/tests/test_coverup_sympy__sympy-20438.py[1] 
test_is_subset_bug 0.45 /testbed/sympy/sets/handlers/issubset.py(1): from sympy import S, Symbol
0.45 /testbed/sympy/sets/handlers/issubset.py(2): from sympy.core.logic import fuzzy_and, fuzzy_bool, fuzzy_not, fuzzy_or
0.45 /testbed/sympy/sets/handlers/issubset.py(3): from sympy.core.relational import Eq
0.45 /testbed/sympy/sets/handlers/issubset.py(4): from sympy.sets.sets import FiniteSet, Interval, Set, Union
0.45 /testbed/sympy/sets/handlers/issubset.py(5): from sympy.sets.fancysets import Complexes, Reals, Range, Rationals
0.45 /testbed/sympy/sets/handlers/issubset.py(6): from sympy.multipledispatch import dispatch
0.45 /testbed/sympy/sets/handlers/issubset.py(9): _inf_sets = [S.Naturals, S.Naturals0, S.Integers, S.Rationals, S.Reals, S.Complexes]
0.45 /testbed/sympy/sets/handlers/issubset.py(11): @dispatch(Set, Set)  # type: ignore # noqa:F811
0.45 /testbed/sympy/sets/handlers/issubset.py(12): def is_subset_sets(a, b): # noqa:F811
0.45 /testbed/sympy/sets/handlers/issubset.py(15): @dispatch(Interval, Interval)  # type: ignore # noqa:F811
0.45 /testbed/sympy/sets/handlers/issubset.py(16): def is_subset_sets(a, b): # noqa:F811
0.45 /testbed/sympy/sets/handlers/issubset.py(27): @dispatch(Interval, FiniteSet)  # type: ignore # noqa:F811
0.45 /testbed/sympy/sets/handlers/issubset.py(28): def is_subset_sets(a_interval, b_fs): # noqa:F811
0.45 /testbed/sympy/sets/handlers/issubset.py(34): @dispatch(Interval, Union)  # type: ignore # noqa:F811
0.45 /testbed/sympy/sets/handlers/issubset.py(35): def is_subset_sets(a_interval, b_u): # noqa:F811
0.45 /testbed/sympy/sets/handlers/issubset.py(50): @dispatch(Range, Range)  # type: ignore # noqa:F811
0.45 /testbed/sympy/sets/handlers/issubset.py(51): def is_subset_sets(a, b): # noqa:F811
0.45 /testbed/sympy/sets/handlers/issubset.py(56): @dispatch(Range, Interval)  # type: ignore # noqa:F811
0.45 /testbed/sympy/sets/handlers/issubset.py(57): def is_subset_sets(a_range, b_interval): # noqa:F811
0.45 /testbed/sympy/sets/handlers/issubset.py(69): @dispatch(Range, FiniteSet)  # type: ignore # noqa:F811
0.45 /testbed/sympy/sets/handlers/issubset.py(70): def is_subset_sets(a_range, b_finiteset): # noqa:F811
0.45 /testbed/sympy/sets/handlers/issubset.py(103): @dispatch(Interval, Range)  # type: ignore # noqa:F811
0.45 /testbed/sympy/sets/handlers/issubset.py(104): def is_subset_sets(a_interval, b_range): # noqa:F811
0.45 /testbed/sympy/sets/handlers/issubset.py(108): @dispatch(Interval, Rationals)  # type: ignore # noqa:F811
0.45 /testbed/sympy/sets/handlers/issubset.py(109): def is_subset_sets(a_interval, b_rationals): # noqa:F811
0.45 /testbed/sympy/sets/handlers/issubset.py(113): @dispatch(Range, Complexes)  # type: ignore # noqa:F811
0.45 /testbed/sympy/sets/handlers/issubset.py(114): def is_subset_sets(a, b): # noqa:F811
0.45 /testbed/sympy/sets/handlers/issubset.py(117): @dispatch(Complexes, Interval)  # type: ignore # noqa:F811
0.45 /testbed/sympy/sets/handlers/issubset.py(118): def is_subset_sets(a, b): # noqa:F811
0.45 /testbed/sympy/sets/handlers/issubset.py(121): @dispatch(Complexes, Range)  # type: ignore # noqa:F811
0.45 /testbed/sympy/sets/handlers/issubset.py(122): def is_subset_sets(a, b): # noqa:F811
0.46 /testbed/sympy/sets/handlers/issubset.py(125): @dispatch(Complexes, Rationals)  # type: ignore # noqa:F811
0.46 /testbed/sympy/sets/handlers/issubset.py(126): def is_subset_sets(a, b): # noqa:F811
0.46 /testbed/sympy/sets/handlers/issubset.py(129): @dispatch(Rationals, Reals)  # type: ignore # noqa:F811
0.46 /testbed/sympy/sets/handlers/issubset.py(130): def is_subset_sets(a, b): # noqa:F811
0.46 /testbed/sympy/sets/handlers/issubset.py(133): @dispatch(Rationals, Range)  # type: ignore # noqa:F811
0.46 /testbed/sympy/sets/handlers/issubset.py(134): def is_subset_sets(a, b): # noqa:F811
0.46 /testbed/sympy/sets/handlers/issubset.py(13):     return None
F                                                      [FAIL]


________________________________________________________________________________
___ sympy/polys/tests/test_coverup_sympy__sympy-20438.py:test_is_subset_bug ____
Traceback (most recent call last):
  File "/testbed/sympy/polys/tests/test_coverup_sympy__sympy-20438.py", line 10, in test_is_subset_bug
    assert b.is_subset(c) is True  # This should be True when the bug is fixed
AssertionError

============= tests finished: 0 passed, 1 failed, in 0.02 seconds ==============
DO *NOT* COMMIT!
/testbed/sympy/core/relational.py(998): class LessThan(_Less):
0.34 /testbed/sympy/core/relational.py(999):     __doc__ = GreaterThan.__doc__
0.34 /testbed/sympy/core/relational.py(1000):     __slots__ = ()
0.34 /testbed/sympy/core/relational.py(1002):     rel_op = '<='
0.34 /testbed/sympy/core/relational.py(1004):     @classmethod
0.34 /testbed/sympy/core/relational.py(1005):     def _eval_fuzzy_relation(cls, lhs, rhs):
0.34 /testbed/sympy/core/relational.py(1009): Le = LessThan
0.34 /testbed/sympy/core/relational.py(1012): class StrictGreaterThan(_Greater):
0.34 /testbed/sympy/core/relational.py(1012): class StrictGreaterThan(_Greater):
0.34 /testbed/sympy/core/relational.py(1013):     __doc__ = GreaterThan.__doc__
0.34 /testbed/sympy/core/relational.py(1014):     __slots__ = ()
0.34 /testbed/sympy/core/relational.py(1016):     rel_op = '>'
0.34 /testbed/sympy/core/relational.py(1018):     @classmethod
0.34 /testbed/sympy/core/relational.py(1019):     def _eval_fuzzy_relation(cls, lhs, rhs):
0.34 /testbed/sympy/core/relational.py(1023): Gt = StrictGreaterThan
0.34 /testbed/sympy/core/relational.py(1026): class StrictLessThan(_Less):
0.34 /testbed/sympy/core/relational.py(1026): class StrictLessThan(_Less):
0.34 /testbed/sympy/core/relational.py(1027):     __doc__ = GreaterThan.__doc__
0.34 /testbed/sympy/core/relational.py(1028):     __slots__ = ()
0.34 /testbed/sympy/core/relational.py(1030):     rel_op = '<'
0.34 /testbed/sympy/core/relational.py(1032):     @classmethod
0.34 /testbed/sympy/core/relational.py(1033):     def _eval_fuzzy_relation(cls, lhs, rhs):
0.34 /testbed/sympy/core/relational.py(1037): Lt = StrictLessThan
0.34 /testbed/sympy/core/relational.py(1043):     None: Equality,
0.34 /testbed/sympy/core/relational.py(1044):     '==': Equality,
0.34 /testbed/sympy/core/relational.py(1045):     'eq': Equality,
0.34 /testbed/sympy/core/relational.py(1046):     '!=': Unequality,
0.34 /testbed/sympy/core/relational.py(1047):     '<>': Unequality,
0.34 /testbed/sympy/core/relational.py(1048):     'ne': Unequality,
0.34 /testbed/sympy/core/relational.py(1049):     '>=': GreaterThan,
0.34 /testbed/sympy/core/relational.py(1050):     'ge': GreaterThan,
0.34 /testbed/sympy/core/relational.py(1051):     '<=': LessThan,
0.34 /testbed/sympy/core/relational.py(1052):     'le': LessThan,
0.34 /testbed/sympy/core/relational.py(1053):     '>': StrictGreaterThan,
0.34 /testbed/sympy/core/relational.py(1054):     'gt': StrictGreaterThan,
0.34 /testbed/sympy/core/relational.py(1055):     '<': StrictLessThan,
0.34 /testbed/sympy/core/relational.py(1056):     'lt': StrictLessThan,
0.34 /testbed/sympy/core/relational.py(1042): Relational.ValidRelationOperator = {
0.34 /testbed/sympy/core/relational.py(1060): def _n2(a, b):
0.34 /testbed/sympy/core/relational.py(1072): @dispatch(Expr, Expr)
0.34 /testbed/sympy/core/relational.py(1073): def _eval_is_ge(lhs, rhs):
0.34 /testbed/sympy/core/relational.py(1077): @dispatch(Basic, Basic)
0.34 /testbed/sympy/core/relational.py(1078): def _eval_is_eq(lhs, rhs):
0.34 /testbed/sympy/core/relational.py(1082): @dispatch(Tuple, Expr) # type: ignore
0.34 /testbed/sympy/core/relational.py(1083): def _eval_is_eq(lhs, rhs):  # noqa:F811
0.34 /testbed/sympy/core/relational.py(1087): @dispatch(Tuple, AppliedUndef) # type: ignore
0.34 /testbed/sympy/core/relational.py(1088): def _eval_is_eq(lhs, rhs):  # noqa:F811
0.34 /testbed/sympy/core/relational.py(1092): @dispatch(Tuple, Symbol) # type: ignore
0.34 /testbed/sympy/core/relational.py(1093): def _eval_is_eq(lhs, rhs):  # noqa:F811
0.34 /testbed/sympy/core/relational.py(1097): @dispatch(Tuple, Tuple) # type: ignore
0.34 /testbed/sympy/core/relational.py(1098): def _eval_is_eq(lhs, rhs):  # noqa:F811
0.34 /testbed/sympy/core/relational.py(1105): def is_lt(lhs, rhs):
0.34 /testbed/sympy/core/relational.py(1113): def is_gt(lhs, rhs):
0.34 /testbed/sympy/core/relational.py(1121): def is_le(lhs, rhs):
0.34 /testbed/sympy/core/relational.py(1129): def is_ge(lhs, rhs):
0.34 /testbed/sympy/core/relational.py(1239): def is_neq(lhs, rhs):
0.34 /testbed/sympy/core/relational.py(1247): def is_eq(lhs, rhs):
0.46 /testbed/sympy/sets/handlers/comparison.py(1): from sympy.core.relational import Eq, is_eq
0.46 /testbed/sympy/sets/handlers/comparison.py(2): from sympy.core.basic import Basic
0.46 /testbed/sympy/sets/handlers/comparison.py(3): from sympy.core.logic import fuzzy_and, fuzzy_bool
0.46 /testbed/sympy/sets/handlers/comparison.py(4): from sympy.logic.boolalg import And
0.46 /testbed/sympy/sets/handlers/comparison.py(5): from sympy.multipledispatch import dispatch
0.46 /testbed/sympy/sets/handlers/comparison.py(6): from sympy.sets.sets import tfn, ProductSet, Interval, FiniteSet, Set
0.46 /testbed/sympy/sets/handlers/comparison.py(9): @dispatch(Interval, FiniteSet) # type:ignore
0.46 /testbed/sympy/sets/handlers/comparison.py(10): def _eval_is_eq(lhs, rhs): # noqa: F811
0.46 /testbed/sympy/sets/handlers/comparison.py(14): @dispatch(FiniteSet, Interval) # type:ignore
0.46 /testbed/sympy/sets/handlers/comparison.py(15): def _eval_is_eq(lhs, rhs): # noqa: F811
0.46 /testbed/sympy/sets/handlers/comparison.py(19): @dispatch(Interval, Interval) # type:ignore
0.46 /testbed/sympy/sets/handlers/comparison.py(20): def _eval_is_eq(lhs, rhs): # noqa: F811
0.46 /testbed/sympy/sets/handlers/comparison.py(27): @dispatch(FiniteSet, Interval) # type:ignore
0.46 /testbed/sympy/sets/handlers/comparison.py(28): def _eval_is_eq(lhs, rhs): # noqa: F811
0.46 /testbed/sympy/sets/handlers/comparison.py(32): @dispatch(FiniteSet, FiniteSet) # type:ignore
0.46 /testbed/sympy/sets/handlers/comparison.py(33): def _eval_is_eq(lhs, rhs): # noqa: F811
0.46 /testbed/sympy/sets/handlers/comparison.py(43): @dispatch(ProductSet, ProductSet) # type:ignore
0.46 /testbed/sympy/sets/handlers/comparison.py(44): def _eval_is_eq(lhs, rhs): # noqa: F811
0.46 /testbed/sympy/sets/handlers/comparison.py(52): @dispatch(Set, Basic) # type:ignore
0.46 /testbed/sympy/sets/handlers/comparison.py(53): def _eval_is_eq(lhs, rhs): # noqa: F811
0.46 /testbed/sympy/sets/handlers/comparison.py(57): @dispatch(Set, Set) # type:ignore
0.46 /testbed/sympy/sets/handlers/comparison.py(58): def _eval_is_eq(lhs, rhs): # noqa: F811
0.46 /testbed/sympy/core/relational.py(1110):     return fuzzy_not(is_ge(lhs, rhs))
0.46 /testbed/sympy/core/relational.py(1214):     if not (isinstance(lhs, Expr) and isinstance(rhs, Expr)):
0.46 /testbed/sympy/core/relational.py(1217):     retval = _eval_is_ge(lhs, rhs)
0.46 /testbed/sympy/core/relational.py(1074):     return None
0.46 /testbed/sympy/core/relational.py(1219):     if retval is not None:
0.46 /testbed/sympy/core/relational.py(1222):         n2 = _n2(lhs, rhs)
0.46 /testbed/sympy/core/relational.py(1066):     if a.is_comparable and b.is_comparable:
0.46 /testbed/sympy/core/relational.py(1067):         dif = (a - b).evalf(2)
0.46 /testbed/sympy/core/relational.py(1068):         if dif.is_comparable:
0.46 /testbed/sympy/core/relational.py(1069):             return dif
0.46 /testbed/sympy/core/relational.py(1223):         if n2 is not None:
0.46 /testbed/sympy/core/relational.py(1226):             if n2 in (S.Infinity, S.NegativeInfinity):
0.46 /testbed/sympy/core/relational.py(1227):                 n2 = float(n2)
0.46 /testbed/sympy/core/relational.py(1228):             return _sympify(n2 >= 0)
+ cat coverage.cover
{"/testbed/sympy/core/relational.py": {"1": 1, "3": 1, "4": 1, "5": 1, "6": 1, "7": 1, "8": 1, "9": 1, "10": 1, "11": 1, "12": 1, "14": 1, "20": 1, "21": 1, "22": 1, "23": 1, "26": 1, "36": 1, "44": 2, "418": 1, "421": 2, "601": 1, "604": 2, "676": 1, "679": 2, "725": 2, "743": 2, "761": 2, "995": 1, "998": 2, "1009": 1, "1012": 2, "1023": 1, "1026": 2, "1037": 1, "1043": 1, "1044": 1, "1045": 1, "1046": 1, "1047": 1, "1048": 1, "1049": 1, "1050": 1, "1051": 1, "1052": 1, "1053": 1, "1054": 1, "1055": 1, "1056": 1, "1042": 1, "1060": 1, "1072": 1, "1073": 1, "1077": 1, "1078": 1, "1082": 1, "1083": 1, "1087": 1, "1088": 1, "1092": 1, "1093": 1, "1097": 1, "1098": 1, "1105": 1, "1113": 1, "1121": 1, "1129": 1, "1239": 1, "1247": 1, "27": 0, "28": 0, "38": 0, "39": 0, "70": 1, "72": 1, "74": 1, "79": 1, "108": 1, "109": 1, "113": 1, "114": 1, "118": 1, "119": 1, "140": 1, "141": 1, "165": 1, "166": 1, "199": 1, "202": 1, "203": 1, "255": 1, "303": 1, "386": 1, "390": 1, "394": 1, "397": 1, "412": 1, "413": 1, "81": 0, "82": 0, "89": 0, "90": 0, "91": 0, "93": 0, "98": 0, "99": 0, "100": 0, "106": 0, "111": 0, "116": 0, "136": 0, "137": 0, "138": 0, "158": 0, "159": 0, "160": 0, "161": 0, "163": 0, "192": 0, "197": 0, "200": 0, "224": 0, "225": 0, "226": 0, "227": 0, "228": 0, "229": 0, "230": 0, "231": 0, "232": 0, "234": 0, "235": 0, "237": 0, "238": 0, "241": 0, "242": 0, "243": 0, "249": 0, "250": 0, "251": 0, "253": 0, "260": 0, "261": 0, "262": 0, "263": 0, "264": 0, "265": 0, "266": 0, "267": 0, "269": 0, "270": 0, "271": 0, "272": 0, "273": 0, "274": 0, "275": 0, "276": 0, "277": 0, "278": 0, "279": 0, "280": 0, "281": 0, "282": 0, "283": 0, "284": 0, "285": 0, "287": 0, "288": 0, "289": 0, "290": 0, "291": 0, "292": 0, "293": 0, "294": 0, "295": 0, "296": 0, "297": 0, "298": 0, "299": 0, "300": 0, "301": 0, "268": 0, "304": 0, "305": 0, "306": 0, "307": 0, "308": 0, "311": 0, "312": 0, "313": 0, "314": 0, "315": 0, "316": 0, "317": 0, "318": 0, "321": 0, "322": 0, "323": 0, "324": 0, "325": 0, "326": 0, "327": 0, "328": 0, "329": 0, "332": 0, "334": 0, "336": 0, "337": 0, "339": 0, "340": 0, "341": 0, "342": 0, "343": 0, "344": 0, "345": 0, "346": 0, "347": 0, "348": 0, "349": 0, "350": 0, "351": 0, "352": 0, "353": 0, "354": 0, "355": 0, "356": 0, "357": 0, "358": 0, "359": 0, "360": 0, "361": 0, "362": 0, "363": 0, "365": 0, "366": 0, "369": 0, "370": 0, "371": 0, "372": 0, "375": 0, "376": 0, "377": 0, "379": 0, "380": 0, "381": 0, "382": 0, "384": 0, "387": 0, "388": 0, "391": 0, "392": 0, "395": 0, "399": 0, "400": 0, "401": 0, "402": 0, "403": 0, "404": 0, "405": 0, "406": 0, "409": 0, "410": 0, "415": 0, "483": 1, "485": 1, "487": 1, "489": 1, "511": 1, "512": 1, "515": 1, "549": 1, "550": 1, "558": 1, "582": 1, "587": 1, "491": 0, "492": 0, "493": 0, "494": 0, "495": 0, "496": 0, "498": 0, "499": 0, "500": 0, "501": 0, "502": 0, "503": 0, "504": 0, "505": 0, "507": 0, "509": 0, "513": 0, "536": 0, "537": 0, "538": 0, "539": 0, "541": 0, "542": 0, "543": 0, "545": 0, "547": 0, "551": 0, "552": 0, "553": 0, "554": 0, "555": 0, "556": 0, "559": 0, "560": 0, "562": 0, "563": 0, "564": 0, "565": 0, "566": 0, "567": 0, "568": 0, "569": 0, "570": 0, "571": 0, "572": 0, "574": 0, "575": 0, "576": 0, "577": 0, "578": 0, "579": 0, "580": 0, "584": 0, "585": 0, "598": 0, "637": 1, "639": 1, "641": 1, "654": 1, "655": 1, "658": 1, "659": 1, "667": 1, "642": 0, "643": 0, "644": 0, "645": 0, "646": 0, "647": 0, "648": 0, "650": 0, "652": 0, "656": 0, "660": 0, "661": 0, "662": 0, "663": 0, "664": 0, "665": 0, "669": 0, "670": 0, "672": 0, "673": 0, "686": 1, "688": 1, "716": 1, "717": 1, "690": 0, "691": 0, "692": 0, "693": 0, "694": 0, "696": 0, "697": 0, "698": 0, "699": 0, "700": 0, "701": 0, "702": 0, "711": 0, "714": 0, "718": 0, "719": 0, "720": 0, "722": 0, "732": 1, "734": 1, "735": 1, "738": 1, "739": 1, "736": 0, "740": 0, "750": 1, "752": 1, "753": 1, "756": 1, "757": 1, "754": 0, "758": 0, "986": 1, "988": 1, "990": 1, "991": 1, "992": 0, "999": 1, "1000": 1, "1002": 1, "1004": 1, "1005": 1, "1006": 0, "1013": 1, "1014": 1, "1016": 1, "1018": 1, "1019": 1, "1020": 0, "1027": 1, "1028": 1, "1030": 1, "1032": 1, "1033": 1, "1034": 0, "1066": 1, "1067": 1, "1068": 1, "1069": 1, "1074": 1, "1079": 0, "1084": 0, "1089": 0, "1094": 0, "1099": 0, "1100": 0, "1102": 0, "1110": 1, "1118": 0, "1126": 0, "1214": 1, "1215": 0, "1217": 1, "1219": 1, "1220": 0, "1222": 1, "1223": 1, "1226": 1, "1227": 1, "1228": 1, "1229": 0, "1230": 0, "1231": 0, "1232": 0, "1233": 0, "1234": 0, "1235": 0, "1236": 0, "1244": 0, "1329": 0, "1330": 0, "1331": 0, "1332": 0, "1337": 0, "1338": 0, "1339": 0, "1340": 0, "1341": 0, "1342": 0, "1344": 0, "1345": 0, "1346": 0, "1348": 0, "1349": 0, "1350": 0, "1351": 0, "1355": 0, "1356": 0, "1357": 0, "1358": 0, "1359": 0, "1360": 0, "1361": 0, "1362": 0, "1364": 0, "1365": 0, "1366": 0, "1367": 0, "1368": 0, "1369": 0, "1370": 0, "1373": 0, "1375": 0, "1381": 0, "1382": 0, "1383": 0, "1384": 0, "1385": 0, "1386": 0, "1387": 0, "1390": 0, "1391": 0, "1393": 0, "1394": 0, "1396": 0, "1398": 0, "1399": 0, "1400": 0, "1401": 0, "1402": 0, "1403": 0, "1404": 0, "1406": 0, "1407": 0, "1408": 0, "1411": 0, "1412": 0, "1413": 0, "1414": 0, "1415": 0, "1416": 0, "1417": 0, "1418": 0, "1419": 0, "1420": 0, "1424": 0, "1425": 0, "1426": 0, "1427": 0, "1428": 0, "1429": 0, "1430": 0, "1432": 0, "1433": 0, "1434": 0, "1376": 0, "1379": 0, "1377": 0, "1378": 0}}
{"/testbed/sympy/sets/handlers/comparison.py": {"1": 1, "2": 1, "3": 1, "4": 1, "5": 1, "6": 1, "9": 1, "10": 1, "14": 1, "15": 1, "19": 1, "20": 1, "27": 1, "28": 1, "32": 1, "33": 1, "43": 1, "44": 1, "52": 1, "53": 1, "57": 1, "58": 1, "11": 0, "16": 0, "21": 0, "22": 0, "23": 0, "24": 0, "29": 0, "34": 0, "40": 0, "35": 0, "36": 0, "37": 0, "38": 0, "45": 0, "46": 0, "48": 0, "49": 0, "54": 0, "59": 0}}
{"/testbed/sympy/sets/handlers/issubset.py": {"1": 1, "2": 1, "3": 1, "4": 1, "5": 1, "6": 1, "9": 1, "11": 1, "12": 1, "15": 1, "16": 1, "27": 1, "28": 1, "34": 1, "35": 1, "50": 1, "51": 1, "56": 1, "57": 1, "69": 1, "70": 1, "103": 1, "104": 1, "108": 1, "109": 1, "113": 1, "114": 1, "117": 1, "118": 1, "121": 1, "122": 1, "125": 1, "126": 1, "129": 1, "130": 1, "133": 1, "134": 1, "13": 1, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "31": 0, "32": 0, "36": 0, "37": 0, "38": 0, "39": 0, "40": 0, "41": 0, "42": 0, "43": 0, "47": 0, "48": 0, "44": 0, "45": 0, "52": 0, "53": 0, "54": 0, "58": 0, "59": 0, "60": 0, "62": 0, "63": 0, "64": 0, "66": 0, "67": 0, "71": 0, "72": 0, "73": 0, "75": 0, "76": 0, "77": 0, "78": 0, "79": 0, "83": 0, "84": 0, "88": 0, "89": 0, "90": 0, "91": 0, "92": 0, "93": 0, "95": 0, "96": 0, "97": 0, "98": 0, "99": 0, "100": 0, "101": 0, "105": 0, "106": 0, "110": 0, "111": 0, "115": 0, "119": 0, "123": 0, "127": 0, "131": 0, "135": 0}}
{"/testbed/sympy/core/relational.py": {"1": 1, "3": 1, "4": 1, "5": 1, "6": 1, "7": 1, "8": 1, "9": 1, "10": 1, "11": 1, "12": 1, "14": 1, "20": 1, "21": 1, "22": 1, "23": 1, "26": 1, "36": 1, "44": 2, "418": 1, "421": 2, "601": 1, "604": 2, "676": 1, "679": 2, "725": 2, "743": 2, "761": 2, "995": 1, "998": 2, "1009": 1, "1012": 2, "1023": 1, "1026": 2, "1037": 1, "1043": 1, "1044": 1, "1045": 1, "1046": 1, "1047": 1, "1048": 1, "1049": 1, "1050": 1, "1051": 1, "1052": 1, "1053": 1, "1054": 1, "1055": 1, "1056": 1, "1042": 1, "1060": 1, "1072": 1, "1073": 1, "1077": 1, "1078": 1, "1082": 1, "1083": 1, "1087": 1, "1088": 1, "1092": 1, "1093": 1, "1097": 1, "1098": 1, "1105": 1, "1113": 1, "1121": 1, "1129": 1, "1239": 1, "1247": 1, "27": 0, "28": 0, "38": 0, "39": 0, "70": 1, "72": 1, "74": 1, "79": 1, "108": 1, "109": 1, "113": 1, "114": 1, "118": 1, "119": 1, "140": 1, "141": 1, "165": 1, "166": 1, "199": 1, "202": 1, "203": 1, "255": 1, "303": 1, "386": 1, "390": 1, "394": 1, "397": 1, "412": 1, "413": 1, "81": 0, "82": 0, "89": 0, "90": 0, "91": 0, "93": 0, "98": 0, "99": 0, "100": 0, "106": 0, "111": 0, "116": 0, "136": 0, "137": 0, "138": 0, "158": 0, "159": 0, "160": 0, "161": 0, "163": 0, "192": 0, "197": 0, "200": 0, "224": 0, "225": 0, "226": 0, "227": 0, "228": 0, "229": 0, "230": 0, "231": 0, "232": 0, "234": 0, "235": 0, "237": 0, "238": 0, "241": 0, "242": 0, "243": 0, "249": 0, "250": 0, "251": 0, "253": 0, "260": 0, "261": 0, "262": 0, "263": 0, "264": 0, "265": 0, "266": 0, "267": 0, "269": 0, "270": 0, "271": 0, "272": 0, "273": 0, "274": 0, "275": 0, "276": 0, "277": 0, "278": 0, "279": 0, "280": 0, "281": 0, "282": 0, "283": 0, "284": 0, "285": 0, "287": 0, "288": 0, "289": 0, "290": 0, "291": 0, "292": 0, "293": 0, "294": 0, "295": 0, "296": 0, "297": 0, "298": 0, "299": 0, "300": 0, "301": 0, "268": 0, "304": 0, "305": 0, "306": 0, "307": 0, "308": 0, "311": 0, "312": 0, "313": 0, "314": 0, "315": 0, "316": 0, "317": 0, "318": 0, "321": 0, "322": 0, "323": 0, "324": 0, "325": 0, "326": 0, "327": 0, "328": 0, "329": 0, "332": 0, "334": 0, "336": 0, "337": 0, "339": 0, "340": 0, "341": 0, "342": 0, "343": 0, "344": 0, "345": 0, "346": 0, "347": 0, "348": 0, "349": 0, "350": 0, "351": 0, "352": 0, "353": 0, "354": 0, "355": 0, "356": 0, "357": 0, "358": 0, "359": 0, "360": 0, "361": 0, "362": 0, "363": 0, "365": 0, "366": 0, "369": 0, "370": 0, "371": 0, "372": 0, "375": 0, "376": 0, "377": 0, "379": 0, "380": 0, "381": 0, "382": 0, "384": 0, "387": 0, "388": 0, "391": 0, "392": 0, "395": 0, "399": 0, "400": 0, "401": 0, "402": 0, "403": 0, "404": 0, "405": 0, "406": 0, "409": 0, "410": 0, "415": 0, "483": 1, "485": 1, "487": 1, "489": 1, "511": 1, "512": 1, "515": 1, "549": 1, "550": 1, "558": 1, "582": 1, "587": 1, "491": 0, "492": 0, "493": 0, "494": 0, "495": 0, "496": 0, "498": 0, "499": 0, "500": 0, "501": 0, "502": 0, "503": 0, "504": 0, "505": 0, "507": 0, "509": 0, "513": 0, "536": 0, "537": 0, "538": 0, "539": 0, "541": 0, "542": 0, "543": 0, "545": 0, "547": 0, "551": 0, "552": 0, "553": 0, "554": 0, "555": 0, "556": 0, "559": 0, "560": 0, "562": 0, "563": 0, "564": 0, "565": 0, "566": 0, "567": 0, "568": 0, "569": 0, "570": 0, "571": 0, "572": 0, "574": 0, "575": 0, "576": 0, "577": 0, "578": 0, "579": 0, "580": 0, "584": 0, "585": 0, "598": 0, "637": 1, "639": 1, "641": 1, "654": 1, "655": 1, "658": 1, "659": 1, "667": 1, "642": 0, "643": 0, "644": 0, "645": 0, "646": 0, "647": 0, "648": 0, "650": 0, "652": 0, "656": 0, "660": 0, "661": 0, "662": 0, "663": 0, "664": 0, "665": 0, "669": 0, "670": 0, "672": 0, "673": 0, "686": 1, "688": 1, "716": 1, "717": 1, "690": 0, "691": 0, "692": 0, "693": 0, "694": 0, "696": 0, "697": 0, "698": 0, "699": 0, "700": 0, "701": 0, "702": 0, "711": 0, "714": 0, "718": 0, "719": 0, "720": 0, "722": 0, "732": 1, "734": 1, "735": 1, "738": 1, "739": 1, "736": 0, "740": 0, "750": 1, "752": 1, "753": 1, "756": 1, "757": 1, "754": 0, "758": 0, "986": 1, "988": 1, "990": 1, "991": 1, "992": 0, "999": 1, "1000": 1, "1002": 1, "1004": 1, "1005": 1, "1006": 0, "1013": 1, "1014": 1, "1016": 1, "1018": 1, "1019": 1, "1020": 0, "1027": 1, "1028": 1, "1030": 1, "1032": 1, "1033": 1, "1034": 0, "1066": 1, "1067": 1, "1068": 1, "1069": 1, "1074": 1, "1079": 0, "1084": 0, "1089": 0, "1094": 0, "1099": 0, "1100": 0, "1102": 0, "1110": 1, "1118": 0, "1126": 0, "1214": 1, "1215": 0, "1217": 1, "1219": 1, "1220": 0, "1222": 1, "1223": 1, "1226": 1, "1227": 1, "1228": 1, "1229": 0, "1230": 0, "1231": 0, "1232": 0, "1233": 0, "1234": 0, "1235": 0, "1236": 0, "1244": 0, "1329": 0, "1330": 0, "1331": 0, "1332": 0, "1337": 0, "1338": 0, "1339": 0, "1340": 0, "1341": 0, "1342": 0, "1344": 0, "1345": 0, "1346": 0, "1348": 0, "1349": 0, "1350": 0, "1351": 0, "1355": 0, "1356": 0, "1357": 0, "1358": 0, "1359": 0, "1360": 0, "1361": 0, "1362": 0, "1364": 0, "1365": 0, "1366": 0, "1367": 0, "1368": 0, "1369": 0, "1370": 0, "1373": 0, "1375": 0, "1381": 0, "1382": 0, "1383": 0, "1384": 0, "1385": 0, "1386": 0, "1387": 0, "1390": 0, "1391": 0, "1393": 0, "1394": 0, "1396": 0, "1398": 0, "1399": 0, "1400": 0, "1401": 0, "1402": 0, "1403": 0, "1404": 0, "1406": 0, "1407": 0, "1408": 0, "1411": 0, "1412": 0, "1413": 0, "1414": 0, "1415": 0, "1416": 0, "1417": 0, "1418": 0, "1419": 0, "1420": 0, "1424": 0, "1425": 0, "1426": 0, "1427": 0, "1428": 0, "1429": 0, "1430": 0, "1432": 0, "1433": 0, "1434": 0, "1376": 0, "1379": 0, "1377": 0, "1378": 0}}
{"/testbed/sympy/sets/handlers/comparison.py": {"1": 1, "2": 1, "3": 1, "4": 1, "5": 1, "6": 1, "9": 1, "10": 1, "14": 1, "15": 1, "19": 1, "20": 1, "27": 1, "28": 1, "32": 1, "33": 1, "43": 1, "44": 1, "52": 1, "53": 1, "57": 1, "58": 1, "11": 0, "16": 0, "21": 0, "22": 0, "23": 0, "24": 0, "29": 0, "34": 0, "40": 0, "35": 0, "36": 0, "37": 0, "38": 0, "45": 0, "46": 0, "48": 0, "49": 0, "54": 0, "59": 0}}
+ git checkout 33b47e4bd60e2302e42616141e76285038b724d6
Note: switching to '33b47e4bd60e2302e42616141e76285038b724d6'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at 33b47e4bd6 Merge pull request #20646 from Mohitbalwani26/refactor(test_ode)
+ git apply /root/pre_state.patch
error: unrecognized input
