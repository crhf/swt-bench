+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD 28d5262fa3315690395f04e3619ed554dbaf725b
+ sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen
+ locale-gen
Generating locales (this might take a while)...
  en_US.UTF-8... done
Generation complete.
+ export LANG=en_US.UTF-8
+ LANG=en_US.UTF-8
+ export LANGUAGE=en_US:en
+ LANGUAGE=en_US:en
+ export LC_ALL=en_US.UTF-8
+ LC_ALL=en_US.UTF-8
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
nothing to commit, working tree clean
+ git show
commit 28d5262fa3315690395f04e3619ed554dbaf725b
Author: Jon Dufresne <jon.dufresne@gmail.com>
Date:   Thu Apr 25 02:56:06 2019 -0700

    Removed redundant os.path.abspath() call.

diff --git a/django/core/management/commands/loaddata.py b/django/core/management/commands/loaddata.py
index 979ba9d2dc..fb7cf303f2 100644
--- a/django/core/management/commands/loaddata.py
+++ b/django/core/management/commands/loaddata.py
@@ -300,7 +300,7 @@ class Command(BaseCommand):
                 dirs.append(app_dir)
         dirs.extend(fixture_dirs)
         dirs.append('')
-        return [os.path.abspath(os.path.realpath(d)) for d in dirs]
+        return [os.path.realpath(d) for d in dirs]
 
     def parse_name(self, fixture_name):
         """
+ git diff 28d5262fa3315690395f04e3619ed554dbaf725b
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
Requirement already satisfied: pytz in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.0.dev20190425095605) (2025.2)
Requirement already satisfied: sqlparse in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.0.dev20190425095605) (0.4.4)
Installing collected packages: Django
  Attempting uninstall: Django
    Found existing installation: Django 3.0.dev20190425095605
    Uninstalling Django-3.0.dev20190425095605:
      Successfully uninstalled Django-3.0.dev20190425095605
  Running setup.py develop for Django
Successfully installed Django-3.0.dev20190425095605
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv
+ git apply -v -
<stdin>:17: trailing whitespace.
        
<stdin>:20: trailing whitespace.
        
Checking patch tests/test_coverup_django__django-11276.py...
<stdin>:23: new blank line at EOF.
+
Applied patch tests/test_coverup_django__django-11276.py cleanly.
warning: 3 lines add whitespace errors.
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/utils/html\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-11276
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(django/utils/html\\.py)']
0.17 /testbed/django/utils/html.py(1): """HTML utilities suitable for global use."""
0.17 /testbed/django/utils/html.py(3): import json
0.17 /testbed/django/utils/html.py(4): import re
0.17 /testbed/django/utils/html.py(5): from html.parser import HTMLParser
0.18 /testbed/django/utils/html.py(6): from urllib.parse import (
0.18 /testbed/django/utils/html.py(10): from django.utils.functional import Promise, keep_lazy, keep_lazy_text
0.18 /testbed/django/utils/html.py(11): from django.utils.http import RFC3986_GENDELIMS, RFC3986_SUBDELIMS
0.18 /testbed/django/utils/html.py(12): from django.utils.safestring import SafeData, SafeString, mark_safe
0.18 /testbed/django/utils/html.py(13): from django.utils.text import normalize_newlines
0.18 /testbed/django/utils/html.py(16): TRAILING_PUNCTUATION_CHARS = '.,:;!'
0.18 /testbed/django/utils/html.py(17): WRAPPING_PUNCTUATION = [('(', ')'), ('[', ']')]
0.18 /testbed/django/utils/html.py(20): DOTS = ['&middot;', '*', '\u2022', '&#149;', '&bull;', '&#8226;']
0.18 /testbed/django/utils/html.py(22): unencoded_ampersands_re = re.compile(r'&(?!(\w+|#\d+);)')
0.18 /testbed/django/utils/html.py(23): word_split_re = re.compile(r'''([\s<>"']+)''')
0.18 /testbed/django/utils/html.py(24): simple_url_re = re.compile(r'^https?://\[?\w', re.IGNORECASE)
0.18 /testbed/django/utils/html.py(25): simple_url_2_re = re.compile(r'^www\.|^(?!http)\w[^@]+\.(com|edu|gov|int|mil|net|org)($|/.*)$', re.IGNORECASE)
0.18 /testbed/django/utils/html.py(28):     ord('&'): '&amp;',
0.18 /testbed/django/utils/html.py(29):     ord('<'): '&lt;',
0.18 /testbed/django/utils/html.py(30):     ord('>'): '&gt;',
0.18 /testbed/django/utils/html.py(31):     ord('"'): '&quot;',
0.18 /testbed/django/utils/html.py(32):     ord("'"): '&#39;',
0.18 /testbed/django/utils/html.py(36): @keep_lazy(str, SafeString)
0.18 /testbed/django/utils/html.py(50):     ord('\\'): '\\u005C',
0.18 /testbed/django/utils/html.py(51):     ord('\''): '\\u0027',
0.18 /testbed/django/utils/html.py(52):     ord('"'): '\\u0022',
0.18 /testbed/django/utils/html.py(53):     ord('>'): '\\u003E',
0.18 /testbed/django/utils/html.py(54):     ord('<'): '\\u003C',
0.18 /testbed/django/utils/html.py(55):     ord('&'): '\\u0026',
0.18 /testbed/django/utils/html.py(56):     ord('='): '\\u003D',
0.18 /testbed/django/utils/html.py(57):     ord('-'): '\\u002D',
0.18 /testbed/django/utils/html.py(58):     ord(';'): '\\u003B',
0.18 /testbed/django/utils/html.py(59):     ord('`'): '\\u0060',
0.18 /testbed/django/utils/html.py(60):     ord('\u2028'): '\\u2028',
0.18 /testbed/django/utils/html.py(61):     ord('\u2029'): '\\u2029'
0.18 /testbed/django/utils/html.py(65): _js_escapes.update((ord('%c' % z), '\\u%04X' % z) for z in range(32))
0.18 /testbed/django/utils/html.py(65): _js_escapes.update((ord('%c' % z), '\\u%04X' % z) for z in range(32))
0.18 /testbed/django/utils/html.py(65): _js_escapes.update((ord('%c' % z), '\\u%04X' % z) for z in range(32))
0.18 /testbed/django/utils/html.py(65): _js_escapes.update((ord('%c' % z), '\\u%04X' % z) for z in range(32))
0.18 /testbed/django/utils/html.py(65): _js_escapes.update((ord('%c' % z), '\\u%04X' % z) for z in range(32))
0.18 /testbed/django/utils/html.py(65): _js_escapes.update((ord('%c' % z), '\\u%04X' % z) for z in range(32))
0.18 /testbed/django/utils/html.py(65): _js_escapes.update((ord('%c' % z), '\\u%04X' % z) for z in range(32))
0.18 /testbed/django/utils/html.py(65): _js_escapes.update((ord('%c' % z), '\\u%04X' % z) for z in range(32))
0.18 /testbed/django/utils/html.py(65): _js_escapes.update((ord('%c' % z), '\\u%04X' % z) for z in range(32))
0.18 /testbed/django/utils/html.py(65): _js_escapes.update((ord('%c' % z), '\\u%04X' % z) for z in range(32))
0.18 /testbed/django/utils/html.py(65): _js_escapes.update((ord('%c' % z), '\\u%04X' % z) for z in range(32))
0.18 /testbed/django/utils/html.py(65): _js_escapes.update((ord('%c' % z), '\\u%04X' % z) for z in range(32))
0.18 /testbed/django/utils/html.py(65): _js_escapes.update((ord('%c' % z), '\\u%04X' % z) for z in range(32))
0.18 /testbed/django/utils/html.py(65): _js_escapes.update((ord('%c' % z), '\\u%04X' % z) for z in range(32))
0.18 /testbed/django/utils/html.py(65): _js_escapes.update((ord('%c' % z), '\\u%04X' % z) for z in range(32))
0.18 /testbed/django/utils/html.py(65): _js_escapes.update((ord('%c' % z), '\\u%04X' % z) for z in range(32))
0.18 /testbed/django/utils/html.py(65): _js_escapes.update((ord('%c' % z), '\\u%04X' % z) for z in range(32))
0.18 /testbed/django/utils/html.py(65): _js_escapes.update((ord('%c' % z), '\\u%04X' % z) for z in range(32))
0.18 /testbed/django/utils/html.py(65): _js_escapes.update((ord('%c' % z), '\\u%04X' % z) for z in range(32))
0.18 /testbed/django/utils/html.py(65): _js_escapes.update((ord('%c' % z), '\\u%04X' % z) for z in range(32))
0.18 /testbed/django/utils/html.py(65): _js_escapes.update((ord('%c' % z), '\\u%04X' % z) for z in range(32))
0.18 /testbed/django/utils/html.py(65): _js_escapes.update((ord('%c' % z), '\\u%04X' % z) for z in range(32))
0.18 /testbed/django/utils/html.py(65): _js_escapes.update((ord('%c' % z), '\\u%04X' % z) for z in range(32))
0.18 /testbed/django/utils/html.py(65): _js_escapes.update((ord('%c' % z), '\\u%04X' % z) for z in range(32))
0.18 /testbed/django/utils/html.py(65): _js_escapes.update((ord('%c' % z), '\\u%04X' % z) for z in range(32))
0.18 /testbed/django/utils/html.py(65): _js_escapes.update((ord('%c' % z), '\\u%04X' % z) for z in range(32))
0.18 /testbed/django/utils/html.py(65): _js_escapes.update((ord('%c' % z), '\\u%04X' % z) for z in range(32))
0.18 /testbed/django/utils/html.py(65): _js_escapes.update((ord('%c' % z), '\\u%04X' % z) for z in range(32))
0.18 /testbed/django/utils/html.py(65): _js_escapes.update((ord('%c' % z), '\\u%04X' % z) for z in range(32))
0.18 /testbed/django/utils/html.py(65): _js_escapes.update((ord('%c' % z), '\\u%04X' % z) for z in range(32))
0.18 /testbed/django/utils/html.py(65): _js_escapes.update((ord('%c' % z), '\\u%04X' % z) for z in range(32))
0.18 /testbed/django/utils/html.py(65): _js_escapes.update((ord('%c' % z), '\\u%04X' % z) for z in range(32))
0.18 /testbed/django/utils/html.py(65): _js_escapes.update((ord('%c' % z), '\\u%04X' % z) for z in range(32))
0.18 /testbed/django/utils/html.py(65): _js_escapes.update((ord('%c' % z), '\\u%04X' % z) for z in range(32))
0.18 /testbed/django/utils/html.py(68): @keep_lazy(str, SafeString)
0.18 /testbed/django/utils/html.py(75):     ord('>'): '\\u003E',
0.18 /testbed/django/utils/html.py(76):     ord('<'): '\\u003C',
0.18 /testbed/django/utils/html.py(77):     ord('&'): '\\u0026',
0.18 /testbed/django/utils/html.py(81): def json_script(value, element_id):
0.18 /testbed/django/utils/html.py(95): def conditional_escape(text):
0.18 /testbed/django/utils/html.py(110): def format_html(format_string, *args, **kwargs):
0.18 /testbed/django/utils/html.py(121): def format_html_join(sep, format_string, args_generator):
0.18 /testbed/django/utils/html.py(141): @keep_lazy_text
0.18 /testbed/django/utils/html.py(142): def linebreaks(value, autoescape=False):
0.18 /testbed/django/utils/html.py(153): class MLStripper(HTMLParser):
0.18 /testbed/django/utils/html.py(153): class MLStripper(HTMLParser):
0.18 /testbed/django/utils/html.py(154):     def __init__(self):
0.18 /testbed/django/utils/html.py(159):     def handle_data(self, d):
0.18 /testbed/django/utils/html.py(162):     def handle_entityref(self, name):
0.18 /testbed/django/utils/html.py(165):     def handle_charref(self, name):
0.18 /testbed/django/utils/html.py(168):     def get_data(self):
0.18 /testbed/django/utils/html.py(172): def _strip_once(value):
0.18 /testbed/django/utils/html.py(182): @keep_lazy_text
0.18 /testbed/django/utils/html.py(197): @keep_lazy_text
0.18 /testbed/django/utils/html.py(203): def smart_urlquote(url):
0.18 /testbed/django/utils/html.py(238): @keep_lazy_text
0.18 /testbed/django/utils/html.py(239): def urlize(text, trim_url_limit=None, nofollow=False, autoescape=False):
0.18 /testbed/django/utils/html.py(364): def avoid_wrapping(value):
test_escape_single_quote (test_coverup_django__django-11276.EscapeFunctionTests) ... FAIL

======================================================================
FAIL: test_escape_single_quote (test_coverup_django__django-11276.EscapeFunctionTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "./tests/test_coverup_django__django-11276.py", line 16, in test_escape_single_quote
    self.assertEqual(result, expected_output, "BUG: Single quote should be escaped as &#x27; but was not.")
AssertionError: 'It&#39;s a test' != 'It&#x27;s a test' : BUG: Single quote should be escaped as &#x27; but was not.

----------------------------------------------------------------------
Ran 1 test in 0.001s

FAILED (failures=1)
0.18 /testbed/django/utils/html.py(372): def html_safe(klass):
0.18 /testbed/django/utils/html.py(377):     if '__html__' in klass.__dict__:
0.18 /testbed/django/utils/html.py(382):     if '__str__' not in klass.__dict__:
0.18 /testbed/django/utils/html.py(387):     klass_str = klass.__str__
0.18 /testbed/django/utils/html.py(388):     klass.__str__ = lambda self: mark_safe(klass_str(self))
0.18 /testbed/django/utils/html.py(389):     klass.__html__ = lambda self: str(self)
0.18 /testbed/django/utils/html.py(390):     return klass
0.18 /testbed/django/utils/html.py(377):     if '__html__' in klass.__dict__:
0.18 /testbed/django/utils/html.py(382):     if '__str__' not in klass.__dict__:
0.18 /testbed/django/utils/html.py(387):     klass_str = klass.__str__
0.18 /testbed/django/utils/html.py(388):     klass.__str__ = lambda self: mark_safe(klass_str(self))
0.18 /testbed/django/utils/html.py(389):     klass.__html__ = lambda self: str(self)
0.18 /testbed/django/utils/html.py(390):     return klass
0.27 /testbed/django/utils/html.py(377):     if '__html__' in klass.__dict__:
0.27 /testbed/django/utils/html.py(382):     if '__str__' not in klass.__dict__:
0.27 /testbed/django/utils/html.py(387):     klass_str = klass.__str__
0.27 /testbed/django/utils/html.py(388):     klass.__str__ = lambda self: mark_safe(klass_str(self))
0.27 /testbed/django/utils/html.py(389):     klass.__html__ = lambda self: str(self)
0.27 /testbed/django/utils/html.py(390):     return klass
0.27 /testbed/django/utils/html.py(377):     if '__html__' in klass.__dict__:
0.27 /testbed/django/utils/html.py(382):     if '__str__' not in klass.__dict__:
0.27 /testbed/django/utils/html.py(387):     klass_str = klass.__str__
0.27 /testbed/django/utils/html.py(388):     klass.__str__ = lambda self: mark_safe(klass_str(self))
0.27 /testbed/django/utils/html.py(389):     klass.__html__ = lambda self: str(self)
0.27 /testbed/django/utils/html.py(390):     return klass
0.27 /testbed/django/utils/html.py(377):     if '__html__' in klass.__dict__:
0.27 /testbed/django/utils/html.py(382):     if '__str__' not in klass.__dict__:
0.27 /testbed/django/utils/html.py(387):     klass_str = klass.__str__
0.27 /testbed/django/utils/html.py(388):     klass.__str__ = lambda self: mark_safe(klass_str(self))
0.27 /testbed/django/utils/html.py(389):     klass.__html__ = lambda self: str(self)
0.27 /testbed/django/utils/html.py(390):     return klass
0.29 /testbed/django/utils/html.py(377):     if '__html__' in klass.__dict__:
0.29 /testbed/django/utils/html.py(382):     if '__str__' not in klass.__dict__:
0.29 /testbed/django/utils/html.py(387):     klass_str = klass.__str__
0.29 /testbed/django/utils/html.py(388):     klass.__str__ = lambda self: mark_safe(klass_str(self))
0.29 /testbed/django/utils/html.py(389):     klass.__html__ = lambda self: str(self)
0.29 /testbed/django/utils/html.py(390):     return klass
0.29 /testbed/django/utils/html.py(377):     if '__html__' in klass.__dict__:
0.29 /testbed/django/utils/html.py(382):     if '__str__' not in klass.__dict__:
0.29 /testbed/django/utils/html.py(387):     klass_str = klass.__str__
0.29 /testbed/django/utils/html.py(388):     klass.__str__ = lambda self: mark_safe(klass_str(self))
0.29 /testbed/django/utils/html.py(389):     klass.__html__ = lambda self: str(self)
0.29 /testbed/django/utils/html.py(390):     return klass
Testing against Django installed in '/testbed/django'
Skipping setup of unused database(s): default, other.
System check identified no issues (0 silenced).
0.65 /testbed/django/utils/html.py(46):     return mark_safe(str(text).translate(_html_escapes))
+ cat coverage.cover
{"/testbed/django/utils/html.py": {"3": 1, "4": 1, "5": 1, "6": 1, "10": 1, "11": 1, "12": 1, "13": 1, "16": 1, "17": 1, "20": 1, "22": 1, "23": 1, "24": 1, "25": 1, "28": 1, "29": 1, "30": 1, "31": 1, "32": 1, "36": 1, "50": 1, "51": 1, "52": 1, "53": 1, "54": 1, "55": 1, "56": 1, "57": 1, "58": 1, "59": 1, "60": 1, "61": 1, "65": 34, "68": 1, "75": 1, "76": 1, "77": 1, "81": 1, "95": 1, "110": 1, "121": 1, "141": 1, "142": 1, "153": 2, "172": 1, "182": 1, "197": 1, "203": 1, "238": 1, "239": 1, "364": 1, "372": 1, "46": 1, "71": 0, "87": 0, "88": 0, "89": 0, "90": 0, "91": 0, "102": 0, "103": 0, "104": 0, "105": 0, "107": 0, "116": 0, "117": 0, "118": 0, "135": 0, "136": 0, "137": 0, "144": 0, "145": 0, "146": 0, "147": 0, "149": 0, "150": 0, "154": 1, "159": 1, "162": 1, "165": 1, "168": 1, "155": 0, "156": 0, "157": 0, "160": 0, "163": 0, "166": 0, "169": 0, "176": 0, "177": 0, "178": 0, "179": 0, "187": 0, "188": 0, "189": 0, "190": 0, "192": 0, "193": 0, "194": 0, "200": 0, "205": 0, "213": 0, "214": 0, "215": 0, "217": 0, "219": 0, "220": 0, "221": 0, "222": 0, "224": 0, "227": 0, "228": 0, "230": 0, "232": 0, "233": 0, "235": 0, "206": 0, "210": 0, "255": 0, "257": 0, "262": 0, "271": 0, "303": 0, "318": 0, "319": 0, "320": 0, "324": 0, "326": 0, "329": 0, "330": 0, "331": 0, "332": 0, "333": 0, "334": 0, "335": 0, "336": 0, "337": 0, "338": 0, "339": 0, "340": 0, "341": 0, "342": 0, "345": 0, "346": 0, "347": 0, "348": 0, "349": 0, "350": 0, "351": 0, "353": 0, "354": 0, "355": 0, "356": 0, "357": 0, "358": 0, "359": 0, "360": 0, "361": 0, "258": 0, "259": 0, "260": 0, "268": 0, "269": 0, "277": 0, "278": 0, "279": 0, "281": 0, "282": 0, "283": 0, "284": 0, "285": 0, "287": 0, "288": 0, "289": 0, "290": 0, "291": 0, "295": 0, "296": 0, "297": 0, "298": 0, "299": 0, "300": 0, "301": 0, "306": 0, "307": 0, "308": 0, "309": 0, "310": 0, "312": 0, "314": 0, "315": 0, "316": 0, "369": 0, "377": 7, "378": 0, "379": 0, "380": 0, "382": 7, "383": 0, "384": 0, "385": 0, "387": 7, "388": 7, "389": 7, "390": 7}}
+ git checkout 28d5262fa3315690395f04e3619ed554dbaf725b
Note: switching to '28d5262fa3315690395f04e3619ed554dbaf725b'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at 28d5262fa3 Removed redundant os.path.abspath() call.
+ git apply /root/pre_state.patch
error: unrecognized input
