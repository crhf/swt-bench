+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD b1cb676cf92dd1a48365b731979833375b188bf2
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch master
nothing to commit, working tree clean
+ git show
commit b1cb676cf92dd1a48365b731979833375b188bf2
Merge: 68803e50d9 0eaf5f6d55
Author: S.Y. Lee <sylee957@gmail.com>
Date:   Sat Jan 21 11:48:47 2023 +0200

    Merge pull request #24557 from sylee957/slow
    
    Mark some trig rewrite tests slow

+ git diff b1cb676cf92dd1a48365b731979833375b188bf2
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Requirement already satisfied: mpmath>=0.19 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from sympy==1.12.dev0) (1.3.0)
Installing collected packages: sympy
  Attempting uninstall: sympy
    Found existing installation: sympy 1.12.dev0
    Uninstalling sympy-1.12.dev0:
      Successfully uninstalled sympy-1.12.dev0
  DEPRECATION: Legacy editable install of sympy==1.12.dev0 from file:///testbed (setup.py develop) is deprecated. pip 25.3 will enforce this behaviour change. A possible replacement is to add a pyproject.toml or enable --use-pep517, and use setuptools >= 64. If the resulting installation is not behaving as expected, try using --config-settings editable_mode=compat. Please consult the setuptools documentation for more information. Discussion can be found at https://github.com/pypa/pip/issues/11457
  Running setup.py develop for sympy
Successfully installed sympy
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git apply -v -
<stdin>:14: trailing whitespace.
    
<stdin>:17: trailing whitespace.
    
<stdin>:20: trailing whitespace.
    
Checking patch sympy/polys/tests/test_coverup_sympy__sympy-24562.py...
Applied patch sympy/polys/tests/test_coverup_sympy__sympy-24562.py cleanly.
warning: 3 lines add whitespace errors.
+ PYTHONWARNINGS=ignore::UserWarning,ignore::SyntaxWarning
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(sympy/core/numbers\.py)' bin/test -C --verbose sympy/polys/tests/test_coverup_sympy__sympy-24562.p
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(sympy/core/numbers\\.py)']
0.18 /testbed/sympy/core/numbers.py(1): from __future__ import annotations
0.18 /testbed/sympy/core/numbers.py(3): import numbers
0.18 /testbed/sympy/core/numbers.py(4): import decimal
0.18 /testbed/sympy/core/numbers.py(5): import fractions
0.18 /testbed/sympy/core/numbers.py(6): import math
0.18 /testbed/sympy/core/numbers.py(7): import re as regex
0.18 /testbed/sympy/core/numbers.py(8): import sys
0.18 /testbed/sympy/core/numbers.py(9): from functools import lru_cache
0.18 /testbed/sympy/core/numbers.py(11): from .containers import Tuple
0.19 /testbed/sympy/core/numbers.py(12): from .sympify import (SympifyError, _sympy_converter, sympify, _convert_numpy_types,
0.19 /testbed/sympy/core/numbers.py(14): from .singleton import S, Singleton
0.19 /testbed/sympy/core/numbers.py(15): from .basic import Basic
0.19 /testbed/sympy/core/numbers.py(16): from .expr import Expr, AtomicExpr
0.19 /testbed/sympy/core/numbers.py(17): from .evalf import pure_complex
0.19 /testbed/sympy/core/numbers.py(18): from .cache import cacheit, clear_cache
0.19 /testbed/sympy/core/numbers.py(19): from .decorators import _sympifyit
0.19 /testbed/sympy/core/numbers.py(20): from .logic import fuzzy_not
0.19 /testbed/sympy/core/numbers.py(21): from .kind import NumberKind
0.19 /testbed/sympy/core/numbers.py(22): from sympy.external.gmpy import SYMPY_INTS, HAS_GMPY, gmpy
0.19 /testbed/sympy/core/numbers.py(23): from sympy.multipledispatch import dispatch
0.19 /testbed/sympy/core/numbers.py(24): import mpmath
0.19 /testbed/sympy/core/numbers.py(25): import mpmath.libmp as mlib
0.19 /testbed/sympy/core/numbers.py(26): from mpmath.libmp import bitcount, round_nearest as rnd
0.19 /testbed/sympy/core/numbers.py(27): from mpmath.libmp.backend import MPZ
0.19 /testbed/sympy/core/numbers.py(28): from mpmath.libmp import mpf_pow, mpf_pi, mpf_e, phi_fixed
0.19 /testbed/sympy/core/numbers.py(29): from mpmath.ctx_mp import mpnumeric
0.19 /testbed/sympy/core/numbers.py(30): from mpmath.libmp.libmpf import (
0.19 /testbed/sympy/core/numbers.py(34): from sympy.utilities.misc import as_int, debug, filldedent
0.19 /testbed/sympy/core/numbers.py(35): from .parameters import global_parameters
0.19 /testbed/sympy/core/numbers.py(37): _LOG2 = math.log(2)
0.19 /testbed/sympy/core/numbers.py(40): def comp(z1, z2, tol=None):
0.19 /testbed/sympy/core/numbers.py(149): def mpf_norm(mpf, prec):
0.19 /testbed/sympy/core/numbers.py(179): _errdict = {"divide": False}
0.19 /testbed/sympy/core/numbers.py(182): def seterr(divide=False):
0.19 /testbed/sympy/core/numbers.py(194): def _as_integer_ratio(p):
0.19 /testbed/sympy/core/numbers.py(205): def _decimal_to_Rational_prec(dec):
0.19 /testbed/sympy/core/numbers.py(220): _floatpat = regex.compile(r"[-+]?((\d*\.\d+)|(\d+\.?))")
0.19 /testbed/sympy/core/numbers.py(221): def _literal_float(f):
0.19 /testbed/sympy/core/numbers.py(229): @lru_cache(1024)
0.19 /testbed/sympy/core/numbers.py(230): def igcd(*args):
0.19 /testbed/sympy/core/numbers.py(270): igcd2 = math.gcd
0.19 /testbed/sympy/core/numbers.py(273): def igcd_lehmer(a, b):
0.19 /testbed/sympy/core/numbers.py(419): def ilcm(*args):
0.19 /testbed/sympy/core/numbers.py(445): def igcdex(a, b):
0.19 /testbed/sympy/core/numbers.py(491): def mod_inverse(a, m):
0.19 /testbed/sympy/core/numbers.py(556): class Number(AtomicExpr):
0.19 /testbed/sympy/core/numbers.py(556): class Number(AtomicExpr):
0.19 /testbed/sympy/core/numbers.py(557):     """Represents atomic numbers in SymPy.
0.19 /testbed/sympy/core/numbers.py(584):     is_commutative = True
0.19 /testbed/sympy/core/numbers.py(585):     is_number = True
0.19 /testbed/sympy/core/numbers.py(586):     is_Number = True
0.19 /testbed/sympy/core/numbers.py(588):     __slots__ = ()
0.19 /testbed/sympy/core/numbers.py(591):     _prec = -1
0.19 /testbed/sympy/core/numbers.py(593):     kind = NumberKind
0.19 /testbed/sympy/core/numbers.py(595):     def __new__(cls, *obj):
0.19 /testbed/sympy/core/numbers.py(625):     def could_extract_minus_sign(self):
0.19 /testbed/sympy/core/numbers.py(628):     def invert(self, other, *gens, **args):
0.19 /testbed/sympy/core/numbers.py(634):     def __divmod__(self, other):
0.19 /testbed/sympy/core/numbers.py(659):     def __rdivmod__(self, other):
0.19 /testbed/sympy/core/numbers.py(666):     def _as_mpf_val(self, prec):
0.19 /testbed/sympy/core/numbers.py(671):     def _eval_evalf(self, prec):
0.19 /testbed/sympy/core/numbers.py(674):     def _as_mpf_op(self, prec):
0.19 /testbed/sympy/core/numbers.py(678):     def __float__(self):
0.19 /testbed/sympy/core/numbers.py(681):     def floor(self):
0.19 /testbed/sympy/core/numbers.py(685):     def ceiling(self):
0.19 /testbed/sympy/core/numbers.py(689):     def __floor__(self):
0.19 /testbed/sympy/core/numbers.py(692):     def __ceil__(self):
0.19 /testbed/sympy/core/numbers.py(695):     def _eval_conjugate(self):
0.19 /testbed/sympy/core/numbers.py(698):     def _eval_order(self, *symbols):
0.19 /testbed/sympy/core/numbers.py(703):     def _eval_subs(self, old, new):
0.19 /testbed/sympy/core/numbers.py(708):     @classmethod
0.19 /testbed/sympy/core/numbers.py(709):     def class_key(cls):
0.19 /testbed/sympy/core/numbers.py(712):     @cacheit
0.19 /testbed/sympy/core/numbers.py(713):     def sort_key(self, order=None):
0.19 /testbed/sympy/core/numbers.py(716):     @_sympifyit('other', NotImplemented)
0.19 /testbed/sympy/core/numbers.py(717):     def __add__(self, other):
0.19 /testbed/sympy/core/numbers.py(727):     @_sympifyit('other', NotImplemented)
0.19 /testbed/sympy/core/numbers.py(728):     def __sub__(self, other):
0.19 /testbed/sympy/core/numbers.py(738):     @_sympifyit('other', NotImplemented)
0.19 /testbed/sympy/core/numbers.py(739):     def __mul__(self, other):
0.19 /testbed/sympy/core/numbers.py(761):     @_sympifyit('other', NotImplemented)
0.19 /testbed/sympy/core/numbers.py(762):     def __truediv__(self, other):
0.19 /testbed/sympy/core/numbers.py(770):     def __eq__(self, other):
0.19 /testbed/sympy/core/numbers.py(774):     def __ne__(self, other):
0.19 /testbed/sympy/core/numbers.py(778):     def __lt__(self, other):
0.19 /testbed/sympy/core/numbers.py(786):     def __le__(self, other):
0.19 /testbed/sympy/core/numbers.py(794):     def __gt__(self, other):
0.19 /testbed/sympy/core/numbers.py(801):     def __ge__(self, other):
0.19 /testbed/sympy/core/numbers.py(808):     def __hash__(self):
0.19 /testbed/sympy/core/numbers.py(811):     def is_constant(self, *wrt, **flags):
0.19 /testbed/sympy/core/numbers.py(814):     def as_coeff_mul(self, *deps, rational=True, **kwargs):
0.19 /testbed/sympy/core/numbers.py(822):     def as_coeff_add(self, *deps):
0.19 /testbed/sympy/core/numbers.py(828):     def as_coeff_Mul(self, rational=False):
0.19 /testbed/sympy/core/numbers.py(834):     def as_coeff_Add(self, rational=False):
0.19 /testbed/sympy/core/numbers.py(840):     def gcd(self, other):
0.19 /testbed/sympy/core/numbers.py(845):     def lcm(self, other):
0.19 /testbed/sympy/core/numbers.py(850):     def cofactors(self, other):
0.19 /testbed/sympy/core/numbers.py(856): class Float(Number):
0.19 /testbed/sympy/core/numbers.py(856): class Float(Number):
0.19 /testbed/sympy/core/numbers.py(857):     """Represent a floating-point number of arbitrary precision.
0.19 /testbed/sympy/core/numbers.py(1022):     __slots__ = ('_mpf_', '_prec')
0.19 /testbed/sympy/core/numbers.py(1024):     _mpf_: tuple[int, int, int, int]
0.19 /testbed/sympy/core/numbers.py(1028):     is_rational = None
0.19 /testbed/sympy/core/numbers.py(1029):     is_irrational = None
0.19 /testbed/sympy/core/numbers.py(1030):     is_number = True
0.19 /testbed/sympy/core/numbers.py(1032):     is_real = True
0.19 /testbed/sympy/core/numbers.py(1033):     is_extended_real = True
0.19 /testbed/sympy/core/numbers.py(1035):     is_Float = True
0.19 /testbed/sympy/core/numbers.py(1037):     def __new__(cls, num, dps=None, precision=None):
0.19 /testbed/sympy/core/numbers.py(1181):     @classmethod
0.19 /testbed/sympy/core/numbers.py(1182):     def _new(cls, _mpf_, _prec, zero=True):
0.19 /testbed/sympy/core/numbers.py(1199):     def __getnewargs_ex__(self):
0.19 /testbed/sympy/core/numbers.py(1202):     def _hashable_content(self):
0.19 /testbed/sympy/core/numbers.py(1205):     def floor(self):
0.19 /testbed/sympy/core/numbers.py(1209):     def ceiling(self):
0.19 /testbed/sympy/core/numbers.py(1213):     def __floor__(self):
0.19 /testbed/sympy/core/numbers.py(1216):     def __ceil__(self):
0.19 /testbed/sympy/core/numbers.py(1219):     @property
0.19 /testbed/sympy/core/numbers.py(1220):     def num(self):
0.19 /testbed/sympy/core/numbers.py(1223):     def _as_mpf_val(self, prec):
0.19 /testbed/sympy/core/numbers.py(1229):     def _as_mpf_op(self, prec):
0.19 /testbed/sympy/core/numbers.py(1232):     def _eval_is_finite(self):
0.19 /testbed/sympy/core/numbers.py(1237):     def _eval_is_infinite(self):
0.19 /testbed/sympy/core/numbers.py(1242):     def _eval_is_integer(self):
0.19 /testbed/sympy/core/numbers.py(1245):     def _eval_is_negative(self):
0.19 /testbed/sympy/core/numbers.py(1250):     def _eval_is_positive(self):
0.19 /testbed/sympy/core/numbers.py(1255):     def _eval_is_extended_negative(self):
0.19 /testbed/sympy/core/numbers.py(1262):     def _eval_is_extended_positive(self):
0.19 /testbed/sympy/core/numbers.py(1269):     def _eval_is_zero(self):
0.19 /testbed/sympy/core/numbers.py(1272):     def __bool__(self):
0.19 /testbed/sympy/core/numbers.py(1275):     def __neg__(self):
0.19 /testbed/sympy/core/numbers.py(1280):     @_sympifyit('other', NotImplemented)
0.19 /testbed/sympy/core/numbers.py(1281):     def __add__(self, other):
0.19 /testbed/sympy/core/numbers.py(1287):     @_sympifyit('other', NotImplemented)
0.19 /testbed/sympy/core/numbers.py(1288):     def __sub__(self, other):
0.19 /testbed/sympy/core/numbers.py(1294):     @_sympifyit('other', NotImplemented)
0.19 /testbed/sympy/core/numbers.py(1295):     def __mul__(self, other):
0.19 /testbed/sympy/core/numbers.py(1301):     @_sympifyit('other', NotImplemented)
0.19 /testbed/sympy/core/numbers.py(1302):     def __truediv__(self, other):
0.19 /testbed/sympy/core/numbers.py(1308):     @_sympifyit('other', NotImplemented)
0.19 /testbed/sympy/core/numbers.py(1309):     def __mod__(self, other):
0.19 /testbed/sympy/core/numbers.py(1323):     @_sympifyit('other', NotImplemented)
0.19 /testbed/sympy/core/numbers.py(1324):     def __rmod__(self, other):
0.19 /testbed/sympy/core/numbers.py(1332):     def _eval_power(self, expt):
0.19 /testbed/sympy/core/numbers.py(1364):     def __abs__(self):
0.19 /testbed/sympy/core/numbers.py(1367):     def __int__(self):
0.19 /testbed/sympy/core/numbers.py(1372):     def __eq__(self, other):
0.19 /testbed/sympy/core/numbers.py(1402):     def __ne__(self, other):
0.19 /testbed/sympy/core/numbers.py(1405):     def _Frel(self, other, op):
0.19 /testbed/sympy/core/numbers.py(1434):     def __gt__(self, other):
0.19 /testbed/sympy/core/numbers.py(1442):     def __ge__(self, other):
0.19 /testbed/sympy/core/numbers.py(1450):     def __lt__(self, other):
0.19 /testbed/sympy/core/numbers.py(1458):     def __le__(self, other):
0.19 /testbed/sympy/core/numbers.py(1466):     def __hash__(self):
0.19 /testbed/sympy/core/numbers.py(1469):     def epsilon_eq(self, other, epsilon="1e-15"):
0.19 /testbed/sympy/core/numbers.py(1472):     def __format__(self, format_spec):
0.19 /testbed/sympy/core/numbers.py(1477): _sympy_converter[float] = _sympy_converter[decimal.Decimal] = Float
0.19 /testbed/sympy/core/numbers.py(1480): RealNumber = Float
0.19 /testbed/sympy/core/numbers.py(1483): class Rational(Number):
0.19 /testbed/sympy/core/numbers.py(1483): class Rational(Number):
0.19 /testbed/sympy/core/numbers.py(1484):     """Represents rational numbers (p/q) of any size.
0.19 /testbed/sympy/core/numbers.py(1576):     is_real = True
0.19 /testbed/sympy/core/numbers.py(1577):     is_integer = False
0.19 /testbed/sympy/core/numbers.py(1578):     is_rational = True
0.19 /testbed/sympy/core/numbers.py(1579):     is_number = True
0.19 /testbed/sympy/core/numbers.py(1581):     __slots__ = ('p', 'q')
0.19 /testbed/sympy/core/numbers.py(1583):     p: int
0.19 /testbed/sympy/core/numbers.py(1584):     q: int
0.19 /testbed/sympy/core/numbers.py(1586):     is_Rational = True
0.19 /testbed/sympy/core/numbers.py(1588):     @cacheit
0.19 /testbed/sympy/core/numbers.py(1589):     def __new__(cls, p, q=None, gcd=None):
0.19 /testbed/sympy/core/numbers.py(1667):     def limit_denominator(self, max_denominator=1000000):
0.19 /testbed/sympy/core/numbers.py(1683):     def __getnewargs__(self):
0.19 /testbed/sympy/core/numbers.py(1686):     def _hashable_content(self):
0.19 /testbed/sympy/core/numbers.py(1689):     def _eval_is_positive(self):
0.19 /testbed/sympy/core/numbers.py(1692):     def _eval_is_zero(self):
0.19 /testbed/sympy/core/numbers.py(1695):     def __neg__(self):
0.19 /testbed/sympy/core/numbers.py(1698):     @_sympifyit('other', NotImplemented)
0.19 /testbed/sympy/core/numbers.py(1699):     def __add__(self, other):
0.19 /testbed/sympy/core/numbers.py(1711):     __radd__ = __add__
0.19 /testbed/sympy/core/numbers.py(1713):     @_sympifyit('other', NotImplemented)
0.19 /testbed/sympy/core/numbers.py(1714):     def __sub__(self, other):
0.19 /testbed/sympy/core/numbers.py(1725):     @_sympifyit('other', NotImplemented)
0.19 /testbed/sympy/core/numbers.py(1726):     def __rsub__(self, other):
0.19 /testbed/sympy/core/numbers.py(1737):     @_sympifyit('other', NotImplemented)
0.19 /testbed/sympy/core/numbers.py(1738):     def __mul__(self, other):
0.19 /testbed/sympy/core/numbers.py(1749):     __rmul__ = __mul__
0.19 /testbed/sympy/core/numbers.py(1751):     @_sympifyit('other', NotImplemented)
0.19 /testbed/sympy/core/numbers.py(1752):     def __truediv__(self, other):
0.19 /testbed/sympy/core/numbers.py(1766):     @_sympifyit('other', NotImplemented)
0.19 /testbed/sympy/core/numbers.py(1767):     def __rtruediv__(self, other):
0.19 /testbed/sympy/core/numbers.py(1779):     @_sympifyit('other', NotImplemented)
0.19 /testbed/sympy/core/numbers.py(1780):     def __mod__(self, other):
0.19 /testbed/sympy/core/numbers.py(1792):     @_sympifyit('other', NotImplemented)
0.19 /testbed/sympy/core/numbers.py(1793):     def __rmod__(self, other):
0.19 /testbed/sympy/core/numbers.py(1798):     def _eval_power(self, expt):
0.19 /testbed/sympy/core/numbers.py(1843):     def _as_mpf_val(self, prec):
0.19 /testbed/sympy/core/numbers.py(1846):     def _mpmath_(self, prec, rnd):
0.19 /testbed/sympy/core/numbers.py(1849):     def __abs__(self):
0.19 /testbed/sympy/core/numbers.py(1852):     def __int__(self):
0.19 /testbed/sympy/core/numbers.py(1858):     def floor(self):
0.19 /testbed/sympy/core/numbers.py(1861):     def ceiling(self):
0.19 /testbed/sympy/core/numbers.py(1864):     def __floor__(self):
0.19 /testbed/sympy/core/numbers.py(1867):     def __ceil__(self):
0.19 /testbed/sympy/core/numbers.py(1870):     def __eq__(self, other):
0.19 /testbed/sympy/core/numbers.py(1917):     def __ne__(self, other):
0.19 /testbed/sympy/core/numbers.py(1920):     def _Rrel(self, other, attr):
0.19 /testbed/sympy/core/numbers.py(1941):     def __gt__(self, other):
0.19 /testbed/sympy/core/numbers.py(1949):     def __ge__(self, other):
0.19 /testbed/sympy/core/numbers.py(1957):     def __lt__(self, other):
0.19 /testbed/sympy/core/numbers.py(1965):     def __le__(self, other):
0.19 /testbed/sympy/core/numbers.py(1973):     def __hash__(self):
0.19 /testbed/sympy/core/numbers.py(1976):     def factors(self, limit=None, use_trial=True, use_rho=False,
0.19 /testbed/sympy/core/numbers.py(1988):     @property
0.19 /testbed/sympy/core/numbers.py(1989):     def numerator(self):
0.19 /testbed/sympy/core/numbers.py(1992):     @property
0.19 /testbed/sympy/core/numbers.py(1993):     def denominator(self):
0.19 /testbed/sympy/core/numbers.py(1996):     @_sympifyit('other', NotImplemented)
0.19 /testbed/sympy/core/numbers.py(1997):     def gcd(self, other):
0.19 /testbed/sympy/core/numbers.py(2006):     @_sympifyit('other', NotImplemented)
0.19 /testbed/sympy/core/numbers.py(2007):     def lcm(self, other):
0.19 /testbed/sympy/core/numbers.py(2014):     def as_numer_denom(self):
0.19 /testbed/sympy/core/numbers.py(2017):     def as_content_primitive(self, radical=False, clear=True):
0.19 /testbed/sympy/core/numbers.py(2037):     def as_coeff_Mul(self, rational=False):
0.19 /testbed/sympy/core/numbers.py(2041):     def as_coeff_Add(self, rational=False):
0.19 /testbed/sympy/core/numbers.py(2046): class Integer(Rational):
0.19 /testbed/sympy/core/numbers.py(2046): class Integer(Rational):
0.19 /testbed/sympy/core/numbers.py(2047):     """Represents integer numbers of any size.
0.19 /testbed/sympy/core/numbers.py(2073):     q = 1
0.19 /testbed/sympy/core/numbers.py(2074):     is_integer = True
0.19 /testbed/sympy/core/numbers.py(2075):     is_number = True
0.19 /testbed/sympy/core/numbers.py(2077):     is_Integer = True
0.19 /testbed/sympy/core/numbers.py(2079):     __slots__ = ()
0.19 /testbed/sympy/core/numbers.py(2081):     def _as_mpf_val(self, prec):
0.19 /testbed/sympy/core/numbers.py(2084):     def _mpmath_(self, prec, rnd):
0.19 /testbed/sympy/core/numbers.py(2087):     @cacheit
0.19 /testbed/sympy/core/numbers.py(2088):     def __new__(cls, i):
0.19 /testbed/sympy/core/numbers.py(2114):     def __getnewargs__(self):
0.19 /testbed/sympy/core/numbers.py(2118):     def __int__(self):
0.19 /testbed/sympy/core/numbers.py(2121):     def floor(self):
0.19 /testbed/sympy/core/numbers.py(2124):     def ceiling(self):
0.19 /testbed/sympy/core/numbers.py(2127):     def __floor__(self):
0.19 /testbed/sympy/core/numbers.py(2130):     def __ceil__(self):
0.19 /testbed/sympy/core/numbers.py(2133):     def __neg__(self):
0.19 /testbed/sympy/core/numbers.py(2136):     def __abs__(self):
0.19 /testbed/sympy/core/numbers.py(2142):     def __divmod__(self, other):
0.19 /testbed/sympy/core/numbers.py(2148):     def __rdivmod__(self, other):
0.19 /testbed/sympy/core/numbers.py(2162):     def __add__(self, other):
0.19 /testbed/sympy/core/numbers.py(2174):     def __radd__(self, other):
0.19 /testbed/sympy/core/numbers.py(2183):     def __sub__(self, other):
0.19 /testbed/sympy/core/numbers.py(2194):     def __rsub__(self, other):
0.19 /testbed/sympy/core/numbers.py(2203):     def __mul__(self, other):
0.19 /testbed/sympy/core/numbers.py(2214):     def __rmul__(self, other):
0.19 /testbed/sympy/core/numbers.py(2223):     def __mod__(self, other):
0.19 /testbed/sympy/core/numbers.py(2232):     def __rmod__(self, other):
0.19 /testbed/sympy/core/numbers.py(2241):     def __eq__(self, other):
0.19 /testbed/sympy/core/numbers.py(2248):     def __ne__(self, other):
0.19 /testbed/sympy/core/numbers.py(2251):     def __gt__(self, other):
0.19 /testbed/sympy/core/numbers.py(2260):     def __lt__(self, other):
0.19 /testbed/sympy/core/numbers.py(2269):     def __ge__(self, other):
0.19 /testbed/sympy/core/numbers.py(2278):     def __le__(self, other):
0.19 /testbed/sympy/core/numbers.py(2287):     def __hash__(self):
0.19 /testbed/sympy/core/numbers.py(2290):     def __index__(self):
0.19 /testbed/sympy/core/numbers.py(2295):     def _eval_is_odd(self):
0.19 /testbed/sympy/core/numbers.py(2298):     def _eval_power(self, expt):
0.19 /testbed/sympy/core/numbers.py(2406):     def _eval_is_prime(self):
0.19 /testbed/sympy/core/numbers.py(2411):     def _eval_is_composite(self):
0.19 /testbed/sympy/core/numbers.py(2417):     def as_numer_denom(self):
0.19 /testbed/sympy/core/numbers.py(2420):     @_sympifyit('other', NotImplemented)
0.19 /testbed/sympy/core/numbers.py(2421):     def __floordiv__(self, other):
0.19 /testbed/sympy/core/numbers.py(2428):     def __rfloordiv__(self, other):
0.19 /testbed/sympy/core/numbers.py(2438):     def __lshift__(self, other):
0.19 /testbed/sympy/core/numbers.py(2444):     def __rlshift__(self, other):
0.19 /testbed/sympy/core/numbers.py(2450):     def __rshift__(self, other):
0.19 /testbed/sympy/core/numbers.py(2456):     def __rrshift__(self, other):
0.19 /testbed/sympy/core/numbers.py(2462):     def __and__(self, other):
0.19 /testbed/sympy/core/numbers.py(2468):     def __rand__(self, other):
0.19 /testbed/sympy/core/numbers.py(2474):     def __xor__(self, other):
0.19 /testbed/sympy/core/numbers.py(2480):     def __rxor__(self, other):
0.19 /testbed/sympy/core/numbers.py(2486):     def __or__(self, other):
0.19 /testbed/sympy/core/numbers.py(2492):     def __ror__(self, other):
0.19 /testbed/sympy/core/numbers.py(2498):     def __invert__(self):
0.19 /testbed/sympy/core/numbers.py(2502): _sympy_converter[int] = Integer
0.19 /testbed/sympy/core/numbers.py(2505): class AlgebraicNumber(Expr):
0.19 /testbed/sympy/core/numbers.py(2505): class AlgebraicNumber(Expr):
0.19 /testbed/sympy/core/numbers.py(2506):     r"""
0.19 /testbed/sympy/core/numbers.py(2523):     __slots__ = ('rep', 'root', 'alias', 'minpoly', '_own_minpoly')
0.19 /testbed/sympy/core/numbers.py(2525):     is_AlgebraicNumber = True
0.19 /testbed/sympy/core/numbers.py(2526):     is_algebraic = True
0.19 /testbed/sympy/core/numbers.py(2527):     is_number = True
0.19 /testbed/sympy/core/numbers.py(2530):     kind = NumberKind
0.19 /testbed/sympy/core/numbers.py(2535):     free_symbols: set[Basic] = set()
0.19 /testbed/sympy/core/numbers.py(2537):     def __new__(cls, expr, coeffs=None, alias=None, **args):
0.19 /testbed/sympy/core/numbers.py(2769):     def __hash__(self):
0.19 /testbed/sympy/core/numbers.py(2772):     def _eval_evalf(self, prec):
0.19 /testbed/sympy/core/numbers.py(2775):     @property
0.19 /testbed/sympy/core/numbers.py(2776):     def is_aliased(self):
0.19 /testbed/sympy/core/numbers.py(2780):     def as_poly(self, x=None):
0.19 /testbed/sympy/core/numbers.py(2792):     def as_expr(self, x=None):
0.19 /testbed/sympy/core/numbers.py(2796):     def coeffs(self):
0.19 /testbed/sympy/core/numbers.py(2800):     def native_coeffs(self):
0.19 /testbed/sympy/core/numbers.py(2804):     def to_algebraic_integer(self):
0.19 /testbed/sympy/core/numbers.py(2821):     def _eval_simplify(self, **kwargs):
0.19 /testbed/sympy/core/numbers.py(2832):     def field_element(self, coeffs):
0.19 /testbed/sympy/core/numbers.py(2876):     @property
0.19 /testbed/sympy/core/numbers.py(2877):     def is_primitive_element(self):
0.19 /testbed/sympy/core/numbers.py(2886):     def primitive_element(self):
0.19 /testbed/sympy/core/numbers.py(2901):     def to_primitive_element(self, radicals=True):
0.19 /testbed/sympy/core/numbers.py(2972):     def minpoly_of_element(self):
0.19 /testbed/sympy/core/numbers.py(2994):     def to_root(self, radicals=True, minpoly=None):
0.19 /testbed/sympy/core/numbers.py(3026): class RationalConstant(Rational):
0.19 /testbed/sympy/core/numbers.py(3026): class RationalConstant(Rational):
0.19 /testbed/sympy/core/numbers.py(3027):     """
0.19 /testbed/sympy/core/numbers.py(3033):     __slots__ = ()
0.19 /testbed/sympy/core/numbers.py(3035):     def __new__(cls):
0.19 /testbed/sympy/core/numbers.py(3039): class IntegerConstant(Integer):
0.19 /testbed/sympy/core/numbers.py(3039): class IntegerConstant(Integer):
0.19 /testbed/sympy/core/numbers.py(3040):     __slots__ = ()
0.19 /testbed/sympy/core/numbers.py(3042):     def __new__(cls):
0.19 /testbed/sympy/core/numbers.py(3046): class Zero(IntegerConstant, metaclass=Singleton):
0.19 /testbed/sympy/core/numbers.py(3046): class Zero(IntegerConstant, metaclass=Singleton):
0.19 /testbed/sympy/core/numbers.py(3047):     """The number zero.
0.19 /testbed/sympy/core/numbers.py(3066):     p = 0
0.19 /testbed/sympy/core/numbers.py(3067):     q = 1
0.19 /testbed/sympy/core/numbers.py(3068):     is_positive = False
0.19 /testbed/sympy/core/numbers.py(3069):     is_negative = False
0.19 /testbed/sympy/core/numbers.py(3070):     is_zero = True
0.19 /testbed/sympy/core/numbers.py(3071):     is_number = True
0.19 /testbed/sympy/core/numbers.py(3072):     is_comparable = True
0.19 /testbed/sympy/core/numbers.py(3074):     __slots__ = ()
0.19 /testbed/sympy/core/numbers.py(3076):     def __getnewargs__(self):
0.19 /testbed/sympy/core/numbers.py(3079):     @staticmethod
0.19 /testbed/sympy/core/numbers.py(3080):     def __abs__():
0.19 /testbed/sympy/core/numbers.py(3083):     @staticmethod
0.19 /testbed/sympy/core/numbers.py(3084):     def __neg__():
0.19 /testbed/sympy/core/numbers.py(3087):     def _eval_power(self, expt):
0.19 /testbed/sympy/core/numbers.py(3106):     def _eval_order(self, *symbols):
0.19 /testbed/sympy/core/numbers.py(3110):     def __bool__(self):
0.19 /testbed/sympy/core/numbers.py(3114): class One(IntegerConstant, metaclass=Singleton):
0.19 /testbed/sympy/core/numbers.py(3114): class One(IntegerConstant, metaclass=Singleton):
0.19 /testbed/sympy/core/numbers.py(3115):     """The number one.
0.19 /testbed/sympy/core/numbers.py(3131):     is_number = True
0.19 /testbed/sympy/core/numbers.py(3132):     is_positive = True
0.19 /testbed/sympy/core/numbers.py(3134):     p = 1
0.19 /testbed/sympy/core/numbers.py(3135):     q = 1
0.19 /testbed/sympy/core/numbers.py(3137):     __slots__ = ()
0.19 /testbed/sympy/core/numbers.py(3139):     def __getnewargs__(self):
0.19 /testbed/sympy/core/numbers.py(3142):     @staticmethod
0.19 /testbed/sympy/core/numbers.py(3143):     def __abs__():
0.19 /testbed/sympy/core/numbers.py(3146):     @staticmethod
0.19 /testbed/sympy/core/numbers.py(3147):     def __neg__():
0.19 /testbed/sympy/core/numbers.py(3150):     def _eval_power(self, expt):
0.19 /testbed/sympy/core/numbers.py(3153):     def _eval_order(self, *symbols):
0.19 /testbed/sympy/core/numbers.py(3156):     @staticmethod
0.19 /testbed/sympy/core/numbers.py(3157):     def factors(limit=None, use_trial=True, use_rho=False, use_pm1=False,
0.19 /testbed/sympy/core/numbers.py(3165): class NegativeOne(IntegerConstant, metaclass=Singleton):
0.19 /testbed/sympy/core/numbers.py(3165): class NegativeOne(IntegerConstant, metaclass=Singleton):
0.19 /testbed/sympy/core/numbers.py(3166):     """The number negative one.
0.19 /testbed/sympy/core/numbers.py(3188):     is_number = True
0.19 /testbed/sympy/core/numbers.py(3190):     p = -1
0.19 /testbed/sympy/core/numbers.py(3191):     q = 1
0.19 /testbed/sympy/core/numbers.py(3193):     __slots__ = ()
0.19 /testbed/sympy/core/numbers.py(3195):     def __getnewargs__(self):
0.19 /testbed/sympy/core/numbers.py(3198):     @staticmethod
0.19 /testbed/sympy/core/numbers.py(3199):     def __abs__():
0.19 /testbed/sympy/core/numbers.py(3202):     @staticmethod
0.19 /testbed/sympy/core/numbers.py(3203):     def __neg__():
0.19 /testbed/sympy/core/numbers.py(3206):     def _eval_power(self, expt):
0.19 /testbed/sympy/core/numbers.py(3229): class Half(RationalConstant, metaclass=Singleton):
0.19 /testbed/sympy/core/numbers.py(3229): class Half(RationalConstant, metaclass=Singleton):
0.19 /testbed/sympy/core/numbers.py(3230):     """The rational number 1/2.
0.19 /testbed/sympy/core/numbers.py(3246):     is_number = True
0.19 /testbed/sympy/core/numbers.py(3248):     p = 1
0.19 /testbed/sympy/core/numbers.py(3249):     q = 2
0.19 /testbed/sympy/core/numbers.py(3251):     __slots__ = ()
0.19 /testbed/sympy/core/numbers.py(3253):     def __getnewargs__(self):
0.19 /testbed/sympy/core/numbers.py(3256):     @staticmethod
0.19 /testbed/sympy/core/numbers.py(3257):     def __abs__():
0.19 /testbed/sympy/core/numbers.py(3261): class Infinity(Number, metaclass=Singleton):
0.19 /testbed/sympy/core/numbers.py(3261): class Infinity(Number, metaclass=Singleton):
0.19 /testbed/sympy/core/numbers.py(3262):     r"""Positive infinite quantity.
0.19 /testbed/sympy/core/numbers.py(3302):     is_commutative = True
0.19 /testbed/sympy/core/numbers.py(3303):     is_number = True
0.19 /testbed/sympy/core/numbers.py(3304):     is_complex = False
0.19 /testbed/sympy/core/numbers.py(3305):     is_extended_real = True
0.19 /testbed/sympy/core/numbers.py(3306):     is_infinite = True
0.19 /testbed/sympy/core/numbers.py(3307):     is_comparable = True
0.19 /testbed/sympy/core/numbers.py(3308):     is_extended_positive = True
0.19 /testbed/sympy/core/numbers.py(3309):     is_prime = False
0.19 /testbed/sympy/core/numbers.py(3311):     __slots__ = ()
0.19 /testbed/sympy/core/numbers.py(3313):     def __new__(cls):
0.19 /testbed/sympy/core/numbers.py(3316):     def _latex(self, printer):
0.19 /testbed/sympy/core/numbers.py(3319):     def _eval_subs(self, old, new):
0.19 /testbed/sympy/core/numbers.py(3323):     def _eval_evalf(self, prec=None):
0.19 /testbed/sympy/core/numbers.py(3326):     def evalf(self, prec=None, **options):
0.19 /testbed/sympy/core/numbers.py(3329):     @_sympifyit('other', NotImplemented)
0.19 /testbed/sympy/core/numbers.py(3330):     def __add__(self, other):
0.19 /testbed/sympy/core/numbers.py(3336):     __radd__ = __add__
0.19 /testbed/sympy/core/numbers.py(3338):     @_sympifyit('other', NotImplemented)
0.19 /testbed/sympy/core/numbers.py(3339):     def __sub__(self, other):
0.19 /testbed/sympy/core/numbers.py(3346):     @_sympifyit('other', NotImplemented)
0.19 /testbed/sympy/core/numbers.py(3347):     def __rsub__(self, other):
0.19 /testbed/sympy/core/numbers.py(3350):     @_sympifyit('other', NotImplemented)
0.19 /testbed/sympy/core/numbers.py(3351):     def __mul__(self, other):
0.19 /testbed/sympy/core/numbers.py(3359):     __rmul__ = __mul__
0.19 /testbed/sympy/core/numbers.py(3361):     @_sympifyit('other', NotImplemented)
0.19 /testbed/sympy/core/numbers.py(3362):     def __truediv__(self, other):
0.19 /testbed/sympy/core/numbers.py(3373):     def __abs__(self):
0.19 /testbed/sympy/core/numbers.py(3376):     def __neg__(self):
0.19 /testbed/sympy/core/numbers.py(3379):     def _eval_power(self, expt):
0.19 /testbed/sympy/core/numbers.py(3417):     def _as_mpf_val(self, prec):
0.19 /testbed/sympy/core/numbers.py(3420):     def __hash__(self):
0.19 /testbed/sympy/core/numbers.py(3423):     def __eq__(self, other):
0.19 /testbed/sympy/core/numbers.py(3426):     def __ne__(self, other):
0.19 /testbed/sympy/core/numbers.py(3429):     __gt__ = Expr.__gt__
0.19 /testbed/sympy/core/numbers.py(3430):     __ge__ = Expr.__ge__
0.19 /testbed/sympy/core/numbers.py(3431):     __lt__ = Expr.__lt__
0.19 /testbed/sympy/core/numbers.py(3432):     __le__ = Expr.__le__
0.19 /testbed/sympy/core/numbers.py(3434):     @_sympifyit('other', NotImplemented)
0.19 /testbed/sympy/core/numbers.py(3435):     def __mod__(self, other):
0.19 /testbed/sympy/core/numbers.py(3440):     __rmod__ = __mod__
0.19 /testbed/sympy/core/numbers.py(3442):     def floor(self):
0.19 /testbed/sympy/core/numbers.py(3445):     def ceiling(self):
0.19 /testbed/sympy/core/numbers.py(3448): oo = S.Infinity
0.19 /testbed/sympy/core/numbers.py(3451): class NegativeInfinity(Number, metaclass=Singleton):
0.19 /testbed/sympy/core/numbers.py(3451): class NegativeInfinity(Number, metaclass=Singleton):
0.19 /testbed/sympy/core/numbers.py(3452):     """Negative infinite quantity.
0.19 /testbed/sympy/core/numbers.py(3463):     is_extended_real = True
0.19 /testbed/sympy/core/numbers.py(3464):     is_complex = False
0.19 /testbed/sympy/core/numbers.py(3465):     is_commutative = True
0.19 /testbed/sympy/core/numbers.py(3466):     is_infinite = True
0.19 /testbed/sympy/core/numbers.py(3467):     is_comparable = True
0.19 /testbed/sympy/core/numbers.py(3468):     is_extended_negative = True
0.19 /testbed/sympy/core/numbers.py(3469):     is_number = True
0.19 /testbed/sympy/core/numbers.py(3470):     is_prime = False
0.19 /testbed/sympy/core/numbers.py(3472):     __slots__ = ()
0.19 /testbed/sympy/core/numbers.py(3474):     def __new__(cls):
0.19 /testbed/sympy/core/numbers.py(3477):     def _latex(self, printer):
0.19 /testbed/sympy/core/numbers.py(3480):     def _eval_subs(self, old, new):
0.19 /testbed/sympy/core/numbers.py(3484):     def _eval_evalf(self, prec=None):
0.19 /testbed/sympy/core/numbers.py(3487):     def evalf(self, prec=None, **options):
0.19 /testbed/sympy/core/numbers.py(3490):     @_sympifyit('other', NotImplemented)
0.19 /testbed/sympy/core/numbers.py(3491):     def __add__(self, other):
0.19 /testbed/sympy/core/numbers.py(3497):     __radd__ = __add__
0.19 /testbed/sympy/core/numbers.py(3499):     @_sympifyit('other', NotImplemented)
0.19 /testbed/sympy/core/numbers.py(3500):     def __sub__(self, other):
0.19 /testbed/sympy/core/numbers.py(3507):     @_sympifyit('other', NotImplemented)
0.19 /testbed/sympy/core/numbers.py(3508):     def __rsub__(self, other):
0.19 /testbed/sympy/core/numbers.py(3511):     @_sympifyit('other', NotImplemented)
0.19 /testbed/sympy/core/numbers.py(3512):     def __mul__(self, other):
0.19 /testbed/sympy/core/numbers.py(3520):     __rmul__ = __mul__
0.19 /testbed/sympy/core/numbers.py(3522):     @_sympifyit('other', NotImplemented)
0.19 /testbed/sympy/core/numbers.py(3523):     def __truediv__(self, other):
0.19 /testbed/sympy/core/numbers.py(3534):     def __abs__(self):
0.19 /testbed/sympy/core/numbers.py(3537):     def __neg__(self):
0.19 /testbed/sympy/core/numbers.py(3540):     def _eval_power(self, expt):
0.19 /testbed/sympy/core/numbers.py(3583):     def _as_mpf_val(self, prec):
0.19 /testbed/sympy/core/numbers.py(3586):     def __hash__(self):
0.19 /testbed/sympy/core/numbers.py(3589):     def __eq__(self, other):
0.19 /testbed/sympy/core/numbers.py(3592):     def __ne__(self, other):
0.19 /testbed/sympy/core/numbers.py(3595):     __gt__ = Expr.__gt__
0.19 /testbed/sympy/core/numbers.py(3596):     __ge__ = Expr.__ge__
0.19 /testbed/sympy/core/numbers.py(3597):     __lt__ = Expr.__lt__
0.19 /testbed/sympy/core/numbers.py(3598):     __le__ = Expr.__le__
0.19 /testbed/sympy/core/numbers.py(3600):     @_sympifyit('other', NotImplemented)
0.19 /testbed/sympy/core/numbers.py(3601):     def __mod__(self, other):
0.19 /testbed/sympy/core/numbers.py(3606):     __rmod__ = __mod__
0.19 /testbed/sympy/core/numbers.py(3608):     def floor(self):
0.19 /testbed/sympy/core/numbers.py(3611):     def ceiling(self):
0.19 /testbed/sympy/core/numbers.py(3614):     def as_powers_dict(self):
0.19 /testbed/sympy/core/numbers.py(3618): class NaN(Number, metaclass=Singleton):
0.19 /testbed/sympy/core/numbers.py(3618): class NaN(Number, metaclass=Singleton):
0.19 /testbed/sympy/core/numbers.py(3619):     """
0.19 /testbed/sympy/core/numbers.py(3666):     is_commutative = True
0.19 /testbed/sympy/core/numbers.py(3667):     is_extended_real = None
0.19 /testbed/sympy/core/numbers.py(3668):     is_real = None
0.19 /testbed/sympy/core/numbers.py(3669):     is_rational = None
0.19 /testbed/sympy/core/numbers.py(3670):     is_algebraic = None
0.19 /testbed/sympy/core/numbers.py(3671):     is_transcendental = None
0.19 /testbed/sympy/core/numbers.py(3672):     is_integer = None
0.19 /testbed/sympy/core/numbers.py(3673):     is_comparable = False
0.19 /testbed/sympy/core/numbers.py(3674):     is_finite = None
0.19 /testbed/sympy/core/numbers.py(3675):     is_zero = None
0.19 /testbed/sympy/core/numbers.py(3676):     is_prime = None
0.19 /testbed/sympy/core/numbers.py(3677):     is_positive = None
0.19 /testbed/sympy/core/numbers.py(3678):     is_negative = None
0.19 /testbed/sympy/core/numbers.py(3679):     is_number = True
0.19 /testbed/sympy/core/numbers.py(3681):     __slots__ = ()
0.19 /testbed/sympy/core/numbers.py(3683):     def __new__(cls):
0.19 /testbed/sympy/core/numbers.py(3686):     def _latex(self, printer):
0.19 /testbed/sympy/core/numbers.py(3689):     def __neg__(self):
0.19 /testbed/sympy/core/numbers.py(3692):     @_sympifyit('other', NotImplemented)
0.19 /testbed/sympy/core/numbers.py(3693):     def __add__(self, other):
0.19 /testbed/sympy/core/numbers.py(3696):     @_sympifyit('other', NotImplemented)
0.19 /testbed/sympy/core/numbers.py(3697):     def __sub__(self, other):
0.19 /testbed/sympy/core/numbers.py(3700):     @_sympifyit('other', NotImplemented)
0.19 /testbed/sympy/core/numbers.py(3701):     def __mul__(self, other):
0.19 /testbed/sympy/core/numbers.py(3704):     @_sympifyit('other', NotImplemented)
0.19 /testbed/sympy/core/numbers.py(3705):     def __truediv__(self, other):
0.19 /testbed/sympy/core/numbers.py(3708):     def floor(self):
0.19 /testbed/sympy/core/numbers.py(3711):     def ceiling(self):
0.19 /testbed/sympy/core/numbers.py(3714):     def _as_mpf_val(self, prec):
0.19 /testbed/sympy/core/numbers.py(3717):     def __hash__(self):
0.19 /testbed/sympy/core/numbers.py(3720):     def __eq__(self, other):
0.19 /testbed/sympy/core/numbers.py(3724):     def __ne__(self, other):
0.19 /testbed/sympy/core/numbers.py(3728):     __gt__ = Expr.__gt__
0.19 /testbed/sympy/core/numbers.py(3729):     __ge__ = Expr.__ge__
0.19 /testbed/sympy/core/numbers.py(3730):     __lt__ = Expr.__lt__
0.19 /testbed/sympy/core/numbers.py(3731):     __le__ = Expr.__le__
0.19 /testbed/sympy/core/numbers.py(3733): nan = S.NaN
0.19 /testbed/sympy/core/numbers.py(3735): @dispatch(NaN, Expr) # type:ignore
0.19 /testbed/sympy/core/numbers.py(3736): def _eval_is_eq(a, b): # noqa:F811
0.19 /testbed/sympy/core/numbers.py(3740): class ComplexInfinity(AtomicExpr, metaclass=Singleton):
0.19 /testbed/sympy/core/numbers.py(3740): class ComplexInfinity(AtomicExpr, metaclass=Singleton):
0.19 /testbed/sympy/core/numbers.py(3741):     r"""Complex infinity.
0.19 /testbed/sympy/core/numbers.py(3772):     is_commutative = True
0.19 /testbed/sympy/core/numbers.py(3773):     is_infinite = True
0.19 /testbed/sympy/core/numbers.py(3774):     is_number = True
0.19 /testbed/sympy/core/numbers.py(3775):     is_prime = False
0.19 /testbed/sympy/core/numbers.py(3776):     is_complex = False
0.19 /testbed/sympy/core/numbers.py(3777):     is_extended_real = False
0.19 /testbed/sympy/core/numbers.py(3779):     kind = NumberKind
0.19 /testbed/sympy/core/numbers.py(3781):     __slots__ = ()
0.19 /testbed/sympy/core/numbers.py(3783):     def __new__(cls):
0.19 /testbed/sympy/core/numbers.py(3786):     def _latex(self, printer):
0.19 /testbed/sympy/core/numbers.py(3789):     @staticmethod
0.19 /testbed/sympy/core/numbers.py(3790):     def __abs__():
0.19 /testbed/sympy/core/numbers.py(3793):     def floor(self):
0.19 /testbed/sympy/core/numbers.py(3796):     def ceiling(self):
0.19 /testbed/sympy/core/numbers.py(3799):     @staticmethod
0.19 /testbed/sympy/core/numbers.py(3800):     def __neg__():
0.19 /testbed/sympy/core/numbers.py(3803):     def _eval_power(self, expt):
0.19 /testbed/sympy/core/numbers.py(3817): zoo = S.ComplexInfinity
0.19 /testbed/sympy/core/numbers.py(3820): class NumberSymbol(AtomicExpr):
0.19 /testbed/sympy/core/numbers.py(3820): class NumberSymbol(AtomicExpr):
0.19 /testbed/sympy/core/numbers.py(3822):     is_commutative = True
0.19 /testbed/sympy/core/numbers.py(3823):     is_finite = True
0.19 /testbed/sympy/core/numbers.py(3824):     is_number = True
0.19 /testbed/sympy/core/numbers.py(3826):     __slots__ = ()
0.19 /testbed/sympy/core/numbers.py(3828):     is_NumberSymbol = True
0.19 /testbed/sympy/core/numbers.py(3830):     kind = NumberKind
0.19 /testbed/sympy/core/numbers.py(3832):     def __new__(cls):
0.19 /testbed/sympy/core/numbers.py(3835):     def approximation(self, number_cls):
0.19 /testbed/sympy/core/numbers.py(3841):     def _eval_evalf(self, prec):
0.19 /testbed/sympy/core/numbers.py(3844):     def __eq__(self, other):
0.19 /testbed/sympy/core/numbers.py(3856):     def __ne__(self, other):
0.19 /testbed/sympy/core/numbers.py(3859):     def __le__(self, other):
0.19 /testbed/sympy/core/numbers.py(3864):     def __ge__(self, other):
0.19 /testbed/sympy/core/numbers.py(3869):     def __int__(self):
0.19 /testbed/sympy/core/numbers.py(3873):     def __hash__(self):
0.19 /testbed/sympy/core/numbers.py(3877): class Exp1(NumberSymbol, metaclass=Singleton):
0.19 /testbed/sympy/core/numbers.py(3877): class Exp1(NumberSymbol, metaclass=Singleton):
0.19 /testbed/sympy/core/numbers.py(3878):     r"""The `e` constant.
0.19 /testbed/sympy/core/numbers.py(3905):     is_real = True
0.19 /testbed/sympy/core/numbers.py(3906):     is_positive = True
0.19 /testbed/sympy/core/numbers.py(3907):     is_negative = False  # XXX Forces is_negative/is_nonnegative
0.19 /testbed/sympy/core/numbers.py(3908):     is_irrational = True
0.19 /testbed/sympy/core/numbers.py(3909):     is_number = True
0.19 /testbed/sympy/core/numbers.py(3910):     is_algebraic = False
0.19 /testbed/sympy/core/numbers.py(3911):     is_transcendental = True
0.19 /testbed/sympy/core/numbers.py(3913):     __slots__ = ()
0.19 /testbed/sympy/core/numbers.py(3915):     def _latex(self, printer):
0.19 /testbed/sympy/core/numbers.py(3918):     @staticmethod
0.19 /testbed/sympy/core/numbers.py(3919):     def __abs__():
0.19 /testbed/sympy/core/numbers.py(3922):     def __int__(self):
0.19 /testbed/sympy/core/numbers.py(3925):     def _as_mpf_val(self, prec):
0.19 /testbed/sympy/core/numbers.py(3928):     def approximation_interval(self, number_cls):
0.19 /testbed/sympy/core/numbers.py(3934):     def _eval_power(self, expt):
0.19 /testbed/sympy/core/numbers.py(3941):     def _eval_power_exp_is_pow(self, arg):
0.19 /testbed/sympy/core/numbers.py(4021):     def _eval_rewrite_as_sin(self, **kwargs):
0.19 /testbed/sympy/core/numbers.py(4025):     def _eval_rewrite_as_cos(self, **kwargs):
0.19 /testbed/sympy/core/numbers.py(4029): E = S.Exp1
0.19 /testbed/sympy/core/numbers.py(4032): class Pi(NumberSymbol, metaclass=Singleton):
0.19 /testbed/sympy/core/numbers.py(4032): class Pi(NumberSymbol, metaclass=Singleton):
0.19 /testbed/sympy/core/numbers.py(4033):     r"""The `\pi` constant.
0.19 /testbed/sympy/core/numbers.py(4068):     is_real = True
0.19 /testbed/sympy/core/numbers.py(4069):     is_positive = True
0.19 /testbed/sympy/core/numbers.py(4070):     is_negative = False
0.19 /testbed/sympy/core/numbers.py(4071):     is_irrational = True
0.19 /testbed/sympy/core/numbers.py(4072):     is_number = True
0.19 /testbed/sympy/core/numbers.py(4073):     is_algebraic = False
0.19 /testbed/sympy/core/numbers.py(4074):     is_transcendental = True
0.19 /testbed/sympy/core/numbers.py(4076):     __slots__ = ()
0.19 /testbed/sympy/core/numbers.py(4078):     def _latex(self, printer):
0.19 /testbed/sympy/core/numbers.py(4081):     @staticmethod
0.19 /testbed/sympy/core/numbers.py(4082):     def __abs__():
0.19 /testbed/sympy/core/numbers.py(4085):     def __int__(self):
0.19 /testbed/sympy/core/numbers.py(4088):     def _as_mpf_val(self, prec):
0.19 /testbed/sympy/core/numbers.py(4091):     def approximation_interval(self, number_cls):
0.19 /testbed/sympy/core/numbers.py(4097): pi = S.Pi
0.19 /testbed/sympy/core/numbers.py(4100): class GoldenRatio(NumberSymbol, metaclass=Singleton):
0.19 /testbed/sympy/core/numbers.py(4100): class GoldenRatio(NumberSymbol, metaclass=Singleton):
0.19 /testbed/sympy/core/numbers.py(4101):     r"""The golden ratio, `\phi`.
0.19 /testbed/sympy/core/numbers.py(4129):     is_real = True
0.19 /testbed/sympy/core/numbers.py(4130):     is_positive = True
0.19 /testbed/sympy/core/numbers.py(4131):     is_negative = False
0.19 /testbed/sympy/core/numbers.py(4132):     is_irrational = True
0.19 /testbed/sympy/core/numbers.py(4133):     is_number = True
0.19 /testbed/sympy/core/numbers.py(4134):     is_algebraic = True
0.19 /testbed/sympy/core/numbers.py(4135):     is_transcendental = False
0.19 /testbed/sympy/core/numbers.py(4137):     __slots__ = ()
0.19 /testbed/sympy/core/numbers.py(4139):     def _latex(self, printer):
0.19 /testbed/sympy/core/numbers.py(4142):     def __int__(self):
0.19 /testbed/sympy/core/numbers.py(4145):     def _as_mpf_val(self, prec):
0.19 /testbed/sympy/core/numbers.py(4150):     def _eval_expand_func(self, **hints):
0.19 /testbed/sympy/core/numbers.py(4154):     def approximation_interval(self, number_cls):
0.19 /testbed/sympy/core/numbers.py(4160):     _eval_rewrite_as_sqrt = _eval_expand_func
0.19 /testbed/sympy/core/numbers.py(4163): class TribonacciConstant(NumberSymbol, metaclass=Singleton):
0.19 /testbed/sympy/core/numbers.py(4163): class TribonacciConstant(NumberSymbol, metaclass=Singleton):
0.19 /testbed/sympy/core/numbers.py(4164):     r"""The tribonacci constant.
0.19 /testbed/sympy/core/numbers.py(4200):     is_real = True
0.19 /testbed/sympy/core/numbers.py(4201):     is_positive = True
0.19 /testbed/sympy/core/numbers.py(4202):     is_negative = False
0.19 /testbed/sympy/core/numbers.py(4203):     is_irrational = True
0.19 /testbed/sympy/core/numbers.py(4204):     is_number = True
0.19 /testbed/sympy/core/numbers.py(4205):     is_algebraic = True
0.19 /testbed/sympy/core/numbers.py(4206):     is_transcendental = False
0.19 /testbed/sympy/core/numbers.py(4208):     __slots__ = ()
0.19 /testbed/sympy/core/numbers.py(4210):     def _latex(self, printer):
0.19 /testbed/sympy/core/numbers.py(4213):     def __int__(self):
0.19 /testbed/sympy/core/numbers.py(4216):     def _eval_evalf(self, prec):
0.19 /testbed/sympy/core/numbers.py(4220):     def _eval_expand_func(self, **hints):
0.19 /testbed/sympy/core/numbers.py(4224):     def approximation_interval(self, number_cls):
0.19 /testbed/sympy/core/numbers.py(4230):     _eval_rewrite_as_sqrt = _eval_expand_func
0.19 /testbed/sympy/core/numbers.py(4233): class EulerGamma(NumberSymbol, metaclass=Singleton):
0.19 /testbed/sympy/core/numbers.py(4233): class EulerGamma(NumberSymbol, metaclass=Singleton):
0.19 /testbed/sympy/core/numbers.py(4234):     r"""The Euler-Mascheroni constant.
0.19 /testbed/sympy/core/numbers.py(4265):     is_real = True
0.19 /testbed/sympy/core/numbers.py(4266):     is_positive = True
0.19 /testbed/sympy/core/numbers.py(4267):     is_negative = False
0.19 /testbed/sympy/core/numbers.py(4268):     is_irrational = None
0.19 /testbed/sympy/core/numbers.py(4269):     is_number = True
0.19 /testbed/sympy/core/numbers.py(4271):     __slots__ = ()
0.19 /testbed/sympy/core/numbers.py(4273):     def _latex(self, printer):
0.19 /testbed/sympy/core/numbers.py(4276):     def __int__(self):
0.19 /testbed/sympy/core/numbers.py(4279):     def _as_mpf_val(self, prec):
0.19 /testbed/sympy/core/numbers.py(4285):     def approximation_interval(self, number_cls):
0.19 /testbed/sympy/core/numbers.py(4292): class Catalan(NumberSymbol, metaclass=Singleton):
0.19 /testbed/sympy/core/numbers.py(4292): class Catalan(NumberSymbol, metaclass=Singleton):
0.19 /testbed/sympy/core/numbers.py(4293):     r"""Catalan's constant.
0.19 /testbed/sympy/core/numbers.py(4320):     is_real = True
0.19 /testbed/sympy/core/numbers.py(4321):     is_positive = True
0.19 /testbed/sympy/core/numbers.py(4322):     is_negative = False
0.19 /testbed/sympy/core/numbers.py(4323):     is_irrational = None
0.19 /testbed/sympy/core/numbers.py(4324):     is_number = True
0.19 /testbed/sympy/core/numbers.py(4326):     __slots__ = ()
0.19 /testbed/sympy/core/numbers.py(4328):     def __int__(self):
0.19 /testbed/sympy/core/numbers.py(4331):     def _as_mpf_val(self, prec):
0.19 /testbed/sympy/core/numbers.py(4337):     def approximation_interval(self, number_cls):
0.19 /testbed/sympy/core/numbers.py(4343):     def _eval_rewrite_as_Sum(self, k_sym=None, symbols=None):
0.19 /testbed/sympy/core/numbers.py(4351):     def _latex(self, printer):
0.19 /testbed/sympy/core/numbers.py(4355): class ImaginaryUnit(AtomicExpr, metaclass=Singleton):
0.19 /testbed/sympy/core/numbers.py(4355): class ImaginaryUnit(AtomicExpr, metaclass=Singleton):
0.19 /testbed/sympy/core/numbers.py(4356):     r"""The imaginary unit, `i = \sqrt{-1}`.
0.19 /testbed/sympy/core/numbers.py(4378):     is_commutative = True
0.19 /testbed/sympy/core/numbers.py(4379):     is_imaginary = True
0.19 /testbed/sympy/core/numbers.py(4380):     is_finite = True
0.19 /testbed/sympy/core/numbers.py(4381):     is_number = True
0.19 /testbed/sympy/core/numbers.py(4382):     is_algebraic = True
0.19 /testbed/sympy/core/numbers.py(4383):     is_transcendental = False
0.19 /testbed/sympy/core/numbers.py(4385):     kind = NumberKind
0.19 /testbed/sympy/core/numbers.py(4387):     __slots__ = ()
0.19 /testbed/sympy/core/numbers.py(4389):     def _latex(self, printer):
0.19 /testbed/sympy/core/numbers.py(4392):     @staticmethod
0.19 /testbed/sympy/core/numbers.py(4393):     def __abs__():
0.19 /testbed/sympy/core/numbers.py(4396):     def _eval_evalf(self, prec):
0.19 /testbed/sympy/core/numbers.py(4399):     def _eval_conjugate(self):
0.19 /testbed/sympy/core/numbers.py(4402):     def _eval_power(self, expt):
0.19 /testbed/sympy/core/numbers.py(4431):     def as_base_exp(self):
0.19 /testbed/sympy/core/numbers.py(4434):     @property
0.19 /testbed/sympy/core/numbers.py(4435):     def _mpc_(self):
0.19 /testbed/sympy/core/numbers.py(4438): I = S.ImaginaryUnit
0.19 /testbed/sympy/core/numbers.py(4440): @dispatch(Tuple, Number) # type:ignore
0.19 /testbed/sympy/core/numbers.py(4441): def _eval_is_eq(self, other): # noqa: F811
0.19 /testbed/sympy/core/numbers.py(4444): def sympify_fractions(f):
0.19 /testbed/sympy/core/numbers.py(4447): _sympy_converter[fractions.Fraction] = sympify_fractions
0.19 /testbed/sympy/core/numbers.py(4449): if HAS_GMPY:
0.19 /testbed/sympy/core/numbers.py(4463): def sympify_mpmath_mpq(x):
0.19 /testbed/sympy/core/numbers.py(4467): _sympy_converter[type(mpmath.rational.mpq(1, 2))] = sympify_mpmath_mpq
0.19 /testbed/sympy/core/numbers.py(4470): def sympify_mpmath(x):
0.19 /testbed/sympy/core/numbers.py(4473): _sympy_converter[mpnumeric] = sympify_mpmath
0.19 /testbed/sympy/core/numbers.py(4476): def sympify_complex(a):
0.19 /testbed/sympy/core/numbers.py(4480): _sympy_converter[complex] = sympify_complex
0.19 /testbed/sympy/core/numbers.py(4482): from .power import Pow, integer_nthroot
0.24 /testbed/sympy/core/numbers.py(4483): from .mul import Mul
0.24 /testbed/sympy/core/numbers.py(4484): Mul.identity = One()
0.24 /testbed/sympy/core/numbers.py(4485): from .add import Add
0.24 /testbed/sympy/core/numbers.py(4486): Add.identity = Zero()
0.24 /testbed/sympy/core/numbers.py(4488): def _register_classes():
0.24 /testbed/sympy/core/numbers.py(4494): _register_classes()
0.24 /testbed/sympy/core/numbers.py(4489):     numbers.Number.register(Number)
0.24 /testbed/sympy/core/numbers.py(4490):     numbers.Real.register(Float)
0.24 /testbed/sympy/core/numbers.py(4491):     numbers.Rational.register(Rational)
0.24 /testbed/sympy/core/numbers.py(4492):     numbers.Integral.register(Integer)
0.24 /testbed/sympy/core/numbers.py(4496): _illegal = (S.NaN, S.Infinity, S.NegativeInfinity, S.ComplexInfinity)
0.29 /testbed/sympy/core/numbers.py(679):         return mlib.to_float(self._as_mpf_val(53))
0.29 /testbed/sympy/core/numbers.py(3418):         return mlib.finf
0.29 /testbed/sympy/core/numbers.py(679):         return mlib.to_float(self._as_mpf_val(53))
0.29 /testbed/sympy/core/numbers.py(3584):         return mlib.fninf
0.34 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.34 /testbed/sympy/core/numbers.py(2097):         try:
0.34 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.34 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.34 /testbed/sympy/core/numbers.py(2106):         if ival == -1:
0.34 /testbed/sympy/core/numbers.py(2108):         if ival == 0:
0.34 /testbed/sympy/core/numbers.py(2109):             return S.Zero
0.34 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.34 /testbed/sympy/core/numbers.py(2097):         try:
0.34 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.34 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.34 /testbed/sympy/core/numbers.py(2105):             return S.One
0.36 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.36 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.36 /testbed/sympy/core/numbers.py(2246):         return Rational.__eq__(self, other)
0.36 /testbed/sympy/core/numbers.py(1871):         try:
0.36 /testbed/sympy/core/numbers.py(1872):             other = _sympify(other)
0.36 /testbed/sympy/core/numbers.py(1873):         except SympifyError:
0.36 /testbed/sympy/core/numbers.py(1874):             return NotImplemented
0.36 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.36 /testbed/sympy/core/numbers.py(2097):         try:
0.36 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.36 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.36 /testbed/sympy/core/numbers.py(2105):             return S.One
0.36 /testbed/sympy/core/numbers.py(714):         return self.class_key(), (0, ()), (), self
0.36 /testbed/sympy/core/numbers.py(710):         return 1, 0, 'Number'
0.36 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.36 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.36 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.36 /testbed/sympy/core/numbers.py(2097):         try:
0.36 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.36 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.36 /testbed/sympy/core/numbers.py(2106):         if ival == -1:
0.36 /testbed/sympy/core/numbers.py(2108):         if ival == 0:
0.36 /testbed/sympy/core/numbers.py(2110):         obj = Expr.__new__(cls)
0.36 /testbed/sympy/core/numbers.py(2111):         obj.p = ival
0.36 /testbed/sympy/core/numbers.py(2112):         return obj
0.36 /testbed/sympy/core/numbers.py(714):         return self.class_key(), (0, ()), (), self
0.36 /testbed/sympy/core/numbers.py(710):         return 1, 0, 'Number'
0.36 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.36 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.36 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.36 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.36 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.36 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.36 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.36 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.36 /testbed/sympy/core/numbers.py(2252):         try:
0.36 /testbed/sympy/core/numbers.py(2253):             other = _sympify(other)
0.36 /testbed/sympy/core/numbers.py(2256):         if other.is_Integer:
0.36 /testbed/sympy/core/numbers.py(2257):             return _sympify(self.p > other.p)
0.36 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.36 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.36 /testbed/sympy/core/numbers.py(2246):         return Rational.__eq__(self, other)
0.36 /testbed/sympy/core/numbers.py(1871):         try:
0.36 /testbed/sympy/core/numbers.py(1872):             other = _sympify(other)
0.36 /testbed/sympy/core/numbers.py(1873):         except SympifyError:
0.36 /testbed/sympy/core/numbers.py(1874):             return NotImplemented
0.36 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.36 /testbed/sympy/core/numbers.py(2097):         try:
0.36 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.36 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.36 /testbed/sympy/core/numbers.py(2105):             return S.One
0.36 /testbed/sympy/core/numbers.py(714):         return self.class_key(), (0, ()), (), self
0.36 /testbed/sympy/core/numbers.py(710):         return 1, 0, 'Number'
0.36 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.36 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.36 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.36 /testbed/sympy/core/numbers.py(2097):         try:
0.36 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.36 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.36 /testbed/sympy/core/numbers.py(2106):         if ival == -1:
0.36 /testbed/sympy/core/numbers.py(2108):         if ival == 0:
0.36 /testbed/sympy/core/numbers.py(2110):         obj = Expr.__new__(cls)
0.36 /testbed/sympy/core/numbers.py(2111):         obj.p = ival
0.36 /testbed/sympy/core/numbers.py(2112):         return obj
0.36 /testbed/sympy/core/numbers.py(714):         return self.class_key(), (0, ()), (), self
0.36 /testbed/sympy/core/numbers.py(710):         return 1, 0, 'Number'
0.36 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.36 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.36 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.36 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.36 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.36 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.36 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.36 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.36 /testbed/sympy/core/numbers.py(2252):         try:
0.36 /testbed/sympy/core/numbers.py(2253):             other = _sympify(other)
0.36 /testbed/sympy/core/numbers.py(2256):         if other.is_Integer:
0.36 /testbed/sympy/core/numbers.py(2257):             return _sympify(self.p > other.p)
0.46 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.46 /testbed/sympy/core/numbers.py(2097):         try:
0.46 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.46 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.46 /testbed/sympy/core/numbers.py(2105):             return S.One
0.46 /testbed/sympy/core/numbers.py(714):         return self.class_key(), (0, ()), (), self
0.46 /testbed/sympy/core/numbers.py(710):         return 1, 0, 'Number'
0.46 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.46 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.46 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.46 /testbed/sympy/core/numbers.py(2097):         try:
0.46 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.46 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.46 /testbed/sympy/core/numbers.py(2106):         if ival == -1:
0.46 /testbed/sympy/core/numbers.py(2108):         if ival == 0:
0.46 /testbed/sympy/core/numbers.py(2110):         obj = Expr.__new__(cls)
0.46 /testbed/sympy/core/numbers.py(2111):         obj.p = ival
0.46 /testbed/sympy/core/numbers.py(2112):         return obj
0.46 /testbed/sympy/core/numbers.py(714):         return self.class_key(), (0, ()), (), self
0.46 /testbed/sympy/core/numbers.py(710):         return 1, 0, 'Number'
0.46 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.46 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.46 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.46 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.46 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.46 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.46 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.46 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.46 /testbed/sympy/core/numbers.py(2252):         try:
0.46 /testbed/sympy/core/numbers.py(2253):             other = _sympify(other)
0.46 /testbed/sympy/core/numbers.py(2256):         if other.is_Integer:
0.46 /testbed/sympy/core/numbers.py(2257):             return _sympify(self.p > other.p)
0.46 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.46 /testbed/sympy/core/numbers.py(2097):         try:
0.46 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.46 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.46 /testbed/sympy/core/numbers.py(2106):         if ival == -1:
0.46 /testbed/sympy/core/numbers.py(2107):             return S.NegativeOne
0.46 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.46 /testbed/sympy/core/numbers.py(2097):         try:
0.46 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.46 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.46 /testbed/sympy/core/numbers.py(2105):             return S.One
0.46 /testbed/sympy/core/numbers.py(714):         return self.class_key(), (0, ()), (), self
0.46 /testbed/sympy/core/numbers.py(710):         return 1, 0, 'Number'
0.46 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.46 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.46 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.46 /testbed/sympy/core/numbers.py(2097):         try:
0.46 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.46 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.46 /testbed/sympy/core/numbers.py(2106):         if ival == -1:
0.46 /testbed/sympy/core/numbers.py(2108):         if ival == 0:
0.46 /testbed/sympy/core/numbers.py(2110):         obj = Expr.__new__(cls)
0.46 /testbed/sympy/core/numbers.py(2111):         obj.p = ival
0.46 /testbed/sympy/core/numbers.py(2112):         return obj
0.46 /testbed/sympy/core/numbers.py(714):         return self.class_key(), (0, ()), (), self
0.46 /testbed/sympy/core/numbers.py(710):         return 1, 0, 'Number'
0.46 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.46 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.46 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.46 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.46 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.46 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.46 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.46 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.46 /testbed/sympy/core/numbers.py(2252):         try:
0.46 /testbed/sympy/core/numbers.py(2253):             other = _sympify(other)
0.46 /testbed/sympy/core/numbers.py(2256):         if other.is_Integer:
0.46 /testbed/sympy/core/numbers.py(2257):             return _sympify(self.p > other.p)
0.46 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.46 /testbed/sympy/core/numbers.py(2097):         try:
0.46 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.46 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.46 /testbed/sympy/core/numbers.py(2105):             return S.One
0.46 /testbed/sympy/core/numbers.py(714):         return self.class_key(), (0, ()), (), self
0.46 /testbed/sympy/core/numbers.py(710):         return 1, 0, 'Number'
0.46 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.46 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.46 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.46 /testbed/sympy/core/numbers.py(2097):         try:
0.46 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.46 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.46 /testbed/sympy/core/numbers.py(2106):         if ival == -1:
0.46 /testbed/sympy/core/numbers.py(2108):         if ival == 0:
0.46 /testbed/sympy/core/numbers.py(2110):         obj = Expr.__new__(cls)
0.46 /testbed/sympy/core/numbers.py(2111):         obj.p = ival
0.46 /testbed/sympy/core/numbers.py(2112):         return obj
0.46 /testbed/sympy/core/numbers.py(714):         return self.class_key(), (0, ()), (), self
0.46 /testbed/sympy/core/numbers.py(710):         return 1, 0, 'Number'
0.46 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.46 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.46 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.46 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.46 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.46 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.46 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.46 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.46 /testbed/sympy/core/numbers.py(2252):         try:
0.46 /testbed/sympy/core/numbers.py(2253):             other = _sympify(other)
0.46 /testbed/sympy/core/numbers.py(2256):         if other.is_Integer:
0.46 /testbed/sympy/core/numbers.py(2257):             return _sympify(self.p > other.p)
0.47 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.47 /testbed/sympy/core/numbers.py(2097):         try:
0.47 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.47 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.47 /testbed/sympy/core/numbers.py(2106):         if ival == -1:
0.47 /testbed/sympy/core/numbers.py(2108):         if ival == 0:
0.47 /testbed/sympy/core/numbers.py(2110):         obj = Expr.__new__(cls)
0.47 /testbed/sympy/core/numbers.py(2111):         obj.p = ival
0.47 /testbed/sympy/core/numbers.py(2112):         return obj
0.47 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.47 /testbed/sympy/core/numbers.py(2243):             return (self.p == other)
0.47 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.47 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.47 /testbed/sympy/core/numbers.py(2246):         return Rational.__eq__(self, other)
0.47 /testbed/sympy/core/numbers.py(1871):         try:
0.47 /testbed/sympy/core/numbers.py(1872):             other = _sympify(other)
0.47 /testbed/sympy/core/numbers.py(1875):         if not isinstance(other, Number):
0.47 /testbed/sympy/core/numbers.py(1879):         if not self:
0.47 /testbed/sympy/core/numbers.py(1881):         if other.is_NumberSymbol:
0.47 /testbed/sympy/core/numbers.py(1885):         if other.is_Rational:
0.47 /testbed/sympy/core/numbers.py(1889):         if other.is_Float:
0.47 /testbed/sympy/core/numbers.py(1915):         return False
0.47 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.47 /testbed/sympy/core/numbers.py(2097):         try:
0.47 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.47 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.47 /testbed/sympy/core/numbers.py(2105):             return S.One
0.47 /testbed/sympy/core/numbers.py(714):         return self.class_key(), (0, ()), (), self
0.47 /testbed/sympy/core/numbers.py(710):         return 1, 0, 'Number'
0.47 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.47 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.47 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.47 /testbed/sympy/core/numbers.py(2097):         try:
0.47 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.47 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.47 /testbed/sympy/core/numbers.py(2106):         if ival == -1:
0.47 /testbed/sympy/core/numbers.py(2108):         if ival == 0:
0.47 /testbed/sympy/core/numbers.py(2110):         obj = Expr.__new__(cls)
0.47 /testbed/sympy/core/numbers.py(2111):         obj.p = ival
0.47 /testbed/sympy/core/numbers.py(2112):         return obj
0.47 /testbed/sympy/core/numbers.py(714):         return self.class_key(), (0, ()), (), self
0.47 /testbed/sympy/core/numbers.py(710):         return 1, 0, 'Number'
0.47 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.47 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.47 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.47 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.47 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.47 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.47 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.47 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.47 /testbed/sympy/core/numbers.py(2252):         try:
0.47 /testbed/sympy/core/numbers.py(2253):             other = _sympify(other)
0.47 /testbed/sympy/core/numbers.py(2256):         if other.is_Integer:
0.47 /testbed/sympy/core/numbers.py(2257):             return _sympify(self.p > other.p)
0.47 /testbed/sympy/core/numbers.py(1590):         if q is None:
0.47 /testbed/sympy/core/numbers.py(1628):         if not isinstance(p, SYMPY_INTS):
0.47 /testbed/sympy/core/numbers.py(1633):             p = int(p)
0.47 /testbed/sympy/core/numbers.py(1635):         if not isinstance(q, SYMPY_INTS):
0.47 /testbed/sympy/core/numbers.py(1640):             q = int(q)
0.47 /testbed/sympy/core/numbers.py(1643):         if q == 0:
0.47 /testbed/sympy/core/numbers.py(1650):         if q < 0:
0.47 /testbed/sympy/core/numbers.py(1653):         if not gcd:
0.47 /testbed/sympy/core/numbers.py(1654):             gcd = igcd(abs(p), q)
0.47 /testbed/sympy/core/numbers.py(254):     if len(args) < 2:
0.47 /testbed/sympy/core/numbers.py(257):     args_temp = [abs(as_int(i)) for i in args]
0.47 /testbed/sympy/core/numbers.py(257):     args_temp = [abs(as_int(i)) for i in args]
0.47 /testbed/sympy/core/numbers.py(257):     args_temp = [abs(as_int(i)) for i in args]
0.47 /testbed/sympy/core/numbers.py(257):     args_temp = [abs(as_int(i)) for i in args]
0.47 /testbed/sympy/core/numbers.py(258):     if 1 in args_temp:
0.47 /testbed/sympy/core/numbers.py(259):         return 1
0.47 /testbed/sympy/core/numbers.py(1655):         if gcd > 1:
0.47 /testbed/sympy/core/numbers.py(1658):         if q == 1:
0.47 /testbed/sympy/core/numbers.py(1660):         if p == 1 and q == 2:
0.47 /testbed/sympy/core/numbers.py(1662):         obj = Expr.__new__(cls)
0.47 /testbed/sympy/core/numbers.py(1663):         obj.p = p
0.47 /testbed/sympy/core/numbers.py(1664):         obj.q = q
0.47 /testbed/sympy/core/numbers.py(1665):         return obj
0.47 /testbed/sympy/core/numbers.py(1590):         if q is None:
0.47 /testbed/sympy/core/numbers.py(1628):         if not isinstance(p, SYMPY_INTS):
0.47 /testbed/sympy/core/numbers.py(1633):             p = int(p)
0.47 /testbed/sympy/core/numbers.py(1635):         if not isinstance(q, SYMPY_INTS):
0.47 /testbed/sympy/core/numbers.py(1640):             q = int(q)
0.47 /testbed/sympy/core/numbers.py(1643):         if q == 0:
0.47 /testbed/sympy/core/numbers.py(1650):         if q < 0:
0.47 /testbed/sympy/core/numbers.py(1653):         if not gcd:
0.47 /testbed/sympy/core/numbers.py(1654):             gcd = igcd(abs(p), q)
0.47 /testbed/sympy/core/numbers.py(254):     if len(args) < 2:
0.47 /testbed/sympy/core/numbers.py(257):     args_temp = [abs(as_int(i)) for i in args]
0.47 /testbed/sympy/core/numbers.py(257):     args_temp = [abs(as_int(i)) for i in args]
0.47 /testbed/sympy/core/numbers.py(257):     args_temp = [abs(as_int(i)) for i in args]
0.47 /testbed/sympy/core/numbers.py(257):     args_temp = [abs(as_int(i)) for i in args]
0.47 /testbed/sympy/core/numbers.py(258):     if 1 in args_temp:
0.47 /testbed/sympy/core/numbers.py(259):         return 1
0.47 /testbed/sympy/core/numbers.py(1655):         if gcd > 1:
0.47 /testbed/sympy/core/numbers.py(1658):         if q == 1:
0.47 /testbed/sympy/core/numbers.py(1660):         if p == 1 and q == 2:
0.47 /testbed/sympy/core/numbers.py(1662):         obj = Expr.__new__(cls)
0.47 /testbed/sympy/core/numbers.py(1663):         obj.p = p
0.47 /testbed/sympy/core/numbers.py(1664):         obj.q = q
0.47 /testbed/sympy/core/numbers.py(1665):         return obj
0.47 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.47 /testbed/sympy/core/numbers.py(2097):         try:
0.47 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.47 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.47 /testbed/sympy/core/numbers.py(2105):             return S.One
0.47 /testbed/sympy/core/numbers.py(714):         return self.class_key(), (0, ()), (), self
0.47 /testbed/sympy/core/numbers.py(710):         return 1, 0, 'Number'
0.47 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.47 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.47 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.47 /testbed/sympy/core/numbers.py(2097):         try:
0.47 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.47 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.47 /testbed/sympy/core/numbers.py(2106):         if ival == -1:
0.47 /testbed/sympy/core/numbers.py(2108):         if ival == 0:
0.47 /testbed/sympy/core/numbers.py(2110):         obj = Expr.__new__(cls)
0.47 /testbed/sympy/core/numbers.py(2111):         obj.p = ival
0.47 /testbed/sympy/core/numbers.py(2112):         return obj
0.47 /testbed/sympy/core/numbers.py(714):         return self.class_key(), (0, ()), (), self
0.47 /testbed/sympy/core/numbers.py(710):         return 1, 0, 'Number'
0.47 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.47 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.47 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.47 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.47 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.47 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.47 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.47 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.47 /testbed/sympy/core/numbers.py(2252):         try:
0.47 /testbed/sympy/core/numbers.py(2253):             other = _sympify(other)
0.47 /testbed/sympy/core/numbers.py(2256):         if other.is_Integer:
0.47 /testbed/sympy/core/numbers.py(2257):             return _sympify(self.p > other.p)
0.47 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.47 /testbed/sympy/core/numbers.py(2097):         try:
0.47 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.47 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.47 /testbed/sympy/core/numbers.py(2105):             return S.One
0.47 /testbed/sympy/core/numbers.py(714):         return self.class_key(), (0, ()), (), self
0.47 /testbed/sympy/core/numbers.py(710):         return 1, 0, 'Number'
0.47 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.47 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.47 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.47 /testbed/sympy/core/numbers.py(2097):         try:
0.47 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.47 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.47 /testbed/sympy/core/numbers.py(2106):         if ival == -1:
0.47 /testbed/sympy/core/numbers.py(2108):         if ival == 0:
0.47 /testbed/sympy/core/numbers.py(2110):         obj = Expr.__new__(cls)
0.47 /testbed/sympy/core/numbers.py(2111):         obj.p = ival
0.47 /testbed/sympy/core/numbers.py(2112):         return obj
0.47 /testbed/sympy/core/numbers.py(714):         return self.class_key(), (0, ()), (), self
0.47 /testbed/sympy/core/numbers.py(710):         return 1, 0, 'Number'
0.47 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.47 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.47 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.47 /testbed/sympy/core/numbers.py(2097):         try:
0.47 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.47 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.47 /testbed/sympy/core/numbers.py(2106):         if ival == -1:
0.47 /testbed/sympy/core/numbers.py(2108):         if ival == 0:
0.47 /testbed/sympy/core/numbers.py(2110):         obj = Expr.__new__(cls)
0.47 /testbed/sympy/core/numbers.py(2111):         obj.p = ival
0.47 /testbed/sympy/core/numbers.py(2112):         return obj
0.47 /testbed/sympy/core/numbers.py(714):         return self.class_key(), (0, ()), (), self
0.47 /testbed/sympy/core/numbers.py(710):         return 1, 0, 'Number'
0.47 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.47 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.47 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.47 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.47 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.47 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.47 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.47 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.47 /testbed/sympy/core/numbers.py(2252):         try:
0.47 /testbed/sympy/core/numbers.py(2253):             other = _sympify(other)
0.47 /testbed/sympy/core/numbers.py(2256):         if other.is_Integer:
0.47 /testbed/sympy/core/numbers.py(2257):             return _sympify(self.p > other.p)
0.47 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.47 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.47 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.47 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.47 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.47 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.47 /testbed/sympy/core/numbers.py(2261):         try:
0.47 /testbed/sympy/core/numbers.py(2262):             other = _sympify(other)
0.47 /testbed/sympy/core/numbers.py(2265):         if other.is_Integer:
0.47 /testbed/sympy/core/numbers.py(2266):             return _sympify(self.p < other.p)
0.47 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.47 /testbed/sympy/core/numbers.py(2097):         try:
0.47 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.47 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.47 /testbed/sympy/core/numbers.py(2105):             return S.One
0.47 /testbed/sympy/core/numbers.py(714):         return self.class_key(), (0, ()), (), self
0.47 /testbed/sympy/core/numbers.py(710):         return 1, 0, 'Number'
0.47 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.47 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.47 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.47 /testbed/sympy/core/numbers.py(2097):         try:
0.47 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.47 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.47 /testbed/sympy/core/numbers.py(2106):         if ival == -1:
0.47 /testbed/sympy/core/numbers.py(2108):         if ival == 0:
0.47 /testbed/sympy/core/numbers.py(2110):         obj = Expr.__new__(cls)
0.47 /testbed/sympy/core/numbers.py(2111):         obj.p = ival
0.47 /testbed/sympy/core/numbers.py(2112):         return obj
0.47 /testbed/sympy/core/numbers.py(714):         return self.class_key(), (0, ()), (), self
0.47 /testbed/sympy/core/numbers.py(710):         return 1, 0, 'Number'
0.47 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.47 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.47 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.47 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.47 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.47 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.47 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.47 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.47 /testbed/sympy/core/numbers.py(2252):         try:
0.47 /testbed/sympy/core/numbers.py(2253):             other = _sympify(other)
0.47 /testbed/sympy/core/numbers.py(2256):         if other.is_Integer:
0.47 /testbed/sympy/core/numbers.py(2257):             return _sympify(self.p > other.p)
0.47 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.47 /testbed/sympy/core/numbers.py(2097):         try:
0.47 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.47 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.47 /testbed/sympy/core/numbers.py(2105):             return S.One
0.47 /testbed/sympy/core/numbers.py(714):         return self.class_key(), (0, ()), (), self
0.47 /testbed/sympy/core/numbers.py(710):         return 1, 0, 'Number'
0.47 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.47 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.47 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.47 /testbed/sympy/core/numbers.py(2097):         try:
0.47 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.47 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.47 /testbed/sympy/core/numbers.py(2106):         if ival == -1:
0.47 /testbed/sympy/core/numbers.py(2108):         if ival == 0:
0.47 /testbed/sympy/core/numbers.py(2110):         obj = Expr.__new__(cls)
0.47 /testbed/sympy/core/numbers.py(2111):         obj.p = ival
0.47 /testbed/sympy/core/numbers.py(2112):         return obj
0.47 /testbed/sympy/core/numbers.py(714):         return self.class_key(), (0, ()), (), self
0.47 /testbed/sympy/core/numbers.py(710):         return 1, 0, 'Number'
0.47 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.47 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.47 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.47 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.47 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.47 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.47 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.47 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.47 /testbed/sympy/core/numbers.py(2252):         try:
0.47 /testbed/sympy/core/numbers.py(2253):             other = _sympify(other)
0.47 /testbed/sympy/core/numbers.py(2256):         if other.is_Integer:
0.47 /testbed/sympy/core/numbers.py(2257):             return _sympify(self.p > other.p)
0.47 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.47 /testbed/sympy/core/numbers.py(2097):         try:
0.47 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.47 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.47 /testbed/sympy/core/numbers.py(2105):             return S.One
0.47 /testbed/sympy/core/numbers.py(714):         return self.class_key(), (0, ()), (), self
0.47 /testbed/sympy/core/numbers.py(710):         return 1, 0, 'Number'
0.47 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.47 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.47 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.47 /testbed/sympy/core/numbers.py(2097):         try:
0.47 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.47 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.47 /testbed/sympy/core/numbers.py(2106):         if ival == -1:
0.47 /testbed/sympy/core/numbers.py(2108):         if ival == 0:
0.47 /testbed/sympy/core/numbers.py(2110):         obj = Expr.__new__(cls)
0.47 /testbed/sympy/core/numbers.py(2111):         obj.p = ival
0.47 /testbed/sympy/core/numbers.py(2112):         return obj
0.47 /testbed/sympy/core/numbers.py(714):         return self.class_key(), (0, ()), (), self
0.47 /testbed/sympy/core/numbers.py(710):         return 1, 0, 'Number'
0.47 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.47 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.47 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.47 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.47 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.47 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.47 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.47 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.47 /testbed/sympy/core/numbers.py(2252):         try:
0.47 /testbed/sympy/core/numbers.py(2253):             other = _sympify(other)
0.47 /testbed/sympy/core/numbers.py(2256):         if other.is_Integer:
0.47 /testbed/sympy/core/numbers.py(2257):             return _sympify(self.p > other.p)
0.52 /testbed/sympy/core/numbers.py(3148):         return S.NegativeOne
0.53 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.53 /testbed/sympy/core/numbers.py(2097):         try:
0.53 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.53 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.53 /testbed/sympy/core/numbers.py(2105):             return S.One
0.53 /testbed/sympy/core/numbers.py(714):         return self.class_key(), (0, ()), (), self
0.53 /testbed/sympy/core/numbers.py(710):         return 1, 0, 'Number'
0.53 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.53 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.53 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.53 /testbed/sympy/core/numbers.py(2097):         try:
0.53 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.53 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.53 /testbed/sympy/core/numbers.py(2106):         if ival == -1:
0.53 /testbed/sympy/core/numbers.py(2108):         if ival == 0:
0.53 /testbed/sympy/core/numbers.py(2110):         obj = Expr.__new__(cls)
0.53 /testbed/sympy/core/numbers.py(2111):         obj.p = ival
0.53 /testbed/sympy/core/numbers.py(2112):         return obj
0.53 /testbed/sympy/core/numbers.py(714):         return self.class_key(), (0, ()), (), self
0.53 /testbed/sympy/core/numbers.py(710):         return 1, 0, 'Number'
0.53 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.53 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.53 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.53 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.53 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.53 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.53 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.53 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.53 /testbed/sympy/core/numbers.py(2252):         try:
0.53 /testbed/sympy/core/numbers.py(2253):             other = _sympify(other)
0.53 /testbed/sympy/core/numbers.py(2256):         if other.is_Integer:
0.53 /testbed/sympy/core/numbers.py(2257):             return _sympify(self.p > other.p)
0.53 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.53 /testbed/sympy/core/numbers.py(2097):         try:
0.53 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.53 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.53 /testbed/sympy/core/numbers.py(2105):             return S.One
0.53 /testbed/sympy/core/numbers.py(714):         return self.class_key(), (0, ()), (), self
0.53 /testbed/sympy/core/numbers.py(710):         return 1, 0, 'Number'
0.53 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.53 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.53 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.53 /testbed/sympy/core/numbers.py(2097):         try:
0.53 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.53 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.53 /testbed/sympy/core/numbers.py(2106):         if ival == -1:
0.53 /testbed/sympy/core/numbers.py(2108):         if ival == 0:
0.53 /testbed/sympy/core/numbers.py(2110):         obj = Expr.__new__(cls)
0.53 /testbed/sympy/core/numbers.py(2111):         obj.p = ival
0.53 /testbed/sympy/core/numbers.py(2112):         return obj
0.53 /testbed/sympy/core/numbers.py(714):         return self.class_key(), (0, ()), (), self
0.53 /testbed/sympy/core/numbers.py(710):         return 1, 0, 'Number'
0.53 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.53 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.53 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.53 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.53 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.53 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.53 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.53 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.53 /testbed/sympy/core/numbers.py(2252):         try:
0.53 /testbed/sympy/core/numbers.py(2253):             other = _sympify(other)
0.53 /testbed/sympy/core/numbers.py(2256):         if other.is_Integer:
0.53 /testbed/sympy/core/numbers.py(2257):             return _sympify(self.p > other.p)
0.53 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.53 /testbed/sympy/core/numbers.py(2097):         try:
0.53 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.53 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.53 /testbed/sympy/core/numbers.py(2105):             return S.One
0.53 /testbed/sympy/core/numbers.py(714):         return self.class_key(), (0, ()), (), self
0.53 /testbed/sympy/core/numbers.py(710):         return 1, 0, 'Number'
0.53 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.53 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.53 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.53 /testbed/sympy/core/numbers.py(2097):         try:
0.53 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.53 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.53 /testbed/sympy/core/numbers.py(2106):         if ival == -1:
0.53 /testbed/sympy/core/numbers.py(2108):         if ival == 0:
0.53 /testbed/sympy/core/numbers.py(2110):         obj = Expr.__new__(cls)
0.53 /testbed/sympy/core/numbers.py(2111):         obj.p = ival
0.53 /testbed/sympy/core/numbers.py(2112):         return obj
0.53 /testbed/sympy/core/numbers.py(714):         return self.class_key(), (0, ()), (), self
0.53 /testbed/sympy/core/numbers.py(710):         return 1, 0, 'Number'
0.53 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.53 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.53 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.53 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.53 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.53 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.53 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.53 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.53 /testbed/sympy/core/numbers.py(2252):         try:
0.53 /testbed/sympy/core/numbers.py(2253):             other = _sympify(other)
0.53 /testbed/sympy/core/numbers.py(2256):         if other.is_Integer:
0.53 /testbed/sympy/core/numbers.py(2257):             return _sympify(self.p > other.p)
0.53 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.53 /testbed/sympy/core/numbers.py(2097):         try:
0.53 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.53 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.53 /testbed/sympy/core/numbers.py(2106):         if ival == -1:
0.53 /testbed/sympy/core/numbers.py(2108):         if ival == 0:
0.53 /testbed/sympy/core/numbers.py(2110):         obj = Expr.__new__(cls)
0.53 /testbed/sympy/core/numbers.py(2111):         obj.p = ival
0.53 /testbed/sympy/core/numbers.py(2112):         return obj
0.53 /testbed/sympy/core/numbers.py(714):         return self.class_key(), (0, ()), (), self
0.53 /testbed/sympy/core/numbers.py(710):         return 1, 0, 'Number'
0.53 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.53 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.53 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.53 /testbed/sympy/core/numbers.py(2097):         try:
0.53 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.53 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.53 /testbed/sympy/core/numbers.py(2106):         if ival == -1:
0.53 /testbed/sympy/core/numbers.py(2108):         if ival == 0:
0.53 /testbed/sympy/core/numbers.py(2110):         obj = Expr.__new__(cls)
0.53 /testbed/sympy/core/numbers.py(2111):         obj.p = ival
0.53 /testbed/sympy/core/numbers.py(2112):         return obj
0.53 /testbed/sympy/core/numbers.py(714):         return self.class_key(), (0, ()), (), self
0.53 /testbed/sympy/core/numbers.py(710):         return 1, 0, 'Number'
0.53 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.53 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.53 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.53 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.53 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.53 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.53 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.53 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.53 /testbed/sympy/core/numbers.py(2261):         try:
0.53 /testbed/sympy/core/numbers.py(2262):             other = _sympify(other)
0.53 /testbed/sympy/core/numbers.py(2265):         if other.is_Integer:
0.53 /testbed/sympy/core/numbers.py(2266):             return _sympify(self.p < other.p)
0.56 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.56 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.56 /testbed/sympy/core/numbers.py(2246):         return Rational.__eq__(self, other)
0.56 /testbed/sympy/core/numbers.py(1871):         try:
0.56 /testbed/sympy/core/numbers.py(1872):             other = _sympify(other)
0.56 /testbed/sympy/core/numbers.py(1873):         except SympifyError:
0.56 /testbed/sympy/core/numbers.py(1874):             return NotImplemented
0.56 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.56 /testbed/sympy/core/numbers.py(2097):         try:
0.56 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.56 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.56 /testbed/sympy/core/numbers.py(2105):             return S.One
0.56 /testbed/sympy/core/numbers.py(714):         return self.class_key(), (0, ()), (), self
0.56 /testbed/sympy/core/numbers.py(710):         return 1, 0, 'Number'
0.56 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.56 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.56 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.56 /testbed/sympy/core/numbers.py(2097):         try:
0.56 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.56 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.56 /testbed/sympy/core/numbers.py(2106):         if ival == -1:
0.56 /testbed/sympy/core/numbers.py(2108):         if ival == 0:
0.56 /testbed/sympy/core/numbers.py(2110):         obj = Expr.__new__(cls)
0.56 /testbed/sympy/core/numbers.py(2111):         obj.p = ival
0.56 /testbed/sympy/core/numbers.py(2112):         return obj
0.56 /testbed/sympy/core/numbers.py(714):         return self.class_key(), (0, ()), (), self
0.56 /testbed/sympy/core/numbers.py(710):         return 1, 0, 'Number'
0.56 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.56 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.56 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.56 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.56 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.56 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.56 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.56 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.56 /testbed/sympy/core/numbers.py(2252):         try:
0.56 /testbed/sympy/core/numbers.py(2253):             other = _sympify(other)
0.56 /testbed/sympy/core/numbers.py(2256):         if other.is_Integer:
0.56 /testbed/sympy/core/numbers.py(2257):             return _sympify(self.p > other.p)
0.56 /testbed/sympy/core/numbers.py(1871):         try:
0.56 /testbed/sympy/core/numbers.py(1872):             other = _sympify(other)
0.56 /testbed/sympy/core/numbers.py(1873):         except SympifyError:
0.56 /testbed/sympy/core/numbers.py(1874):             return NotImplemented
0.56 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.56 /testbed/sympy/core/numbers.py(2097):         try:
0.56 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.56 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.56 /testbed/sympy/core/numbers.py(2105):             return S.One
0.56 /testbed/sympy/core/numbers.py(714):         return self.class_key(), (0, ()), (), self
0.56 /testbed/sympy/core/numbers.py(710):         return 1, 0, 'Number'
0.56 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.56 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.56 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.56 /testbed/sympy/core/numbers.py(2097):         try:
0.56 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.56 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.56 /testbed/sympy/core/numbers.py(2106):         if ival == -1:
0.56 /testbed/sympy/core/numbers.py(2108):         if ival == 0:
0.56 /testbed/sympy/core/numbers.py(2110):         obj = Expr.__new__(cls)
0.56 /testbed/sympy/core/numbers.py(2111):         obj.p = ival
0.56 /testbed/sympy/core/numbers.py(2112):         return obj
0.56 /testbed/sympy/core/numbers.py(714):         return self.class_key(), (0, ()), (), self
0.56 /testbed/sympy/core/numbers.py(710):         return 1, 0, 'Number'
0.56 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.56 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.56 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.56 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.56 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.56 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.56 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.56 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.56 /testbed/sympy/core/numbers.py(2252):         try:
0.56 /testbed/sympy/core/numbers.py(2253):             other = _sympify(other)
0.56 /testbed/sympy/core/numbers.py(2256):         if other.is_Integer:
0.56 /testbed/sympy/core/numbers.py(2257):             return _sympify(self.p > other.p)
0.60 /testbed/sympy/core/numbers.py(3148):         return S.NegativeOne
0.60 /testbed/sympy/core/numbers.py(3148):         return S.NegativeOne
0.60 /testbed/sympy/core/numbers.py(3148):         return S.NegativeOne
0.61 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.61 /testbed/sympy/core/numbers.py(2097):         try:
0.61 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.61 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.61 /testbed/sympy/core/numbers.py(2105):             return S.One
0.61 /testbed/sympy/core/numbers.py(714):         return self.class_key(), (0, ()), (), self
0.61 /testbed/sympy/core/numbers.py(710):         return 1, 0, 'Number'
0.61 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.61 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.61 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.61 /testbed/sympy/core/numbers.py(2097):         try:
0.61 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.61 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.61 /testbed/sympy/core/numbers.py(2106):         if ival == -1:
0.61 /testbed/sympy/core/numbers.py(2108):         if ival == 0:
0.61 /testbed/sympy/core/numbers.py(2110):         obj = Expr.__new__(cls)
0.61 /testbed/sympy/core/numbers.py(2111):         obj.p = ival
0.61 /testbed/sympy/core/numbers.py(2112):         return obj
0.61 /testbed/sympy/core/numbers.py(714):         return self.class_key(), (0, ()), (), self
0.61 /testbed/sympy/core/numbers.py(710):         return 1, 0, 'Number'
0.61 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.61 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.61 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.61 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.61 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.61 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.61 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.61 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.61 /testbed/sympy/core/numbers.py(2252):         try:
0.61 /testbed/sympy/core/numbers.py(2253):             other = _sympify(other)
0.61 /testbed/sympy/core/numbers.py(2256):         if other.is_Integer:
0.61 /testbed/sympy/core/numbers.py(2257):             return _sympify(self.p > other.p)
0.61 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.61 /testbed/sympy/core/numbers.py(2097):         try:
0.61 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.61 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.61 /testbed/sympy/core/numbers.py(2106):         if ival == -1:
0.61 /testbed/sympy/core/numbers.py(2108):         if ival == 0:
0.61 /testbed/sympy/core/numbers.py(2110):         obj = Expr.__new__(cls)
0.61 /testbed/sympy/core/numbers.py(2111):         obj.p = ival
0.61 /testbed/sympy/core/numbers.py(2112):         return obj
0.61 /testbed/sympy/core/numbers.py(714):         return self.class_key(), (0, ()), (), self
0.61 /testbed/sympy/core/numbers.py(710):         return 1, 0, 'Number'
0.61 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.61 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.61 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.61 /testbed/sympy/core/numbers.py(2097):         try:
0.61 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.61 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.61 /testbed/sympy/core/numbers.py(2106):         if ival == -1:
0.61 /testbed/sympy/core/numbers.py(2108):         if ival == 0:
0.61 /testbed/sympy/core/numbers.py(2110):         obj = Expr.__new__(cls)
0.61 /testbed/sympy/core/numbers.py(2111):         obj.p = ival
0.61 /testbed/sympy/core/numbers.py(2112):         return obj
0.61 /testbed/sympy/core/numbers.py(714):         return self.class_key(), (0, ()), (), self
0.61 /testbed/sympy/core/numbers.py(710):         return 1, 0, 'Number'
0.61 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.61 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.61 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.61 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.61 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.61 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.61 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.61 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.61 /testbed/sympy/core/numbers.py(2261):         try:
0.61 /testbed/sympy/core/numbers.py(2262):             other = _sympify(other)
0.61 /testbed/sympy/core/numbers.py(2265):         if other.is_Integer:
0.61 /testbed/sympy/core/numbers.py(2266):             return _sympify(self.p < other.p)
0.61 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.61 /testbed/sympy/core/numbers.py(2097):         try:
0.61 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.61 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.61 /testbed/sympy/core/numbers.py(2105):             return S.One
0.61 /testbed/sympy/core/numbers.py(714):         return self.class_key(), (0, ()), (), self
0.61 /testbed/sympy/core/numbers.py(710):         return 1, 0, 'Number'
0.61 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.61 ['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(sympy/core/numbers\\.py)']
0.11 /testbed/sympy/core/numbers.py(1): from __future__ import annotations
0.11 /testbed/sympy/core/numbers.py(3): import numbers
0.11 /testbed/sympy/core/numbers.py(4): import decimal
0.11 /testbed/sympy/core/numbers.py(5): import fractions
0.11 /testbed/sympy/core/numbers.py(6): import math
0.11 /testbed/sympy/core/numbers.py(7): import re as regex
0.11 /testbed/sympy/core/numbers.py(8): import sys
0.11 /testbed/sympy/core/numbers.py(9): from functools import lru_cache
0.11 /testbed/sympy/core/numbers.py(11): from .containers import Tuple
0.11 /testbed/sympy/core/numbers.py(12): from .sympify import (SympifyError, _sympy_converter, sympify, _convert_numpy_types,
0.11 /testbed/sympy/core/numbers.py(14): from .singleton import S, Singleton
0.11 /testbed/sympy/core/numbers.py(15): from .basic import Basic
0.11 /testbed/sympy/core/numbers.py(16): from .expr import Expr, AtomicExpr
0.11 /testbed/sympy/core/numbers.py(17): from .evalf import pure_complex
0.11 /testbed/sympy/core/numbers.py(18): from .cache import cacheit, clear_cache
0.11 /testbed/sympy/core/numbers.py(19): from .decorators import _sympifyit
0.11 /testbed/sympy/core/numbers.py(20): from .logic import fuzzy_not
0.11 /testbed/sympy/core/numbers.py(21): from .kind import NumberKind
0.11 /testbed/sympy/core/numbers.py(22): from sympy.external.gmpy import SYMPY_INTS, HAS_GMPY, gmpy
0.11 /testbed/sympy/core/numbers.py(23): from sympy.multipledispatch import dispatch
0.11 /testbed/sympy/core/numbers.py(24): import mpmath
0.11 /testbed/sympy/core/numbers.py(25): import mpmath.libmp as mlib
0.11 /testbed/sympy/core/numbers.py(26): from mpmath.libmp import bitcount, round_nearest as rnd
0.11 /testbed/sympy/core/numbers.py(27): from mpmath.libmp.backend import MPZ
0.11 /testbed/sympy/core/numbers.py(28): from mpmath.libmp import mpf_pow, mpf_pi, mpf_e, phi_fixed
0.11 /testbed/sympy/core/numbers.py(29): from mpmath.ctx_mp import mpnumeric
0.11 /testbed/sympy/core/numbers.py(30): from mpmath.libmp.libmpf import (
0.11 /testbed/sympy/core/numbers.py(34): from sympy.utilities.misc import as_int, debug, filldedent
0.11 /testbed/sympy/core/numbers.py(35): from .parameters import global_parameters
0.11 /testbed/sympy/core/numbers.py(37): _LOG2 = math.log(2)
0.11 /testbed/sympy/core/numbers.py(40): def comp(z1, z2, tol=None):
0.11 /testbed/sympy/core/numbers.py(149): def mpf_norm(mpf, prec):
0.11 /testbed/sympy/core/numbers.py(179): _errdict = {"divide": False}
0.11 /testbed/sympy/core/numbers.py(182): def seterr(divide=False):
0.11 /testbed/sympy/core/numbers.py(194): def _as_integer_ratio(p):
0.11 /testbed/sympy/core/numbers.py(205): def _decimal_to_Rational_prec(dec):
0.11 /testbed/sympy/core/numbers.py(220): _floatpat = regex.compile(r"[-+]?((\d*\.\d+)|(\d+\.?))")
0.11 /testbed/sympy/core/numbers.py(221): def _literal_float(f):
0.11 /testbed/sympy/core/numbers.py(229): @lru_cache(1024)
0.11 /testbed/sympy/core/numbers.py(230): def igcd(*args):
0.11 /testbed/sympy/core/numbers.py(270): igcd2 = math.gcd
0.11 /testbed/sympy/core/numbers.py(273): def igcd_lehmer(a, b):
0.11 /testbed/sympy/core/numbers.py(419): def ilcm(*args):
0.11 /testbed/sympy/core/numbers.py(445): def igcdex(a, b):
0.11 /testbed/sympy/core/numbers.py(491): def mod_inverse(a, m):
0.11 /testbed/sympy/core/numbers.py(556): class Number(AtomicExpr):
0.11 /testbed/sympy/core/numbers.py(556): class Number(AtomicExpr):
0.11 /testbed/sympy/core/numbers.py(557):     """Represents atomic numbers in SymPy.
0.11 /testbed/sympy/core/numbers.py(584):     is_commutative = True
0.11 /testbed/sympy/core/numbers.py(585):     is_number = True
0.11 /testbed/sympy/core/numbers.py(586):     is_Number = True
0.11 /testbed/sympy/core/numbers.py(588):     __slots__ = ()
0.11 /testbed/sympy/core/numbers.py(591):     _prec = -1
0.11 /testbed/sympy/core/numbers.py(593):     kind = NumberKind
0.11 /testbed/sympy/core/numbers.py(595):     def __new__(cls, *obj):
0.11 /testbed/sympy/core/numbers.py(625):     def could_extract_minus_sign(self):
0.11 /testbed/sympy/core/numbers.py(628):     def invert(self, other, *gens, **args):
0.11 /testbed/sympy/core/numbers.py(634):     def __divmod__(self, other):
0.11 /testbed/sympy/core/numbers.py(659):     def __rdivmod__(self, other):
0.11 /testbed/sympy/core/numbers.py(666):     def _as_mpf_val(self, prec):
0.11 /testbed/sympy/core/numbers.py(671):     def _eval_evalf(self, prec):
0.11 /testbed/sympy/core/numbers.py(674):     def _as_mpf_op(self, prec):
0.11 /testbed/sympy/core/numbers.py(678):     def __float__(self):
0.11 /testbed/sympy/core/numbers.py(681):     def floor(self):
0.11 /testbed/sympy/core/numbers.py(685):     def ceiling(self):
0.11 /testbed/sympy/core/numbers.py(689):     def __floor__(self):
0.11 /testbed/sympy/core/numbers.py(692):     def __ceil__(self):
0.11 /testbed/sympy/core/numbers.py(695):     def _eval_conjugate(self):
0.11 /testbed/sympy/core/numbers.py(698):     def _eval_order(self, *symbols):
0.11 /testbed/sympy/core/numbers.py(703):     def _eval_subs(self, old, new):
0.11 /testbed/sympy/core/numbers.py(708):     @classmethod
0.11 /testbed/sympy/core/numbers.py(709):     def class_key(cls):
0.11 /testbed/sympy/core/numbers.py(712):     @cacheit
0.11 /testbed/sympy/core/numbers.py(713):     def sort_key(self, order=None):
0.11 /testbed/sympy/core/numbers.py(716):     @_sympifyit('other', NotImplemented)
0.11 /testbed/sympy/core/numbers.py(717):     def __add__(self, other):
0.11 /testbed/sympy/core/numbers.py(727):     @_sympifyit('other', NotImplemented)
0.11 /testbed/sympy/core/numbers.py(728):     def __sub__(self, other):
0.11 /testbed/sympy/core/numbers.py(738):     @_sympifyit('other', NotImplemented)
0.11 /testbed/sympy/core/numbers.py(739):     def __mul__(self, other):
0.11 /testbed/sympy/core/numbers.py(761):     @_sympifyit('other', NotImplemented)
0.11 /testbed/sympy/core/numbers.py(762):     def __truediv__(self, other):
0.11 /testbed/sympy/core/numbers.py(770):     def __eq__(self, other):
0.11 /testbed/sympy/core/numbers.py(774):     def __ne__(self, other):
0.11 /testbed/sympy/core/numbers.py(778):     def __lt__(self, other):
0.11 /testbed/sympy/core/numbers.py(786):     def __le__(self, other):
0.11 /testbed/sympy/core/numbers.py(794):     def __gt__(self, other):
0.11 /testbed/sympy/core/numbers.py(801):     def __ge__(self, other):
0.11 /testbed/sympy/core/numbers.py(808):     def __hash__(self):
0.11 /testbed/sympy/core/numbers.py(811):     def is_constant(self, *wrt, **flags):
0.11 /testbed/sympy/core/numbers.py(814):     def as_coeff_mul(self, *deps, rational=True, **kwargs):
0.11 /testbed/sympy/core/numbers.py(822):     def as_coeff_add(self, *deps):
0.11 /testbed/sympy/core/numbers.py(828):     def as_coeff_Mul(self, rational=False):
0.11 /testbed/sympy/core/numbers.py(834):     def as_coeff_Add(self, rational=False):
0.11 /testbed/sympy/core/numbers.py(840):     def gcd(self, other):
0.11 /testbed/sympy/core/numbers.py(845):     def lcm(self, other):
0.11 /testbed/sympy/core/numbers.py(850):     def cofactors(self, other):
0.11 /testbed/sympy/core/numbers.py(856): class Float(Number):
0.11 /testbed/sympy/core/numbers.py(856): class Float(Number):
0.11 /testbed/sympy/core/numbers.py(857):     """Represent a floating-point number of arbitrary precision.
0.11 /testbed/sympy/core/numbers.py(1022):     __slots__ = ('_mpf_', '_prec')
0.11 /testbed/sympy/core/numbers.py(1024):     _mpf_: tuple[int, int, int, int]
0.11 /testbed/sympy/core/numbers.py(1028):     is_rational = None
0.11 /testbed/sympy/core/numbers.py(1029):     is_irrational = None
0.11 /testbed/sympy/core/numbers.py(1030):     is_number = True
0.11 /testbed/sympy/core/numbers.py(1032):     is_real = True
0.11 /testbed/sympy/core/numbers.py(1033):     is_extended_real = True
0.11 /testbed/sympy/core/numbers.py(1035):     is_Float = True
0.11 /testbed/sympy/core/numbers.py(1037):     def __new__(cls, num, dps=None, precision=None):
0.11 /testbed/sympy/core/numbers.py(1181):     @classmethod
0.11 /testbed/sympy/core/numbers.py(1182):     def _new(cls, _mpf_, _prec, zero=True):
0.11 /testbed/sympy/core/numbers.py(1199):     def __getnewargs_ex__(self):
0.11 /testbed/sympy/core/numbers.py(1202):     def _hashable_content(self):
0.11 /testbed/sympy/core/numbers.py(1205):     def floor(self):
0.11 /testbed/sympy/core/numbers.py(1209):     def ceiling(self):
0.11 /testbed/sympy/core/numbers.py(1213):     def __floor__(self):
0.11 /testbed/sympy/core/numbers.py(1216):     def __ceil__(self):
0.11 /testbed/sympy/core/numbers.py(1219):     @property
0.11 /testbed/sympy/core/numbers.py(1220):     def num(self):
0.11 /testbed/sympy/core/numbers.py(1223):     def _as_mpf_val(self, prec):
0.11 /testbed/sympy/core/numbers.py(1229):     def _as_mpf_op(self, prec):
0.11 /testbed/sympy/core/numbers.py(1232):     def _eval_is_finite(self):
0.11 /testbed/sympy/core/numbers.py(1237):     def _eval_is_infinite(self):
0.11 /testbed/sympy/core/numbers.py(1242):     def _eval_is_integer(self):
0.11 /testbed/sympy/core/numbers.py(1245):     def _eval_is_negative(self):
0.11 /testbed/sympy/core/numbers.py(1250):     def _eval_is_positive(self):
0.11 /testbed/sympy/core/numbers.py(1255):     def _eval_is_extended_negative(self):
0.11 /testbed/sympy/core/numbers.py(1262):     def _eval_is_extended_positive(self):
0.11 /testbed/sympy/core/numbers.py(1269):     def _eval_is_zero(self):
0.11 /testbed/sympy/core/numbers.py(1272):     def __bool__(self):
0.11 /testbed/sympy/core/numbers.py(1275):     def __neg__(self):
0.11 /testbed/sympy/core/numbers.py(1280):     @_sympifyit('other', NotImplemented)
0.11 /testbed/sympy/core/numbers.py(1281):     def __add__(self, other):
0.11 /testbed/sympy/core/numbers.py(1287):     @_sympifyit('other', NotImplemented)
0.11 /testbed/sympy/core/numbers.py(1288):     def __sub__(self, other):
0.11 /testbed/sympy/core/numbers.py(1294):     @_sympifyit('other', NotImplemented)
0.11 /testbed/sympy/core/numbers.py(1295):     def __mul__(self, other):
0.11 /testbed/sympy/core/numbers.py(1301):     @_sympifyit('other', NotImplemented)
0.11 /testbed/sympy/core/numbers.py(1302):     def __truediv__(self, other):
0.11 /testbed/sympy/core/numbers.py(1308):     @_sympifyit('other', NotImplemented)
0.11 /testbed/sympy/core/numbers.py(1309):     def __mod__(self, other):
0.11 /testbed/sympy/core/numbers.py(1323):     @_sympifyit('other', NotImplemented)
0.11 /testbed/sympy/core/numbers.py(1324):     def __rmod__(self, other):
0.11 /testbed/sympy/core/numbers.py(1332):     def _eval_power(self, expt):
0.11 /testbed/sympy/core/numbers.py(1364):     def __abs__(self):
0.11 /testbed/sympy/core/numbers.py(1367):     def __int__(self):
0.11 /testbed/sympy/core/numbers.py(1372):     def __eq__(self, other):
0.11 /testbed/sympy/core/numbers.py(1402):     def __ne__(self, other):
0.11 /testbed/sympy/core/numbers.py(1405):     def _Frel(self, other, op):
0.11 /testbed/sympy/core/numbers.py(1434):     def __gt__(self, other):
0.11 /testbed/sympy/core/numbers.py(1442):     def __ge__(self, other):
0.11 /testbed/sympy/core/numbers.py(1450):     def __lt__(self, other):
0.11 /testbed/sympy/core/numbers.py(1458):     def __le__(self, other):
0.11 /testbed/sympy/core/numbers.py(1466):     def __hash__(self):
0.11 /testbed/sympy/core/numbers.py(1469):     def epsilon_eq(self, other, epsilon="1e-15"):
0.11 /testbed/sympy/core/numbers.py(1472):     def __format__(self, format_spec):
0.11 /testbed/sympy/core/numbers.py(1477): _sympy_converter[float] = _sympy_converter[decimal.Decimal] = Float
0.11 /testbed/sympy/core/numbers.py(1480): RealNumber = Float
0.11 /testbed/sympy/core/numbers.py(1483): class Rational(Number):
0.11 /testbed/sympy/core/numbers.py(1483): class Rational(Number):
0.11 /testbed/sympy/core/numbers.py(1484):     """Represents rational numbers (p/q) of any size.
0.11 /testbed/sympy/core/numbers.py(1576):     is_real = True
0.11 /testbed/sympy/core/numbers.py(1577):     is_integer = False
0.11 /testbed/sympy/core/numbers.py(1578):     is_rational = True
0.11 /testbed/sympy/core/numbers.py(1579):     is_number = True
0.11 /testbed/sympy/core/numbers.py(1581):     __slots__ = ('p', 'q')
0.11 /testbed/sympy/core/numbers.py(1583):     p: int
0.11 /testbed/sympy/core/numbers.py(1584):     q: int
0.11 /testbed/sympy/core/numbers.py(1586):     is_Rational = True
0.11 /testbed/sympy/core/numbers.py(1588):     @cacheit
0.11 /testbed/sympy/core/numbers.py(1589):     def __new__(cls, p, q=None, gcd=None):
0.11 /testbed/sympy/core/numbers.py(1667):     def limit_denominator(self, max_denominator=1000000):
0.11 /testbed/sympy/core/numbers.py(1683):     def __getnewargs__(self):
0.11 /testbed/sympy/core/numbers.py(1686):     def _hashable_content(self):
0.11 /testbed/sympy/core/numbers.py(1689):     def _eval_is_positive(self):
0.11 /testbed/sympy/core/numbers.py(1692):     def _eval_is_zero(self):
0.11 /testbed/sympy/core/numbers.py(1695):     def __neg__(self):
0.11 /testbed/sympy/core/numbers.py(1698):     @_sympifyit('other', NotImplemented)
0.11 /testbed/sympy/core/numbers.py(1699):     def __add__(self, other):
0.11 /testbed/sympy/core/numbers.py(1711):     __radd__ = __add__
0.11 /testbed/sympy/core/numbers.py(1713):     @_sympifyit('other', NotImplemented)
0.11 /testbed/sympy/core/numbers.py(1714):     def __sub__(self, other):
0.11 /testbed/sympy/core/numbers.py(1725):     @_sympifyit('other', NotImplemented)
0.11 /testbed/sympy/core/numbers.py(1726):     def __rsub__(self, other):
0.11 /testbed/sympy/core/numbers.py(1737):     @_sympifyit('other', NotImplemented)
0.11 /testbed/sympy/core/numbers.py(1738):     def __mul__(self, other):
0.11 /testbed/sympy/core/numbers.py(1749):     __rmul__ = __mul__
0.11 /testbed/sympy/core/numbers.py(1751):     @_sympifyit('other', NotImplemented)
0.11 /testbed/sympy/core/numbers.py(1752):     def __truediv__(self, other):
0.11 /testbed/sympy/core/numbers.py(1766):     @_sympifyit('other', NotImplemented)
0.11 /testbed/sympy/core/numbers.py(1767):     def __rtruediv__(self, other):
0.11 /testbed/sympy/core/numbers.py(1779):     @_sympifyit('other', NotImplemented)
0.11 /testbed/sympy/core/numbers.py(1780):     def __mod__(self, other):
0.11 /testbed/sympy/core/numbers.py(1792):     @_sympifyit('other', NotImplemented)
0.11 /testbed/sympy/core/numbers.py(1793):     def __rmod__(self, other):
0.11 /testbed/sympy/core/numbers.py(1798):     def _eval_power(self, expt):
0.11 /testbed/sympy/core/numbers.py(1843):     def _as_mpf_val(self, prec):
0.11 /testbed/sympy/core/numbers.py(1846):     def _mpmath_(self, prec, rnd):
0.11 /testbed/sympy/core/numbers.py(1849):     def __abs__(self):
0.11 /testbed/sympy/core/numbers.py(1852):     def __int__(self):
0.11 /testbed/sympy/core/numbers.py(1858):     def floor(self):
0.11 /testbed/sympy/core/numbers.py(1861):     def ceiling(self):
0.11 /testbed/sympy/core/numbers.py(1864):     def __floor__(self):
0.11 /testbed/sympy/core/numbers.py(1867):     def __ceil__(self):
0.11 /testbed/sympy/core/numbers.py(1870):     def __eq__(self, other):
0.11 /testbed/sympy/core/numbers.py(1917):     def __ne__(self, other):
0.11 /testbed/sympy/core/numbers.py(1920):     def _Rrel(self, other, attr):
0.11 /testbed/sympy/core/numbers.py(1941):     def __gt__(self, other):
0.11 /testbed/sympy/core/numbers.py(1949):     def __ge__(self, other):
0.11 /testbed/sympy/core/numbers.py(1957):     def __lt__(self, other):
0.11 /testbed/sympy/core/numbers.py(1965):     def __le__(self, other):
0.11 /testbed/sympy/core/numbers.py(1973):     def __hash__(self):
0.11 /testbed/sympy/core/numbers.py(1976):     def factors(self, limit=None, use_trial=True, use_rho=False,
0.11 /testbed/sympy/core/numbers.py(1988):     @property
0.11 /testbed/sympy/core/numbers.py(1989):     def numerator(self):
0.11 /testbed/sympy/core/numbers.py(1992):     @property
0.11 /testbed/sympy/core/numbers.py(1993):     def denominator(self):
0.11 /testbed/sympy/core/numbers.py(1996):     @_sympifyit('other', NotImplemented)
0.11 /testbed/sympy/core/numbers.py(1997):     def gcd(self, other):
0.11 /testbed/sympy/core/numbers.py(2006):     @_sympifyit('other', NotImplemented)
0.11 /testbed/sympy/core/numbers.py(2007):     def lcm(self, other):
0.11 /testbed/sympy/core/numbers.py(2014):     def as_numer_denom(self):
0.11 /testbed/sympy/core/numbers.py(2017):     def as_content_primitive(self, radical=False, clear=True):
0.11 /testbed/sympy/core/numbers.py(2037):     def as_coeff_Mul(self, rational=False):
0.11 /testbed/sympy/core/numbers.py(2041):     def as_coeff_Add(self, rational=False):
0.11 /testbed/sympy/core/numbers.py(2046): class Integer(Rational):
0.11 /testbed/sympy/core/numbers.py(2046): class Integer(Rational):
0.11 /testbed/sympy/core/numbers.py(2047):     """Represents integer numbers of any size.
0.11 /testbed/sympy/core/numbers.py(2073):     q = 1
0.11 /testbed/sympy/core/numbers.py(2074):     is_integer = True
0.11 /testbed/sympy/core/numbers.py(2075):     is_number = True
0.11 /testbed/sympy/core/numbers.py(2077):     is_Integer = True
0.11 /testbed/sympy/core/numbers.py(2079):     __slots__ = ()
0.11 /testbed/sympy/core/numbers.py(2081):     def _as_mpf_val(self, prec):
0.11 /testbed/sympy/core/numbers.py(2084):     def _mpmath_(self, prec, rnd):
0.11 /testbed/sympy/core/numbers.py(2087):     @cacheit
0.11 /testbed/sympy/core/numbers.py(2088):     def __new__(cls, i):
0.11 /testbed/sympy/core/numbers.py(2114):     def __getnewargs__(self):
0.11 /testbed/sympy/core/numbers.py(2118):     def __int__(self):
0.11 /testbed/sympy/core/numbers.py(2121):     def floor(self):
0.11 /testbed/sympy/core/numbers.py(2124):     def ceiling(self):
0.11 /testbed/sympy/core/numbers.py(2127):     def __floor__(self):
0.11 /testbed/sympy/core/numbers.py(2130):     def __ceil__(self):
0.11 /testbed/sympy/core/numbers.py(2133):     def __neg__(self):
0.11 /testbed/sympy/core/numbers.py(2136):     def __abs__(self):
0.11 /testbed/sympy/core/numbers.py(2142):     def __divmod__(self, other):
0.11 /testbed/sympy/core/numbers.py(2148):     def __rdivmod__(self, other):
0.11 /testbed/sympy/core/numbers.py(2162):     def __add__(self, other):
0.11 /testbed/sympy/core/numbers.py(2174):     def __radd__(self, other):
0.11 /testbed/sympy/core/numbers.py(2183):     def __sub__(self, other):
0.11 /testbed/sympy/core/numbers.py(2194):     def __rsub__(self, other):
0.11 /testbed/sympy/core/numbers.py(2203):     def __mul__(self, other):
0.11 /testbed/sympy/core/numbers.py(2214):     def __rmul__(self, other):
0.11 /testbed/sympy/core/numbers.py(2223):     def __mod__(self, other):
0.11 /testbed/sympy/core/numbers.py(2232):     def __rmod__(self, other):
0.11 /testbed/sympy/core/numbers.py(2241):     def __eq__(self, other):
0.11 /testbed/sympy/core/numbers.py(2248):     def __ne__(self, other):
0.11 /testbed/sympy/core/numbers.py(2251):     def __gt__(self, other):
0.11 /testbed/sympy/core/numbers.py(2260):     def __lt__(self, other):
0.11 /testbed/sympy/core/numbers.py(2269):     def __ge__(self, other):
0.11 /testbed/sympy/core/numbers.py(2278):     def __le__(self, other):
0.11 /testbed/sympy/core/numbers.py(2287):     def __hash__(self):
0.11 /testbed/sympy/core/numbers.py(2290):     def __index__(self):
0.11 /testbed/sympy/core/numbers.py(2295):     def _eval_is_odd(self):
0.11 /testbed/sympy/core/numbers.py(2298):     def _eval_power(self, expt):
0.11 /testbed/sympy/core/numbers.py(2406):     def _eval_is_prime(self):
0.11 /testbed/sympy/core/numbers.py(2411):     def _eval_is_composite(self):
0.11 /testbed/sympy/core/numbers.py(2417):     def as_numer_denom(self):
0.11 /testbed/sympy/core/numbers.py(2420):     @_sympifyit('other', NotImplemented)
0.11 /testbed/sympy/core/numbers.py(2421):     def __floordiv__(self, other):
0.11 /testbed/sympy/core/numbers.py(2428):     def __rfloordiv__(self, other):
0.11 /testbed/sympy/core/numbers.py(2438):     def __lshift__(self, other):
0.11 /testbed/sympy/core/numbers.py(2444):     def __rlshift__(self, other):
0.11 /testbed/sympy/core/numbers.py(2450):     def __rshift__(self, other):
0.11 /testbed/sympy/core/numbers.py(2456):     def __rrshift__(self, other):
0.11 /testbed/sympy/core/numbers.py(2462):     def __and__(self, other):
0.11 /testbed/sympy/core/numbers.py(2468):     def __rand__(self, other):
0.11 /testbed/sympy/core/numbers.py(2474):     def __xor__(self, other):
0.11 /testbed/sympy/core/numbers.py(2480):     def __rxor__(self, other):
0.11 /testbed/sympy/core/numbers.py(2486):     def __or__(self, other):
0.11 /testbed/sympy/core/numbers.py(2492):     def __ror__(self, other):
0.11 /testbed/sympy/core/numbers.py(2498):     def __invert__(self):
0.11 /testbed/sympy/core/numbers.py(2502): _sympy_converter[int] = Integer
0.11 /testbed/sympy/core/numbers.py(2505): class AlgebraicNumber(Expr):
0.11 /testbed/sympy/core/numbers.py(2505): class AlgebraicNumber(Expr):
0.11 /testbed/sympy/core/numbers.py(2506):     r"""
0.11 /testbed/sympy/core/numbers.py(2523):     __slots__ = ('rep', 'root', 'alias', 'minpoly', '_own_minpoly')
0.11 /testbed/sympy/core/numbers.py(2525):     is_AlgebraicNumber = True
0.11 /testbed/sympy/core/numbers.py(2526):     is_algebraic = True
0.11 /testbed/sympy/core/numbers.py(2527):     is_number = True
0.11 /testbed/sympy/core/numbers.py(2530):     kind = NumberKind
0.11 /testbed/sympy/core/numbers.py(2535):     free_symbols: set[Basic] = set()
0.11 /testbed/sympy/core/numbers.py(2537):     def __new__(cls, expr, coeffs=None, alias=None, **args):
0.11 /testbed/sympy/core/numbers.py(2769):     def __hash__(self):
0.11 /testbed/sympy/core/numbers.py(2772):     def _eval_evalf(self, prec):
0.11 /testbed/sympy/core/numbers.py(2775):     @property
0.11 /testbed/sympy/core/numbers.py(2776):     def is_aliased(self):
0.11 /testbed/sympy/core/numbers.py(2780):     def as_poly(self, x=None):
0.11 /testbed/sympy/core/numbers.py(2792):     def as_expr(self, x=None):
0.11 /testbed/sympy/core/numbers.py(2796):     def coeffs(self):
0.11 /testbed/sympy/core/numbers.py(2800):     def native_coeffs(self):
0.11 /testbed/sympy/core/numbers.py(2804):     def to_algebraic_integer(self):
0.11 /testbed/sympy/core/numbers.py(2821):     def _eval_simplify(self, **kwargs):
0.11 /testbed/sympy/core/numbers.py(2832):     def field_element(self, coeffs):
0.11 /testbed/sympy/core/numbers.py(2876):     @property
0.11 /testbed/sympy/core/numbers.py(2877):     def is_primitive_element(self):
0.11 /testbed/sympy/core/numbers.py(2886):     def primitive_element(self):
0.11 /testbed/sympy/core/numbers.py(2901):     def to_primitive_element(self, radicals=True):
0.11 /testbed/sympy/core/numbers.py(2972):     def minpoly_of_element(self):
0.11 /testbed/sympy/core/numbers.py(2994):     def to_root(self, radicals=True, minpoly=None):
0.11 /testbed/sympy/core/numbers.py(3026): class RationalConstant(Rational):
0.11 /testbed/sympy/core/numbers.py(3026): class RationalConstant(Rational):
0.11 /testbed/sympy/core/numbers.py(3027):     """
0.11 /testbed/sympy/core/numbers.py(3033):     __slots__ = ()
0.11 /testbed/sympy/core/numbers.py(3035):     def __new__(cls):
0.11 /testbed/sympy/core/numbers.py(3039): class IntegerConstant(Integer):
0.11 /testbed/sympy/core/numbers.py(3039): class IntegerConstant(Integer):
0.11 /testbed/sympy/core/numbers.py(3040):     __slots__ = ()
0.11 /testbed/sympy/core/numbers.py(3042):     def __new__(cls):
0.11 /testbed/sympy/core/numbers.py(3046): class Zero(IntegerConstant, metaclass=Singleton):
0.11 /testbed/sympy/core/numbers.py(3046): class Zero(IntegerConstant, metaclass=Singleton):
0.11 /testbed/sympy/core/numbers.py(3047):     """The number zero.
0.11 /testbed/sympy/core/numbers.py(3066):     p = 0
0.11 /testbed/sympy/core/numbers.py(3067):     q = 1
0.11 /testbed/sympy/core/numbers.py(3068):     is_positive = False
0.11 /testbed/sympy/core/numbers.py(3069):     is_negative = False
0.11 /testbed/sympy/core/numbers.py(3070):     is_zero = True
0.11 /testbed/sympy/core/numbers.py(3071):     is_number = True
0.11 /testbed/sympy/core/numbers.py(3072):     is_comparable = True
0.11 /testbed/sympy/core/numbers.py(3074):     __slots__ = ()
0.11 /testbed/sympy/core/numbers.py(3076):     def __getnewargs__(self):
0.11 /testbed/sympy/core/numbers.py(3079):     @staticmethod
0.11 /testbed/sympy/core/numbers.py(3080):     def __abs__():
0.11 /testbed/sympy/core/numbers.py(3083):     @staticmethod
0.11 /testbed/sympy/core/numbers.py(3084):     def __neg__():
0.11 /testbed/sympy/core/numbers.py(3087):     def _eval_power(self, expt):
0.11 /testbed/sympy/core/numbers.py(3106):     def _eval_order(self, *symbols):
0.11 /testbed/sympy/core/numbers.py(3110):     def __bool__(self):
0.11 /testbed/sympy/core/numbers.py(3114): class One(IntegerConstant, metaclass=Singleton):
0.11 /testbed/sympy/core/numbers.py(3114): class One(IntegerConstant, metaclass=Singleton):
0.11 /testbed/sympy/core/numbers.py(3115):     """The number one.
0.11 /testbed/sympy/core/numbers.py(3131):     is_number = True
0.11 /testbed/sympy/core/numbers.py(3132):     is_positive = True
0.11 /testbed/sympy/core/numbers.py(3134):     p = 1
0.11 /testbed/sympy/core/numbers.py(3135):     q = 1
0.11 /testbed/sympy/core/numbers.py(3137):     __slots__ = ()
0.11 /testbed/sympy/core/numbers.py(3139):     def __getnewargs__(self):
0.11 /testbed/sympy/core/numbers.py(3142):     @staticmethod
0.11 /testbed/sympy/core/numbers.py(3143):     def __abs__():
0.11 /testbed/sympy/core/numbers.py(3146):     @staticmethod
0.11 /testbed/sympy/core/numbers.py(3147):     def __neg__():
0.11 /testbed/sympy/core/numbers.py(3150):     def _eval_power(self, expt):
0.11 /testbed/sympy/core/numbers.py(3153):     def _eval_order(self, *symbols):
0.11 /testbed/sympy/core/numbers.py(3156):     @staticmethod
0.11 /testbed/sympy/core/numbers.py(3157):     def factors(limit=None, use_trial=True, use_rho=False, use_pm1=False,
0.11 /testbed/sympy/core/numbers.py(3165): class NegativeOne(IntegerConstant, metaclass=Singleton):
0.11 /testbed/sympy/core/numbers.py(3165): class NegativeOne(IntegerConstant, metaclass=Singleton):
0.11 /testbed/sympy/core/numbers.py(3166):     """The number negative one.
0.11 /testbed/sympy/core/numbers.py(3188):     is_number = True
0.11 /testbed/sympy/core/numbers.py(3190):     p = -1
0.11 /testbed/sympy/core/numbers.py(3191):     q = 1
0.11 /testbed/sympy/core/numbers.py(3193):     __slots__ = ()
0.11 /testbed/sympy/core/numbers.py(3195):     def __getnewargs__(self):
0.11 /testbed/sympy/core/numbers.py(3198):     @staticmethod
0.11 /testbed/sympy/core/numbers.py(3199):     def __abs__():
0.11 /testbed/sympy/core/numbers.py(3202):     @staticmethod
0.11 /testbed/sympy/core/numbers.py(3203):     def __neg__():
0.11 /testbed/sympy/core/numbers.py(3206):     def _eval_power(self, expt):
0.11 /testbed/sympy/core/numbers.py(3229): class Half(RationalConstant, metaclass=Singleton):
0.11 /testbed/sympy/core/numbers.py(3229): class Half(RationalConstant, metaclass=Singleton):
0.11 /testbed/sympy/core/numbers.py(3230):     """The rational number 1/2.
0.11 /testbed/sympy/core/numbers.py(3246):     is_number = True
0.11 /testbed/sympy/core/numbers.py(3248):     p = 1
0.11 /testbed/sympy/core/numbers.py(3249):     q = 2
0.11 /testbed/sympy/core/numbers.py(3251):     __slots__ = ()
0.11 /testbed/sympy/core/numbers.py(3253):     def __getnewargs__(self):
0.11 /testbed/sympy/core/numbers.py(3256):     @staticmethod
0.11 /testbed/sympy/core/numbers.py(3257):     def __abs__():
0.11 /testbed/sympy/core/numbers.py(3261): class Infinity(Number, metaclass=Singleton):
0.11 /testbed/sympy/core/numbers.py(3261): class Infinity(Number, metaclass=Singleton):
0.11 /testbed/sympy/core/numbers.py(3262):     r"""Positive infinite quantity.
0.11 /testbed/sympy/core/numbers.py(3302):     is_commutative = True
0.11 /testbed/sympy/core/numbers.py(3303):     is_number = True
0.11 /testbed/sympy/core/numbers.py(3304):     is_complex = False
0.11 /testbed/sympy/core/numbers.py(3305):     is_extended_real = True
0.11 /testbed/sympy/core/numbers.py(3306):     is_infinite = True
0.11 /testbed/sympy/core/numbers.py(3307):     is_comparable = True
0.11 /testbed/sympy/core/numbers.py(3308):     is_extended_positive = True
0.11 /testbed/sympy/core/numbers.py(3309):     is_prime = False
0.11 /testbed/sympy/core/numbers.py(3311):     __slots__ = ()
0.11 /testbed/sympy/core/numbers.py(3313):     def __new__(cls):
0.11 /testbed/sympy/core/numbers.py(3316):     def _latex(self, printer):
0.11 /testbed/sympy/core/numbers.py(3319):     def _eval_subs(self, old, new):
0.11 /testbed/sympy/core/numbers.py(3323):     def _eval_evalf(self, prec=None):
0.11 /testbed/sympy/core/numbers.py(3326):     def evalf(self, prec=None, **options):
0.11 /testbed/sympy/core/numbers.py(3329):     @_sympifyit('other', NotImplemented)
0.11 /testbed/sympy/core/numbers.py(3330):     def __add__(self, other):
0.11 /testbed/sympy/core/numbers.py(3336):     __radd__ = __add__
0.11 /testbed/sympy/core/numbers.py(3338):     @_sympifyit('other', NotImplemented)
0.11 /testbed/sympy/core/numbers.py(3339):     def __sub__(self, other):
0.11 /testbed/sympy/core/numbers.py(3346):     @_sympifyit('other', NotImplemented)
0.11 /testbed/sympy/core/numbers.py(3347):     def __rsub__(self, other):
0.11 /testbed/sympy/core/numbers.py(3350):     @_sympifyit('other', NotImplemented)
0.11 /testbed/sympy/core/numbers.py(3351):     def __mul__(self, other):
0.11 /testbed/sympy/core/numbers.py(3359):     __rmul__ = __mul__
0.11 /testbed/sympy/core/numbers.py(3361):     @_sympifyit('other', NotImplemented)
0.11 /testbed/sympy/core/numbers.py(3362):     def __truediv__(self, other):
0.11 /testbed/sympy/core/numbers.py(3373):     def __abs__(self):
0.11 /testbed/sympy/core/numbers.py(3376):     def __neg__(self):
0.11 /testbed/sympy/core/numbers.py(3379):     def _eval_power(self, expt):
0.11 /testbed/sympy/core/numbers.py(3417):     def _as_mpf_val(self, prec):
0.11 /testbed/sympy/core/numbers.py(3420):     def __hash__(self):
0.11 /testbed/sympy/core/numbers.py(3423):     def __eq__(self, other):
0.11 /testbed/sympy/core/numbers.py(3426):     def __ne__(self, other):
0.11 /testbed/sympy/core/numbers.py(3429):     __gt__ = Expr.__gt__
0.11 /testbed/sympy/core/numbers.py(3430):     __ge__ = Expr.__ge__
0.11 /testbed/sympy/core/numbers.py(3431):     __lt__ = Expr.__lt__
0.11 /testbed/sympy/core/numbers.py(3432):     __le__ = Expr.__le__
0.11 /testbed/sympy/core/numbers.py(3434):     @_sympifyit('other', NotImplemented)
0.11 /testbed/sympy/core/numbers.py(3435):     def __mod__(self, other):
0.11 /testbed/sympy/core/numbers.py(3440):     __rmod__ = __mod__
0.11 /testbed/sympy/core/numbers.py(3442):     def floor(self):
0.11 /testbed/sympy/core/numbers.py(3445):     def ceiling(self):
0.12 /testbed/sympy/core/numbers.py(3448): oo = S.Infinity
0.12 /testbed/sympy/core/numbers.py(3451): class NegativeInfinity(Number, metaclass=Singleton):
0.12 /testbed/sympy/core/numbers.py(3451): class NegativeInfinity(Number, metaclass=Singleton):
0.12 /testbed/sympy/core/numbers.py(3452):     """Negative infinite quantity.
0.12 /testbed/sympy/core/numbers.py(3463):     is_extended_real = True
0.12 /testbed/sympy/core/numbers.py(3464):     is_complex = False
0.12 /testbed/sympy/core/numbers.py(3465):     is_commutative = True
0.12 /testbed/sympy/core/numbers.py(3466):     is_infinite = True
0.12 /testbed/sympy/core/numbers.py(3467):     is_comparable = True
0.12 /testbed/sympy/core/numbers.py(3468):     is_extended_negative = True
0.12 /testbed/sympy/core/numbers.py(3469):     is_number = True
0.12 /testbed/sympy/core/numbers.py(3470):     is_prime = False
0.12 /testbed/sympy/core/numbers.py(3472):     __slots__ = ()
0.12 /testbed/sympy/core/numbers.py(3474):     def __new__(cls):
0.12 /testbed/sympy/core/numbers.py(3477):     def _latex(self, printer):
0.12 /testbed/sympy/core/numbers.py(3480):     def _eval_subs(self, old, new):
0.12 /testbed/sympy/core/numbers.py(3484):     def _eval_evalf(self, prec=None):
0.12 /testbed/sympy/core/numbers.py(3487):     def evalf(self, prec=None, **options):
0.12 /testbed/sympy/core/numbers.py(3490):     @_sympifyit('other', NotImplemented)
0.12 /testbed/sympy/core/numbers.py(3491):     def __add__(self, other):
0.12 /testbed/sympy/core/numbers.py(3497):     __radd__ = __add__
0.12 /testbed/sympy/core/numbers.py(3499):     @_sympifyit('other', NotImplemented)
0.12 /testbed/sympy/core/numbers.py(3500):     def __sub__(self, other):
0.12 /testbed/sympy/core/numbers.py(3507):     @_sympifyit('other', NotImplemented)
0.12 /testbed/sympy/core/numbers.py(3508):     def __rsub__(self, other):
0.12 /testbed/sympy/core/numbers.py(3511):     @_sympifyit('other', NotImplemented)
0.12 /testbed/sympy/core/numbers.py(3512):     def __mul__(self, other):
0.12 /testbed/sympy/core/numbers.py(3520):     __rmul__ = __mul__
0.12 /testbed/sympy/core/numbers.py(3522):     @_sympifyit('other', NotImplemented)
0.12 /testbed/sympy/core/numbers.py(3523):     def __truediv__(self, other):
0.12 /testbed/sympy/core/numbers.py(3534):     def __abs__(self):
0.12 /testbed/sympy/core/numbers.py(3537):     def __neg__(self):
0.12 /testbed/sympy/core/numbers.py(3540):     def _eval_power(self, expt):
0.12 /testbed/sympy/core/numbers.py(3583):     def _as_mpf_val(self, prec):
0.12 /testbed/sympy/core/numbers.py(3586):     def __hash__(self):
0.12 /testbed/sympy/core/numbers.py(3589):     def __eq__(self, other):
0.12 /testbed/sympy/core/numbers.py(3592):     def __ne__(self, other):
0.12 /testbed/sympy/core/numbers.py(3595):     __gt__ = Expr.__gt__
0.12 /testbed/sympy/core/numbers.py(3596):     __ge__ = Expr.__ge__
0.12 /testbed/sympy/core/numbers.py(3597):     __lt__ = Expr.__lt__
0.12 /testbed/sympy/core/numbers.py(3598):     __le__ = Expr.__le__
0.12 /testbed/sympy/core/numbers.py(3600):     @_sympifyit('other', NotImplemented)
0.12 /testbed/sympy/core/numbers.py(3601):     def __mod__(self, other):
0.12 /testbed/sympy/core/numbers.py(3606):     __rmod__ = __mod__
0.12 /testbed/sympy/core/numbers.py(3608):     def floor(self):
0.12 /testbed/sympy/core/numbers.py(3611):     def ceiling(self):
0.12 /testbed/sympy/core/numbers.py(3614):     def as_powers_dict(self):
0.12 /testbed/sympy/core/numbers.py(3618): class NaN(Number, metaclass=Singleton):
0.12 /testbed/sympy/core/numbers.py(3618): class NaN(Number, metaclass=Singleton):
0.12 /testbed/sympy/core/numbers.py(3619):     """
0.12 /testbed/sympy/core/numbers.py(3666):     is_commutative = True
0.12 /testbed/sympy/core/numbers.py(3667):     is_extended_real = None
0.12 /testbed/sympy/core/numbers.py(3668):     is_real = None
0.12 /testbed/sympy/core/numbers.py(3669):     is_rational = None
0.12 /testbed/sympy/core/numbers.py(3670):     is_algebraic = None
0.12 /testbed/sympy/core/numbers.py(3671):     is_transcendental = None
0.12 /testbed/sympy/core/numbers.py(3672):     is_integer = None
0.12 /testbed/sympy/core/numbers.py(3673):     is_comparable = False
0.12 /testbed/sympy/core/numbers.py(3674):     is_finite = None
0.12 /testbed/sympy/core/numbers.py(3675):     is_zero = None
0.12 /testbed/sympy/core/numbers.py(3676):     is_prime = None
0.12 /testbed/sympy/core/numbers.py(3677):     is_positive = None
0.12 /testbed/sympy/core/numbers.py(3678):     is_negative = None
0.12 /testbed/sympy/core/numbers.py(3679):     is_number = True
0.12 /testbed/sympy/core/numbers.py(3681):     __slots__ = ()
0.12 /testbed/sympy/core/numbers.py(3683):     def __new__(cls):
0.12 /testbed/sympy/core/numbers.py(3686):     def _latex(self, printer):
0.12 /testbed/sympy/core/numbers.py(3689):     def __neg__(self):
0.12 /testbed/sympy/core/numbers.py(3692):     @_sympifyit('other', NotImplemented)
0.12 /testbed/sympy/core/numbers.py(3693):     def __add__(self, other):
0.12 /testbed/sympy/core/numbers.py(3696):     @_sympifyit('other', NotImplemented)
0.12 /testbed/sympy/core/numbers.py(3697):     def __sub__(self, other):
0.12 /testbed/sympy/core/numbers.py(3700):     @_sympifyit('other', NotImplemented)
0.12 /testbed/sympy/core/numbers.py(3701):     def __mul__(self, other):
0.12 /testbed/sympy/core/numbers.py(3704):     @_sympifyit('other', NotImplemented)
0.12 /testbed/sympy/core/numbers.py(3705):     def __truediv__(self, other):
0.12 /testbed/sympy/core/numbers.py(3708):     def floor(self):
0.12 /testbed/sympy/core/numbers.py(3711):     def ceiling(self):
0.12 /testbed/sympy/core/numbers.py(3714):     def _as_mpf_val(self, prec):
0.12 /testbed/sympy/core/numbers.py(3717):     def __hash__(self):
0.12 /testbed/sympy/core/numbers.py(3720):     def __eq__(self, other):
0.12 /testbed/sympy/core/numbers.py(3724):     def __ne__(self, other):
0.12 /testbed/sympy/core/numbers.py(3728):     __gt__ = Expr.__gt__
0.12 /testbed/sympy/core/numbers.py(3729):     __ge__ = Expr.__ge__
0.12 /testbed/sympy/core/numbers.py(3730):     __lt__ = Expr.__lt__
0.12 /testbed/sympy/core/numbers.py(3731):     __le__ = Expr.__le__
0.12 /testbed/sympy/core/numbers.py(3733): nan = S.NaN
0.12 /testbed/sympy/core/numbers.py(3735): @dispatch(NaN, Expr) # type:ignore
0.12 /testbed/sympy/core/numbers.py(3736): def _eval_is_eq(a, b): # noqa:F811
0.12 /testbed/sympy/core/numbers.py(3740): class ComplexInfinity(AtomicExpr, metaclass=Singleton):
0.12 /testbed/sympy/core/numbers.py(3740): class ComplexInfinity(AtomicExpr, metaclass=Singleton):
0.12 /testbed/sympy/core/numbers.py(3741):     r"""Complex infinity.
0.12 /testbed/sympy/core/numbers.py(3772):     is_commutative = True
0.12 /testbed/sympy/core/numbers.py(3773):     is_infinite = True
0.12 /testbed/sympy/core/numbers.py(3774):     is_number = True
0.12 /testbed/sympy/core/numbers.py(3775):     is_prime = False
0.12 /testbed/sympy/core/numbers.py(3776):     is_complex = False
0.12 /testbed/sympy/core/numbers.py(3777):     is_extended_real = False
0.12 /testbed/sympy/core/numbers.py(3779):     kind = NumberKind
0.12 /testbed/sympy/core/numbers.py(3781):     __slots__ = ()
0.12 /testbed/sympy/core/numbers.py(3783):     def __new__(cls):
0.12 /testbed/sympy/core/numbers.py(3786):     def _latex(self, printer):
0.12 /testbed/sympy/core/numbers.py(3789):     @staticmethod
0.12 /testbed/sympy/core/numbers.py(3790):     def __abs__():
0.12 /testbed/sympy/core/numbers.py(3793):     def floor(self):
0.12 /testbed/sympy/core/numbers.py(3796):     def ceiling(self):
0.12 /testbed/sympy/core/numbers.py(3799):     @staticmethod
0.12 /testbed/sympy/core/numbers.py(3800):     def __neg__():
0.12 /testbed/sympy/core/numbers.py(3803):     def _eval_power(self, expt):
0.12 /testbed/sympy/core/numbers.py(3817): zoo = S.ComplexInfinity
0.12 /testbed/sympy/core/numbers.py(3820): class NumberSymbol(AtomicExpr):
0.12 /testbed/sympy/core/numbers.py(3820): class NumberSymbol(AtomicExpr):
0.12 /testbed/sympy/core/numbers.py(3822):     is_commutative = True
0.12 /testbed/sympy/core/numbers.py(3823):     is_finite = True
0.12 /testbed/sympy/core/numbers.py(3824):     is_number = True
0.12 /testbed/sympy/core/numbers.py(3826):     __slots__ = ()
0.12 /testbed/sympy/core/numbers.py(3828):     is_NumberSymbol = True
0.12 /testbed/sympy/core/numbers.py(3830):     kind = NumberKind
0.12 /testbed/sympy/core/numbers.py(3832):     def __new__(cls):
0.12 /testbed/sympy/core/numbers.py(3835):     def approximation(self, number_cls):
0.12 /testbed/sympy/core/numbers.py(3841):     def _eval_evalf(self, prec):
0.12 /testbed/sympy/core/numbers.py(3844):     def __eq__(self, other):
0.12 /testbed/sympy/core/numbers.py(3856):     def __ne__(self, other):
0.12 /testbed/sympy/core/numbers.py(3859):     def __le__(self, other):
0.12 /testbed/sympy/core/numbers.py(3864):     def __ge__(self, other):
0.12 /testbed/sympy/core/numbers.py(3869):     def __int__(self):
0.12 /testbed/sympy/core/numbers.py(3873):     def __hash__(self):
0.12 /testbed/sympy/core/numbers.py(3877): class Exp1(NumberSymbol, metaclass=Singleton):
0.12 /testbed/sympy/core/numbers.py(3877): class Exp1(NumberSymbol, metaclass=Singleton):
0.12 /testbed/sympy/core/numbers.py(3878):     r"""The `e` constant.
0.12 /testbed/sympy/core/numbers.py(3905):     is_real = True
0.12 /testbed/sympy/core/numbers.py(3906):     is_positive = True
0.12 /testbed/sympy/core/numbers.py(3907):     is_negative = False  # XXX Forces is_negative/is_nonnegative
0.12 /testbed/sympy/core/numbers.py(3908):     is_irrational = True
0.12 /testbed/sympy/core/numbers.py(3909):     is_number = True
0.12 /testbed/sympy/core/numbers.py(3910):     is_algebraic = False
0.12 /testbed/sympy/core/numbers.py(3911):     is_transcendental = True
0.12 /testbed/sympy/core/numbers.py(3913):     __slots__ = ()
0.12 /testbed/sympy/core/numbers.py(3915):     def _latex(self, printer):
0.12 /testbed/sympy/core/numbers.py(3918):     @staticmethod
0.12 /testbed/sympy/core/numbers.py(3919):     def __abs__():
0.12 /testbed/sympy/core/numbers.py(3922):     def __int__(self):
0.12 /testbed/sympy/core/numbers.py(3925):     def _as_mpf_val(self, prec):
0.12 /testbed/sympy/core/numbers.py(3928):     def approximation_interval(self, number_cls):
0.12 /testbed/sympy/core/numbers.py(3934):     def _eval_power(self, expt):
0.12 /testbed/sympy/core/numbers.py(3941):     def _eval_power_exp_is_pow(self, arg):
0.12 /testbed/sympy/core/numbers.py(4021):     def _eval_rewrite_as_sin(self, **kwargs):
0.12 /testbed/sympy/core/numbers.py(4025):     def _eval_rewrite_as_cos(self, **kwargs):
0.12 /testbed/sympy/core/numbers.py(4029): E = S.Exp1
0.12 /testbed/sympy/core/numbers.py(4032): class Pi(NumberSymbol, metaclass=Singleton):
0.12 /testbed/sympy/core/numbers.py(4032): class Pi(NumberSymbol, metaclass=Singleton):
0.12 /testbed/sympy/core/numbers.py(4033):     r"""The `\pi` constant.
0.12 /testbed/sympy/core/numbers.py(4068):     is_real = True
0.12 /testbed/sympy/core/numbers.py(4069):     is_positive = True
0.12 /testbed/sympy/core/numbers.py(4070):     is_negative = False
0.12 /testbed/sympy/core/numbers.py(4071):     is_irrational = True
0.12 /testbed/sympy/core/numbers.py(4072):     is_number = True
0.12 /testbed/sympy/core/numbers.py(4073):     is_algebraic = False
0.12 /testbed/sympy/core/numbers.py(4074):     is_transcendental = True
0.12 /testbed/sympy/core/numbers.py(4076):     __slots__ = ()
0.12 /testbed/sympy/core/numbers.py(4078):     def _latex(self, printer):
0.12 /testbed/sympy/core/numbers.py(4081):     @staticmethod
0.12 /testbed/sympy/core/numbers.py(4082):     def __abs__():
0.12 /testbed/sympy/core/numbers.py(4085):     def __int__(self):
0.12 /testbed/sympy/core/numbers.py(4088):     def _as_mpf_val(self, prec):
0.12 /testbed/sympy/core/numbers.py(4091):     def approximation_interval(self, number_cls):
0.12 /testbed/sympy/core/numbers.py(4097): pi = S.Pi
0.12 /testbed/sympy/core/numbers.py(4100): class GoldenRatio(NumberSymbol, metaclass=Singleton):
0.12 /testbed/sympy/core/numbers.py(4100): class GoldenRatio(NumberSymbol, metaclass=Singleton):
0.12 /testbed/sympy/core/numbers.py(4101):     r"""The golden ratio, `\phi`.
0.12 /testbed/sympy/core/numbers.py(4129):     is_real = True
0.12 /testbed/sympy/core/numbers.py(4130):     is_positive = True
0.12 /testbed/sympy/core/numbers.py(4131):     is_negative = False
0.12 /testbed/sympy/core/numbers.py(4132):     is_irrational = True
0.12 /testbed/sympy/core/numbers.py(4133):     is_number = True
0.12 /testbed/sympy/core/numbers.py(4134):     is_algebraic = True
0.12 /testbed/sympy/core/numbers.py(4135):     is_transcendental = False
0.12 /testbed/sympy/core/numbers.py(4137):     __slots__ = ()
0.12 /testbed/sympy/core/numbers.py(4139):     def _latex(self, printer):
0.12 /testbed/sympy/core/numbers.py(4142):     def __int__(self):
0.12 /testbed/sympy/core/numbers.py(4145):     def _as_mpf_val(self, prec):
0.12 /testbed/sympy/core/numbers.py(4150):     def _eval_expand_func(self, **hints):
0.12 /testbed/sympy/core/numbers.py(4154):     def approximation_interval(self, number_cls):
0.12 /testbed/sympy/core/numbers.py(4160):     _eval_rewrite_as_sqrt = _eval_expand_func
0.12 /testbed/sympy/core/numbers.py(4163): class TribonacciConstant(NumberSymbol, metaclass=Singleton):
0.12 /testbed/sympy/core/numbers.py(4163): class TribonacciConstant(NumberSymbol, metaclass=Singleton):
0.12 /testbed/sympy/core/numbers.py(4164):     r"""The tribonacci constant.
0.12 /testbed/sympy/core/numbers.py(4200):     is_real = True
0.12 /testbed/sympy/core/numbers.py(4201):     is_positive = True
0.12 /testbed/sympy/core/numbers.py(4202):     is_negative = False
0.12 /testbed/sympy/core/numbers.py(4203):     is_irrational = True
0.12 /testbed/sympy/core/numbers.py(4204):     is_number = True
0.12 /testbed/sympy/core/numbers.py(4205):     is_algebraic = True
0.12 /testbed/sympy/core/numbers.py(4206):     is_transcendental = False
0.12 /testbed/sympy/core/numbers.py(4208):     __slots__ = ()
0.12 /testbed/sympy/core/numbers.py(4210):     def _latex(self, printer):
0.12 /testbed/sympy/core/numbers.py(4213):     def __int__(self):
0.12 /testbed/sympy/core/numbers.py(4216):     def _eval_evalf(self, prec):
0.12 /testbed/sympy/core/numbers.py(4220):     def _eval_expand_func(self, **hints):
0.12 /testbed/sympy/core/numbers.py(4224):     def approximation_interval(self, number_cls):
0.12 /testbed/sympy/core/numbers.py(4230):     _eval_rewrite_as_sqrt = _eval_expand_func
0.12 /testbed/sympy/core/numbers.py(4233): class EulerGamma(NumberSymbol, metaclass=Singleton):
0.12 /testbed/sympy/core/numbers.py(4233): class EulerGamma(NumberSymbol, metaclass=Singleton):
0.12 /testbed/sympy/core/numbers.py(4234):     r"""The Euler-Mascheroni constant.
0.12 /testbed/sympy/core/numbers.py(4265):     is_real = True
0.12 /testbed/sympy/core/numbers.py(4266):     is_positive = True
0.12 /testbed/sympy/core/numbers.py(4267):     is_negative = False
0.12 /testbed/sympy/core/numbers.py(4268):     is_irrational = None
0.12 /testbed/sympy/core/numbers.py(4269):     is_number = True
0.12 /testbed/sympy/core/numbers.py(4271):     __slots__ = ()
0.12 /testbed/sympy/core/numbers.py(4273):     def _latex(self, printer):
0.12 /testbed/sympy/core/numbers.py(4276):     def __int__(self):
0.12 /testbed/sympy/core/numbers.py(4279):     def _as_mpf_val(self, prec):
0.12 /testbed/sympy/core/numbers.py(4285):     def approximation_interval(self, number_cls):
0.12 /testbed/sympy/core/numbers.py(4292): class Catalan(NumberSymbol, metaclass=Singleton):
0.12 /testbed/sympy/core/numbers.py(4292): class Catalan(NumberSymbol, metaclass=Singleton):
0.12 /testbed/sympy/core/numbers.py(4293):     r"""Catalan's constant.
0.12 /testbed/sympy/core/numbers.py(4320):     is_real = True
0.12 /testbed/sympy/core/numbers.py(4321):     is_positive = True
0.12 /testbed/sympy/core/numbers.py(4322):     is_negative = False
0.12 /testbed/sympy/core/numbers.py(4323):     is_irrational = None
0.12 /testbed/sympy/core/numbers.py(4324):     is_number = True
0.12 /testbed/sympy/core/numbers.py(4326):     __slots__ = ()
0.12 /testbed/sympy/core/numbers.py(4328):     def __int__(self):
0.12 /testbed/sympy/core/numbers.py(4331):     def _as_mpf_val(self, prec):
0.12 /testbed/sympy/core/numbers.py(4337):     def approximation_interval(self, number_cls):
0.12 /testbed/sympy/core/numbers.py(4343):     def _eval_rewrite_as_Sum(self, k_sym=None, symbols=None):
0.12 /testbed/sympy/core/numbers.py(4351):     def _latex(self, printer):
0.12 /testbed/sympy/core/numbers.py(4355): class ImaginaryUnit(AtomicExpr, metaclass=Singleton):
0.12 /testbed/sympy/core/numbers.py(4355): class ImaginaryUnit(AtomicExpr, metaclass=Singleton):
0.12 /testbed/sympy/core/numbers.py(4356):     r"""The imaginary unit, `i = \sqrt{-1}`.
0.12 /testbed/sympy/core/numbers.py(4378):     is_commutative = True
0.12 /testbed/sympy/core/numbers.py(4379):     is_imaginary = True
0.12 /testbed/sympy/core/numbers.py(4380):     is_finite = True
0.12 /testbed/sympy/core/numbers.py(4381):     is_number = True
0.12 /testbed/sympy/core/numbers.py(4382):     is_algebraic = True
0.12 /testbed/sympy/core/numbers.py(4383):     is_transcendental = False
0.12 /testbed/sympy/core/numbers.py(4385):     kind = NumberKind
0.12 /testbed/sympy/core/numbers.py(4387):     __slots__ = ()
0.12 /testbed/sympy/core/numbers.py(4389):     def _latex(self, printer):
0.12 /testbed/sympy/core/numbers.py(4392):     @staticmethod
0.12 /testbed/sympy/core/numbers.py(4393):     def __abs__():
0.12 /testbed/sympy/core/numbers.py(4396):     def _eval_evalf(self, prec):
0.12 /testbed/sympy/core/numbers.py(4399):     def _eval_conjugate(self):
0.12 /testbed/sympy/core/numbers.py(4402):     def _eval_power(self, expt):
0.12 /testbed/sympy/core/numbers.py(4431):     def as_base_exp(self):
0.12 /testbed/sympy/core/numbers.py(4434):     @property
0.12 /testbed/sympy/core/numbers.py(4435):     def _mpc_(self):
0.12 /testbed/sympy/core/numbers.py(4438): I = S.ImaginaryUnit
0.12 /testbed/sympy/core/numbers.py(4440): @dispatch(Tuple, Number) # type:ignore
0.12 /testbed/sympy/core/numbers.py(4441): def _eval_is_eq(self, other): # noqa: F811
0.12 /testbed/sympy/core/numbers.py(4444): def sympify_fractions(f):
0.12 /testbed/sympy/core/numbers.py(4447): _sympy_converter[fractions.Fraction] = sympify_fractions
0.12 /testbed/sympy/core/numbers.py(4449): if HAS_GMPY:
0.12 /testbed/sympy/core/numbers.py(4463): def sympify_mpmath_mpq(x):
0.12 /testbed/sympy/core/numbers.py(4467): _sympy_converter[type(mpmath.rational.mpq(1, 2))] = sympify_mpmath_mpq
0.12 /testbed/sympy/core/numbers.py(4470): def sympify_mpmath(x):
0.12 /testbed/sympy/core/numbers.py(4473): _sympy_converter[mpnumeric] = sympify_mpmath
0.12 /testbed/sympy/core/numbers.py(4476): def sympify_complex(a):
0.12 /testbed/sympy/core/numbers.py(4480): _sympy_converter[complex] = sympify_complex
0.12 /testbed/sympy/core/numbers.py(4482): from .power import Pow, integer_nthroot
0.13 /testbed/sympy/core/numbers.py(4483): from .mul import Mul
0.13 /testbed/sympy/core/numbers.py(4484): Mul.identity = One()
0.13 /testbed/sympy/core/numbers.py(4485): from .add import Add
0.13 /testbed/sympy/core/numbers.py(4486): Add.identity = Zero()
0.13 /testbed/sympy/core/numbers.py(4488): def _register_classes():
0.13 /testbed/sympy/core/numbers.py(4494): _register_classes()
0.13 /testbed/sympy/core/numbers.py(4489):     numbers.Number.register(Number)
0.13 /testbed/sympy/core/numbers.py(4490):     numbers.Real.register(Float)
0.13 /testbed/sympy/core/numbers.py(4491):     numbers.Rational.register(Rational)
0.13 /testbed/sympy/core/numbers.py(4492):     numbers.Integral.register(Integer)
0.13 /testbed/sympy/core/numbers.py(4496): _illegal = (S.NaN, S.Infinity, S.NegativeInfinity, S.ComplexInfinity)
0.14 /testbed/sympy/core/numbers.py(679):         return mlib.to_float(self._as_mpf_val(53))
0.14 /testbed/sympy/core/numbers.py(3418):         return mlib.finf
0.14 /testbed/sympy/core/numbers.py(679):         return mlib.to_float(self._as_mpf_val(53))
0.14 /testbed/sympy/core/numbers.py(3584):         return mlib.fninf
0.15 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.15 /testbed/sympy/core/numbers.py(2097):         try:
0.15 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.15 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.15 /testbed/sympy/core/numbers.py(2106):         if ival == -1:
0.15 /testbed/sympy/core/numbers.py(2108):         if ival == 0:
0.15 /testbed/sympy/core/numbers.py(2109):             return S.Zero
0.15 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.15 /testbed/sympy/core/numbers.py(2097):         try:
0.15 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.15 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.15 /testbed/sympy/core/numbers.py(2105):             return S.One
0.16 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.16 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.16 /testbed/sympy/core/numbers.py(2246):         return Rational.__eq__(self, other)
0.16 /testbed/sympy/core/numbers.py(1871):         try:
0.16 /testbed/sympy/core/numbers.py(1872):             other = _sympify(other)
0.16 /testbed/sympy/core/numbers.py(1873):         except SympifyError:
0.16 /testbed/sympy/core/numbers.py(1874):             return NotImplemented
0.16 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.16 /testbed/sympy/core/numbers.py(2097):         try:
0.16 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.16 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.16 /testbed/sympy/core/numbers.py(2105):             return S.One
0.16 /testbed/sympy/core/numbers.py(714):         return self.class_key(), (0, ()), (), self
0.16 /testbed/sympy/core/numbers.py(710):         return 1, 0, 'Number'
0.16 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.16 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.16 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.16 /testbed/sympy/core/numbers.py(2097):         try:
0.16 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.16 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.16 /testbed/sympy/core/numbers.py(2106):         if ival == -1:
0.16 /testbed/sympy/core/numbers.py(2108):         if ival == 0:
0.16 /testbed/sympy/core/numbers.py(2110):         obj = Expr.__new__(cls)
0.16 /testbed/sympy/core/numbers.py(2111):         obj.p = ival
0.16 /testbed/sympy/core/numbers.py(2112):         return obj
0.16 /testbed/sympy/core/numbers.py(714):         return self.class_key(), (0, ()), (), self
0.16 /testbed/sympy/core/numbers.py(710):         return 1, 0, 'Number'
0.16 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.16 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.16 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.16 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.16 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.16 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.16 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.16 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.16 /testbed/sympy/core/numbers.py(2252):         try:
0.16 /testbed/sympy/core/numbers.py(2253):             other = _sympify(other)
0.16 /testbed/sympy/core/numbers.py(2256):         if other.is_Integer:
0.16 /testbed/sympy/core/numbers.py(2257):             return _sympify(self.p > other.p)
0.16 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.16 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.16 /testbed/sympy/core/numbers.py(2246):         return Rational.__eq__(self, other)
0.16 /testbed/sympy/core/numbers.py(1871):         try:
0.16 /testbed/sympy/core/numbers.py(1872):             other = _sympify(other)
0.16 /testbed/sympy/core/numbers.py(1873):         except SympifyError:
0.16 /testbed/sympy/core/numbers.py(1874):             return NotImplemented
0.16 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.16 /testbed/sympy/core/numbers.py(2097):         try:
0.16 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.16 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.16 /testbed/sympy/core/numbers.py(2105):             return S.One
0.16 /testbed/sympy/core/numbers.py(714):         return self.class_key(), (0, ()), (), self
0.16 /testbed/sympy/core/numbers.py(710):         return 1, 0, 'Number'
0.16 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.16 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.16 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.16 /testbed/sympy/core/numbers.py(2097):         try:
0.16 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.16 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.16 /testbed/sympy/core/numbers.py(2106):         if ival == -1:
0.16 /testbed/sympy/core/numbers.py(2108):         if ival == 0:
0.16 /testbed/sympy/core/numbers.py(2110):         obj = Expr.__new__(cls)
0.16 /testbed/sympy/core/numbers.py(2111):         obj.p = ival
0.16 /testbed/sympy/core/numbers.py(2112):         return obj
0.16 /testbed/sympy/core/numbers.py(714):         return self.class_key(), (0, ()), (), self
0.16 /testbed/sympy/core/numbers.py(710):         return 1, 0, 'Number'
0.16 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.16 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.16 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.16 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.16 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.16 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.16 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.16 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.16 /testbed/sympy/core/numbers.py(2252):         try:
0.16 /testbed/sympy/core/numbers.py(2253):             other = _sympify(other)
0.16 /testbed/sympy/core/numbers.py(2256):         if other.is_Integer:
0.16 /testbed/sympy/core/numbers.py(2257):             return _sympify(self.p > other.p)
0.18 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.18 /testbed/sympy/core/numbers.py(2097):         try:
0.18 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.18 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.18 /testbed/sympy/core/numbers.py(2105):             return S.One
0.18 /testbed/sympy/core/numbers.py(714):         return self.class_key(), (0, ()), (), self
0.18 /testbed/sympy/core/numbers.py(710):         return 1, 0, 'Number'
0.18 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.18 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.18 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.18 /testbed/sympy/core/numbers.py(2097):         try:
0.18 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.18 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.18 /testbed/sympy/core/numbers.py(2106):         if ival == -1:
0.18 /testbed/sympy/core/numbers.py(2108):         if ival == 0:
0.18 /testbed/sympy/core/numbers.py(2110):         obj = Expr.__new__(cls)
0.18 /testbed/sympy/core/numbers.py(2111):         obj.p = ival
0.18 /testbed/sympy/core/numbers.py(2112):         return obj
0.18 /testbed/sympy/core/numbers.py(714):         return self.class_key(), (0, ()), (), self
0.18 /testbed/sympy/core/numbers.py(710):         return 1, 0, 'Number'
0.18 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.18 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.18 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.18 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.18 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.18 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.18 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.18 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.18 /testbed/sympy/core/numbers.py(2252):         try:
0.18 /testbed/sympy/core/numbers.py(2253):             other = _sympify(other)
0.18 /testbed/sympy/core/numbers.py(2256):         if other.is_Integer:
0.18 /testbed/sympy/core/numbers.py(2257):             return _sympify(self.p > other.p)
0.18 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.18 /testbed/sympy/core/numbers.py(2097):         try:
0.18 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.18 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.18 /testbed/sympy/core/numbers.py(2106):         if ival == -1:
0.18 /testbed/sympy/core/numbers.py(2107):             return S.NegativeOne
0.18 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.18 /testbed/sympy/core/numbers.py(2097):         try:
0.18 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.18 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.18 /testbed/sympy/core/numbers.py(2105):             return S.One
0.18 /testbed/sympy/core/numbers.py(714):         return self.class_key(), (0, ()), (), self
0.18 /testbed/sympy/core/numbers.py(710):         return 1, 0, 'Number'
0.18 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.18 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.18 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.18 /testbed/sympy/core/numbers.py(2097):         try:
0.18 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.18 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.18 /testbed/sympy/core/numbers.py(2106):         if ival == -1:
0.18 /testbed/sympy/core/numbers.py(2108):         if ival == 0:
0.18 /testbed/sympy/core/numbers.py(2110):         obj = Expr.__new__(cls)
0.18 /testbed/sympy/core/numbers.py(2111):         obj.p = ival
0.18 /testbed/sympy/core/numbers.py(2112):         return obj
0.18 /testbed/sympy/core/numbers.py(714):         return self.class_key(), (0, ()), (), self
0.18 /testbed/sympy/core/numbers.py(710):         return 1, 0, 'Number'
0.18 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.18 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.18 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.18 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.18 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.18 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.18 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.18 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.18 /testbed/sympy/core/numbers.py(2252):         try:
0.18 /testbed/sympy/core/numbers.py(2253):             other = _sympify(other)
0.18 /testbed/sympy/core/numbers.py(2256):         if other.is_Integer:
0.18 /testbed/sympy/core/numbers.py(2257):             return _sympify(self.p > other.p)
0.18 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.18 /testbed/sympy/core/numbers.py(2097):         try:
0.18 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.18 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.18 /testbed/sympy/core/numbers.py(2105):             return S.One
0.18 /testbed/sympy/core/numbers.py(714):         return self.class_key(), (0, ()), (), self
0.18 /testbed/sympy/core/numbers.py(710):         return 1, 0, 'Number'
0.18 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.18 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.18 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.18 /testbed/sympy/core/numbers.py(2097):         try:
0.18 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.18 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.18 /testbed/sympy/core/numbers.py(2106):         if ival == -1:
0.18 /testbed/sympy/core/numbers.py(2108):         if ival == 0:
0.18 /testbed/sympy/core/numbers.py(2110):         obj = Expr.__new__(cls)
0.18 /testbed/sympy/core/numbers.py(2111):         obj.p = ival
0.18 /testbed/sympy/core/numbers.py(2112):         return obj
0.18 /testbed/sympy/core/numbers.py(714):         return self.class_key(), (0, ()), (), self
0.18 /testbed/sympy/core/numbers.py(710):         return 1, 0, 'Number'
0.18 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.18 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.18 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.18 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.18 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.18 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.18 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.18 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.18 /testbed/sympy/core/numbers.py(2252):         try:
0.18 /testbed/sympy/core/numbers.py(2253):             other = _sympify(other)
0.18 /testbed/sympy/core/numbers.py(2256):         if other.is_Integer:
0.18 /testbed/sympy/core/numbers.py(2257):             return _sympify(self.p > other.p)
0.18 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.18 /testbed/sympy/core/numbers.py(2097):         try:
0.18 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.18 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.18 /testbed/sympy/core/numbers.py(2106):         if ival == -1:
0.18 /testbed/sympy/core/numbers.py(2108):         if ival == 0:
0.18 /testbed/sympy/core/numbers.py(2110):         obj = Expr.__new__(cls)
0.18 /testbed/sympy/core/numbers.py(2111):         obj.p = ival
0.18 /testbed/sympy/core/numbers.py(2112):         return obj
0.18 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.18 /testbed/sympy/core/numbers.py(2243):             return (self.p == other)
0.18 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.18 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.18 /testbed/sympy/core/numbers.py(2246):         return Rational.__eq__(self, other)
0.18 /testbed/sympy/core/numbers.py(1871):         try:
0.18 /testbed/sympy/core/numbers.py(1872):             other = _sympify(other)
0.18 /testbed/sympy/core/numbers.py(1875):         if not isinstance(other, Number):
0.18 /testbed/sympy/core/numbers.py(1879):         if not self:
0.18 /testbed/sympy/core/numbers.py(1881):         if other.is_NumberSymbol:
0.18 /testbed/sympy/core/numbers.py(1885):         if other.is_Rational:
0.18 /testbed/sympy/core/numbers.py(1889):         if other.is_Float:
0.18 /testbed/sympy/core/numbers.py(1915):         return False
0.18 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.18 /testbed/sympy/core/numbers.py(2097):         try:
0.18 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.18 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.18 /testbed/sympy/core/numbers.py(2105):             return S.One
0.18 /testbed/sympy/core/numbers.py(714):         return self.class_key(), (0, ()), (), self
0.18 /testbed/sympy/core/numbers.py(710):         return 1, 0, 'Number'
0.18 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.18 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.18 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.18 /testbed/sympy/core/numbers.py(2097):         try:
0.18 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.18 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.18 /testbed/sympy/core/numbers.py(2106):         if ival == -1:
0.18 /testbed/sympy/core/numbers.py(2108):         if ival == 0:
0.18 /testbed/sympy/core/numbers.py(2110):         obj = Expr.__new__(cls)
0.18 /testbed/sympy/core/numbers.py(2111):         obj.p = ival
0.18 /testbed/sympy/core/numbers.py(2112):         return obj
0.18 /testbed/sympy/core/numbers.py(714):         return self.class_key(), (0, ()), (), self
0.18 /testbed/sympy/core/numbers.py(710):         return 1, 0, 'Number'
0.18 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.18 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.18 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.18 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.18 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.18 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.18 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.18 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.18 /testbed/sympy/core/numbers.py(2252):         try:
0.18 /testbed/sympy/core/numbers.py(2253):             other = _sympify(other)
0.18 /testbed/sympy/core/numbers.py(2256):         if other.is_Integer:
0.18 /testbed/sympy/core/numbers.py(2257):             return _sympify(self.p > other.p)
0.18 /testbed/sympy/core/numbers.py(1590):         if q is None:
0.18 /testbed/sympy/core/numbers.py(1628):         if not isinstance(p, SYMPY_INTS):
0.18 /testbed/sympy/core/numbers.py(1633):             p = int(p)
0.18 /testbed/sympy/core/numbers.py(1635):         if not isinstance(q, SYMPY_INTS):
0.18 /testbed/sympy/core/numbers.py(1640):             q = int(q)
0.18 /testbed/sympy/core/numbers.py(1643):         if q == 0:
0.18 /testbed/sympy/core/numbers.py(1650):         if q < 0:
0.18 /testbed/sympy/core/numbers.py(1653):         if not gcd:
0.18 /testbed/sympy/core/numbers.py(1654):             gcd = igcd(abs(p), q)
0.18 /testbed/sympy/core/numbers.py(254):     if len(args) < 2:
0.18 /testbed/sympy/core/numbers.py(257):     args_temp = [abs(as_int(i)) for i in args]
0.18 /testbed/sympy/core/numbers.py(257):     args_temp = [abs(as_int(i)) for i in args]
0.18 /testbed/sympy/core/numbers.py(257):     args_temp = [abs(as_int(i)) for i in args]
0.18 /testbed/sympy/core/numbers.py(257):     args_temp = [abs(as_int(i)) for i in args]
0.18 /testbed/sympy/core/numbers.py(258):     if 1 in args_temp:
0.18 /testbed/sympy/core/numbers.py(259):         return 1
0.18 /testbed/sympy/core/numbers.py(1655):         if gcd > 1:
0.18 /testbed/sympy/core/numbers.py(1658):         if q == 1:
0.18 /testbed/sympy/core/numbers.py(1660):         if p == 1 and q == 2:
0.18 /testbed/sympy/core/numbers.py(1662):         obj = Expr.__new__(cls)
0.18 /testbed/sympy/core/numbers.py(1663):         obj.p = p
0.18 /testbed/sympy/core/numbers.py(1664):         obj.q = q
0.18 /testbed/sympy/core/numbers.py(1665):         return obj
0.18 /testbed/sympy/core/numbers.py(1590):         if q is None:
0.18 /testbed/sympy/core/numbers.py(1628):         if not isinstance(p, SYMPY_INTS):
0.18 /testbed/sympy/core/numbers.py(1633):             p = int(p)
0.18 /testbed/sympy/core/numbers.py(1635):         if not isinstance(q, SYMPY_INTS):
0.18 /testbed/sympy/core/numbers.py(1640):             q = int(q)
0.18 /testbed/sympy/core/numbers.py(1643):         if q == 0:
0.18 /testbed/sympy/core/numbers.py(1650):         if q < 0:
0.18 /testbed/sympy/core/numbers.py(1653):         if not gcd:
0.18 /testbed/sympy/core/numbers.py(1654):             gcd = igcd(abs(p), q)
0.18 /testbed/sympy/core/numbers.py(254):     if len(args) < 2:
0.18 /testbed/sympy/core/numbers.py(257):     args_temp = [abs(as_int(i)) for i in args]
0.18 /testbed/sympy/core/numbers.py(257):     args_temp = [abs(as_int(i)) for i in args]
0.18 /testbed/sympy/core/numbers.py(257):     args_temp = [abs(as_int(i)) for i in args]
0.18 /testbed/sympy/core/numbers.py(257):     args_temp = [abs(as_int(i)) for i in args]
0.18 /testbed/sympy/core/numbers.py(258):     if 1 in args_temp:
0.18 /testbed/sympy/core/numbers.py(259):         return 1
0.18 /testbed/sympy/core/numbers.py(1655):         if gcd > 1:
0.18 /testbed/sympy/core/numbers.py(1658):         if q == 1:
0.18 /testbed/sympy/core/numbers.py(1660):         if p == 1 and q == 2:
0.18 /testbed/sympy/core/numbers.py(1662):         obj = Expr.__new__(cls)
0.18 /testbed/sympy/core/numbers.py(1663):         obj.p = p
0.18 /testbed/sympy/core/numbers.py(1664):         obj.q = q
0.18 /testbed/sympy/core/numbers.py(1665):         return obj
0.18 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.18 /testbed/sympy/core/numbers.py(2097):         try:
0.18 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.18 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.18 /testbed/sympy/core/numbers.py(2105):             return S.One
0.18 /testbed/sympy/core/numbers.py(714):         return self.class_key(), (0, ()), (), self
0.18 /testbed/sympy/core/numbers.py(710):         return 1, 0, 'Number'
0.18 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.18 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.18 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.18 /testbed/sympy/core/numbers.py(2097):         try:
0.18 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.18 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.18 /testbed/sympy/core/numbers.py(2106):         if ival == -1:
0.18 /testbed/sympy/core/numbers.py(2108):         if ival == 0:
0.18 /testbed/sympy/core/numbers.py(2110):         obj = Expr.__new__(cls)
0.18 /testbed/sympy/core/numbers.py(2111):         obj.p = ival
0.18 /testbed/sympy/core/numbers.py(2112):         return obj
0.18 /testbed/sympy/core/numbers.py(714):         return self.class_key(), (0, ()), (), self
0.18 /testbed/sympy/core/numbers.py(710):         return 1, 0, 'Number'
0.18 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.18 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.18 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.18 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.18 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.18 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.18 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.18 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.18 /testbed/sympy/core/numbers.py(2252):         try:
0.18 /testbed/sympy/core/numbers.py(2253):             other = _sympify(other)
0.18 /testbed/sympy/core/numbers.py(2256):         if other.is_Integer:
0.18 /testbed/sympy/core/numbers.py(2257):             return _sympify(self.p > other.p)
0.18 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.18 /testbed/sympy/core/numbers.py(2097):         try:
0.18 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.18 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.18 /testbed/sympy/core/numbers.py(2105):             return S.One
0.18 /testbed/sympy/core/numbers.py(714):         return self.class_key(), (0, ()), (), self
0.18 /testbed/sympy/core/numbers.py(710):         return 1, 0, 'Number'
0.18 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.18 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.18 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.18 /testbed/sympy/core/numbers.py(2097):         try:
0.18 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.18 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.18 /testbed/sympy/core/numbers.py(2106):         if ival == -1:
0.18 /testbed/sympy/core/numbers.py(2108):         if ival == 0:
0.18 /testbed/sympy/core/numbers.py(2110):         obj = Expr.__new__(cls)
0.18 /testbed/sympy/core/numbers.py(2111):         obj.p = ival
0.18 /testbed/sympy/core/numbers.py(2112):         return obj
0.18 /testbed/sympy/core/numbers.py(714):         return self.class_key(), (0, ()), (), self
0.18 /testbed/sympy/core/numbers.py(710):         return 1, 0, 'Number'
0.18 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.18 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.18 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.18 /testbed/sympy/core/numbers.py(2097):         try:
0.18 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.18 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.18 /testbed/sympy/core/numbers.py(2106):         if ival == -1:
0.18 /testbed/sympy/core/numbers.py(2108):         if ival == 0:
0.18 /testbed/sympy/core/numbers.py(2110):         obj = Expr.__new__(cls)
0.18 /testbed/sympy/core/numbers.py(2111):         obj.p = ival
0.18 /testbed/sympy/core/numbers.py(2112):         return obj
0.18 /testbed/sympy/core/numbers.py(714):         return self.class_key(), (0, ()), (), self
0.18 /testbed/sympy/core/numbers.py(710):         return 1, 0, 'Number'
0.18 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.18 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.18 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.18 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.18 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.18 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.18 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.18 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.18 /testbed/sympy/core/numbers.py(2252):         try:
0.18 /testbed/sympy/core/numbers.py(2253):             other = _sympify(other)
0.18 /testbed/sympy/core/numbers.py(2256):         if other.is_Integer:
0.18 /testbed/sympy/core/numbers.py(2257):             return _sympify(self.p > other.p)
0.18 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.18 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.18 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.18 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.18 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.18 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.18 /testbed/sympy/core/numbers.py(2261):         try:
0.18 /testbed/sympy/core/numbers.py(2262):             other = _sympify(other)
0.18 /testbed/sympy/core/numbers.py(2265):         if other.is_Integer:
0.18 /testbed/sympy/core/numbers.py(2266):             return _sympify(self.p < other.p)
0.18 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.18 /testbed/sympy/core/numbers.py(2097):         try:
0.18 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.18 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.18 /testbed/sympy/core/numbers.py(2105):             return S.One
0.18 /testbed/sympy/core/numbers.py(714):         return self.class_key(), (0, ()), (), self
0.18 /testbed/sympy/core/numbers.py(710):         return 1, 0, 'Number'
0.18 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.18 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.18 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.18 /testbed/sympy/core/numbers.py(2097):         try:
0.18 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.18 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.18 /testbed/sympy/core/numbers.py(2106):         if ival == -1:
0.18 /testbed/sympy/core/numbers.py(2108):         if ival == 0:
0.18 /testbed/sympy/core/numbers.py(2110):         obj = Expr.__new__(cls)
0.18 /testbed/sympy/core/numbers.py(2111):         obj.p = ival
0.18 /testbed/sympy/core/numbers.py(2112):         return obj
0.18 /testbed/sympy/core/numbers.py(714):         return self.class_key(), (0, ()), (), self
0.18 /testbed/sympy/core/numbers.py(710):         return 1, 0, 'Number'
0.18 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.18 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.18 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.18 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.18 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.18 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.18 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.18 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.18 /testbed/sympy/core/numbers.py(2252):         try:
0.18 /testbed/sympy/core/numbers.py(2253):             other = _sympify(other)
0.18 /testbed/sympy/core/numbers.py(2256):         if other.is_Integer:
0.18 /testbed/sympy/core/numbers.py(2257):             return _sympify(self.p > other.p)
0.18 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.18 /testbed/sympy/core/numbers.py(2097):         try:
0.18 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.18 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.18 /testbed/sympy/core/numbers.py(2105):             return S.One
0.18 /testbed/sympy/core/numbers.py(714):         return self.class_key(), (0, ()), (), self
0.18 /testbed/sympy/core/numbers.py(710):         return 1, 0, 'Number'
0.18 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.18 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.18 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.18 /testbed/sympy/core/numbers.py(2097):         try:
0.18 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.18 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.18 /testbed/sympy/core/numbers.py(2106):         if ival == -1:
0.18 /testbed/sympy/core/numbers.py(2108):         if ival == 0:
0.18 /testbed/sympy/core/numbers.py(2110):         obj = Expr.__new__(cls)
0.18 /testbed/sympy/core/numbers.py(2111):         obj.p = ival
0.18 /testbed/sympy/core/numbers.py(2112):         return obj
0.18 /testbed/sympy/core/numbers.py(714):         return self.class_key(), (0, ()), (), self
0.18 /testbed/sympy/core/numbers.py(710):         return 1, 0, 'Number'
0.18 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.18 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.18 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.18 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.18 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.18 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.18 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.18 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.18 /testbed/sympy/core/numbers.py(2252):         try:
0.18 /testbed/sympy/core/numbers.py(2253):             other = _sympify(other)
0.18 /testbed/sympy/core/numbers.py(2256):         if other.is_Integer:
0.18 /testbed/sympy/core/numbers.py(2257):             return _sympify(self.p > other.p)
0.18 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.18 /testbed/sympy/core/numbers.py(2097):         try:
0.18 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.18 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.18 /testbed/sympy/core/numbers.py(2105):             return S.One
0.18 /testbed/sympy/core/numbers.py(714):         return self.class_key(), (0, ()), (), self
0.18 /testbed/sympy/core/numbers.py(710):         return 1, 0, 'Number'
0.18 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.18 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.18 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.18 /testbed/sympy/core/numbers.py(2097):         try:
0.18 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.18 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.18 /testbed/sympy/core/numbers.py(2106):         if ival == -1:
0.18 /testbed/sympy/core/numbers.py(2108):         if ival == 0:
0.18 /testbed/sympy/core/numbers.py(2110):         obj = Expr.__new__(cls)
0.18 /testbed/sympy/core/numbers.py(2111):         obj.p = ival
0.18 /testbed/sympy/core/numbers.py(2112):         return obj
0.18 /testbed/sympy/core/numbers.py(714):         return self.class_key(), (0, ()), (), self
0.18 /testbed/sympy/core/numbers.py(710):         return 1, 0, 'Number'
0.18 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.18 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.18 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.18 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.18 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.18 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.18 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.18 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.18 /testbed/sympy/core/numbers.py(2252):         try:
0.18 /testbed/sympy/core/numbers.py(2253):             other = _sympify(other)
0.18 /testbed/sympy/core/numbers.py(2256):         if other.is_Integer:
0.18 /testbed/sympy/core/numbers.py(2257):             return _sympify(self.p > other.p)
0.20 /testbed/sympy/core/numbers.py(3148):         return S.NegativeOne
0.20 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.20 /testbed/sympy/core/numbers.py(2097):         try:
0.20 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.20 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.20 /testbed/sympy/core/numbers.py(2105):             return S.One
0.20 /testbed/sympy/core/numbers.py(714):         return self.class_key(), (0, ()), (), self
0.20 /testbed/sympy/core/numbers.py(710):         return 1, 0, 'Number'
0.20 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.20 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.20 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.20 /testbed/sympy/core/numbers.py(2097):         try:
0.20 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.20 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.20 /testbed/sympy/core/numbers.py(2106):         if ival == -1:
0.20 /testbed/sympy/core/numbers.py(2108):         if ival == 0:
0.20 /testbed/sympy/core/numbers.py(2110):         obj = Expr.__new__(cls)
0.20 /testbed/sympy/core/numbers.py(2111):         obj.p = ival
0.20 /testbed/sympy/core/numbers.py(2112):         return obj
0.20 /testbed/sympy/core/numbers.py(714):         return self.class_key(), (0, ()), (), self
0.20 /testbed/sympy/core/numbers.py(710):         return 1, 0, 'Number'
0.20 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.20 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.20 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.20 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.20 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.20 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.20 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.20 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.20 /testbed/sympy/core/numbers.py(2252):         try:
0.20 /testbed/sympy/core/numbers.py(2253):             other = _sympify(other)
0.20 /testbed/sympy/core/numbers.py(2256):         if other.is_Integer:
0.20 /testbed/sympy/core/numbers.py(2257):             return _sympify(self.p > other.p)
0.20 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.20 /testbed/sympy/core/numbers.py(2097):         try:
0.20 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.20 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.20 /testbed/sympy/core/numbers.py(2105):             return S.One
0.20 /testbed/sympy/core/numbers.py(714):         return self.class_key(), (0, ()), (), self
0.20 /testbed/sympy/core/numbers.py(710):         return 1, 0, 'Number'
0.20 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.20 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.20 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.20 /testbed/sympy/core/numbers.py(2097):         try:
0.20 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.20 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.20 /testbed/sympy/core/numbers.py(2106):         if ival == -1:
0.20 /testbed/sympy/core/numbers.py(2108):         if ival == 0:
0.20 /testbed/sympy/core/numbers.py(2110):         obj = Expr.__new__(cls)
0.20 /testbed/sympy/core/numbers.py(2111):         obj.p = ival
0.20 /testbed/sympy/core/numbers.py(2112):         return obj
0.20 /testbed/sympy/core/numbers.py(714):         return self.class_key(), (0, ()), (), self
0.20 /testbed/sympy/core/numbers.py(710):         return 1, 0, 'Number'
0.20 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.20 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.20 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.20 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.20 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.20 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.20 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.20 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.20 /testbed/sympy/core/numbers.py(2252):         try:
0.20 /testbed/sympy/core/numbers.py(2253):             other = _sympify(other)
0.20 /testbed/sympy/core/numbers.py(2256):         if other.is_Integer:
0.20 /testbed/sympy/core/numbers.py(2257):             return _sympify(self.p > other.p)
0.20 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.20 /testbed/sympy/core/numbers.py(2097):         try:
0.20 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.20 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.20 /testbed/sympy/core/numbers.py(2105):             return S.One
0.20 /testbed/sympy/core/numbers.py(714):         return self.class_key(), (0, ()), (), self
0.20 /testbed/sympy/core/numbers.py(710):         return 1, 0, 'Number'
0.20 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.20 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.20 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.20 /testbed/sympy/core/numbers.py(2097):         try:
0.20 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.20 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.20 /testbed/sympy/core/numbers.py(2106):         if ival == -1:
0.20 /testbed/sympy/core/numbers.py(2108):         if ival == 0:
0.20 /testbed/sympy/core/numbers.py(2110):         obj = Expr.__new__(cls)
0.20 /testbed/sympy/core/numbers.py(2111):         obj.p = ival
0.20 /testbed/sympy/core/numbers.py(2112):         return obj
0.20 /testbed/sympy/core/numbers.py(714):         return self.class_key(), (0, ()), (), self
0.20 /testbed/sympy/core/numbers.py(710):         return 1, 0, 'Number'
0.20 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.20 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.20 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.20 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.20 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.20 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.20 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.20 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.20 /testbed/sympy/core/numbers.py(2252):         try:
0.20 /testbed/sympy/core/numbers.py(2253):             other = _sympify(other)
0.20 /testbed/sympy/core/numbers.py(2256):         if other.is_Integer:
0.20 /testbed/sympy/core/numbers.py(2257):             return _sympify(self.p > other.p)
0.20 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.20 /testbed/sympy/core/numbers.py(2097):         try:
0.20 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.20 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.20 /testbed/sympy/core/numbers.py(2106):         if ival == -1:
0.20 /testbed/sympy/core/numbers.py(2108):         if ival == 0:
0.20 /testbed/sympy/core/numbers.py(2110):         obj = Expr.__new__(cls)
0.20 /testbed/sympy/core/numbers.py(2111):         obj.p = ival
0.20 /testbed/sympy/core/numbers.py(2112):         return obj
0.20 /testbed/sympy/core/numbers.py(714):         return self.class_key(), (0, ()), (), self
0.20 /testbed/sympy/core/numbers.py(710):         return 1, 0, 'Number'
0.20 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.20 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.20 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.20 /testbed/sympy/core/numbers.py(2097):         try:
0.20 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.20 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.20 /testbed/sympy/core/numbers.py(2106):         if ival == -1:
0.20 /testbed/sympy/core/numbers.py(2108):         if ival == 0:
0.20 /testbed/sympy/core/numbers.py(2110):         obj = Expr.__new__(cls)
0.20 /testbed/sympy/core/numbers.py(2111):         obj.p = ival
0.20 /testbed/sympy/core/numbers.py(2112):         return obj
0.20 /testbed/sympy/core/numbers.py(714):         return self.class_key(), (0, ()), (), self
0.20 /testbed/sympy/core/numbers.py(710):         return 1, 0, 'Number'
0.20 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.20 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.20 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.20 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.20 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.20 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.20 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.20 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.20 /testbed/sympy/core/numbers.py(2261):         try:
0.20 /testbed/sympy/core/numbers.py(2262):             other = _sympify(other)
0.20 /testbed/sympy/core/numbers.py(2265):         if other.is_Integer:
0.20 /testbed/sympy/core/numbers.py(2266):             return _sympify(self.p < other.p)
0.20 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.20 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.20 /testbed/sympy/core/numbers.py(2246):         return Rational.__eq__(self, other)
0.20 /testbed/sympy/core/numbers.py(1871):         try:
0.20 /testbed/sympy/core/numbers.py(1872):             other = _sympify(other)
0.20 /testbed/sympy/core/numbers.py(1873):         except SympifyError:
0.20 /testbed/sympy/core/numbers.py(1874):             return NotImplemented
0.20 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.20 /testbed/sympy/core/numbers.py(2097):         try:
0.20 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.20 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.20 /testbed/sympy/core/numbers.py(2105):             return S.One
0.20 /testbed/sympy/core/numbers.py(714):         return self.class_key(), (0, ()), (), self
0.20 /testbed/sympy/core/numbers.py(710):         return 1, 0, 'Number'
0.20 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.20 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.20 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.20 /testbed/sympy/core/numbers.py(2097):         try:
0.20 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.20 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.20 /testbed/sympy/core/numbers.py(2106):         if ival == -1:
0.20 /testbed/sympy/core/numbers.py(2108):         if ival == 0:
0.20 /testbed/sympy/core/numbers.py(2110):         obj = Expr.__new__(cls)
0.20 /testbed/sympy/core/numbers.py(2111):         obj.p = ival
0.20 /testbed/sympy/core/numbers.py(2112):         return obj
0.20 /testbed/sympy/core/numbers.py(714):         return self.class_key(), (0, ()), (), self
0.20 /testbed/sympy/core/numbers.py(710):         return 1, 0, 'Number'
0.20 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.20 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.20 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.20 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.20 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.20 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.20 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.20 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.20 /testbed/sympy/core/numbers.py(2252):         try:
0.20 /testbed/sympy/core/numbers.py(2253):             other = _sympify(other)
0.20 /testbed/sympy/core/numbers.py(2256):         if other.is_Integer:
0.20 /testbed/sympy/core/numbers.py(2257):             return _sympify(self.p > other.p)
0.20 /testbed/sympy/core/numbers.py(1871):         try:
0.20 /testbed/sympy/core/numbers.py(1872):             other = _sympify(other)
0.20 /testbed/sympy/core/numbers.py(1873):         except SympifyError:
0.20 /testbed/sympy/core/numbers.py(1874):             return NotImplemented
0.20 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.20 /testbed/sympy/core/numbers.py(2097):         try:
0.20 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.20 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.20 /testbed/sympy/core/numbers.py(2105):             return S.One
0.20 /testbed/sympy/core/numbers.py(714):         return self.class_key(), (0, ()), (), self
0.20 /testbed/sympy/core/numbers.py(710):         return 1, 0, 'Number'
0.20 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.20 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.20 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.20 /testbed/sympy/core/numbers.py(2097):         try:
0.20 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.20 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.20 /testbed/sympy/core/numbers.py(2106):         if ival == -1:
0.20 /testbed/sympy/core/numbers.py(2108):         if ival == 0:
0.20 /testbed/sympy/core/numbers.py(2110):         obj = Expr.__new__(cls)
0.20 /testbed/sympy/core/numbers.py(2111):         obj.p = ival
0.20 /testbed/sympy/core/numbers.py(2112):         return obj
0.20 /testbed/sympy/core/numbers.py(714):         return self.class_key(), (0, ()), (), self
0.20 /testbed/sympy/core/numbers.py(710):         return 1, 0, 'Number'
0.20 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.20 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.20 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.20 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.20 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.20 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.20 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.20 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.20 /testbed/sympy/core/numbers.py(2252):         try:
0.20 /testbed/sympy/core/numbers.py(2253):             other = _sympify(other)
0.20 /testbed/sympy/core/numbers.py(2256):         if other.is_Integer:
0.20 /testbed/sympy/core/numbers.py(2257):             return _sympify(self.p > other.p)
0.22 /testbed/sympy/core/numbers.py(3148):         return S.NegativeOne
0.22 /testbed/sympy/core/numbers.py(3148):         return S.NegativeOne
0.22 /testbed/sympy/core/numbers.py(3148):         return S.NegativeOne
0.22 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.22 /testbed/sympy/core/numbers.py(2097):         try:
0.22 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.22 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.22 /testbed/sympy/core/numbers.py(2105):             return S.One
0.22 /testbed/sympy/core/numbers.py(714):         return self.class_key(), (0, ()), (), self
0.22 /testbed/sympy/core/numbers.py(710):         return 1, 0, 'Number'
0.22 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.22 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.22 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.22 /testbed/sympy/core/numbers.py(2097):         try:
0.22 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.22 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.22 /testbed/sympy/core/numbers.py(2106):         if ival == -1:
0.22 /testbed/sympy/core/numbers.py(2108):         if ival == 0:
0.22 /testbed/sympy/core/numbers.py(2110):         obj = Expr.__new__(cls)
0.22 /testbed/sympy/core/numbers.py(2111):         obj.p = ival
0.22 /testbed/sympy/core/numbers.py(2112):         return obj
0.22 /testbed/sympy/core/numbers.py(714):         return self.class_key(), (0, ()), (), self
0.22 /testbed/sympy/core/numbers.py(710):         return 1, 0, 'Number'
0.22 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.22 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.22 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.22 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.22 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.22 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.22 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.22 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.22 /testbed/sympy/core/numbers.py(2252):         try:
0.22 /testbed/sympy/core/numbers.py(2253):             other = _sympify(other)
0.22 /testbed/sympy/core/numbers.py(2256):         if other.is_Integer:
0.22 /testbed/sympy/core/numbers.py(2257):             return _sympify(self.p > other.p)
0.22 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.22 /testbed/sympy/core/numbers.py(2097):         try:
0.22 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.22 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.22 /testbed/sympy/core/numbers.py(2106):         if ival == -1:
0.22 /testbed/sympy/core/numbers.py(2108):         if ival == 0:
0.22 /testbed/sympy/core/numbers.py(2110):         obj = Expr.__new__(cls)
0.22 /testbed/sympy/core/numbers.py(2111):         obj.p = ival
0.22 /testbed/sympy/core/numbers.py(2112):         return obj
0.22 /testbed/sympy/core/numbers.py(714):         return self.class_key(), (0, ()), (), self
0.22 /testbed/sympy/core/numbers.py(710):         return 1, 0, 'Number'
0.22 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.22 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.22 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.22 /testbed/sympy/core/numbers.py(2097):         try:
0.22 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.22 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.22 /testbed/sympy/core/numbers.py(2106):         if ival == -1:
0.22 /testbed/sympy/core/numbers.py(2108):         if ival == 0:
0.22 /testbed/sympy/core/numbers.py(2110):         obj = Expr.__new__(cls)
0.22 /testbed/sympy/core/numbers.py(2111):         obj.p = ival
0.22 /testbed/sympy/core/numbers.py(2112):         return obj
0.22 /testbed/sympy/core/numbers.py(714):         return self.class_key(), (0, ()), (), self
0.22 /testbed/sympy/core/numbers.py(710):         return 1, 0, 'Number'
0.22 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.22 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.22 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.22 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.22 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.22 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.22 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.22 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.22 /testbed/sympy/core/numbers.py(2261):         try:
0.22 /testbed/sympy/core/numbers.py(2262):             other = _sympify(other)
0.22 /testbed/sympy/core/numbers.py(2265):         if other.is_Integer:
0.22 /testbed/sympy/core/numbers.py(2266):             return _sympify(self.p < other.p)
0.22 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.22 /testbed/sympy/core/numbers.py(2097):         try:
0.22 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.22 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.22 /testbed/sympy/core/numbers.py(2105):             return S.One
0.22 /testbed/sympy/core/numbers.py(714):         return self.class_key(), (0, ()), (), self
0.22 /testbed/sympy/core/numbers.py(710):         return 1, 0, 'Number'
0.22 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.22 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.22 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.22 /testbed/sympy/core/numbers.py(2097):         try:
0.22 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.22 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.22 /testbed/sympy/core/numbers.py(2106):         if ival == -1:
0.22 /testbed/sympy/core/numbers.py(2108):         if ival == 0:
0.22 /testbed/sympy/core/numbers.py(2110):         obj = Expr.__new__(cls)
0.22 /testbed/sympy/core/numbers.py(2111):         obj.p = ival
0.22 /testbed/sympy/core/numbers.py(2112):         return obj
0.22 /testbed/sympy/core/numbers.py(714):         return self.class_key(), (0, ()), (), self
0.22 /testbed/sympy/core/numbers.py(710):         return 1, 0, 'Number'
0.22 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.22 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.22 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.22 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.22 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.22 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.22 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.22 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.22 /testbed/sympy/core/numbers.py(2252):         try:
0.22 /testbed/sympy/core/numbers.py(2253):             other = _sympify(other)
0.22 /testbed/sympy/core/numbers.py(2256):         if other.is_Integer:
0.22 /testbed/sympy/core/numbers.py(2257):             return _sympify(self.p > other.p)
0.24 /testbed/sympy/core/numbers.py(3874):         return super().__hash__()
0.24 /testbed/sympy/core/numbers.py(3874):         return super().__hash__()
0.24 /testbed/sympy/core/numbers.py(3874):         return super().__hash__()
0.24 /testbed/sympy/core/numbers.py(3874):         return super().__hash__()
0.24 /testbed/sympy/core/numbers.py(3874):         return super().__hash__()
============================= test process starts ==============================
executable:         /opt/miniconda3/envs/testbed/bin/python3  (3.9.23-final-0) [CPython]
architecture:       64-bit
cache:              no
ground types:       python 
numpy:              None
random seed:        53082855
hash randomization: on (PYTHONHASHSEED=361261325)

sympy/polys/tests/test_coverup_sympy__sympy-24562.py[1] 
test_rational_string_input_bug 0.39 /testbed/sympy/core/numbers.py(1590):         if q is None:
0.39 /testbed/sympy/core/numbers.py(1628):         if not isinstance(p, SYMPY_INTS):
0.39 /testbed/sympy/core/numbers.py(1629):             p = Rational(p)
0.39 /testbed/sympy/core/numbers.py(1590):         if q is None:
0.39 /testbed/sympy/core/numbers.py(1591):             if isinstance(p, Rational):
0.39 /testbed/sympy/core/numbers.py(1594):             if isinstance(p, SYMPY_INTS):
0.39 /testbed/sympy/core/numbers.py(1597):                 if isinstance(p, (float, Float)):
0.39 /testbed/sympy/core/numbers.py(1600):                 if not isinstance(p, str):
0.39 /testbed/sympy/core/numbers.py(1606):                     if p.count('/') > 1:
0.39 /testbed/sympy/core/numbers.py(1608):                     p = p.replace(' ', '')
0.39 /testbed/sympy/core/numbers.py(1609):                     pq = p.rsplit('/', 1)
0.39 /testbed/sympy/core/numbers.py(1610):                     if len(pq) == 2:
0.39 /testbed/sympy/core/numbers.py(1615):                     try:
0.39 /testbed/sympy/core/numbers.py(1616):                         p = fractions.Fraction(p)
0.39 /testbed/sympy/core/numbers.py(1620):                         return Rational(p.numerator, p.denominator, 1)
0.39 /testbed/sympy/core/numbers.py(1590):         if q is None:
0.39 /testbed/sympy/core/numbers.py(1628):         if not isinstance(p, SYMPY_INTS):
0.39 /testbed/sympy/core/numbers.py(1633):             p = int(p)
0.39 /testbed/sympy/core/numbers.py(1635):         if not isinstance(q, SYMPY_INTS):
0.39 /testbed/sympy/core/numbers.py(1640):             q = int(q)
0.39 /testbed/sympy/core/numbers.py(1643):         if q == 0:
0.39 /testbed/sympy/core/numbers.py(1650):         if q < 0:
0.39 /testbed/sympy/core/numbers.py(1653):         if not gcd:
0.39 /testbed/sympy/core/numbers.py(1655):         if gcd > 1:
0.39 /testbed/sympy/core/numbers.py(1658):         if q == 1:
0.39 /testbed/sympy/core/numbers.py(1660):         if p == 1 and q == 2:
0.39 /testbed/sympy/core/numbers.py(1661):             return S.Half
0.39 /testbed/sympy/core/numbers.py(1630):             q *= p.q
0.39 /testbed/sympy/core/numbers.py(1631):             p = p.p
0.39 /testbed/sympy/core/numbers.py(1635):         if not isinstance(q, SYMPY_INTS):
0.39 /testbed/sympy/core/numbers.py(1636):             q = Rational(q)
0.39 /testbed/sympy/core/numbers.py(1590):         if q is None:
0.39 /testbed/sympy/core/numbers.py(1591):             if isinstance(p, Rational):
0.39 /testbed/sympy/core/numbers.py(1594):             if isinstance(p, SYMPY_INTS):
0.39 /testbed/sympy/core/numbers.py(1597):                 if isinstance(p, (float, Float)):
0.39 /testbed/sympy/core/numbers.py(1600):                 if not isinstance(p, str):
0.39 /testbed/sympy/core/numbers.py(1606):                     if p.count('/') > 1:
0.39 /testbed/sympy/core/numbers.py(1608):                     p = p.replace(' ', '')
0.39 /testbed/sympy/core/numbers.py(1609):                     pq = p.rsplit('/', 1)
0.39 /testbed/sympy/core/numbers.py(1610):                     if len(pq) == 2:
0.39 /testbed/sympy/core/numbers.py(1615):                     try:
0.39 /testbed/sympy/core/numbers.py(1616):                         p = fractions.Fraction(p)
0.39 /testbed/sympy/core/numbers.py(1620):                         return Rational(p.numerator, p.denominator, 1)
0.39 /testbed/sympy/core/numbers.py(1590):         if q is None:
0.39 /testbed/sympy/core/numbers.py(1628):         if not isinstance(p, SYMPY_INTS):
0.39 /testbed/sympy/core/numbers.py(1633):             p = int(p)
0.39 /testbed/sympy/core/numbers.py(1635):         if not isinstance(q, SYMPY_INTS):
0.39 /testbed/sympy/core/numbers.py(1640):             q = int(q)
0.39 /testbed/sympy/core/numbers.py(1643):         if q == 0:
0.39 /testbed/sympy/core/numbers.py(1650):         if q < 0:
0.39 /testbed/sympy/core/numbers.py(1653):         if not gcd:
0.39 /testbed/sympy/core/numbers.py(1655):         if gcd > 1:
0.39 /testbed/sympy/core/numbers.py(1658):         if q == 1:
0.39 /testbed/sympy/core/numbers.py(1659):             return Integer(p)
0.39 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.39 /testbed/sympy/core/numbers.py(2097):         try:
0.39 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.39 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.39 /testbed/sympy/core/numbers.py(2106):         if ival == -1:
0.39 /testbed/sympy/core/numbers.py(2108):         if ival == 0:
0.39 /testbed/sympy/core/numbers.py(2110):         obj = Expr.__new__(cls)
0.39 /testbed/sympy/core/numbers.py(2111):         obj.p = ival
0.39 /testbed/sympy/core/numbers.py(2112):         return obj
0.39 /testbed/sympy/core/numbers.py(1637):             p *= q.q
0.39 /testbed/sympy/core/numbers.py(1638):             q = q.p
0.39 /testbed/sympy/core/numbers.py(1643):         if q == 0:
0.39 /testbed/sympy/core/numbers.py(1650):         if q < 0:
0.39 /testbed/sympy/core/numbers.py(1653):         if not gcd:
0.39 /testbed/sympy/core/numbers.py(1654):             gcd = igcd(abs(p), q)
0.39 /testbed/sympy/core/numbers.py(254):     if len(args) < 2:
0.39 /testbed/sympy/core/numbers.py(257):     args_temp = [abs(as_int(i)) for i in args]
0.39 /testbed/sympy/core/numbers.py(257):     args_temp = [abs(as_int(i)) for i in args]
0.39 /testbed/sympy/core/numbers.py(257):     args_temp = [abs(as_int(i)) for i in args]
0.39 /testbed/sympy/core/numbers.py(257):     args_temp = [abs(as_int(i)) for i in args]
0.39 /testbed/sympy/core/numbers.py(258):     if 1 in args_temp:
0.39 /testbed/sympy/core/numbers.py(259):         return 1
0.39 /testbed/sympy/core/numbers.py(1655):         if gcd > 1:
0.39 /testbed/sympy/core/numbers.py(1658):         if q == 1:
0.39 /testbed/sympy/core/numbers.py(1660):         if p == 1 and q == 2:
0.39 /testbed/sympy/core/numbers.py(1662):         obj = Expr.__new__(cls)
0.39 /testbed/sympy/core/numbers.py(1663):         obj.p = p
0.39 /testbed/sympy/core/numbers.py(1664):         obj.q = q
0.39 /testbed/sympy/core/numbers.py(1665):         return obj
0.39 /testbed/sympy/core/numbers.py(1590):         if q is None:
0.39 /testbed/sympy/core/numbers.py(1628):         if not isinstance(p, SYMPY_INTS):
0.39 /testbed/sympy/core/numbers.py(1629):             p = Rational(p)
0.39 /testbed/sympy/core/numbers.py(1590):         if q is None:
0.39 /testbed/sympy/core/numbers.py(1591):             if isinstance(p, Rational):
0.39 /testbed/sympy/core/numbers.py(1594):             if isinstance(p, SYMPY_INTS):
0.39 /testbed/sympy/core/numbers.py(1597):                 if isinstance(p, (float, Float)):
0.39 /testbed/sympy/core/numbers.py(1598):                     return Rational(*_as_integer_ratio(p))
0.39 /testbed/sympy/core/numbers.py(195):     neg_pow, man, expt, _ = getattr(p, '_mpf_', mpmath.mpf(p)._mpf_)
0.39 /testbed/sympy/core/numbers.py(196):     p = [1, -1][neg_pow % 2]*man
0.39 /testbed/sympy/core/numbers.py(197):     if expt < 0:
0.39 /testbed/sympy/core/numbers.py(198):         q = 2**-expt
0.39 /testbed/sympy/core/numbers.py(202):     return int(p), int(q)
0.39 /testbed/sympy/core/numbers.py(1590):         if q is None:
0.39 /testbed/sympy/core/numbers.py(1628):         if not isinstance(p, SYMPY_INTS):
0.39 /testbed/sympy/core/numbers.py(1633):             p = int(p)
0.39 /testbed/sympy/core/numbers.py(1635):         if not isinstance(q, SYMPY_INTS):
0.39 /testbed/sympy/core/numbers.py(1640):             q = int(q)
0.39 /testbed/sympy/core/numbers.py(1643):         if q == 0:
0.39 /testbed/sympy/core/numbers.py(1650):         if q < 0:
0.39 /testbed/sympy/core/numbers.py(1653):         if not gcd:
0.39 /testbed/sympy/core/numbers.py(1654):             gcd = igcd(abs(p), q)
0.39 /testbed/sympy/core/numbers.py(254):     if len(args) < 2:
0.39 /testbed/sympy/core/numbers.py(257):     args_temp = [abs(as_int(i)) for i in args]
0.39 /testbed/sympy/core/numbers.py(257):     args_temp = [abs(as_int(i)) for i in args]
0.39 /testbed/sympy/core/numbers.py(257):     args_temp = [abs(as_int(i)) for i in args]
0.39 /testbed/sympy/core/numbers.py(257):     args_temp = [abs(as_int(i)) for i in args]
0.39 /testbed/sympy/core/numbers.py(258):     if 1 in args_temp:
0.39 /testbed/sympy/core/numbers.py(259):         return 1
0.39 /testbed/sympy/core/numbers.py(1655):         if gcd > 1:
0.39 /testbed/sympy/core/numbers.py(1658):         if q == 1:
0.39 /testbed/sympy/core/numbers.py(1660):         if p == 1 and q == 2:
0.39 /testbed/sympy/core/numbers.py(1661):             return S.Half
0.39 /testbed/sympy/core/numbers.py(1630):             q *= p.q
0.39 /testbed/sympy/core/numbers.py(1631):             p = p.p
0.39 /testbed/sympy/core/numbers.py(1635):         if not isinstance(q, SYMPY_INTS):
0.39 /testbed/sympy/core/numbers.py(1640):             q = int(q)
0.39 /testbed/sympy/core/numbers.py(1643):         if q == 0:
0.39 /testbed/sympy/core/numbers.py(1650):         if q < 0:
0.39 /testbed/sympy/core/numbers.py(1653):         if not gcd:
0.39 /testbed/sympy/core/numbers.py(1654):             gcd = igcd(abs(p), q)
0.39 /testbed/sympy/core/numbers.py(254):     if len(args) < 2:
0.39 /testbed/sympy/core/numbers.py(257):     args_temp = [abs(as_int(i)) for i in args]
0.39 /testbed/sympy/core/numbers.py(257):     args_temp = [abs(as_int(i)) for i in args]
0.39 /testbed/sympy/core/numbers.py(257):     args_temp = [abs(as_int(i)) for i in args]
0.39 /testbed/sympy/core/numbers.py(257):     args_temp = [abs(as_int(i)) for i in args]
0.39 /testbed/sympy/core/numbers.py(258):     if 1 in args_temp:
0.39 /testbed/sympy/core/numbers.py(259):         return 1
0.39 /testbed/sympy/core/numbers.py(1655):         if gcd > 1:
0.39 /testbed/sympy/core/numbers.py(1658):         if q == 1:
0.39 /testbed/sympy/core/numbers.py(1660):         if p == 1 and q == 2:
0.39 /testbed/sympy/core/numbers.py(1662):         obj = Expr.__new__(cls)
0.39 /testbed/sympy/core/numbers.py(1663):         obj.p = p
0.39 /testbed/sympy/core/numbers.py(1664):         obj.q = q
0.39 /testbed/sympy/core/numbers.py(1665):         return obj
0.39 /testbed/sympy/core/numbers.py(1590):         if q is None:
0.39 /testbed/sympy/core/numbers.py(1628):         if not isinstance(p, SYMPY_INTS):
0.39 /testbed/sympy/core/numbers.py(1629):             p = Rational(p)
0.39 /testbed/sympy/core/numbers.py(1590):         if q is None:
0.39 /testbed/sympy/core/numbers.py(1591):             if isinstance(p, Rational):
0.39 /testbed/sympy/core/numbers.py(1594):             if isinstance(p, SYMPY_INTS):
0.39 /testbed/sympy/core/numbers.py(1597):                 if isinstance(p, (float, Float)):
0.39 /testbed/sympy/core/numbers.py(1600):                 if not isinstance(p, str):
0.39 /testbed/sympy/core/numbers.py(1606):                     if p.count('/') > 1:
0.39 /testbed/sympy/core/numbers.py(1608):                     p = p.replace(' ', '')
0.39 /testbed/sympy/core/numbers.py(1609):                     pq = p.rsplit('/', 1)
0.39 /testbed/sympy/core/numbers.py(1610):                     if len(pq) == 2:
0.39 /testbed/sympy/core/numbers.py(1615):                     try:
0.39 /testbed/sympy/core/numbers.py(1616):                         p = fractions.Fraction(p)
0.39 /testbed/sympy/core/numbers.py(1620):                         return Rational(p.numerator, p.denominator, 1)
0.39 /testbed/sympy/core/numbers.py(1590):         if q is None:
0.39 /testbed/sympy/core/numbers.py(1628):         if not isinstance(p, SYMPY_INTS):
0.39 /testbed/sympy/core/numbers.py(1633):             p = int(p)
0.39 /testbed/sympy/core/numbers.py(1635):         if not isinstance(q, SYMPY_INTS):
0.39 /testbed/sympy/core/numbers.py(1640):             q = int(q)
0.39 /testbed/sympy/core/numbers.py(1643):         if q == 0:
0.39 /testbed/sympy/core/numbers.py(1650):         if q < 0:
0.39 /testbed/sympy/core/numbers.py(1653):         if not gcd:
0.39 /testbed/sympy/core/numbers.py(1655):         if gcd > 1:
0.39 /testbed/sympy/core/numbers.py(1658):         if q == 1:
0.39 /testbed/sympy/core/numbers.py(1660):         if p == 1 and q == 2:
0.39 /testbed/sympy/core/numbers.py(1661):             return S.Half
0.39 /testbed/sympy/core/numbers.py(1630):             q *= p.q
0.39 /testbed/sympy/core/numbers.py(1631):             p = p.p
0.39 /testbed/sympy/core/numbers.py(1635):         if not isinstance(q, SYMPY_INTS):
0.39 /testbed/sympy/core/numbers.py(1636):             q = Rational(q)
0.39 /testbed/sympy/core/numbers.py(1590):         if q is None:
0.39 /testbed/sympy/core/numbers.py(1591):             if isinstance(p, Rational):
0.39 /testbed/sympy/core/numbers.py(1594):             if isinstance(p, SYMPY_INTS):
0.39 /testbed/sympy/core/numbers.py(1597):                 if isinstance(p, (float, Float)):
0.39 /testbed/sympy/core/numbers.py(1600):                 if not isinstance(p, str):
0.39 /testbed/sympy/core/numbers.py(1606):                     if p.count('/') > 1:
0.39 /testbed/sympy/core/numbers.py(1608):                     p = p.replace(' ', '')
0.39 /testbed/sympy/core/numbers.py(1609):                     pq = p.rsplit('/', 1)
0.39 /testbed/sympy/core/numbers.py(1610):                     if len(pq) == 2:
0.39 /testbed/sympy/core/numbers.py(1615):                     try:
0.39 /testbed/sympy/core/numbers.py(1616):                         p = fractions.Fraction(p)
0.39 /testbed/sympy/core/numbers.py(1620):                         return Rational(p.numerator, p.denominator, 1)
0.39 /testbed/sympy/core/numbers.py(1590):         if q is None:
0.39 /testbed/sympy/core/numbers.py(1628):         if not isinstance(p, SYMPY_INTS):
0.39 /testbed/sympy/core/numbers.py(1633):             p = int(p)
0.39 /testbed/sympy/core/numbers.py(1635):         if not isinstance(q, SYMPY_INTS):
0.39 /testbed/sympy/core/numbers.py(1640):             q = int(q)
0.39 /testbed/sympy/core/numbers.py(1643):         if q == 0:
0.39 /testbed/sympy/core/numbers.py(1650):         if q < 0:
0.39 /testbed/sympy/core/numbers.py(1653):         if not gcd:
0.39 /testbed/sympy/core/numbers.py(1655):         if gcd > 1:
0.39 /testbed/sympy/core/numbers.py(1658):         if q == 1:
0.39 /testbed/sympy/core/numbers.py(1659):             return Integer(p)
0.39 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.39 /testbed/sympy/core/numbers.py(2097):         try:
0.39 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.39 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.39 /testbed/sympy/core/numbers.py(2106):         if ival == -1:
0.39 /testbed/sympy/core/numbers.py(2108):         if ival == 0:
0.39 /testbed/sympy/core/numbers.py(2110):         obj = Expr.__new__(cls)
0.39 /testbed/sympy/core/numbers.py(2111):         obj.p = ival
0.39 /testbed/sympy/core/numbers.py(2112):         return obj
0.39 /testbed/sympy/core/numbers.py(1637):             p *= q.q
0.39 /testbed/sympy/core/numbers.py(1638):             q = q.p
0.39 /testbed/sympy/core/numbers.py(1643):         if q == 0:
0.39 /testbed/sympy/core/numbers.py(1650):         if q < 0:
0.39 /testbed/sympy/core/numbers.py(1653):         if not gcd:
0.39 /testbed/sympy/core/numbers.py(1654):             gcd = igcd(abs(p), q)
0.39 /testbed/sympy/core/numbers.py(1655):         if gcd > 1:
0.39 /testbed/sympy/core/numbers.py(1658):         if q == 1:
0.39 /testbed/sympy/core/numbers.py(1660):         if p == 1 and q == 2:
0.39 /testbed/sympy/core/numbers.py(1662):         obj = Expr.__new__(cls)
0.39 /testbed/sympy/core/numbers.py(1663):         obj.p = p
0.39 /testbed/sympy/core/numbers.py(1664):         obj.q = q
0.39 /testbed/sympy/core/numbers.py(1665):         return obj
F                                          [FAIL]


________________________________________________________________________________
 sympy/polys/tests/test_coverup_sympy__sympy-24562.py:test_rational_string_input_bug 
Traceback (most recent call last):
  File "/testbed/sympy/polys/tests/test_coverup_sympy__sympy-24562.py", line 10, in test_rational_string_input_bug
    assert str(Rational('0.5', '100')) == '1/200'
AssertionError

============= tests finished: 0 passed, 1 failed, in 0.01 seconds ==============
DO *NOT* COMMIT!
/testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.61 /testbed/sympy/core/numbers.py(2089):         if isinstance(i, str):
0.61 /testbed/sympy/core/numbers.py(2097):         try:
0.61 /testbed/sympy/core/numbers.py(2098):             ival = int(i)
0.61 /testbed/sympy/core/numbers.py(2104):         if ival == 1:
0.61 /testbed/sympy/core/numbers.py(2106):         if ival == -1:
0.61 /testbed/sympy/core/numbers.py(2108):         if ival == 0:
0.61 /testbed/sympy/core/numbers.py(2110):         obj = Expr.__new__(cls)
0.61 /testbed/sympy/core/numbers.py(2111):         obj.p = ival
0.61 /testbed/sympy/core/numbers.py(2112):         return obj
0.61 /testbed/sympy/core/numbers.py(714):         return self.class_key(), (0, ()), (), self
0.61 /testbed/sympy/core/numbers.py(710):         return 1, 0, 'Number'
0.61 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.61 /testbed/sympy/core/numbers.py(2288):         return hash(self.p)
0.61 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.61 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.61 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.61 /testbed/sympy/core/numbers.py(2242):         if isinstance(other, int):
0.61 /testbed/sympy/core/numbers.py(2244):         elif isinstance(other, Integer):
0.61 /testbed/sympy/core/numbers.py(2245):             return (self.p == other.p)
0.61 /testbed/sympy/core/numbers.py(2252):         try:
0.61 /testbed/sympy/core/numbers.py(2253):             other = _sympify(other)
0.61 /testbed/sympy/core/numbers.py(2256):         if other.is_Integer:
0.61 /testbed/sympy/core/numbers.py(2257):             return _sympify(self.p > other.p)
0.67 /testbed/sympy/core/numbers.py(3874):         return super().__hash__()
0.67 /testbed/sympy/core/numbers.py(3874):         return super().__hash__()
0.67 /testbed/sympy/core/numbers.py(3874):         return super().__hash__()
0.67 /testbed/sympy/core/numbers.py(3874):         return super().__hash__()
0.67 /testbed/sympy/core/numbers.py(3874):         return super().__hash__()
+ cat coverage.cover
{"/testbed/sympy/core/numbers.py": {"1": 1, "3": 1, "4": 1, "5": 1, "6": 1, "7": 1, "8": 1, "9": 1, "11": 1, "12": 1, "14": 1, "15": 1, "16": 1, "17": 1, "18": 1, "19": 1, "20": 1, "21": 1, "22": 1, "23": 1, "24": 1, "25": 1, "26": 1, "27": 1, "28": 1, "29": 1, "30": 1, "34": 1, "35": 1, "37": 1, "40": 1, "149": 1, "179": 1, "182": 1, "194": 1, "205": 1, "220": 1, "221": 1, "229": 1, "230": 1, "270": 1, "273": 1, "419": 1, "445": 1, "491": 1, "556": 2, "856": 2, "1477": 1, "1480": 1, "1483": 2, "2046": 2, "2502": 1, "2505": 2, "3026": 2, "3039": 2, "3046": 2, "3114": 2, "3165": 2, "3229": 2, "3261": 2, "3448": 1, "3451": 2, "3618": 2, "3733": 1, "3735": 1, "3736": 1, "3740": 2, "3817": 1, "3820": 2, "3877": 2, "4029": 1, "4032": 2, "4097": 1, "4100": 2, "4163": 2, "4233": 2, "4292": 2, "4355": 2, "4438": 1, "4440": 1, "4441": 1, "4444": 1, "4447": 1, "4449": 1, "4450": 0, "4456": 0, "4459": 0, "4460": 0, "4463": 1, "4467": 1, "4470": 1, "4473": 1, "4476": 1, "4480": 1, "4482": 1, "4483": 1, "4484": 1, "4485": 1, "4486": 1, "4488": 1, "4494": 1, "4496": 1, "101": 0, "102": 0, "103": 0, "104": 0, "105": 0, "106": 0, "107": 0, "108": 0, "109": 0, "110": 0, "111": 0, "112": 0, "113": 0, "114": 0, "115": 0, "116": 0, "117": 0, "118": 0, "119": 0, "121": 0, "123": 0, "124": 0, "125": 0, "126": 0, "127": 0, "128": 0, "129": 0, "131": 0, "132": 0, "133": 0, "134": 0, "135": 0, "136": 0, "137": 0, "138": 0, "139": 0, "140": 0, "141": 0, "142": 0, "143": 0, "144": 0, "146": 0, "161": 0, "162": 0, "166": 0, "167": 0, "171": 0, "174": 0, "175": 0, "176": 0, "189": 0, "190": 0, "191": 0, "195": 1, "196": 1, "197": 1, "198": 1, "200": 0, "201": 0, "202": 1, "207": 0, "208": 0, "209": 0, "210": 0, "211": 0, "212": 0, "214": 0, "215": 0, "216": 0, "217": 0, "223": 0, "254": 5, "255": 0, "256": 0, "257": 20, "258": 5, "259": 5, "260": 0, "261": 0, "262": 0, "263": 0, "264": 0, "265": 0, "266": 0, "267": 0, "317": 0, "318": 0, "319": 0, "326": 0, "328": 0, "331": 0, "332": 0, "339": 0, "368": 0, "369": 0, "370": 0, "375": 0, "376": 0, "377": 0, "380": 0, "381": 0, "389": 0, "390": 0, "391": 0, "392": 0, "393": 0, "394": 0, "396": 0, "397": 0, "402": 0, "406": 0, "407": 0, "410": 0, "413": 0, "414": 0, "416": 0, "434": 0, "435": 0, "436": 0, "437": 0, "438": 0, "439": 0, "440": 0, "441": 0, "442": 0, "464": 0, "465": 0, "467": 0, "468": 0, "469": 0, "470": 0, "472": 0, "473": 0, "475": 0, "477": 0, "478": 0, "480": 0, "482": 0, "484": 0, "485": 0, "486": 0, "488": 0, "530": 0, "531": 0, "532": 0, "533": 0, "534": 0, "535": 0, "536": 0, "537": 0, "538": 0, "539": 0, "540": 0, "546": 0, "547": 0, "548": 0, "549": 0, "550": 0, "551": 0, "552": 0, "553": 0, "584": 1, "585": 1, "586": 1, "588": 1, "591": 1, "593": 1, "595": 1, "625": 1, "628": 1, "634": 1, "659": 1, "666": 1, "671": 1, "674": 1, "678": 1, "681": 1, "685": 1, "689": 1, "692": 1, "695": 1, "698": 1, "703": 1, "708": 1, "709": 1, "712": 1, "713": 1, "716": 1, "717": 1, "727": 1, "728": 1, "738": 1, "739": 1, "761": 1, "762": 1, "770": 1, "774": 1, "778": 1, "786": 1, "794": 1, "801": 1, "808": 1, "811": 1, "814": 1, "822": 1, "828": 1, "834": 1, "840": 1, "845": 1, "850": 1, "596": 0, "597": 0, "599": 0, "600": 0, "601": 0, "602": 0, "603": 0, "604": 0, "605": 0, "606": 0, "607": 0, "608": 0, "609": 0, "610": 0, "611": 0, "612": 0, "613": 0, "614": 0, "615": 0, "616": 0, "617": 0, "618": 0, "619": 0, "621": 0, "622": 0, "623": 0, "626": 0, "629": 0, "630": 0, "631": 0, "632": 0, "635": 0, "637": 0, "638": 0, "639": 0, "640": 0, "641": 0, "642": 0, "643": 0, "644": 0, "645": 0, "646": 0, "647": 0, "648": 0, "650": 0, "651": 0, "652": 0, "653": 0, "655": 0, "656": 0, "657": 0, "660": 0, "661": 0, "662": 0, "663": 0, "664": 0, "668": 0, "669": 0, "672": 0, "675": 0, "676": 0, "679": 2, "682": 0, "683": 0, "686": 0, "687": 0, "690": 0, "693": 0, "696": 0, "699": 0, "701": 0, "704": 0, "705": 0, "706": 0, "710": 41, "714": 41, "718": 0, "719": 0, "720": 0, "721": 0, "722": 0, "723": 0, "724": 0, "725": 0, "729": 0, "730": 0, "731": 0, "732": 0, "733": 0, "734": 0, "735": 0, "736": 0, "740": 0, "741": 0, "742": 0, "743": 0, "744": 0, "745": 0, "746": 0, "747": 0, "749": 0, "750": 0, "751": 0, "752": 0, "753": 0, "754": 0, "756": 0, "757": 0, "758": 0, "759": 0, "763": 0, "764": 0, "765": 0, "766": 0, "767": 0, "768": 0, "771": 0, "772": 0, "775": 0, "776": 0, "779": 0, "780": 0, "781": 0, "782": 0, "783": 0, "784": 0, "787": 0, "788": 0, "789": 0, "790": 0, "791": 0, "792": 0, "795": 0, "796": 0, "797": 0, "798": 0, "799": 0, "802": 0, "803": 0, "804": 0, "805": 0, "806": 0, "809": 0, "812": 0, "816": 0, "817": 0, "818": 0, "819": 0, "820": 0, "824": 0, "825": 0, "826": 0, "830": 0, "831": 0, "832": 0, "836": 0, "837": 0, "838": 0, "842": 0, "843": 0, "847": 0, "848": 0, "852": 0, "853": 0, "1022": 1, "1024": 1, "1028": 1, "1029": 1, "1030": 1, "1032": 1, "1033": 1, "1035": 1, "1037": 1, "1181": 1, "1182": 1, "1199": 1, "1202": 1, "1205": 1, "1209": 1, "1213": 1, "1216": 1, "1219": 1, "1220": 1, "1223": 1, "1229": 1, "1232": 1, "1237": 1, "1242": 1, "1245": 1, "1250": 1, "1255": 1, "1262": 1, "1269": 1, "1272": 1, "1275": 1, "1280": 1, "1281": 1, "1287": 1, "1288": 1, "1294": 1, "1295": 1, "1301": 1, "1302": 1, "1308": 1, "1309": 1, "1323": 1, "1324": 1, "1332": 1, "1364": 1, "1367": 1, "1372": 1, "1402": 1, "1405": 1, "1434": 1, "1442": 1, "1450": 1, "1458": 1, "1466": 1, "1469": 1, "1472": 1, "1038": 0, "1039": 0, "1042": 0, "1044": 0, "1045": 0, "1046": 0, "1047": 0, "1048": 0, "1049": 0, "1050": 0, "1051": 0, "1052": 0, "1053": 0, "1054": 0, "1055": 0, "1056": 0, "1057": 0, "1058": 0, "1059": 0, "1060": 0, "1061": 0, "1062": 0, "1063": 0, "1064": 0, "1065": 0, "1066": 0, "1067": 0, "1068": 0, "1069": 0, "1070": 0, "1071": 0, "1072": 0, "1073": 0, "1074": 0, "1075": 0, "1077": 0, "1078": 0, "1079": 0, "1080": 0, "1081": 0, "1082": 0, "1083": 0, "1084": 0, "1085": 0, "1087": 0, "1088": 0, "1089": 0, "1090": 0, "1091": 0, "1092": 0, "1093": 0, "1094": 0, "1095": 0, "1097": 0, "1098": 0, "1099": 0, "1100": 0, "1101": 0, "1102": 0, "1104": 0, "1105": 0, "1106": 0, "1107": 0, "1108": 0, "1109": 0, "1110": 0, "1111": 0, "1118": 0, "1119": 0, "1121": 0, "1123": 0, "1124": 0, "1125": 0, "1126": 0, "1127": 0, "1128": 0, "1129": 0, "1130": 0, "1131": 0, "1132": 0, "1133": 0, "1134": 0, "1135": 0, "1137": 0, "1138": 0, "1139": 0, "1141": 0, "1145": 0, "1146": 0, "1152": 0, "1153": 0, "1155": 0, "1156": 0, "1158": 0, "1160": 0, "1162": 0, "1163": 0, "1164": 0, "1165": 0, "1167": 0, "1170": 0, "1171": 0, "1172": 0, "1174": 0, "1175": 0, "1176": 0, "1177": 0, "1179": 0, "1184": 0, "1185": 0, "1186": 0, "1187": 0, "1188": 0, "1189": 0, "1190": 0, "1191": 0, "1193": 0, "1194": 0, "1195": 0, "1196": 0, "1200": 0, "1203": 0, "1206": 0, "1207": 0, "1210": 0, "1211": 0, "1214": 0, "1217": 0, "1221": 0, "1224": 0, "1225": 0, "1226": 0, "1227": 0, "1230": 0, "1233": 0, "1234": 0, "1235": 0, "1238": 0, "1239": 0, "1240": 0, "1243": 0, "1246": 0, "1247": 0, "1248": 0, "1251": 0, "1252": 0, "1253": 0, "1256": 0, "1257": 0, "1258": 0, "1259": 0, "1260": 0, "1263": 0, "1264": 0, "1265": 0, "1266": 0, "1267": 0, "1270": 0, "1273": 0, "1276": 0, "1277": 0, "1278": 0, "1282": 0, "1283": 0, "1284": 0, "1285": 0, "1289": 0, "1290": 0, "1291": 0, "1292": 0, "1296": 0, "1297": 0, "1298": 0, "1299": 0, "1303": 0, "1304": 0, "1305": 0, "1306": 0, "1310": 0, "1312": 0, "1313": 0, "1314": 0, "1315": 0, "1316": 0, "1317": 0, "1318": 0, "1319": 0, "1320": 0, "1321": 0, "1325": 0, "1326": 0, "1327": 0, "1328": 0, "1329": 0, "1330": 0, "1339": 0, "1340": 0, "1341": 0, "1342": 0, "1343": 0, "1344": 0, "1345": 0, "1346": 0, "1347": 0, "1348": 0, "1349": 0, "1350": 0, "1351": 0, "1352": 0, "1353": 0, "1354": 0, "1355": 0, "1356": 0, "1357": 0, "1358": 0, "1359": 0, "1360": 0, "1361": 0, "1362": 0, "1365": 0, "1368": 0, "1369": 0, "1370": 0, "1373": 0, "1374": 0, "1375": 0, "1376": 0, "1377": 0, "1378": 0, "1379": 0, "1380": 0, "1381": 0, "1382": 0, "1383": 0, "1384": 0, "1387": 0, "1388": 0, "1389": 0, "1390": 0, "1396": 0, "1397": 0, "1398": 0, "1399": 0, "1400": 0, "1403": 0, "1406": 0, "1407": 0, "1408": 0, "1409": 0, "1410": 0, "1420": 0, "1421": 0, "1422": 0, "1423": 0, "1424": 0, "1425": 0, "1426": 0, "1427": 0, "1428": 0, "1429": 0, "1430": 0, "1431": 0, "1432": 0, "1435": 0, "1436": 0, "1437": 0, "1438": 0, "1439": 0, "1440": 0, "1443": 0, "1444": 0, "1445": 0, "1446": 0, "1447": 0, "1448": 0, "1451": 0, "1452": 0, "1453": 0, "1454": 0, "1455": 0, "1456": 0, "1459": 0, "1460": 0, "1461": 0, "1462": 0, "1463": 0, "1464": 0, "1467": 0, "1470": 0, "1473": 0, "1576": 1, "1577": 1, "1578": 1, "1579": 1, "1581": 1, "1583": 1, "1584": 1, "1586": 1, "1588": 1, "1589": 1, "1667": 1, "1683": 1, "1686": 1, "1689": 1, "1692": 1, "1695": 1, "1698": 1, "1699": 1, "1711": 1, "1713": 1, "1714": 1, "1725": 1, "1726": 1, "1737": 1, "1738": 1, "1749": 1, "1751": 1, "1752": 1, "1766": 1, "1767": 1, "1779": 1, "1780": 1, "1792": 1, "1793": 1, "1798": 1, "1843": 1, "1846": 1, "1849": 1, "1852": 1, "1858": 1, "1861": 1, "1864": 1, "1867": 1, "1870": 1, "1917": 1, "1920": 1, "1941": 1, "1949": 1, "1957": 1, "1965": 1, "1973": 1, "1976": 1, "1988": 1, "1989": 1, "1992": 1, "1993": 1, "1996": 1, "1997": 1, "2006": 1, "2007": 1, "2014": 1, "2017": 1, "2037": 1, "2041": 1, "1590": 15, "1591": 5, "1592": 0, "1594": 5, "1595": 0, "1597": 5, "1598": 1, "1600": 4, "1601": 0, "1602": 0, "1603": 0, "1604": 0, "1606": 4, "1607": 0, "1608": 4, "1609": 4, "1610": 4, "1611": 0, "1612": 0, "1613": 0, "1614": 0, "1615": 4, "1616": 4, "1617": 0, "1618": 0, "1620": 4, "1622": 0, "1623": 0, "1625": 0, "1626": 0, "1628": 10, "1629": 3, "1630": 3, "1631": 3, "1633": 7, "1635": 10, "1636": 2, "1637": 2, "1638": 2, "1640": 8, "1643": 10, "1644": 0, "1645": 0, "1646": 0, "1648": 0, "1649": 0, "1650": 10, "1651": 0, "1652": 0, "1653": 10, "1654": 6, "1655": 10, "1656": 0, "1657": 0, "1658": 10, "1659": 2, "1660": 8, "1661": 3, "1662": 5, "1663": 5, "1664": 5, "1665": 5, "1680": 0, "1681": 0, "1684": 0, "1687": 0, "1690": 0, "1693": 0, "1696": 0, "1700": 0, "1701": 0, "1702": 0, "1703": 0, "1705": 0, "1706": 0, "1707": 0, "1709": 0, "1710": 0, "1715": 0, "1716": 0, "1717": 0, "1718": 0, "1719": 0, "1720": 0, "1721": 0, "1723": 0, "1724": 0, "1727": 0, "1728": 0, "1729": 0, "1730": 0, "1731": 0, "1732": 0, "1733": 0, "1735": 0, "1736": 0, "1739": 0, "1740": 0, "1741": 0, "1742": 0, "1743": 0, "1744": 0, "1745": 0, "1747": 0, "1748": 0, "1753": 0, "1754": 0, "1755": 0, "1756": 0, "1758": 0, "1759": 0, "1760": 0, "1761": 0, "1762": 0, "1764": 0, "1765": 0, "1768": 0, "1769": 0, "1770": 0, "1771": 0, "1772": 0, "1773": 0, "1774": 0, "1776": 0, "1777": 0, "1781": 0, "1782": 0, "1783": 0, "1784": 0, "1785": 0, "1787": 0, "1788": 0, "1789": 0, "1790": 0, "1794": 0, "1795": 0, "1796": 0, "1799": 0, "1800": 0, "1801": 0, "1802": 0, "1804": 0, "1805": 0, "1806": 0, "1807": 0, "1808": 0, "1810": 0, "1811": 0, "1812": 0, "1814": 0, "1815": 0, "1817": 0, "1818": 0, "1819": 0, "1821": 0, "1822": 0, "1823": 0, "1824": 0, "1825": 0, "1826": 0, "1827": 0, "1828": 0, "1829": 0, "1830": 0, "1832": 0, "1833": 0, "1834": 0, "1835": 0, "1836": 0, "1838": 0, "1839": 0, "1841": 0, "1844": 0, "1847": 0, "1850": 0, "1853": 0, "1854": 0, "1855": 0, "1856": 0, "1859": 0, "1862": 0, "1865": 0, "1868": 0, "1871": 5, "1872": 5, "1873": 4, "1874": 4, "1875": 1, "1878": 0, "1879": 1, "1880": 0, "1881": 1, "1882": 0, "1883": 0, "1884": 0, "1885": 1, "1888": 0, "1889": 1, "1892": 0, "1893": 0, "1894": 0, "1895": 0, "1896": 0, "1897": 0, "1899": 0, "1900": 0, "1901": 0, "1903": 0, "1904": 0, "1906": 0, "1907": 0, "1909": 0, "1910": 0, "1912": 0, "1913": 0, "1914": 0, "1915": 1, "1918": 0, "1922": 0, "1923": 0, "1924": 0, "1925": 0, "1926": 0, "1927": 0, "1928": 0, "1929": 0, "1930": 0, "1931": 0, "1932": 0, "1933": 0, "1934": 0, "1935": 0, "1936": 0, "1937": 0, "1938": 0, "1939": 0, "1942": 0, "1943": 0, "1944": 0, "1945": 0, "1946": 0, "1947": 0, "1950": 0, "1951": 0, "1952": 0, "1953": 0, "1954": 0, "1955": 0, "1958": 0, "1959": 0, "1960": 0, "1961": 0, "1962": 0, "1963": 0, "1966": 0, "1967": 0, "1968": 0, "1969": 0, "1970": 0, "1971": 0, "1974": 0, "1982": 0, "1984": 0, "1985": 0, "1986": 0, "1990": 0, "1994": 0, "1998": 0, "1999": 0, "2000": 0, "2001": 0, "2002": 0, "2003": 0, "2004": 0, "2008": 0, "2009": 0, "2010": 0, "2011": 0, "2012": 0, "2015": 0, "2031": 0, "2032": 0, "2033": 0, "2034": 0, "2035": 0, "2039": 0, "2043": 0, "2073": 1, "2074": 1, "2075": 1, "2077": 1, "2079": 1, "2081": 1, "2084": 1, "2087": 1, "2088": 1, "2114": 1, "2118": 1, "2121": 1, "2124": 1, "2127": 1, "2130": 1, "2133": 1, "2136": 1, "2142": 1, "2148": 1, "2162": 1, "2174": 1, "2183": 1, "2194": 1, "2203": 1, "2214": 1, "2223": 1, "2232": 1, "2241": 1, "2248": 1, "2251": 1, "2260": 1, "2269": 1, "2278": 1, "2287": 1, "2290": 1, "2295": 1, "2298": 1, "2406": 1, "2411": 1, "2417": 1, "2420": 1, "2421": 1, "2428": 1, "2438": 1, "2444": 1, "2450": 1, "2456": 1, "2462": 1, "2468": 1, "2474": 1, "2480": 1, "2486": 1, "2492": 1, "2498": 1, "2082": 0, "2085": 0, "2089": 47, "2090": 0, "2097": 47, "2098": 47, "2099": 0, "2100": 0, "2101": 0, "2104": 47, "2105": 19, "2106": 28, "2107": 1, "2108": 27, "2109": 1, "2110": 26, "2111": 26, "2112": 26, "2115": 0, "2119": 0, "2122": 0, "2125": 0, "2128": 0, "2131": 0, "2134": 0, "2137": 0, "2138": 0, "2140": 0, "2143": 0, "2144": 0, "2146": 0, "2149": 0, "2150": 0, "2152": 0, "2153": 0, "2154": 0, "2155": 0, "2156": 0, "2157": 0, "2158": 0, "2159": 0, "2163": 0, "2164": 0, "2165": 0, "2166": 0, "2167": 0, "2168": 0, "2169": 0, "2170": 0, "2172": 0, "2175": 0, "2176": 0, "2177": 0, "2178": 0, "2179": 0, "2180": 0, "2181": 0, "2184": 0, "2185": 0, "2186": 0, "2187": 0, "2188": 0, "2189": 0, "2190": 0, "2191": 0, "2192": 0, "2195": 0, "2196": 0, "2197": 0, "2198": 0, "2199": 0, "2200": 0, "2201": 0, "2204": 0, "2205": 0, "2206": 0, "2207": 0, "2208": 0, "2209": 0, "2210": 0, "2211": 0, "2212": 0, "2215": 0, "2216": 0, "2217": 0, "2218": 0, "2219": 0, "2220": 0, "2221": 0, "2224": 0, "2225": 0, "2226": 0, "2227": 0, "2228": 0, "2229": 0, "2230": 0, "2233": 0, "2234": 0, "2235": 0, "2236": 0, "2237": 0, "2238": 0, "2239": 0, "2242": 47, "2243": 1, "2244": 46, "2245": 42, "2246": 4, "2249": 0, "2252": 18, "2253": 18, "2254": 0, "2255": 0, "2256": 18, "2257": 18, "2258": 0, "2261": 3, "2262": 3, "2263": 0, "2264": 0, "2265": 3, "2266": 3, "2267": 0, "2270": 0, "2271": 0, "2272": 0, "2273": 0, "2274": 0, "2275": 0, "2276": 0, "2279": 0, "2280": 0, "2281": 0, "2282": 0, "2283": 0, "2284": 0, "2285": 0, "2288": 82, "2291": 0, "2296": 0, "2319": 0, "2321": 0, "2322": 0, "2323": 0, "2325": 0, "2326": 0, "2327": 0, "2328": 0, "2331": 0, "2332": 0, "2333": 0, "2335": 0, "2336": 0, "2337": 0, "2338": 0, "2340": 0, "2341": 0, "2343": 0, "2344": 0, "2345": 0, "2347": 0, "2349": 0, "2350": 0, "2352": 0, "2353": 0, "2354": 0, "2355": 0, "2361": 0, "2362": 0, "2363": 0, "2364": 0, "2366": 0, "2369": 0, "2370": 0, "2371": 0, "2372": 0, "2373": 0, "2374": 0, "2375": 0, "2377": 0, "2378": 0, "2379": 0, "2380": 0, "2383": 0, "2384": 0, "2385": 0, "2387": 0, "2389": 0, "2390": 0, "2391": 0, "2393": 0, "2394": 0, "2395": 0, "2396": 0, "2397": 0, "2398": 0, "2399": 0, "2401": 0, "2402": 0, "2403": 0, "2404": 0, "2407": 0, "2409": 0, "2412": 0, "2413": 0, "2415": 0, "2418": 0, "2422": 0, "2423": 0, "2424": 0, "2425": 0, "2426": 0, "2429": 0, "2439": 0, "2440": 0, "2442": 0, "2445": 0, "2446": 0, "2448": 0, "2451": 0, "2452": 0, "2454": 0, "2457": 0, "2458": 0, "2460": 0, "2463": 0, "2464": 0, "2466": 0, "2469": 0, "2470": 0, "2472": 0, "2475": 0, "2476": 0, "2478": 0, "2481": 0, "2482": 0, "2484": 0, "2487": 0, "2488": 0, "2490": 0, "2493": 0, "2494": 0, "2496": 0, "2499": 0, "2523": 1, "2525": 1, "2526": 1, "2527": 1, "2530": 1, "2535": 1, "2537": 1, "2769": 1, "2772": 1, "2775": 1, "2776": 1, "2780": 1, "2792": 1, "2796": 1, "2800": 1, "2804": 1, "2821": 1, "2832": 1, "2876": 1, "2877": 1, "2886": 1, "2901": 1, "2972": 1, "2994": 1, "2706": 0, "2707": 0, "2709": 0, "2710": 0, "2711": 0, "2713": 0, "2714": 0, "2716": 0, "2717": 0, "2718": 0, "2719": 0, "2720": 0, "2721": 0, "2723": 0, "2724": 0, "2726": 0, "2728": 0, "2729": 0, "2730": 0, "2731": 0, "2733": 0, "2734": 0, "2737": 0, "2738": 0, "2740": 0, "2741": 0, "2742": 0, "2743": 0, "2744": 0, "2746": 0, "2747": 0, "2749": 0, "2751": 0, "2752": 0, "2753": 0, "2754": 0, "2755": 0, "2756": 0, "2758": 0, "2760": 0, "2761": 0, "2762": 0, "2763": 0, "2765": 0, "2767": 0, "2770": 0, "2773": 0, "2778": 0, "2782": 0, "2783": 0, "2784": 0, "2786": 0, "2787": 0, "2789": 0, "2790": 0, "2794": 0, "2798": 0, "2802": 0, "2806": 0, "2808": 0, "2810": 0, "2811": 0, "2813": 0, "2814": 0, "2816": 0, "2817": 0, "2819": 0, "2822": 0, "2823": 0, "2824": 0, "2825": 0, "2826": 0, "2828": 0, "2829": 0, "2830": 0, "2873": 0, "2874": 0, "2882": 0, "2884": 0, "2897": 0, "2898": 0, "2899": 0, "2966": 0, "2967": 0, "2968": 0, "2969": 0, "2970": 0, "2985": 0, "2986": 0, "2987": 0, "2989": 0, "2990": 0, "2991": 0, "2992": 0, "3014": 0, "3015": 0, "3016": 0, "3017": 0, "3018": 0, "3019": 0, "3020": 0, "3021": 0, "3022": 0, "3023": 0, "3033": 1, "3035": 1, "3036": 0, "3040": 1, "3042": 1, "3043": 0, "3066": 1, "3067": 1, "3068": 1, "3069": 1, "3070": 1, "3071": 1, "3072": 1, "3074": 1, "3076": 1, "3079": 1, "3080": 1, "3083": 1, "3084": 1, "3087": 1, "3106": 1, "3110": 1, "3077": 0, "3081": 0, "3085": 0, "3088": 0, "3089": 0, "3090": 0, "3091": 0, "3092": 0, "3093": 0, "3094": 0, "3095": 0, "3100": 0, "3101": 0, "3102": 0, "3103": 0, "3104": 0, "3108": 0, "3111": 0, "3131": 1, "3132": 1, "3134": 1, "3135": 1, "3137": 1, "3139": 1, "3142": 1, "3143": 1, "3146": 1, "3147": 1, "3150": 1, "3153": 1, "3156": 1, "3157": 1, "3140": 0, "3144": 0, "3148": 4, "3151": 0, "3154": 0, "3159": 0, "3160": 0, "3162": 0, "3188": 1, "3190": 1, "3191": 1, "3193": 1, "3195": 1, "3198": 1, "3199": 1, "3202": 1, "3203": 1, "3206": 1, "3196": 0, "3200": 0, "3204": 0, "3207": 0, "3208": 0, "3209": 0, "3210": 0, "3211": 0, "3212": 0, "3213": 0, "3214": 0, "3215": 0, "3216": 0, "3217": 0, "3218": 0, "3219": 0, "3220": 0, "3221": 0, "3222": 0, "3223": 0, "3224": 0, "3225": 0, "3226": 0, "3246": 1, "3248": 1, "3249": 1, "3251": 1, "3253": 1, "3256": 1, "3257": 1, "3254": 0, "3258": 0, "3302": 1, "3303": 1, "3304": 1, "3305": 1, "3306": 1, "3307": 1, "3308": 1, "3309": 1, "3311": 1, "3313": 1, "3316": 1, "3319": 1, "3323": 1, "3326": 1, "3329": 1, "3330": 1, "3336": 1, "3338": 1, "3339": 1, "3346": 1, "3347": 1, "3350": 1, "3351": 1, "3359": 1, "3361": 1, "3362": 1, "3373": 1, "3376": 1, "3379": 1, "3417": 1, "3420": 1, "3423": 1, "3426": 1, "3429": 1, "3430": 1, "3431": 1, "3432": 1, "3434": 1, "3435": 1, "3440": 1, "3442": 1, "3445": 1, "3314": 0, "3317": 0, "3320": 0, "3321": 0, "3324": 0, "3327": 0, "3331": 0, "3332": 0, "3333": 0, "3334": 0, "3335": 0, "3340": 0, "3341": 0, "3342": 0, "3343": 0, "3344": 0, "3348": 0, "3352": 0, "3353": 0, "3354": 0, "3355": 0, "3356": 0, "3357": 0, "3358": 0, "3363": 0, "3364": 0, "3365": 0, "3366": 0, "3367": 0, "3368": 0, "3369": 0, "3370": 0, "3371": 0, "3374": 0, "3377": 0, "3397": 0, "3398": 0, "3399": 0, "3400": 0, "3401": 0, "3402": 0, "3403": 0, "3404": 0, "3405": 0, "3406": 0, "3407": 0, "3408": 0, "3409": 0, "3410": 0, "3411": 0, "3412": 0, "3413": 0, "3415": 0, "3418": 1, "3421": 0, "3424": 0, "3427": 0, "3436": 0, "3437": 0, "3438": 0, "3443": 0, "3446": 0, "3463": 1, "3464": 1, "3465": 1, "3466": 1, "3467": 1, "3468": 1, "3469": 1, "3470": 1, "3472": 1, "3474": 1, "3477": 1, "3480": 1, "3484": 1, "3487": 1, "3490": 1, "3491": 1, "3497": 1, "3499": 1, "3500": 1, "3507": 1, "3508": 1, "3511": 1, "3512": 1, "3520": 1, "3522": 1, "3523": 1, "3534": 1, "3537": 1, "3540": 1, "3583": 1, "3586": 1, "3589": 1, "3592": 1, "3595": 1, "3596": 1, "3597": 1, "3598": 1, "3600": 1, "3601": 1, "3606": 1, "3608": 1, "3611": 1, "3614": 1, "3475": 0, "3478": 0, "3481": 0, "3482": 0, "3485": 0, "3488": 0, "3492": 0, "3493": 0, "3494": 0, "3495": 0, "3496": 0, "3501": 0, "3502": 0, "3503": 0, "3504": 0, "3505": 0, "3509": 0, "3513": 0, "3514": 0, "3515": 0, "3516": 0, "3517": 0, "3518": 0, "3519": 0, "3524": 0, "3525": 0, "3526": 0, "3527": 0, "3528": 0, "3529": 0, "3530": 0, "3531": 0, "3532": 0, "3535": 0, "3538": 0, "3562": 0, "3563": 0, "3564": 0, "3565": 0, "3566": 0, "3568": 0, "3569": 0, "3570": 0, "3572": 0, "3574": 0, "3575": 0, "3576": 0, "3577": 0, "3578": 0, "3579": 0, "3580": 0, "3581": 0, "3584": 1, "3587": 0, "3590": 0, "3593": 0, "3602": 0, "3603": 0, "3604": 0, "3609": 0, "3612": 0, "3615": 0, "3666": 1, "3667": 1, "3668": 1, "3669": 1, "3670": 1, "3671": 1, "3672": 1, "3673": 1, "3674": 1, "3675": 1, "3676": 1, "3677": 1, "3678": 1, "3679": 1, "3681": 1, "3683": 1, "3686": 1, "3689": 1, "3692": 1, "3693": 1, "3696": 1, "3697": 1, "3700": 1, "3701": 1, "3704": 1, "3705": 1, "3708": 1, "3711": 1, "3714": 1, "3717": 1, "3720": 1, "3724": 1, "3728": 1, "3729": 1, "3730": 1, "3731": 1, "3684": 0, "3687": 0, "3690": 0, "3694": 0, "3698": 0, "3702": 0, "3706": 0, "3709": 0, "3712": 0, "3715": 0, "3718": 0, "3722": 0, "3725": 0, "3737": 0, "3772": 1, "3773": 1, "3774": 1, "3775": 1, "3776": 1, "3777": 1, "3779": 1, "3781": 1, "3783": 1, "3786": 1, "3789": 1, "3790": 1, "3793": 1, "3796": 1, "3799": 1, "3800": 1, "3803": 1, "3784": 0, "3787": 0, "3791": 0, "3794": 0, "3797": 0, "3801": 0, "3804": 0, "3805": 0, "3807": 0, "3808": 0, "3809": 0, "3811": 0, "3812": 0, "3814": 0, "3822": 1, "3823": 1, "3824": 1, "3826": 1, "3828": 1, "3830": 1, "3832": 1, "3835": 1, "3841": 1, "3844": 1, "3856": 1, "3859": 1, "3864": 1, "3869": 1, "3873": 1, "3833": 0, "3842": 0, "3845": 0, "3846": 0, "3847": 0, "3848": 0, "3849": 0, "3850": 0, "3851": 0, "3852": 0, "3854": 0, "3857": 0, "3860": 0, "3861": 0, "3862": 0, "3865": 0, "3866": 0, "3867": 0, "3871": 0, "3874": 5, "3905": 1, "3906": 1, "3907": 1, "3908": 1, "3909": 1, "3910": 1, "3911": 1, "3913": 1, "3915": 1, "3918": 1, "3919": 1, "3922": 1, "3925": 1, "3928": 1, "3934": 1, "3941": 1, "4021": 1, "4025": 1, "3916": 0, "3920": 0, "3923": 0, "3926": 0, "3929": 0, "3930": 0, "3931": 0, "3932": 0, "3935": 0, "3936": 0, "3938": 0, "3939": 0, "3942": 0, "3943": 0, "3944": 0, "3945": 0, "3946": 0, "3947": 0, "3948": 0, "3949": 0, "3952": 0, "3953": 0, "3954": 0, "3955": 0, "3957": 0, "3958": 0, "3959": 0, "3960": 0, "3961": 0, "3962": 0, "3963": 0, "3964": 0, "3965": 0, "3966": 0, "3967": 0, "3968": 0, "3969": 0, "3970": 0, "3971": 0, "3972": 0, "3973": 0, "3980": 0, "3983": 0, "3984": 0, "3986": 0, "3987": 0, "3988": 0, "3989": 0, "3990": 0, "3992": 0, "3993": 0, "3994": 0, "3996": 0, "3998": 0, "3999": 0, "4000": 0, "4001": 0, "4002": 0, "4003": 0, "4004": 0, "4005": 0, "4006": 0, "4007": 0, "4008": 0, "4009": 0, "4010": 0, "4011": 0, "4013": 0, "4015": 0, "4016": 0, "4017": 0, "4018": 0, "4019": 0, "4022": 0, "4023": 0, "4026": 0, "4027": 0, "4068": 1, "4069": 1, "4070": 1, "4071": 1, "4072": 1, "4073": 1, "4074": 1, "4076": 1, "4078": 1, "4081": 1, "4082": 1, "4085": 1, "4088": 1, "4091": 1, "4079": 0, "4083": 0, "4086": 0, "4089": 0, "4092": 0, "4093": 0, "4094": 0, "4095": 0, "4129": 1, "4130": 1, "4131": 1, "4132": 1, "4133": 1, "4134": 1, "4135": 1, "4137": 1, "4139": 1, "4142": 1, "4145": 1, "4150": 1, "4154": 1, "4160": 1, "4140": 0, "4143": 0, "4147": 0, "4148": 0, "4151": 0, "4152": 0, "4155": 0, "4156": 0, "4157": 0, "4158": 0, "4200": 1, "4201": 1, "4202": 1, "4203": 1, "4204": 1, "4205": 1, "4206": 1, "4208": 1, "4210": 1, "4213": 1, "4216": 1, "4220": 1, "4224": 1, "4230": 1, "4211": 0, "4214": 0, "4217": 0, "4218": 0, "4221": 0, "4222": 0, "4225": 0, "4226": 0, "4227": 0, "4228": 0, "4265": 1, "4266": 1, "4267": 1, "4268": 1, "4269": 1, "4271": 1, "4273": 1, "4276": 1, "4279": 1, "4285": 1, "4274": 0, "4277": 0, "4281": 0, "4282": 0, "4283": 0, "4286": 0, "4287": 0, "4288": 0, "4289": 0, "4320": 1, "4321": 1, "4322": 1, "4323": 1, "4324": 1, "4326": 1, "4328": 1, "4331": 1, "4337": 1, "4343": 1, "4351": 1, "4329": 0, "4333": 0, "4334": 0, "4335": 0, "4338": 0, "4339": 0, "4340": 0, "4341": 0, "4344": 0, "4345": 0, "4346": 0, "4347": 0, "4348": 0, "4349": 0, "4352": 0, "4378": 1, "4379": 1, "4380": 1, "4381": 1, "4382": 1, "4383": 1, "4385": 1, "4387": 1, "4389": 1, "4392": 1, "4393": 1, "4396": 1, "4399": 1, "4402": 1, "4431": 1, "4434": 1, "4435": 1, "4390": 0, "4394": 0, "4397": 0, "4400": 0, "4414": 0, "4415": 0, "4416": 0, "4417": 0, "4418": 0, "4419": 0, "4420": 0, "4421": 0, "4422": 0, "4423": 0, "4424": 0, "4425": 0, "4426": 0, "4427": 0, "4428": 0, "4429": 0, "4432": 0, "4436": 0, "4442": 0, "4445": 0, "4451": 0, "4457": 0, "4464": 0, "4465": 0, "4471": 0, "4477": 0, "4478": 0, "4489": 1, "4490": 1, "4491": 1, "4492": 1}}
{"/testbed/sympy/core/numbers.py": {"1": 1, "3": 1, "4": 1, "5": 1, "6": 1, "7": 1, "8": 1, "9": 1, "11": 1, "12": 1, "14": 1, "15": 1, "16": 1, "17": 1, "18": 1, "19": 1, "20": 1, "21": 1, "22": 1, "23": 1, "24": 1, "25": 1, "26": 1, "27": 1, "28": 1, "29": 1, "30": 1, "34": 1, "35": 1, "37": 1, "40": 1, "149": 1, "179": 1, "182": 1, "194": 1, "205": 1, "220": 1, "221": 1, "229": 1, "230": 1, "270": 1, "273": 1, "419": 1, "445": 1, "491": 1, "556": 2, "856": 2, "1477": 1, "1480": 1, "1483": 2, "2046": 2, "2502": 1, "2505": 2, "3026": 2, "3039": 2, "3046": 2, "3114": 2, "3165": 2, "3229": 2, "3261": 2, "3448": 1, "3451": 2, "3618": 2, "3733": 1, "3735": 1, "3736": 1, "3740": 2, "3817": 1, "3820": 2, "3877": 2, "4029": 1, "4032": 2, "4097": 1, "4100": 2, "4163": 2, "4233": 2, "4292": 2, "4355": 2, "4438": 1, "4440": 1, "4441": 1, "4444": 1, "4447": 1, "4449": 1, "4450": 0, "4456": 0, "4459": 0, "4460": 0, "4463": 1, "4467": 1, "4470": 1, "4473": 1, "4476": 1, "4480": 1, "4482": 1, "4483": 1, "4484": 1, "4485": 1, "4486": 1, "4488": 1, "4494": 1, "4496": 1, "101": 0, "102": 0, "103": 0, "104": 0, "105": 0, "106": 0, "107": 0, "108": 0, "109": 0, "110": 0, "111": 0, "112": 0, "113": 0, "114": 0, "115": 0, "116": 0, "117": 0, "118": 0, "119": 0, "121": 0, "123": 0, "124": 0, "125": 0, "126": 0, "127": 0, "128": 0, "129": 0, "131": 0, "132": 0, "133": 0, "134": 0, "135": 0, "136": 0, "137": 0, "138": 0, "139": 0, "140": 0, "141": 0, "142": 0, "143": 0, "144": 0, "146": 0, "161": 0, "162": 0, "166": 0, "167": 0, "171": 0, "174": 0, "175": 0, "176": 0, "189": 0, "190": 0, "191": 0, "195": 0, "196": 0, "197": 0, "198": 0, "200": 0, "201": 0, "202": 0, "207": 0, "208": 0, "209": 0, "210": 0, "211": 0, "212": 0, "214": 0, "215": 0, "216": 0, "217": 0, "223": 0, "254": 2, "255": 0, "256": 0, "257": 8, "258": 2, "259": 2, "260": 0, "261": 0, "262": 0, "263": 0, "264": 0, "265": 0, "266": 0, "267": 0, "317": 0, "318": 0, "319": 0, "326": 0, "328": 0, "331": 0, "332": 0, "339": 0, "368": 0, "369": 0, "370": 0, "375": 0, "376": 0, "377": 0, "380": 0, "381": 0, "389": 0, "390": 0, "391": 0, "392": 0, "393": 0, "394": 0, "396": 0, "397": 0, "402": 0, "406": 0, "407": 0, "410": 0, "413": 0, "414": 0, "416": 0, "434": 0, "435": 0, "436": 0, "437": 0, "438": 0, "439": 0, "440": 0, "441": 0, "442": 0, "464": 0, "465": 0, "467": 0, "468": 0, "469": 0, "470": 0, "472": 0, "473": 0, "475": 0, "477": 0, "478": 0, "480": 0, "482": 0, "484": 0, "485": 0, "486": 0, "488": 0, "530": 0, "531": 0, "532": 0, "533": 0, "534": 0, "535": 0, "536": 0, "537": 0, "538": 0, "539": 0, "540": 0, "546": 0, "547": 0, "548": 0, "549": 0, "550": 0, "551": 0, "552": 0, "553": 0, "584": 1, "585": 1, "586": 1, "588": 1, "591": 1, "593": 1, "595": 1, "625": 1, "628": 1, "634": 1, "659": 1, "666": 1, "671": 1, "674": 1, "678": 1, "681": 1, "685": 1, "689": 1, "692": 1, "695": 1, "698": 1, "703": 1, "708": 1, "709": 1, "712": 1, "713": 1, "716": 1, "717": 1, "727": 1, "728": 1, "738": 1, "739": 1, "761": 1, "762": 1, "770": 1, "774": 1, "778": 1, "786": 1, "794": 1, "801": 1, "808": 1, "811": 1, "814": 1, "822": 1, "828": 1, "834": 1, "840": 1, "845": 1, "850": 1, "596": 0, "597": 0, "599": 0, "600": 0, "601": 0, "602": 0, "603": 0, "604": 0, "605": 0, "606": 0, "607": 0, "608": 0, "609": 0, "610": 0, "611": 0, "612": 0, "613": 0, "614": 0, "615": 0, "616": 0, "617": 0, "618": 0, "619": 0, "621": 0, "622": 0, "623": 0, "626": 0, "629": 0, "630": 0, "631": 0, "632": 0, "635": 0, "637": 0, "638": 0, "639": 0, "640": 0, "641": 0, "642": 0, "643": 0, "644": 0, "645": 0, "646": 0, "647": 0, "648": 0, "650": 0, "651": 0, "652": 0, "653": 0, "655": 0, "656": 0, "657": 0, "660": 0, "661": 0, "662": 0, "663": 0, "664": 0, "668": 0, "669": 0, "672": 0, "675": 0, "676": 0, "679": 2, "682": 0, "683": 0, "686": 0, "687": 0, "690": 0, "693": 0, "696": 0, "699": 0, "701": 0, "704": 0, "705": 0, "706": 0, "710": 41, "714": 41, "718": 0, "719": 0, "720": 0, "721": 0, "722": 0, "723": 0, "724": 0, "725": 0, "729": 0, "730": 0, "731": 0, "732": 0, "733": 0, "734": 0, "735": 0, "736": 0, "740": 0, "741": 0, "742": 0, "743": 0, "744": 0, "745": 0, "746": 0, "747": 0, "749": 0, "750": 0, "751": 0, "752": 0, "753": 0, "754": 0, "756": 0, "757": 0, "758": 0, "759": 0, "763": 0, "764": 0, "765": 0, "766": 0, "767": 0, "768": 0, "771": 0, "772": 0, "775": 0, "776": 0, "779": 0, "780": 0, "781": 0, "782": 0, "783": 0, "784": 0, "787": 0, "788": 0, "789": 0, "790": 0, "791": 0, "792": 0, "795": 0, "796": 0, "797": 0, "798": 0, "799": 0, "802": 0, "803": 0, "804": 0, "805": 0, "806": 0, "809": 0, "812": 0, "816": 0, "817": 0, "818": 0, "819": 0, "820": 0, "824": 0, "825": 0, "826": 0, "830": 0, "831": 0, "832": 0, "836": 0, "837": 0, "838": 0, "842": 0, "843": 0, "847": 0, "848": 0, "852": 0, "853": 0, "1022": 1, "1024": 1, "1028": 1, "1029": 1, "1030": 1, "1032": 1, "1033": 1, "1035": 1, "1037": 1, "1181": 1, "1182": 1, "1199": 1, "1202": 1, "1205": 1, "1209": 1, "1213": 1, "1216": 1, "1219": 1, "1220": 1, "1223": 1, "1229": 1, "1232": 1, "1237": 1, "1242": 1, "1245": 1, "1250": 1, "1255": 1, "1262": 1, "1269": 1, "1272": 1, "1275": 1, "1280": 1, "1281": 1, "1287": 1, "1288": 1, "1294": 1, "1295": 1, "1301": 1, "1302": 1, "1308": 1, "1309": 1, "1323": 1, "1324": 1, "1332": 1, "1364": 1, "1367": 1, "1372": 1, "1402": 1, "1405": 1, "1434": 1, "1442": 1, "1450": 1, "1458": 1, "1466": 1, "1469": 1, "1472": 1, "1038": 0, "1039": 0, "1042": 0, "1044": 0, "1045": 0, "1046": 0, "1047": 0, "1048": 0, "1049": 0, "1050": 0, "1051": 0, "1052": 0, "1053": 0, "1054": 0, "1055": 0, "1056": 0, "1057": 0, "1058": 0, "1059": 0, "1060": 0, "1061": 0, "1062": 0, "1063": 0, "1064": 0, "1065": 0, "1066": 0, "1067": 0, "1068": 0, "1069": 0, "1070": 0, "1071": 0, "1072": 0, "1073": 0, "1074": 0, "1075": 0, "1077": 0, "1078": 0, "1079": 0, "1080": 0, "1081": 0, "1082": 0, "1083": 0, "1084": 0, "1085": 0, "1087": 0, "1088": 0, "1089": 0, "1090": 0, "1091": 0, "1092": 0, "1093": 0, "1094": 0, "1095": 0, "1097": 0, "1098": 0, "1099": 0, "1100": 0, "1101": 0, "1102": 0, "1104": 0, "1105": 0, "1106": 0, "1107": 0, "1108": 0, "1109": 0, "1110": 0, "1111": 0, "1118": 0, "1119": 0, "1121": 0, "1123": 0, "1124": 0, "1125": 0, "1126": 0, "1127": 0, "1128": 0, "1129": 0, "1130": 0, "1131": 0, "1132": 0, "1133": 0, "1134": 0, "1135": 0, "1137": 0, "1138": 0, "1139": 0, "1141": 0, "1145": 0, "1146": 0, "1152": 0, "1153": 0, "1155": 0, "1156": 0, "1158": 0, "1160": 0, "1162": 0, "1163": 0, "1164": 0, "1165": 0, "1167": 0, "1170": 0, "1171": 0, "1172": 0, "1174": 0, "1175": 0, "1176": 0, "1177": 0, "1179": 0, "1184": 0, "1185": 0, "1186": 0, "1187": 0, "1188": 0, "1189": 0, "1190": 0, "1191": 0, "1193": 0, "1194": 0, "1195": 0, "1196": 0, "1200": 0, "1203": 0, "1206": 0, "1207": 0, "1210": 0, "1211": 0, "1214": 0, "1217": 0, "1221": 0, "1224": 0, "1225": 0, "1226": 0, "1227": 0, "1230": 0, "1233": 0, "1234": 0, "1235": 0, "1238": 0, "1239": 0, "1240": 0, "1243": 0, "1246": 0, "1247": 0, "1248": 0, "1251": 0, "1252": 0, "1253": 0, "1256": 0, "1257": 0, "1258": 0, "1259": 0, "1260": 0, "1263": 0, "1264": 0, "1265": 0, "1266": 0, "1267": 0, "1270": 0, "1273": 0, "1276": 0, "1277": 0, "1278": 0, "1282": 0, "1283": 0, "1284": 0, "1285": 0, "1289": 0, "1290": 0, "1291": 0, "1292": 0, "1296": 0, "1297": 0, "1298": 0, "1299": 0, "1303": 0, "1304": 0, "1305": 0, "1306": 0, "1310": 0, "1312": 0, "1313": 0, "1314": 0, "1315": 0, "1316": 0, "1317": 0, "1318": 0, "1319": 0, "1320": 0, "1321": 0, "1325": 0, "1326": 0, "1327": 0, "1328": 0, "1329": 0, "1330": 0, "1339": 0, "1340": 0, "1341": 0, "1342": 0, "1343": 0, "1344": 0, "1345": 0, "1346": 0, "1347": 0, "1348": 0, "1349": 0, "1350": 0, "1351": 0, "1352": 0, "1353": 0, "1354": 0, "1355": 0, "1356": 0, "1357": 0, "1358": 0, "1359": 0, "1360": 0, "1361": 0, "1362": 0, "1365": 0, "1368": 0, "1369": 0, "1370": 0, "1373": 0, "1374": 0, "1375": 0, "1376": 0, "1377": 0, "1378": 0, "1379": 0, "1380": 0, "1381": 0, "1382": 0, "1383": 0, "1384": 0, "1387": 0, "1388": 0, "1389": 0, "1390": 0, "1396": 0, "1397": 0, "1398": 0, "1399": 0, "1400": 0, "1403": 0, "1406": 0, "1407": 0, "1408": 0, "1409": 0, "1410": 0, "1420": 0, "1421": 0, "1422": 0, "1423": 0, "1424": 0, "1425": 0, "1426": 0, "1427": 0, "1428": 0, "1429": 0, "1430": 0, "1431": 0, "1432": 0, "1435": 0, "1436": 0, "1437": 0, "1438": 0, "1439": 0, "1440": 0, "1443": 0, "1444": 0, "1445": 0, "1446": 0, "1447": 0, "1448": 0, "1451": 0, "1452": 0, "1453": 0, "1454": 0, "1455": 0, "1456": 0, "1459": 0, "1460": 0, "1461": 0, "1462": 0, "1463": 0, "1464": 0, "1467": 0, "1470": 0, "1473": 0, "1576": 1, "1577": 1, "1578": 1, "1579": 1, "1581": 1, "1583": 1, "1584": 1, "1586": 1, "1588": 1, "1589": 1, "1667": 1, "1683": 1, "1686": 1, "1689": 1, "1692": 1, "1695": 1, "1698": 1, "1699": 1, "1711": 1, "1713": 1, "1714": 1, "1725": 1, "1726": 1, "1737": 1, "1738": 1, "1749": 1, "1751": 1, "1752": 1, "1766": 1, "1767": 1, "1779": 1, "1780": 1, "1792": 1, "1793": 1, "1798": 1, "1843": 1, "1846": 1, "1849": 1, "1852": 1, "1858": 1, "1861": 1, "1864": 1, "1867": 1, "1870": 1, "1917": 1, "1920": 1, "1941": 1, "1949": 1, "1957": 1, "1965": 1, "1973": 1, "1976": 1, "1988": 1, "1989": 1, "1992": 1, "1993": 1, "1996": 1, "1997": 1, "2006": 1, "2007": 1, "2014": 1, "2017": 1, "2037": 1, "2041": 1, "1590": 2, "1591": 0, "1592": 0, "1594": 0, "1595": 0, "1597": 0, "1598": 0, "1600": 0, "1601": 0, "1602": 0, "1603": 0, "1604": 0, "1606": 0, "1607": 0, "1608": 0, "1609": 0, "1610": 0, "1611": 0, "1612": 0, "1613": 0, "1614": 0, "1615": 0, "1616": 0, "1617": 0, "1618": 0, "1620": 0, "1622": 0, "1623": 0, "1625": 0, "1626": 0, "1628": 2, "1629": 0, "1630": 0, "1631": 0, "1633": 2, "1635": 2, "1636": 0, "1637": 0, "1638": 0, "1640": 2, "1643": 2, "1644": 0, "1645": 0, "1646": 0, "1648": 0, "1649": 0, "1650": 2, "1651": 0, "1652": 0, "1653": 2, "1654": 2, "1655": 2, "1656": 0, "1657": 0, "1658": 2, "1659": 0, "1660": 2, "1661": 0, "1662": 2, "1663": 2, "1664": 2, "1665": 2, "1680": 0, "1681": 0, "1684": 0, "1687": 0, "1690": 0, "1693": 0, "1696": 0, "1700": 0, "1701": 0, "1702": 0, "1703": 0, "1705": 0, "1706": 0, "1707": 0, "1709": 0, "1710": 0, "1715": 0, "1716": 0, "1717": 0, "1718": 0, "1719": 0, "1720": 0, "1721": 0, "1723": 0, "1724": 0, "1727": 0, "1728": 0, "1729": 0, "1730": 0, "1731": 0, "1732": 0, "1733": 0, "1735": 0, "1736": 0, "1739": 0, "1740": 0, "1741": 0, "1742": 0, "1743": 0, "1744": 0, "1745": 0, "1747": 0, "1748": 0, "1753": 0, "1754": 0, "1755": 0, "1756": 0, "1758": 0, "1759": 0, "1760": 0, "1761": 0, "1762": 0, "1764": 0, "1765": 0, "1768": 0, "1769": 0, "1770": 0, "1771": 0, "1772": 0, "1773": 0, "1774": 0, "1776": 0, "1777": 0, "1781": 0, "1782": 0, "1783": 0, "1784": 0, "1785": 0, "1787": 0, "1788": 0, "1789": 0, "1790": 0, "1794": 0, "1795": 0, "1796": 0, "1799": 0, "1800": 0, "1801": 0, "1802": 0, "1804": 0, "1805": 0, "1806": 0, "1807": 0, "1808": 0, "1810": 0, "1811": 0, "1812": 0, "1814": 0, "1815": 0, "1817": 0, "1818": 0, "1819": 0, "1821": 0, "1822": 0, "1823": 0, "1824": 0, "1825": 0, "1826": 0, "1827": 0, "1828": 0, "1829": 0, "1830": 0, "1832": 0, "1833": 0, "1834": 0, "1835": 0, "1836": 0, "1838": 0, "1839": 0, "1841": 0, "1844": 0, "1847": 0, "1850": 0, "1853": 0, "1854": 0, "1855": 0, "1856": 0, "1859": 0, "1862": 0, "1865": 0, "1868": 0, "1871": 5, "1872": 5, "1873": 4, "1874": 4, "1875": 1, "1878": 0, "1879": 1, "1880": 0, "1881": 1, "1882": 0, "1883": 0, "1884": 0, "1885": 1, "1888": 0, "1889": 1, "1892": 0, "1893": 0, "1894": 0, "1895": 0, "1896": 0, "1897": 0, "1899": 0, "1900": 0, "1901": 0, "1903": 0, "1904": 0, "1906": 0, "1907": 0, "1909": 0, "1910": 0, "1912": 0, "1913": 0, "1914": 0, "1915": 1, "1918": 0, "1922": 0, "1923": 0, "1924": 0, "1925": 0, "1926": 0, "1927": 0, "1928": 0, "1929": 0, "1930": 0, "1931": 0, "1932": 0, "1933": 0, "1934": 0, "1935": 0, "1936": 0, "1937": 0, "1938": 0, "1939": 0, "1942": 0, "1943": 0, "1944": 0, "1945": 0, "1946": 0, "1947": 0, "1950": 0, "1951": 0, "1952": 0, "1953": 0, "1954": 0, "1955": 0, "1958": 0, "1959": 0, "1960": 0, "1961": 0, "1962": 0, "1963": 0, "1966": 0, "1967": 0, "1968": 0, "1969": 0, "1970": 0, "1971": 0, "1974": 0, "1982": 0, "1984": 0, "1985": 0, "1986": 0, "1990": 0, "1994": 0, "1998": 0, "1999": 0, "2000": 0, "2001": 0, "2002": 0, "2003": 0, "2004": 0, "2008": 0, "2009": 0, "2010": 0, "2011": 0, "2012": 0, "2015": 0, "2031": 0, "2032": 0, "2033": 0, "2034": 0, "2035": 0, "2039": 0, "2043": 0, "2073": 1, "2074": 1, "2075": 1, "2077": 1, "2079": 1, "2081": 1, "2084": 1, "2087": 1, "2088": 1, "2114": 1, "2118": 1, "2121": 1, "2124": 1, "2127": 1, "2130": 1, "2133": 1, "2136": 1, "2142": 1, "2148": 1, "2162": 1, "2174": 1, "2183": 1, "2194": 1, "2203": 1, "2214": 1, "2223": 1, "2232": 1, "2241": 1, "2248": 1, "2251": 1, "2260": 1, "2269": 1, "2278": 1, "2287": 1, "2290": 1, "2295": 1, "2298": 1, "2406": 1, "2411": 1, "2417": 1, "2420": 1, "2421": 1, "2428": 1, "2438": 1, "2444": 1, "2450": 1, "2456": 1, "2462": 1, "2468": 1, "2474": 1, "2480": 1, "2486": 1, "2492": 1, "2498": 1, "2082": 0, "2085": 0, "2089": 45, "2090": 0, "2097": 45, "2098": 45, "2099": 0, "2100": 0, "2101": 0, "2104": 45, "2105": 19, "2106": 26, "2107": 1, "2108": 25, "2109": 1, "2110": 24, "2111": 24, "2112": 24, "2115": 0, "2119": 0, "2122": 0, "2125": 0, "2128": 0, "2131": 0, "2134": 0, "2137": 0, "2138": 0, "2140": 0, "2143": 0, "2144": 0, "2146": 0, "2149": 0, "2150": 0, "2152": 0, "2153": 0, "2154": 0, "2155": 0, "2156": 0, "2157": 0, "2158": 0, "2159": 0, "2163": 0, "2164": 0, "2165": 0, "2166": 0, "2167": 0, "2168": 0, "2169": 0, "2170": 0, "2172": 0, "2175": 0, "2176": 0, "2177": 0, "2178": 0, "2179": 0, "2180": 0, "2181": 0, "2184": 0, "2185": 0, "2186": 0, "2187": 0, "2188": 0, "2189": 0, "2190": 0, "2191": 0, "2192": 0, "2195": 0, "2196": 0, "2197": 0, "2198": 0, "2199": 0, "2200": 0, "2201": 0, "2204": 0, "2205": 0, "2206": 0, "2207": 0, "2208": 0, "2209": 0, "2210": 0, "2211": 0, "2212": 0, "2215": 0, "2216": 0, "2217": 0, "2218": 0, "2219": 0, "2220": 0, "2221": 0, "2224": 0, "2225": 0, "2226": 0, "2227": 0, "2228": 0, "2229": 0, "2230": 0, "2233": 0, "2234": 0, "2235": 0, "2236": 0, "2237": 0, "2238": 0, "2239": 0, "2242": 47, "2243": 1, "2244": 46, "2245": 42, "2246": 4, "2249": 0, "2252": 18, "2253": 18, "2254": 0, "2255": 0, "2256": 18, "2257": 18, "2258": 0, "2261": 3, "2262": 3, "2263": 0, "2264": 0, "2265": 3, "2266": 3, "2267": 0, "2270": 0, "2271": 0, "2272": 0, "2273": 0, "2274": 0, "2275": 0, "2276": 0, "2279": 0, "2280": 0, "2281": 0, "2282": 0, "2283": 0, "2284": 0, "2285": 0, "2288": 82, "2291": 0, "2296": 0, "2319": 0, "2321": 0, "2322": 0, "2323": 0, "2325": 0, "2326": 0, "2327": 0, "2328": 0, "2331": 0, "2332": 0, "2333": 0, "2335": 0, "2336": 0, "2337": 0, "2338": 0, "2340": 0, "2341": 0, "2343": 0, "2344": 0, "2345": 0, "2347": 0, "2349": 0, "2350": 0, "2352": 0, "2353": 0, "2354": 0, "2355": 0, "2361": 0, "2362": 0, "2363": 0, "2364": 0, "2366": 0, "2369": 0, "2370": 0, "2371": 0, "2372": 0, "2373": 0, "2374": 0, "2375": 0, "2377": 0, "2378": 0, "2379": 0, "2380": 0, "2383": 0, "2384": 0, "2385": 0, "2387": 0, "2389": 0, "2390": 0, "2391": 0, "2393": 0, "2394": 0, "2395": 0, "2396": 0, "2397": 0, "2398": 0, "2399": 0, "2401": 0, "2402": 0, "2403": 0, "2404": 0, "2407": 0, "2409": 0, "2412": 0, "2413": 0, "2415": 0, "2418": 0, "2422": 0, "2423": 0, "2424": 0, "2425": 0, "2426": 0, "2429": 0, "2439": 0, "2440": 0, "2442": 0, "2445": 0, "2446": 0, "2448": 0, "2451": 0, "2452": 0, "2454": 0, "2457": 0, "2458": 0, "2460": 0, "2463": 0, "2464": 0, "2466": 0, "2469": 0, "2470": 0, "2472": 0, "2475": 0, "2476": 0, "2478": 0, "2481": 0, "2482": 0, "2484": 0, "2487": 0, "2488": 0, "2490": 0, "2493": 0, "2494": 0, "2496": 0, "2499": 0, "2523": 1, "2525": 1, "2526": 1, "2527": 1, "2530": 1, "2535": 1, "2537": 1, "2769": 1, "2772": 1, "2775": 1, "2776": 1, "2780": 1, "2792": 1, "2796": 1, "2800": 1, "2804": 1, "2821": 1, "2832": 1, "2876": 1, "2877": 1, "2886": 1, "2901": 1, "2972": 1, "2994": 1, "2706": 0, "2707": 0, "2709": 0, "2710": 0, "2711": 0, "2713": 0, "2714": 0, "2716": 0, "2717": 0, "2718": 0, "2719": 0, "2720": 0, "2721": 0, "2723": 0, "2724": 0, "2726": 0, "2728": 0, "2729": 0, "2730": 0, "2731": 0, "2733": 0, "2734": 0, "2737": 0, "2738": 0, "2740": 0, "2741": 0, "2742": 0, "2743": 0, "2744": 0, "2746": 0, "2747": 0, "2749": 0, "2751": 0, "2752": 0, "2753": 0, "2754": 0, "2755": 0, "2756": 0, "2758": 0, "2760": 0, "2761": 0, "2762": 0, "2763": 0, "2765": 0, "2767": 0, "2770": 0, "2773": 0, "2778": 0, "2782": 0, "2783": 0, "2784": 0, "2786": 0, "2787": 0, "2789": 0, "2790": 0, "2794": 0, "2798": 0, "2802": 0, "2806": 0, "2808": 0, "2810": 0, "2811": 0, "2813": 0, "2814": 0, "2816": 0, "2817": 0, "2819": 0, "2822": 0, "2823": 0, "2824": 0, "2825": 0, "2826": 0, "2828": 0, "2829": 0, "2830": 0, "2873": 0, "2874": 0, "2882": 0, "2884": 0, "2897": 0, "2898": 0, "2899": 0, "2966": 0, "2967": 0, "2968": 0, "2969": 0, "2970": 0, "2985": 0, "2986": 0, "2987": 0, "2989": 0, "2990": 0, "2991": 0, "2992": 0, "3014": 0, "3015": 0, "3016": 0, "3017": 0, "3018": 0, "3019": 0, "3020": 0, "3021": 0, "3022": 0, "3023": 0, "3033": 1, "3035": 1, "3036": 0, "3040": 1, "3042": 1, "3043": 0, "3066": 1, "3067": 1, "3068": 1, "3069": 1, "3070": 1, "3071": 1, "3072": 1, "3074": 1, "3076": 1, "3079": 1, "3080": 1, "3083": 1, "3084": 1, "3087": 1, "3106": 1, "3110": 1, "3077": 0, "3081": 0, "3085": 0, "3088": 0, "3089": 0, "3090": 0, "3091": 0, "3092": 0, "3093": 0, "3094": 0, "3095": 0, "3100": 0, "3101": 0, "3102": 0, "3103": 0, "3104": 0, "3108": 0, "3111": 0, "3131": 1, "3132": 1, "3134": 1, "3135": 1, "3137": 1, "3139": 1, "3142": 1, "3143": 1, "3146": 1, "3147": 1, "3150": 1, "3153": 1, "3156": 1, "3157": 1, "3140": 0, "3144": 0, "3148": 4, "3151": 0, "3154": 0, "3159": 0, "3160": 0, "3162": 0, "3188": 1, "3190": 1, "3191": 1, "3193": 1, "3195": 1, "3198": 1, "3199": 1, "3202": 1, "3203": 1, "3206": 1, "3196": 0, "3200": 0, "3204": 0, "3207": 0, "3208": 0, "3209": 0, "3210": 0, "3211": 0, "3212": 0, "3213": 0, "3214": 0, "3215": 0, "3216": 0, "3217": 0, "3218": 0, "3219": 0, "3220": 0, "3221": 0, "3222": 0, "3223": 0, "3224": 0, "3225": 0, "3226": 0, "3246": 1, "3248": 1, "3249": 1, "3251": 1, "3253": 1, "3256": 1, "3257": 1, "3254": 0, "3258": 0, "3302": 1, "3303": 1, "3304": 1, "3305": 1, "3306": 1, "3307": 1, "3308": 1, "3309": 1, "3311": 1, "3313": 1, "3316": 1, "3319": 1, "3323": 1, "3326": 1, "3329": 1, "3330": 1, "3336": 1, "3338": 1, "3339": 1, "3346": 1, "3347": 1, "3350": 1, "3351": 1, "3359": 1, "3361": 1, "3362": 1, "3373": 1, "3376": 1, "3379": 1, "3417": 1, "3420": 1, "3423": 1, "3426": 1, "3429": 1, "3430": 1, "3431": 1, "3432": 1, "3434": 1, "3435": 1, "3440": 1, "3442": 1, "3445": 1, "3314": 0, "3317": 0, "3320": 0, "3321": 0, "3324": 0, "3327": 0, "3331": 0, "3332": 0, "3333": 0, "3334": 0, "3335": 0, "3340": 0, "3341": 0, "3342": 0, "3343": 0, "3344": 0, "3348": 0, "3352": 0, "3353": 0, "3354": 0, "3355": 0, "3356": 0, "3357": 0, "3358": 0, "3363": 0, "3364": 0, "3365": 0, "3366": 0, "3367": 0, "3368": 0, "3369": 0, "3370": 0, "3371": 0, "3374": 0, "3377": 0, "3397": 0, "3398": 0, "3399": 0, "3400": 0, "3401": 0, "3402": 0, "3403": 0, "3404": 0, "3405": 0, "3406": 0, "3407": 0, "3408": 0, "3409": 0, "3410": 0, "3411": 0, "3412": 0, "3413": 0, "3415": 0, "3418": 1, "3421": 0, "3424": 0, "3427": 0, "3436": 0, "3437": 0, "3438": 0, "3443": 0, "3446": 0, "3463": 1, "3464": 1, "3465": 1, "3466": 1, "3467": 1, "3468": 1, "3469": 1, "3470": 1, "3472": 1, "3474": 1, "3477": 1, "3480": 1, "3484": 1, "3487": 1, "3490": 1, "3491": 1, "3497": 1, "3499": 1, "3500": 1, "3507": 1, "3508": 1, "3511": 1, "3512": 1, "3520": 1, "3522": 1, "3523": 1, "3534": 1, "3537": 1, "3540": 1, "3583": 1, "3586": 1, "3589": 1, "3592": 1, "3595": 1, "3596": 1, "3597": 1, "3598": 1, "3600": 1, "3601": 1, "3606": 1, "3608": 1, "3611": 1, "3614": 1, "3475": 0, "3478": 0, "3481": 0, "3482": 0, "3485": 0, "3488": 0, "3492": 0, "3493": 0, "3494": 0, "3495": 0, "3496": 0, "3501": 0, "3502": 0, "3503": 0, "3504": 0, "3505": 0, "3509": 0, "3513": 0, "3514": 0, "3515": 0, "3516": 0, "3517": 0, "3518": 0, "3519": 0, "3524": 0, "3525": 0, "3526": 0, "3527": 0, "3528": 0, "3529": 0, "3530": 0, "3531": 0, "3532": 0, "3535": 0, "3538": 0, "3562": 0, "3563": 0, "3564": 0, "3565": 0, "3566": 0, "3568": 0, "3569": 0, "3570": 0, "3572": 0, "3574": 0, "3575": 0, "3576": 0, "3577": 0, "3578": 0, "3579": 0, "3580": 0, "3581": 0, "3584": 1, "3587": 0, "3590": 0, "3593": 0, "3602": 0, "3603": 0, "3604": 0, "3609": 0, "3612": 0, "3615": 0, "3666": 1, "3667": 1, "3668": 1, "3669": 1, "3670": 1, "3671": 1, "3672": 1, "3673": 1, "3674": 1, "3675": 1, "3676": 1, "3677": 1, "3678": 1, "3679": 1, "3681": 1, "3683": 1, "3686": 1, "3689": 1, "3692": 1, "3693": 1, "3696": 1, "3697": 1, "3700": 1, "3701": 1, "3704": 1, "3705": 1, "3708": 1, "3711": 1, "3714": 1, "3717": 1, "3720": 1, "3724": 1, "3728": 1, "3729": 1, "3730": 1, "3731": 1, "3684": 0, "3687": 0, "3690": 0, "3694": 0, "3698": 0, "3702": 0, "3706": 0, "3709": 0, "3712": 0, "3715": 0, "3718": 0, "3722": 0, "3725": 0, "3737": 0, "3772": 1, "3773": 1, "3774": 1, "3775": 1, "3776": 1, "3777": 1, "3779": 1, "3781": 1, "3783": 1, "3786": 1, "3789": 1, "3790": 1, "3793": 1, "3796": 1, "3799": 1, "3800": 1, "3803": 1, "3784": 0, "3787": 0, "3791": 0, "3794": 0, "3797": 0, "3801": 0, "3804": 0, "3805": 0, "3807": 0, "3808": 0, "3809": 0, "3811": 0, "3812": 0, "3814": 0, "3822": 1, "3823": 1, "3824": 1, "3826": 1, "3828": 1, "3830": 1, "3832": 1, "3835": 1, "3841": 1, "3844": 1, "3856": 1, "3859": 1, "3864": 1, "3869": 1, "3873": 1, "3833": 0, "3842": 0, "3845": 0, "3846": 0, "3847": 0, "3848": 0, "3849": 0, "3850": 0, "3851": 0, "3852": 0, "3854": 0, "3857": 0, "3860": 0, "3861": 0, "3862": 0, "3865": 0, "3866": 0, "3867": 0, "3871": 0, "3874": 5, "3905": 1, "3906": 1, "3907": 1, "3908": 1, "3909": 1, "3910": 1, "3911": 1, "3913": 1, "3915": 1, "3918": 1, "3919": 1, "3922": 1, "3925": 1, "3928": 1, "3934": 1, "3941": 1, "4021": 1, "4025": 1, "3916": 0, "3920": 0, "3923": 0, "3926": 0, "3929": 0, "3930": 0, "3931": 0, "3932": 0, "3935": 0, "3936": 0, "3938": 0, "3939": 0, "3942": 0, "3943": 0, "3944": 0, "3945": 0, "3946": 0, "3947": 0, "3948": 0, "3949": 0, "3952": 0, "3953": 0, "3954": 0, "3955": 0, "3957": 0, "3958": 0, "3959": 0, "3960": 0, "3961": 0, "3962": 0, "3963": 0, "3964": 0, "3965": 0, "3966": 0, "3967": 0, "3968": 0, "3969": 0, "3970": 0, "3971": 0, "3972": 0, "3973": 0, "3980": 0, "3983": 0, "3984": 0, "3986": 0, "3987": 0, "3988": 0, "3989": 0, "3990": 0, "3992": 0, "3993": 0, "3994": 0, "3996": 0, "3998": 0, "3999": 0, "4000": 0, "4001": 0, "4002": 0, "4003": 0, "4004": 0, "4005": 0, "4006": 0, "4007": 0, "4008": 0, "4009": 0, "4010": 0, "4011": 0, "4013": 0, "4015": 0, "4016": 0, "4017": 0, "4018": 0, "4019": 0, "4022": 0, "4023": 0, "4026": 0, "4027": 0, "4068": 1, "4069": 1, "4070": 1, "4071": 1, "4072": 1, "4073": 1, "4074": 1, "4076": 1, "4078": 1, "4081": 1, "4082": 1, "4085": 1, "4088": 1, "4091": 1, "4079": 0, "4083": 0, "4086": 0, "4089": 0, "4092": 0, "4093": 0, "4094": 0, "4095": 0, "4129": 1, "4130": 1, "4131": 1, "4132": 1, "4133": 1, "4134": 1, "4135": 1, "4137": 1, "4139": 1, "4142": 1, "4145": 1, "4150": 1, "4154": 1, "4160": 1, "4140": 0, "4143": 0, "4147": 0, "4148": 0, "4151": 0, "4152": 0, "4155": 0, "4156": 0, "4157": 0, "4158": 0, "4200": 1, "4201": 1, "4202": 1, "4203": 1, "4204": 1, "4205": 1, "4206": 1, "4208": 1, "4210": 1, "4213": 1, "4216": 1, "4220": 1, "4224": 1, "4230": 1, "4211": 0, "4214": 0, "4217": 0, "4218": 0, "4221": 0, "4222": 0, "4225": 0, "4226": 0, "4227": 0, "4228": 0, "4265": 1, "4266": 1, "4267": 1, "4268": 1, "4269": 1, "4271": 1, "4273": 1, "4276": 1, "4279": 1, "4285": 1, "4274": 0, "4277": 0, "4281": 0, "4282": 0, "4283": 0, "4286": 0, "4287": 0, "4288": 0, "4289": 0, "4320": 1, "4321": 1, "4322": 1, "4323": 1, "4324": 1, "4326": 1, "4328": 1, "4331": 1, "4337": 1, "4343": 1, "4351": 1, "4329": 0, "4333": 0, "4334": 0, "4335": 0, "4338": 0, "4339": 0, "4340": 0, "4341": 0, "4344": 0, "4345": 0, "4346": 0, "4347": 0, "4348": 0, "4349": 0, "4352": 0, "4378": 1, "4379": 1, "4380": 1, "4381": 1, "4382": 1, "4383": 1, "4385": 1, "4387": 1, "4389": 1, "4392": 1, "4393": 1, "4396": 1, "4399": 1, "4402": 1, "4431": 1, "4434": 1, "4435": 1, "4390": 0, "4394": 0, "4397": 0, "4400": 0, "4414": 0, "4415": 0, "4416": 0, "4417": 0, "4418": 0, "4419": 0, "4420": 0, "4421": 0, "4422": 0, "4423": 0, "4424": 0, "4425": 0, "4426": 0, "4427": 0, "4428": 0, "4429": 0, "4432": 0, "4436": 0, "4442": 0, "4445": 0, "4451": 0, "4457": 0, "4464": 0, "4465": 0, "4471": 0, "4477": 0, "4478": 0, "4489": 1, "4490": 1, "4491": 1, "4492": 1}}
+ git checkout b1cb676cf92dd1a48365b731979833375b188bf2
Note: switching to 'b1cb676cf92dd1a48365b731979833375b188bf2'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at b1cb676cf9 Merge pull request #24557 from sylee957/slow
+ git apply /root/pre_state.patch
error: unrecognized input
