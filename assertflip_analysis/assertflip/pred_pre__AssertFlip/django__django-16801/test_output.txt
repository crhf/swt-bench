+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD 3b62d8c83e3e48d2ed61cfa32a61c56d9e030293
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
nothing to commit, working tree clean
+ git show
commit 3b62d8c83e3e48d2ed61cfa32a61c56d9e030293
Author: Paul Brown <paul90brown@gmail.com>
Date:   Tue May 2 18:42:11 2023 +0000

    Refs #31369 -- Improved hint message in NullBooleanField's deprecation warning.

diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index ab4c094c1c..7ea2fd59aa 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -2248,7 +2248,7 @@ class NullBooleanField(BooleanField):
             "NullBooleanField is removed except for support in historical "
             "migrations."
         ),
-        "hint": "Use BooleanField(null=True) instead.",
+        "hint": "Use BooleanField(null=True, blank=True) instead.",
         "id": "fields.E903",
     }
 
diff --git a/docs/releases/3.1.txt b/docs/releases/3.1.txt
index 50430ec1be..789a65efaa 100644
--- a/docs/releases/3.1.txt
+++ b/docs/releases/3.1.txt
@@ -821,7 +821,7 @@ Miscellaneous
   :class:`~django.db.models.expressions.RawSQL` instead beforehand.
 
 * The ``NullBooleanField`` model field is deprecated in favor of
-  ``BooleanField(null=True)``.
+  ``BooleanField(null=True, blank=True)``.
 
 * ``django.conf.urls.url()`` alias of :func:`django.urls.re_path` is
   deprecated.
diff --git a/tests/invalid_models_tests/test_deprecated_fields.py b/tests/invalid_models_tests/test_deprecated_fields.py
index 7b1e3fb7ac..429e15febc 100644
--- a/tests/invalid_models_tests/test_deprecated_fields.py
+++ b/tests/invalid_models_tests/test_deprecated_fields.py
@@ -59,7 +59,7 @@ class DeprecatedFieldsTests(SimpleTestCase):
                 checks.Error(
                     "NullBooleanField is removed except for support in historical "
                     "migrations.",
-                    hint="Use BooleanField(null=True) instead.",
+                    hint="Use BooleanField(null=True, blank=True) instead.",
                     obj=NullBooleanFieldModel._meta.get_field("nb"),
                     id="fields.E903",
                 ),
+ git diff 3b62d8c83e3e48d2ed61cfa32a61c56d9e030293
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Checking if build backend supports build_editable: started
  Checking if build backend supports build_editable: finished with status 'done'
  Getting requirements to build editable: started
  Getting requirements to build editable: finished with status 'done'
  Preparing editable metadata (pyproject.toml): started
  Preparing editable metadata (pyproject.toml): finished with status 'done'
Requirement already satisfied: asgiref>=3.6.0 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from Django==5.0.dev20230502184211) (3.9.1)
Requirement already satisfied: sqlparse>=0.3.1 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from Django==5.0.dev20230502184211) (0.5.3)
Building wheels for collected packages: Django
  Building editable for Django (pyproject.toml): started
  Building editable for Django (pyproject.toml): finished with status 'done'
  Created wheel for Django: filename=django-5.0.dev20230502184211-0.editable-py3-none-any.whl size=27433 sha256=8ac44defd2989a8e4f3b762808146190edbfbf2bad3bbcaac5ad73456a91ea24
  Stored in directory: /tmp/pip-ephem-wheel-cache-ldu8zhje/wheels/49/5f/4f/01b7d31ea6ddac9643da788242d33e5fd3467d95d17b032c6b
Successfully built Django
Installing collected packages: Django
  Attempting uninstall: Django
    Found existing installation: Django 5.0.dev20230502184211
    Uninstalling Django-5.0.dev20230502184211:
      Successfully uninstalled Django-5.0.dev20230502184211
Successfully installed Django-5.0.dev20230502184211
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git apply -v -
Checking patch tests/test_coverup_django__django-16801.py...
Applied patch tests/test_coverup_django__django-16801.py cleanly.
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/db/models/fields/files\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-16801
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(django/db/models/fields/files\\.py)']
0.28 /testbed/django/db/models/fields/files.py(1): import datetime
0.28 /testbed/django/db/models/fields/files.py(2): import posixpath
0.28 /testbed/django/db/models/fields/files.py(4): from django import forms
0.28 /testbed/django/db/models/fields/files.py(5): from django.core import checks
0.28 /testbed/django/db/models/fields/files.py(6): from django.core.files.base import File
0.28 /testbed/django/db/models/fields/files.py(7): from django.core.files.images import ImageFile
0.28 /testbed/django/db/models/fields/files.py(8): from django.core.files.storage import Storage, default_storage
0.28 /testbed/django/db/models/fields/files.py(9): from django.core.files.utils import validate_file_name
0.28 /testbed/django/db/models/fields/files.py(10): from django.db.models import signals
0.28 /testbed/django/db/models/fields/files.py(11): from django.db.models.fields import Field
0.28 /testbed/django/db/models/fields/files.py(12): from django.db.models.query_utils import DeferredAttribute
0.28 /testbed/django/db/models/fields/files.py(13): from django.db.models.utils import AltersData
0.28 /testbed/django/db/models/fields/files.py(14): from django.utils.translation import gettext_lazy as _
0.28 /testbed/django/db/models/fields/files.py(17): class FieldFile(File, AltersData):
0.28 /testbed/django/db/models/fields/files.py(17): class FieldFile(File, AltersData):
0.28 /testbed/django/db/models/fields/files.py(18):     def __init__(self, instance, field, name):
0.28 /testbed/django/db/models/fields/files.py(25):     def __eq__(self, other):
0.28 /testbed/django/db/models/fields/files.py(32):     def __hash__(self):
0.28 /testbed/django/db/models/fields/files.py(39):     def _require_file(self):
0.28 /testbed/django/db/models/fields/files.py(45):     def _get_file(self):
0.28 /testbed/django/db/models/fields/files.py(51):     def _set_file(self, file):
0.28 /testbed/django/db/models/fields/files.py(54):     def _del_file(self):
0.28 /testbed/django/db/models/fields/files.py(57):     file = property(_get_file, _set_file, _del_file)
0.28 /testbed/django/db/models/fields/files.py(59):     @property
0.28 /testbed/django/db/models/fields/files.py(60):     def path(self):
0.28 /testbed/django/db/models/fields/files.py(59):     @property
0.28 /testbed/django/db/models/fields/files.py(60):     def path(self):
0.28 /testbed/django/db/models/fields/files.py(64):     @property
0.28 /testbed/django/db/models/fields/files.py(65):     def url(self):
0.28 /testbed/django/db/models/fields/files.py(64):     @property
0.28 /testbed/django/db/models/fields/files.py(65):     def url(self):
0.28 /testbed/django/db/models/fields/files.py(69):     @property
0.28 /testbed/django/db/models/fields/files.py(70):     def size(self):
0.28 /testbed/django/db/models/fields/files.py(69):     @property
0.28 /testbed/django/db/models/fields/files.py(70):     def size(self):
0.28 /testbed/django/db/models/fields/files.py(76):     def open(self, mode="rb"):
0.28 /testbed/django/db/models/fields/files.py(85):     open.alters_data = True
0.28 /testbed/django/db/models/fields/files.py(91):     def save(self, name, content, save=True):
0.28 /testbed/django/db/models/fields/files.py(101):     save.alters_data = True
0.28 /testbed/django/db/models/fields/files.py(103):     def delete(self, save=True):
0.28 /testbed/django/db/models/fields/files.py(121):     delete.alters_data = True
0.28 /testbed/django/db/models/fields/files.py(123):     @property
0.28 /testbed/django/db/models/fields/files.py(124):     def closed(self):
0.28 /testbed/django/db/models/fields/files.py(123):     @property
0.28 /testbed/django/db/models/fields/files.py(124):     def closed(self):
0.28 /testbed/django/db/models/fields/files.py(128):     def close(self):
0.28 /testbed/django/db/models/fields/files.py(133):     def __getstate__(self):
0.28 /testbed/django/db/models/fields/files.py(146):     def __setstate__(self, state):
0.28 /testbed/django/db/models/fields/files.py(151): class FileDescriptor(DeferredAttribute):
0.28 /testbed/django/db/models/fields/files.py(151): class FileDescriptor(DeferredAttribute):
0.28 /testbed/django/db/models/fields/files.py(152):     """
0.28 /testbed/django/db/models/fields/files.py(166):     def __get__(self, instance, cls=None):
0.28 /testbed/django/db/models/fields/files.py(220):     def __set__(self, instance, value):
0.28 /testbed/django/db/models/fields/files.py(224): class FileField(Field):
0.28 /testbed/django/db/models/fields/files.py(224): class FileField(Field):
0.28 /testbed/django/db/models/fields/files.py(227):     attr_class = FieldFile
0.28 /testbed/django/db/models/fields/files.py(230):     descriptor_class = FileDescriptor
0.28 /testbed/django/db/models/fields/files.py(232):     description = _("File")
0.28 /testbed/django/db/models/fields/files.py(235):         self, verbose_name=None, name=None, upload_to="", storage=None, **kwargs
0.28 /testbed/django/db/models/fields/files.py(234):     def __init__(
0.28 /testbed/django/db/models/fields/files.py(258):     def check(self, **kwargs):
0.28 /testbed/django/db/models/fields/files.py(265):     def _check_primary_key(self):
0.28 /testbed/django/db/models/fields/files.py(278):     def _check_upload_to(self):
0.28 /testbed/django/db/models/fields/files.py(292):     def deconstruct(self):
0.28 /testbed/django/db/models/fields/files.py(302):     def get_internal_type(self):
0.28 /testbed/django/db/models/fields/files.py(305):     def get_prep_value(self, value):
0.28 /testbed/django/db/models/fields/files.py(313):     def pre_save(self, model_instance, add):
0.28 /testbed/django/db/models/fields/files.py(320):     def contribute_to_class(self, cls, name, **kwargs):
0.28 /testbed/django/db/models/fields/files.py(324):     def generate_filename(self, instance, filename):
0.28 /testbed/django/db/models/fields/files.py(339):     def save_form_data(self, instance, data):
0.28 /testbed/django/db/models/fields/files.py(349):     def formfield(self, **kwargs):
0.28 /testbed/django/db/models/fields/files.py(359): class ImageFileDescriptor(FileDescriptor):
0.28 /testbed/django/db/models/fields/files.py(359): class ImageFileDescriptor(FileDescriptor):
0.28 /testbed/django/db/models/fields/files.py(360):     """
0.28 /testbed/django/db/models/fields/files.py(365):     def __set__(self, instance, value):
0.28 /testbed/django/db/models/fields/files.py(382): class ImageFieldFile(ImageFile, FieldFile):
0.28 /testbed/django/db/models/fields/files.py(382): class ImageFieldFile(ImageFile, FieldFile):
0.28 /testbed/django/db/models/fields/files.py(383):     def delete(self, save=True):
0.28 /testbed/django/db/models/fields/files.py(390): class ImageField(FileField):
0.28 /testbed/django/db/models/fields/files.py(390): class ImageField(FileField):
0.28 /testbed/django/db/models/fields/files.py(391):     attr_class = ImageFieldFile
0.28 /testbed/django/db/models/fields/files.py(392):     descriptor_class = ImageFileDescriptor
0.28 /testbed/django/db/models/fields/files.py(393):     description = _("Image")
0.28 /testbed/django/db/models/fields/files.py(397):         verbose_name=None,
0.28 /testbed/django/db/models/fields/files.py(398):         name=None,
0.28 /testbed/django/db/models/fields/files.py(399):         width_field=None,
0.28 /testbed/django/db/models/fields/files.py(400):         height_field=None,
0.28 /testbed/django/db/models/fields/files.py(395):     def __init__(
0.28 /testbed/django/db/models/fields/files.py(406):     def check(self, **kwargs):
0.28 /testbed/django/db/models/fields/files.py(412):     def _check_image_library_installed(self):
0.28 /testbed/django/db/models/fields/files.py(430):     def deconstruct(self):
0.28 /testbed/django/db/models/fields/files.py(438):     def contribute_to_class(self, cls, name, **kwargs):
0.28 /testbed/django/db/models/fields/files.py(447):     def update_dimension_fields(self, instance, force=False, *args, **kwargs):
0.28 /testbed/django/db/models/fields/files.py(504):     def formfield(self, **kwargs):
Testing against Django installed in '/testbed/django'
Found 1 test(s).
Skipping setup of unused database(s): default, other.
System check identified no issues (0 silenced).
test_post_init_signal_unnecessary_connection (test_coverup_django__django-16801.ImageFieldPostInitSignalTest.test_post_init_signal_unnecessary_connection)
Test to check if the post_init signal is connected even when width_field and height_field are not set. ... FAIL

======================================================================
FAIL: test_post_init_signal_unnecessary_connection (test_coverup_django__django-16801.ImageFieldPostInitSignalTest.test_post_init_signal_unnecessary_connection)
Test to check if the post_init signal is connected even when width_field and height_field are not set.
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/./tests/test_coverup_django__django-16801.py", line 27, in test_post_init_signal_unnecessary_connection
    self.assertFalse(image_field_connected, "BUG: post_init signal should not be connected when width_field and height_field are not set.")
AssertionError: True is not false : BUG: post_init signal should not be connected when width_field and height_field are not set.

----------------------------------------------------------------------
Ran 1 test in 0.001s

FAILED (failures=1)
0.60 /testbed/django/db/models/fields/files.py(403):         self.width_field, self.height_field = width_field, height_field
0.60 /testbed/django/db/models/fields/files.py(404):         super().__init__(verbose_name, name, **kwargs)
0.60 /testbed/django/db/models/fields/files.py(237):         self._primary_key_set_explicitly = "primary_key" in kwargs
0.60 /testbed/django/db/models/fields/files.py(239):         self.storage = storage or default_storage
0.60 /testbed/django/db/models/fields/files.py(240):         if callable(self.storage):
0.60 /testbed/django/db/models/fields/files.py(253):         self.upload_to = upload_to
0.60 /testbed/django/db/models/fields/files.py(255):         kwargs.setdefault("max_length", 100)
0.60 /testbed/django/db/models/fields/files.py(256):         super().__init__(verbose_name, name, **kwargs)
0.60 /testbed/django/db/models/fields/files.py(439):         super().contribute_to_class(cls, name, **kwargs)
0.60 /testbed/django/db/models/fields/files.py(321):         super().contribute_to_class(cls, name, **kwargs)
0.60 /testbed/django/db/models/fields/files.py(322):         setattr(cls, self.attname, self.descriptor_class(self))
0.60 /testbed/django/db/models/fields/files.py(444):         if not cls._meta.abstract:
0.60 /testbed/django/db/models/fields/files.py(445):             signals.post_init.connect(self.update_dimension_fields, sender=cls)
+ cat coverage.cover
{"/testbed/django/db/models/fields/files.py": {"0": 0, "1": 1, "2": 1, "4": 1, "5": 1, "6": 1, "7": 1, "8": 1, "9": 1, "10": 1, "11": 1, "12": 1, "13": 1, "14": 1, "17": 2, "151": 2, "224": 2, "359": 2, "382": 2, "390": 2, "18": 1, "25": 1, "32": 1, "39": 1, "45": 1, "51": 1, "54": 1, "57": 1, "59": 2, "60": 2, "64": 2, "65": 2, "69": 2, "70": 2, "76": 1, "85": 1, "91": 1, "101": 1, "103": 1, "121": 1, "123": 2, "124": 2, "128": 1, "133": 1, "146": 1, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "28": 0, "29": 0, "30": 0, "33": 0, "40": 0, "41": 0, "42": 0, "46": 0, "47": 0, "48": 0, "49": 0, "52": 0, "55": 0, "61": 0, "62": 0, "66": 0, "67": 0, "71": 0, "72": 0, "73": 0, "74": 0, "77": 0, "78": 0, "79": 0, "81": 0, "82": 0, "92": 0, "93": 0, "94": 0, "95": 0, "98": 0, "99": 0, "104": 0, "105": 0, "108": 0, "109": 0, "110": 0, "112": 0, "114": 0, "115": 0, "116": 0, "118": 0, "119": 0, "125": 0, "126": 0, "129": 0, "130": 0, "131": 0, "138": 0, "139": 0, "140": 0, "141": 0, "142": 0, "143": 0, "137": 0, "147": 0, "148": 0, "166": 1, "220": 1, "167": 0, "168": 0, "182": 0, "191": 0, "192": 0, "193": 0, "199": 0, "200": 0, "201": 0, "202": 0, "203": 0, "208": 0, "209": 0, "210": 0, "211": 0, "214": 0, "215": 0, "218": 0, "221": 0, "227": 1, "230": 1, "232": 1, "235": 1, "234": 1, "258": 1, "265": 1, "278": 1, "292": 1, "302": 1, "305": 1, "313": 1, "320": 1, "324": 1, "339": 1, "349": 1, "237": 1, "239": 1, "240": 1, "242": 0, "243": 0, "244": 0, "245": 0, "248": 0, "249": 0, "250": 0, "246": 0, "253": 1, "255": 1, "256": 1, "259": 0, "260": 0, "261": 0, "262": 0, "266": 0, "268": 0, "269": 0, "270": 0, "271": 0, "272": 0, "267": 0, "276": 0, "279": 0, "281": 0, "282": 0, "283": 0, "284": 0, "285": 0, "286": 0, "280": 0, "290": 0, "293": 0, "294": 0, "295": 0, "296": 0, "297": 0, "298": 0, "299": 0, "300": 0, "303": 0, "306": 0, "309": 0, "310": 0, "311": 0, "314": 0, "315": 0, "317": 0, "318": 0, "321": 1, "322": 1, "331": 0, "332": 0, "334": 0, "335": 0, "336": 0, "337": 0, "344": 0, "347": 0, "350": 0, "352": 0, "353": 0, "351": 0, "354": 0, "365": 1, "366": 0, "367": 0, "378": 0, "379": 0, "383": 1, "385": 0, "386": 0, "387": 0, "391": 1, "392": 1, "393": 1, "397": 1, "398": 1, "399": 1, "400": 1, "395": 1, "406": 1, "412": 1, "430": 1, "438": 1, "447": 1, "504": 1, "403": 1, "404": 1, "407": 0, "408": 0, "409": 0, "413": 0, "414": 0, "428": 0, "415": 0, "417": 0, "418": 0, "420": 0, "423": 0, "424": 0, "416": 0, "431": 0, "432": 0, "433": 0, "434": 0, "435": 0, "436": 0, "439": 1, "444": 1, "445": 1, "462": 0, "463": 0, "464": 0, "469": 0, "472": 0, "473": 0, "476": 0, "477": 0, "475": 0, "486": 0, "487": 0, "490": 0, "491": 0, "492": 0, "495": 0, "496": 0, "499": 0, "500": 0, "501": 0, "502": 0, "505": 0, "507": 0, "506": 0, "508": 0}}
+ git checkout 3b62d8c83e3e48d2ed61cfa32a61c56d9e030293
Note: switching to '3b62d8c83e3e48d2ed61cfa32a61c56d9e030293'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at 3b62d8c83e Refs #31369 -- Improved hint message in NullBooleanField's deprecation warning.
+ git apply /root/pre_state.patch
error: unrecognized input
