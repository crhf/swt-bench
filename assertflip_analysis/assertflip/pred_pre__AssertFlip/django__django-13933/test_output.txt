+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD 42e8cf47c7ee2db238bf91197ea398126c546741
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
nothing to commit, working tree clean
+ git show
commit 42e8cf47c7ee2db238bf91197ea398126c546741
Author: Simon Charette <charette.s@gmail.com>
Date:   Mon Jan 25 23:32:55 2021 -0500

    Fixed #32369 -- Fixed adding check constraints with pattern lookups and expressions as rhs.
    
    This disables interpolation of constraint creation statements. Since
    Constraint.create_sql interpolates its parameters instead of deferring
    this responsibility to the backend connection it must disable
    connection level parameters interpolation.

diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py
index be33ab3e4d..f879d59fa9 100644
--- a/django/db/backends/base/schema.py
+++ b/django/db/backends/base/schema.py
@@ -360,6 +360,8 @@ class BaseDatabaseSchemaEditor:
             not self.connection.features.supports_expression_indexes
         ):
             return None
+        # Index.create_sql returns interpolated SQL which makes params=None a
+        # necessity to avoid escaping attempts on execution.
         self.execute(index.create_sql(model, self), params=None)
 
     def remove_index(self, model, index):
@@ -375,7 +377,9 @@ class BaseDatabaseSchemaEditor:
         """Add a constraint to a model."""
         sql = constraint.create_sql(model, self)
         if sql:
-            self.execute(sql)
+            # Constraint.create_sql returns interpolated SQL which makes
+            # params=None a necessity to avoid escaping attempts on execution.
+            self.execute(sql, params=None)
 
     def remove_constraint(self, model, constraint):
         """Remove a constraint from a model."""
diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py
index 897808f75b..984aefa23d 100644
--- a/tests/migrations/test_operations.py
+++ b/tests/migrations/test_operations.py
@@ -2145,6 +2145,7 @@ class OperationTests(OperationTestBase):
                 fields=[
                     ('id', models.AutoField(primary_key=True)),
                     ('name', models.CharField(max_length=100)),
+                    ('surname', models.CharField(max_length=100, default='')),
                     ('rebate', models.CharField(max_length=100)),
                 ],
             ),
@@ -2178,6 +2179,19 @@ class OperationTests(OperationTestBase):
             Author.objects.create(name='Albert', rebate='10$')
         author = Author.objects.create(name='Albert', rebate='10%')
         self.assertEqual(Author.objects.get(), author)
+        # Right-hand-side baked "%" literals should not be used for parameters
+        # interpolation.
+        check = ~models.Q(surname__startswith=models.F('name'))
+        constraint = models.CheckConstraint(check=check, name='name_constraint_rhs')
+        operation = migrations.AddConstraint('Author', constraint)
+        from_state = to_state
+        to_state = from_state.clone()
+        operation.state_forwards(app_label, to_state)
+        with connection.schema_editor() as editor:
+            operation.database_forwards(app_label, editor, from_state, to_state)
+        Author = to_state.apps.get_model(app_label, 'Author')
+        with self.assertRaises(IntegrityError), transaction.atomic():
+            Author.objects.create(name='Albert', surname='Alberto')
 
     @skipUnlessDBFeature('supports_table_check_constraints')
     def test_add_or_constraint(self):
+ git diff 42e8cf47c7ee2db238bf91197ea398126c546741
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Requirement already satisfied: asgiref>=3.2.10 in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from Django==4.0) (3.8.1)
Requirement already satisfied: pytz in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from Django==4.0) (2025.2)
Requirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from Django==4.0) (0.5.3)
Requirement already satisfied: typing-extensions>=4 in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from asgiref>=3.2.10->Django==4.0) (4.13.2)
Installing collected packages: Django
  Attempting uninstall: Django
    Found existing installation: Django 4.0
    Uninstalling Django-4.0:
      Successfully uninstalled Django-4.0
  DEPRECATION: Legacy editable install of Django==4.0 from file:///testbed (setup.py develop) is deprecated. pip 25.0 will enforce this behaviour change. A possible replacement is to add a pyproject.toml or enable --use-pep517, and use setuptools >= 64. If the resulting installation is not behaving as expected, try using --config-settings editable_mode=compat. Please consult the setuptools documentation for more information. Discussion can be found at https://github.com/pypa/pip/issues/11457
  Running setup.py develop for Django
Successfully installed Django
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable.It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git apply -v -
Checking patch tests/test_coverup_django__django-13933.py...
Applied patch tests/test_coverup_django__django-13933.py cleanly.
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/forms/models\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-13933
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(django/forms/models\\.py)']
0.29 /testbed/django/forms/models.py(1): """
0.29 /testbed/django/forms/models.py(5): from itertools import chain
0.29 /testbed/django/forms/models.py(7): from django.core.exceptions import (
0.29 /testbed/django/forms/models.py(10): from django.forms.fields import ChoiceField, Field
0.29 /testbed/django/forms/models.py(11): from django.forms.forms import BaseForm, DeclarativeFieldsMetaclass
0.29 /testbed/django/forms/models.py(12): from django.forms.formsets import BaseFormSet, formset_factory
0.29 /testbed/django/forms/models.py(13): from django.forms.utils import ErrorList
0.29 /testbed/django/forms/models.py(14): from django.forms.widgets import (
0.29 /testbed/django/forms/models.py(17): from django.utils.text import capfirst, get_text_list
0.29 /testbed/django/forms/models.py(18): from django.utils.translation import gettext, gettext_lazy as _
0.29 /testbed/django/forms/models.py(20): __all__ = (
0.29 /testbed/django/forms/models.py(27): ALL_FIELDS = '__all__'
0.29 /testbed/django/forms/models.py(30): def construct_instance(form, instance, fields=None, exclude=None):
0.29 /testbed/django/forms/models.py(71): def model_to_dict(instance, fields=None, exclude=None):
0.29 /testbed/django/forms/models.py(96): def apply_limit_choices_to_to_formfield(formfield):
0.29 /testbed/django/forms/models.py(112): def fields_for_model(model, fields=None, exclude=None, widgets=None,
0.29 /testbed/django/forms/models.py(115):                      field_classes=None, *, apply_limit_choices_to=True):
0.29 /testbed/django/forms/models.py(112): def fields_for_model(model, fields=None, exclude=None, widgets=None,
0.29 /testbed/django/forms/models.py(201): class ModelFormOptions:
0.29 /testbed/django/forms/models.py(201): class ModelFormOptions:
0.29 /testbed/django/forms/models.py(202):     def __init__(self, options=None):
0.29 /testbed/django/forms/models.py(214): class ModelFormMetaclass(DeclarativeFieldsMetaclass):
0.29 /testbed/django/forms/models.py(214): class ModelFormMetaclass(DeclarativeFieldsMetaclass):
0.29 /testbed/django/forms/models.py(215):     def __new__(mcs, name, bases, attrs):
0.29 /testbed/django/forms/models.py(286): class BaseModelForm(BaseForm):
0.29 /testbed/django/forms/models.py(286): class BaseModelForm(BaseForm):
0.29 /testbed/django/forms/models.py(287):     def __init__(self, data=None, files=None, auto_id='id_%s', prefix=None,
0.29 /testbed/django/forms/models.py(288):                  initial=None, error_class=ErrorList, label_suffix=None,
0.29 /testbed/django/forms/models.py(289):                  empty_permitted=False, instance=None, use_required_attribute=None,
0.29 /testbed/django/forms/models.py(290):                  renderer=None):
0.29 /testbed/django/forms/models.py(287):     def __init__(self, data=None, files=None, auto_id='id_%s', prefix=None,
0.29 /testbed/django/forms/models.py(316):     def _get_validation_exclusions(self):
0.29 /testbed/django/forms/models.py(357):     def clean(self):
0.29 /testbed/django/forms/models.py(361):     def _update_errors(self, errors):
0.29 /testbed/django/forms/models.py(389):     def _post_clean(self):
0.29 /testbed/django/forms/models.py(419):     def validate_unique(self):
0.29 /testbed/django/forms/models.py(430):     def _save_m2m(self):
0.29 /testbed/django/forms/models.py(451):     def save(self, commit=True):
0.29 /testbed/django/forms/models.py(474):     save.alters_data = True
0.29 /testbed/django/forms/models.py(477): class ModelForm(BaseModelForm, metaclass=ModelFormMetaclass):
0.29 /testbed/django/forms/models.py(477): class ModelForm(BaseModelForm, metaclass=ModelFormMetaclass):
0.29 /testbed/django/forms/models.py(478):     pass
0.29 /testbed/django/forms/models.py(216):         base_formfield_callback = None
0.29 /testbed/django/forms/models.py(217):         for b in bases:
0.29 /testbed/django/forms/models.py(218):             if hasattr(b, 'Meta') and hasattr(b.Meta, 'formfield_callback'):
0.29 /testbed/django/forms/models.py(217):         for b in bases:
0.29 /testbed/django/forms/models.py(222):         formfield_callback = attrs.pop('formfield_callback', base_formfield_callback)
0.29 /testbed/django/forms/models.py(224):         new_class = super().__new__(mcs, name, bases, attrs)
0.29 /testbed/django/forms/models.py(226):         if bases == (BaseModelForm,):
0.29 /testbed/django/forms/models.py(227):             return new_class
0.29 /testbed/django/forms/models.py(481): def modelform_factory(model, form=ModelForm, fields=None, exclude=None,
0.29 /testbed/django/forms/models.py(482):                       formfield_callback=None, widgets=None, localized_fields=None,
0.29 /testbed/django/forms/models.py(483):                       labels=None, help_texts=None, error_messages=None,
0.29 /testbed/django/forms/models.py(484):                       field_classes=None):
0.29 /testbed/django/forms/models.py(481): def modelform_factory(model, form=ModelForm, fields=None, exclude=None,
0.29 /testbed/django/forms/models.py(566): class BaseModelFormSet(BaseFormSet):
0.29 /testbed/django/forms/models.py(566): class BaseModelFormSet(BaseFormSet):
0.29 /testbed/django/forms/models.py(567):     """
0.29 /testbed/django/forms/models.py(570):     model = None
0.29 /testbed/django/forms/models.py(573):     unique_fields = set()
0.29 /testbed/django/forms/models.py(575):     def __init__(self, data=None, files=None, auto_id='id_%s', prefix=None,
0.29 /testbed/django/forms/models.py(576):                  queryset=None, *, initial=None, **kwargs):
0.29 /testbed/django/forms/models.py(575):     def __init__(self, data=None, files=None, auto_id='id_%s', prefix=None,
0.29 /testbed/django/forms/models.py(581):     def initial_form_count(self):
0.29 /testbed/django/forms/models.py(587):     def _existing_object(self, pk):
0.29 /testbed/django/forms/models.py(592):     def _get_to_python(self, field):
0.29 /testbed/django/forms/models.py(601):     def _construct_form(self, i, **kwargs):
0.29 /testbed/django/forms/models.py(635):     def get_queryset(self):
0.29 /testbed/django/forms/models.py(654):     def save_new(self, form, commit=True):
0.29 /testbed/django/forms/models.py(658):     def save_existing(self, form, instance, commit=True):
0.29 /testbed/django/forms/models.py(662):     def delete_existing(self, obj, commit=True):
0.29 /testbed/django/forms/models.py(667):     def save(self, commit=True):
0.29 /testbed/django/forms/models.py(681):     save.alters_data = True
0.29 /testbed/django/forms/models.py(683):     def clean(self):
0.29 /testbed/django/forms/models.py(686):     def validate_unique(self):
0.29 /testbed/django/forms/models.py(759):     def get_unique_error_message(self, unique_check):
0.29 /testbed/django/forms/models.py(769):     def get_date_error_message(self, date_check):
0.29 /testbed/django/forms/models.py(779):     def get_form_error(self):
0.29 /testbed/django/forms/models.py(782):     def save_existing_objects(self, commit=True):
0.29 /testbed/django/forms/models.py(808):     def save_new_objects(self, commit=True):
0.29 /testbed/django/forms/models.py(822):     def add_fields(self, form, index):
0.29 /testbed/django/forms/models.py(866): def modelformset_factory(model, form=ModelForm, formfield_callback=None,
0.29 /testbed/django/forms/models.py(867):                          formset=BaseModelFormSet, extra=1, can_delete=False,
0.29 /testbed/django/forms/models.py(868):                          can_order=False, max_num=None, fields=None, exclude=None,
0.29 /testbed/django/forms/models.py(869):                          widgets=None, validate_max=False, localized_fields=None,
0.29 /testbed/django/forms/models.py(870):                          labels=None, help_texts=None, error_messages=None,
0.29 /testbed/django/forms/models.py(871):                          min_num=None, validate_min=False, field_classes=None,
0.29 /testbed/django/forms/models.py(872):                          absolute_max=None, can_delete_extra=True):
0.29 /testbed/django/forms/models.py(866): def modelformset_factory(model, form=ModelForm, formfield_callback=None,
0.29 /testbed/django/forms/models.py(897): class BaseInlineFormSet(BaseModelFormSet):
0.29 /testbed/django/forms/models.py(897): class BaseInlineFormSet(BaseModelFormSet):
0.29 /testbed/django/forms/models.py(898):     """A formset for child objects related to a parent."""
0.29 /testbed/django/forms/models.py(899):     def __init__(self, data=None, files=None, instance=None,
0.29 /testbed/django/forms/models.py(922):     def initial_form_count(self):
0.29 /testbed/django/forms/models.py(927):     def _construct_form(self, i, **kwargs):
0.29 /testbed/django/forms/models.py(950):     @classmethod
0.29 /testbed/django/forms/models.py(951):     def get_default_prefix(cls):
0.29 /testbed/django/forms/models.py(954):     def save_new(self, form, commit=True):
0.29 /testbed/django/forms/models.py(961):     def add_fields(self, form, index):
0.29 /testbed/django/forms/models.py(992):     def get_unique_error_message(self, unique_check):
0.29 /testbed/django/forms/models.py(997): def _get_foreign_key(parent_model, model, fk_name=None, can_fail=False):
0.29 /testbed/django/forms/models.py(1053): def inlineformset_factory(parent_model, model, form=ModelForm,
0.29 /testbed/django/forms/models.py(1054):                           formset=BaseInlineFormSet, fk_name=None,
0.29 /testbed/django/forms/models.py(1055):                           fields=None, exclude=None, extra=3, can_order=False,
0.29 /testbed/django/forms/models.py(1056):                           can_delete=True, max_num=None, formfield_callback=None,
0.29 /testbed/django/forms/models.py(1057):                           widgets=None, validate_max=False, localized_fields=None,
0.29 /testbed/django/forms/models.py(1058):                           labels=None, help_texts=None, error_messages=None,
0.29 /testbed/django/forms/models.py(1059):                           min_num=None, validate_min=False, field_classes=None,
0.29 /testbed/django/forms/models.py(1060):                           absolute_max=None, can_delete_extra=True):
0.29 /testbed/django/forms/models.py(1053): def inlineformset_factory(parent_model, model, form=ModelForm,
0.29 /testbed/django/forms/models.py(1100): class InlineForeignKeyField(Field):
0.29 /testbed/django/forms/models.py(1100): class InlineForeignKeyField(Field):
0.29 /testbed/django/forms/models.py(1101):     """
0.29 /testbed/django/forms/models.py(1105):     widget = HiddenInput
0.29 /testbed/django/forms/models.py(1107):         'invalid_choice': _('The inline value did not match the parent instance.'),
0.29 /testbed/django/forms/models.py(1106):     default_error_messages = {
0.29 /testbed/django/forms/models.py(1110):     def __init__(self, parent_instance, *args, pk_field=False, to_field=None, **kwargs):
0.29 /testbed/django/forms/models.py(1122):     def clean(self, value):
0.29 /testbed/django/forms/models.py(1137):     def has_changed(self, initial, data):
0.29 /testbed/django/forms/models.py(1141): class ModelChoiceIteratorValue:
0.29 /testbed/django/forms/models.py(1141): class ModelChoiceIteratorValue:
0.29 /testbed/django/forms/models.py(1142):     def __init__(self, value, instance):
0.29 /testbed/django/forms/models.py(1146):     def __str__(self):
0.29 /testbed/django/forms/models.py(1149):     def __eq__(self, other):
0.29 /testbed/django/forms/models.py(1155): class ModelChoiceIterator:
0.29 /testbed/django/forms/models.py(1155): class ModelChoiceIterator:
0.29 /testbed/django/forms/models.py(1156):     def __init__(self, field):
0.29 /testbed/django/forms/models.py(1160):     def __iter__(self):
0.29 /testbed/django/forms/models.py(1170):     def __len__(self):
0.29 /testbed/django/forms/models.py(1176):     def __bool__(self):
0.29 /testbed/django/forms/models.py(1179):     def choice(self, obj):
0.29 /testbed/django/forms/models.py(1186): class ModelChoiceField(ChoiceField):
0.29 /testbed/django/forms/models.py(1186): class ModelChoiceField(ChoiceField):
0.29 /testbed/django/forms/models.py(1187):     """A ChoiceField whose choices are a model QuerySet."""
0.29 /testbed/django/forms/models.py(1191):         'invalid_choice': _('Select a valid choice. That choice is not one of'
0.29 /testbed/django/forms/models.py(1190):     default_error_messages = {
0.29 /testbed/django/forms/models.py(1194):     iterator = ModelChoiceIterator
0.29 /testbed/django/forms/models.py(1196):     def __init__(self, queryset, *, empty_label="---------",
0.29 /testbed/django/forms/models.py(1197):                  required=True, widget=None, label=None, initial=None,
0.29 /testbed/django/forms/models.py(1198):                  help_text='', to_field_name=None, limit_choices_to=None,
0.29 /testbed/django/forms/models.py(1199):                  blank=False, **kwargs):
0.29 /testbed/django/forms/models.py(1196):     def __init__(self, queryset, *, empty_label="---------",
0.29 /testbed/django/forms/models.py(1217):     def get_limit_choices_to(self):
0.29 /testbed/django/forms/models.py(1227):     def __deepcopy__(self, memo):
0.29 /testbed/django/forms/models.py(1234):     def _get_queryset(self):
0.29 /testbed/django/forms/models.py(1237):     def _set_queryset(self, queryset):
0.29 /testbed/django/forms/models.py(1241):     queryset = property(_get_queryset, _set_queryset)
0.29 /testbed/django/forms/models.py(1245):     def label_from_instance(self, obj):
0.29 /testbed/django/forms/models.py(1253):     def _get_choices(self):
0.29 /testbed/django/forms/models.py(1268):     choices = property(_get_choices, ChoiceField._set_choices)
0.29 /testbed/django/forms/models.py(1270):     def prepare_value(self, value):
0.29 /testbed/django/forms/models.py(1278):     def to_python(self, value):
0.29 /testbed/django/forms/models.py(1290):     def validate(self, value):
0.29 /testbed/django/forms/models.py(1293):     def has_changed(self, initial, data):
0.29 /testbed/django/forms/models.py(1301): class ModelMultipleChoiceField(ModelChoiceField):
0.29 /testbed/django/forms/models.py(1301): class ModelMultipleChoiceField(ModelChoiceField):
0.29 /testbed/django/forms/models.py(1302):     """A MultipleChoiceField whose choices are a model QuerySet."""
0.29 /testbed/django/forms/models.py(1303):     widget = SelectMultiple
0.29 /testbed/django/forms/models.py(1304):     hidden_widget = MultipleHiddenInput
0.29 /testbed/django/forms/models.py(1306):         'invalid_list': _('Enter a list of values.'),
0.29 /testbed/django/forms/models.py(1307):         'invalid_choice': _('Select a valid choice. %(value)s is not one of the'
0.29 /testbed/django/forms/models.py(1309):         'invalid_pk_value': _('“%(pk)s” is not a valid value.')
0.29 /testbed/django/forms/models.py(1305):     default_error_messages = {
0.29 /testbed/django/forms/models.py(1312):     def __init__(self, queryset, **kwargs):
0.29 /testbed/django/forms/models.py(1315):     def to_python(self, value):
0.29 /testbed/django/forms/models.py(1320):     def clean(self, value):
0.29 /testbed/django/forms/models.py(1337):     def _check_values(self, value):
0.29 /testbed/django/forms/models.py(1374):     def prepare_value(self, value):
0.29 /testbed/django/forms/models.py(1382):     def has_changed(self, initial, data):
0.29 /testbed/django/forms/models.py(1396): def modelform_defines_fields(form_class):
Testing against Django installed in '/testbed/django'
Skipping setup of unused database(s): default, other.
System check identified no issues (0 silenced).
test_invalid_choice_includes_value_in_error_message (test_coverup_django__django-13933.ModelChoiceFieldTest) ... 0.69 /testbed/django/forms/models.py(1202):         Field.__init__(
0.69 /testbed/django/forms/models.py(1203):             self, required=required, widget=widget, label=label,
0.69 /testbed/django/forms/models.py(1202):         Field.__init__(
0.69 /testbed/django/forms/models.py(1203):             self, required=required, widget=widget, label=label,
0.69 /testbed/django/forms/models.py(1204):             initial=initial, help_text=help_text, **kwargs
0.69 /testbed/django/forms/models.py(1202):         Field.__init__(
0.69 /testbed/django/forms/models.py(1204):             initial=initial, help_text=help_text, **kwargs
0.69 /testbed/django/forms/models.py(1202):         Field.__init__(
0.69 /testbed/django/forms/models.py(1207):             (required and initial is not None) or
0.69 /testbed/django/forms/models.py(1206):         if (
0.69 /testbed/django/forms/models.py(1207):             (required and initial is not None) or
0.69 /testbed/django/forms/models.py(1206):         if (
0.69 /testbed/django/forms/models.py(1208):             (isinstance(self.widget, RadioSelect) and not blank)
0.69 /testbed/django/forms/models.py(1206):         if (
0.69 /testbed/django/forms/models.py(1212):             self.empty_label = empty_label
0.69 /testbed/django/forms/models.py(1213):         self.queryset = queryset
0.69 /testbed/django/forms/models.py(1238):         self._queryset = None if queryset is None else queryset.all()
0.69 /testbed/django/forms/models.py(1239):         self.widget.choices = self.choices
0.69 /testbed/django/forms/models.py(1256):         if hasattr(self, '_choices'):
0.69 /testbed/django/forms/models.py(1266):         return self.iterator(self)
0.69 /testbed/django/forms/models.py(1157):         self.field = field
0.69 /testbed/django/forms/models.py(1158):         self.queryset = field.queryset
0.69 /testbed/django/forms/models.py(1235):         return self._queryset
0.69 /testbed/django/forms/models.py(1214):         self.limit_choices_to = limit_choices_to   # limit the queryset later.
0.69 /testbed/django/forms/models.py(1215):         self.to_field_name = to_field_name
0.69 /testbed/django/forms/models.py(1279):         if value in self.empty_values:
0.69 /testbed/django/forms/models.py(1281):         try:
0.69 /testbed/django/forms/models.py(1282):             key = self.to_field_name or 'pk'
0.69 /testbed/django/forms/models.py(1283):             if isinstance(value, self.queryset.model):
0.69 /testbed/django/forms/models.py(1235):         return self._queryset
0.70 /testbed/django/forms/models.py(1285):             value = self.queryset.get(**{key: value})
0.70 /testbed/django/forms/models.py(1235):         return self._queryset
0.70 /testbed/django/forms/models.py(1286):         except (ValueError, TypeError, self.queryset.model.DoesNotExist):
0.70 /testbed/django/forms/models.py(1235):         return self._queryset
0.70 /testbed/django/forms/models.py(1287):             raise ValidationError(self.error_messages['invalid_choice'], code='invalid_choice')
FAIL

======================================================================
FAIL: test_invalid_choice_includes_value_in_error_message (test_coverup_django__django-13933.ModelChoiceFieldTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/./tests/test_coverup_django__django-13933.py", line 35, in test_invalid_choice_includes_value_in_error_message
    self.assertIn(invalid_choice, e.message % {'value': invalid_choice})
AssertionError: 'invalid_choice_value' not found in 'Select a valid choice. That choice is not one of the available choices.'

----------------------------------------------------------------------
Ran 1 test in 0.001s

FAILED (failures=1)
+ cat coverage.cover
{"/testbed/django/forms/models.py": {"5": 1, "7": 1, "10": 1, "11": 1, "12": 1, "13": 1, "14": 1, "17": 1, "18": 1, "20": 1, "27": 1, "30": 1, "71": 1, "96": 1, "112": 2, "115": 1, "201": 2, "214": 2, "286": 2, "477": 2, "481": 2, "482": 1, "483": 1, "484": 1, "566": 2, "866": 2, "867": 1, "868": 1, "869": 1, "870": 1, "871": 1, "872": 1, "897": 2, "997": 1, "1053": 2, "1054": 1, "1055": 1, "1056": 1, "1057": 1, "1058": 1, "1059": 1, "1060": 1, "1100": 2, "1141": 2, "1155": 2, "1186": 2, "1301": 2, "1396": 1, "35": 0, "36": 0, "38": 0, "39": 0, "40": 0, "41": 0, "42": 0, "43": 0, "44": 0, "45": 0, "46": 0, "47": 0, "51": 0, "50": 0, "52": 0, "53": 0, "55": 0, "58": 0, "59": 0, "61": 0, "63": 0, "64": 0, "66": 0, "83": 0, "84": 0, "85": 0, "86": 0, "87": 0, "88": 0, "89": 0, "90": 0, "91": 0, "92": 0, "93": 0, "98": 0, "99": 0, "100": 0, "101": 0, "102": 0, "103": 0, "104": 0, "105": 0, "107": 0, "108": 0, "146": 0, "147": 0, "148": 0, "150": 0, "151": 0, "152": 0, "153": 0, "154": 0, "155": 0, "156": 0, "157": 0, "158": 0, "160": 0, "161": 0, "162": 0, "163": 0, "164": 0, "166": 0, "167": 0, "168": 0, "169": 0, "170": 0, "171": 0, "172": 0, "173": 0, "174": 0, "175": 0, "176": 0, "177": 0, "178": 0, "180": 0, "181": 0, "182": 0, "183": 0, "185": 0, "187": 0, "188": 0, "189": 0, "190": 0, "192": 0, "193": 0, "194": 0, "195": 0, "198": 0, "196": 0, "202": 1, "203": 0, "204": 0, "205": 0, "206": 0, "207": 0, "208": 0, "209": 0, "210": 0, "211": 0, "215": 1, "216": 1, "217": 2, "218": 1, "219": 0, "220": 0, "222": 1, "224": 1, "226": 1, "227": 1, "229": 0, "234": 0, "235": 0, "236": 0, "237": 0, "239": 0, "240": 0, "241": 0, "238": 0, "243": 0, "245": 0, "247": 0, "248": 0, "249": 0, "251": 0, "254": 0, "257": 0, "259": 0, "260": 0, "261": 0, "262": 0, "264": 0, "268": 0, "269": 0, "270": 0, "271": 0, "272": 0, "273": 0, "274": 0, "277": 0, "279": 0, "281": 0, "283": 0, "287": 2, "288": 1, "289": 1, "290": 1, "316": 1, "357": 1, "361": 1, "389": 1, "419": 1, "430": 1, "451": 1, "474": 1, "291": 0, "292": 0, "293": 0, "294": 0, "296": 0, "297": 0, "299": 0, "300": 0, "302": 0, "303": 0, "307": 0, "308": 0, "309": 0, "310": 0, "311": 0, "313": 0, "314": 0, "321": 0, "324": 0, "325": 0, "328": 0, "329": 0, "334": 0, "335": 0, "336": 0, "337": 0, "341": 0, "342": 0, "351": 0, "352": 0, "353": 0, "354": 0, "355": 0, "358": 0, "359": 0, "364": 0, "368": 0, "369": 0, "371": 0, "373": 0, "374": 0, "375": 0, "376": 0, "377": 0, "378": 0, "380": 0, "382": 0, "383": 0, "384": 0, "385": 0, "387": 0, "390": 0, "392": 0, "401": 0, "402": 0, "403": 0, "405": 0, "406": 0, "407": 0, "408": 0, "410": 0, "411": 0, "412": 0, "413": 0, "416": 0, "417": 0, "424": 0, "425": 0, "426": 0, "427": 0, "428": 0, "434": 0, "435": 0, "436": 0, "437": 0, "441": 0, "442": 0, "443": 0, "444": 0, "445": 0, "446": 0, "447": 0, "448": 0, "449": 0, "457": 0, "458": 0, "459": 0, "460": 0, "461": 0, "464": 0, "466": 0, "467": 0, "471": 0, "472": 0, "478": 1, "520": 0, "521": 0, "522": 0, "523": 0, "524": 0, "525": 0, "526": 0, "527": 0, "528": 0, "529": 0, "530": 0, "531": 0, "532": 0, "533": 0, "534": 0, "535": 0, "536": 0, "540": 0, "541": 0, "542": 0, "543": 0, "545": 0, "549": 0, "550": 0, "548": 0, "553": 0, "554": 0, "555": 0, "556": 0, "561": 0, "570": 1, "573": 1, "575": 2, "576": 1, "581": 1, "587": 1, "592": 1, "601": 1, "635": 1, "654": 1, "658": 1, "662": 1, "667": 1, "681": 1, "683": 1, "686": 1, "759": 1, "769": 1, "779": 1, "782": 1, "808": 1, "822": 1, "577": 0, "578": 0, "579": 0, "583": 0, "584": 0, "585": 0, "588": 0, "589": 0, "590": 0, "597": 0, "598": 0, "599": 0, "602": 0, "603": 0, "604": 0, "605": 0, "606": 0, "607": 0, "608": 0, "611": 0, "613": 0, "614": 0, "615": 0, "616": 0, "619": 0, "621": 0, "623": 0, "624": 0, "626": 0, "627": 0, "628": 0, "629": 0, "630": 0, "631": 0, "632": 0, "633": 0, "636": 0, "637": 0, "638": 0, "640": 0, "645": 0, "646": 0, "651": 0, "652": 0, "656": 0, "660": 0, "664": 0, "665": 0, "672": 0, "673": 0, "675": 0, "678": 0, "679": 0, "676": 0, "677": 0, "684": 0, "688": 0, "689": 0, "690": 0, "691": 0, "692": 0, "693": 0, "694": 0, "695": 0, "696": 0, "698": 0, "700": 0, "701": 0, "702": 0, "704": 0, "706": 0, "709": 0, "713": 0, "715": 0, "717": 0, "720": 0, "721": 0, "723": 0, "724": 0, "725": 0, "727": 0, "729": 0, "730": 0, "731": 0, "732": 0, "734": 0, "735": 0, "737": 0, "738": 0, "739": 0, "743": 0, "744": 0, "746": 0, "749": 0, "750": 0, "752": 0, "754": 0, "756": 0, "757": 0, "705": 0, "710": 0, "712": 0, "760": 0, "761": 0, "762": 0, "765": 0, "766": 0, "770": 0, "771": 0, "774": 0, "775": 0, "776": 0, "773": 0, "780": 0, "783": 0, "784": 0, "785": 0, "786": 0, "788": 0, "789": 0, "790": 0, "791": 0, "796": 0, "797": 0, "798": 0, "799": 0, "800": 0, "801": 0, "802": 0, "803": 0, "804": 0, "805": 0, "806": 0, "809": 0, "810": 0, "811": 0, "812": 0, "815": 0, "816": 0, "817": 0, "818": 0, "819": 0, "820": 0, "824": 0, "825": 0, "832": 0, "839": 0, "840": 0, "844": 0, "846": 0, "847": 0, "848": 0, "850": 0, "851": 0, "852": 0, "853": 0, "854": 0, "856": 0, "857": 0, "858": 0, "859": 0, "861": 0, "862": 0, "863": 0, "834": 0, "835": 0, "836": 0, "833": 0, "874": 0, "875": 0, "876": 0, "877": 0, "878": 0, "882": 0, "883": 0, "884": 0, "885": 0, "886": 0, "887": 0, "888": 0, "889": 0, "890": 0, "891": 0, "892": 0, "899": 1, "922": 1, "927": 1, "950": 1, "951": 1, "954": 1, "961": 1, "992": 1, "901": 0, "902": 0, "904": 0, "905": 0, "906": 0, "907": 0, "908": 0, "909": 0, "911": 0, "912": 0, "913": 0, "917": 0, "918": 0, "919": 0, "920": 0, "923": 0, "924": 0, "925": 0, "928": 0, "929": 0, "930": 0, "932": 0, "933": 0, "936": 0, "938": 0, "939": 0, "940": 0, "943": 0, "944": 0, "945": 0, "946": 0, "947": 0, "948": 0, "952": 0, "958": 0, "959": 0, "962": 0, "963": 0, "964": 0, "965": 0, "969": 0, "971": 0, "970": 0, "977": 0, "978": 0, "982": 0, "983": 0, "984": 0, "986": 0, "987": 0, "988": 0, "990": 0, "993": 0, "994": 0, "1006": 0, "1007": 0, "1008": 0, "1009": 0, "1010": 0, "1011": 0, "1012": 0, "1013": 0, "1014": 0, "1015": 0, "1016": 0, "1018": 0, "1019": 0, "1020": 0, "1024": 0, "1025": 0, "1031": 0, "1032": 0, "1033": 0, "1034": 0, "1035": 0, "1036": 0, "1037": 0, "1038": 0, "1039": 0, "1043": 0, "1044": 0, "1046": 0, "1047": 0, "1045": 0, "1050": 0, "1026": 0, "1027": 0, "1028": 0, "1067": 0, "1069": 0, "1070": 0, "1072": 0, "1073": 0, "1074": 0, "1075": 0, "1076": 0, "1077": 0, "1078": 0, "1079": 0, "1080": 0, "1081": 0, "1082": 0, "1083": 0, "1084": 0, "1085": 0, "1086": 0, "1087": 0, "1088": 0, "1089": 0, "1090": 0, "1091": 0, "1071": 0, "1093": 0, "1094": 0, "1095": 0, "1105": 1, "1107": 1, "1106": 1, "1110": 1, "1122": 1, "1137": 1, "1111": 0, "1112": 0, "1113": 0, "1114": 0, "1115": 0, "1116": 0, "1118": 0, "1119": 0, "1120": 0, "1123": 0, "1124": 0, "1125": 0, "1127": 0, "1129": 0, "1130": 0, "1132": 0, "1133": 0, "1134": 0, "1135": 0, "1138": 0, "1142": 1, "1146": 1, "1149": 1, "1143": 0, "1144": 0, "1147": 0, "1150": 0, "1151": 0, "1152": 0, "1156": 1, "1160": 1, "1170": 1, "1176": 1, "1179": 1, "1157": 1, "1158": 1, "1161": 0, "1162": 0, "1163": 0, "1165": 0, "1166": 0, "1167": 0, "1168": 0, "1174": 0, "1177": 0, "1181": 0, "1182": 0, "1180": 0, "1191": 1, "1190": 1, "1194": 1, "1196": 2, "1197": 1, "1198": 1, "1199": 1, "1217": 1, "1227": 1, "1234": 1, "1237": 1, "1241": 1, "1245": 1, "1253": 1, "1268": 1, "1270": 1, "1278": 1, "1290": 1, "1293": 1, "1202": 4, "1203": 2, "1204": 2, "1207": 2, "1206": 3, "1208": 1, "1210": 0, "1212": 1, "1213": 1, "1214": 1, "1215": 1, "1223": 0, "1224": 0, "1225": 0, "1228": 0, "1230": 0, "1231": 0, "1232": 0, "1235": 4, "1238": 1, "1239": 1, "1251": 0, "1256": 1, "1257": 0, "1266": 1, "1271": 0, "1272": 0, "1273": 0, "1275": 0, "1276": 0, "1279": 1, "1280": 0, "1281": 1, "1282": 1, "1283": 1, "1284": 0, "1285": 1, "1286": 1, "1287": 1, "1288": 0, "1291": 0, "1294": 0, "1295": 0, "1296": 0, "1297": 0, "1298": 0, "1303": 1, "1304": 1, "1306": 1, "1307": 1, "1309": 1, "1305": 1, "1312": 1, "1315": 1, "1320": 1, "1337": 1, "1374": 1, "1382": 1, "1313": 0, "1316": 0, "1317": 0, "1318": 0, "1321": 0, "1322": 0, "1323": 0, "1324": 0, "1325": 0, "1326": 0, "1327": 0, "1328": 0, "1329": 0, "1331": 0, "1334": 0, "1335": 0, "1343": 0, "1346": 0, "1347": 0, "1348": 0, "1350": 0, "1351": 0, "1352": 0, "1354": 0, "1355": 0, "1356": 0, "1357": 0, "1358": 0, "1359": 0, "1360": 0, "1361": 0, "1363": 0, "1364": 0, "1365": 0, "1366": 0, "1367": 0, "1368": 0, "1369": 0, "1370": 0, "1372": 0, "1375": 0, "1376": 0, "1377": 0, "1378": 0, "1379": 0, "1380": 0, "1383": 0, "1384": 0, "1385": 0, "1386": 0, "1387": 0, "1388": 0, "1389": 0, "1390": 0, "1391": 0, "1392": 0, "1393": 0, "1397": 0, "1398": 0, "1399": 0}}
+ git checkout 42e8cf47c7ee2db238bf91197ea398126c546741
Note: switching to '42e8cf47c7ee2db238bf91197ea398126c546741'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at 42e8cf47c7 Fixed #32369 -- Fixed adding check constraints with pattern lookups and expressions as rhs.
+ git apply /root/pre_state.patch
error: unrecognized input
