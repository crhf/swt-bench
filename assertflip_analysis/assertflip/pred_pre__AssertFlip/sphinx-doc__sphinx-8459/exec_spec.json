{"instance_id": "sphinx-doc__sphinx-8459", "repo": "sphinx-doc/sphinx", "version": "3.4", "environment_setup_commit": "3f560cd67239f75840cc7a439ab54d8509c855f6", "patch_list": ["diff --git a/dev/null b/tests/test_coverup_sphinx-doc__sphinx-8459.py\nnew file mode 100644\nindex e69de29..222a05c 100644\n--- /dev/null\n+++ b/tests/test_coverup_sphinx-doc__sphinx-8459.py\n@@ -0,0 +1,54 @@\n+import pytest\n+from unittest.mock import MagicMock\n+from sphinx.ext.autodoc.typehints import merge_typehints\n+from docutils import nodes\n+from sphinx import addnodes\n+\n+def test_autodoc_type_aliases_with_description():\n+    # Mock Sphinx application and environment\n+    class MockSphinx:\n+        def __init__(self):\n+            self.config = MagicMock()\n+            self.config.autodoc_typehints = 'description'\n+            self.config.autodoc_type_aliases = {\n+                'JSONObject': 'types.JSONObject',\n+            }\n+            self.env = type('env', (object,), {'temp_data': {}})()\n+\n+    app = MockSphinx()\n+    app.env.temp_data['annotations'] = {\n+        'types.sphinx_doc': {\n+            'data': 'Dict[str, Any]',\n+            'return': 'Dict[str, Any]'\n+        }\n+    }\n+\n+    # Create a mock content node\n+    contentnode = nodes.Element()\n+    field_list = nodes.field_list()\n+    field_name = nodes.field_name('', 'param data')\n+    field_body = nodes.field_body('', nodes.paragraph('', 'Dict[str, Any]'))\n+    field = nodes.field('', field_name, field_body)\n+    field_list += field\n+    contentnode += field_list\n+\n+    # Mock the contentnode's parent\n+    class MockSignature:\n+        def __init__(self):\n+            self.attributes = {'module': 'types', 'fullname': 'sphinx_doc'}\n+\n+        def __getitem__(self, key):\n+            return self.attributes[key]\n+\n+    contentnode.parent = [MockSignature()]\n+\n+    # Call the function to test\n+    merge_typehints(app, 'py', 'function', contentnode)\n+\n+    # Check for the correct behavior\n+    field_list = [n for n in contentnode if isinstance(n, nodes.field_list)]\n+    assert field_list, \"Field list should be created\"\n+\n+    # Check that the type alias is applied\n+    field_texts = [field[1].astext() for field in field_list[0]]\n+    assert 'types.JSONObject' in field_texts, \"Type alias should be applied correctly\"\n"], "arch": "x86_64", "base_commit": "68aa4fb29e7dfe521749e1e14f750d7afabb3481", "test_directives": ["tests/test_coverup_sphinx-doc__sphinx-8459.py"], "coverage_files": ["sphinx/ext/autodoc/typehints.py"], "env_name": "testbed", "run_id": "assertflip", "patch_id": "pred_pre__AssertFlip", "timeout": 1800, "rm_image": false, "force_rebuild": false, "exec_mode": "unit_test", "reproduction_script_name": null, "compute_coverage": true, "install": {"python": "3.9", "pip_packages": ["tox==4.16.0", "tox-current-env==0.0.11"], "install": "python -m pip install -e .[test]", "pre_install": ["sed -i 's/pytest/pytest -rA/' tox.ini", "sed -i 's/Jinja2>=2.3/Jinja2<3.0/' setup.py", "sed -i 's/sphinxcontrib-applehelp/sphinxcontrib-applehelp<=1.0.7/' setup.py", "sed -i 's/sphinxcontrib-devhelp/sphinxcontrib-devhelp<=1.0.5/' setup.py", "sed -i 's/sphinxcontrib-qthelp/sphinxcontrib-qthelp<=1.0.6/' setup.py", "sed -i 's/alabaster>=0.7,<0.8/alabaster>=0.7,<0.7.12/' setup.py", "sed -i \"s/'packaging',/'packaging', 'markupsafe<=2.0.1',/\" setup.py", "sed -i 's/sphinxcontrib-htmlhelp/sphinxcontrib-htmlhelp<=2.0.4/' setup.py", "sed -i 's/sphinxcontrib-serializinghtml/sphinxcontrib-serializinghtml<=1.1.9/' setup.py"]}, "cache_level": "instance", "test_command": "python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(sphinx/ext/autodoc/typehints\\.py)' -m tox -epy39 -v -- tests/test_coverup_sphinx-doc__sphinx-8459.py", "req_install_commands": ["conda create -n testbed python=3.9  -y"]}