{"instance_id": "astropy__astropy-13977", "repo": "astropy/astropy", "version": "5.1", "environment_setup_commit": "5f74eacbcc7fff707a44d8eb58adaa514cb7dcb5", "patch_list": ["diff --git a/dev/null b/astropy/tests/test_coverup_astropy__astropy-13977.py\nnew file mode 100644\nindex e69de29..a14f3f0 100644\n--- /dev/null\n+++ b/astropy/tests/test_coverup_astropy__astropy-13977.py\n@@ -0,0 +1,34 @@\n+import pytest\n+import numpy as np\n+import astropy.units as u\n+import dataclasses\n+\n+@dataclasses.dataclass\n+class DuckArray(np.lib.mixins.NDArrayOperatorsMixin):\n+    ndarray: u.Quantity\n+\n+    @property\n+    def unit(self) -> u.UnitBase:\n+        return self.ndarray.unit\n+\n+    def __array_ufunc__(self, function, method, *inputs, **kwargs):\n+        inputs = [inp.ndarray if isinstance(inp, DuckArray) else inp for inp in inputs]\n+        for inp in inputs:\n+            if isinstance(inp, np.ndarray):\n+                result = inp.__array_ufunc__(function, method, *inputs, **kwargs)\n+                if result is not NotImplemented:\n+                    return DuckArray(result)\n+        return NotImplemented\n+\n+def test_quantity_duckarray_incompatible_units():\n+    # Create a DuckArray with 1 mm\n+    duck_array = DuckArray(1 * u.mm)\n+    # Create a Quantity with 1 m\n+    quantity = 1 * u.m\n+\n+    # Perform the operation that triggers the bug\n+    result = quantity + duck_array\n+    # Check that the result is a DuckArray with the correct unit conversion\n+    assert isinstance(result, DuckArray)\n+    assert result.ndarray.unit == u.m\n+    assert result.ndarray.value == 1.001  # 1 m + 0.001 m (1 mm in meters)\n"], "arch": "x86_64", "base_commit": "5250b2442501e6c671c6b380536f1edb352602d1", "test_directives": ["astropy/tests/test_coverup_astropy__astropy-13977.py"], "coverage_files": ["astropy/units/quantity.py"], "env_name": "testbed", "run_id": "assertflip", "patch_id": "pred_pre__AssertFlip", "timeout": 1800, "rm_image": false, "force_rebuild": false, "exec_mode": "unit_test", "reproduction_script_name": null, "compute_coverage": true, "install": {"python": "3.9", "install": "python -m pip install -e .[test] --verbose", "pip_packages": ["attrs==23.1.0", "exceptiongroup==1.1.3", "execnet==2.0.2", "hypothesis==6.82.6", "iniconfig==2.0.0", "numpy==1.25.2", "packaging==23.1", "pluggy==1.3.0", "psutil==5.9.5", "pyerfa==2.0.0.3", "pytest-arraydiff==0.5.0", "pytest-astropy-header==0.2.2", "pytest-astropy==0.10.0", "pytest-cov==4.1.0", "pytest-doctestplus==1.0.0", "pytest-filter-subpackage==0.1.2", "pytest-mock==3.11.1", "pytest-openfiles==0.5.0", "pytest-remotedata==0.4.0", "pytest-xdist==3.3.1", "pytest==7.4.0", "PyYAML==6.0.1", "setuptools==68.0.0", "sortedcontainers==2.4.0", "tomli==2.0.1"], "pre_install": ["sed -i 's/requires = \\[\"setuptools\",/requires = \\[\"setuptools==68.0.0\",/' pyproject.toml"]}, "cache_level": "instance", "test_command": "python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(astropy/units/quantity\\.py)' -m pytest --no-header -rA  -p no:cacheprovider astropy/tests/test_coverup_astropy__astropy-13977.py", "req_install_commands": ["conda create -n testbed python=3.9  -y"]}