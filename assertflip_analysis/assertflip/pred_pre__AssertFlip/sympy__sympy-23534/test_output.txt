+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD 832c24fec1046eaa544a4cab4c69e3af3e651759
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch master
nothing to commit, working tree clean
+ git show
commit 832c24fec1046eaa544a4cab4c69e3af3e651759
Merge: 62e46d6d56 cd1fb89186
Author: Francesco Bonazzi <franz.bonazzi@gmail.com>
Date:   Sat May 21 18:00:56 2022 +0200

    Merge pull request #23522 from Upabjojr/matexpr_expand_fix
    
    Fix MatAdd.expand( ) not expanding completely

+ git diff 832c24fec1046eaa544a4cab4c69e3af3e651759
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Requirement already satisfied: mpmath>=0.19 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from sympy==1.11.dev0) (1.3.0)
Installing collected packages: sympy
  Attempting uninstall: sympy
    Found existing installation: sympy 1.11.dev0
    Uninstalling sympy-1.11.dev0:
      Successfully uninstalled sympy-1.11.dev0
  DEPRECATION: Legacy editable install of sympy==1.11.dev0 from file:///testbed (setup.py develop) is deprecated. pip 25.3 will enforce this behaviour change. A possible replacement is to add a pyproject.toml or enable --use-pep517, and use setuptools >= 64. If the resulting installation is not behaving as expected, try using --config-settings editable_mode=compat. Please consult the setuptools documentation for more information. Discussion can be found at https://github.com/pypa/pip/issues/11457
  Running setup.py develop for sympy
Successfully installed sympy
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git apply -v -
<stdin>:13: trailing whitespace.
    
Checking patch sympy/polys/tests/test_coverup_sympy__sympy-23534.py...
Applied patch sympy/polys/tests/test_coverup_sympy__sympy-23534.py cleanly.
warning: 1 line adds whitespace errors.
+ PYTHONWARNINGS=ignore::UserWarning,ignore::SyntaxWarning
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(sympy/core/symbol\.py)' bin/test -C --verbose sympy/polys/tests/test_coverup_sympy__sympy-23534.p
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(sympy/core/symbol\\.py)']
0.23 /testbed/sympy/core/symbol.py(1): from __future__ import annotations
0.23 /testbed/sympy/core/symbol.py(3): from .assumptions import StdFactKB, _assume_defined
0.23 /testbed/sympy/core/symbol.py(4): from .basic import Basic, Atom
0.23 /testbed/sympy/core/symbol.py(5): from .cache import cacheit
0.23 /testbed/sympy/core/symbol.py(6): from .containers import Tuple
0.23 /testbed/sympy/core/symbol.py(7): from .expr import Expr, AtomicExpr
0.23 /testbed/sympy/core/symbol.py(8): from .function import AppliedUndef, FunctionClass
0.23 /testbed/sympy/core/symbol.py(9): from .kind import NumberKind, UndefinedKind
0.23 /testbed/sympy/core/symbol.py(10): from .logic import fuzzy_bool
0.23 /testbed/sympy/core/symbol.py(11): from .singleton import S
0.23 /testbed/sympy/core/symbol.py(12): from .sorting import ordered
0.23 /testbed/sympy/core/symbol.py(13): from .sympify import sympify
0.23 /testbed/sympy/core/symbol.py(14): from sympy.logic.boolalg import Boolean
0.24 /testbed/sympy/core/symbol.py(15): from sympy.utilities.iterables import sift, is_sequence
0.24 /testbed/sympy/core/symbol.py(16): from sympy.utilities.misc import filldedent
0.24 /testbed/sympy/core/symbol.py(18): import string
0.24 /testbed/sympy/core/symbol.py(19): import re as _re
0.24 /testbed/sympy/core/symbol.py(20): import random
0.24 /testbed/sympy/core/symbol.py(21): from itertools import product
0.24 /testbed/sympy/core/symbol.py(22): from typing import Any
0.24 /testbed/sympy/core/symbol.py(25): class Str(Atom):
0.24 /testbed/sympy/core/symbol.py(25): class Str(Atom):
0.24 /testbed/sympy/core/symbol.py(26):     """
0.24 /testbed/sympy/core/symbol.py(37):     __slots__ = ('name',)
0.24 /testbed/sympy/core/symbol.py(39):     def __new__(cls, name, **kwargs):
0.24 /testbed/sympy/core/symbol.py(46):     def __getnewargs__(self):
0.24 /testbed/sympy/core/symbol.py(49):     def _hashable_content(self):
0.24 /testbed/sympy/core/symbol.py(53): def _filter_assumptions(kwargs):
0.24 /testbed/sympy/core/symbol.py(64): def _symbol(s, matching_symbol=None, **assumptions):
0.24 /testbed/sympy/core/symbol.py(130): def uniquely_named_symbol(xname, exprs=(), compare=str, modify=None, **assumptions):
0.24 /testbed/sympy/core/symbol.py(204): _uniquely_named_symbol = uniquely_named_symbol
0.24 /testbed/sympy/core/symbol.py(206): class Symbol(AtomicExpr, Boolean):
0.24 /testbed/sympy/core/symbol.py(206): class Symbol(AtomicExpr, Boolean):
0.24 /testbed/sympy/core/symbol.py(207):     """
0.24 /testbed/sympy/core/symbol.py(225):     is_comparable = False
0.24 /testbed/sympy/core/symbol.py(227):     __slots__ = ('name',)
0.24 /testbed/sympy/core/symbol.py(229):     name: str
0.24 /testbed/sympy/core/symbol.py(231):     is_Symbol = True
0.24 /testbed/sympy/core/symbol.py(232):     is_symbol = True
0.24 /testbed/sympy/core/symbol.py(234):     @property
0.24 /testbed/sympy/core/symbol.py(235):     def kind(self):
0.24 /testbed/sympy/core/symbol.py(240):     @property
0.24 /testbed/sympy/core/symbol.py(241):     def _diff_wrt(self):
0.24 /testbed/sympy/core/symbol.py(254):     @staticmethod
0.24 /testbed/sympy/core/symbol.py(255):     def _sanitize(assumptions, obj=None):
0.24 /testbed/sympy/core/symbol.py(274):     def _merge(self, assumptions):
0.24 /testbed/sympy/core/symbol.py(285):     def __new__(cls, name, **assumptions):
0.24 /testbed/sympy/core/symbol.py(298):     @staticmethod
0.24 /testbed/sympy/core/symbol.py(299):     def __xnew__(cls, name, **assumptions):  # never cached (e.g. dummy)
0.24 /testbed/sympy/core/symbol.py(323):     @staticmethod
0.24 /testbed/sympy/core/symbol.py(324):     @cacheit
0.24 /testbed/sympy/core/symbol.py(325):     def __xnew_cached_(cls, name, **assumptions):  # symbols are always cached
0.24 /testbed/sympy/core/symbol.py(328):     def __getnewargs_ex__(self):
0.24 /testbed/sympy/core/symbol.py(336):     def __setstate__(self, state):
0.24 /testbed/sympy/core/symbol.py(340):     def _hashable_content(self):
0.24 /testbed/sympy/core/symbol.py(344):     def _eval_subs(self, old, new):
0.24 /testbed/sympy/core/symbol.py(349):     def _eval_refine(self, assumptions):
0.24 /testbed/sympy/core/symbol.py(352):     @property
0.24 /testbed/sympy/core/symbol.py(353):     def assumptions0(self):
0.24 /testbed/sympy/core/symbol.py(357):     @cacheit
0.24 /testbed/sympy/core/symbol.py(358):     def sort_key(self, order=None):
0.24 /testbed/sympy/core/symbol.py(361):     def as_dummy(self):
0.24 /testbed/sympy/core/symbol.py(366):     def as_real_imag(self, deep=True, **hints):
0.24 /testbed/sympy/core/symbol.py(373):     def is_constant(self, *wrt, **flags):
0.24 /testbed/sympy/core/symbol.py(378):     @property
0.24 /testbed/sympy/core/symbol.py(379):     def free_symbols(self):
0.24 /testbed/sympy/core/symbol.py(382):     binary_symbols = free_symbols  # in this case, not always
0.24 /testbed/sympy/core/symbol.py(384):     def as_set(self):
0.24 /testbed/sympy/core/symbol.py(388): class Dummy(Symbol):
0.24 /testbed/sympy/core/symbol.py(388): class Dummy(Symbol):
0.24 /testbed/sympy/core/symbol.py(389):     """Dummy symbols are each unique, even if they have the same name:
0.24 /testbed/sympy/core/symbol.py(418):     _count = 0
0.24 /testbed/sympy/core/symbol.py(419):     _prng = random.Random()
0.24 /testbed/sympy/core/symbol.py(420):     _base_dummy_index = _prng.randint(10**6, 9*10**6)
0.24 /testbed/sympy/core/symbol.py(422):     __slots__ = ('dummy_index',)
0.24 /testbed/sympy/core/symbol.py(424):     is_Dummy = True
0.24 /testbed/sympy/core/symbol.py(426):     def __new__(cls, name=None, dummy_index=None, **assumptions):
0.24 /testbed/sympy/core/symbol.py(444):     def __getnewargs_ex__(self):
0.24 /testbed/sympy/core/symbol.py(447):     @cacheit
0.24 /testbed/sympy/core/symbol.py(448):     def sort_key(self, order=None):
0.24 /testbed/sympy/core/symbol.py(452):     def _hashable_content(self):
0.24 /testbed/sympy/core/symbol.py(456): class Wild(Symbol):
0.24 /testbed/sympy/core/symbol.py(456): class Wild(Symbol):
0.24 /testbed/sympy/core/symbol.py(457):     """
0.24 /testbed/sympy/core/symbol.py(545):     is_Wild = True
0.24 /testbed/sympy/core/symbol.py(547):     __slots__ = ('exclude', 'properties')
0.24 /testbed/sympy/core/symbol.py(549):     def __new__(cls, name, exclude=(), properties=(), **assumptions):
0.24 /testbed/sympy/core/symbol.py(555):     def __getnewargs__(self):
0.24 /testbed/sympy/core/symbol.py(558):     @staticmethod
0.24 /testbed/sympy/core/symbol.py(559):     @cacheit
0.24 /testbed/sympy/core/symbol.py(560):     def __xnew__(cls, name, exclude, properties, **assumptions):
0.24 /testbed/sympy/core/symbol.py(566):     def _hashable_content(self):
0.24 /testbed/sympy/core/symbol.py(570):     def matches(self, expr, repl_dict=None, old=False):
0.24 /testbed/sympy/core/symbol.py(583): _range = _re.compile('([0-9]*:[0-9]+|[a-zA-Z]?:[a-zA-Z])')
0.24 /testbed/sympy/core/symbol.py(586): def symbols(names, *, cls=Symbol, **args) -> Any:
0.24 /testbed/sympy/core/symbol.py(799): def var(names, **args):
0.24 /testbed/sympy/core/symbol.py(862): def disambiguate(*iter):
0.25 /testbed/sympy/core/symbol.py(427):         if dummy_index is not None:
0.25 /testbed/sympy/core/symbol.py(430):         if name is None:
0.25 /testbed/sympy/core/symbol.py(431):             name = "Dummy_" + str(Dummy._count)
0.25 /testbed/sympy/core/symbol.py(433):         if dummy_index is None:
0.25 /testbed/sympy/core/symbol.py(434):             dummy_index = Dummy._base_dummy_index + Dummy._count
0.25 /testbed/sympy/core/symbol.py(435):             Dummy._count += 1
0.25 /testbed/sympy/core/symbol.py(437):         cls._sanitize(assumptions, cls)
0.25 /testbed/sympy/core/symbol.py(260):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.25 /testbed/sympy/core/symbol.py(261):         if is_commutative is None:
0.25 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.25 /testbed/sympy/core/symbol.py(268):             v = assumptions[key]
0.25 /testbed/sympy/core/symbol.py(269):             if v is None:
0.25 /testbed/sympy/core/symbol.py(272):             assumptions[key] = bool(v)
0.25 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.25 /testbed/sympy/core/symbol.py(438):         obj = Symbol.__xnew__(cls, name, **assumptions)
0.25 /testbed/sympy/core/symbol.py(300):         if not isinstance(name, str):
0.25 /testbed/sympy/core/symbol.py(303):         obj = Expr.__new__(cls)
0.25 /testbed/sympy/core/symbol.py(304):         obj.name = name
0.25 /testbed/sympy/core/symbol.py(314):         tmp_asm_copy = assumptions.copy()
0.25 /testbed/sympy/core/symbol.py(317):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.25 /testbed/sympy/core/symbol.py(318):         assumptions['commutative'] = is_commutative
0.25 /testbed/sympy/core/symbol.py(319):         obj._assumptions = StdFactKB(assumptions)
0.25 /testbed/sympy/core/symbol.py(320):         obj._assumptions._generator = tmp_asm_copy  # Issue #8873
0.25 /testbed/sympy/core/symbol.py(321):         return obj
0.25 /testbed/sympy/core/symbol.py(440):         obj.dummy_index = dummy_index
0.25 /testbed/sympy/core/symbol.py(442):         return obj
0.48 /testbed/sympy/core/symbol.py(295):         cls._sanitize(assumptions, cls)
0.48 /testbed/sympy/core/symbol.py(260):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.48 /testbed/sympy/core/symbol.py(261):         if is_commutative is None:
0.48 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.48 /testbed/sympy/core/symbol.py(296):         return Symbol.__xnew_cached_(cls, name, **assumptions)
0.48 /testbed/sympy/core/symbol.py(326):         return Symbol.__xnew__(cls, name, **assumptions)
0.48 /testbed/sympy/core/symbol.py(300):         if not isinstance(name, str):
0.48 /testbed/sympy/core/symbol.py(303):         obj = Expr.__new__(cls)
0.48 /testbed/sympy/core/symbol.py(304):         obj.name = name
0.48 /testbed/sympy/core/symbol.py(314):         tmp_asm_copy = assumptions.copy()
0.48 /testbed/sympy/core/symbol.py(317):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.48 /testbed/sympy/core/symbol.py(318):         assumptions['commutative'] = is_commutative
0.48 /testbed/sympy/core/symbol.py(319):         obj._assumptions = StdFactKB(assumptions)
0.48 /testbed/sympy/core/symbol.py(320):         obj._assumptions._generator = tmp_asm_copy  # Issue #8873
0.48 /testbed/sympy/core/symbol.py(321):         return obj
0.50 /testbed/sympy/core/symbol.py(427):         if dummy_index is not None:
0.50 /testbed/sympy/core/symbol.py(430):         if name is None:
0.50 /testbed/sympy/core/symbol.py(433):         if dummy_index is None:
0.50 /testbed/sympy/core/symbol.py(434):             dummy_index = Dummy._base_dummy_index + Dummy._count
0.50 /testbed/sympy/core/symbol.py(435):             Dummy._count += 1
0.50 /testbed/sympy/core/symbol.py(437):         cls._sanitize(assumptions, cls)
0.50 /testbed/sympy/core/symbol.py(260):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.50 /testbed/sympy/core/symbol.py(261):         if is_commutative is None:
0.50 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.50 /testbed/sympy/core/symbol.py(438):         obj = Symbol.__xnew__(cls, name, **assumptions)
0.50 /testbed/sympy/core/symbol.py(300):         if not isinstance(name, str):
0.50 /testbed/sympy/core/symbol.py(303):         obj = Expr.__new__(cls)
0.50 /testbed/sympy/core/symbol.py(304):         obj.name = name
0.50 /testbed/sympy/core/symbol.py(314):         tmp_asm_copy = assumptions.copy()
0.50 /testbed/sympy/core/symbol.py(317):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.50 /testbed/sympy/core/symbol.py(318):         assumptions['commutative'] = is_commutative
0.50 /testbed/sympy/core/symbol.py(319):         obj._assumptions = StdFactKB(assumptions)
0.50 /testbed/sympy/core/symbol.py(320):         obj._assumptions._generator = tmp_asm_copy  # Issue #8873
0.50 /testbed/sympy/core/symbol.py(321):         return obj
0.50 /testbed/sympy/core/symbol.py(440):         obj.dummy_index = dummy_index
0.50 /testbed/sympy/core/symbol.py(442):         return obj
0.58 /testbed/sympy/core/symbol.py(295):         cls._sanitize(assumptions, cls)
0.58 /testbed/sympy/core/symbol.py(260):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.58 /testbed/sympy/core/symbol.py(261):         if is_commutative is None:
0.58 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.58 /testbed/sympy/core/symbol.py(296):         return Symbol.__xnew_cached_(cls, name, **assumptions)
0.58 /testbed/sympy/core/symbol.py(326):         return Symbol.__xnew__(cls, name, **assumptions)
0.58 /testbed/sympy/core/symbol.py(300):         if not isinstance(name, str):
0.58 /testbed/sympy/core/symbol.py(303):         obj = Expr.__new__(cls)
0.58 /testbed/sympy/core/symbol.py(304):         obj.name = name
0.58 /testbed/sympy/core/symbol.py(314):         tmp_asm_copy = assumptions.copy()
0.58 /testbed/sympy/core/symbol.py(317):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.58 /testbed/sympy/core/symbol.py(318):         assumptions['commutative'] = is_commutative
0.58 /testbed/sympy/core/symbol.py(319):         obj._assumptions = StdFactKB(assumptions)
0.58 /testbed/sympy/core/symbol.py(320):         obj._assumptions._generator = tmp_asm_copy  # Issue #8873
0.58 /testbed/sympy/core/symbol.py(321):         return obj
0.59 /testbed/sympy/core/symbol.py(702):     result = []
0.59 /testbed/sympy/core/symbol.py(704):     if isinstance(names, str):
0.59 /testbed/sympy/core/symbol.py(705):         marker = 0
0.59 /testbed/sympy/core/symbol.py(706):         splitters = r'\,', r'\:', r'\ '
0.59 /testbed/sympy/core/symbol.py(707):         literals: list[tuple[str, str]] = []
0.59 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.59 /testbed/sympy/core/symbol.py(709):             if splitter in names:
0.59 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.59 /testbed/sympy/core/symbol.py(709):             if splitter in names:
0.59 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.59 /testbed/sympy/core/symbol.py(709):             if splitter in names:
0.59 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.59 /testbed/sympy/core/symbol.py(716):         def literal(s):
0.59 /testbed/sympy/core/symbol.py(722):         names = names.strip()
0.59 /testbed/sympy/core/symbol.py(723):         as_seq = names.endswith(',')
0.59 /testbed/sympy/core/symbol.py(724):         if as_seq:
0.59 /testbed/sympy/core/symbol.py(726):         if not names:
0.59 /testbed/sympy/core/symbol.py(730):         names = [n.strip() for n in names.split(',')]
0.59 /testbed/sympy/core/symbol.py(730):         names = [n.strip() for n in names.split(',')]
0.59 /testbed/sympy/core/symbol.py(730):         names = [n.strip() for n in names.split(',')]
0.59 /testbed/sympy/core/symbol.py(730):         names = [n.strip() for n in names.split(',')]
0.59 /testbed/sympy/core/symbol.py(731):         if not all(n for n in names):
0.59 /testbed/sympy/core/symbol.py(731):         if not all(n for n in names):
0.59 /testbed/sympy/core/symbol.py(731):         if not all(n for n in names):
0.59 /testbed/sympy/core/symbol.py(731):         if not all(n for n in names):
0.59 /testbed/sympy/core/symbol.py(734):         for i in range(len(names) - 1, -1, -1):
0.59 /testbed/sympy/core/symbol.py(735):             names[i: i + 1] = names[i].split()
0.59 /testbed/sympy/core/symbol.py(734):         for i in range(len(names) - 1, -1, -1):
0.59 /testbed/sympy/core/symbol.py(735):             names[i: i + 1] = names[i].split()
0.59 /testbed/sympy/core/symbol.py(734):         for i in range(len(names) - 1, -1, -1):
0.59 /testbed/sympy/core/symbol.py(737):         seq = args.pop('seq', as_seq)
0.59 /testbed/sympy/core/symbol.py(739):         for name in names:
0.59 /testbed/sympy/core/symbol.py(740):             if not name:
0.59 /testbed/sympy/core/symbol.py(743):             if ':' not in name:
0.59 /testbed/sympy/core/symbol.py(744):                 symbol = cls(literal(name), **args)
0.59 /testbed/sympy/core/symbol.py(717):             if literals:
0.59 /testbed/sympy/core/symbol.py(720):             return s
0.59 /testbed/sympy/core/symbol.py(427):         if dummy_index is not None:
0.59 /testbed/sympy/core/symbol.py(430):         if name is None:
0.59 /testbed/sympy/core/symbol.py(433):         if dummy_index is None:
0.59 /testbed/sympy/core/symbol.py(434):             dummy_index = Dummy._base_dummy_index + Dummy._count
0.59 /testbed/sympy/core/symbol.py(435):             Dummy._count += 1
0.59 /testbed/sympy/core/symbol.py(437):         cls._sanitize(assumptions, cls)
0.59 /testbed/sympy/core/symbol.py(260):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.59 /testbed/sympy/core/symbol.py(261):         if is_commutative is None:
0.59 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.59 /testbed/sympy/core/symbol.py(438):         obj = Symbol.__xnew__(cls, name, **assumptions)
0.59 /testbed/sympy/core/symbol.py(300):         if not isinstance(name, str):
0.59 /testbed/sympy/core/symbol.py(303):         obj = Expr.__new__(cls)
0.59 /testbed/sympy/core/symbol.py(304):         obj.name = name
0.59 /testbed/sympy/core/symbol.py(314):         tmp_asm_copy = assumptions.copy()
0.59 /testbed/sympy/core/symbol.py(317):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.59 /testbed/sympy/core/symbol.py(318):         assumptions['commutative'] = is_commutative
0.59 /testbed/sympy/core/symbol.py(319):         obj._assumptions = StdFactKB(assumptions)
0.59 /testbed/sympy/core/symbol.py(320):         obj._assumptions._generator = tmp_asm_copy  # Issue #8873
0.59 /testbed/sympy/core/symbol.py(321):         return obj
0.59 /testbed/sympy/core/symbol.py(440):         obj.dummy_index = dummy_index
0.59 /testbed/sympy/core/symbol.py(442):         return obj
0.59 /testbed/sympy/core/symbol.py(745):                 result.append(symbol)
0.59 /testbed/sympy/core/symbol.py(746):                 continue
0.59 /testbed/sympy/core/symbol.py(739):         for name in names:
0.59 /testbed/sympy/core/symbol.py(740):             if not name:
0.59 /testbed/sympy/core/symbol.py(743):             if ':' not in name:
0.59 /testbed/sympy/core/symbol.py(744):                 symbol = cls(literal(name), **args)
0.59 /testbed/sympy/core/symbol.py(717):             if literals:
0.59 /testbed/sympy/core/symbol.py(720):             return s
0.59 /testbed/sympy/core/symbol.py(427):         if dummy_index is not None:
0.59 /testbed/sympy/core/symbol.py(430):         if name is None:
0.59 /testbed/sympy/core/symbol.py(433):         if dummy_index is None:
0.59 /testbed/sympy/core/symbol.py(434):             dummy_index = Dummy._base_dummy_index + Dummy._count
0.59 /testbed/sympy/core/symbol.py(435):             Dummy._count += 1
0.59 /testbed/sympy/core/symbol.py(437):         cls._sanitize(assumptions, cls)
0.59 /testbed/sympy/core/symbol.py(260):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.59 /testbed/sympy/core/symbol.py(261):         if is_commutative is None:
0.59 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.59 /testbed/sympy/core/symbol.py(438):         obj = Symbol.__xnew__(cls, name, **assumptions)
0.59 /testbed/sympy/core/symbol.py(300):         if not isinstance(name, str):
0.59 /testbed/sympy/core/symbol.py(303):         obj = Expr.__new__(cls)
0.59 /testbed/sympy/core/symbol.py(304):         obj.name = name
0.59 /testbed/sympy/core/symbol.py(314):         tmp_asm_copy = assumptions.copy()
0.59 /testbed/sympy/core/symbol.py(317):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.59 /testbed/sympy/core/symbol.py(318):         assumptions['commutative'] = is_commutative
0.59 /testbed/sympy/core/symbol.py(319):         obj._assumptions = StdFactKB(assumptions)
0.59 /testbed/sympy/core/symbol.py(320):         obj._assumptions._generator = tmp_asm_copy  # Issue #8873
0.59 /testbed/sympy/core/symbol.py(321):         return obj
0.59 /testbed/sympy/core/symbol.py(440):         obj.dummy_index = dummy_index
0.59 /testbed/sympy/core/symbol.py(442):         return obj
0.59 /testbed/sympy/core/symbol.py(745):                 result.append(symbol)
0.59 /testbed/sympy/core/symbol.py(746):                 continue
0.59 /testbed/sympy/core/symbol.py(739):         for name in names:
0.59 /testbed/sympy/core/symbol.py(786):         if not seq and len(result) <= 1:
0.59 /testbed/sympy/core/symbol.py(791):         return tuple(result)
0.59 /testbed/sympy/core/symbol.py(702):     result = []
0.59 /testbed/sympy/core/symbol.py(704):     if isinstance(names, str):
0.59 /testbed/sympy/core/symbol.py(705):         marker = 0
0.59 /testbed/sympy/core/symbol.py(706):         splitters = r'\,', r'\:', r'\ '
0.59 /testbed/sympy/core/symbol.py(707):         literals: list[tuple[str, str]] = []
0.59 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.59 /testbed/sympy/core/symbol.py(709):             if splitter in names:
0.59 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.59 /testbed/sympy/core/symbol.py(709):             if splitter in names:
0.59 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.59 /testbed/sympy/core/symbol.py(709):             if splitter in names:
0.59 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.59 /testbed/sympy/core/symbol.py(716):         def literal(s):
0.59 /testbed/sympy/core/symbol.py(722):         names = names.strip()
0.59 /testbed/sympy/core/symbol.py(723):         as_seq = names.endswith(',')
0.59 /testbed/sympy/core/symbol.py(724):         if as_seq:
0.59 /testbed/sympy/core/symbol.py(726):         if not names:
0.59 /testbed/sympy/core/symbol.py(730):         names = [n.strip() for n in names.split(',')]
0.59 /testbed/sympy/core/symbol.py(730):         names = [n.strip() for n in names.split(',')]
0.59 /testbed/sympy/core/symbol.py(730):         names = [n.strip() for n in names.split(',')]
0.59 /testbed/sympy/core/symbol.py(730):         names = [n.strip() for n in names.split(',')]
0.59 /testbed/sympy/core/symbol.py(731):         if not all(n for n in names):
0.59 /testbed/sympy/core/symbol.py(731):         if not all(n for n in names):
0.59 /testbed/sympy/core/symbol.py(731):         if not all(n for n in names):
0.59 /testbed/sympy/core/symbol.py(731):         if not all(n for n in names):
0.59 /testbed/sympy/core/symbol.py(734):         for i in range(len(names) - 1, -1, -1):
0.59 /testbed/sympy/core/symbol.py(735):             names[i: i + 1] = names[i].split()
0.59 /testbed/sympy/core/symbol.py(734):         for i in range(len(names) - 1, -1, -1):
0.59 /testbed/sympy/core/symbol.py(735):             names[i: i + 1] = names[i].split()
0.59 /testbed/sympy/core/symbol.py(734):         for i in range(len(names) - 1, -1, -1):
0.59 /testbed/sympy/core/symbol.py(737):         seq = args.pop('seq', as_seq)
0.59 /testbed/sympy/core/symbol.py(739):         for name in names:
0.59 /testbed/sympy/core/symbol.py(740):             if not name:
0.59 /testbed/sympy/core/symbol.py(743):             if ':' not in name:
0.59 /testbed/sympy/core/symbol.py(744):                 symbol = cls(literal(name), **args)
0.59 /testbed/sympy/core/symbol.py(717):             if literals:
0.59 /testbed/sympy/core/symbol.py(720):             return s
0.59 /testbed/sympy/core/symbol.py(427):         if dummy_index is not None:
0.59 /testbed/sympy/core/symbol.py(430):         if name is None:
0.59 /testbed/sympy/core/symbol.py(433):         if dummy_index is None:
0.59 /testbed/sympy/core/symbol.py(434):             dummy_index = Dummy._base_dummy_index + Dummy._count
0.59 /testbed/sympy/core/symbol.py(435):             Dummy._count += 1
0.59 /testbed/sympy/core/symbol.py(437):         cls._sanitize(assumptions, cls)
0.59 /testbed/sympy/core/symbol.py(260):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.59 /testbed/sympy/core/symbol.py(261):         if is_commutative is None:
0.59 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.59 /testbed/sympy/core/symbol.py(438):         obj = Symbol.__xnew__(cls, name, **assumptions)
0.59 /testbed/sympy/core/symbol.py(300):         if not isinstance(name, str):
0.59 /testbed/sympy/core/symbol.py(303):         obj = Expr.__new__(cls)
0.59 /testbed/sympy/core/symbol.py(304):         obj.name = name
0.59 /testbed/sympy/core/symbol.py(314):         tmp_asm_copy = assumptions.copy()
0.59 /testbed/sympy/core/symbol.py(317):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.59 /testbed/sympy/core/symbol.py(318):         assumptions['commutative'] = is_commutative
0.59 /testbed/sympy/core/symbol.py(319):         obj._assumptions = StdFactKB(assumptions)
0.59 /testbed/sympy/core/symbol.py(320):         obj._assumptions._generator = tmp_asm_copy  # Issue #8873
0.59 /testbed/sympy/core/symbol.py(321):         return obj
0.59 /testbed/sympy/core/symbol.py(440):         obj.dummy_index = dummy_index
0.59 /testbed/sympy/core/symbol.py(442):         return obj
0.59 /testbed/sympy/core/symbol.py(745):                 result.append(symbol)
0.59 /testbed/sympy/core/symbol.py(746):                 continue
0.59 /testbed/sympy/core/symbol.py(739):         for name in names:
0.59 /testbed/sympy/core/symbol.py(740):             if not name:
0.59 /testbed/sympy/core/symbol.py(743):             if ':' not in name:
0.59 /testbed/sympy/core/symbol.py(744):                 symbol = cls(literal(name), **args)
0.59 /testbed/sympy/core/symbol.py(717):             if literals:
0.59 /testbed/sympy/core/symbol.py(720):             return s
0.59 /testbed/sympy/core/symbol.py(427):         if dummy_index is not None:
0.59 /testbed/sympy/core/symbol.py(430):         if name is None:
0.59 /testbed/sympy/core/symbol.py(433):         if dummy_index is None:
0.59 /testbed/sympy/core/symbol.py(434):             dummy_index = Dummy._base_dummy_index + Dummy._count
0.59 /testbed/sympy/core/symbol.py(435):             Dummy._count += 1
0.59 /testbed/sympy/core/symbol.py(437):         cls._sanitize(assumptions, cls)
0.59 /testbed/sympy/core/symbol.py(260):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.59 /testbed/sympy/core/symbol.py(261):         if is_commutative is None:
0.59 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.59 /testbed/sympy/core/symbol.py(438):         obj = Symbol.__xnew__(cls, name, **assumptions)
0.59 /testbed/sympy/core/symbol.py(300):         if not isinstance(name, str):
0.59 /testbed/sympy/core/symbol.py(303):         obj = Expr.__new__(cls)
0.59 /testbed/sympy/core/symbol.py(304):         obj.name = name
0.59 /testbed/sympy/core/symbol.py(314):         tmp_asm_copy = assumptions.copy()
0.59 /testbed/sympy/core/symbol.py(317):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.59 /testbed/sympy/core/symbol.py(318):         assumptions['commutative'] = is_commutative
0.59 /testbed/sympy/core/symbol.py(319):         obj._assumptions = StdFactKB(assumptions)
0.59 /testbed/sympy/core/symbol.py(320):         obj._assumptions._generator = tmp_asm_copy  # Issue #8873
0.59 /testbed/sympy/core/symbol.py(321):         return obj
0.59 /testbed/sympy/core/symbol.py(440):         obj.dummy_index = dummy_index
0.59 /testbed/sympy/core/symbol.py(442):         return obj
0.59 /testbed/sympy/core/symbol.py(745):                 result.append(symbol)
0.59 /testbed/sympy/core/symbol.py(746):                 continue
0.59 /testbed/sympy/core/symbol.py(739):         for name in names:
0.59 /testbed/sympy/core/symbol.py(786):         if not seq and len(result) <= 1:
0.59 /testbed/sympy/core/symbol.py(791):         return tuple(result)
0.60 /testbed/sympy/core/symbol.py(427):         if dummy_index is not None:
0.60 /testbed/sympy/core/symbol.py(430):         if name is None:
0.60 /testbed/sympy/core/symbol.py(433):         if dummy_index is None:
0.60 /testbed/sympy/core/symbol.py(434):             dummy_index = Dummy._base_dummy_index + Dummy._count
0.60 /testbed/sympy/core/symbol.py(435):             Dummy._count += 1
0.60 /testbed/sympy/core/symbol.py(437):         cls._sanitize(assumptions, cls)
0.60 /testbed/sympy/core/symbol.py(260):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.60 /testbed/sympy/core/symbol.py(261):         if is_commutative is None:
0.60 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.60 /testbed/sympy/core/symbol.py(438):         obj = Symbol.__xnew__(cls, name, **assumptions)
0.60 /testbed/sympy/core/symbol.py(300):         if not isinstance(name, str):
0.60 /testbed/sympy/core/symbol.py(303):         obj = Expr.__new__(cls)
0.60 /testbed/sympy/core/symbol.py(304):         obj.name = name
0.60 /testbed/sympy/core/symbol.py(314):         tmp_asm_copy = assumptions.copy()
0.60 /testbed/sympy/core/symbol.py(317):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.60 /testbed/sympy/core/symbol.py(318):         assumptions['commutative'] = is_commutative
0.60 /testbed/sympy/core/symbol.py(319):         obj._assumptions = StdFactKB(assumptions)
0.60 /testbed/sympy/core/symbol.py(320):         obj._assumptions._generator = tmp_asm_copy  # Issue #8873
0.60 /testbed/sympy/core/symbol.py(321):         return obj
0.60 /testbed/sympy/core/symbol.py(440):         obj.dummy_index = dummy_index
0.60 /testbed/sympy/core/symbol.py(442):         return obj
0.62 /testbed/sympy/core/symbol.py(427):         if dummy_index is not None:
0.62 /testbed/sympy/core/symbol.py(430):         if name is None:
0.62 /testbed/sympy/core/symbol.py(433):         if dummy_index is None:
0.62 /testbed/sympy/core/symbol.py(434):             dummy_index = Dummy._base_dummy_index + Dummy._count
0.62 /testbed/sympy/core/symbol.py(435):             Dummy._count += 1
0.62 /testbed/sympy/core/symbol.py(437):         cls._sanitize(assumptions, cls)
0.62 /testbed/sympy/core/symbol.py(260):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.62 /testbed/sympy/core/symbol.py(261):         if is_commutative is None:
0.62 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.62 /testbed/sympy/core/symbol.py(438):         obj = Symbol.__xnew__(cls, name, **assumptions)
0.62 /testbed/sympy/core/symbol.py(300):         if not isinstance(name, str):
0.62 /testbed/sympy/core/symbol.py(303):         obj = Expr.__new__(cls)
0.62 /testbed/sympy/core/symbol.py(304):         obj.name = name
0.62 /testbed/sympy/core/symbol.py(314):         tmp_asm_copy = assumptions.copy()
0.62 /testbed/sympy/core/symbol.py(317):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.62 /testbed/sympy/core/symbol.py(318):         assumptions['commutative'] = is_commutative
0.62 /testbed/sympy/core/symbol.py(319):         obj._assumptions = StdFactKB(assumptions)
0.62 /testbed/sympy/core/symbol.py(320):         obj._assumptions._generator = tmp_asm_copy  # Issue #8873
0.62 /testbed/sympy/core/symbol.py(321):         return obj
0.62 /testbed/sympy/core/symbol.py(440):         obj.dummy_index = dummy_index
0.62 /testbed/sympy/core/symbol.py(442):         return obj
0.62 /testbed/sympy/core/symbol.py(427):         if dummy_index is not None:
0.62 /testbed/sympy/core/symbol.py(430):         if name is None:
0.62 /testbed/sympy/core/symbol.py(433):         if dummy_index is None:
0.62 /testbed/sympy/core/symbol.py(434):             dummy_index = Dummy._base_dummy_index + Dummy._count
0.62 /testbed/sympy/core/symbol.py(435):             Dummy._count += 1
0.62 /testbed/sympy/core/symbol.py(437):         cls._sanitize(assumptions, cls)
0.62 /testbed/sympy/core/symbol.py(260):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.62 /testbed/sympy/core/symbol.py(261):         if is_commutative is None:
0.62 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.62 /testbed/sympy/core/symbol.py(438):         obj = Symbol.__xnew__(cls, name, **assumptions)
0.62 /testbed/sympy/core/symbol.py(300):         if not isinstance(name, str):
0.62 /testbed/sympy/core/symbol.py(303):         obj = Expr.__new__(cls)
0.62 /testbed/sympy/core/symbol.py(304):         obj.name = name
0.62 /testbed/sympy/core/symbol.py(314):         tmp_asm_copy = assumptions.copy()
0.62 /testbed/sympy/core/symbol.py(317):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.62 /testbed/sympy/core/symbol.py(318):         assumptions['commutative'] = is_commutative
0.62 /testbed/sympy/core/symbol.py(319):         obj._assumptions = StdFactKB(assumptions)
0.62 /testbed/sympy/core/symbol.py(320):         obj._assumptions._generator = tmp_asm_copy  # Issue #8873
0.62 /testbed/sympy/core/symbol.py(321):         return obj
0.62 /testbed/sympy/core/symbol.py(440):         obj.dummy_index = dummy_index
0.62 /testbed/sympy/core/symbol.py(442):         return obj
0.65 /testbed/sympy/core/symbol.py(702):     result = []
0.65 /testbed/sympy/core/symbol.py(704):     if isinstance(names, str):
0.65 /testbed/sympy/core/symbol.py(705):         marker = 0
0.65 /testbed/sympy/core/symbol.py(706):         splitters = r'\,', r'\:', r'\ '
0.65 /testbed/sympy/core/symbol.py(707):         literals: list[tuple[str, str]] = []
0.65 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.65 /testbed/sympy/core/symbol.py(709):             if splitter in names:
0.65 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.65 /testbed/sympy/core/symbol.py(709):             if splitter in names:
0.65 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.65 /testbed/sympy/core/symbol.py(709):             if splitter in names:
0.65 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.65 /testbed/sympy/core/symbol.py(716):         def literal(s):
0.65 /testbed/sympy/core/symbol.py(722):         names = names.strip()
0.65 /testbed/sympy/core/symbol.py(723):         as_seq = names.endswith(',')
0.65 /testbed/sympy/core/symbol.py(724):         if as_seq:
0.65 /testbed/sympy/core/symbol.py(726):         if not names:
0.65 /testbed/sympy/core/symbol.py(730):         names = [n.strip() for n in names.split(',')]
0.65 /testbed/sympy/core/symbol.py(730):         names = [n.strip() for n in names.split(',')]
0.65 /testbed/sympy/core/symbol.py(730):         names = [n.strip() for n in names.split(',')]
0.65 /testbed/sympy/core/symbol.py(731):         if not all(n for n in names):
0.65 /testbed/sympy/core/symbol.py(731):         if not all(n for n in names):
0.65 /testbed/sympy/core/symbol.py(731):         if not all(n for n in names):
0.65 /testbed/sympy/core/symbol.py(734):         for i in range(len(names) - 1, -1, -1):
0.65 /testbed/sympy/core/symbol.py(735):             names[i: i + 1] = names[i].split()
0.65 /testbed/sympy/core/symbol.py(734):         for i in range(len(names) - 1, -1, -1):
0.65 /testbed/sympy/core/symbol.py(737):         seq = args.pop('seq', as_seq)
0.65 /testbed/sympy/core/symbol.py(739):         for name in names:
0.65 /testbed/sympy/core/symbol.py(740):             if not name:
0.65 /testbed/sympy/core/symbol.py(743):             if ':' not in name:
0.65 /testbed/sympy/core/symbol.py(744):                 symbol = cls(literal(name), **args)
0.65 /testbed/sympy/core/symbol.py(717):             if literals:
0.65 /testbed/sympy/core/symbol.py(720):             return s
0.65 /testbed/sympy/core/symbol.py(295):         cls._sanitize(assumptions, cls)
0.65 /testbed/sympy/core/symbol.py(260):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.65 /testbed/sympy/core/symbol.py(261):         if is_commutative is None:
0.65 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.65 /testbed/sympy/core/symbol.py(296):         return Symbol.__xnew_cached_(cls, name, **assumptions)
0.65 /testbed/sympy/core/symbol.py(326):         return Symbol.__xnew__(cls, name, **assumptions)
0.65 /testbed/sympy/core/symbol.py(300):         if not isinstance(name, str):
0.65 /testbed/sympy/core/symbol.py(303):         obj = Expr.__new__(cls)
0.65 /testbed/sympy/core/symbol.py(304):         obj.name = name
0.65 /testbed/sympy/core/symbol.py(314):         tmp_asm_copy = assumptions.copy()
0.65 /testbed/sympy/core/symbol.py(317):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.65 /testbed/sympy/core/symbol.py(318):         assumptions['commutative'] = is_commutative
0.65 /testbed/sympy/core/symbol.py(319):         obj._assumptions = StdFactKB(assumptions)
0.65 /testbed/sympy/core/symbol.py(320):         obj._assumptions._generator = tmp_asm_copy  # Issue #8873
0.65 /testbed/sympy/core/symbol.py(321):         return obj
0.65 /testbed/sympy/core/symbol.py(745):                 result.append(symbol)
0.65 /testbed/sympy/core/symbol.py(746):                 continue
0.65 /testbed/sympy/core/symbol.py(739):         for name in names:
0.65 /testbed/sympy/core/symbol.py(786):         if not seq and len(result) <= 1:
0.65 /testbed/sympy/core/symbol.py(787):             if not result:
0.65 /testbed/sympy/core/symbol.py(789):             return result[0]
0.75 /testbed/sympy/core/symbol.py(427):         if dummy_index is not None:
0.75 /testbed/sympy/core/symbol.py(430):         if name is None:
0.75 /testbed/sympy/core/symbol.py(433):         if dummy_index is None:
0.75 /testbed/sympy/core/symbol.py(434):             dummy_index = Dummy._base_dummy_index + Dummy._count
0.75 /testbed/sympy/core/symbol.py(435):             Dummy._count += 1
0.75 /testbed/sympy/core/symbol.py(437):         cls._sanitize(assumptions, cls)
0.75 /testbed/sympy/core/symbol.py(260):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.75 /testbed/sympy/core/symbol.py(261):         if is_commutative is None:
0.75 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.75 /testbed/sympy/core/symbol.py(438):         obj = Symbol.__xnew__(cls, name, **assumptions)
0.75 /testbed/sympy/core/symbol.py(300):         if not isinstance(name, str):
0.75 /testbed/sympy/core/symbol.py(303):         obj = Expr.__new__(cls)
0.75 /testbed/sympy/core/symbol.py(304):         obj.name = name
0.75 /testbed/sympy/core/symbol.py(314):         tmp_asm_copy = assumptions.copy()
0.75 /testbed/sympy/core/symbol.py(317):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.75 /testbed/sympy/core/symbol.py(318):         assumptions['commutative'] = is_commutative
0.75 /testbed/sympy/core/symbol.py(319):         obj._assumptions = StdFactKB(assumptions)
0.75 /testbed/sympy/core/symbol.py(320):         obj._assumptions._generator = tmp_asm_copy  # Issue #8873
0.75 /testbed/sympy/core/symbol.py(321):         return obj
0.75 /testbed/sympy/core/symbol.py(440):         obj.dummy_index = dummy_index
0.75 /testbed/sympy/core/symbol.py(442):         return obj
0.75 /testbed/sympy/core/symbol.py(427):         if dummy_index is not None:
0.75 /testbed/sympy/core/symbol.py(430):         if name is None:
0.75 /testbed/sympy/core/symbol.py(433):         if dummy_index is None:
0.75 /testbed/sympy/core/symbol.py(434):             dummy_index = Dummy._base_dummy_index + Dummy._count
0.75 /testbed/sympy/core/symbol.py(435):             Dummy._count += 1
0.75 /testbed/sympy/core/symbol.py(437):         cls._sanitize(assumptions, cls)
0.75 /testbed/sympy/core/symbol.py(260):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.75 /testbed/sympy/core/symbol.py(261):         if is_commutative is None:
0.75 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.75 /testbed/sympy/core/symbol.py(438):         obj = Symbol.__xnew__(cls, name, **assumptions)
0.75 /testbed/sympy/core/symbol.py(300):         if not isinstance(name, str):
0.75 /testbed/sympy/core/symbol.py(303):         obj = Expr.__new__(cls)
0.75 /testbed/sympy/core/symbol.py(304):         obj.name = name
0.75 /testbed/sympy/core/symbol.py(314):         tmp_asm_copy = assumptions.copy()
0.75 /testbed/sympy/core/symbol.py(317):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.75 /testbed/sympy/core/symbol.py(318):         assumptions['commutative'] = is_commutative
0.75 /testbed/sympy/core/symbol.py(319):         obj._assumptions = StdFactKB(assumptions)
0.75 /testbed/sympy/core/symbol.py(320):         obj._assumptions._generator = tmp_asm_copy  # Issue #8873
0.75 /testbed/sympy/core/symbol.py(321):         return obj
0.75 /testbed/sympy/core/symbol.py(440):         obj.dummy_index = dummy_index
0.75 /testbed/sympy/core/symbol.py(442):         return obj
0.82 /testbed/sympy/core/symbol.py(295):         cls._sanitize(assumptions, cls)
0.82 /testbed/sympy/core/symbol.py(260):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.82 /testbed/sympy/core/symbol.py(261):         if is_commutative is None:
0.82 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.82 /testbed/sympy/core/symbol.py(296):         return Symbol.__xnew_cached_(cls, name, **assumptions)
0.82 /testbed/sympy/core/symbol.py(326):         return Symbol.__xnew__(cls, name, **assumptions)
0.82 /testbed/sympy/core/symbol.py(300):         if not isinstance(name, str):
0.82 /testbed/sympy/core/symbol.py(303):         obj = Expr.__new__(cls)
0.82 /testbed/sympy/core/symbol.py(304):         obj.name = name
0.82 /testbed/sympy/core/symbol.py(314):         tmp_asm_copy = assumptions.copy()
0.82 /testbed/sympy/core/symbol.py(317):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.82 /testbed/sympy/core/symbol.py(318):         assumptions['commutative'] = is_commutative
0.82 /testbed/sympy/core/symbol.py(319):         obj._assumptions = StdFactKB(assumptions)
0.82 /testbed/sympy/core/symbol.py(320):         obj._assumptions._generator = tmp_asm_copy  # Issue #8873
0.82 /testbed/sympy/core/symbol.py(321):         return obj
0.86 /testbed/sympy/core/symbol.py(427):         if dummy_index is not None:
0.86 /testbed/sympy/core/symbol.py(430):         if name is None:
0.86 /testbed/sympy/core/symbol.py(433):         if dummy_index is None:
0.86 /testbed/sympy/core/symbol.py(434):             dummy_index = Dummy._base_dummy_index + Dummy._count
0.86 /testbed/sympy/core/symbol.py(435):             Dummy._count += 1
0.86 /testbed/sympy/core/symbol.py(437):         cls._sanitize(assumptions, cls)
0.86 /testbed/sympy/core/symbol.py(260):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.86 /testbed/sympy/core/symbol.py(261):         if is_commutative is None:
0.86 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.86 /testbed/sympy/core/symbol.py(438):         obj = Symbol.__xnew__(cls, name, **assumptions)
0.86 /testbed/sympy/core/symbol.py(300):         if not isinstance(name, str):
0.86 /testbed/sympy/core/symbol.py(303):         obj = Expr.__new__(cls)
0.86 /testbed/sympy/core/symbol.py(304):         obj.name = name
0.86 /testbed/sympy/core/symbol.py(314):         tmp_asm_copy = assumptions.copy()
0.86 /testbed/sympy/core/symbol.py(317):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.86 /testbed/sympy/core/symbol.py(318):         assumptions['commutative'] = is_commutative
0.86 /testbed/sympy/core/symbol.py(319):         obj._assumptions = StdFactKB(assumptions)
0.86 /testbed/sympy/core/symbol.py(320):         obj._assumptions._generator = tmp_asm_copy  # Issue #8873
0.86 /testbed/sympy/core/symbol.py(321):         return obj
0.86 /testbed/sympy/core/symbol.py(440):         obj.dummy_index = dummy_index
0.86 /testbed/sympy/core/symbol.py(442):         return obj
0.86 /testbed/sympy/core/symbol.py(427):         if dummy_index is not None:
0.86 /testbed/sympy/core/symbol.py(430):         if name is None:
0.86 /testbed/sympy/core/symbol.py(433):         if dummy_index is None:
0.86 /testbed/sympy/core/symbol.py(434):             dummy_index = Dummy._base_dummy_index + Dummy._count
0.86 /testbed/sympy/core/symbol.py(435):             Dummy._count += 1
0.86 /testbed/sympy/core/symbol.py(437):         cls._sanitize(assumptions, cls)
0.86 /testbed/sympy/core/symbol.py(260):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.86 /testbed/sympy/core/symbol.py(261):         if is_commutative is None:
0.86 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.86 /testbed/sympy/core/symbol.py(438):         obj = Symbol.__xnew__(cls, name, **assumptions)
0.86 /testbed/sympy/core/symbol.py(300):         if not isinstance(name, str):
0.86 /testbed/sympy/core/symbol.py(303):         obj = Expr.__new__(cls)
0.86 /testbed/sympy/core/symbol.py(304):         obj.name = name
0.86 /testbed/sympy/core/symbol.py(314):         tmp_asm_copy = assumptions.copy()
0.86 /testbed/sympy/core/symbol.py(317):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.86 /testbed/sympy/core/symbol.py(318):         assumptions['commutative'] = is_commutative
0.86 /testbed/sympy/core/symbol.py(319):         obj._assumptions = StdFactKB(assumptions)
0.86 /testbed/sympy/core/symbol.py(320):         obj._assumptions._generator = tmp_asm_copy  # Issue #8873
0.86 /testbed/sympy/core/symbol.py(321):         return obj
0.86 /testbed/sympy/core/symbol.py(440):         obj.dummy_index = dummy_index
0.86 /testbed/sympy/core/symbol.py(442):         return obj
0.87 /testbed/sympy/core/symbol.py(427):         if dummy_index is not None:
0.87 /testbed/sympy/core/symbol.py(430):         if name is None:
0.87 /testbed/sympy/core/symbol.py(433):         if dummy_index is None:
0.87 /testbed/sympy/core/symbol.py(434):             dummy_index = Dummy._base_dummy_index + Dummy._count
0.87 /testbed/sympy/core/symbol.py(435):             Dummy._count += 1
0.87 /testbed/sympy/core/symbol.py(437):         cls._sanitize(assumptions, cls)
0.87 /testbed/sympy/core/symbol.py(260):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.87 /testbed/sympy/core/symbol.py(261):         if is_commutative is None:
0.87 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.87 /testbed/sympy/core/symbol.py(438):         obj = Symbol.__xnew__(cls, name, **assumptions)
0.87 /testbed/sympy/core/symbol.py(300):         if not isinstance(name, str):
0.87 /testbed/sympy/core/symbol.py(303):         obj = Expr.__new__(cls)
0.87 /testbed/sympy/core/symbol.py(304):         obj.name = name
0.87 /testbed/sympy/core/symbol.py(314):         tmp_asm_copy = assumptions.copy()
0.87 /testbed/sympy/core/symbol.py(317):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.87 /testbed/sympy/core/symbol.py(318):         assumptions['commutative'] = is_commutative
0.87 /testbed/sympy/core/symbol.py(319):         obj._assumptions = StdFactKB(assumptions)
0.87 /testbed/sympy/core/symbol.py(320):         obj._assumptions._generator = tmp_asm_copy  # Issue #8873
0.87 /testbed/sympy/core/symbol.py(321):         return obj
0.87 /testbed/sympy/core/symbol.py(440):         obj.dummy_index = dummy_index
0.87 /testbed/sympy/core/symbol.py(442):         return obj
0.87 /testbed/sympy/core/symbol.py(427):         if dummy_index is not None:
0.87 /testbed/sympy/core/symbol.py(430):         if name is None:
0.87 /testbed/sympy/core/symbol.py(433):         if dummy_index is None:
0.87 /testbed/sympy/core/symbol.py(434):             dummy_index = Dummy._base_dummy_index + Dummy._count
0.87 /testbed/sympy/core/symbol.py(435):             Dummy._count += 1
0.87 /testbed/sympy/core/symbol.py(437):         cls._sanitize(assumptions, cls)
0.87 /testbed/sympy/core/symbol.py(260):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.87 /testbed/sympy/core/symbol.py(261):         if is_commutative is None:
0.87 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.87 /testbed/sympy/core/symbol.py(438):         obj = Symbol.__xnew__(cls, name, **assumptions)
0.87 /testbed/sympy/core/symbol.py(300):         if not isinstance(name, str):
0.87 /testbed/sympy/core/symbol.py(303):         obj = Expr.__new__(cls)
0.87 /testbed/sympy/core/symbol.py(304):         obj.name = name
0.87 /testbed/sympy/core/symbol.py(314):         tmp_asm_copy = assumptions.copy()
0.87 /testbed/sympy/core/symbol.py(317):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.87 /testbed/sympy/core/symbol.py(318):         assumptions['commutative'] = is_commutative
0.87 /testbed/sympy/core/symbol.py(319):         obj._assumptions = StdFactKB(assumptions)
0.87 /testbed/sympy/core/symbol.py(320):         obj._assumptions._generator = tmp_asm_copy  # Issue #8873
0.87 /testbed/sympy/core/symbol.py(321):         return obj
0.87 /testbed/sympy/core/symbol.py(440):         obj.dummy_index = dummy_index
0.87 /testbed/sympy/core/symbol.py(442):         return obj
0.87 /testbed/sympy/core/symbol.py(427):         if dummy_index is not None:
0.87 /testbed/sympy/core/symbol.py(430):         if name is None:
0.87 /testbed/sympy/core/symbol.py(433):         if dummy_index is None:
0.87 /testbed/sympy/core/symbol.py(434):             dummy_index = Dummy._base_dummy_index + Dummy._count
0.87 /testbed/sympy/core/symbol.py(435):             Dummy._count += 1
0.87 /testbed/sympy/core/symbol.py(437):         cls._sanitize(assumptions, cls)
0.87 /testbed/sympy/core/symbol.py(260):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.87 /testbed/sympy/core/symbol.py(261):         if is_commutative is None:
0.87 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.87 /testbed/sympy/core/symbol.py(438):         obj = Symbol.__xnew__(cls, name, **assumptions)
0.87 /testbed/sympy/core/symbol.py(300):         if not isinstance(name, str):
0.87 /testbed/sympy/core/symbol.py(303):         obj = Expr.__new__(cls)
0.87 /testbed/sympy/core/symbol.py(304):         obj.name = name
0.87 /testbed/sympy/core/symbol.py(314):         tmp_asm_copy = assumptions.copy()
0.87 /testbed/sympy/core/symbol.py(317):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.87 /testbed/sympy/core/symbol.py(318):         assumptions['commutative'] = is_commutative
0.87 /testbed/sympy/core/symbol.py(319):         obj._assumptions = StdFactKB(assumptions)
0.87 /testbed/sympy/core/symbol.py(320):         obj._assumptions._generator = tmp_asm_copy  # Issue #8873
0.87 /testbed/sympy/core/symbol.py(321):         return obj
0.87 /testbed/sympy/core/symbol.py(440):         obj.dummy_index = dummy_index
0.87 /testbed/sympy/core/symbol.py(442):         return obj
0.87 /testbed/sympy/core/symbol.py(427):         if dummy_index is not None:
0.87 /testbed/sympy/core/symbol.py(430):         if name is None:
0.87 /testbed/sympy/core/symbol.py(433):         if dummy_index is None:
0.87 /testbed/sympy/core/symbol.py(434):             dummy_index = Dummy._base_dummy_index + Dummy._count
0.87 /testbed/sympy/core/symbol.py(435):             Dummy._count += 1
0.87 /testbed/sympy/core/symbol.py(437):         cls._sanitize(assumptions, cls)
0.87 /testbed/sympy/core/symbol.py(260):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.87 /testbed/sympy/core/symbol.py(261):         if is_commutative is None:
0.87 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.87 /testbed/sympy/core/symbol.py(438):         obj = Symbol.__xnew__(cls, name, **assumptions)
0.87 /testbed/sympy/core/symbol.py(300):         if not isinstance(name, str):
0.87 /testbed/sympy/core/symbol.py(303):         obj = Expr.__new__(cls)
0.87 /testbed/sympy/core/symbol.py(304):         obj.name = name
0.87 /testbed/sympy/core/symbol.py(314):         tmp_asm_copy = assumptions.copy()
0.87 /testbed/sympy/core/symbol.py(317):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.87 /testbed/sympy/core/symbol.py(318):         assumptions['commutative'] = is_commutative
0.87 /testbed/sympy/core/symbol.py(319):         obj._assumptions = StdFactKB(assumptions)
0.87 /testbed/sympy/core/symbol.py(320):         obj._assumptions._generator = tmp_asm_copy  # Issue #8873
0.87 /testbed/sympy/core/symbol.py(321):         return obj
0.87 /testbed/sympy/core/symbol.py(440):         obj.dummy_index = dummy_index
0.87 /testbed/sympy/core/symbol.py(442):         return obj
0.90 /testbed/sympy/core/symbol.py(427):         if dummy_index is not None:
0.90 /testbed/sympy/core/symbol.py(430):         if name is None:
0.90 /testbed/sympy/core/symbol.py(433):         if dummy_index is None:
0.90 /testbed/sympy/core/symbol.py(434):             dummy_index = Dummy._base_dummy_index + Dummy._count
0.90 /testbed/sympy/core/symbol.py(435):             Dummy._count += 1
0.90 /testbed/sympy/core/symbol.py(437):         cls._sanitize(assumptions, cls)
0.90 /testbed/sympy/core/symbol.py(260):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.90 /testbed/sympy/core/symbol.py(261):         if is_commutative is None:
0.90 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.90 /testbed/sympy/core/symbol.py(438):         obj = Symbol.__xnew__(cls, name, **assumptions)
0.90 /testbed/sympy/core/symbol.py(300):         if not isinstance(name, str):
0.90 /testbed/sympy/core/symbol.py(303):         obj = Expr.__new__(cls)
0.90 /testbed/sympy/core/symbol.py(304):         obj.name = name
0.90 /testbed/sympy/core/symbol.py(314):         tmp_asm_copy = assumptions.copy()
0.90 /testbed/sympy/core/symbol.py(317):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.90 /testbed/sympy/core/symbol.py(318):         assumptions['commutative'] = is_commutative
0.90 /testbed/sympy/core/symbol.py(319):         obj._assumptions = StdFactKB(assumptions)
0.90 /testbed/sympy/core/symbol.py(320):         obj._assumptions._generator = tmp_asm_copy  # Issue #8873
0.90 /testbed/sympy/core/symbol.py(321):         return obj
0.90 /testbed/sympy/core/symbol.py(440):         obj.dummy_index = dummy_index
0.90 /testbed/sympy/core/symbol.py(442):         return obj
0.90 /testbed/sympy/core/symbol.py(427):         if dummy_index is not None:
0.90 /testbed/sympy/core/symbol.py(430):         if name is None:
0.90 /testbed/sympy/core/symbol.py(433):         if dummy_index is None:
0.90 /testbed/sympy/core/symbol.py(434):             dummy_index = Dummy._base_dummy_index + Dummy._count
0.90 /testbed/sympy/core/symbol.py(435):             Dummy._count += 1
0.90 /testbed/sympy/core/symbol.py(437):         cls._sanitize(assumptions, cls)
0.90 /testbed/sympy/core/symbol.py(260):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.90 /testbed/sympy/core/symbol.py(261):         if is_commutative is None:
0.90 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.90 /testbed/sympy/core/symbol.py(438):         obj = Symbol.__xnew__(cls, name, **assumptions)
0.90 /testbed/sympy/core/symbol.py(300):         if not isinstance(name, str):
0.90 /testbed/sympy/core/symbol.py(303):         obj = Expr.__new__(cls)
0.90 /testbed/sympy/core/symbol.py(304):         obj.name = name
0.90 /testbed/sympy/core/symbol.py(314):         tmp_asm_copy = assumptions.copy()
0.90 /testbed/sympy/core/symbol.py(317):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.90 /testbed/sympy/core/symbol.py(318):         assumptions['commutative'] = is_commutative
0.90 /testbed/sympy/core/symbol.py(319):         obj._assumptions = StdFactKB(assumptions)
0.90 /testbed/sympy/core/symbol.py(320):         obj._assumptions._generator = tmp_asm_copy  # Issue #8873
0.90 /testbed/sympy/core/symbol.py(321):         return obj
0.90 /testbed/sympy/core/symbol.py(440):         obj.dummy_index = dummy_index
0.90 /testbed/sympy/core/symbol.py(442):         return obj
0.90 /testbed/sympy/core/symbol.py(427):         if dummy_index is not None:
0.90 /testbed/sympy/core/symbol.py(430):         if name is None:
0.90 /testbed/sympy/core/symbol.py(433):         if dummy_index is None:
0.90 /testbed/sympy/core/symbol.py(434):             dummy_index = Dummy._base_dummy_index + Dummy._count
0.90 /testbed/sympy/core/symbol.py(435):             Dummy._count += 1
0.90 /testbed/sympy/core/symbol.py(437):         cls._sanitize(assumptions, cls)
0.90 /testbed/sympy/core/symbol.py(260):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.90 /testbed/sympy/core/symbol.py(261):         if is_commutative is None:
0.90 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.90 /testbed/sympy/core/symbol.py(438):         obj = Symbol.__xnew__(cls, name, **assumptions)
0.90 /testbed/sympy/core/symbol.py(300):         if not isinstance(name, str):
0.90 /testbed/sympy/core/symbol.py(303):         obj = Expr.__new__(cls)
0.90 /testbed/sympy/core/symbol.py(304):         obj.name = name
0.90 /testbed/sympy/core/symbol.py(314):         tmp_asm_copy = assumptions.copy()
0.90 /testbed/sympy/core/symbol.py(317):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.90 /testbed/sympy/core/symbol.py(318):         assumptions['commutative'] = is_commutative
0.90 /testbed/sympy/core/symbol.py(319):         obj._assumptions = StdFactKB(assumptions)
0.90 /testbed/sympy/core/symbol.py(320):         obj._assumptions._generator = tmp_asm_copy  # Issue #8873
0.90 /testbed/sympy/core/symbol.py(321):         return obj
0.90 /testbed/sympy/core/symbol.py(440):         obj.dummy_index = dummy_index
0.90 /testbed/sympy/core/symbol.py(442):         return obj
0.95 /testbed/sympy/core/symbol.py(427):         if dummy_index is not None:
0.95 /testbed/sympy/core/symbol.py(430):         if name is None:
0.95 /testbed/sympy/core/symbol.py(433):         if dummy_index is None:
0.95 /testbed/sympy/core/symbol.py(434):             dummy_index = Dummy._base_dummy_index + Dummy._count
0.95 /testbed/sympy/core/symbol.py(435):             Dummy._count += 1
0.95 /testbed/sympy/core/symbol.py(437):         cls._sanitize(assumptions, cls)
0.95 /testbed/sympy/core/symbol.py(260):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.95 /testbed/sympy/core/symbol.py(261):         if is_commutative is None:
0.95 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.95 /testbed/sympy/core/symbol.py(268):             v = assumptions[key]
0.95 /testbed/sympy/core/symbol.py(269):             if v is None:
0.95 /testbed/sympy/core/symbol.py(272):             assumptions[key] = bool(v)
0.95 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.95 /testbed/sympy/core/symbol.py(438):         obj = Symbol.__xnew__(cls, name, **assumptions)
0.95 /testbed/sympy/core/symbol.py(300):         if not isinstance(name, str):
0.95 /testbed/sympy/core/symbol.py(303):         obj = Expr.__new__(cls)
0.95 /testbed/sympy/core/symbol.py(304):         obj.name = name
0.95 /testbed/sympy/core/symbol.py(314):         tmp_asm_copy = assumptions.copy()
0.95 /testbed/sympy/core/symbol.py(317):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.95 /testbed/sympy/core/symbol.py(318):         assumptions['commutative'] = is_commutative
0.95 /testbed/sympy/core/symbol.py(319):         obj._assumptions = StdFactKB(assumptions)
0.95 /testbed/sympy/core/symbol.py(320):         obj._assumptions._generator = tmp_asm_copy  # Issue #8873
0.95 /testbed/sympy/core/symbol.py(321):         return obj
0.95 /testbed/sympy/core/symbol.py(440):         obj.dummy_index = dummy_index
0.95 /testbed/sympy/core/symbol.py(442):         return obj
0.95 /testbed/sympy/core/symbol.py(427):         if dummy_index is not None:
0.95 /testbed/sympy/core/symbol.py(430):         if name is None:
0.95 /testbed/sympy/core/symbol.py(433):         if dummy_index is None:
0.95 /testbed/sympy/core/symbol.py(434):             dummy_index = Dummy._base_dummy_index + Dummy._count
0.95 /testbed/sympy/core/symbol.py(435):             Dummy._count += 1
0.95 /testbed/sympy/core/symbol.py(437):         cls._sanitize(assumptions, cls)
0.95 /testbed/sympy/core/symbol.py(260):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.95 /testbed/sympy/core/symbol.py(261):         if is_commutative is None:
0.95 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.95 /testbed/sympy/core/symbol.py(268):             v = assumptions[key]
0.95 /testbed/sympy/core/symbol.py(269):             if v is None:
0.95 /testbed/sympy/core/symbol.py(272):             assumptions[key] = bool(v)
0.95 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.95 /testbed/sympy/core/symbol.py(438):         obj = Symbol.__xnew__(cls, name, **assumptions)
0.95 /testbed/sympy/core/symbol.py(300):         if not isinstance(name, str):
0.95 /testbed/sympy/core/symbol.py(303):         obj = Expr.__new__(cls)
0.95 /testbed/sympy/core/symbol.py(304):         obj.name = name
0.95 /testbed/sympy/core/symbol.py(314):         tmp_asm_copy = assumptions.copy()
0.95 /testbed/sympy/core/symbol.py(317):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.95 /testbed/sympy/core/symbol.py(318):         assumptions['commutative'] = is_commutative
0.95 /testbed/sympy/core/symbol.py(319):         obj._assumptions = StdFactKB(assumptions)
0.95 /testbed/sympy/core/symbol.py(320):         obj._assumptions._generator = tmp_asm_copy  # Issue #8873
0.95 /testbed/sympy/core/symbol.py(321):         return obj
0.95 /testbed/sympy/core/symbol.py(440):         obj.dummy_index = dummy_index
0.95 /testbed/sympy/core/symbol.py(442):         return obj
0.95 /testbed/sympy/core/symbol.py(702):     result = []
0.95 /testbed/sympy/core/symbol.py(704):     if isinstance(names, str):
0.95 /testbed/sympy/core/symbol.py(705):         marker = 0
0.95 /testbed/sympy/core/symbol.py(706):         splitters = r'\,', r'\:', r'\ '
0.95 /testbed/sympy/core/symbol.py(707):         literals: list[tuple[str, str]] = []
0.95 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.95 /testbed/sympy/core/symbol.py(709):             if splitter in names:
0.95 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.95 /testbed/sympy/core/symbol.py(709):             if splitter in names:
0.95 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.95 /testbed/sympy/core/symbol.py(709):             if splitter in names:
0.95 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.95 /testbed/sympy/core/symbol.py(716):         def literal(s):
0.95 /testbed/sympy/core/symbol.py(722):         names = names.strip()
0.95 /testbed/sympy/core/symbol.py(723):         as_seq = names.endswith(',')
0.95 /testbed/sympy/core/symbol.py(724):         if as_seq:
0.95 /testbed/sympy/core/symbol.py(726):         if not names:
0.95 /testbed/sympy/core/symbol.py(730):         names = [n.strip() for n in names.split(',')]
0.95 /testbed/sympy/core/symbol.py(730):         names = [n.strip() for n in names.split(',')]
0.95 /testbed/sympy/core/symbol.py(730):         names = [n.strip() for n in names.split(',')]
0.95 /testbed/sympy/core/symbol.py(731):         if not all(n for n in names):
0.95 /testbed/sympy/core/symbol.py(731):         if not all(n for n in names):
0.95 /testbed/sympy/core/symbol.py(731):         if not all(n for n in names):
0.95 /testbed/sympy/core/symbol.py(734):         for i in range(len(names) - 1, -1, -1):
0.95 /testbed/sympy/core/symbol.py(735):             names[i: i + 1] = names[i].split()
0.95 /testbed/sympy/core/symbol.py(734):         for i in range(len(names) - 1, -1, -1):
0.95 /testbed/sympy/core/symbol.py(737):         seq = args.pop('seq', as_seq)
0.95 /testbed/sympy/core/symbol.py(739):         for name in names:
0.95 /testbed/sympy/core/symbol.py(740):             if not name:
0.95 /testbed/sympy/core/symbol.py(743):             if ':' not in name:
0.95 /testbed/sympy/core/symbol.py(744):                 symbol = cls(literal(name), **args)
0.95 /testbed/sympy/core/symbol.py(717):             if literals:
0.95 /testbed/sympy/core/symbol.py(720):             return s
0.95 /testbed/sympy/core/symbol.py(295):         cls._sanitize(assumptions, cls)
0.95 /testbed/sympy/core/symbol.py(260):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.95 /testbed/sympy/core/symbol.py(261):         if is_commutative is None:
0.95 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.95 /testbed/sympy/core/symbol.py(268):             v = assumptions[key]
0.95 /testbed/sympy/core/symbol.py(269):             if v is None:
0.95 /testbed/sympy/core/symbol.py(272):             assumptions[key] = bool(v)
0.95 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.95 /testbed/sympy/core/symbol.py(296):         return Symbol.__xnew_cached_(cls, name, **assumptions)
0.95 /testbed/sympy/core/symbol.py(326):         return Symbol.__xnew__(cls, name, **assumptions)
0.95 /testbed/sympy/core/symbol.py(300):         if not isinstance(name, str):
0.95 /testbed/sympy/core/symbol.py(303):         obj = Expr.__new__(cls)
0.95 /testbed/sympy/core/symbol.py(304):         obj.name = name
0.95 /testbed/sympy/core/symbol.py(314):         tmp_asm_copy = assumptions.copy()
0.95 /testbed/sympy/core/symbol.py(317):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.95 /testbed/sympy/core/symbol.py(318):         assumptions['commutative'] = is_commutative
0.95 /testbed/sympy/core/symbol.py(319):         obj._assumptions = StdFactKB(assumptions)
0.95 /testbed/sympy/core/symbol.py(320):         obj._assumptions._generator = tmp_asm_copy  # Issue #8873
0.95 /testbed/sympy/core/symbol.py(321):         return obj
0.95 /testbed/sympy/core/symbol.py(745):                 result.append(symbol)
0.95 /testbed/sympy/core/symbol.py(746):                 continue
0.95 /testbed/sympy/core/symbol.py(739):         for name in names:
0.95 /testbed/sympy/core/symbol.py(786):         if not seq and len(result) <= 1:
0.95 /testbed/sympy/core/symbol.py(787):             if not result:
0.95 /testbed/sympy/core/symbol.py(789):             return result[0]
0.95 /testbed/sympy/core/symbol.py(702):     result = []
0.95 /testbed/sympy/core/symbol.py(704):     if isinstance(names, str):
0.95 /testbed/sympy/core/symbol.py(705):         marker = 0
0.95 /testbed/sympy/core/symbol.py(706):         splitters = r'\,', r'\:', r'\ '
0.95 /testbed/sympy/core/symbol.py(707):         literals: list[tuple[str, str]] = []
0.95 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.95 /testbed/sympy/core/symbol.py(709):             if splitter in names:
0.95 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.95 /testbed/sympy/core/symbol.py(709):             if splitter in names:
0.95 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.95 /testbed/sympy/core/symbol.py(709):             if splitter in names:
0.95 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.95 /testbed/sympy/core/symbol.py(716):         def literal(s):
0.95 /testbed/sympy/core/symbol.py(722):         names = names.strip()
0.95 /testbed/sympy/core/symbol.py(723):         as_seq = names.endswith(',')
0.95 /testbed/sympy/core/symbol.py(724):         if as_seq:
0.95 /testbed/sympy/core/symbol.py(726):         if not names:
0.95 /testbed/sympy/core/symbol.py(730):         names = [n.strip() for n in names.split(',')]
0.95 /testbed/sympy/core/symbol.py(730):         names = [n.strip() for n in names.split(',')]
0.95 /testbed/sympy/core/symbol.py(730):         names = [n.strip() for n in names.split(',')]
0.95 /testbed/sympy/core/symbol.py(731):         if not all(n for n in names):
0.95 /testbed/sympy/core/symbol.py(731):         if not all(n for n in names):
0.95 /testbed/sympy/core/symbol.py(731):         if not all(n for n in names):
0.95 /testbed/sympy/core/symbol.py(734):         for i in range(len(names) - 1, -1, -1):
0.95 /testbed/sympy/core/symbol.py(735):             names[i: i + 1] = names[i].split()
0.95 /testbed/sympy/core/symbol.py(734):         for i in range(len(names) - 1, -1, -1):
0.95 /testbed/sympy/core/symbol.py(737):         seq = args.pop('seq', as_seq)
0.95 /testbed/sympy/core/symbol.py(739):         for name in names:
0.95 /testbed/sympy/core/symbol.py(740):             if not name:
0.95 /testbed/sympy/core/symbol.py(743):             if ':' not in name:
0.95 /testbed/sympy/core/symbol.py(744):                 symbol = cls(literal(name), **args)
0.95 /testbed/sympy/core/symbol.py(717):             if literals:
0.95 /testbed/sympy/core/symbol.py(720):             return s
0.95 /testbed/sympy/core/symbol.py(295):         cls._sanitize(assumptions, cls)
0.95 /testbed/sympy/core/symbol.py(260):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.95 /testbed/sympy/core/symbol.py(261):         if is_commutative is None:
0.95 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.95 /testbed/sympy/core/symbol.py(268):             v = assumptions[key]
0.95 /testbed/sympy/core/symbol.py(269):             if v is None:
0.95 /testbed/sympy/core/symbol.py(272):             assumptions[key] = bool(v)
0.95 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.95 /testbed/sympy/core/symbol.py(296):         return Symbol.__xnew_cached_(cls, name, **assumptions)
0.95 /testbed/sympy/core/symbol.py(326):         return Symbol.__xnew__(cls, name, **assumptions)
0.95 /testbed/sympy/core/symbol.py(300):         if not isinstance(name, str):
0.95 /testbed/sympy/core/symbol.py(303):         obj = Expr.__new__(cls)
0.95 /testbed/sympy/core/symbol.py(304):         obj.name = name
0.95 /testbed/sympy/core/symbol.py(314):         tmp_asm_copy = assumptions.copy()
0.95 /testbed/sympy/core/symbol.py(317):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.95 /testbed/sympy/core/symbol.py(318):         assumptions['commutative'] = is_commutative
0.95 /testbed/sympy/core/symbol.py(319):         obj._assumptions = StdFactKB(assumptions)
0.95 /testbed/sympy/core/symbol.py(320):         obj._assumptions._generator = tmp_asm_copy  # Issue #8873
0.95 /testbed/sympy/core/symbol.py(321):         return obj
0.95 /testbed/sympy/core/symbol.py(745):                 result.append(symbol)
0.95 /testbed/sympy/core/symbol.py(746):                 continue
0.95 /testbed/sympy/core/symbol.py(739):         for name in names:
0.95 /testbed/sympy/core/symbol.py(786):         if not seq and len(result) <= 1:
0.95 /testbed/sympy/core/symbol.py(787):             if not result:
0.95 /testbed/sympy/core/symbol.py(789):             return result[0]
0.95 /testbed/sympy/core/symbol.py(702):     result = []
0.95 /testbed/sympy/core/symbol.py(704):     if isinstance(names, str):
0.95 /testbed/sympy/core/symbol.py(705):         marker = 0
0.95 /testbed/sympy/core/symbol.py(706):         splitters = r'\,', r'\:', r'\ '
0.95 /testbed/sympy/core/symbol.py(707):         literals: list[tuple[str, str]] = []
0.95 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.95 /testbed/sympy/core/symbol.py(709):             if splitter in names:
0.95 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.95 /testbed/sympy/core/symbol.py(709):             if splitter in names:
0.95 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.95 /testbed/sympy/core/symbol.py(709):             if splitter in names:
0.95 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.95 /testbed/sympy/core/symbol.py(716):         def literal(s):
0.95 /testbed/sympy/core/symbol.py(722):         names = names.strip()
0.95 /testbed/sympy/core/symbol.py(723):         as_seq = names.endswith(',')
0.95 /testbed/sympy/core/symbol.py(724):         if as_seq:
0.95 /testbed/sympy/core/symbol.py(726):         if not names:
0.95 /testbed/sympy/core/symbol.py(730):         names = [n.strip() for n in names.split(',')]
0.95 /testbed/sympy/core/symbol.py(730):         names = [n.strip() for n in names.split(',')]
0.95 /testbed/sympy/core/symbol.py(730):         names = [n.strip() for n in names.split(',')]
0.95 /testbed/sympy/core/symbol.py(731):         if not all(n for n in names):
0.95 /testbed/sympy/core/symbol.py(731):         if not all(n for n in names):
0.95 /testbed/sympy/core/symbol.py(731):         if not all(n for n in names):
0.95 /testbed/sympy/core/symbol.py(734):         for i in range(len(names) - 1, -1, -1):
0.95 /testbed/sympy/core/symbol.py(735):             names[i: i + 1] = names[i].split()
0.95 /testbed/sympy/core/symbol.py(734):         for i in range(len(names) - 1, -1, -1):
0.95 /testbed/sympy/core/symbol.py(737):         seq = args.pop('seq', as_seq)
0.95 /testbed/sympy/core/symbol.py(739):         for name in names:
0.95 /testbed/sympy/core/symbol.py(740):             if not name:
0.95 /testbed/sympy/core/symbol.py(743):             if ':' not in name:
0.95 /testbed/sympy/core/symbol.py(744):                 symbol = cls(literal(name), **args)
0.95 /testbed/sympy/core/symbol.py(717):             if literals:
0.95 /testbed/sympy/core/symbol.py(720):             return s
0.95 /testbed/sympy/core/symbol.py(295):         cls._sanitize(assumptions, cls)
0.95 /testbed/sympy/core/symbol.py(260):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.95 /testbed/sympy/core/symbol.py(261):         if is_commutative is None:
0.95 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.95 /testbed/sympy/core/symbol.py(268):             v = assumptions[key]
0.95 /testbed/sympy/core/symbol.py(269):             if v is None:
0.95 /testbed/sympy/core/symbol.py(272):             assumptions[key] = bool(v)
0.95 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.95 /testbed/sympy/core/symbol.py(296):         return Symbol.__xnew_cached_(cls, name, **assumptions)
0.95 /testbed/sympy/core/symbol.py(326):         return Symbol.__xnew__(cls, name, **assumptions)
0.95 /testbed/sympy/core/symbol.py(300):         if not isinstance(name, str):
0.95 /testbed/sympy/core/symbol.py(303):         obj = Expr.__new__(cls)
0.95 /testbed/sympy/core/symbol.py(304):         obj.name = name
0.95 /testbed/sympy/core/symbol.py(314):         tmp_asm_copy = assumptions.copy()
0.95 /testbed/sympy/core/symbol.py(317):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.95 /testbed/sympy/core/symbol.py(318):         assumptions['commutative'] = is_commutative
0.95 /testbed/sympy/core/symbol.py(319):         obj._assumptions = StdFactKB(assumptions)
0.95 /testbed/sympy/core/symbol.py(320):         obj._assumptions._generator = tmp_asm_copy  # Issue #8873
0.95 /testbed/sympy/core/symbol.py(321):         return obj
0.95 /testbed/sympy/core/symbol.py(745):                 result.append(symbol)
0.95 /testbed/sympy/core/symbol.py(746):                 continue
0.95 /testbed/sympy/core/symbol.py(739):         for name in names:
0.95 /testbed/sympy/core/symbol.py(786):         if not seq and len(result) <= 1:
0.95 /testbed/sympy/core/symbol.py(787):             if not result:
0.95 /testbed/sympy/core/symbol.py(789):             return result[0]
0.95 /testbed/sympy/core/symbol.py(702):     result = []
0.95 /testbed/sympy/core/symbol.py(704):     if isinstance(names, str):
0.95 /testbed/sympy/core/symbol.py(705):         marker = 0
0.95 /testbed/sympy/core/symbol.py(706):         splitters = r'\,', r'\:', r'\ '
0.95 /testbed/sympy/core/symbol.py(707):         literals: list[tuple[str, str]] = []
0.95 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.95 /testbed/sympy/core/symbol.py(709):             if splitter in names:
0.95 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.95 /testbed/sympy/core/symbol.py(709):             if splitter in names:
0.95 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.95 /testbed/sympy/core/symbol.py(709):             if splitter in names:
0.95 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.95 /testbed/sympy/core/symbol.py(716):         def literal(s):
0.95 /testbed/sympy/core/symbol.py(722):         names = names.strip()
0.95 /testbed/sympy/core/symbol.py(723):         as_seq = names.endswith(',')
0.95 /testbed/sympy/core/symbol.py(724):         if as_seq:
0.95 /testbed/sympy/core/symbol.py(726):         if not names:
0.95 /testbed/sympy/core/symbol.py(730):         names = [n.strip() for n in names.split(',')]
0.95 /testbed/sympy/core/symbol.py(730):         names = [n.strip() for n in names.split(',')]
0.95 /testbed/sympy/core/symbol.py(730):         names = [n.strip() for n in names.split(',')]
0.95 /testbed/sympy/core/symbol.py(731):         if not all(n for n in names):
0.95 /testbed/sympy/core/symbol.py(731):         if not all(n for n in names):
0.95 /testbed/sympy/core/symbol.py(731):         if not all(n for n in names):
0.95 /testbed/sympy/core/symbol.py(734):         for i in range(len(names) - 1, -1, -1):
0.95 /testbed/sympy/core/symbol.py(735):             names[i: i + 1] = names[i].split()
0.95 /testbed/sympy/core/symbol.py(734):         for i in range(len(names) - 1, -1, -1):
0.95 /testbed/sympy/core/symbol.py(737):         seq = args.pop('seq', as_seq)
0.95 /testbed/sympy/core/symbol.py(739):         for name in names:
0.95 /testbed/sympy/core/symbol.py(740):             if not name:
0.95 /testbed/sympy/core/symbol.py(743):             if ':' not in name:
0.95 /testbed/sympy/core/symbol.py(744):                 symbol = cls(literal(name), **args)
0.95 /testbed/sympy/core/symbol.py(717):             if literals:
0.95 /testbed/sympy/core/symbol.py(720):             return s
0.95 /testbed/sympy/core/symbol.py(295):         cls._sanitize(assumptions, cls)
0.95 /testbed/sympy/core/symbol.py(260):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.95 /testbed/sympy/core/symbol.py(261):         if is_commutative is None:
0.95 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.95 /testbed/sympy/core/symbol.py(268):             v = assumptions[key]
0.95 /testbed/sympy/core/symbol.py(269):             if v is None:
0.95 /testbed/sympy/core/symbol.py(272):             assumptions[key] = bool(v)
0.95 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.95 /testbed/sympy/core/symbol.py(296):         return Symbol.__xnew_cached_(cls, name, **assumptions)
0.95 /testbed/sympy/core/symbol.py(326):         return Symbol.__xnew__(cls, name, **assumptions)
0.95 /testbed/sympy/core/symbol.py(300):         if not isinstance(name, str):
0.95 /testbed/sympy/core/symbol.py(303):         obj = Expr.__new__(cls)
0.95 /testbed/sympy/core/symbol.py(304):         obj.name = name
0.95 /testbed/sympy/core/symbol.py(314):         tmp_asm_copy = assumptions.copy()
0.95 /testbed/sympy/core/symbol.py(317):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.95 /testbed/sympy/core/symbol.py(318):         assumptions['commutative'] = is_commutative
0.95 /testbed/sympy/core/symbol.py(319):         obj._assumptions = StdFactKB(assumptions)
0.95 /testbed/sympy/core/symbol.py(320):         obj._assumptions._generator = tmp_asm_copy  # Issue #8873
0.95 /testbed/sympy/core/symbol.py(321):         return obj
0.95 /testbed/sympy/core/symbol.py(745):                 result.append(symbol)
0.95 /testbed/sympy/core/symbol.py(746):                 continue
0.95 /testbed/sympy/core/symbol.py(739):         for name in names:
0.95 /testbed/sympy/core/symbol.py(786):         if not seq and len(result) <= 1:
0.95 /testbed/sympy/core/symbol.py(787):             if not result:
0.95 /testbed/sympy/core/symbol.py(789):             return result[0]
0.95 /testbed/sympy/core/symbol.py(702):     result = []
0.95 /testbed/sympy/core/symbol.py(704):     if isinstance(names, str):
0.95 /testbed/sympy/core/symbol.py(705):         marker = 0
0.95 /testbed/sympy/core/symbol.py(706):         splitters = r'\,', r'\:', r'\ '
0.95 /testbed/sympy/core/symbol.py(707):         literals: list[tuple[str, str]] = []
0.95 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.95 /testbed/sympy/core/symbol.py(709):             if splitter in names:
0.95 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.95 /testbed/sympy/core/symbol.py(709):             if splitter in names:
0.95 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.95 /testbed/sympy/core/symbol.py(709):             if splitter in names:
0.95 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.95 /testbed/sympy/core/symbol.py(716):         def literal(s):
0.95 /testbed/sympy/core/symbol.py(722):         names = names.strip()
0.95 /testbed/sympy/core/symbol.py(723):         as_seq = names.endswith(',')
0.95 /testbed/sympy/core/symbol.py(724):         if as_seq:
0.95 /testbed/sympy/core/symbol.py(726):         if not names:
0.95 /testbed/sympy/core/symbol.py(730):         names = [n.strip() for n in names.split(',')]
0.95 /testbed/sympy/core/symbol.py(730):         names = [n.strip() for n in names.split(',')]
0.95 /testbed/sympy/core/symbol.py(730):         names = [n.strip() for n in names.split(',')]
0.95 /testbed/sympy/core/symbol.py(731):         if not all(n for n in names):
0.95 /testbed/sympy/core/symbol.py(731):         if not all(n for n in names):
0.95 /testbed/sympy/core/symbol.py(731):         if not all(n for n in names):
0.95 /testbed/sympy/core/symbol.py(734):         for i in range(len(names) - 1, -1, -1):
0.95 /testbed/sympy/core/symbol.py(735):             names[i: i + 1] = names[i].split()
0.95 /testbed/sympy/core/symbol.py(734):         for i in range(len(names) - 1, -1, -1):
0.95 /testbed/sympy/core/symbol.py(737):         seq = args.pop('seq', as_seq)
0.95 /testbed/sympy/core/symbol.py(739):         for name in names:
0.95 /testbed/sympy/core/symbol.py(740):             if not name:
0.95 /testbed/sympy/core/symbol.py(743):             if ':' not in name:
0.95 /testbed/sympy/core/symbol.py(744):                 symbol = cls(literal(name), **args)
0.95 /testbed/sympy/core/symbol.py(717):             if literals:
0.95 /testbed/sympy/core/symbol.py(720):             return s
0.95 /testbed/sympy/core/symbol.py(295):         cls._sanitize(assumptions, cls)
0.95 /testbed/sympy/core/symbol.py(260):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.95 /testbed/sympy/core/symbol.py(261):         if is_commutative is None:
0.95 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.95 /testbed/sympy/core/symbol.py(268):             v = assumptions[key]
0.95 /testbed/sympy/core/symbol.py(269):             if v is None:
0.95 /testbed/sympy/core/symbol.py(272):             assumptions[key] = bool(v)
0.95 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.95 /testbed/sympy/core/symbol.py(296):         return Symbol.__xnew_cached_(cls, name, **assumptions)
0.95 /testbed/sympy/core/symbol.py(326):         return Symbol.__xnew__(cls, name, **assumptions)
0.95 /testbed/sympy/core/symbol.py(300):         if not isinstance(name, str):
0.95 /testbed/sympy/core/symbol.py(303):         obj = Expr.__new__(cls)
0.95 /testbed/sympy/core/symbol.py(304):         obj.name = name
0.95 /testbed/sympy/core/symbol.py(314):         tmp_asm_copy = assumptions.copy()
0.95 /testbed/sympy/core/symbol.py(317):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.95 /testbed/sympy/core/symbol.py(318):         assumptions['commutative'] = is_commutative
0.95 /testbed/sympy/core/symbol.py(319):         obj._assumptions = StdFactKB(assumptions)
0.95 /testbed/sympy/core/symbol.py(320):         obj._assumptions._generator = tmp_asm_copy  # Issue #8873
0.95 /testbed/sympy/core/symbol.py(321):         return obj
0.95 /testbed/sympy/core/symbol.py(745):                 result.append(symbol)
0.95 /testbed/sympy/core/symbol.py(746):                 continue
0.95 /testbed/sympy/core/symbol.py(739):         for name in names:
0.95 /testbed/sympy/core/symbol.py(786):         if not seq and len(result) <= 1:
0.95 /testbed/sympy/core/symbol.py(787):             if not result:
0.95 /testbed/sympy/core/symbol.py(789):             return result[0]
0.95 /testbed/sympy/core/symbol.py(702):     result = []
0.95 /testbed/sympy/core/symbol.py(704):     if isinstance(names, str):
0.95 /testbed/sympy/core/symbol.py(705):         marker = 0
0.95 /testbed/sympy/core/symbol.py(706):         splitters = r'\,', r'\:', r'\ '
0.95 /testbed/sympy/core/symbol.py(707):         literals: list[tuple[str, str]] = []
0.95 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.95 /testbed/sympy/core/symbol.py(709):             if splitter in names:
0.95 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.95 /testbed/sympy/core/symbol.py(709):             if splitter in names:
0.95 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.95 /testbed/sympy/core/symbol.py(709):             if splitter in names:
0.95 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.95 /testbed/sympy/core/symbol.py(716):         def literal(s):
0.95 /testbed/sympy/core/symbol.py(722):         names = names.strip()
0.95 /testbed/sympy/core/symbol.py(723):         as_seq = names.endswith(',')
0.95 /testbed/sympy/core/symbol.py(724):         if as_seq:
0.95 /testbed/sympy/core/symbol.py(726):         if not names:
0.95 /testbed/sympy/core/symbol.py(730):         names = [n.strip() for n in names.split(',')]
0.95 /testbed/sympy/core/symbol.py(730):         names = [n.strip() for n in names.split(',')]
0.95 /testbed/sympy/core/symbol.py(730):         names = [n.strip() for n in names.split(',')]
0.95 /testbed/sympy/core/symbol.py(731):         if not all(n for n in names):
0.95 /testbed/sympy/core/symbol.py(731):         if not all(n for n in names):
0.95 /testbed/sympy/core/symbol.py(731):         if not all(n for n in names):
0.95 /testbed/sympy/core/symbol.py(734):         for i in range(len(names) - 1, -1, -1):
0.95 /testbed/sympy/core/symbol.py(735):             names[i: i + 1] = names[i].split()
0.95 /testbed/sympy/core/symbol.py(734):         for i in range(len(names) - 1, -1, -1):
0.95 /testbed/sympy/core/symbol.py(737):         seq = args.pop('seq', as_seq)
0.95 /testbed/sympy/core/symbol.py(739):         for name in names:
0.95 /testbed/sympy/core/symbol.py(740):             if not name:
0.95 /testbed/sympy/core/symbol.py(743):             if ':' not in name:
0.95 /testbed/sympy/core/symbol.py(744):                 symbol = cls(literal(name), **args)
0.95 /testbed/sympy/core/symbol.py(717):             if literals:
0.95 /testbed/sympy/core/symbol.py(720):             return s
0.95 /testbed/sympy/core/symbol.py(295):         cls._sanitize(assumptions, cls)
0.95 /testbed/sympy/core/symbol.py(260):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.95 /testbed/sympy/core/symbol.py(261):         if is_commutative is None:
0.95 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.95 /testbed/sympy/core/symbol.py(268):             v = assumptions[key]
0.95 /testbed/sympy/core/symbol.py(269):             if v is None:
0.95 /testbed/sympy/core/symbol.py(272):             assumptions[key] = bool(v)
0.95 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.95 /testbed/sympy/core/symbol.py(296):         return Symbol.__xnew_cached_(cls, name, **assumptions)
0.95 /testbed/sympy/core/symbol.py(326):         return Symbol.__xnew__(cls, name, **assumptions)
0.95 /testbed/sympy/core/symbol.py(300):         if not isinstance(name, str):
0.95 /testbed/sympy/core/symbol.py(303):         obj = Expr.__new__(cls)
0.95 /testbed/sympy/core/symbol.py(304):         obj.name = name
0.95 /testbed/sympy/core/symbol.py(314):         tmp_asm_copy = assumptions.copy()
0.95 /testbed/sympy/core/symbol.py(317):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.95 /testbed/sympy/core/symbol.py(318):         assumptions['commutative'] = is_commutative
0.95 /testbed/sympy/core/symbol.py(319):         obj._assumptions = StdFactKB(assumptions)
0.95 /testbed/sympy/core/symbol.py(320):         obj._assumptions._generator = tmp_asm_copy  # Issue #8873
0.95 /testbed/sympy/core/symbol.py(321):         return obj
0.95 /testbed/sympy/core/symbol.py(745):                 result.append(symbol)
0.95 ['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(sympy/core/symbol\\.py)']
0.13 /testbed/sympy/core/symbol.py(1): from __future__ import annotations
0.14 /testbed/sympy/core/symbol.py(3): from .assumptions import StdFactKB, _assume_defined
0.14 /testbed/sympy/core/symbol.py(4): from .basic import Basic, Atom
0.14 /testbed/sympy/core/symbol.py(5): from .cache import cacheit
0.14 /testbed/sympy/core/symbol.py(6): from .containers import Tuple
0.14 /testbed/sympy/core/symbol.py(7): from .expr import Expr, AtomicExpr
0.14 /testbed/sympy/core/symbol.py(8): from .function import AppliedUndef, FunctionClass
0.14 /testbed/sympy/core/symbol.py(9): from .kind import NumberKind, UndefinedKind
0.14 /testbed/sympy/core/symbol.py(10): from .logic import fuzzy_bool
0.14 /testbed/sympy/core/symbol.py(11): from .singleton import S
0.14 /testbed/sympy/core/symbol.py(12): from .sorting import ordered
0.14 /testbed/sympy/core/symbol.py(13): from .sympify import sympify
0.14 /testbed/sympy/core/symbol.py(14): from sympy.logic.boolalg import Boolean
0.14 /testbed/sympy/core/symbol.py(15): from sympy.utilities.iterables import sift, is_sequence
0.14 /testbed/sympy/core/symbol.py(16): from sympy.utilities.misc import filldedent
0.14 /testbed/sympy/core/symbol.py(18): import string
0.14 /testbed/sympy/core/symbol.py(19): import re as _re
0.14 /testbed/sympy/core/symbol.py(20): import random
0.14 /testbed/sympy/core/symbol.py(21): from itertools import product
0.14 /testbed/sympy/core/symbol.py(22): from typing import Any
0.14 /testbed/sympy/core/symbol.py(25): class Str(Atom):
0.14 /testbed/sympy/core/symbol.py(25): class Str(Atom):
0.14 /testbed/sympy/core/symbol.py(26):     """
0.14 /testbed/sympy/core/symbol.py(37):     __slots__ = ('name',)
0.14 /testbed/sympy/core/symbol.py(39):     def __new__(cls, name, **kwargs):
0.14 /testbed/sympy/core/symbol.py(46):     def __getnewargs__(self):
0.14 /testbed/sympy/core/symbol.py(49):     def _hashable_content(self):
0.14 /testbed/sympy/core/symbol.py(53): def _filter_assumptions(kwargs):
0.14 /testbed/sympy/core/symbol.py(64): def _symbol(s, matching_symbol=None, **assumptions):
0.14 /testbed/sympy/core/symbol.py(130): def uniquely_named_symbol(xname, exprs=(), compare=str, modify=None, **assumptions):
0.14 /testbed/sympy/core/symbol.py(204): _uniquely_named_symbol = uniquely_named_symbol
0.14 /testbed/sympy/core/symbol.py(206): class Symbol(AtomicExpr, Boolean):
0.14 /testbed/sympy/core/symbol.py(206): class Symbol(AtomicExpr, Boolean):
0.14 /testbed/sympy/core/symbol.py(207):     """
0.14 /testbed/sympy/core/symbol.py(225):     is_comparable = False
0.14 /testbed/sympy/core/symbol.py(227):     __slots__ = ('name',)
0.14 /testbed/sympy/core/symbol.py(229):     name: str
0.14 /testbed/sympy/core/symbol.py(231):     is_Symbol = True
0.14 /testbed/sympy/core/symbol.py(232):     is_symbol = True
0.14 /testbed/sympy/core/symbol.py(234):     @property
0.14 /testbed/sympy/core/symbol.py(235):     def kind(self):
0.14 /testbed/sympy/core/symbol.py(240):     @property
0.14 /testbed/sympy/core/symbol.py(241):     def _diff_wrt(self):
0.14 /testbed/sympy/core/symbol.py(254):     @staticmethod
0.14 /testbed/sympy/core/symbol.py(255):     def _sanitize(assumptions, obj=None):
0.14 /testbed/sympy/core/symbol.py(274):     def _merge(self, assumptions):
0.14 /testbed/sympy/core/symbol.py(285):     def __new__(cls, name, **assumptions):
0.14 /testbed/sympy/core/symbol.py(298):     @staticmethod
0.14 /testbed/sympy/core/symbol.py(299):     def __xnew__(cls, name, **assumptions):  # never cached (e.g. dummy)
0.14 /testbed/sympy/core/symbol.py(323):     @staticmethod
0.14 /testbed/sympy/core/symbol.py(324):     @cacheit
0.14 /testbed/sympy/core/symbol.py(325):     def __xnew_cached_(cls, name, **assumptions):  # symbols are always cached
0.14 /testbed/sympy/core/symbol.py(328):     def __getnewargs_ex__(self):
0.14 /testbed/sympy/core/symbol.py(336):     def __setstate__(self, state):
0.14 /testbed/sympy/core/symbol.py(340):     def _hashable_content(self):
0.14 /testbed/sympy/core/symbol.py(344):     def _eval_subs(self, old, new):
0.14 /testbed/sympy/core/symbol.py(349):     def _eval_refine(self, assumptions):
0.14 /testbed/sympy/core/symbol.py(352):     @property
0.14 /testbed/sympy/core/symbol.py(353):     def assumptions0(self):
0.14 /testbed/sympy/core/symbol.py(357):     @cacheit
0.14 /testbed/sympy/core/symbol.py(358):     def sort_key(self, order=None):
0.14 /testbed/sympy/core/symbol.py(361):     def as_dummy(self):
0.14 /testbed/sympy/core/symbol.py(366):     def as_real_imag(self, deep=True, **hints):
0.14 /testbed/sympy/core/symbol.py(373):     def is_constant(self, *wrt, **flags):
0.14 /testbed/sympy/core/symbol.py(378):     @property
0.14 /testbed/sympy/core/symbol.py(379):     def free_symbols(self):
0.14 /testbed/sympy/core/symbol.py(382):     binary_symbols = free_symbols  # in this case, not always
0.14 /testbed/sympy/core/symbol.py(384):     def as_set(self):
0.14 /testbed/sympy/core/symbol.py(388): class Dummy(Symbol):
0.14 /testbed/sympy/core/symbol.py(388): class Dummy(Symbol):
0.14 /testbed/sympy/core/symbol.py(389):     """Dummy symbols are each unique, even if they have the same name:
0.14 /testbed/sympy/core/symbol.py(418):     _count = 0
0.14 /testbed/sympy/core/symbol.py(419):     _prng = random.Random()
0.14 /testbed/sympy/core/symbol.py(420):     _base_dummy_index = _prng.randint(10**6, 9*10**6)
0.14 /testbed/sympy/core/symbol.py(422):     __slots__ = ('dummy_index',)
0.14 /testbed/sympy/core/symbol.py(424):     is_Dummy = True
0.14 /testbed/sympy/core/symbol.py(426):     def __new__(cls, name=None, dummy_index=None, **assumptions):
0.14 /testbed/sympy/core/symbol.py(444):     def __getnewargs_ex__(self):
0.14 /testbed/sympy/core/symbol.py(447):     @cacheit
0.14 /testbed/sympy/core/symbol.py(448):     def sort_key(self, order=None):
0.14 /testbed/sympy/core/symbol.py(452):     def _hashable_content(self):
0.14 /testbed/sympy/core/symbol.py(456): class Wild(Symbol):
0.14 /testbed/sympy/core/symbol.py(456): class Wild(Symbol):
0.14 /testbed/sympy/core/symbol.py(457):     """
0.14 /testbed/sympy/core/symbol.py(545):     is_Wild = True
0.14 /testbed/sympy/core/symbol.py(547):     __slots__ = ('exclude', 'properties')
0.14 /testbed/sympy/core/symbol.py(549):     def __new__(cls, name, exclude=(), properties=(), **assumptions):
0.14 /testbed/sympy/core/symbol.py(555):     def __getnewargs__(self):
0.14 /testbed/sympy/core/symbol.py(558):     @staticmethod
0.14 /testbed/sympy/core/symbol.py(559):     @cacheit
0.14 /testbed/sympy/core/symbol.py(560):     def __xnew__(cls, name, exclude, properties, **assumptions):
0.14 /testbed/sympy/core/symbol.py(566):     def _hashable_content(self):
0.14 /testbed/sympy/core/symbol.py(570):     def matches(self, expr, repl_dict=None, old=False):
0.14 /testbed/sympy/core/symbol.py(583): _range = _re.compile('([0-9]*:[0-9]+|[a-zA-Z]?:[a-zA-Z])')
0.14 /testbed/sympy/core/symbol.py(586): def symbols(names, *, cls=Symbol, **args) -> Any:
0.14 /testbed/sympy/core/symbol.py(799): def var(names, **args):
0.14 /testbed/sympy/core/symbol.py(862): def disambiguate(*iter):
0.14 /testbed/sympy/core/symbol.py(427):         if dummy_index is not None:
0.14 /testbed/sympy/core/symbol.py(430):         if name is None:
0.14 /testbed/sympy/core/symbol.py(431):             name = "Dummy_" + str(Dummy._count)
0.14 /testbed/sympy/core/symbol.py(433):         if dummy_index is None:
0.14 /testbed/sympy/core/symbol.py(434):             dummy_index = Dummy._base_dummy_index + Dummy._count
0.14 /testbed/sympy/core/symbol.py(435):             Dummy._count += 1
0.14 /testbed/sympy/core/symbol.py(437):         cls._sanitize(assumptions, cls)
0.14 /testbed/sympy/core/symbol.py(260):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.14 /testbed/sympy/core/symbol.py(261):         if is_commutative is None:
0.14 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.14 /testbed/sympy/core/symbol.py(268):             v = assumptions[key]
0.14 /testbed/sympy/core/symbol.py(269):             if v is None:
0.14 /testbed/sympy/core/symbol.py(272):             assumptions[key] = bool(v)
0.14 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.14 /testbed/sympy/core/symbol.py(438):         obj = Symbol.__xnew__(cls, name, **assumptions)
0.14 /testbed/sympy/core/symbol.py(300):         if not isinstance(name, str):
0.14 /testbed/sympy/core/symbol.py(303):         obj = Expr.__new__(cls)
0.14 /testbed/sympy/core/symbol.py(304):         obj.name = name
0.14 /testbed/sympy/core/symbol.py(314):         tmp_asm_copy = assumptions.copy()
0.14 /testbed/sympy/core/symbol.py(317):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.14 /testbed/sympy/core/symbol.py(318):         assumptions['commutative'] = is_commutative
0.14 /testbed/sympy/core/symbol.py(319):         obj._assumptions = StdFactKB(assumptions)
0.14 /testbed/sympy/core/symbol.py(320):         obj._assumptions._generator = tmp_asm_copy  # Issue #8873
0.14 /testbed/sympy/core/symbol.py(321):         return obj
0.14 /testbed/sympy/core/symbol.py(440):         obj.dummy_index = dummy_index
0.14 /testbed/sympy/core/symbol.py(442):         return obj
0.18 /testbed/sympy/core/symbol.py(295):         cls._sanitize(assumptions, cls)
0.18 /testbed/sympy/core/symbol.py(260):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.18 /testbed/sympy/core/symbol.py(261):         if is_commutative is None:
0.18 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.18 /testbed/sympy/core/symbol.py(296):         return Symbol.__xnew_cached_(cls, name, **assumptions)
0.18 /testbed/sympy/core/symbol.py(326):         return Symbol.__xnew__(cls, name, **assumptions)
0.18 /testbed/sympy/core/symbol.py(300):         if not isinstance(name, str):
0.18 /testbed/sympy/core/symbol.py(303):         obj = Expr.__new__(cls)
0.18 /testbed/sympy/core/symbol.py(304):         obj.name = name
0.18 /testbed/sympy/core/symbol.py(314):         tmp_asm_copy = assumptions.copy()
0.18 /testbed/sympy/core/symbol.py(317):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.18 /testbed/sympy/core/symbol.py(318):         assumptions['commutative'] = is_commutative
0.18 /testbed/sympy/core/symbol.py(319):         obj._assumptions = StdFactKB(assumptions)
0.18 /testbed/sympy/core/symbol.py(320):         obj._assumptions._generator = tmp_asm_copy  # Issue #8873
0.18 /testbed/sympy/core/symbol.py(321):         return obj
0.18 /testbed/sympy/core/symbol.py(427):         if dummy_index is not None:
0.18 /testbed/sympy/core/symbol.py(430):         if name is None:
0.18 /testbed/sympy/core/symbol.py(433):         if dummy_index is None:
0.18 /testbed/sympy/core/symbol.py(434):             dummy_index = Dummy._base_dummy_index + Dummy._count
0.18 /testbed/sympy/core/symbol.py(435):             Dummy._count += 1
0.18 /testbed/sympy/core/symbol.py(437):         cls._sanitize(assumptions, cls)
0.18 /testbed/sympy/core/symbol.py(260):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.18 /testbed/sympy/core/symbol.py(261):         if is_commutative is None:
0.18 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.18 /testbed/sympy/core/symbol.py(438):         obj = Symbol.__xnew__(cls, name, **assumptions)
0.18 /testbed/sympy/core/symbol.py(300):         if not isinstance(name, str):
0.18 /testbed/sympy/core/symbol.py(303):         obj = Expr.__new__(cls)
0.18 /testbed/sympy/core/symbol.py(304):         obj.name = name
0.18 /testbed/sympy/core/symbol.py(314):         tmp_asm_copy = assumptions.copy()
0.18 /testbed/sympy/core/symbol.py(317):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.18 /testbed/sympy/core/symbol.py(318):         assumptions['commutative'] = is_commutative
0.18 /testbed/sympy/core/symbol.py(319):         obj._assumptions = StdFactKB(assumptions)
0.18 /testbed/sympy/core/symbol.py(320):         obj._assumptions._generator = tmp_asm_copy  # Issue #8873
0.18 /testbed/sympy/core/symbol.py(321):         return obj
0.18 /testbed/sympy/core/symbol.py(440):         obj.dummy_index = dummy_index
0.18 /testbed/sympy/core/symbol.py(442):         return obj
0.21 /testbed/sympy/core/symbol.py(295):         cls._sanitize(assumptions, cls)
0.21 /testbed/sympy/core/symbol.py(260):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.21 /testbed/sympy/core/symbol.py(261):         if is_commutative is None:
0.21 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.21 /testbed/sympy/core/symbol.py(296):         return Symbol.__xnew_cached_(cls, name, **assumptions)
0.21 /testbed/sympy/core/symbol.py(326):         return Symbol.__xnew__(cls, name, **assumptions)
0.21 /testbed/sympy/core/symbol.py(300):         if not isinstance(name, str):
0.21 /testbed/sympy/core/symbol.py(303):         obj = Expr.__new__(cls)
0.21 /testbed/sympy/core/symbol.py(304):         obj.name = name
0.21 /testbed/sympy/core/symbol.py(314):         tmp_asm_copy = assumptions.copy()
0.21 /testbed/sympy/core/symbol.py(317):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.21 /testbed/sympy/core/symbol.py(318):         assumptions['commutative'] = is_commutative
0.21 /testbed/sympy/core/symbol.py(319):         obj._assumptions = StdFactKB(assumptions)
0.21 /testbed/sympy/core/symbol.py(320):         obj._assumptions._generator = tmp_asm_copy  # Issue #8873
0.21 /testbed/sympy/core/symbol.py(321):         return obj
0.21 /testbed/sympy/core/symbol.py(702):     result = []
0.21 /testbed/sympy/core/symbol.py(704):     if isinstance(names, str):
0.21 /testbed/sympy/core/symbol.py(705):         marker = 0
0.21 /testbed/sympy/core/symbol.py(706):         splitters = r'\,', r'\:', r'\ '
0.21 /testbed/sympy/core/symbol.py(707):         literals: list[tuple[str, str]] = []
0.21 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.21 /testbed/sympy/core/symbol.py(709):             if splitter in names:
0.21 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.21 /testbed/sympy/core/symbol.py(709):             if splitter in names:
0.21 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.21 /testbed/sympy/core/symbol.py(709):             if splitter in names:
0.21 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.21 /testbed/sympy/core/symbol.py(716):         def literal(s):
0.21 /testbed/sympy/core/symbol.py(722):         names = names.strip()
0.21 /testbed/sympy/core/symbol.py(723):         as_seq = names.endswith(',')
0.21 /testbed/sympy/core/symbol.py(724):         if as_seq:
0.21 /testbed/sympy/core/symbol.py(726):         if not names:
0.21 /testbed/sympy/core/symbol.py(730):         names = [n.strip() for n in names.split(',')]
0.21 /testbed/sympy/core/symbol.py(730):         names = [n.strip() for n in names.split(',')]
0.21 /testbed/sympy/core/symbol.py(730):         names = [n.strip() for n in names.split(',')]
0.21 /testbed/sympy/core/symbol.py(730):         names = [n.strip() for n in names.split(',')]
0.21 /testbed/sympy/core/symbol.py(731):         if not all(n for n in names):
0.21 /testbed/sympy/core/symbol.py(731):         if not all(n for n in names):
0.21 /testbed/sympy/core/symbol.py(731):         if not all(n for n in names):
0.21 /testbed/sympy/core/symbol.py(731):         if not all(n for n in names):
0.21 /testbed/sympy/core/symbol.py(734):         for i in range(len(names) - 1, -1, -1):
0.21 /testbed/sympy/core/symbol.py(735):             names[i: i + 1] = names[i].split()
0.21 /testbed/sympy/core/symbol.py(734):         for i in range(len(names) - 1, -1, -1):
0.21 /testbed/sympy/core/symbol.py(735):             names[i: i + 1] = names[i].split()
0.21 /testbed/sympy/core/symbol.py(734):         for i in range(len(names) - 1, -1, -1):
0.21 /testbed/sympy/core/symbol.py(737):         seq = args.pop('seq', as_seq)
0.21 /testbed/sympy/core/symbol.py(739):         for name in names:
0.21 /testbed/sympy/core/symbol.py(740):             if not name:
0.21 /testbed/sympy/core/symbol.py(743):             if ':' not in name:
0.21 /testbed/sympy/core/symbol.py(744):                 symbol = cls(literal(name), **args)
0.21 /testbed/sympy/core/symbol.py(717):             if literals:
0.21 /testbed/sympy/core/symbol.py(720):             return s
0.21 /testbed/sympy/core/symbol.py(427):         if dummy_index is not None:
0.21 /testbed/sympy/core/symbol.py(430):         if name is None:
0.21 /testbed/sympy/core/symbol.py(433):         if dummy_index is None:
0.21 /testbed/sympy/core/symbol.py(434):             dummy_index = Dummy._base_dummy_index + Dummy._count
0.21 /testbed/sympy/core/symbol.py(435):             Dummy._count += 1
0.21 /testbed/sympy/core/symbol.py(437):         cls._sanitize(assumptions, cls)
0.21 /testbed/sympy/core/symbol.py(260):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.21 /testbed/sympy/core/symbol.py(261):         if is_commutative is None:
0.21 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.21 /testbed/sympy/core/symbol.py(438):         obj = Symbol.__xnew__(cls, name, **assumptions)
0.21 /testbed/sympy/core/symbol.py(300):         if not isinstance(name, str):
0.21 /testbed/sympy/core/symbol.py(303):         obj = Expr.__new__(cls)
0.21 /testbed/sympy/core/symbol.py(304):         obj.name = name
0.21 /testbed/sympy/core/symbol.py(314):         tmp_asm_copy = assumptions.copy()
0.21 /testbed/sympy/core/symbol.py(317):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.21 /testbed/sympy/core/symbol.py(318):         assumptions['commutative'] = is_commutative
0.21 /testbed/sympy/core/symbol.py(319):         obj._assumptions = StdFactKB(assumptions)
0.21 /testbed/sympy/core/symbol.py(320):         obj._assumptions._generator = tmp_asm_copy  # Issue #8873
0.21 /testbed/sympy/core/symbol.py(321):         return obj
0.21 /testbed/sympy/core/symbol.py(440):         obj.dummy_index = dummy_index
0.21 /testbed/sympy/core/symbol.py(442):         return obj
0.21 /testbed/sympy/core/symbol.py(745):                 result.append(symbol)
0.21 /testbed/sympy/core/symbol.py(746):                 continue
0.21 /testbed/sympy/core/symbol.py(739):         for name in names:
0.21 /testbed/sympy/core/symbol.py(740):             if not name:
0.21 /testbed/sympy/core/symbol.py(743):             if ':' not in name:
0.21 /testbed/sympy/core/symbol.py(744):                 symbol = cls(literal(name), **args)
0.21 /testbed/sympy/core/symbol.py(717):             if literals:
0.21 /testbed/sympy/core/symbol.py(720):             return s
0.21 /testbed/sympy/core/symbol.py(427):         if dummy_index is not None:
0.21 /testbed/sympy/core/symbol.py(430):         if name is None:
0.21 /testbed/sympy/core/symbol.py(433):         if dummy_index is None:
0.21 /testbed/sympy/core/symbol.py(434):             dummy_index = Dummy._base_dummy_index + Dummy._count
0.21 /testbed/sympy/core/symbol.py(435):             Dummy._count += 1
0.21 /testbed/sympy/core/symbol.py(437):         cls._sanitize(assumptions, cls)
0.21 /testbed/sympy/core/symbol.py(260):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.21 /testbed/sympy/core/symbol.py(261):         if is_commutative is None:
0.21 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.21 /testbed/sympy/core/symbol.py(438):         obj = Symbol.__xnew__(cls, name, **assumptions)
0.21 /testbed/sympy/core/symbol.py(300):         if not isinstance(name, str):
0.21 /testbed/sympy/core/symbol.py(303):         obj = Expr.__new__(cls)
0.21 /testbed/sympy/core/symbol.py(304):         obj.name = name
0.21 /testbed/sympy/core/symbol.py(314):         tmp_asm_copy = assumptions.copy()
0.21 /testbed/sympy/core/symbol.py(317):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.21 /testbed/sympy/core/symbol.py(318):         assumptions['commutative'] = is_commutative
0.21 /testbed/sympy/core/symbol.py(319):         obj._assumptions = StdFactKB(assumptions)
0.21 /testbed/sympy/core/symbol.py(320):         obj._assumptions._generator = tmp_asm_copy  # Issue #8873
0.21 /testbed/sympy/core/symbol.py(321):         return obj
0.21 /testbed/sympy/core/symbol.py(440):         obj.dummy_index = dummy_index
0.21 /testbed/sympy/core/symbol.py(442):         return obj
0.21 /testbed/sympy/core/symbol.py(745):                 result.append(symbol)
0.21 /testbed/sympy/core/symbol.py(746):                 continue
0.21 /testbed/sympy/core/symbol.py(739):         for name in names:
0.21 /testbed/sympy/core/symbol.py(786):         if not seq and len(result) <= 1:
0.21 /testbed/sympy/core/symbol.py(791):         return tuple(result)
0.21 /testbed/sympy/core/symbol.py(702):     result = []
0.21 /testbed/sympy/core/symbol.py(704):     if isinstance(names, str):
0.21 /testbed/sympy/core/symbol.py(705):         marker = 0
0.21 /testbed/sympy/core/symbol.py(706):         splitters = r'\,', r'\:', r'\ '
0.21 /testbed/sympy/core/symbol.py(707):         literals: list[tuple[str, str]] = []
0.21 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.21 /testbed/sympy/core/symbol.py(709):             if splitter in names:
0.21 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.21 /testbed/sympy/core/symbol.py(709):             if splitter in names:
0.21 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.21 /testbed/sympy/core/symbol.py(709):             if splitter in names:
0.21 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.21 /testbed/sympy/core/symbol.py(716):         def literal(s):
0.21 /testbed/sympy/core/symbol.py(722):         names = names.strip()
0.21 /testbed/sympy/core/symbol.py(723):         as_seq = names.endswith(',')
0.21 /testbed/sympy/core/symbol.py(724):         if as_seq:
0.21 /testbed/sympy/core/symbol.py(726):         if not names:
0.21 /testbed/sympy/core/symbol.py(730):         names = [n.strip() for n in names.split(',')]
0.21 /testbed/sympy/core/symbol.py(730):         names = [n.strip() for n in names.split(',')]
0.21 /testbed/sympy/core/symbol.py(730):         names = [n.strip() for n in names.split(',')]
0.21 /testbed/sympy/core/symbol.py(730):         names = [n.strip() for n in names.split(',')]
0.21 /testbed/sympy/core/symbol.py(731):         if not all(n for n in names):
0.21 /testbed/sympy/core/symbol.py(731):         if not all(n for n in names):
0.21 /testbed/sympy/core/symbol.py(731):         if not all(n for n in names):
0.21 /testbed/sympy/core/symbol.py(731):         if not all(n for n in names):
0.21 /testbed/sympy/core/symbol.py(734):         for i in range(len(names) - 1, -1, -1):
0.21 /testbed/sympy/core/symbol.py(735):             names[i: i + 1] = names[i].split()
0.21 /testbed/sympy/core/symbol.py(734):         for i in range(len(names) - 1, -1, -1):
0.21 /testbed/sympy/core/symbol.py(735):             names[i: i + 1] = names[i].split()
0.21 /testbed/sympy/core/symbol.py(734):         for i in range(len(names) - 1, -1, -1):
0.21 /testbed/sympy/core/symbol.py(737):         seq = args.pop('seq', as_seq)
0.21 /testbed/sympy/core/symbol.py(739):         for name in names:
0.21 /testbed/sympy/core/symbol.py(740):             if not name:
0.21 /testbed/sympy/core/symbol.py(743):             if ':' not in name:
0.21 /testbed/sympy/core/symbol.py(744):                 symbol = cls(literal(name), **args)
0.21 /testbed/sympy/core/symbol.py(717):             if literals:
0.21 /testbed/sympy/core/symbol.py(720):             return s
0.21 /testbed/sympy/core/symbol.py(427):         if dummy_index is not None:
0.21 /testbed/sympy/core/symbol.py(430):         if name is None:
0.21 /testbed/sympy/core/symbol.py(433):         if dummy_index is None:
0.21 /testbed/sympy/core/symbol.py(434):             dummy_index = Dummy._base_dummy_index + Dummy._count
0.21 /testbed/sympy/core/symbol.py(435):             Dummy._count += 1
0.21 /testbed/sympy/core/symbol.py(437):         cls._sanitize(assumptions, cls)
0.21 /testbed/sympy/core/symbol.py(260):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.21 /testbed/sympy/core/symbol.py(261):         if is_commutative is None:
0.21 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.21 /testbed/sympy/core/symbol.py(438):         obj = Symbol.__xnew__(cls, name, **assumptions)
0.21 /testbed/sympy/core/symbol.py(300):         if not isinstance(name, str):
0.21 /testbed/sympy/core/symbol.py(303):         obj = Expr.__new__(cls)
0.21 /testbed/sympy/core/symbol.py(304):         obj.name = name
0.21 /testbed/sympy/core/symbol.py(314):         tmp_asm_copy = assumptions.copy()
0.21 /testbed/sympy/core/symbol.py(317):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.21 /testbed/sympy/core/symbol.py(318):         assumptions['commutative'] = is_commutative
0.21 /testbed/sympy/core/symbol.py(319):         obj._assumptions = StdFactKB(assumptions)
0.21 /testbed/sympy/core/symbol.py(320):         obj._assumptions._generator = tmp_asm_copy  # Issue #8873
0.21 /testbed/sympy/core/symbol.py(321):         return obj
0.21 /testbed/sympy/core/symbol.py(440):         obj.dummy_index = dummy_index
0.21 /testbed/sympy/core/symbol.py(442):         return obj
0.21 /testbed/sympy/core/symbol.py(745):                 result.append(symbol)
0.21 /testbed/sympy/core/symbol.py(746):                 continue
0.21 /testbed/sympy/core/symbol.py(739):         for name in names:
0.21 /testbed/sympy/core/symbol.py(740):             if not name:
0.21 /testbed/sympy/core/symbol.py(743):             if ':' not in name:
0.21 /testbed/sympy/core/symbol.py(744):                 symbol = cls(literal(name), **args)
0.21 /testbed/sympy/core/symbol.py(717):             if literals:
0.21 /testbed/sympy/core/symbol.py(720):             return s
0.21 /testbed/sympy/core/symbol.py(427):         if dummy_index is not None:
0.21 /testbed/sympy/core/symbol.py(430):         if name is None:
0.21 /testbed/sympy/core/symbol.py(433):         if dummy_index is None:
0.21 /testbed/sympy/core/symbol.py(434):             dummy_index = Dummy._base_dummy_index + Dummy._count
0.21 /testbed/sympy/core/symbol.py(435):             Dummy._count += 1
0.21 /testbed/sympy/core/symbol.py(437):         cls._sanitize(assumptions, cls)
0.21 /testbed/sympy/core/symbol.py(260):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.21 /testbed/sympy/core/symbol.py(261):         if is_commutative is None:
0.21 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.21 /testbed/sympy/core/symbol.py(438):         obj = Symbol.__xnew__(cls, name, **assumptions)
0.21 /testbed/sympy/core/symbol.py(300):         if not isinstance(name, str):
0.21 /testbed/sympy/core/symbol.py(303):         obj = Expr.__new__(cls)
0.21 /testbed/sympy/core/symbol.py(304):         obj.name = name
0.21 /testbed/sympy/core/symbol.py(314):         tmp_asm_copy = assumptions.copy()
0.21 /testbed/sympy/core/symbol.py(317):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.21 /testbed/sympy/core/symbol.py(318):         assumptions['commutative'] = is_commutative
0.21 /testbed/sympy/core/symbol.py(319):         obj._assumptions = StdFactKB(assumptions)
0.21 /testbed/sympy/core/symbol.py(320):         obj._assumptions._generator = tmp_asm_copy  # Issue #8873
0.21 /testbed/sympy/core/symbol.py(321):         return obj
0.21 /testbed/sympy/core/symbol.py(440):         obj.dummy_index = dummy_index
0.21 /testbed/sympy/core/symbol.py(442):         return obj
0.21 /testbed/sympy/core/symbol.py(745):                 result.append(symbol)
0.21 /testbed/sympy/core/symbol.py(746):                 continue
0.21 /testbed/sympy/core/symbol.py(739):         for name in names:
0.21 /testbed/sympy/core/symbol.py(786):         if not seq and len(result) <= 1:
0.21 /testbed/sympy/core/symbol.py(791):         return tuple(result)
0.22 /testbed/sympy/core/symbol.py(427):         if dummy_index is not None:
0.22 /testbed/sympy/core/symbol.py(430):         if name is None:
0.22 /testbed/sympy/core/symbol.py(433):         if dummy_index is None:
0.22 /testbed/sympy/core/symbol.py(434):             dummy_index = Dummy._base_dummy_index + Dummy._count
0.22 /testbed/sympy/core/symbol.py(435):             Dummy._count += 1
0.22 /testbed/sympy/core/symbol.py(437):         cls._sanitize(assumptions, cls)
0.22 /testbed/sympy/core/symbol.py(260):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.22 /testbed/sympy/core/symbol.py(261):         if is_commutative is None:
0.22 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.22 /testbed/sympy/core/symbol.py(438):         obj = Symbol.__xnew__(cls, name, **assumptions)
0.22 /testbed/sympy/core/symbol.py(300):         if not isinstance(name, str):
0.22 /testbed/sympy/core/symbol.py(303):         obj = Expr.__new__(cls)
0.22 /testbed/sympy/core/symbol.py(304):         obj.name = name
0.22 /testbed/sympy/core/symbol.py(314):         tmp_asm_copy = assumptions.copy()
0.22 /testbed/sympy/core/symbol.py(317):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.22 /testbed/sympy/core/symbol.py(318):         assumptions['commutative'] = is_commutative
0.22 /testbed/sympy/core/symbol.py(319):         obj._assumptions = StdFactKB(assumptions)
0.22 /testbed/sympy/core/symbol.py(320):         obj._assumptions._generator = tmp_asm_copy  # Issue #8873
0.22 /testbed/sympy/core/symbol.py(321):         return obj
0.22 /testbed/sympy/core/symbol.py(440):         obj.dummy_index = dummy_index
0.22 /testbed/sympy/core/symbol.py(442):         return obj
0.23 /testbed/sympy/core/symbol.py(427):         if dummy_index is not None:
0.23 /testbed/sympy/core/symbol.py(430):         if name is None:
0.23 /testbed/sympy/core/symbol.py(433):         if dummy_index is None:
0.23 /testbed/sympy/core/symbol.py(434):             dummy_index = Dummy._base_dummy_index + Dummy._count
0.23 /testbed/sympy/core/symbol.py(435):             Dummy._count += 1
0.23 /testbed/sympy/core/symbol.py(437):         cls._sanitize(assumptions, cls)
0.23 /testbed/sympy/core/symbol.py(260):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.23 /testbed/sympy/core/symbol.py(261):         if is_commutative is None:
0.23 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.23 /testbed/sympy/core/symbol.py(438):         obj = Symbol.__xnew__(cls, name, **assumptions)
0.23 /testbed/sympy/core/symbol.py(300):         if not isinstance(name, str):
0.23 /testbed/sympy/core/symbol.py(303):         obj = Expr.__new__(cls)
0.23 /testbed/sympy/core/symbol.py(304):         obj.name = name
0.23 /testbed/sympy/core/symbol.py(314):         tmp_asm_copy = assumptions.copy()
0.23 /testbed/sympy/core/symbol.py(317):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.23 /testbed/sympy/core/symbol.py(318):         assumptions['commutative'] = is_commutative
0.23 /testbed/sympy/core/symbol.py(319):         obj._assumptions = StdFactKB(assumptions)
0.23 /testbed/sympy/core/symbol.py(320):         obj._assumptions._generator = tmp_asm_copy  # Issue #8873
0.23 /testbed/sympy/core/symbol.py(321):         return obj
0.23 /testbed/sympy/core/symbol.py(440):         obj.dummy_index = dummy_index
0.23 /testbed/sympy/core/symbol.py(442):         return obj
0.23 /testbed/sympy/core/symbol.py(427):         if dummy_index is not None:
0.23 /testbed/sympy/core/symbol.py(430):         if name is None:
0.23 /testbed/sympy/core/symbol.py(433):         if dummy_index is None:
0.23 /testbed/sympy/core/symbol.py(434):             dummy_index = Dummy._base_dummy_index + Dummy._count
0.23 /testbed/sympy/core/symbol.py(435):             Dummy._count += 1
0.23 /testbed/sympy/core/symbol.py(437):         cls._sanitize(assumptions, cls)
0.23 /testbed/sympy/core/symbol.py(260):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.23 /testbed/sympy/core/symbol.py(261):         if is_commutative is None:
0.23 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.23 /testbed/sympy/core/symbol.py(438):         obj = Symbol.__xnew__(cls, name, **assumptions)
0.23 /testbed/sympy/core/symbol.py(300):         if not isinstance(name, str):
0.23 /testbed/sympy/core/symbol.py(303):         obj = Expr.__new__(cls)
0.23 /testbed/sympy/core/symbol.py(304):         obj.name = name
0.23 /testbed/sympy/core/symbol.py(314):         tmp_asm_copy = assumptions.copy()
0.23 /testbed/sympy/core/symbol.py(317):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.23 /testbed/sympy/core/symbol.py(318):         assumptions['commutative'] = is_commutative
0.23 /testbed/sympy/core/symbol.py(319):         obj._assumptions = StdFactKB(assumptions)
0.23 /testbed/sympy/core/symbol.py(320):         obj._assumptions._generator = tmp_asm_copy  # Issue #8873
0.23 /testbed/sympy/core/symbol.py(321):         return obj
0.23 /testbed/sympy/core/symbol.py(440):         obj.dummy_index = dummy_index
0.23 /testbed/sympy/core/symbol.py(442):         return obj
0.24 /testbed/sympy/core/symbol.py(702):     result = []
0.24 /testbed/sympy/core/symbol.py(704):     if isinstance(names, str):
0.24 /testbed/sympy/core/symbol.py(705):         marker = 0
0.24 /testbed/sympy/core/symbol.py(706):         splitters = r'\,', r'\:', r'\ '
0.24 /testbed/sympy/core/symbol.py(707):         literals: list[tuple[str, str]] = []
0.24 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.24 /testbed/sympy/core/symbol.py(709):             if splitter in names:
0.24 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.24 /testbed/sympy/core/symbol.py(709):             if splitter in names:
0.24 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.24 /testbed/sympy/core/symbol.py(709):             if splitter in names:
0.24 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.24 /testbed/sympy/core/symbol.py(716):         def literal(s):
0.24 /testbed/sympy/core/symbol.py(722):         names = names.strip()
0.24 /testbed/sympy/core/symbol.py(723):         as_seq = names.endswith(',')
0.24 /testbed/sympy/core/symbol.py(724):         if as_seq:
0.24 /testbed/sympy/core/symbol.py(726):         if not names:
0.24 /testbed/sympy/core/symbol.py(730):         names = [n.strip() for n in names.split(',')]
0.24 /testbed/sympy/core/symbol.py(730):         names = [n.strip() for n in names.split(',')]
0.24 /testbed/sympy/core/symbol.py(730):         names = [n.strip() for n in names.split(',')]
0.24 /testbed/sympy/core/symbol.py(731):         if not all(n for n in names):
0.24 /testbed/sympy/core/symbol.py(731):         if not all(n for n in names):
0.24 /testbed/sympy/core/symbol.py(731):         if not all(n for n in names):
0.24 /testbed/sympy/core/symbol.py(734):         for i in range(len(names) - 1, -1, -1):
0.24 /testbed/sympy/core/symbol.py(735):             names[i: i + 1] = names[i].split()
0.24 /testbed/sympy/core/symbol.py(734):         for i in range(len(names) - 1, -1, -1):
0.24 /testbed/sympy/core/symbol.py(737):         seq = args.pop('seq', as_seq)
0.24 /testbed/sympy/core/symbol.py(739):         for name in names:
0.24 /testbed/sympy/core/symbol.py(740):             if not name:
0.24 /testbed/sympy/core/symbol.py(743):             if ':' not in name:
0.24 /testbed/sympy/core/symbol.py(744):                 symbol = cls(literal(name), **args)
0.24 /testbed/sympy/core/symbol.py(717):             if literals:
0.24 /testbed/sympy/core/symbol.py(720):             return s
0.24 /testbed/sympy/core/symbol.py(295):         cls._sanitize(assumptions, cls)
0.24 /testbed/sympy/core/symbol.py(260):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.24 /testbed/sympy/core/symbol.py(261):         if is_commutative is None:
0.24 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.24 /testbed/sympy/core/symbol.py(296):         return Symbol.__xnew_cached_(cls, name, **assumptions)
0.24 /testbed/sympy/core/symbol.py(326):         return Symbol.__xnew__(cls, name, **assumptions)
0.24 /testbed/sympy/core/symbol.py(300):         if not isinstance(name, str):
0.24 /testbed/sympy/core/symbol.py(303):         obj = Expr.__new__(cls)
0.24 /testbed/sympy/core/symbol.py(304):         obj.name = name
0.24 /testbed/sympy/core/symbol.py(314):         tmp_asm_copy = assumptions.copy()
0.24 /testbed/sympy/core/symbol.py(317):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.24 /testbed/sympy/core/symbol.py(318):         assumptions['commutative'] = is_commutative
0.24 /testbed/sympy/core/symbol.py(319):         obj._assumptions = StdFactKB(assumptions)
0.24 /testbed/sympy/core/symbol.py(320):         obj._assumptions._generator = tmp_asm_copy  # Issue #8873
0.24 /testbed/sympy/core/symbol.py(321):         return obj
0.24 /testbed/sympy/core/symbol.py(745):                 result.append(symbol)
0.24 /testbed/sympy/core/symbol.py(746):                 continue
0.24 /testbed/sympy/core/symbol.py(739):         for name in names:
0.24 /testbed/sympy/core/symbol.py(786):         if not seq and len(result) <= 1:
0.24 /testbed/sympy/core/symbol.py(787):             if not result:
0.24 /testbed/sympy/core/symbol.py(789):             return result[0]
0.26 /testbed/sympy/core/symbol.py(427):         if dummy_index is not None:
0.26 /testbed/sympy/core/symbol.py(430):         if name is None:
0.26 /testbed/sympy/core/symbol.py(433):         if dummy_index is None:
0.26 /testbed/sympy/core/symbol.py(434):             dummy_index = Dummy._base_dummy_index + Dummy._count
0.26 /testbed/sympy/core/symbol.py(435):             Dummy._count += 1
0.26 /testbed/sympy/core/symbol.py(437):         cls._sanitize(assumptions, cls)
0.26 /testbed/sympy/core/symbol.py(260):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.26 /testbed/sympy/core/symbol.py(261):         if is_commutative is None:
0.26 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.26 /testbed/sympy/core/symbol.py(438):         obj = Symbol.__xnew__(cls, name, **assumptions)
0.26 /testbed/sympy/core/symbol.py(300):         if not isinstance(name, str):
0.26 /testbed/sympy/core/symbol.py(303):         obj = Expr.__new__(cls)
0.26 /testbed/sympy/core/symbol.py(304):         obj.name = name
0.26 /testbed/sympy/core/symbol.py(314):         tmp_asm_copy = assumptions.copy()
0.26 /testbed/sympy/core/symbol.py(317):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.26 /testbed/sympy/core/symbol.py(318):         assumptions['commutative'] = is_commutative
0.26 /testbed/sympy/core/symbol.py(319):         obj._assumptions = StdFactKB(assumptions)
0.26 /testbed/sympy/core/symbol.py(320):         obj._assumptions._generator = tmp_asm_copy  # Issue #8873
0.26 /testbed/sympy/core/symbol.py(321):         return obj
0.26 /testbed/sympy/core/symbol.py(440):         obj.dummy_index = dummy_index
0.26 /testbed/sympy/core/symbol.py(442):         return obj
0.26 /testbed/sympy/core/symbol.py(427):         if dummy_index is not None:
0.26 /testbed/sympy/core/symbol.py(430):         if name is None:
0.26 /testbed/sympy/core/symbol.py(433):         if dummy_index is None:
0.26 /testbed/sympy/core/symbol.py(434):             dummy_index = Dummy._base_dummy_index + Dummy._count
0.26 /testbed/sympy/core/symbol.py(435):             Dummy._count += 1
0.26 /testbed/sympy/core/symbol.py(437):         cls._sanitize(assumptions, cls)
0.26 /testbed/sympy/core/symbol.py(260):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.26 /testbed/sympy/core/symbol.py(261):         if is_commutative is None:
0.26 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.26 /testbed/sympy/core/symbol.py(438):         obj = Symbol.__xnew__(cls, name, **assumptions)
0.26 /testbed/sympy/core/symbol.py(300):         if not isinstance(name, str):
0.26 /testbed/sympy/core/symbol.py(303):         obj = Expr.__new__(cls)
0.26 /testbed/sympy/core/symbol.py(304):         obj.name = name
0.26 /testbed/sympy/core/symbol.py(314):         tmp_asm_copy = assumptions.copy()
0.26 /testbed/sympy/core/symbol.py(317):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.26 /testbed/sympy/core/symbol.py(318):         assumptions['commutative'] = is_commutative
0.26 /testbed/sympy/core/symbol.py(319):         obj._assumptions = StdFactKB(assumptions)
0.26 /testbed/sympy/core/symbol.py(320):         obj._assumptions._generator = tmp_asm_copy  # Issue #8873
0.26 /testbed/sympy/core/symbol.py(321):         return obj
0.26 /testbed/sympy/core/symbol.py(440):         obj.dummy_index = dummy_index
0.26 /testbed/sympy/core/symbol.py(442):         return obj
0.28 /testbed/sympy/core/symbol.py(295):         cls._sanitize(assumptions, cls)
0.28 /testbed/sympy/core/symbol.py(260):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.28 /testbed/sympy/core/symbol.py(261):         if is_commutative is None:
0.28 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.28 /testbed/sympy/core/symbol.py(296):         return Symbol.__xnew_cached_(cls, name, **assumptions)
0.28 /testbed/sympy/core/symbol.py(326):         return Symbol.__xnew__(cls, name, **assumptions)
0.28 /testbed/sympy/core/symbol.py(300):         if not isinstance(name, str):
0.28 /testbed/sympy/core/symbol.py(303):         obj = Expr.__new__(cls)
0.28 /testbed/sympy/core/symbol.py(304):         obj.name = name
0.28 /testbed/sympy/core/symbol.py(314):         tmp_asm_copy = assumptions.copy()
0.28 /testbed/sympy/core/symbol.py(317):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.28 /testbed/sympy/core/symbol.py(318):         assumptions['commutative'] = is_commutative
0.28 /testbed/sympy/core/symbol.py(319):         obj._assumptions = StdFactKB(assumptions)
0.28 /testbed/sympy/core/symbol.py(320):         obj._assumptions._generator = tmp_asm_copy  # Issue #8873
0.28 /testbed/sympy/core/symbol.py(321):         return obj
0.30 /testbed/sympy/core/symbol.py(427):         if dummy_index is not None:
0.30 /testbed/sympy/core/symbol.py(430):         if name is None:
0.30 /testbed/sympy/core/symbol.py(433):         if dummy_index is None:
0.30 /testbed/sympy/core/symbol.py(434):             dummy_index = Dummy._base_dummy_index + Dummy._count
0.30 /testbed/sympy/core/symbol.py(435):             Dummy._count += 1
0.30 /testbed/sympy/core/symbol.py(437):         cls._sanitize(assumptions, cls)
0.30 /testbed/sympy/core/symbol.py(260):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.30 /testbed/sympy/core/symbol.py(261):         if is_commutative is None:
0.30 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.30 /testbed/sympy/core/symbol.py(438):         obj = Symbol.__xnew__(cls, name, **assumptions)
0.30 /testbed/sympy/core/symbol.py(300):         if not isinstance(name, str):
0.30 /testbed/sympy/core/symbol.py(303):         obj = Expr.__new__(cls)
0.30 /testbed/sympy/core/symbol.py(304):         obj.name = name
0.30 /testbed/sympy/core/symbol.py(314):         tmp_asm_copy = assumptions.copy()
0.30 /testbed/sympy/core/symbol.py(317):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.30 /testbed/sympy/core/symbol.py(318):         assumptions['commutative'] = is_commutative
0.30 /testbed/sympy/core/symbol.py(319):         obj._assumptions = StdFactKB(assumptions)
0.30 /testbed/sympy/core/symbol.py(320):         obj._assumptions._generator = tmp_asm_copy  # Issue #8873
0.30 /testbed/sympy/core/symbol.py(321):         return obj
0.30 /testbed/sympy/core/symbol.py(440):         obj.dummy_index = dummy_index
0.30 /testbed/sympy/core/symbol.py(442):         return obj
0.30 /testbed/sympy/core/symbol.py(427):         if dummy_index is not None:
0.30 /testbed/sympy/core/symbol.py(430):         if name is None:
0.30 /testbed/sympy/core/symbol.py(433):         if dummy_index is None:
0.30 /testbed/sympy/core/symbol.py(434):             dummy_index = Dummy._base_dummy_index + Dummy._count
0.30 /testbed/sympy/core/symbol.py(435):             Dummy._count += 1
0.30 /testbed/sympy/core/symbol.py(437):         cls._sanitize(assumptions, cls)
0.30 /testbed/sympy/core/symbol.py(260):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.30 /testbed/sympy/core/symbol.py(261):         if is_commutative is None:
0.30 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.30 /testbed/sympy/core/symbol.py(438):         obj = Symbol.__xnew__(cls, name, **assumptions)
0.30 /testbed/sympy/core/symbol.py(300):         if not isinstance(name, str):
0.30 /testbed/sympy/core/symbol.py(303):         obj = Expr.__new__(cls)
0.30 /testbed/sympy/core/symbol.py(304):         obj.name = name
0.30 /testbed/sympy/core/symbol.py(314):         tmp_asm_copy = assumptions.copy()
0.30 /testbed/sympy/core/symbol.py(317):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.30 /testbed/sympy/core/symbol.py(318):         assumptions['commutative'] = is_commutative
0.30 /testbed/sympy/core/symbol.py(319):         obj._assumptions = StdFactKB(assumptions)
0.30 /testbed/sympy/core/symbol.py(320):         obj._assumptions._generator = tmp_asm_copy  # Issue #8873
0.30 /testbed/sympy/core/symbol.py(321):         return obj
0.30 /testbed/sympy/core/symbol.py(440):         obj.dummy_index = dummy_index
0.30 /testbed/sympy/core/symbol.py(442):         return obj
0.30 /testbed/sympy/core/symbol.py(427):         if dummy_index is not None:
0.30 /testbed/sympy/core/symbol.py(430):         if name is None:
0.30 /testbed/sympy/core/symbol.py(433):         if dummy_index is None:
0.30 /testbed/sympy/core/symbol.py(434):             dummy_index = Dummy._base_dummy_index + Dummy._count
0.30 /testbed/sympy/core/symbol.py(435):             Dummy._count += 1
0.30 /testbed/sympy/core/symbol.py(437):         cls._sanitize(assumptions, cls)
0.30 /testbed/sympy/core/symbol.py(260):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.30 /testbed/sympy/core/symbol.py(261):         if is_commutative is None:
0.30 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.30 /testbed/sympy/core/symbol.py(438):         obj = Symbol.__xnew__(cls, name, **assumptions)
0.30 /testbed/sympy/core/symbol.py(300):         if not isinstance(name, str):
0.30 /testbed/sympy/core/symbol.py(303):         obj = Expr.__new__(cls)
0.30 /testbed/sympy/core/symbol.py(304):         obj.name = name
0.30 /testbed/sympy/core/symbol.py(314):         tmp_asm_copy = assumptions.copy()
0.30 /testbed/sympy/core/symbol.py(317):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.30 /testbed/sympy/core/symbol.py(318):         assumptions['commutative'] = is_commutative
0.30 /testbed/sympy/core/symbol.py(319):         obj._assumptions = StdFactKB(assumptions)
0.30 /testbed/sympy/core/symbol.py(320):         obj._assumptions._generator = tmp_asm_copy  # Issue #8873
0.30 /testbed/sympy/core/symbol.py(321):         return obj
0.30 /testbed/sympy/core/symbol.py(440):         obj.dummy_index = dummy_index
0.30 /testbed/sympy/core/symbol.py(442):         return obj
0.30 /testbed/sympy/core/symbol.py(427):         if dummy_index is not None:
0.30 /testbed/sympy/core/symbol.py(430):         if name is None:
0.30 /testbed/sympy/core/symbol.py(433):         if dummy_index is None:
0.30 /testbed/sympy/core/symbol.py(434):             dummy_index = Dummy._base_dummy_index + Dummy._count
0.30 /testbed/sympy/core/symbol.py(435):             Dummy._count += 1
0.30 /testbed/sympy/core/symbol.py(437):         cls._sanitize(assumptions, cls)
0.30 /testbed/sympy/core/symbol.py(260):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.30 /testbed/sympy/core/symbol.py(261):         if is_commutative is None:
0.30 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.30 /testbed/sympy/core/symbol.py(438):         obj = Symbol.__xnew__(cls, name, **assumptions)
0.30 /testbed/sympy/core/symbol.py(300):         if not isinstance(name, str):
0.30 /testbed/sympy/core/symbol.py(303):         obj = Expr.__new__(cls)
0.30 /testbed/sympy/core/symbol.py(304):         obj.name = name
0.30 /testbed/sympy/core/symbol.py(314):         tmp_asm_copy = assumptions.copy()
0.30 /testbed/sympy/core/symbol.py(317):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.30 /testbed/sympy/core/symbol.py(318):         assumptions['commutative'] = is_commutative
0.30 /testbed/sympy/core/symbol.py(319):         obj._assumptions = StdFactKB(assumptions)
0.30 /testbed/sympy/core/symbol.py(320):         obj._assumptions._generator = tmp_asm_copy  # Issue #8873
0.30 /testbed/sympy/core/symbol.py(321):         return obj
0.30 /testbed/sympy/core/symbol.py(440):         obj.dummy_index = dummy_index
0.30 /testbed/sympy/core/symbol.py(442):         return obj
0.30 /testbed/sympy/core/symbol.py(427):         if dummy_index is not None:
0.30 /testbed/sympy/core/symbol.py(430):         if name is None:
0.30 /testbed/sympy/core/symbol.py(433):         if dummy_index is None:
0.30 /testbed/sympy/core/symbol.py(434):             dummy_index = Dummy._base_dummy_index + Dummy._count
0.30 /testbed/sympy/core/symbol.py(435):             Dummy._count += 1
0.30 /testbed/sympy/core/symbol.py(437):         cls._sanitize(assumptions, cls)
0.30 /testbed/sympy/core/symbol.py(260):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.30 /testbed/sympy/core/symbol.py(261):         if is_commutative is None:
0.30 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.30 /testbed/sympy/core/symbol.py(438):         obj = Symbol.__xnew__(cls, name, **assumptions)
0.30 /testbed/sympy/core/symbol.py(300):         if not isinstance(name, str):
0.30 /testbed/sympy/core/symbol.py(303):         obj = Expr.__new__(cls)
0.30 /testbed/sympy/core/symbol.py(304):         obj.name = name
0.30 /testbed/sympy/core/symbol.py(314):         tmp_asm_copy = assumptions.copy()
0.30 /testbed/sympy/core/symbol.py(317):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.30 /testbed/sympy/core/symbol.py(318):         assumptions['commutative'] = is_commutative
0.30 /testbed/sympy/core/symbol.py(319):         obj._assumptions = StdFactKB(assumptions)
0.30 /testbed/sympy/core/symbol.py(320):         obj._assumptions._generator = tmp_asm_copy  # Issue #8873
0.30 /testbed/sympy/core/symbol.py(321):         return obj
0.30 /testbed/sympy/core/symbol.py(440):         obj.dummy_index = dummy_index
0.30 /testbed/sympy/core/symbol.py(442):         return obj
0.30 /testbed/sympy/core/symbol.py(427):         if dummy_index is not None:
0.30 /testbed/sympy/core/symbol.py(430):         if name is None:
0.30 /testbed/sympy/core/symbol.py(433):         if dummy_index is None:
0.30 /testbed/sympy/core/symbol.py(434):             dummy_index = Dummy._base_dummy_index + Dummy._count
0.30 /testbed/sympy/core/symbol.py(435):             Dummy._count += 1
0.30 /testbed/sympy/core/symbol.py(437):         cls._sanitize(assumptions, cls)
0.30 /testbed/sympy/core/symbol.py(260):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.30 /testbed/sympy/core/symbol.py(261):         if is_commutative is None:
0.30 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.30 /testbed/sympy/core/symbol.py(438):         obj = Symbol.__xnew__(cls, name, **assumptions)
0.30 /testbed/sympy/core/symbol.py(300):         if not isinstance(name, str):
0.30 /testbed/sympy/core/symbol.py(303):         obj = Expr.__new__(cls)
0.30 /testbed/sympy/core/symbol.py(304):         obj.name = name
0.30 /testbed/sympy/core/symbol.py(314):         tmp_asm_copy = assumptions.copy()
0.30 /testbed/sympy/core/symbol.py(317):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.30 /testbed/sympy/core/symbol.py(318):         assumptions['commutative'] = is_commutative
0.30 /testbed/sympy/core/symbol.py(319):         obj._assumptions = StdFactKB(assumptions)
0.30 /testbed/sympy/core/symbol.py(320):         obj._assumptions._generator = tmp_asm_copy  # Issue #8873
0.30 /testbed/sympy/core/symbol.py(321):         return obj
0.30 /testbed/sympy/core/symbol.py(440):         obj.dummy_index = dummy_index
0.30 /testbed/sympy/core/symbol.py(442):         return obj
0.30 /testbed/sympy/core/symbol.py(427):         if dummy_index is not None:
0.30 /testbed/sympy/core/symbol.py(430):         if name is None:
0.30 /testbed/sympy/core/symbol.py(433):         if dummy_index is None:
0.30 /testbed/sympy/core/symbol.py(434):             dummy_index = Dummy._base_dummy_index + Dummy._count
0.30 /testbed/sympy/core/symbol.py(435):             Dummy._count += 1
0.30 /testbed/sympy/core/symbol.py(437):         cls._sanitize(assumptions, cls)
0.30 /testbed/sympy/core/symbol.py(260):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.30 /testbed/sympy/core/symbol.py(261):         if is_commutative is None:
0.30 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.30 /testbed/sympy/core/symbol.py(438):         obj = Symbol.__xnew__(cls, name, **assumptions)
0.30 /testbed/sympy/core/symbol.py(300):         if not isinstance(name, str):
0.30 /testbed/sympy/core/symbol.py(303):         obj = Expr.__new__(cls)
0.30 /testbed/sympy/core/symbol.py(304):         obj.name = name
0.30 /testbed/sympy/core/symbol.py(314):         tmp_asm_copy = assumptions.copy()
0.30 /testbed/sympy/core/symbol.py(317):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.30 /testbed/sympy/core/symbol.py(318):         assumptions['commutative'] = is_commutative
0.30 /testbed/sympy/core/symbol.py(319):         obj._assumptions = StdFactKB(assumptions)
0.30 /testbed/sympy/core/symbol.py(320):         obj._assumptions._generator = tmp_asm_copy  # Issue #8873
0.30 /testbed/sympy/core/symbol.py(321):         return obj
0.30 /testbed/sympy/core/symbol.py(440):         obj.dummy_index = dummy_index
0.30 /testbed/sympy/core/symbol.py(442):         return obj
0.30 /testbed/sympy/core/symbol.py(427):         if dummy_index is not None:
0.30 /testbed/sympy/core/symbol.py(430):         if name is None:
0.30 /testbed/sympy/core/symbol.py(433):         if dummy_index is None:
0.30 /testbed/sympy/core/symbol.py(434):             dummy_index = Dummy._base_dummy_index + Dummy._count
0.30 /testbed/sympy/core/symbol.py(435):             Dummy._count += 1
0.30 /testbed/sympy/core/symbol.py(437):         cls._sanitize(assumptions, cls)
0.30 /testbed/sympy/core/symbol.py(260):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.30 /testbed/sympy/core/symbol.py(261):         if is_commutative is None:
0.30 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.30 /testbed/sympy/core/symbol.py(438):         obj = Symbol.__xnew__(cls, name, **assumptions)
0.30 /testbed/sympy/core/symbol.py(300):         if not isinstance(name, str):
0.30 /testbed/sympy/core/symbol.py(303):         obj = Expr.__new__(cls)
0.30 /testbed/sympy/core/symbol.py(304):         obj.name = name
0.30 /testbed/sympy/core/symbol.py(314):         tmp_asm_copy = assumptions.copy()
0.30 /testbed/sympy/core/symbol.py(317):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.30 /testbed/sympy/core/symbol.py(318):         assumptions['commutative'] = is_commutative
0.30 /testbed/sympy/core/symbol.py(319):         obj._assumptions = StdFactKB(assumptions)
0.30 /testbed/sympy/core/symbol.py(320):         obj._assumptions._generator = tmp_asm_copy  # Issue #8873
0.30 /testbed/sympy/core/symbol.py(321):         return obj
0.30 /testbed/sympy/core/symbol.py(440):         obj.dummy_index = dummy_index
0.30 /testbed/sympy/core/symbol.py(442):         return obj
0.30 /testbed/sympy/core/symbol.py(427):         if dummy_index is not None:
0.30 /testbed/sympy/core/symbol.py(430):         if name is None:
0.30 /testbed/sympy/core/symbol.py(433):         if dummy_index is None:
0.30 /testbed/sympy/core/symbol.py(434):             dummy_index = Dummy._base_dummy_index + Dummy._count
0.30 /testbed/sympy/core/symbol.py(435):             Dummy._count += 1
0.30 /testbed/sympy/core/symbol.py(437):         cls._sanitize(assumptions, cls)
0.30 /testbed/sympy/core/symbol.py(260):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.30 /testbed/sympy/core/symbol.py(261):         if is_commutative is None:
0.30 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.30 /testbed/sympy/core/symbol.py(438):         obj = Symbol.__xnew__(cls, name, **assumptions)
0.30 /testbed/sympy/core/symbol.py(300):         if not isinstance(name, str):
0.30 /testbed/sympy/core/symbol.py(303):         obj = Expr.__new__(cls)
0.30 /testbed/sympy/core/symbol.py(304):         obj.name = name
0.30 /testbed/sympy/core/symbol.py(314):         tmp_asm_copy = assumptions.copy()
0.30 /testbed/sympy/core/symbol.py(317):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.30 /testbed/sympy/core/symbol.py(318):         assumptions['commutative'] = is_commutative
0.30 /testbed/sympy/core/symbol.py(319):         obj._assumptions = StdFactKB(assumptions)
0.30 /testbed/sympy/core/symbol.py(320):         obj._assumptions._generator = tmp_asm_copy  # Issue #8873
0.30 /testbed/sympy/core/symbol.py(321):         return obj
0.30 /testbed/sympy/core/symbol.py(440):         obj.dummy_index = dummy_index
0.30 /testbed/sympy/core/symbol.py(442):         return obj
0.31 /testbed/sympy/core/symbol.py(427):         if dummy_index is not None:
0.31 /testbed/sympy/core/symbol.py(430):         if name is None:
0.31 /testbed/sympy/core/symbol.py(433):         if dummy_index is None:
0.31 /testbed/sympy/core/symbol.py(434):             dummy_index = Dummy._base_dummy_index + Dummy._count
0.31 /testbed/sympy/core/symbol.py(435):             Dummy._count += 1
0.31 /testbed/sympy/core/symbol.py(437):         cls._sanitize(assumptions, cls)
0.31 /testbed/sympy/core/symbol.py(260):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.31 /testbed/sympy/core/symbol.py(261):         if is_commutative is None:
0.31 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.31 /testbed/sympy/core/symbol.py(268):             v = assumptions[key]
0.31 /testbed/sympy/core/symbol.py(269):             if v is None:
0.31 /testbed/sympy/core/symbol.py(272):             assumptions[key] = bool(v)
0.31 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.31 /testbed/sympy/core/symbol.py(438):         obj = Symbol.__xnew__(cls, name, **assumptions)
0.31 /testbed/sympy/core/symbol.py(300):         if not isinstance(name, str):
0.31 /testbed/sympy/core/symbol.py(303):         obj = Expr.__new__(cls)
0.31 /testbed/sympy/core/symbol.py(304):         obj.name = name
0.31 /testbed/sympy/core/symbol.py(314):         tmp_asm_copy = assumptions.copy()
0.31 /testbed/sympy/core/symbol.py(317):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.31 /testbed/sympy/core/symbol.py(318):         assumptions['commutative'] = is_commutative
0.31 /testbed/sympy/core/symbol.py(319):         obj._assumptions = StdFactKB(assumptions)
0.31 /testbed/sympy/core/symbol.py(320):         obj._assumptions._generator = tmp_asm_copy  # Issue #8873
0.31 /testbed/sympy/core/symbol.py(321):         return obj
0.31 /testbed/sympy/core/symbol.py(440):         obj.dummy_index = dummy_index
0.31 /testbed/sympy/core/symbol.py(442):         return obj
0.31 /testbed/sympy/core/symbol.py(427):         if dummy_index is not None:
0.31 /testbed/sympy/core/symbol.py(430):         if name is None:
0.31 /testbed/sympy/core/symbol.py(433):         if dummy_index is None:
0.31 /testbed/sympy/core/symbol.py(434):             dummy_index = Dummy._base_dummy_index + Dummy._count
0.31 /testbed/sympy/core/symbol.py(435):             Dummy._count += 1
0.31 /testbed/sympy/core/symbol.py(437):         cls._sanitize(assumptions, cls)
0.31 /testbed/sympy/core/symbol.py(260):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.31 /testbed/sympy/core/symbol.py(261):         if is_commutative is None:
0.31 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.31 /testbed/sympy/core/symbol.py(268):             v = assumptions[key]
0.31 /testbed/sympy/core/symbol.py(269):             if v is None:
0.31 /testbed/sympy/core/symbol.py(272):             assumptions[key] = bool(v)
0.31 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.31 /testbed/sympy/core/symbol.py(438):         obj = Symbol.__xnew__(cls, name, **assumptions)
0.31 /testbed/sympy/core/symbol.py(300):         if not isinstance(name, str):
0.31 /testbed/sympy/core/symbol.py(303):         obj = Expr.__new__(cls)
0.31 /testbed/sympy/core/symbol.py(304):         obj.name = name
0.31 /testbed/sympy/core/symbol.py(314):         tmp_asm_copy = assumptions.copy()
0.31 /testbed/sympy/core/symbol.py(317):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.31 /testbed/sympy/core/symbol.py(318):         assumptions['commutative'] = is_commutative
0.31 /testbed/sympy/core/symbol.py(319):         obj._assumptions = StdFactKB(assumptions)
0.31 /testbed/sympy/core/symbol.py(320):         obj._assumptions._generator = tmp_asm_copy  # Issue #8873
0.31 /testbed/sympy/core/symbol.py(321):         return obj
0.31 /testbed/sympy/core/symbol.py(440):         obj.dummy_index = dummy_index
0.31 /testbed/sympy/core/symbol.py(442):         return obj
0.31 /testbed/sympy/core/symbol.py(702):     result = []
0.31 /testbed/sympy/core/symbol.py(704):     if isinstance(names, str):
0.31 /testbed/sympy/core/symbol.py(705):         marker = 0
0.31 /testbed/sympy/core/symbol.py(706):         splitters = r'\,', r'\:', r'\ '
0.31 /testbed/sympy/core/symbol.py(707):         literals: list[tuple[str, str]] = []
0.31 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.31 /testbed/sympy/core/symbol.py(709):             if splitter in names:
0.31 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.31 /testbed/sympy/core/symbol.py(709):             if splitter in names:
0.31 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.31 /testbed/sympy/core/symbol.py(709):             if splitter in names:
0.31 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.31 /testbed/sympy/core/symbol.py(716):         def literal(s):
0.31 /testbed/sympy/core/symbol.py(722):         names = names.strip()
0.31 /testbed/sympy/core/symbol.py(723):         as_seq = names.endswith(',')
0.31 /testbed/sympy/core/symbol.py(724):         if as_seq:
0.31 /testbed/sympy/core/symbol.py(726):         if not names:
0.31 /testbed/sympy/core/symbol.py(730):         names = [n.strip() for n in names.split(',')]
0.31 /testbed/sympy/core/symbol.py(730):         names = [n.strip() for n in names.split(',')]
0.31 /testbed/sympy/core/symbol.py(730):         names = [n.strip() for n in names.split(',')]
0.31 /testbed/sympy/core/symbol.py(731):         if not all(n for n in names):
0.31 /testbed/sympy/core/symbol.py(731):         if not all(n for n in names):
0.31 /testbed/sympy/core/symbol.py(731):         if not all(n for n in names):
0.31 /testbed/sympy/core/symbol.py(734):         for i in range(len(names) - 1, -1, -1):
0.31 /testbed/sympy/core/symbol.py(735):             names[i: i + 1] = names[i].split()
0.31 /testbed/sympy/core/symbol.py(734):         for i in range(len(names) - 1, -1, -1):
0.31 /testbed/sympy/core/symbol.py(737):         seq = args.pop('seq', as_seq)
0.31 /testbed/sympy/core/symbol.py(739):         for name in names:
0.31 /testbed/sympy/core/symbol.py(740):             if not name:
0.31 /testbed/sympy/core/symbol.py(743):             if ':' not in name:
0.31 /testbed/sympy/core/symbol.py(744):                 symbol = cls(literal(name), **args)
0.31 /testbed/sympy/core/symbol.py(717):             if literals:
0.31 /testbed/sympy/core/symbol.py(720):             return s
0.31 /testbed/sympy/core/symbol.py(295):         cls._sanitize(assumptions, cls)
0.31 /testbed/sympy/core/symbol.py(260):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.31 /testbed/sympy/core/symbol.py(261):         if is_commutative is None:
0.31 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.31 /testbed/sympy/core/symbol.py(268):             v = assumptions[key]
0.31 /testbed/sympy/core/symbol.py(269):             if v is None:
0.31 /testbed/sympy/core/symbol.py(272):             assumptions[key] = bool(v)
0.31 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.31 /testbed/sympy/core/symbol.py(296):         return Symbol.__xnew_cached_(cls, name, **assumptions)
0.31 /testbed/sympy/core/symbol.py(326):         return Symbol.__xnew__(cls, name, **assumptions)
0.31 /testbed/sympy/core/symbol.py(300):         if not isinstance(name, str):
0.31 /testbed/sympy/core/symbol.py(303):         obj = Expr.__new__(cls)
0.31 /testbed/sympy/core/symbol.py(304):         obj.name = name
0.31 /testbed/sympy/core/symbol.py(314):         tmp_asm_copy = assumptions.copy()
0.31 /testbed/sympy/core/symbol.py(317):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.31 /testbed/sympy/core/symbol.py(318):         assumptions['commutative'] = is_commutative
0.31 /testbed/sympy/core/symbol.py(319):         obj._assumptions = StdFactKB(assumptions)
0.31 /testbed/sympy/core/symbol.py(320):         obj._assumptions._generator = tmp_asm_copy  # Issue #8873
0.31 /testbed/sympy/core/symbol.py(321):         return obj
0.31 /testbed/sympy/core/symbol.py(745):                 result.append(symbol)
0.31 /testbed/sympy/core/symbol.py(746):                 continue
0.31 /testbed/sympy/core/symbol.py(739):         for name in names:
0.31 /testbed/sympy/core/symbol.py(786):         if not seq and len(result) <= 1:
0.31 /testbed/sympy/core/symbol.py(787):             if not result:
0.31 /testbed/sympy/core/symbol.py(789):             return result[0]
0.31 /testbed/sympy/core/symbol.py(702):     result = []
0.31 /testbed/sympy/core/symbol.py(704):     if isinstance(names, str):
0.31 /testbed/sympy/core/symbol.py(705):         marker = 0
0.31 /testbed/sympy/core/symbol.py(706):         splitters = r'\,', r'\:', r'\ '
0.31 /testbed/sympy/core/symbol.py(707):         literals: list[tuple[str, str]] = []
0.31 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.31 /testbed/sympy/core/symbol.py(709):             if splitter in names:
0.31 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.31 /testbed/sympy/core/symbol.py(709):             if splitter in names:
0.31 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.31 /testbed/sympy/core/symbol.py(709):             if splitter in names:
0.31 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.31 /testbed/sympy/core/symbol.py(716):         def literal(s):
0.31 /testbed/sympy/core/symbol.py(722):         names = names.strip()
0.31 /testbed/sympy/core/symbol.py(723):         as_seq = names.endswith(',')
0.31 /testbed/sympy/core/symbol.py(724):         if as_seq:
0.31 /testbed/sympy/core/symbol.py(726):         if not names:
0.31 /testbed/sympy/core/symbol.py(730):         names = [n.strip() for n in names.split(',')]
0.31 /testbed/sympy/core/symbol.py(730):         names = [n.strip() for n in names.split(',')]
0.31 /testbed/sympy/core/symbol.py(730):         names = [n.strip() for n in names.split(',')]
0.31 /testbed/sympy/core/symbol.py(731):         if not all(n for n in names):
0.31 /testbed/sympy/core/symbol.py(731):         if not all(n for n in names):
0.31 /testbed/sympy/core/symbol.py(731):         if not all(n for n in names):
0.31 /testbed/sympy/core/symbol.py(734):         for i in range(len(names) - 1, -1, -1):
0.31 /testbed/sympy/core/symbol.py(735):             names[i: i + 1] = names[i].split()
0.31 /testbed/sympy/core/symbol.py(734):         for i in range(len(names) - 1, -1, -1):
0.31 /testbed/sympy/core/symbol.py(737):         seq = args.pop('seq', as_seq)
0.31 /testbed/sympy/core/symbol.py(739):         for name in names:
0.31 /testbed/sympy/core/symbol.py(740):             if not name:
0.31 /testbed/sympy/core/symbol.py(743):             if ':' not in name:
0.31 /testbed/sympy/core/symbol.py(744):                 symbol = cls(literal(name), **args)
0.31 /testbed/sympy/core/symbol.py(717):             if literals:
0.31 /testbed/sympy/core/symbol.py(720):             return s
0.31 /testbed/sympy/core/symbol.py(295):         cls._sanitize(assumptions, cls)
0.31 /testbed/sympy/core/symbol.py(260):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.31 /testbed/sympy/core/symbol.py(261):         if is_commutative is None:
0.31 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.31 /testbed/sympy/core/symbol.py(268):             v = assumptions[key]
0.31 /testbed/sympy/core/symbol.py(269):             if v is None:
0.31 /testbed/sympy/core/symbol.py(272):             assumptions[key] = bool(v)
0.31 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.31 /testbed/sympy/core/symbol.py(296):         return Symbol.__xnew_cached_(cls, name, **assumptions)
0.31 /testbed/sympy/core/symbol.py(326):         return Symbol.__xnew__(cls, name, **assumptions)
0.31 /testbed/sympy/core/symbol.py(300):         if not isinstance(name, str):
0.31 /testbed/sympy/core/symbol.py(303):         obj = Expr.__new__(cls)
0.31 /testbed/sympy/core/symbol.py(304):         obj.name = name
0.31 /testbed/sympy/core/symbol.py(314):         tmp_asm_copy = assumptions.copy()
0.31 /testbed/sympy/core/symbol.py(317):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.31 /testbed/sympy/core/symbol.py(318):         assumptions['commutative'] = is_commutative
0.31 /testbed/sympy/core/symbol.py(319):         obj._assumptions = StdFactKB(assumptions)
0.31 /testbed/sympy/core/symbol.py(320):         obj._assumptions._generator = tmp_asm_copy  # Issue #8873
0.31 /testbed/sympy/core/symbol.py(321):         return obj
0.31 /testbed/sympy/core/symbol.py(745):                 result.append(symbol)
0.31 /testbed/sympy/core/symbol.py(746):                 continue
0.31 /testbed/sympy/core/symbol.py(739):         for name in names:
0.31 /testbed/sympy/core/symbol.py(786):         if not seq and len(result) <= 1:
0.31 /testbed/sympy/core/symbol.py(787):             if not result:
0.31 /testbed/sympy/core/symbol.py(789):             return result[0]
0.31 /testbed/sympy/core/symbol.py(702):     result = []
0.31 /testbed/sympy/core/symbol.py(704):     if isinstance(names, str):
0.31 /testbed/sympy/core/symbol.py(705):         marker = 0
0.31 /testbed/sympy/core/symbol.py(706):         splitters = r'\,', r'\:', r'\ '
0.31 /testbed/sympy/core/symbol.py(707):         literals: list[tuple[str, str]] = []
0.31 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.31 /testbed/sympy/core/symbol.py(709):             if splitter in names:
0.31 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.31 /testbed/sympy/core/symbol.py(709):             if splitter in names:
0.31 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.31 /testbed/sympy/core/symbol.py(709):             if splitter in names:
0.31 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.31 /testbed/sympy/core/symbol.py(716):         def literal(s):
0.31 /testbed/sympy/core/symbol.py(722):         names = names.strip()
0.31 /testbed/sympy/core/symbol.py(723):         as_seq = names.endswith(',')
0.31 /testbed/sympy/core/symbol.py(724):         if as_seq:
0.31 /testbed/sympy/core/symbol.py(726):         if not names:
0.31 /testbed/sympy/core/symbol.py(730):         names = [n.strip() for n in names.split(',')]
0.31 /testbed/sympy/core/symbol.py(730):         names = [n.strip() for n in names.split(',')]
0.31 /testbed/sympy/core/symbol.py(730):         names = [n.strip() for n in names.split(',')]
0.31 /testbed/sympy/core/symbol.py(731):         if not all(n for n in names):
0.31 /testbed/sympy/core/symbol.py(731):         if not all(n for n in names):
0.31 /testbed/sympy/core/symbol.py(731):         if not all(n for n in names):
0.31 /testbed/sympy/core/symbol.py(734):         for i in range(len(names) - 1, -1, -1):
0.31 /testbed/sympy/core/symbol.py(735):             names[i: i + 1] = names[i].split()
0.31 /testbed/sympy/core/symbol.py(734):         for i in range(len(names) - 1, -1, -1):
0.31 /testbed/sympy/core/symbol.py(737):         seq = args.pop('seq', as_seq)
0.31 /testbed/sympy/core/symbol.py(739):         for name in names:
0.31 /testbed/sympy/core/symbol.py(740):             if not name:
0.31 /testbed/sympy/core/symbol.py(743):             if ':' not in name:
0.31 /testbed/sympy/core/symbol.py(744):                 symbol = cls(literal(name), **args)
0.31 /testbed/sympy/core/symbol.py(717):             if literals:
0.31 /testbed/sympy/core/symbol.py(720):             return s
0.31 /testbed/sympy/core/symbol.py(295):         cls._sanitize(assumptions, cls)
0.31 /testbed/sympy/core/symbol.py(260):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.31 /testbed/sympy/core/symbol.py(261):         if is_commutative is None:
0.31 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.31 /testbed/sympy/core/symbol.py(268):             v = assumptions[key]
0.31 /testbed/sympy/core/symbol.py(269):             if v is None:
0.31 /testbed/sympy/core/symbol.py(272):             assumptions[key] = bool(v)
0.31 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.31 /testbed/sympy/core/symbol.py(296):         return Symbol.__xnew_cached_(cls, name, **assumptions)
0.31 /testbed/sympy/core/symbol.py(326):         return Symbol.__xnew__(cls, name, **assumptions)
0.31 /testbed/sympy/core/symbol.py(300):         if not isinstance(name, str):
0.31 /testbed/sympy/core/symbol.py(303):         obj = Expr.__new__(cls)
0.31 /testbed/sympy/core/symbol.py(304):         obj.name = name
0.31 /testbed/sympy/core/symbol.py(314):         tmp_asm_copy = assumptions.copy()
0.31 /testbed/sympy/core/symbol.py(317):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.31 /testbed/sympy/core/symbol.py(318):         assumptions['commutative'] = is_commutative
0.31 /testbed/sympy/core/symbol.py(319):         obj._assumptions = StdFactKB(assumptions)
0.31 /testbed/sympy/core/symbol.py(320):         obj._assumptions._generator = tmp_asm_copy  # Issue #8873
0.31 /testbed/sympy/core/symbol.py(321):         return obj
0.31 /testbed/sympy/core/symbol.py(745):                 result.append(symbol)
0.31 /testbed/sympy/core/symbol.py(746):                 continue
0.31 /testbed/sympy/core/symbol.py(739):         for name in names:
0.31 /testbed/sympy/core/symbol.py(786):         if not seq and len(result) <= 1:
0.31 /testbed/sympy/core/symbol.py(787):             if not result:
0.31 /testbed/sympy/core/symbol.py(789):             return result[0]
0.31 /testbed/sympy/core/symbol.py(702):     result = []
0.31 /testbed/sympy/core/symbol.py(704):     if isinstance(names, str):
0.31 /testbed/sympy/core/symbol.py(705):         marker = 0
0.31 /testbed/sympy/core/symbol.py(706):         splitters = r'\,', r'\:', r'\ '
0.31 /testbed/sympy/core/symbol.py(707):         literals: list[tuple[str, str]] = []
0.31 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.31 /testbed/sympy/core/symbol.py(709):             if splitter in names:
0.31 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.31 /testbed/sympy/core/symbol.py(709):             if splitter in names:
0.31 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.31 /testbed/sympy/core/symbol.py(709):             if splitter in names:
0.31 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.31 /testbed/sympy/core/symbol.py(716):         def literal(s):
0.31 /testbed/sympy/core/symbol.py(722):         names = names.strip()
0.31 /testbed/sympy/core/symbol.py(723):         as_seq = names.endswith(',')
0.31 /testbed/sympy/core/symbol.py(724):         if as_seq:
0.31 /testbed/sympy/core/symbol.py(726):         if not names:
0.31 /testbed/sympy/core/symbol.py(730):         names = [n.strip() for n in names.split(',')]
0.31 /testbed/sympy/core/symbol.py(730):         names = [n.strip() for n in names.split(',')]
0.31 /testbed/sympy/core/symbol.py(730):         names = [n.strip() for n in names.split(',')]
0.31 /testbed/sympy/core/symbol.py(731):         if not all(n for n in names):
0.31 /testbed/sympy/core/symbol.py(731):         if not all(n for n in names):
0.31 /testbed/sympy/core/symbol.py(731):         if not all(n for n in names):
0.31 /testbed/sympy/core/symbol.py(734):         for i in range(len(names) - 1, -1, -1):
0.31 /testbed/sympy/core/symbol.py(735):             names[i: i + 1] = names[i].split()
0.31 /testbed/sympy/core/symbol.py(734):         for i in range(len(names) - 1, -1, -1):
0.31 /testbed/sympy/core/symbol.py(737):         seq = args.pop('seq', as_seq)
0.31 /testbed/sympy/core/symbol.py(739):         for name in names:
0.31 /testbed/sympy/core/symbol.py(740):             if not name:
0.31 /testbed/sympy/core/symbol.py(743):             if ':' not in name:
0.31 /testbed/sympy/core/symbol.py(744):                 symbol = cls(literal(name), **args)
0.31 /testbed/sympy/core/symbol.py(717):             if literals:
0.31 /testbed/sympy/core/symbol.py(720):             return s
0.31 /testbed/sympy/core/symbol.py(295):         cls._sanitize(assumptions, cls)
0.31 /testbed/sympy/core/symbol.py(260):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.31 /testbed/sympy/core/symbol.py(261):         if is_commutative is None:
0.31 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.31 /testbed/sympy/core/symbol.py(268):             v = assumptions[key]
0.31 /testbed/sympy/core/symbol.py(269):             if v is None:
0.31 /testbed/sympy/core/symbol.py(272):             assumptions[key] = bool(v)
0.31 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.31 /testbed/sympy/core/symbol.py(296):         return Symbol.__xnew_cached_(cls, name, **assumptions)
0.31 /testbed/sympy/core/symbol.py(326):         return Symbol.__xnew__(cls, name, **assumptions)
0.31 /testbed/sympy/core/symbol.py(300):         if not isinstance(name, str):
0.31 /testbed/sympy/core/symbol.py(303):         obj = Expr.__new__(cls)
0.31 /testbed/sympy/core/symbol.py(304):         obj.name = name
0.31 /testbed/sympy/core/symbol.py(314):         tmp_asm_copy = assumptions.copy()
0.31 /testbed/sympy/core/symbol.py(317):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.31 /testbed/sympy/core/symbol.py(318):         assumptions['commutative'] = is_commutative
0.31 /testbed/sympy/core/symbol.py(319):         obj._assumptions = StdFactKB(assumptions)
0.31 /testbed/sympy/core/symbol.py(320):         obj._assumptions._generator = tmp_asm_copy  # Issue #8873
0.31 /testbed/sympy/core/symbol.py(321):         return obj
0.31 /testbed/sympy/core/symbol.py(745):                 result.append(symbol)
0.31 /testbed/sympy/core/symbol.py(746):                 continue
0.31 /testbed/sympy/core/symbol.py(739):         for name in names:
0.31 /testbed/sympy/core/symbol.py(786):         if not seq and len(result) <= 1:
0.31 /testbed/sympy/core/symbol.py(787):             if not result:
0.31 /testbed/sympy/core/symbol.py(789):             return result[0]
0.31 /testbed/sympy/core/symbol.py(702):     result = []
0.31 /testbed/sympy/core/symbol.py(704):     if isinstance(names, str):
0.31 /testbed/sympy/core/symbol.py(705):         marker = 0
0.31 /testbed/sympy/core/symbol.py(706):         splitters = r'\,', r'\:', r'\ '
0.31 /testbed/sympy/core/symbol.py(707):         literals: list[tuple[str, str]] = []
0.31 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.31 /testbed/sympy/core/symbol.py(709):             if splitter in names:
0.31 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.31 /testbed/sympy/core/symbol.py(709):             if splitter in names:
0.31 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.31 /testbed/sympy/core/symbol.py(709):             if splitter in names:
0.31 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.31 /testbed/sympy/core/symbol.py(716):         def literal(s):
0.31 /testbed/sympy/core/symbol.py(722):         names = names.strip()
0.31 /testbed/sympy/core/symbol.py(723):         as_seq = names.endswith(',')
0.31 /testbed/sympy/core/symbol.py(724):         if as_seq:
0.31 /testbed/sympy/core/symbol.py(726):         if not names:
0.31 /testbed/sympy/core/symbol.py(730):         names = [n.strip() for n in names.split(',')]
0.31 /testbed/sympy/core/symbol.py(730):         names = [n.strip() for n in names.split(',')]
0.31 /testbed/sympy/core/symbol.py(730):         names = [n.strip() for n in names.split(',')]
0.31 /testbed/sympy/core/symbol.py(731):         if not all(n for n in names):
0.31 /testbed/sympy/core/symbol.py(731):         if not all(n for n in names):
0.31 /testbed/sympy/core/symbol.py(731):         if not all(n for n in names):
0.31 /testbed/sympy/core/symbol.py(734):         for i in range(len(names) - 1, -1, -1):
0.31 /testbed/sympy/core/symbol.py(735):             names[i: i + 1] = names[i].split()
0.31 /testbed/sympy/core/symbol.py(734):         for i in range(len(names) - 1, -1, -1):
0.31 /testbed/sympy/core/symbol.py(737):         seq = args.pop('seq', as_seq)
0.31 /testbed/sympy/core/symbol.py(739):         for name in names:
0.31 /testbed/sympy/core/symbol.py(740):             if not name:
0.31 /testbed/sympy/core/symbol.py(743):             if ':' not in name:
0.31 /testbed/sympy/core/symbol.py(744):                 symbol = cls(literal(name), **args)
0.31 /testbed/sympy/core/symbol.py(717):             if literals:
0.31 /testbed/sympy/core/symbol.py(720):             return s
0.31 /testbed/sympy/core/symbol.py(295):         cls._sanitize(assumptions, cls)
0.31 /testbed/sympy/core/symbol.py(260):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.31 /testbed/sympy/core/symbol.py(261):         if is_commutative is None:
0.31 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.31 /testbed/sympy/core/symbol.py(268):             v = assumptions[key]
0.31 /testbed/sympy/core/symbol.py(269):             if v is None:
0.31 /testbed/sympy/core/symbol.py(272):             assumptions[key] = bool(v)
0.31 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.31 /testbed/sympy/core/symbol.py(296):         return Symbol.__xnew_cached_(cls, name, **assumptions)
0.31 /testbed/sympy/core/symbol.py(326):         return Symbol.__xnew__(cls, name, **assumptions)
0.31 /testbed/sympy/core/symbol.py(300):         if not isinstance(name, str):
0.31 /testbed/sympy/core/symbol.py(303):         obj = Expr.__new__(cls)
0.31 /testbed/sympy/core/symbol.py(304):         obj.name = name
0.31 /testbed/sympy/core/symbol.py(314):         tmp_asm_copy = assumptions.copy()
0.31 /testbed/sympy/core/symbol.py(317):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.31 /testbed/sympy/core/symbol.py(318):         assumptions['commutative'] = is_commutative
0.31 /testbed/sympy/core/symbol.py(319):         obj._assumptions = StdFactKB(assumptions)
0.31 /testbed/sympy/core/symbol.py(320):         obj._assumptions._generator = tmp_asm_copy  # Issue #8873
0.31 /testbed/sympy/core/symbol.py(321):         return obj
0.31 /testbed/sympy/core/symbol.py(745):                 result.append(symbol)
0.31 /testbed/sympy/core/symbol.py(746):                 continue
0.31 /testbed/sympy/core/symbol.py(739):         for name in names:
0.31 /testbed/sympy/core/symbol.py(786):         if not seq and len(result) <= 1:
0.31 /testbed/sympy/core/symbol.py(787):             if not result:
0.31 /testbed/sympy/core/symbol.py(789):             return result[0]
0.31 /testbed/sympy/core/symbol.py(702):     result = []
0.31 /testbed/sympy/core/symbol.py(704):     if isinstance(names, str):
0.31 /testbed/sympy/core/symbol.py(705):         marker = 0
0.31 /testbed/sympy/core/symbol.py(706):         splitters = r'\,', r'\:', r'\ '
0.31 /testbed/sympy/core/symbol.py(707):         literals: list[tuple[str, str]] = []
0.31 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.31 /testbed/sympy/core/symbol.py(709):             if splitter in names:
0.31 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.31 /testbed/sympy/core/symbol.py(709):             if splitter in names:
0.31 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.31 /testbed/sympy/core/symbol.py(709):             if splitter in names:
0.31 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.31 /testbed/sympy/core/symbol.py(716):         def literal(s):
0.31 /testbed/sympy/core/symbol.py(722):         names = names.strip()
0.31 /testbed/sympy/core/symbol.py(723):         as_seq = names.endswith(',')
0.31 /testbed/sympy/core/symbol.py(724):         if as_seq:
0.31 /testbed/sympy/core/symbol.py(726):         if not names:
0.31 /testbed/sympy/core/symbol.py(730):         names = [n.strip() for n in names.split(',')]
0.31 /testbed/sympy/core/symbol.py(730):         names = [n.strip() for n in names.split(',')]
0.31 /testbed/sympy/core/symbol.py(730):         names = [n.strip() for n in names.split(',')]
0.31 /testbed/sympy/core/symbol.py(731):         if not all(n for n in names):
0.31 /testbed/sympy/core/symbol.py(731):         if not all(n for n in names):
0.31 /testbed/sympy/core/symbol.py(731):         if not all(n for n in names):
0.31 /testbed/sympy/core/symbol.py(734):         for i in range(len(names) - 1, -1, -1):
0.31 /testbed/sympy/core/symbol.py(735):             names[i: i + 1] = names[i].split()
0.31 /testbed/sympy/core/symbol.py(734):         for i in range(len(names) - 1, -1, -1):
0.31 /testbed/sympy/core/symbol.py(737):         seq = args.pop('seq', as_seq)
0.31 /testbed/sympy/core/symbol.py(739):         for name in names:
0.31 /testbed/sympy/core/symbol.py(740):             if not name:
0.31 /testbed/sympy/core/symbol.py(743):             if ':' not in name:
0.31 /testbed/sympy/core/symbol.py(744):                 symbol = cls(literal(name), **args)
0.31 /testbed/sympy/core/symbol.py(717):             if literals:
0.31 /testbed/sympy/core/symbol.py(720):             return s
0.31 /testbed/sympy/core/symbol.py(295):         cls._sanitize(assumptions, cls)
0.31 /testbed/sympy/core/symbol.py(260):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.31 /testbed/sympy/core/symbol.py(261):         if is_commutative is None:
0.31 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.31 /testbed/sympy/core/symbol.py(268):             v = assumptions[key]
0.31 /testbed/sympy/core/symbol.py(269):             if v is None:
0.31 /testbed/sympy/core/symbol.py(272):             assumptions[key] = bool(v)
0.31 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.31 /testbed/sympy/core/symbol.py(296):         return Symbol.__xnew_cached_(cls, name, **assumptions)
0.31 /testbed/sympy/core/symbol.py(326):         return Symbol.__xnew__(cls, name, **assumptions)
0.31 /testbed/sympy/core/symbol.py(300):         if not isinstance(name, str):
0.31 /testbed/sympy/core/symbol.py(303):         obj = Expr.__new__(cls)
0.31 /testbed/sympy/core/symbol.py(304):         obj.name = name
0.31 /testbed/sympy/core/symbol.py(314):         tmp_asm_copy = assumptions.copy()
0.31 /testbed/sympy/core/symbol.py(317):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.31 /testbed/sympy/core/symbol.py(318):         assumptions['commutative'] = is_commutative
0.31 /testbed/sympy/core/symbol.py(319):         obj._assumptions = StdFactKB(assumptions)
0.31 /testbed/sympy/core/symbol.py(320):         obj._assumptions._generator = tmp_asm_copy  # Issue #8873
0.31 /testbed/sympy/core/symbol.py(321):         return obj
0.31 /testbed/sympy/core/symbol.py(745):                 result.append(symbol)
0.31 /testbed/sympy/core/symbol.py(746):                 continue
0.31 /testbed/sympy/core/symbol.py(739):         for name in names:
0.31 /testbed/sympy/core/symbol.py(786):         if not seq and len(result) <= 1:
0.31 /testbed/sympy/core/symbol.py(787):             if not result:
0.31 /testbed/sympy/core/symbol.py(789):             return result[0]
0.31 /testbed/sympy/core/symbol.py(702):     result = []
0.31 /testbed/sympy/core/symbol.py(704):     if isinstance(names, str):
0.31 /testbed/sympy/core/symbol.py(705):         marker = 0
0.31 /testbed/sympy/core/symbol.py(706):         splitters = r'\,', r'\:', r'\ '
0.31 /testbed/sympy/core/symbol.py(707):         literals: list[tuple[str, str]] = []
0.31 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.31 /testbed/sympy/core/symbol.py(709):             if splitter in names:
0.31 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.31 /testbed/sympy/core/symbol.py(709):             if splitter in names:
0.31 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.31 /testbed/sympy/core/symbol.py(709):             if splitter in names:
0.31 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.31 /testbed/sympy/core/symbol.py(716):         def literal(s):
0.31 /testbed/sympy/core/symbol.py(722):         names = names.strip()
0.31 /testbed/sympy/core/symbol.py(723):         as_seq = names.endswith(',')
0.31 /testbed/sympy/core/symbol.py(724):         if as_seq:
0.31 /testbed/sympy/core/symbol.py(726):         if not names:
0.31 /testbed/sympy/core/symbol.py(730):         names = [n.strip() for n in names.split(',')]
0.31 /testbed/sympy/core/symbol.py(730):         names = [n.strip() for n in names.split(',')]
0.31 /testbed/sympy/core/symbol.py(730):         names = [n.strip() for n in names.split(',')]
0.31 /testbed/sympy/core/symbol.py(731):         if not all(n for n in names):
0.31 /testbed/sympy/core/symbol.py(731):         if not all(n for n in names):
0.31 /testbed/sympy/core/symbol.py(731):         if not all(n for n in names):
0.31 /testbed/sympy/core/symbol.py(734):         for i in range(len(names) - 1, -1, -1):
0.31 /testbed/sympy/core/symbol.py(735):             names[i: i + 1] = names[i].split()
0.31 /testbed/sympy/core/symbol.py(734):         for i in range(len(names) - 1, -1, -1):
0.31 /testbed/sympy/core/symbol.py(737):         seq = args.pop('seq', as_seq)
0.31 /testbed/sympy/core/symbol.py(739):         for name in names:
0.31 /testbed/sympy/core/symbol.py(740):             if not name:
0.31 /testbed/sympy/core/symbol.py(743):             if ':' not in name:
0.31 /testbed/sympy/core/symbol.py(744):                 symbol = cls(literal(name), **args)
0.31 /testbed/sympy/core/symbol.py(717):             if literals:
0.31 /testbed/sympy/core/symbol.py(720):             return s
0.31 /testbed/sympy/core/symbol.py(295):         cls._sanitize(assumptions, cls)
0.31 /testbed/sympy/core/symbol.py(260):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.31 /testbed/sympy/core/symbol.py(261):         if is_commutative is None:
0.31 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.31 /testbed/sympy/core/symbol.py(268):             v = assumptions[key]
0.31 /testbed/sympy/core/symbol.py(269):             if v is None:
0.31 /testbed/sympy/core/symbol.py(272):             assumptions[key] = bool(v)
0.31 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.31 /testbed/sympy/core/symbol.py(296):         return Symbol.__xnew_cached_(cls, name, **assumptions)
0.31 /testbed/sympy/core/symbol.py(326):         return Symbol.__xnew__(cls, name, **assumptions)
0.31 /testbed/sympy/core/symbol.py(300):         if not isinstance(name, str):
0.31 /testbed/sympy/core/symbol.py(303):         obj = Expr.__new__(cls)
0.31 /testbed/sympy/core/symbol.py(304):         obj.name = name
0.31 /testbed/sympy/core/symbol.py(314):         tmp_asm_copy = assumptions.copy()
0.31 /testbed/sympy/core/symbol.py(317):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.31 /testbed/sympy/core/symbol.py(318):         assumptions['commutative'] = is_commutative
0.31 /testbed/sympy/core/symbol.py(319):         obj._assumptions = StdFactKB(assumptions)
0.31 /testbed/sympy/core/symbol.py(320):         obj._assumptions._generator = tmp_asm_copy  # Issue #8873
0.31 /testbed/sympy/core/symbol.py(321):         return obj
0.31 /testbed/sympy/core/symbol.py(745):                 result.append(symbol)
0.31 /testbed/sympy/core/symbol.py(746):                 continue
0.31 /testbed/sympy/core/symbol.py(739):         for name in names:
0.31 /testbed/sympy/core/symbol.py(786):         if not seq and len(result) <= 1:
0.31 /testbed/sympy/core/symbol.py(787):             if not result:
0.31 /testbed/sympy/core/symbol.py(789):             return result[0]
============================= test process starts ==============================
executable:         /opt/miniconda3/envs/testbed/bin/python3  (3.9.23-final-0) [CPython]
architecture:       64-bit
cache:              no
ground types:       python 
numpy:              None
random seed:        8670103
hash randomization: on (PYTHONHASHSEED=4241298650)

sympy/polys/tests/test_coverup_sympy__sympy-23534.py[1] 
test_symbols_with_extra_parentheses 0.38 /testbed/sympy/core/symbol.py(702):     result = []
0.38 /testbed/sympy/core/symbol.py(704):     if isinstance(names, str):
0.38 /testbed/sympy/core/symbol.py(793):         for name in names:
0.38 /testbed/sympy/core/symbol.py(794):             result.append(symbols(name, **args))
0.38 /testbed/sympy/core/symbol.py(702):     result = []
0.38 /testbed/sympy/core/symbol.py(704):     if isinstance(names, str):
0.38 /testbed/sympy/core/symbol.py(705):         marker = 0
0.38 /testbed/sympy/core/symbol.py(706):         splitters = r'\,', r'\:', r'\ '
0.38 /testbed/sympy/core/symbol.py(707):         literals: list[tuple[str, str]] = []
0.38 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.38 /testbed/sympy/core/symbol.py(709):             if splitter in names:
0.38 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.38 /testbed/sympy/core/symbol.py(709):             if splitter in names:
0.38 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.38 /testbed/sympy/core/symbol.py(709):             if splitter in names:
0.38 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.38 /testbed/sympy/core/symbol.py(716):         def literal(s):
0.38 /testbed/sympy/core/symbol.py(722):         names = names.strip()
0.38 /testbed/sympy/core/symbol.py(723):         as_seq = names.endswith(',')
0.38 /testbed/sympy/core/symbol.py(724):         if as_seq:
0.38 /testbed/sympy/core/symbol.py(726):         if not names:
0.38 /testbed/sympy/core/symbol.py(730):         names = [n.strip() for n in names.split(',')]
0.38 /testbed/sympy/core/symbol.py(730):         names = [n.strip() for n in names.split(',')]
0.38 /testbed/sympy/core/symbol.py(730):         names = [n.strip() for n in names.split(',')]
0.38 /testbed/sympy/core/symbol.py(731):         if not all(n for n in names):
0.38 /testbed/sympy/core/symbol.py(731):         if not all(n for n in names):
0.38 /testbed/sympy/core/symbol.py(731):         if not all(n for n in names):
0.38 /testbed/sympy/core/symbol.py(734):         for i in range(len(names) - 1, -1, -1):
0.38 /testbed/sympy/core/symbol.py(735):             names[i: i + 1] = names[i].split()
0.38 /testbed/sympy/core/symbol.py(734):         for i in range(len(names) - 1, -1, -1):
0.38 /testbed/sympy/core/symbol.py(737):         seq = args.pop('seq', as_seq)
0.38 /testbed/sympy/core/symbol.py(739):         for name in names:
0.38 /testbed/sympy/core/symbol.py(740):             if not name:
0.38 /testbed/sympy/core/symbol.py(743):             if ':' not in name:
0.38 /testbed/sympy/core/symbol.py(748):             split: list[str] = _range.split(name)
0.38 /testbed/sympy/core/symbol.py(749):             split_list: list[list[str]] = []
0.38 /testbed/sympy/core/symbol.py(751):             for i in range(len(split) - 1):
0.38 /testbed/sympy/core/symbol.py(752):                 if i and ':' in split[i] and split[i] != ':' and \
0.38 /testbed/sympy/core/symbol.py(751):             for i in range(len(split) - 1):
0.38 /testbed/sympy/core/symbol.py(752):                 if i and ':' in split[i] and split[i] != ':' and \
0.38 /testbed/sympy/core/symbol.py(753):                         split[i - 1].endswith('(') and \
0.38 /testbed/sympy/core/symbol.py(752):                 if i and ':' in split[i] and split[i] != ':' and \
0.38 /testbed/sympy/core/symbol.py(751):             for i in range(len(split) - 1):
0.38 /testbed/sympy/core/symbol.py(757):             for s in split:
0.38 /testbed/sympy/core/symbol.py(758):                 if ':' in s:
0.38 /testbed/sympy/core/symbol.py(774):                     split_list.append([s])
0.38 /testbed/sympy/core/symbol.py(757):             for s in split:
0.38 /testbed/sympy/core/symbol.py(758):                 if ':' in s:
0.38 /testbed/sympy/core/symbol.py(759):                     if s.endswith(':'):
0.38 /testbed/sympy/core/symbol.py(761):                     a, b = s.split(':')
0.38 /testbed/sympy/core/symbol.py(762):                     if b[-1] in string.digits:
0.38 /testbed/sympy/core/symbol.py(763):                         a_i = 0 if not a else int(a)
0.38 /testbed/sympy/core/symbol.py(764):                         b_i = int(b)
0.38 /testbed/sympy/core/symbol.py(765):                         split_list.append([str(c) for c in range(a_i, b_i)])
0.38 /testbed/sympy/core/symbol.py(765):                         split_list.append([str(c) for c in range(a_i, b_i)])
0.38 /testbed/sympy/core/symbol.py(765):                         split_list.append([str(c) for c in range(a_i, b_i)])
0.38 /testbed/sympy/core/symbol.py(765):                         split_list.append([str(c) for c in range(a_i, b_i)])
0.38 /testbed/sympy/core/symbol.py(771):                     if not split_list[-1]:
0.38 /testbed/sympy/core/symbol.py(757):             for s in split:
0.38 /testbed/sympy/core/symbol.py(758):                 if ':' in s:
0.38 /testbed/sympy/core/symbol.py(774):                     split_list.append([s])
0.38 /testbed/sympy/core/symbol.py(757):             for s in split:
0.38 /testbed/sympy/core/symbol.py(776):                 seq = True
0.38 /testbed/sympy/core/symbol.py(777):                 if len(split_list) == 1:
0.38 /testbed/sympy/core/symbol.py(780):                     names = [''.join(s) for s in product(*split_list)]
0.38 /testbed/sympy/core/symbol.py(780):                     names = [''.join(s) for s in product(*split_list)]
0.38 /testbed/sympy/core/symbol.py(780):                     names = [''.join(s) for s in product(*split_list)]
0.38 /testbed/sympy/core/symbol.py(780):                     names = [''.join(s) for s in product(*split_list)]
0.38 /testbed/sympy/core/symbol.py(781):                 if literals:
0.38 /testbed/sympy/core/symbol.py(784):                     result.extend([cls(s, **args) for s in names])
0.38 /testbed/sympy/core/symbol.py(784):                     result.extend([cls(s, **args) for s in names])
0.38 /testbed/sympy/core/symbol.py(295):         cls._sanitize(assumptions, cls)
0.38 /testbed/sympy/core/symbol.py(260):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.38 /testbed/sympy/core/symbol.py(261):         if is_commutative is None:
0.38 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.38 /testbed/sympy/core/symbol.py(296):         return Symbol.__xnew_cached_(cls, name, **assumptions)
0.38 /testbed/sympy/core/symbol.py(326):         return Symbol.__xnew__(cls, name, **assumptions)
0.38 /testbed/sympy/core/symbol.py(300):         if not isinstance(name, str):
0.38 /testbed/sympy/core/symbol.py(303):         obj = Expr.__new__(cls)
0.38 /testbed/sympy/core/symbol.py(304):         obj.name = name
0.38 /testbed/sympy/core/symbol.py(314):         tmp_asm_copy = assumptions.copy()
0.38 /testbed/sympy/core/symbol.py(317):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.38 /testbed/sympy/core/symbol.py(318):         assumptions['commutative'] = is_commutative
0.38 /testbed/sympy/core/symbol.py(319):         obj._assumptions = StdFactKB(assumptions)
0.38 /testbed/sympy/core/symbol.py(320):         obj._assumptions._generator = tmp_asm_copy  # Issue #8873
0.38 /testbed/sympy/core/symbol.py(321):         return obj
0.38 /testbed/sympy/core/symbol.py(784):                     result.extend([cls(s, **args) for s in names])
0.38 /testbed/sympy/core/symbol.py(295):         cls._sanitize(assumptions, cls)
0.38 /testbed/sympy/core/symbol.py(260):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.38 /testbed/sympy/core/symbol.py(261):         if is_commutative is None:
0.38 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.38 /testbed/sympy/core/symbol.py(296):         return Symbol.__xnew_cached_(cls, name, **assumptions)
0.38 /testbed/sympy/core/symbol.py(326):         return Symbol.__xnew__(cls, name, **assumptions)
0.38 /testbed/sympy/core/symbol.py(300):         if not isinstance(name, str):
0.38 /testbed/sympy/core/symbol.py(303):         obj = Expr.__new__(cls)
0.38 /testbed/sympy/core/symbol.py(304):         obj.name = name
0.38 /testbed/sympy/core/symbol.py(314):         tmp_asm_copy = assumptions.copy()
0.38 /testbed/sympy/core/symbol.py(317):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.38 /testbed/sympy/core/symbol.py(318):         assumptions['commutative'] = is_commutative
0.38 /testbed/sympy/core/symbol.py(319):         obj._assumptions = StdFactKB(assumptions)
0.38 /testbed/sympy/core/symbol.py(320):         obj._assumptions._generator = tmp_asm_copy  # Issue #8873
0.38 /testbed/sympy/core/symbol.py(321):         return obj
0.38 /testbed/sympy/core/symbol.py(784):                     result.extend([cls(s, **args) for s in names])
0.38 /testbed/sympy/core/symbol.py(739):         for name in names:
0.38 /testbed/sympy/core/symbol.py(786):         if not seq and len(result) <= 1:
0.38 /testbed/sympy/core/symbol.py(791):         return tuple(result)
0.38 /testbed/sympy/core/symbol.py(793):         for name in names:
0.38 /testbed/sympy/core/symbol.py(794):             result.append(symbols(name, **args))
0.38 /testbed/sympy/core/symbol.py(702):     result = []
0.38 /testbed/sympy/core/symbol.py(704):     if isinstance(names, str):
0.38 /testbed/sympy/core/symbol.py(705):         marker = 0
0.38 /testbed/sympy/core/symbol.py(706):         splitters = r'\,', r'\:', r'\ '
0.38 /testbed/sympy/core/symbol.py(707):         literals: list[tuple[str, str]] = []
0.38 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.38 /testbed/sympy/core/symbol.py(709):             if splitter in names:
0.38 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.38 /testbed/sympy/core/symbol.py(709):             if splitter in names:
0.38 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.38 /testbed/sympy/core/symbol.py(709):             if splitter in names:
0.38 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.38 /testbed/sympy/core/symbol.py(716):         def literal(s):
0.38 /testbed/sympy/core/symbol.py(722):         names = names.strip()
0.38 /testbed/sympy/core/symbol.py(723):         as_seq = names.endswith(',')
0.38 /testbed/sympy/core/symbol.py(724):         if as_seq:
0.38 /testbed/sympy/core/symbol.py(726):         if not names:
0.38 /testbed/sympy/core/symbol.py(730):         names = [n.strip() for n in names.split(',')]
0.38 /testbed/sympy/core/symbol.py(730):         names = [n.strip() for n in names.split(',')]
0.38 /testbed/sympy/core/symbol.py(730):         names = [n.strip() for n in names.split(',')]
0.38 /testbed/sympy/core/symbol.py(731):         if not all(n for n in names):
0.38 /testbed/sympy/core/symbol.py(731):         if not all(n for n in names):
0.38 /testbed/sympy/core/symbol.py(731):         if not all(n for n in names):
0.38 /testbed/sympy/core/symbol.py(734):         for i in range(len(names) - 1, -1, -1):
0.38 /testbed/sympy/core/symbol.py(735):             names[i: i + 1] = names[i].split()
0.38 /testbed/sympy/core/symbol.py(734):         for i in range(len(names) - 1, -1, -1):
0.38 /testbed/sympy/core/symbol.py(737):         seq = args.pop('seq', as_seq)
0.38 /testbed/sympy/core/symbol.py(739):         for name in names:
0.38 /testbed/sympy/core/symbol.py(740):             if not name:
0.38 /testbed/sympy/core/symbol.py(743):             if ':' not in name:
0.38 /testbed/sympy/core/symbol.py(748):             split: list[str] = _range.split(name)
0.38 /testbed/sympy/core/symbol.py(749):             split_list: list[list[str]] = []
0.38 /testbed/sympy/core/symbol.py(751):             for i in range(len(split) - 1):
0.38 /testbed/sympy/core/symbol.py(752):                 if i and ':' in split[i] and split[i] != ':' and \
0.38 /testbed/sympy/core/symbol.py(751):             for i in range(len(split) - 1):
0.38 /testbed/sympy/core/symbol.py(752):                 if i and ':' in split[i] and split[i] != ':' and \
0.38 /testbed/sympy/core/symbol.py(753):                         split[i - 1].endswith('(') and \
0.38 /testbed/sympy/core/symbol.py(752):                 if i and ':' in split[i] and split[i] != ':' and \
0.38 /testbed/sympy/core/symbol.py(751):             for i in range(len(split) - 1):
0.38 /testbed/sympy/core/symbol.py(757):             for s in split:
0.38 /testbed/sympy/core/symbol.py(758):                 if ':' in s:
0.38 /testbed/sympy/core/symbol.py(774):                     split_list.append([s])
0.38 /testbed/sympy/core/symbol.py(757):             for s in split:
0.38 /testbed/sympy/core/symbol.py(758):                 if ':' in s:
0.38 /testbed/sympy/core/symbol.py(759):                     if s.endswith(':'):
0.38 /testbed/sympy/core/symbol.py(761):                     a, b = s.split(':')
0.38 /testbed/sympy/core/symbol.py(762):                     if b[-1] in string.digits:
0.38 /testbed/sympy/core/symbol.py(763):                         a_i = 0 if not a else int(a)
0.38 /testbed/sympy/core/symbol.py(764):                         b_i = int(b)
0.38 /testbed/sympy/core/symbol.py(765):                         split_list.append([str(c) for c in range(a_i, b_i)])
0.38 /testbed/sympy/core/symbol.py(765):                         split_list.append([str(c) for c in range(a_i, b_i)])
0.38 /testbed/sympy/core/symbol.py(765):                         split_list.append([str(c) for c in range(a_i, b_i)])
0.38 /testbed/sympy/core/symbol.py(765):                         split_list.append([str(c) for c in range(a_i, b_i)])
0.38 /testbed/sympy/core/symbol.py(771):                     if not split_list[-1]:
0.38 /testbed/sympy/core/symbol.py(757):             for s in split:
0.38 /testbed/sympy/core/symbol.py(758):                 if ':' in s:
0.38 /testbed/sympy/core/symbol.py(774):                     split_list.append([s])
0.38 /testbed/sympy/core/symbol.py(757):             for s in split:
0.38 /testbed/sympy/core/symbol.py(776):                 seq = True
0.38 /testbed/sympy/core/symbol.py(777):                 if len(split_list) == 1:
0.38 /testbed/sympy/core/symbol.py(780):                     names = [''.join(s) for s in product(*split_list)]
0.38 /testbed/sympy/core/symbol.py(780):                     names = [''.join(s) for s in product(*split_list)]
0.38 /testbed/sympy/core/symbol.py(780):                     names = [''.join(s) for s in product(*split_list)]
0.38 /testbed/sympy/core/symbol.py(780):                     names = [''.join(s) for s in product(*split_list)]
0.38 /testbed/sympy/core/symbol.py(781):                 if literals:
0.38 /testbed/sympy/core/symbol.py(784):                     result.extend([cls(s, **args) for s in names])
0.38 /testbed/sympy/core/symbol.py(784):                     result.extend([cls(s, **args) for s in names])
0.38 /testbed/sympy/core/symbol.py(295):         cls._sanitize(assumptions, cls)
0.38 /testbed/sympy/core/symbol.py(260):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.38 /testbed/sympy/core/symbol.py(261):         if is_commutative is None:
0.38 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.38 /testbed/sympy/core/symbol.py(296):         return Symbol.__xnew_cached_(cls, name, **assumptions)
0.38 /testbed/sympy/core/symbol.py(326):         return Symbol.__xnew__(cls, name, **assumptions)
0.38 /testbed/sympy/core/symbol.py(300):         if not isinstance(name, str):
0.38 /testbed/sympy/core/symbol.py(303):         obj = Expr.__new__(cls)
0.38 /testbed/sympy/core/symbol.py(304):         obj.name = name
0.38 /testbed/sympy/core/symbol.py(314):         tmp_asm_copy = assumptions.copy()
0.38 /testbed/sympy/core/symbol.py(317):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.38 /testbed/sympy/core/symbol.py(318):         assumptions['commutative'] = is_commutative
0.38 /testbed/sympy/core/symbol.py(319):         obj._assumptions = StdFactKB(assumptions)
0.38 /testbed/sympy/core/symbol.py(320):         obj._assumptions._generator = tmp_asm_copy  # Issue #8873
0.38 /testbed/sympy/core/symbol.py(321):         return obj
0.38 /testbed/sympy/core/symbol.py(784):                     result.extend([cls(s, **args) for s in names])
0.38 /testbed/sympy/core/symbol.py(295):         cls._sanitize(assumptions, cls)
0.38 /testbed/sympy/core/symbol.py(260):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.38 /testbed/sympy/core/symbol.py(261):         if is_commutative is None:
0.38 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.38 /testbed/sympy/core/symbol.py(296):         return Symbol.__xnew_cached_(cls, name, **assumptions)
0.38 /testbed/sympy/core/symbol.py(326):         return Symbol.__xnew__(cls, name, **assumptions)
0.38 /testbed/sympy/core/symbol.py(300):         if not isinstance(name, str):
0.38 /testbed/sympy/core/symbol.py(303):         obj = Expr.__new__(cls)
0.38 /testbed/sympy/core/symbol.py(304):         obj.name = name
0.38 /testbed/sympy/core/symbol.py(314):         tmp_asm_copy = assumptions.copy()
0.38 /testbed/sympy/core/symbol.py(317):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.38 /testbed/sympy/core/symbol.py(318):         assumptions['commutative'] = is_commutative
0.38 /testbed/sympy/core/symbol.py(319):         obj._assumptions = StdFactKB(assumptions)
0.38 /testbed/sympy/core/symbol.py(320):         obj._assumptions._generator = tmp_asm_copy  # Issue #8873
0.38 /testbed/sympy/core/symbol.py(321):         return obj
0.38 /testbed/sympy/core/symbol.py(784):                     result.extend([cls(s, **args) for s in names])
0.38 /testbed/sympy/core/symbol.py(739):         for name in names:
0.38 /testbed/sympy/core/symbol.py(786):         if not seq and len(result) <= 1:
0.38 /testbed/sympy/core/symbol.py(791):         return tuple(result)
0.38 /testbed/sympy/core/symbol.py(793):         for name in names:
0.38 /testbed/sympy/core/symbol.py(796):         return type(names)(result)
F                                     [FAIL]


________________________________________________________________________________
 sympy/polys/tests/test_coverup_sympy__sympy-23534.py:test_symbols_with_extra_parentheses 
Traceback (most recent call last):
  File "/testbed/sympy/polys/tests/test_coverup_sympy__sympy-23534.py", line 9, in test_symbols_with_extra_parentheses
    assert isinstance(q[0], UndefinedFunction), \
AssertionError: The type should be UndefinedFunction, but it is not due to the bug

============= tests finished: 0 passed, 1 failed, in 0.01 seconds ==============
DO *NOT* COMMIT!
/testbed/sympy/core/symbol.py(746):                 continue
0.95 /testbed/sympy/core/symbol.py(739):         for name in names:
0.95 /testbed/sympy/core/symbol.py(786):         if not seq and len(result) <= 1:
0.95 /testbed/sympy/core/symbol.py(787):             if not result:
0.95 /testbed/sympy/core/symbol.py(789):             return result[0]
0.95 /testbed/sympy/core/symbol.py(702):     result = []
0.95 /testbed/sympy/core/symbol.py(704):     if isinstance(names, str):
0.95 /testbed/sympy/core/symbol.py(705):         marker = 0
0.95 /testbed/sympy/core/symbol.py(706):         splitters = r'\,', r'\:', r'\ '
0.95 /testbed/sympy/core/symbol.py(707):         literals: list[tuple[str, str]] = []
0.95 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.95 /testbed/sympy/core/symbol.py(709):             if splitter in names:
0.95 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.95 /testbed/sympy/core/symbol.py(709):             if splitter in names:
0.95 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.95 /testbed/sympy/core/symbol.py(709):             if splitter in names:
0.95 /testbed/sympy/core/symbol.py(708):         for splitter in splitters:
0.95 /testbed/sympy/core/symbol.py(716):         def literal(s):
0.95 /testbed/sympy/core/symbol.py(722):         names = names.strip()
0.95 /testbed/sympy/core/symbol.py(723):         as_seq = names.endswith(',')
0.95 /testbed/sympy/core/symbol.py(724):         if as_seq:
0.95 /testbed/sympy/core/symbol.py(726):         if not names:
0.95 /testbed/sympy/core/symbol.py(730):         names = [n.strip() for n in names.split(',')]
0.95 /testbed/sympy/core/symbol.py(730):         names = [n.strip() for n in names.split(',')]
0.95 /testbed/sympy/core/symbol.py(730):         names = [n.strip() for n in names.split(',')]
0.95 /testbed/sympy/core/symbol.py(731):         if not all(n for n in names):
0.95 /testbed/sympy/core/symbol.py(731):         if not all(n for n in names):
0.95 /testbed/sympy/core/symbol.py(731):         if not all(n for n in names):
0.95 /testbed/sympy/core/symbol.py(734):         for i in range(len(names) - 1, -1, -1):
0.95 /testbed/sympy/core/symbol.py(735):             names[i: i + 1] = names[i].split()
0.95 /testbed/sympy/core/symbol.py(734):         for i in range(len(names) - 1, -1, -1):
0.95 /testbed/sympy/core/symbol.py(737):         seq = args.pop('seq', as_seq)
0.95 /testbed/sympy/core/symbol.py(739):         for name in names:
0.95 /testbed/sympy/core/symbol.py(740):             if not name:
0.95 /testbed/sympy/core/symbol.py(743):             if ':' not in name:
0.95 /testbed/sympy/core/symbol.py(744):                 symbol = cls(literal(name), **args)
0.95 /testbed/sympy/core/symbol.py(717):             if literals:
0.95 /testbed/sympy/core/symbol.py(720):             return s
0.95 /testbed/sympy/core/symbol.py(295):         cls._sanitize(assumptions, cls)
0.95 /testbed/sympy/core/symbol.py(260):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.95 /testbed/sympy/core/symbol.py(261):         if is_commutative is None:
0.95 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.95 /testbed/sympy/core/symbol.py(268):             v = assumptions[key]
0.95 /testbed/sympy/core/symbol.py(269):             if v is None:
0.95 /testbed/sympy/core/symbol.py(272):             assumptions[key] = bool(v)
0.95 /testbed/sympy/core/symbol.py(267):         for key in list(assumptions.keys()):
0.95 /testbed/sympy/core/symbol.py(296):         return Symbol.__xnew_cached_(cls, name, **assumptions)
0.95 /testbed/sympy/core/symbol.py(326):         return Symbol.__xnew__(cls, name, **assumptions)
0.95 /testbed/sympy/core/symbol.py(300):         if not isinstance(name, str):
0.95 /testbed/sympy/core/symbol.py(303):         obj = Expr.__new__(cls)
0.95 /testbed/sympy/core/symbol.py(304):         obj.name = name
0.95 /testbed/sympy/core/symbol.py(314):         tmp_asm_copy = assumptions.copy()
0.95 /testbed/sympy/core/symbol.py(317):         is_commutative = fuzzy_bool(assumptions.get('commutative', True))
0.95 /testbed/sympy/core/symbol.py(318):         assumptions['commutative'] = is_commutative
0.95 /testbed/sympy/core/symbol.py(319):         obj._assumptions = StdFactKB(assumptions)
0.95 /testbed/sympy/core/symbol.py(320):         obj._assumptions._generator = tmp_asm_copy  # Issue #8873
0.95 /testbed/sympy/core/symbol.py(321):         return obj
0.95 /testbed/sympy/core/symbol.py(745):                 result.append(symbol)
0.95 /testbed/sympy/core/symbol.py(746):                 continue
0.95 /testbed/sympy/core/symbol.py(739):         for name in names:
0.95 /testbed/sympy/core/symbol.py(786):         if not seq and len(result) <= 1:
0.95 /testbed/sympy/core/symbol.py(787):             if not result:
0.95 /testbed/sympy/core/symbol.py(789):             return result[0]
+ cat coverage.cover
{"/testbed/sympy/core/symbol.py": {"1": 1, "3": 1, "4": 1, "5": 1, "6": 1, "7": 1, "8": 1, "9": 1, "10": 1, "11": 1, "12": 1, "13": 1, "14": 1, "15": 1, "16": 1, "18": 1, "19": 1, "20": 1, "21": 1, "22": 1, "25": 2, "53": 1, "64": 1, "130": 1, "204": 1, "206": 2, "388": 2, "456": 2, "583": 1, "586": 1, "799": 1, "862": 1, "37": 1, "39": 1, "46": 1, "49": 1, "40": 0, "41": 0, "42": 0, "43": 0, "44": 0, "47": 0, "50": 0, "58": 0, "59": 0, "60": 0, "61": 0, "62": 0, "121": 0, "122": 0, "123": 0, "124": 0, "125": 0, "126": 0, "128": 0, "177": 0, "188": 0, "189": 0, "190": 0, "191": 0, "192": 0, "193": 0, "194": 0, "195": 0, "196": 0, "197": 0, "198": 0, "199": 0, "200": 0, "201": 0, "202": 0, "203": 0, "178": 0, "179": 0, "180": 0, "181": 0, "182": 0, "183": 0, "184": 0, "185": 0, "186": 0, "225": 1, "227": 1, "229": 1, "231": 1, "232": 1, "234": 1, "235": 1, "240": 1, "241": 1, "254": 1, "255": 1, "274": 1, "285": 1, "298": 1, "299": 1, "323": 1, "324": 1, "325": 1, "328": 1, "336": 1, "340": 1, "344": 1, "349": 1, "352": 1, "353": 1, "357": 1, "358": 1, "361": 1, "366": 1, "373": 1, "378": 1, "379": 1, "382": 1, "384": 1, "236": 0, "237": 0, "238": 0, "252": 0, "260": 37, "261": 37, "262": 0, "263": 0, "264": 0, "267": 47, "268": 10, "269": 10, "270": 0, "271": 0, "272": 10, "275": 0, "276": 0, "277": 0, "278": 0, "281": 0, "280": 0, "282": 0, "283": 0, "295": 15, "296": 15, "300": 37, "301": 0, "303": 37, "304": 37, "314": 37, "317": 37, "318": 37, "319": 37, "320": 37, "321": 37, "326": 15, "329": 0, "337": 0, "338": 0, "342": 0, "345": 0, "346": 0, "347": 0, "350": 0, "354": 0, "355": 0, "359": 0, "363": 0, "364": 0, "367": 0, "368": 0, "370": 0, "371": 0, "374": 0, "375": 0, "376": 0, "380": 0, "385": 0, "418": 1, "419": 1, "420": 1, "422": 1, "424": 1, "426": 1, "444": 1, "447": 1, "448": 1, "452": 1, "427": 22, "428": 0, "430": 22, "431": 1, "433": 22, "434": 22, "435": 22, "437": 22, "438": 22, "440": 22, "442": 22, "445": 0, "449": 0, "450": 0, "453": 0, "545": 1, "547": 1, "549": 1, "555": 1, "558": 1, "559": 1, "560": 1, "566": 1, "570": 1, "550": 0, "551": 0, "552": 0, "553": 0, "556": 0, "561": 0, "562": 0, "563": 0, "564": 0, "567": 0, "571": 0, "572": 0, "573": 0, "574": 0, "575": 0, "576": 0, "578": 0, "579": 0, "580": 0, "702": 13, "704": 13, "705": 12, "706": 12, "707": 12, "708": 48, "709": 36, "710": 0, "711": 0, "712": 0, "713": 0, "714": 0, "715": 0, "716": 12, "722": 12, "723": 12, "724": 12, "725": 0, "726": 12, "727": 0, "730": 38, "731": 38, "732": 0, "734": 26, "735": 14, "737": 12, "739": 26, "740": 14, "741": 0, "743": 14, "744": 12, "745": 12, "746": 12, "748": 2, "749": 2, "751": 6, "752": 6, "753": 2, "754": 0, "755": 0, "756": 0, "757": 8, "758": 6, "759": 2, "760": 0, "761": 2, "762": 2, "763": 2, "764": 2, "765": 8, "767": 0, "768": 0, "769": 0, "770": 0, "771": 2, "772": 0, "774": 4, "776": 2, "777": 2, "778": 0, "780": 8, "781": 2, "782": 0, "784": 8, "786": 12, "787": 8, "788": 0, "789": 8, "791": 4, "793": 3, "794": 2, "796": 1, "717": 12, "718": 0, "719": 0, "720": 12, "834": 0, "844": 0, "845": 0, "847": 0, "848": 0, "850": 0, "851": 0, "852": 0, "853": 0, "854": 0, "856": 0, "858": 0, "860": 0, "836": 0, "837": 0, "838": 0, "839": 0, "840": 0, "842": 0, "902": 0, "903": 0, "904": 0, "905": 0, "906": 0, "907": 0, "908": 0, "909": 0, "912": 0, "913": 0, "914": 0, "916": 0, "917": 0, "919": 0, "920": 0, "921": 0, "922": 0, "923": 0, "924": 0, "925": 0}}
{"/testbed/sympy/core/symbol.py": {"1": 1, "3": 1, "4": 1, "5": 1, "6": 1, "7": 1, "8": 1, "9": 1, "10": 1, "11": 1, "12": 1, "13": 1, "14": 1, "15": 1, "16": 1, "18": 1, "19": 1, "20": 1, "21": 1, "22": 1, "25": 2, "53": 1, "64": 1, "130": 1, "204": 1, "206": 2, "388": 2, "456": 2, "583": 1, "586": 1, "799": 1, "862": 1, "37": 1, "39": 1, "46": 1, "49": 1, "40": 0, "41": 0, "42": 0, "43": 0, "44": 0, "47": 0, "50": 0, "58": 0, "59": 0, "60": 0, "61": 0, "62": 0, "121": 0, "122": 0, "123": 0, "124": 0, "125": 0, "126": 0, "128": 0, "177": 0, "188": 0, "189": 0, "190": 0, "191": 0, "192": 0, "193": 0, "194": 0, "195": 0, "196": 0, "197": 0, "198": 0, "199": 0, "200": 0, "201": 0, "202": 0, "203": 0, "178": 0, "179": 0, "180": 0, "181": 0, "182": 0, "183": 0, "184": 0, "185": 0, "186": 0, "225": 1, "227": 1, "229": 1, "231": 1, "232": 1, "234": 1, "235": 1, "240": 1, "241": 1, "254": 1, "255": 1, "274": 1, "285": 1, "298": 1, "299": 1, "323": 1, "324": 1, "325": 1, "328": 1, "336": 1, "340": 1, "344": 1, "349": 1, "352": 1, "353": 1, "357": 1, "358": 1, "361": 1, "366": 1, "373": 1, "378": 1, "379": 1, "382": 1, "384": 1, "236": 0, "237": 0, "238": 0, "252": 0, "260": 33, "261": 33, "262": 0, "263": 0, "264": 0, "267": 43, "268": 10, "269": 10, "270": 0, "271": 0, "272": 10, "275": 0, "276": 0, "277": 0, "278": 0, "281": 0, "280": 0, "282": 0, "283": 0, "295": 11, "296": 11, "300": 33, "301": 0, "303": 33, "304": 33, "314": 33, "317": 33, "318": 33, "319": 33, "320": 33, "321": 33, "326": 11, "329": 0, "337": 0, "338": 0, "342": 0, "345": 0, "346": 0, "347": 0, "350": 0, "354": 0, "355": 0, "359": 0, "363": 0, "364": 0, "367": 0, "368": 0, "370": 0, "371": 0, "374": 0, "375": 0, "376": 0, "380": 0, "385": 0, "418": 1, "419": 1, "420": 1, "422": 1, "424": 1, "426": 1, "444": 1, "447": 1, "448": 1, "452": 1, "427": 22, "428": 0, "430": 22, "431": 1, "433": 22, "434": 22, "435": 22, "437": 22, "438": 22, "440": 22, "442": 22, "445": 0, "449": 0, "450": 0, "453": 0, "545": 1, "547": 1, "549": 1, "555": 1, "558": 1, "559": 1, "560": 1, "566": 1, "570": 1, "550": 0, "551": 0, "552": 0, "553": 0, "556": 0, "561": 0, "562": 0, "563": 0, "564": 0, "567": 0, "571": 0, "572": 0, "573": 0, "574": 0, "575": 0, "576": 0, "578": 0, "579": 0, "580": 0, "702": 10, "704": 10, "705": 10, "706": 10, "707": 10, "708": 40, "709": 30, "710": 0, "711": 0, "712": 0, "713": 0, "714": 0, "715": 0, "716": 10, "722": 10, "723": 10, "724": 10, "725": 0, "726": 10, "727": 0, "730": 32, "731": 32, "732": 0, "734": 22, "735": 12, "737": 10, "739": 22, "740": 12, "741": 0, "743": 12, "744": 12, "745": 12, "746": 12, "748": 0, "749": 0, "751": 0, "752": 0, "753": 0, "754": 0, "755": 0, "756": 0, "757": 0, "758": 0, "759": 0, "760": 0, "761": 0, "762": 0, "763": 0, "764": 0, "765": 0, "767": 0, "768": 0, "769": 0, "770": 0, "771": 0, "772": 0, "774": 0, "776": 0, "777": 0, "778": 0, "780": 0, "781": 0, "782": 0, "784": 0, "786": 10, "787": 8, "788": 0, "789": 8, "791": 2, "793": 0, "794": 0, "796": 0, "717": 12, "718": 0, "719": 0, "720": 12, "834": 0, "844": 0, "845": 0, "847": 0, "848": 0, "850": 0, "851": 0, "852": 0, "853": 0, "854": 0, "856": 0, "858": 0, "860": 0, "836": 0, "837": 0, "838": 0, "839": 0, "840": 0, "842": 0, "902": 0, "903": 0, "904": 0, "905": 0, "906": 0, "907": 0, "908": 0, "909": 0, "912": 0, "913": 0, "914": 0, "916": 0, "917": 0, "919": 0, "920": 0, "921": 0, "922": 0, "923": 0, "924": 0, "925": 0}}
+ git checkout 832c24fec1046eaa544a4cab4c69e3af3e651759
Note: switching to '832c24fec1046eaa544a4cab4c69e3af3e651759'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at 832c24fec1 Merge pull request #23522 from Upabjojr/matexpr_expand_fix
+ git apply /root/pre_state.patch
error: unrecognized input
