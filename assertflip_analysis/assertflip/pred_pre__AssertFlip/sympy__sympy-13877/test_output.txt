+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD 1659712001810f5fc563a443949f8e3bb38af4bd
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch master
nothing to commit, working tree clean
+ git show
commit 1659712001810f5fc563a443949f8e3bb38af4bd
Merge: e27cad7710 9dce6aba31
Author: Chris Smith <smichr@gmail.com>
Date:   Sat Jan 27 07:33:30 2018 -0600

    Merge pull request #14012 from ishanaj/xfail_10214_solveset
    
    solveset is now able to solve XFAIL

diff --cc sympy/solvers/tests/test_solveset.py
index 72db239984,88885497d6..03eb18c3c5
--- a/sympy/solvers/tests/test_solveset.py
+++ b/sympy/solvers/tests/test_solveset.py
@@@ -1553,13 -1532,18 +1553,18 @@@ def test_issue_9557()
  def test_issue_9778():
      assert solveset(x**3 + 1, x, S.Reals) == FiniteSet(-1)
      assert solveset(x**(S(3)/5) + 1, x, S.Reals) == S.EmptySet
 -    assert solveset(x**3 + y, x, S.Reals) == Intersection(Interval(-oo, oo), \
 -        FiniteSet((-y)**(S(1)/3)*Piecewise((1, Ne(-im(y), 0)), ((-1)**(S(2)/3), -y < 0), (1, True))))
 +    assert solveset(x**3 + y, x, S.Reals) == \
 +        FiniteSet(-Abs(y)**(S(1)/3)*sign(y))
  
  
- @XFAIL
- def test_issue_failing_pow():
+ def test_issue_10214():
      assert solveset(x**(S(3)/2) + 4, x, S.Reals) == S.EmptySet
+     assert solveset(x**(S(-3)/2) + 4, x, S.Reals) == S.EmptySet
+ 
+     ans = FiniteSet(-2**(S(2)/3))
+     assert solveset(x**(S(3)) + 4, x, S.Reals) == ans
+     assert (x**(S(3)) + 4).subs(x,list(ans)[0]) == 0 # substituting ans and verifying the result.
+     assert (x**(S(3)) + 4).subs(x,-(-2)**(2/S(3))) == 0
  
  
  def test_issue_9849():
+ git diff 1659712001810f5fc563a443949f8e3bb38af4bd
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Requirement already satisfied: mpmath>=0.19 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from sympy==1.1.2.dev0) (1.3.0)
Installing collected packages: sympy
  Attempting uninstall: sympy
    Found existing installation: sympy 1.1.2.dev0
    Uninstalling sympy-1.1.2.dev0:
      Successfully uninstalled sympy-1.1.2.dev0
  DEPRECATION: Legacy editable install of sympy==1.1.2.dev0 from file:///testbed (setup.py develop) is deprecated. pip 25.3 will enforce this behaviour change. A possible replacement is to add a pyproject.toml or enable --use-pep517, and use setuptools >= 64. If the resulting installation is not behaving as expected, try using --config-settings editable_mode=compat. Please consult the setuptools documentation for more information. Discussion can be found at https://github.com/pypa/pip/issues/11457
  Running setup.py develop for sympy
Successfully installed sympy
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git apply -v -
<stdin>:13: trailing whitespace.
    
<stdin>:17: trailing whitespace.
    
Checking patch sympy/polys/tests/test_coverup_sympy__sympy-13877.py...
Applied patch sympy/polys/tests/test_coverup_sympy__sympy-13877.py cleanly.
warning: 2 lines add whitespace errors.
+ PYTHONWARNINGS=ignore::UserWarning,ignore::SyntaxWarning
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(sympy/utilities/randtest\.py|sympy/matrices/matrices\.py)' bin/test -C --verbose sympy/polys/tests/test_coverup_sympy__sympy-13877.p
/testbed/sympy/core/basic.py:3: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
  from collections import Mapping, defaultdict
/testbed/sympy/core/containers.py:271: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
  class OrderedSet(collections.MutableSet):
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(sympy/utilities/randtest\\.py|sympy/matrices/matrices\\.py)']
0.78 /testbed/sympy/matrices/matrices.py(1): from __future__ import print_function, division
0.78 /testbed/sympy/matrices/matrices.py(3): import collections
0.78 /testbed/sympy/matrices/matrices.py(4): from mpmath.libmp.libmpf import prec_to_dps
0.78 /testbed/sympy/matrices/matrices.py(5): from sympy.assumptions.refine import refine
0.78 /testbed/sympy/matrices/matrices.py(6): from sympy.core.add import Add
0.78 /testbed/sympy/matrices/matrices.py(7): from sympy.core.basic import Basic, Atom
0.78 /testbed/sympy/matrices/matrices.py(8): from sympy.core.expr import Expr
0.78 /testbed/sympy/matrices/matrices.py(9): from sympy.core.power import Pow
0.78 /testbed/sympy/matrices/matrices.py(10): from sympy.core.symbol import (Symbol, Dummy, symbols,
0.78 /testbed/sympy/matrices/matrices.py(12): from sympy.core.numbers import Integer, ilcm, Float
0.78 /testbed/sympy/matrices/matrices.py(13): from sympy.core.singleton import S
0.78 /testbed/sympy/matrices/matrices.py(14): from sympy.core.sympify import sympify
0.78 /testbed/sympy/matrices/matrices.py(15): from sympy.functions.elementary.miscellaneous import sqrt, Max, Min
0.78 /testbed/sympy/matrices/matrices.py(16): from sympy.functions import Abs, exp, factorial
0.78 /testbed/sympy/matrices/matrices.py(17): from sympy.polys import PurePoly, roots, cancel, gcd
0.78 /testbed/sympy/matrices/matrices.py(18): from sympy.printing import sstr
0.78 /testbed/sympy/matrices/matrices.py(19): from sympy.simplify import simplify as _simplify, signsimp, nsimplify
0.78 /testbed/sympy/matrices/matrices.py(20): from sympy.core.compatibility import reduce, as_int, string_types
0.78 /testbed/sympy/matrices/matrices.py(22): from sympy.utilities.iterables import flatten, numbered_symbols
0.78 /testbed/sympy/matrices/matrices.py(23): from sympy.core.decorators import call_highest_priority
0.78 /testbed/sympy/matrices/matrices.py(24): from sympy.core.compatibility import is_sequence, default_sort_key, range, \
0.78 /testbed/sympy/matrices/matrices.py(28): from types import FunctionType
0.78 /testbed/sympy/matrices/matrices.py(30): from .common import (a2idx, classof, MatrixError, ShapeError,
0.78 /testbed/sympy/matrices/matrices.py(34): def _iszero(x):
0.78 /testbed/sympy/matrices/matrices.py(42): class DeferredVector(Symbol, NotIterable):
0.78 /testbed/sympy/matrices/matrices.py(42): class DeferredVector(Symbol, NotIterable):
0.78 /testbed/sympy/matrices/matrices.py(43):     """A vector whose components are deferred (e.g. for use with lambdify)
0.78 /testbed/sympy/matrices/matrices.py(58):     def __getitem__(self, i):
0.78 /testbed/sympy/matrices/matrices.py(66):     def __str__(self):
0.78 /testbed/sympy/matrices/matrices.py(69):     def __repr__(self):
0.78 /testbed/sympy/matrices/matrices.py(73): class MatrixDeterminant(MatrixCommon):
0.78 /testbed/sympy/matrices/matrices.py(73): class MatrixDeterminant(MatrixCommon):
0.78 /testbed/sympy/matrices/matrices.py(74):     """Provides basic matrix determinant operations.
0.78 /testbed/sympy/matrices/matrices.py(77):     def _eval_berkowitz_toeplitz_matrix(self):
0.78 /testbed/sympy/matrices/matrices.py(121):     def _eval_berkowitz_vector(self):
0.78 /testbed/sympy/matrices/matrices.py(165):     def _eval_det_bareiss(self):
0.78 /testbed/sympy/matrices/matrices.py(218):     def _eval_det_berkowitz(self):
0.78 /testbed/sympy/matrices/matrices.py(223):     def _eval_det_lu(self, iszerofunc=_iszero, simpfunc=None):
0.78 /testbed/sympy/matrices/matrices.py(270):     def _eval_determinant(self):
0.78 /testbed/sympy/matrices/matrices.py(275):     def adjugate(self, method="berkowitz"):
0.78 /testbed/sympy/matrices/matrices.py(290):     def charpoly(self, x='lambda', simplify=_simplify):
0.78 /testbed/sympy/matrices/matrices.py(349):     def cofactor(self, i, j, method="berkowitz"):
0.78 /testbed/sympy/matrices/matrices.py(365):     def cofactor_matrix(self, method="berkowitz"):
0.78 /testbed/sympy/matrices/matrices.py(383):     def det(self, method="bareiss"):
0.78 /testbed/sympy/matrices/matrices.py(432):     def minor(self, i, j, method="berkowitz"):
0.78 /testbed/sympy/matrices/matrices.py(450):     def minor_submatrix(self, i, j):
0.78 /testbed/sympy/matrices/matrices.py(475): class MatrixReductions(MatrixDeterminant):
0.78 /testbed/sympy/matrices/matrices.py(475): class MatrixReductions(MatrixDeterminant):
0.78 /testbed/sympy/matrices/matrices.py(476):     """Provides basic matrix row/column operations.
0.78 /testbed/sympy/matrices/matrices.py(479):     def _eval_col_op_swap(self, col1, col2):
0.78 /testbed/sympy/matrices/matrices.py(488):     def _eval_col_op_multiply_col_by_const(self, col, k):
0.78 /testbed/sympy/matrices/matrices.py(495):     def _eval_col_op_add_multiple_to_other_col(self, col, k, col2):
0.78 /testbed/sympy/matrices/matrices.py(502):     def _eval_row_op_swap(self, row1, row2):
0.78 /testbed/sympy/matrices/matrices.py(511):     def _eval_row_op_multiply_row_by_const(self, row, k):
0.78 /testbed/sympy/matrices/matrices.py(518):     def _eval_row_op_add_multiple_to_other_row(self, row, k, row2):
0.78 /testbed/sympy/matrices/matrices.py(525):     def _eval_echelon_form(self, iszerofunc, simpfunc):
0.79 /testbed/sympy/matrices/matrices.py(534):     def _eval_is_echelon(self, iszerofunc):
0.79 /testbed/sympy/matrices/matrices.py(542):     def _eval_rref(self, iszerofunc, simpfunc, normalize_last=True):
0.79 /testbed/sympy/matrices/matrices.py(548):     def _normalize_op_args(self, op, col, k, col1, col2, error_str="col"):
0.79 /testbed/sympy/matrices/matrices.py(597):     def _permute_complexity_right(self, iszerofunc):
0.79 /testbed/sympy/matrices/matrices.py(616):     def _row_reduce(self, iszerofunc, simpfunc, normalize_last=True,
0.79 /testbed/sympy/matrices/matrices.py(714):     def echelon_form(self, iszerofunc=_iszero, simplify=False, with_pivots=False):
0.79 /testbed/sympy/matrices/matrices.py(727):     def elementary_col_op(self, op="n->kn", col=None, k=None, col1=None, col2=None):
0.79 /testbed/sympy/matrices/matrices.py(757):     def elementary_row_op(self, op="n->kn", row=None, k=None, row1=None, row2=None):
0.79 /testbed/sympy/matrices/matrices.py(787):     @property
0.79 /testbed/sympy/matrices/matrices.py(788):     def is_echelon(self, iszerofunc=_iszero):
0.79 /testbed/sympy/matrices/matrices.py(795):     def rank(self, iszerofunc=_iszero, simplify=False):
0.79 /testbed/sympy/matrices/matrices.py(834):     def rref(self, iszerofunc=_iszero, simplify=False, pivots=True, normalize_last=True):
0.79 /testbed/sympy/matrices/matrices.py(896): class MatrixSubspaces(MatrixReductions):
0.79 /testbed/sympy/matrices/matrices.py(896): class MatrixSubspaces(MatrixReductions):
0.79 /testbed/sympy/matrices/matrices.py(897):     """Provides methods relating to the fundamental subspaces
0.79 /testbed/sympy/matrices/matrices.py(900):     def columnspace(self, simplify=False):
0.79 /testbed/sympy/matrices/matrices.py(932):     def nullspace(self, simplify=False):
0.79 /testbed/sympy/matrices/matrices.py(975):     def rowspace(self, simplify=False):
0.79 /testbed/sympy/matrices/matrices.py(982):     @classmethod
0.79 /testbed/sympy/matrices/matrices.py(983):     def orthogonalize(cls, *vecs, **kwargs):
0.79 /testbed/sympy/matrices/matrices.py(1024): class MatrixEigen(MatrixSubspaces):
0.79 /testbed/sympy/matrices/matrices.py(1024): class MatrixEigen(MatrixSubspaces):
0.79 /testbed/sympy/matrices/matrices.py(1025):     """Provides basic matrix eigenvalue/vector operations.
0.79 /testbed/sympy/matrices/matrices.py(1028):     _cache_is_diagonalizable = None
0.79 /testbed/sympy/matrices/matrices.py(1029):     _cache_eigenvects = None
0.79 /testbed/sympy/matrices/matrices.py(1031):     def diagonalize(self, reals_only=False, sort=False, normalize=False):
0.79 /testbed/sympy/matrices/matrices.py(1104):     def eigenvals(self, error_when_incomplete=True, **flags):
0.79 /testbed/sympy/matrices/matrices.py(1136):     def eigenvects(self, error_when_incomplete=True, **flags):
0.79 /testbed/sympy/matrices/matrices.py(1205):     def is_diagonalizable(self, reals_only=False, **kwargs):
0.79 /testbed/sympy/matrices/matrices.py(1294):     def jordan_form(self, calc_transform=True, **kwargs):
0.79 /testbed/sympy/matrices/matrices.py(1486):     def left_eigenvects(self, **flags):
0.79 /testbed/sympy/matrices/matrices.py(1519):     def singular_values(self):
0.79 /testbed/sympy/matrices/matrices.py(1551): class MatrixCalculus(MatrixCommon):
0.79 /testbed/sympy/matrices/matrices.py(1551): class MatrixCalculus(MatrixCommon):
0.79 /testbed/sympy/matrices/matrices.py(1552):     """Provides calculus-related matrix operations."""
0.79 /testbed/sympy/matrices/matrices.py(1554):     def diff(self, *args):
0.79 /testbed/sympy/matrices/matrices.py(1578):     def _eval_derivative(self, arg):
0.79 /testbed/sympy/matrices/matrices.py(1581):     def integrate(self, *args):
0.79 /testbed/sympy/matrices/matrices.py(1608):     def jacobian(self, X):
0.79 /testbed/sympy/matrices/matrices.py(1665):     def limit(self, *args):
0.79 /testbed/sympy/matrices/matrices.py(1690): class MatrixDeprecated(MatrixCommon):
0.79 /testbed/sympy/matrices/matrices.py(1690): class MatrixDeprecated(MatrixCommon):
0.79 /testbed/sympy/matrices/matrices.py(1691):     """A class to house deprecated matrix methods."""
0.79 /testbed/sympy/matrices/matrices.py(1693):     def berkowitz_charpoly(self, x=Dummy('lambda'), simplify=_simplify):
0.79 /testbed/sympy/matrices/matrices.py(1696):     def berkowitz_det(self):
0.79 /testbed/sympy/matrices/matrices.py(1707):     def berkowitz_eigenvals(self, **flags):
0.79 /testbed/sympy/matrices/matrices.py(1717):     def berkowitz_minors(self):
0.79 /testbed/sympy/matrices/matrices.py(1733):     def berkowitz(self):
0.79 /testbed/sympy/matrices/matrices.py(1773):     def cofactorMatrix(self, method="berkowitz"):
0.79 /testbed/sympy/matrices/matrices.py(1776):     def det_bareis(self):
0.79 /testbed/sympy/matrices/matrices.py(1779):     def det_bareiss(self):
0.79 /testbed/sympy/matrices/matrices.py(1798):     def det_LU_decomposition(self):
0.79 /testbed/sympy/matrices/matrices.py(1819):     def jordan_cell(self, eigenval, n):
0.79 /testbed/sympy/matrices/matrices.py(1822):     def jordan_cells(self, calc_transformation=True):
0.79 /testbed/sympy/matrices/matrices.py(1826):     def minorEntry(self, i, j, method="berkowitz"):
0.79 /testbed/sympy/matrices/matrices.py(1829):     def minorMatrix(self, i, j):
0.79 /testbed/sympy/matrices/matrices.py(1832):     def permuteBkwd(self, perm):
0.79 /testbed/sympy/matrices/matrices.py(1836):     def permuteFwd(self, perm):
0.79 /testbed/sympy/matrices/matrices.py(1841): class MatrixBase(MatrixDeprecated,
0.79 /testbed/sympy/matrices/matrices.py(1842):                  MatrixCalculus,
0.79 /testbed/sympy/matrices/matrices.py(1843):                  MatrixEigen,
0.79 /testbed/sympy/matrices/matrices.py(1844):                  MatrixCommon):
0.79 /testbed/sympy/matrices/matrices.py(1841): class MatrixBase(MatrixDeprecated,
0.79 /testbed/sympy/matrices/matrices.py(1841): class MatrixBase(MatrixDeprecated,
0.79 /testbed/sympy/matrices/matrices.py(1845):     """Base class for matrix objects."""
0.79 /testbed/sympy/matrices/matrices.py(1847):     __array_priority__ = 11
0.79 /testbed/sympy/matrices/matrices.py(1849):     is_Matrix = True
0.79 /testbed/sympy/matrices/matrices.py(1850):     _class_priority = 3
0.79 /testbed/sympy/matrices/matrices.py(1851):     _sympify = staticmethod(sympify)
0.79 /testbed/sympy/matrices/matrices.py(1853):     __hash__ = None  # Mutable
0.79 /testbed/sympy/matrices/matrices.py(1855):     def __array__(self):
0.79 /testbed/sympy/matrices/matrices.py(1859):     def __getattr__(self, attr):
0.79 /testbed/sympy/matrices/matrices.py(1870):     def __len__(self):
0.79 /testbed/sympy/matrices/matrices.py(1877):     def __mathml__(self):
0.79 /testbed/sympy/matrices/matrices.py(1887):     def __ne__(self, other):
0.79 /testbed/sympy/matrices/matrices.py(1890):     def _matrix_pow_by_jordan_blocks(self, num):
0.79 /testbed/sympy/matrices/matrices.py(1916):     def __repr__(self):
0.79 /testbed/sympy/matrices/matrices.py(1919):     def __str__(self):
0.79 /testbed/sympy/matrices/matrices.py(1924):     def _diagonalize_clear_subproducts(self):
0.79 /testbed/sympy/matrices/matrices.py(1929):     def _format_str(self, printer=None):
0.79 /testbed/sympy/matrices/matrices.py(1940):     @classmethod
0.79 /testbed/sympy/matrices/matrices.py(1941):     def _handle_creation_inputs(cls, *args, **kwargs):
0.79 /testbed/sympy/matrices/matrices.py(2088):     def _setitem(self, key, value):
0.79 /testbed/sympy/matrices/matrices.py(2158):     def add(self, b):
0.79 /testbed/sympy/matrices/matrices.py(2162):     def cholesky_solve(self, rhs):
0.79 /testbed/sympy/matrices/matrices.py(2191):     def cholesky(self):
0.79 /testbed/sympy/matrices/matrices.py(2228):     def condition_number(self):
0.79 /testbed/sympy/matrices/matrices.py(2251):     def copy(self):
0.79 /testbed/sympy/matrices/matrices.py(2268):     def cross(self, b):
0.79 /testbed/sympy/matrices/matrices.py(2300):     @property
0.79 /testbed/sympy/matrices/matrices.py(2301):     def D(self):
0.79 /testbed/sympy/matrices/matrices.py(2343):     def diagonal_solve(self, rhs):
0.79 /testbed/sympy/matrices/matrices.py(2374):     def dot(self, b):
0.79 /testbed/sympy/matrices/matrices.py(2433):     def dual(self):
0.79 /testbed/sympy/matrices/matrices.py(2472):     def exp(self):
0.79 /testbed/sympy/matrices/matrices.py(2511):     def gauss_jordan_solve(self, b, freevar=False):
0.79 /testbed/sympy/matrices/matrices.py(2645):     def inv_mod(self, m):
0.79 /testbed/sympy/matrices/matrices.py(2687):     def inverse_ADJ(self, iszerofunc=_iszero):
0.79 /testbed/sympy/matrices/matrices.py(2711):     def inverse_GE(self, iszerofunc=_iszero):
0.79 /testbed/sympy/matrices/matrices.py(2732):     def inverse_LU(self, iszerofunc=_iszero):
0.79 /testbed/sympy/matrices/matrices.py(2751):     def inv(self, method=None, **kwargs):
0.79 /testbed/sympy/matrices/matrices.py(2815):     def is_nilpotent(self):
0.79 /testbed/sympy/matrices/matrices.py(2844):     def key2bounds(self, keys):
0.79 /testbed/sympy/matrices/matrices.py(2874):     def key2ij(self, key):
0.79 /testbed/sympy/matrices/matrices.py(2894):     def LDLdecomposition(self):
0.79 /testbed/sympy/matrices/matrices.py(2934):     def LDLsolve(self, rhs):
0.79 /testbed/sympy/matrices/matrices.py(2975):     def lower_triangular_solve(self, rhs):
0.79 /testbed/sympy/matrices/matrices.py(3000):                         iszerofunc=_iszero,
0.79 /testbed/sympy/matrices/matrices.py(3001):                         simpfunc=None,
0.79 /testbed/sympy/matrices/matrices.py(3002):                         rankcheck=False):
0.79 /testbed/sympy/matrices/matrices.py(2999):     def LUdecomposition(self,
0.79 /testbed/sympy/matrices/matrices.py(3071):                                iszerofunc=_iszero,
0.79 /testbed/sympy/matrices/matrices.py(3072):                                simpfunc=None,
0.79 /testbed/sympy/matrices/matrices.py(3073):                                rankcheck=False):
0.79 /testbed/sympy/matrices/matrices.py(3070):     def LUdecomposition_Simple(self,
0.79 /testbed/sympy/matrices/matrices.py(3267):     def LUdecompositionFF(self):
0.79 /testbed/sympy/matrices/matrices.py(3316):     def LUsolve(self, rhs, iszerofunc=_iszero):
0.79 /testbed/sympy/matrices/matrices.py(3356):     def multiply(self, b):
0.79 /testbed/sympy/matrices/matrices.py(3368):     def normalized(self):
0.79 /testbed/sympy/matrices/matrices.py(3382):     def norm(self, ord=None):
0.79 /testbed/sympy/matrices/matrices.py(3482):     def pinv_solve(self, B, arbitrary_matrix=None):
0.79 /testbed/sympy/matrices/matrices.py(3568):     def pinv(self):
0.79 /testbed/sympy/matrices/matrices.py(3612):     def print_nonzero(self, symb="X"):
0.79 /testbed/sympy/matrices/matrices.py(3646):     def project(self, v):
0.79 /testbed/sympy/matrices/matrices.py(3662):     def QRdecomposition(self):
0.79 /testbed/sympy/matrices/matrices.py(3741):     def QRsolve(self, b):
0.79 /testbed/sympy/plotting/plot.py:28: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
  from collections import Callable
/testbed/sympy/core/basic.py:3: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
  from collections import Mapping, defaultdict
/testbed/sympy/core/containers.py:271: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
  class OrderedSet(collections.MutableSet):
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(sympy/utilities/randtest\\.py|sympy/matrices/matrices\\.py)']
0.36 /testbed/sympy/matrices/matrices.py(1): from __future__ import print_function, division
0.36 /testbed/sympy/matrices/matrices.py(3): import collections
0.36 /testbed/sympy/matrices/matrices.py(4): from mpmath.libmp.libmpf import prec_to_dps
0.36 /testbed/sympy/matrices/matrices.py(5): from sympy.assumptions.refine import refine
0.36 /testbed/sympy/matrices/matrices.py(6): from sympy.core.add import Add
0.36 /testbed/sympy/matrices/matrices.py(7): from sympy.core.basic import Basic, Atom
0.36 /testbed/sympy/matrices/matrices.py(8): from sympy.core.expr import Expr
0.36 /testbed/sympy/matrices/matrices.py(9): from sympy.core.power import Pow
0.36 /testbed/sympy/matrices/matrices.py(10): from sympy.core.symbol import (Symbol, Dummy, symbols,
0.36 /testbed/sympy/matrices/matrices.py(12): from sympy.core.numbers import Integer, ilcm, Float
0.36 /testbed/sympy/matrices/matrices.py(13): from sympy.core.singleton import S
0.36 /testbed/sympy/matrices/matrices.py(14): from sympy.core.sympify import sympify
0.36 /testbed/sympy/matrices/matrices.py(15): from sympy.functions.elementary.miscellaneous import sqrt, Max, Min
0.36 /testbed/sympy/matrices/matrices.py(16): from sympy.functions import Abs, exp, factorial
0.36 /testbed/sympy/matrices/matrices.py(17): from sympy.polys import PurePoly, roots, cancel, gcd
0.36 /testbed/sympy/matrices/matrices.py(18): from sympy.printing import sstr
0.36 /testbed/sympy/matrices/matrices.py(19): from sympy.simplify import simplify as _simplify, signsimp, nsimplify
0.36 /testbed/sympy/matrices/matrices.py(20): from sympy.core.compatibility import reduce, as_int, string_types
0.36 /testbed/sympy/matrices/matrices.py(22): from sympy.utilities.iterables import flatten, numbered_symbols
0.36 /testbed/sympy/matrices/matrices.py(23): from sympy.core.decorators import call_highest_priority
0.36 /testbed/sympy/matrices/matrices.py(24): from sympy.core.compatibility import is_sequence, default_sort_key, range, \
0.36 /testbed/sympy/matrices/matrices.py(28): from types import FunctionType
0.36 /testbed/sympy/matrices/matrices.py(30): from .common import (a2idx, classof, MatrixError, ShapeError,
0.36 /testbed/sympy/matrices/matrices.py(34): def _iszero(x):
0.36 /testbed/sympy/matrices/matrices.py(42): class DeferredVector(Symbol, NotIterable):
0.36 /testbed/sympy/matrices/matrices.py(42): class DeferredVector(Symbol, NotIterable):
0.36 /testbed/sympy/matrices/matrices.py(43):     """A vector whose components are deferred (e.g. for use with lambdify)
0.36 /testbed/sympy/matrices/matrices.py(58):     def __getitem__(self, i):
0.36 /testbed/sympy/matrices/matrices.py(66):     def __str__(self):
0.36 /testbed/sympy/matrices/matrices.py(69):     def __repr__(self):
0.36 /testbed/sympy/matrices/matrices.py(73): class MatrixDeterminant(MatrixCommon):
0.36 /testbed/sympy/matrices/matrices.py(73): class MatrixDeterminant(MatrixCommon):
0.36 /testbed/sympy/matrices/matrices.py(74):     """Provides basic matrix determinant operations.
0.36 /testbed/sympy/matrices/matrices.py(77):     def _eval_berkowitz_toeplitz_matrix(self):
0.36 /testbed/sympy/matrices/matrices.py(121):     def _eval_berkowitz_vector(self):
0.36 /testbed/sympy/matrices/matrices.py(165):     def _eval_det_bareiss(self):
0.36 /testbed/sympy/matrices/matrices.py(218):     def _eval_det_berkowitz(self):
0.36 /testbed/sympy/matrices/matrices.py(223):     def _eval_det_lu(self, iszerofunc=_iszero, simpfunc=None):
0.36 /testbed/sympy/matrices/matrices.py(270):     def _eval_determinant(self):
0.36 /testbed/sympy/matrices/matrices.py(275):     def adjugate(self, method="berkowitz"):
0.36 /testbed/sympy/matrices/matrices.py(290):     def charpoly(self, x='lambda', simplify=_simplify):
0.36 /testbed/sympy/matrices/matrices.py(349):     def cofactor(self, i, j, method="berkowitz"):
0.36 /testbed/sympy/matrices/matrices.py(365):     def cofactor_matrix(self, method="berkowitz"):
0.36 /testbed/sympy/matrices/matrices.py(383):     def det(self, method="bareiss"):
0.36 /testbed/sympy/matrices/matrices.py(432):     def minor(self, i, j, method="berkowitz"):
0.36 /testbed/sympy/matrices/matrices.py(450):     def minor_submatrix(self, i, j):
0.36 /testbed/sympy/matrices/matrices.py(475): class MatrixReductions(MatrixDeterminant):
0.36 /testbed/sympy/matrices/matrices.py(475): class MatrixReductions(MatrixDeterminant):
0.36 /testbed/sympy/matrices/matrices.py(476):     """Provides basic matrix row/column operations.
0.36 /testbed/sympy/matrices/matrices.py(479):     def _eval_col_op_swap(self, col1, col2):
0.36 /testbed/sympy/matrices/matrices.py(488):     def _eval_col_op_multiply_col_by_const(self, col, k):
0.36 /testbed/sympy/matrices/matrices.py(495):     def _eval_col_op_add_multiple_to_other_col(self, col, k, col2):
0.36 /testbed/sympy/matrices/matrices.py(502):     def _eval_row_op_swap(self, row1, row2):
0.36 /testbed/sympy/matrices/matrices.py(511):     def _eval_row_op_multiply_row_by_const(self, row, k):
0.36 /testbed/sympy/matrices/matrices.py(518):     def _eval_row_op_add_multiple_to_other_row(self, row, k, row2):
0.36 /testbed/sympy/matrices/matrices.py(525):     def _eval_echelon_form(self, iszerofunc, simpfunc):
0.36 /testbed/sympy/matrices/matrices.py(534):     def _eval_is_echelon(self, iszerofunc):
0.36 /testbed/sympy/matrices/matrices.py(542):     def _eval_rref(self, iszerofunc, simpfunc, normalize_last=True):
0.36 /testbed/sympy/matrices/matrices.py(548):     def _normalize_op_args(self, op, col, k, col1, col2, error_str="col"):
0.36 /testbed/sympy/matrices/matrices.py(597):     def _permute_complexity_right(self, iszerofunc):
0.36 /testbed/sympy/matrices/matrices.py(616):     def _row_reduce(self, iszerofunc, simpfunc, normalize_last=True,
0.36 /testbed/sympy/matrices/matrices.py(714):     def echelon_form(self, iszerofunc=_iszero, simplify=False, with_pivots=False):
0.36 /testbed/sympy/matrices/matrices.py(727):     def elementary_col_op(self, op="n->kn", col=None, k=None, col1=None, col2=None):
0.36 /testbed/sympy/matrices/matrices.py(757):     def elementary_row_op(self, op="n->kn", row=None, k=None, row1=None, row2=None):
0.36 /testbed/sympy/matrices/matrices.py(787):     @property
0.36 /testbed/sympy/matrices/matrices.py(788):     def is_echelon(self, iszerofunc=_iszero):
0.36 /testbed/sympy/matrices/matrices.py(795):     def rank(self, iszerofunc=_iszero, simplify=False):
0.36 /testbed/sympy/matrices/matrices.py(834):     def rref(self, iszerofunc=_iszero, simplify=False, pivots=True, normalize_last=True):
0.36 /testbed/sympy/matrices/matrices.py(896): class MatrixSubspaces(MatrixReductions):
0.36 /testbed/sympy/matrices/matrices.py(896): class MatrixSubspaces(MatrixReductions):
0.36 /testbed/sympy/matrices/matrices.py(897):     """Provides methods relating to the fundamental subspaces
0.36 /testbed/sympy/matrices/matrices.py(900):     def columnspace(self, simplify=False):
0.36 /testbed/sympy/matrices/matrices.py(932):     def nullspace(self, simplify=False):
0.36 /testbed/sympy/matrices/matrices.py(975):     def rowspace(self, simplify=False):
0.36 /testbed/sympy/matrices/matrices.py(982):     @classmethod
0.36 /testbed/sympy/matrices/matrices.py(983):     def orthogonalize(cls, *vecs, **kwargs):
0.36 /testbed/sympy/matrices/matrices.py(1024): class MatrixEigen(MatrixSubspaces):
0.36 /testbed/sympy/matrices/matrices.py(1024): class MatrixEigen(MatrixSubspaces):
0.36 /testbed/sympy/matrices/matrices.py(1025):     """Provides basic matrix eigenvalue/vector operations.
0.36 /testbed/sympy/matrices/matrices.py(1028):     _cache_is_diagonalizable = None
0.36 /testbed/sympy/matrices/matrices.py(1029):     _cache_eigenvects = None
0.36 /testbed/sympy/matrices/matrices.py(1031):     def diagonalize(self, reals_only=False, sort=False, normalize=False):
0.36 /testbed/sympy/matrices/matrices.py(1104):     def eigenvals(self, error_when_incomplete=True, **flags):
0.36 /testbed/sympy/matrices/matrices.py(1136):     def eigenvects(self, error_when_incomplete=True, **flags):
0.36 /testbed/sympy/matrices/matrices.py(1205):     def is_diagonalizable(self, reals_only=False, **kwargs):
0.36 /testbed/sympy/matrices/matrices.py(1294):     def jordan_form(self, calc_transform=True, **kwargs):
0.36 /testbed/sympy/matrices/matrices.py(1486):     def left_eigenvects(self, **flags):
0.36 /testbed/sympy/matrices/matrices.py(1519):     def singular_values(self):
0.36 /testbed/sympy/matrices/matrices.py(1551): class MatrixCalculus(MatrixCommon):
0.36 /testbed/sympy/matrices/matrices.py(1551): class MatrixCalculus(MatrixCommon):
0.36 /testbed/sympy/matrices/matrices.py(1552):     """Provides calculus-related matrix operations."""
0.36 /testbed/sympy/matrices/matrices.py(1554):     def diff(self, *args):
0.36 /testbed/sympy/matrices/matrices.py(1578):     def _eval_derivative(self, arg):
0.36 /testbed/sympy/matrices/matrices.py(1581):     def integrate(self, *args):
0.36 /testbed/sympy/matrices/matrices.py(1608):     def jacobian(self, X):
0.36 /testbed/sympy/matrices/matrices.py(1665):     def limit(self, *args):
0.36 /testbed/sympy/matrices/matrices.py(1690): class MatrixDeprecated(MatrixCommon):
0.36 /testbed/sympy/matrices/matrices.py(1690): class MatrixDeprecated(MatrixCommon):
0.36 /testbed/sympy/matrices/matrices.py(1691):     """A class to house deprecated matrix methods."""
0.36 /testbed/sympy/matrices/matrices.py(1693):     def berkowitz_charpoly(self, x=Dummy('lambda'), simplify=_simplify):
0.36 /testbed/sympy/matrices/matrices.py(1696):     def berkowitz_det(self):
0.36 /testbed/sympy/matrices/matrices.py(1707):     def berkowitz_eigenvals(self, **flags):
0.36 /testbed/sympy/matrices/matrices.py(1717):     def berkowitz_minors(self):
0.36 /testbed/sympy/matrices/matrices.py(1733):     def berkowitz(self):
0.36 /testbed/sympy/matrices/matrices.py(1773):     def cofactorMatrix(self, method="berkowitz"):
0.36 /testbed/sympy/matrices/matrices.py(1776):     def det_bareis(self):
0.36 /testbed/sympy/matrices/matrices.py(1779):     def det_bareiss(self):
0.36 /testbed/sympy/matrices/matrices.py(1798):     def det_LU_decomposition(self):
0.36 /testbed/sympy/matrices/matrices.py(1819):     def jordan_cell(self, eigenval, n):
0.36 /testbed/sympy/matrices/matrices.py(1822):     def jordan_cells(self, calc_transformation=True):
0.36 /testbed/sympy/matrices/matrices.py(1826):     def minorEntry(self, i, j, method="berkowitz"):
0.36 /testbed/sympy/matrices/matrices.py(1829):     def minorMatrix(self, i, j):
0.36 /testbed/sympy/matrices/matrices.py(1832):     def permuteBkwd(self, perm):
0.36 /testbed/sympy/matrices/matrices.py(1836):     def permuteFwd(self, perm):
0.36 /testbed/sympy/matrices/matrices.py(1841): class MatrixBase(MatrixDeprecated,
0.36 /testbed/sympy/matrices/matrices.py(1842):                  MatrixCalculus,
0.36 /testbed/sympy/matrices/matrices.py(1843):                  MatrixEigen,
0.36 /testbed/sympy/matrices/matrices.py(1844):                  MatrixCommon):
0.36 /testbed/sympy/matrices/matrices.py(1841): class MatrixBase(MatrixDeprecated,
0.36 /testbed/sympy/matrices/matrices.py(1841): class MatrixBase(MatrixDeprecated,
0.36 /testbed/sympy/matrices/matrices.py(1845):     """Base class for matrix objects."""
0.36 /testbed/sympy/matrices/matrices.py(1847):     __array_priority__ = 11
0.36 /testbed/sympy/matrices/matrices.py(1849):     is_Matrix = True
0.36 /testbed/sympy/matrices/matrices.py(1850):     _class_priority = 3
0.36 /testbed/sympy/matrices/matrices.py(1851):     _sympify = staticmethod(sympify)
0.36 /testbed/sympy/matrices/matrices.py(1853):     __hash__ = None  # Mutable
0.36 /testbed/sympy/matrices/matrices.py(1855):     def __array__(self):
0.36 /testbed/sympy/matrices/matrices.py(1859):     def __getattr__(self, attr):
0.36 /testbed/sympy/matrices/matrices.py(1870):     def __len__(self):
0.36 /testbed/sympy/matrices/matrices.py(1877):     def __mathml__(self):
0.36 /testbed/sympy/matrices/matrices.py(1887):     def __ne__(self, other):
0.36 /testbed/sympy/matrices/matrices.py(1890):     def _matrix_pow_by_jordan_blocks(self, num):
0.36 /testbed/sympy/matrices/matrices.py(1916):     def __repr__(self):
0.36 /testbed/sympy/matrices/matrices.py(1919):     def __str__(self):
0.36 /testbed/sympy/matrices/matrices.py(1924):     def _diagonalize_clear_subproducts(self):
0.36 /testbed/sympy/matrices/matrices.py(1929):     def _format_str(self, printer=None):
0.36 /testbed/sympy/matrices/matrices.py(1940):     @classmethod
0.36 /testbed/sympy/matrices/matrices.py(1941):     def _handle_creation_inputs(cls, *args, **kwargs):
0.36 /testbed/sympy/matrices/matrices.py(2088):     def _setitem(self, key, value):
0.36 /testbed/sympy/matrices/matrices.py(2158):     def add(self, b):
0.36 /testbed/sympy/matrices/matrices.py(2162):     def cholesky_solve(self, rhs):
0.36 /testbed/sympy/matrices/matrices.py(2191):     def cholesky(self):
0.36 /testbed/sympy/matrices/matrices.py(2228):     def condition_number(self):
0.36 /testbed/sympy/matrices/matrices.py(2251):     def copy(self):
0.36 /testbed/sympy/matrices/matrices.py(2268):     def cross(self, b):
0.36 /testbed/sympy/matrices/matrices.py(2300):     @property
0.36 /testbed/sympy/matrices/matrices.py(2301):     def D(self):
0.36 /testbed/sympy/matrices/matrices.py(2343):     def diagonal_solve(self, rhs):
0.36 /testbed/sympy/matrices/matrices.py(2374):     def dot(self, b):
0.36 /testbed/sympy/matrices/matrices.py(2433):     def dual(self):
0.36 /testbed/sympy/matrices/matrices.py(2472):     def exp(self):
0.36 /testbed/sympy/matrices/matrices.py(2511):     def gauss_jordan_solve(self, b, freevar=False):
0.36 /testbed/sympy/matrices/matrices.py(2645):     def inv_mod(self, m):
0.36 /testbed/sympy/matrices/matrices.py(2687):     def inverse_ADJ(self, iszerofunc=_iszero):
0.36 /testbed/sympy/matrices/matrices.py(2711):     def inverse_GE(self, iszerofunc=_iszero):
0.36 /testbed/sympy/matrices/matrices.py(2732):     def inverse_LU(self, iszerofunc=_iszero):
0.36 /testbed/sympy/matrices/matrices.py(2751):     def inv(self, method=None, **kwargs):
0.36 /testbed/sympy/matrices/matrices.py(2815):     def is_nilpotent(self):
0.36 /testbed/sympy/matrices/matrices.py(2844):     def key2bounds(self, keys):
0.36 /testbed/sympy/matrices/matrices.py(2874):     def key2ij(self, key):
0.36 /testbed/sympy/matrices/matrices.py(2894):     def LDLdecomposition(self):
0.36 /testbed/sympy/matrices/matrices.py(2934):     def LDLsolve(self, rhs):
0.36 /testbed/sympy/matrices/matrices.py(2975):     def lower_triangular_solve(self, rhs):
0.36 /testbed/sympy/matrices/matrices.py(3000):                         iszerofunc=_iszero,
0.36 /testbed/sympy/matrices/matrices.py(3001):                         simpfunc=None,
0.36 /testbed/sympy/matrices/matrices.py(3002):                         rankcheck=False):
0.36 /testbed/sympy/matrices/matrices.py(2999):     def LUdecomposition(self,
0.36 /testbed/sympy/matrices/matrices.py(3071):                                iszerofunc=_iszero,
0.36 /testbed/sympy/matrices/matrices.py(3072):                                simpfunc=None,
0.36 /testbed/sympy/matrices/matrices.py(3073):                                rankcheck=False):
0.36 /testbed/sympy/matrices/matrices.py(3070):     def LUdecomposition_Simple(self,
0.36 /testbed/sympy/matrices/matrices.py(3267):     def LUdecompositionFF(self):
0.36 /testbed/sympy/matrices/matrices.py(3316):     def LUsolve(self, rhs, iszerofunc=_iszero):
0.36 /testbed/sympy/matrices/matrices.py(3356):     def multiply(self, b):
0.36 /testbed/sympy/matrices/matrices.py(3368):     def normalized(self):
0.36 /testbed/sympy/matrices/matrices.py(3382):     def norm(self, ord=None):
0.36 /testbed/sympy/matrices/matrices.py(3482):     def pinv_solve(self, B, arbitrary_matrix=None):
0.36 /testbed/sympy/matrices/matrices.py(3568):     def pinv(self):
0.36 /testbed/sympy/matrices/matrices.py(3612):     def print_nonzero(self, symb="X"):
0.36 /testbed/sympy/matrices/matrices.py(3646):     def project(self, v):
0.36 /testbed/sympy/matrices/matrices.py(3662):     def QRdecomposition(self):
0.36 /testbed/sympy/matrices/matrices.py(3741):     def QRsolve(self, b):
0.36 /testbed/sympy/plotting/plot.py:28: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
  from collections import Callable
/testbed/sympy/matrices/matrices.py(3786):     def solve_least_squares(self, rhs, method='CH'):
0.36 /testbed/sympy/matrices/matrices.py(3845):     def solve(self, rhs, method='GE'):
0.36 /testbed/sympy/matrices/matrices.py(3861):     def table(self, printer, rowstart='[', rowend=']', rowsep='\n',
0.36 /testbed/sympy/matrices/matrices.py(3939):     def upper_triangular_solve(self, rhs):
0.36 /testbed/sympy/matrices/matrices.py(3962):     def vech(self, diagonal=True, check_symmetry=True):
0.36 /testbed/sympy/matrices/matrices.py(4018): def classof(A, B):
0.36 /testbed/sympy/matrices/matrices.py(4052): def a2idx(j, n=None):
0.36 /testbed/sympy/matrices/matrices.py(4067): def _find_reasonable_pivot(col, iszerofunc=_iszero, simpfunc=_simplify):
0.36 /testbed/sympy/matrices/matrices.py(4170): def _find_reasonable_pivot_naive(col, iszerofunc=_iszero, simpfunc=None):
============================= test process starts ==============================
executable:         /opt/miniconda3/envs/testbed/bin/python3  (3.9.23-final-0) [CPython]
architecture:       64-bit
cache:              no
ground types:       python 
numpy:              None
random seed:        112957
hash randomization: on (PYTHONHASHSEED=1550581831)

sympy/polys/tests/test_coverup_sympy__sympy-13877.py[1] 
test_determinant_nan_and_typeerror 0.43 /testbed/sympy/matrices/matrices.py(1983):         from sympy.matrices.sparse import SparseMatrix
0.43 /testbed/sympy/matrices/matrices.py(1985):         flat_list = None
0.43 /testbed/sympy/matrices/matrices.py(1987):         if len(args) == 1:
0.43 /testbed/sympy/matrices/matrices.py(1989):             if isinstance(args[0], SparseMatrix):
0.43 /testbed/sympy/matrices/matrices.py(1993):             elif isinstance(args[0], MatrixBase):
0.43 /testbed/sympy/matrices/matrices.py(1997):             elif isinstance(args[0], Basic) and args[0].is_Matrix:
0.43 /testbed/sympy/matrices/matrices.py(2001):             elif hasattr(args[0], "__array__"):
0.43 /testbed/sympy/matrices/matrices.py(2021):             elif is_sequence(args[0]) \
0.43 /testbed/sympy/matrices/matrices.py(2022):                     and not isinstance(args[0], DeferredVector):
0.43 /testbed/sympy/matrices/matrices.py(2021):             elif is_sequence(args[0]) \
0.43 /testbed/sympy/matrices/matrices.py(2023):                 in_mat = []
0.43 /testbed/sympy/matrices/matrices.py(2024):                 ncol = set()
0.43 /testbed/sympy/matrices/matrices.py(2025):                 for row in args[0]:
0.43 /testbed/sympy/matrices/matrices.py(2026):                     if isinstance(row, MatrixBase):
0.43 /testbed/sympy/matrices/matrices.py(2031):                         in_mat.append(row)
0.43 /testbed/sympy/matrices/matrices.py(2032):                         try:
0.43 /testbed/sympy/matrices/matrices.py(2033):                             ncol.add(len(row))
0.43 /testbed/sympy/matrices/matrices.py(2025):                 for row in args[0]:
0.43 /testbed/sympy/matrices/matrices.py(2026):                     if isinstance(row, MatrixBase):
0.43 /testbed/sympy/matrices/matrices.py(2031):                         in_mat.append(row)
0.43 /testbed/sympy/matrices/matrices.py(2032):                         try:
0.43 /testbed/sympy/matrices/matrices.py(2033):                             ncol.add(len(row))
0.43 /testbed/sympy/matrices/matrices.py(2025):                 for row in args[0]:
0.43 /testbed/sympy/matrices/matrices.py(2026):                     if isinstance(row, MatrixBase):
0.43 /testbed/sympy/matrices/matrices.py(2031):                         in_mat.append(row)
0.43 /testbed/sympy/matrices/matrices.py(2032):                         try:
0.43 /testbed/sympy/matrices/matrices.py(2033):                             ncol.add(len(row))
0.43 /testbed/sympy/matrices/matrices.py(2025):                 for row in args[0]:
0.43 /testbed/sympy/matrices/matrices.py(2026):                     if isinstance(row, MatrixBase):
0.43 /testbed/sympy/matrices/matrices.py(2031):                         in_mat.append(row)
0.43 /testbed/sympy/matrices/matrices.py(2032):                         try:
0.43 /testbed/sympy/matrices/matrices.py(2033):                             ncol.add(len(row))
0.43 /testbed/sympy/matrices/matrices.py(2025):                 for row in args[0]:
0.43 /testbed/sympy/matrices/matrices.py(2026):                     if isinstance(row, MatrixBase):
0.43 /testbed/sympy/matrices/matrices.py(2031):                         in_mat.append(row)
0.43 /testbed/sympy/matrices/matrices.py(2032):                         try:
0.43 /testbed/sympy/matrices/matrices.py(2033):                             ncol.add(len(row))
0.43 /testbed/sympy/matrices/matrices.py(2025):                 for row in args[0]:
0.43 /testbed/sympy/matrices/matrices.py(2036):                 if len(ncol) > 1:
0.43 /testbed/sympy/matrices/matrices.py(2039):                 cols = ncol.pop() if ncol else 0
0.43 /testbed/sympy/matrices/matrices.py(2040):                 rows = len(in_mat) if cols else 0
0.43 /testbed/sympy/matrices/matrices.py(2041):                 if rows:
0.43 /testbed/sympy/matrices/matrices.py(2042):                     if not is_sequence(in_mat[0]):
0.43 /testbed/sympy/matrices/matrices.py(2046):                 flat_list = []
0.43 /testbed/sympy/matrices/matrices.py(2047):                 for j in range(rows):
0.43 /testbed/sympy/matrices/matrices.py(2048):                     for i in range(cols):
0.43 /testbed/sympy/matrices/matrices.py(2049):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.43 /testbed/sympy/matrices/matrices.py(2048):                     for i in range(cols):
0.43 /testbed/sympy/matrices/matrices.py(2049):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.43 /testbed/sympy/matrices/matrices.py(2048):                     for i in range(cols):
0.43 /testbed/sympy/matrices/matrices.py(2049):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.43 /testbed/sympy/matrices/matrices.py(2048):                     for i in range(cols):
0.43 /testbed/sympy/matrices/matrices.py(2049):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.43 /testbed/sympy/matrices/matrices.py(2048):                     for i in range(cols):
0.43 /testbed/sympy/matrices/matrices.py(2049):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.43 /testbed/sympy/matrices/matrices.py(2048):                     for i in range(cols):
0.43 /testbed/sympy/matrices/matrices.py(2047):                 for j in range(rows):
0.43 /testbed/sympy/matrices/matrices.py(2048):                     for i in range(cols):
0.43 /testbed/sympy/matrices/matrices.py(2049):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.43 /testbed/sympy/matrices/matrices.py(2048):                     for i in range(cols):
0.43 /testbed/sympy/matrices/matrices.py(2049):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.43 /testbed/sympy/matrices/matrices.py(2048):                     for i in range(cols):
0.43 /testbed/sympy/matrices/matrices.py(2049):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.43 /testbed/sympy/matrices/matrices.py(2048):                     for i in range(cols):
0.43 /testbed/sympy/matrices/matrices.py(2049):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.43 /testbed/sympy/matrices/matrices.py(2048):                     for i in range(cols):
0.43 /testbed/sympy/matrices/matrices.py(2049):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.43 /testbed/sympy/matrices/matrices.py(2048):                     for i in range(cols):
0.43 /testbed/sympy/matrices/matrices.py(2047):                 for j in range(rows):
0.43 /testbed/sympy/matrices/matrices.py(2048):                     for i in range(cols):
0.43 /testbed/sympy/matrices/matrices.py(2049):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.43 /testbed/sympy/matrices/matrices.py(2048):                     for i in range(cols):
0.43 /testbed/sympy/matrices/matrices.py(2049):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.43 /testbed/sympy/matrices/matrices.py(2048):                     for i in range(cols):
0.43 /testbed/sympy/matrices/matrices.py(2049):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.43 /testbed/sympy/matrices/matrices.py(2048):                     for i in range(cols):
0.43 /testbed/sympy/matrices/matrices.py(2049):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.43 /testbed/sympy/matrices/matrices.py(2048):                     for i in range(cols):
0.43 /testbed/sympy/matrices/matrices.py(2049):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.43 /testbed/sympy/matrices/matrices.py(2048):                     for i in range(cols):
0.43 /testbed/sympy/matrices/matrices.py(2047):                 for j in range(rows):
0.43 /testbed/sympy/matrices/matrices.py(2048):                     for i in range(cols):
0.43 /testbed/sympy/matrices/matrices.py(2049):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.43 /testbed/sympy/matrices/matrices.py(2048):                     for i in range(cols):
0.43 /testbed/sympy/matrices/matrices.py(2049):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.43 /testbed/sympy/matrices/matrices.py(2048):                     for i in range(cols):
0.43 /testbed/sympy/matrices/matrices.py(2049):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.43 /testbed/sympy/matrices/matrices.py(2048):                     for i in range(cols):
0.43 /testbed/sympy/matrices/matrices.py(2049):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.43 /testbed/sympy/matrices/matrices.py(2048):                     for i in range(cols):
0.43 /testbed/sympy/matrices/matrices.py(2049):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.43 /testbed/sympy/matrices/matrices.py(2048):                     for i in range(cols):
0.43 /testbed/sympy/matrices/matrices.py(2047):                 for j in range(rows):
0.43 /testbed/sympy/matrices/matrices.py(2048):                     for i in range(cols):
0.43 /testbed/sympy/matrices/matrices.py(2049):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.43 /testbed/sympy/matrices/matrices.py(2048):                     for i in range(cols):
0.43 /testbed/sympy/matrices/matrices.py(2049):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.43 /testbed/sympy/matrices/matrices.py(2048):                     for i in range(cols):
0.43 /testbed/sympy/matrices/matrices.py(2049):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.43 /testbed/sympy/matrices/matrices.py(2048):                     for i in range(cols):
0.43 /testbed/sympy/matrices/matrices.py(2049):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.43 /testbed/sympy/matrices/matrices.py(2048):                     for i in range(cols):
0.43 /testbed/sympy/matrices/matrices.py(2049):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.43 /testbed/sympy/matrices/matrices.py(2048):                     for i in range(cols):
0.43 /testbed/sympy/matrices/matrices.py(2047):                 for j in range(rows):
0.43 /testbed/sympy/matrices/matrices.py(2083):         if flat_list is None:
0.43 /testbed/sympy/matrices/matrices.py(2086):         return rows, cols, flat_list
0.43 /testbed/sympy/matrices/matrices.py(1983):         from sympy.matrices.sparse import SparseMatrix
0.43 /testbed/sympy/matrices/matrices.py(1985):         flat_list = None
0.43 /testbed/sympy/matrices/matrices.py(1987):         if len(args) == 1:
0.43 /testbed/sympy/matrices/matrices.py(1989):             if isinstance(args[0], SparseMatrix):
0.43 /testbed/sympy/matrices/matrices.py(1993):             elif isinstance(args[0], MatrixBase):
0.43 /testbed/sympy/matrices/matrices.py(1997):             elif isinstance(args[0], Basic) and args[0].is_Matrix:
0.43 /testbed/sympy/matrices/matrices.py(2001):             elif hasattr(args[0], "__array__"):
0.43 /testbed/sympy/matrices/matrices.py(2021):             elif is_sequence(args[0]) \
0.43 /testbed/sympy/matrices/matrices.py(2022):                     and not isinstance(args[0], DeferredVector):
0.43 /testbed/sympy/matrices/matrices.py(2021):             elif is_sequence(args[0]) \
0.43 /testbed/sympy/matrices/matrices.py(2023):                 in_mat = []
0.43 /testbed/sympy/matrices/matrices.py(2024):                 ncol = set()
0.43 /testbed/sympy/matrices/matrices.py(2025):                 for row in args[0]:
0.43 /testbed/sympy/matrices/matrices.py(2026):                     if isinstance(row, MatrixBase):
0.43 /testbed/sympy/matrices/matrices.py(2031):                         in_mat.append(row)
0.43 /testbed/sympy/matrices/matrices.py(2032):                         try:
0.43 /testbed/sympy/matrices/matrices.py(2033):                             ncol.add(len(row))
0.43 /testbed/sympy/matrices/matrices.py(2025):                 for row in args[0]:
0.43 /testbed/sympy/matrices/matrices.py(2026):                     if isinstance(row, MatrixBase):
0.43 /testbed/sympy/matrices/matrices.py(2031):                         in_mat.append(row)
0.43 /testbed/sympy/matrices/matrices.py(2032):                         try:
0.43 /testbed/sympy/matrices/matrices.py(2033):                             ncol.add(len(row))
0.43 /testbed/sympy/matrices/matrices.py(2025):                 for row in args[0]:
0.43 /testbed/sympy/matrices/matrices.py(2026):                     if isinstance(row, MatrixBase):
0.43 /testbed/sympy/matrices/matrices.py(2031):                         in_mat.append(row)
0.43 /testbed/sympy/matrices/matrices.py(2032):                         try:
0.43 /testbed/sympy/matrices/matrices.py(2033):                             ncol.add(len(row))
0.43 /testbed/sympy/matrices/matrices.py(2025):                 for row in args[0]:
0.43 /testbed/sympy/matrices/matrices.py(2026):                     if isinstance(row, MatrixBase):
0.43 /testbed/sympy/matrices/matrices.py(2031):                         in_mat.append(row)
0.43 /testbed/sympy/matrices/matrices.py(2032):                         try:
0.43 /testbed/sympy/matrices/matrices.py(2033):                             ncol.add(len(row))
0.43 /testbed/sympy/matrices/matrices.py(2025):                 for row in args[0]:
0.43 /testbed/sympy/matrices/matrices.py(2026):                     if isinstance(row, MatrixBase):
0.43 /testbed/sympy/matrices/matrices.py(2031):                         in_mat.append(row)
0.43 /testbed/sympy/matrices/matrices.py(2032):                         try:
0.43 /testbed/sympy/matrices/matrices.py(2033):                             ncol.add(len(row))
0.43 /testbed/sympy/matrices/matrices.py(2025):                 for row in args[0]:
0.43 /testbed/sympy/matrices/matrices.py(2036):                 if len(ncol) > 1:
0.43 /testbed/sympy/matrices/matrices.py(2039):                 cols = ncol.pop() if ncol else 0
0.43 /testbed/sympy/matrices/matrices.py(2040):                 rows = len(in_mat) if cols else 0
0.43 /testbed/sympy/matrices/matrices.py(2041):                 if rows:
0.43 /testbed/sympy/matrices/matrices.py(2042):                     if not is_sequence(in_mat[0]):
0.43 /testbed/sympy/matrices/matrices.py(2046):                 flat_list = []
0.43 /testbed/sympy/matrices/matrices.py(2047):                 for j in range(rows):
0.43 /testbed/sympy/matrices/matrices.py(2048):                     for i in range(cols):
0.43 /testbed/sympy/matrices/matrices.py(2049):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.43 /testbed/sympy/matrices/matrices.py(2048):                     for i in range(cols):
0.43 /testbed/sympy/matrices/matrices.py(2049):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.43 /testbed/sympy/matrices/matrices.py(2048):                     for i in range(cols):
0.43 /testbed/sympy/matrices/matrices.py(2049):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.43 /testbed/sympy/matrices/matrices.py(2048):                     for i in range(cols):
0.43 /testbed/sympy/matrices/matrices.py(2049):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.43 /testbed/sympy/matrices/matrices.py(2048):                     for i in range(cols):
0.43 /testbed/sympy/matrices/matrices.py(2049):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.43 /testbed/sympy/matrices/matrices.py(2048):                     for i in range(cols):
0.43 /testbed/sympy/matrices/matrices.py(2047):                 for j in range(rows):
0.43 /testbed/sympy/matrices/matrices.py(2048):                     for i in range(cols):
0.43 /testbed/sympy/matrices/matrices.py(2049):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.43 /testbed/sympy/matrices/matrices.py(2048):                     for i in range(cols):
0.43 /testbed/sympy/matrices/matrices.py(2049):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.43 /testbed/sympy/matrices/matrices.py(2048):                     for i in range(cols):
0.43 /testbed/sympy/matrices/matrices.py(2049):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.43 /testbed/sympy/matrices/matrices.py(2048):                     for i in range(cols):
0.43 /testbed/sympy/matrices/matrices.py(2049):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.43 /testbed/sympy/matrices/matrices.py(2048):                     for i in range(cols):
0.43 /testbed/sympy/matrices/matrices.py(2049):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.43 /testbed/sympy/matrices/matrices.py(2048):                     for i in range(cols):
0.43 /testbed/sympy/matrices/matrices.py(2047):                 for j in range(rows):
0.43 /testbed/sympy/matrices/matrices.py(2048):                     for i in range(cols):
0.43 /testbed/sympy/matrices/matrices.py(2049):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.43 /testbed/sympy/matrices/matrices.py(2048):                     for i in range(cols):
0.43 /testbed/sympy/matrices/matrices.py(2049):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.43 /testbed/sympy/matrices/matrices.py(2048):                     for i in range(cols):
0.43 /testbed/sympy/matrices/matrices.py(2049):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.43 /testbed/sympy/matrices/matrices.py(2048):                     for i in range(cols):
0.43 /testbed/sympy/matrices/matrices.py(2049):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.43 /testbed/sympy/matrices/matrices.py(2048):                     for i in range(cols):
0.43 /testbed/sympy/matrices/matrices.py(2049):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.43 /testbed/sympy/matrices/matrices.py(2048):                     for i in range(cols):
0.43 /testbed/sympy/matrices/matrices.py(2047):                 for j in range(rows):
0.43 /testbed/sympy/matrices/matrices.py(2048):                     for i in range(cols):
0.43 /testbed/sympy/matrices/matrices.py(2049):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.43 /testbed/sympy/matrices/matrices.py(2048):                     for i in range(cols):
0.43 /testbed/sympy/matrices/matrices.py(2049):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.43 /testbed/sympy/matrices/matrices.py(2048):                     for i in range(cols):
0.43 /testbed/sympy/matrices/matrices.py(2049):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.43 /testbed/sympy/matrices/matrices.py(2048):                     for i in range(cols):
0.43 /testbed/sympy/matrices/matrices.py(2049):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.43 /testbed/sympy/matrices/matrices.py(2048):                     for i in range(cols):
0.43 /testbed/sympy/matrices/matrices.py(2049):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.43 /testbed/sympy/matrices/matrices.py(2048):                     for i in range(cols):
0.43 /testbed/sympy/matrices/matrices.py(2047):                 for j in range(rows):
0.43 /testbed/sympy/matrices/matrices.py(2048):                     for i in range(cols):
0.43 /testbed/sympy/matrices/matrices.py(2049):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.43 /testbed/sympy/matrices/matrices.py(2048):                     for i in range(cols):
0.43 /testbed/sympy/matrices/matrices.py(2049):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.43 /testbed/sympy/matrices/matrices.py(2048):                     for i in range(cols):
0.43 /testbed/sympy/matrices/matrices.py(2049):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.43 /testbed/sympy/matrices/matrices.py(2048):                     for i in range(cols):
0.43 /testbed/sympy/matrices/matrices.py(2049):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.43 /testbed/sympy/matrices/matrices.py(2048):                     for i in range(cols):
0.43 /testbed/sympy/matrices/matrices.py(2049):                         flat_list.append(cls._sympify(in_mat[j][i]))
0.43 /testbed/sympy/matrices/matrices.py(2048):                     for i in range(cols):
0.43 /testbed/sympy/matrices/matrices.py(2047):                 for j in range(rows):
0.43 /testbed/sympy/matrices/matrices.py(2083):         if flat_list is None:
0.43 /testbed/sympy/matrices/matrices.py(2086):         return rows, cols, flat_list
0.43 /testbed/sympy/matrices/matrices.py(273):         return self.det()
0.43 /testbed/sympy/matrices/matrices.py(396):         method = method.lower()
0.43 /testbed/sympy/matrices/matrices.py(397):         if method == "bareis":
0.43 /testbed/sympy/matrices/matrices.py(399):         if method == "det_lu":
0.43 /testbed/sympy/matrices/matrices.py(401):         if method not in ("bareiss", "berkowitz", "lu"):
0.43 /testbed/sympy/matrices/matrices.py(407):         if self.rows != self.cols:
0.43 /testbed/sympy/matrices/matrices.py(410):         n = self.rows
0.43 /testbed/sympy/matrices/matrices.py(411):         if n == 0:
0.43 /testbed/sympy/matrices/matrices.py(413):         elif n == 1:
0.43 /testbed/sympy/matrices/matrices.py(415):         elif n == 2:
0.43 /testbed/sympy/matrices/matrices.py(417):         elif n == 3:
0.43 /testbed/sympy/matrices/matrices.py(425):         if method == "bareiss":
0.43 /testbed/sympy/matrices/matrices.py(426):             return self._eval_det_bareiss()
0.43 /testbed/sympy/matrices/matrices.py(178):         def _find_pivot(l):
0.43 /testbed/sympy/matrices/matrices.py(187):         def bareiss(mat, cumm=1):
0.43 /testbed/sympy/matrices/matrices.py(216):         return cancel(bareiss(self))
0.43 /testbed/sympy/matrices/matrices.py(188):             if mat.rows == 0:
0.43 /testbed/sympy/matrices/matrices.py(190):             elif mat.rows == 1:
0.43 /testbed/sympy/matrices/matrices.py(195):             pivot_pos, pivot_val, _, _ = _find_pivot(mat[:, 0])
0.43 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.43 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.43 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.43 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.43 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.43 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.43 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.43 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.43 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.43 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.43 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(179):             for pos,val in enumerate(l):
0.43 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.43 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.43 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.43 /testbed/sympy/matrices/matrices.py(180):                 if val:
0.43 /testbed/sympy/matrices/matrices.py(179):             for pos,val in enumerate(l):
0.43 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.43 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.43 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.43 /testbed/sympy/matrices/matrices.py(180):                 if val:
0.43 /testbed/sympy/matrices/matrices.py(181):                     return (pos, val, None, None)
0.43 /testbed/sympy/matrices/matrices.py(196):             if pivot_pos == None:
0.43 /testbed/sympy/matrices/matrices.py(201):             sign = (-1) ** (pivot_pos % 2)
0.43 /testbed/sympy/matrices/matrices.py(204):             rows = list(i for i in range(mat.rows) if i != pivot_pos)
0.43 /testbed/sympy/matrices/matrices.py(204):             rows = list(i for i in range(mat.rows) if i != pivot_pos)
0.43 /testbed/sympy/matrices/matrices.py(204):             rows = list(i for i in range(mat.rows) if i != pivot_pos)
0.43 /testbed/sympy/matrices/matrices.py(204):             rows = list(i for i in range(mat.rows) if i != pivot_pos)
0.43 /testbed/sympy/matrices/matrices.py(204):             rows = list(i for i in range(mat.rows) if i != pivot_pos)
0.43 /testbed/sympy/matrices/matrices.py(204):             rows = list(i for i in range(mat.rows) if i != pivot_pos)
0.43 /testbed/sympy/matrices/matrices.py(204):             rows = list(i for i in range(mat.rows) if i != pivot_pos)
0.43 /testbed/sympy/matrices/matrices.py(205):             cols = list(range(mat.cols))
0.43 /testbed/sympy/matrices/matrices.py(206):             tmp_mat = mat.extract(rows, cols)
0.43 /testbed/sympy/matrices/matrices.py(208):             def entry(i, j):
0.43 /testbed/sympy/matrices/matrices.py(214):             return sign*bareiss(self._new(mat.rows - 1, mat.cols - 1, entry), pivot_val)
0.43 /testbed/sympy/matrices/matrices.py(1983):         from sympy.matrices.sparse import SparseMatrix
0.43 /testbed/sympy/matrices/matrices.py(1985):         flat_list = None
0.43 /testbed/sympy/matrices/matrices.py(1987):         if len(args) == 1:
0.43 /testbed/sympy/matrices/matrices.py(2051):         elif len(args) == 3:
0.43 /testbed/sympy/matrices/matrices.py(2052):             rows = as_int(args[0])
0.43 /testbed/sympy/matrices/matrices.py(2053):             cols = as_int(args[1])
0.43 /testbed/sympy/matrices/matrices.py(2055):             if rows < 0 or cols < 0:
0.43 /testbed/sympy/matrices/matrices.py(2060):             if len(args) == 3 and isinstance(args[2], collections.Callable):
0.43 /testbed/sympy/matrices/matrices.py(2061):                 op = args[2]
0.43 /testbed/sympy/matrices/matrices.py(2062):                 flat_list = []
0.43 /testbed/sympy/matrices/matrices.py(2063):                 for i in range(rows):
0.43 /testbed/sympy/matrices/matrices.py(2064):                     flat_list.extend(
0.43 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.43 /testbed/sympy/matrices/matrices.py(2066):                          for j in range(cols)])
0.43 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.43 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.43 /testbed/sympy/matrices/matrices.py(2066):                          for j in range(cols)])
0.43 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.43 /testbed/sympy/matrices/matrices.py(209):                 ret = (pivot_val*tmp_mat[i, j + 1] - mat[pivot_pos, j + 1]*tmp_mat[i, 0]) / cumm
0.43 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.43 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.43 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.43 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.43 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.43 /testbed/sympy/matrices/matrices.py(4055):         try:
0.43 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.43 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.43 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.43 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.43 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.43 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.43 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.43 /testbed/sympy/matrices/matrices.py(4055):         try:
0.43 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.43 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.43 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.43 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.43 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.43 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.43 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.43 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.43 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.43 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.43 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.43 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.43 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.43 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.43 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.43 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.43 /testbed/sympy/matrices/matrices.py(4055):         try:
0.43 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.43 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.43 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.43 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.43 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.43 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.43 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.43 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.43 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.43 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.43 /testbed/sympy/matrices/matrices.py(4055):         try:
0.43 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.43 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.43 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.43 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.43 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.43 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.43 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.43 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.43 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.43 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.43 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.43 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(210):                 if not ret.is_Atom:
0.43 /testbed/sympy/matrices/matrices.py(212):                 return ret
0.43 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.43 /testbed/sympy/matrices/matrices.py(2066):                          for j in range(cols)])
0.43 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.43 /testbed/sympy/matrices/matrices.py(209):                 ret = (pivot_val*tmp_mat[i, j + 1] - mat[pivot_pos, j + 1]*tmp_mat[i, 0]) / cumm
0.43 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.43 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.43 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.43 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.43 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.43 /testbed/sympy/matrices/matrices.py(4055):         try:
0.43 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.43 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.43 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.43 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.43 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.43 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.43 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.43 /testbed/sympy/matrices/matrices.py(4055):         try:
0.43 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.43 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.43 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.43 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.43 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.43 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.43 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.43 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.43 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.43 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.43 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.43 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.43 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.43 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.43 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.43 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.43 /testbed/sympy/matrices/matrices.py(4055):         try:
0.43 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.43 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.43 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.43 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.43 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.43 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.43 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.43 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.43 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.43 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.43 /testbed/sympy/matrices/matrices.py(4055):         try:
0.43 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.43 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.43 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.43 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.43 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.43 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.43 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.43 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.43 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.43 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.43 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.43 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.43 /testbed/sympy/matrices/matrices.py(210):                 if not ret.is_Atom:
0.43 /testbed/sympy/matrices/matrices.py(211):                     cancel(ret)
0.44 /testbed/sympy/matrices/matrices.py(212):                 return ret
0.44 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.44 /testbed/sympy/matrices/matrices.py(2066):                          for j in range(cols)])
0.44 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.44 /testbed/sympy/matrices/matrices.py(209):                 ret = (pivot_val*tmp_mat[i, j + 1] - mat[pivot_pos, j + 1]*tmp_mat[i, 0]) / cumm
0.44 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.44 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.44 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.44 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.44 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.44 /testbed/sympy/matrices/matrices.py(4055):         try:
0.44 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.44 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.44 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.44 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.44 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.44 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.44 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.44 /testbed/sympy/matrices/matrices.py(4055):         try:
0.44 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.44 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.44 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.44 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.44 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.44 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.44 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.44 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.44 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.44 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.44 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.44 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.44 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.44 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.44 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.44 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.44 /testbed/sympy/matrices/matrices.py(4055):         try:
0.44 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.44 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.44 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.44 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.44 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.44 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.44 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.44 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.44 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.44 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.44 /testbed/sympy/matrices/matrices.py(4055):         try:
0.44 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.44 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.44 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.44 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.44 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.44 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.44 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.44 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.44 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.44 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.44 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.44 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(210):                 if not ret.is_Atom:
0.44 /testbed/sympy/matrices/matrices.py(211):                     cancel(ret)
0.44 /testbed/sympy/matrices/matrices.py(212):                 return ret
0.44 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.44 /testbed/sympy/matrices/matrices.py(2066):                          for j in range(cols)])
0.44 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.44 /testbed/sympy/matrices/matrices.py(209):                 ret = (pivot_val*tmp_mat[i, j + 1] - mat[pivot_pos, j + 1]*tmp_mat[i, 0]) / cumm
0.44 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.44 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.44 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.44 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.44 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.44 /testbed/sympy/matrices/matrices.py(4055):         try:
0.44 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.44 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.44 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.44 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.44 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.44 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.44 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.44 /testbed/sympy/matrices/matrices.py(4055):         try:
0.44 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.44 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.44 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.44 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.44 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.44 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.44 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.44 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.44 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.44 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.44 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.44 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.44 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.44 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.44 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.44 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.44 /testbed/sympy/matrices/matrices.py(4055):         try:
0.44 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.44 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.44 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.44 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.44 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.44 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.44 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.44 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.44 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.44 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.44 /testbed/sympy/matrices/matrices.py(4055):         try:
0.44 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.44 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.44 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.44 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.44 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.44 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.44 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.44 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.44 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.44 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.44 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.44 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(210):                 if not ret.is_Atom:
0.44 /testbed/sympy/matrices/matrices.py(211):                     cancel(ret)
0.44 /testbed/sympy/matrices/matrices.py(212):                 return ret
0.44 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.44 /testbed/sympy/matrices/matrices.py(2064):                     flat_list.extend(
0.44 /testbed/sympy/matrices/matrices.py(2063):                 for i in range(rows):
0.44 /testbed/sympy/matrices/matrices.py(2064):                     flat_list.extend(
0.44 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.44 /testbed/sympy/matrices/matrices.py(2066):                          for j in range(cols)])
0.44 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.44 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.44 /testbed/sympy/matrices/matrices.py(2066):                          for j in range(cols)])
0.44 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.44 /testbed/sympy/matrices/matrices.py(209):                 ret = (pivot_val*tmp_mat[i, j + 1] - mat[pivot_pos, j + 1]*tmp_mat[i, 0]) / cumm
0.44 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.44 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.44 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.44 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.44 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.44 /testbed/sympy/matrices/matrices.py(4055):         try:
0.44 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.44 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.44 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.44 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.44 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.44 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.44 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.44 /testbed/sympy/matrices/matrices.py(4055):         try:
0.44 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.44 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.44 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.44 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.44 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.44 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.44 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.44 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.44 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.44 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.44 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.44 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.44 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.44 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.44 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.44 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.44 /testbed/sympy/matrices/matrices.py(4055):         try:
0.44 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.44 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.44 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.44 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.44 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.44 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.44 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.44 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.44 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.44 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.44 /testbed/sympy/matrices/matrices.py(4055):         try:
0.44 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.44 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.44 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.44 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.44 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.44 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.44 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.44 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.44 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.44 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.44 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.44 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.44 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.45 /testbed/sympy/matrices/matrices.py(210):                 if not ret.is_Atom:
0.45 /testbed/sympy/matrices/matrices.py(211):                     cancel(ret)
0.45 /testbed/sympy/matrices/matrices.py(212):                 return ret
0.45 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.45 /testbed/sympy/matrices/matrices.py(2066):                          for j in range(cols)])
0.45 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.45 /testbed/sympy/matrices/matrices.py(209):                 ret = (pivot_val*tmp_mat[i, j + 1] - mat[pivot_pos, j + 1]*tmp_mat[i, 0]) / cumm
0.45 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.45 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.45 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.45 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.45 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.45 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.45 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.45 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.45 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.45 /testbed/sympy/matrices/matrices.py(4055):         try:
0.45 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.45 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.45 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.45 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.45 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.45 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.45 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.45 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.45 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.45 /testbed/sympy/matrices/matrices.py(4055):         try:
0.45 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.45 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.45 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.45 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.45 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.45 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.45 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.45 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.45 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.45 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.45 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.45 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.45 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.45 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.45 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.45 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.45 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.45 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.45 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.45 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.45 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.45 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.45 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.45 /testbed/sympy/matrices/matrices.py(4055):         try:
0.45 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.45 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.45 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.45 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.45 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.45 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.45 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.45 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.45 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.45 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.45 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.45 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.45 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.45 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.45 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.45 /testbed/sympy/matrices/matrices.py(4055):         try:
0.45 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.45 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.45 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.45 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.45 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.45 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.45 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.45 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.45 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.45 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.45 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.45 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.45 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.45 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.45 /testbed/sympy/matrices/matrices.py(210):                 if not ret.is_Atom:
0.45 /testbed/sympy/matrices/matrices.py(211):                     cancel(ret)
0.46 /testbed/sympy/matrices/matrices.py(212):                 return ret
0.46 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.46 /testbed/sympy/matrices/matrices.py(2066):                          for j in range(cols)])
0.46 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.46 /testbed/sympy/matrices/matrices.py(209):                 ret = (pivot_val*tmp_mat[i, j + 1] - mat[pivot_pos, j + 1]*tmp_mat[i, 0]) / cumm
0.46 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.46 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.46 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.46 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.46 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.46 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.46 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.46 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.46 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.46 /testbed/sympy/matrices/matrices.py(4055):         try:
0.46 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.46 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.46 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.46 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.46 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.46 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.46 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.46 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.46 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.46 /testbed/sympy/matrices/matrices.py(4055):         try:
0.46 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.46 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.46 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.46 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.46 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.46 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.46 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.46 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.46 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.46 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.46 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.46 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.46 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.46 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.46 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.46 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.46 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.46 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.46 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.46 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.46 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.46 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.46 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.46 /testbed/sympy/matrices/matrices.py(4055):         try:
0.46 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.46 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.46 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.46 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.46 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.46 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.46 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.46 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.46 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.46 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.46 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.46 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.46 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.46 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.46 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.46 /testbed/sympy/matrices/matrices.py(4055):         try:
0.46 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.46 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.46 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.46 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.46 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.46 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.46 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.46 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.46 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.46 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.46 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.46 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.46 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.46 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.46 /testbed/sympy/matrices/matrices.py(210):                 if not ret.is_Atom:
0.46 /testbed/sympy/matrices/matrices.py(211):                     cancel(ret)
0.47 /testbed/sympy/matrices/matrices.py(212):                 return ret
0.47 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.47 /testbed/sympy/matrices/matrices.py(2066):                          for j in range(cols)])
0.47 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.47 /testbed/sympy/matrices/matrices.py(209):                 ret = (pivot_val*tmp_mat[i, j + 1] - mat[pivot_pos, j + 1]*tmp_mat[i, 0]) / cumm
0.47 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.47 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.47 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.47 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.47 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.47 /testbed/sympy/matrices/matrices.py(4055):         try:
0.47 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.47 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.47 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.47 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.47 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.47 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.47 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.47 /testbed/sympy/matrices/matrices.py(4055):         try:
0.47 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.47 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.47 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.47 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.47 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.47 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.47 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.47 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.47 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.47 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.47 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.47 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.47 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.47 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.47 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.47 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.47 /testbed/sympy/matrices/matrices.py(4055):         try:
0.47 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.47 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.47 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.47 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.47 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.47 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.47 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.47 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.47 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.47 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.47 /testbed/sympy/matrices/matrices.py(4055):         try:
0.47 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.47 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.47 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.47 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.47 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.47 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.47 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.47 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.47 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.47 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.47 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.47 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(210):                 if not ret.is_Atom:
0.47 /testbed/sympy/matrices/matrices.py(211):                     cancel(ret)
0.47 /testbed/sympy/matrices/matrices.py(212):                 return ret
0.47 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.47 /testbed/sympy/matrices/matrices.py(2064):                     flat_list.extend(
0.47 /testbed/sympy/matrices/matrices.py(2063):                 for i in range(rows):
0.47 /testbed/sympy/matrices/matrices.py(2064):                     flat_list.extend(
0.47 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.47 /testbed/sympy/matrices/matrices.py(2066):                          for j in range(cols)])
0.47 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.47 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.47 /testbed/sympy/matrices/matrices.py(2066):                          for j in range(cols)])
0.47 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.47 /testbed/sympy/matrices/matrices.py(209):                 ret = (pivot_val*tmp_mat[i, j + 1] - mat[pivot_pos, j + 1]*tmp_mat[i, 0]) / cumm
0.47 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.47 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.47 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.47 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.47 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.47 /testbed/sympy/matrices/matrices.py(4055):         try:
0.47 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.47 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.47 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.47 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.47 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.47 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.47 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.47 /testbed/sympy/matrices/matrices.py(4055):         try:
0.47 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.47 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.47 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.47 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.47 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.47 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.47 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.47 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.47 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.47 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.47 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.47 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.47 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.47 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.47 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.47 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.47 /testbed/sympy/matrices/matrices.py(4055):         try:
0.47 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.47 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.47 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.47 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.47 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.47 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.47 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.47 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.47 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.47 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.47 /testbed/sympy/matrices/matrices.py(4055):         try:
0.47 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.47 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.47 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.47 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.47 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.47 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.47 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.47 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.47 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.47 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.47 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.47 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.47 /testbed/sympy/matrices/matrices.py(210):                 if not ret.is_Atom:
0.47 /testbed/sympy/matrices/matrices.py(211):                     cancel(ret)
0.48 /testbed/sympy/matrices/matrices.py(212):                 return ret
0.48 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.48 /testbed/sympy/matrices/matrices.py(2066):                          for j in range(cols)])
0.48 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.48 /testbed/sympy/matrices/matrices.py(209):                 ret = (pivot_val*tmp_mat[i, j + 1] - mat[pivot_pos, j + 1]*tmp_mat[i, 0]) / cumm
0.48 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.48 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.48 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.48 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.48 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.48 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.48 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.48 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.48 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.48 /testbed/sympy/matrices/matrices.py(4055):         try:
0.48 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.48 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.48 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.48 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.48 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.48 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.48 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.48 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.48 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.48 /testbed/sympy/matrices/matrices.py(4055):         try:
0.48 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.48 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.48 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.48 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.48 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.48 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.48 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.48 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.48 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.48 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.48 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.48 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.48 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.48 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.48 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.48 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.48 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.48 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.48 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.48 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.48 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.48 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.48 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.48 /testbed/sympy/matrices/matrices.py(4055):         try:
0.48 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.48 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.48 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.48 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.48 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.48 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.48 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.48 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.48 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.48 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.48 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.48 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.48 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.48 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.48 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.48 /testbed/sympy/matrices/matrices.py(4055):         try:
0.48 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.48 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.48 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.48 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.48 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.48 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.48 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.48 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.48 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.48 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.48 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.48 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.48 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.48 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.48 /testbed/sympy/matrices/matrices.py(210):                 if not ret.is_Atom:
0.48 /testbed/sympy/matrices/matrices.py(211):                     cancel(ret)
0.49 /testbed/sympy/matrices/matrices.py(212):                 return ret
0.49 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.49 /testbed/sympy/matrices/matrices.py(2066):                          for j in range(cols)])
0.49 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.49 /testbed/sympy/matrices/matrices.py(209):                 ret = (pivot_val*tmp_mat[i, j + 1] - mat[pivot_pos, j + 1]*tmp_mat[i, 0]) / cumm
0.49 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.49 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.49 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.49 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.49 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.49 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.49 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.49 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.49 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.49 /testbed/sympy/matrices/matrices.py(4055):         try:
0.49 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.49 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.49 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.49 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.49 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.49 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.49 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.49 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.49 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.49 /testbed/sympy/matrices/matrices.py(4055):         try:
0.49 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.49 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.49 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.49 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.49 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.49 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.49 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.49 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.49 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.49 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.49 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.49 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.49 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.49 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.49 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.49 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.49 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.49 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.49 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.49 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.49 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.49 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.49 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.49 /testbed/sympy/matrices/matrices.py(4055):         try:
0.49 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.49 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.49 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.49 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.49 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.49 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.49 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.49 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.49 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.49 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.49 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.49 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.49 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.49 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.49 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.49 /testbed/sympy/matrices/matrices.py(4055):         try:
0.49 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.49 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.49 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.49 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.49 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.49 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.49 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.49 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.49 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.49 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.49 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.49 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.49 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.49 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.49 /testbed/sympy/matrices/matrices.py(210):                 if not ret.is_Atom:
0.49 /testbed/sympy/matrices/matrices.py(211):                     cancel(ret)
0.49 /testbed/sympy/matrices/matrices.py(212):                 return ret
0.49 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.49 /testbed/sympy/matrices/matrices.py(2066):                          for j in range(cols)])
0.49 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.49 /testbed/sympy/matrices/matrices.py(209):                 ret = (pivot_val*tmp_mat[i, j + 1] - mat[pivot_pos, j + 1]*tmp_mat[i, 0]) / cumm
0.49 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.49 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.49 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.49 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.49 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.49 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.49 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.49 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.49 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.49 /testbed/sympy/matrices/matrices.py(4055):         try:
0.49 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.49 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.49 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.49 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.49 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.49 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.49 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.49 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.49 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.49 /testbed/sympy/matrices/matrices.py(4055):         try:
0.49 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.49 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.49 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.49 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.49 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.49 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.49 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.49 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.49 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.49 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.49 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.49 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.49 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.49 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.49 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.49 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.49 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.49 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.49 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.49 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.49 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.49 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.49 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.49 /testbed/sympy/matrices/matrices.py(4055):         try:
0.49 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.49 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.49 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.49 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.49 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.49 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.49 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.49 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.49 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.49 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.49 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.49 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.49 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.49 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.49 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.49 /testbed/sympy/matrices/matrices.py(4055):         try:
0.49 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.49 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.49 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.49 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.49 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.49 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.49 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.49 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.49 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.49 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.49 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.49 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.49 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.49 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.49 /testbed/sympy/matrices/matrices.py(210):                 if not ret.is_Atom:
0.49 /testbed/sympy/matrices/matrices.py(211):                     cancel(ret)
0.50 /testbed/sympy/matrices/matrices.py(212):                 return ret
0.50 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.50 /testbed/sympy/matrices/matrices.py(2064):                     flat_list.extend(
0.50 /testbed/sympy/matrices/matrices.py(2063):                 for i in range(rows):
0.50 /testbed/sympy/matrices/matrices.py(2064):                     flat_list.extend(
0.50 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.50 /testbed/sympy/matrices/matrices.py(2066):                          for j in range(cols)])
0.50 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.50 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.50 /testbed/sympy/matrices/matrices.py(2066):                          for j in range(cols)])
0.50 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.50 /testbed/sympy/matrices/matrices.py(209):                 ret = (pivot_val*tmp_mat[i, j + 1] - mat[pivot_pos, j + 1]*tmp_mat[i, 0]) / cumm
0.50 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.50 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.50 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.50 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.50 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.50 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.50 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.50 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.50 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.50 /testbed/sympy/matrices/matrices.py(4055):         try:
0.50 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.50 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.50 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.50 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.50 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.50 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.50 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.50 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.50 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.50 /testbed/sympy/matrices/matrices.py(4055):         try:
0.50 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.50 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.50 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.50 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.50 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.50 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.50 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.50 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.50 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.50 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.50 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.50 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.50 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.50 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.50 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.50 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.50 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.50 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.50 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.50 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.50 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.50 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.50 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.50 /testbed/sympy/matrices/matrices.py(4055):         try:
0.50 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.50 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.50 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.50 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.50 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.50 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.50 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.50 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.50 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.50 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.50 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.50 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.50 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.50 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.50 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.50 /testbed/sympy/matrices/matrices.py(4055):         try:
0.50 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.50 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.50 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.50 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.50 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.50 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.50 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.50 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.50 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.50 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.50 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.50 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.50 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.50 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.50 /testbed/sympy/matrices/matrices.py(210):                 if not ret.is_Atom:
0.50 /testbed/sympy/matrices/matrices.py(211):                     cancel(ret)
0.51 /testbed/sympy/matrices/matrices.py(212):                 return ret
0.51 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.51 /testbed/sympy/matrices/matrices.py(2066):                          for j in range(cols)])
0.51 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.51 /testbed/sympy/matrices/matrices.py(209):                 ret = (pivot_val*tmp_mat[i, j + 1] - mat[pivot_pos, j + 1]*tmp_mat[i, 0]) / cumm
0.51 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.51 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.51 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.51 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.51 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.51 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.51 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.51 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.51 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.51 /testbed/sympy/matrices/matrices.py(4055):         try:
0.51 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.51 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.51 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.51 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.51 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.51 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.51 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.51 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.51 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.51 /testbed/sympy/matrices/matrices.py(4055):         try:
0.51 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.51 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.51 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.51 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.51 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.51 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.51 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.51 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.51 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.51 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.51 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.51 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.51 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.51 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.51 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.51 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.51 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.51 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.51 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.51 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.51 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.51 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.51 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.51 /testbed/sympy/matrices/matrices.py(4055):         try:
0.51 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.51 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.51 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.51 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.51 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.51 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.51 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.51 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.51 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.51 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.51 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.51 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.51 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.51 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.51 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.51 /testbed/sympy/matrices/matrices.py(4055):         try:
0.51 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.51 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.51 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.51 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.51 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.51 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.51 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.51 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.51 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.51 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.51 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.51 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.51 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.51 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.51 /testbed/sympy/matrices/matrices.py(210):                 if not ret.is_Atom:
0.51 /testbed/sympy/matrices/matrices.py(211):                     cancel(ret)
0.51 /testbed/sympy/matrices/matrices.py(212):                 return ret
0.51 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.51 /testbed/sympy/matrices/matrices.py(2066):                          for j in range(cols)])
0.51 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.51 /testbed/sympy/matrices/matrices.py(209):                 ret = (pivot_val*tmp_mat[i, j + 1] - mat[pivot_pos, j + 1]*tmp_mat[i, 0]) / cumm
0.51 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.51 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.51 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.51 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.51 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.51 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.51 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.51 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.51 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.51 /testbed/sympy/matrices/matrices.py(4055):         try:
0.51 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.51 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.51 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.51 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.51 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.51 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.51 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.51 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.51 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.51 /testbed/sympy/matrices/matrices.py(4055):         try:
0.51 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.51 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.51 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.51 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.51 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.51 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.51 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.51 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.51 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.51 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.51 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.51 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.51 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.51 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.51 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.51 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.51 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.51 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.51 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.51 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.51 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.51 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.51 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.51 /testbed/sympy/matrices/matrices.py(4055):         try:
0.51 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.51 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.51 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.51 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.51 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.51 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.51 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.51 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.51 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.51 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.51 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.51 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.51 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.51 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.51 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.51 /testbed/sympy/matrices/matrices.py(4055):         try:
0.51 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.51 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.51 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.51 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.51 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.51 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.51 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.51 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.51 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.51 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.51 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.51 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.51 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.51 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.51 /testbed/sympy/matrices/matrices.py(210):                 if not ret.is_Atom:
0.51 /testbed/sympy/matrices/matrices.py(211):                     cancel(ret)
0.52 /testbed/sympy/matrices/matrices.py(212):                 return ret
0.52 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.52 /testbed/sympy/matrices/matrices.py(2066):                          for j in range(cols)])
0.52 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.52 /testbed/sympy/matrices/matrices.py(209):                 ret = (pivot_val*tmp_mat[i, j + 1] - mat[pivot_pos, j + 1]*tmp_mat[i, 0]) / cumm
0.52 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.52 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.52 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.52 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.52 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.52 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.52 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.52 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.52 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.52 /testbed/sympy/matrices/matrices.py(4055):         try:
0.52 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.52 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.52 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.52 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.52 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.52 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.52 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.52 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.52 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.52 /testbed/sympy/matrices/matrices.py(4055):         try:
0.52 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.52 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.52 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.52 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.52 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.52 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.52 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.52 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.52 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.52 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.52 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.52 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.52 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.52 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.52 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.52 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.52 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.52 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.52 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.52 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.52 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.52 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.52 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.52 /testbed/sympy/matrices/matrices.py(4055):         try:
0.52 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.52 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.52 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.52 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.52 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.52 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.52 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.52 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.52 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.52 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.52 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.52 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.52 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.52 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.52 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.52 /testbed/sympy/matrices/matrices.py(4055):         try:
0.52 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.52 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.52 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.52 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.52 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.52 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.52 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.52 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.52 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.52 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.52 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.52 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.52 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.52 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.52 /testbed/sympy/matrices/matrices.py(210):                 if not ret.is_Atom:
0.52 /testbed/sympy/matrices/matrices.py(211):                     cancel(ret)
0.53 /testbed/sympy/matrices/matrices.py(212):                 return ret
0.53 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.53 /testbed/sympy/matrices/matrices.py(2064):                     flat_list.extend(
0.53 /testbed/sympy/matrices/matrices.py(2063):                 for i in range(rows):
0.53 /testbed/sympy/matrices/matrices.py(2083):         if flat_list is None:
0.53 /testbed/sympy/matrices/matrices.py(2086):         return rows, cols, flat_list
0.53 /testbed/sympy/matrices/matrices.py(188):             if mat.rows == 0:
0.53 /testbed/sympy/matrices/matrices.py(190):             elif mat.rows == 1:
0.53 /testbed/sympy/matrices/matrices.py(195):             pivot_pos, pivot_val, _, _ = _find_pivot(mat[:, 0])
0.53 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.53 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.53 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.53 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.53 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.53 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.53 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.53 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.53 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.53 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.53 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.53 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.53 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.53 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.53 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.53 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.53 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.53 /testbed/sympy/matrices/matrices.py(179):             for pos,val in enumerate(l):
0.53 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.53 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.53 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.53 /testbed/sympy/matrices/matrices.py(180):                 if val:
0.53 /testbed/sympy/matrices/matrices.py(181):                     return (pos, val, None, None)
0.53 /testbed/sympy/matrices/matrices.py(196):             if pivot_pos == None:
0.53 /testbed/sympy/matrices/matrices.py(201):             sign = (-1) ** (pivot_pos % 2)
0.53 /testbed/sympy/matrices/matrices.py(204):             rows = list(i for i in range(mat.rows) if i != pivot_pos)
0.53 /testbed/sympy/matrices/matrices.py(204):             rows = list(i for i in range(mat.rows) if i != pivot_pos)
0.53 /testbed/sympy/matrices/matrices.py(204):             rows = list(i for i in range(mat.rows) if i != pivot_pos)
0.53 /testbed/sympy/matrices/matrices.py(204):             rows = list(i for i in range(mat.rows) if i != pivot_pos)
0.53 /testbed/sympy/matrices/matrices.py(204):             rows = list(i for i in range(mat.rows) if i != pivot_pos)
0.53 /testbed/sympy/matrices/matrices.py(204):             rows = list(i for i in range(mat.rows) if i != pivot_pos)
0.53 /testbed/sympy/matrices/matrices.py(205):             cols = list(range(mat.cols))
0.53 /testbed/sympy/matrices/matrices.py(206):             tmp_mat = mat.extract(rows, cols)
0.53 /testbed/sympy/matrices/matrices.py(208):             def entry(i, j):
0.53 /testbed/sympy/matrices/matrices.py(214):             return sign*bareiss(self._new(mat.rows - 1, mat.cols - 1, entry), pivot_val)
0.53 /testbed/sympy/matrices/matrices.py(1983):         from sympy.matrices.sparse import SparseMatrix
0.53 /testbed/sympy/matrices/matrices.py(1985):         flat_list = None
0.53 /testbed/sympy/matrices/matrices.py(1987):         if len(args) == 1:
0.53 /testbed/sympy/matrices/matrices.py(2051):         elif len(args) == 3:
0.53 /testbed/sympy/matrices/matrices.py(2052):             rows = as_int(args[0])
0.53 /testbed/sympy/matrices/matrices.py(2053):             cols = as_int(args[1])
0.53 /testbed/sympy/matrices/matrices.py(2055):             if rows < 0 or cols < 0:
0.53 /testbed/sympy/matrices/matrices.py(2060):             if len(args) == 3 and isinstance(args[2], collections.Callable):
0.53 /testbed/sympy/matrices/matrices.py(2061):                 op = args[2]
0.53 /testbed/sympy/matrices/matrices.py(2062):                 flat_list = []
0.53 /testbed/sympy/matrices/matrices.py(2063):                 for i in range(rows):
0.53 /testbed/sympy/matrices/matrices.py(2064):                     flat_list.extend(
0.53 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.53 /testbed/sympy/matrices/matrices.py(2066):                          for j in range(cols)])
0.53 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.53 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.53 /testbed/sympy/matrices/matrices.py(2066):                          for j in range(cols)])
0.53 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.53 /testbed/sympy/matrices/matrices.py(209):                 ret = (pivot_val*tmp_mat[i, j + 1] - mat[pivot_pos, j + 1]*tmp_mat[i, 0]) / cumm
0.53 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.53 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.53 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.53 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.53 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.53 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.53 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.53 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.53 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.53 /testbed/sympy/matrices/matrices.py(4055):         try:
0.53 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.53 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.53 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.53 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.53 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.53 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.53 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.53 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.53 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.53 /testbed/sympy/matrices/matrices.py(4055):         try:
0.53 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.53 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.53 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.53 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.53 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.53 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.53 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.53 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.53 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.53 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.53 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.53 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.53 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.53 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.53 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.53 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.53 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.53 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.53 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.53 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.53 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.53 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.53 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.53 /testbed/sympy/matrices/matrices.py(4055):         try:
0.53 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.53 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.53 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.53 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.53 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.53 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.53 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.53 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.53 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.53 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.53 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.53 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.53 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.53 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.53 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.53 /testbed/sympy/matrices/matrices.py(4055):         try:
0.53 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.53 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.53 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.53 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.53 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.53 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.53 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.53 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.53 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.53 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.53 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.53 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.53 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.53 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.54 /testbed/sympy/matrices/matrices.py(210):                 if not ret.is_Atom:
0.54 /testbed/sympy/matrices/matrices.py(211):                     cancel(ret)
0.56 /testbed/sympy/matrices/matrices.py(212):                 return ret
0.56 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.56 /testbed/sympy/matrices/matrices.py(2066):                          for j in range(cols)])
0.56 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.56 /testbed/sympy/matrices/matrices.py(209):                 ret = (pivot_val*tmp_mat[i, j + 1] - mat[pivot_pos, j + 1]*tmp_mat[i, 0]) / cumm
0.56 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.56 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.56 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.56 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.56 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.56 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.56 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.56 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.56 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.56 /testbed/sympy/matrices/matrices.py(4055):         try:
0.56 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.56 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.56 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.56 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.56 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.56 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.56 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.56 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.56 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.56 /testbed/sympy/matrices/matrices.py(4055):         try:
0.56 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.56 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.56 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.56 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.56 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.56 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.56 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.56 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.56 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.56 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.56 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.56 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.56 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.56 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.56 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.56 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.56 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.56 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.56 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.56 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.56 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.56 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.56 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.56 /testbed/sympy/matrices/matrices.py(4055):         try:
0.56 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.56 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.56 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.56 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.56 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.56 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.56 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.56 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.56 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.56 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.56 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.56 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.56 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.56 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.56 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.56 /testbed/sympy/matrices/matrices.py(4055):         try:
0.56 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.56 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.56 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.56 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.56 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.56 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.56 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.57 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.57 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.57 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.57 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.57 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.57 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.57 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.57 /testbed/sympy/matrices/matrices.py(210):                 if not ret.is_Atom:
0.57 /testbed/sympy/matrices/matrices.py(211):                     cancel(ret)
0.59 /testbed/sympy/matrices/matrices.py(212):                 return ret
0.59 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.59 /testbed/sympy/matrices/matrices.py(2066):                          for j in range(cols)])
0.59 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.60 /testbed/sympy/matrices/matrices.py(209):                 ret = (pivot_val*tmp_mat[i, j + 1] - mat[pivot_pos, j + 1]*tmp_mat[i, 0]) / cumm
0.60 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.60 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.60 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.60 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.60 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.60 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.60 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.60 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.60 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.60 /testbed/sympy/matrices/matrices.py(4055):         try:
0.60 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.60 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.60 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.60 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.60 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.60 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.60 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.60 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.60 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.60 /testbed/sympy/matrices/matrices.py(4055):         try:
0.60 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.60 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.60 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.60 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.60 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.60 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.60 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.60 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.60 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.60 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.60 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.60 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.60 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.60 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.60 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.60 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.60 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.60 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.60 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.60 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.60 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.60 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.60 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.60 /testbed/sympy/matrices/matrices.py(4055):         try:
0.60 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.60 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.60 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.60 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.60 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.60 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.60 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.60 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.60 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.60 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.60 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.60 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.60 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.60 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.60 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.60 /testbed/sympy/matrices/matrices.py(4055):         try:
0.60 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.60 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.60 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.60 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.60 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.60 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.60 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.60 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.60 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.60 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.60 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.60 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.60 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.60 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.60 /testbed/sympy/matrices/matrices.py(210):                 if not ret.is_Atom:
0.60 /testbed/sympy/matrices/matrices.py(211):                     cancel(ret)
0.63 /testbed/sympy/matrices/matrices.py(212):                 return ret
0.63 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.63 /testbed/sympy/matrices/matrices.py(2064):                     flat_list.extend(
0.63 /testbed/sympy/matrices/matrices.py(2063):                 for i in range(rows):
0.63 /testbed/sympy/matrices/matrices.py(2064):                     flat_list.extend(
0.63 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.63 /testbed/sympy/matrices/matrices.py(2066):                          for j in range(cols)])
0.63 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.63 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.63 /testbed/sympy/matrices/matrices.py(2066):                          for j in range(cols)])
0.63 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.63 /testbed/sympy/matrices/matrices.py(209):                 ret = (pivot_val*tmp_mat[i, j + 1] - mat[pivot_pos, j + 1]*tmp_mat[i, 0]) / cumm
0.63 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.63 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.63 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.63 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.63 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.63 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.63 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.63 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.63 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.63 /testbed/sympy/matrices/matrices.py(4055):         try:
0.63 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.63 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.63 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.63 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.63 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.63 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.63 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.63 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.63 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.63 /testbed/sympy/matrices/matrices.py(4055):         try:
0.63 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.63 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.63 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.63 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.63 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.63 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.63 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.63 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.63 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.63 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.63 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.63 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.63 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.63 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.63 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.63 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.63 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.63 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.63 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.63 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.63 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.63 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.63 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.63 /testbed/sympy/matrices/matrices.py(4055):         try:
0.63 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.63 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.63 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.63 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.63 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.63 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.63 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.63 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.63 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.63 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.63 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.63 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.63 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.63 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.63 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.63 /testbed/sympy/matrices/matrices.py(4055):         try:
0.63 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.63 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.63 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.63 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.63 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.63 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.63 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.63 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.63 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.63 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.63 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.63 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.63 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.63 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.64 /testbed/sympy/matrices/matrices.py(210):                 if not ret.is_Atom:
0.64 /testbed/sympy/matrices/matrices.py(211):                     cancel(ret)
0.66 /testbed/sympy/matrices/matrices.py(212):                 return ret
0.66 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.66 /testbed/sympy/matrices/matrices.py(2066):                          for j in range(cols)])
0.66 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.66 /testbed/sympy/matrices/matrices.py(209):                 ret = (pivot_val*tmp_mat[i, j + 1] - mat[pivot_pos, j + 1]*tmp_mat[i, 0]) / cumm
0.66 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.66 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.66 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.66 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.66 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.66 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.66 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.66 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.66 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.66 /testbed/sympy/matrices/matrices.py(4055):         try:
0.66 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.66 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.66 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.66 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.66 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.66 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.66 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.66 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.66 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.66 /testbed/sympy/matrices/matrices.py(4055):         try:
0.66 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.66 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.66 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.66 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.66 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.66 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.66 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.66 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.66 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.66 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.66 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.66 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.66 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.66 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.66 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.66 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.66 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.66 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.66 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.66 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.66 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.66 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.66 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.66 /testbed/sympy/matrices/matrices.py(4055):         try:
0.66 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.66 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.66 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.66 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.66 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.66 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.66 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.66 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.66 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.66 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.66 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.66 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.66 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.66 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.66 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.66 /testbed/sympy/matrices/matrices.py(4055):         try:
0.66 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.66 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.66 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.66 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.66 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.66 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.66 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.66 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.66 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.66 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.66 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.66 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.66 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.66 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.67 /testbed/sympy/matrices/matrices.py(210):                 if not ret.is_Atom:
0.67 /testbed/sympy/matrices/matrices.py(211):                     cancel(ret)
0.69 /testbed/sympy/matrices/matrices.py(212):                 return ret
0.69 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.69 /testbed/sympy/matrices/matrices.py(2066):                          for j in range(cols)])
0.69 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.69 /testbed/sympy/matrices/matrices.py(209):                 ret = (pivot_val*tmp_mat[i, j + 1] - mat[pivot_pos, j + 1]*tmp_mat[i, 0]) / cumm
0.69 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.69 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.69 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.69 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.69 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.69 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.69 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.69 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.69 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.69 /testbed/sympy/matrices/matrices.py(4055):         try:
0.69 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.69 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.69 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.69 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.69 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.69 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.69 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.69 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.69 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.69 /testbed/sympy/matrices/matrices.py(4055):         try:
0.69 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.69 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.69 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.69 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.69 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.69 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.69 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.69 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.69 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.69 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.69 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.69 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.69 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.69 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.69 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.69 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.69 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.69 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.69 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.69 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.69 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.69 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.69 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.69 /testbed/sympy/matrices/matrices.py(4055):         try:
0.69 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.69 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.69 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.69 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.69 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.69 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.69 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.69 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.69 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.69 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.69 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.69 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.69 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.69 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.69 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.69 /testbed/sympy/matrices/matrices.py(4055):         try:
0.69 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.69 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.69 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.69 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.69 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.69 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.69 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.69 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.69 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.69 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.69 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.69 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.69 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.69 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.70 /testbed/sympy/matrices/matrices.py(210):                 if not ret.is_Atom:
0.70 /testbed/sympy/matrices/matrices.py(211):                     cancel(ret)
0.72 /testbed/sympy/matrices/matrices.py(212):                 return ret
0.72 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.72 /testbed/sympy/matrices/matrices.py(2064):                     flat_list.extend(
0.72 /testbed/sympy/matrices/matrices.py(2063):                 for i in range(rows):
0.72 /testbed/sympy/matrices/matrices.py(2064):                     flat_list.extend(
0.72 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.72 /testbed/sympy/matrices/matrices.py(2066):                          for j in range(cols)])
0.72 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.72 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.72 /testbed/sympy/matrices/matrices.py(2066):                          for j in range(cols)])
0.72 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.72 /testbed/sympy/matrices/matrices.py(209):                 ret = (pivot_val*tmp_mat[i, j + 1] - mat[pivot_pos, j + 1]*tmp_mat[i, 0]) / cumm
0.72 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.72 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.72 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.72 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.72 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.72 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.72 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.72 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.72 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.72 /testbed/sympy/matrices/matrices.py(4055):         try:
0.72 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.72 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.72 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.72 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.72 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.72 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.72 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.72 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.72 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.72 /testbed/sympy/matrices/matrices.py(4055):         try:
0.72 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.72 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.72 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.72 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.72 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.72 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.72 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.72 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.72 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.72 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.72 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.72 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.72 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.72 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.72 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.72 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.72 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.72 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.72 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.72 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.72 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.72 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.72 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.72 /testbed/sympy/matrices/matrices.py(4055):         try:
0.72 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.72 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.72 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.72 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.72 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.72 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.72 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.72 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.72 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.72 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.72 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.72 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.72 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.72 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.72 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.72 /testbed/sympy/matrices/matrices.py(4055):         try:
0.72 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.72 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.72 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.72 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.72 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.72 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.72 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.72 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.72 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.72 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.72 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.72 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.72 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.72 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.73 /testbed/sympy/matrices/matrices.py(210):                 if not ret.is_Atom:
0.73 /testbed/sympy/matrices/matrices.py(211):                     cancel(ret)
0.75 /testbed/sympy/matrices/matrices.py(212):                 return ret
0.75 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.75 /testbed/sympy/matrices/matrices.py(2066):                          for j in range(cols)])
0.75 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.75 /testbed/sympy/matrices/matrices.py(209):                 ret = (pivot_val*tmp_mat[i, j + 1] - mat[pivot_pos, j + 1]*tmp_mat[i, 0]) / cumm
0.75 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.75 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.75 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.75 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.75 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.75 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.75 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.75 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.75 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.75 /testbed/sympy/matrices/matrices.py(4055):         try:
0.75 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.75 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.75 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.75 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.75 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.75 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.75 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.75 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.75 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.75 /testbed/sympy/matrices/matrices.py(4055):         try:
0.75 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.75 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.75 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.75 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.75 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.75 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.75 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.75 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.75 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.75 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.75 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.75 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.75 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.75 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.75 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.75 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.75 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.75 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.75 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.75 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.75 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.75 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.75 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.75 /testbed/sympy/matrices/matrices.py(4055):         try:
0.75 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.75 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.75 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.75 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.75 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.75 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.75 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.75 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.75 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.75 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.75 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.75 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.75 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.75 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.75 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.75 /testbed/sympy/matrices/matrices.py(4055):         try:
0.75 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.75 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.75 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.75 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.75 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.75 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.75 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.75 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.75 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.75 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.75 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.75 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.75 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.75 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.75 /testbed/sympy/matrices/matrices.py(210):                 if not ret.is_Atom:
0.75 /testbed/sympy/matrices/matrices.py(211):                     cancel(ret)
0.77 /testbed/sympy/matrices/matrices.py(212):                 return ret
0.77 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.77 /testbed/sympy/matrices/matrices.py(2066):                          for j in range(cols)])
0.77 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.77 /testbed/sympy/matrices/matrices.py(209):                 ret = (pivot_val*tmp_mat[i, j + 1] - mat[pivot_pos, j + 1]*tmp_mat[i, 0]) / cumm
0.77 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.77 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.77 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.77 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.77 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.77 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.77 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.77 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.77 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.77 /testbed/sympy/matrices/matrices.py(4055):         try:
0.77 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.77 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.77 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.77 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.77 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.77 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.77 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.77 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.77 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.77 /testbed/sympy/matrices/matrices.py(4055):         try:
0.77 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.77 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.77 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.77 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.77 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.77 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.77 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.77 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.77 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.77 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.77 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.77 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.77 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.77 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.77 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.77 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.77 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.77 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.77 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.77 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.77 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.77 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.77 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.77 /testbed/sympy/matrices/matrices.py(4055):         try:
0.77 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.77 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.77 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.77 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.77 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.77 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.77 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.77 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.77 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.77 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.77 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.77 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.77 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.77 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.77 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.77 /testbed/sympy/matrices/matrices.py(4055):         try:
0.77 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.77 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.77 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.77 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.77 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.77 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.77 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.77 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.77 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.77 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.77 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.77 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.77 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.77 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.78 /testbed/sympy/matrices/matrices.py(210):                 if not ret.is_Atom:
0.78 /testbed/sympy/matrices/matrices.py(211):                     cancel(ret)
0.80 /testbed/sympy/matrices/matrices.py(212):                 return ret
0.80 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.80 /testbed/sympy/matrices/matrices.py(2064):                     flat_list.extend(
0.80 /testbed/sympy/matrices/matrices.py(2063):                 for i in range(rows):
0.80 /testbed/sympy/matrices/matrices.py(2083):         if flat_list is None:
0.80 /testbed/sympy/matrices/matrices.py(2086):         return rows, cols, flat_list
0.80 /testbed/sympy/matrices/matrices.py(188):             if mat.rows == 0:
0.80 /testbed/sympy/matrices/matrices.py(190):             elif mat.rows == 1:
0.80 /testbed/sympy/matrices/matrices.py(195):             pivot_pos, pivot_val, _, _ = _find_pivot(mat[:, 0])
0.80 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.80 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.80 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.80 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.80 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.80 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.80 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.80 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.80 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.80 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.80 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.80 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.80 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.80 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.80 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.80 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.80 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.80 /testbed/sympy/matrices/matrices.py(179):             for pos,val in enumerate(l):
0.80 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.80 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.80 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.80 /testbed/sympy/matrices/matrices.py(180):                 if val:
0.80 /testbed/sympy/matrices/matrices.py(181):                     return (pos, val, None, None)
0.80 /testbed/sympy/matrices/matrices.py(196):             if pivot_pos == None:
0.80 /testbed/sympy/matrices/matrices.py(201):             sign = (-1) ** (pivot_pos % 2)
0.80 /testbed/sympy/matrices/matrices.py(204):             rows = list(i for i in range(mat.rows) if i != pivot_pos)
0.80 /testbed/sympy/matrices/matrices.py(204):             rows = list(i for i in range(mat.rows) if i != pivot_pos)
0.80 /testbed/sympy/matrices/matrices.py(204):             rows = list(i for i in range(mat.rows) if i != pivot_pos)
0.80 /testbed/sympy/matrices/matrices.py(204):             rows = list(i for i in range(mat.rows) if i != pivot_pos)
0.80 /testbed/sympy/matrices/matrices.py(204):             rows = list(i for i in range(mat.rows) if i != pivot_pos)
0.80 /testbed/sympy/matrices/matrices.py(205):             cols = list(range(mat.cols))
0.80 /testbed/sympy/matrices/matrices.py(206):             tmp_mat = mat.extract(rows, cols)
0.80 /testbed/sympy/matrices/matrices.py(208):             def entry(i, j):
0.80 /testbed/sympy/matrices/matrices.py(214):             return sign*bareiss(self._new(mat.rows - 1, mat.cols - 1, entry), pivot_val)
0.80 /testbed/sympy/matrices/matrices.py(1983):         from sympy.matrices.sparse import SparseMatrix
0.80 /testbed/sympy/matrices/matrices.py(1985):         flat_list = None
0.80 /testbed/sympy/matrices/matrices.py(1987):         if len(args) == 1:
0.80 /testbed/sympy/matrices/matrices.py(2051):         elif len(args) == 3:
0.80 /testbed/sympy/matrices/matrices.py(2052):             rows = as_int(args[0])
0.80 /testbed/sympy/matrices/matrices.py(2053):             cols = as_int(args[1])
0.80 /testbed/sympy/matrices/matrices.py(2055):             if rows < 0 or cols < 0:
0.80 /testbed/sympy/matrices/matrices.py(2060):             if len(args) == 3 and isinstance(args[2], collections.Callable):
0.80 /testbed/sympy/matrices/matrices.py(2061):                 op = args[2]
0.80 /testbed/sympy/matrices/matrices.py(2062):                 flat_list = []
0.80 /testbed/sympy/matrices/matrices.py(2063):                 for i in range(rows):
0.80 /testbed/sympy/matrices/matrices.py(2064):                     flat_list.extend(
0.80 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.80 /testbed/sympy/matrices/matrices.py(2066):                          for j in range(cols)])
0.80 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.80 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.80 /testbed/sympy/matrices/matrices.py(2066):                          for j in range(cols)])
0.80 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.80 /testbed/sympy/matrices/matrices.py(209):                 ret = (pivot_val*tmp_mat[i, j + 1] - mat[pivot_pos, j + 1]*tmp_mat[i, 0]) / cumm
0.80 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.80 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.80 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.80 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.80 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.80 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.80 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.80 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.80 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.80 /testbed/sympy/matrices/matrices.py(4055):         try:
0.80 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.80 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.80 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.80 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.80 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.80 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.80 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.80 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.80 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.80 /testbed/sympy/matrices/matrices.py(4055):         try:
0.80 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.80 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.80 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.80 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.80 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.80 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.80 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.80 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.80 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.80 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.80 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.80 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.80 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.80 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.80 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.80 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.80 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.80 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.80 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.80 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.80 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.80 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.80 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.80 /testbed/sympy/matrices/matrices.py(4055):         try:
0.80 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.80 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.80 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.80 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.80 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.80 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.80 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.80 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.80 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.80 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.80 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.80 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.80 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.80 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.80 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.80 /testbed/sympy/matrices/matrices.py(4055):         try:
0.80 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.80 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.80 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.80 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.80 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.80 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.80 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.80 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.80 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.80 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.80 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.80 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.80 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.80 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.83 /testbed/sympy/matrices/matrices.py(210):                 if not ret.is_Atom:
0.83 /testbed/sympy/matrices/matrices.py(211):                     cancel(ret)
0.91 /testbed/sympy/matrices/matrices.py(212):                 return ret
0.91 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.91 /testbed/sympy/matrices/matrices.py(2066):                          for j in range(cols)])
0.91 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
0.91 /testbed/sympy/matrices/matrices.py(209):                 ret = (pivot_val*tmp_mat[i, j + 1] - mat[pivot_pos, j + 1]*tmp_mat[i, 0]) / cumm
0.91 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.91 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.91 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.91 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.91 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.91 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.91 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.91 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.91 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.91 /testbed/sympy/matrices/matrices.py(4055):         try:
0.91 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.91 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.91 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.91 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.91 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.91 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.91 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.91 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.91 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.91 /testbed/sympy/matrices/matrices.py(4055):         try:
0.91 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.91 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.91 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.91 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.91 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.91 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.91 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.91 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.91 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.91 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.91 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.91 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.91 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.91 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.91 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.91 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.91 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.91 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.91 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.91 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.91 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.91 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.91 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.91 /testbed/sympy/matrices/matrices.py(4055):         try:
0.91 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.91 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.91 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.91 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.91 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.91 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.91 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
0.91 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
0.91 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.91 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.91 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.91 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.91 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.91 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.91 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.91 /testbed/sympy/matrices/matrices.py(4055):         try:
0.91 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
0.91 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.91 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.91 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.91 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.91 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.91 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
0.91 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.91 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
0.91 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
0.91 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
0.91 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
0.91 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
0.91 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
0.94 /testbed/sympy/matrices/matrices.py(210):                 if not ret.is_Atom:
0.94 /testbed/sympy/matrices/matrices.py(211):                     cancel(ret)
1.02 /testbed/sympy/matrices/matrices.py(212):                 return ret
1.02 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
1.02 /testbed/sympy/matrices/matrices.py(2064):                     flat_list.extend(
1.02 /testbed/sympy/matrices/matrices.py(2063):                 for i in range(rows):
1.02 /testbed/sympy/matrices/matrices.py(2064):                     flat_list.extend(
1.02 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
1.02 /testbed/sympy/matrices/matrices.py(2066):                          for j in range(cols)])
1.02 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
1.02 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
1.02 /testbed/sympy/matrices/matrices.py(2066):                          for j in range(cols)])
1.02 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
1.02 /testbed/sympy/matrices/matrices.py(209):                 ret = (pivot_val*tmp_mat[i, j + 1] - mat[pivot_pos, j + 1]*tmp_mat[i, 0]) / cumm
1.02 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
1.02 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
1.02 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
1.02 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
1.02 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
1.02 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
1.02 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
1.02 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
1.02 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
1.02 /testbed/sympy/matrices/matrices.py(4055):         try:
1.02 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
1.02 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
1.02 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
1.02 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
1.02 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
1.02 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
1.02 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
1.02 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
1.02 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
1.02 /testbed/sympy/matrices/matrices.py(4055):         try:
1.02 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
1.02 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
1.02 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
1.02 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
1.02 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
1.02 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
1.02 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
1.02 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
1.02 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
1.02 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
1.02 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
1.02 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
1.02 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
1.02 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
1.02 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
1.02 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
1.02 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
1.02 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
1.02 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
1.02 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
1.02 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
1.02 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
1.02 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
1.02 /testbed/sympy/matrices/matrices.py(4055):         try:
1.02 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
1.02 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
1.02 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
1.02 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
1.02 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
1.02 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
1.02 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
1.02 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
1.02 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
1.02 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
1.02 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
1.02 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
1.02 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
1.02 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
1.02 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
1.02 /testbed/sympy/matrices/matrices.py(4055):         try:
1.02 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
1.02 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
1.02 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
1.02 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
1.02 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
1.02 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
1.02 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
1.02 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
1.02 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
1.02 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
1.02 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
1.02 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
1.02 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
1.02 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
1.05 /testbed/sympy/matrices/matrices.py(210):                 if not ret.is_Atom:
1.05 /testbed/sympy/matrices/matrices.py(211):                     cancel(ret)
1.13 /testbed/sympy/matrices/matrices.py(212):                 return ret
1.13 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
1.13 /testbed/sympy/matrices/matrices.py(2066):                          for j in range(cols)])
1.13 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
1.13 /testbed/sympy/matrices/matrices.py(209):                 ret = (pivot_val*tmp_mat[i, j + 1] - mat[pivot_pos, j + 1]*tmp_mat[i, 0]) / cumm
1.13 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
1.13 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
1.13 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
1.13 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
1.13 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
1.13 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
1.13 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
1.13 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
1.13 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
1.13 /testbed/sympy/matrices/matrices.py(4055):         try:
1.13 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
1.13 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
1.13 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
1.13 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
1.13 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
1.13 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
1.13 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
1.13 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
1.13 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
1.13 /testbed/sympy/matrices/matrices.py(4055):         try:
1.13 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
1.13 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
1.13 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
1.13 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
1.13 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
1.13 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
1.13 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
1.13 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
1.13 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
1.13 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
1.13 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
1.13 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
1.13 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
1.13 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
1.13 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
1.13 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
1.13 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
1.13 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
1.13 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
1.13 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
1.13 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
1.13 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
1.13 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
1.13 /testbed/sympy/matrices/matrices.py(4055):         try:
1.13 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
1.13 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
1.13 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
1.13 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
1.13 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
1.13 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
1.13 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
1.13 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
1.13 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
1.13 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
1.13 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
1.13 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
1.13 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
1.13 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
1.13 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
1.13 /testbed/sympy/matrices/matrices.py(4055):         try:
1.13 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
1.13 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
1.13 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
1.13 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
1.13 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
1.13 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
1.13 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
1.13 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
1.13 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
1.13 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
1.13 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
1.13 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
1.13 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
1.13 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
1.15 /testbed/sympy/matrices/matrices.py(210):                 if not ret.is_Atom:
1.15 /testbed/sympy/matrices/matrices.py(211):                     cancel(ret)
1.24 /testbed/sympy/matrices/matrices.py(212):                 return ret
1.24 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
1.24 /testbed/sympy/matrices/matrices.py(2064):                     flat_list.extend(
1.24 /testbed/sympy/matrices/matrices.py(2063):                 for i in range(rows):
1.24 /testbed/sympy/matrices/matrices.py(2083):         if flat_list is None:
1.24 /testbed/sympy/matrices/matrices.py(2086):         return rows, cols, flat_list
1.24 /testbed/sympy/matrices/matrices.py(188):             if mat.rows == 0:
1.24 /testbed/sympy/matrices/matrices.py(190):             elif mat.rows == 1:
1.24 /testbed/sympy/matrices/matrices.py(195):             pivot_pos, pivot_val, _, _ = _find_pivot(mat[:, 0])
1.24 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
1.24 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
1.24 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
1.24 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
1.24 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
1.24 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
1.24 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
1.24 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
1.24 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
1.24 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
1.24 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
1.24 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
1.24 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
1.24 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
1.24 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
1.24 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
1.24 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
1.24 /testbed/sympy/matrices/matrices.py(179):             for pos,val in enumerate(l):
1.24 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
1.24 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
1.24 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
1.24 /testbed/sympy/matrices/matrices.py(180):                 if val:
1.24 /testbed/sympy/matrices/matrices.py(181):                     return (pos, val, None, None)
1.24 /testbed/sympy/matrices/matrices.py(196):             if pivot_pos == None:
1.24 /testbed/sympy/matrices/matrices.py(201):             sign = (-1) ** (pivot_pos % 2)
1.24 /testbed/sympy/matrices/matrices.py(204):             rows = list(i for i in range(mat.rows) if i != pivot_pos)
1.24 /testbed/sympy/matrices/matrices.py(204):             rows = list(i for i in range(mat.rows) if i != pivot_pos)
1.24 /testbed/sympy/matrices/matrices.py(204):             rows = list(i for i in range(mat.rows) if i != pivot_pos)
1.24 /testbed/sympy/matrices/matrices.py(204):             rows = list(i for i in range(mat.rows) if i != pivot_pos)
1.24 /testbed/sympy/matrices/matrices.py(205):             cols = list(range(mat.cols))
1.24 /testbed/sympy/matrices/matrices.py(206):             tmp_mat = mat.extract(rows, cols)
1.24 /testbed/sympy/matrices/matrices.py(208):             def entry(i, j):
1.24 /testbed/sympy/matrices/matrices.py(214):             return sign*bareiss(self._new(mat.rows - 1, mat.cols - 1, entry), pivot_val)
1.24 /testbed/sympy/matrices/matrices.py(1983):         from sympy.matrices.sparse import SparseMatrix
1.24 /testbed/sympy/matrices/matrices.py(1985):         flat_list = None
1.24 /testbed/sympy/matrices/matrices.py(1987):         if len(args) == 1:
1.24 /testbed/sympy/matrices/matrices.py(2051):         elif len(args) == 3:
1.24 /testbed/sympy/matrices/matrices.py(2052):             rows = as_int(args[0])
1.24 /testbed/sympy/matrices/matrices.py(2053):             cols = as_int(args[1])
1.24 /testbed/sympy/matrices/matrices.py(2055):             if rows < 0 or cols < 0:
1.24 /testbed/sympy/matrices/matrices.py(2060):             if len(args) == 3 and isinstance(args[2], collections.Callable):
1.24 /testbed/sympy/matrices/matrices.py(2061):                 op = args[2]
1.24 /testbed/sympy/matrices/matrices.py(2062):                 flat_list = []
1.24 /testbed/sympy/matrices/matrices.py(2063):                 for i in range(rows):
1.24 /testbed/sympy/matrices/matrices.py(2064):                     flat_list.extend(
1.24 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
1.24 /testbed/sympy/matrices/matrices.py(2066):                          for j in range(cols)])
1.24 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
1.24 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
1.24 /testbed/sympy/matrices/matrices.py(2066):                          for j in range(cols)])
1.24 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
1.24 /testbed/sympy/matrices/matrices.py(209):                 ret = (pivot_val*tmp_mat[i, j + 1] - mat[pivot_pos, j + 1]*tmp_mat[i, 0]) / cumm
1.24 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
1.24 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
1.24 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
1.24 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
1.24 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
1.24 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
1.24 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
1.24 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
1.24 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
1.24 /testbed/sympy/matrices/matrices.py(4055):         try:
1.24 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
1.24 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
1.24 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
1.24 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
1.24 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
1.24 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
1.24 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
1.24 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
1.24 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
1.24 /testbed/sympy/matrices/matrices.py(4055):         try:
1.24 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
1.24 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
1.24 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
1.24 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
1.24 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
1.24 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
1.24 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
1.24 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
1.24 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
1.24 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
1.24 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
1.24 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
1.24 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
1.24 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
1.24 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
1.24 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
1.24 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
1.24 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
1.24 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
1.24 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
1.24 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
1.24 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
1.24 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
1.24 /testbed/sympy/matrices/matrices.py(4055):         try:
1.24 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
1.24 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
1.24 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
1.24 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
1.24 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
1.24 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
1.24 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
1.24 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
1.24 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
1.24 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
1.24 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
1.24 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
1.24 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
1.24 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
1.24 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
1.24 /testbed/sympy/matrices/matrices.py(4055):         try:
1.24 /testbed/sympy/matrices/matrices.py(4056):             j = j.__index__()
1.24 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
1.24 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
1.24 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
1.24 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
1.24 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
1.24 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
1.24 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
1.24 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
1.24 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
1.24 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
1.24 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
1.24 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
1.24 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
1.29 /testbed/sympy/matrices/matrices.py(210):                 if not ret.is_Atom:
1.29 /testbed/sympy/matrices/matrices.py(211):                     cancel(ret)
1.66 /testbed/sympy/matrices/matrices.py(212):                 return ret
1.66 /testbed/sympy/matrices/matrices.py(2065):                         [cls._sympify(op(cls._sympify(i), cls._sympify(j)))
1.66 /testbed/sympy/matrices/matrices.py(2064):                     flat_list.extend(
1.66 /testbed/sympy/matrices/matrices.py(2063):                 for i in range(rows):
1.66 /testbed/sympy/matrices/matrices.py(2083):         if flat_list is None:
1.66 /testbed/sympy/matrices/matrices.py(2086):         return rows, cols, flat_list
1.66 /testbed/sympy/matrices/matrices.py(188):             if mat.rows == 0:
1.66 /testbed/sympy/matrices/matrices.py(190):             elif mat.rows == 1:
1.66 /testbed/sympy/matrices/matrices.py(191):                 return mat[0, 0]
1.66 /testbed/sympy/matrices/matrices.py(2884):         if is_sequence(key):
1.66 /testbed/sympy/matrices/matrices.py(2885):             if not len(key) == 2:
1.66 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
1.66 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
1.66 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
1.66 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
1.66 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
1.66 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
1.66 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
1.66 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
1.66 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
1.66 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
1.66 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
1.66 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
1.66 /testbed/sympy/matrices/matrices.py(2888):                     for i, n in zip(key, self.shape)]
1.66 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
1.66 /testbed/sympy/matrices/matrices.py(4054):     if type(j) is not int:
1.66 /testbed/sympy/matrices/matrices.py(4059):     if n is not None:
1.66 /testbed/sympy/matrices/matrices.py(4060):         if j < 0:
1.66 /testbed/sympy/matrices/matrices.py(4062):         if not (j >= 0 and j < n):
1.66 /testbed/sympy/matrices/matrices.py(4064):     return int(j)
1.66 /testbed/sympy/matrices/matrices.py(2887):             return [a2idx(i, n) if not isinstance(i, slice) else i
F                                      [FAIL]


________________________________________________________________________________
 sympy/polys/tests/test_coverup_sympy__sympy-13877.py:test_determinant_nan_and_typeerror 
  File "/testbed/sympy/polys/tests/test_coverup_sympy__sympy-13877.py", line 10, in test_determinant_nan_and_typeerror
    assert result_5x5 != nan  # The result should not be NaN when the bug is fixed
AssertionError

============= tests finished: 0 passed, 1 failed, in 1.68 seconds ==============
DO *NOT* COMMIT!
/testbed/sympy/matrices/matrices.py(3786):     def solve_least_squares(self, rhs, method='CH'):
0.79 /testbed/sympy/matrices/matrices.py(3845):     def solve(self, rhs, method='GE'):
0.79 /testbed/sympy/matrices/matrices.py(3861):     def table(self, printer, rowstart='[', rowend=']', rowsep='\n',
0.79 /testbed/sympy/matrices/matrices.py(3939):     def upper_triangular_solve(self, rhs):
0.79 /testbed/sympy/matrices/matrices.py(3962):     def vech(self, diagonal=True, check_symmetry=True):
0.79 /testbed/sympy/matrices/matrices.py(4018): def classof(A, B):
0.79 /testbed/sympy/matrices/matrices.py(4052): def a2idx(j, n=None):
0.79 /testbed/sympy/matrices/matrices.py(4067): def _find_reasonable_pivot(col, iszerofunc=_iszero, simpfunc=_simplify):
0.79 /testbed/sympy/matrices/matrices.py(4170): def _find_reasonable_pivot_naive(col, iszerofunc=_iszero, simpfunc=None):
+ cat coverage.cover
{"/testbed/sympy/matrices/matrices.py": {"1": 1, "3": 1, "4": 1, "5": 1, "6": 1, "7": 1, "8": 1, "9": 1, "10": 1, "12": 1, "13": 1, "14": 1, "15": 1, "16": 1, "17": 1, "18": 1, "19": 1, "20": 1, "22": 1, "23": 1, "24": 1, "28": 1, "30": 1, "34": 1, "42": 2, "73": 2, "475": 2, "896": 2, "1024": 2, "1551": 2, "1690": 2, "1841": 3, "1842": 1, "1843": 1, "1844": 1, "4018": 1, "4052": 1, "4067": 1, "4170": 1, "36": 0, "37": 0, "38": 0, "39": 0, "58": 1, "66": 1, "69": 1, "59": 0, "60": 0, "61": 0, "62": 0, "63": 0, "64": 0, "67": 0, "70": 0, "77": 1, "121": 1, "165": 1, "218": 1, "223": 1, "270": 1, "275": 1, "290": 1, "349": 1, "365": 1, "383": 1, "432": 1, "450": 1, "82": 0, "83": 0, "90": 0, "91": 0, "107": 0, "108": 0, "109": 0, "110": 0, "111": 0, "113": 0, "118": 0, "119": 0, "114": 0, "115": 0, "116": 0, "157": 0, "158": 0, "159": 0, "160": 0, "162": 0, "163": 0, "178": 1, "187": 1, "216": 1, "179": 5, "180": 5, "181": 4, "182": 0, "188": 5, "189": 0, "190": 5, "191": 1, "195": 4, "196": 4, "197": 0, "201": 4, "204": 22, "205": 4, "206": 4, "208": 4, "214": 4, "209": 30, "210": 30, "211": 29, "212": 30, "220": 0, "221": 0, "238": 0, "239": 0, "244": 0, "255": 0, "256": 0, "259": 0, "264": 0, "265": 0, "268": 0, "273": 1, "288": 0, "342": 0, "343": 0, "345": 0, "346": 0, "347": 0, "360": 0, "361": 0, "363": 0, "377": 0, "378": 0, "380": 0, "381": 0, "396": 1, "397": 1, "398": 0, "399": 1, "400": 0, "401": 1, "402": 0, "407": 1, "408": 0, "410": 1, "411": 1, "412": 0, "413": 1, "414": 0, "415": 1, "416": 0, "417": 1, "418": 0, "419": 0, "420": 0, "421": 0, "422": 0, "423": 0, "425": 1, "426": 1, "427": 0, "428": 0, "429": 0, "430": 0, "445": 0, "446": 0, "448": 0, "461": 0, "462": 0, "463": 0, "464": 0, "466": 0, "467": 0, "468": 0, "470": 0, "471": 0, "472": 0, "479": 1, "488": 1, "495": 1, "502": 1, "511": 1, "518": 1, "525": 1, "534": 1, "542": 1, "548": 1, "597": 1, "616": 1, "714": 1, "727": 1, "757": 1, "787": 1, "788": 1, "795": 1, "834": 1, "480": 0, "486": 0, "481": 0, "482": 0, "483": 0, "484": 0, "485": 0, "489": 0, "493": 0, "490": 0, "491": 0, "492": 0, "496": 0, "500": 0, "497": 0, "498": 0, "499": 0, "503": 0, "509": 0, "504": 0, "505": 0, "506": 0, "507": 0, "508": 0, "512": 0, "516": 0, "513": 0, "514": 0, "515": 0, "519": 0, "523": 0, "520": 0, "521": 0, "522": 0, "528": 0, "529": 0, "530": 0, "531": 0, "532": 0, "535": 0, "536": 0, "537": 0, "538": 0, "539": 0, "540": 0, "543": 0, "544": 0, "545": 0, "546": 0, "551": 0, "552": 0, "553": 0, "556": 0, "557": 0, "558": 0, "559": 0, "560": 0, "561": 0, "562": 0, "564": 0, "568": 0, "569": 0, "571": 0, "572": 0, "573": 0, "574": 0, "575": 0, "576": 0, "577": 0, "578": 0, "579": 0, "581": 0, "582": 0, "583": 0, "584": 0, "585": 0, "586": 0, "587": 0, "588": 0, "589": 0, "590": 0, "591": 0, "592": 0, "593": 0, "595": 0, "607": 0, "611": 0, "612": 0, "614": 0, "610": 0, "639": 0, "640": 0, "641": 0, "644": 0, "648": 0, "654": 0, "655": 0, "656": 0, "658": 0, "660": 0, "661": 0, "659": 0, "665": 0, "666": 0, "667": 0, "669": 0, "670": 0, "671": 0, "673": 0, "674": 0, "675": 0, "676": 0, "680": 0, "681": 0, "682": 0, "683": 0, "684": 0, "686": 0, "689": 0, "691": 0, "692": 0, "694": 0, "695": 0, "697": 0, "698": 0, "699": 0, "701": 0, "702": 0, "705": 0, "706": 0, "707": 0, "708": 0, "709": 0, "710": 0, "712": 0, "642": 0, "646": 0, "645": 0, "650": 0, "651": 0, "652": 0, "719": 0, "720": 0, "722": 0, "723": 0, "724": 0, "725": 0, "747": 0, "750": 0, "751": 0, "752": 0, "753": 0, "754": 0, "755": 0, "777": 0, "780": 0, "781": 0, "782": 0, "783": 0, "784": 0, "785": 0, "793": 0, "808": 0, "809": 0, "814": 0, "815": 0, "816": 0, "817": 0, "818": 0, "819": 0, "820": 0, "821": 0, "822": 0, "823": 0, "824": 0, "825": 0, "826": 0, "827": 0, "828": 0, "830": 0, "831": 0, "832": 0, "885": 0, "886": 0, "888": 0, "889": 0, "890": 0, "891": 0, "892": 0, "893": 0, "900": 1, "932": 1, "975": 1, "982": 1, "983": 1, "928": 0, "930": 0, "958": 0, "960": 0, "962": 0, "963": 0, "966": 0, "967": 0, "968": 0, "969": 0, "970": 0, "971": 0, "973": 0, "978": 0, "980": 0, "995": 0, "997": 0, "1000": 0, "1008": 0, "1010": 0, "1011": 0, "1013": 0, "1014": 0, "1015": 0, "1016": 0, "1018": 0, "1019": 0, "1021": 0, "998": 0, "1003": 0, "1004": 0, "1005": 0, "1006": 0, "1028": 1, "1029": 1, "1031": 1, "1104": 1, "1136": 1, "1205": 1, "1294": 1, "1486": 1, "1519": 1, "1081": 0, "1082": 0, "1084": 0, "1085": 0, "1087": 0, "1088": 0, "1089": 0, "1091": 0, "1092": 0, "1094": 0, "1095": 0, "1096": 0, "1097": 0, "1099": 0, "1100": 0, "1102": 0, "1119": 0, "1120": 0, "1121": 0, "1122": 0, "1123": 0, "1124": 0, "1126": 0, "1127": 0, "1131": 0, "1132": 0, "1134": 0, "1158": 0, "1160": 0, "1161": 0, "1162": 0, "1163": 0, "1164": 0, "1166": 0, "1168": 0, "1170": 0, "1171": 0, "1172": 0, "1174": 0, "1188": 0, "1189": 0, "1190": 0, "1191": 0, "1192": 0, "1193": 0, "1196": 0, "1199": 0, "1200": 0, "1202": 0, "1203": 0, "1176": 0, "1177": 0, "1181": 0, "1182": 0, "1183": 0, "1184": 0, "1185": 0, "1186": 0, "1197": 0, "1198": 0, "1256": 0, "1257": 0, "1258": 0, "1260": 0, "1266": 0, "1267": 0, "1268": 0, "1271": 0, "1272": 0, "1273": 0, "1274": 0, "1276": 0, "1278": 0, "1279": 0, "1280": 0, "1282": 0, "1283": 0, "1284": 0, "1286": 0, "1287": 0, "1289": 0, "1290": 0, "1291": 0, "1292": 0, "1262": 0, "1263": 0, "1264": 0, "1330": 0, "1331": 0, "1333": 0, "1334": 0, "1335": 0, "1337": 0, "1338": 0, "1339": 0, "1340": 0, "1343": 0, "1346": 0, "1348": 0, "1358": 0, "1359": 0, "1371": 0, "1386": 0, "1399": 0, "1410": 0, "1411": 0, "1414": 0, "1418": 0, "1419": 0, "1424": 0, "1425": 0, "1426": 0, "1427": 0, "1428": 0, "1429": 0, "1430": 0, "1431": 0, "1433": 0, "1434": 0, "1435": 0, "1436": 0, "1441": 0, "1443": 0, "1445": 0, "1446": 0, "1447": 0, "1448": 0, "1450": 0, "1451": 0, "1464": 0, "1466": 0, "1467": 0, "1468": 0, "1469": 0, "1470": 0, "1471": 0, "1472": 0, "1477": 0, "1478": 0, "1479": 0, "1480": 0, "1482": 0, "1484": 0, "1351": 0, "1352": 0, "1353": 0, "1354": 0, "1355": 0, "1362": 0, "1363": 0, "1364": 0, "1365": 0, "1367": 0, "1368": 0, "1376": 0, "1377": 0, "1378": 0, "1379": 0, "1380": 0, "1381": 0, "1382": 0, "1383": 0, "1384": 0, "1393": 0, "1396": 0, "1397": 0, "1402": 0, "1403": 0, "1404": 0, "1405": 0, "1406": 0, "1407": 0, "1515": 0, "1517": 0, "1536": 0, "1538": 0, "1541": 0, "1542": 0, "1543": 0, "1545": 0, "1547": 0, "1554": 1, "1578": 1, "1581": 1, "1608": 1, "1665": 1, "1575": 0, "1576": 0, "1579": 0, "1606": 0, "1644": 0, "1645": 0, "1648": 0, "1649": 0, "1650": 0, "1651": 0, "1653": 0, "1654": 0, "1655": 0, "1656": 0, "1657": 0, "1659": 0, "1663": 0, "1686": 0, "1693": 1, "1696": 1, "1707": 1, "1717": 1, "1733": 1, "1773": 1, "1776": 1, "1779": 1, "1798": 1, "1819": 1, "1822": 1, "1826": 1, "1829": 1, "1832": 1, "1836": 1, "1694": 0, "1705": 0, "1715": 0, "1725": 0, "1727": 0, "1728": 0, "1729": 0, "1731": 0, "1734": 0, "1735": 0, "1736": 0, "1737": 0, "1739": 0, "1740": 0, "1742": 0, "1743": 0, "1745": 0, "1746": 0, "1748": 0, "1749": 0, "1751": 0, "1753": 0, "1754": 0, "1756": 0, "1757": 0, "1759": 0, "1761": 0, "1762": 0, "1764": 0, "1766": 0, "1768": 0, "1769": 0, "1771": 0, "1774": 0, "1777": 0, "1796": 0, "1817": 0, "1820": 0, "1823": 0, "1824": 0, "1827": 0, "1830": 0, "1834": 0, "1838": 0, "1847": 1, "1849": 1, "1850": 1, "1851": 1, "1853": 1, "1855": 1, "1859": 1, "1870": 1, "1877": 1, "1887": 1, "1890": 1, "1916": 1, "1919": 1, "1924": 1, "1929": 1, "1940": 1, "1941": 1, "2088": 1, "2158": 1, "2162": 1, "2191": 1, "2228": 1, "2251": 1, "2268": 1, "2300": 1, "2301": 1, "2343": 1, "2374": 1, "2433": 1, "2472": 1, "2511": 1, "2645": 1, "2687": 1, "2711": 1, "2732": 1, "2751": 1, "2815": 1, "2844": 1, "2874": 1, "2894": 1, "2934": 1, "2975": 1, "3000": 1, "3001": 1, "3002": 1, "2999": 1, "3071": 1, "3072": 1, "3073": 1, "3070": 1, "3267": 1, "3316": 1, "3356": 1, "3368": 1, "3382": 1, "3482": 1, "3568": 1, "3612": 1, "3646": 1, "3662": 1, "3741": 1, "3786": 1, "3845": 1, "3861": 1, "3939": 1, "3962": 1, "1856": 0, "1857": 0, "1860": 0, "1861": 0, "1865": 0, "1867": 0, "1868": 0, "1862": 0, "1863": 0, "1875": 0, "1878": 0, "1879": 0, "1880": 0, "1881": 0, "1882": 0, "1883": 0, "1884": 0, "1888": 0, "1891": 0, "1892": 0, "1894": 0, "1908": 0, "1909": 0, "1911": 0, "1912": 0, "1913": 0, "1914": 0, "1895": 0, "1896": 0, "1897": 0, "1898": 0, "1899": 0, "1900": 0, "1901": 0, "1902": 0, "1903": 0, "1904": 0, "1905": 0, "1906": 0, "1917": 0, "1920": 0, "1921": 0, "1922": 0, "1925": 0, "1926": 0, "1927": 0, "1930": 0, "1931": 0, "1932": 0, "1934": 0, "1935": 0, "1936": 0, "1937": 0, "1938": 0, "1983": 6, "1985": 6, "1987": 6, "1989": 2, "1990": 0, "1993": 2, "1994": 0, "1997": 2, "1998": 0, "2001": 2, "2005": 0, "2006": 0, "2007": 0, "2008": 0, "2009": 0, "2010": 0, "2011": 0, "2012": 0, "2013": 0, "2014": 0, "2015": 0, "2017": 0, "2018": 0, "2021": 4, "2022": 2, "2023": 2, "2024": 2, "2025": 12, "2026": 10, "2027": 0, "2028": 0, "2029": 0, "2031": 10, "2032": 10, "2033": 10, "2034": 0, "2035": 0, "2036": 2, "2037": 0, "2038": 0, "2039": 2, "2040": 2, "2041": 2, "2042": 2, "2043": 0, "2044": 0, "2045": 0, "2046": 2, "2047": 12, "2048": 60, "2049": 50, "2051": 4, "2052": 4, "2053": 4, "2055": 4, "2056": 0, "2057": 0, "2060": 4, "2061": 4, "2062": 4, "2063": 14, "2064": 20, "2065": 90, "2066": 40, "2069": 0, "2070": 0, "2071": 0, "2072": 0, "2073": 0, "2074": 0, "2078": 0, "2080": 0, "2081": 0, "2083": 6, "2084": 0, "2086": 6, "2128": 0, "2130": 0, "2131": 0, "2132": 0, "2133": 0, "2134": 0, "2135": 0, "2136": 0, "2137": 0, "2138": 0, "2139": 0, "2140": 0, "2142": 0, "2143": 0, "2144": 0, "2145": 0, "2146": 0, "2147": 0, "2148": 0, "2149": 0, "2151": 0, "2152": 0, "2153": 0, "2155": 0, "2156": 0, "2160": 0, "2180": 0, "2181": 0, "2182": 0, "2183": 0, "2184": 0, "2186": 0, "2188": 0, "2189": 0, "2222": 0, "2223": 0, "2224": 0, "2225": 0, "2226": 0, "2246": 0, "2247": 0, "2248": 0, "2249": 0, "2266": 0, "2287": 0, "2288": 0, "2289": 0, "2290": 0, "2291": 0, "2292": 0, "2293": 0, "2295": 0, "2296": 0, "2297": 0, "2298": 0, "2334": 0, "2335": 0, "2340": 0, "2341": 0, "2368": 0, "2369": 0, "2370": 0, "2371": 0, "2372": 0, "2402": 0, "2404": 0, "2405": 0, "2406": 0, "2407": 0, "2408": 0, "2409": 0, "2410": 0, "2412": 0, "2413": 0, "2414": 0, "2416": 0, "2417": 0, "2418": 0, "2419": 0, "2420": 0, "2421": 0, "2422": 0, "2423": 0, "2424": 0, "2425": 0, "2426": 0, "2427": 0, "2428": 0, "2430": 0, "2431": 0, "2445": 0, "2446": 0, "2448": 0, "2449": 0, "2450": 0, "2451": 0, "2453": 0, "2454": 0, "2455": 0, "2456": 0, "2457": 0, "2458": 0, "2459": 0, "2461": 0, "2462": 0, "2463": 0, "2464": 0, "2465": 0, "2466": 0, "2467": 0, "2468": 0, "2470": 0, "2474": 0, "2475": 0, "2476": 0, "2477": 0, "2478": 0, "2479": 0, "2480": 0, "2481": 0, "2482": 0, "2484": 0, "2504": 0, "2505": 0, "2506": 0, "2508": 0, "2509": 0, "2486": 0, "2487": 0, "2488": 0, "2489": 0, "2491": 0, "2493": 0, "2495": 0, "2497": 0, "2498": 0, "2499": 0, "2501": 0, "2502": 0, "2594": 0, "2596": 0, "2597": 0, "2600": 0, "2601": 0, "2602": 0, "2603": 0, "2606": 0, "2607": 0, "2609": 0, "2610": 0, "2612": 0, "2616": 0, "2617": 0, "2620": 0, "2621": 0, "2625": 0, "2626": 0, "2627": 0, "2628": 0, "2631": 0, "2632": 0, "2633": 0, "2636": 0, "2637": 0, "2638": 0, "2640": 0, "2641": 0, "2643": 0, "2672": 0, "2673": 0, "2674": 0, "2675": 0, "2676": 0, "2677": 0, "2678": 0, "2679": 0, "2680": 0, "2681": 0, "2682": 0, "2683": 0, "2685": 0, "2684": 0, "2697": 0, "2698": 0, "2700": 0, "2701": 0, "2702": 0, "2704": 0, "2705": 0, "2706": 0, "2707": 0, "2709": 0, "2721": 0, "2722": 0, "2723": 0, "2725": 0, "2726": 0, "2727": 0, "2728": 0, "2730": 0, "2742": 0, "2743": 0, "2745": 0, "2746": 0, "2747": 0, "2749": 0, "2809": 0, "2810": 0, "2811": 0, "2812": 0, "2813": 0, "2833": 0, "2834": 0, "2835": 0, "2836": 0, "2837": 0, "2838": 0, "2839": 0, "2840": 0, "2841": 0, "2842": 0, "2855": 0, "2856": 0, "2857": 0, "2858": 0, "2860": 0, "2862": 0, "2863": 0, "2864": 0, "2865": 0, "2866": 0, "2868": 0, "2870": 0, "2871": 0, "2872": 0, "2884": 95, "2885": 95, "2886": 0, "2887": 665, "2888": 285, "2889": 0, "2890": 0, "2892": 0, "2928": 0, "2929": 0, "2930": 0, "2931": 0, "2932": 0, "2963": 0, "2964": 0, "2965": 0, "2966": 0, "2967": 0, "2969": 0, "2971": 0, "2972": 0, "2973": 0, "2991": 0, "2992": 0, "2993": 0, "2994": 0, "2995": 0, "2996": 0, "2997": 0, "3038": 0, "3039": 0, "3040": 0, "3049": 0, "3061": 0, "3064": 0, "3065": 0, "3067": 0, "3050": 0, "3052": 0, "3053": 0, "3054": 0, "3055": 0, "3056": 0, "3059": 0, "3062": 0, "3153": 0, "3157": 0, "3160": 0, "3162": 0, "3163": 0, "3165": 0, "3166": 0, "3177": 0, "3178": 0, "3179": 0, "3181": 0, "3180": 0, "3182": 0, "3183": 0, "3186": 0, "3188": 0, "3194": 0, "3200": 0, "3202": 0, "3208": 0, "3211": 0, "3212": 0, "3214": 0, "3220": 0, "3224": 0, "3223": 0, "3228": 0, "3227": 0, "3235": 0, "3236": 0, "3240": 0, "3239": 0, "3248": 0, "3249": 0, "3251": 0, "3256": 0, "3257": 0, "3259": 0, "3260": 0, "3263": 0, "3265": 0, "3286": 0, "3287": 0, "3288": 0, "3290": 0, "3291": 0, "3292": 0, "3293": 0, "3295": 0, "3296": 0, "3297": 0, "3298": 0, "3299": 0, "3301": 0, "3302": 0, "3303": 0, "3304": 0, "3305": 0, "3306": 0, "3307": 0, "3308": 0, "3309": 0, "3310": 0, "3311": 0, "3312": 0, "3313": 0, "3314": 0, "3335": 0, "3336": 0, "3337": 0, "3339": 0, "3340": 0, "3341": 0, "3343": 0, "3344": 0, "3345": 0, "3346": 0, "3348": 0, "3349": 0, "3350": 0, "3351": 0, "3352": 0, "3353": 0, "3354": 0, "3366": 0, "3376": 0, "3377": 0, "3378": 0, "3379": 0, "3380": 0, "3434": 0, "3435": 0, "3436": 0, "3437": 0, "3439": 0, "3440": 0, "3442": 0, "3443": 0, "3445": 0, "3446": 0, "3450": 0, "3451": 0, "3452": 0, "3453": 0, "3457": 0, "3458": 0, "3459": 0, "3461": 0, "3463": 0, "3465": 0, "3467": 0, "3469": 0, "3470": 0, "3471": 0, "3473": 0, "3474": 0, "3475": 0, "3477": 0, "3480": 0, "3559": 0, "3560": 0, "3561": 0, "3562": 0, "3563": 0, "3564": 0, "3565": 0, "3566": 0, "3597": 0, "3598": 0, "3600": 0, "3601": 0, "3602": 0, "3603": 0, "3604": 0, "3606": 0, "3607": 0, "3609": 0, "3635": 0, "3636": 0, "3637": 0, "3638": 0, "3639": 0, "3640": 0, "3642": 0, "3643": 0, "3644": 0, "3660": 0, "3709": 0, "3710": 0, "3712": 0, "3713": 0, "3714": 0, "3715": 0, "3716": 0, "3717": 0, "3718": 0, "3719": 0, "3720": 0, "3721": 0, "3722": 0, "3723": 0, "3724": 0, "3725": 0, "3726": 0, "3727": 0, "3729": 0, "3730": 0, "3732": 0, "3733": 0, "3734": 0, "3735": 0, "3736": 0, "3737": 0, "3738": 0, "3739": 0, "3771": 0, "3772": 0, "3777": 0, "3778": 0, "3779": 0, "3780": 0, "3781": 0, "3782": 0, "3783": 0, "3784": 0, "3840": 0, "3841": 0, "3842": 0, "3843": 0, "3851": 0, "3852": 0, "3853": 0, "3855": 0, "3856": 0, "3859": 0, "3912": 0, "3913": 0, "3915": 0, "3917": 0, "3918": 0, "3919": 0, "3920": 0, "3921": 0, "3922": 0, "3923": 0, "3926": 0, "3927": 0, "3928": 0, "3929": 0, "3930": 0, "3931": 0, "3925": 0, "3932": 0, "3933": 0, "3934": 0, "3935": 0, "3936": 0, "3937": 0, "3954": 0, "3955": 0, "3956": 0, "3957": 0, "3958": 0, "3959": 0, "3960": 0, "3992": 0, "3994": 0, "3995": 0, "3996": 0, "3997": 0, "3998": 0, "3999": 0, "4000": 0, "4001": 0, "4002": 0, "4003": 0, "4004": 0, "4005": 0, "4006": 0, "4007": 0, "4008": 0, "4010": 0, "4011": 0, "4012": 0, "4013": 0, "4014": 0, "4015": 0, "4034": 0, "4035": 0, "4036": 0, "4038": 0, "4039": 0, "4040": 0, "4041": 0, "4042": 0, "4043": 0, "4044": 0, "4045": 0, "4046": 0, "4047": 0, "4048": 0, "4049": 0, "4054": 191, "4055": 120, "4056": 120, "4057": 0, "4058": 0, "4059": 191, "4060": 186, "4061": 0, "4062": 186, "4063": 0, "4064": 191, "4085": 0, "4086": 0, "4090": 0, "4091": 0, "4092": 0, "4093": 0, "4094": 0, "4098": 0, "4099": 0, "4100": 0, "4101": 0, "4102": 0, "4105": 0, "4106": 0, "4107": 0, "4111": 0, "4113": 0, "4114": 0, "4117": 0, "4120": 0, "4127": 0, "4128": 0, "4129": 0, "4130": 0, "4131": 0, "4132": 0, "4133": 0, "4134": 0, "4135": 0, "4136": 0, "4140": 0, "4143": 0, "4149": 0, "4150": 0, "4151": 0, "4152": 0, "4157": 0, "4158": 0, "4160": 0, "4161": 0, "4167": 0, "4168": 0, "4213": 0, "4214": 0, "4215": 0, "4216": 0, "4218": 0, "4219": 0, "4222": 0, "4224": 0, "4227": 0, "4229": 0, "4234": 0, "4238": 0, "4239": 0, "4240": 0, "4241": 0, "4243": 0, "4244": 0, "4246": 0, "4248": 0}}
{"/testbed/sympy/matrices/matrices.py": {"1": 1, "3": 1, "4": 1, "5": 1, "6": 1, "7": 1, "8": 1, "9": 1, "10": 1, "12": 1, "13": 1, "14": 1, "15": 1, "16": 1, "17": 1, "18": 1, "19": 1, "20": 1, "22": 1, "23": 1, "24": 1, "28": 1, "30": 1, "34": 1, "42": 2, "73": 2, "475": 2, "896": 2, "1024": 2, "1551": 2, "1690": 2, "1841": 3, "1842": 1, "1843": 1, "1844": 1, "4018": 1, "4052": 1, "4067": 1, "4170": 1, "36": 0, "37": 0, "38": 0, "39": 0, "58": 1, "66": 1, "69": 1, "59": 0, "60": 0, "61": 0, "62": 0, "63": 0, "64": 0, "67": 0, "70": 0, "77": 1, "121": 1, "165": 1, "218": 1, "223": 1, "270": 1, "275": 1, "290": 1, "349": 1, "365": 1, "383": 1, "432": 1, "450": 1, "82": 0, "83": 0, "90": 0, "91": 0, "107": 0, "108": 0, "109": 0, "110": 0, "111": 0, "113": 0, "118": 0, "119": 0, "114": 0, "115": 0, "116": 0, "157": 0, "158": 0, "159": 0, "160": 0, "162": 0, "163": 0, "178": 0, "187": 0, "216": 0, "179": 0, "180": 0, "181": 0, "182": 0, "188": 0, "189": 0, "190": 0, "191": 0, "195": 0, "196": 0, "197": 0, "201": 0, "204": 0, "205": 0, "206": 0, "208": 0, "214": 0, "209": 0, "210": 0, "211": 0, "212": 0, "220": 0, "221": 0, "238": 0, "239": 0, "244": 0, "255": 0, "256": 0, "259": 0, "264": 0, "265": 0, "268": 0, "273": 0, "288": 0, "342": 0, "343": 0, "345": 0, "346": 0, "347": 0, "360": 0, "361": 0, "363": 0, "377": 0, "378": 0, "380": 0, "381": 0, "396": 0, "397": 0, "398": 0, "399": 0, "400": 0, "401": 0, "402": 0, "407": 0, "408": 0, "410": 0, "411": 0, "412": 0, "413": 0, "414": 0, "415": 0, "416": 0, "417": 0, "418": 0, "419": 0, "420": 0, "421": 0, "422": 0, "423": 0, "425": 0, "426": 0, "427": 0, "428": 0, "429": 0, "430": 0, "445": 0, "446": 0, "448": 0, "461": 0, "462": 0, "463": 0, "464": 0, "466": 0, "467": 0, "468": 0, "470": 0, "471": 0, "472": 0, "479": 1, "488": 1, "495": 1, "502": 1, "511": 1, "518": 1, "525": 1, "534": 1, "542": 1, "548": 1, "597": 1, "616": 1, "714": 1, "727": 1, "757": 1, "787": 1, "788": 1, "795": 1, "834": 1, "480": 0, "486": 0, "481": 0, "482": 0, "483": 0, "484": 0, "485": 0, "489": 0, "493": 0, "490": 0, "491": 0, "492": 0, "496": 0, "500": 0, "497": 0, "498": 0, "499": 0, "503": 0, "509": 0, "504": 0, "505": 0, "506": 0, "507": 0, "508": 0, "512": 0, "516": 0, "513": 0, "514": 0, "515": 0, "519": 0, "523": 0, "520": 0, "521": 0, "522": 0, "528": 0, "529": 0, "530": 0, "531": 0, "532": 0, "535": 0, "536": 0, "537": 0, "538": 0, "539": 0, "540": 0, "543": 0, "544": 0, "545": 0, "546": 0, "551": 0, "552": 0, "553": 0, "556": 0, "557": 0, "558": 0, "559": 0, "560": 0, "561": 0, "562": 0, "564": 0, "568": 0, "569": 0, "571": 0, "572": 0, "573": 0, "574": 0, "575": 0, "576": 0, "577": 0, "578": 0, "579": 0, "581": 0, "582": 0, "583": 0, "584": 0, "585": 0, "586": 0, "587": 0, "588": 0, "589": 0, "590": 0, "591": 0, "592": 0, "593": 0, "595": 0, "607": 0, "611": 0, "612": 0, "614": 0, "610": 0, "639": 0, "640": 0, "641": 0, "644": 0, "648": 0, "654": 0, "655": 0, "656": 0, "658": 0, "660": 0, "661": 0, "659": 0, "665": 0, "666": 0, "667": 0, "669": 0, "670": 0, "671": 0, "673": 0, "674": 0, "675": 0, "676": 0, "680": 0, "681": 0, "682": 0, "683": 0, "684": 0, "686": 0, "689": 0, "691": 0, "692": 0, "694": 0, "695": 0, "697": 0, "698": 0, "699": 0, "701": 0, "702": 0, "705": 0, "706": 0, "707": 0, "708": 0, "709": 0, "710": 0, "712": 0, "642": 0, "646": 0, "645": 0, "650": 0, "651": 0, "652": 0, "719": 0, "720": 0, "722": 0, "723": 0, "724": 0, "725": 0, "747": 0, "750": 0, "751": 0, "752": 0, "753": 0, "754": 0, "755": 0, "777": 0, "780": 0, "781": 0, "782": 0, "783": 0, "784": 0, "785": 0, "793": 0, "808": 0, "809": 0, "814": 0, "815": 0, "816": 0, "817": 0, "818": 0, "819": 0, "820": 0, "821": 0, "822": 0, "823": 0, "824": 0, "825": 0, "826": 0, "827": 0, "828": 0, "830": 0, "831": 0, "832": 0, "885": 0, "886": 0, "888": 0, "889": 0, "890": 0, "891": 0, "892": 0, "893": 0, "900": 1, "932": 1, "975": 1, "982": 1, "983": 1, "928": 0, "930": 0, "958": 0, "960": 0, "962": 0, "963": 0, "966": 0, "967": 0, "968": 0, "969": 0, "970": 0, "971": 0, "973": 0, "978": 0, "980": 0, "995": 0, "997": 0, "1000": 0, "1008": 0, "1010": 0, "1011": 0, "1013": 0, "1014": 0, "1015": 0, "1016": 0, "1018": 0, "1019": 0, "1021": 0, "998": 0, "1003": 0, "1004": 0, "1005": 0, "1006": 0, "1028": 1, "1029": 1, "1031": 1, "1104": 1, "1136": 1, "1205": 1, "1294": 1, "1486": 1, "1519": 1, "1081": 0, "1082": 0, "1084": 0, "1085": 0, "1087": 0, "1088": 0, "1089": 0, "1091": 0, "1092": 0, "1094": 0, "1095": 0, "1096": 0, "1097": 0, "1099": 0, "1100": 0, "1102": 0, "1119": 0, "1120": 0, "1121": 0, "1122": 0, "1123": 0, "1124": 0, "1126": 0, "1127": 0, "1131": 0, "1132": 0, "1134": 0, "1158": 0, "1160": 0, "1161": 0, "1162": 0, "1163": 0, "1164": 0, "1166": 0, "1168": 0, "1170": 0, "1171": 0, "1172": 0, "1174": 0, "1188": 0, "1189": 0, "1190": 0, "1191": 0, "1192": 0, "1193": 0, "1196": 0, "1199": 0, "1200": 0, "1202": 0, "1203": 0, "1176": 0, "1177": 0, "1181": 0, "1182": 0, "1183": 0, "1184": 0, "1185": 0, "1186": 0, "1197": 0, "1198": 0, "1256": 0, "1257": 0, "1258": 0, "1260": 0, "1266": 0, "1267": 0, "1268": 0, "1271": 0, "1272": 0, "1273": 0, "1274": 0, "1276": 0, "1278": 0, "1279": 0, "1280": 0, "1282": 0, "1283": 0, "1284": 0, "1286": 0, "1287": 0, "1289": 0, "1290": 0, "1291": 0, "1292": 0, "1262": 0, "1263": 0, "1264": 0, "1330": 0, "1331": 0, "1333": 0, "1334": 0, "1335": 0, "1337": 0, "1338": 0, "1339": 0, "1340": 0, "1343": 0, "1346": 0, "1348": 0, "1358": 0, "1359": 0, "1371": 0, "1386": 0, "1399": 0, "1410": 0, "1411": 0, "1414": 0, "1418": 0, "1419": 0, "1424": 0, "1425": 0, "1426": 0, "1427": 0, "1428": 0, "1429": 0, "1430": 0, "1431": 0, "1433": 0, "1434": 0, "1435": 0, "1436": 0, "1441": 0, "1443": 0, "1445": 0, "1446": 0, "1447": 0, "1448": 0, "1450": 0, "1451": 0, "1464": 0, "1466": 0, "1467": 0, "1468": 0, "1469": 0, "1470": 0, "1471": 0, "1472": 0, "1477": 0, "1478": 0, "1479": 0, "1480": 0, "1482": 0, "1484": 0, "1351": 0, "1352": 0, "1353": 0, "1354": 0, "1355": 0, "1362": 0, "1363": 0, "1364": 0, "1365": 0, "1367": 0, "1368": 0, "1376": 0, "1377": 0, "1378": 0, "1379": 0, "1380": 0, "1381": 0, "1382": 0, "1383": 0, "1384": 0, "1393": 0, "1396": 0, "1397": 0, "1402": 0, "1403": 0, "1404": 0, "1405": 0, "1406": 0, "1407": 0, "1515": 0, "1517": 0, "1536": 0, "1538": 0, "1541": 0, "1542": 0, "1543": 0, "1545": 0, "1547": 0, "1554": 1, "1578": 1, "1581": 1, "1608": 1, "1665": 1, "1575": 0, "1576": 0, "1579": 0, "1606": 0, "1644": 0, "1645": 0, "1648": 0, "1649": 0, "1650": 0, "1651": 0, "1653": 0, "1654": 0, "1655": 0, "1656": 0, "1657": 0, "1659": 0, "1663": 0, "1686": 0, "1693": 1, "1696": 1, "1707": 1, "1717": 1, "1733": 1, "1773": 1, "1776": 1, "1779": 1, "1798": 1, "1819": 1, "1822": 1, "1826": 1, "1829": 1, "1832": 1, "1836": 1, "1694": 0, "1705": 0, "1715": 0, "1725": 0, "1727": 0, "1728": 0, "1729": 0, "1731": 0, "1734": 0, "1735": 0, "1736": 0, "1737": 0, "1739": 0, "1740": 0, "1742": 0, "1743": 0, "1745": 0, "1746": 0, "1748": 0, "1749": 0, "1751": 0, "1753": 0, "1754": 0, "1756": 0, "1757": 0, "1759": 0, "1761": 0, "1762": 0, "1764": 0, "1766": 0, "1768": 0, "1769": 0, "1771": 0, "1774": 0, "1777": 0, "1796": 0, "1817": 0, "1820": 0, "1823": 0, "1824": 0, "1827": 0, "1830": 0, "1834": 0, "1838": 0, "1847": 1, "1849": 1, "1850": 1, "1851": 1, "1853": 1, "1855": 1, "1859": 1, "1870": 1, "1877": 1, "1887": 1, "1890": 1, "1916": 1, "1919": 1, "1924": 1, "1929": 1, "1940": 1, "1941": 1, "2088": 1, "2158": 1, "2162": 1, "2191": 1, "2228": 1, "2251": 1, "2268": 1, "2300": 1, "2301": 1, "2343": 1, "2374": 1, "2433": 1, "2472": 1, "2511": 1, "2645": 1, "2687": 1, "2711": 1, "2732": 1, "2751": 1, "2815": 1, "2844": 1, "2874": 1, "2894": 1, "2934": 1, "2975": 1, "3000": 1, "3001": 1, "3002": 1, "2999": 1, "3071": 1, "3072": 1, "3073": 1, "3070": 1, "3267": 1, "3316": 1, "3356": 1, "3368": 1, "3382": 1, "3482": 1, "3568": 1, "3612": 1, "3646": 1, "3662": 1, "3741": 1, "3786": 1, "3845": 1, "3861": 1, "3939": 1, "3962": 1, "1856": 0, "1857": 0, "1860": 0, "1861": 0, "1865": 0, "1867": 0, "1868": 0, "1862": 0, "1863": 0, "1875": 0, "1878": 0, "1879": 0, "1880": 0, "1881": 0, "1882": 0, "1883": 0, "1884": 0, "1888": 0, "1891": 0, "1892": 0, "1894": 0, "1908": 0, "1909": 0, "1911": 0, "1912": 0, "1913": 0, "1914": 0, "1895": 0, "1896": 0, "1897": 0, "1898": 0, "1899": 0, "1900": 0, "1901": 0, "1902": 0, "1903": 0, "1904": 0, "1905": 0, "1906": 0, "1917": 0, "1920": 0, "1921": 0, "1922": 0, "1925": 0, "1926": 0, "1927": 0, "1930": 0, "1931": 0, "1932": 0, "1934": 0, "1935": 0, "1936": 0, "1937": 0, "1938": 0, "1983": 0, "1985": 0, "1987": 0, "1989": 0, "1990": 0, "1993": 0, "1994": 0, "1997": 0, "1998": 0, "2001": 0, "2005": 0, "2006": 0, "2007": 0, "2008": 0, "2009": 0, "2010": 0, "2011": 0, "2012": 0, "2013": 0, "2014": 0, "2015": 0, "2017": 0, "2018": 0, "2021": 0, "2022": 0, "2023": 0, "2024": 0, "2025": 0, "2026": 0, "2027": 0, "2028": 0, "2029": 0, "2031": 0, "2032": 0, "2033": 0, "2034": 0, "2035": 0, "2036": 0, "2037": 0, "2038": 0, "2039": 0, "2040": 0, "2041": 0, "2042": 0, "2043": 0, "2044": 0, "2045": 0, "2046": 0, "2047": 0, "2048": 0, "2049": 0, "2051": 0, "2052": 0, "2053": 0, "2055": 0, "2056": 0, "2057": 0, "2060": 0, "2061": 0, "2062": 0, "2063": 0, "2064": 0, "2065": 0, "2066": 0, "2069": 0, "2070": 0, "2071": 0, "2072": 0, "2073": 0, "2074": 0, "2078": 0, "2080": 0, "2081": 0, "2083": 0, "2084": 0, "2086": 0, "2128": 0, "2130": 0, "2131": 0, "2132": 0, "2133": 0, "2134": 0, "2135": 0, "2136": 0, "2137": 0, "2138": 0, "2139": 0, "2140": 0, "2142": 0, "2143": 0, "2144": 0, "2145": 0, "2146": 0, "2147": 0, "2148": 0, "2149": 0, "2151": 0, "2152": 0, "2153": 0, "2155": 0, "2156": 0, "2160": 0, "2180": 0, "2181": 0, "2182": 0, "2183": 0, "2184": 0, "2186": 0, "2188": 0, "2189": 0, "2222": 0, "2223": 0, "2224": 0, "2225": 0, "2226": 0, "2246": 0, "2247": 0, "2248": 0, "2249": 0, "2266": 0, "2287": 0, "2288": 0, "2289": 0, "2290": 0, "2291": 0, "2292": 0, "2293": 0, "2295": 0, "2296": 0, "2297": 0, "2298": 0, "2334": 0, "2335": 0, "2340": 0, "2341": 0, "2368": 0, "2369": 0, "2370": 0, "2371": 0, "2372": 0, "2402": 0, "2404": 0, "2405": 0, "2406": 0, "2407": 0, "2408": 0, "2409": 0, "2410": 0, "2412": 0, "2413": 0, "2414": 0, "2416": 0, "2417": 0, "2418": 0, "2419": 0, "2420": 0, "2421": 0, "2422": 0, "2423": 0, "2424": 0, "2425": 0, "2426": 0, "2427": 0, "2428": 0, "2430": 0, "2431": 0, "2445": 0, "2446": 0, "2448": 0, "2449": 0, "2450": 0, "2451": 0, "2453": 0, "2454": 0, "2455": 0, "2456": 0, "2457": 0, "2458": 0, "2459": 0, "2461": 0, "2462": 0, "2463": 0, "2464": 0, "2465": 0, "2466": 0, "2467": 0, "2468": 0, "2470": 0, "2474": 0, "2475": 0, "2476": 0, "2477": 0, "2478": 0, "2479": 0, "2480": 0, "2481": 0, "2482": 0, "2484": 0, "2504": 0, "2505": 0, "2506": 0, "2508": 0, "2509": 0, "2486": 0, "2487": 0, "2488": 0, "2489": 0, "2491": 0, "2493": 0, "2495": 0, "2497": 0, "2498": 0, "2499": 0, "2501": 0, "2502": 0, "2594": 0, "2596": 0, "2597": 0, "2600": 0, "2601": 0, "2602": 0, "2603": 0, "2606": 0, "2607": 0, "2609": 0, "2610": 0, "2612": 0, "2616": 0, "2617": 0, "2620": 0, "2621": 0, "2625": 0, "2626": 0, "2627": 0, "2628": 0, "2631": 0, "2632": 0, "2633": 0, "2636": 0, "2637": 0, "2638": 0, "2640": 0, "2641": 0, "2643": 0, "2672": 0, "2673": 0, "2674": 0, "2675": 0, "2676": 0, "2677": 0, "2678": 0, "2679": 0, "2680": 0, "2681": 0, "2682": 0, "2683": 0, "2685": 0, "2684": 0, "2697": 0, "2698": 0, "2700": 0, "2701": 0, "2702": 0, "2704": 0, "2705": 0, "2706": 0, "2707": 0, "2709": 0, "2721": 0, "2722": 0, "2723": 0, "2725": 0, "2726": 0, "2727": 0, "2728": 0, "2730": 0, "2742": 0, "2743": 0, "2745": 0, "2746": 0, "2747": 0, "2749": 0, "2809": 0, "2810": 0, "2811": 0, "2812": 0, "2813": 0, "2833": 0, "2834": 0, "2835": 0, "2836": 0, "2837": 0, "2838": 0, "2839": 0, "2840": 0, "2841": 0, "2842": 0, "2855": 0, "2856": 0, "2857": 0, "2858": 0, "2860": 0, "2862": 0, "2863": 0, "2864": 0, "2865": 0, "2866": 0, "2868": 0, "2870": 0, "2871": 0, "2872": 0, "2884": 0, "2885": 0, "2886": 0, "2887": 0, "2888": 0, "2889": 0, "2890": 0, "2892": 0, "2928": 0, "2929": 0, "2930": 0, "2931": 0, "2932": 0, "2963": 0, "2964": 0, "2965": 0, "2966": 0, "2967": 0, "2969": 0, "2971": 0, "2972": 0, "2973": 0, "2991": 0, "2992": 0, "2993": 0, "2994": 0, "2995": 0, "2996": 0, "2997": 0, "3038": 0, "3039": 0, "3040": 0, "3049": 0, "3061": 0, "3064": 0, "3065": 0, "3067": 0, "3050": 0, "3052": 0, "3053": 0, "3054": 0, "3055": 0, "3056": 0, "3059": 0, "3062": 0, "3153": 0, "3157": 0, "3160": 0, "3162": 0, "3163": 0, "3165": 0, "3166": 0, "3177": 0, "3178": 0, "3179": 0, "3181": 0, "3180": 0, "3182": 0, "3183": 0, "3186": 0, "3188": 0, "3194": 0, "3200": 0, "3202": 0, "3208": 0, "3211": 0, "3212": 0, "3214": 0, "3220": 0, "3224": 0, "3223": 0, "3228": 0, "3227": 0, "3235": 0, "3236": 0, "3240": 0, "3239": 0, "3248": 0, "3249": 0, "3251": 0, "3256": 0, "3257": 0, "3259": 0, "3260": 0, "3263": 0, "3265": 0, "3286": 0, "3287": 0, "3288": 0, "3290": 0, "3291": 0, "3292": 0, "3293": 0, "3295": 0, "3296": 0, "3297": 0, "3298": 0, "3299": 0, "3301": 0, "3302": 0, "3303": 0, "3304": 0, "3305": 0, "3306": 0, "3307": 0, "3308": 0, "3309": 0, "3310": 0, "3311": 0, "3312": 0, "3313": 0, "3314": 0, "3335": 0, "3336": 0, "3337": 0, "3339": 0, "3340": 0, "3341": 0, "3343": 0, "3344": 0, "3345": 0, "3346": 0, "3348": 0, "3349": 0, "3350": 0, "3351": 0, "3352": 0, "3353": 0, "3354": 0, "3366": 0, "3376": 0, "3377": 0, "3378": 0, "3379": 0, "3380": 0, "3434": 0, "3435": 0, "3436": 0, "3437": 0, "3439": 0, "3440": 0, "3442": 0, "3443": 0, "3445": 0, "3446": 0, "3450": 0, "3451": 0, "3452": 0, "3453": 0, "3457": 0, "3458": 0, "3459": 0, "3461": 0, "3463": 0, "3465": 0, "3467": 0, "3469": 0, "3470": 0, "3471": 0, "3473": 0, "3474": 0, "3475": 0, "3477": 0, "3480": 0, "3559": 0, "3560": 0, "3561": 0, "3562": 0, "3563": 0, "3564": 0, "3565": 0, "3566": 0, "3597": 0, "3598": 0, "3600": 0, "3601": 0, "3602": 0, "3603": 0, "3604": 0, "3606": 0, "3607": 0, "3609": 0, "3635": 0, "3636": 0, "3637": 0, "3638": 0, "3639": 0, "3640": 0, "3642": 0, "3643": 0, "3644": 0, "3660": 0, "3709": 0, "3710": 0, "3712": 0, "3713": 0, "3714": 0, "3715": 0, "3716": 0, "3717": 0, "3718": 0, "3719": 0, "3720": 0, "3721": 0, "3722": 0, "3723": 0, "3724": 0, "3725": 0, "3726": 0, "3727": 0, "3729": 0, "3730": 0, "3732": 0, "3733": 0, "3734": 0, "3735": 0, "3736": 0, "3737": 0, "3738": 0, "3739": 0, "3771": 0, "3772": 0, "3777": 0, "3778": 0, "3779": 0, "3780": 0, "3781": 0, "3782": 0, "3783": 0, "3784": 0, "3840": 0, "3841": 0, "3842": 0, "3843": 0, "3851": 0, "3852": 0, "3853": 0, "3855": 0, "3856": 0, "3859": 0, "3912": 0, "3913": 0, "3915": 0, "3917": 0, "3918": 0, "3919": 0, "3920": 0, "3921": 0, "3922": 0, "3923": 0, "3926": 0, "3927": 0, "3928": 0, "3929": 0, "3930": 0, "3931": 0, "3925": 0, "3932": 0, "3933": 0, "3934": 0, "3935": 0, "3936": 0, "3937": 0, "3954": 0, "3955": 0, "3956": 0, "3957": 0, "3958": 0, "3959": 0, "3960": 0, "3992": 0, "3994": 0, "3995": 0, "3996": 0, "3997": 0, "3998": 0, "3999": 0, "4000": 0, "4001": 0, "4002": 0, "4003": 0, "4004": 0, "4005": 0, "4006": 0, "4007": 0, "4008": 0, "4010": 0, "4011": 0, "4012": 0, "4013": 0, "4014": 0, "4015": 0, "4034": 0, "4035": 0, "4036": 0, "4038": 0, "4039": 0, "4040": 0, "4041": 0, "4042": 0, "4043": 0, "4044": 0, "4045": 0, "4046": 0, "4047": 0, "4048": 0, "4049": 0, "4054": 0, "4055": 0, "4056": 0, "4057": 0, "4058": 0, "4059": 0, "4060": 0, "4061": 0, "4062": 0, "4063": 0, "4064": 0, "4085": 0, "4086": 0, "4090": 0, "4091": 0, "4092": 0, "4093": 0, "4094": 0, "4098": 0, "4099": 0, "4100": 0, "4101": 0, "4102": 0, "4105": 0, "4106": 0, "4107": 0, "4111": 0, "4113": 0, "4114": 0, "4117": 0, "4120": 0, "4127": 0, "4128": 0, "4129": 0, "4130": 0, "4131": 0, "4132": 0, "4133": 0, "4134": 0, "4135": 0, "4136": 0, "4140": 0, "4143": 0, "4149": 0, "4150": 0, "4151": 0, "4152": 0, "4157": 0, "4158": 0, "4160": 0, "4161": 0, "4167": 0, "4168": 0, "4213": 0, "4214": 0, "4215": 0, "4216": 0, "4218": 0, "4219": 0, "4222": 0, "4224": 0, "4227": 0, "4229": 0, "4234": 0, "4238": 0, "4239": 0, "4240": 0, "4241": 0, "4243": 0, "4244": 0, "4246": 0, "4248": 0}}
+ git checkout 1659712001810f5fc563a443949f8e3bb38af4bd
Note: switching to '1659712001810f5fc563a443949f8e3bb38af4bd'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at 1659712001 Merge pull request #14012 from ishanaj/xfail_10214_solveset
+ git apply /root/pre_state.patch
error: unrecognized input
