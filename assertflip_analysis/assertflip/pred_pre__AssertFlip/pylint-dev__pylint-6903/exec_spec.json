{"instance_id": "pylint-dev__pylint-6903", "repo": "pylint-dev/pylint", "version": "2.15", "environment_setup_commit": "e90702074e68e20dc8e5df5013ee3ecf22139c3e", "patch_list": ["diff --git a/dev/null b/tests/test_coverup_pylint-dev__pylint-6903.py\nnew file mode 100644\nindex e69de29..6933e91 100644\n--- /dev/null\n+++ b/tests/test_coverup_pylint-dev__pylint-6903.py\n@@ -0,0 +1,27 @@\n+import pytest\n+import multiprocessing\n+from unittest import mock\n+from pylint.lint.run import _query_cpu\n+\n+def mock_open(read_data):\n+    m = mock.mock_open(read_data=read_data)\n+    m.return_value.__iter__ = lambda self: iter(self.readline, '')\n+    return m\n+\n+def test_query_cpu_returns_non_zero(monkeypatch):\n+    # Mock the file reads to simulate the conditions that lead to the bug\n+    with mock.patch('builtins.open', mock_open(read_data='-1')) as mock_file:\n+        with mock.patch('pathlib.Path.is_file', return_value=True):\n+            # Call the function that triggers the bug\n+            cpu_count = _query_cpu()\n+            \n+            # Assert that _query_cpu() does not return 0\n+            assert cpu_count != 0, \"BUG: _query_cpu() should not return 0\"\n+\n+            # Attempt to initialize multiprocessing.Pool with the returned value\n+            # This should not raise an error if the bug is fixed\n+            try:\n+                multiprocessing.Pool(cpu_count)\n+            except ValueError as e:\n+                pytest.fail(f\"BUG: multiprocessing.Pool raised ValueError: {e}\")\n+\n"], "arch": "x86_64", "base_commit": "ca80f03a43bc39e4cc2c67dc99817b3c9f13b8a6", "test_directives": ["tests/test_coverup_pylint-dev__pylint-6903.py"], "coverage_files": ["pylint/lint/run.py"], "env_name": "testbed", "run_id": "assertflip", "patch_id": "pred_pre__AssertFlip", "timeout": 1800, "rm_image": false, "force_rebuild": false, "exec_mode": "unit_test", "reproduction_script_name": null, "compute_coverage": true, "install": {"python": "3.9", "packages": "requirements.txt", "install": "python -m pip install -e ."}, "cache_level": "instance", "test_command": "python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(pylint/lint/run\\.py)' -m pytest --no-header -rA  -p no:cacheprovider tests/test_coverup_pylint-dev__pylint-6903.py", "req_install_commands": ["conda create -n testbed python=3.9 -y", "cat <<'EOF_59812759871' > $HOME/requirements.txt\nblack==22.6.0\nflake8==5.0.4\nflake8-typing-imports==1.13.0\nisort==5.10.1\nmypy==0.971\n\nastroid==2.12.13  # Pinned to a specific version for tests\ntyping-extensions~=4.4\npy~=1.11.0\npytest~=7.2\npytest-benchmark~=4.0\npytest-timeout~=2.1\ntowncrier~=22.8\nrequests\n\ncoveralls~=3.3\ncoverage~=6.4\npre-commit~=2.20\ntbump~=6.9.0\ncontributors-txt>=0.9.0\npytest-cov~=3.0\npytest-profiling~=1.7\npytest-xdist~=2.5\ntypes-pkg_resources==0.1.3\ntox>=3\n\nEOF_59812759871", "conda activate testbed && python -m pip install -r $HOME/requirements.txt", "rm $HOME/requirements.txt"]}