{"instance_id": "django__django-14500", "repo": "django/django", "version": "4.0", "environment_setup_commit": "475cffd1d64c690cdad16ede4d5e81985738ceb4", "patch_list": ["diff --git a/dev/null b/tests/test_coverup_django__django-14500.py\nnew file mode 100644\nindex e69de29..e0726a5 100644\n--- /dev/null\n+++ b/tests/test_coverup_django__django-14500.py\n@@ -0,0 +1,37 @@\n+from django.test import TestCase\n+from django.db import connection\n+from django.db.migrations.executor import MigrationExecutor\n+from django.db.migrations.recorder import MigrationRecorder\n+from unittest.mock import MagicMock\n+\n+class SquashedMigrationUnapplyTest(TestCase):\n+    def setUp(self):\n+        # Set up the mock migration environment\n+        self.executor = MigrationExecutor(connection)\n+        self.recorder = MigrationRecorder(connection)\n+        \n+        # Mock squashed migration and its replaced migrations\n+        self.squashed_migration = MagicMock()\n+        self.squashed_migration.app_label = 'app'\n+        self.squashed_migration.name = '0002_squashed'\n+        self.squashed_migration.replaces = [('app', '0001_initial'), ('app', '0002_auto')]\n+        \n+        # Mark replaced migrations as applied\n+        for app_label, name in self.squashed_migration.replaces:\n+            self.recorder.record_applied(app_label, name)\n+        \n+        # Ensure squashed migration is initially marked as applied\n+        self.recorder.record_applied(self.squashed_migration.app_label, self.squashed_migration.name)\n+\n+    def test_unapply_squashed_migration_with_replaced_present(self):\n+        # Unapply the squashed migration with fake=True to avoid schema editor issues\n+        self.executor.unapply_migration(None, self.squashed_migration, fake=True)\n+        \n+        # Check if the squashed migration is marked as unapplied\n+        unapplied_migrations = self.recorder.applied_migrations()\n+        \n+        # Assert that the squashed migration is correctly not marked as unapplied\n+        self.assertNotIn((self.squashed_migration.app_label, self.squashed_migration.name), unapplied_migrations)\n+        \n+        # Cleanup: Ensure no state pollution\n+        self.recorder.flush()\n"], "arch": "x86_64", "base_commit": "8c3bd0b708b488a1f6e8bd8cc6b96569904605be", "test_directives": ["test_coverup_django__django-14500"], "coverage_files": ["django/db/migrations/executor.py"], "env_name": "testbed", "run_id": "assertflip", "patch_id": "pred_pre__AssertFlip", "timeout": 1800, "rm_image": false, "force_rebuild": false, "exec_mode": "unit_test", "reproduction_script_name": null, "compute_coverage": true, "install": {"python": "3.8", "packages": "requirements.txt", "install": "python -m pip install -e ."}, "cache_level": "instance", "test_command": "python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/db/migrations/executor\\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-14500", "req_install_commands": ["conda create -n testbed python=3.8 -y", "cat <<'EOF_59812759871' > $HOME/requirements.txt\nasgiref >= 3.3.2\nargon2-cffi >= 16.1.0\nbackports.zoneinfo; python_version < '3.9'\nbcrypt\ndocutils\ngeoip2\njinja2 >= 2.9.2\nnumpy\nPillow >= 6.2.0\npylibmc; sys.platform != 'win32'\npymemcache >= 3.4.0\npython-memcached >= 1.59\npytz\npywatchman; sys.platform != 'win32'\nPyYAML\nredis >= 3.0.0\nselenium\nsqlparse >= 0.2.2\ntblib >= 1.5.0\ntzdata\ncolorama; sys.platform == 'win32'\n\nEOF_59812759871", "conda activate testbed && python -m pip install -r $HOME/requirements.txt", "rm $HOME/requirements.txt"]}