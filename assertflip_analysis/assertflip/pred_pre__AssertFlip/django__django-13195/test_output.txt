+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD 156a2138db20abc89933121e4ff2ee2ce56a173a
+ sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen
+ locale-gen
Generating locales (this might take a while)...
  en_US.UTF-8... done
Generation complete.
+ export LANG=en_US.UTF-8
+ LANG=en_US.UTF-8
+ export LANGUAGE=en_US:en
+ LANGUAGE=en_US:en
+ export LC_ALL=en_US.UTF-8
+ LC_ALL=en_US.UTF-8
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
nothing to commit, working tree clean
+ git show
commit 156a2138db20abc89933121e4ff2ee2ce56a173a
Author: Simon Charette <charette.s@gmail.com>
Date:   Sat Jun 6 14:34:38 2020 -0400

    Refs #30446 -- Removed unnecessary Value(..., output_field) in docs and tests.

diff --git a/docs/ref/models/conditional-expressions.txt b/docs/ref/models/conditional-expressions.txt
index a1e2430ec1..546733dd8d 100644
--- a/docs/ref/models/conditional-expressions.txt
+++ b/docs/ref/models/conditional-expressions.txt
@@ -100,7 +100,7 @@ An example::
 
     >>>
     >>> from datetime import date, timedelta
-    >>> from django.db.models import Case, CharField, Value, When
+    >>> from django.db.models import Case, Value, When
     >>> Client.objects.create(
     ...     name='Jane Doe',
     ...     account_type=Client.REGULAR,
@@ -119,7 +119,6 @@ An example::
     ...         When(account_type=Client.GOLD, then=Value('5%')),
     ...         When(account_type=Client.PLATINUM, then=Value('10%')),
     ...         default=Value('0%'),
-    ...         output_field=CharField(),
     ...     ),
     ... ).values_list('name', 'discount')
     <QuerySet [('Jane Doe', '0%'), ('James Smith', '5%'), ('Jack Black', '10%')]>
@@ -141,7 +140,6 @@ the ``Client`` has been with us, we could do so using lookups::
     ...         When(registered_on__lte=a_year_ago, then=Value('10%')),
     ...         When(registered_on__lte=a_month_ago, then=Value('5%')),
     ...         default=Value('0%'),
-    ...         output_field=CharField(),
     ...     )
     ... ).values_list('name', 'discount')
     <QuerySet [('Jane Doe', '5%'), ('James Smith', '0%'), ('Jack Black', '10%')]>
diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py
index da78b8d9a9..c738cbb27e 100644
--- a/tests/aggregation/tests.py
+++ b/tests/aggregation/tests.py
@@ -841,7 +841,7 @@ class AggregateTestCase(TestCase):
             Book.objects.aggregate(fail=F('price'))
 
     def test_nonfield_annotation(self):
-        book = Book.objects.annotate(val=Max(Value(2, output_field=IntegerField()))).first()
+        book = Book.objects.annotate(val=Max(Value(2))).first()
         self.assertEqual(book.val, 2)
         book = Book.objects.annotate(val=Max(Value(2), output_field=IntegerField())).first()
         self.assertEqual(book.val, 2)
diff --git a/tests/aggregation_regress/tests.py b/tests/aggregation_regress/tests.py
index b298a1f132..7604335257 100644
--- a/tests/aggregation_regress/tests.py
+++ b/tests/aggregation_regress/tests.py
@@ -374,7 +374,7 @@ class AggregationTests(TestCase):
         # Conditional aggregation of a grouped queryset.
         self.assertEqual(
             Book.objects.annotate(c=Count('authors')).values('pk').aggregate(test=Sum(
-                Case(When(c__gt=1, then=1), output_field=IntegerField())
+                Case(When(c__gt=1, then=1))
             ))['test'],
             3
         )
@@ -382,7 +382,7 @@ class AggregationTests(TestCase):
     def test_sliced_conditional_aggregate(self):
         self.assertEqual(
             Author.objects.all()[:5].aggregate(test=Sum(Case(
-                When(age__lte=35, then=1), output_field=IntegerField()
+                When(age__lte=35, then=1)
             )))['test'],
             3
         )
diff --git a/tests/annotations/tests.py b/tests/annotations/tests.py
index aa3682b86b..5401cd9b21 100644
--- a/tests/annotations/tests.py
+++ b/tests/annotations/tests.py
@@ -5,9 +5,9 @@ from unittest import skipIf
 from django.core.exceptions import FieldDoesNotExist, FieldError
 from django.db import connection
 from django.db.models import (
-    BooleanField, Case, CharField, Count, DateTimeField, Exists,
-    ExpressionWrapper, F, FloatField, Func, IntegerField, Max,
-    NullBooleanField, OuterRef, Q, Subquery, Sum, Value, When,
+    BooleanField, Case, Count, DateTimeField, Exists, ExpressionWrapper, F,
+    FloatField, Func, IntegerField, Max, NullBooleanField, OuterRef, Q,
+    Subquery, Sum, Value, When,
 )
 from django.db.models.expressions import RawSQL
 from django.db.models.functions import Length, Lower
@@ -115,8 +115,7 @@ class NonAggregateAnnotationTestCase(TestCase):
         s3.books.add(cls.b3, cls.b4, cls.b6)
 
     def test_basic_annotation(self):
-        books = Book.objects.annotate(
-            is_book=Value(1, output_field=IntegerField()))
+        books = Book.objects.annotate(is_book=Value(1))
         for book in books:
             self.assertEqual(book.is_book, 1)
 
@@ -163,9 +162,7 @@ class NonAggregateAnnotationTestCase(TestCase):
         self.assertTrue(all(not book.selected for book in books))
 
     def test_annotate_with_aggregation(self):
-        books = Book.objects.annotate(
-            is_book=Value(1, output_field=IntegerField()),
-            rating_count=Count('rating'))
+        books = Book.objects.annotate(is_book=Value(1), rating_count=Count('rating'))
         for book in books:
             self.assertEqual(book.is_book, 1)
             self.assertEqual(book.rating_count, 1)
@@ -231,9 +228,7 @@ class NonAggregateAnnotationTestCase(TestCase):
         self.assertCountEqual(lengths, [3, 7, 8])
 
     def test_filter_annotation(self):
-        books = Book.objects.annotate(
-            is_book=Value(1, output_field=IntegerField())
-        ).filter(is_book=1)
+        books = Book.objects.annotate(is_book=Value(1)).filter(is_book=1)
         for book in books:
             self.assertEqual(book.is_book, 1)
 
@@ -469,7 +464,7 @@ class NonAggregateAnnotationTestCase(TestCase):
         qs = Employee.objects.extra(
             select={'random_value': '42'}
         ).select_related('store').annotate(
-            annotated_value=Value(17, output_field=IntegerField())
+            annotated_value=Value(17),
         )
 
         rows = [
@@ -493,7 +488,7 @@ class NonAggregateAnnotationTestCase(TestCase):
         qs = Employee.objects.extra(
             select={'random_value': '42'}
         ).select_related('store').annotate(
-            annotated_value=Value(17, output_field=IntegerField())
+            annotated_value=Value(17),
         )
 
         rows = [
@@ -554,7 +549,7 @@ class NonAggregateAnnotationTestCase(TestCase):
                 function='COALESCE',
             )
         ).annotate(
-            tagline_lower=Lower(F('tagline'), output_field=CharField())
+            tagline_lower=Lower(F('tagline')),
         ).order_by('name')
 
         # LOWER function supported by:
@@ -661,7 +656,6 @@ class NonAggregateAnnotationTestCase(TestCase):
             max_pages=Case(
                 When(book_contact_set__isnull=True, then=Value(0)),
                 default=Max(F('book__pages')),
-                output_field=IntegerField(),
             ),
         ).values('name', 'max_pages')
         self.assertCountEqual(qs, [
diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py
index c89bb1d69e..2f392a51e6 100644
--- a/tests/expressions/tests.py
+++ b/tests/expressions/tests.py
@@ -729,7 +729,7 @@ class BasicExpressionsTests(TestCase):
         self.assertEqual(qs.get().ceo_company, 'Test GmbH')
 
     def test_pickle_expression(self):
-        expr = Value(1, output_field=IntegerField())
+        expr = Value(1)
         expr.convert_value  # populate cached property
         self.assertEqual(pickle.loads(pickle.dumps(expr)), expr)
 
@@ -1545,7 +1545,7 @@ class FTimeDeltaTests(TestCase):
     def test_time_subtraction(self):
         Time.objects.create(time=datetime.time(12, 30, 15, 2345))
         queryset = Time.objects.annotate(
-            difference=F('time') - Value(datetime.time(11, 15, 0), output_field=TimeField()),
+            difference=F('time') - Value(datetime.time(11, 15, 0)),
         )
         self.assertEqual(
             queryset.get().difference,
@@ -1631,7 +1631,7 @@ class FTimeDeltaTests(TestCase):
 
     def test_date_minus_duration(self):
         more_than_4_days = Experiment.objects.filter(
-            assigned__lt=F('completed') - Value(datetime.timedelta(days=4), output_field=DurationField())
+            assigned__lt=F('completed') - Value(datetime.timedelta(days=4))
         )
         self.assertQuerysetEqual(more_than_4_days, ['e3', 'e4', 'e5'], lambda e: e.name)
 
diff --git a/tests/expressions_case/tests.py b/tests/expressions_case/tests.py
index 3778e32f1b..2a101eeee1 100644
--- a/tests/expressions_case/tests.py
+++ b/tests/expressions_case/tests.py
@@ -6,9 +6,9 @@ from uuid import UUID
 
 from django.core.exceptions import FieldError
 from django.db.models import (
-    BinaryField, BooleanField, Case, CharField, Count, DecimalField,
-    DurationField, F, GenericIPAddressField, IntegerField, Max, Min, Q, Sum,
-    TextField, TimeField, UUIDField, Value, When,
+    BinaryField, BooleanField, Case, Count, DecimalField, F,
+    GenericIPAddressField, IntegerField, Max, Min, Q, Sum, TextField, Value,
+    When,
 )
 from django.test import SimpleTestCase, TestCase
 
@@ -68,7 +68,6 @@ class CaseExpressionTests(TestCase):
                 When(integer=1, then=Value('one')),
                 When(integer=2, then=Value('two')),
                 default=Value('other'),
-                output_field=CharField(),
             )).order_by('pk'),
             [(1, 'one'), (2, 'two'), (3, 'other'), (2, 'two'), (3, 'other'), (3, 'other'), (4, 'other')],
             transform=attrgetter('integer', 'test')
@@ -79,7 +78,6 @@ class CaseExpressionTests(TestCase):
             CaseTestModel.objects.annotate(test=Case(
                 When(integer=1, then=1),
                 When(integer=2, then=2),
-                output_field=IntegerField(),
             )).order_by('pk'),
             [(1, 1), (2, 2), (3, None), (2, 2), (3, None), (3, None), (4, None)],
             transform=attrgetter('integer', 'test')
@@ -101,7 +99,6 @@ class CaseExpressionTests(TestCase):
             CaseTestModel.objects.annotate(f_test=Case(
                 When(integer2=F('integer'), then=Value('equal')),
                 When(integer2=F('integer') + 1, then=Value('+1')),
-                output_field=CharField(),
             )).order_by('pk'),
             [(1, 'equal'), (2, '+1'), (3, '+1'), (2, 'equal'), (3, '+1'), (3, 'equal'), (4, '+1')],
             transform=attrgetter('integer', 'f_test')
@@ -135,7 +132,6 @@ class CaseExpressionTests(TestCase):
                 When(integer2=F('o2o_rel__integer'), then=Value('equal')),
                 When(integer2=F('o2o_rel__integer') + 1, then=Value('+1')),
                 default=Value('other'),
-                output_field=CharField(),
             )).order_by('pk'),
             [(1, 'equal'), (2, '+1'), (3, '+1'), (2, 'equal'), (3, '+1'), (3, 'equal'), (4, 'other')],
             transform=attrgetter('integer', 'join_test')
@@ -148,7 +144,6 @@ class CaseExpressionTests(TestCase):
                 When(o2o_rel__integer=2, then=Value('two')),
                 When(o2o_rel__integer=3, then=Value('three')),
                 default=Value('other'),
-                output_field=CharField(),
             )).order_by('pk'),
             [(1, 'one'), (2, 'two'), (3, 'three'), (2, 'two'), (3, 'three'), (3, 'three'), (4, 'one')],
             transform=attrgetter('integer', 'join_test')
@@ -178,7 +173,6 @@ class CaseExpressionTests(TestCase):
                 f_test=Case(
                     When(integer2=F('integer'), then=Value('equal')),
                     When(integer2=F('f_plus_1'), then=Value('+1')),
-                    output_field=CharField(),
                 ),
             ).order_by('pk'),
             [(1, 'equal'), (2, '+1'), (3, '+1'), (2, 'equal'), (3, '+1'), (3, 'equal'), (4, '+1')],
@@ -195,7 +189,6 @@ class CaseExpressionTests(TestCase):
                     When(f_minus_2=0, then=Value('zero')),
                     When(f_minus_2=1, then=Value('one')),
                     default=Value('other'),
-                    output_field=CharField(),
                 ),
             ).order_by('pk'),
             [(1, 'negative one'), (2, 'zero'), (3, 'one'), (2, 'zero'), (3, 'one'), (3, 'one'), (4, 'other')],
@@ -226,7 +219,6 @@ class CaseExpressionTests(TestCase):
                 test=Case(
                     When(integer2=F('min'), then=Value('min')),
                     When(integer2=F('max'), then=Value('max')),
-                    output_field=CharField(),
                 ),
             ).order_by('pk'),
             [(1, 1, 'min'), (2, 3, 'max'), (3, 4, 'max'), (2, 2, 'min'), (3, 4, 'max'), (3, 3, 'min'), (4, 5, 'min')],
@@ -242,7 +234,6 @@ class CaseExpressionTests(TestCase):
                     When(max=3, then=Value('max = 3')),
                     When(max=4, then=Value('max = 4')),
                     default=Value(''),
-                    output_field=CharField(),
                 ),
             ).order_by('pk'),
             [(1, 1, ''), (2, 3, 'max = 3'), (3, 4, 'max = 4'), (2, 3, 'max = 3'),
@@ -256,7 +247,6 @@ class CaseExpressionTests(TestCase):
                 When(integer=1, then=Value('one')),
                 When(integer=2, then=Value('two')),
                 default=Value('other'),
-                output_field=CharField(),
             )).exclude(test='other').order_by('pk'),
             [(1, 'one'), (2, 'two'), (2, 'two')],
             transform=attrgetter('integer', 'test')
@@ -269,7 +259,6 @@ class CaseExpressionTests(TestCase):
                 When(integer=2, then=Value('two')),
                 When(integer=3, then=Value('three')),
                 default=Value('other'),
-                output_field=CharField(),
             )).order_by('test').values_list('integer', flat=True)),
             [1, 4, 3, 3, 3, 2, 2]
         )
@@ -278,7 +267,7 @@ class CaseExpressionTests(TestCase):
         objects = CaseTestModel.objects.annotate(
             selected=Case(
                 When(pk__in=[], then=Value('selected')),
-                default=Value('not selected'), output_field=CharField()
+                default=Value('not selected'),
             )
         )
         self.assertEqual(len(objects), CaseTestModel.objects.count())
@@ -291,7 +280,6 @@ class CaseExpressionTests(TestCase):
                     When(integer=1, then=2),
                     When(integer=2, then=1),
                     default=3,
-                    output_field=IntegerField(),
                 ) + 1,
             ).order_by('pk'),
             [(1, 3), (2, 2), (3, 4), (2, 2), (3, 4), (3, 4), (4, 4)],
@@ -305,7 +293,6 @@ class CaseExpressionTests(TestCase):
                     test=Case(
                         When(integer=F('integer2'), then='pk'),
                         When(integer=4, then='pk'),
-                        output_field=IntegerField(),
                     ),
                 ).values('test')).order_by('pk'),
             [(1, 1), (2, 2), (3, 3), (4, 5)],
@@ -327,7 +314,6 @@ class CaseExpressionTests(TestCase):
         SOME_CASE = Case(
             When(pk=0, then=Value('0')),
             default=Value('1'),
-            output_field=CharField(),
         )
         self.assertQuerysetEqual(
             CaseTestModel.objects.annotate(somecase=SOME_CASE).order_by('pk'),
@@ -340,19 +326,15 @@ class CaseExpressionTests(TestCase):
             CaseTestModel.objects.aggregate(
                 one=Sum(Case(
                     When(integer=1, then=1),
-                    output_field=IntegerField(),
                 )),
                 two=Sum(Case(
                     When(integer=2, then=1),
-                    output_field=IntegerField(),
                 )),
                 three=Sum(Case(
                     When(integer=3, then=1),
-                    output_field=IntegerField(),
                 )),
                 four=Sum(Case(
                     When(integer=4, then=1),
-                    output_field=IntegerField(),
                 )),
             ),
             {'one': 1, 'two': 2, 'three': 3, 'four': 1}
@@ -373,11 +355,9 @@ class CaseExpressionTests(TestCase):
             CaseTestModel.objects.aggregate(
                 equal=Sum(Case(
                     When(integer2=F('integer'), then=1),
-                    output_field=IntegerField(),
                 )),
                 plus_one=Sum(Case(
                     When(integer2=F('integer') + 1, then=1),
-                    output_field=IntegerField(),
                 )),
             ),
             {'equal': 3, 'plus_one': 4}
@@ -389,7 +369,6 @@ class CaseExpressionTests(TestCase):
                 When(integer=2, then=3),
                 When(integer=3, then=4),
                 default=1,
-                output_field=IntegerField(),
             )).order_by('pk'),
             [(1, 1), (2, 3), (3, 4), (3, 4)],
             transform=attrgetter('integer', 'integer2')
@@ -400,7 +379,6 @@ class CaseExpressionTests(TestCase):
             CaseTestModel.objects.filter(integer2=Case(
                 When(integer=2, then=3),
                 When(integer=3, then=4),
-                output_field=IntegerField(),
             )).order_by('pk'),
             [(2, 3), (3, 4), (3, 4)],
             transform=attrgetter('integer', 'integer2')
@@ -422,7 +400,6 @@ class CaseExpressionTests(TestCase):
             CaseTestModel.objects.filter(string=Case(
                 When(integer2=F('integer'), then=Value('2')),
                 When(integer2=F('integer') + 1, then=Value('3')),
-                output_field=CharField(),
             )).order_by('pk'),
             [(3, 4, '3'), (2, 2, '2'), (3, 4, '3')],
             transform=attrgetter('integer', 'integer2', 'string')
@@ -444,7 +421,6 @@ class CaseExpressionTests(TestCase):
             CaseTestModel.objects.filter(integer=Case(
                 When(integer2=F('o2o_rel__integer') + 1, then=2),
                 When(integer2=F('o2o_rel__integer'), then=3),
-                output_field=IntegerField(),
             )).order_by('pk'),
             [(2, 3), (3, 3)],
             transform=attrgetter('integer', 'integer2')
@@ -456,7 +432,6 @@ class CaseExpressionTests(TestCase):
                 When(o2o_rel__integer=1, then=1),
                 When(o2o_rel__integer=2, then=3),
                 When(o2o_rel__integer=3, then=4),
-                output_field=IntegerField(),
             )).order_by('pk'),
             [(1, 1), (2, 3), (3, 4), (3, 4)],
             transform=attrgetter('integer', 'integer2')
@@ -485,7 +460,6 @@ class CaseExpressionTests(TestCase):
                 integer=Case(
                     When(integer2=F('integer'), then=2),
                     When(integer2=F('f_plus_1'), then=3),
-                    output_field=IntegerField(),
                 ),
             ).order_by('pk'),
             [(3, 4), (2, 2), (3, 4)],
@@ -501,7 +475,6 @@ class CaseExpressionTests(TestCase):
                     When(f_plus_1=3, then=3),
                     When(f_plus_1=4, then=4),
                     default=1,
-                    output_field=IntegerField(),
                 ),
             ).order_by('pk'),
             [(1, 1), (2, 3), (3, 4), (3, 4)],
@@ -612,7 +585,6 @@ class CaseExpressionTests(TestCase):
                 integer=Case(
                     When(integer2=F('o2o_rel__integer') + 1, then=2),
                     When(integer2=F('o2o_rel__integer'), then=3),
-                    output_field=IntegerField(),
                 ),
             )
 
@@ -624,7 +596,6 @@ class CaseExpressionTests(TestCase):
                     When(o2o_rel__integer=2, then=Value('two')),
                     When(o2o_rel__integer=3, then=Value('three')),
                     default=Value('other'),
-                    output_field=CharField(),
                 ),
             )
 
@@ -644,9 +615,9 @@ class CaseExpressionTests(TestCase):
     def test_update_binary(self):
         CaseTestModel.objects.update(
             binary=Case(
-                When(integer=1, then=Value(b'one', output_field=BinaryField())),
-                When(integer=2, then=Value(b'two', output_field=BinaryField())),
-                default=Value(b'', output_field=BinaryField()),
+                When(integer=1, then=b'one'),
+                When(integer=2, then=b'two'),
+                default=b'',
             ),
         )
         self.assertQuerysetEqual(
@@ -725,10 +696,8 @@ class CaseExpressionTests(TestCase):
     def test_update_duration(self):
         CaseTestModel.objects.update(
             duration=Case(
-                # fails on sqlite if output_field is not set explicitly on all
-                # Values containing timedeltas
-                When(integer=1, then=Value(timedelta(1), output_field=DurationField())),
-                When(integer=2, then=Value(timedelta(2), output_field=DurationField())),
+                When(integer=1, then=timedelta(1)),
+                When(integer=2, then=timedelta(2)),
             ),
         )
         self.assertQuerysetEqual(
@@ -808,7 +777,6 @@ class CaseExpressionTests(TestCase):
     def test_update_generic_ip_address(self):
         CaseTestModel.objects.update(
             generic_ip_address=Case(
-                # fails on postgresql if output_field is not set explicitly
                 When(integer=1, then=Value('1.1.1.1')),
                 When(integer=2, then=Value('2.2.2.2')),
                 output_field=GenericIPAddressField(),
@@ -915,8 +883,8 @@ class CaseExpressionTests(TestCase):
     def test_update_string(self):
         CaseTestModel.objects.filter(string__in=['1', '2']).update(
             string=Case(
-                When(integer=1, then=Value('1', output_field=CharField())),
-                When(integer=2, then=Value('2', output_field=CharField())),
+                When(integer=1, then=Value('1')),
+                When(integer=2, then=Value('2')),
             ),
         )
         self.assertQuerysetEqual(
@@ -942,10 +910,8 @@ class CaseExpressionTests(TestCase):
     def test_update_time(self):
         CaseTestModel.objects.update(
             time=Case(
-                # fails on sqlite if output_field is not set explicitly on all
-                # Values containing times
-                When(integer=1, then=Value(time(1), output_field=TimeField())),
-                When(integer=2, then=Value(time(2), output_field=TimeField())),
+                When(integer=1, then=time(1)),
+                When(integer=2, then=time(2)),
             ),
         )
         self.assertQuerysetEqual(
@@ -974,16 +940,8 @@ class CaseExpressionTests(TestCase):
     def test_update_uuid(self):
         CaseTestModel.objects.update(
             uuid=Case(
-                # fails on sqlite if output_field is not set explicitly on all
-                # Values containing UUIDs
-                When(integer=1, then=Value(
-                    UUID('11111111111111111111111111111111'),
-                    output_field=UUIDField(),
-                )),
-                When(integer=2, then=Value(
-                    UUID('22222222222222222222222222222222'),
-                    output_field=UUIDField(),
-                )),
+                When(integer=1, then=UUID('11111111111111111111111111111111')),
+                When(integer=2, then=UUID('22222222222222222222222222222222')),
             ),
         )
         self.assertQuerysetEqual(
@@ -1022,7 +980,6 @@ class CaseExpressionTests(TestCase):
                     When(integer__lt=2, then=Value('less than 2')),
                     When(integer__gt=2, then=Value('greater than 2')),
                     default=Value('equal to 2'),
-                    output_field=CharField(),
                 ),
             ).order_by('pk'),
             [
@@ -1038,7 +995,6 @@ class CaseExpressionTests(TestCase):
                 test=Case(
                     When(integer=2, integer2=3, then=Value('when')),
                     default=Value('default'),
-                    output_field=CharField(),
                 ),
             ).order_by('pk'),
             [
@@ -1054,7 +1010,6 @@ class CaseExpressionTests(TestCase):
                 test=Case(
                     When(Q(integer=2) | Q(integer2=3), then=Value('when')),
                     default=Value('default'),
-                    output_field=CharField(),
                 ),
             ).order_by('pk'),
             [
@@ -1070,7 +1025,6 @@ class CaseExpressionTests(TestCase):
                 When(integer=1, then=2),
                 When(integer=2, then=1),
                 default=3,
-                output_field=IntegerField(),
             )).order_by('test', 'pk'),
             [(2, 1), (2, 1), (1, 2)],
             transform=attrgetter('integer', 'test')
@@ -1082,7 +1036,6 @@ class CaseExpressionTests(TestCase):
                 When(integer=1, then=2),
                 When(integer=2, then=1),
                 default=3,
-                output_field=IntegerField(),
             )).order_by(F('test').asc(), 'pk'),
             [(2, 1), (2, 1), (1, 2)],
             transform=attrgetter('integer', 'test')
@@ -1101,7 +1054,6 @@ class CaseExpressionTests(TestCase):
                 foo=Case(
                     When(fk_rel__pk=1, then=2),
                     default=3,
-                    output_field=IntegerField()
                 ),
             ),
             [(o, 3)],
@@ -1113,7 +1065,6 @@ class CaseExpressionTests(TestCase):
                 foo=Case(
                     When(fk_rel__isnull=True, then=2),
                     default=3,
-                    output_field=IntegerField()
                 ),
             ),
             [(o, 2)],
@@ -1133,12 +1084,10 @@ class CaseExpressionTests(TestCase):
                 foo=Case(
                     When(fk_rel__pk=1, then=2),
                     default=3,
-                    output_field=IntegerField()
                 ),
                 bar=Case(
                     When(fk_rel__pk=1, then=4),
                     default=5,
-                    output_field=IntegerField()
                 ),
             ),
             [(o, 3, 5)],
@@ -1150,12 +1099,10 @@ class CaseExpressionTests(TestCase):
                 foo=Case(
                     When(fk_rel__isnull=True, then=2),
                     default=3,
-                    output_field=IntegerField()
                 ),
                 bar=Case(
                     When(fk_rel__isnull=True, then=4),
                     default=5,
-                    output_field=IntegerField()
                 ),
             ),
             [(o, 2, 4)],
@@ -1167,7 +1114,6 @@ class CaseExpressionTests(TestCase):
         qs = CaseTestModel.objects.values_list('id', 'integer').annotate(
             cnt=Sum(
                 Case(When(~Q(fk_rel__integer=1), then=1), default=2),
-                output_field=IntegerField()
             ),
         ).order_by('integer')
         # The first o has 2 as its fk_rel__integer=1, thus it hits the
@@ -1189,12 +1135,10 @@ class CaseExpressionTests(TestCase):
         qs = CaseTestModel.objects.values_list('id', 'integer').annotate(
             cnt=Sum(
                 Case(When(~Q(fk_rel__integer=1), then=1), default=2),
-                output_field=IntegerField()
             ),
         ).annotate(
             cnt2=Sum(
                 Case(When(~Q(fk_rel__integer=1), then=1), default=2),
-                output_field=IntegerField()
             ),
         ).order_by('integer')
         self.assertEqual(str(qs.query).count(' JOIN '), 1)
@@ -1231,7 +1175,6 @@ class CaseDocumentationExamples(TestCase):
                     When(account_type=Client.GOLD, then=Value('5%')),
                     When(account_type=Client.PLATINUM, then=Value('10%')),
                     default=Value('0%'),
-                    output_field=CharField(),
                 ),
             ).order_by('pk'),
             [('Jane Doe', '0%'), ('James Smith', '5%'), ('Jack Black', '10%')],
@@ -1247,7 +1190,6 @@ class CaseDocumentationExamples(TestCase):
                     When(registered_on__lte=a_year_ago, then=Value('10%')),
                     When(registered_on__lte=a_month_ago, then=Value('5%')),
                     default=Value('0%'),
-                    output_field=CharField(),
                 ),
             ).order_by('pk'),
             [('Jane Doe', '5%'), ('James Smith', '0%'), ('Jack Black', '10%')],
@@ -1299,15 +1241,12 @@ class CaseDocumentationExamples(TestCase):
             Client.objects.aggregate(
                 regular=Sum(Case(
                     When(account_type=Client.REGULAR, then=1),
-                    output_field=IntegerField(),
                 )),
                 gold=Sum(Case(
                     When(account_type=Client.GOLD, then=1),
-                    output_field=IntegerField(),
                 )),
                 platinum=Sum(Case(
                     When(account_type=Client.PLATINUM, then=1),
-                    output_field=IntegerField(),
                 )),
             ),
             {'regular': 2, 'gold': 1, 'platinum': 3}
@@ -1360,9 +1299,9 @@ class CaseWhenTests(SimpleTestCase):
         with self.assertRaisesMessage(TypeError, msg):
             When(condition=object())
         with self.assertRaisesMessage(TypeError, msg):
-            When(condition=Value(1, output_field=IntegerField()))
+            When(condition=Value(1))
         with self.assertRaisesMessage(TypeError, msg):
-            When(Value(1, output_field=IntegerField()), string='1')
+            When(Value(1), string='1')
         with self.assertRaisesMessage(TypeError, msg):
             When()
 
diff --git a/tests/postgres_tests/test_ranges.py b/tests/postgres_tests/test_ranges.py
index 7257d66505..14dc75c998 100644
--- a/tests/postgres_tests/test_ranges.py
+++ b/tests/postgres_tests/test_ranges.py
@@ -170,7 +170,7 @@ class TestRangeContainsLookup(PostgreSQLTestCase):
             self.aware_timestamps[1],
             (self.timestamps[1], self.timestamps[2]),
             (self.aware_timestamps[1], self.aware_timestamps[2]),
-            Value(self.dates[0], output_field=DateTimeField()),
+            Value(self.dates[0]),
             Func(F('dates'), function='lower', output_field=DateTimeField()),
             F('timestamps_inner'),
         )
+ git diff 156a2138db20abc89933121e4ff2ee2ce56a173a
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
Requirement already satisfied: asgiref>=3.2 in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.2) (3.4.1)
Requirement already satisfied: pytz in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.2) (2025.2)
Requirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.2) (0.4.4)
Requirement already satisfied: typing-extensions in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from asgiref>=3.2->Django==3.2) (4.1.1)
Installing collected packages: Django
  Attempting uninstall: Django
    Found existing installation: Django 3.2
    Uninstalling Django-3.2:
      Successfully uninstalled Django-3.2
  Running setup.py develop for Django
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv
Successfully installed Django-3.2
+ git apply -v -
<stdin>:13: trailing whitespace.
        
<stdin>:16: trailing whitespace.
        
<stdin>:19: trailing whitespace.
        
<stdin>:22: trailing whitespace.
        
Checking patch tests/test_coverup_django__django-13195.py...
Applied patch tests/test_coverup_django__django-13195.py cleanly.
warning: 4 lines add whitespace errors.
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/http/response\.py|django/contrib/sessions/middleware\.py|django/contrib/messages/storage/cookie\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-13195
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(django/http/response\\.py|django/contrib/sessions/middleware\\.py|django/contrib/messages/storage/cookie\\.py)']
0.13 /testbed/django/http/response.py(1): import datetime
0.13 /testbed/django/http/response.py(2): import json
0.13 /testbed/django/http/response.py(3): import mimetypes
0.13 /testbed/django/http/response.py(4): import os
0.13 /testbed/django/http/response.py(5): import re
0.13 /testbed/django/http/response.py(6): import sys
0.13 /testbed/django/http/response.py(7): import time
0.13 /testbed/django/http/response.py(8): from email.header import Header
0.13 /testbed/django/http/response.py(9): from http.client import responses
0.13 /testbed/django/http/response.py(10): from urllib.parse import quote, urlparse
0.13 /testbed/django/http/response.py(12): from django.conf import settings
0.13 /testbed/django/http/response.py(13): from django.core import signals, signing
0.13 /testbed/django/http/response.py(14): from django.core.exceptions import DisallowedRedirect
0.13 /testbed/django/http/response.py(15): from django.core.serializers.json import DjangoJSONEncoder
0.35 /testbed/django/http/response.py(16): from django.http.cookie import SimpleCookie
0.35 /testbed/django/http/response.py(17): from django.utils import timezone
0.35 /testbed/django/http/response.py(18): from django.utils.encoding import iri_to_uri
0.35 /testbed/django/http/response.py(19): from django.utils.http import http_date
0.35 /testbed/django/http/response.py(20): from django.utils.regex_helper import _lazy_re_compile
0.35 /testbed/django/http/response.py(22): _charset_from_content_type_re = _lazy_re_compile(r';\s*charset=(?P<charset>[^\s;]+)', re.I)
0.35 /testbed/django/http/response.py(25): class BadHeaderError(ValueError):
0.35 /testbed/django/http/response.py(25): class BadHeaderError(ValueError):
0.35 /testbed/django/http/response.py(26):     pass
0.35 /testbed/django/http/response.py(29): class HttpResponseBase:
0.35 /testbed/django/http/response.py(29): class HttpResponseBase:
0.35 /testbed/django/http/response.py(35):     """
0.35 /testbed/django/http/response.py(37):     status_code = 200
0.35 /testbed/django/http/response.py(39):     def __init__(self, content_type=None, status=None, reason=None, charset=None):
0.35 /testbed/django/http/response.py(64):     @property
0.35 /testbed/django/http/response.py(72):     @reason_phrase.setter
0.35 /testbed/django/http/response.py(76):     @property
0.35 /testbed/django/http/response.py(87):     @charset.setter
0.35 /testbed/django/http/response.py(91):     def serialize_headers(self):
0.35 /testbed/django/http/response.py(102):     __bytes__ = serialize_headers
0.35 /testbed/django/http/response.py(104):     @property
0.35 /testbed/django/http/response.py(108):     def _convert_to_charset(self, value, charset, mime_encode=False):
0.35 /testbed/django/http/response.py(135):     def __setitem__(self, header, value):
0.35 /testbed/django/http/response.py(140):     def __delitem__(self, header):
0.35 /testbed/django/http/response.py(143):     def __getitem__(self, header):
0.35 /testbed/django/http/response.py(146):     def has_header(self, header):
0.35 /testbed/django/http/response.py(150):     __contains__ = has_header
0.35 /testbed/django/http/response.py(152):     def items(self):
0.35 /testbed/django/http/response.py(155):     def get(self, header, alternate=None):
0.35 /testbed/django/http/response.py(159):                    domain=None, secure=False, httponly=False, samesite=None):
0.35 /testbed/django/http/response.py(204):     def setdefault(self, key, value):
0.35 /testbed/django/http/response.py(209):     def set_signed_cookie(self, key, value, salt='', **kwargs):
0.35 /testbed/django/http/response.py(213):     def delete_cookie(self, key, path='/', domain=None):
0.35 /testbed/django/http/response.py(224):     def make_bytes(self, value):
0.35 /testbed/django/http/response.py(245):     def close(self):
0.35 /testbed/django/http/response.py(256):     def write(self, content):
0.35 /testbed/django/http/response.py(259):     def flush(self):
0.35 /testbed/django/http/response.py(262):     def tell(self):
0.35 /testbed/django/http/response.py(268):     def readable(self):
0.35 /testbed/django/http/response.py(271):     def seekable(self):
0.35 /testbed/django/http/response.py(274):     def writable(self):
0.35 /testbed/django/http/response.py(277):     def writelines(self, lines):
0.35 /testbed/django/http/response.py(281): class HttpResponse(HttpResponseBase):
0.35 /testbed/django/http/response.py(281): class HttpResponse(HttpResponseBase):
0.35 /testbed/django/http/response.py(286):     """
0.35 /testbed/django/http/response.py(288):     streaming = False
0.35 /testbed/django/http/response.py(290):     def __init__(self, content=b'', *args, **kwargs):
0.35 /testbed/django/http/response.py(295):     def __repr__(self):
0.35 /testbed/django/http/response.py(302):     def serialize(self):
0.35 /testbed/django/http/response.py(306):     __bytes__ = serialize
0.35 /testbed/django/http/response.py(308):     @property
0.35 /testbed/django/http/response.py(312):     @content.setter
0.35 /testbed/django/http/response.py(327):     def __iter__(self):
0.35 /testbed/django/http/response.py(330):     def write(self, content):
0.35 /testbed/django/http/response.py(333):     def tell(self):
0.35 /testbed/django/http/response.py(336):     def getvalue(self):
0.35 /testbed/django/http/response.py(339):     def writable(self):
0.35 /testbed/django/http/response.py(342):     def writelines(self, lines):
0.35 /testbed/django/http/response.py(347): class StreamingHttpResponse(HttpResponseBase):
0.35 /testbed/django/http/response.py(347): class StreamingHttpResponse(HttpResponseBase):
0.35 /testbed/django/http/response.py(354):     """
0.35 /testbed/django/http/response.py(356):     streaming = True
0.35 /testbed/django/http/response.py(358):     def __init__(self, streaming_content=(), *args, **kwargs):
0.35 /testbed/django/http/response.py(364):     @property
0.35 /testbed/django/http/response.py(371):     @property
0.35 /testbed/django/http/response.py(375):     @streaming_content.setter
0.35 /testbed/django/http/response.py(379):     def _set_streaming_content(self, value):
0.35 /testbed/django/http/response.py(385):     def __iter__(self):
0.35 /testbed/django/http/response.py(388):     def getvalue(self):
0.35 /testbed/django/http/response.py(392): class FileResponse(StreamingHttpResponse):
0.35 /testbed/django/http/response.py(392): class FileResponse(StreamingHttpResponse):
0.35 /testbed/django/http/response.py(395):     """
0.35 /testbed/django/http/response.py(396):     block_size = 4096
0.35 /testbed/django/http/response.py(398):     def __init__(self, *args, as_attachment=False, filename='', **kwargs):
0.35 /testbed/django/http/response.py(403):     def _set_streaming_content(self, value):
0.35 /testbed/django/http/response.py(415):     def set_headers(self, filelike):
0.35 /testbed/django/http/response.py(455): class HttpResponseRedirectBase(HttpResponse):
0.35 /testbed/django/http/response.py(455): class HttpResponseRedirectBase(HttpResponse):
0.35 /testbed/django/http/response.py(456):     allowed_schemes = ['http', 'https', 'ftp']
0.35 /testbed/django/http/response.py(458):     def __init__(self, redirect_to, *args, **kwargs):
0.35 /testbed/django/http/response.py(465):     url = property(lambda self: self['Location'])
0.35 /testbed/django/http/response.py(467):     def __repr__(self):
0.35 /testbed/django/http/response.py(476): class HttpResponseRedirect(HttpResponseRedirectBase):
0.35 /testbed/django/http/response.py(476): class HttpResponseRedirect(HttpResponseRedirectBase):
0.35 /testbed/django/http/response.py(477):     status_code = 302
0.35 /testbed/django/http/response.py(480): class HttpResponsePermanentRedirect(HttpResponseRedirectBase):
0.35 /testbed/django/http/response.py(480): class HttpResponsePermanentRedirect(HttpResponseRedirectBase):
0.35 /testbed/django/http/response.py(481):     status_code = 301
0.35 /testbed/django/http/response.py(484): class HttpResponseNotModified(HttpResponse):
0.35 /testbed/django/http/response.py(484): class HttpResponseNotModified(HttpResponse):
test_delete_cookie_preserves_samesite (test_coverup_django__django-13195.DeleteCookieSameSiteTest) ... 0.35 /testbed/django/http/response.py(485):     status_code = 304
0.35 /testbed/django/http/response.py(487):     def __init__(self, *args, **kwargs):
0.35 /testbed/django/http/response.py(491):     @HttpResponse.content.setter
0.35 /testbed/django/http/response.py(498): class HttpResponseBadRequest(HttpResponse):
0.35 /testbed/django/http/response.py(498): class HttpResponseBadRequest(HttpResponse):
0.35 /testbed/django/http/response.py(499):     status_code = 400
0.35 /testbed/django/http/response.py(502): class HttpResponseNotFound(HttpResponse):
0.35 /testbed/django/http/response.py(502): class HttpResponseNotFound(HttpResponse):
0.35 /testbed/django/http/response.py(503):     status_code = 404
0.35 /testbed/django/http/response.py(506): class HttpResponseForbidden(HttpResponse):
0.35 /testbed/django/http/response.py(506): class HttpResponseForbidden(HttpResponse):
0.35 /testbed/django/http/response.py(507):     status_code = 403
0.35 /testbed/django/http/response.py(510): class HttpResponseNotAllowed(HttpResponse):
0.35 /testbed/django/http/response.py(510): class HttpResponseNotAllowed(HttpResponse):
0.35 /testbed/django/http/response.py(511):     status_code = 405
0.35 /testbed/django/http/response.py(513):     def __init__(self, permitted_methods, *args, **kwargs):
0.35 /testbed/django/http/response.py(517):     def __repr__(self):
0.35 /testbed/django/http/response.py(526): class HttpResponseGone(HttpResponse):
0.35 /testbed/django/http/response.py(526): class HttpResponseGone(HttpResponse):
0.35 /testbed/django/http/response.py(527):     status_code = 410
0.35 /testbed/django/http/response.py(530): class HttpResponseServerError(HttpResponse):
0.35 /testbed/django/http/response.py(530): class HttpResponseServerError(HttpResponse):
0.35 /testbed/django/http/response.py(531):     status_code = 500
0.35 /testbed/django/http/response.py(534): class Http404(Exception):
0.35 /testbed/django/http/response.py(534): class Http404(Exception):
0.35 /testbed/django/http/response.py(535):     pass
0.35 /testbed/django/http/response.py(538): class JsonResponse(HttpResponse):
0.35 /testbed/django/http/response.py(538): class JsonResponse(HttpResponse):
0.35 /testbed/django/http/response.py(550):     """
0.35 /testbed/django/http/response.py(552):     def __init__(self, data, encoder=DjangoJSONEncoder, safe=True,
0.35 /testbed/django/http/response.py(553):                  json_dumps_params=None, **kwargs):
Testing against Django installed in '/testbed/django'
Skipping setup of unused database(s): default, other.
0.63 /testbed/django/contrib/sessions/middleware.py(1): import time
0.63 /testbed/django/contrib/sessions/middleware.py(2): from importlib import import_module
0.63 /testbed/django/contrib/sessions/middleware.py(4): from django.conf import settings
0.63 /testbed/django/contrib/sessions/middleware.py(5): from django.contrib.sessions.backends.base import UpdateError
0.63 /testbed/django/contrib/sessions/middleware.py(6): from django.core.exceptions import SuspiciousOperation
0.63 /testbed/django/contrib/sessions/middleware.py(7): from django.utils.cache import patch_vary_headers
0.63 /testbed/django/contrib/sessions/middleware.py(8): from django.utils.deprecation import MiddlewareMixin
0.63 /testbed/django/contrib/sessions/middleware.py(9): from django.utils.http import http_date
0.63 /testbed/django/contrib/sessions/middleware.py(12): class SessionMiddleware(MiddlewareMixin):
0.63 /testbed/django/contrib/sessions/middleware.py(12): class SessionMiddleware(MiddlewareMixin):
0.63 /testbed/django/contrib/sessions/middleware.py(15):     def __init__(self, get_response=None):
0.63 /testbed/django/contrib/sessions/middleware.py(22):     def process_request(self, request):
0.63 /testbed/django/contrib/sessions/middleware.py(26):     def process_response(self, request, response):
System check identified no issues (0 silenced).
0.64 /testbed/django/http/response.py(291):         super().__init__(*args, **kwargs)
0.64 /testbed/django/http/response.py(43):         self._headers = {}
0.64 /testbed/django/http/response.py(44):         self._resource_closers = []
0.64 /testbed/django/http/response.py(47):         self._handler_class = None
0.64 /testbed/django/http/response.py(48):         self.cookies = SimpleCookie()
0.64 /testbed/django/http/response.py(49):         self.closed = False
0.64 /testbed/django/http/response.py(50):         if status is not None:
0.64 /testbed/django/http/response.py(58):         self._reason_phrase = reason
0.64 /testbed/django/http/response.py(59):         self._charset = charset
0.64 /testbed/django/http/response.py(60):         if content_type is None:
0.64 /testbed/django/http/response.py(61):             content_type = 'text/html; charset=%s' % self.charset
0.64 /testbed/django/http/response.py(78):         if self._charset is not None:
0.64 /testbed/django/http/response.py(80):         content_type = self.get('Content-Type', '')
0.64 /testbed/django/http/response.py(156):         return self._headers.get(header.lower(), (None, alternate))[1]
0.64 /testbed/django/http/response.py(81):         matched = _charset_from_content_type_re.search(content_type)
0.64 /testbed/django/http/response.py(82):         if matched:
0.64 /testbed/django/http/response.py(85):         return settings.DEFAULT_CHARSET
0.64 /testbed/django/http/response.py(62):         self['Content-Type'] = content_type
0.64 /testbed/django/http/response.py(136):         header = self._convert_to_charset(header, 'ascii')
0.64 /testbed/django/http/response.py(115):         if not isinstance(value, (bytes, str)):
0.64 /testbed/django/http/response.py(117):         if ((isinstance(value, bytes) and (b'\n' in value or b'\r' in value)) or
0.64 /testbed/django/http/response.py(118):                 isinstance(value, str) and ('\n' in value or '\r' in value)):
0.64 /testbed/django/http/response.py(120):         try:
0.64 /testbed/django/http/response.py(121):             if isinstance(value, str):
0.64 /testbed/django/http/response.py(123):                 value.encode(charset)
0.64 /testbed/django/http/response.py(133):         return value
0.64 /testbed/django/http/response.py(137):         value = self._convert_to_charset(value, 'latin-1', mime_encode=True)
0.64 /testbed/django/http/response.py(115):         if not isinstance(value, (bytes, str)):
0.64 /testbed/django/http/response.py(117):         if ((isinstance(value, bytes) and (b'\n' in value or b'\r' in value)) or
0.64 /testbed/django/http/response.py(118):                 isinstance(value, str) and ('\n' in value or '\r' in value)):
0.64 /testbed/django/http/response.py(120):         try:
0.64 /testbed/django/http/response.py(121):             if isinstance(value, str):
0.64 /testbed/django/http/response.py(123):                 value.encode(charset)
0.64 /testbed/django/http/response.py(133):         return value
0.64 /testbed/django/http/response.py(138):         self._headers[header.lower()] = (header, value)
0.64 /testbed/django/http/response.py(293):         self.content = content
0.65 /testbed/django/http/response.py(315):         if hasattr(value, '__iter__') and not isinstance(value, (bytes, str)):
0.65 /testbed/django/http/response.py(323):             content = self.make_bytes(value)
0.65 /testbed/django/http/response.py(233):         if isinstance(value, (bytes, memoryview)):
0.65 /testbed/django/http/response.py(234):             return bytes(value)
0.65 /testbed/django/http/response.py(325):         self._container = [content]
0.65 /testbed/django/http/response.py(169):         self.cookies[key] = value
0.65 /testbed/django/http/response.py(170):         if expires is not None:
0.65 /testbed/django/http/response.py(185):             self.cookies[key]['expires'] = ''
0.65 /testbed/django/http/response.py(186):         if max_age is not None:
0.65 /testbed/django/http/response.py(191):         if path is not None:
0.65 /testbed/django/http/response.py(192):             self.cookies[key]['path'] = path
0.65 /testbed/django/http/response.py(193):         if domain is not None:
0.65 /testbed/django/http/response.py(195):         if secure:
0.65 /testbed/django/http/response.py(197):         if httponly:
0.65 /testbed/django/http/response.py(199):         if samesite:
0.65 /testbed/django/http/response.py(200):             if samesite.lower() not in ('lax', 'none', 'strict'):
0.65 /testbed/django/http/response.py(202):             self.cookies[key]['samesite'] = samesite
0.65 /testbed/django/http/response.py(216):         secure = key.startswith(('__Secure-', '__Host-'))
0.65 /testbed/django/http/response.py(217):         self.set_cookie(
0.65 /testbed/django/http/response.py(218):             key, max_age=0, path=path, domain=domain, secure=secure,
0.65 /testbed/django/http/response.py(219):             expires='Thu, 01 Jan 1970 00:00:00 GMT',
0.65 /testbed/django/http/response.py(169):         self.cookies[key] = value
0.65 /testbed/django/http/response.py(170):         if expires is not None:
0.65 /testbed/django/http/response.py(171):             if isinstance(expires, datetime.datetime):
0.65 /testbed/django/http/response.py(183):                 self.cookies[key]['expires'] = expires
0.65 /testbed/django/http/response.py(186):         if max_age is not None:
0.65 /testbed/django/http/response.py(187):             self.cookies[key]['max-age'] = max_age
0.65 /testbed/django/http/response.py(189):             if not expires:
0.65 /testbed/django/http/response.py(191):         if path is not None:
0.65 /testbed/django/http/response.py(192):             self.cookies[key]['path'] = path
0.65 /testbed/django/http/response.py(193):         if domain is not None:
0.65 /testbed/django/http/response.py(195):         if secure:
0.65 /testbed/django/http/response.py(197):         if httponly:
0.65 /testbed/django/http/response.py(199):         if samesite:
FAIL

======================================================================
FAIL: test_delete_cookie_preserves_samesite (test_coverup_django__django-13195.DeleteCookieSameSiteTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "./tests/test_coverup_django__django-13195.py", line 18, in test_delete_cookie_preserves_samesite
    self.assertNotIn('SameSite=Lax', set_cookie_header)
AssertionError: 'SameSite=Lax' unexpectedly found in 'Set-Cookie: test_cookie=""; expires=Thu, 01 Jan 1970 00:00:00 GMT; Max-Age=0; Path=/; SameSite=Lax'

----------------------------------------------------------------------
Ran 1 test in 0.001s

FAILED (failures=1)
+ cat coverage.cover
{"/testbed/django/http/response.py": {"1": 1, "2": 1, "3": 1, "4": 1, "5": 1, "6": 1, "7": 1, "8": 1, "9": 1, "10": 1, "12": 1, "13": 1, "14": 1, "15": 1, "16": 1, "17": 1, "18": 1, "19": 1, "20": 1, "22": 1, "25": 2, "29": 2, "281": 2, "347": 2, "392": 2, "455": 2, "476": 2, "480": 2, "484": 2, "498": 2, "502": 2, "506": 2, "510": 2, "526": 2, "530": 2, "534": 2, "538": 2, "26": 1, "37": 1, "39": 1, "64": 1, "72": 1, "76": 1, "87": 1, "91": 1, "102": 1, "104": 1, "108": 1, "135": 1, "140": 1, "143": 1, "146": 1, "150": 1, "152": 1, "155": 1, "159": 1, "204": 1, "209": 1, "213": 1, "224": 1, "245": 1, "256": 1, "259": 1, "262": 1, "268": 1, "271": 1, "274": 1, "277": 1, "43": 1, "44": 1, "47": 1, "48": 1, "49": 1, "50": 1, "51": 0, "52": 0, "53": 0, "54": 0, "56": 0, "57": 0, "58": 1, "59": 1, "60": 1, "61": 1, "62": 1, "66": 0, "67": 0, "70": 0, "74": 0, "78": 1, "79": 0, "80": 1, "81": 1, "82": 1, "84": 0, "85": 1, "89": 0, "93": 0, "97": 0, "98": 0, "100": 0, "94": 0, "106": 0, "115": 2, "116": 0, "117": 2, "118": 2, "119": 0, "120": 2, "121": 2, "123": 2, "126": 0, "127": 0, "128": 0, "129": 0, "131": 0, "132": 0, "133": 2, "136": 1, "137": 1, "138": 1, "141": 0, "144": 0, "148": 0, "153": 0, "156": 1, "169": 2, "170": 2, "171": 1, "172": 0, "173": 0, "174": 0, "178": 0, "180": 0, "181": 0, "183": 1, "185": 1, "186": 2, "187": 1, "189": 1, "190": 0, "191": 2, "192": 2, "193": 2, "194": 0, "195": 2, "196": 0, "197": 2, "198": 0, "199": 2, "200": 1, "201": 0, "202": 1, "206": 0, "207": 0, "210": 0, "211": 0, "216": 1, "217": 1, "218": 1, "219": 1, "233": 1, "234": 1, "235": 0, "236": 0, "238": 0, "246": 0, "247": 0, "248": 0, "249": 0, "250": 0, "252": 0, "253": 0, "254": 0, "257": 0, "260": 0, "263": 0, "269": 0, "272": 0, "275": 0, "278": 0, "288": 1, "290": 1, "295": 1, "302": 1, "306": 1, "308": 1, "312": 1, "327": 1, "330": 1, "333": 1, "336": 1, "339": 1, "342": 1, "291": 1, "293": 1, "296": 0, "297": 0, "298": 0, "299": 0, "304": 0, "310": 0, "315": 1, "316": 0, "317": 0, "318": 0, "319": 0, "320": 0, "321": 0, "323": 1, "325": 1, "328": 0, "331": 0, "334": 0, "337": 0, "340": 0, "343": 0, "344": 0, "356": 1, "358": 1, "364": 1, "371": 1, "375": 1, "379": 1, "385": 1, "388": 1, "359": 0, "362": 0, "366": 0, "367": 0, "368": 0, "373": 0, "377": 0, "381": 0, "382": 0, "383": 0, "386": 0, "389": 0, "396": 1, "398": 1, "403": 1, "415": 1, "399": 0, "400": 0, "401": 0, "404": 0, "405": 0, "406": 0, "408": 0, "409": 0, "410": 0, "411": 0, "412": 0, "413": 0, "421": 0, "422": 0, "423": 0, "425": 0, "426": 0, "427": 0, "428": 0, "429": 0, "430": 0, "432": 0, "433": 0, "434": 0, "437": 0, "438": 0, "440": 0, "442": 0, "443": 0, "444": 0, "445": 0, "446": 0, "447": 0, "448": 0, "449": 0, "450": 0, "451": 0, "452": 0, "456": 1, "458": 1, "465": 1, "467": 1, "459": 0, "460": 0, "461": 0, "462": 0, "463": 0, "468": 0, "469": 0, "470": 0, "471": 0, "472": 0, "477": 1, "481": 1, "485": 1, "487": 1, "491": 1, "488": 0, "489": 0, "493": 0, "494": 0, "495": 0, "499": 1, "503": 1, "507": 1, "511": 1, "513": 1, "517": 1, "514": 0, "515": 0, "518": 0, "519": 0, "520": 0, "521": 0, "522": 0, "527": 1, "531": 1, "535": 1, "552": 1, "553": 1, "554": 0, "555": 0, "556": 0, "559": 0, "560": 0, "561": 0, "562": 0, "563": 0}}
{"/testbed/django/contrib/sessions/middleware.py": {"1": 1, "2": 1, "4": 1, "5": 1, "6": 1, "7": 1, "8": 1, "9": 1, "12": 2, "15": 1, "22": 1, "26": 1, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "23": 0, "24": 0, "32": 0, "33": 0, "34": 0, "35": 0, "36": 0, "37": 0, "40": 0, "41": 0, "42": 0, "43": 0, "44": 0, "46": 0, "48": 0, "49": 0, "50": 0, "51": 0, "52": 0, "53": 0, "55": 0, "56": 0, "57": 0, "60": 0, "61": 0, "62": 0, "63": 0, "64": 0, "65": 0, "69": 0, "70": 0, "71": 0, "72": 0, "73": 0, "74": 0, "75": 0, "76": 0, "78": 0}}
+ git checkout 156a2138db20abc89933121e4ff2ee2ce56a173a
Note: switching to '156a2138db20abc89933121e4ff2ee2ce56a173a'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at 156a2138db Refs #30446 -- Removed unnecessary Value(..., output_field) in docs and tests.
+ git apply /root/pre_state.patch
error: unrecognized input
