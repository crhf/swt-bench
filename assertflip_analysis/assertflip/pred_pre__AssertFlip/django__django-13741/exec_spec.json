{"instance_id": "django__django-13741", "repo": "django/django", "version": "3.2", "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d", "patch_list": ["diff --git a/dev/null b/tests/test_coverup_django__django-13741.py\nnew file mode 100644\nindex e69de29..a7ea68a 100644\n--- /dev/null\n+++ b/tests/test_coverup_django__django-13741.py\n@@ -0,0 +1,30 @@\n+from django.test import TestCase\n+from django.contrib.auth.models import User\n+from django.contrib.auth.forms import UserChangeForm\n+\n+class ReadOnlyPasswordHashFieldTest(TestCase):\n+    def setUp(self):\n+        # Create a user instance with a known password hash\n+        self.user = User.objects.create_user(username='testuser', password='testpassword')\n+        self.user.set_password('testpassword')\n+        self.user.save()\n+\n+    def test_read_only_password_hash_field_disabled(self):\n+        # Initialize the form with the user instance\n+        form = UserChangeForm(instance=self.user)\n+\n+        # Check if the 'disabled' attribute is set on the ReadOnlyPasswordHashField\n+        password_field = form.fields['password']\n+        self.assertTrue(password_field.widget.attrs.get('disabled', False))\n+\n+    def test_clean_password_method_necessity(self):\n+        # Simulate form data with a tampered password field\n+        form_data = {\n+            'username': 'testuser',\n+            'password': 'tamperedpassword',\n+        }\n+        form = UserChangeForm(data=form_data, instance=self.user)\n+\n+        # Check if the form's cleaned data returns the initial password hash\n+        form.is_valid()  # Ensure form validation is called\n+        self.assertNotEqual(form.cleaned_data.get('password'), form_data['password'])\n"], "arch": "x86_64", "base_commit": "d746f28949c009251a8741ba03d156964050717f", "test_directives": ["test_coverup_django__django-13741"], "coverage_files": ["django/contrib/auth/forms.py"], "env_name": "testbed", "run_id": "assertflip", "patch_id": "pred_pre__AssertFlip", "timeout": 1800, "rm_image": false, "force_rebuild": false, "exec_mode": "unit_test", "reproduction_script_name": null, "compute_coverage": true, "install": {"python": "3.6", "packages": "requirements.txt", "install": "python -m pip install -e .", "eval_commands": ["sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen && locale-gen", "export LANG=en_US.UTF-8", "export LANGUAGE=en_US:en", "export LC_ALL=en_US.UTF-8"]}, "cache_level": "instance", "test_command": "python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/contrib/auth/forms\\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-13741", "req_install_commands": ["conda create -n testbed python=3.6 -y", "cat <<'EOF_59812759871' > $HOME/requirements.txt\nasgiref >= 3.3.2\nargon2-cffi >= 16.1.0\nbackports.zoneinfo; python_version < '3.9'\nbcrypt\ndocutils\ngeoip2\njinja2 >= 2.9.2\nnumpy\nPillow >= 6.2.0\npylibmc; sys.platform != 'win32'\npymemcache >= 3.4.0\npython-memcached >= 1.59\npytz\npywatchman; sys.platform != 'win32'\nPyYAML\nselenium\nsqlparse >= 0.2.2\ntblib >= 1.5.0\ntzdata\ncolorama; sys.platform == 'win32'\n\nEOF_59812759871", "conda activate testbed && python -m pip install -r $HOME/requirements.txt", "rm $HOME/requirements.txt"]}