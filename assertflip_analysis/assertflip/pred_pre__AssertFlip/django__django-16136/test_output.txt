+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD 19e6efa50b603af325e7f62058364f278596758f
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
nothing to commit, working tree clean
+ git show
commit 19e6efa50b603af325e7f62058364f278596758f
Author: Mariusz Felisiak <felisiak.mariusz@gmail.com>
Date:   Thu Sep 29 13:20:14 2022 +0200

    Fixed #34058 -- Changed sequence types when altering pre-Django 4.1 auto fields on PostgreSQL.
    
    Thanks Anders Kaseorg for the report.
    
    Thanks Florian Apolloner for pair programming.
    
    Regression in 2eea361eff58dd98c409c5227064b901f41bd0d6.

diff --git a/django/db/backends/postgresql/schema.py b/django/db/backends/postgresql/schema.py
index 98af319570..d512ecefb6 100644
--- a/django/db/backends/postgresql/schema.py
+++ b/django/db/backends/postgresql/schema.py
@@ -13,7 +13,7 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):
         "UPDATE %(table)s SET %(column)s = %(default)s WHERE %(column)s IS NULL"
         "; SET CONSTRAINTS ALL IMMEDIATE"
     )
-
+    sql_alter_sequence_type = "ALTER SEQUENCE IF EXISTS %(sequence)s AS %(type)s"
     sql_delete_sequence = "DROP SEQUENCE IF EXISTS %(sequence)s CASCADE"
 
     sql_create_index = (
@@ -208,6 +208,29 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):
                     [],
                 ),
             ]
+        elif new_is_auto and old_is_auto and old_internal_type != new_internal_type:
+            fragment, _ = super()._alter_column_type_sql(
+                model, old_field, new_field, new_type
+            )
+            column = strip_quotes(new_field.column)
+            sequence_name = f"{table}_{column}_seq"
+            db_types = {
+                "AutoField": "integer",
+                "BigAutoField": "bigint",
+                "SmallAutoField": "smallint",
+            }
+            return fragment, [
+                # Alter the sequence type if exists (Django 4.1+ identity
+                # columns don't have it).
+                (
+                    self.sql_alter_sequence_type
+                    % {
+                        "sequence": self.quote_name(sequence_name),
+                        "type": db_types[new_internal_type],
+                    },
+                    [],
+                ),
+            ]
         else:
             return super()._alter_column_type_sql(model, old_field, new_field, new_type)
 
diff --git a/docs/releases/4.1.2.txt b/docs/releases/4.1.2.txt
index 434bc5f587..57b0b6c6e8 100644
--- a/docs/releases/4.1.2.txt
+++ b/docs/releases/4.1.2.txt
@@ -35,3 +35,7 @@ Bugfixes
 * Fixed a regression in Django 4.1 where the ``--debug-mode`` argument to
   ``test`` did not work when running parallel tests with the
   ``multiprocessing`` start method ``spawn`` (:ticket:`34010`).
+
+* Fixed a regression in Django 4.1 that didn't alter a sequence type when
+  altering type of pre-Django 4.1 serial columns on PostgreSQL
+  (:ticket:`34058`).
diff --git a/tests/schema/tests.py b/tests/schema/tests.py
index aaf6dff2ff..32dde9aaed 100644
--- a/tests/schema/tests.py
+++ b/tests/schema/tests.py
@@ -1873,6 +1873,41 @@ class SchemaTests(TransactionTestCase):
         with connection.schema_editor() as editor:
             editor.alter_field(SmallIntegerPK, old_field, new_field, strict=True)
 
+    @isolate_apps("schema")
+    @unittest.skipUnless(connection.vendor == "postgresql", "PostgreSQL specific")
+    def test_alter_serial_auto_field_to_bigautofield(self):
+        class SerialAutoField(Model):
+            id = SmallAutoField(primary_key=True)
+
+            class Meta:
+                app_label = "schema"
+
+        table = SerialAutoField._meta.db_table
+        column = SerialAutoField._meta.get_field("id").column
+        with connection.cursor() as cursor:
+            cursor.execute(
+                f'CREATE TABLE "{table}" '
+                f'("{column}" smallserial NOT NULL PRIMARY KEY)'
+            )
+        try:
+            old_field = SerialAutoField._meta.get_field("id")
+            new_field = BigAutoField(primary_key=True)
+            new_field.model = SerialAutoField
+            new_field.set_attributes_from_name("id")
+            with connection.schema_editor() as editor:
+                editor.alter_field(SerialAutoField, old_field, new_field, strict=True)
+            with connection.cursor() as cursor:
+                cursor.execute(
+                    "SELECT data_type FROM pg_sequences WHERE sequencename = %s",
+                    [f"{table}_{column}_seq"],
+                )
+                row = cursor.fetchone()
+                sequence_data_type = row[0] if row and row[0] else None
+                self.assertEqual(sequence_data_type, "bigint")
+        finally:
+            with connection.cursor() as cursor:
+                cursor.execute(f'DROP TABLE "{table}"')
+
     def test_alter_int_pk_to_int_unique(self):
         """
         Should be able to rename an IntegerField(primary_key=True) to
+ git diff 19e6efa50b603af325e7f62058364f278596758f
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Checking if build backend supports build_editable: started
  Checking if build backend supports build_editable: finished with status 'done'
  Getting requirements to build editable: started
  Getting requirements to build editable: finished with status 'done'
  Preparing editable metadata (pyproject.toml): started
  Preparing editable metadata (pyproject.toml): finished with status 'done'
Requirement already satisfied: asgiref>=3.5.2 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Django==4.2.dev20220929112014) (3.9.1)
Requirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Django==4.2.dev20220929112014) (0.5.3)
Requirement already satisfied: typing_extensions>=4 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from asgiref>=3.5.2->Django==4.2.dev20220929112014) (4.14.1)
Building wheels for collected packages: Django
  Building editable for Django (pyproject.toml): started
  Building editable for Django (pyproject.toml): finished with status 'done'
  Created wheel for Django: filename=django-4.2.dev20220929112014-0.editable-py3-none-any.whl size=27258 sha256=011d9cca0149d5a578beb3f25c9b8ff1d7713cae123ee80161b59f03f1022b4e
  Stored in directory: /tmp/pip-ephem-wheel-cache-hegn_j8v/wheels/7d/66/67/70d1ee2124ccf21d601c352e25cdca10f611f7c8b3f9ffb9e4
Successfully built Django
Installing collected packages: Django
  Attempting uninstall: Django
    Found existing installation: Django 4.2.dev20220929112014
    Uninstalling Django-4.2.dev20220929112014:
      Successfully uninstalled Django-4.2.dev20220929112014
Successfully installed Django-4.2.dev20220929112014
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git apply -v -
Checking patch tests/test_coverup_django__django-16136.py...
Applied patch tests/test_coverup_django__django-16136.py cleanly.
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/views/generic/base\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-16136
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(django/views/generic/base\\.py)']
0.34 /testbed/django/views/generic/base.py(1): import asyncio
0.34 /testbed/django/views/generic/base.py(2): import logging
0.34 /testbed/django/views/generic/base.py(4): from django.core.exceptions import ImproperlyConfigured
0.34 /testbed/django/views/generic/base.py(5): from django.http import (
0.34 /testbed/django/views/generic/base.py(12): from django.template.response import TemplateResponse
0.34 /testbed/django/views/generic/base.py(13): from django.urls import reverse
0.34 /testbed/django/views/generic/base.py(14): from django.utils.decorators import classonlymethod
0.34 /testbed/django/views/generic/base.py(15): from django.utils.functional import classproperty
0.34 /testbed/django/views/generic/base.py(17): logger = logging.getLogger("django.request")
0.34 /testbed/django/views/generic/base.py(20): class ContextMixin:
0.34 /testbed/django/views/generic/base.py(20): class ContextMixin:
0.34 /testbed/django/views/generic/base.py(21):     """
0.34 /testbed/django/views/generic/base.py(26):     extra_context = None
0.34 /testbed/django/views/generic/base.py(28):     def get_context_data(self, **kwargs):
0.34 /testbed/django/views/generic/base.py(35): class View:
0.34 /testbed/django/views/generic/base.py(35): class View:
0.34 /testbed/django/views/generic/base.py(36):     """
0.34 /testbed/django/views/generic/base.py(41):     http_method_names = [
0.34 /testbed/django/views/generic/base.py(52):     def __init__(self, **kwargs):
0.34 /testbed/django/views/generic/base.py(62):     @classproperty
0.34 /testbed/django/views/generic/base.py(63):     def view_is_async(cls):
0.34 /testbed/django/views/generic/base.py(79):     @classonlymethod
0.34 /testbed/django/views/generic/base.py(80):     def as_view(cls, **initkwargs):
0.34 /testbed/django/views/generic/base.py(124):     def setup(self, request, *args, **kwargs):
0.34 /testbed/django/views/generic/base.py(132):     def dispatch(self, request, *args, **kwargs):
0.34 /testbed/django/views/generic/base.py(144):     def http_method_not_allowed(self, request, *args, **kwargs):
0.34 /testbed/django/views/generic/base.py(153):     def options(self, request, *args, **kwargs):
0.34 /testbed/django/views/generic/base.py(168):     def _allowed_methods(self):
0.34 /testbed/django/views/generic/base.py(172): class TemplateResponseMixin:
0.34 /testbed/django/views/generic/base.py(172): class TemplateResponseMixin:
0.34 /testbed/django/views/generic/base.py(173):     """A mixin that can be used to render a template."""
0.34 /testbed/django/views/generic/base.py(175):     template_name = None
0.34 /testbed/django/views/generic/base.py(176):     template_engine = None
0.34 /testbed/django/views/generic/base.py(177):     response_class = TemplateResponse
0.34 /testbed/django/views/generic/base.py(178):     content_type = None
0.34 /testbed/django/views/generic/base.py(180):     def render_to_response(self, context, **response_kwargs):
0.34 /testbed/django/views/generic/base.py(196):     def get_template_names(self):
0.34 /testbed/django/views/generic/base.py(210): class TemplateView(TemplateResponseMixin, ContextMixin, View):
0.34 /testbed/django/views/generic/base.py(210): class TemplateView(TemplateResponseMixin, ContextMixin, View):
0.34 /testbed/django/views/generic/base.py(211):     """
0.34 /testbed/django/views/generic/base.py(215):     def get(self, request, *args, **kwargs):
0.34 /testbed/django/views/generic/base.py(220): class RedirectView(View):
0.34 /testbed/django/views/generic/base.py(220): class RedirectView(View):
0.34 /testbed/django/views/generic/base.py(221):     """Provide a redirect on any GET request."""
0.34 /testbed/django/views/generic/base.py(223):     permanent = False
0.34 /testbed/django/views/generic/base.py(224):     url = None
0.34 /testbed/django/views/generic/base.py(225):     pattern_name = None
0.34 /testbed/django/views/generic/base.py(226):     query_string = False
0.34 /testbed/django/views/generic/base.py(228):     def get_redirect_url(self, *args, **kwargs):
0.34 /testbed/django/views/generic/base.py(246):     def get(self, request, *args, **kwargs):
0.34 /testbed/django/views/generic/base.py(259):     def head(self, request, *args, **kwargs):
0.34 /testbed/django/views/generic/base.py(262):     def post(self, request, *args, **kwargs):
0.34 /testbed/django/views/generic/base.py(265):     def options(self, request, *args, **kwargs):
0.34 /testbed/django/views/generic/base.py(268):     def delete(self, request, *args, **kwargs):
0.34 /testbed/django/views/generic/base.py(271):     def put(self, request, *args, **kwargs):
0.34 /testbed/django/views/generic/base.py(274):     def patch(self, request, *args, **kwargs):
Testing against Django installed in '/testbed/django'
0.55 /testbed/django/views/generic/base.py(82):         for key in initkwargs:
0.55 /testbed/django/views/generic/base.py(95):         def view(request, *args, **kwargs):
0.55 /testbed/django/views/generic/base.py(105):         view.view_class = cls
0.55 /testbed/django/views/generic/base.py(106):         view.view_initkwargs = initkwargs
0.55 /testbed/django/views/generic/base.py(111):         view.__doc__ = cls.__doc__
0.55 /testbed/django/views/generic/base.py(112):         view.__module__ = cls.__module__
0.55 /testbed/django/views/generic/base.py(113):         view.__annotations__ = cls.dispatch.__annotations__
0.55 /testbed/django/views/generic/base.py(116):         view.__dict__.update(cls.dispatch.__dict__)
0.55 /testbed/django/views/generic/base.py(119):         if cls.view_is_async:
0.55 /testbed/django/views/generic/base.py(64):         handlers = [
0.55 /testbed/django/views/generic/base.py(66):             for method in cls.http_method_names
0.55 /testbed/django/views/generic/base.py(64):         handlers = [
0.55 /testbed/django/views/generic/base.py(64):         handlers = [
0.55 /testbed/django/views/generic/base.py(66):             for method in cls.http_method_names
0.55 /testbed/django/views/generic/base.py(67):             if (method != "options" and hasattr(cls, method))
0.55 /testbed/django/views/generic/base.py(64):         handlers = [
0.55 /testbed/django/views/generic/base.py(66):             for method in cls.http_method_names
0.55 /testbed/django/views/generic/base.py(67):             if (method != "options" and hasattr(cls, method))
0.55 /testbed/django/views/generic/base.py(65):             getattr(cls, method)
0.55 /testbed/django/views/generic/base.py(64):         handlers = [
0.55 /testbed/django/views/generic/base.py(66):             for method in cls.http_method_names
0.55 /testbed/django/views/generic/base.py(67):             if (method != "options" and hasattr(cls, method))
0.55 /testbed/django/views/generic/base.py(64):         handlers = [
0.55 /testbed/django/views/generic/base.py(66):             for method in cls.http_method_names
0.55 /testbed/django/views/generic/base.py(67):             if (method != "options" and hasattr(cls, method))
0.55 /testbed/django/views/generic/base.py(64):         handlers = [
0.55 /testbed/django/views/generic/base.py(66):             for method in cls.http_method_names
0.55 /testbed/django/views/generic/base.py(67):             if (method != "options" and hasattr(cls, method))
0.55 /testbed/django/views/generic/base.py(64):         handlers = [
0.55 /testbed/django/views/generic/base.py(66):             for method in cls.http_method_names
0.55 /testbed/django/views/generic/base.py(67):             if (method != "options" and hasattr(cls, method))
0.55 /testbed/django/views/generic/base.py(64):         handlers = [
0.55 /testbed/django/views/generic/base.py(66):             for method in cls.http_method_names
0.55 /testbed/django/views/generic/base.py(67):             if (method != "options" and hasattr(cls, method))
0.55 /testbed/django/views/generic/base.py(64):         handlers = [
0.55 /testbed/django/views/generic/base.py(66):             for method in cls.http_method_names
0.55 /testbed/django/views/generic/base.py(67):             if (method != "options" and hasattr(cls, method))
0.55 test_get_request_to_post_only_view (test_coverup_django__django-16136.DemoViewTests)
Test that a GET request to a view with only an async "post" method ... ERROR

======================================================================
ERROR: test_get_request_to_post_only_view (test_coverup_django__django-16136.DemoViewTests)
Test that a GET request to a view with only an async "post" method
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/./tests/test_coverup_django__django-16136.py", line 24, in test_get_request_to_post_only_view
    response = self.client.get('/demo')
  File "/testbed/django/test/client.py", line 839, in get
    response = super().get(path, data=data, secure=secure, **extra)
  File "/testbed/django/test/client.py", line 427, in get
    return self.generic(
  File "/testbed/django/test/client.py", line 544, in generic
    return self.request(**r)
  File "/testbed/django/test/client.py", line 813, in request
    self.check_exception(response)
  File "/testbed/django/test/client.py", line 666, in check_exception
    raise exc_value
  File "/testbed/django/core/handlers/exception.py", line 55, in inner
    response = get_response(request)
  File "/testbed/django/core/handlers/base.py", line 197, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/asgiref/sync.py", line 262, in __call__
    return call_result.result()
  File "/opt/miniconda3/envs/testbed/lib/python3.9/concurrent/futures/_base.py", line 439, in result
    return self.__get_result()
  File "/opt/miniconda3/envs/testbed/lib/python3.9/concurrent/futures/_base.py", line 391, in __get_result
    raise self._exception
  File "/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/asgiref/sync.py", line 302, in main_wrap
    result = await awaitable
TypeError: object HttpResponseNotAllowed can't be used in 'await' expression

----------------------------------------------------------------------
Ran 1 test in 0.035s

FAILED (errors=1)
/testbed/django/views/generic/base.py(64):         handlers = [
0.55 /testbed/django/views/generic/base.py(69):         if not handlers:
0.55 /testbed/django/views/generic/base.py(71):         is_async = asyncio.iscoroutinefunction(handlers[0])
0.55 /testbed/django/views/generic/base.py(72):         if not all(asyncio.iscoroutinefunction(h) == is_async for h in handlers[1:]):
0.55 /testbed/django/views/generic/base.py(72):         if not all(asyncio.iscoroutinefunction(h) == is_async for h in handlers[1:]):
0.55 /testbed/django/views/generic/base.py(77):         return is_async
0.55 /testbed/django/views/generic/base.py(120):             view._is_coroutine = asyncio.coroutines._is_coroutine
0.55 /testbed/django/views/generic/base.py(122):         return view
Found 1 test(s).
Skipping setup of unused database(s): default, other.
System check identified no issues (0 silenced).
0.59 /testbed/django/views/generic/base.py(96):             self = cls(**initkwargs)
0.59 /testbed/django/views/generic/base.py(59):         for key, value in kwargs.items():
0.59 /testbed/django/views/generic/base.py(97):             self.setup(request, *args, **kwargs)
0.59 /testbed/django/views/generic/base.py(126):         if hasattr(self, "get") and not hasattr(self, "head"):
0.59 /testbed/django/views/generic/base.py(128):         self.request = request
0.59 /testbed/django/views/generic/base.py(129):         self.args = args
0.59 /testbed/django/views/generic/base.py(130):         self.kwargs = kwargs
0.59 /testbed/django/views/generic/base.py(98):             if not hasattr(self, "request"):
0.59 /testbed/django/views/generic/base.py(103):             return self.dispatch(request, *args, **kwargs)
0.59 /testbed/django/views/generic/base.py(136):         if request.method.lower() in self.http_method_names:
0.59 /testbed/django/views/generic/base.py(137):             handler = getattr(
0.59 /testbed/django/views/generic/base.py(138):                 self, request.method.lower(), self.http_method_not_allowed
0.59 /testbed/django/views/generic/base.py(137):             handler = getattr(
0.59 /testbed/django/views/generic/base.py(142):         return handler(request, *args, **kwargs)
0.59 /testbed/django/views/generic/base.py(145):         logger.warning(
0.59 /testbed/django/views/generic/base.py(146):             "Method Not Allowed (%s): %s",
0.59 /testbed/django/views/generic/base.py(147):             request.method,
0.59 /testbed/django/views/generic/base.py(148):             request.path,
0.59 /testbed/django/views/generic/base.py(149):             extra={"status_code": 405, "request": request},
0.59 /testbed/django/views/generic/base.py(145):         logger.warning(
0.59 /testbed/django/views/generic/base.py(151):         return HttpResponseNotAllowed(self._allowed_methods())
0.59 /testbed/django/views/generic/base.py(169):         return [m.upper() for m in self.http_method_names if hasattr(self, m)]
0.59 /testbed/django/views/generic/base.py(169):         return [m.upper() for m in self.http_method_names if hasattr(self, m)]
0.59 /testbed/django/views/generic/base.py(169):         return [m.upper() for m in self.http_method_names if hasattr(self, m)]
0.59 /testbed/django/views/generic/base.py(169):         return [m.upper() for m in self.http_method_names if hasattr(self, m)]
0.59 /testbed/django/views/generic/base.py(169):         return [m.upper() for m in self.http_method_names if hasattr(self, m)]
0.59 /testbed/django/views/generic/base.py(169):         return [m.upper() for m in self.http_method_names if hasattr(self, m)]
0.59 /testbed/django/views/generic/base.py(169):         return [m.upper() for m in self.http_method_names if hasattr(self, m)]
0.59 /testbed/django/views/generic/base.py(169):         return [m.upper() for m in self.http_method_names if hasattr(self, m)]
0.59 /testbed/django/views/generic/base.py(169):         return [m.upper() for m in self.http_method_names if hasattr(self, m)]
0.59 /testbed/django/views/generic/base.py(169):         return [m.upper() for m in self.http_method_names if hasattr(self, m)]
+ cat coverage.cover
{"/testbed/django/views/generic/base.py": {"1": 1, "2": 1, "4": 1, "5": 1, "12": 1, "13": 1, "14": 1, "15": 1, "17": 1, "20": 2, "35": 2, "172": 2, "210": 2, "220": 2, "26": 1, "28": 1, "29": 0, "30": 0, "31": 0, "32": 0, "41": 1, "52": 1, "62": 1, "63": 1, "79": 1, "80": 1, "124": 1, "132": 1, "144": 1, "153": 1, "168": 1, "59": 1, "60": 0, "64": 11, "66": 9, "69": 1, "70": 0, "71": 1, "72": 2, "73": 0, "74": 0, "77": 1, "67": 8, "65": 1, "82": 1, "83": 0, "84": 0, "85": 0, "86": 0, "88": 0, "89": 0, "90": 0, "92": 0, "95": 1, "105": 1, "106": 1, "111": 1, "112": 1, "113": 1, "116": 1, "119": 1, "120": 1, "122": 1, "96": 1, "97": 1, "98": 1, "99": 0, "100": 0, "101": 0, "103": 1, "126": 1, "127": 0, "128": 1, "129": 1, "130": 1, "136": 1, "137": 2, "138": 1, "141": 0, "142": 1, "145": 2, "146": 1, "147": 1, "148": 1, "149": 1, "151": 1, "155": 0, "156": 0, "157": 0, "159": 0, "161": 0, "164": 0, "166": 0, "162": 0, "169": 10, "175": 1, "176": 1, "177": 1, "178": 1, "180": 1, "196": 1, "187": 0, "188": 0, "189": 0, "190": 0, "191": 0, "192": 0, "193": 0, "201": 0, "202": 0, "203": 0, "207": 0, "215": 1, "216": 0, "217": 0, "223": 1, "224": 1, "225": 1, "226": 1, "228": 1, "246": 1, "259": 1, "262": 1, "265": 1, "268": 1, "271": 1, "274": 1, "234": 0, "235": 0, "236": 0, "237": 0, "239": 0, "241": 0, "242": 0, "243": 0, "244": 0, "247": 0, "248": 0, "249": 0, "250": 0, "252": 0, "254": 0, "255": 0, "257": 0, "260": 0, "263": 0, "266": 0, "269": 0, "272": 0, "275": 0}}
+ git checkout 19e6efa50b603af325e7f62058364f278596758f
Note: switching to '19e6efa50b603af325e7f62058364f278596758f'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at 19e6efa50b Fixed #34058 -- Changed sequence types when altering pre-Django 4.1 auto fields on PostgreSQL.
+ git apply /root/pre_state.patch
error: unrecognized input
