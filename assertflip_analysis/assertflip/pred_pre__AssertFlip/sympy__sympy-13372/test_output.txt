+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD 30379ea6e225e37833a764ac2da7b7fadf5fe374
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch master
nothing to commit, working tree clean
+ git show
commit 30379ea6e225e37833a764ac2da7b7fadf5fe374
Merge: 357a966d9e 3b61105831
Author: Chris Smith <smichr@gmail.com>
Date:   Sat Sep 30 07:56:08 2017 -0500

    Merge pull request #13357 from nilabja10201992/master
    
    convert expr.func is xyz to isinstance(expr,xyz)

+ git diff 30379ea6e225e37833a764ac2da7b7fadf5fe374
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Requirement already satisfied: mpmath>=0.19 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from sympy==1.1.2.dev0) (1.3.0)
Installing collected packages: sympy
  Attempting uninstall: sympy
    Found existing installation: sympy 1.1.2.dev0
    Uninstalling sympy-1.1.2.dev0:
      Successfully uninstalled sympy-1.1.2.dev0
  DEPRECATION: Legacy editable install of sympy==1.1.2.dev0 from file:///testbed (setup.py develop) is deprecated. pip 25.3 will enforce this behaviour change. A possible replacement is to add a pyproject.toml or enable --use-pep517, and use setuptools >= 64. If the resulting installation is not behaving as expected, try using --config-settings editable_mode=compat. Please consult the setuptools documentation for more information. Discussion can be found at https://github.com/pypa/pip/issues/11457
  Running setup.py develop for sympy
Successfully installed sympy
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git apply -v -
Checking patch sympy/polys/tests/test_coverup_sympy__sympy-13372.py...
Applied patch sympy/polys/tests/test_coverup_sympy__sympy-13372.py cleanly.
+ PYTHONWARNINGS=ignore::UserWarning,ignore::SyntaxWarning
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(sympy/core/evalf\.py)' bin/test -C --verbose sympy/polys/tests/test_coverup_sympy__sympy-13372.p
/testbed/sympy/core/basic.py:3: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
  from collections import Mapping, defaultdict
/testbed/sympy/core/containers.py:271: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
  class OrderedSet(collections.MutableSet):
/testbed/sympy/plotting/plot.py:28: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
  from collections import Callable
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(sympy/core/evalf\\.py)']
0.20 /testbed/sympy/core/evalf.py(1): """
0.20 /testbed/sympy/core/evalf.py(5): from __future__ import print_function, division
0.20 /testbed/sympy/core/evalf.py(7): import math
0.20 /testbed/sympy/core/evalf.py(9): import mpmath.libmp as libmp
0.20 /testbed/sympy/core/evalf.py(10): from mpmath import (
0.20 /testbed/sympy/core/evalf.py(12): from mpmath import inf as mpmath_inf
0.20 /testbed/sympy/core/evalf.py(13): from mpmath.libmp import (from_int, from_man_exp, from_rational, fhalf,
0.20 /testbed/sympy/core/evalf.py(18): from mpmath.libmp import bitcount as mpmath_bitcount
0.20 /testbed/sympy/core/evalf.py(19): from mpmath.libmp.backend import MPZ
0.20 /testbed/sympy/core/evalf.py(20): from mpmath.libmp.libmpc import _infs_nan
0.20 /testbed/sympy/core/evalf.py(21): from mpmath.libmp.libmpf import dps_to_prec, prec_to_dps
0.20 /testbed/sympy/core/evalf.py(22): from mpmath.libmp.gammazeta import mpf_bernoulli
0.20 /testbed/sympy/core/evalf.py(24): from .compatibility import SYMPY_INTS, range
0.20 /testbed/sympy/core/evalf.py(25): from .sympify import sympify
0.20 /testbed/sympy/core/evalf.py(26): from .singleton import S
0.20 /testbed/sympy/core/evalf.py(28): from sympy.utilities.iterables import is_sequence
0.22 /testbed/sympy/core/evalf.py(30): LG10 = math.log(10, 2)
0.22 /testbed/sympy/core/evalf.py(31): rnd = round_nearest
0.22 /testbed/sympy/core/evalf.py(34): def bitcount(n):
0.22 /testbed/sympy/core/evalf.py(42): INF = float(mpmath_inf)
0.22 /testbed/sympy/core/evalf.py(43): MINUS_INF = float(-mpmath_inf)
0.22 /testbed/sympy/core/evalf.py(46): DEFAULT_MAXPREC = 333
0.22 /testbed/sympy/core/evalf.py(49): class PrecisionExhausted(ArithmeticError):
0.22 /testbed/sympy/core/evalf.py(49): class PrecisionExhausted(ArithmeticError):
0.22 /testbed/sympy/core/evalf.py(50):     pass
0.22 /testbed/sympy/core/evalf.py(81): def fastlog(x):
0.23 /testbed/sympy/core/evalf.py(114): def pure_complex(v, or_real=False):
0.23 /testbed/sympy/core/evalf.py(141): def scaled_zero(mag, sign=1):
0.23 /testbed/sympy/core/evalf.py(179): def iszero(mpf, scaled=False):
0.23 /testbed/sympy/core/evalf.py(185): def complex_accuracy(result):
0.23 /testbed/sympy/core/evalf.py(212): def get_abs(expr, prec, options):
0.23 /testbed/sympy/core/evalf.py(232): def get_complex_part(expr, no, prec, options):
0.23 /testbed/sympy/core/evalf.py(246): def evalf_abs(expr, prec, options):
0.23 /testbed/sympy/core/evalf.py(250): def evalf_re(expr, prec, options):
0.23 /testbed/sympy/core/evalf.py(254): def evalf_im(expr, prec, options):
0.23 /testbed/sympy/core/evalf.py(258): def finalize_complex(re, im, prec):
0.23 /testbed/sympy/core/evalf.py(277): def chop_parts(value, prec):
0.23 /testbed/sympy/core/evalf.py(297): def check_target(expr, result, prec):
0.23 /testbed/sympy/core/evalf.py(305): def get_integer_part(expr, no, options, return_ints=False):
0.23 /testbed/sympy/core/evalf.py(388): def evalf_ceiling(expr, prec, options):
0.23 /testbed/sympy/core/evalf.py(392): def evalf_floor(expr, prec, options):
0.23 /testbed/sympy/core/evalf.py(402): def add_terms(terms, prec, target_prec):
0.23 /testbed/sympy/core/evalf.py(485): def evalf_add(v, prec, options):
0.23 /testbed/sympy/core/evalf.py(527): def evalf_mul(v, prec, options):
0.23 /testbed/sympy/core/evalf.py(641): def evalf_pow(v, prec, options):
0.23 /testbed/sympy/core/evalf.py(747): def evalf_trig(v, prec, options):
0.23 /testbed/sympy/core/evalf.py(808): def evalf_log(expr, prec, options):
0.23 /testbed/sympy/core/evalf.py(844): def evalf_atan(v, prec, options):
0.23 /testbed/sympy/core/evalf.py(854): def evalf_subs(prec, subs):
0.23 /testbed/sympy/core/evalf.py(865): def evalf_piecewise(expr, prec, options):
0.23 /testbed/sympy/core/evalf.py(882): def evalf_bernoulli(expr, prec, options):
0.23 /testbed/sympy/core/evalf.py(899): def as_mpmath(x, prec, options):
0.23 /testbed/sympy/core/evalf.py(915): def do_integral(expr, prec, options):
0.23 /testbed/sympy/core/evalf.py(1010): def evalf_integral(expr, prec, options):
0.23 /testbed/sympy/core/evalf.py(1036): def check_convergence(numer, denom, n):
0.23 /testbed/sympy/core/evalf.py(1074): def hypsum(expr, n, start, prec):
0.23 /testbed/sympy/core/evalf.py(1150): def evalf_prod(expr, prec, options):
0.23 /testbed/sympy/core/evalf.py(1159): def evalf_sum(expr, prec, options):
0.23 /testbed/sympy/core/evalf.py(1205): def evalf_symbol(x, prec, options):
0.23 /testbed/sympy/core/evalf.py(1222): evalf_table = None
0.23 /testbed/sympy/core/evalf.py(1225): def _create_evalf_table():
0.23 /testbed/sympy/core/evalf.py(1284): def evalf(x, prec, options):
0.23 /testbed/sympy/core/evalf.py(1335): class EvalfMixin(object):
0.23 /testbed/sympy/core/evalf.py(1335): class EvalfMixin(object):
0.23 /testbed/sympy/core/evalf.py(1336):     """Mixin class adding evalf capabililty."""
0.23 /testbed/sympy/core/evalf.py(1338):     __slots__ = []
0.23 /testbed/sympy/core/evalf.py(1340):     def evalf(self, n=15, subs=None, maxn=100, chop=False, strict=False, quad=None, verbose=False):
0.23 /testbed/sympy/core/evalf.py(1421):     n = evalf
0.23 /testbed/sympy/core/evalf.py(1423):     def _evalf(self, prec):
0.23 /testbed/sympy/core/evalf.py(1430):     def _eval_evalf(self, prec):
0.23 /testbed/sympy/core/evalf.py(1433):     def _to_mpmath(self, prec, allow_ints=True):
0.23 /testbed/sympy/core/evalf.py(1473): def N(x, n=15, **options):
0.89 /testbed/sympy/core/evalf.py(1227):     from sympy.functions.combinatorial.numbers import bernoulli
0.89 /testbed/sympy/core/evalf.py(1228):     from sympy.concrete.products import Product
0.89 /testbed/sympy/core/evalf.py(1229):     from sympy.concrete.summations import Sum
0.89 /testbed/sympy/core/evalf.py(1230):     from sympy.core.add import Add
0.89 /testbed/sympy/core/evalf.py(1231):     from sympy.core.mul import Mul
0.89 /testbed/sympy/core/evalf.py(1232):     from sympy.core.numbers import Exp1, Float, Half, ImaginaryUnit, Integer, NaN, NegativeOne, One, Pi, Rational, Zero
0.89 /testbed/sympy/core/evalf.py(1233):     from sympy.core.power import Pow
0.89 /testbed/sympy/core/evalf.py(1234):     from sympy.core.symbol import Dummy, Symbol
0.89 /testbed/sympy/core/evalf.py(1235):     from sympy.functions.elementary.complexes import Abs, im, re
0.89 /testbed/sympy/core/evalf.py(1236):     from sympy.functions.elementary.exponential import exp, log
0.89 /testbed/sympy/core/evalf.py(1237):     from sympy.functions.elementary.integers import ceiling, floor
0.89 /testbed/sympy/core/evalf.py(1238):     from sympy.functions.elementary.piecewise import Piecewise
0.89 /testbed/sympy/core/evalf.py(1239):     from sympy.functions.elementary.trigonometric import atan, cos, sin
0.89 /testbed/sympy/core/evalf.py(1240):     from sympy.integrals.integrals import Integral
0.89 /testbed/sympy/core/evalf.py(1242):         Symbol: evalf_symbol,
0.89 /testbed/sympy/core/evalf.py(1243):         Dummy: evalf_symbol,
0.89 /testbed/sympy/core/evalf.py(1244):         Float: lambda x, prec, options: (x._mpf_, None, prec, None),
0.89 /testbed/sympy/core/evalf.py(1245):         Rational: lambda x, prec, options: (from_rational(x.p, x.q, prec), None, prec, None),
0.89 /testbed/sympy/core/evalf.py(1246):         Integer: lambda x, prec, options: (from_int(x.p, prec), None, prec, None),
0.89 /testbed/sympy/core/evalf.py(1247):         Zero: lambda x, prec, options: (None, None, prec, None),
0.89 /testbed/sympy/core/evalf.py(1248):         One: lambda x, prec, options: (fone, None, prec, None),
0.89 /testbed/sympy/core/evalf.py(1249):         Half: lambda x, prec, options: (fhalf, None, prec, None),
0.89 /testbed/sympy/core/evalf.py(1250):         Pi: lambda x, prec, options: (mpf_pi(prec), None, prec, None),
0.89 /testbed/sympy/core/evalf.py(1251):         Exp1: lambda x, prec, options: (mpf_e(prec), None, prec, None),
0.89 /testbed/sympy/core/evalf.py(1252):         ImaginaryUnit: lambda x, prec, options: (None, fone, None, prec),
0.89 /testbed/sympy/core/evalf.py(1253):         NegativeOne: lambda x, prec, options: (fnone, None, prec, None),
0.89 /testbed/sympy/core/basic.py:3: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
  from collections import Mapping, defaultdict
/testbed/sympy/core/containers.py:271: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
  class OrderedSet(collections.MutableSet):
/testbed/sympy/plotting/plot.py:28: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
  from collections import Callable
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(sympy/core/evalf\\.py)']
0.17 /testbed/sympy/core/evalf.py(1): """
0.17 /testbed/sympy/core/evalf.py(5): from __future__ import print_function, division
0.17 /testbed/sympy/core/evalf.py(7): import math
0.17 /testbed/sympy/core/evalf.py(9): import mpmath.libmp as libmp
0.17 /testbed/sympy/core/evalf.py(10): from mpmath import (
0.17 /testbed/sympy/core/evalf.py(12): from mpmath import inf as mpmath_inf
0.17 /testbed/sympy/core/evalf.py(13): from mpmath.libmp import (from_int, from_man_exp, from_rational, fhalf,
0.17 /testbed/sympy/core/evalf.py(18): from mpmath.libmp import bitcount as mpmath_bitcount
0.17 /testbed/sympy/core/evalf.py(19): from mpmath.libmp.backend import MPZ
0.17 /testbed/sympy/core/evalf.py(20): from mpmath.libmp.libmpc import _infs_nan
0.17 /testbed/sympy/core/evalf.py(21): from mpmath.libmp.libmpf import dps_to_prec, prec_to_dps
0.17 /testbed/sympy/core/evalf.py(22): from mpmath.libmp.gammazeta import mpf_bernoulli
0.17 /testbed/sympy/core/evalf.py(24): from .compatibility import SYMPY_INTS, range
0.17 /testbed/sympy/core/evalf.py(25): from .sympify import sympify
0.17 /testbed/sympy/core/evalf.py(26): from .singleton import S
0.17 /testbed/sympy/core/evalf.py(28): from sympy.utilities.iterables import is_sequence
0.19 /testbed/sympy/core/evalf.py(30): LG10 = math.log(10, 2)
0.19 /testbed/sympy/core/evalf.py(31): rnd = round_nearest
0.19 /testbed/sympy/core/evalf.py(34): def bitcount(n):
0.19 /testbed/sympy/core/evalf.py(42): INF = float(mpmath_inf)
0.19 /testbed/sympy/core/evalf.py(43): MINUS_INF = float(-mpmath_inf)
0.19 /testbed/sympy/core/evalf.py(46): DEFAULT_MAXPREC = 333
0.19 /testbed/sympy/core/evalf.py(49): class PrecisionExhausted(ArithmeticError):
0.19 /testbed/sympy/core/evalf.py(49): class PrecisionExhausted(ArithmeticError):
0.19 /testbed/sympy/core/evalf.py(50):     pass
0.19 /testbed/sympy/core/evalf.py(81): def fastlog(x):
0.19 /testbed/sympy/core/evalf.py(114): def pure_complex(v, or_real=False):
0.19 /testbed/sympy/core/evalf.py(141): def scaled_zero(mag, sign=1):
0.19 /testbed/sympy/core/evalf.py(179): def iszero(mpf, scaled=False):
0.19 /testbed/sympy/core/evalf.py(185): def complex_accuracy(result):
0.19 /testbed/sympy/core/evalf.py(212): def get_abs(expr, prec, options):
0.19 /testbed/sympy/core/evalf.py(232): def get_complex_part(expr, no, prec, options):
0.19 /testbed/sympy/core/evalf.py(246): def evalf_abs(expr, prec, options):
0.19 /testbed/sympy/core/evalf.py(250): def evalf_re(expr, prec, options):
0.19 /testbed/sympy/core/evalf.py(254): def evalf_im(expr, prec, options):
0.19 /testbed/sympy/core/evalf.py(258): def finalize_complex(re, im, prec):
0.19 /testbed/sympy/core/evalf.py(277): def chop_parts(value, prec):
0.19 /testbed/sympy/core/evalf.py(297): def check_target(expr, result, prec):
0.19 /testbed/sympy/core/evalf.py(305): def get_integer_part(expr, no, options, return_ints=False):
0.19 /testbed/sympy/core/evalf.py(388): def evalf_ceiling(expr, prec, options):
0.19 /testbed/sympy/core/evalf.py(392): def evalf_floor(expr, prec, options):
0.19 /testbed/sympy/core/evalf.py(402): def add_terms(terms, prec, target_prec):
0.19 /testbed/sympy/core/evalf.py(485): def evalf_add(v, prec, options):
0.19 /testbed/sympy/core/evalf.py(527): def evalf_mul(v, prec, options):
0.19 /testbed/sympy/core/evalf.py(641): def evalf_pow(v, prec, options):
0.19 /testbed/sympy/core/evalf.py(747): def evalf_trig(v, prec, options):
0.19 /testbed/sympy/core/evalf.py(808): def evalf_log(expr, prec, options):
0.19 /testbed/sympy/core/evalf.py(844): def evalf_atan(v, prec, options):
0.19 /testbed/sympy/core/evalf.py(854): def evalf_subs(prec, subs):
0.19 /testbed/sympy/core/evalf.py(865): def evalf_piecewise(expr, prec, options):
0.19 /testbed/sympy/core/evalf.py(882): def evalf_bernoulli(expr, prec, options):
0.19 /testbed/sympy/core/evalf.py(899): def as_mpmath(x, prec, options):
0.19 /testbed/sympy/core/evalf.py(915): def do_integral(expr, prec, options):
0.19 /testbed/sympy/core/evalf.py(1010): def evalf_integral(expr, prec, options):
0.19 /testbed/sympy/core/evalf.py(1036): def check_convergence(numer, denom, n):
0.19 /testbed/sympy/core/evalf.py(1074): def hypsum(expr, n, start, prec):
0.19 /testbed/sympy/core/evalf.py(1150): def evalf_prod(expr, prec, options):
0.19 /testbed/sympy/core/evalf.py(1159): def evalf_sum(expr, prec, options):
0.19 /testbed/sympy/core/evalf.py(1205): def evalf_symbol(x, prec, options):
0.19 /testbed/sympy/core/evalf.py(1222): evalf_table = None
0.19 /testbed/sympy/core/evalf.py(1225): def _create_evalf_table():
0.19 /testbed/sympy/core/evalf.py(1284): def evalf(x, prec, options):
0.19 /testbed/sympy/core/evalf.py(1335): class EvalfMixin(object):
0.19 /testbed/sympy/core/evalf.py(1335): class EvalfMixin(object):
0.19 /testbed/sympy/core/evalf.py(1336):     """Mixin class adding evalf capabililty."""
0.19 /testbed/sympy/core/evalf.py(1338):     __slots__ = []
0.19 /testbed/sympy/core/evalf.py(1340):     def evalf(self, n=15, subs=None, maxn=100, chop=False, strict=False, quad=None, verbose=False):
0.19 /testbed/sympy/core/evalf.py(1421):     n = evalf
0.19 /testbed/sympy/core/evalf.py(1423):     def _evalf(self, prec):
0.19 /testbed/sympy/core/evalf.py(1430):     def _eval_evalf(self, prec):
0.19 /testbed/sympy/core/evalf.py(1433):     def _to_mpmath(self, prec, allow_ints=True):
0.19 /testbed/sympy/core/evalf.py(1473): def N(x, n=15, **options):
0.35 /testbed/sympy/core/evalf.py(1227):     from sympy.functions.combinatorial.numbers import bernoulli
0.35 /testbed/sympy/core/evalf.py(1228):     from sympy.concrete.products import Product
0.35 /testbed/sympy/core/evalf.py(1229):     from sympy.concrete.summations import Sum
0.35 /testbed/sympy/core/evalf.py(1230):     from sympy.core.add import Add
0.35 /testbed/sympy/core/evalf.py(1231):     from sympy.core.mul import Mul
0.35 /testbed/sympy/core/evalf.py(1232):     from sympy.core.numbers import Exp1, Float, Half, ImaginaryUnit, Integer, NaN, NegativeOne, One, Pi, Rational, Zero
0.35 /testbed/sympy/core/evalf.py(1233):     from sympy.core.power import Pow
0.35 /testbed/sympy/core/evalf.py(1234):     from sympy.core.symbol import Dummy, Symbol
0.35 /testbed/sympy/core/evalf.py(1235):     from sympy.functions.elementary.complexes import Abs, im, re
0.35 /testbed/sympy/core/evalf.py(1236):     from sympy.functions.elementary.exponential import exp, log
0.35 /testbed/sympy/core/evalf.py(1237):     from sympy.functions.elementary.integers import ceiling, floor
0.35 /testbed/sympy/core/evalf.py(1238):     from sympy.functions.elementary.piecewise import Piecewise
0.35 /testbed/sympy/core/evalf.py(1239):     from sympy.functions.elementary.trigonometric import atan, cos, sin
0.35 /testbed/sympy/core/evalf.py(1240):     from sympy.integrals.integrals import Integral
0.35 /testbed/sympy/core/evalf.py(1242):         Symbol: evalf_symbol,
0.35 /testbed/sympy/core/evalf.py(1243):         Dummy: evalf_symbol,
0.35 /testbed/sympy/core/evalf.py(1244):         Float: lambda x, prec, options: (x._mpf_, None, prec, None),
0.35 /testbed/sympy/core/evalf.py(1245):         Rational: lambda x, prec, options: (from_rational(x.p, x.q, prec), None, prec, None),
0.35 /testbed/sympy/core/evalf.py(1246):         Integer: lambda x, prec, options: (from_int(x.p, prec), None, prec, None),
0.35 /testbed/sympy/core/evalf.py(1247):         Zero: lambda x, prec, options: (None, None, prec, None),
0.35 /testbed/sympy/core/evalf.py(1248):         One: lambda x, prec, options: (fone, None, prec, None),
0.35 /testbed/sympy/core/evalf.py(1249):         Half: lambda x, prec, options: (fhalf, None, prec, None),
0.35 /testbed/sympy/core/evalf.py(1250):         Pi: lambda x, prec, options: (mpf_pi(prec), None, prec, None),
0.35 /testbed/sympy/core/evalf.py(1251):         Exp1: lambda x, prec, options: (mpf_e(prec), None, prec, None),
0.35 /testbed/sympy/core/evalf.py(1252):         ImaginaryUnit: lambda x, prec, options: (None, fone, None, prec),
0.35 /testbed/sympy/core/evalf.py(1253):         NegativeOne: lambda x, prec, options: (fnone, None, prec, None),
0.35 /testbed/sympy/core/evalf.py(1254):         NaN: lambda x, prec, options: (fnan, None, prec, None),
0.35 /testbed/sympy/core/evalf.py(1256):         exp: lambda x, prec, options: evalf_pow(
0.35 /testbed/sympy/core/evalf.py(1259):         cos: evalf_trig,
0.35 /testbed/sympy/core/evalf.py(1260):         sin: evalf_trig,
0.35 /testbed/sympy/core/evalf.py(1262):         Add: evalf_add,
0.35 /testbed/sympy/core/evalf.py(1263):         Mul: evalf_mul,
0.35 /testbed/sympy/core/evalf.py(1264):         Pow: evalf_pow,
0.35 /testbed/sympy/core/evalf.py(1266):         log: evalf_log,
0.35 /testbed/sympy/core/evalf.py(1267):         atan: evalf_atan,
0.35 /testbed/sympy/core/evalf.py(1268):         Abs: evalf_abs,
0.35 /testbed/sympy/core/evalf.py(1270):         re: evalf_re,
0.35 /testbed/sympy/core/evalf.py(1271):         im: evalf_im,
0.35 /testbed/sympy/core/evalf.py(1272):         floor: evalf_floor,
0.35 /testbed/sympy/core/evalf.py(1273):         ceiling: evalf_ceiling,
0.35 /testbed/sympy/core/evalf.py(1275):         Integral: evalf_integral,
0.35 /testbed/sympy/core/evalf.py(1276):         Sum: evalf_sum,
0.35 /testbed/sympy/core/evalf.py(1277):         Product: evalf_prod,
0.35 /testbed/sympy/core/evalf.py(1278):         Piecewise: evalf_piecewise,
0.35 /testbed/sympy/core/evalf.py(1280):         bernoulli: evalf_bernoulli,
0.35 /testbed/sympy/core/evalf.py(1241):     evalf_table = {
============================= test process starts ==============================
executable:         /opt/miniconda3/envs/testbed/bin/python3  (3.9.23-final-0) [CPython]
architecture:       64-bit
cache:              no
ground types:       python 
numpy:              None
random seed:        54836612
hash randomization: on (PYTHONHASHSEED=930738301)

sympy/polys/tests/test_coverup_sympy__sympy-13372.py[1] 
test_mul_max_evalf_unboundlocalerror 0.37 /testbed/sympy/core/evalf.py(1372):         from sympy import Float, Number
0.37 /testbed/sympy/core/evalf.py(1373):         n = n if n is not None else 15
0.37 /testbed/sympy/core/evalf.py(1375):         if subs and is_sequence(subs):
0.37 /testbed/sympy/core/evalf.py(1379):         if n == 1 and isinstance(self, Number):
0.37 /testbed/sympy/core/evalf.py(1386):         if not evalf_table:
0.37 /testbed/sympy/core/evalf.py(1388):         prec = dps_to_prec(n)
0.37 /testbed/sympy/core/evalf.py(1389):         options = {'maxprec': max(prec, int(maxn*LG10)), 'chop': chop,
0.37 /testbed/sympy/core/evalf.py(1390):                'strict': strict, 'verbose': verbose}
0.37 /testbed/sympy/core/evalf.py(1389):         options = {'maxprec': max(prec, int(maxn*LG10)), 'chop': chop,
0.37 /testbed/sympy/core/evalf.py(1391):         if subs is not None:
0.37 /testbed/sympy/core/evalf.py(1393):         if quad is not None:
0.37 /testbed/sympy/core/evalf.py(1395):         try:
0.37 /testbed/sympy/core/evalf.py(1396):             result = evalf(self, prec + 4, options)
0.37 /testbed/sympy/core/evalf.py(1285):     from sympy import re as re_, im as im_
0.37 /testbed/sympy/core/evalf.py(1286):     try:
0.37 /testbed/sympy/core/evalf.py(1287):         rf = evalf_table[x.func]
0.37 /testbed/sympy/core/evalf.py(1288):         r = rf(x, prec, options)
0.37 /testbed/sympy/core/evalf.py(528):     res = pure_complex(v)
0.37 /testbed/sympy/core/evalf.py(131):     h, t = v.as_coeff_Add()
0.37 /testbed/sympy/core/evalf.py(132):     if not t:
0.37 /testbed/sympy/core/evalf.py(136):     c, i = t.as_coeff_Mul()
0.37 /testbed/sympy/core/evalf.py(137):     if i is S.ImaginaryUnit:
0.37 /testbed/sympy/core/evalf.py(529):     if res:
0.37 /testbed/sympy/core/evalf.py(534):     args = list(v.args)
0.37 /testbed/sympy/core/evalf.py(537):     special = []
0.37 /testbed/sympy/core/evalf.py(538):     from sympy.core.numbers import Float
0.37 /testbed/sympy/core/evalf.py(539):     for arg in args:
0.37 /testbed/sympy/core/evalf.py(540):         arg = evalf(arg, prec, options)
0.37 /testbed/sympy/core/evalf.py(1285):     from sympy import re as re_, im as im_
0.37 /testbed/sympy/core/evalf.py(1286):     try:
0.37 /testbed/sympy/core/evalf.py(1287):         rf = evalf_table[x.func]
0.37 /testbed/sympy/core/evalf.py(1288):         r = rf(x, prec, options)
0.37 /testbed/sympy/core/evalf.py(1206):     val = options['subs'][x]
0.37 /testbed/sympy/core/evalf.py(1289):     except KeyError:
0.37 /testbed/sympy/core/evalf.py(1290):         try:
0.37 /testbed/sympy/core/evalf.py(1292):             if 'subs' in options:
0.37 /testbed/sympy/core/evalf.py(1294):             xe = x._eval_evalf(prec)
0.37 /testbed/sympy/core/evalf.py(1431):         return
0.37 /testbed/sympy/core/evalf.py(1295):             re, im = xe.as_real_imag()
0.37 /testbed/sympy/core/evalf.py(1311):         except AttributeError:
0.37 /testbed/sympy/core/evalf.py(1312):             raise NotImplementedError
0.37 /testbed/sympy/core/evalf.py(1289):     except KeyError:
0.37 /testbed/sympy/core/evalf.py(1397):         except NotImplementedError:
0.37 /testbed/sympy/core/evalf.py(1399):             v = self._eval_evalf(prec)
0.38 /testbed/sympy/core/evalf.py(1431):         return
0.38 /testbed/sympy/core/evalf.py(1431):         return
0.38 /testbed/sympy/core/evalf.py(1400):             if v is None:
0.38 /testbed/sympy/core/evalf.py(1402):             try:
0.38 /testbed/sympy/core/evalf.py(1404):                 result = evalf(v, prec, options)
0.38 /testbed/sympy/core/evalf.py(1285):     from sympy import re as re_, im as im_
0.38 /testbed/sympy/core/evalf.py(1286):     try:
0.38 /testbed/sympy/core/evalf.py(1287):         rf = evalf_table[x.func]
0.38 /testbed/sympy/core/evalf.py(1288):         r = rf(x, prec, options)
0.38 /testbed/sympy/core/evalf.py(528):     res = pure_complex(v)
0.38 /testbed/sympy/core/evalf.py(131):     h, t = v.as_coeff_Add()
0.38 /testbed/sympy/core/evalf.py(132):     if not t:
0.38 /testbed/sympy/core/evalf.py(136):     c, i = t.as_coeff_Mul()
0.38 /testbed/sympy/core/evalf.py(137):     if i is S.ImaginaryUnit:
0.38 /testbed/sympy/core/evalf.py(529):     if res:
0.38 /testbed/sympy/core/evalf.py(534):     args = list(v.args)
0.38 /testbed/sympy/core/evalf.py(537):     special = []
0.38 /testbed/sympy/core/evalf.py(538):     from sympy.core.numbers import Float
0.38 /testbed/sympy/core/evalf.py(539):     for arg in args:
0.38 /testbed/sympy/core/evalf.py(540):         arg = evalf(arg, prec, options)
0.38 /testbed/sympy/core/evalf.py(1285):     from sympy import re as re_, im as im_
0.38 /testbed/sympy/core/evalf.py(1286):     try:
0.38 /testbed/sympy/core/evalf.py(1287):         rf = evalf_table[x.func]
0.38 /testbed/sympy/core/evalf.py(1288):         r = rf(x, prec, options)
0.38 /testbed/sympy/core/evalf.py(1206):     val = options['subs'][x]
0.38 /testbed/sympy/core/evalf.py(1289):     except KeyError:
0.38 /testbed/sympy/core/evalf.py(1290):         try:
0.38 /testbed/sympy/core/evalf.py(1292):             if 'subs' in options:
0.38 /testbed/sympy/core/evalf.py(1294):             xe = x._eval_evalf(prec)
0.38 /testbed/sympy/core/evalf.py(1431):         return
0.38 /testbed/sympy/core/evalf.py(1295):             re, im = xe.as_real_imag()
0.38 /testbed/sympy/core/evalf.py(1311):         except AttributeError:
0.38 /testbed/sympy/core/evalf.py(1312):             raise NotImplementedError
0.38 /testbed/sympy/core/evalf.py(1289):     except KeyError:
0.38 /testbed/sympy/core/evalf.py(1405):             except NotImplementedError:
0.38 /testbed/sympy/core/evalf.py(1407):                 return v
0.39 /testbed/sympy/core/evalf.py(1372):         from sympy import Float, Number
0.39 /testbed/sympy/core/evalf.py(1373):         n = n if n is not None else 15
0.39 /testbed/sympy/core/evalf.py(1375):         if subs and is_sequence(subs):
0.39 /testbed/sympy/core/evalf.py(1379):         if n == 1 and isinstance(self, Number):
0.39 /testbed/sympy/core/evalf.py(1386):         if not evalf_table:
0.39 /testbed/sympy/core/evalf.py(1388):         prec = dps_to_prec(n)
0.39 /testbed/sympy/core/evalf.py(1389):         options = {'maxprec': max(prec, int(maxn*LG10)), 'chop': chop,
0.39 /testbed/sympy/core/evalf.py(1390):                'strict': strict, 'verbose': verbose}
0.39 /testbed/sympy/core/evalf.py(1389):         options = {'maxprec': max(prec, int(maxn*LG10)), 'chop': chop,
0.39 /testbed/sympy/core/evalf.py(1391):         if subs is not None:
0.39 /testbed/sympy/core/evalf.py(1393):         if quad is not None:
0.39 /testbed/sympy/core/evalf.py(1395):         try:
0.39 /testbed/sympy/core/evalf.py(1396):             result = evalf(self, prec + 4, options)
0.39 /testbed/sympy/core/evalf.py(1285):     from sympy import re as re_, im as im_
0.39 /testbed/sympy/core/evalf.py(1286):     try:
0.39 /testbed/sympy/core/evalf.py(1287):         rf = evalf_table[x.func]
0.39 /testbed/sympy/core/evalf.py(1288):         r = rf(x, prec, options)
0.39 /testbed/sympy/core/evalf.py(528):     res = pure_complex(v)
0.39 /testbed/sympy/core/evalf.py(131):     h, t = v.as_coeff_Add()
0.39 /testbed/sympy/core/evalf.py(132):     if not t:
0.39 /testbed/sympy/core/evalf.py(136):     c, i = t.as_coeff_Mul()
0.39 /testbed/sympy/core/evalf.py(137):     if i is S.ImaginaryUnit:
0.39 /testbed/sympy/core/evalf.py(529):     if res:
0.39 /testbed/sympy/core/evalf.py(534):     args = list(v.args)
0.39 /testbed/sympy/core/evalf.py(537):     special = []
0.39 /testbed/sympy/core/evalf.py(538):     from sympy.core.numbers import Float
0.39 /testbed/sympy/core/evalf.py(539):     for arg in args:
0.39 /testbed/sympy/core/evalf.py(540):         arg = evalf(arg, prec, options)
0.39 /testbed/sympy/core/evalf.py(1285):     from sympy import re as re_, im as im_
0.39 /testbed/sympy/core/evalf.py(1286):     try:
0.39 /testbed/sympy/core/evalf.py(1287):         rf = evalf_table[x.func]
0.39 /testbed/sympy/core/evalf.py(1289):     except KeyError:
0.39 /testbed/sympy/core/evalf.py(1290):         try:
0.39 /testbed/sympy/core/evalf.py(1292):             if 'subs' in options:
0.39 /testbed/sympy/core/evalf.py(1294):             xe = x._eval_evalf(prec)
0.39 /testbed/sympy/core/evalf.py(1431):         return
0.39 /testbed/sympy/core/evalf.py(1295):             re, im = xe.as_real_imag()
0.39 /testbed/sympy/core/evalf.py(1296):             if re.has(re_) or im.has(im_):
0.39 /testbed/sympy/core/evalf.py(1298):             if re == 0:
0.39 /testbed/sympy/core/evalf.py(1301):             elif re.is_number:
0.39 /testbed/sympy/core/evalf.py(1304):             if im == 0:
0.39 /testbed/sympy/core/evalf.py(1305):                 im = None
0.39 /testbed/sympy/core/evalf.py(1306):                 imprec = None
0.39 /testbed/sympy/core/evalf.py(1310):             r = re, im, reprec, imprec
0.39 /testbed/sympy/core/evalf.py(1311):         except AttributeError:
0.39 /testbed/sympy/core/evalf.py(1289):     except KeyError:
0.39 /testbed/sympy/core/evalf.py(1397):         except NotImplementedError:
E                                    [FAIL]


________________________________________________________________________________
 sympy/polys/tests/test_coverup_sympy__sympy-13372.py:test_mul_max_evalf_unboundlocalerror 
  File "/testbed/sympy/polys/tests/test_coverup_sympy__sympy-13372.py", line 14, in test_mul_max_evalf_unboundlocalerror
    result2 = expr2.evalf()
  File "/testbed/sympy/core/evalf.py", line 1396, in evalf
    result = evalf(self, prec + 4, options)
  File "/testbed/sympy/core/evalf.py", line 1288, in evalf
    r = rf(x, prec, options)
  File "/testbed/sympy/core/evalf.py", line 540, in evalf_mul
    arg = evalf(arg, prec, options)
  File "/testbed/sympy/core/evalf.py", line 1310, in evalf
    r = re, im, reprec, imprec
UnboundLocalError: local variable 'reprec' referenced before assignment

=========== tests finished: 0 passed, 1 exceptions, in 0.03 seconds ============
DO *NOT* COMMIT!
/testbed/sympy/core/evalf.py(1254):         NaN: lambda x, prec, options: (fnan, None, prec, None),
0.89 /testbed/sympy/core/evalf.py(1256):         exp: lambda x, prec, options: evalf_pow(
0.89 /testbed/sympy/core/evalf.py(1259):         cos: evalf_trig,
0.89 /testbed/sympy/core/evalf.py(1260):         sin: evalf_trig,
0.89 /testbed/sympy/core/evalf.py(1262):         Add: evalf_add,
0.89 /testbed/sympy/core/evalf.py(1263):         Mul: evalf_mul,
0.89 /testbed/sympy/core/evalf.py(1264):         Pow: evalf_pow,
0.89 /testbed/sympy/core/evalf.py(1266):         log: evalf_log,
0.89 /testbed/sympy/core/evalf.py(1267):         atan: evalf_atan,
0.89 /testbed/sympy/core/evalf.py(1268):         Abs: evalf_abs,
0.89 /testbed/sympy/core/evalf.py(1270):         re: evalf_re,
0.89 /testbed/sympy/core/evalf.py(1271):         im: evalf_im,
0.89 /testbed/sympy/core/evalf.py(1272):         floor: evalf_floor,
0.89 /testbed/sympy/core/evalf.py(1273):         ceiling: evalf_ceiling,
0.89 /testbed/sympy/core/evalf.py(1275):         Integral: evalf_integral,
0.89 /testbed/sympy/core/evalf.py(1276):         Sum: evalf_sum,
0.89 /testbed/sympy/core/evalf.py(1277):         Product: evalf_prod,
0.89 /testbed/sympy/core/evalf.py(1278):         Piecewise: evalf_piecewise,
0.89 /testbed/sympy/core/evalf.py(1280):         bernoulli: evalf_bernoulli,
0.89 /testbed/sympy/core/evalf.py(1241):     evalf_table = {
+ cat coverage.cover
{"/testbed/sympy/core/evalf.py": {"5": 1, "7": 1, "9": 1, "10": 1, "12": 1, "13": 1, "18": 1, "19": 1, "20": 1, "21": 1, "22": 1, "24": 1, "25": 1, "26": 1, "28": 1, "30": 1, "31": 1, "34": 1, "42": 1, "43": 1, "46": 1, "49": 2, "81": 1, "114": 1, "141": 1, "179": 1, "185": 1, "212": 1, "232": 1, "246": 1, "250": 1, "254": 1, "258": 1, "277": 1, "297": 1, "305": 1, "388": 1, "392": 1, "402": 1, "485": 1, "527": 1, "641": 1, "747": 1, "808": 1, "844": 1, "854": 1, "865": 1, "882": 1, "899": 1, "915": 1, "1010": 1, "1036": 1, "1074": 1, "1150": 1, "1159": 1, "1205": 1, "1222": 1, "1225": 1, "1284": 1, "1335": 2, "1473": 1, "37": 0, "50": 1, "109": 0, "110": 0, "111": 0, "131": 3, "132": 3, "133": 0, "134": 0, "135": 0, "136": 3, "137": 3, "138": 0, "166": 0, "167": 0, "168": 0, "169": 0, "170": 0, "171": 0, "172": 0, "173": 0, "174": 0, "176": 0, "180": 0, "181": 0, "182": 0, "198": 0, "199": 0, "200": 0, "201": 0, "202": 0, "203": 0, "204": 0, "205": 0, "206": 0, "207": 0, "208": 0, "209": 0, "213": 0, "215": 0, "216": 0, "217": 0, "218": 0, "219": 0, "220": 0, "221": 0, "223": 0, "224": 0, "225": 0, "226": 0, "227": 0, "229": 0, "234": 0, "235": 0, "237": 0, "238": 0, "240": 0, "241": 0, "242": 0, "243": 0, "247": 0, "251": 0, "255": 0, "259": 0, "260": 0, "261": 0, "262": 0, "263": 0, "264": 0, "266": 0, "267": 0, "268": 0, "269": 0, "270": 0, "272": 0, "273": 0, "274": 0, "281": 0, "283": 0, "284": 0, "285": 0, "286": 0, "288": 0, "289": 0, "290": 0, "291": 0, "292": 0, "293": 0, "294": 0, "298": 0, "299": 0, "300": 0, "302": 0, "312": 0, "314": 0, "315": 0, "319": 0, "320": 0, "321": 0, "322": 0, "323": 0, "324": 0, "327": 0, "329": 0, "331": 0, "333": 0, "332": 0, "338": 0, "376": 0, "378": 0, "379": 0, "380": 0, "381": 0, "383": 0, "384": 0, "385": 0, "339": 0, "340": 0, "341": 0, "342": 0, "343": 0, "347": 0, "348": 0, "349": 0, "350": 0, "351": 0, "352": 0, "353": 0, "354": 0, "355": 0, "356": 0, "357": 0, "358": 0, "359": 0, "360": 0, "361": 0, "362": 0, "364": 0, "365": 0, "366": 0, "367": 0, "368": 0, "369": 0, "370": 0, "371": 0, "372": 0, "373": 0, "374": 0, "389": 0, "393": 0, "425": 0, "426": 0, "427": 0, "428": 0, "429": 0, "432": 0, "433": 0, "434": 0, "435": 0, "436": 0, "437": 0, "438": 0, "439": 0, "440": 0, "441": 0, "443": 0, "444": 0, "446": 0, "447": 0, "448": 0, "449": 0, "450": 0, "451": 0, "452": 0, "455": 0, "456": 0, "457": 0, "458": 0, "459": 0, "461": 0, "463": 0, "465": 0, "466": 0, "467": 0, "469": 0, "470": 0, "471": 0, "472": 0, "473": 0, "474": 0, "475": 0, "477": 0, "478": 0, "479": 0, "480": 0, "481": 0, "482": 0, "486": 0, "487": 0, "488": 0, "489": 0, "490": 0, "491": 0, "493": 0, "495": 0, "496": 0, "498": 0, "500": 0, "501": 0, "502": 0, "503": 0, "504": 0, "505": 0, "506": 0, "507": 0, "508": 0, "509": 0, "511": 0, "512": 0, "514": 0, "515": 0, "516": 0, "517": 0, "519": 0, "520": 0, "521": 0, "522": 0, "523": 0, "524": 0, "528": 3, "529": 3, "531": 0, "532": 0, "533": 0, "534": 3, "537": 3, "538": 3, "539": 3, "540": 3, "541": 0, "542": 0, "543": 0, "544": 0, "545": 0, "546": 0, "547": 0, "548": 0, "549": 0, "555": 0, "558": 0, "561": 0, "567": 0, "568": 0, "569": 0, "570": 0, "572": 0, "573": 0, "574": 0, "575": 0, "576": 0, "577": 0, "578": 0, "579": 0, "580": 0, "581": 0, "582": 0, "583": 0, "584": 0, "585": 0, "586": 0, "588": 0, "589": 0, "590": 0, "591": 0, "592": 0, "593": 0, "594": 0, "595": 0, "596": 0, "597": 0, "598": 0, "599": 0, "601": 0, "602": 0, "604": 0, "607": 0, "609": 0, "610": 0, "613": 0, "614": 0, "615": 0, "616": 0, "617": 0, "618": 0, "620": 0, "623": 0, "624": 0, "626": 0, "627": 0, "628": 0, "629": 0, "630": 0, "631": 0, "632": 0, "633": 0, "634": 0, "636": 0, "637": 0, "638": 0, "643": 0, "644": 0, "649": 0, "650": 0, "652": 0, "653": 0, "656": 0, "657": 0, "659": 0, "660": 0, "662": 0, "663": 0, "664": 0, "665": 0, "666": 0, "667": 0, "668": 0, "669": 0, "670": 0, "671": 0, "672": 0, "674": 0, "675": 0, "677": 0, "679": 0, "682": 0, "683": 0, "685": 0, "686": 0, "687": 0, "688": 0, "689": 0, "691": 0, "692": 0, "694": 0, "698": 0, "699": 0, "701": 0, "702": 0, "704": 0, "707": 0, "708": 0, "709": 0, "712": 0, "713": 0, "714": 0, "715": 0, "716": 0, "718": 0, "720": 0, "721": 0, "724": 0, "725": 0, "726": 0, "727": 0, "728": 0, "730": 0, "731": 0, "732": 0, "734": 0, "735": 0, "736": 0, "739": 0, "753": 0, "754": 0, "755": 0, "756": 0, "757": 0, "759": 0, "760": 0, "763": 0, "764": 0, "765": 0, "766": 0, "767": 0, "768": 0, "769": 0, "770": 0, "771": 0, "772": 0, "773": 0, "775": 0, "778": 0, "782": 0, "783": 0, "785": 0, "786": 0, "787": 0, "791": 0, "792": 0, "793": 0, "794": 0, "795": 0, "796": 0, "797": 0, "798": 0, "799": 0, "800": 0, "801": 0, "802": 0, "803": 0, "805": 0, "809": 0, "810": 0, "811": 0, "812": 0, "813": 0, "814": 0, "815": 0, "817": 0, "819": 0, "820": 0, "821": 0, "822": 0, "824": 0, "826": 0, "827": 0, "828": 0, "830": 0, "831": 0, "832": 0, "834": 0, "836": 0, "838": 0, "839": 0, "841": 0, "845": 0, "846": 0, "847": 0, "848": 0, "849": 0, "850": 0, "851": 0, "856": 0, "857": 0, "858": 0, "859": 0, "860": 0, "861": 0, "862": 0, "866": 0, "867": 0, "868": 0, "869": 0, "870": 0, "871": 0, "872": 0, "873": 0, "874": 0, "875": 0, "876": 0, "879": 0, "883": 0, "884": 0, "885": 0, "886": 0, "887": 0, "888": 0, "889": 0, "890": 0, "900": 0, "901": 0, "902": 0, "903": 0, "904": 0, "905": 0, "906": 0, "907": 0, "909": 0, "910": 0, "911": 0, "912": 0, "916": 0, "917": 0, "918": 0, "919": 0, "920": 0, "925": 0, "926": 0, "927": 0, "928": 0, "930": 0, "931": 0, "933": 0, "934": 0, "935": 0, "943": 0, "945": 0, "946": 0, "947": 0, "949": 0, "962": 0, "963": 0, "964": 0, "965": 0, "966": 0, "967": 0, "968": 0, "969": 0, "970": 0, "972": 0, "973": 0, "975": 0, "977": 0, "978": 0, "980": 0, "982": 0, "983": 0, "984": 0, "985": 0, "986": 0, "987": 0, "989": 0, "990": 0, "992": 0, "994": 0, "995": 0, "996": 0, "997": 0, "998": 0, "999": 0, "1001": 0, "1002": 0, "1004": 0, "1006": 0, "1007": 0, "950": 0, "952": 0, "953": 0, "955": 0, "956": 0, "958": 0, "959": 0, "960": 0, "1011": 0, "1012": 0, "1013": 0, "1014": 0, "1015": 0, "1016": 0, "1018": 0, "1019": 0, "1020": 0, "1021": 0, "1022": 0, "1023": 0, "1024": 0, "1028": 0, "1030": 0, "1031": 0, "1032": 0, "1033": 0, "1056": 0, "1057": 0, "1058": 0, "1059": 0, "1060": 0, "1061": 0, "1062": 0, "1063": 0, "1064": 0, "1065": 0, "1066": 0, "1067": 0, "1068": 0, "1069": 0, "1070": 0, "1071": 0, "1081": 0, "1083": 0, "1084": 0, "1086": 0, "1087": 0, "1088": 0, "1089": 0, "1090": 0, "1091": 0, "1093": 0, "1094": 0, "1096": 0, "1098": 0, "1099": 0, "1101": 0, "1102": 0, "1103": 0, "1106": 0, "1107": 0, "1108": 0, "1109": 0, "1110": 0, "1111": 0, "1112": 0, "1113": 0, "1114": 0, "1115": 0, "1117": 0, "1118": 0, "1119": 0, "1120": 0, "1121": 0, "1123": 0, "1124": 0, "1129": 0, "1130": 0, "1132": 0, "1139": 0, "1140": 0, "1141": 0, "1142": 0, "1143": 0, "1144": 0, "1145": 0, "1147": 0, "1133": 0, "1134": 0, "1135": 0, "1136": 0, "1137": 0, "1151": 0, "1152": 0, "1153": 0, "1155": 0, "1156": 0, "1160": 0, "1161": 0, "1162": 0, "1163": 0, "1164": 0, "1165": 0, "1166": 0, "1167": 0, "1168": 0, "1169": 0, "1170": 0, "1171": 0, "1172": 0, "1173": 0, "1175": 0, "1176": 0, "1177": 0, "1178": 0, "1179": 0, "1180": 0, "1182": 0, "1183": 0, "1184": 0, "1185": 0, "1186": 0, "1187": 0, "1188": 0, "1189": 0, "1190": 0, "1191": 0, "1192": 0, "1193": 0, "1194": 0, "1195": 0, "1196": 0, "1206": 2, "1207": 0, "1208": 0, "1209": 0, "1210": 0, "1212": 0, "1213": 0, "1214": 0, "1215": 0, "1216": 0, "1217": 0, "1218": 0, "1219": 0, "1220": 0, "1227": 1, "1228": 1, "1229": 1, "1230": 1, "1231": 1, "1232": 1, "1233": 1, "1234": 1, "1235": 1, "1236": 1, "1237": 1, "1238": 1, "1239": 1, "1240": 1, "1242": 1, "1243": 1, "1244": 1, "1245": 1, "1246": 1, "1247": 1, "1248": 1, "1249": 1, "1250": 1, "1251": 1, "1252": 1, "1253": 1, "1254": 1, "1256": 1, "1259": 1, "1260": 1, "1262": 1, "1263": 1, "1264": 1, "1266": 1, "1267": 1, "1268": 1, "1270": 1, "1271": 1, "1272": 1, "1273": 1, "1275": 1, "1276": 1, "1277": 1, "1278": 1, "1280": 1, "1241": 1, "1257": 0, "1285": 6, "1286": 6, "1287": 6, "1288": 5, "1289": 6, "1290": 3, "1292": 3, "1293": 0, "1294": 3, "1295": 3, "1296": 1, "1297": 0, "1298": 1, "1299": 0, "1300": 0, "1301": 1, "1302": 0, "1303": 0, "1304": 1, "1305": 1, "1306": 1, "1307": 0, "1308": 0, "1309": 0, "1310": 1, "1311": 3, "1312": 2, "1313": 0, "1314": 0, "1315": 0, "1316": 0, "1317": 0, "1318": 0, "1319": 0, "1320": 0, "1321": 0, "1326": 0, "1327": 0, "1328": 0, "1329": 0, "1330": 0, "1331": 0, "1332": 0, "1338": 1, "1340": 1, "1421": 1, "1423": 1, "1430": 1, "1433": 1, "1372": 2, "1373": 2, "1375": 2, "1376": 0, "1379": 2, "1380": 0, "1381": 0, "1382": 0, "1383": 0, "1384": 0, "1386": 2, "1387": 0, "1388": 2, "1389": 4, "1390": 2, "1391": 2, "1392": 0, "1393": 2, "1394": 0, "1395": 2, "1396": 2, "1397": 2, "1399": 1, "1400": 1, "1401": 0, "1402": 1, "1404": 1, "1405": 1, "1407": 1, "1408": 0, "1409": 0, "1410": 0, "1411": 0, "1413": 0, "1414": 0, "1415": 0, "1416": 0, "1417": 0, "1419": 0, "1425": 0, "1426": 0, "1427": 0, "1428": 0, "1431": 5, "1435": 0, "1436": 0, "1437": 0, "1438": 0, "1439": 0, "1440": 0, "1441": 0, "1442": 0, "1443": 0, "1444": 0, "1445": 0, "1446": 0, "1447": 0, "1449": 0, "1450": 0, "1451": 0, "1452": 0, "1453": 0, "1454": 0, "1455": 0, "1457": 0, "1458": 0, "1459": 0, "1460": 0, "1461": 0, "1463": 0, "1464": 0, "1465": 0, "1466": 0, "1467": 0, "1469": 0, "1470": 0, "1491": 0}}
{"/testbed/sympy/core/evalf.py": {"5": 1, "7": 1, "9": 1, "10": 1, "12": 1, "13": 1, "18": 1, "19": 1, "20": 1, "21": 1, "22": 1, "24": 1, "25": 1, "26": 1, "28": 1, "30": 1, "31": 1, "34": 1, "42": 1, "43": 1, "46": 1, "49": 2, "81": 1, "114": 1, "141": 1, "179": 1, "185": 1, "212": 1, "232": 1, "246": 1, "250": 1, "254": 1, "258": 1, "277": 1, "297": 1, "305": 1, "388": 1, "392": 1, "402": 1, "485": 1, "527": 1, "641": 1, "747": 1, "808": 1, "844": 1, "854": 1, "865": 1, "882": 1, "899": 1, "915": 1, "1010": 1, "1036": 1, "1074": 1, "1150": 1, "1159": 1, "1205": 1, "1222": 1, "1225": 1, "1284": 1, "1335": 2, "1473": 1, "37": 0, "50": 1, "109": 0, "110": 0, "111": 0, "131": 0, "132": 0, "133": 0, "134": 0, "135": 0, "136": 0, "137": 0, "138": 0, "166": 0, "167": 0, "168": 0, "169": 0, "170": 0, "171": 0, "172": 0, "173": 0, "174": 0, "176": 0, "180": 0, "181": 0, "182": 0, "198": 0, "199": 0, "200": 0, "201": 0, "202": 0, "203": 0, "204": 0, "205": 0, "206": 0, "207": 0, "208": 0, "209": 0, "213": 0, "215": 0, "216": 0, "217": 0, "218": 0, "219": 0, "220": 0, "221": 0, "223": 0, "224": 0, "225": 0, "226": 0, "227": 0, "229": 0, "234": 0, "235": 0, "237": 0, "238": 0, "240": 0, "241": 0, "242": 0, "243": 0, "247": 0, "251": 0, "255": 0, "259": 0, "260": 0, "261": 0, "262": 0, "263": 0, "264": 0, "266": 0, "267": 0, "268": 0, "269": 0, "270": 0, "272": 0, "273": 0, "274": 0, "281": 0, "283": 0, "284": 0, "285": 0, "286": 0, "288": 0, "289": 0, "290": 0, "291": 0, "292": 0, "293": 0, "294": 0, "298": 0, "299": 0, "300": 0, "302": 0, "312": 0, "314": 0, "315": 0, "319": 0, "320": 0, "321": 0, "322": 0, "323": 0, "324": 0, "327": 0, "329": 0, "331": 0, "333": 0, "332": 0, "338": 0, "376": 0, "378": 0, "379": 0, "380": 0, "381": 0, "383": 0, "384": 0, "385": 0, "339": 0, "340": 0, "341": 0, "342": 0, "343": 0, "347": 0, "348": 0, "349": 0, "350": 0, "351": 0, "352": 0, "353": 0, "354": 0, "355": 0, "356": 0, "357": 0, "358": 0, "359": 0, "360": 0, "361": 0, "362": 0, "364": 0, "365": 0, "366": 0, "367": 0, "368": 0, "369": 0, "370": 0, "371": 0, "372": 0, "373": 0, "374": 0, "389": 0, "393": 0, "425": 0, "426": 0, "427": 0, "428": 0, "429": 0, "432": 0, "433": 0, "434": 0, "435": 0, "436": 0, "437": 0, "438": 0, "439": 0, "440": 0, "441": 0, "443": 0, "444": 0, "446": 0, "447": 0, "448": 0, "449": 0, "450": 0, "451": 0, "452": 0, "455": 0, "456": 0, "457": 0, "458": 0, "459": 0, "461": 0, "463": 0, "465": 0, "466": 0, "467": 0, "469": 0, "470": 0, "471": 0, "472": 0, "473": 0, "474": 0, "475": 0, "477": 0, "478": 0, "479": 0, "480": 0, "481": 0, "482": 0, "486": 0, "487": 0, "488": 0, "489": 0, "490": 0, "491": 0, "493": 0, "495": 0, "496": 0, "498": 0, "500": 0, "501": 0, "502": 0, "503": 0, "504": 0, "505": 0, "506": 0, "507": 0, "508": 0, "509": 0, "511": 0, "512": 0, "514": 0, "515": 0, "516": 0, "517": 0, "519": 0, "520": 0, "521": 0, "522": 0, "523": 0, "524": 0, "528": 0, "529": 0, "531": 0, "532": 0, "533": 0, "534": 0, "537": 0, "538": 0, "539": 0, "540": 0, "541": 0, "542": 0, "543": 0, "544": 0, "545": 0, "546": 0, "547": 0, "548": 0, "549": 0, "555": 0, "558": 0, "561": 0, "567": 0, "568": 0, "569": 0, "570": 0, "572": 0, "573": 0, "574": 0, "575": 0, "576": 0, "577": 0, "578": 0, "579": 0, "580": 0, "581": 0, "582": 0, "583": 0, "584": 0, "585": 0, "586": 0, "588": 0, "589": 0, "590": 0, "591": 0, "592": 0, "593": 0, "594": 0, "595": 0, "596": 0, "597": 0, "598": 0, "599": 0, "601": 0, "602": 0, "604": 0, "607": 0, "609": 0, "610": 0, "613": 0, "614": 0, "615": 0, "616": 0, "617": 0, "618": 0, "620": 0, "623": 0, "624": 0, "626": 0, "627": 0, "628": 0, "629": 0, "630": 0, "631": 0, "632": 0, "633": 0, "634": 0, "636": 0, "637": 0, "638": 0, "643": 0, "644": 0, "649": 0, "650": 0, "652": 0, "653": 0, "656": 0, "657": 0, "659": 0, "660": 0, "662": 0, "663": 0, "664": 0, "665": 0, "666": 0, "667": 0, "668": 0, "669": 0, "670": 0, "671": 0, "672": 0, "674": 0, "675": 0, "677": 0, "679": 0, "682": 0, "683": 0, "685": 0, "686": 0, "687": 0, "688": 0, "689": 0, "691": 0, "692": 0, "694": 0, "698": 0, "699": 0, "701": 0, "702": 0, "704": 0, "707": 0, "708": 0, "709": 0, "712": 0, "713": 0, "714": 0, "715": 0, "716": 0, "718": 0, "720": 0, "721": 0, "724": 0, "725": 0, "726": 0, "727": 0, "728": 0, "730": 0, "731": 0, "732": 0, "734": 0, "735": 0, "736": 0, "739": 0, "753": 0, "754": 0, "755": 0, "756": 0, "757": 0, "759": 0, "760": 0, "763": 0, "764": 0, "765": 0, "766": 0, "767": 0, "768": 0, "769": 0, "770": 0, "771": 0, "772": 0, "773": 0, "775": 0, "778": 0, "782": 0, "783": 0, "785": 0, "786": 0, "787": 0, "791": 0, "792": 0, "793": 0, "794": 0, "795": 0, "796": 0, "797": 0, "798": 0, "799": 0, "800": 0, "801": 0, "802": 0, "803": 0, "805": 0, "809": 0, "810": 0, "811": 0, "812": 0, "813": 0, "814": 0, "815": 0, "817": 0, "819": 0, "820": 0, "821": 0, "822": 0, "824": 0, "826": 0, "827": 0, "828": 0, "830": 0, "831": 0, "832": 0, "834": 0, "836": 0, "838": 0, "839": 0, "841": 0, "845": 0, "846": 0, "847": 0, "848": 0, "849": 0, "850": 0, "851": 0, "856": 0, "857": 0, "858": 0, "859": 0, "860": 0, "861": 0, "862": 0, "866": 0, "867": 0, "868": 0, "869": 0, "870": 0, "871": 0, "872": 0, "873": 0, "874": 0, "875": 0, "876": 0, "879": 0, "883": 0, "884": 0, "885": 0, "886": 0, "887": 0, "888": 0, "889": 0, "890": 0, "900": 0, "901": 0, "902": 0, "903": 0, "904": 0, "905": 0, "906": 0, "907": 0, "909": 0, "910": 0, "911": 0, "912": 0, "916": 0, "917": 0, "918": 0, "919": 0, "920": 0, "925": 0, "926": 0, "927": 0, "928": 0, "930": 0, "931": 0, "933": 0, "934": 0, "935": 0, "943": 0, "945": 0, "946": 0, "947": 0, "949": 0, "962": 0, "963": 0, "964": 0, "965": 0, "966": 0, "967": 0, "968": 0, "969": 0, "970": 0, "972": 0, "973": 0, "975": 0, "977": 0, "978": 0, "980": 0, "982": 0, "983": 0, "984": 0, "985": 0, "986": 0, "987": 0, "989": 0, "990": 0, "992": 0, "994": 0, "995": 0, "996": 0, "997": 0, "998": 0, "999": 0, "1001": 0, "1002": 0, "1004": 0, "1006": 0, "1007": 0, "950": 0, "952": 0, "953": 0, "955": 0, "956": 0, "958": 0, "959": 0, "960": 0, "1011": 0, "1012": 0, "1013": 0, "1014": 0, "1015": 0, "1016": 0, "1018": 0, "1019": 0, "1020": 0, "1021": 0, "1022": 0, "1023": 0, "1024": 0, "1028": 0, "1030": 0, "1031": 0, "1032": 0, "1033": 0, "1056": 0, "1057": 0, "1058": 0, "1059": 0, "1060": 0, "1061": 0, "1062": 0, "1063": 0, "1064": 0, "1065": 0, "1066": 0, "1067": 0, "1068": 0, "1069": 0, "1070": 0, "1071": 0, "1081": 0, "1083": 0, "1084": 0, "1086": 0, "1087": 0, "1088": 0, "1089": 0, "1090": 0, "1091": 0, "1093": 0, "1094": 0, "1096": 0, "1098": 0, "1099": 0, "1101": 0, "1102": 0, "1103": 0, "1106": 0, "1107": 0, "1108": 0, "1109": 0, "1110": 0, "1111": 0, "1112": 0, "1113": 0, "1114": 0, "1115": 0, "1117": 0, "1118": 0, "1119": 0, "1120": 0, "1121": 0, "1123": 0, "1124": 0, "1129": 0, "1130": 0, "1132": 0, "1139": 0, "1140": 0, "1141": 0, "1142": 0, "1143": 0, "1144": 0, "1145": 0, "1147": 0, "1133": 0, "1134": 0, "1135": 0, "1136": 0, "1137": 0, "1151": 0, "1152": 0, "1153": 0, "1155": 0, "1156": 0, "1160": 0, "1161": 0, "1162": 0, "1163": 0, "1164": 0, "1165": 0, "1166": 0, "1167": 0, "1168": 0, "1169": 0, "1170": 0, "1171": 0, "1172": 0, "1173": 0, "1175": 0, "1176": 0, "1177": 0, "1178": 0, "1179": 0, "1180": 0, "1182": 0, "1183": 0, "1184": 0, "1185": 0, "1186": 0, "1187": 0, "1188": 0, "1189": 0, "1190": 0, "1191": 0, "1192": 0, "1193": 0, "1194": 0, "1195": 0, "1196": 0, "1206": 0, "1207": 0, "1208": 0, "1209": 0, "1210": 0, "1212": 0, "1213": 0, "1214": 0, "1215": 0, "1216": 0, "1217": 0, "1218": 0, "1219": 0, "1220": 0, "1227": 1, "1228": 1, "1229": 1, "1230": 1, "1231": 1, "1232": 1, "1233": 1, "1234": 1, "1235": 1, "1236": 1, "1237": 1, "1238": 1, "1239": 1, "1240": 1, "1242": 1, "1243": 1, "1244": 1, "1245": 1, "1246": 1, "1247": 1, "1248": 1, "1249": 1, "1250": 1, "1251": 1, "1252": 1, "1253": 1, "1254": 1, "1256": 1, "1259": 1, "1260": 1, "1262": 1, "1263": 1, "1264": 1, "1266": 1, "1267": 1, "1268": 1, "1270": 1, "1271": 1, "1272": 1, "1273": 1, "1275": 1, "1276": 1, "1277": 1, "1278": 1, "1280": 1, "1241": 1, "1257": 0, "1285": 0, "1286": 0, "1287": 0, "1288": 0, "1289": 0, "1290": 0, "1292": 0, "1293": 0, "1294": 0, "1295": 0, "1296": 0, "1297": 0, "1298": 0, "1299": 0, "1300": 0, "1301": 0, "1302": 0, "1303": 0, "1304": 0, "1305": 0, "1306": 0, "1307": 0, "1308": 0, "1309": 0, "1310": 0, "1311": 0, "1312": 0, "1313": 0, "1314": 0, "1315": 0, "1316": 0, "1317": 0, "1318": 0, "1319": 0, "1320": 0, "1321": 0, "1326": 0, "1327": 0, "1328": 0, "1329": 0, "1330": 0, "1331": 0, "1332": 0, "1338": 1, "1340": 1, "1421": 1, "1423": 1, "1430": 1, "1433": 1, "1372": 0, "1373": 0, "1375": 0, "1376": 0, "1379": 0, "1380": 0, "1381": 0, "1382": 0, "1383": 0, "1384": 0, "1386": 0, "1387": 0, "1388": 0, "1389": 0, "1390": 0, "1391": 0, "1392": 0, "1393": 0, "1394": 0, "1395": 0, "1396": 0, "1397": 0, "1399": 0, "1400": 0, "1401": 0, "1402": 0, "1404": 0, "1405": 0, "1407": 0, "1408": 0, "1409": 0, "1410": 0, "1411": 0, "1413": 0, "1414": 0, "1415": 0, "1416": 0, "1417": 0, "1419": 0, "1425": 0, "1426": 0, "1427": 0, "1428": 0, "1431": 0, "1435": 0, "1436": 0, "1437": 0, "1438": 0, "1439": 0, "1440": 0, "1441": 0, "1442": 0, "1443": 0, "1444": 0, "1445": 0, "1446": 0, "1447": 0, "1449": 0, "1450": 0, "1451": 0, "1452": 0, "1453": 0, "1454": 0, "1455": 0, "1457": 0, "1458": 0, "1459": 0, "1460": 0, "1461": 0, "1463": 0, "1464": 0, "1465": 0, "1466": 0, "1467": 0, "1469": 0, "1470": 0, "1491": 0}}
+ git checkout 30379ea6e225e37833a764ac2da7b7fadf5fe374
Note: switching to '30379ea6e225e37833a764ac2da7b7fadf5fe374'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at 30379ea6e2 Merge pull request #13357 from nilabja10201992/master
+ git apply /root/pre_state.patch
error: unrecognized input
