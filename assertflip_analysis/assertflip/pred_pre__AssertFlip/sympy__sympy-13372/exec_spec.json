{"instance_id": "sympy__sympy-13372", "repo": "sympy/sympy", "version": "1.1", "environment_setup_commit": "ec9e3c0436fbff934fa84e22bf07f1b3ef5bfac3", "patch_list": ["diff --git a/dev/null b/sympy/polys/tests/test_coverup_sympy__sympy-13372.py\nnew file mode 100644\nindex e69de29..6bcf72e 100644\n--- /dev/null\n+++ b/sympy/polys/tests/test_coverup_sympy__sympy-13372.py\n@@ -0,0 +1,15 @@\n+from sympy import symbols, Mul, Max\n+\n+def test_mul_max_evalf_unboundlocalerror():\n+    # Define symbolic variables\n+    x, y = symbols('x y')\n+\n+    # Test that Mul(x, Max(0, y), evaluate=False).evalf() does not raise an error\n+    expr1 = Mul(x, Max(0, y), evaluate=False)\n+    result1 = expr1.evalf()\n+    assert result1 == x * Max(0, y)  # This should not raise an error\n+\n+    # Test that Mul(Max(0, y), x, evaluate=False).evalf() does not raise an error\n+    expr2 = Mul(Max(0, y), x, evaluate=False)\n+    result2 = expr2.evalf()\n+    assert result2 == Max(0, y) * x  # This should not raise an error\n"], "arch": "x86_64", "base_commit": "30379ea6e225e37833a764ac2da7b7fadf5fe374", "test_directives": ["sympy/polys/tests/test_coverup_sympy__sympy-13372.py"], "coverage_files": ["sympy/core/evalf.py"], "env_name": "testbed", "run_id": "assertflip", "patch_id": "pred_pre__AssertFlip", "timeout": 1800, "rm_image": false, "force_rebuild": false, "exec_mode": "unit_test", "reproduction_script_name": null, "compute_coverage": true, "install": {"python": "3.9", "packages": "mpmath flake8", "pip_packages": ["mpmath==1.3.0", "flake8-comprehensions"], "install": "python -m pip install -e ."}, "cache_level": "instance", "test_command": "PYTHONWARNINGS='ignore::UserWarning,ignore::SyntaxWarning' python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(sympy/core/evalf\\.py)' bin/test -C --verbose sympy/polys/tests/test_coverup_sympy__sympy-13372.p", "req_install_commands": ["conda create -n testbed python=3.9 mpmath flake8 -y"]}