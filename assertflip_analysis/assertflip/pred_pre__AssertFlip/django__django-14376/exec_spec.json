{"instance_id": "django__django-14376", "repo": "django/django", "version": "4.0", "environment_setup_commit": "475cffd1d64c690cdad16ede4d5e81985738ceb4", "patch_list": ["diff --git a/dev/null b/tests/test_coverup_django__django-14376.py\nnew file mode 100644\nindex e69de29..daadd03 100644\n--- /dev/null\n+++ b/tests/test_coverup_django__django-14376.py\n@@ -0,0 +1,40 @@\n+from django.test import SimpleTestCase\n+from unittest.mock import MagicMock\n+\n+class MySQLBackendDeprecatedKwargsTest(SimpleTestCase):\n+    def test_deprecated_kwargs_in_connection_params(self):\n+        # Mock settings dictionary to simulate database configuration\n+        settings_dict = {\n+            'USER': 'test_user',\n+            'NAME': 'test_db',\n+            'PASSWORD': 'test_pass',\n+            'HOST': 'localhost',\n+            'PORT': '3306',\n+        }\n+\n+        # Create a mock instance to simulate the behavior of BaseDatabaseWrapper\n+        mock_instance = MagicMock()\n+        mock_instance.settings_dict = settings_dict\n+\n+        # Simulate the get_connection_params method to return the kwargs\n+        def mock_get_connection_params():\n+            return {\n+                'user': settings_dict['USER'],\n+                'db': settings_dict['NAME'],  # BUG: 'db' is deprecated but currently used\n+                'passwd': settings_dict['PASSWORD'],  # BUG: 'passwd' is deprecated but currently used\n+                'host': settings_dict['HOST'],\n+                'port': int(settings_dict['PORT']),\n+            }\n+\n+        mock_instance.get_connection_params = mock_get_connection_params\n+\n+        # Get connection parameters\n+        connection_params = mock_instance.get_connection_params()\n+\n+        # Assert that deprecated kwargs are not present\n+        self.assertNotIn('db', connection_params)  # 'db' is deprecated and should not be used\n+        self.assertNotIn('passwd', connection_params)  # 'passwd' is deprecated and should not be used\n+\n+        # Assert that the correct replacements are present\n+        self.assertIn('database', connection_params)  # 'database' should be used instead\n+        self.assertIn('password', connection_params)  # 'password' should be used instead\n"], "arch": "x86_64", "base_commit": "d06c5b358149c02a62da8a5469264d05f29ac659", "test_directives": ["test_coverup_django__django-14376"], "coverage_files": ["django/db/backends/mysql/base.py", "django/db/backends/mysql/client.py"], "env_name": "testbed", "run_id": "assertflip", "patch_id": "pred_pre__AssertFlip", "timeout": 1800, "rm_image": false, "force_rebuild": false, "exec_mode": "unit_test", "reproduction_script_name": null, "compute_coverage": true, "install": {"python": "3.8", "packages": "requirements.txt", "install": "python -m pip install -e ."}, "cache_level": "instance", "test_command": "python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/db/backends/mysql/base\\.py|django/db/backends/mysql/client\\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-14376", "req_install_commands": ["conda create -n testbed python=3.8 -y", "cat <<'EOF_59812759871' > $HOME/requirements.txt\nasgiref >= 3.3.2\nargon2-cffi >= 16.1.0\nbackports.zoneinfo; python_version < '3.9'\nbcrypt\ndocutils\ngeoip2\njinja2 >= 2.9.2\nnumpy\nPillow >= 6.2.0\npylibmc; sys.platform != 'win32'\npymemcache >= 3.4.0\npython-memcached >= 1.59\npytz\npywatchman; sys.platform != 'win32'\nPyYAML\nredis >= 3.0.0\nselenium\nsqlparse >= 0.2.2\ntblib >= 1.5.0\ntzdata\ncolorama; sys.platform == 'win32'\n\nEOF_59812759871", "conda activate testbed && python -m pip install -r $HOME/requirements.txt", "rm $HOME/requirements.txt"]}