+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD bfc4a566423e036fbdc9fb02765fd893e4860c85
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
nothing to commit, working tree clean
+ git show
commit bfc4a566423e036fbdc9fb02765fd893e4860c85
Author: Hanmin Qin <qinhanmin2005@sina.com>
Date:   Wed Nov 14 20:34:40 2018 +0800

    MNT Duplicate import

diff --git a/sklearn/mixture/tests/test_gaussian_mixture.py b/sklearn/mixture/tests/test_gaussian_mixture.py
index 63ab573525..6cc2ffabc0 100644
--- a/sklearn/mixture/tests/test_gaussian_mixture.py
+++ b/sklearn/mixture/tests/test_gaussian_mixture.py
@@ -8,9 +8,7 @@ import warnings
 import pytest
 
 import numpy as np
-
 from scipy import stats, linalg
-import pytest
 
 from sklearn.covariance import EmpiricalCovariance
 from sklearn.datasets.samples_generator import make_spd_matrix
+ git diff bfc4a566423e036fbdc9fb02765fd893e4860c85
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -v --no-use-pep517 --no-build-isolation -e .
Using pip 21.2.2 from /opt/miniconda3/envs/testbed/lib/python3.6/site-packages/pip (python 3.6)
Obtaining file:///testbed
    Running command python setup.py egg_info
    running egg_info
    creating /tmp/pip-pip-egg-info-sqlxsrcm/scikit_learn.egg-info
    writing /tmp/pip-pip-egg-info-sqlxsrcm/scikit_learn.egg-info/PKG-INFO
    writing dependency_links to /tmp/pip-pip-egg-info-sqlxsrcm/scikit_learn.egg-info/dependency_links.txt
    writing requirements to /tmp/pip-pip-egg-info-sqlxsrcm/scikit_learn.egg-info/requires.txt
    writing top-level names to /tmp/pip-pip-egg-info-sqlxsrcm/scikit_learn.egg-info/top_level.txt
    writing manifest file '/tmp/pip-pip-egg-info-sqlxsrcm/scikit_learn.egg-info/SOURCES.txt'
    reading manifest file '/tmp/pip-pip-egg-info-sqlxsrcm/scikit_learn.egg-info/SOURCES.txt'
    reading manifest template 'MANIFEST.in'
    adding license file 'COPYING'
    writing manifest file '/tmp/pip-pip-egg-info-sqlxsrcm/scikit_learn.egg-info/SOURCES.txt'
    Partial import of sklearn during the build process.
Requirement already satisfied: numpy>=1.8.2 in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from scikit-learn==0.21.dev0) (1.19.2)
Requirement already satisfied: scipy>=0.13.3 in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from scikit-learn==0.21.dev0) (1.5.2)
Installing collected packages: scikit-learn
  Attempting uninstall: scikit-learn
    Found existing installation: scikit-learn 0.21.dev0
    Uninstalling scikit-learn-0.21.dev0:
      Removing file or directory /opt/miniconda3/envs/testbed/lib/python3.6/site-packages/scikit-learn.egg-link
      Removing pth entries from /opt/miniconda3/envs/testbed/lib/python3.6/site-packages/easy-install.pth:
      Removing entry: /testbed
      Successfully uninstalled scikit-learn-0.21.dev0
  Running setup.py develop for scikit-learn
    Running command /opt/miniconda3/envs/testbed/bin/python -c 'import io, os, sys, setuptools, tokenize; sys.argv[0] = '"'"'/testbed/setup.py'"'"'; __file__='"'"'/testbed/setup.py'"'"';f = getattr(tokenize, '"'"'open'"'"', open)(__file__) if os.path.exists(__file__) else io.StringIO('"'"'from setuptools import setup; setup()'"'"');code = f.read().replace('"'"'\r\n'"'"', '"'"'\n'"'"');f.close();exec(compile(code, __file__, '"'"'exec'"'"'))' develop --no-deps
    blas_opt_info:
    blas_mkl_info:
    customize UnixCCompiler
      libraries mkl_rt not found in ['/opt/miniconda3/envs/testbed/lib', '/usr/local/lib', '/usr/lib64', '/usr/lib', '/usr/lib/x86_64-linux-gnu']
      NOT AVAILABLE

    blis_info:
      libraries blis not found in ['/opt/miniconda3/envs/testbed/lib', '/usr/local/lib', '/usr/lib64', '/usr/lib', '/usr/lib/x86_64-linux-gnu']
      NOT AVAILABLE

    openblas_info:
    C compiler: gcc -pthread -B /opt/miniconda3/envs/testbed/compiler_compat -Wl,--sysroot=/ -Wsign-compare -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -fPIC

    creating /tmp/tmpyghd3f7l/tmp
    creating /tmp/tmpyghd3f7l/tmp/tmpyghd3f7l
    compile options: '-c'
    gcc: /tmp/tmpyghd3f7l/source.c
    gcc -pthread -B /opt/miniconda3/envs/testbed/compiler_compat -Wl,--sysroot=/ /tmp/tmpyghd3f7l/tmp/tmpyghd3f7l/source.o -L/opt/miniconda3/envs/testbed/lib -lopenblas -o /tmp/tmpyghd3f7l/a.out
      FOUND:
        libraries = ['openblas', 'openblas']
        library_dirs = ['/opt/miniconda3/envs/testbed/lib']
        language = c
        define_macros = [('HAVE_CBLAS', None)]

      FOUND:
        libraries = ['openblas', 'openblas']
        library_dirs = ['/opt/miniconda3/envs/testbed/lib']
        language = c
        define_macros = [('HAVE_CBLAS', None)]

    running develop
    running build_scripts
    running egg_info
    running build_src
    build_src
    building library "libsvm-skl" sources
    building extension "sklearn.__check_build._check_build" sources
    building extension "sklearn.preprocessing._csr_polynomial_expansion" sources
    building extension "sklearn.cluster._dbscan_inner" sources
    building extension "sklearn.cluster._hierarchical" sources
    building extension "sklearn.cluster._k_means_elkan" sources
    building extension "sklearn.cluster._k_means" sources
    building extension "sklearn.datasets._svmlight_format" sources
    building extension "sklearn.decomposition._online_lda" sources
    building extension "sklearn.decomposition.cdnmf_fast" sources
    building extension "sklearn.ensemble._gradient_boosting" sources
    building extension "sklearn.feature_extraction._hashing" sources
    building extension "sklearn.manifold._utils" sources
    building extension "sklearn.manifold._barnes_hut_tsne" sources
    building extension "sklearn.metrics.cluster.expected_mutual_info_fast" sources
    building extension "sklearn.metrics.pairwise_fast" sources
    building extension "sklearn.neighbors.ball_tree" sources
    building extension "sklearn.neighbors.kd_tree" sources
    building extension "sklearn.neighbors.dist_metrics" sources
    building extension "sklearn.neighbors.typedefs" sources
    building extension "sklearn.neighbors.quad_tree" sources
    building extension "sklearn.tree._tree" sources
    building extension "sklearn.tree._splitter" sources
    building extension "sklearn.tree._criterion" sources
    building extension "sklearn.tree._utils" sources
    building extension "sklearn.svm.libsvm" sources
    building extension "sklearn.svm.liblinear" sources
    building extension "sklearn.svm.libsvm_sparse" sources
    building extension "sklearn._isotonic" sources
    building extension "sklearn.linear_model.cd_fast" sources
    building extension "sklearn.linear_model.sgd_fast" sources
    building extension "sklearn.linear_model.sag_fast" sources
    building extension "sklearn.utils.sparsefuncs_fast" sources
    building extension "sklearn.utils.arrayfuncs" sources
    building extension "sklearn.utils.murmurhash" sources
    building extension "sklearn.utils.lgamma" sources
    building extension "sklearn.utils.graph_shortest_path" sources
    building extension "sklearn.utils.fast_dict" sources
    building extension "sklearn.utils.seq_dataset" sources
    building extension "sklearn.utils.weight_vector" sources
    building extension "sklearn.utils._random" sources
    building extension "sklearn.utils._logistic_sigmoid" sources
    building data_files sources
    build_src: building npy-pkg config files
    writing scikit_learn.egg-info/PKG-INFO
    writing dependency_links to scikit_learn.egg-info/dependency_links.txt
    writing requirements to scikit_learn.egg-info/requires.txt
    writing top-level names to scikit_learn.egg-info/top_level.txt
    reading manifest file 'scikit_learn.egg-info/SOURCES.txt'
    reading manifest template 'MANIFEST.in'
    adding license file 'COPYING'
    writing manifest file 'scikit_learn.egg-info/SOURCES.txt'
    running build_ext
    customize UnixCCompiler
    customize UnixCCompiler using build_clib
    customize UnixCCompiler
    customize UnixCCompiler using build_ext
    resetting extension 'sklearn.svm.liblinear' language from 'c' to 'c++'.
    customize UnixCCompiler
    customize UnixCCompiler using build_ext
    Creating /opt/miniconda3/envs/testbed/lib/python3.6/site-packages/scikit-learn.egg-link (link to .)
    Adding scikit-learn 0.21.dev0 to easy-install.pth file

    Installed /testbed
    Partial import of sklearn during the build process.
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv
Successfully installed scikit-learn-0.21.dev0
+ git apply -v -
Checking patch sklearn/tests/test_coverup_scikit-learn__scikit-learn-12585.py...
Applied patch sklearn/tests/test_coverup_scikit-learn__scikit-learn-12585.py cleanly.
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(sklearn/base\.py)' -m pytest --no-header -rA -p no:cacheprovider sklearn/tests/test_coverup_scikit-learn__scikit-learn-12585.py
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(sklearn/base\\.py)']
============================= test session starts ==============================
collected 1 item

sklearn/tests/test_coverup_scikit-learn__scikit-learn-12585.py 0.73 /testbed/sklearn/base.py(227):         class_name = self.__class__.__name__
0.73 /testbed/sklearn/base.py(228):         return '%s(%s)' % (class_name, _pprint(self.get_params(deep=False),
0.73 /testbed/sklearn/base.py(180):         out = dict()
0.73 /testbed/sklearn/base.py(181):         for key in self._get_param_names():
0.73 /testbed/sklearn/base.py(144):         init = getattr(cls.__init__, 'deprecated_original', cls.__init__)
0.73 /testbed/sklearn/base.py(145):         if init is object.__init__:
0.73 /testbed/sklearn/base.py(151):         init_signature = signature(init)
0.73 /testbed/sklearn/base.py(153):         parameters = [p for p in init_signature.parameters.values()
0.73 /testbed/sklearn/base.py(153):         parameters = [p for p in init_signature.parameters.values()
0.73 /testbed/sklearn/base.py(154):                       if p.name != 'self' and p.kind != p.VAR_KEYWORD]
0.73 /testbed/sklearn/base.py(153):         parameters = [p for p in init_signature.parameters.values()
0.73 /testbed/sklearn/base.py(154):                       if p.name != 'self' and p.kind != p.VAR_KEYWORD]
0.73 /testbed/sklearn/base.py(153):         parameters = [p for p in init_signature.parameters.values()
0.73 /testbed/sklearn/base.py(154):                       if p.name != 'self' and p.kind != p.VAR_KEYWORD]
0.73 /testbed/sklearn/base.py(153):         parameters = [p for p in init_signature.parameters.values()
0.73 /testbed/sklearn/base.py(154):                       if p.name != 'self' and p.kind != p.VAR_KEYWORD]
0.73 /testbed/sklearn/base.py(153):         parameters = [p for p in init_signature.parameters.values()
0.73 /testbed/sklearn/base.py(155):         for p in parameters:
0.73 /testbed/sklearn/base.py(156):             if p.kind == p.VAR_POSITIONAL:
0.73 /testbed/sklearn/base.py(155):         for p in parameters:
0.73 /testbed/sklearn/base.py(156):             if p.kind == p.VAR_POSITIONAL:
0.73 /testbed/sklearn/base.py(155):         for p in parameters:
0.73 /testbed/sklearn/base.py(156):             if p.kind == p.VAR_POSITIONAL:
0.73 /testbed/sklearn/base.py(155):         for p in parameters:
0.73 /testbed/sklearn/base.py(164):         return sorted([p.name for p in parameters])
0.73 /testbed/sklearn/base.py(164):         return sorted([p.name for p in parameters])
0.73 /testbed/sklearn/base.py(164):         return sorted([p.name for p in parameters])
0.73 /testbed/sklearn/base.py(164):         return sorted([p.name for p in parameters])
0.73 /testbed/sklearn/base.py(164):         return sorted([p.name for p in parameters])
0.73 /testbed/sklearn/base.py(182):             value = getattr(self, key, None)
0.73 /testbed/sklearn/base.py(183):             if deep and hasattr(value, 'get_params'):
0.73 /testbed/sklearn/base.py(186):             out[key] = value
0.73 /testbed/sklearn/base.py(181):         for key in self._get_param_names():
0.73 /testbed/sklearn/base.py(182):             value = getattr(self, key, None)
0.73 /testbed/sklearn/base.py(183):             if deep and hasattr(value, 'get_params'):
0.73 /testbed/sklearn/base.py(186):             out[key] = value
0.73 /testbed/sklearn/base.py(181):         for key in self._get_param_names():
0.73 /testbed/sklearn/base.py(182):             value = getattr(self, key, None)
0.73 /testbed/sklearn/base.py(183):             if deep and hasattr(value, 'get_params'):
0.73 /testbed/sklearn/base.py(186):             out[key] = value
0.73 /testbed/sklearn/base.py(181):         for key in self._get_param_names():
0.73 /testbed/sklearn/base.py(187):         return out
0.73 /testbed/sklearn/base.py(229):                                                offset=len(class_name),),)
0.73 /testbed/sklearn/base.py(95):     options = np.get_printoptions()
0.73 /testbed/sklearn/base.py(96):     np.set_printoptions(precision=5, threshold=64, edgeitems=2)
0.73 /testbed/sklearn/base.py(97):     params_list = list()
0.73 /testbed/sklearn/base.py(98):     this_line_length = offset
0.73 /testbed/sklearn/base.py(99):     line_sep = ',\n' + (1 + offset // 2) * ' '
0.73 /testbed/sklearn/base.py(100):     for i, (k, v) in enumerate(sorted(six.iteritems(params))):
0.73 /testbed/sklearn/base.py(101):         if type(v) is float:
0.73 /testbed/sklearn/base.py(108):             this_repr = '%s=%s' % (k, printer(v))
0.73 /testbed/sklearn/base.py(109):         if len(this_repr) > 500:
0.73 /testbed/sklearn/base.py(111):         if i > 0:
0.73 /testbed/sklearn/base.py(118):         params_list.append(this_repr)
0.73 /testbed/sklearn/base.py(119):         this_line_length += len(this_repr)
0.73 /testbed/sklearn/base.py(100):     for i, (k, v) in enumerate(sorted(six.iteritems(params))):
0.73 /testbed/sklearn/base.py(101):         if type(v) is float:
0.73 /testbed/sklearn/base.py(108):             this_repr = '%s=%s' % (k, printer(v))
0.73 /testbed/sklearn/base.py(109):         if len(this_repr) > 500:
0.73 /testbed/sklearn/base.py(111):         if i > 0:
0.73 /testbed/sklearn/base.py(112):             if (this_line_length + len(this_repr) >= 75 or '\n' in this_repr):
0.73 /testbed/sklearn/base.py(113):                 params_list.append(line_sep)
0.73 /testbed/sklearn/base.py(114):                 this_line_length = len(line_sep)
0.73 /testbed/sklearn/base.py(118):         params_list.append(this_repr)
0.73 /testbed/sklearn/base.py(119):         this_line_length += len(this_repr)
0.73 /testbed/sklearn/base.py(100):     for i, (k, v) in enumerate(sorted(six.iteritems(params))):
0.73 /testbed/sklearn/base.py(101):         if type(v) is float:
0.73 /testbed/sklearn/base.py(108):             this_repr = '%s=%s' % (k, printer(v))
0.73 /testbed/sklearn/base.py(109):         if len(this_repr) > 500:
0.73 /testbed/sklearn/base.py(111):         if i > 0:
0.73 /testbed/sklearn/base.py(112):             if (this_line_length + len(this_repr) >= 75 or '\n' in this_repr):
0.73 /testbed/sklearn/base.py(113):                 params_list.append(line_sep)
0.73 /testbed/sklearn/base.py(114):                 this_line_length = len(line_sep)
0.73 /testbed/sklearn/base.py(118):         params_list.append(this_repr)
0.73 /testbed/sklearn/base.py(119):         this_line_length += len(this_repr)
0.73 /testbed/sklearn/base.py(100):     for i, (k, v) in enumerate(sorted(six.iteritems(params))):
0.73 /testbed/sklearn/base.py(121):     np.set_printoptions(**options)
0.73 /testbed/sklearn/base.py(122):     lines = ''.join(params_list)
0.73 /testbed/sklearn/base.py(124):     lines = '\n'.join(l.rstrip(' ') for l in lines.split('\n'))
0.73 /testbed/sklearn/base.py(124):     lines = '\n'.join(l.rstrip(' ') for l in lines.split('\n'))
0.73 /testbed/sklearn/base.py(124):     lines = '\n'.join(l.rstrip(' ') for l in lines.split('\n'))
0.73 /testbed/sklearn/base.py(124):     lines = '\n'.join(l.rstrip(' ') for l in lines.split('\n'))
0.73 /testbed/sklearn/base.py(124):     lines = '\n'.join(l.rstrip(' ') for l in lines.split('\n'))
0.73 /testbed/sklearn/base.py(125):     return lines
F         [100%]

=================================== FAILURES ===================================
_____________________ test_clone_with_class_type_parameter _____________________

    def test_clone_with_class_type_parameter():
        # Attempt to clone an estimator with a class type parameter
        try:
>           clone(StandardScaler(with_mean=StandardScaler))

sklearn/tests/test_coverup_scikit-learn__scikit-learn-12585.py:8: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

estimator = StandardScaler(copy=True,
        with_mean=<class 'sklearn.preprocessing.data.StandardScaler'>,
        with_std=True)
safe = True

    def clone(estimator, safe=True):
        """Constructs a new estimator with the same parameters.
    
        Clone does a deep copy of the model in an estimator
        without actually copying attached data. It yields a new estimator
        with the same parameters that has not been fit on any data.
    
        Parameters
        ----------
        estimator : estimator object, or list, tuple or set of objects
            The estimator or group of estimators to be cloned
    
        safe : boolean, optional
            If safe is false, clone will fall back to a deep copy on objects
            that are not estimators.
    
        """
        estimator_type = type(estimator)
        # XXX: not handling dictionaries
        if estimator_type in (list, tuple, set, frozenset):
            return estimator_type([clone(e, safe=safe) for e in estimator])
        elif not hasattr(estimator, 'get_params'):
            if not safe:
                return copy.deepcopy(estimator)
            else:
                raise TypeError("Cannot clone object '%s' (type %s): "
                                "it does not seem to be a scikit-learn estimator "
                                "as it does not implement a 'get_params' methods."
                                % (repr(estimator), type(estimator)))
        klass = estimator.__class__
        new_object_params = estimator.get_params(deep=False)
        for name, param in six.iteritems(new_object_params):
>           new_object_params[name] = clone(param, safe=False)

sklearn/base.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

estimator = <class 'sklearn.preprocessing.data.StandardScaler'>, safe = False

    def clone(estimator, safe=True):
        """Constructs a new estimator with the same parameters.
    
        Clone does a deep copy of the model in an estimator
        without actually copying attached data. It yields a new estimator
        with the same parameters that has not been fit on any data.
    
        Parameters
        ----------
        estimator : estimator object, or list, tuple or set of objects
            The estimator or group of estimators to be cloned
    
        safe : boolean, optional
            If safe is false, clone will fall back to a deep copy on objects
            that are not estimators.
    
        """
        estimator_type = type(estimator)
        # XXX: not handling dictionaries
        if estimator_type in (list, tuple, set, frozenset):
            return estimator_type([clone(e, safe=safe) for e in estimator])
        elif not hasattr(estimator, 'get_params'):
            if not safe:
                return copy.deepcopy(estimator)
            else:
                raise TypeError("Cannot clone object '%s' (type %s): "
                                "it does not seem to be a scikit-learn estimator "
                                "as it does not implement a 'get_params' methods."
                                % (repr(estimator), type(estimator)))
        klass = estimator.__class__
>       new_object_params = estimator.get_params(deep=False)
E       TypeError: get_params() missing 1 required positional argument: 'self'

sklearn/base.py:60: TypeError

During handling of the above exception, another exception occurred:

    def test_clone_with_class_type_parameter():
        # Attempt to clone an estimator with a class type parameter
        try:
            clone(StandardScaler(with_mean=StandardScaler))
        except TypeError as e:
            # If a TypeError is raised, the test should fail because the bug is present
>           pytest.fail("TypeError was raised, indicating the presence of the bug")
E           Failed: TypeError was raised, indicating the presence of the bug

sklearn/tests/test_coverup_scikit-learn__scikit-learn-12585.py:11: Failed
----------------------------- Captured stdout call -----------------------------
0.62 /testbed/sklearn/base.py(47):     estimator_type = type(estimator)
0.62 /testbed/sklearn/base.py(49):     if estimator_type in (list, tuple, set, frozenset):
0.62 /testbed/sklearn/base.py(51):     elif not hasattr(estimator, 'get_params'):
0.62 /testbed/sklearn/base.py(59):     klass = estimator.__class__
0.62 /testbed/sklearn/base.py(60):     new_object_params = estimator.get_params(deep=False)
0.62 /testbed/sklearn/base.py(180):         out = dict()
0.62 /testbed/sklearn/base.py(181):         for key in self._get_param_names():
0.62 /testbed/sklearn/base.py(144):         init = getattr(cls.__init__, 'deprecated_original', cls.__init__)
0.62 /testbed/sklearn/base.py(145):         if init is object.__init__:
0.62 /testbed/sklearn/base.py(151):         init_signature = signature(init)
0.62 /testbed/sklearn/base.py(153):         parameters = [p for p in init_signature.parameters.values()
0.62 /testbed/sklearn/base.py(153):         parameters = [p for p in init_signature.parameters.values()
0.62 /testbed/sklearn/base.py(154):                       if p.name != 'self' and p.kind != p.VAR_KEYWORD]
0.62 /testbed/sklearn/base.py(153):         parameters = [p for p in init_signature.parameters.values()
0.62 /testbed/sklearn/base.py(154):                       if p.name != 'self' and p.kind != p.VAR_KEYWORD]
0.62 /testbed/sklearn/base.py(153):         parameters = [p for p in init_signature.parameters.values()
0.62 /testbed/sklearn/base.py(154):                       if p.name != 'self' and p.kind != p.VAR_KEYWORD]
0.62 /testbed/sklearn/base.py(153):         parameters = [p for p in init_signature.parameters.values()
0.62 /testbed/sklearn/base.py(154):                       if p.name != 'self' and p.kind != p.VAR_KEYWORD]
0.62 /testbed/sklearn/base.py(153):         parameters = [p for p in init_signature.parameters.values()
0.62 /testbed/sklearn/base.py(155):         for p in parameters:
0.62 /testbed/sklearn/base.py(156):             if p.kind == p.VAR_POSITIONAL:
0.62 /testbed/sklearn/base.py(155):         for p in parameters:
0.62 /testbed/sklearn/base.py(156):             if p.kind == p.VAR_POSITIONAL:
0.62 /testbed/sklearn/base.py(155):         for p in parameters:
0.62 /testbed/sklearn/base.py(156):             if p.kind == p.VAR_POSITIONAL:
0.62 /testbed/sklearn/base.py(155):         for p in parameters:
0.62 /testbed/sklearn/base.py(164):         return sorted([p.name for p in parameters])
0.62 /testbed/sklearn/base.py(164):         return sorted([p.name for p in parameters])
0.62 /testbed/sklearn/base.py(164):         return sorted([p.name for p in parameters])
0.62 /testbed/sklearn/base.py(164):         return sorted([p.name for p in parameters])
0.62 /testbed/sklearn/base.py(164):         return sorted([p.name for p in parameters])
0.62 /testbed/sklearn/base.py(182):             value = getattr(self, key, None)
0.62 /testbed/sklearn/base.py(183):             if deep and hasattr(value, 'get_params'):
0.62 /testbed/sklearn/base.py(186):             out[key] = value
0.62 /testbed/sklearn/base.py(181):         for key in self._get_param_names():
0.62 /testbed/sklearn/base.py(182):             value = getattr(self, key, None)
0.62 /testbed/sklearn/base.py(183):             if deep and hasattr(value, 'get_params'):
0.62 /testbed/sklearn/base.py(186):             out[key] = value
0.62 /testbed/sklearn/base.py(181):         for key in self._get_param_names():
0.62 /testbed/sklearn/base.py(182):             value = getattr(self, key, None)
0.62 /testbed/sklearn/base.py(183):             if deep and hasattr(value, 'get_params'):
0.62 /testbed/sklearn/base.py(186):             out[key] = value
0.62 /testbed/sklearn/base.py(181):         for key in self._get_param_names():
0.62 /testbed/sklearn/base.py(187):         return out
0.62 /testbed/sklearn/base.py(61):     for name, param in six.iteritems(new_object_params):
0.62 /testbed/sklearn/base.py(62):         new_object_params[name] = clone(param, safe=False)
0.62 /testbed/sklearn/base.py(47):     estimator_type = type(estimator)
0.62 /testbed/sklearn/base.py(49):     if estimator_type in (list, tuple, set, frozenset):
0.62 /testbed/sklearn/base.py(51):     elif not hasattr(estimator, 'get_params'):
0.62 /testbed/sklearn/base.py(52):         if not safe:
0.62 /testbed/sklearn/base.py(53):             return copy.deepcopy(estimator)
0.62 /testbed/sklearn/base.py(61):     for name, param in six.iteritems(new_object_params):
0.62 /testbed/sklearn/base.py(62):         new_object_params[name] = clone(param, safe=False)
0.62 /testbed/sklearn/base.py(47):     estimator_type = type(estimator)
0.62 /testbed/sklearn/base.py(49):     if estimator_type in (list, tuple, set, frozenset):
0.62 /testbed/sklearn/base.py(51):     elif not hasattr(estimator, 'get_params'):
0.62 /testbed/sklearn/base.py(59):     klass = estimator.__class__
0.62 /testbed/sklearn/base.py(60):     new_object_params = estimator.get_params(deep=False)
=========================== short test summary info ============================
FAILED sklearn/tests/test_coverup_scikit-learn__scikit-learn-12585.py::test_clone_with_class_type_parameter
========================= 1 failed, 1 warning in 0.34s =========================
+ cat coverage.cover
{"/testbed/sklearn/base.py": {"6": 1, "7": 1, "8": 1, "10": 1, "11": 1, "12": 1, "13": 1, "14": 1, "18": 1, "30": 1, "78": 1, "129": 2, "259": 2, "292": 2, "333": 2, "359": 2, "435": 2, "468": 2, "486": 2, "513": 2, "520": 1, "536": 1, "552": 1, "20": 0, "22": 0, "23": 0, "27": 0, "47": 3, "49": 3, "50": 0, "51": 3, "52": 1, "53": 1, "55": 0, "58": 0, "59": 2, "60": 2, "61": 2, "62": 2, "63": 0, "64": 0, "67": 0, "68": 0, "69": 0, "70": 0, "71": 0, "73": 0, "74": 0, "95": 1, "96": 1, "97": 1, "98": 1, "99": 1, "100": 4, "101": 3, "105": 0, "108": 3, "109": 3, "110": 0, "111": 3, "112": 2, "113": 2, "114": 2, "116": 0, "117": 0, "118": 3, "119": 3, "121": 1, "122": 1, "124": 5, "125": 1, "139": 1, "166": 1, "189": 1, "226": 1, "231": 1, "242": 1, "144": 2, "145": 2, "147": 0, "151": 2, "153": 12, "155": 8, "156": 6, "157": 0, "162": 0, "164": 10, "154": 8, "180": 2, "181": 8, "182": 6, "183": 6, "184": 0, "185": 0, "186": 6, "187": 2, "201": 0, "203": 0, "204": 0, "206": 0, "207": 0, "208": 0, "209": 0, "210": 0, "213": 0, "215": 0, "216": 0, "218": 0, "219": 0, "221": 0, "222": 0, "224": 0, "227": 1, "228": 1, "229": 1, "232": 0, "233": 0, "234": 0, "235": 0, "237": 0, "238": 0, "240": 0, "243": 0, "244": 0, "245": 0, "246": 0, "247": 0, "250": 0, "251": 0, "252": 0, "253": 0, "254": 0, "255": 0, "261": 1, "263": 1, "287": 0, "288": 0, "294": 1, "296": 1, "327": 0, "328": 0, "329": 0, "335": 1, "337": 1, "355": 0, "356": 0, "362": 1, "370": 1, "392": 1, "408": 1, "368": 0, "388": 0, "389": 0, "390": 0, "405": 0, "406": 0, "428": 0, "429": 0, "430": 0, "431": 0, "438": 1, "460": 0, "462": 0, "465": 0, "470": 1, "472": 1, "483": 0, "488": 1, "490": 1, "509": 0, "533": 0, "549": 0, "565": 0}}
+ git checkout bfc4a566423e036fbdc9fb02765fd893e4860c85
Note: switching to 'bfc4a566423e036fbdc9fb02765fd893e4860c85'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at bfc4a56642 MNT Duplicate import
+ git apply /root/pre_state.patch
error: unrecognized input
