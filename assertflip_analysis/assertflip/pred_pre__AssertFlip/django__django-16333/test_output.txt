+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD 60a7bd89860e504c0c33b02c78edcac87f6d1b5a
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
nothing to commit, working tree clean
+ git show
commit 60a7bd89860e504c0c33b02c78edcac87f6d1b5a
Author: Mariusz Felisiak <felisiak.mariusz@gmail.com>
Date:   Mon Nov 28 09:47:52 2022 +0100

    Refs #34119 -- Skipped test_callable_default_hidden_widget_value_not_overridden when JSONField is not supported.

diff --git a/tests/forms_tests/tests/tests.py b/tests/forms_tests/tests/tests.py
index 294e574168..196085ceb2 100644
--- a/tests/forms_tests/tests/tests.py
+++ b/tests/forms_tests/tests/tests.py
@@ -4,7 +4,7 @@ from django.core.files.uploadedfile import SimpleUploadedFile
 from django.db import models
 from django.forms import CharField, FileField, Form, ModelForm
 from django.forms.models import ModelFormMetaclass
-from django.test import SimpleTestCase, TestCase
+from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature
 
 from ..models import (
     BoundaryModel,
@@ -203,6 +203,7 @@ class ModelFormCallableModelDefault(TestCase):
             """,
         )
 
+    @skipUnlessDBFeature("supports_json_field")
     def test_callable_default_hidden_widget_value_not_overridden(self):
         class FieldWithCallableDefaultsModel(models.Model):
             int_field = models.IntegerField(default=lambda: 1)
+ git diff 60a7bd89860e504c0c33b02c78edcac87f6d1b5a
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Checking if build backend supports build_editable: started
  Checking if build backend supports build_editable: finished with status 'done'
  Getting requirements to build editable: started
  Getting requirements to build editable: finished with status 'done'
  Preparing editable metadata (pyproject.toml): started
  Preparing editable metadata (pyproject.toml): finished with status 'done'
Requirement already satisfied: asgiref>=3.5.2 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Django==4.2.dev20221128084752) (3.9.1)
Requirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Django==4.2.dev20221128084752) (0.5.3)
Requirement already satisfied: typing_extensions>=4 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from asgiref>=3.5.2->Django==4.2.dev20221128084752) (4.14.1)
Building wheels for collected packages: Django
  Building editable for Django (pyproject.toml): started
  Building editable for Django (pyproject.toml): finished with status 'done'
  Created wheel for Django: filename=django-4.2.dev20221128084752-0.editable-py3-none-any.whl size=27333 sha256=34b8cfc5cbfb910fa32405953ca645d79a8f1e3b12ba426ce6c0e18ce7cee600
  Stored in directory: /tmp/pip-ephem-wheel-cache-okow3vtl/wheels/7d/66/67/70d1ee2124ccf21d601c352e25cdca10f611f7c8b3f9ffb9e4
Successfully built Django
Installing collected packages: Django
  Attempting uninstall: Django
    Found existing installation: Django 4.2.dev20221128084752
    Uninstalling Django-4.2.dev20221128084752:
      Successfully uninstalled Django-4.2.dev20221128084752
Successfully installed Django-4.2.dev20221128084752
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git apply -v -
Checking patch tests/test_coverup_django__django-16333.py...
Applied patch tests/test_coverup_django__django-16333.py cleanly.
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/contrib/auth/forms\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-16333
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(django/contrib/auth/forms\\.py)']
Testing against Django installed in '/testbed/django'
0.64 /testbed/django/contrib/auth/forms.py(1): import unicodedata
0.64 /testbed/django/contrib/auth/forms.py(3): from django import forms
0.64 /testbed/django/contrib/auth/forms.py(4): from django.contrib.auth import authenticate, get_user_model, password_validation
0.64 /testbed/django/contrib/auth/forms.py(5): from django.contrib.auth.hashers import UNUSABLE_PASSWORD_PREFIX, identify_hasher
0.64 /testbed/django/contrib/auth/forms.py(6): from django.contrib.auth.models import User
0.64 /testbed/django/contrib/auth/forms.py(7): from django.contrib.auth.tokens import default_token_generator
0.64 /testbed/django/contrib/auth/forms.py(8): from django.contrib.sites.shortcuts import get_current_site
0.65 /testbed/django/contrib/auth/forms.py(9): from django.core.exceptions import ValidationError
0.65 /testbed/django/contrib/auth/forms.py(10): from django.core.mail import EmailMultiAlternatives
0.65 /testbed/django/contrib/auth/forms.py(11): from django.template import loader
0.65 /testbed/django/contrib/auth/forms.py(12): from django.utils.encoding import force_bytes
0.65 /testbed/django/contrib/auth/forms.py(13): from django.utils.http import urlsafe_base64_encode
0.65 /testbed/django/contrib/auth/forms.py(14): from django.utils.text import capfirst
0.65 /testbed/django/contrib/auth/forms.py(15): from django.utils.translation import gettext
0.65 /testbed/django/contrib/auth/forms.py(16): from django.utils.translation import gettext_lazy as _
0.65 /testbed/django/contrib/auth/forms.py(18): UserModel = get_user_model()
0.65 /testbed/django/contrib/auth/forms.py(21): def _unicode_ci_compare(s1, s2):
0.65 /testbed/django/contrib/auth/forms.py(33): class ReadOnlyPasswordHashWidget(forms.Widget):
0.65 /testbed/django/contrib/auth/forms.py(33): class ReadOnlyPasswordHashWidget(forms.Widget):
0.65 /testbed/django/contrib/auth/forms.py(34):     template_name = "auth/widgets/read_only_password_hash.html"
0.65 /testbed/django/contrib/auth/forms.py(35):     read_only = True
0.65 /testbed/django/contrib/auth/forms.py(37):     def get_context(self, name, value, attrs):
0.65 /testbed/django/contrib/auth/forms.py(59):     def id_for_label(self, id_):
0.65 /testbed/django/contrib/auth/forms.py(63): class ReadOnlyPasswordHashField(forms.Field):
0.65 /testbed/django/contrib/auth/forms.py(63): class ReadOnlyPasswordHashField(forms.Field):
0.65 /testbed/django/contrib/auth/forms.py(64):     widget = ReadOnlyPasswordHashWidget
0.65 /testbed/django/contrib/auth/forms.py(66):     def __init__(self, *args, **kwargs):
0.65 /testbed/django/contrib/auth/forms.py(72): class UsernameField(forms.CharField):
0.65 /testbed/django/contrib/auth/forms.py(72): class UsernameField(forms.CharField):
0.65 /testbed/django/contrib/auth/forms.py(73):     def to_python(self, value):
0.65 /testbed/django/contrib/auth/forms.py(76):     def widget_attrs(self, widget):
0.65 /testbed/django/contrib/auth/forms.py(84): class UserCreationForm(forms.ModelForm):
0.65 /testbed/django/contrib/auth/forms.py(84): class UserCreationForm(forms.ModelForm):
0.65 /testbed/django/contrib/auth/forms.py(85):     """
0.65 /testbed/django/contrib/auth/forms.py(91):         "password_mismatch": _("The two password fields didn’t match."),
0.65 /testbed/django/contrib/auth/forms.py(90):     error_messages = {
0.65 /testbed/django/contrib/auth/forms.py(93):     password1 = forms.CharField(
0.65 /testbed/django/contrib/auth/forms.py(94):         label=_("Password"),
0.65 /testbed/django/contrib/auth/forms.py(95):         strip=False,
0.65 /testbed/django/contrib/auth/forms.py(96):         widget=forms.PasswordInput(attrs={"autocomplete": "new-password"}),
0.65 /testbed/django/contrib/auth/forms.py(97):         help_text=password_validation.password_validators_help_text_html(),
0.65 /testbed/django/contrib/auth/forms.py(93):     password1 = forms.CharField(
0.65 /testbed/django/contrib/auth/forms.py(99):     password2 = forms.CharField(
0.65 /testbed/django/contrib/auth/forms.py(100):         label=_("Password confirmation"),
0.65 /testbed/django/contrib/auth/forms.py(101):         widget=forms.PasswordInput(attrs={"autocomplete": "new-password"}),
0.65 /testbed/django/contrib/auth/forms.py(102):         strip=False,
0.65 /testbed/django/contrib/auth/forms.py(103):         help_text=_("Enter the same password as before, for verification."),
0.65 /testbed/django/contrib/auth/forms.py(99):     password2 = forms.CharField(
0.65 /testbed/django/contrib/auth/forms.py(106):     class Meta:
0.65 /testbed/django/contrib/auth/forms.py(106):     class Meta:
0.65 /testbed/django/contrib/auth/forms.py(107):         model = User
0.65 /testbed/django/contrib/auth/forms.py(108):         fields = ("username",)
0.65 /testbed/django/contrib/auth/forms.py(109):         field_classes = {"username": UsernameField}
0.65 /testbed/django/contrib/auth/forms.py(111):     def __init__(self, *args, **kwargs):
0.65 /testbed/django/contrib/auth/forms.py(118):     def clean_password2(self):
0.65 /testbed/django/contrib/auth/forms.py(128):     def _post_clean(self):
0.65 /testbed/django/contrib/auth/forms.py(139):     def save(self, commit=True):
0.65 /testbed/django/contrib/auth/forms.py(77):         return {
0.65 /testbed/django/contrib/auth/forms.py(78):             **super().widget_attrs(widget),
0.65 /testbed/django/contrib/auth/forms.py(77):         return {
0.65 /testbed/django/contrib/auth/forms.py(79):             "autocapitalize": "none",
0.65 /testbed/django/contrib/auth/forms.py(80):             "autocomplete": "username",
0.65 /testbed/django/contrib/auth/forms.py(77):         return {
0.65 /testbed/django/contrib/auth/forms.py(147): class UserChangeForm(forms.ModelForm):
0.65 /testbed/django/contrib/auth/forms.py(147): class UserChangeForm(forms.ModelForm):
0.65 /testbed/django/contrib/auth/forms.py(148):     password = ReadOnlyPasswordHashField(
0.65 /testbed/django/contrib/auth/forms.py(149):         label=_("Password"),
0.65 /testbed/django/contrib/auth/forms.py(150):         help_text=_(
0.65 /testbed/django/contrib/auth/forms.py(151):             "Raw passwords are not stored, so there is no way to see this "
0.65 /testbed/django/contrib/auth/forms.py(150):         help_text=_(
0.65 /testbed/django/contrib/auth/forms.py(148):     password = ReadOnlyPasswordHashField(
0.65 /testbed/django/contrib/auth/forms.py(67):         kwargs.setdefault("required", False)
0.65 /testbed/django/contrib/auth/forms.py(68):         kwargs.setdefault("disabled", True)
0.65 /testbed/django/contrib/auth/forms.py(69):         super().__init__(*args, **kwargs)
0.65 /testbed/django/contrib/auth/forms.py(157):     class Meta:
0.65 /testbed/django/contrib/auth/forms.py(157):     class Meta:
0.65 /testbed/django/contrib/auth/forms.py(158):         model = User
0.65 /testbed/django/contrib/auth/forms.py(159):         fields = "__all__"
0.65 /testbed/django/contrib/auth/forms.py(160):         field_classes = {"username": UsernameField}
0.65 /testbed/django/contrib/auth/forms.py(162):     def __init__(self, *args, **kwargs):
0.65 /testbed/django/contrib/auth/forms.py(77):         return {
0.65 /testbed/django/contrib/auth/forms.py(78):             **super().widget_attrs(widget),
0.65 /testbed/django/contrib/auth/forms.py(77):         return {
0.65 /testbed/django/contrib/auth/forms.py(79):             "autocapitalize": "none",
0.65 /testbed/django/contrib/auth/forms.py(80):             "autocomplete": "username",
0.65 /testbed/django/contrib/auth/forms.py(77):         return {
0.65 /testbed/django/contrib/auth/forms.py(176): class AuthenticationForm(forms.Form):
0.65 /testbed/django/contrib/auth/forms.py(176): class AuthenticationForm(forms.Form):
0.65 /testbed/django/contrib/auth/forms.py(177):     """
0.65 /testbed/django/contrib/auth/forms.py(182):     username = UsernameField(widget=forms.TextInput(attrs={"autofocus": True}))
0.65 /testbed/django/contrib/auth/forms.py(77):         return {
0.65 /testbed/django/contrib/auth/forms.py(78):             **super().widget_attrs(widget),
0.65 /testbed/django/contrib/auth/forms.py(77):         return {
0.65 /testbed/django/contrib/auth/forms.py(79):             "autocapitalize": "none",
0.65 /testbed/django/contrib/auth/forms.py(80):             "autocomplete": "username",
0.65 /testbed/django/contrib/auth/forms.py(77):         return {
0.65 /testbed/django/contrib/auth/forms.py(183):     password = forms.CharField(
0.65 /testbed/django/contrib/auth/forms.py(184):         label=_("Password"),
0.65 /testbed/django/contrib/auth/forms.py(185):         strip=False,
0.65 /testbed/django/contrib/auth/forms.py(186):         widget=forms.PasswordInput(attrs={"autocomplete": "current-password"}),
0.65 /testbed/django/contrib/auth/forms.py(183):     password = forms.CharField(
0.65 /testbed/django/contrib/auth/forms.py(190):         "invalid_login": _(
0.65 /testbed/django/contrib/auth/forms.py(191):             "Please enter a correct %(username)s and password. Note that both "
0.65 /testbed/django/contrib/auth/forms.py(190):         "invalid_login": _(
0.65 /testbed/django/contrib/auth/forms.py(194):         "inactive": _("This account is inactive."),
0.65 /testbed/django/contrib/auth/forms.py(189):     error_messages = {
0.65 /testbed/django/contrib/auth/forms.py(197):     def __init__(self, request=None, *args, **kwargs):
0.65 /testbed/django/contrib/auth/forms.py(214):     def clean(self):
0.65 /testbed/django/contrib/auth/forms.py(229):     def confirm_login_allowed(self, user):
0.65 /testbed/django/contrib/auth/forms.py(246):     def get_user(self):
0.65 /testbed/django/contrib/auth/forms.py(249):     def get_invalid_login_error(self):
0.65 /testbed/django/contrib/auth/forms.py(257): class PasswordResetForm(forms.Form):
0.65 /testbed/django/contrib/auth/forms.py(257): class PasswordResetForm(forms.Form):
0.65 /testbed/django/contrib/auth/forms.py(258):     email = forms.EmailField(
0.65 /testbed/django/contrib/auth/forms.py(259):         label=_("Email"),
0.65 /testbed/django/contrib/auth/forms.py(260):         max_length=254,
0.65 /testbed/django/contrib/auth/forms.py(261):         widget=forms.EmailInput(attrs={"autocomplete": "email"}),
0.65 /testbed/django/contrib/auth/forms.py(258):     email = forms.EmailField(
0.65 /testbed/django/contrib/auth/forms.py(264):     def send_mail(
0.65 /testbed/django/contrib/auth/forms.py(288):     def get_users(self, email):
0.65 /testbed/django/contrib/auth/forms.py(311):         domain_override=None,
0.65 /testbed/django/contrib/auth/forms.py(312):         subject_template_name="registration/password_reset_subject.txt",
0.65 /testbed/django/contrib/auth/forms.py(313):         email_template_name="registration/password_reset_email.html",
0.65 /testbed/django/contrib/auth/forms.py(314):         use_https=False,
0.65 /testbed/django/contrib/auth/forms.py(315):         token_generator=default_token_generator,
0.65 /testbed/django/contrib/auth/forms.py(316):         from_email=None,
0.65 /testbed/django/contrib/auth/forms.py(317):         request=None,
0.65 /testbed/django/contrib/auth/forms.py(318):         html_email_template_name=None,
0.65 /testbed/django/contrib/auth/forms.py(319):         extra_email_context=None,
0.65 /testbed/django/contrib/auth/forms.py(309):     def save(
0.65 /testbed/django/contrib/auth/forms.py(355): class SetPasswordForm(forms.Form):
0.65 /testbed/django/contrib/auth/forms.py(355): class SetPasswordForm(forms.Form):
0.65 /testbed/django/contrib/auth/forms.py(356):     """
0.65 /testbed/django/contrib/auth/forms.py(362):         "password_mismatch": _("The two password fields didn’t match."),
0.65 /testbed/django/contrib/auth/forms.py(361):     error_messages = {
0.65 /testbed/django/contrib/auth/forms.py(364):     new_password1 = forms.CharField(
0.65 /testbed/django/contrib/auth/forms.py(365):         label=_("New password"),
0.65 /testbed/django/contrib/auth/forms.py(366):         widget=forms.PasswordInput(attrs={"autocomplete": "new-password"}),
0.65 /testbed/django/contrib/auth/forms.py(367):         strip=False,
0.65 /testbed/django/contrib/auth/forms.py(368):         help_text=password_validation.password_validators_help_text_html(),
0.65 /testbed/django/contrib/auth/forms.py(364):     new_password1 = forms.CharField(
0.65 /testbed/django/contrib/auth/forms.py(370):     new_password2 = forms.CharField(
0.65 /testbed/django/contrib/auth/forms.py(371):         label=_("New password confirmation"),
0.65 /testbed/django/contrib/auth/forms.py(372):         strip=False,
0.65 /testbed/django/contrib/auth/forms.py(373):         widget=forms.PasswordInput(attrs={"autocomplete": "new-password"}),
0.65 /testbed/django/contrib/auth/forms.py(370):     new_password2 = forms.CharField(
0.65 /testbed/django/contrib/auth/forms.py(376):     def __init__(self, user, *args, **kwargs):
0.65 /testbed/django/contrib/auth/forms.py(380):     def clean_new_password2(self):
0.65 /testbed/django/contrib/auth/forms.py(391):     def save(self, commit=True):
0.65 /testbed/django/contrib/auth/forms.py(399): class PasswordChangeForm(SetPasswordForm):
0.65 /testbed/django/contrib/auth/forms.py(399): class PasswordChangeForm(SetPasswordForm):
0.65 /testbed/django/contrib/auth/forms.py(400):     """
0.65 /testbed/django/contrib/auth/forms.py(405):     error_messages = {
0.65 /testbed/django/contrib/auth/forms.py(406):         **SetPasswordForm.error_messages,
0.65 /testbed/django/contrib/auth/forms.py(405):     error_messages = {
0.65 /testbed/django/contrib/auth/forms.py(407):         "password_incorrect": _(
0.65 /testbed/django/contrib/auth/forms.py(408):             "Your old password was entered incorrectly. Please enter it again."
0.65 /testbed/django/contrib/auth/forms.py(407):         "password_incorrect": _(
0.65 /testbed/django/contrib/auth/forms.py(405):     error_messages = {
0.65 /testbed/django/contrib/auth/forms.py(411):     old_password = forms.CharField(
0.65 /testbed/django/contrib/auth/forms.py(412):         label=_("Old password"),
0.65 /testbed/django/contrib/auth/forms.py(413):         strip=False,
0.65 /testbed/django/contrib/auth/forms.py(414):         widget=forms.PasswordInput(
0.65 /testbed/django/contrib/auth/forms.py(415):             attrs={"autocomplete": "current-password", "autofocus": True}
0.65 /testbed/django/contrib/auth/forms.py(414):         widget=forms.PasswordInput(
0.65 /testbed/django/contrib/auth/forms.py(411):     old_password = forms.CharField(
0.65 /testbed/django/contrib/auth/forms.py(419):     field_order = ["old_password", "new_password1", "new_password2"]
0.65 /testbed/django/contrib/auth/forms.py(421):     def clean_old_password(self):
0.65 /testbed/django/contrib/auth/forms.py(434): class AdminPasswordChangeForm(forms.Form):
0.65 /testbed/django/contrib/auth/forms.py(434): class AdminPasswordChangeForm(forms.Form):
0.65 /testbed/django/contrib/auth/forms.py(435):     """
0.65 /testbed/django/contrib/auth/forms.py(440):         "password_mismatch": _("The two password fields didn’t match."),
0.65 /testbed/django/contrib/auth/forms.py(439):     error_messages = {
0.65 /testbed/django/contrib/auth/forms.py(442):     required_css_class = "required"
0.65 /testbed/django/contrib/auth/forms.py(443):     password1 = forms.CharField(
0.65 /testbed/django/contrib/auth/forms.py(444):         label=_("Password"),
0.65 /testbed/django/contrib/auth/forms.py(445):         widget=forms.PasswordInput(
0.65 /testbed/django/contrib/auth/forms.py(446):             attrs={"autocomplete": "new-password", "autofocus": True}
0.65 /testbed/django/contrib/auth/forms.py(445):         widget=forms.PasswordInput(
0.65 /testbed/django/contrib/auth/forms.py(448):         strip=False,
0.65 /testbed/django/contrib/auth/forms.py(449):         help_text=password_validation.password_validators_help_text_html(),
0.65 /testbed/django/contrib/auth/forms.py(443):     password1 = forms.CharField(
0.65 /testbed/django/contrib/auth/forms.py(451):     password2 = forms.CharField(
0.65 /testbed/django/contrib/auth/forms.py(452):         label=_("Password (again)"),
0.65 Creating test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
/testbed/django/contrib/auth/forms.py(453):         widget=forms.PasswordInput(attrs={"autocomplete": "new-password"}),
0.65 /testbed/django/contrib/auth/forms.py(454):         strip=False,
0.65 /testbed/django/contrib/auth/forms.py(455):         help_text=_("Enter the same password as before, for verification."),
0.65 /testbed/django/contrib/auth/forms.py(451):     password2 = forms.CharField(
0.65 /testbed/django/contrib/auth/forms.py(458):     def __init__(self, user, *args, **kwargs):
0.65 /testbed/django/contrib/auth/forms.py(462):     def clean_password2(self):
0.65 /testbed/django/contrib/auth/forms.py(473):     def save(self, commit=True):
0.65 /testbed/django/contrib/auth/forms.py(481):     @property
0.65 /testbed/django/contrib/auth/forms.py(482):     def changed_data(self):
Found 1 test(s).
Skipping setup of unused database(s): other.
Operations to perform:
  Synchronize unmigrated apps: auth, contenttypes, messages, sessions, staticfiles
  Apply all migrations: admin, sites
Synchronizing apps without migrations:
  Creating tables...
    Creating table django_content_type
    Creating table auth_permission
    Creating table auth_group
    Creating table auth_user
    Creating table django_session
    Running deferred SQL...
Running migrations:
  Applying admin.0001_initial... OK
  Applying admin.0002_logentry_remove_auto_add... OK
  Applying admin.0003_logentry_add_action_flag_choices... OK
  Applying sites.0001_initial... OK
  Applying sites.0002_alter_domain_unique... OK
System check identified no issues (0 silenced).
test_user_creation_form_m2m_not_saved (test_coverup_django__django-16333.UserCreationFormTest) ... FAIL

======================================================================
FAIL: test_user_creation_form_m2m_not_saved (test_coverup_django__django-16333.UserCreationFormTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/./tests/test_coverup_django__django-16333.py", line 28, in test_user_creation_form_m2m_not_saved
    self.assertEqual(user.groups.count(), 2)  # Correct behavior: should be 2 when the bug is fixed
AssertionError: 0 != 2

----------------------------------------------------------------------
Ran 1 test in 0.006s

FAILED (failures=1)
Destroying test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
0.79 /testbed/django/contrib/auth/forms.py(112):         super().__init__(*args, **kwargs)
0.79 /testbed/django/contrib/auth/forms.py(113):         if self._meta.model.USERNAME_FIELD in self.fields:
0.79 /testbed/django/contrib/auth/forms.py(116):             ] = True
0.79 /testbed/django/contrib/auth/forms.py(114):             self.fields[self._meta.model.USERNAME_FIELD].widget.attrs[
0.79 /testbed/django/contrib/auth/forms.py(115):                 "autofocus"
0.79 /testbed/django/contrib/auth/forms.py(114):             self.fields[self._meta.model.USERNAME_FIELD].widget.attrs[
0.79 /testbed/django/contrib/auth/forms.py(74):         return unicodedata.normalize("NFKC", super().to_python(value))
0.79 /testbed/django/contrib/auth/forms.py(119):         password1 = self.cleaned_data.get("password1")
0.79 /testbed/django/contrib/auth/forms.py(120):         password2 = self.cleaned_data.get("password2")
0.79 /testbed/django/contrib/auth/forms.py(121):         if password1 and password2 and password1 != password2:
0.79 /testbed/django/contrib/auth/forms.py(126):         return password2
0.79 /testbed/django/contrib/auth/forms.py(129):         super()._post_clean()
0.79 /testbed/django/contrib/auth/forms.py(132):         password = self.cleaned_data.get("password2")
0.79 /testbed/django/contrib/auth/forms.py(133):         if password:
0.79 /testbed/django/contrib/auth/forms.py(134):             try:
0.79 /testbed/django/contrib/auth/forms.py(135):                 password_validation.validate_password(password, self.instance)
0.79 /testbed/django/contrib/auth/forms.py(140):         user = super().save(commit=False)
0.79 /testbed/django/contrib/auth/forms.py(141):         user.set_password(self.cleaned_data["password1"])
0.79 /testbed/django/contrib/auth/forms.py(142):         if commit:
0.79 /testbed/django/contrib/auth/forms.py(143):             user.save()
0.80 /testbed/django/contrib/auth/forms.py(144):         return user
+ cat coverage.cover
{"/testbed/django/contrib/auth/forms.py": {"1": 1, "3": 1, "4": 1, "5": 1, "6": 1, "7": 1, "8": 1, "9": 1, "10": 1, "11": 1, "12": 1, "13": 1, "14": 1, "15": 1, "16": 1, "18": 1, "21": 1, "33": 2, "63": 2, "72": 2, "84": 2, "147": 2, "176": 2, "257": 2, "355": 2, "399": 2, "434": 2, "28": 0, "29": 0, "27": 0, "34": 1, "35": 1, "37": 1, "59": 1, "38": 0, "39": 0, "40": 0, "41": 0, "43": 0, "44": 0, "45": 0, "46": 0, "48": 0, "49": 0, "47": 0, "54": 0, "55": 0, "56": 0, "57": 0, "60": 0, "64": 1, "66": 1, "67": 1, "68": 1, "69": 1, "73": 1, "76": 1, "74": 1, "77": 9, "78": 3, "79": 3, "80": 3, "91": 1, "90": 1, "93": 2, "94": 1, "95": 1, "96": 1, "97": 1, "99": 2, "100": 1, "101": 1, "102": 1, "103": 1, "106": 2, "111": 1, "118": 1, "128": 1, "139": 1, "107": 1, "108": 1, "109": 1, "112": 1, "113": 1, "116": 1, "114": 2, "115": 1, "119": 1, "120": 1, "121": 1, "122": 0, "123": 0, "124": 0, "126": 1, "129": 1, "132": 1, "133": 1, "134": 1, "135": 1, "136": 0, "137": 0, "140": 1, "141": 1, "142": 1, "143": 1, "144": 1, "148": 2, "149": 1, "150": 2, "151": 1, "157": 2, "162": 1, "158": 1, "159": 1, "160": 1, "163": 0, "164": 0, "165": 0, "166": 0, "167": 0, "169": 0, "170": 0, "171": 0, "172": 0, "182": 1, "183": 2, "184": 1, "185": 1, "186": 1, "190": 2, "191": 1, "194": 1, "189": 1, "197": 1, "214": 1, "229": 1, "246": 1, "249": 1, "202": 0, "203": 0, "204": 0, "207": 0, "208": 0, "209": 0, "210": 0, "211": 0, "212": 0, "215": 0, "216": 0, "218": 0, "219": 0, "220": 0, "222": 0, "223": 0, "225": 0, "227": 0, "240": 0, "241": 0, "242": 0, "243": 0, "247": 0, "250": 0, "251": 0, "252": 0, "253": 0, "258": 2, "259": 1, "260": 1, "261": 1, "264": 1, "288": 1, "311": 1, "312": 1, "313": 1, "314": 1, "315": 1, "316": 1, "317": 1, "318": 1, "319": 1, "309": 1, "276": 0, "278": 0, "279": 0, "281": 0, "282": 0, "283": 0, "284": 0, "286": 0, "295": 0, "296": 0, "298": 0, "299": 0, "297": 0, "302": 0, "304": 0, "305": 0, "306": 0, "303": 0, "325": 0, "326": 0, "327": 0, "328": 0, "329": 0, "331": 0, "332": 0, "333": 0, "334": 0, "336": 0, "337": 0, "338": 0, "339": 0, "340": 0, "341": 0, "342": 0, "335": 0, "343": 0, "345": 0, "346": 0, "347": 0, "348": 0, "349": 0, "350": 0, "351": 0, "362": 1, "361": 1, "364": 2, "365": 1, "366": 1, "367": 1, "368": 1, "370": 2, "371": 1, "372": 1, "373": 1, "376": 1, "380": 1, "391": 1, "377": 0, "378": 0, "381": 0, "382": 0, "383": 0, "384": 0, "385": 0, "386": 0, "388": 0, "389": 0, "392": 0, "393": 0, "394": 0, "395": 0, "396": 0, "405": 3, "406": 1, "407": 2, "408": 1, "411": 2, "412": 1, "413": 1, "414": 2, "415": 1, "419": 1, "421": 1, "425": 0, "426": 0, "427": 0, "428": 0, "429": 0, "431": 0, "440": 1, "439": 1, "442": 1, "443": 2, "444": 1, "445": 2, "446": 1, "448": 1, "449": 1, "451": 2, "452": 1, "453": 1, "454": 1, "455": 1, "458": 1, "462": 1, "473": 1, "481": 1, "482": 1, "459": 0, "460": 0, "463": 0, "464": 0, "465": 0, "466": 0, "467": 0, "468": 0, "470": 0, "471": 0, "475": 0, "476": 0, "477": 0, "478": 0, "479": 0, "483": 0, "484": 0, "485": 0, "486": 0, "487": 0}}
+ git checkout 60a7bd89860e504c0c33b02c78edcac87f6d1b5a
Note: switching to '60a7bd89860e504c0c33b02c78edcac87f6d1b5a'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at 60a7bd8986 Refs #34119 -- Skipped test_callable_default_hidden_widget_value_not_overridden when JSONField is not supported.
+ git apply /root/pre_state.patch
error: unrecognized input
