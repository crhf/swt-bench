+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD f83b44075dafa429d59e8755aa47e15577cc49f9
+ sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen
+ locale-gen
Generating locales (this might take a while)...
  en_US.UTF-8... done
Generation complete.
+ export LANG=en_US.UTF-8
+ LANG=en_US.UTF-8
+ export LANGUAGE=en_US:en
+ LANGUAGE=en_US:en
+ export LC_ALL=en_US.UTF-8
+ LC_ALL=en_US.UTF-8
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
nothing to commit, working tree clean
+ git show
commit f83b44075dafa429d59e8755aa47e15577cc49f9
Author: Mariusz Felisiak <felisiak.mariusz@gmail.com>
Date:   Wed Jun 3 06:44:05 2020 +0200

    Refs #30913 -- Added system checks for covering indexes and unique constraints support.

diff --git a/django/db/models/base.py b/django/db/models/base.py
index d082c35917..fcda6e202f 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -1614,12 +1614,10 @@ class Model(metaclass=ModelBase):
             if not router.allow_migrate_model(db, cls):
                 continue
             connection = connections[db]
-            if (
+            if not (
                 connection.features.supports_partial_indexes or
                 'supports_partial_indexes' in cls._meta.required_db_features
-            ):
-                continue
-            if any(index.condition is not None for index in cls._meta.indexes):
+            ) and any(index.condition is not None for index in cls._meta.indexes):
                 errors.append(
                     checks.Warning(
                         '%s does not support indexes with conditions.'
@@ -1632,6 +1630,22 @@ class Model(metaclass=ModelBase):
                         id='models.W037',
                     )
                 )
+            if not (
+                connection.features.supports_covering_indexes or
+                'supports_covering_indexes' in cls._meta.required_db_features
+            ) and any(index.include for index in cls._meta.indexes):
+                errors.append(
+                    checks.Warning(
+                        '%s does not support indexes with non-key columns.'
+                        % connection.display_name,
+                        hint=(
+                            "Non-key columns will be ignored. Silence this "
+                            "warning if you don't care about it."
+                        ),
+                        obj=cls,
+                        id='models.W040',
+                    )
+                )
         fields = [field for index in cls._meta.indexes for field, _ in index.fields_orders]
         fields += [include for index in cls._meta.indexes for include in index.include]
         errors.extend(cls._check_local_fields(fields, 'indexes'))
@@ -1927,6 +1941,25 @@ class Model(metaclass=ModelBase):
                         id='models.W038',
                     )
                 )
+            if not (
+                connection.features.supports_covering_indexes or
+                'supports_covering_indexes' in cls._meta.required_db_features
+            ) and any(
+                isinstance(constraint, UniqueConstraint) and constraint.include
+                for constraint in cls._meta.constraints
+            ):
+                errors.append(
+                    checks.Warning(
+                        '%s does not support unique constraints with non-key '
+                        'columns.' % connection.display_name,
+                        hint=(
+                            "A constraint won't be created. Silence this "
+                            "warning if you don't care about it."
+                        ),
+                        obj=cls,
+                        id='models.W039',
+                    )
+                )
             fields = chain.from_iterable(
                 (*constraint.fields, *constraint.include)
                 for constraint in cls._meta.constraints if isinstance(constraint, UniqueConstraint)
diff --git a/docs/ref/checks.txt b/docs/ref/checks.txt
index d5aeca2d8c..792c3936f6 100644
--- a/docs/ref/checks.txt
+++ b/docs/ref/checks.txt
@@ -360,6 +360,10 @@ Models
 * **models.W037**: ``<database>`` does not support indexes with conditions.
 * **models.W038**: ``<database>`` does not support deferrable unique
   constraints.
+* **models.W039**: ``<database>`` does not support unique constraints with
+  non-key columns.
+* **models.W040**: ``<database>`` does not support indexes with non-key
+  columns.
 
 Security
 --------
diff --git a/tests/constraints/models.py b/tests/constraints/models.py
index 947d1b4ff1..1460673a18 100644
--- a/tests/constraints/models.py
+++ b/tests/constraints/models.py
@@ -88,6 +88,7 @@ class UniqueConstraintInclude(models.Model):
     class Meta:
         required_db_features = {
             'supports_table_check_constraints',
+            'supports_covering_indexes',
         }
         constraints = [
             models.UniqueConstraint(
diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py
index 374eff6028..7875705860 100644
--- a/tests/invalid_models_tests/test_models.py
+++ b/tests/invalid_models_tests/test_models.py
@@ -375,6 +375,51 @@ class IndexesTests(TestCase):
 
         self.assertEqual(Model.check(databases=self.databases), [])
 
+    def test_index_with_include(self):
+        class Model(models.Model):
+            age = models.IntegerField()
+
+            class Meta:
+                indexes = [
+                    models.Index(
+                        fields=['age'],
+                        name='index_age_include_id',
+                        include=['id'],
+                    ),
+                ]
+
+        errors = Model.check(databases=self.databases)
+        expected = [] if connection.features.supports_covering_indexes else [
+            Warning(
+                '%s does not support indexes with non-key columns.'
+                % connection.display_name,
+                hint=(
+                    "Non-key columns will be ignored. Silence this warning if "
+                    "you don't care about it."
+                ),
+                obj=Model,
+                id='models.W040',
+            )
+        ]
+        self.assertEqual(errors, expected)
+
+    def test_index_with_include_required_db_features(self):
+        class Model(models.Model):
+            age = models.IntegerField()
+
+            class Meta:
+                required_db_features = {'supports_covering_indexes'}
+                indexes = [
+                    models.Index(
+                        fields=['age'],
+                        name='index_age_include_id',
+                        include=['id'],
+                    ),
+                ]
+
+        self.assertEqual(Model.check(databases=self.databases), [])
+
+    @skipUnlessDBFeature('supports_covering_indexes')
     def test_index_include_pointing_to_missing_field(self):
         class Model(models.Model):
             class Meta:
@@ -390,6 +435,7 @@ class IndexesTests(TestCase):
             ),
         ])
 
+    @skipUnlessDBFeature('supports_covering_indexes')
     def test_index_include_pointing_to_m2m_field(self):
         class Model(models.Model):
             m2m = models.ManyToManyField('self')
@@ -406,6 +452,7 @@ class IndexesTests(TestCase):
             ),
         ])
 
+    @skipUnlessDBFeature('supports_covering_indexes')
     def test_index_include_pointing_to_non_local_field(self):
         class Parent(models.Model):
             field1 = models.IntegerField()
@@ -428,6 +475,7 @@ class IndexesTests(TestCase):
             ),
         ])
 
+    @skipUnlessDBFeature('supports_covering_indexes')
     def test_index_include_pointing_to_fk(self):
         class Target(models.Model):
             pass
@@ -1641,6 +1689,51 @@ class ConstraintsTests(TestCase):
 
         self.assertEqual(Model.check(databases=self.databases), [])
 
+    def test_unique_constraint_with_include(self):
+        class Model(models.Model):
+            age = models.IntegerField()
+
+            class Meta:
+                constraints = [
+                    models.UniqueConstraint(
+                        fields=['age'],
+                        name='unique_age_include_id',
+                        include=['id'],
+                    ),
+                ]
+
+        errors = Model.check(databases=self.databases)
+        expected = [] if connection.features.supports_covering_indexes else [
+            Warning(
+                '%s does not support unique constraints with non-key columns.'
+                % connection.display_name,
+                hint=(
+                    "A constraint won't be created. Silence this warning if "
+                    "you don't care about it."
+                ),
+                obj=Model,
+                id='models.W039',
+            ),
+        ]
+        self.assertEqual(errors, expected)
+
+    def test_unique_constraint_with_include_required_db_features(self):
+        class Model(models.Model):
+            age = models.IntegerField()
+
+            class Meta:
+                required_db_features = {'supports_covering_indexes'}
+                constraints = [
+                    models.UniqueConstraint(
+                        fields=['age'],
+                        name='unique_age_include_id',
+                        include=['id'],
+                    ),
+                ]
+
+        self.assertEqual(Model.check(databases=self.databases), [])
+
+    @skipUnlessDBFeature('supports_covering_indexes')
     def test_unique_constraint_include_pointing_to_missing_field(self):
         class Model(models.Model):
             class Meta:
@@ -1661,6 +1754,7 @@ class ConstraintsTests(TestCase):
             ),
         ])
 
+    @skipUnlessDBFeature('supports_covering_indexes')
     def test_unique_constraint_include_pointing_to_m2m_field(self):
         class Model(models.Model):
             m2m = models.ManyToManyField('self')
@@ -1683,6 +1777,7 @@ class ConstraintsTests(TestCase):
             ),
         ])
 
+    @skipUnlessDBFeature('supports_covering_indexes')
     def test_unique_constraint_include_pointing_to_non_local_field(self):
         class Parent(models.Model):
             field1 = models.IntegerField()
@@ -1709,6 +1804,7 @@ class ConstraintsTests(TestCase):
             ),
         ])
 
+    @skipUnlessDBFeature('supports_covering_indexes')
     def test_unique_constraint_include_pointing_to_fk(self):
         class Target(models.Model):
             pass
+ git diff f83b44075dafa429d59e8755aa47e15577cc49f9
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
Requirement already satisfied: asgiref>=3.2 in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.2) (3.4.1)
Requirement already satisfied: pytz in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.2) (2025.2)
Requirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.2) (0.4.4)
Requirement already satisfied: typing-extensions in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from asgiref>=3.2->Django==3.2) (4.1.1)
Installing collected packages: Django
  Attempting uninstall: Django
    Found existing installation: Django 3.2
    Uninstalling Django-3.2:
      Successfully uninstalled Django-3.2
  Running setup.py develop for Django
Successfully installed Django-3.2
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv
+ git apply -v -
<stdin>:15: trailing whitespace.
        
<stdin>:18: trailing whitespace.
        
Checking patch tests/test_coverup_django__django-13023.py...
Applied patch tests/test_coverup_django__django-13023.py cleanly.
warning: 2 lines add whitespace errors.
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/db/models/fields/__init__\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-13023
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(django/db/models/fields/__init__\\.py)']
0.14 /testbed/django/db/models/fields/__init__.py(1): import collections.abc
0.14 /testbed/django/db/models/fields/__init__.py(2): import copy
0.14 /testbed/django/db/models/fields/__init__.py(3): import datetime
0.14 /testbed/django/db/models/fields/__init__.py(4): import decimal
0.14 /testbed/django/db/models/fields/__init__.py(5): import operator
0.14 /testbed/django/db/models/fields/__init__.py(6): import uuid
0.15 /testbed/django/db/models/fields/__init__.py(7): import warnings
0.15 /testbed/django/db/models/fields/__init__.py(8): from base64 import b64decode, b64encode
0.15 /testbed/django/db/models/fields/__init__.py(9): from functools import partialmethod, total_ordering
0.15 /testbed/django/db/models/fields/__init__.py(11): from django import forms
0.26 /testbed/django/db/models/fields/__init__.py(12): from django.apps import apps
0.26 /testbed/django/db/models/fields/__init__.py(13): from django.conf import settings
0.26 /testbed/django/db/models/fields/__init__.py(14): from django.core import checks, exceptions, validators
0.27 /testbed/django/db/models/fields/__init__.py(15): from django.db import connection, connections, router
0.27 /testbed/django/db/models/fields/__init__.py(16): from django.db.models.constants import LOOKUP_SEP
0.27 /testbed/django/db/models/fields/__init__.py(17): from django.db.models.query_utils import DeferredAttribute, RegisterLookupMixin
0.27 /testbed/django/db/models/fields/__init__.py(18): from django.utils import timezone
0.27 /testbed/django/db/models/fields/__init__.py(19): from django.utils.datastructures import DictWrapper
0.27 /testbed/django/db/models/fields/__init__.py(20): from django.utils.dateparse import (
0.27 /testbed/django/db/models/fields/__init__.py(23): from django.utils.duration import duration_microseconds, duration_string
0.27 /testbed/django/db/models/fields/__init__.py(24): from django.utils.functional import Promise, cached_property
0.27 /testbed/django/db/models/fields/__init__.py(25): from django.utils.ipv6 import clean_ipv6_address
0.27 /testbed/django/db/models/fields/__init__.py(26): from django.utils.itercompat import is_iterable
0.27 /testbed/django/db/models/fields/__init__.py(27): from django.utils.text import capfirst
0.27 /testbed/django/db/models/fields/__init__.py(28): from django.utils.translation import gettext_lazy as _
0.27 /testbed/django/db/models/fields/__init__.py(31):     'AutoField', 'BLANK_CHOICE_DASH', 'BigAutoField', 'BigIntegerField',
0.27 /testbed/django/db/models/fields/__init__.py(32):     'BinaryField', 'BooleanField', 'CharField', 'CommaSeparatedIntegerField',
0.27 /testbed/django/db/models/fields/__init__.py(33):     'DateField', 'DateTimeField', 'DecimalField', 'DurationField',
0.27 /testbed/django/db/models/fields/__init__.py(34):     'EmailField', 'Empty', 'Field', 'FilePathField', 'FloatField',
0.27 /testbed/django/db/models/fields/__init__.py(35):     'GenericIPAddressField', 'IPAddressField', 'IntegerField', 'NOT_PROVIDED',
0.27 /testbed/django/db/models/fields/__init__.py(36):     'NullBooleanField', 'PositiveBigIntegerField', 'PositiveIntegerField',
0.27 /testbed/django/db/models/fields/__init__.py(37):     'PositiveSmallIntegerField', 'SlugField', 'SmallAutoField',
0.27 /testbed/django/db/models/fields/__init__.py(38):     'SmallIntegerField', 'TextField', 'TimeField', 'URLField', 'UUIDField',
0.27 /testbed/django/db/models/fields/__init__.py(42): class Empty:
0.27 /testbed/django/db/models/fields/__init__.py(42): class Empty:
0.27 /testbed/django/db/models/fields/__init__.py(43):     pass
0.27 /testbed/django/db/models/fields/__init__.py(46): class NOT_PROVIDED:
0.27 /testbed/django/db/models/fields/__init__.py(46): class NOT_PROVIDED:
0.27 /testbed/django/db/models/fields/__init__.py(47):     pass
0.27 /testbed/django/db/models/fields/__init__.py(52): BLANK_CHOICE_DASH = [("", "---------")]
0.27 /testbed/django/db/models/fields/__init__.py(55): def _load_field(app_label, model_name, field_name):
0.27 /testbed/django/db/models/fields/__init__.py(74): def _empty(of_cls):
0.27 /testbed/django/db/models/fields/__init__.py(80): def return_None():
0.27 /testbed/django/db/models/fields/__init__.py(84): @total_ordering
0.27 /testbed/django/db/models/fields/__init__.py(85): class Field(RegisterLookupMixin):
0.27 /testbed/django/db/models/fields/__init__.py(84): @total_ordering
0.27 /testbed/django/db/models/fields/__init__.py(86):     """Base class for all field types"""
0.27 /testbed/django/db/models/fields/__init__.py(90):     empty_strings_allowed = True
0.27 /testbed/django/db/models/fields/__init__.py(91):     empty_values = list(validators.EMPTY_VALUES)
0.27 /testbed/django/db/models/fields/__init__.py(96):     creation_counter = 0
0.27 /testbed/django/db/models/fields/__init__.py(97):     auto_creation_counter = -1
0.27 /testbed/django/db/models/fields/__init__.py(98):     default_validators = []  # Default set of validators
0.27 /testbed/django/db/models/fields/__init__.py(100):         'invalid_choice': _('Value %(value)r is not a valid choice.'),
0.27 /testbed/django/db/models/fields/__init__.py(101):         'null': _('This field cannot be null.'),
0.27 /testbed/django/db/models/fields/__init__.py(102):         'blank': _('This field cannot be blank.'),
0.27 /testbed/django/db/models/fields/__init__.py(103):         'unique': _('%(model_name)s with this %(field_label)s '
0.27 /testbed/django/db/models/fields/__init__.py(107):         'unique_for_date': _("%(field_label)s must be unique for "
0.27 /testbed/django/db/models/fields/__init__.py(110):     system_check_deprecated_details = None
0.27 /testbed/django/db/models/fields/__init__.py(111):     system_check_removed_details = None
0.27 /testbed/django/db/models/fields/__init__.py(114):     hidden = False
0.27 /testbed/django/db/models/fields/__init__.py(116):     many_to_many = None
0.27 /testbed/django/db/models/fields/__init__.py(117):     many_to_one = None
0.27 /testbed/django/db/models/fields/__init__.py(118):     one_to_many = None
0.27 /testbed/django/db/models/fields/__init__.py(119):     one_to_one = None
0.27 /testbed/django/db/models/fields/__init__.py(120):     related_model = None
0.27 /testbed/django/db/models/fields/__init__.py(122):     descriptor_class = DeferredAttribute
0.27 /testbed/django/db/models/fields/__init__.py(125):     def _description(self):
0.27 /testbed/django/db/models/fields/__init__.py(129):     description = property(_description)
0.27 /testbed/django/db/models/fields/__init__.py(131):     def __init__(self, verbose_name=None, name=None, primary_key=False,
0.27 /testbed/django/db/models/fields/__init__.py(132):                  max_length=None, unique=False, blank=False, null=False,
0.27 /testbed/django/db/models/fields/__init__.py(133):                  db_index=False, rel=None, default=NOT_PROVIDED, editable=True,
0.27 /testbed/django/db/models/fields/__init__.py(134):                  serialize=True, unique_for_date=None, unique_for_month=None,
0.27 /testbed/django/db/models/fields/__init__.py(135):                  unique_for_year=None, choices=None, help_text='', db_column=None,
0.27 /testbed/django/db/models/fields/__init__.py(136):                  db_tablespace=None, auto_created=False, validators=(),
0.27 /testbed/django/db/models/fields/__init__.py(137):                  error_messages=None):
0.27 /testbed/django/db/models/fields/__init__.py(178):     def __str__(self):
0.27 /testbed/django/db/models/fields/__init__.py(189):     def __repr__(self):
0.27 /testbed/django/db/models/fields/__init__.py(197):     def check(self, **kwargs):
0.27 /testbed/django/db/models/fields/__init__.py(208):     def _check_field_name(self):
0.27 /testbed/django/db/models/fields/__init__.py(240):     @classmethod
0.27 /testbed/django/db/models/fields/__init__.py(244):     def _check_choices(self):
0.27 /testbed/django/db/models/fields/__init__.py(308):     def _check_db_index(self):
0.27 /testbed/django/db/models/fields/__init__.py(320):     def _check_null_allowed_for_primary_keys(self):
0.27 /testbed/django/db/models/fields/__init__.py(338):     def _check_backend_specific_checks(self, databases=None, **kwargs):
0.27 /testbed/django/db/models/fields/__init__.py(348):     def _check_validators(self):
0.27 /testbed/django/db/models/fields/__init__.py(367):     def _check_deprecation_details(self):
0.27 /testbed/django/db/models/fields/__init__.py(395):     def get_col(self, alias, output_field=None):
0.27 /testbed/django/db/models/fields/__init__.py(404):     @cached_property
0.27 /testbed/django/db/models/fields/__init__.py(409):     def select_format(self, compiler, sql, params):
0.27 /testbed/django/db/models/fields/__init__.py(417):     def deconstruct(self):
0.27 /testbed/django/db/models/fields/__init__.py(508):     def clone(self):
0.27 /testbed/django/db/models/fields/__init__.py(516):     def __eq__(self, other):
0.27 /testbed/django/db/models/fields/__init__.py(522):     def __lt__(self, other):
0.27 /testbed/django/db/models/fields/__init__.py(528):     def __hash__(self):
0.27 /testbed/django/db/models/fields/__init__.py(531):     def __deepcopy__(self, memodict):
0.27 /testbed/django/db/models/fields/__init__.py(542):     def __copy__(self):
0.27 /testbed/django/db/models/fields/__init__.py(550):     def __reduce__(self):
0.27 /testbed/django/db/models/fields/__init__.py(570):     def get_pk_value_on_save(self, instance):
0.27 /testbed/django/db/models/fields/__init__.py(581):     def to_python(self, value):
0.27 /testbed/django/db/models/fields/__init__.py(589):     @cached_property
0.27 /testbed/django/db/models/fields/__init__.py(597):     def run_validators(self, value):
0.27 /testbed/django/db/models/fields/__init__.py(613):     def validate(self, value, model_instance):
0.27 /testbed/django/db/models/fields/__init__.py(644):     def clean(self, value, model_instance):
0.27 /testbed/django/db/models/fields/__init__.py(655):     def db_type_parameters(self, connection):
0.27 /testbed/django/db/models/fields/__init__.py(658):     def db_check(self, connection):
0.27 /testbed/django/db/models/fields/__init__.py(670):     def db_type(self, connection):
0.27 /testbed/django/db/models/fields/__init__.py(696):     def rel_db_type(self, connection):
0.27 /testbed/django/db/models/fields/__init__.py(704):     def cast_db_type(self, connection):
0.27 /testbed/django/db/models/fields/__init__.py(711):     def db_parameters(self, connection):
0.27 /testbed/django/db/models/fields/__init__.py(724):     def db_type_suffix(self, connection):
0.27 /testbed/django/db/models/fields/__init__.py(727):     def get_db_converters(self, connection):
0.27 /testbed/django/db/models/fields/__init__.py(732):     @property
0.27 /testbed/django/db/models/fields/__init__.py(736):     @property
0.27 /testbed/django/db/models/fields/__init__.py(740):     @property
0.27 /testbed/django/db/models/fields/__init__.py(748):     def set_attributes_from_name(self, name):
0.27 /testbed/django/db/models/fields/__init__.py(755):     def contribute_to_class(self, cls, name, private_only=False):
0.27 /testbed/django/db/models/fields/__init__.py(783):     def get_filter_kwargs_for_object(self, obj):
0.27 /testbed/django/db/models/fields/__init__.py(790):     def get_attname(self):
0.27 /testbed/django/db/models/fields/__init__.py(793):     def get_attname_column(self):
0.27 /testbed/django/db/models/fields/__init__.py(798):     def get_internal_type(self):
0.27 /testbed/django/db/models/fields/__init__.py(801):     def pre_save(self, model_instance, add):
0.27 /testbed/django/db/models/fields/__init__.py(805):     def get_prep_value(self, value):
0.27 /testbed/django/db/models/fields/__init__.py(811):     def get_db_prep_value(self, value, connection, prepared=False):
0.27 /testbed/django/db/models/fields/__init__.py(821):     def get_db_prep_save(self, value, connection):
0.27 /testbed/django/db/models/fields/__init__.py(825):     def has_default(self):
0.27 /testbed/django/db/models/fields/__init__.py(829):     def get_default(self):
0.27 /testbed/django/db/models/fields/__init__.py(833):     @cached_property
0.27 /testbed/django/db/models/fields/__init__.py(844):     def get_choices(self, include_blank=True, blank_choice=BLANK_CHOICE_DASH, limit_choices_to=None, ordering=()):
0.27 /testbed/django/db/models/fields/__init__.py(870):     def value_to_string(self, obj):
0.27 /testbed/django/db/models/fields/__init__.py(877):     def _get_flatchoices(self):
0.27 /testbed/django/db/models/fields/__init__.py(888):     flatchoices = property(_get_flatchoices)
0.27 /testbed/django/db/models/fields/__init__.py(890):     def save_form_data(self, instance, data):
0.27 /testbed/django/db/models/fields/__init__.py(893):     def formfield(self, form_class=None, choices_form_class=None, **kwargs):
0.27 /testbed/django/db/models/fields/__init__.py(931):     def value_from_object(self, obj):
0.27 /testbed/django/db/models/fields/__init__.py(936): class BooleanField(Field):
0.27 /testbed/django/db/models/fields/__init__.py(936): class BooleanField(Field):
0.27 /testbed/django/db/models/fields/__init__.py(937):     empty_strings_allowed = False
0.27 /testbed/django/db/models/fields/__init__.py(939):         'invalid': _('“%(value)s” value must be either True or False.'),
0.27 /testbed/django/db/models/fields/__init__.py(940):         'invalid_nullable': _('“%(value)s” value must be either True, False, or None.'),
0.27 /testbed/django/db/models/fields/__init__.py(942):     description = _("Boolean (Either True or False)")
0.27 /testbed/django/db/models/fields/__init__.py(944):     def get_internal_type(self):
0.27 /testbed/django/db/models/fields/__init__.py(947):     def to_python(self, value):
0.27 /testbed/django/db/models/fields/__init__.py(963):     def get_prep_value(self, value):
0.27 /testbed/django/db/models/fields/__init__.py(969):     def formfield(self, **kwargs):
0.27 /testbed/django/db/models/fields/__init__.py(982): class CharField(Field):
0.27 /testbed/django/db/models/fields/__init__.py(982): class CharField(Field):
0.27 /testbed/django/db/models/fields/__init__.py(983):     description = _("String (up to %(max_length)s)")
0.27 /testbed/django/db/models/fields/__init__.py(985):     def __init__(self, *args, **kwargs):
0.27 /testbed/django/db/models/fields/__init__.py(989):     def check(self, **kwargs):
0.27 /testbed/django/db/models/fields/__init__.py(995):     def _check_max_length_attribute(self, **kwargs):
0.27 /testbed/django/db/models/fields/__init__.py(1016):     def cast_db_type(self, connection):
0.27 /testbed/django/db/models/fields/__init__.py(1021):     def get_internal_type(self):
0.27 /testbed/django/db/models/fields/__init__.py(1024):     def to_python(self, value):
0.27 /testbed/django/db/models/fields/__init__.py(1029):     def get_prep_value(self, value):
0.27 /testbed/django/db/models/fields/__init__.py(1033):     def formfield(self, **kwargs):
0.27 /testbed/django/db/models/fields/__init__.py(1045): class CommaSeparatedIntegerField(CharField):
0.27 /testbed/django/db/models/fields/__init__.py(1045): class CommaSeparatedIntegerField(CharField):
0.27 /testbed/django/db/models/fields/__init__.py(1046):     default_validators = [validators.validate_comma_separated_integer_list]
0.27 /testbed/django/db/models/fields/__init__.py(1047):     description = _("Comma-separated integers")
0.27 /testbed/django/db/models/fields/__init__.py(1050):             'CommaSeparatedIntegerField is removed except for support in '
0.27 /testbed/django/db/models/fields/__init__.py(1054):             'Use CharField(validators=[validate_comma_separated_integer_list]) '
0.27 /testbed/django/db/models/fields/__init__.py(1057):         'id': 'fields.E901',
0.27 /testbed/django/db/models/fields/__init__.py(1061): class DateTimeCheckMixin:
0.27 /testbed/django/db/models/fields/__init__.py(1061): class DateTimeCheckMixin:
0.27 /testbed/django/db/models/fields/__init__.py(1063):     def check(self, **kwargs):
0.27 /testbed/django/db/models/fields/__init__.py(1070):     def _check_mutually_exclusive_options(self):
0.27 /testbed/django/db/models/fields/__init__.py(1089):     def _check_fix_default_value(self):
0.27 /testbed/django/db/models/fields/__init__.py(1093): class DateField(DateTimeCheckMixin, Field):
0.27 /testbed/django/db/models/fields/__init__.py(1093): class DateField(DateTimeCheckMixin, Field):
0.27 /testbed/django/db/models/fields/__init__.py(1094):     empty_strings_allowed = False
0.27 /testbed/django/db/models/fields/__init__.py(1096):         'invalid': _('“%(value)s” value has an invalid date format. It must be '
0.27 /testbed/django/db/models/fields/__init__.py(1098):         'invalid_date': _('“%(value)s” value has the correct format (YYYY-MM-DD) '
0.27 /testbed/django/db/models/fields/__init__.py(1101):     description = _("Date (without time)")
0.27 /testbed/django/db/models/fields/__init__.py(1104):                  auto_now_add=False, **kwargs):
0.27 /testbed/django/db/models/fields/__init__.py(1111):     def _check_fix_default_value(self):
0.27 /testbed/django/db/models/fields/__init__.py(1151):     def deconstruct(self):
0.27 /testbed/django/db/models/fields/__init__.py(1162):     def get_internal_type(self):
0.27 /testbed/django/db/models/fields/__init__.py(1165):     def to_python(self, value):
0.27 /testbed/django/db/models/fields/__init__.py(1195):     def pre_save(self, model_instance, add):
0.27 /testbed/django/db/models/fields/__init__.py(1203):     def contribute_to_class(self, cls, name, **kwargs):
0.27 /testbed/django/db/models/fields/__init__.py(1215):     def get_prep_value(self, value):
0.27 /testbed/django/db/models/fields/__init__.py(1219):     def get_db_prep_value(self, value, connection, prepared=False):
0.27 /testbed/django/db/models/fields/__init__.py(1225):     def value_to_string(self, obj):
0.27 /testbed/django/db/models/fields/__init__.py(1229):     def formfield(self, **kwargs):
0.27 /testbed/django/db/models/fields/__init__.py(1236): class DateTimeField(DateField):
0.27 /testbed/django/db/models/fields/__init__.py(1236): class DateTimeField(DateField):
0.27 /testbed/django/db/models/fields/__init__.py(1237):     empty_strings_allowed = False
0.27 /testbed/django/db/models/fields/__init__.py(1239):         'invalid': _('“%(value)s” value has an invalid format. It must be in '
0.27 /testbed/django/db/models/fields/__init__.py(1241):         'invalid_date': _("“%(value)s” value has the correct format "
0.27 /testbed/django/db/models/fields/__init__.py(1243):         'invalid_datetime': _('“%(value)s” value has the correct format '
0.27 /testbed/django/db/models/fields/__init__.py(1247):     description = _("Date (with time)")
0.27 /testbed/django/db/models/fields/__init__.py(1251):     def _check_fix_default_value(self):
0.27 /testbed/django/db/models/fields/__init__.py(1294):     def get_internal_type(self):
0.27 /testbed/django/db/models/fields/__init__.py(1297):     def to_python(self, value):
0.27 /testbed/django/db/models/fields/__init__.py(1345):     def pre_save(self, model_instance, add):
0.27 /testbed/django/db/models/fields/__init__.py(1356):     def get_prep_value(self, value):
0.27 /testbed/django/db/models/fields/__init__.py(1375):     def get_db_prep_value(self, value, connection, prepared=False):
0.27 /testbed/django/db/models/fields/__init__.py(1381):     def value_to_string(self, obj):
0.27 /testbed/django/db/models/fields/__init__.py(1385):     def formfield(self, **kwargs):
0.27 /testbed/django/db/models/fields/__init__.py(1392): class DecimalField(Field):
0.27 /testbed/django/db/models/fields/__init__.py(1392): class DecimalField(Field):
0.27 /testbed/django/db/models/fields/__init__.py(1393):     empty_strings_allowed = False
0.27 /testbed/django/db/models/fields/__init__.py(1395):         'invalid': _('“%(value)s” value must be a decimal number.'),
0.27 /testbed/django/db/models/fields/__init__.py(1397):     description = _("Decimal number")
0.27 /testbed/django/db/models/fields/__init__.py(1400):                  decimal_places=None, **kwargs):
0.27 /testbed/django/db/models/fields/__init__.py(1404):     def check(self, **kwargs):
0.27 /testbed/django/db/models/fields/__init__.py(1417):     def _check_decimal_places(self):
0.27 /testbed/django/db/models/fields/__init__.py(1441):     def _check_max_digits(self):
0.27 /testbed/django/db/models/fields/__init__.py(1465):     def _check_decimal_places_and_max_digits(self, **kwargs):
0.27 /testbed/django/db/models/fields/__init__.py(1476):     @cached_property
0.27 /testbed/django/db/models/fields/__init__.py(1482):     @cached_property
0.27 /testbed/django/db/models/fields/__init__.py(1486):     def deconstruct(self):
0.27 /testbed/django/db/models/fields/__init__.py(1494):     def get_internal_type(self):
0.27 /testbed/django/db/models/fields/__init__.py(1497):     def to_python(self, value):
0.27 /testbed/django/db/models/fields/__init__.py(1511):     def get_db_prep_save(self, value, connection):
0.27 /testbed/django/db/models/fields/__init__.py(1514):     def get_prep_value(self, value):
0.27 /testbed/django/db/models/fields/__init__.py(1518):     def formfield(self, **kwargs):
0.27 /testbed/django/db/models/fields/__init__.py(1527): class DurationField(Field):
0.27 /testbed/django/db/models/fields/__init__.py(1527): class DurationField(Field):
0.27 /testbed/django/db/models/fields/__init__.py(1533):     """
0.27 /testbed/django/db/models/fields/__init__.py(1534):     empty_strings_allowed = False
0.27 /testbed/django/db/models/fields/__init__.py(1536):         'invalid': _('“%(value)s” value has an invalid format. It must be in '
0.27 /testbed/django/db/models/fields/__init__.py(1539):     description = _("Duration")
0.27 /testbed/django/db/models/fields/__init__.py(1541):     def get_internal_type(self):
0.27 /testbed/django/db/models/fields/__init__.py(1544):     def to_python(self, value):
0.27 /testbed/django/db/models/fields/__init__.py(1563):     def get_db_prep_value(self, value, connection, prepared=False):
0.27 /testbed/django/db/models/fields/__init__.py(1570):     def get_db_converters(self, connection):
0.27 /testbed/django/db/models/fields/__init__.py(1576):     def value_to_string(self, obj):
0.27 /testbed/django/db/models/fields/__init__.py(1580):     def formfield(self, **kwargs):
0.27 /testbed/django/db/models/fields/__init__.py(1587): class EmailField(CharField):
0.27 /testbed/django/db/models/fields/__init__.py(1587): class EmailField(CharField):
0.27 /testbed/django/db/models/fields/__init__.py(1588):     default_validators = [validators.validate_email]
0.27 /testbed/django/db/models/fields/__init__.py(1589):     description = _("Email address")
0.27 /testbed/django/db/models/fields/__init__.py(1591):     def __init__(self, *args, **kwargs):
0.27 /testbed/django/db/models/fields/__init__.py(1596):     def deconstruct(self):
0.27 /testbed/django/db/models/fields/__init__.py(1602):     def formfield(self, **kwargs):
0.27 /testbed/django/db/models/fields/__init__.py(1611): class FilePathField(Field):
0.27 /testbed/django/db/models/fields/__init__.py(1611): class FilePathField(Field):
0.27 /testbed/django/db/models/fields/__init__.py(1612):     description = _("File path")
0.27 /testbed/django/db/models/fields/__init__.py(1615):                  recursive=False, allow_files=True, allow_folders=False, **kwargs):
0.27 /testbed/django/db/models/fields/__init__.py(1621):     def check(self, **kwargs):
0.27 /testbed/django/db/models/fields/__init__.py(1627):     def _check_allowing_files_or_folders(self, **kwargs):
0.27 /testbed/django/db/models/fields/__init__.py(1638):     def deconstruct(self):
0.27 /testbed/django/db/models/fields/__init__.py(1654):     def get_prep_value(self, value):
0.27 /testbed/django/db/models/fields/__init__.py(1660):     def formfield(self, **kwargs):
0.27 /testbed/django/db/models/fields/__init__.py(1671):     def get_internal_type(self):
0.27 /testbed/django/db/models/fields/__init__.py(1675): class FloatField(Field):
0.27 /testbed/django/db/models/fields/__init__.py(1675): class FloatField(Field):
0.27 /testbed/django/db/models/fields/__init__.py(1676):     empty_strings_allowed = False
0.27 /testbed/django/db/models/fields/__init__.py(1678):         'invalid': _('“%(value)s” value must be a float.'),
0.27 /testbed/django/db/models/fields/__init__.py(1680):     description = _("Floating point number")
0.27 /testbed/django/db/models/fields/__init__.py(1682):     def get_prep_value(self, value):
0.27 /testbed/django/db/models/fields/__init__.py(1693):     def get_internal_type(self):
0.27 /testbed/django/db/models/fields/__init__.py(1696):     def to_python(self, value):
0.27 /testbed/django/db/models/fields/__init__.py(1708):     def formfield(self, **kwargs):
0.27 /testbed/django/db/models/fields/__init__.py(1715): class IntegerField(Field):
0.27 /testbed/django/db/models/fields/__init__.py(1715): class IntegerField(Field):
0.27 /testbed/django/db/models/fields/__init__.py(1716):     empty_strings_allowed = False
0.27 /testbed/django/db/models/fields/__init__.py(1718):         'invalid': _('“%(value)s” value must be an integer.'),
0.27 /testbed/django/db/models/fields/__init__.py(1720):     description = _("Integer")
0.27 /testbed/django/db/models/fields/__init__.py(1722):     def check(self, **kwargs):
0.27 /testbed/django/db/models/fields/__init__.py(1728):     def _check_max_length_warning(self):
0.27 /testbed/django/db/models/fields/__init__.py(1740):     @cached_property
0.27 /testbed/django/db/models/fields/__init__.py(1769):     def get_prep_value(self, value):
0.27 /testbed/django/db/models/fields/__init__.py(1780):     def get_internal_type(self):
0.27 /testbed/django/db/models/fields/__init__.py(1783):     def to_python(self, value):
0.27 /testbed/django/db/models/fields/__init__.py(1795):     def formfield(self, **kwargs):
0.27 /testbed/django/db/models/fields/__init__.py(1802): class BigIntegerField(IntegerField):
0.27 /testbed/django/db/models/fields/__init__.py(1802): class BigIntegerField(IntegerField):
0.27 /testbed/django/db/models/fields/__init__.py(1803):     description = _("Big (8 byte) integer")
0.27 /testbed/django/db/models/fields/__init__.py(1804):     MAX_BIGINT = 9223372036854775807
0.27 /testbed/django/db/models/fields/__init__.py(1806):     def get_internal_type(self):
0.27 /testbed/django/db/models/fields/__init__.py(1809):     def formfield(self, **kwargs):
0.27 /testbed/django/db/models/fields/__init__.py(1817): class IPAddressField(Field):
0.27 /testbed/django/db/models/fields/__init__.py(1817): class IPAddressField(Field):
0.27 /testbed/django/db/models/fields/__init__.py(1818):     empty_strings_allowed = False
0.27 /testbed/django/db/models/fields/__init__.py(1819):     description = _("IPv4 address")
0.27 /testbed/django/db/models/fields/__init__.py(1822):             'IPAddressField has been removed except for support in '
0.27 /testbed/django/db/models/fields/__init__.py(1825):         'hint': 'Use GenericIPAddressField instead.',
0.27 /testbed/django/db/models/fields/__init__.py(1826):         'id': 'fields.E900',
0.27 /testbed/django/db/models/fields/__init__.py(1829):     def __init__(self, *args, **kwargs):
0.27 /testbed/django/db/models/fields/__init__.py(1833):     def deconstruct(self):
0.27 /testbed/django/db/models/fields/__init__.py(1838):     def get_prep_value(self, value):
0.27 /testbed/django/db/models/fields/__init__.py(1844):     def get_internal_type(self):
0.27 /testbed/django/db/models/fields/__init__.py(1848): class GenericIPAddressField(Field):
0.27 /testbed/django/db/models/fields/__init__.py(1848): class GenericIPAddressField(Field):
0.27 /testbed/django/db/models/fields/__init__.py(1849):     empty_strings_allowed = False
0.27 /testbed/django/db/models/fields/__init__.py(1850):     description = _("IP address")
0.27 /testbed/django/db/models/fields/__init__.py(1851):     default_error_messages = {}
0.27 /testbed/django/db/models/fields/__init__.py(1854):                  unpack_ipv4=False, *args, **kwargs):
0.27 /testbed/django/db/models/fields/__init__.py(1863):     def check(self, **kwargs):
0.27 /testbed/django/db/models/fields/__init__.py(1869):     def _check_blank_and_null_values(self, **kwargs):
0.27 /testbed/django/db/models/fields/__init__.py(1881):     def deconstruct(self):
0.27 /testbed/django/db/models/fields/__init__.py(1891):     def get_internal_type(self):
0.27 /testbed/django/db/models/fields/__init__.py(1894):     def to_python(self, value):
0.27 /testbed/django/db/models/fields/__init__.py(1904):     def get_db_prep_value(self, value, connection, prepared=False):
0.27 /testbed/django/db/models/fields/__init__.py(1909):     def get_prep_value(self, value):
0.27 /testbed/django/db/models/fields/__init__.py(1920):     def formfield(self, **kwargs):
0.27 /testbed/django/db/models/fields/__init__.py(1928): class NullBooleanField(BooleanField):
0.27 /testbed/django/db/models/fields/__init__.py(1928): class NullBooleanField(BooleanField):
0.27 /testbed/django/db/models/fields/__init__.py(1930):         'invalid': _('“%(value)s” value must be either None, True or False.'),
0.27 /testbed/django/db/models/fields/__init__.py(1931):         'invalid_nullable': _('“%(value)s” value must be either None, True or False.'),
0.27 /testbed/django/db/models/fields/__init__.py(1933):     description = _("Boolean (Either True, False or None)")
0.27 /testbed/django/db/models/fields/__init__.py(1936):             'NullBooleanField is deprecated. Support for it (except in '
0.27 /testbed/django/db/models/fields/__init__.py(1939):         'hint': 'Use BooleanField(null=True) instead.',
0.27 /testbed/django/db/models/fields/__init__.py(1940):         'id': 'fields.W903',
0.27 /testbed/django/db/models/fields/__init__.py(1943):     def __init__(self, *args, **kwargs):
0.27 /testbed/django/db/models/fields/__init__.py(1948):     def deconstruct(self):
0.27 /testbed/django/db/models/fields/__init__.py(1954):     def get_internal_type(self):
0.27 /testbed/django/db/models/fields/__init__.py(1958): class PositiveIntegerRelDbTypeMixin:
0.27 /testbed/django/db/models/fields/__init__.py(1958): class PositiveIntegerRelDbTypeMixin:
0.27 /testbed/django/db/models/fields/__init__.py(1960):     def rel_db_type(self, connection):
0.27 /testbed/django/db/models/fields/__init__.py(1975): class PositiveBigIntegerField(PositiveIntegerRelDbTypeMixin, IntegerField):
0.27 /testbed/django/db/models/fields/__init__.py(1975): class PositiveBigIntegerField(PositiveIntegerRelDbTypeMixin, IntegerField):
0.27 /testbed/django/db/models/fields/__init__.py(1976):     description = _('Positive big integer')
0.27 /testbed/django/db/models/fields/__init__.py(1978):     def get_internal_type(self):
0.27 /testbed/django/db/models/fields/__init__.py(1981):     def formfield(self, **kwargs):
0.27 /testbed/django/db/models/fields/__init__.py(1988): class PositiveIntegerField(PositiveIntegerRelDbTypeMixin, IntegerField):
0.27 /testbed/django/db/models/fields/__init__.py(1988): class PositiveIntegerField(PositiveIntegerRelDbTypeMixin, IntegerField):
0.27 /testbed/django/db/models/fields/__init__.py(1989):     description = _("Positive integer")
0.27 /testbed/django/db/models/fields/__init__.py(1991):     def get_internal_type(self):
0.27 /testbed/django/db/models/fields/__init__.py(1994):     def formfield(self, **kwargs):
0.27 /testbed/django/db/models/fields/__init__.py(2001): class PositiveSmallIntegerField(PositiveIntegerRelDbTypeMixin, IntegerField):
0.27 /testbed/django/db/models/fields/__init__.py(2001): class PositiveSmallIntegerField(PositiveIntegerRelDbTypeMixin, IntegerField):
0.27 /testbed/django/db/models/fields/__init__.py(2002):     description = _("Positive small integer")
0.27 /testbed/django/db/models/fields/__init__.py(2004):     def get_internal_type(self):
0.27 /testbed/django/db/models/fields/__init__.py(2007):     def formfield(self, **kwargs):
0.27 /testbed/django/db/models/fields/__init__.py(2014): class SlugField(CharField):
0.27 /testbed/django/db/models/fields/__init__.py(2014): class SlugField(CharField):
0.27 /testbed/django/db/models/fields/__init__.py(2015):     default_validators = [validators.validate_slug]
0.27 /testbed/django/db/models/fields/__init__.py(2016):     description = _("Slug (up to %(max_length)s)")
0.27 /testbed/django/db/models/fields/__init__.py(2018):     def __init__(self, *args, max_length=50, db_index=True, allow_unicode=False, **kwargs):
0.27 /testbed/django/db/models/fields/__init__.py(2024):     def deconstruct(self):
0.27 /testbed/django/db/models/fields/__init__.py(2036):     def get_internal_type(self):
0.27 /testbed/django/db/models/fields/__init__.py(2039):     def formfield(self, **kwargs):
0.27 /testbed/django/db/models/fields/__init__.py(2047): class SmallIntegerField(IntegerField):
0.27 /testbed/django/db/models/fields/__init__.py(2047): class SmallIntegerField(IntegerField):
0.27 /testbed/django/db/models/fields/__init__.py(2048):     description = _("Small integer")
0.27 /testbed/django/db/models/fields/__init__.py(2050):     def get_internal_type(self):
0.27 /testbed/django/db/models/fields/__init__.py(2054): class TextField(Field):
0.27 /testbed/django/db/models/fields/__init__.py(2054): class TextField(Field):
0.27 /testbed/django/db/models/fields/__init__.py(2055):     description = _("Text")
0.27 /testbed/django/db/models/fields/__init__.py(2057):     def get_internal_type(self):
0.27 /testbed/django/db/models/fields/__init__.py(2060):     def to_python(self, value):
0.27 /testbed/django/db/models/fields/__init__.py(2065):     def get_prep_value(self, value):
0.27 /testbed/django/db/models/fields/__init__.py(2069):     def formfield(self, **kwargs):
0.27 /testbed/django/db/models/fields/__init__.py(2080): class TimeField(DateTimeCheckMixin, Field):
0.27 /testbed/django/db/models/fields/__init__.py(2080): class TimeField(DateTimeCheckMixin, Field):
0.27 /testbed/django/db/models/fields/__init__.py(2081):     empty_strings_allowed = False
0.27 /testbed/django/db/models/fields/__init__.py(2083):         'invalid': _('“%(value)s” value has an invalid format. It must be in '
0.27 /testbed/django/db/models/fields/__init__.py(2085):         'invalid_time': _('“%(value)s” value has the correct format '
0.27 /testbed/django/db/models/fields/__init__.py(2088):     description = _("Time")
0.27 /testbed/django/db/models/fields/__init__.py(2091):                  auto_now_add=False, **kwargs):
0.27 /testbed/django/db/models/fields/__init__.py(2098):     def _check_fix_default_value(self):
0.27 /testbed/django/db/models/fields/__init__.py(2141):     def deconstruct(self):
0.27 /testbed/django/db/models/fields/__init__.py(2152):     def get_internal_type(self):
0.27 /testbed/django/db/models/fields/__init__.py(2155):     def to_python(self, value):
0.27 /testbed/django/db/models/fields/__init__.py(2183):     def pre_save(self, model_instance, add):
0.27 /testbed/django/db/models/fields/__init__.py(2191):     def get_prep_value(self, value):
0.27 /testbed/django/db/models/fields/__init__.py(2195):     def get_db_prep_value(self, value, connection, prepared=False):
0.27 /testbed/django/db/models/fields/__init__.py(2201):     def value_to_string(self, obj):
0.27 /testbed/django/db/models/fields/__init__.py(2205):     def formfield(self, **kwargs):
0.27 /testbed/django/db/models/fields/__init__.py(2212): class URLField(CharField):
0.27 /testbed/django/db/models/fields/__init__.py(2212): class URLField(CharField):
0.27 /testbed/django/db/models/fields/__init__.py(2213):     default_validators = [validators.URLValidator()]
0.27 /testbed/django/db/models/fields/__init__.py(2214):     description = _("URL")
0.27 /testbed/django/db/models/fields/__init__.py(2216):     def __init__(self, verbose_name=None, name=None, **kwargs):
0.27 /testbed/django/db/models/fields/__init__.py(2220):     def deconstruct(self):
0.27 /testbed/django/db/models/fields/__init__.py(2226):     def formfield(self, **kwargs):
0.27 /testbed/django/db/models/fields/__init__.py(2235): class BinaryField(Field):
0.27 /testbed/django/db/models/fields/__init__.py(2235): class BinaryField(Field):
0.27 /testbed/django/db/models/fields/__init__.py(2236):     description = _("Raw binary data")
0.27 /testbed/django/db/models/fields/__init__.py(2237):     empty_values = [None, b'']
0.27 /testbed/django/db/models/fields/__init__.py(2239):     def __init__(self, *args, **kwargs):
0.27 /testbed/django/db/models/fields/__init__.py(2245):     def check(self, **kwargs):
0.27 /testbed/django/db/models/fields/__init__.py(2248):     def _check_str_default_value(self):
0.27 /testbed/django/db/models/fields/__init__.py(2260):     def deconstruct(self):
0.27 /testbed/django/db/models/fields/__init__.py(2268):     def get_internal_type(self):
0.27 /testbed/django/db/models/fields/__init__.py(2271):     def get_placeholder(self, value, compiler, connection):
0.27 /testbed/django/db/models/fields/__init__.py(2274):     def get_default(self):
0.27 /testbed/django/db/models/fields/__init__.py(2282):     def get_db_prep_value(self, value, connection, prepared=False):
0.27 /testbed/django/db/models/fields/__init__.py(2288):     def value_to_string(self, obj):
0.27 /testbed/django/db/models/fields/__init__.py(2292):     def to_python(self, value):
0.27 /testbed/django/db/models/fields/__init__.py(2299): class UUIDField(Field):
0.27 /testbed/django/db/models/fields/__init__.py(2299): class UUIDField(Field):
0.27 /testbed/django/db/models/fields/__init__.py(2301):         'invalid': _('“%(value)s” is not a valid UUID.'),
0.27 /testbed/django/db/models/fields/__init__.py(2303):     description = _('Universally unique identifier')
0.27 /testbed/django/db/models/fields/__init__.py(2304):     empty_strings_allowed = False
0.27 /testbed/django/db/models/fields/__init__.py(2306):     def __init__(self, verbose_name=None, **kwargs):
0.27 /testbed/django/db/models/fields/__init__.py(2310):     def deconstruct(self):
0.27 /testbed/django/db/models/fields/__init__.py(2315):     def get_internal_type(self):
0.27 /testbed/django/db/models/fields/__init__.py(2318):     def get_prep_value(self, value):
0.27 /testbed/django/db/models/fields/__init__.py(2322):     def get_db_prep_value(self, value, connection, prepared=False):
0.27 /testbed/django/db/models/fields/__init__.py(2332):     def to_python(self, value):
0.27 /testbed/django/db/models/fields/__init__.py(2345):     def formfield(self, **kwargs):
0.27 /testbed/django/db/models/fields/__init__.py(2352): class AutoFieldMixin:
0.27 /testbed/django/db/models/fields/__init__.py(2352): class AutoFieldMixin:
0.27 /testbed/django/db/models/fields/__init__.py(2353):     db_returning = True
0.27 /testbed/django/db/models/fields/__init__.py(2355):     def __init__(self, *args, **kwargs):
0.27 /testbed/django/db/models/fields/__init__.py(2359):     def check(self, **kwargs):
0.27 /testbed/django/db/models/fields/__init__.py(2365):     def _check_primary_key(self):
0.27 /testbed/django/db/models/fields/__init__.py(2377):     def deconstruct(self):
0.27 /testbed/django/db/models/fields/__init__.py(2383):     def validate(self, value, model_instance):
0.27 /testbed/django/db/models/fields/__init__.py(2386):     def get_db_prep_value(self, value, connection, prepared=False):
0.27 /testbed/django/db/models/fields/__init__.py(2392):     def contribute_to_class(self, cls, name, **kwargs):
0.27 /testbed/django/db/models/fields/__init__.py(2400):     def formfield(self, **kwargs):
0.27 /testbed/django/db/models/fields/__init__.py(2404): class AutoFieldMeta(type):
0.27 /testbed/django/db/models/fields/__init__.py(2404): class AutoFieldMeta(type):
0.27 /testbed/django/db/models/fields/__init__.py(2419):     """
0.27 /testbed/django/db/models/fields/__init__.py(2421):     @property
0.27 /testbed/django/db/models/fields/__init__.py(2425):     def __instancecheck__(self, instance):
0.27 /testbed/django/db/models/fields/__init__.py(2428):     def __subclasscheck__(self, subclass):
0.27 /testbed/django/db/models/fields/__init__.py(2432): class AutoField(AutoFieldMixin, IntegerField, metaclass=AutoFieldMeta):
0.27 /testbed/django/db/models/fields/__init__.py(2432): class AutoField(AutoFieldMixin, IntegerField, metaclass=AutoFieldMeta):
0.27 /testbed/django/db/models/fields/__init__.py(2434):     def get_internal_type(self):
0.27 /testbed/django/db/models/fields/__init__.py(2437):     def rel_db_type(self, connection):
0.27 /testbed/django/db/models/fields/__init__.py(2441): class BigAutoField(AutoFieldMixin, BigIntegerField):
0.27 /testbed/django/db/models/fields/__init__.py(2441): class BigAutoField(AutoFieldMixin, BigIntegerField):
0.27 /testbed/django/db/models/fields/__init__.py(2443):     def get_internal_type(self):
0.27 /testbed/django/db/models/fields/__init__.py(2446):     def rel_db_type(self, connection):
0.27 /testbed/django/db/models/fields/__init__.py(2450): class SmallAutoField(AutoFieldMixin, SmallIntegerField):
0.27 /testbed/django/db/models/fields/__init__.py(2450): class SmallAutoField(AutoFieldMixin, SmallIntegerField):
0.27 /testbed/django/db/models/fields/__init__.py(2452):     def get_internal_type(self):
0.27 /testbed/django/db/models/fields/__init__.py(2455):     def rel_db_type(self, connection):
0.27 /testbed/django/db/models/fields/__init__.py(138):         self.name = name
0.27 /testbed/django/db/models/fields/__init__.py(139):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.27 /testbed/django/db/models/fields/__init__.py(140):         self._verbose_name = verbose_name  # Store original for deconstruction
0.27 /testbed/django/db/models/fields/__init__.py(141):         self.primary_key = primary_key
0.27 /testbed/django/db/models/fields/__init__.py(142):         self.max_length, self._unique = max_length, unique
0.27 /testbed/django/db/models/fields/__init__.py(143):         self.blank, self.null = blank, null
0.27 /testbed/django/db/models/fields/__init__.py(144):         self.remote_field = rel
0.27 /testbed/django/db/models/fields/__init__.py(145):         self.is_relation = self.remote_field is not None
0.27 /testbed/django/db/models/fields/__init__.py(146):         self.default = default
0.27 /testbed/django/db/models/fields/__init__.py(147):         self.editable = editable
0.27 /testbed/django/db/models/fields/__init__.py(148):         self.serialize = serialize
0.27 /testbed/django/db/models/fields/__init__.py(149):         self.unique_for_date = unique_for_date
0.27 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_month = unique_for_month
0.27 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_year = unique_for_year
0.27 /testbed/django/db/models/fields/__init__.py(152):         if isinstance(choices, collections.abc.Iterator):
0.27 /testbed/django/db/models/fields/__init__.py(154):         self.choices = choices
0.27 /testbed/django/db/models/fields/__init__.py(155):         self.help_text = help_text
0.27 /testbed/django/db/models/fields/__init__.py(156):         self.db_index = db_index
0.27 /testbed/django/db/models/fields/__init__.py(157):         self.db_column = db_column
0.27 /testbed/django/db/models/fields/__init__.py(158):         self._db_tablespace = db_tablespace
0.27 /testbed/django/db/models/fields/__init__.py(159):         self.auto_created = auto_created
0.27 /testbed/django/db/models/fields/__init__.py(162):         if auto_created:
0.27 /testbed/django/db/models/fields/__init__.py(166):             self.creation_counter = Field.creation_counter
0.27 /testbed/django/db/models/fields/__init__.py(167):             Field.creation_counter += 1
0.27 /testbed/django/db/models/fields/__init__.py(169):         self._validators = list(validators)  # Store for deconstruction later
0.27 /testbed/django/db/models/fields/__init__.py(171):         messages = {}
0.27 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.27 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.27 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.27 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.27 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.27 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.27 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.27 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.27 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.27 /testbed/django/db/models/fields/__init__.py(174):         messages.update(error_messages or {})
0.27 /testbed/django/db/models/fields/__init__.py(175):         self._error_messages = error_messages  # Store for deconstruction later
0.27 /testbed/django/db/models/fields/__init__.py(176):         self.error_messages = messages
0.27 /testbed/django/db/models/fields/__init__.py(138):         self.name = name
0.27 /testbed/django/db/models/fields/__init__.py(139):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.27 /testbed/django/db/models/fields/__init__.py(140):         self._verbose_name = verbose_name  # Store original for deconstruction
0.27 /testbed/django/db/models/fields/__init__.py(141):         self.primary_key = primary_key
0.27 /testbed/django/db/models/fields/__init__.py(142):         self.max_length, self._unique = max_length, unique
0.27 /testbed/django/db/models/fields/__init__.py(143):         self.blank, self.null = blank, null
0.27 /testbed/django/db/models/fields/__init__.py(144):         self.remote_field = rel
0.27 /testbed/django/db/models/fields/__init__.py(145):         self.is_relation = self.remote_field is not None
0.27 /testbed/django/db/models/fields/__init__.py(146):         self.default = default
0.27 /testbed/django/db/models/fields/__init__.py(147):         self.editable = editable
0.27 /testbed/django/db/models/fields/__init__.py(148):         self.serialize = serialize
0.27 /testbed/django/db/models/fields/__init__.py(149):         self.unique_for_date = unique_for_date
0.27 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_month = unique_for_month
0.27 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_year = unique_for_year
0.27 /testbed/django/db/models/fields/__init__.py(152):         if isinstance(choices, collections.abc.Iterator):
0.27 /testbed/django/db/models/fields/__init__.py(154):         self.choices = choices
0.27 /testbed/django/db/models/fields/__init__.py(155):         self.help_text = help_text
0.27 /testbed/django/db/models/fields/__init__.py(156):         self.db_index = db_index
0.27 /testbed/django/db/models/fields/__init__.py(157):         self.db_column = db_column
0.27 /testbed/django/db/models/fields/__init__.py(158):         self._db_tablespace = db_tablespace
0.27 /testbed/django/db/models/fields/__init__.py(159):         self.auto_created = auto_created
0.27 /testbed/django/db/models/fields/__init__.py(162):         if auto_created:
0.27 /testbed/django/db/models/fields/__init__.py(166):             self.creation_counter = Field.creation_counter
0.27 /testbed/django/db/models/fields/__init__.py(167):             Field.creation_counter += 1
0.27 /testbed/django/db/models/fields/__init__.py(169):         self._validators = list(validators)  # Store for deconstruction later
0.27 /testbed/django/db/models/fields/__init__.py(171):         messages = {}
0.27 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.27 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.27 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.27 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.27 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.27 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.27 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.27 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.27 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.27 /testbed/django/db/models/fields/__init__.py(174):         messages.update(error_messages or {})
0.27 /testbed/django/db/models/fields/__init__.py(175):         self._error_messages = error_messages  # Store for deconstruction later
0.27 /testbed/django/db/models/fields/__init__.py(176):         self.error_messages = messages
0.27 /testbed/django/db/models/fields/__init__.py(138):         self.name = name
0.27 /testbed/django/db/models/fields/__init__.py(139):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.27 /testbed/django/db/models/fields/__init__.py(140):         self._verbose_name = verbose_name  # Store original for deconstruction
0.27 /testbed/django/db/models/fields/__init__.py(141):         self.primary_key = primary_key
0.27 /testbed/django/db/models/fields/__init__.py(142):         self.max_length, self._unique = max_length, unique
0.27 /testbed/django/db/models/fields/__init__.py(143):         self.blank, self.null = blank, null
0.27 /testbed/django/db/models/fields/__init__.py(144):         self.remote_field = rel
0.27 /testbed/django/db/models/fields/__init__.py(145):         self.is_relation = self.remote_field is not None
0.27 /testbed/django/db/models/fields/__init__.py(146):         self.default = default
0.27 /testbed/django/db/models/fields/__init__.py(147):         self.editable = editable
0.27 /testbed/django/db/models/fields/__init__.py(148):         self.serialize = serialize
0.27 /testbed/django/db/models/fields/__init__.py(149):         self.unique_for_date = unique_for_date
0.27 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_month = unique_for_month
0.27 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_year = unique_for_year
0.27 /testbed/django/db/models/fields/__init__.py(152):         if isinstance(choices, collections.abc.Iterator):
0.27 /testbed/django/db/models/fields/__init__.py(154):         self.choices = choices
0.27 /testbed/django/db/models/fields/__init__.py(155):         self.help_text = help_text
0.27 /testbed/django/db/models/fields/__init__.py(156):         self.db_index = db_index
0.27 /testbed/django/db/models/fields/__init__.py(157):         self.db_column = db_column
0.27 /testbed/django/db/models/fields/__init__.py(158):         self._db_tablespace = db_tablespace
0.27 /testbed/django/db/models/fields/__init__.py(159):         self.auto_created = auto_created
0.27 /testbed/django/db/models/fields/__init__.py(162):         if auto_created:
0.27 /testbed/django/db/models/fields/__init__.py(166):             self.creation_counter = Field.creation_counter
0.27 /testbed/django/db/models/fields/__init__.py(167):             Field.creation_counter += 1
0.27 /testbed/django/db/models/fields/__init__.py(169):         self._validators = list(validators)  # Store for deconstruction later
0.27 /testbed/django/db/models/fields/__init__.py(171):         messages = {}
0.27 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.27 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.27 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.27 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.27 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.27 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.27 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.27 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.27 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.27 /testbed/django/db/models/fields/__init__.py(174):         messages.update(error_messages or {})
0.27 /testbed/django/db/models/fields/__init__.py(175):         self._error_messages = error_messages  # Store for deconstruction later
0.27 /testbed/django/db/models/fields/__init__.py(176):         self.error_messages = messages
0.28 /testbed/django/db/models/fields/__init__.py(138):         self.name = name
0.28 /testbed/django/db/models/fields/__init__.py(139):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.28 /testbed/django/db/models/fields/__init__.py(140):         self._verbose_name = verbose_name  # Store original for deconstruction
0.28 /testbed/django/db/models/fields/__init__.py(141):         self.primary_key = primary_key
0.28 /testbed/django/db/models/fields/__init__.py(142):         self.max_length, self._unique = max_length, unique
0.28 /testbed/django/db/models/fields/__init__.py(143):         self.blank, self.null = blank, null
0.28 /testbed/django/db/models/fields/__init__.py(144):         self.remote_field = rel
0.28 /testbed/django/db/models/fields/__init__.py(145):         self.is_relation = self.remote_field is not None
0.28 /testbed/django/db/models/fields/__init__.py(146):         self.default = default
0.28 /testbed/django/db/models/fields/__init__.py(147):         self.editable = editable
0.28 /testbed/django/db/models/fields/__init__.py(148):         self.serialize = serialize
0.28 /testbed/django/db/models/fields/__init__.py(149):         self.unique_for_date = unique_for_date
0.28 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_month = unique_for_month
0.28 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_year = unique_for_year
0.28 /testbed/django/db/models/fields/__init__.py(152):         if isinstance(choices, collections.abc.Iterator):
0.28 /testbed/django/db/models/fields/__init__.py(154):         self.choices = choices
0.28 /testbed/django/db/models/fields/__init__.py(155):         self.help_text = help_text
0.28 /testbed/django/db/models/fields/__init__.py(156):         self.db_index = db_index
0.28 /testbed/django/db/models/fields/__init__.py(157):         self.db_column = db_column
0.28 /testbed/django/db/models/fields/__init__.py(158):         self._db_tablespace = db_tablespace
0.28 /testbed/django/db/models/fields/__init__.py(159):         self.auto_created = auto_created
0.28 /testbed/django/db/models/fields/__init__.py(162):         if auto_created:
0.28 /testbed/django/db/models/fields/__init__.py(166):             self.creation_counter = Field.creation_counter
0.28 /testbed/django/db/models/fields/__init__.py(167):             Field.creation_counter += 1
0.28 /testbed/django/db/models/fields/__init__.py(169):         self._validators = list(validators)  # Store for deconstruction later
0.28 /testbed/django/db/models/fields/__init__.py(171):         messages = {}
0.28 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.28 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.28 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.28 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.28 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.28 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.28 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.28 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.28 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.28 /testbed/django/db/models/fields/__init__.py(174):         messages.update(error_messages or {})
0.28 /testbed/django/db/models/fields/__init__.py(175):         self._error_messages = error_messages  # Store for deconstruction later
0.28 /testbed/django/db/models/fields/__init__.py(176):         self.error_messages = messages
0.28 /testbed/django/db/models/fields/__init__.py(1105):         self.auto_now, self.auto_now_add = auto_now, auto_now_add
0.28 /testbed/django/db/models/fields/__init__.py(1106):         if auto_now or auto_now_add:
0.28 /testbed/django/db/models/fields/__init__.py(1109):         super().__init__(verbose_name, name, **kwargs)
0.28 /testbed/django/db/models/fields/__init__.py(138):         self.name = name
0.28 /testbed/django/db/models/fields/__init__.py(139):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.28 /testbed/django/db/models/fields/__init__.py(140):         self._verbose_name = verbose_name  # Store original for deconstruction
0.28 /testbed/django/db/models/fields/__init__.py(141):         self.primary_key = primary_key
0.28 /testbed/django/db/models/fields/__init__.py(142):         self.max_length, self._unique = max_length, unique
0.28 /testbed/django/db/models/fields/__init__.py(143):         self.blank, self.null = blank, null
0.28 /testbed/django/db/models/fields/__init__.py(144):         self.remote_field = rel
0.28 /testbed/django/db/models/fields/__init__.py(145):         self.is_relation = self.remote_field is not None
0.28 /testbed/django/db/models/fields/__init__.py(146):         self.default = default
0.28 /testbed/django/db/models/fields/__init__.py(147):         self.editable = editable
0.28 /testbed/django/db/models/fields/__init__.py(148):         self.serialize = serialize
0.28 /testbed/django/db/models/fields/__init__.py(149):         self.unique_for_date = unique_for_date
0.28 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_month = unique_for_month
0.28 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_year = unique_for_year
0.28 /testbed/django/db/models/fields/__init__.py(152):         if isinstance(choices, collections.abc.Iterator):
0.28 /testbed/django/db/models/fields/__init__.py(154):         self.choices = choices
0.28 /testbed/django/db/models/fields/__init__.py(155):         self.help_text = help_text
0.28 /testbed/django/db/models/fields/__init__.py(156):         self.db_index = db_index
0.28 /testbed/django/db/models/fields/__init__.py(157):         self.db_column = db_column
0.28 /testbed/django/db/models/fields/__init__.py(158):         self._db_tablespace = db_tablespace
0.28 /testbed/django/db/models/fields/__init__.py(159):         self.auto_created = auto_created
0.28 /testbed/django/db/models/fields/__init__.py(162):         if auto_created:
0.28 /testbed/django/db/models/fields/__init__.py(166):             self.creation_counter = Field.creation_counter
0.28 /testbed/django/db/models/fields/__init__.py(167):             Field.creation_counter += 1
0.28 /testbed/django/db/models/fields/__init__.py(169):         self._validators = list(validators)  # Store for deconstruction later
0.28 /testbed/django/db/models/fields/__init__.py(171):         messages = {}
0.28 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.28 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.28 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.28 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.28 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.28 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.28 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.28 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.28 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.28 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.28 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.28 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.28 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.28 /testbed/django/db/models/fields/__init__.py(174):         messages.update(error_messages or {})
0.28 /testbed/django/db/models/fields/__init__.py(175):         self._error_messages = error_messages  # Store for deconstruction later
0.28 /testbed/django/db/models/fields/__init__.py(176):         self.error_messages = messages
0.28 /testbed/django/db/models/fields/__init__.py(1105):         self.auto_now, self.auto_now_add = auto_now, auto_now_add
0.28 /testbed/django/db/models/fields/__init__.py(1106):         if auto_now or auto_now_add:
0.28 /testbed/django/db/models/fields/__init__.py(1109):         super().__init__(verbose_name, name, **kwargs)
0.28 /testbed/django/db/models/fields/__init__.py(138):         self.name = name
0.28 /testbed/django/db/models/fields/__init__.py(139):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.28 /testbed/django/db/models/fields/__init__.py(140):         self._verbose_name = verbose_name  # Store original for deconstruction
0.28 /testbed/django/db/models/fields/__init__.py(141):         self.primary_key = primary_key
0.28 /testbed/django/db/models/fields/__init__.py(142):         self.max_length, self._unique = max_length, unique
0.28 /testbed/django/db/models/fields/__init__.py(143):         self.blank, self.null = blank, null
0.28 /testbed/django/db/models/fields/__init__.py(144):         self.remote_field = rel
0.28 /testbed/django/db/models/fields/__init__.py(145):         self.is_relation = self.remote_field is not None
0.28 /testbed/django/db/models/fields/__init__.py(146):         self.default = default
0.28 /testbed/django/db/models/fields/__init__.py(147):         self.editable = editable
0.28 /testbed/django/db/models/fields/__init__.py(148):         self.serialize = serialize
0.28 /testbed/django/db/models/fields/__init__.py(149):         self.unique_for_date = unique_for_date
0.28 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_month = unique_for_month
0.28 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_year = unique_for_year
0.28 /testbed/django/db/models/fields/__init__.py(152):         if isinstance(choices, collections.abc.Iterator):
0.28 /testbed/django/db/models/fields/__init__.py(154):         self.choices = choices
0.28 /testbed/django/db/models/fields/__init__.py(155):         self.help_text = help_text
0.28 /testbed/django/db/models/fields/__init__.py(156):         self.db_index = db_index
0.28 /testbed/django/db/models/fields/__init__.py(157):         self.db_column = db_column
0.28 /testbed/django/db/models/fields/__init__.py(158):         self._db_tablespace = db_tablespace
0.28 /testbed/django/db/models/fields/__init__.py(159):         self.auto_created = auto_created
0.28 /testbed/django/db/models/fields/__init__.py(162):         if auto_created:
0.28 /testbed/django/db/models/fields/__init__.py(166):             self.creation_counter = Field.creation_counter
0.28 /testbed/django/db/models/fields/__init__.py(167):             Field.creation_counter += 1
0.28 /testbed/django/db/models/fields/__init__.py(169):         self._validators = list(validators)  # Store for deconstruction later
0.28 /testbed/django/db/models/fields/__init__.py(171):         messages = {}
0.28 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.28 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.28 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.28 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.28 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.28 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.28 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.28 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.28 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.28 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.28 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.28 /testbed/django/db/models/fields/__init__.py(174):         messages.update(error_messages or {})
0.28 /testbed/django/db/models/fields/__init__.py(175):         self._error_messages = error_messages  # Store for deconstruction later
0.28 /testbed/django/db/models/fields/__init__.py(176):         self.error_messages = messages
0.28 /testbed/django/db/models/fields/__init__.py(2092):         self.auto_now, self.auto_now_add = auto_now, auto_now_add
0.28 /testbed/django/db/models/fields/__init__.py(2093):         if auto_now or auto_now_add:
0.28 /testbed/django/db/models/fields/__init__.py(2096):         super().__init__(verbose_name, name, **kwargs)
0.28 /testbed/django/db/models/fields/__init__.py(138):         self.name = name
0.28 /testbed/django/db/models/fields/__init__.py(139):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.28 /testbed/django/db/models/fields/__init__.py(140):         self._verbose_name = verbose_name  # Store original for deconstruction
0.28 /testbed/django/db/models/fields/__init__.py(141):         self.primary_key = primary_key
0.28 /testbed/django/db/models/fields/__init__.py(142):         self.max_length, self._unique = max_length, unique
0.28 /testbed/django/db/models/fields/__init__.py(143):         self.blank, self.null = blank, null
0.28 /testbed/django/db/models/fields/__init__.py(144):         self.remote_field = rel
0.28 /testbed/django/db/models/fields/__init__.py(145):         self.is_relation = self.remote_field is not None
0.28 /testbed/django/db/models/fields/__init__.py(146):         self.default = default
0.28 /testbed/django/db/models/fields/__init__.py(147):         self.editable = editable
0.28 /testbed/django/db/models/fields/__init__.py(148):         self.serialize = serialize
0.28 /testbed/django/db/models/fields/__init__.py(149):         self.unique_for_date = unique_for_date
0.28 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_month = unique_for_month
0.28 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_year = unique_for_year
0.28 /testbed/django/db/models/fields/__init__.py(152):         if isinstance(choices, collections.abc.Iterator):
0.28 /testbed/django/db/models/fields/__init__.py(154):         self.choices = choices
0.28 /testbed/django/db/models/fields/__init__.py(155):         self.help_text = help_text
0.28 /testbed/django/db/models/fields/__init__.py(156):         self.db_index = db_index
0.28 /testbed/django/db/models/fields/__init__.py(157):         self.db_column = db_column
0.28 /testbed/django/db/models/fields/__init__.py(158):         self._db_tablespace = db_tablespace
0.28 /testbed/django/db/models/fields/__init__.py(159):         self.auto_created = auto_created
0.28 /testbed/django/db/models/fields/__init__.py(162):         if auto_created:
0.28 /testbed/django/db/models/fields/__init__.py(166):             self.creation_counter = Field.creation_counter
0.28 /testbed/django/db/models/fields/__init__.py(167):             Field.creation_counter += 1
0.28 /testbed/django/db/models/fields/__init__.py(169):         self._validators = list(validators)  # Store for deconstruction later
0.28 /testbed/django/db/models/fields/__init__.py(171):         messages = {}
0.28 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.28 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.28 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.28 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.28 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.28 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.28 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.28 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.28 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.28 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.28 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.28 /testbed/django/db/models/fields/__init__.py(174):         messages.update(error_messages or {})
0.28 /testbed/django/db/models/fields/__init__.py(175):         self._error_messages = error_messages  # Store for deconstruction later
0.28 /testbed/django/db/models/fields/__init__.py(176):         self.error_messages = messages
0.28 /testbed/django/db/models/fields/__init__.py(138):         self.name = name
0.28 /testbed/django/db/models/fields/__init__.py(139):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.28 /testbed/django/db/models/fields/__init__.py(140):         self._verbose_name = verbose_name  # Store original for deconstruction
0.28 /testbed/django/db/models/fields/__init__.py(141):         self.primary_key = primary_key
0.28 /testbed/django/db/models/fields/__init__.py(142):         self.max_length, self._unique = max_length, unique
0.28 /testbed/django/db/models/fields/__init__.py(143):         self.blank, self.null = blank, null
0.28 /testbed/django/db/models/fields/__init__.py(144):         self.remote_field = rel
0.28 /testbed/django/db/models/fields/__init__.py(145):         self.is_relation = self.remote_field is not None
0.28 /testbed/django/db/models/fields/__init__.py(146):         self.default = default
0.28 /testbed/django/db/models/fields/__init__.py(147):         self.editable = editable
0.28 /testbed/django/db/models/fields/__init__.py(148):         self.serialize = serialize
0.28 /testbed/django/db/models/fields/__init__.py(149):         self.unique_for_date = unique_for_date
0.28 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_month = unique_for_month
0.28 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_year = unique_for_year
0.28 /testbed/django/db/models/fields/__init__.py(152):         if isinstance(choices, collections.abc.Iterator):
0.28 /testbed/django/db/models/fields/__init__.py(154):         self.choices = choices
0.28 /testbed/django/db/models/fields/__init__.py(155):         self.help_text = help_text
0.28 /testbed/django/db/models/fields/__init__.py(156):         self.db_index = db_index
0.28 /testbed/django/db/models/fields/__init__.py(157):         self.db_column = db_column
0.28 /testbed/django/db/models/fields/__init__.py(158):         self._db_tablespace = db_tablespace
0.28 /testbed/django/db/models/fields/__init__.py(159):         self.auto_created = auto_created
0.28 /testbed/django/db/models/fields/__init__.py(162):         if auto_created:
0.28 /testbed/django/db/models/fields/__init__.py(166):             self.creation_counter = Field.creation_counter
0.28 /testbed/django/db/models/fields/__init__.py(167):             Field.creation_counter += 1
0.28 /testbed/django/db/models/fields/__init__.py(169):         self._validators = list(validators)  # Store for deconstruction later
0.28 /testbed/django/db/models/fields/__init__.py(171):         messages = {}
0.28 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.28 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.28 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.28 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.28 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.28 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.28 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.28 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.28 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.28 /testbed/django/db/models/fields/__init__.py(174):         messages.update(error_messages or {})
0.28 /testbed/django/db/models/fields/__init__.py(175):         self._error_messages = error_messages  # Store for deconstruction later
0.28 /testbed/django/db/models/fields/__init__.py(176):         self.error_messages = messages
0.28 /testbed/django/db/models/fields/__init__.py(138):         self.name = name
0.28 /testbed/django/db/models/fields/__init__.py(139):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.28 /testbed/django/db/models/fields/__init__.py(140):         self._verbose_name = verbose_name  # Store original for deconstruction
0.28 /testbed/django/db/models/fields/__init__.py(141):         self.primary_key = primary_key
0.28 /testbed/django/db/models/fields/__init__.py(142):         self.max_length, self._unique = max_length, unique
0.28 /testbed/django/db/models/fields/__init__.py(143):         self.blank, self.null = blank, null
0.28 /testbed/django/db/models/fields/__init__.py(144):         self.remote_field = rel
0.28 /testbed/django/db/models/fields/__init__.py(145):         self.is_relation = self.remote_field is not None
0.28 /testbed/django/db/models/fields/__init__.py(146):         self.default = default
0.28 /testbed/django/db/models/fields/__init__.py(147):         self.editable = editable
0.28 /testbed/django/db/models/fields/__init__.py(148):         self.serialize = serialize
0.28 /testbed/django/db/models/fields/__init__.py(149):         self.unique_for_date = unique_for_date
0.28 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_month = unique_for_month
0.28 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_year = unique_for_year
0.28 /testbed/django/db/models/fields/__init__.py(152):         if isinstance(choices, collections.abc.Iterator):
0.28 /testbed/django/db/models/fields/__init__.py(154):         self.choices = choices
0.28 /testbed/django/db/models/fields/__init__.py(155):         self.help_text = help_text
0.28 /testbed/django/db/models/fields/__init__.py(156):         self.db_index = db_index
0.28 /testbed/django/db/models/fields/__init__.py(157):         self.db_column = db_column
0.28 /testbed/django/db/models/fields/__init__.py(158):         self._db_tablespace = db_tablespace
0.28 /testbed/django/db/models/fields/__init__.py(159):         self.auto_created = auto_created
0.28 /testbed/django/db/models/fields/__init__.py(162):         if auto_created:
0.28 /testbed/django/db/models/fields/__init__.py(166):             self.creation_counter = Field.creation_counter
0.28 /testbed/django/db/models/fields/__init__.py(167):             Field.creation_counter += 1
0.28 /testbed/django/db/models/fields/__init__.py(169):         self._validators = list(validators)  # Store for deconstruction later
0.28 /testbed/django/db/models/fields/__init__.py(171):         messages = {}
0.28 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.28 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.28 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.28 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.28 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.28 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.28 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.28 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.28 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.28 /testbed/django/db/models/fields/__init__.py(174):         messages.update(error_messages or {})
0.28 /testbed/django/db/models/fields/__init__.py(175):         self._error_messages = error_messages  # Store for deconstruction later
0.28 /testbed/django/db/models/fields/__init__.py(176):         self.error_messages = messages
0.28 /testbed/django/db/models/fields/__init__.py(138):         self.name = name
0.28 /testbed/django/db/models/fields/__init__.py(139):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.28 /testbed/django/db/models/fields/__init__.py(140):         self._verbose_name = verbose_name  # Store original for deconstruction
0.28 /testbed/django/db/models/fields/__init__.py(141):         self.primary_key = primary_key
0.28 /testbed/django/db/models/fields/__init__.py(142):         self.max_length, self._unique = max_length, unique
0.28 /testbed/django/db/models/fields/__init__.py(143):         self.blank, self.null = blank, null
0.28 /testbed/django/db/models/fields/__init__.py(144):         self.remote_field = rel
0.28 /testbed/django/db/models/fields/__init__.py(145):         self.is_relation = self.remote_field is not None
0.28 /testbed/django/db/models/fields/__init__.py(146):         self.default = default
0.28 /testbed/django/db/models/fields/__init__.py(147):         self.editable = editable
0.28 /testbed/django/db/models/fields/__init__.py(148):         self.serialize = serialize
0.28 /testbed/django/db/models/fields/__init__.py(149):         self.unique_for_date = unique_for_date
0.28 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_month = unique_for_month
0.28 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_year = unique_for_year
0.28 /testbed/django/db/models/fields/__init__.py(152):         if isinstance(choices, collections.abc.Iterator):
0.28 /testbed/django/db/models/fields/__init__.py(154):         self.choices = choices
0.28 /testbed/django/db/models/fields/__init__.py(155):         self.help_text = help_text
0.28 /testbed/django/db/models/fields/__init__.py(156):         self.db_index = db_index
0.28 /testbed/django/db/models/fields/__init__.py(157):         self.db_column = db_column
0.28 /testbed/django/db/models/fields/__init__.py(158):         self._db_tablespace = db_tablespace
0.28 /testbed/django/db/models/fields/__init__.py(159):         self.auto_created = auto_created
0.28 /testbed/django/db/models/fields/__init__.py(162):         if auto_created:
0.28 /testbed/django/db/models/fields/__init__.py(166):             self.creation_counter = Field.creation_counter
0.28 /testbed/django/db/models/fields/__init__.py(167):             Field.creation_counter += 1
0.28 /testbed/django/db/models/fields/__init__.py(169):         self._validators = list(validators)  # Store for deconstruction later
0.28 /testbed/django/db/models/fields/__init__.py(171):         messages = {}
0.28 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.28 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.28 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.28 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.28 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.28 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.28 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.28 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.28 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.28 /testbed/django/db/models/fields/__init__.py(174):         messages.update(error_messages or {})
0.28 /testbed/django/db/models/fields/__init__.py(175):         self._error_messages = error_messages  # Store for deconstruction later
0.28 /testbed/django/db/models/fields/__init__.py(176):         self.error_messages = messages
0.29 /testbed/django/db/models/fields/__init__.py(138):         self.name = name
0.29 /testbed/django/db/models/fields/__init__.py(139):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.29 /testbed/django/db/models/fields/__init__.py(140):         self._verbose_name = verbose_name  # Store original for deconstruction
0.29 /testbed/django/db/models/fields/__init__.py(141):         self.primary_key = primary_key
0.29 /testbed/django/db/models/fields/__init__.py(142):         self.max_length, self._unique = max_length, unique
0.29 /testbed/django/db/models/fields/__init__.py(143):         self.blank, self.null = blank, null
0.29 /testbed/django/db/models/fields/__init__.py(144):         self.remote_field = rel
0.29 /testbed/django/db/models/fields/__init__.py(145):         self.is_relation = self.remote_field is not None
0.29 /testbed/django/db/models/fields/__init__.py(146):         self.default = default
0.29 /testbed/django/db/models/fields/__init__.py(147):         self.editable = editable
0.29 /testbed/django/db/models/fields/__init__.py(148):         self.serialize = serialize
0.29 /testbed/django/db/models/fields/__init__.py(149):         self.unique_for_date = unique_for_date
0.29 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_month = unique_for_month
0.29 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_year = unique_for_year
0.29 /testbed/django/db/models/fields/__init__.py(152):         if isinstance(choices, collections.abc.Iterator):
0.29 /testbed/django/db/models/fields/__init__.py(154):         self.choices = choices
0.29 /testbed/django/db/models/fields/__init__.py(155):         self.help_text = help_text
0.29 /testbed/django/db/models/fields/__init__.py(156):         self.db_index = db_index
0.29 /testbed/django/db/models/fields/__init__.py(157):         self.db_column = db_column
0.29 /testbed/django/db/models/fields/__init__.py(158):         self._db_tablespace = db_tablespace
0.29 /testbed/django/db/models/fields/__init__.py(159):         self.auto_created = auto_created
0.29 /testbed/django/db/models/fields/__init__.py(162):         if auto_created:
0.29 /testbed/django/db/models/fields/__init__.py(166):             self.creation_counter = Field.creation_counter
0.29 /testbed/django/db/models/fields/__init__.py(167):             Field.creation_counter += 1
0.29 /testbed/django/db/models/fields/__init__.py(169):         self._validators = list(validators)  # Store for deconstruction later
0.29 /testbed/django/db/models/fields/__init__.py(171):         messages = {}
0.29 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.29 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.29 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.29 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.29 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.29 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.29 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.29 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.29 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.29 /testbed/django/db/models/fields/__init__.py(174):         messages.update(error_messages or {})
0.29 /testbed/django/db/models/fields/__init__.py(175):         self._error_messages = error_messages  # Store for deconstruction later
0.29 /testbed/django/db/models/fields/__init__.py(176):         self.error_messages = messages
0.29 /testbed/django/db/models/fields/__init__.py(138):         self.name = name
0.29 /testbed/django/db/models/fields/__init__.py(139):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.29 /testbed/django/db/models/fields/__init__.py(140):         self._verbose_name = verbose_name  # Store original for deconstruction
0.29 /testbed/django/db/models/fields/__init__.py(141):         self.primary_key = primary_key
0.29 /testbed/django/db/models/fields/__init__.py(142):         self.max_length, self._unique = max_length, unique
0.29 /testbed/django/db/models/fields/__init__.py(143):         self.blank, self.null = blank, null
0.29 /testbed/django/db/models/fields/__init__.py(144):         self.remote_field = rel
0.29 /testbed/django/db/models/fields/__init__.py(145):         self.is_relation = self.remote_field is not None
0.29 /testbed/django/db/models/fields/__init__.py(146):         self.default = default
0.29 /testbed/django/db/models/fields/__init__.py(147):         self.editable = editable
0.29 /testbed/django/db/models/fields/__init__.py(148):         self.serialize = serialize
0.29 /testbed/django/db/models/fields/__init__.py(149):         self.unique_for_date = unique_for_date
0.29 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_month = unique_for_month
0.29 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_year = unique_for_year
0.29 /testbed/django/db/models/fields/__init__.py(152):         if isinstance(choices, collections.abc.Iterator):
0.29 /testbed/django/db/models/fields/__init__.py(154):         self.choices = choices
0.29 /testbed/django/db/models/fields/__init__.py(155):         self.help_text = help_text
0.29 /testbed/django/db/models/fields/__init__.py(156):         self.db_index = db_index
0.29 /testbed/django/db/models/fields/__init__.py(157):         self.db_column = db_column
0.29 /testbed/django/db/models/fields/__init__.py(158):         self._db_tablespace = db_tablespace
0.29 /testbed/django/db/models/fields/__init__.py(159):         self.auto_created = auto_created
0.29 /testbed/django/db/models/fields/__init__.py(162):         if auto_created:
0.29 /testbed/django/db/models/fields/__init__.py(166):             self.creation_counter = Field.creation_counter
0.29 /testbed/django/db/models/fields/__init__.py(167):             Field.creation_counter += 1
0.29 /testbed/django/db/models/fields/__init__.py(169):         self._validators = list(validators)  # Store for deconstruction later
0.29 /testbed/django/db/models/fields/__init__.py(171):         messages = {}
0.29 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.29 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.29 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.29 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.29 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.29 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.29 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.29 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.29 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.29 /testbed/django/db/models/fields/__init__.py(174):         messages.update(error_messages or {})
0.29 /testbed/django/db/models/fields/__init__.py(175):         self._error_messages = error_messages  # Store for deconstruction later
0.29 /testbed/django/db/models/fields/__init__.py(176):         self.error_messages = messages
0.29 /testbed/django/db/models/fields/__init__.py(138):         self.name = name
0.29 /testbed/django/db/models/fields/__init__.py(139):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.29 /testbed/django/db/models/fields/__init__.py(140):         self._verbose_name = verbose_name  # Store original for deconstruction
0.29 /testbed/django/db/models/fields/__init__.py(141):         self.primary_key = primary_key
0.29 /testbed/django/db/models/fields/__init__.py(142):         self.max_length, self._unique = max_length, unique
0.29 /testbed/django/db/models/fields/__init__.py(143):         self.blank, self.null = blank, null
0.29 /testbed/django/db/models/fields/__init__.py(144):         self.remote_field = rel
0.29 /testbed/django/db/models/fields/__init__.py(145):         self.is_relation = self.remote_field is not None
0.29 /testbed/django/db/models/fields/__init__.py(146):         self.default = default
0.29 /testbed/django/db/models/fields/__init__.py(147):         self.editable = editable
0.29 /testbed/django/db/models/fields/__init__.py(148):         self.serialize = serialize
0.29 /testbed/django/db/models/fields/__init__.py(149):         self.unique_for_date = unique_for_date
0.29 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_month = unique_for_month
0.29 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_year = unique_for_year
0.29 /testbed/django/db/models/fields/__init__.py(152):         if isinstance(choices, collections.abc.Iterator):
0.29 /testbed/django/db/models/fields/__init__.py(154):         self.choices = choices
0.29 /testbed/django/db/models/fields/__init__.py(155):         self.help_text = help_text
0.29 /testbed/django/db/models/fields/__init__.py(156):         self.db_index = db_index
0.29 /testbed/django/db/models/fields/__init__.py(157):         self.db_column = db_column
0.29 /testbed/django/db/models/fields/__init__.py(158):         self._db_tablespace = db_tablespace
0.29 /testbed/django/db/models/fields/__init__.py(159):         self.auto_created = auto_created
0.29 /testbed/django/db/models/fields/__init__.py(162):         if auto_created:
0.29 /testbed/django/db/models/fields/__init__.py(166):             self.creation_counter = Field.creation_counter
0.29 /testbed/django/db/models/fields/__init__.py(167):             Field.creation_counter += 1
0.29 /testbed/django/db/models/fields/__init__.py(169):         self._validators = list(validators)  # Store for deconstruction later
0.29 /testbed/django/db/models/fields/__init__.py(171):         messages = {}
0.29 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.29 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.29 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.29 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.29 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.29 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.29 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.29 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.29 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.29 /testbed/django/db/models/fields/__init__.py(174):         messages.update(error_messages or {})
0.29 /testbed/django/db/models/fields/__init__.py(175):         self._error_messages = error_messages  # Store for deconstruction later
0.29 /testbed/django/db/models/fields/__init__.py(176):         self.error_messages = messages
0.29 /testbed/django/db/models/fields/__init__.py(138):         self.name = name
0.29 /testbed/django/db/models/fields/__init__.py(139):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.29 /testbed/django/db/models/fields/__init__.py(140):         self._verbose_name = verbose_name  # Store original for deconstruction
0.29 /testbed/django/db/models/fields/__init__.py(141):         self.primary_key = primary_key
0.29 /testbed/django/db/models/fields/__init__.py(142):         self.max_length, self._unique = max_length, unique
0.29 /testbed/django/db/models/fields/__init__.py(143):         self.blank, self.null = blank, null
0.29 /testbed/django/db/models/fields/__init__.py(144):         self.remote_field = rel
0.29 /testbed/django/db/models/fields/__init__.py(145):         self.is_relation = self.remote_field is not None
0.29 /testbed/django/db/models/fields/__init__.py(146):         self.default = default
0.29 /testbed/django/db/models/fields/__init__.py(147):         self.editable = editable
0.29 /testbed/django/db/models/fields/__init__.py(148):         self.serialize = serialize
0.29 /testbed/django/db/models/fields/__init__.py(149):         self.unique_for_date = unique_for_date
0.29 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_month = unique_for_month
0.29 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_year = unique_for_year
0.29 /testbed/django/db/models/fields/__init__.py(152):         if isinstance(choices, collections.abc.Iterator):
0.29 /testbed/django/db/models/fields/__init__.py(154):         self.choices = choices
0.29 /testbed/django/db/models/fields/__init__.py(155):         self.help_text = help_text
0.29 /testbed/django/db/models/fields/__init__.py(156):         self.db_index = db_index
0.29 /testbed/django/db/models/fields/__init__.py(157):         self.db_column = db_column
0.29 /testbed/django/db/models/fields/__init__.py(158):         self._db_tablespace = db_tablespace
0.29 /testbed/django/db/models/fields/__init__.py(159):         self.auto_created = auto_created
0.29 /testbed/django/db/models/fields/__init__.py(162):         if auto_created:
0.29 /testbed/django/db/models/fields/__init__.py(166):             self.creation_counter = Field.creation_counter
0.29 /testbed/django/db/models/fields/__init__.py(167):             Field.creation_counter += 1
0.29 /testbed/django/db/models/fields/__init__.py(169):         self._validators = list(validators)  # Store for deconstruction later
0.29 /testbed/django/db/models/fields/__init__.py(171):         messages = {}
0.29 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.29 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.29 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.29 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.29 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.29 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.29 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.29 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.29 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.29 /testbed/django/db/models/fields/__init__.py(174):         messages.update(error_messages or {})
0.29 /testbed/django/db/models/fields/__init__.py(175):         self._error_messages = error_messages  # Store for deconstruction later
0.29 /testbed/django/db/models/fields/__init__.py(176):         self.error_messages = messages
0.29 /testbed/django/db/models/fields/__init__.py(138):         self.name = name
0.29 /testbed/django/db/models/fields/__init__.py(139):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.29 /testbed/django/db/models/fields/__init__.py(140):         self._verbose_name = verbose_name  # Store original for deconstruction
0.29 /testbed/django/db/models/fields/__init__.py(141):         self.primary_key = primary_key
0.29 /testbed/django/db/models/fields/__init__.py(142):         self.max_length, self._unique = max_length, unique
0.29 /testbed/django/db/models/fields/__init__.py(143):         self.blank, self.null = blank, null
0.29 /testbed/django/db/models/fields/__init__.py(144):         self.remote_field = rel
0.29 /testbed/django/db/models/fields/__init__.py(145):         self.is_relation = self.remote_field is not None
0.29 /testbed/django/db/models/fields/__init__.py(146):         self.default = default
0.29 /testbed/django/db/models/fields/__init__.py(147):         self.editable = editable
0.29 /testbed/django/db/models/fields/__init__.py(148):         self.serialize = serialize
0.29 /testbed/django/db/models/fields/__init__.py(149):         self.unique_for_date = unique_for_date
0.29 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_month = unique_for_month
0.29 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_year = unique_for_year
0.29 /testbed/django/db/models/fields/__init__.py(152):         if isinstance(choices, collections.abc.Iterator):
0.29 /testbed/django/db/models/fields/__init__.py(154):         self.choices = choices
0.29 /testbed/django/db/models/fields/__init__.py(155):         self.help_text = help_text
0.29 /testbed/django/db/models/fields/__init__.py(156):         self.db_index = db_index
0.29 /testbed/django/db/models/fields/__init__.py(157):         self.db_column = db_column
0.29 /testbed/django/db/models/fields/__init__.py(158):         self._db_tablespace = db_tablespace
0.29 /testbed/django/db/models/fields/__init__.py(159):         self.auto_created = auto_created
0.29 /testbed/django/db/models/fields/__init__.py(162):         if auto_created:
0.29 /testbed/django/db/models/fields/__init__.py(166):             self.creation_counter = Field.creation_counter
0.29 /testbed/django/db/models/fields/__init__.py(167):             Field.creation_counter += 1
0.29 /testbed/django/db/models/fields/__init__.py(169):         self._validators = list(validators)  # Store for deconstruction later
0.29 /testbed/django/db/models/fields/__init__.py(171):         messages = {}
0.29 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.29 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.29 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.29 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.29 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.29 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.29 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.29 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.29 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.29 /testbed/django/db/models/fields/__init__.py(174):         messages.update(error_messages or {})
0.29 /testbed/django/db/models/fields/__init__.py(175):         self._error_messages = error_messages  # Store for deconstruction later
0.29 /testbed/django/db/models/fields/__init__.py(176):         self.error_messages = messages
0.29 /testbed/django/db/models/fields/__init__.py(138):         self.name = name
0.29 /testbed/django/db/models/fields/__init__.py(139):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.29 /testbed/django/db/models/fields/__init__.py(140):         self._verbose_name = verbose_name  # Store original for deconstruction
0.29 /testbed/django/db/models/fields/__init__.py(141):         self.primary_key = primary_key
0.29 /testbed/django/db/models/fields/__init__.py(142):         self.max_length, self._unique = max_length, unique
0.29 /testbed/django/db/models/fields/__init__.py(143):         self.blank, self.null = blank, null
0.29 /testbed/django/db/models/fields/__init__.py(144):         self.remote_field = rel
0.29 /testbed/django/db/models/fields/__init__.py(145):         self.is_relation = self.remote_field is not None
0.29 /testbed/django/db/models/fields/__init__.py(146):         self.default = default
0.29 /testbed/django/db/models/fields/__init__.py(147):         self.editable = editable
0.29 /testbed/django/db/models/fields/__init__.py(148):         self.serialize = serialize
0.29 /testbed/django/db/models/fields/__init__.py(149):         self.unique_for_date = unique_for_date
0.29 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_month = unique_for_month
0.29 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_year = unique_for_year
0.29 /testbed/django/db/models/fields/__init__.py(152):         if isinstance(choices, collections.abc.Iterator):
0.29 /testbed/django/db/models/fields/__init__.py(154):         self.choices = choices
0.29 /testbed/django/db/models/fields/__init__.py(155):         self.help_text = help_text
0.29 /testbed/django/db/models/fields/__init__.py(156):         self.db_index = db_index
0.29 /testbed/django/db/models/fields/__init__.py(157):         self.db_column = db_column
0.29 /testbed/django/db/models/fields/__init__.py(158):         self._db_tablespace = db_tablespace
0.29 /testbed/django/db/models/fields/__init__.py(159):         self.auto_created = auto_created
0.29 /testbed/django/db/models/fields/__init__.py(162):         if auto_created:
0.29 /testbed/django/db/models/fields/__init__.py(166):             self.creation_counter = Field.creation_counter
0.29 /testbed/django/db/models/fields/__init__.py(167):             Field.creation_counter += 1
0.29 /testbed/django/db/models/fields/__init__.py(169):         self._validators = list(validators)  # Store for deconstruction later
0.29 /testbed/django/db/models/fields/__init__.py(171):         messages = {}
0.29 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.29 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.29 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.29 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.29 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.29 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.29 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.29 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.29 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.29 /testbed/django/db/models/fields/__init__.py(174):         messages.update(error_messages or {})
0.29 /testbed/django/db/models/fields/__init__.py(175):         self._error_messages = error_messages  # Store for deconstruction later
0.29 /testbed/django/db/models/fields/__init__.py(176):         self.error_messages = messages
0.29 /testbed/django/db/models/fields/__init__.py(138):         self.name = name
0.29 /testbed/django/db/models/fields/__init__.py(139):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.29 /testbed/django/db/models/fields/__init__.py(140):         self._verbose_name = verbose_name  # Store original for deconstruction
0.29 /testbed/django/db/models/fields/__init__.py(141):         self.primary_key = primary_key
0.29 /testbed/django/db/models/fields/__init__.py(142):         self.max_length, self._unique = max_length, unique
0.29 /testbed/django/db/models/fields/__init__.py(143):         self.blank, self.null = blank, null
0.29 /testbed/django/db/models/fields/__init__.py(144):         self.remote_field = rel
0.29 /testbed/django/db/models/fields/__init__.py(145):         self.is_relation = self.remote_field is not None
0.29 /testbed/django/db/models/fields/__init__.py(146):         self.default = default
0.29 /testbed/django/db/models/fields/__init__.py(147):         self.editable = editable
0.29 /testbed/django/db/models/fields/__init__.py(148):         self.serialize = serialize
0.29 /testbed/django/db/models/fields/__init__.py(149):         self.unique_for_date = unique_for_date
0.29 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_month = unique_for_month
0.29 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_year = unique_for_year
0.29 /testbed/django/db/models/fields/__init__.py(152):         if isinstance(choices, collections.abc.Iterator):
0.29 /testbed/django/db/models/fields/__init__.py(154):         self.choices = choices
0.29 /testbed/django/db/models/fields/__init__.py(155):         self.help_text = help_text
0.29 /testbed/django/db/models/fields/__init__.py(156):         self.db_index = db_index
0.29 /testbed/django/db/models/fields/__init__.py(157):         self.db_column = db_column
0.29 /testbed/django/db/models/fields/__init__.py(158):         self._db_tablespace = db_tablespace
0.29 /testbed/django/db/models/fields/__init__.py(159):         self.auto_created = auto_created
0.29 /testbed/django/db/models/fields/__init__.py(162):         if auto_created:
0.29 /testbed/django/db/models/fields/__init__.py(166):             self.creation_counter = Field.creation_counter
0.29 /testbed/django/db/models/fields/__init__.py(167):             Field.creation_counter += 1
0.29 /testbed/django/db/models/fields/__init__.py(169):         self._validators = list(validators)  # Store for deconstruction later
0.29 /testbed/django/db/models/fields/__init__.py(171):         messages = {}
0.29 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.29 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.29 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.29 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.29 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.29 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.29 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.29 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.29 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.29 /testbed/django/db/models/fields/__init__.py(174):         messages.update(error_messages or {})
0.29 /testbed/django/db/models/fields/__init__.py(175):         self._error_messages = error_messages  # Store for deconstruction later
0.29 /testbed/django/db/models/fields/__init__.py(176):         self.error_messages = messages
Testing against Django installed in '/testbed/django'
0.50 /testbed/django/db/models/fields/__init__.py(986):         super().__init__(*args, **kwargs)
0.50 /testbed/django/db/models/fields/__init__.py(138):         self.name = name
0.50 /testbed/django/db/models/fields/__init__.py(139):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.50 /testbed/django/db/models/fields/__init__.py(140):         self._verbose_name = verbose_name  # Store original for deconstruction
0.50 /testbed/django/db/models/fields/__init__.py(141):         self.primary_key = primary_key
0.50 /testbed/django/db/models/fields/__init__.py(142):         self.max_length, self._unique = max_length, unique
0.50 /testbed/django/db/models/fields/__init__.py(143):         self.blank, self.null = blank, null
0.50 /testbed/django/db/models/fields/__init__.py(144):         self.remote_field = rel
0.50 /testbed/django/db/models/fields/__init__.py(145):         self.is_relation = self.remote_field is not None
0.50 /testbed/django/db/models/fields/__init__.py(146):         self.default = default
0.50 /testbed/django/db/models/fields/__init__.py(147):         self.editable = editable
0.50 /testbed/django/db/models/fields/__init__.py(148):         self.serialize = serialize
0.50 /testbed/django/db/models/fields/__init__.py(149):         self.unique_for_date = unique_for_date
0.50 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_month = unique_for_month
0.50 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_year = unique_for_year
0.50 /testbed/django/db/models/fields/__init__.py(152):         if isinstance(choices, collections.abc.Iterator):
0.50 /testbed/django/db/models/fields/__init__.py(154):         self.choices = choices
0.50 /testbed/django/db/models/fields/__init__.py(155):         self.help_text = help_text
0.50 /testbed/django/db/models/fields/__init__.py(156):         self.db_index = db_index
0.50 /testbed/django/db/models/fields/__init__.py(157):         self.db_column = db_column
0.50 /testbed/django/db/models/fields/__init__.py(158):         self._db_tablespace = db_tablespace
0.50 /testbed/django/db/models/fields/__init__.py(159):         self.auto_created = auto_created
0.50 /testbed/django/db/models/fields/__init__.py(162):         if auto_created:
0.50 /testbed/django/db/models/fields/__init__.py(166):             self.creation_counter = Field.creation_counter
0.50 /testbed/django/db/models/fields/__init__.py(167):             Field.creation_counter += 1
0.50 /testbed/django/db/models/fields/__init__.py(169):         self._validators = list(validators)  # Store for deconstruction later
0.50 /testbed/django/db/models/fields/__init__.py(171):         messages = {}
0.50 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.50 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.50 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.50 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.50 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.50 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.50 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.50 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.50 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.50 /testbed/django/db/models/fields/__init__.py(174):         messages.update(error_messages or {})
0.50 /testbed/django/db/models/fields/__init__.py(175):         self._error_messages = error_messages  # Store for deconstruction later
0.50 /testbed/django/db/models/fields/__init__.py(176):         self.error_messages = messages
0.50 /testbed/django/db/models/fields/__init__.py(987):         self.validators.append(validators.MaxLengthValidator(self.max_length))
0.50 /testbed/django/db/models/fields/__init__.py(595):         return [*self.default_validators, *self._validators]
0.50 /testbed/django/db/models/fields/__init__.py(986):         super().__init__(*args, **kwargs)
0.50 /testbed/django/db/models/fields/__init__.py(138):         self.name = name
0.50 /testbed/django/db/models/fields/__init__.py(139):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.50 /testbed/django/db/models/fields/__init__.py(140):         self._verbose_name = verbose_name  # Store original for deconstruction
0.50 /testbed/django/db/models/fields/__init__.py(141):         self.primary_key = primary_key
0.50 /testbed/django/db/models/fields/__init__.py(142):         self.max_length, self._unique = max_length, unique
0.50 /testbed/django/db/models/fields/__init__.py(143):         self.blank, self.null = blank, null
0.50 /testbed/django/db/models/fields/__init__.py(144):         self.remote_field = rel
0.50 /testbed/django/db/models/fields/__init__.py(145):         self.is_relation = self.remote_field is not None
0.50 /testbed/django/db/models/fields/__init__.py(146):         self.default = default
0.50 /testbed/django/db/models/fields/__init__.py(147):         self.editable = editable
0.50 /testbed/django/db/models/fields/__init__.py(148):         self.serialize = serialize
0.50 /testbed/django/db/models/fields/__init__.py(149):         self.unique_for_date = unique_for_date
0.50 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_month = unique_for_month
0.50 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_year = unique_for_year
0.50 /testbed/django/db/models/fields/__init__.py(152):         if isinstance(choices, collections.abc.Iterator):
0.50 /testbed/django/db/models/fields/__init__.py(154):         self.choices = choices
0.50 /testbed/django/db/models/fields/__init__.py(155):         self.help_text = help_text
0.50 /testbed/django/db/models/fields/__init__.py(156):         self.db_index = db_index
0.50 /testbed/django/db/models/fields/__init__.py(157):         self.db_column = db_column
0.50 /testbed/django/db/models/fields/__init__.py(158):         self._db_tablespace = db_tablespace
0.50 /testbed/django/db/models/fields/__init__.py(159):         self.auto_created = auto_created
0.50 /testbed/django/db/models/fields/__init__.py(162):         if auto_created:
0.50 /testbed/django/db/models/fields/__init__.py(166):             self.creation_counter = Field.creation_counter
0.50 /testbed/django/db/models/fields/__init__.py(167):             Field.creation_counter += 1
0.50 /testbed/django/db/models/fields/__init__.py(169):         self._validators = list(validators)  # Store for deconstruction later
0.50 /testbed/django/db/models/fields/__init__.py(171):         messages = {}
0.50 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.50 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.50 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.50 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.50 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.50 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.50 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.50 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.50 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.50 /testbed/django/db/models/fields/__init__.py(174):         messages.update(error_messages or {})
0.50 /testbed/django/db/models/fields/__init__.py(175):         self._error_messages = error_messages  # Store for deconstruction later
0.50 /testbed/django/db/models/fields/__init__.py(176):         self.error_messages = messages
0.50 /testbed/django/db/models/fields/__init__.py(987):         self.validators.append(validators.MaxLengthValidator(self.max_length))
0.50 /testbed/django/db/models/fields/__init__.py(595):         return [*self.default_validators, *self._validators]
0.50 /testbed/django/db/models/fields/__init__.py(762):         self.set_attributes_from_name(name)
0.50 /testbed/django/db/models/fields/__init__.py(749):         self.name = self.name or name
0.50 /testbed/django/db/models/fields/__init__.py(750):         self.attname, self.column = self.get_attname_column()
0.50 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.50 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.50 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.50 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.50 /testbed/django/db/models/fields/__init__.py(751):         self.concrete = self.column is not None
0.50 /testbed/django/db/models/fields/__init__.py(752):         if self.verbose_name is None and self.name:
0.50 /testbed/django/db/models/fields/__init__.py(753):             self.verbose_name = self.name.replace('_', ' ')
0.50 /testbed/django/db/models/fields/__init__.py(763):         self.model = cls
0.50 /testbed/django/db/models/fields/__init__.py(764):         cls._meta.add_field(self, private=private_only)
0.50 /testbed/django/db/models/fields/__init__.py(765):         if self.column:
0.50 /testbed/django/db/models/fields/__init__.py(769):             if not getattr(cls, self.attname, None):
0.50 /testbed/django/db/models/fields/__init__.py(770):                 setattr(cls, self.attname, self.descriptor_class(self))
0.50 /testbed/django/db/models/fields/__init__.py(771):         if self.choices is not None:
0.50 /testbed/django/db/models/fields/__init__.py(762):         self.set_attributes_from_name(name)
0.50 /testbed/django/db/models/fields/__init__.py(749):         self.name = self.name or name
0.50 /testbed/django/db/models/fields/__init__.py(750):         self.attname, self.column = self.get_attname_column()
0.50 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.50 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.50 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.50 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.50 /testbed/django/db/models/fields/__init__.py(751):         self.concrete = self.column is not None
0.50 /testbed/django/db/models/fields/__init__.py(752):         if self.verbose_name is None and self.name:
0.50 /testbed/django/db/models/fields/__init__.py(763):         self.model = cls
0.50 /testbed/django/db/models/fields/__init__.py(764):         cls._meta.add_field(self, private=private_only)
0.50 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.50 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.50 /testbed/django/db/models/fields/__init__.py(765):         if self.column:
0.50 /testbed/django/db/models/fields/__init__.py(769):             if not getattr(cls, self.attname, None):
0.50 /testbed/django/db/models/fields/__init__.py(770):                 setattr(cls, self.attname, self.descriptor_class(self))
0.50 /testbed/django/db/models/fields/__init__.py(771):         if self.choices is not None:
0.50 /testbed/django/db/models/fields/__init__.py(2356):         kwargs['blank'] = True
0.50 /testbed/django/db/models/fields/__init__.py(2357):         super().__init__(*args, **kwargs)
0.50 /testbed/django/db/models/fields/__init__.py(138):         self.name = name
0.50 /testbed/django/db/models/fields/__init__.py(139):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.50 /testbed/django/db/models/fields/__init__.py(140):         self._verbose_name = verbose_name  # Store original for deconstruction
0.50 /testbed/django/db/models/fields/__init__.py(141):         self.primary_key = primary_key
0.50 /testbed/django/db/models/fields/__init__.py(142):         self.max_length, self._unique = max_length, unique
0.50 /testbed/django/db/models/fields/__init__.py(143):         self.blank, self.null = blank, null
0.50 /testbed/django/db/models/fields/__init__.py(144):         self.remote_field = rel
0.50 /testbed/django/db/models/fields/__init__.py(145):         self.is_relation = self.remote_field is not None
0.50 /testbed/django/db/models/fields/__init__.py(146):         self.default = default
0.50 /testbed/django/db/models/fields/__init__.py(147):         self.editable = editable
0.50 /testbed/django/db/models/fields/__init__.py(148):         self.serialize = serialize
0.50 /testbed/django/db/models/fields/__init__.py(149):         self.unique_for_date = unique_for_date
0.50 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_month = unique_for_month
0.50 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_year = unique_for_year
0.50 /testbed/django/db/models/fields/__init__.py(152):         if isinstance(choices, collections.abc.Iterator):
0.50 /testbed/django/db/models/fields/__init__.py(154):         self.choices = choices
0.50 /testbed/django/db/models/fields/__init__.py(155):         self.help_text = help_text
0.50 /testbed/django/db/models/fields/__init__.py(156):         self.db_index = db_index
0.50 /testbed/django/db/models/fields/__init__.py(157):         self.db_column = db_column
0.50 /testbed/django/db/models/fields/__init__.py(158):         self._db_tablespace = db_tablespace
0.50 /testbed/django/db/models/fields/__init__.py(159):         self.auto_created = auto_created
0.50 /testbed/django/db/models/fields/__init__.py(162):         if auto_created:
0.50 /testbed/django/db/models/fields/__init__.py(163):             self.creation_counter = Field.auto_creation_counter
0.50 /testbed/django/db/models/fields/__init__.py(164):             Field.auto_creation_counter -= 1
0.50 /testbed/django/db/models/fields/__init__.py(169):         self._validators = list(validators)  # Store for deconstruction later
0.50 /testbed/django/db/models/fields/__init__.py(171):         messages = {}
0.50 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.50 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.50 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.50 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.50 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.50 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.50 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.50 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.50 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.50 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.50 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.50 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.50 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.50 /testbed/django/db/models/fields/__init__.py(174):         messages.update(error_messages or {})
0.50 /testbed/django/db/models/fields/__init__.py(175):         self._error_messages = error_messages  # Store for deconstruction later
0.50 /testbed/django/db/models/fields/__init__.py(176):         self.error_messages = messages
0.50 /testbed/django/db/models/fields/__init__.py(2393):         assert not cls._meta.auto_field, (
0.50 /testbed/django/db/models/fields/__init__.py(2397):         super().contribute_to_class(cls, name, **kwargs)
0.50 /testbed/django/db/models/fields/__init__.py(762):         self.set_attributes_from_name(name)
0.50 /testbed/django/db/models/fields/__init__.py(749):         self.name = self.name or name
0.50 /testbed/django/db/models/fields/__init__.py(750):         self.attname, self.column = self.get_attname_column()
0.50 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.50 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.50 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.50 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.50 /testbed/django/db/models/fields/__init__.py(751):         self.concrete = self.column is not None
0.50 /testbed/django/db/models/fields/__init__.py(752):         if self.verbose_name is None and self.name:
0.50 /testbed/django/db/models/fields/__init__.py(763):         self.model = cls
0.50 /testbed/django/db/models/fields/__init__.py(764):         cls._meta.add_field(self, private=private_only)
0.50 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.50 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.50 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.50 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.50 /testbed/django/db/models/fields/__init__.py(765):         if self.column:
0.50 /testbed/django/db/models/fields/__init__.py(769):             if not getattr(cls, self.attname, None):
0.50 /testbed/django/db/models/fields/__init__.py(770):                 setattr(cls, self.attname, self.descriptor_class(self))
0.50 /testbed/django/db/models/fields/__init__.py(771):         if self.choices is not None:
0.50 /testbed/django/db/models/fields/__init__.py(2398):         cls._meta.auto_field = self
0.50 /testbed/django/db/models/fields/__init__.py(986):         super().__init__(*args, **kwargs)
0.50 /testbed/django/db/models/fields/__init__.py(138):         self.name = name
0.50 /testbed/django/db/models/fields/__init__.py(139):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.50 /testbed/django/db/models/fields/__init__.py(140):         self._verbose_name = verbose_name  # Store original for deconstruction
0.50 /testbed/django/db/models/fields/__init__.py(141):         self.primary_key = primary_key
0.50 /testbed/django/db/models/fields/__init__.py(142):         self.max_length, self._unique = max_length, unique
0.50 /testbed/django/db/models/fields/__init__.py(143):         self.blank, self.null = blank, null
0.50 /testbed/django/db/models/fields/__init__.py(144):         self.remote_field = rel
0.50 /testbed/django/db/models/fields/__init__.py(145):         self.is_relation = self.remote_field is not None
0.50 /testbed/django/db/models/fields/__init__.py(146):         self.default = default
0.50 /testbed/django/db/models/fields/__init__.py(147):         self.editable = editable
0.50 /testbed/django/db/models/fields/__init__.py(148):         self.serialize = serialize
0.50 /testbed/django/db/models/fields/__init__.py(149):         self.unique_for_date = unique_for_date
0.50 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_month = unique_for_month
0.50 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_year = unique_for_year
0.50 /testbed/django/db/models/fields/__init__.py(152):         if isinstance(choices, collections.abc.Iterator):
0.50 /testbed/django/db/models/fields/__init__.py(154):         self.choices = choices
0.50 /testbed/django/db/models/fields/__init__.py(155):         self.help_text = help_text
0.50 /testbed/django/db/models/fields/__init__.py(156):         self.db_index = db_index
0.50 /testbed/django/db/models/fields/__init__.py(157):         self.db_column = db_column
0.50 /testbed/django/db/models/fields/__init__.py(158):         self._db_tablespace = db_tablespace
0.50 /testbed/django/db/models/fields/__init__.py(159):         self.auto_created = auto_created
0.50 /testbed/django/db/models/fields/__init__.py(162):         if auto_created:
0.50 /testbed/django/db/models/fields/__init__.py(166):             self.creation_counter = Field.creation_counter
0.50 /testbed/django/db/models/fields/__init__.py(167):             Field.creation_counter += 1
0.50 /testbed/django/db/models/fields/__init__.py(169):         self._validators = list(validators)  # Store for deconstruction later
0.50 /testbed/django/db/models/fields/__init__.py(171):         messages = {}
0.50 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.50 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.50 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.50 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.50 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.50 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.50 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.50 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.50 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.50 /testbed/django/db/models/fields/__init__.py(174):         messages.update(error_messages or {})
0.50 /testbed/django/db/models/fields/__init__.py(175):         self._error_messages = error_messages  # Store for deconstruction later
0.50 /testbed/django/db/models/fields/__init__.py(176):         self.error_messages = messages
0.50 /testbed/django/db/models/fields/__init__.py(987):         self.validators.append(validators.MaxLengthValidator(self.max_length))
0.50 /testbed/django/db/models/fields/__init__.py(595):         return [*self.default_validators, *self._validators]
0.50 /testbed/django/db/models/fields/__init__.py(1105):         self.auto_now, self.auto_now_add = auto_now, auto_now_add
0.50 /testbed/django/db/models/fields/__init__.py(1106):         if auto_now or auto_now_add:
0.50 /testbed/django/db/models/fields/__init__.py(1109):         super().__init__(verbose_name, name, **kwargs)
0.50 /testbed/django/db/models/fields/__init__.py(138):         self.name = name
0.50 /testbed/django/db/models/fields/__init__.py(139):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.50 /testbed/django/db/models/fields/__init__.py(140):         self._verbose_name = verbose_name  # Store original for deconstruction
0.50 /testbed/django/db/models/fields/__init__.py(141):         self.primary_key = primary_key
0.50 /testbed/django/db/models/fields/__init__.py(142):         self.max_length, self._unique = max_length, unique
0.50 /testbed/django/db/models/fields/__init__.py(143):         self.blank, self.null = blank, null
0.50 /testbed/django/db/models/fields/__init__.py(144):         self.remote_field = rel
0.50 /testbed/django/db/models/fields/__init__.py(145):         self.is_relation = self.remote_field is not None
0.50 /testbed/django/db/models/fields/__init__.py(146):         self.default = default
0.50 /testbed/django/db/models/fields/__init__.py(147):         self.editable = editable
0.50 /testbed/django/db/models/fields/__init__.py(148):         self.serialize = serialize
0.50 /testbed/django/db/models/fields/__init__.py(149):         self.unique_for_date = unique_for_date
0.50 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_month = unique_for_month
0.50 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_year = unique_for_year
0.50 /testbed/django/db/models/fields/__init__.py(152):         if isinstance(choices, collections.abc.Iterator):
0.50 /testbed/django/db/models/fields/__init__.py(154):         self.choices = choices
0.50 /testbed/django/db/models/fields/__init__.py(155):         self.help_text = help_text
0.50 /testbed/django/db/models/fields/__init__.py(156):         self.db_index = db_index
0.50 /testbed/django/db/models/fields/__init__.py(157):         self.db_column = db_column
0.50 /testbed/django/db/models/fields/__init__.py(158):         self._db_tablespace = db_tablespace
0.50 /testbed/django/db/models/fields/__init__.py(159):         self.auto_created = auto_created
0.50 /testbed/django/db/models/fields/__init__.py(162):         if auto_created:
0.50 /testbed/django/db/models/fields/__init__.py(166):             self.creation_counter = Field.creation_counter
0.50 /testbed/django/db/models/fields/__init__.py(167):             Field.creation_counter += 1
0.50 /testbed/django/db/models/fields/__init__.py(169):         self._validators = list(validators)  # Store for deconstruction later
0.50 /testbed/django/db/models/fields/__init__.py(171):         messages = {}
0.50 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.50 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.50 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.50 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.50 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.50 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.50 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.50 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.50 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.50 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.50 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.50 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.50 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.50 /testbed/django/db/models/fields/__init__.py(174):         messages.update(error_messages or {})
0.50 /testbed/django/db/models/fields/__init__.py(175):         self._error_messages = error_messages  # Store for deconstruction later
0.50 /testbed/django/db/models/fields/__init__.py(176):         self.error_messages = messages
0.54 /testbed/django/db/models/fields/__init__.py(762):         self.set_attributes_from_name(name)
0.54 /testbed/django/db/models/fields/__init__.py(749):         self.name = self.name or name
0.54 /testbed/django/db/models/fields/__init__.py(750):         self.attname, self.column = self.get_attname_column()
0.54 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.54 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.54 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.54 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.54 /testbed/django/db/models/fields/__init__.py(751):         self.concrete = self.column is not None
0.54 /testbed/django/db/models/fields/__init__.py(752):         if self.verbose_name is None and self.name:
0.54 /testbed/django/db/models/fields/__init__.py(763):         self.model = cls
0.54 /testbed/django/db/models/fields/__init__.py(764):         cls._meta.add_field(self, private=private_only)
0.54 /testbed/django/db/models/fields/__init__.py(765):         if self.column:
0.54 /testbed/django/db/models/fields/__init__.py(769):             if not getattr(cls, self.attname, None):
0.54 /testbed/django/db/models/fields/__init__.py(770):                 setattr(cls, self.attname, self.descriptor_class(self))
0.54 /testbed/django/db/models/fields/__init__.py(771):         if self.choices is not None:
0.54 /testbed/django/db/models/fields/__init__.py(1204):         super().contribute_to_class(cls, name, **kwargs)
0.54 /testbed/django/db/models/fields/__init__.py(762):         self.set_attributes_from_name(name)
0.54 /testbed/django/db/models/fields/__init__.py(749):         self.name = self.name or name
0.54 /testbed/django/db/models/fields/__init__.py(750):         self.attname, self.column = self.get_attname_column()
0.54 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.54 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.54 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.54 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.54 /testbed/django/db/models/fields/__init__.py(751):         self.concrete = self.column is not None
0.54 /testbed/django/db/models/fields/__init__.py(752):         if self.verbose_name is None and self.name:
0.54 /testbed/django/db/models/fields/__init__.py(763):         self.model = cls
0.54 /testbed/django/db/models/fields/__init__.py(764):         cls._meta.add_field(self, private=private_only)
0.54 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.54 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.54 /testbed/django/db/models/fields/__init__.py(765):         if self.column:
0.54 /testbed/django/db/models/fields/__init__.py(769):             if not getattr(cls, self.attname, None):
0.54 /testbed/django/db/models/fields/__init__.py(770):                 setattr(cls, self.attname, self.descriptor_class(self))
0.54 /testbed/django/db/models/fields/__init__.py(771):         if self.choices is not None:
0.54 /testbed/django/db/models/fields/__init__.py(1205):         if not self.null:
0.54 /testbed/django/db/models/fields/__init__.py(986):         super().__init__(*args, **kwargs)
0.54 /testbed/django/db/models/fields/__init__.py(138):         self.name = name
0.54 /testbed/django/db/models/fields/__init__.py(139):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.54 /testbed/django/db/models/fields/__init__.py(140):         self._verbose_name = verbose_name  # Store original for deconstruction
0.54 /testbed/django/db/models/fields/__init__.py(141):         self.primary_key = primary_key
0.54 /testbed/django/db/models/fields/__init__.py(142):         self.max_length, self._unique = max_length, unique
0.54 /testbed/django/db/models/fields/__init__.py(143):         self.blank, self.null = blank, null
0.54 /testbed/django/db/models/fields/__init__.py(144):         self.remote_field = rel
0.54 /testbed/django/db/models/fields/__init__.py(145):         self.is_relation = self.remote_field is not None
0.54 /testbed/django/db/models/fields/__init__.py(146):         self.default = default
0.54 /testbed/django/db/models/fields/__init__.py(147):         self.editable = editable
0.54 /testbed/django/db/models/fields/__init__.py(148):         self.serialize = serialize
0.54 /testbed/django/db/models/fields/__init__.py(149):         self.unique_for_date = unique_for_date
0.54 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_month = unique_for_month
0.54 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_year = unique_for_year
0.54 /testbed/django/db/models/fields/__init__.py(152):         if isinstance(choices, collections.abc.Iterator):
0.54 /testbed/django/db/models/fields/__init__.py(154):         self.choices = choices
0.54 /testbed/django/db/models/fields/__init__.py(155):         self.help_text = help_text
0.54 /testbed/django/db/models/fields/__init__.py(156):         self.db_index = db_index
0.54 /testbed/django/db/models/fields/__init__.py(157):         self.db_column = db_column
0.54 /testbed/django/db/models/fields/__init__.py(158):         self._db_tablespace = db_tablespace
0.54 /testbed/django/db/models/fields/__init__.py(159):         self.auto_created = auto_created
0.54 /testbed/django/db/models/fields/__init__.py(162):         if auto_created:
0.54 /testbed/django/db/models/fields/__init__.py(166):             self.creation_counter = Field.creation_counter
0.54 /testbed/django/db/models/fields/__init__.py(167):             Field.creation_counter += 1
0.54 /testbed/django/db/models/fields/__init__.py(169):         self._validators = list(validators)  # Store for deconstruction later
0.54 /testbed/django/db/models/fields/__init__.py(171):         messages = {}
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(174):         messages.update(error_messages or {})
0.54 /testbed/django/db/models/fields/__init__.py(175):         self._error_messages = error_messages  # Store for deconstruction later
0.54 /testbed/django/db/models/fields/__init__.py(176):         self.error_messages = messages
0.54 /testbed/django/db/models/fields/__init__.py(987):         self.validators.append(validators.MaxLengthValidator(self.max_length))
0.54 /testbed/django/db/models/fields/__init__.py(595):         return [*self.default_validators, *self._validators]
0.54 /testbed/django/db/models/fields/__init__.py(138):         self.name = name
0.54 /testbed/django/db/models/fields/__init__.py(139):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.54 /testbed/django/db/models/fields/__init__.py(140):         self._verbose_name = verbose_name  # Store original for deconstruction
0.54 /testbed/django/db/models/fields/__init__.py(141):         self.primary_key = primary_key
0.54 /testbed/django/db/models/fields/__init__.py(142):         self.max_length, self._unique = max_length, unique
0.54 /testbed/django/db/models/fields/__init__.py(143):         self.blank, self.null = blank, null
0.54 /testbed/django/db/models/fields/__init__.py(144):         self.remote_field = rel
0.54 /testbed/django/db/models/fields/__init__.py(145):         self.is_relation = self.remote_field is not None
0.54 /testbed/django/db/models/fields/__init__.py(146):         self.default = default
0.54 /testbed/django/db/models/fields/__init__.py(147):         self.editable = editable
0.54 /testbed/django/db/models/fields/__init__.py(148):         self.serialize = serialize
0.54 /testbed/django/db/models/fields/__init__.py(149):         self.unique_for_date = unique_for_date
0.54 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_month = unique_for_month
0.54 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_year = unique_for_year
0.54 /testbed/django/db/models/fields/__init__.py(152):         if isinstance(choices, collections.abc.Iterator):
0.54 /testbed/django/db/models/fields/__init__.py(154):         self.choices = choices
0.54 /testbed/django/db/models/fields/__init__.py(155):         self.help_text = help_text
0.54 /testbed/django/db/models/fields/__init__.py(156):         self.db_index = db_index
0.54 /testbed/django/db/models/fields/__init__.py(157):         self.db_column = db_column
0.54 /testbed/django/db/models/fields/__init__.py(158):         self._db_tablespace = db_tablespace
0.54 /testbed/django/db/models/fields/__init__.py(159):         self.auto_created = auto_created
0.54 /testbed/django/db/models/fields/__init__.py(162):         if auto_created:
0.54 /testbed/django/db/models/fields/__init__.py(166):             self.creation_counter = Field.creation_counter
0.54 /testbed/django/db/models/fields/__init__.py(167):             Field.creation_counter += 1
0.54 /testbed/django/db/models/fields/__init__.py(169):         self._validators = list(validators)  # Store for deconstruction later
0.54 /testbed/django/db/models/fields/__init__.py(171):         messages = {}
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(174):         messages.update(error_messages or {})
0.54 /testbed/django/db/models/fields/__init__.py(175):         self._error_messages = error_messages  # Store for deconstruction later
0.54 /testbed/django/db/models/fields/__init__.py(176):         self.error_messages = messages
0.54 /testbed/django/db/models/fields/__init__.py(986):         super().__init__(*args, **kwargs)
0.54 /testbed/django/db/models/fields/__init__.py(138):         self.name = name
0.54 /testbed/django/db/models/fields/__init__.py(139):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.54 /testbed/django/db/models/fields/__init__.py(140):         self._verbose_name = verbose_name  # Store original for deconstruction
0.54 /testbed/django/db/models/fields/__init__.py(141):         self.primary_key = primary_key
0.54 /testbed/django/db/models/fields/__init__.py(142):         self.max_length, self._unique = max_length, unique
0.54 /testbed/django/db/models/fields/__init__.py(143):         self.blank, self.null = blank, null
0.54 /testbed/django/db/models/fields/__init__.py(144):         self.remote_field = rel
0.54 /testbed/django/db/models/fields/__init__.py(145):         self.is_relation = self.remote_field is not None
0.54 /testbed/django/db/models/fields/__init__.py(146):         self.default = default
0.54 /testbed/django/db/models/fields/__init__.py(147):         self.editable = editable
0.54 /testbed/django/db/models/fields/__init__.py(148):         self.serialize = serialize
0.54 /testbed/django/db/models/fields/__init__.py(149):         self.unique_for_date = unique_for_date
0.54 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_month = unique_for_month
0.54 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_year = unique_for_year
0.54 /testbed/django/db/models/fields/__init__.py(152):         if isinstance(choices, collections.abc.Iterator):
0.54 /testbed/django/db/models/fields/__init__.py(154):         self.choices = choices
0.54 /testbed/django/db/models/fields/__init__.py(155):         self.help_text = help_text
0.54 /testbed/django/db/models/fields/__init__.py(156):         self.db_index = db_index
0.54 /testbed/django/db/models/fields/__init__.py(157):         self.db_column = db_column
0.54 /testbed/django/db/models/fields/__init__.py(158):         self._db_tablespace = db_tablespace
0.54 /testbed/django/db/models/fields/__init__.py(159):         self.auto_created = auto_created
0.54 /testbed/django/db/models/fields/__init__.py(162):         if auto_created:
0.54 /testbed/django/db/models/fields/__init__.py(166):             self.creation_counter = Field.creation_counter
0.54 /testbed/django/db/models/fields/__init__.py(167):             Field.creation_counter += 1
0.54 /testbed/django/db/models/fields/__init__.py(169):         self._validators = list(validators)  # Store for deconstruction later
0.54 /testbed/django/db/models/fields/__init__.py(171):         messages = {}
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(174):         messages.update(error_messages or {})
0.54 /testbed/django/db/models/fields/__init__.py(175):         self._error_messages = error_messages  # Store for deconstruction later
0.54 /testbed/django/db/models/fields/__init__.py(176):         self.error_messages = messages
0.54 /testbed/django/db/models/fields/__init__.py(987):         self.validators.append(validators.MaxLengthValidator(self.max_length))
0.54 /testbed/django/db/models/fields/__init__.py(595):         return [*self.default_validators, *self._validators]
0.54 /testbed/django/db/models/fields/__init__.py(762):         self.set_attributes_from_name(name)
0.54 /testbed/django/db/models/fields/__init__.py(749):         self.name = self.name or name
0.54 /testbed/django/db/models/fields/__init__.py(750):         self.attname, self.column = self.get_attname_column()
0.54 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.54 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.54 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.54 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.54 /testbed/django/db/models/fields/__init__.py(751):         self.concrete = self.column is not None
0.54 /testbed/django/db/models/fields/__init__.py(752):         if self.verbose_name is None and self.name:
0.54 /testbed/django/db/models/fields/__init__.py(763):         self.model = cls
0.54 /testbed/django/db/models/fields/__init__.py(764):         cls._meta.add_field(self, private=private_only)
0.54 /testbed/django/db/models/fields/__init__.py(765):         if self.column:
0.54 /testbed/django/db/models/fields/__init__.py(769):             if not getattr(cls, self.attname, None):
0.54 /testbed/django/db/models/fields/__init__.py(770):                 setattr(cls, self.attname, self.descriptor_class(self))
0.54 /testbed/django/db/models/fields/__init__.py(771):         if self.choices is not None:
0.54 /testbed/django/db/models/fields/__init__.py(762):         self.set_attributes_from_name(name)
0.54 /testbed/django/db/models/fields/__init__.py(749):         self.name = self.name or name
0.54 /testbed/django/db/models/fields/__init__.py(750):         self.attname, self.column = self.get_attname_column()
0.54 /testbed/django/db/models/fields/__init__.py(751):         self.concrete = self.column is not None
0.54 /testbed/django/db/models/fields/__init__.py(752):         if self.verbose_name is None and self.name:
0.54 /testbed/django/db/models/fields/__init__.py(763):         self.model = cls
0.54 /testbed/django/db/models/fields/__init__.py(764):         cls._meta.add_field(self, private=private_only)
0.54 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.54 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.54 /testbed/django/db/models/fields/__init__.py(765):         if self.column:
0.54 /testbed/django/db/models/fields/__init__.py(769):             if not getattr(cls, self.attname, None):
0.54 /testbed/django/db/models/fields/__init__.py(770):                 setattr(cls, self.attname, self.descriptor_class(self))
0.54 /testbed/django/db/models/fields/__init__.py(771):         if self.choices is not None:
0.54 /testbed/django/db/models/fields/__init__.py(762):         self.set_attributes_from_name(name)
0.54 /testbed/django/db/models/fields/__init__.py(749):         self.name = self.name or name
0.54 /testbed/django/db/models/fields/__init__.py(750):         self.attname, self.column = self.get_attname_column()
0.54 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.54 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.54 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.54 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.54 /testbed/django/db/models/fields/__init__.py(751):         self.concrete = self.column is not None
0.54 /testbed/django/db/models/fields/__init__.py(752):         if self.verbose_name is None and self.name:
0.54 /testbed/django/db/models/fields/__init__.py(763):         self.model = cls
0.54 /testbed/django/db/models/fields/__init__.py(764):         cls._meta.add_field(self, private=private_only)
0.54 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.54 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.54 /testbed/django/db/models/fields/__init__.py(765):         if self.column:
0.54 /testbed/django/db/models/fields/__init__.py(769):             if not getattr(cls, self.attname, None):
0.54 /testbed/django/db/models/fields/__init__.py(770):                 setattr(cls, self.attname, self.descriptor_class(self))
0.54 /testbed/django/db/models/fields/__init__.py(771):         if self.choices is not None:
0.54 /testbed/django/db/models/fields/__init__.py(2356):         kwargs['blank'] = True
0.54 /testbed/django/db/models/fields/__init__.py(2357):         super().__init__(*args, **kwargs)
0.54 /testbed/django/db/models/fields/__init__.py(138):         self.name = name
0.54 /testbed/django/db/models/fields/__init__.py(139):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.54 /testbed/django/db/models/fields/__init__.py(140):         self._verbose_name = verbose_name  # Store original for deconstruction
0.54 /testbed/django/db/models/fields/__init__.py(141):         self.primary_key = primary_key
0.54 /testbed/django/db/models/fields/__init__.py(142):         self.max_length, self._unique = max_length, unique
0.54 /testbed/django/db/models/fields/__init__.py(143):         self.blank, self.null = blank, null
0.54 /testbed/django/db/models/fields/__init__.py(144):         self.remote_field = rel
0.54 /testbed/django/db/models/fields/__init__.py(145):         self.is_relation = self.remote_field is not None
0.54 /testbed/django/db/models/fields/__init__.py(146):         self.default = default
0.54 /testbed/django/db/models/fields/__init__.py(147):         self.editable = editable
0.54 /testbed/django/db/models/fields/__init__.py(148):         self.serialize = serialize
0.54 /testbed/django/db/models/fields/__init__.py(149):         self.unique_for_date = unique_for_date
0.54 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_month = unique_for_month
0.54 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_year = unique_for_year
0.54 /testbed/django/db/models/fields/__init__.py(152):         if isinstance(choices, collections.abc.Iterator):
0.54 /testbed/django/db/models/fields/__init__.py(154):         self.choices = choices
0.54 /testbed/django/db/models/fields/__init__.py(155):         self.help_text = help_text
0.54 /testbed/django/db/models/fields/__init__.py(156):         self.db_index = db_index
0.54 /testbed/django/db/models/fields/__init__.py(157):         self.db_column = db_column
0.54 /testbed/django/db/models/fields/__init__.py(158):         self._db_tablespace = db_tablespace
0.54 /testbed/django/db/models/fields/__init__.py(159):         self.auto_created = auto_created
0.54 /testbed/django/db/models/fields/__init__.py(162):         if auto_created:
0.54 /testbed/django/db/models/fields/__init__.py(163):             self.creation_counter = Field.auto_creation_counter
0.54 /testbed/django/db/models/fields/__init__.py(164):             Field.auto_creation_counter -= 1
0.54 /testbed/django/db/models/fields/__init__.py(169):         self._validators = list(validators)  # Store for deconstruction later
0.54 /testbed/django/db/models/fields/__init__.py(171):         messages = {}
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(174):         messages.update(error_messages or {})
0.54 /testbed/django/db/models/fields/__init__.py(175):         self._error_messages = error_messages  # Store for deconstruction later
0.54 /testbed/django/db/models/fields/__init__.py(176):         self.error_messages = messages
0.54 /testbed/django/db/models/fields/__init__.py(2393):         assert not cls._meta.auto_field, (
0.54 /testbed/django/db/models/fields/__init__.py(2397):         super().contribute_to_class(cls, name, **kwargs)
0.54 /testbed/django/db/models/fields/__init__.py(762):         self.set_attributes_from_name(name)
0.54 /testbed/django/db/models/fields/__init__.py(749):         self.name = self.name or name
0.54 /testbed/django/db/models/fields/__init__.py(750):         self.attname, self.column = self.get_attname_column()
0.54 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.54 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.54 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.54 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.54 /testbed/django/db/models/fields/__init__.py(751):         self.concrete = self.column is not None
0.54 /testbed/django/db/models/fields/__init__.py(752):         if self.verbose_name is None and self.name:
0.54 /testbed/django/db/models/fields/__init__.py(763):         self.model = cls
0.54 /testbed/django/db/models/fields/__init__.py(764):         cls._meta.add_field(self, private=private_only)
0.54 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.54 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.54 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.54 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.54 /testbed/django/db/models/fields/__init__.py(765):         if self.column:
0.54 /testbed/django/db/models/fields/__init__.py(769):             if not getattr(cls, self.attname, None):
0.54 /testbed/django/db/models/fields/__init__.py(770):                 setattr(cls, self.attname, self.descriptor_class(self))
0.54 /testbed/django/db/models/fields/__init__.py(771):         if self.choices is not None:
0.54 /testbed/django/db/models/fields/__init__.py(2398):         cls._meta.auto_field = self
0.54 /testbed/django/db/models/fields/__init__.py(986):         super().__init__(*args, **kwargs)
0.54 /testbed/django/db/models/fields/__init__.py(138):         self.name = name
0.54 /testbed/django/db/models/fields/__init__.py(139):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.54 /testbed/django/db/models/fields/__init__.py(140):         self._verbose_name = verbose_name  # Store original for deconstruction
0.54 /testbed/django/db/models/fields/__init__.py(141):         self.primary_key = primary_key
0.54 /testbed/django/db/models/fields/__init__.py(142):         self.max_length, self._unique = max_length, unique
0.54 /testbed/django/db/models/fields/__init__.py(143):         self.blank, self.null = blank, null
0.54 /testbed/django/db/models/fields/__init__.py(144):         self.remote_field = rel
0.54 /testbed/django/db/models/fields/__init__.py(145):         self.is_relation = self.remote_field is not None
0.54 /testbed/django/db/models/fields/__init__.py(146):         self.default = default
0.54 /testbed/django/db/models/fields/__init__.py(147):         self.editable = editable
0.54 /testbed/django/db/models/fields/__init__.py(148):         self.serialize = serialize
0.54 /testbed/django/db/models/fields/__init__.py(149):         self.unique_for_date = unique_for_date
0.54 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_month = unique_for_month
0.54 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_year = unique_for_year
0.54 /testbed/django/db/models/fields/__init__.py(152):         if isinstance(choices, collections.abc.Iterator):
0.54 /testbed/django/db/models/fields/__init__.py(154):         self.choices = choices
0.54 /testbed/django/db/models/fields/__init__.py(155):         self.help_text = help_text
0.54 /testbed/django/db/models/fields/__init__.py(156):         self.db_index = db_index
0.54 /testbed/django/db/models/fields/__init__.py(157):         self.db_column = db_column
0.54 /testbed/django/db/models/fields/__init__.py(158):         self._db_tablespace = db_tablespace
0.54 /testbed/django/db/models/fields/__init__.py(159):         self.auto_created = auto_created
0.54 /testbed/django/db/models/fields/__init__.py(162):         if auto_created:
0.54 /testbed/django/db/models/fields/__init__.py(166):             self.creation_counter = Field.creation_counter
0.54 /testbed/django/db/models/fields/__init__.py(167):             Field.creation_counter += 1
0.54 /testbed/django/db/models/fields/__init__.py(169):         self._validators = list(validators)  # Store for deconstruction later
0.54 /testbed/django/db/models/fields/__init__.py(171):         messages = {}
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(174):         messages.update(error_messages or {})
0.54 /testbed/django/db/models/fields/__init__.py(175):         self._error_messages = error_messages  # Store for deconstruction later
0.54 /testbed/django/db/models/fields/__init__.py(176):         self.error_messages = messages
0.54 /testbed/django/db/models/fields/__init__.py(987):         self.validators.append(validators.MaxLengthValidator(self.max_length))
0.54 /testbed/django/db/models/fields/__init__.py(595):         return [*self.default_validators, *self._validators]
0.54 /testbed/django/db/models/fields/__init__.py(138):         self.name = name
0.54 /testbed/django/db/models/fields/__init__.py(139):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.54 /testbed/django/db/models/fields/__init__.py(140):         self._verbose_name = verbose_name  # Store original for deconstruction
0.54 /testbed/django/db/models/fields/__init__.py(141):         self.primary_key = primary_key
0.54 /testbed/django/db/models/fields/__init__.py(142):         self.max_length, self._unique = max_length, unique
0.54 /testbed/django/db/models/fields/__init__.py(143):         self.blank, self.null = blank, null
0.54 /testbed/django/db/models/fields/__init__.py(144):         self.remote_field = rel
0.54 /testbed/django/db/models/fields/__init__.py(145):         self.is_relation = self.remote_field is not None
0.54 /testbed/django/db/models/fields/__init__.py(146):         self.default = default
0.54 /testbed/django/db/models/fields/__init__.py(147):         self.editable = editable
0.54 /testbed/django/db/models/fields/__init__.py(148):         self.serialize = serialize
0.54 /testbed/django/db/models/fields/__init__.py(149):         self.unique_for_date = unique_for_date
0.54 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_month = unique_for_month
0.54 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_year = unique_for_year
0.54 /testbed/django/db/models/fields/__init__.py(152):         if isinstance(choices, collections.abc.Iterator):
0.54 /testbed/django/db/models/fields/__init__.py(154):         self.choices = choices
0.54 /testbed/django/db/models/fields/__init__.py(155):         self.help_text = help_text
0.54 /testbed/django/db/models/fields/__init__.py(156):         self.db_index = db_index
0.54 /testbed/django/db/models/fields/__init__.py(157):         self.db_column = db_column
0.54 /testbed/django/db/models/fields/__init__.py(158):         self._db_tablespace = db_tablespace
0.54 /testbed/django/db/models/fields/__init__.py(159):         self.auto_created = auto_created
0.54 /testbed/django/db/models/fields/__init__.py(162):         if auto_created:
0.54 /testbed/django/db/models/fields/__init__.py(166):             self.creation_counter = Field.creation_counter
0.54 /testbed/django/db/models/fields/__init__.py(167):             Field.creation_counter += 1
0.54 /testbed/django/db/models/fields/__init__.py(169):         self._validators = list(validators)  # Store for deconstruction later
0.54 /testbed/django/db/models/fields/__init__.py(171):         messages = {}
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(174):         messages.update(error_messages or {})
0.54 /testbed/django/db/models/fields/__init__.py(175):         self._error_messages = error_messages  # Store for deconstruction later
0.54 /testbed/django/db/models/fields/__init__.py(176):         self.error_messages = messages
0.54 /testbed/django/db/models/fields/__init__.py(762):         self.set_attributes_from_name(name)
0.54 /testbed/django/db/models/fields/__init__.py(749):         self.name = self.name or name
0.54 /testbed/django/db/models/fields/__init__.py(750):         self.attname, self.column = self.get_attname_column()
0.54 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.54 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.54 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.54 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.54 /testbed/django/db/models/fields/__init__.py(751):         self.concrete = self.column is not None
0.54 /testbed/django/db/models/fields/__init__.py(752):         if self.verbose_name is None and self.name:
0.54 /testbed/django/db/models/fields/__init__.py(763):         self.model = cls
0.54 /testbed/django/db/models/fields/__init__.py(764):         cls._meta.add_field(self, private=private_only)
0.54 /testbed/django/db/models/fields/__init__.py(765):         if self.column:
0.54 /testbed/django/db/models/fields/__init__.py(769):             if not getattr(cls, self.attname, None):
0.54 /testbed/django/db/models/fields/__init__.py(770):                 setattr(cls, self.attname, self.descriptor_class(self))
0.54 /testbed/django/db/models/fields/__init__.py(771):         if self.choices is not None:
0.54 /testbed/django/db/models/fields/__init__.py(762):         self.set_attributes_from_name(name)
0.54 /testbed/django/db/models/fields/__init__.py(749):         self.name = self.name or name
0.54 /testbed/django/db/models/fields/__init__.py(750):         self.attname, self.column = self.get_attname_column()
0.54 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.54 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.54 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.54 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.54 /testbed/django/db/models/fields/__init__.py(751):         self.concrete = self.column is not None
0.54 /testbed/django/db/models/fields/__init__.py(752):         if self.verbose_name is None and self.name:
0.54 /testbed/django/db/models/fields/__init__.py(763):         self.model = cls
0.54 /testbed/django/db/models/fields/__init__.py(764):         cls._meta.add_field(self, private=private_only)
0.54 /testbed/django/db/models/fields/__init__.py(765):         if self.column:
0.54 /testbed/django/db/models/fields/__init__.py(769):             if not getattr(cls, self.attname, None):
0.54 /testbed/django/db/models/fields/__init__.py(770):                 setattr(cls, self.attname, self.descriptor_class(self))
0.54 /testbed/django/db/models/fields/__init__.py(771):         if self.choices is not None:
0.54 /testbed/django/db/models/fields/__init__.py(738):         return self._db_tablespace or settings.DEFAULT_INDEX_TABLESPACE
0.54 /testbed/django/db/models/fields/__init__.py(138):         self.name = name
0.54 /testbed/django/db/models/fields/__init__.py(139):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.54 /testbed/django/db/models/fields/__init__.py(140):         self._verbose_name = verbose_name  # Store original for deconstruction
0.54 /testbed/django/db/models/fields/__init__.py(141):         self.primary_key = primary_key
0.54 /testbed/django/db/models/fields/__init__.py(142):         self.max_length, self._unique = max_length, unique
0.54 /testbed/django/db/models/fields/__init__.py(143):         self.blank, self.null = blank, null
0.54 /testbed/django/db/models/fields/__init__.py(144):         self.remote_field = rel
0.54 /testbed/django/db/models/fields/__init__.py(145):         self.is_relation = self.remote_field is not None
0.54 /testbed/django/db/models/fields/__init__.py(146):         self.default = default
0.54 /testbed/django/db/models/fields/__init__.py(147):         self.editable = editable
0.54 /testbed/django/db/models/fields/__init__.py(148):         self.serialize = serialize
0.54 /testbed/django/db/models/fields/__init__.py(149):         self.unique_for_date = unique_for_date
0.54 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_month = unique_for_month
0.54 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_year = unique_for_year
0.54 /testbed/django/db/models/fields/__init__.py(152):         if isinstance(choices, collections.abc.Iterator):
0.54 /testbed/django/db/models/fields/__init__.py(154):         self.choices = choices
0.54 /testbed/django/db/models/fields/__init__.py(155):         self.help_text = help_text
0.54 /testbed/django/db/models/fields/__init__.py(156):         self.db_index = db_index
0.54 /testbed/django/db/models/fields/__init__.py(157):         self.db_column = db_column
0.54 /testbed/django/db/models/fields/__init__.py(158):         self._db_tablespace = db_tablespace
0.54 /testbed/django/db/models/fields/__init__.py(159):         self.auto_created = auto_created
0.54 /testbed/django/db/models/fields/__init__.py(162):         if auto_created:
0.54 /testbed/django/db/models/fields/__init__.py(166):             self.creation_counter = Field.creation_counter
0.54 /testbed/django/db/models/fields/__init__.py(167):             Field.creation_counter += 1
0.54 /testbed/django/db/models/fields/__init__.py(169):         self._validators = list(validators)  # Store for deconstruction later
0.54 /testbed/django/db/models/fields/__init__.py(171):         messages = {}
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(174):         messages.update(error_messages or {})
0.54 /testbed/django/db/models/fields/__init__.py(175):         self._error_messages = error_messages  # Store for deconstruction later
0.54 /testbed/django/db/models/fields/__init__.py(176):         self.error_messages = messages
0.54 /testbed/django/db/models/fields/__init__.py(738):         return self._db_tablespace or settings.DEFAULT_INDEX_TABLESPACE
0.54 /testbed/django/db/models/fields/__init__.py(138):         self.name = name
0.54 /testbed/django/db/models/fields/__init__.py(139):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.54 /testbed/django/db/models/fields/__init__.py(140):         self._verbose_name = verbose_name  # Store original for deconstruction
0.54 /testbed/django/db/models/fields/__init__.py(141):         self.primary_key = primary_key
0.54 /testbed/django/db/models/fields/__init__.py(142):         self.max_length, self._unique = max_length, unique
0.54 /testbed/django/db/models/fields/__init__.py(143):         self.blank, self.null = blank, null
0.54 /testbed/django/db/models/fields/__init__.py(144):         self.remote_field = rel
0.54 /testbed/django/db/models/fields/__init__.py(145):         self.is_relation = self.remote_field is not None
0.54 /testbed/django/db/models/fields/__init__.py(146):         self.default = default
0.54 /testbed/django/db/models/fields/__init__.py(147):         self.editable = editable
0.54 /testbed/django/db/models/fields/__init__.py(148):         self.serialize = serialize
0.54 /testbed/django/db/models/fields/__init__.py(149):         self.unique_for_date = unique_for_date
0.54 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_month = unique_for_month
0.54 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_year = unique_for_year
0.54 /testbed/django/db/models/fields/__init__.py(152):         if isinstance(choices, collections.abc.Iterator):
0.54 /testbed/django/db/models/fields/__init__.py(154):         self.choices = choices
0.54 /testbed/django/db/models/fields/__init__.py(155):         self.help_text = help_text
0.54 /testbed/django/db/models/fields/__init__.py(156):         self.db_index = db_index
0.54 /testbed/django/db/models/fields/__init__.py(157):         self.db_column = db_column
0.54 /testbed/django/db/models/fields/__init__.py(158):         self._db_tablespace = db_tablespace
0.54 /testbed/django/db/models/fields/__init__.py(159):         self.auto_created = auto_created
0.54 /testbed/django/db/models/fields/__init__.py(162):         if auto_created:
0.54 /testbed/django/db/models/fields/__init__.py(166):             self.creation_counter = Field.creation_counter
0.54 /testbed/django/db/models/fields/__init__.py(167):             Field.creation_counter += 1
0.54 /testbed/django/db/models/fields/__init__.py(169):         self._validators = list(validators)  # Store for deconstruction later
0.54 /testbed/django/db/models/fields/__init__.py(171):         messages = {}
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(174):         messages.update(error_messages or {})
0.54 /testbed/django/db/models/fields/__init__.py(175):         self._error_messages = error_messages  # Store for deconstruction later
0.54 /testbed/django/db/models/fields/__init__.py(176):         self.error_messages = messages
0.54 /testbed/django/db/models/fields/__init__.py(762):         self.set_attributes_from_name(name)
0.54 /testbed/django/db/models/fields/__init__.py(749):         self.name = self.name or name
0.54 /testbed/django/db/models/fields/__init__.py(750):         self.attname, self.column = self.get_attname_column()
0.54 /testbed/django/db/models/fields/__init__.py(751):         self.concrete = self.column is not None
0.54 /testbed/django/db/models/fields/__init__.py(752):         if self.verbose_name is None and self.name:
0.54 /testbed/django/db/models/fields/__init__.py(753):             self.verbose_name = self.name.replace('_', ' ')
0.54 /testbed/django/db/models/fields/__init__.py(763):         self.model = cls
0.54 /testbed/django/db/models/fields/__init__.py(764):         cls._meta.add_field(self, private=private_only)
0.54 /testbed/django/db/models/fields/__init__.py(765):         if self.column:
0.54 /testbed/django/db/models/fields/__init__.py(769):             if not getattr(cls, self.attname, None):
0.54 /testbed/django/db/models/fields/__init__.py(770):                 setattr(cls, self.attname, self.descriptor_class(self))
0.54 /testbed/django/db/models/fields/__init__.py(771):         if self.choices is not None:
0.54 /testbed/django/db/models/fields/__init__.py(762):         self.set_attributes_from_name(name)
0.54 /testbed/django/db/models/fields/__init__.py(749):         self.name = self.name or name
0.54 /testbed/django/db/models/fields/__init__.py(750):         self.attname, self.column = self.get_attname_column()
0.54 /testbed/django/db/models/fields/__init__.py(751):         self.concrete = self.column is not None
0.54 /testbed/django/db/models/fields/__init__.py(752):         if self.verbose_name is None and self.name:
0.54 /testbed/django/db/models/fields/__init__.py(753):             self.verbose_name = self.name.replace('_', ' ')
0.54 /testbed/django/db/models/fields/__init__.py(763):         self.model = cls
0.54 /testbed/django/db/models/fields/__init__.py(764):         cls._meta.add_field(self, private=private_only)
0.54 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.54 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.54 /testbed/django/db/models/fields/__init__.py(765):         if self.column:
0.54 /testbed/django/db/models/fields/__init__.py(769):             if not getattr(cls, self.attname, None):
0.54 /testbed/django/db/models/fields/__init__.py(770):                 setattr(cls, self.attname, self.descriptor_class(self))
0.54 /testbed/django/db/models/fields/__init__.py(771):         if self.choices is not None:
0.54 /testbed/django/db/models/fields/__init__.py(2356):         kwargs['blank'] = True
0.54 /testbed/django/db/models/fields/__init__.py(2357):         super().__init__(*args, **kwargs)
0.54 /testbed/django/db/models/fields/__init__.py(138):         self.name = name
0.54 /testbed/django/db/models/fields/__init__.py(139):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.54 /testbed/django/db/models/fields/__init__.py(140):         self._verbose_name = verbose_name  # Store original for deconstruction
0.54 /testbed/django/db/models/fields/__init__.py(141):         self.primary_key = primary_key
0.54 /testbed/django/db/models/fields/__init__.py(142):         self.max_length, self._unique = max_length, unique
0.54 /testbed/django/db/models/fields/__init__.py(143):         self.blank, self.null = blank, null
0.54 /testbed/django/db/models/fields/__init__.py(144):         self.remote_field = rel
0.54 /testbed/django/db/models/fields/__init__.py(145):         self.is_relation = self.remote_field is not None
0.54 /testbed/django/db/models/fields/__init__.py(146):         self.default = default
0.54 /testbed/django/db/models/fields/__init__.py(147):         self.editable = editable
0.54 /testbed/django/db/models/fields/__init__.py(148):         self.serialize = serialize
0.54 /testbed/django/db/models/fields/__init__.py(149):         self.unique_for_date = unique_for_date
0.54 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_month = unique_for_month
0.54 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_year = unique_for_year
0.54 /testbed/django/db/models/fields/__init__.py(152):         if isinstance(choices, collections.abc.Iterator):
0.54 /testbed/django/db/models/fields/__init__.py(154):         self.choices = choices
0.54 /testbed/django/db/models/fields/__init__.py(155):         self.help_text = help_text
0.54 /testbed/django/db/models/fields/__init__.py(156):         self.db_index = db_index
0.54 /testbed/django/db/models/fields/__init__.py(157):         self.db_column = db_column
0.54 /testbed/django/db/models/fields/__init__.py(158):         self._db_tablespace = db_tablespace
0.54 /testbed/django/db/models/fields/__init__.py(159):         self.auto_created = auto_created
0.54 /testbed/django/db/models/fields/__init__.py(162):         if auto_created:
0.54 /testbed/django/db/models/fields/__init__.py(163):             self.creation_counter = Field.auto_creation_counter
0.54 /testbed/django/db/models/fields/__init__.py(164):             Field.auto_creation_counter -= 1
0.54 /testbed/django/db/models/fields/__init__.py(169):         self._validators = list(validators)  # Store for deconstruction later
0.54 /testbed/django/db/models/fields/__init__.py(171):         messages = {}
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(174):         messages.update(error_messages or {})
0.54 /testbed/django/db/models/fields/__init__.py(175):         self._error_messages = error_messages  # Store for deconstruction later
0.54 /testbed/django/db/models/fields/__init__.py(176):         self.error_messages = messages
0.54 /testbed/django/db/models/fields/__init__.py(2393):         assert not cls._meta.auto_field, (
0.54 /testbed/django/db/models/fields/__init__.py(2397):         super().contribute_to_class(cls, name, **kwargs)
0.54 /testbed/django/db/models/fields/__init__.py(762):         self.set_attributes_from_name(name)
0.54 /testbed/django/db/models/fields/__init__.py(749):         self.name = self.name or name
0.54 /testbed/django/db/models/fields/__init__.py(750):         self.attname, self.column = self.get_attname_column()
0.54 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.54 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.54 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.54 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.54 /testbed/django/db/models/fields/__init__.py(751):         self.concrete = self.column is not None
0.54 /testbed/django/db/models/fields/__init__.py(752):         if self.verbose_name is None and self.name:
0.54 /testbed/django/db/models/fields/__init__.py(763):         self.model = cls
0.54 /testbed/django/db/models/fields/__init__.py(764):         cls._meta.add_field(self, private=private_only)
0.54 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.54 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.54 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.54 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.54 /testbed/django/db/models/fields/__init__.py(765):         if self.column:
0.54 /testbed/django/db/models/fields/__init__.py(769):             if not getattr(cls, self.attname, None):
0.54 /testbed/django/db/models/fields/__init__.py(770):                 setattr(cls, self.attname, self.descriptor_class(self))
0.54 /testbed/django/db/models/fields/__init__.py(771):         if self.choices is not None:
0.54 /testbed/django/db/models/fields/__init__.py(2398):         cls._meta.auto_field = self
0.54 /testbed/django/db/models/fields/__init__.py(2356):         kwargs['blank'] = True
0.54 /testbed/django/db/models/fields/__init__.py(2357):         super().__init__(*args, **kwargs)
0.54 /testbed/django/db/models/fields/__init__.py(138):         self.name = name
0.54 /testbed/django/db/models/fields/__init__.py(139):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.54 /testbed/django/db/models/fields/__init__.py(140):         self._verbose_name = verbose_name  # Store original for deconstruction
0.54 /testbed/django/db/models/fields/__init__.py(141):         self.primary_key = primary_key
0.54 /testbed/django/db/models/fields/__init__.py(142):         self.max_length, self._unique = max_length, unique
0.54 /testbed/django/db/models/fields/__init__.py(143):         self.blank, self.null = blank, null
0.54 /testbed/django/db/models/fields/__init__.py(144):         self.remote_field = rel
0.54 /testbed/django/db/models/fields/__init__.py(145):         self.is_relation = self.remote_field is not None
0.54 /testbed/django/db/models/fields/__init__.py(146):         self.default = default
0.54 /testbed/django/db/models/fields/__init__.py(147):         self.editable = editable
0.54 /testbed/django/db/models/fields/__init__.py(148):         self.serialize = serialize
0.54 /testbed/django/db/models/fields/__init__.py(149):         self.unique_for_date = unique_for_date
0.54 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_month = unique_for_month
0.54 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_year = unique_for_year
0.54 /testbed/django/db/models/fields/__init__.py(152):         if isinstance(choices, collections.abc.Iterator):
0.54 /testbed/django/db/models/fields/__init__.py(154):         self.choices = choices
0.54 /testbed/django/db/models/fields/__init__.py(155):         self.help_text = help_text
0.54 /testbed/django/db/models/fields/__init__.py(156):         self.db_index = db_index
0.54 /testbed/django/db/models/fields/__init__.py(157):         self.db_column = db_column
0.54 /testbed/django/db/models/fields/__init__.py(158):         self._db_tablespace = db_tablespace
0.54 /testbed/django/db/models/fields/__init__.py(159):         self.auto_created = auto_created
0.54 /testbed/django/db/models/fields/__init__.py(162):         if auto_created:
0.54 /testbed/django/db/models/fields/__init__.py(163):             self.creation_counter = Field.auto_creation_counter
0.54 /testbed/django/db/models/fields/__init__.py(164):             Field.auto_creation_counter -= 1
0.54 /testbed/django/db/models/fields/__init__.py(169):         self._validators = list(validators)  # Store for deconstruction later
0.54 /testbed/django/db/models/fields/__init__.py(171):         messages = {}
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(174):         messages.update(error_messages or {})
0.54 /testbed/django/db/models/fields/__init__.py(175):         self._error_messages = error_messages  # Store for deconstruction later
0.54 /testbed/django/db/models/fields/__init__.py(176):         self.error_messages = messages
0.54 /testbed/django/db/models/fields/__init__.py(2393):         assert not cls._meta.auto_field, (
0.54 /testbed/django/db/models/fields/__init__.py(2397):         super().contribute_to_class(cls, name, **kwargs)
0.54 /testbed/django/db/models/fields/__init__.py(762):         self.set_attributes_from_name(name)
0.54 /testbed/django/db/models/fields/__init__.py(749):         self.name = self.name or name
0.54 /testbed/django/db/models/fields/__init__.py(750):         self.attname, self.column = self.get_attname_column()
0.54 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.54 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.54 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.54 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.54 /testbed/django/db/models/fields/__init__.py(751):         self.concrete = self.column is not None
0.54 /testbed/django/db/models/fields/__init__.py(752):         if self.verbose_name is None and self.name:
0.54 /testbed/django/db/models/fields/__init__.py(763):         self.model = cls
0.54 /testbed/django/db/models/fields/__init__.py(764):         cls._meta.add_field(self, private=private_only)
0.54 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.54 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.54 /testbed/django/db/models/fields/__init__.py(765):         if self.column:
0.54 /testbed/django/db/models/fields/__init__.py(769):             if not getattr(cls, self.attname, None):
0.54 /testbed/django/db/models/fields/__init__.py(770):                 setattr(cls, self.attname, self.descriptor_class(self))
0.54 /testbed/django/db/models/fields/__init__.py(771):         if self.choices is not None:
0.54 /testbed/django/db/models/fields/__init__.py(2398):         cls._meta.auto_field = self
0.54 /testbed/django/db/models/fields/__init__.py(138):         self.name = name
0.54 /testbed/django/db/models/fields/__init__.py(139):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.54 /testbed/django/db/models/fields/__init__.py(140):         self._verbose_name = verbose_name  # Store original for deconstruction
0.54 /testbed/django/db/models/fields/__init__.py(141):         self.primary_key = primary_key
0.54 /testbed/django/db/models/fields/__init__.py(142):         self.max_length, self._unique = max_length, unique
0.54 /testbed/django/db/models/fields/__init__.py(143):         self.blank, self.null = blank, null
0.54 /testbed/django/db/models/fields/__init__.py(144):         self.remote_field = rel
0.54 /testbed/django/db/models/fields/__init__.py(145):         self.is_relation = self.remote_field is not None
0.54 /testbed/django/db/models/fields/__init__.py(146):         self.default = default
0.54 /testbed/django/db/models/fields/__init__.py(147):         self.editable = editable
0.54 /testbed/django/db/models/fields/__init__.py(148):         self.serialize = serialize
0.54 /testbed/django/db/models/fields/__init__.py(149):         self.unique_for_date = unique_for_date
0.54 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_month = unique_for_month
0.54 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_year = unique_for_year
0.54 /testbed/django/db/models/fields/__init__.py(152):         if isinstance(choices, collections.abc.Iterator):
0.54 /testbed/django/db/models/fields/__init__.py(154):         self.choices = choices
0.54 /testbed/django/db/models/fields/__init__.py(155):         self.help_text = help_text
0.54 /testbed/django/db/models/fields/__init__.py(156):         self.db_index = db_index
0.54 /testbed/django/db/models/fields/__init__.py(157):         self.db_column = db_column
0.54 /testbed/django/db/models/fields/__init__.py(158):         self._db_tablespace = db_tablespace
0.54 /testbed/django/db/models/fields/__init__.py(159):         self.auto_created = auto_created
0.54 /testbed/django/db/models/fields/__init__.py(162):         if auto_created:
0.54 /testbed/django/db/models/fields/__init__.py(166):             self.creation_counter = Field.creation_counter
0.54 /testbed/django/db/models/fields/__init__.py(167):             Field.creation_counter += 1
0.54 /testbed/django/db/models/fields/__init__.py(169):         self._validators = list(validators)  # Store for deconstruction later
0.54 /testbed/django/db/models/fields/__init__.py(171):         messages = {}
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(174):         messages.update(error_messages or {})
0.54 /testbed/django/db/models/fields/__init__.py(175):         self._error_messages = error_messages  # Store for deconstruction later
0.54 /testbed/django/db/models/fields/__init__.py(176):         self.error_messages = messages
0.54 /testbed/django/db/models/fields/__init__.py(138):         self.name = name
0.54 /testbed/django/db/models/fields/__init__.py(139):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.54 /testbed/django/db/models/fields/__init__.py(140):         self._verbose_name = verbose_name  # Store original for deconstruction
0.54 /testbed/django/db/models/fields/__init__.py(141):         self.primary_key = primary_key
0.54 /testbed/django/db/models/fields/__init__.py(142):         self.max_length, self._unique = max_length, unique
0.54 /testbed/django/db/models/fields/__init__.py(143):         self.blank, self.null = blank, null
0.54 /testbed/django/db/models/fields/__init__.py(144):         self.remote_field = rel
0.54 /testbed/django/db/models/fields/__init__.py(145):         self.is_relation = self.remote_field is not None
0.54 /testbed/django/db/models/fields/__init__.py(146):         self.default = default
0.54 /testbed/django/db/models/fields/__init__.py(147):         self.editable = editable
0.54 /testbed/django/db/models/fields/__init__.py(148):         self.serialize = serialize
0.54 /testbed/django/db/models/fields/__init__.py(149):         self.unique_for_date = unique_for_date
0.54 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_month = unique_for_month
0.54 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_year = unique_for_year
0.54 /testbed/django/db/models/fields/__init__.py(152):         if isinstance(choices, collections.abc.Iterator):
0.54 /testbed/django/db/models/fields/__init__.py(154):         self.choices = choices
0.54 /testbed/django/db/models/fields/__init__.py(155):         self.help_text = help_text
0.54 /testbed/django/db/models/fields/__init__.py(156):         self.db_index = db_index
0.54 /testbed/django/db/models/fields/__init__.py(157):         self.db_column = db_column
0.54 /testbed/django/db/models/fields/__init__.py(158):         self._db_tablespace = db_tablespace
0.54 /testbed/django/db/models/fields/__init__.py(159):         self.auto_created = auto_created
0.54 /testbed/django/db/models/fields/__init__.py(162):         if auto_created:
0.54 /testbed/django/db/models/fields/__init__.py(166):             self.creation_counter = Field.creation_counter
0.54 /testbed/django/db/models/fields/__init__.py(167):             Field.creation_counter += 1
0.54 /testbed/django/db/models/fields/__init__.py(169):         self._validators = list(validators)  # Store for deconstruction later
0.54 /testbed/django/db/models/fields/__init__.py(171):         messages = {}
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(174):         messages.update(error_messages or {})
0.54 /testbed/django/db/models/fields/__init__.py(175):         self._error_messages = error_messages  # Store for deconstruction later
0.54 /testbed/django/db/models/fields/__init__.py(176):         self.error_messages = messages
0.54 /testbed/django/db/models/fields/__init__.py(138):         self.name = name
0.54 /testbed/django/db/models/fields/__init__.py(139):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.54 /testbed/django/db/models/fields/__init__.py(140):         self._verbose_name = verbose_name  # Store original for deconstruction
0.54 /testbed/django/db/models/fields/__init__.py(141):         self.primary_key = primary_key
0.54 /testbed/django/db/models/fields/__init__.py(142):         self.max_length, self._unique = max_length, unique
0.54 /testbed/django/db/models/fields/__init__.py(143):         self.blank, self.null = blank, null
0.54 /testbed/django/db/models/fields/__init__.py(144):         self.remote_field = rel
0.54 /testbed/django/db/models/fields/__init__.py(145):         self.is_relation = self.remote_field is not None
0.54 /testbed/django/db/models/fields/__init__.py(146):         self.default = default
0.54 /testbed/django/db/models/fields/__init__.py(147):         self.editable = editable
0.54 /testbed/django/db/models/fields/__init__.py(148):         self.serialize = serialize
0.54 /testbed/django/db/models/fields/__init__.py(149):         self.unique_for_date = unique_for_date
0.54 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_month = unique_for_month
0.54 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_year = unique_for_year
0.54 /testbed/django/db/models/fields/__init__.py(152):         if isinstance(choices, collections.abc.Iterator):
0.54 /testbed/django/db/models/fields/__init__.py(154):         self.choices = choices
0.54 /testbed/django/db/models/fields/__init__.py(155):         self.help_text = help_text
0.54 /testbed/django/db/models/fields/__init__.py(156):         self.db_index = db_index
0.54 /testbed/django/db/models/fields/__init__.py(157):         self.db_column = db_column
0.54 /testbed/django/db/models/fields/__init__.py(158):         self._db_tablespace = db_tablespace
0.54 /testbed/django/db/models/fields/__init__.py(159):         self.auto_created = auto_created
0.54 /testbed/django/db/models/fields/__init__.py(162):         if auto_created:
0.54 /testbed/django/db/models/fields/__init__.py(166):             self.creation_counter = Field.creation_counter
0.54 /testbed/django/db/models/fields/__init__.py(167):             Field.creation_counter += 1
0.54 /testbed/django/db/models/fields/__init__.py(169):         self._validators = list(validators)  # Store for deconstruction later
0.54 /testbed/django/db/models/fields/__init__.py(171):         messages = {}
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(174):         messages.update(error_messages or {})
0.54 /testbed/django/db/models/fields/__init__.py(175):         self._error_messages = error_messages  # Store for deconstruction later
0.54 /testbed/django/db/models/fields/__init__.py(176):         self.error_messages = messages
0.54 /testbed/django/db/models/fields/__init__.py(762):         self.set_attributes_from_name(name)
0.54 /testbed/django/db/models/fields/__init__.py(749):         self.name = self.name or name
0.54 /testbed/django/db/models/fields/__init__.py(750):         self.attname, self.column = self.get_attname_column()
0.54 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.54 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.54 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.54 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.54 /testbed/django/db/models/fields/__init__.py(751):         self.concrete = self.column is not None
0.54 /testbed/django/db/models/fields/__init__.py(752):         if self.verbose_name is None and self.name:
0.54 /testbed/django/db/models/fields/__init__.py(763):         self.model = cls
0.54 /testbed/django/db/models/fields/__init__.py(764):         cls._meta.add_field(self, private=private_only)
0.54 /testbed/django/db/models/fields/__init__.py(765):         if self.column:
0.54 /testbed/django/db/models/fields/__init__.py(769):             if not getattr(cls, self.attname, None):
0.54 /testbed/django/db/models/fields/__init__.py(770):                 setattr(cls, self.attname, self.descriptor_class(self))
0.54 /testbed/django/db/models/fields/__init__.py(771):         if self.choices is not None:
0.54 /testbed/django/db/models/fields/__init__.py(762):         self.set_attributes_from_name(name)
0.54 /testbed/django/db/models/fields/__init__.py(749):         self.name = self.name or name
0.54 /testbed/django/db/models/fields/__init__.py(750):         self.attname, self.column = self.get_attname_column()
0.54 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.54 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.54 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.54 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.54 /testbed/django/db/models/fields/__init__.py(751):         self.concrete = self.column is not None
0.54 /testbed/django/db/models/fields/__init__.py(752):         if self.verbose_name is None and self.name:
0.54 /testbed/django/db/models/fields/__init__.py(763):         self.model = cls
0.54 /testbed/django/db/models/fields/__init__.py(764):         cls._meta.add_field(self, private=private_only)
0.54 /testbed/django/db/models/fields/__init__.py(765):         if self.column:
0.54 /testbed/django/db/models/fields/__init__.py(769):             if not getattr(cls, self.attname, None):
0.54 /testbed/django/db/models/fields/__init__.py(770):                 setattr(cls, self.attname, self.descriptor_class(self))
0.54 /testbed/django/db/models/fields/__init__.py(771):         if self.choices is not None:
0.54 /testbed/django/db/models/fields/__init__.py(762):         self.set_attributes_from_name(name)
0.54 /testbed/django/db/models/fields/__init__.py(749):         self.name = self.name or name
0.54 /testbed/django/db/models/fields/__init__.py(750):         self.attname, self.column = self.get_attname_column()
0.54 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.54 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.54 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.54 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.54 /testbed/django/db/models/fields/__init__.py(751):         self.concrete = self.column is not None
0.54 /testbed/django/db/models/fields/__init__.py(752):         if self.verbose_name is None and self.name:
0.54 /testbed/django/db/models/fields/__init__.py(763):         self.model = cls
0.54 /testbed/django/db/models/fields/__init__.py(764):         cls._meta.add_field(self, private=private_only)
0.54 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.54 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.54 /testbed/django/db/models/fields/__init__.py(765):         if self.column:
0.54 /testbed/django/db/models/fields/__init__.py(769):             if not getattr(cls, self.attname, None):
0.54 /testbed/django/db/models/fields/__init__.py(770):                 setattr(cls, self.attname, self.descriptor_class(self))
0.54 /testbed/django/db/models/fields/__init__.py(771):         if self.choices is not None:
0.54 /testbed/django/db/models/fields/__init__.py(986):         super().__init__(*args, **kwargs)
0.54 /testbed/django/db/models/fields/__init__.py(138):         self.name = name
0.54 /testbed/django/db/models/fields/__init__.py(139):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.54 /testbed/django/db/models/fields/__init__.py(140):         self._verbose_name = verbose_name  # Store original for deconstruction
0.54 /testbed/django/db/models/fields/__init__.py(141):         self.primary_key = primary_key
0.54 /testbed/django/db/models/fields/__init__.py(142):         self.max_length, self._unique = max_length, unique
0.54 /testbed/django/db/models/fields/__init__.py(143):         self.blank, self.null = blank, null
0.54 /testbed/django/db/models/fields/__init__.py(144):         self.remote_field = rel
0.54 /testbed/django/db/models/fields/__init__.py(145):         self.is_relation = self.remote_field is not None
0.54 /testbed/django/db/models/fields/__init__.py(146):         self.default = default
0.54 /testbed/django/db/models/fields/__init__.py(147):         self.editable = editable
0.54 /testbed/django/db/models/fields/__init__.py(148):         self.serialize = serialize
0.54 /testbed/django/db/models/fields/__init__.py(149):         self.unique_for_date = unique_for_date
0.54 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_month = unique_for_month
0.54 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_year = unique_for_year
0.54 /testbed/django/db/models/fields/__init__.py(152):         if isinstance(choices, collections.abc.Iterator):
0.54 /testbed/django/db/models/fields/__init__.py(154):         self.choices = choices
0.54 /testbed/django/db/models/fields/__init__.py(155):         self.help_text = help_text
0.54 /testbed/django/db/models/fields/__init__.py(156):         self.db_index = db_index
0.54 /testbed/django/db/models/fields/__init__.py(157):         self.db_column = db_column
0.54 /testbed/django/db/models/fields/__init__.py(158):         self._db_tablespace = db_tablespace
0.54 /testbed/django/db/models/fields/__init__.py(159):         self.auto_created = auto_created
0.54 /testbed/django/db/models/fields/__init__.py(162):         if auto_created:
0.54 /testbed/django/db/models/fields/__init__.py(166):             self.creation_counter = Field.creation_counter
0.54 /testbed/django/db/models/fields/__init__.py(167):             Field.creation_counter += 1
0.54 /testbed/django/db/models/fields/__init__.py(169):         self._validators = list(validators)  # Store for deconstruction later
0.54 /testbed/django/db/models/fields/__init__.py(171):         messages = {}
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(174):         messages.update(error_messages or {})
0.54 /testbed/django/db/models/fields/__init__.py(175):         self._error_messages = error_messages  # Store for deconstruction later
0.54 /testbed/django/db/models/fields/__init__.py(176):         self.error_messages = messages
0.54 /testbed/django/db/models/fields/__init__.py(987):         self.validators.append(validators.MaxLengthValidator(self.max_length))
0.54 /testbed/django/db/models/fields/__init__.py(595):         return [*self.default_validators, *self._validators]
0.54 /testbed/django/db/models/fields/__init__.py(986):         super().__init__(*args, **kwargs)
0.54 /testbed/django/db/models/fields/__init__.py(138):         self.name = name
0.54 /testbed/django/db/models/fields/__init__.py(139):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.54 /testbed/django/db/models/fields/__init__.py(140):         self._verbose_name = verbose_name  # Store original for deconstruction
0.54 /testbed/django/db/models/fields/__init__.py(141):         self.primary_key = primary_key
0.54 /testbed/django/db/models/fields/__init__.py(142):         self.max_length, self._unique = max_length, unique
0.54 /testbed/django/db/models/fields/__init__.py(143):         self.blank, self.null = blank, null
0.54 /testbed/django/db/models/fields/__init__.py(144):         self.remote_field = rel
0.54 /testbed/django/db/models/fields/__init__.py(145):         self.is_relation = self.remote_field is not None
0.54 /testbed/django/db/models/fields/__init__.py(146):         self.default = default
0.54 /testbed/django/db/models/fields/__init__.py(147):         self.editable = editable
0.54 /testbed/django/db/models/fields/__init__.py(148):         self.serialize = serialize
0.54 /testbed/django/db/models/fields/__init__.py(149):         self.unique_for_date = unique_for_date
0.54 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_month = unique_for_month
0.54 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_year = unique_for_year
0.54 /testbed/django/db/models/fields/__init__.py(152):         if isinstance(choices, collections.abc.Iterator):
0.54 /testbed/django/db/models/fields/__init__.py(154):         self.choices = choices
0.54 /testbed/django/db/models/fields/__init__.py(155):         self.help_text = help_text
0.54 /testbed/django/db/models/fields/__init__.py(156):         self.db_index = db_index
0.54 /testbed/django/db/models/fields/__init__.py(157):         self.db_column = db_column
0.54 /testbed/django/db/models/fields/__init__.py(158):         self._db_tablespace = db_tablespace
0.54 /testbed/django/db/models/fields/__init__.py(159):         self.auto_created = auto_created
0.54 /testbed/django/db/models/fields/__init__.py(162):         if auto_created:
0.54 /testbed/django/db/models/fields/__init__.py(166):             self.creation_counter = Field.creation_counter
0.54 /testbed/django/db/models/fields/__init__.py(167):             Field.creation_counter += 1
0.54 /testbed/django/db/models/fields/__init__.py(169):         self._validators = list(validators)  # Store for deconstruction later
0.54 /testbed/django/db/models/fields/__init__.py(171):         messages = {}
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.54 /testbed/django/db/models/fields/__init__.py(174):         messages.update(error_messages or {})
0.54 /testbed/django/db/models/fields/__init__.py(175):         self._error_messages = error_messages  # Store for deconstruction later
0.54 /testbed/django/db/models/fields/__init__.py(176):         self.error_messages = messages
0.54 /testbed/django/db/models/fields/__init__.py(987):         self.validators.append(validators.MaxLengthValidator(self.max_length))
0.54 /testbed/django/db/models/fields/__init__.py(595):         return [*self.default_validators, *self._validators]
0.54 /testbed/django/db/models/fields/__init__.py(986):         super().__init__(*args, **kwargs)
0.54 /testbed/django/db/models/fields/__init__.py(138):         self.name = name
0.54 /testbed/django/db/models/fields/__init__.py(139):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.54 /testbed/django/db/models/fields/__init__.py(140):         self._verbose_name = verbose_name  # Store original for deconstruction
0.54 /testbed/django/db/models/fields/__init__.py(141):         self.primary_key = primary_key
0.54 /testbed/django/db/models/fields/__init__.py(142):         self.max_length, self._unique = max_length, unique
0.54 /testbed/django/db/models/fields/__init__.py(143):         self.blank, self.null = blank, null
0.54 /testbed/django/db/models/fields/__init__.py(144):         self.remote_field = rel
0.54 /testbed/django/db/models/fields/__init__.py(145):         self.is_relation = self.remote_field is not None
0.54 /testbed/django/db/models/fields/__init__.py(146):         self.default = default
0.54 /testbed/django/db/models/fields/__init__.py(147):         self.editable = editable
0.54 /testbed/django/db/models/fields/__init__.py(148):         self.serialize = serialize
0.54 /testbed/django/db/models/fields/__init__.py(149):         self.unique_for_date = unique_for_date
0.54 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_month = unique_for_month
0.54 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_year = unique_for_year
0.54 /testbed/django/db/models/fields/__init__.py(152):         if isinstance(choices, collections.abc.Iterator):
0.54 /testbed/django/db/models/fields/__init__.py(154):         self.choices = choices
0.54 /testbed/django/db/models/fields/__init__.py(155):         self.help_text = help_text
0.54 /testbed/django/db/models/fields/__init__.py(156):         self.db_index = db_index
0.54 /testbed/django/db/models/fields/__init__.py(157):         self.db_column = db_column
0.54 /testbed/django/db/models/fields/__init__.py(158):         self._db_tablespace = db_tablespace
0.54 /testbed/django/db/models/fields/__init__.py(159):         self.auto_created = auto_created
0.54 /testbed/django/db/models/fields/__init__.py(162):         if auto_created:
0.54 /testbed/django/db/models/fields/__init__.py(166):             self.creation_counter = Field.creation_counter
0.54 /testbed/django/db/models/fields/__init__.py(167):             Field.creation_counter += 1
0.55 /testbed/django/db/models/fields/__init__.py(169):         self._validators = list(validators)  # Store for deconstruction later
0.55 /testbed/django/db/models/fields/__init__.py(171):         messages = {}
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(174):         messages.update(error_messages or {})
0.55 /testbed/django/db/models/fields/__init__.py(175):         self._error_messages = error_messages  # Store for deconstruction later
0.55 /testbed/django/db/models/fields/__init__.py(176):         self.error_messages = messages
0.55 /testbed/django/db/models/fields/__init__.py(987):         self.validators.append(validators.MaxLengthValidator(self.max_length))
0.55 /testbed/django/db/models/fields/__init__.py(595):         return [*self.default_validators, *self._validators]
0.55 /testbed/django/db/models/fields/__init__.py(1593):         kwargs.setdefault('max_length', 254)
0.55 /testbed/django/db/models/fields/__init__.py(1594):         super().__init__(*args, **kwargs)
0.55 /testbed/django/db/models/fields/__init__.py(986):         super().__init__(*args, **kwargs)
0.55 /testbed/django/db/models/fields/__init__.py(138):         self.name = name
0.55 /testbed/django/db/models/fields/__init__.py(139):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.55 /testbed/django/db/models/fields/__init__.py(140):         self._verbose_name = verbose_name  # Store original for deconstruction
0.55 /testbed/django/db/models/fields/__init__.py(141):         self.primary_key = primary_key
0.55 /testbed/django/db/models/fields/__init__.py(142):         self.max_length, self._unique = max_length, unique
0.55 /testbed/django/db/models/fields/__init__.py(143):         self.blank, self.null = blank, null
0.55 /testbed/django/db/models/fields/__init__.py(144):         self.remote_field = rel
0.55 /testbed/django/db/models/fields/__init__.py(145):         self.is_relation = self.remote_field is not None
0.55 /testbed/django/db/models/fields/__init__.py(146):         self.default = default
0.55 /testbed/django/db/models/fields/__init__.py(147):         self.editable = editable
0.55 /testbed/django/db/models/fields/__init__.py(148):         self.serialize = serialize
0.55 /testbed/django/db/models/fields/__init__.py(149):         self.unique_for_date = unique_for_date
0.55 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_month = unique_for_month
0.55 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_year = unique_for_year
0.55 /testbed/django/db/models/fields/__init__.py(152):         if isinstance(choices, collections.abc.Iterator):
0.55 /testbed/django/db/models/fields/__init__.py(154):         self.choices = choices
0.55 /testbed/django/db/models/fields/__init__.py(155):         self.help_text = help_text
0.55 /testbed/django/db/models/fields/__init__.py(156):         self.db_index = db_index
0.55 /testbed/django/db/models/fields/__init__.py(157):         self.db_column = db_column
0.55 /testbed/django/db/models/fields/__init__.py(158):         self._db_tablespace = db_tablespace
0.55 /testbed/django/db/models/fields/__init__.py(159):         self.auto_created = auto_created
0.55 /testbed/django/db/models/fields/__init__.py(162):         if auto_created:
0.55 /testbed/django/db/models/fields/__init__.py(166):             self.creation_counter = Field.creation_counter
0.55 /testbed/django/db/models/fields/__init__.py(167):             Field.creation_counter += 1
0.55 /testbed/django/db/models/fields/__init__.py(169):         self._validators = list(validators)  # Store for deconstruction later
0.55 /testbed/django/db/models/fields/__init__.py(171):         messages = {}
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(174):         messages.update(error_messages or {})
0.55 /testbed/django/db/models/fields/__init__.py(175):         self._error_messages = error_messages  # Store for deconstruction later
0.55 /testbed/django/db/models/fields/__init__.py(176):         self.error_messages = messages
0.55 /testbed/django/db/models/fields/__init__.py(987):         self.validators.append(validators.MaxLengthValidator(self.max_length))
0.55 /testbed/django/db/models/fields/__init__.py(595):         return [*self.default_validators, *self._validators]
0.55 /testbed/django/db/models/fields/__init__.py(138):         self.name = name
0.55 /testbed/django/db/models/fields/__init__.py(139):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.55 /testbed/django/db/models/fields/__init__.py(140):         self._verbose_name = verbose_name  # Store original for deconstruction
0.55 /testbed/django/db/models/fields/__init__.py(141):         self.primary_key = primary_key
0.55 /testbed/django/db/models/fields/__init__.py(142):         self.max_length, self._unique = max_length, unique
0.55 /testbed/django/db/models/fields/__init__.py(143):         self.blank, self.null = blank, null
0.55 /testbed/django/db/models/fields/__init__.py(144):         self.remote_field = rel
0.55 /testbed/django/db/models/fields/__init__.py(145):         self.is_relation = self.remote_field is not None
0.55 /testbed/django/db/models/fields/__init__.py(146):         self.default = default
0.55 /testbed/django/db/models/fields/__init__.py(147):         self.editable = editable
0.55 /testbed/django/db/models/fields/__init__.py(148):         self.serialize = serialize
0.55 /testbed/django/db/models/fields/__init__.py(149):         self.unique_for_date = unique_for_date
0.55 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_month = unique_for_month
0.55 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_year = unique_for_year
0.55 /testbed/django/db/models/fields/__init__.py(152):         if isinstance(choices, collections.abc.Iterator):
0.55 /testbed/django/db/models/fields/__init__.py(154):         self.choices = choices
0.55 /testbed/django/db/models/fields/__init__.py(155):         self.help_text = help_text
0.55 /testbed/django/db/models/fields/__init__.py(156):         self.db_index = db_index
0.55 /testbed/django/db/models/fields/__init__.py(157):         self.db_column = db_column
0.55 /testbed/django/db/models/fields/__init__.py(158):         self._db_tablespace = db_tablespace
0.55 /testbed/django/db/models/fields/__init__.py(159):         self.auto_created = auto_created
0.55 /testbed/django/db/models/fields/__init__.py(162):         if auto_created:
0.55 /testbed/django/db/models/fields/__init__.py(166):             self.creation_counter = Field.creation_counter
0.55 /testbed/django/db/models/fields/__init__.py(167):             Field.creation_counter += 1
0.55 /testbed/django/db/models/fields/__init__.py(169):         self._validators = list(validators)  # Store for deconstruction later
0.55 /testbed/django/db/models/fields/__init__.py(171):         messages = {}
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(174):         messages.update(error_messages or {})
0.55 /testbed/django/db/models/fields/__init__.py(175):         self._error_messages = error_messages  # Store for deconstruction later
0.55 /testbed/django/db/models/fields/__init__.py(176):         self.error_messages = messages
0.55 /testbed/django/db/models/fields/__init__.py(138):         self.name = name
0.55 /testbed/django/db/models/fields/__init__.py(139):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.55 /testbed/django/db/models/fields/__init__.py(140):         self._verbose_name = verbose_name  # Store original for deconstruction
0.55 /testbed/django/db/models/fields/__init__.py(141):         self.primary_key = primary_key
0.55 /testbed/django/db/models/fields/__init__.py(142):         self.max_length, self._unique = max_length, unique
0.55 /testbed/django/db/models/fields/__init__.py(143):         self.blank, self.null = blank, null
0.55 /testbed/django/db/models/fields/__init__.py(144):         self.remote_field = rel
0.55 /testbed/django/db/models/fields/__init__.py(145):         self.is_relation = self.remote_field is not None
0.55 /testbed/django/db/models/fields/__init__.py(146):         self.default = default
0.55 /testbed/django/db/models/fields/__init__.py(147):         self.editable = editable
0.55 /testbed/django/db/models/fields/__init__.py(148):         self.serialize = serialize
0.55 /testbed/django/db/models/fields/__init__.py(149):         self.unique_for_date = unique_for_date
0.55 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_month = unique_for_month
0.55 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_year = unique_for_year
0.55 /testbed/django/db/models/fields/__init__.py(152):         if isinstance(choices, collections.abc.Iterator):
0.55 /testbed/django/db/models/fields/__init__.py(154):         self.choices = choices
0.55 /testbed/django/db/models/fields/__init__.py(155):         self.help_text = help_text
0.55 /testbed/django/db/models/fields/__init__.py(156):         self.db_index = db_index
0.55 /testbed/django/db/models/fields/__init__.py(157):         self.db_column = db_column
0.55 /testbed/django/db/models/fields/__init__.py(158):         self._db_tablespace = db_tablespace
0.55 /testbed/django/db/models/fields/__init__.py(159):         self.auto_created = auto_created
0.55 /testbed/django/db/models/fields/__init__.py(162):         if auto_created:
0.55 /testbed/django/db/models/fields/__init__.py(166):             self.creation_counter = Field.creation_counter
0.55 /testbed/django/db/models/fields/__init__.py(167):             Field.creation_counter += 1
0.55 /testbed/django/db/models/fields/__init__.py(169):         self._validators = list(validators)  # Store for deconstruction later
0.55 /testbed/django/db/models/fields/__init__.py(171):         messages = {}
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(174):         messages.update(error_messages or {})
0.55 /testbed/django/db/models/fields/__init__.py(175):         self._error_messages = error_messages  # Store for deconstruction later
0.55 /testbed/django/db/models/fields/__init__.py(176):         self.error_messages = messages
0.55 /testbed/django/db/models/fields/__init__.py(1105):         self.auto_now, self.auto_now_add = auto_now, auto_now_add
0.55 /testbed/django/db/models/fields/__init__.py(1106):         if auto_now or auto_now_add:
0.55 /testbed/django/db/models/fields/__init__.py(1109):         super().__init__(verbose_name, name, **kwargs)
0.55 /testbed/django/db/models/fields/__init__.py(138):         self.name = name
0.55 /testbed/django/db/models/fields/__init__.py(139):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.55 /testbed/django/db/models/fields/__init__.py(140):         self._verbose_name = verbose_name  # Store original for deconstruction
0.55 /testbed/django/db/models/fields/__init__.py(141):         self.primary_key = primary_key
0.55 /testbed/django/db/models/fields/__init__.py(142):         self.max_length, self._unique = max_length, unique
0.55 /testbed/django/db/models/fields/__init__.py(143):         self.blank, self.null = blank, null
0.55 /testbed/django/db/models/fields/__init__.py(144):         self.remote_field = rel
0.55 /testbed/django/db/models/fields/__init__.py(145):         self.is_relation = self.remote_field is not None
0.55 /testbed/django/db/models/fields/__init__.py(146):         self.default = default
0.55 /testbed/django/db/models/fields/__init__.py(147):         self.editable = editable
0.55 /testbed/django/db/models/fields/__init__.py(148):         self.serialize = serialize
0.55 /testbed/django/db/models/fields/__init__.py(149):         self.unique_for_date = unique_for_date
0.55 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_month = unique_for_month
0.55 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_year = unique_for_year
0.55 /testbed/django/db/models/fields/__init__.py(152):         if isinstance(choices, collections.abc.Iterator):
0.55 /testbed/django/db/models/fields/__init__.py(154):         self.choices = choices
0.55 /testbed/django/db/models/fields/__init__.py(155):         self.help_text = help_text
0.55 /testbed/django/db/models/fields/__init__.py(156):         self.db_index = db_index
0.55 /testbed/django/db/models/fields/__init__.py(157):         self.db_column = db_column
0.55 /testbed/django/db/models/fields/__init__.py(158):         self._db_tablespace = db_tablespace
0.55 /testbed/django/db/models/fields/__init__.py(159):         self.auto_created = auto_created
0.55 /testbed/django/db/models/fields/__init__.py(162):         if auto_created:
0.55 /testbed/django/db/models/fields/__init__.py(166):             self.creation_counter = Field.creation_counter
0.55 /testbed/django/db/models/fields/__init__.py(167):             Field.creation_counter += 1
0.55 /testbed/django/db/models/fields/__init__.py(169):         self._validators = list(validators)  # Store for deconstruction later
0.55 /testbed/django/db/models/fields/__init__.py(171):         messages = {}
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(174):         messages.update(error_messages or {})
0.55 /testbed/django/db/models/fields/__init__.py(175):         self._error_messages = error_messages  # Store for deconstruction later
0.55 /testbed/django/db/models/fields/__init__.py(176):         self.error_messages = messages
0.55 /testbed/django/db/models/fields/__init__.py(762):         self.set_attributes_from_name(name)
0.55 /testbed/django/db/models/fields/__init__.py(749):         self.name = self.name or name
0.55 /testbed/django/db/models/fields/__init__.py(750):         self.attname, self.column = self.get_attname_column()
0.55 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.55 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.55 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.55 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.55 /testbed/django/db/models/fields/__init__.py(751):         self.concrete = self.column is not None
0.55 /testbed/django/db/models/fields/__init__.py(752):         if self.verbose_name is None and self.name:
0.55 /testbed/django/db/models/fields/__init__.py(763):         self.model = cls
0.55 /testbed/django/db/models/fields/__init__.py(764):         cls._meta.add_field(self, private=private_only)
0.55 /testbed/django/db/models/fields/__init__.py(765):         if self.column:
0.55 /testbed/django/db/models/fields/__init__.py(769):             if not getattr(cls, self.attname, None):
0.55 /testbed/django/db/models/fields/__init__.py(770):                 setattr(cls, self.attname, self.descriptor_class(self))
0.55 /testbed/django/db/models/fields/__init__.py(771):         if self.choices is not None:
0.55 /testbed/django/db/models/fields/__init__.py(762):         self.set_attributes_from_name(name)
0.55 /testbed/django/db/models/fields/__init__.py(749):         self.name = self.name or name
0.55 /testbed/django/db/models/fields/__init__.py(750):         self.attname, self.column = self.get_attname_column()
0.55 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.55 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.55 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.55 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.55 /testbed/django/db/models/fields/__init__.py(751):         self.concrete = self.column is not None
0.55 /testbed/django/db/models/fields/__init__.py(752):         if self.verbose_name is None and self.name:
0.55 /testbed/django/db/models/fields/__init__.py(763):         self.model = cls
0.55 /testbed/django/db/models/fields/__init__.py(764):         cls._meta.add_field(self, private=private_only)
0.55 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.55 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.55 /testbed/django/db/models/fields/__init__.py(765):         if self.column:
0.55 /testbed/django/db/models/fields/__init__.py(769):             if not getattr(cls, self.attname, None):
0.55 /testbed/django/db/models/fields/__init__.py(770):                 setattr(cls, self.attname, self.descriptor_class(self))
0.55 /testbed/django/db/models/fields/__init__.py(771):         if self.choices is not None:
0.55 /testbed/django/db/models/fields/__init__.py(762):         self.set_attributes_from_name(name)
0.55 /testbed/django/db/models/fields/__init__.py(749):         self.name = self.name or name
0.55 /testbed/django/db/models/fields/__init__.py(750):         self.attname, self.column = self.get_attname_column()
0.55 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.55 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.55 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.55 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.55 /testbed/django/db/models/fields/__init__.py(751):         self.concrete = self.column is not None
0.55 /testbed/django/db/models/fields/__init__.py(752):         if self.verbose_name is None and self.name:
0.55 /testbed/django/db/models/fields/__init__.py(763):         self.model = cls
0.55 /testbed/django/db/models/fields/__init__.py(764):         cls._meta.add_field(self, private=private_only)
0.55 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.55 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.55 /testbed/django/db/models/fields/__init__.py(765):         if self.column:
0.55 /testbed/django/db/models/fields/__init__.py(769):             if not getattr(cls, self.attname, None):
0.55 /testbed/django/db/models/fields/__init__.py(770):                 setattr(cls, self.attname, self.descriptor_class(self))
0.55 /testbed/django/db/models/fields/__init__.py(771):         if self.choices is not None:
0.55 /testbed/django/db/models/fields/__init__.py(762):         self.set_attributes_from_name(name)
0.55 /testbed/django/db/models/fields/__init__.py(749):         self.name = self.name or name
0.55 /testbed/django/db/models/fields/__init__.py(750):         self.attname, self.column = self.get_attname_column()
0.55 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.55 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.55 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.55 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.55 /testbed/django/db/models/fields/__init__.py(751):         self.concrete = self.column is not None
0.55 /testbed/django/db/models/fields/__init__.py(752):         if self.verbose_name is None and self.name:
0.55 /testbed/django/db/models/fields/__init__.py(763):         self.model = cls
0.55 /testbed/django/db/models/fields/__init__.py(764):         cls._meta.add_field(self, private=private_only)
0.55 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.55 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.55 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.55 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.55 /testbed/django/db/models/fields/__init__.py(765):         if self.column:
0.55 /testbed/django/db/models/fields/__init__.py(769):             if not getattr(cls, self.attname, None):
0.55 /testbed/django/db/models/fields/__init__.py(770):                 setattr(cls, self.attname, self.descriptor_class(self))
0.55 /testbed/django/db/models/fields/__init__.py(771):         if self.choices is not None:
0.55 /testbed/django/db/models/fields/__init__.py(762):         self.set_attributes_from_name(name)
0.55 /testbed/django/db/models/fields/__init__.py(749):         self.name = self.name or name
0.55 /testbed/django/db/models/fields/__init__.py(750):         self.attname, self.column = self.get_attname_column()
0.55 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.55 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.55 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.55 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.55 /testbed/django/db/models/fields/__init__.py(751):         self.concrete = self.column is not None
0.55 /testbed/django/db/models/fields/__init__.py(752):         if self.verbose_name is None and self.name:
0.55 /testbed/django/db/models/fields/__init__.py(763):         self.model = cls
0.55 /testbed/django/db/models/fields/__init__.py(764):         cls._meta.add_field(self, private=private_only)
0.55 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.55 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.55 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.55 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.55 /testbed/django/db/models/fields/__init__.py(765):         if self.column:
0.55 /testbed/django/db/models/fields/__init__.py(769):             if not getattr(cls, self.attname, None):
0.55 /testbed/django/db/models/fields/__init__.py(770):                 setattr(cls, self.attname, self.descriptor_class(self))
0.55 /testbed/django/db/models/fields/__init__.py(771):         if self.choices is not None:
0.55 /testbed/django/db/models/fields/__init__.py(762):         self.set_attributes_from_name(name)
0.55 /testbed/django/db/models/fields/__init__.py(749):         self.name = self.name or name
0.55 /testbed/django/db/models/fields/__init__.py(750):         self.attname, self.column = self.get_attname_column()
0.55 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.55 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.55 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.55 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.55 /testbed/django/db/models/fields/__init__.py(751):         self.concrete = self.column is not None
0.55 /testbed/django/db/models/fields/__init__.py(752):         if self.verbose_name is None and self.name:
0.55 /testbed/django/db/models/fields/__init__.py(763):         self.model = cls
0.55 /testbed/django/db/models/fields/__init__.py(764):         cls._meta.add_field(self, private=private_only)
0.55 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.55 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.55 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.55 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.55 /testbed/django/db/models/fields/__init__.py(765):         if self.column:
0.55 /testbed/django/db/models/fields/__init__.py(769):             if not getattr(cls, self.attname, None):
0.55 /testbed/django/db/models/fields/__init__.py(771):         if self.choices is not None:
0.55 /testbed/django/db/models/fields/__init__.py(1204):         super().contribute_to_class(cls, name, **kwargs)
0.55 /testbed/django/db/models/fields/__init__.py(762):         self.set_attributes_from_name(name)
0.55 /testbed/django/db/models/fields/__init__.py(749):         self.name = self.name or name
0.55 /testbed/django/db/models/fields/__init__.py(750):         self.attname, self.column = self.get_attname_column()
0.55 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.55 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.55 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.55 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.55 /testbed/django/db/models/fields/__init__.py(751):         self.concrete = self.column is not None
0.55 /testbed/django/db/models/fields/__init__.py(752):         if self.verbose_name is None and self.name:
0.55 /testbed/django/db/models/fields/__init__.py(763):         self.model = cls
0.55 /testbed/django/db/models/fields/__init__.py(764):         cls._meta.add_field(self, private=private_only)
0.55 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.55 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.55 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.55 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.55 /testbed/django/db/models/fields/__init__.py(765):         if self.column:
0.55 /testbed/django/db/models/fields/__init__.py(769):             if not getattr(cls, self.attname, None):
0.55 /testbed/django/db/models/fields/__init__.py(770):                 setattr(cls, self.attname, self.descriptor_class(self))
0.55 /testbed/django/db/models/fields/__init__.py(771):         if self.choices is not None:
0.55 /testbed/django/db/models/fields/__init__.py(1205):         if not self.null:
0.55 /testbed/django/db/models/fields/__init__.py(1206):             setattr(
0.55 /testbed/django/db/models/fields/__init__.py(1207):                 cls, 'get_next_by_%s' % self.name,
0.55 /testbed/django/db/models/fields/__init__.py(1208):                 partialmethod(cls._get_next_or_previous_by_FIELD, field=self, is_next=True)
0.55 /testbed/django/db/models/fields/__init__.py(1210):             setattr(
0.55 /testbed/django/db/models/fields/__init__.py(1211):                 cls, 'get_previous_by_%s' % self.name,
0.55 /testbed/django/db/models/fields/__init__.py(1212):                 partialmethod(cls._get_next_or_previous_by_FIELD, field=self, is_next=False)
0.55 /testbed/django/db/models/fields/__init__.py(534):         obj = copy.copy(self)
0.55 /testbed/django/db/models/fields/__init__.py(545):         obj = Empty()
0.55 /testbed/django/db/models/fields/__init__.py(546):         obj.__class__ = self.__class__
0.55 /testbed/django/db/models/fields/__init__.py(547):         obj.__dict__ = self.__dict__.copy()
0.55 /testbed/django/db/models/fields/__init__.py(548):         return obj
0.55 /testbed/django/db/models/fields/__init__.py(535):         if self.remote_field:
0.55 /testbed/django/db/models/fields/__init__.py(539):         memodict[id(self)] = obj
0.55 /testbed/django/db/models/fields/__init__.py(540):         return obj
0.55 /testbed/django/db/models/fields/__init__.py(762):         self.set_attributes_from_name(name)
0.55 /testbed/django/db/models/fields/__init__.py(749):         self.name = self.name or name
0.55 /testbed/django/db/models/fields/__init__.py(750):         self.attname, self.column = self.get_attname_column()
0.55 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.55 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.55 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.55 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.55 /testbed/django/db/models/fields/__init__.py(751):         self.concrete = self.column is not None
0.55 /testbed/django/db/models/fields/__init__.py(752):         if self.verbose_name is None and self.name:
0.55 /testbed/django/db/models/fields/__init__.py(763):         self.model = cls
0.55 /testbed/django/db/models/fields/__init__.py(764):         cls._meta.add_field(self, private=private_only)
0.55 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.55 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.55 /testbed/django/db/models/fields/__init__.py(518):         if isinstance(other, Field):
0.55 /testbed/django/db/models/fields/__init__.py(519):             return self.creation_counter == other.creation_counter
0.55 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.55 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.55 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.55 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.55 /testbed/django/db/models/fields/__init__.py(765):         if self.column:
0.55 /testbed/django/db/models/fields/__init__.py(769):             if not getattr(cls, self.attname, None):
0.55 /testbed/django/db/models/fields/__init__.py(771):         if self.choices is not None:
0.55 /testbed/django/db/models/fields/__init__.py(534):         obj = copy.copy(self)
0.55 /testbed/django/db/models/fields/__init__.py(545):         obj = Empty()
0.55 /testbed/django/db/models/fields/__init__.py(546):         obj.__class__ = self.__class__
0.55 /testbed/django/db/models/fields/__init__.py(547):         obj.__dict__ = self.__dict__.copy()
0.55 /testbed/django/db/models/fields/__init__.py(548):         return obj
0.55 /testbed/django/db/models/fields/__init__.py(535):         if self.remote_field:
0.55 /testbed/django/db/models/fields/__init__.py(539):         memodict[id(self)] = obj
0.55 /testbed/django/db/models/fields/__init__.py(540):         return obj
0.55 /testbed/django/db/models/fields/__init__.py(1204):         super().contribute_to_class(cls, name, **kwargs)
0.55 /testbed/django/db/models/fields/__init__.py(762):         self.set_attributes_from_name(name)
0.55 /testbed/django/db/models/fields/__init__.py(749):         self.name = self.name or name
0.55 /testbed/django/db/models/fields/__init__.py(750):         self.attname, self.column = self.get_attname_column()
0.55 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.55 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.55 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.55 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.55 /testbed/django/db/models/fields/__init__.py(751):         self.concrete = self.column is not None
0.55 /testbed/django/db/models/fields/__init__.py(752):         if self.verbose_name is None and self.name:
0.55 /testbed/django/db/models/fields/__init__.py(763):         self.model = cls
0.55 /testbed/django/db/models/fields/__init__.py(764):         cls._meta.add_field(self, private=private_only)
0.55 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.55 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.55 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.55 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.55 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.55 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.55 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.55 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.55 /testbed/django/db/models/fields/__init__.py(765):         if self.column:
0.55 /testbed/django/db/models/fields/__init__.py(769):             if not getattr(cls, self.attname, None):
0.55 /testbed/django/db/models/fields/__init__.py(771):         if self.choices is not None:
0.55 /testbed/django/db/models/fields/__init__.py(1205):         if not self.null:
0.55 /testbed/django/db/models/fields/__init__.py(534):         obj = copy.copy(self)
0.55 /testbed/django/db/models/fields/__init__.py(545):         obj = Empty()
0.55 /testbed/django/db/models/fields/__init__.py(546):         obj.__class__ = self.__class__
0.55 /testbed/django/db/models/fields/__init__.py(547):         obj.__dict__ = self.__dict__.copy()
0.55 /testbed/django/db/models/fields/__init__.py(548):         return obj
0.55 /testbed/django/db/models/fields/__init__.py(535):         if self.remote_field:
0.55 /testbed/django/db/models/fields/__init__.py(539):         memodict[id(self)] = obj
0.55 /testbed/django/db/models/fields/__init__.py(540):         return obj
0.55 /testbed/django/db/models/fields/__init__.py(762):         self.set_attributes_from_name(name)
0.55 /testbed/django/db/models/fields/__init__.py(749):         self.name = self.name or name
0.55 /testbed/django/db/models/fields/__init__.py(750):         self.attname, self.column = self.get_attname_column()
0.55 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.55 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.55 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.55 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.55 /testbed/django/db/models/fields/__init__.py(751):         self.concrete = self.column is not None
0.55 /testbed/django/db/models/fields/__init__.py(752):         if self.verbose_name is None and self.name:
0.55 /testbed/django/db/models/fields/__init__.py(763):         self.model = cls
0.55 /testbed/django/db/models/fields/__init__.py(764):         cls._meta.add_field(self, private=private_only)
0.55 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.55 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.55 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.55 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.55 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.55 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.55 /testbed/django/db/models/fields/__init__.py(765):         if self.column:
0.55 /testbed/django/db/models/fields/__init__.py(769):             if not getattr(cls, self.attname, None):
0.55 /testbed/django/db/models/fields/__init__.py(771):         if self.choices is not None:
0.55 /testbed/django/db/models/fields/__init__.py(534):         obj = copy.copy(self)
0.55 /testbed/django/db/models/fields/__init__.py(545):         obj = Empty()
0.55 /testbed/django/db/models/fields/__init__.py(546):         obj.__class__ = self.__class__
0.55 /testbed/django/db/models/fields/__init__.py(547):         obj.__dict__ = self.__dict__.copy()
0.55 /testbed/django/db/models/fields/__init__.py(548):         return obj
0.55 /testbed/django/db/models/fields/__init__.py(535):         if self.remote_field:
0.55 /testbed/django/db/models/fields/__init__.py(536):             obj.remote_field = copy.copy(self.remote_field)
0.55 /testbed/django/db/models/fields/__init__.py(537):             if hasattr(self.remote_field, 'field') and self.remote_field.field is self:
0.55 /testbed/django/db/models/fields/__init__.py(538):                 obj.remote_field.field = obj
0.55 /testbed/django/db/models/fields/__init__.py(539):         memodict[id(self)] = obj
0.55 /testbed/django/db/models/fields/__init__.py(540):         return obj
0.55 /testbed/django/db/models/fields/__init__.py(762):         self.set_attributes_from_name(name)
0.55 /testbed/django/db/models/fields/__init__.py(749):         self.name = self.name or name
0.55 /testbed/django/db/models/fields/__init__.py(750):         self.attname, self.column = self.get_attname_column()
0.55 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.55 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.55 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.55 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.55 /testbed/django/db/models/fields/__init__.py(751):         self.concrete = self.column is not None
0.55 /testbed/django/db/models/fields/__init__.py(752):         if self.verbose_name is None and self.name:
0.55 /testbed/django/db/models/fields/__init__.py(763):         self.model = cls
0.55 /testbed/django/db/models/fields/__init__.py(764):         cls._meta.add_field(self, private=private_only)
0.55 /testbed/django/db/models/fields/__init__.py(765):         if self.column:
0.55 /testbed/django/db/models/fields/__init__.py(769):             if not getattr(cls, self.attname, None):
0.55 /testbed/django/db/models/fields/__init__.py(771):         if self.choices is not None:
0.55 /testbed/django/db/models/fields/__init__.py(534):         obj = copy.copy(self)
0.55 /testbed/django/db/models/fields/__init__.py(545):         obj = Empty()
0.55 /testbed/django/db/models/fields/__init__.py(546):         obj.__class__ = self.__class__
0.55 /testbed/django/db/models/fields/__init__.py(547):         obj.__dict__ = self.__dict__.copy()
0.55 /testbed/django/db/models/fields/__init__.py(548):         return obj
0.55 /testbed/django/db/models/fields/__init__.py(535):         if self.remote_field:
0.55 /testbed/django/db/models/fields/__init__.py(536):             obj.remote_field = copy.copy(self.remote_field)
0.55 /testbed/django/db/models/fields/__init__.py(537):             if hasattr(self.remote_field, 'field') and self.remote_field.field is self:
0.55 /testbed/django/db/models/fields/__init__.py(538):                 obj.remote_field.field = obj
0.55 /testbed/django/db/models/fields/__init__.py(539):         memodict[id(self)] = obj
0.55 /testbed/django/db/models/fields/__init__.py(540):         return obj
0.55 /testbed/django/db/models/fields/__init__.py(762):         self.set_attributes_from_name(name)
0.55 /testbed/django/db/models/fields/__init__.py(749):         self.name = self.name or name
0.55 /testbed/django/db/models/fields/__init__.py(750):         self.attname, self.column = self.get_attname_column()
0.55 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.55 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.55 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.55 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.55 /testbed/django/db/models/fields/__init__.py(751):         self.concrete = self.column is not None
0.55 /testbed/django/db/models/fields/__init__.py(752):         if self.verbose_name is None and self.name:
0.55 /testbed/django/db/models/fields/__init__.py(763):         self.model = cls
0.55 /testbed/django/db/models/fields/__init__.py(764):         cls._meta.add_field(self, private=private_only)
0.55 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.55 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.55 /testbed/django/db/models/fields/__init__.py(765):         if self.column:
0.55 /testbed/django/db/models/fields/__init__.py(769):             if not getattr(cls, self.attname, None):
0.55 /testbed/django/db/models/fields/__init__.py(771):         if self.choices is not None:
0.55 /testbed/django/db/models/fields/__init__.py(534):         obj = copy.copy(self)
0.55 /testbed/django/db/models/fields/__init__.py(545):         obj = Empty()
0.55 /testbed/django/db/models/fields/__init__.py(546):         obj.__class__ = self.__class__
0.55 /testbed/django/db/models/fields/__init__.py(547):         obj.__dict__ = self.__dict__.copy()
0.55 /testbed/django/db/models/fields/__init__.py(548):         return obj
0.55 /testbed/django/db/models/fields/__init__.py(535):         if self.remote_field:
0.55 /testbed/django/db/models/fields/__init__.py(539):         memodict[id(self)] = obj
0.55 /testbed/django/db/models/fields/__init__.py(540):         return obj
0.55 /testbed/django/db/models/fields/__init__.py(762):         self.set_attributes_from_name(name)
0.55 /testbed/django/db/models/fields/__init__.py(749):         self.name = self.name or name
0.55 /testbed/django/db/models/fields/__init__.py(750):         self.attname, self.column = self.get_attname_column()
0.55 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.55 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.55 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.55 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.55 /testbed/django/db/models/fields/__init__.py(751):         self.concrete = self.column is not None
0.55 /testbed/django/db/models/fields/__init__.py(752):         if self.verbose_name is None and self.name:
0.55 /testbed/django/db/models/fields/__init__.py(763):         self.model = cls
0.55 /testbed/django/db/models/fields/__init__.py(764):         cls._meta.add_field(self, private=private_only)
0.55 /testbed/django/db/models/fields/__init__.py(765):         if self.column:
0.55 /testbed/django/db/models/fields/__init__.py(769):             if not getattr(cls, self.attname, None):
0.55 /testbed/django/db/models/fields/__init__.py(771):         if self.choices is not None:
0.55 /testbed/django/db/models/fields/__init__.py(534):         obj = copy.copy(self)
0.55 /testbed/django/db/models/fields/__init__.py(545):         obj = Empty()
0.55 /testbed/django/db/models/fields/__init__.py(546):         obj.__class__ = self.__class__
0.55 /testbed/django/db/models/fields/__init__.py(547):         obj.__dict__ = self.__dict__.copy()
0.55 /testbed/django/db/models/fields/__init__.py(548):         return obj
0.55 /testbed/django/db/models/fields/__init__.py(535):         if self.remote_field:
0.55 /testbed/django/db/models/fields/__init__.py(539):         memodict[id(self)] = obj
0.55 /testbed/django/db/models/fields/__init__.py(540):         return obj
0.55 /testbed/django/db/models/fields/__init__.py(1204):         super().contribute_to_class(cls, name, **kwargs)
0.55 /testbed/django/db/models/fields/__init__.py(762):         self.set_attributes_from_name(name)
0.55 /testbed/django/db/models/fields/__init__.py(749):         self.name = self.name or name
0.55 /testbed/django/db/models/fields/__init__.py(750):         self.attname, self.column = self.get_attname_column()
0.55 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.55 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.55 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.55 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.55 /testbed/django/db/models/fields/__init__.py(751):         self.concrete = self.column is not None
0.55 /testbed/django/db/models/fields/__init__.py(752):         if self.verbose_name is None and self.name:
0.55 /testbed/django/db/models/fields/__init__.py(763):         self.model = cls
0.55 /testbed/django/db/models/fields/__init__.py(764):         cls._meta.add_field(self, private=private_only)
0.55 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.55 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.55 /testbed/django/db/models/fields/__init__.py(765):         if self.column:
0.55 /testbed/django/db/models/fields/__init__.py(769):             if not getattr(cls, self.attname, None):
0.55 /testbed/django/db/models/fields/__init__.py(771):         if self.choices is not None:
0.55 /testbed/django/db/models/fields/__init__.py(1205):         if not self.null:
0.55 /testbed/django/db/models/fields/__init__.py(534):         obj = copy.copy(self)
0.55 /testbed/django/db/models/fields/__init__.py(545):         obj = Empty()
0.55 /testbed/django/db/models/fields/__init__.py(546):         obj.__class__ = self.__class__
0.55 /testbed/django/db/models/fields/__init__.py(547):         obj.__dict__ = self.__dict__.copy()
0.55 /testbed/django/db/models/fields/__init__.py(548):         return obj
0.55 /testbed/django/db/models/fields/__init__.py(535):         if self.remote_field:
0.55 /testbed/django/db/models/fields/__init__.py(539):         memodict[id(self)] = obj
0.55 /testbed/django/db/models/fields/__init__.py(540):         return obj
0.55 /testbed/django/db/models/fields/__init__.py(762):         self.set_attributes_from_name(name)
0.55 /testbed/django/db/models/fields/__init__.py(749):         self.name = self.name or name
0.55 /testbed/django/db/models/fields/__init__.py(750):         self.attname, self.column = self.get_attname_column()
0.55 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.55 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.55 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.55 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.55 /testbed/django/db/models/fields/__init__.py(751):         self.concrete = self.column is not None
0.55 /testbed/django/db/models/fields/__init__.py(752):         if self.verbose_name is None and self.name:
0.55 /testbed/django/db/models/fields/__init__.py(763):         self.model = cls
0.55 /testbed/django/db/models/fields/__init__.py(764):         cls._meta.add_field(self, private=private_only)
0.55 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.55 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.55 /testbed/django/db/models/fields/__init__.py(765):         if self.column:
0.55 /testbed/django/db/models/fields/__init__.py(769):             if not getattr(cls, self.attname, None):
0.55 /testbed/django/db/models/fields/__init__.py(771):         if self.choices is not None:
0.55 /testbed/django/db/models/fields/__init__.py(534):         obj = copy.copy(self)
0.55 /testbed/django/db/models/fields/__init__.py(545):         obj = Empty()
0.55 /testbed/django/db/models/fields/__init__.py(546):         obj.__class__ = self.__class__
0.55 /testbed/django/db/models/fields/__init__.py(547):         obj.__dict__ = self.__dict__.copy()
0.55 /testbed/django/db/models/fields/__init__.py(548):         return obj
0.55 /testbed/django/db/models/fields/__init__.py(535):         if self.remote_field:
0.55 /testbed/django/db/models/fields/__init__.py(539):         memodict[id(self)] = obj
0.55 /testbed/django/db/models/fields/__init__.py(540):         return obj
0.55 /testbed/django/db/models/fields/__init__.py(762):         self.set_attributes_from_name(name)
0.55 /testbed/django/db/models/fields/__init__.py(749):         self.name = self.name or name
0.55 /testbed/django/db/models/fields/__init__.py(750):         self.attname, self.column = self.get_attname_column()
0.55 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.55 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.55 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.55 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.55 /testbed/django/db/models/fields/__init__.py(751):         self.concrete = self.column is not None
0.55 /testbed/django/db/models/fields/__init__.py(752):         if self.verbose_name is None and self.name:
0.55 /testbed/django/db/models/fields/__init__.py(763):         self.model = cls
0.55 /testbed/django/db/models/fields/__init__.py(764):         cls._meta.add_field(self, private=private_only)
0.55 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.55 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.55 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.55 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.55 /testbed/django/db/models/fields/__init__.py(765):         if self.column:
0.55 /testbed/django/db/models/fields/__init__.py(769):             if not getattr(cls, self.attname, None):
0.55 /testbed/django/db/models/fields/__init__.py(771):         if self.choices is not None:
0.55 /testbed/django/db/models/fields/__init__.py(534):         obj = copy.copy(self)
0.55 /testbed/django/db/models/fields/__init__.py(545):         obj = Empty()
0.55 /testbed/django/db/models/fields/__init__.py(546):         obj.__class__ = self.__class__
0.55 /testbed/django/db/models/fields/__init__.py(547):         obj.__dict__ = self.__dict__.copy()
0.55 /testbed/django/db/models/fields/__init__.py(548):         return obj
0.55 /testbed/django/db/models/fields/__init__.py(535):         if self.remote_field:
0.55 /testbed/django/db/models/fields/__init__.py(539):         memodict[id(self)] = obj
0.55 /testbed/django/db/models/fields/__init__.py(540):         return obj
0.55 /testbed/django/db/models/fields/__init__.py(762):         self.set_attributes_from_name(name)
0.55 /testbed/django/db/models/fields/__init__.py(749):         self.name = self.name or name
0.55 /testbed/django/db/models/fields/__init__.py(750):         self.attname, self.column = self.get_attname_column()
0.55 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.55 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.55 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.55 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.55 /testbed/django/db/models/fields/__init__.py(751):         self.concrete = self.column is not None
0.55 /testbed/django/db/models/fields/__init__.py(752):         if self.verbose_name is None and self.name:
0.55 /testbed/django/db/models/fields/__init__.py(763):         self.model = cls
0.55 /testbed/django/db/models/fields/__init__.py(764):         cls._meta.add_field(self, private=private_only)
0.55 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.55 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.55 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.55 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.55 /testbed/django/db/models/fields/__init__.py(765):         if self.column:
0.55 /testbed/django/db/models/fields/__init__.py(769):             if not getattr(cls, self.attname, None):
0.55 /testbed/django/db/models/fields/__init__.py(771):         if self.choices is not None:
0.55 /testbed/django/db/models/fields/__init__.py(534):         obj = copy.copy(self)
0.55 /testbed/django/db/models/fields/__init__.py(545):         obj = Empty()
0.55 /testbed/django/db/models/fields/__init__.py(546):         obj.__class__ = self.__class__
0.55 /testbed/django/db/models/fields/__init__.py(547):         obj.__dict__ = self.__dict__.copy()
0.55 /testbed/django/db/models/fields/__init__.py(548):         return obj
0.55 /testbed/django/db/models/fields/__init__.py(535):         if self.remote_field:
0.55 /testbed/django/db/models/fields/__init__.py(539):         memodict[id(self)] = obj
0.55 /testbed/django/db/models/fields/__init__.py(540):         return obj
0.55 /testbed/django/db/models/fields/__init__.py(762):         self.set_attributes_from_name(name)
0.55 /testbed/django/db/models/fields/__init__.py(749):         self.name = self.name or name
0.55 /testbed/django/db/models/fields/__init__.py(750):         self.attname, self.column = self.get_attname_column()
0.55 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.55 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.55 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.55 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.55 /testbed/django/db/models/fields/__init__.py(751):         self.concrete = self.column is not None
0.55 /testbed/django/db/models/fields/__init__.py(752):         if self.verbose_name is None and self.name:
0.55 /testbed/django/db/models/fields/__init__.py(763):         self.model = cls
0.55 /testbed/django/db/models/fields/__init__.py(764):         cls._meta.add_field(self, private=private_only)
0.55 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.55 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.55 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.55 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.55 /testbed/django/db/models/fields/__init__.py(765):         if self.column:
0.55 /testbed/django/db/models/fields/__init__.py(769):             if not getattr(cls, self.attname, None):
0.55 /testbed/django/db/models/fields/__init__.py(771):         if self.choices is not None:
0.55 /testbed/django/db/models/fields/__init__.py(534):         obj = copy.copy(self)
0.55 /testbed/django/db/models/fields/__init__.py(545):         obj = Empty()
0.55 /testbed/django/db/models/fields/__init__.py(546):         obj.__class__ = self.__class__
0.55 /testbed/django/db/models/fields/__init__.py(547):         obj.__dict__ = self.__dict__.copy()
0.55 /testbed/django/db/models/fields/__init__.py(548):         return obj
0.55 /testbed/django/db/models/fields/__init__.py(535):         if self.remote_field:
0.55 /testbed/django/db/models/fields/__init__.py(539):         memodict[id(self)] = obj
0.55 /testbed/django/db/models/fields/__init__.py(540):         return obj
0.55 /testbed/django/db/models/fields/__init__.py(762):         self.set_attributes_from_name(name)
0.55 /testbed/django/db/models/fields/__init__.py(749):         self.name = self.name or name
0.55 /testbed/django/db/models/fields/__init__.py(750):         self.attname, self.column = self.get_attname_column()
0.55 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.55 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.55 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.55 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.55 /testbed/django/db/models/fields/__init__.py(751):         self.concrete = self.column is not None
0.55 /testbed/django/db/models/fields/__init__.py(752):         if self.verbose_name is None and self.name:
0.55 /testbed/django/db/models/fields/__init__.py(763):         self.model = cls
0.55 /testbed/django/db/models/fields/__init__.py(764):         cls._meta.add_field(self, private=private_only)
0.55 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.55 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.55 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.55 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.55 /testbed/django/db/models/fields/__init__.py(765):         if self.column:
0.55 /testbed/django/db/models/fields/__init__.py(769):             if not getattr(cls, self.attname, None):
0.55 /testbed/django/db/models/fields/__init__.py(771):         if self.choices is not None:
0.55 /testbed/django/db/models/fields/__init__.py(534):         obj = copy.copy(self)
0.55 /testbed/django/db/models/fields/__init__.py(545):         obj = Empty()
0.55 /testbed/django/db/models/fields/__init__.py(546):         obj.__class__ = self.__class__
0.55 /testbed/django/db/models/fields/__init__.py(547):         obj.__dict__ = self.__dict__.copy()
0.55 /testbed/django/db/models/fields/__init__.py(548):         return obj
0.55 /testbed/django/db/models/fields/__init__.py(535):         if self.remote_field:
0.55 /testbed/django/db/models/fields/__init__.py(539):         memodict[id(self)] = obj
0.55 /testbed/django/db/models/fields/__init__.py(540):         return obj
0.55 /testbed/django/db/models/fields/__init__.py(762):         self.set_attributes_from_name(name)
0.55 /testbed/django/db/models/fields/__init__.py(749):         self.name = self.name or name
0.55 /testbed/django/db/models/fields/__init__.py(750):         self.attname, self.column = self.get_attname_column()
0.55 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.55 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.55 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.55 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.55 /testbed/django/db/models/fields/__init__.py(751):         self.concrete = self.column is not None
0.55 /testbed/django/db/models/fields/__init__.py(752):         if self.verbose_name is None and self.name:
0.55 /testbed/django/db/models/fields/__init__.py(763):         self.model = cls
0.55 /testbed/django/db/models/fields/__init__.py(764):         cls._meta.add_field(self, private=private_only)
0.55 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.55 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.55 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.55 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.55 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.55 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.55 /testbed/django/db/models/fields/__init__.py(765):         if self.column:
0.55 /testbed/django/db/models/fields/__init__.py(769):             if not getattr(cls, self.attname, None):
0.55 /testbed/django/db/models/fields/__init__.py(771):         if self.choices is not None:
0.55 /testbed/django/db/models/fields/__init__.py(534):         obj = copy.copy(self)
0.55 /testbed/django/db/models/fields/__init__.py(545):         obj = Empty()
0.55 /testbed/django/db/models/fields/__init__.py(546):         obj.__class__ = self.__class__
0.55 /testbed/django/db/models/fields/__init__.py(547):         obj.__dict__ = self.__dict__.copy()
0.55 /testbed/django/db/models/fields/__init__.py(548):         return obj
0.55 /testbed/django/db/models/fields/__init__.py(535):         if self.remote_field:
0.55 /testbed/django/db/models/fields/__init__.py(539):         memodict[id(self)] = obj
0.55 /testbed/django/db/models/fields/__init__.py(540):         return obj
0.55 /testbed/django/db/models/fields/__init__.py(762):         self.set_attributes_from_name(name)
0.55 /testbed/django/db/models/fields/__init__.py(749):         self.name = self.name or name
0.55 /testbed/django/db/models/fields/__init__.py(750):         self.attname, self.column = self.get_attname_column()
0.55 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.55 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.55 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.55 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.55 /testbed/django/db/models/fields/__init__.py(751):         self.concrete = self.column is not None
0.55 /testbed/django/db/models/fields/__init__.py(752):         if self.verbose_name is None and self.name:
0.55 /testbed/django/db/models/fields/__init__.py(763):         self.model = cls
0.55 /testbed/django/db/models/fields/__init__.py(764):         cls._meta.add_field(self, private=private_only)
0.55 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.55 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.55 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.55 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.55 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.55 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.55 /testbed/django/db/models/fields/__init__.py(765):         if self.column:
0.55 /testbed/django/db/models/fields/__init__.py(769):             if not getattr(cls, self.attname, None):
0.55 /testbed/django/db/models/fields/__init__.py(771):         if self.choices is not None:
0.55 /testbed/django/db/models/fields/__init__.py(534):         obj = copy.copy(self)
0.55 /testbed/django/db/models/fields/__init__.py(545):         obj = Empty()
0.55 /testbed/django/db/models/fields/__init__.py(546):         obj.__class__ = self.__class__
0.55 /testbed/django/db/models/fields/__init__.py(547):         obj.__dict__ = self.__dict__.copy()
0.55 /testbed/django/db/models/fields/__init__.py(548):         return obj
0.55 /testbed/django/db/models/fields/__init__.py(535):         if self.remote_field:
0.55 /testbed/django/db/models/fields/__init__.py(539):         memodict[id(self)] = obj
0.55 /testbed/django/db/models/fields/__init__.py(540):         return obj
0.55 /testbed/django/db/models/fields/__init__.py(1204):         super().contribute_to_class(cls, name, **kwargs)
0.55 /testbed/django/db/models/fields/__init__.py(762):         self.set_attributes_from_name(name)
0.55 /testbed/django/db/models/fields/__init__.py(749):         self.name = self.name or name
0.55 /testbed/django/db/models/fields/__init__.py(750):         self.attname, self.column = self.get_attname_column()
0.55 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.55 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.55 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.55 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.55 /testbed/django/db/models/fields/__init__.py(751):         self.concrete = self.column is not None
0.55 /testbed/django/db/models/fields/__init__.py(752):         if self.verbose_name is None and self.name:
0.55 /testbed/django/db/models/fields/__init__.py(763):         self.model = cls
0.55 /testbed/django/db/models/fields/__init__.py(764):         cls._meta.add_field(self, private=private_only)
0.55 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.55 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.55 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.55 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.55 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.55 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.55 /testbed/django/db/models/fields/__init__.py(765):         if self.column:
0.55 /testbed/django/db/models/fields/__init__.py(769):             if not getattr(cls, self.attname, None):
0.55 /testbed/django/db/models/fields/__init__.py(771):         if self.choices is not None:
0.55 /testbed/django/db/models/fields/__init__.py(1205):         if not self.null:
0.55 /testbed/django/db/models/fields/__init__.py(1206):             setattr(
0.55 /testbed/django/db/models/fields/__init__.py(1207):                 cls, 'get_next_by_%s' % self.name,
0.55 /testbed/django/db/models/fields/__init__.py(1208):                 partialmethod(cls._get_next_or_previous_by_FIELD, field=self, is_next=True)
0.55 /testbed/django/db/models/fields/__init__.py(1210):             setattr(
0.55 /testbed/django/db/models/fields/__init__.py(1211):                 cls, 'get_previous_by_%s' % self.name,
0.55 /testbed/django/db/models/fields/__init__.py(1212):                 partialmethod(cls._get_next_or_previous_by_FIELD, field=self, is_next=False)
0.55 /testbed/django/db/models/fields/__init__.py(534):         obj = copy.copy(self)
0.55 /testbed/django/db/models/fields/__init__.py(545):         obj = Empty()
0.55 /testbed/django/db/models/fields/__init__.py(546):         obj.__class__ = self.__class__
0.55 /testbed/django/db/models/fields/__init__.py(547):         obj.__dict__ = self.__dict__.copy()
0.55 /testbed/django/db/models/fields/__init__.py(548):         return obj
0.55 /testbed/django/db/models/fields/__init__.py(535):         if self.remote_field:
0.55 /testbed/django/db/models/fields/__init__.py(536):             obj.remote_field = copy.copy(self.remote_field)
0.55 /testbed/django/db/models/fields/__init__.py(537):             if hasattr(self.remote_field, 'field') and self.remote_field.field is self:
0.55 /testbed/django/db/models/fields/__init__.py(538):                 obj.remote_field.field = obj
0.55 /testbed/django/db/models/fields/__init__.py(539):         memodict[id(self)] = obj
0.55 /testbed/django/db/models/fields/__init__.py(540):         return obj
0.55 /testbed/django/db/models/fields/__init__.py(762):         self.set_attributes_from_name(name)
0.55 /testbed/django/db/models/fields/__init__.py(749):         self.name = self.name or name
0.55 /testbed/django/db/models/fields/__init__.py(750):         self.attname, self.column = self.get_attname_column()
0.55 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.55 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.55 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.55 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.55 /testbed/django/db/models/fields/__init__.py(751):         self.concrete = self.column is not None
0.55 /testbed/django/db/models/fields/__init__.py(752):         if self.verbose_name is None and self.name:
0.55 /testbed/django/db/models/fields/__init__.py(763):         self.model = cls
0.55 /testbed/django/db/models/fields/__init__.py(764):         cls._meta.add_field(self, private=private_only)
0.55 /testbed/django/db/models/fields/__init__.py(765):         if self.column:
0.55 /testbed/django/db/models/fields/__init__.py(769):             if not getattr(cls, self.attname, None):
0.55 /testbed/django/db/models/fields/__init__.py(771):         if self.choices is not None:
0.55 /testbed/django/db/models/fields/__init__.py(738):         return self._db_tablespace or settings.DEFAULT_INDEX_TABLESPACE
0.55 /testbed/django/db/models/fields/__init__.py(138):         self.name = name
0.55 /testbed/django/db/models/fields/__init__.py(139):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.55 /testbed/django/db/models/fields/__init__.py(140):         self._verbose_name = verbose_name  # Store original for deconstruction
0.55 /testbed/django/db/models/fields/__init__.py(141):         self.primary_key = primary_key
0.55 /testbed/django/db/models/fields/__init__.py(142):         self.max_length, self._unique = max_length, unique
0.55 /testbed/django/db/models/fields/__init__.py(143):         self.blank, self.null = blank, null
0.55 /testbed/django/db/models/fields/__init__.py(144):         self.remote_field = rel
0.55 /testbed/django/db/models/fields/__init__.py(145):         self.is_relation = self.remote_field is not None
0.55 /testbed/django/db/models/fields/__init__.py(146):         self.default = default
0.55 /testbed/django/db/models/fields/__init__.py(147):         self.editable = editable
0.55 /testbed/django/db/models/fields/__init__.py(148):         self.serialize = serialize
0.55 /testbed/django/db/models/fields/__init__.py(149):         self.unique_for_date = unique_for_date
0.55 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_month = unique_for_month
0.55 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_year = unique_for_year
0.55 /testbed/django/db/models/fields/__init__.py(152):         if isinstance(choices, collections.abc.Iterator):
0.55 /testbed/django/db/models/fields/__init__.py(154):         self.choices = choices
0.55 /testbed/django/db/models/fields/__init__.py(155):         self.help_text = help_text
0.55 /testbed/django/db/models/fields/__init__.py(156):         self.db_index = db_index
0.55 /testbed/django/db/models/fields/__init__.py(157):         self.db_column = db_column
0.55 /testbed/django/db/models/fields/__init__.py(158):         self._db_tablespace = db_tablespace
0.55 /testbed/django/db/models/fields/__init__.py(159):         self.auto_created = auto_created
0.55 /testbed/django/db/models/fields/__init__.py(162):         if auto_created:
0.55 /testbed/django/db/models/fields/__init__.py(166):             self.creation_counter = Field.creation_counter
0.55 /testbed/django/db/models/fields/__init__.py(167):             Field.creation_counter += 1
0.55 /testbed/django/db/models/fields/__init__.py(169):         self._validators = list(validators)  # Store for deconstruction later
0.55 /testbed/django/db/models/fields/__init__.py(171):         messages = {}
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(174):         messages.update(error_messages or {})
0.55 /testbed/django/db/models/fields/__init__.py(175):         self._error_messages = error_messages  # Store for deconstruction later
0.55 /testbed/django/db/models/fields/__init__.py(176):         self.error_messages = messages
0.55 /testbed/django/db/models/fields/__init__.py(738):         return self._db_tablespace or settings.DEFAULT_INDEX_TABLESPACE
0.55 /testbed/django/db/models/fields/__init__.py(138):         self.name = name
0.55 /testbed/django/db/models/fields/__init__.py(139):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.55 /testbed/django/db/models/fields/__init__.py(140):         self._verbose_name = verbose_name  # Store original for deconstruction
0.55 /testbed/django/db/models/fields/__init__.py(141):         self.primary_key = primary_key
0.55 /testbed/django/db/models/fields/__init__.py(142):         self.max_length, self._unique = max_length, unique
0.55 /testbed/django/db/models/fields/__init__.py(143):         self.blank, self.null = blank, null
0.55 /testbed/django/db/models/fields/__init__.py(144):         self.remote_field = rel
0.55 /testbed/django/db/models/fields/__init__.py(145):         self.is_relation = self.remote_field is not None
0.55 /testbed/django/db/models/fields/__init__.py(146):         self.default = default
0.55 /testbed/django/db/models/fields/__init__.py(147):         self.editable = editable
0.55 /testbed/django/db/models/fields/__init__.py(148):         self.serialize = serialize
0.55 /testbed/django/db/models/fields/__init__.py(149):         self.unique_for_date = unique_for_date
0.55 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_month = unique_for_month
0.55 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_year = unique_for_year
0.55 /testbed/django/db/models/fields/__init__.py(152):         if isinstance(choices, collections.abc.Iterator):
0.55 /testbed/django/db/models/fields/__init__.py(154):         self.choices = choices
0.55 /testbed/django/db/models/fields/__init__.py(155):         self.help_text = help_text
0.55 /testbed/django/db/models/fields/__init__.py(156):         self.db_index = db_index
0.55 /testbed/django/db/models/fields/__init__.py(157):         self.db_column = db_column
0.55 /testbed/django/db/models/fields/__init__.py(158):         self._db_tablespace = db_tablespace
0.55 /testbed/django/db/models/fields/__init__.py(159):         self.auto_created = auto_created
0.55 /testbed/django/db/models/fields/__init__.py(162):         if auto_created:
0.55 /testbed/django/db/models/fields/__init__.py(166):             self.creation_counter = Field.creation_counter
0.55 /testbed/django/db/models/fields/__init__.py(167):             Field.creation_counter += 1
0.55 /testbed/django/db/models/fields/__init__.py(169):         self._validators = list(validators)  # Store for deconstruction later
0.55 /testbed/django/db/models/fields/__init__.py(171):         messages = {}
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(174):         messages.update(error_messages or {})
0.55 /testbed/django/db/models/fields/__init__.py(175):         self._error_messages = error_messages  # Store for deconstruction later
0.55 /testbed/django/db/models/fields/__init__.py(176):         self.error_messages = messages
0.55 /testbed/django/db/models/fields/__init__.py(762):         self.set_attributes_from_name(name)
0.55 /testbed/django/db/models/fields/__init__.py(749):         self.name = self.name or name
0.55 /testbed/django/db/models/fields/__init__.py(750):         self.attname, self.column = self.get_attname_column()
0.55 /testbed/django/db/models/fields/__init__.py(751):         self.concrete = self.column is not None
0.55 /testbed/django/db/models/fields/__init__.py(752):         if self.verbose_name is None and self.name:
0.55 /testbed/django/db/models/fields/__init__.py(753):             self.verbose_name = self.name.replace('_', ' ')
0.55 /testbed/django/db/models/fields/__init__.py(763):         self.model = cls
0.55 /testbed/django/db/models/fields/__init__.py(764):         cls._meta.add_field(self, private=private_only)
0.55 /testbed/django/db/models/fields/__init__.py(765):         if self.column:
0.55 /testbed/django/db/models/fields/__init__.py(769):             if not getattr(cls, self.attname, None):
0.55 /testbed/django/db/models/fields/__init__.py(770):                 setattr(cls, self.attname, self.descriptor_class(self))
0.55 /testbed/django/db/models/fields/__init__.py(771):         if self.choices is not None:
0.55 /testbed/django/db/models/fields/__init__.py(762):         self.set_attributes_from_name(name)
0.55 /testbed/django/db/models/fields/__init__.py(749):         self.name = self.name or name
0.55 /testbed/django/db/models/fields/__init__.py(750):         self.attname, self.column = self.get_attname_column()
0.55 /testbed/django/db/models/fields/__init__.py(751):         self.concrete = self.column is not None
0.55 /testbed/django/db/models/fields/__init__.py(752):         if self.verbose_name is None and self.name:
0.55 /testbed/django/db/models/fields/__init__.py(753):             self.verbose_name = self.name.replace('_', ' ')
0.55 /testbed/django/db/models/fields/__init__.py(763):         self.model = cls
0.55 /testbed/django/db/models/fields/__init__.py(764):         cls._meta.add_field(self, private=private_only)
0.55 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.55 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.55 /testbed/django/db/models/fields/__init__.py(765):         if self.column:
0.55 /testbed/django/db/models/fields/__init__.py(769):             if not getattr(cls, self.attname, None):
0.55 /testbed/django/db/models/fields/__init__.py(770):                 setattr(cls, self.attname, self.descriptor_class(self))
0.55 /testbed/django/db/models/fields/__init__.py(771):         if self.choices is not None:
0.55 /testbed/django/db/models/fields/__init__.py(2356):         kwargs['blank'] = True
0.55 /testbed/django/db/models/fields/__init__.py(2357):         super().__init__(*args, **kwargs)
0.55 /testbed/django/db/models/fields/__init__.py(138):         self.name = name
0.55 /testbed/django/db/models/fields/__init__.py(139):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.55 /testbed/django/db/models/fields/__init__.py(140):         self._verbose_name = verbose_name  # Store original for deconstruction
0.55 /testbed/django/db/models/fields/__init__.py(141):         self.primary_key = primary_key
0.55 /testbed/django/db/models/fields/__init__.py(142):         self.max_length, self._unique = max_length, unique
0.55 /testbed/django/db/models/fields/__init__.py(143):         self.blank, self.null = blank, null
0.55 /testbed/django/db/models/fields/__init__.py(144):         self.remote_field = rel
0.55 /testbed/django/db/models/fields/__init__.py(145):         self.is_relation = self.remote_field is not None
0.55 /testbed/django/db/models/fields/__init__.py(146):         self.default = default
0.55 /testbed/django/db/models/fields/__init__.py(147):         self.editable = editable
0.55 /testbed/django/db/models/fields/__init__.py(148):         self.serialize = serialize
0.55 /testbed/django/db/models/fields/__init__.py(149):         self.unique_for_date = unique_for_date
0.55 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_month = unique_for_month
0.55 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_year = unique_for_year
0.55 /testbed/django/db/models/fields/__init__.py(152):         if isinstance(choices, collections.abc.Iterator):
0.55 /testbed/django/db/models/fields/__init__.py(154):         self.choices = choices
0.55 /testbed/django/db/models/fields/__init__.py(155):         self.help_text = help_text
0.55 /testbed/django/db/models/fields/__init__.py(156):         self.db_index = db_index
0.55 /testbed/django/db/models/fields/__init__.py(157):         self.db_column = db_column
0.55 /testbed/django/db/models/fields/__init__.py(158):         self._db_tablespace = db_tablespace
0.55 /testbed/django/db/models/fields/__init__.py(159):         self.auto_created = auto_created
0.55 /testbed/django/db/models/fields/__init__.py(162):         if auto_created:
0.55 /testbed/django/db/models/fields/__init__.py(163):             self.creation_counter = Field.auto_creation_counter
0.55 /testbed/django/db/models/fields/__init__.py(164):             Field.auto_creation_counter -= 1
0.55 /testbed/django/db/models/fields/__init__.py(169):         self._validators = list(validators)  # Store for deconstruction later
0.55 /testbed/django/db/models/fields/__init__.py(171):         messages = {}
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(174):         messages.update(error_messages or {})
0.55 /testbed/django/db/models/fields/__init__.py(175):         self._error_messages = error_messages  # Store for deconstruction later
0.55 /testbed/django/db/models/fields/__init__.py(176):         self.error_messages = messages
0.55 /testbed/django/db/models/fields/__init__.py(2393):         assert not cls._meta.auto_field, (
0.55 /testbed/django/db/models/fields/__init__.py(2397):         super().contribute_to_class(cls, name, **kwargs)
0.55 /testbed/django/db/models/fields/__init__.py(762):         self.set_attributes_from_name(name)
0.55 /testbed/django/db/models/fields/__init__.py(749):         self.name = self.name or name
0.55 /testbed/django/db/models/fields/__init__.py(750):         self.attname, self.column = self.get_attname_column()
0.55 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.55 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.55 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.55 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.55 /testbed/django/db/models/fields/__init__.py(751):         self.concrete = self.column is not None
0.55 /testbed/django/db/models/fields/__init__.py(752):         if self.verbose_name is None and self.name:
0.55 /testbed/django/db/models/fields/__init__.py(763):         self.model = cls
0.55 /testbed/django/db/models/fields/__init__.py(764):         cls._meta.add_field(self, private=private_only)
0.55 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.55 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.55 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.55 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.55 /testbed/django/db/models/fields/__init__.py(765):         if self.column:
0.55 /testbed/django/db/models/fields/__init__.py(769):             if not getattr(cls, self.attname, None):
0.55 /testbed/django/db/models/fields/__init__.py(770):                 setattr(cls, self.attname, self.descriptor_class(self))
0.55 /testbed/django/db/models/fields/__init__.py(771):         if self.choices is not None:
0.55 /testbed/django/db/models/fields/__init__.py(2398):         cls._meta.auto_field = self
0.55 /testbed/django/db/models/fields/__init__.py(534):         obj = copy.copy(self)
0.55 /testbed/django/db/models/fields/__init__.py(545):         obj = Empty()
0.55 /testbed/django/db/models/fields/__init__.py(546):         obj.__class__ = self.__class__
0.55 /testbed/django/db/models/fields/__init__.py(547):         obj.__dict__ = self.__dict__.copy()
0.55 /testbed/django/db/models/fields/__init__.py(548):         return obj
0.55 /testbed/django/db/models/fields/__init__.py(535):         if self.remote_field:
0.55 /testbed/django/db/models/fields/__init__.py(536):             obj.remote_field = copy.copy(self.remote_field)
0.55 /testbed/django/db/models/fields/__init__.py(537):             if hasattr(self.remote_field, 'field') and self.remote_field.field is self:
0.55 /testbed/django/db/models/fields/__init__.py(538):                 obj.remote_field.field = obj
0.55 /testbed/django/db/models/fields/__init__.py(539):         memodict[id(self)] = obj
0.55 /testbed/django/db/models/fields/__init__.py(540):         return obj
0.55 /testbed/django/db/models/fields/__init__.py(762):         self.set_attributes_from_name(name)
0.55 /testbed/django/db/models/fields/__init__.py(749):         self.name = self.name or name
0.55 /testbed/django/db/models/fields/__init__.py(750):         self.attname, self.column = self.get_attname_column()
0.55 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.55 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.55 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.55 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.55 /testbed/django/db/models/fields/__init__.py(751):         self.concrete = self.column is not None
0.55 /testbed/django/db/models/fields/__init__.py(752):         if self.verbose_name is None and self.name:
0.55 /testbed/django/db/models/fields/__init__.py(763):         self.model = cls
0.55 /testbed/django/db/models/fields/__init__.py(764):         cls._meta.add_field(self, private=private_only)
0.55 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.55 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.55 /testbed/django/db/models/fields/__init__.py(765):         if self.column:
0.55 /testbed/django/db/models/fields/__init__.py(769):             if not getattr(cls, self.attname, None):
0.55 /testbed/django/db/models/fields/__init__.py(771):         if self.choices is not None:
0.55 /testbed/django/db/models/fields/__init__.py(738):         return self._db_tablespace or settings.DEFAULT_INDEX_TABLESPACE
0.55 /testbed/django/db/models/fields/__init__.py(138):         self.name = name
0.55 /testbed/django/db/models/fields/__init__.py(139):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.55 /testbed/django/db/models/fields/__init__.py(140):         self._verbose_name = verbose_name  # Store original for deconstruction
0.55 /testbed/django/db/models/fields/__init__.py(141):         self.primary_key = primary_key
0.55 /testbed/django/db/models/fields/__init__.py(142):         self.max_length, self._unique = max_length, unique
0.55 /testbed/django/db/models/fields/__init__.py(143):         self.blank, self.null = blank, null
0.55 /testbed/django/db/models/fields/__init__.py(144):         self.remote_field = rel
0.55 /testbed/django/db/models/fields/__init__.py(145):         self.is_relation = self.remote_field is not None
0.55 /testbed/django/db/models/fields/__init__.py(146):         self.default = default
0.55 /testbed/django/db/models/fields/__init__.py(147):         self.editable = editable
0.55 /testbed/django/db/models/fields/__init__.py(148):         self.serialize = serialize
0.55 /testbed/django/db/models/fields/__init__.py(149):         self.unique_for_date = unique_for_date
0.55 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_month = unique_for_month
0.55 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_year = unique_for_year
0.55 /testbed/django/db/models/fields/__init__.py(152):         if isinstance(choices, collections.abc.Iterator):
0.55 /testbed/django/db/models/fields/__init__.py(154):         self.choices = choices
0.55 /testbed/django/db/models/fields/__init__.py(155):         self.help_text = help_text
0.55 /testbed/django/db/models/fields/__init__.py(156):         self.db_index = db_index
0.55 /testbed/django/db/models/fields/__init__.py(157):         self.db_column = db_column
0.55 /testbed/django/db/models/fields/__init__.py(158):         self._db_tablespace = db_tablespace
0.55 /testbed/django/db/models/fields/__init__.py(159):         self.auto_created = auto_created
0.55 /testbed/django/db/models/fields/__init__.py(162):         if auto_created:
0.55 /testbed/django/db/models/fields/__init__.py(166):             self.creation_counter = Field.creation_counter
0.55 /testbed/django/db/models/fields/__init__.py(167):             Field.creation_counter += 1
0.55 /testbed/django/db/models/fields/__init__.py(169):         self._validators = list(validators)  # Store for deconstruction later
0.55 /testbed/django/db/models/fields/__init__.py(171):         messages = {}
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(174):         messages.update(error_messages or {})
0.55 /testbed/django/db/models/fields/__init__.py(175):         self._error_messages = error_messages  # Store for deconstruction later
0.55 /testbed/django/db/models/fields/__init__.py(176):         self.error_messages = messages
0.55 /testbed/django/db/models/fields/__init__.py(738):         return self._db_tablespace or settings.DEFAULT_INDEX_TABLESPACE
0.55 /testbed/django/db/models/fields/__init__.py(138):         self.name = name
0.55 /testbed/django/db/models/fields/__init__.py(139):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.55 /testbed/django/db/models/fields/__init__.py(140):         self._verbose_name = verbose_name  # Store original for deconstruction
0.55 /testbed/django/db/models/fields/__init__.py(141):         self.primary_key = primary_key
0.55 /testbed/django/db/models/fields/__init__.py(142):         self.max_length, self._unique = max_length, unique
0.55 /testbed/django/db/models/fields/__init__.py(143):         self.blank, self.null = blank, null
0.55 /testbed/django/db/models/fields/__init__.py(144):         self.remote_field = rel
0.55 /testbed/django/db/models/fields/__init__.py(145):         self.is_relation = self.remote_field is not None
0.55 /testbed/django/db/models/fields/__init__.py(146):         self.default = default
0.55 /testbed/django/db/models/fields/__init__.py(147):         self.editable = editable
0.55 /testbed/django/db/models/fields/__init__.py(148):         self.serialize = serialize
0.55 /testbed/django/db/models/fields/__init__.py(149):         self.unique_for_date = unique_for_date
0.55 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_month = unique_for_month
0.55 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_year = unique_for_year
0.55 /testbed/django/db/models/fields/__init__.py(152):         if isinstance(choices, collections.abc.Iterator):
0.55 /testbed/django/db/models/fields/__init__.py(154):         self.choices = choices
0.55 /testbed/django/db/models/fields/__init__.py(155):         self.help_text = help_text
0.55 /testbed/django/db/models/fields/__init__.py(156):         self.db_index = db_index
0.55 /testbed/django/db/models/fields/__init__.py(157):         self.db_column = db_column
0.55 /testbed/django/db/models/fields/__init__.py(158):         self._db_tablespace = db_tablespace
0.55 /testbed/django/db/models/fields/__init__.py(159):         self.auto_created = auto_created
0.55 /testbed/django/db/models/fields/__init__.py(162):         if auto_created:
0.55 /testbed/django/db/models/fields/__init__.py(166):             self.creation_counter = Field.creation_counter
0.55 /testbed/django/db/models/fields/__init__.py(167):             Field.creation_counter += 1
0.55 /testbed/django/db/models/fields/__init__.py(169):         self._validators = list(validators)  # Store for deconstruction later
0.55 /testbed/django/db/models/fields/__init__.py(171):         messages = {}
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(174):         messages.update(error_messages or {})
0.55 /testbed/django/db/models/fields/__init__.py(175):         self._error_messages = error_messages  # Store for deconstruction later
0.55 /testbed/django/db/models/fields/__init__.py(176):         self.error_messages = messages
0.55 /testbed/django/db/models/fields/__init__.py(762):         self.set_attributes_from_name(name)
0.55 /testbed/django/db/models/fields/__init__.py(749):         self.name = self.name or name
0.55 /testbed/django/db/models/fields/__init__.py(750):         self.attname, self.column = self.get_attname_column()
0.55 /testbed/django/db/models/fields/__init__.py(751):         self.concrete = self.column is not None
0.55 /testbed/django/db/models/fields/__init__.py(752):         if self.verbose_name is None and self.name:
0.55 /testbed/django/db/models/fields/__init__.py(753):             self.verbose_name = self.name.replace('_', ' ')
0.55 /testbed/django/db/models/fields/__init__.py(763):         self.model = cls
0.55 /testbed/django/db/models/fields/__init__.py(764):         cls._meta.add_field(self, private=private_only)
0.55 /testbed/django/db/models/fields/__init__.py(765):         if self.column:
0.55 /testbed/django/db/models/fields/__init__.py(769):             if not getattr(cls, self.attname, None):
0.55 /testbed/django/db/models/fields/__init__.py(770):                 setattr(cls, self.attname, self.descriptor_class(self))
0.55 /testbed/django/db/models/fields/__init__.py(771):         if self.choices is not None:
0.55 /testbed/django/db/models/fields/__init__.py(762):         self.set_attributes_from_name(name)
0.55 /testbed/django/db/models/fields/__init__.py(749):         self.name = self.name or name
0.55 /testbed/django/db/models/fields/__init__.py(750):         self.attname, self.column = self.get_attname_column()
0.55 /testbed/django/db/models/fields/__init__.py(751):         self.concrete = self.column is not None
0.55 /testbed/django/db/models/fields/__init__.py(752):         if self.verbose_name is None and self.name:
0.55 /testbed/django/db/models/fields/__init__.py(753):             self.verbose_name = self.name.replace('_', ' ')
0.55 /testbed/django/db/models/fields/__init__.py(763):         self.model = cls
0.55 /testbed/django/db/models/fields/__init__.py(764):         cls._meta.add_field(self, private=private_only)
0.55 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.55 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.55 /testbed/django/db/models/fields/__init__.py(765):         if self.column:
0.55 /testbed/django/db/models/fields/__init__.py(769):             if not getattr(cls, self.attname, None):
0.55 /testbed/django/db/models/fields/__init__.py(770):                 setattr(cls, self.attname, self.descriptor_class(self))
0.55 /testbed/django/db/models/fields/__init__.py(771):         if self.choices is not None:
0.55 /testbed/django/db/models/fields/__init__.py(2356):         kwargs['blank'] = True
0.55 /testbed/django/db/models/fields/__init__.py(2357):         super().__init__(*args, **kwargs)
0.55 /testbed/django/db/models/fields/__init__.py(138):         self.name = name
0.55 /testbed/django/db/models/fields/__init__.py(139):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.55 /testbed/django/db/models/fields/__init__.py(140):         self._verbose_name = verbose_name  # Store original for deconstruction
0.55 /testbed/django/db/models/fields/__init__.py(141):         self.primary_key = primary_key
0.55 /testbed/django/db/models/fields/__init__.py(142):         self.max_length, self._unique = max_length, unique
0.55 /testbed/django/db/models/fields/__init__.py(143):         self.blank, self.null = blank, null
0.55 /testbed/django/db/models/fields/__init__.py(144):         self.remote_field = rel
0.55 /testbed/django/db/models/fields/__init__.py(145):         self.is_relation = self.remote_field is not None
0.55 /testbed/django/db/models/fields/__init__.py(146):         self.default = default
0.55 /testbed/django/db/models/fields/__init__.py(147):         self.editable = editable
0.55 /testbed/django/db/models/fields/__init__.py(148):         self.serialize = serialize
0.55 /testbed/django/db/models/fields/__init__.py(149):         self.unique_for_date = unique_for_date
0.55 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_month = unique_for_month
0.55 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_year = unique_for_year
0.55 /testbed/django/db/models/fields/__init__.py(152):         if isinstance(choices, collections.abc.Iterator):
0.55 /testbed/django/db/models/fields/__init__.py(154):         self.choices = choices
0.55 /testbed/django/db/models/fields/__init__.py(155):         self.help_text = help_text
0.55 /testbed/django/db/models/fields/__init__.py(156):         self.db_index = db_index
0.55 /testbed/django/db/models/fields/__init__.py(157):         self.db_column = db_column
0.55 /testbed/django/db/models/fields/__init__.py(158):         self._db_tablespace = db_tablespace
0.55 /testbed/django/db/models/fields/__init__.py(159):         self.auto_created = auto_created
0.55 /testbed/django/db/models/fields/__init__.py(162):         if auto_created:
0.55 /testbed/django/db/models/fields/__init__.py(163):             self.creation_counter = Field.auto_creation_counter
0.55 /testbed/django/db/models/fields/__init__.py(164):             Field.auto_creation_counter -= 1
0.55 /testbed/django/db/models/fields/__init__.py(169):         self._validators = list(validators)  # Store for deconstruction later
0.55 /testbed/django/db/models/fields/__init__.py(171):         messages = {}
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(174):         messages.update(error_messages or {})
0.55 /testbed/django/db/models/fields/__init__.py(175):         self._error_messages = error_messages  # Store for deconstruction later
0.55 /testbed/django/db/models/fields/__init__.py(176):         self.error_messages = messages
0.55 /testbed/django/db/models/fields/__init__.py(2393):         assert not cls._meta.auto_field, (
0.55 /testbed/django/db/models/fields/__init__.py(2397):         super().contribute_to_class(cls, name, **kwargs)
0.55 /testbed/django/db/models/fields/__init__.py(762):         self.set_attributes_from_name(name)
0.55 /testbed/django/db/models/fields/__init__.py(749):         self.name = self.name or name
0.55 /testbed/django/db/models/fields/__init__.py(750):         self.attname, self.column = self.get_attname_column()
0.55 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.55 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.55 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.55 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.55 /testbed/django/db/models/fields/__init__.py(751):         self.concrete = self.column is not None
0.55 /testbed/django/db/models/fields/__init__.py(752):         if self.verbose_name is None and self.name:
0.55 /testbed/django/db/models/fields/__init__.py(763):         self.model = cls
0.55 /testbed/django/db/models/fields/__init__.py(764):         cls._meta.add_field(self, private=private_only)
0.55 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.55 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.55 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.55 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.55 /testbed/django/db/models/fields/__init__.py(765):         if self.column:
0.55 /testbed/django/db/models/fields/__init__.py(769):             if not getattr(cls, self.attname, None):
0.55 /testbed/django/db/models/fields/__init__.py(770):                 setattr(cls, self.attname, self.descriptor_class(self))
0.55 /testbed/django/db/models/fields/__init__.py(771):         if self.choices is not None:
0.55 /testbed/django/db/models/fields/__init__.py(2398):         cls._meta.auto_field = self
0.55 /testbed/django/db/models/fields/__init__.py(2356):         kwargs['blank'] = True
0.55 /testbed/django/db/models/fields/__init__.py(2357):         super().__init__(*args, **kwargs)
0.55 /testbed/django/db/models/fields/__init__.py(138):         self.name = name
0.55 /testbed/django/db/models/fields/__init__.py(139):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.55 /testbed/django/db/models/fields/__init__.py(140):         self._verbose_name = verbose_name  # Store original for deconstruction
0.55 /testbed/django/db/models/fields/__init__.py(141):         self.primary_key = primary_key
0.55 /testbed/django/db/models/fields/__init__.py(142):         self.max_length, self._unique = max_length, unique
0.55 /testbed/django/db/models/fields/__init__.py(143):         self.blank, self.null = blank, null
0.55 /testbed/django/db/models/fields/__init__.py(144):         self.remote_field = rel
0.55 /testbed/django/db/models/fields/__init__.py(145):         self.is_relation = self.remote_field is not None
0.55 /testbed/django/db/models/fields/__init__.py(146):         self.default = default
0.55 /testbed/django/db/models/fields/__init__.py(147):         self.editable = editable
0.55 /testbed/django/db/models/fields/__init__.py(148):         self.serialize = serialize
0.55 /testbed/django/db/models/fields/__init__.py(149):         self.unique_for_date = unique_for_date
0.55 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_month = unique_for_month
0.55 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_year = unique_for_year
0.55 /testbed/django/db/models/fields/__init__.py(152):         if isinstance(choices, collections.abc.Iterator):
0.55 /testbed/django/db/models/fields/__init__.py(154):         self.choices = choices
0.55 /testbed/django/db/models/fields/__init__.py(155):         self.help_text = help_text
0.55 /testbed/django/db/models/fields/__init__.py(156):         self.db_index = db_index
0.55 /testbed/django/db/models/fields/__init__.py(157):         self.db_column = db_column
0.55 /testbed/django/db/models/fields/__init__.py(158):         self._db_tablespace = db_tablespace
0.55 /testbed/django/db/models/fields/__init__.py(159):         self.auto_created = auto_created
0.55 /testbed/django/db/models/fields/__init__.py(162):         if auto_created:
0.55 /testbed/django/db/models/fields/__init__.py(163):             self.creation_counter = Field.auto_creation_counter
0.55 /testbed/django/db/models/fields/__init__.py(164):             Field.auto_creation_counter -= 1
0.55 /testbed/django/db/models/fields/__init__.py(169):         self._validators = list(validators)  # Store for deconstruction later
0.55 /testbed/django/db/models/fields/__init__.py(171):         messages = {}
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(174):         messages.update(error_messages or {})
0.55 /testbed/django/db/models/fields/__init__.py(175):         self._error_messages = error_messages  # Store for deconstruction later
0.55 /testbed/django/db/models/fields/__init__.py(176):         self.error_messages = messages
0.55 /testbed/django/db/models/fields/__init__.py(2393):         assert not cls._meta.auto_field, (
0.55 /testbed/django/db/models/fields/__init__.py(2397):         super().contribute_to_class(cls, name, **kwargs)
0.55 /testbed/django/db/models/fields/__init__.py(762):         self.set_attributes_from_name(name)
0.55 /testbed/django/db/models/fields/__init__.py(749):         self.name = self.name or name
0.55 /testbed/django/db/models/fields/__init__.py(750):         self.attname, self.column = self.get_attname_column()
0.55 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.55 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.55 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.55 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.55 /testbed/django/db/models/fields/__init__.py(751):         self.concrete = self.column is not None
0.55 /testbed/django/db/models/fields/__init__.py(752):         if self.verbose_name is None and self.name:
0.55 /testbed/django/db/models/fields/__init__.py(763):         self.model = cls
0.55 /testbed/django/db/models/fields/__init__.py(764):         cls._meta.add_field(self, private=private_only)
0.55 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.55 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.55 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.55 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.55 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.55 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.55 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.55 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.55 /testbed/django/db/models/fields/__init__.py(765):         if self.column:
0.55 /testbed/django/db/models/fields/__init__.py(769):             if not getattr(cls, self.attname, None):
0.55 /testbed/django/db/models/fields/__init__.py(770):                 setattr(cls, self.attname, self.descriptor_class(self))
0.55 /testbed/django/db/models/fields/__init__.py(771):         if self.choices is not None:
0.55 /testbed/django/db/models/fields/__init__.py(2398):         cls._meta.auto_field = self
0.55 /testbed/django/db/models/fields/__init__.py(986):         super().__init__(*args, **kwargs)
0.55 /testbed/django/db/models/fields/__init__.py(138):         self.name = name
0.55 /testbed/django/db/models/fields/__init__.py(139):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.55 /testbed/django/db/models/fields/__init__.py(140):         self._verbose_name = verbose_name  # Store original for deconstruction
0.55 /testbed/django/db/models/fields/__init__.py(141):         self.primary_key = primary_key
0.55 /testbed/django/db/models/fields/__init__.py(142):         self.max_length, self._unique = max_length, unique
0.55 /testbed/django/db/models/fields/__init__.py(143):         self.blank, self.null = blank, null
0.55 /testbed/django/db/models/fields/__init__.py(144):         self.remote_field = rel
0.55 /testbed/django/db/models/fields/__init__.py(145):         self.is_relation = self.remote_field is not None
0.55 /testbed/django/db/models/fields/__init__.py(146):         self.default = default
0.55 /testbed/django/db/models/fields/__init__.py(147):         self.editable = editable
0.55 /testbed/django/db/models/fields/__init__.py(148):         self.serialize = serialize
0.55 /testbed/django/db/models/fields/__init__.py(149):         self.unique_for_date = unique_for_date
0.55 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_month = unique_for_month
0.55 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_year = unique_for_year
0.55 /testbed/django/db/models/fields/__init__.py(152):         if isinstance(choices, collections.abc.Iterator):
0.55 /testbed/django/db/models/fields/__init__.py(154):         self.choices = choices
0.55 /testbed/django/db/models/fields/__init__.py(155):         self.help_text = help_text
0.55 /testbed/django/db/models/fields/__init__.py(156):         self.db_index = db_index
0.55 /testbed/django/db/models/fields/__init__.py(157):         self.db_column = db_column
0.55 /testbed/django/db/models/fields/__init__.py(158):         self._db_tablespace = db_tablespace
0.55 /testbed/django/db/models/fields/__init__.py(159):         self.auto_created = auto_created
0.55 /testbed/django/db/models/fields/__init__.py(162):         if auto_created:
0.55 /testbed/django/db/models/fields/__init__.py(166):             self.creation_counter = Field.creation_counter
0.55 /testbed/django/db/models/fields/__init__.py(167):             Field.creation_counter += 1
0.55 /testbed/django/db/models/fields/__init__.py(169):         self._validators = list(validators)  # Store for deconstruction later
0.55 /testbed/django/db/models/fields/__init__.py(171):         messages = {}
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(174):         messages.update(error_messages or {})
0.55 /testbed/django/db/models/fields/__init__.py(175):         self._error_messages = error_messages  # Store for deconstruction later
0.55 /testbed/django/db/models/fields/__init__.py(176):         self.error_messages = messages
0.55 /testbed/django/db/models/fields/__init__.py(987):         self.validators.append(validators.MaxLengthValidator(self.max_length))
0.55 /testbed/django/db/models/fields/__init__.py(595):         return [*self.default_validators, *self._validators]
0.55 /testbed/django/db/models/fields/__init__.py(986):         super().__init__(*args, **kwargs)
0.55 /testbed/django/db/models/fields/__init__.py(138):         self.name = name
0.55 /testbed/django/db/models/fields/__init__.py(139):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.55 /testbed/django/db/models/fields/__init__.py(140):         self._verbose_name = verbose_name  # Store original for deconstruction
0.55 /testbed/django/db/models/fields/__init__.py(141):         self.primary_key = primary_key
0.55 /testbed/django/db/models/fields/__init__.py(142):         self.max_length, self._unique = max_length, unique
0.55 /testbed/django/db/models/fields/__init__.py(143):         self.blank, self.null = blank, null
0.55 /testbed/django/db/models/fields/__init__.py(144):         self.remote_field = rel
0.55 /testbed/django/db/models/fields/__init__.py(145):         self.is_relation = self.remote_field is not None
0.55 /testbed/django/db/models/fields/__init__.py(146):         self.default = default
0.55 /testbed/django/db/models/fields/__init__.py(147):         self.editable = editable
0.55 /testbed/django/db/models/fields/__init__.py(148):         self.serialize = serialize
0.55 /testbed/django/db/models/fields/__init__.py(149):         self.unique_for_date = unique_for_date
0.55 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_month = unique_for_month
0.55 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_year = unique_for_year
0.55 /testbed/django/db/models/fields/__init__.py(152):         if isinstance(choices, collections.abc.Iterator):
0.55 /testbed/django/db/models/fields/__init__.py(154):         self.choices = choices
0.55 /testbed/django/db/models/fields/__init__.py(155):         self.help_text = help_text
0.55 /testbed/django/db/models/fields/__init__.py(156):         self.db_index = db_index
0.55 /testbed/django/db/models/fields/__init__.py(157):         self.db_column = db_column
0.55 /testbed/django/db/models/fields/__init__.py(158):         self._db_tablespace = db_tablespace
0.55 /testbed/django/db/models/fields/__init__.py(159):         self.auto_created = auto_created
0.55 /testbed/django/db/models/fields/__init__.py(162):         if auto_created:
0.55 /testbed/django/db/models/fields/__init__.py(166):             self.creation_counter = Field.creation_counter
0.55 /testbed/django/db/models/fields/__init__.py(167):             Field.creation_counter += 1
0.55 /testbed/django/db/models/fields/__init__.py(169):         self._validators = list(validators)  # Store for deconstruction later
0.55 /testbed/django/db/models/fields/__init__.py(171):         messages = {}
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(174):         messages.update(error_messages or {})
0.55 /testbed/django/db/models/fields/__init__.py(175):         self._error_messages = error_messages  # Store for deconstruction later
0.55 /testbed/django/db/models/fields/__init__.py(176):         self.error_messages = messages
0.55 /testbed/django/db/models/fields/__init__.py(987):         self.validators.append(validators.MaxLengthValidator(self.max_length))
0.55 /testbed/django/db/models/fields/__init__.py(595):         return [*self.default_validators, *self._validators]
0.55 /testbed/django/db/models/fields/__init__.py(762):         self.set_attributes_from_name(name)
0.55 /testbed/django/db/models/fields/__init__.py(749):         self.name = self.name or name
0.55 /testbed/django/db/models/fields/__init__.py(750):         self.attname, self.column = self.get_attname_column()
0.55 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.55 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.55 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.55 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.55 /testbed/django/db/models/fields/__init__.py(751):         self.concrete = self.column is not None
0.55 /testbed/django/db/models/fields/__init__.py(752):         if self.verbose_name is None and self.name:
0.55 /testbed/django/db/models/fields/__init__.py(763):         self.model = cls
0.55 /testbed/django/db/models/fields/__init__.py(764):         cls._meta.add_field(self, private=private_only)
0.55 /testbed/django/db/models/fields/__init__.py(765):         if self.column:
0.55 /testbed/django/db/models/fields/__init__.py(769):             if not getattr(cls, self.attname, None):
0.55 /testbed/django/db/models/fields/__init__.py(770):                 setattr(cls, self.attname, self.descriptor_class(self))
0.55 /testbed/django/db/models/fields/__init__.py(771):         if self.choices is not None:
0.55 /testbed/django/db/models/fields/__init__.py(762):         self.set_attributes_from_name(name)
0.55 /testbed/django/db/models/fields/__init__.py(749):         self.name = self.name or name
0.55 /testbed/django/db/models/fields/__init__.py(750):         self.attname, self.column = self.get_attname_column()
0.55 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.55 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.55 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.55 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.55 /testbed/django/db/models/fields/__init__.py(751):         self.concrete = self.column is not None
0.55 /testbed/django/db/models/fields/__init__.py(752):         if self.verbose_name is None and self.name:
0.55 /testbed/django/db/models/fields/__init__.py(763):         self.model = cls
0.55 /testbed/django/db/models/fields/__init__.py(764):         cls._meta.add_field(self, private=private_only)
0.55 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.55 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.55 /testbed/django/db/models/fields/__init__.py(765):         if self.column:
0.55 /testbed/django/db/models/fields/__init__.py(769):             if not getattr(cls, self.attname, None):
0.55 /testbed/django/db/models/fields/__init__.py(770):                 setattr(cls, self.attname, self.descriptor_class(self))
0.55 /testbed/django/db/models/fields/__init__.py(771):         if self.choices is not None:
0.55 /testbed/django/db/models/fields/__init__.py(2356):         kwargs['blank'] = True
0.55 /testbed/django/db/models/fields/__init__.py(2357):         super().__init__(*args, **kwargs)
0.55 /testbed/django/db/models/fields/__init__.py(138):         self.name = name
0.55 /testbed/django/db/models/fields/__init__.py(139):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.55 /testbed/django/db/models/fields/__init__.py(140):         self._verbose_name = verbose_name  # Store original for deconstruction
0.55 /testbed/django/db/models/fields/__init__.py(141):         self.primary_key = primary_key
0.55 /testbed/django/db/models/fields/__init__.py(142):         self.max_length, self._unique = max_length, unique
0.55 /testbed/django/db/models/fields/__init__.py(143):         self.blank, self.null = blank, null
0.55 /testbed/django/db/models/fields/__init__.py(144):         self.remote_field = rel
0.55 /testbed/django/db/models/fields/__init__.py(145):         self.is_relation = self.remote_field is not None
0.55 /testbed/django/db/models/fields/__init__.py(146):         self.default = default
0.55 /testbed/django/db/models/fields/__init__.py(147):         self.editable = editable
0.55 /testbed/django/db/models/fields/__init__.py(148):         self.serialize = serialize
0.55 /testbed/django/db/models/fields/__init__.py(149):         self.unique_for_date = unique_for_date
0.55 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_month = unique_for_month
0.55 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_year = unique_for_year
0.55 /testbed/django/db/models/fields/__init__.py(152):         if isinstance(choices, collections.abc.Iterator):
0.55 /testbed/django/db/models/fields/__init__.py(154):         self.choices = choices
0.55 /testbed/django/db/models/fields/__init__.py(155):         self.help_text = help_text
0.55 /testbed/django/db/models/fields/__init__.py(156):         self.db_index = db_index
0.55 /testbed/django/db/models/fields/__init__.py(157):         self.db_column = db_column
0.55 /testbed/django/db/models/fields/__init__.py(158):         self._db_tablespace = db_tablespace
0.55 /testbed/django/db/models/fields/__init__.py(159):         self.auto_created = auto_created
0.55 /testbed/django/db/models/fields/__init__.py(162):         if auto_created:
0.55 /testbed/django/db/models/fields/__init__.py(163):             self.creation_counter = Field.auto_creation_counter
0.55 /testbed/django/db/models/fields/__init__.py(164):             Field.auto_creation_counter -= 1
0.55 /testbed/django/db/models/fields/__init__.py(169):         self._validators = list(validators)  # Store for deconstruction later
0.55 /testbed/django/db/models/fields/__init__.py(171):         messages = {}
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(174):         messages.update(error_messages or {})
0.55 /testbed/django/db/models/fields/__init__.py(175):         self._error_messages = error_messages  # Store for deconstruction later
0.55 /testbed/django/db/models/fields/__init__.py(176):         self.error_messages = messages
0.55 /testbed/django/db/models/fields/__init__.py(2393):         assert not cls._meta.auto_field, (
0.55 /testbed/django/db/models/fields/__init__.py(2397):         super().contribute_to_class(cls, name, **kwargs)
0.55 /testbed/django/db/models/fields/__init__.py(762):         self.set_attributes_from_name(name)
0.55 /testbed/django/db/models/fields/__init__.py(749):         self.name = self.name or name
0.55 /testbed/django/db/models/fields/__init__.py(750):         self.attname, self.column = self.get_attname_column()
0.55 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.55 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.55 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.55 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.55 /testbed/django/db/models/fields/__init__.py(751):         self.concrete = self.column is not None
0.55 /testbed/django/db/models/fields/__init__.py(752):         if self.verbose_name is None and self.name:
0.55 /testbed/django/db/models/fields/__init__.py(763):         self.model = cls
0.55 /testbed/django/db/models/fields/__init__.py(764):         cls._meta.add_field(self, private=private_only)
0.55 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.55 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.55 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.55 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.55 /testbed/django/db/models/fields/__init__.py(765):         if self.column:
0.55 /testbed/django/db/models/fields/__init__.py(769):             if not getattr(cls, self.attname, None):
0.55 /testbed/django/db/models/fields/__init__.py(770):                 setattr(cls, self.attname, self.descriptor_class(self))
0.55 /testbed/django/db/models/fields/__init__.py(771):         if self.choices is not None:
0.55 /testbed/django/db/models/fields/__init__.py(2398):         cls._meta.auto_field = self
0.55 /testbed/django/db/models/fields/__init__.py(986):         super().__init__(*args, **kwargs)
0.55 /testbed/django/db/models/fields/__init__.py(138):         self.name = name
0.55 /testbed/django/db/models/fields/__init__.py(139):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.55 /testbed/django/db/models/fields/__init__.py(140):         self._verbose_name = verbose_name  # Store original for deconstruction
0.55 /testbed/django/db/models/fields/__init__.py(141):         self.primary_key = primary_key
0.55 /testbed/django/db/models/fields/__init__.py(142):         self.max_length, self._unique = max_length, unique
0.55 /testbed/django/db/models/fields/__init__.py(143):         self.blank, self.null = blank, null
0.55 /testbed/django/db/models/fields/__init__.py(144):         self.remote_field = rel
0.55 /testbed/django/db/models/fields/__init__.py(145):         self.is_relation = self.remote_field is not None
0.55 /testbed/django/db/models/fields/__init__.py(146):         self.default = default
0.55 /testbed/django/db/models/fields/__init__.py(147):         self.editable = editable
0.55 /testbed/django/db/models/fields/__init__.py(148):         self.serialize = serialize
0.55 /testbed/django/db/models/fields/__init__.py(149):         self.unique_for_date = unique_for_date
0.55 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_month = unique_for_month
0.55 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_year = unique_for_year
0.55 /testbed/django/db/models/fields/__init__.py(152):         if isinstance(choices, collections.abc.Iterator):
0.55 /testbed/django/db/models/fields/__init__.py(154):         self.choices = choices
0.55 /testbed/django/db/models/fields/__init__.py(155):         self.help_text = help_text
0.55 /testbed/django/db/models/fields/__init__.py(156):         self.db_index = db_index
0.55 /testbed/django/db/models/fields/__init__.py(157):         self.db_column = db_column
0.55 /testbed/django/db/models/fields/__init__.py(158):         self._db_tablespace = db_tablespace
0.55 /testbed/django/db/models/fields/__init__.py(159):         self.auto_created = auto_created
0.55 /testbed/django/db/models/fields/__init__.py(162):         if auto_created:
0.55 /testbed/django/db/models/fields/__init__.py(166):             self.creation_counter = Field.creation_counter
0.55 /testbed/django/db/models/fields/__init__.py(167):             Field.creation_counter += 1
0.55 /testbed/django/db/models/fields/__init__.py(169):         self._validators = list(validators)  # Store for deconstruction later
0.55 /testbed/django/db/models/fields/__init__.py(171):         messages = {}
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(174):         messages.update(error_messages or {})
0.55 /testbed/django/db/models/fields/__init__.py(175):         self._error_messages = error_messages  # Store for deconstruction later
0.55 /testbed/django/db/models/fields/__init__.py(176):         self.error_messages = messages
0.55 /testbed/django/db/models/fields/__init__.py(987):         self.validators.append(validators.MaxLengthValidator(self.max_length))
0.55 /testbed/django/db/models/fields/__init__.py(595):         return [*self.default_validators, *self._validators]
0.55 /testbed/django/db/models/fields/__init__.py(138):         self.name = name
0.55 /testbed/django/db/models/fields/__init__.py(139):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.55 /testbed/django/db/models/fields/__init__.py(140):         self._verbose_name = verbose_name  # Store original for deconstruction
0.55 /testbed/django/db/models/fields/__init__.py(141):         self.primary_key = primary_key
0.55 /testbed/django/db/models/fields/__init__.py(142):         self.max_length, self._unique = max_length, unique
0.55 /testbed/django/db/models/fields/__init__.py(143):         self.blank, self.null = blank, null
0.55 /testbed/django/db/models/fields/__init__.py(144):         self.remote_field = rel
0.55 /testbed/django/db/models/fields/__init__.py(145):         self.is_relation = self.remote_field is not None
0.55 /testbed/django/db/models/fields/__init__.py(146):         self.default = default
0.55 /testbed/django/db/models/fields/__init__.py(147):         self.editable = editable
0.55 /testbed/django/db/models/fields/__init__.py(148):         self.serialize = serialize
0.55 /testbed/django/db/models/fields/__init__.py(149):         self.unique_for_date = unique_for_date
0.55 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_month = unique_for_month
0.55 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_year = unique_for_year
0.55 /testbed/django/db/models/fields/__init__.py(152):         if isinstance(choices, collections.abc.Iterator):
0.55 /testbed/django/db/models/fields/__init__.py(154):         self.choices = choices
0.55 /testbed/django/db/models/fields/__init__.py(155):         self.help_text = help_text
0.55 /testbed/django/db/models/fields/__init__.py(156):         self.db_index = db_index
0.55 /testbed/django/db/models/fields/__init__.py(157):         self.db_column = db_column
0.55 /testbed/django/db/models/fields/__init__.py(158):         self._db_tablespace = db_tablespace
0.55 /testbed/django/db/models/fields/__init__.py(159):         self.auto_created = auto_created
0.55 /testbed/django/db/models/fields/__init__.py(162):         if auto_created:
0.55 /testbed/django/db/models/fields/__init__.py(166):             self.creation_counter = Field.creation_counter
0.55 /testbed/django/db/models/fields/__init__.py(167):             Field.creation_counter += 1
0.55 /testbed/django/db/models/fields/__init__.py(169):         self._validators = list(validators)  # Store for deconstruction later
0.55 /testbed/django/db/models/fields/__init__.py(171):         messages = {}
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(174):         messages.update(error_messages or {})
0.55 /testbed/django/db/models/fields/__init__.py(175):         self._error_messages = error_messages  # Store for deconstruction later
0.55 /testbed/django/db/models/fields/__init__.py(176):         self.error_messages = messages
0.55 /testbed/django/db/models/fields/__init__.py(1105):         self.auto_now, self.auto_now_add = auto_now, auto_now_add
0.55 /testbed/django/db/models/fields/__init__.py(1106):         if auto_now or auto_now_add:
0.55 /testbed/django/db/models/fields/__init__.py(1109):         super().__init__(verbose_name, name, **kwargs)
0.55 /testbed/django/db/models/fields/__init__.py(138):         self.name = name
0.55 /testbed/django/db/models/fields/__init__.py(139):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.55 /testbed/django/db/models/fields/__init__.py(140):         self._verbose_name = verbose_name  # Store original for deconstruction
0.55 /testbed/django/db/models/fields/__init__.py(141):         self.primary_key = primary_key
0.55 /testbed/django/db/models/fields/__init__.py(142):         self.max_length, self._unique = max_length, unique
0.55 /testbed/django/db/models/fields/__init__.py(143):         self.blank, self.null = blank, null
0.55 /testbed/django/db/models/fields/__init__.py(144):         self.remote_field = rel
0.55 /testbed/django/db/models/fields/__init__.py(145):         self.is_relation = self.remote_field is not None
0.55 /testbed/django/db/models/fields/__init__.py(146):         self.default = default
0.55 /testbed/django/db/models/fields/__init__.py(147):         self.editable = editable
0.55 /testbed/django/db/models/fields/__init__.py(148):         self.serialize = serialize
0.55 /testbed/django/db/models/fields/__init__.py(149):         self.unique_for_date = unique_for_date
0.55 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_month = unique_for_month
0.55 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_year = unique_for_year
0.55 /testbed/django/db/models/fields/__init__.py(152):         if isinstance(choices, collections.abc.Iterator):
0.55 /testbed/django/db/models/fields/__init__.py(154):         self.choices = choices
0.55 /testbed/django/db/models/fields/__init__.py(155):         self.help_text = help_text
0.55 /testbed/django/db/models/fields/__init__.py(156):         self.db_index = db_index
0.55 /testbed/django/db/models/fields/__init__.py(157):         self.db_column = db_column
0.55 /testbed/django/db/models/fields/__init__.py(158):         self._db_tablespace = db_tablespace
0.55 /testbed/django/db/models/fields/__init__.py(159):         self.auto_created = auto_created
0.55 /testbed/django/db/models/fields/__init__.py(162):         if auto_created:
0.55 /testbed/django/db/models/fields/__init__.py(166):             self.creation_counter = Field.creation_counter
0.55 /testbed/django/db/models/fields/__init__.py(167):             Field.creation_counter += 1
0.55 /testbed/django/db/models/fields/__init__.py(169):         self._validators = list(validators)  # Store for deconstruction later
0.55 /testbed/django/db/models/fields/__init__.py(171):         messages = {}
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.55 /testbed/django/db/models/fields/__init__.py(174):         messages.update(error_messages or {})
0.55 /testbed/django/db/models/fields/__init__.py(175):         self._error_messages = error_messages  # Store for deconstruction later
0.55 /testbed/django/db/models/fields/__init__.py(176):         self.error_messages = messages
0.55 /testbed/django/db/models/fields/__init__.py(762):         self.set_attributes_from_name(name)
0.55 /testbed/django/db/models/fields/__init__.py(749):         self.name = self.name or name
0.55 /testbed/django/db/models/fields/__init__.py(750):         self.attname, self.column = self.get_attname_column()
0.55 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.55 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.55 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.55 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.55 /testbed/django/db/models/fields/__init__.py(751):         self.concrete = self.column is not None
0.55 /testbed/django/db/models/fields/__init__.py(752):         if self.verbose_name is None and self.name:
0.55 /testbed/django/db/models/fields/__init__.py(763):         self.model = cls
0.55 /testbed/django/db/models/fields/__init__.py(764):         cls._meta.add_field(self, private=private_only)
0.55 /testbed/django/db/models/fields/__init__.py(765):         if self.column:
0.55 /testbed/django/db/models/fields/__init__.py(769):             if not getattr(cls, self.attname, None):
0.55 /testbed/django/db/models/fields/__init__.py(770):                 setattr(cls, self.attname, self.descriptor_class(self))
0.55 /testbed/django/db/models/fields/__init__.py(771):         if self.choices is not None:
0.55 /testbed/django/db/models/fields/__init__.py(762):         self.set_attributes_from_name(name)
0.55 /testbed/django/db/models/fields/__init__.py(749):         self.name = self.name or name
0.55 /testbed/django/db/models/fields/__init__.py(750):         self.attname, self.column = self.get_attname_column()
0.55 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.55 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.55 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.55 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.55 /testbed/django/db/models/fields/__init__.py(751):         self.concrete = self.column is not None
0.55 /testbed/django/db/models/fields/__init__.py(752):         if self.verbose_name is None and self.name:
0.55 /testbed/django/db/models/fields/__init__.py(763):         self.model = cls
0.55 /testbed/django/db/models/fields/__init__.py(764):         cls._meta.add_field(self, private=private_only)
0.55 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.55 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.55 /testbed/django/db/models/fields/__init__.py(765):         if self.column:
0.55 /testbed/django/db/models/fields/__init__.py(769):             if not getattr(cls, self.attname, None):
0.55 /testbed/django/db/models/fields/__init__.py(770):                 setattr(cls, self.attname, self.descriptor_class(self))
0.55 /testbed/django/db/models/fields/__init__.py(771):         if self.choices is not None:
0.55 /testbed/django/db/models/fields/__init__.py(1204):         super().contribute_to_class(cls, name, **kwargs)
0.55 /testbed/django/db/models/fields/__init__.py(762):         self.set_attributes_from_name(name)
0.55 /testbed/django/db/models/fields/__init__.py(749):         self.name = self.name or name
0.55 /testbed/django/db/models/fields/__init__.py(750):         self.attname, self.column = self.get_attname_column()
0.55 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.55 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.55 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.55 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.55 /testbed/django/db/models/fields/__init__.py(751):         self.concrete = self.column is not None
0.55 /testbed/django/db/models/fields/__init__.py(752):         if self.verbose_name is None and self.name:
0.55 /testbed/django/db/models/fields/__init__.py(763):         self.model = cls
0.55 /testbed/django/db/models/fields/__init__.py(764):         cls._meta.add_field(self, private=private_only)
0.55 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.55 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.55 /testbed/django/db/models/fields/__init__.py(765):         if self.column:
0.55 /testbed/django/db/models/fields/__init__.py(769):             if not getattr(cls, self.attname, None):
0.55 /testbed/django/db/models/fields/__init__.py(770):                 setattr(cls, self.attname, self.descriptor_class(self))
0.55 /testbed/django/db/models/fields/__init__.py(771):         if self.choices is not None:
0.55 /testbed/django/db/models/fields/__init__.py(1205):         if not self.null:
0.55 /testbed/django/db/models/fields/__init__.py(1206):             setattr(
0.55 /testbed/django/db/models/fields/__init__.py(1207):                 cls, 'get_next_by_%s' % self.name,
0.55 /testbed/django/db/models/fields/__init__.py(1208):                 partialmethod(cls._get_next_or_previous_by_FIELD, field=self, is_next=True)
0.55 /testbed/django/db/models/fields/__init__.py(1210):             setattr(
0.55 /testbed/django/db/models/fields/__init__.py(1211):                 cls, 'get_previous_by_%s' % self.name,
0.55 /testbed/django/db/models/fields/__init__.py(1212):                 partialmethod(cls._get_next_or_previous_by_FIELD, field=self, is_next=False)
0.56 /testbed/django/db/models/fields/__init__.py(534):         obj = copy.copy(self)
0.56 /testbed/django/db/models/fields/__init__.py(545):         obj = Empty()
0.56 /testbed/django/db/models/fields/__init__.py(546):         obj.__class__ = self.__class__
0.56 /testbed/django/db/models/fields/__init__.py(547):         obj.__dict__ = self.__dict__.copy()
0.56 /testbed/django/db/models/fields/__init__.py(548):         return obj
0.56 /testbed/django/db/models/fields/__init__.py(535):         if self.remote_field:
0.56 /testbed/django/db/models/fields/__init__.py(539):         memodict[id(self)] = obj
0.56 /testbed/django/db/models/fields/__init__.py(540):         return obj
0.56 /testbed/django/db/models/fields/__init__.py(762):         self.set_attributes_from_name(name)
0.56 /testbed/django/db/models/fields/__init__.py(749):         self.name = self.name or name
0.56 /testbed/django/db/models/fields/__init__.py(750):         self.attname, self.column = self.get_attname_column()
0.56 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.56 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.56 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.56 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.56 /testbed/django/db/models/fields/__init__.py(751):         self.concrete = self.column is not None
0.56 /testbed/django/db/models/fields/__init__.py(752):         if self.verbose_name is None and self.name:
0.56 /testbed/django/db/models/fields/__init__.py(763):         self.model = cls
0.56 /testbed/django/db/models/fields/__init__.py(764):         cls._meta.add_field(self, private=private_only)
0.56 /testbed/django/db/models/fields/__init__.py(765):         if self.column:
0.56 /testbed/django/db/models/fields/__init__.py(769):             if not getattr(cls, self.attname, None):
0.56 /testbed/django/db/models/fields/__init__.py(771):         if self.choices is not None:
0.56 /testbed/django/db/models/fields/__init__.py(534):         obj = copy.copy(self)
0.56 /testbed/django/db/models/fields/__init__.py(545):         obj = Empty()
0.56 /testbed/django/db/models/fields/__init__.py(546):         obj.__class__ = self.__class__
0.56 /testbed/django/db/models/fields/__init__.py(547):         obj.__dict__ = self.__dict__.copy()
0.56 /testbed/django/db/models/fields/__init__.py(548):         return obj
0.56 /testbed/django/db/models/fields/__init__.py(535):         if self.remote_field:
0.56 /testbed/django/db/models/fields/__init__.py(539):         memodict[id(self)] = obj
0.56 /testbed/django/db/models/fields/__init__.py(540):         return obj
0.56 /testbed/django/db/models/fields/__init__.py(762):         self.set_attributes_from_name(name)
0.56 /testbed/django/db/models/fields/__init__.py(749):         self.name = self.name or name
0.56 /testbed/django/db/models/fields/__init__.py(750):         self.attname, self.column = self.get_attname_column()
0.56 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.56 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.56 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.56 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.56 /testbed/django/db/models/fields/__init__.py(751):         self.concrete = self.column is not None
0.56 /testbed/django/db/models/fields/__init__.py(752):         if self.verbose_name is None and self.name:
0.56 /testbed/django/db/models/fields/__init__.py(763):         self.model = cls
0.56 /testbed/django/db/models/fields/__init__.py(764):         cls._meta.add_field(self, private=private_only)
0.56 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.56 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(765):         if self.column:
0.56 /testbed/django/db/models/fields/__init__.py(769):             if not getattr(cls, self.attname, None):
0.56 /testbed/django/db/models/fields/__init__.py(771):         if self.choices is not None:
0.56 /testbed/django/db/models/fields/__init__.py(534):         obj = copy.copy(self)
0.56 /testbed/django/db/models/fields/__init__.py(545):         obj = Empty()
0.56 /testbed/django/db/models/fields/__init__.py(546):         obj.__class__ = self.__class__
0.56 /testbed/django/db/models/fields/__init__.py(547):         obj.__dict__ = self.__dict__.copy()
0.56 /testbed/django/db/models/fields/__init__.py(548):         return obj
0.56 /testbed/django/db/models/fields/__init__.py(535):         if self.remote_field:
0.56 /testbed/django/db/models/fields/__init__.py(539):         memodict[id(self)] = obj
0.56 /testbed/django/db/models/fields/__init__.py(540):         return obj
0.56 /testbed/django/db/models/fields/__init__.py(1204):         super().contribute_to_class(cls, name, **kwargs)
0.56 /testbed/django/db/models/fields/__init__.py(762):         self.set_attributes_from_name(name)
0.56 /testbed/django/db/models/fields/__init__.py(749):         self.name = self.name or name
0.56 /testbed/django/db/models/fields/__init__.py(750):         self.attname, self.column = self.get_attname_column()
0.56 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.56 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.56 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.56 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.56 /testbed/django/db/models/fields/__init__.py(751):         self.concrete = self.column is not None
0.56 /testbed/django/db/models/fields/__init__.py(752):         if self.verbose_name is None and self.name:
0.56 /testbed/django/db/models/fields/__init__.py(763):         self.model = cls
0.56 /testbed/django/db/models/fields/__init__.py(764):         cls._meta.add_field(self, private=private_only)
0.56 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.56 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(765):         if self.column:
0.56 /testbed/django/db/models/fields/__init__.py(769):             if not getattr(cls, self.attname, None):
0.56 /testbed/django/db/models/fields/__init__.py(771):         if self.choices is not None:
0.56 /testbed/django/db/models/fields/__init__.py(1205):         if not self.null:
0.56 /testbed/django/db/models/fields/__init__.py(1206):             setattr(
0.56 /testbed/django/db/models/fields/__init__.py(1207):                 cls, 'get_next_by_%s' % self.name,
0.56 /testbed/django/db/models/fields/__init__.py(1208):                 partialmethod(cls._get_next_or_previous_by_FIELD, field=self, is_next=True)
0.56 /testbed/django/db/models/fields/__init__.py(1210):             setattr(
0.56 /testbed/django/db/models/fields/__init__.py(1211):                 cls, 'get_previous_by_%s' % self.name,
0.56 /testbed/django/db/models/fields/__init__.py(1212):                 partialmethod(cls._get_next_or_previous_by_FIELD, field=self, is_next=False)
0.56 /testbed/django/db/models/fields/__init__.py(1105):         self.auto_now, self.auto_now_add = auto_now, auto_now_add
0.56 /testbed/django/db/models/fields/__init__.py(1106):         if auto_now or auto_now_add:
0.56 /testbed/django/db/models/fields/__init__.py(1109):         super().__init__(verbose_name, name, **kwargs)
0.56 /testbed/django/db/models/fields/__init__.py(138):         self.name = name
0.56 /testbed/django/db/models/fields/__init__.py(139):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.56 /testbed/django/db/models/fields/__init__.py(140):         self._verbose_name = verbose_name  # Store original for deconstruction
0.56 /testbed/django/db/models/fields/__init__.py(141):         self.primary_key = primary_key
0.56 /testbed/django/db/models/fields/__init__.py(142):         self.max_length, self._unique = max_length, unique
0.56 /testbed/django/db/models/fields/__init__.py(143):         self.blank, self.null = blank, null
0.56 /testbed/django/db/models/fields/__init__.py(144):         self.remote_field = rel
0.56 /testbed/django/db/models/fields/__init__.py(145):         self.is_relation = self.remote_field is not None
0.56 /testbed/django/db/models/fields/__init__.py(146):         self.default = default
0.56 /testbed/django/db/models/fields/__init__.py(147):         self.editable = editable
0.56 /testbed/django/db/models/fields/__init__.py(148):         self.serialize = serialize
0.56 /testbed/django/db/models/fields/__init__.py(149):         self.unique_for_date = unique_for_date
0.56 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_month = unique_for_month
0.56 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_year = unique_for_year
0.56 /testbed/django/db/models/fields/__init__.py(152):         if isinstance(choices, collections.abc.Iterator):
0.56 /testbed/django/db/models/fields/__init__.py(154):         self.choices = choices
0.56 /testbed/django/db/models/fields/__init__.py(155):         self.help_text = help_text
0.56 /testbed/django/db/models/fields/__init__.py(156):         self.db_index = db_index
0.56 /testbed/django/db/models/fields/__init__.py(157):         self.db_column = db_column
0.56 /testbed/django/db/models/fields/__init__.py(158):         self._db_tablespace = db_tablespace
0.56 /testbed/django/db/models/fields/__init__.py(159):         self.auto_created = auto_created
0.56 /testbed/django/db/models/fields/__init__.py(162):         if auto_created:
0.56 /testbed/django/db/models/fields/__init__.py(166):             self.creation_counter = Field.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(167):             Field.creation_counter += 1
0.56 /testbed/django/db/models/fields/__init__.py(169):         self._validators = list(validators)  # Store for deconstruction later
0.56 /testbed/django/db/models/fields/__init__.py(171):         messages = {}
0.56 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):         messages.update(error_messages or {})
0.56 /testbed/django/db/models/fields/__init__.py(175):         self._error_messages = error_messages  # Store for deconstruction later
0.56 /testbed/django/db/models/fields/__init__.py(176):         self.error_messages = messages
0.56 /testbed/django/db/models/fields/__init__.py(138):         self.name = name
0.56 /testbed/django/db/models/fields/__init__.py(139):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.56 /testbed/django/db/models/fields/__init__.py(140):         self._verbose_name = verbose_name  # Store original for deconstruction
0.56 /testbed/django/db/models/fields/__init__.py(141):         self.primary_key = primary_key
0.56 /testbed/django/db/models/fields/__init__.py(142):         self.max_length, self._unique = max_length, unique
0.56 /testbed/django/db/models/fields/__init__.py(143):         self.blank, self.null = blank, null
0.56 /testbed/django/db/models/fields/__init__.py(144):         self.remote_field = rel
0.56 /testbed/django/db/models/fields/__init__.py(145):         self.is_relation = self.remote_field is not None
0.56 /testbed/django/db/models/fields/__init__.py(146):         self.default = default
0.56 /testbed/django/db/models/fields/__init__.py(147):         self.editable = editable
0.56 /testbed/django/db/models/fields/__init__.py(148):         self.serialize = serialize
0.56 /testbed/django/db/models/fields/__init__.py(149):         self.unique_for_date = unique_for_date
0.56 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_month = unique_for_month
0.56 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_year = unique_for_year
0.56 /testbed/django/db/models/fields/__init__.py(152):         if isinstance(choices, collections.abc.Iterator):
0.56 /testbed/django/db/models/fields/__init__.py(154):         self.choices = choices
0.56 /testbed/django/db/models/fields/__init__.py(155):         self.help_text = help_text
0.56 /testbed/django/db/models/fields/__init__.py(156):         self.db_index = db_index
0.56 /testbed/django/db/models/fields/__init__.py(157):         self.db_column = db_column
0.56 /testbed/django/db/models/fields/__init__.py(158):         self._db_tablespace = db_tablespace
0.56 /testbed/django/db/models/fields/__init__.py(159):         self.auto_created = auto_created
0.56 /testbed/django/db/models/fields/__init__.py(162):         if auto_created:
0.56 /testbed/django/db/models/fields/__init__.py(166):             self.creation_counter = Field.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(167):             Field.creation_counter += 1
0.56 /testbed/django/db/models/fields/__init__.py(169):         self._validators = list(validators)  # Store for deconstruction later
0.56 /testbed/django/db/models/fields/__init__.py(171):         messages = {}
0.56 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):         messages.update(error_messages or {})
0.56 /testbed/django/db/models/fields/__init__.py(175):         self._error_messages = error_messages  # Store for deconstruction later
0.56 /testbed/django/db/models/fields/__init__.py(176):         self.error_messages = messages
0.56 /testbed/django/db/models/fields/__init__.py(138):         self.name = name
0.56 /testbed/django/db/models/fields/__init__.py(139):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.56 /testbed/django/db/models/fields/__init__.py(140):         self._verbose_name = verbose_name  # Store original for deconstruction
0.56 /testbed/django/db/models/fields/__init__.py(141):         self.primary_key = primary_key
0.56 /testbed/django/db/models/fields/__init__.py(142):         self.max_length, self._unique = max_length, unique
0.56 /testbed/django/db/models/fields/__init__.py(143):         self.blank, self.null = blank, null
0.56 /testbed/django/db/models/fields/__init__.py(144):         self.remote_field = rel
0.56 /testbed/django/db/models/fields/__init__.py(145):         self.is_relation = self.remote_field is not None
0.56 /testbed/django/db/models/fields/__init__.py(146):         self.default = default
0.56 /testbed/django/db/models/fields/__init__.py(147):         self.editable = editable
0.56 /testbed/django/db/models/fields/__init__.py(148):         self.serialize = serialize
0.56 /testbed/django/db/models/fields/__init__.py(149):         self.unique_for_date = unique_for_date
0.56 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_month = unique_for_month
0.56 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_year = unique_for_year
0.56 /testbed/django/db/models/fields/__init__.py(152):         if isinstance(choices, collections.abc.Iterator):
0.56 /testbed/django/db/models/fields/__init__.py(154):         self.choices = choices
0.56 /testbed/django/db/models/fields/__init__.py(155):         self.help_text = help_text
0.56 /testbed/django/db/models/fields/__init__.py(156):         self.db_index = db_index
0.56 /testbed/django/db/models/fields/__init__.py(157):         self.db_column = db_column
0.56 /testbed/django/db/models/fields/__init__.py(158):         self._db_tablespace = db_tablespace
0.56 /testbed/django/db/models/fields/__init__.py(159):         self.auto_created = auto_created
0.56 /testbed/django/db/models/fields/__init__.py(162):         if auto_created:
0.56 /testbed/django/db/models/fields/__init__.py(166):             self.creation_counter = Field.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(167):             Field.creation_counter += 1
0.56 /testbed/django/db/models/fields/__init__.py(169):         self._validators = list(validators)  # Store for deconstruction later
0.56 /testbed/django/db/models/fields/__init__.py(171):         messages = {}
0.56 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):         messages.update(error_messages or {})
0.56 /testbed/django/db/models/fields/__init__.py(175):         self._error_messages = error_messages  # Store for deconstruction later
0.56 /testbed/django/db/models/fields/__init__.py(176):         self.error_messages = messages
0.56 /testbed/django/db/models/fields/__init__.py(138):         self.name = name
0.56 /testbed/django/db/models/fields/__init__.py(139):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.56 /testbed/django/db/models/fields/__init__.py(140):         self._verbose_name = verbose_name  # Store original for deconstruction
0.56 /testbed/django/db/models/fields/__init__.py(141):         self.primary_key = primary_key
0.56 /testbed/django/db/models/fields/__init__.py(142):         self.max_length, self._unique = max_length, unique
0.56 /testbed/django/db/models/fields/__init__.py(143):         self.blank, self.null = blank, null
0.56 /testbed/django/db/models/fields/__init__.py(144):         self.remote_field = rel
0.56 /testbed/django/db/models/fields/__init__.py(145):         self.is_relation = self.remote_field is not None
0.56 /testbed/django/db/models/fields/__init__.py(146):         self.default = default
0.56 /testbed/django/db/models/fields/__init__.py(147):         self.editable = editable
0.56 /testbed/django/db/models/fields/__init__.py(148):         self.serialize = serialize
0.56 /testbed/django/db/models/fields/__init__.py(149):         self.unique_for_date = unique_for_date
0.56 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_month = unique_for_month
0.56 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_year = unique_for_year
0.56 /testbed/django/db/models/fields/__init__.py(152):         if isinstance(choices, collections.abc.Iterator):
0.56 /testbed/django/db/models/fields/__init__.py(154):         self.choices = choices
0.56 /testbed/django/db/models/fields/__init__.py(155):         self.help_text = help_text
0.56 /testbed/django/db/models/fields/__init__.py(156):         self.db_index = db_index
0.56 /testbed/django/db/models/fields/__init__.py(157):         self.db_column = db_column
0.56 /testbed/django/db/models/fields/__init__.py(158):         self._db_tablespace = db_tablespace
0.56 /testbed/django/db/models/fields/__init__.py(159):         self.auto_created = auto_created
0.56 /testbed/django/db/models/fields/__init__.py(162):         if auto_created:
0.56 /testbed/django/db/models/fields/__init__.py(166):             self.creation_counter = Field.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(167):             Field.creation_counter += 1
0.56 /testbed/django/db/models/fields/__init__.py(169):         self._validators = list(validators)  # Store for deconstruction later
0.56 /testbed/django/db/models/fields/__init__.py(171):         messages = {}
0.56 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):         messages.update(error_messages or {})
0.56 /testbed/django/db/models/fields/__init__.py(175):         self._error_messages = error_messages  # Store for deconstruction later
0.56 /testbed/django/db/models/fields/__init__.py(176):         self.error_messages = messages
0.56 /testbed/django/db/models/fields/__init__.py(986):         super().__init__(*args, **kwargs)
0.56 /testbed/django/db/models/fields/__init__.py(138):         self.name = name
0.56 /testbed/django/db/models/fields/__init__.py(139):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.56 /testbed/django/db/models/fields/__init__.py(140):         self._verbose_name = verbose_name  # Store original for deconstruction
0.56 /testbed/django/db/models/fields/__init__.py(141):         self.primary_key = primary_key
0.56 /testbed/django/db/models/fields/__init__.py(142):         self.max_length, self._unique = max_length, unique
0.56 /testbed/django/db/models/fields/__init__.py(143):         self.blank, self.null = blank, null
0.56 /testbed/django/db/models/fields/__init__.py(144):         self.remote_field = rel
0.56 /testbed/django/db/models/fields/__init__.py(145):         self.is_relation = self.remote_field is not None
0.56 /testbed/django/db/models/fields/__init__.py(146):         self.default = default
0.56 /testbed/django/db/models/fields/__init__.py(147):         self.editable = editable
0.56 /testbed/django/db/models/fields/__init__.py(148):         self.serialize = serialize
0.56 /testbed/django/db/models/fields/__init__.py(149):         self.unique_for_date = unique_for_date
0.56 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_month = unique_for_month
0.56 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_year = unique_for_year
0.56 /testbed/django/db/models/fields/__init__.py(152):         if isinstance(choices, collections.abc.Iterator):
0.56 /testbed/django/db/models/fields/__init__.py(154):         self.choices = choices
0.56 /testbed/django/db/models/fields/__init__.py(155):         self.help_text = help_text
0.56 /testbed/django/db/models/fields/__init__.py(156):         self.db_index = db_index
0.56 /testbed/django/db/models/fields/__init__.py(157):         self.db_column = db_column
0.56 /testbed/django/db/models/fields/__init__.py(158):         self._db_tablespace = db_tablespace
0.56 /testbed/django/db/models/fields/__init__.py(159):         self.auto_created = auto_created
0.56 /testbed/django/db/models/fields/__init__.py(162):         if auto_created:
0.56 /testbed/django/db/models/fields/__init__.py(166):             self.creation_counter = Field.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(167):             Field.creation_counter += 1
0.56 /testbed/django/db/models/fields/__init__.py(169):         self._validators = list(validators)  # Store for deconstruction later
0.56 /testbed/django/db/models/fields/__init__.py(171):         messages = {}
0.56 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):         messages.update(error_messages or {})
0.56 /testbed/django/db/models/fields/__init__.py(175):         self._error_messages = error_messages  # Store for deconstruction later
0.56 /testbed/django/db/models/fields/__init__.py(176):         self.error_messages = messages
0.56 /testbed/django/db/models/fields/__init__.py(987):         self.validators.append(validators.MaxLengthValidator(self.max_length))
0.56 /testbed/django/db/models/fields/__init__.py(595):         return [*self.default_validators, *self._validators]
0.56 /testbed/django/db/models/fields/__init__.py(138):         self.name = name
0.56 /testbed/django/db/models/fields/__init__.py(139):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.56 /testbed/django/db/models/fields/__init__.py(140):         self._verbose_name = verbose_name  # Store original for deconstruction
0.56 /testbed/django/db/models/fields/__init__.py(141):         self.primary_key = primary_key
0.56 /testbed/django/db/models/fields/__init__.py(142):         self.max_length, self._unique = max_length, unique
0.56 /testbed/django/db/models/fields/__init__.py(143):         self.blank, self.null = blank, null
0.56 /testbed/django/db/models/fields/__init__.py(144):         self.remote_field = rel
0.56 /testbed/django/db/models/fields/__init__.py(145):         self.is_relation = self.remote_field is not None
0.56 /testbed/django/db/models/fields/__init__.py(146):         self.default = default
0.56 /testbed/django/db/models/fields/__init__.py(147):         self.editable = editable
0.56 /testbed/django/db/models/fields/__init__.py(148):         self.serialize = serialize
0.56 /testbed/django/db/models/fields/__init__.py(149):         self.unique_for_date = unique_for_date
0.56 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_month = unique_for_month
0.56 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_year = unique_for_year
0.56 /testbed/django/db/models/fields/__init__.py(152):         if isinstance(choices, collections.abc.Iterator):
0.56 /testbed/django/db/models/fields/__init__.py(154):         self.choices = choices
0.56 /testbed/django/db/models/fields/__init__.py(155):         self.help_text = help_text
0.56 /testbed/django/db/models/fields/__init__.py(156):         self.db_index = db_index
0.56 /testbed/django/db/models/fields/__init__.py(157):         self.db_column = db_column
0.56 /testbed/django/db/models/fields/__init__.py(158):         self._db_tablespace = db_tablespace
0.56 /testbed/django/db/models/fields/__init__.py(159):         self.auto_created = auto_created
0.56 /testbed/django/db/models/fields/__init__.py(162):         if auto_created:
0.56 /testbed/django/db/models/fields/__init__.py(166):             self.creation_counter = Field.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(167):             Field.creation_counter += 1
0.56 /testbed/django/db/models/fields/__init__.py(169):         self._validators = list(validators)  # Store for deconstruction later
0.56 /testbed/django/db/models/fields/__init__.py(171):         messages = {}
0.56 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):         messages.update(error_messages or {})
0.56 /testbed/django/db/models/fields/__init__.py(175):         self._error_messages = error_messages  # Store for deconstruction later
0.56 /testbed/django/db/models/fields/__init__.py(176):         self.error_messages = messages
0.56 /testbed/django/db/models/fields/__init__.py(138):         self.name = name
0.56 /testbed/django/db/models/fields/__init__.py(139):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.56 /testbed/django/db/models/fields/__init__.py(140):         self._verbose_name = verbose_name  # Store original for deconstruction
0.56 /testbed/django/db/models/fields/__init__.py(141):         self.primary_key = primary_key
0.56 /testbed/django/db/models/fields/__init__.py(142):         self.max_length, self._unique = max_length, unique
0.56 /testbed/django/db/models/fields/__init__.py(143):         self.blank, self.null = blank, null
0.56 /testbed/django/db/models/fields/__init__.py(144):         self.remote_field = rel
0.56 /testbed/django/db/models/fields/__init__.py(145):         self.is_relation = self.remote_field is not None
0.56 /testbed/django/db/models/fields/__init__.py(146):         self.default = default
0.56 /testbed/django/db/models/fields/__init__.py(147):         self.editable = editable
0.56 /testbed/django/db/models/fields/__init__.py(148):         self.serialize = serialize
0.56 /testbed/django/db/models/fields/__init__.py(149):         self.unique_for_date = unique_for_date
0.56 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_month = unique_for_month
0.56 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_year = unique_for_year
0.56 /testbed/django/db/models/fields/__init__.py(152):         if isinstance(choices, collections.abc.Iterator):
0.56 /testbed/django/db/models/fields/__init__.py(154):         self.choices = choices
0.56 /testbed/django/db/models/fields/__init__.py(155):         self.help_text = help_text
0.56 /testbed/django/db/models/fields/__init__.py(156):         self.db_index = db_index
0.56 /testbed/django/db/models/fields/__init__.py(157):         self.db_column = db_column
0.56 /testbed/django/db/models/fields/__init__.py(158):         self._db_tablespace = db_tablespace
0.56 /testbed/django/db/models/fields/__init__.py(159):         self.auto_created = auto_created
0.56 /testbed/django/db/models/fields/__init__.py(162):         if auto_created:
0.56 /testbed/django/db/models/fields/__init__.py(166):             self.creation_counter = Field.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(167):             Field.creation_counter += 1
0.56 /testbed/django/db/models/fields/__init__.py(169):         self._validators = list(validators)  # Store for deconstruction later
0.56 /testbed/django/db/models/fields/__init__.py(171):         messages = {}
0.56 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):         messages.update(error_messages or {})
0.56 /testbed/django/db/models/fields/__init__.py(175):         self._error_messages = error_messages  # Store for deconstruction later
0.56 /testbed/django/db/models/fields/__init__.py(176):         self.error_messages = messages
0.56 /testbed/django/db/models/fields/__init__.py(1204):         super().contribute_to_class(cls, name, **kwargs)
0.56 /testbed/django/db/models/fields/__init__.py(762):         self.set_attributes_from_name(name)
0.56 /testbed/django/db/models/fields/__init__.py(749):         self.name = self.name or name
0.56 /testbed/django/db/models/fields/__init__.py(750):         self.attname, self.column = self.get_attname_column()
0.56 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.56 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.56 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.56 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.56 /testbed/django/db/models/fields/__init__.py(751):         self.concrete = self.column is not None
0.56 /testbed/django/db/models/fields/__init__.py(752):         if self.verbose_name is None and self.name:
0.56 /testbed/django/db/models/fields/__init__.py(763):         self.model = cls
0.56 /testbed/django/db/models/fields/__init__.py(764):         cls._meta.add_field(self, private=private_only)
0.56 /testbed/django/db/models/fields/__init__.py(765):         if self.column:
0.56 /testbed/django/db/models/fields/__init__.py(769):             if not getattr(cls, self.attname, None):
0.56 /testbed/django/db/models/fields/__init__.py(770):                 setattr(cls, self.attname, self.descriptor_class(self))
0.56 /testbed/django/db/models/fields/__init__.py(771):         if self.choices is not None:
0.56 /testbed/django/db/models/fields/__init__.py(1205):         if not self.null:
0.56 /testbed/django/db/models/fields/__init__.py(1206):             setattr(
0.56 /testbed/django/db/models/fields/__init__.py(1207):                 cls, 'get_next_by_%s' % self.name,
0.56 /testbed/django/db/models/fields/__init__.py(1208):                 partialmethod(cls._get_next_or_previous_by_FIELD, field=self, is_next=True)
0.56 /testbed/django/db/models/fields/__init__.py(1210):             setattr(
0.56 /testbed/django/db/models/fields/__init__.py(1211):                 cls, 'get_previous_by_%s' % self.name,
0.56 /testbed/django/db/models/fields/__init__.py(1212):                 partialmethod(cls._get_next_or_previous_by_FIELD, field=self, is_next=False)
0.56 /testbed/django/db/models/fields/__init__.py(762):         self.set_attributes_from_name(name)
0.56 /testbed/django/db/models/fields/__init__.py(749):         self.name = self.name or name
0.56 /testbed/django/db/models/fields/__init__.py(750):         self.attname, self.column = self.get_attname_column()
0.56 /testbed/django/db/models/fields/__init__.py(751):         self.concrete = self.column is not None
0.56 /testbed/django/db/models/fields/__init__.py(752):         if self.verbose_name is None and self.name:
0.56 /testbed/django/db/models/fields/__init__.py(763):         self.model = cls
0.56 /testbed/django/db/models/fields/__init__.py(764):         cls._meta.add_field(self, private=private_only)
0.56 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.56 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(765):         if self.column:
0.56 /testbed/django/db/models/fields/__init__.py(769):             if not getattr(cls, self.attname, None):
0.56 /testbed/django/db/models/fields/__init__.py(770):                 setattr(cls, self.attname, self.descriptor_class(self))
0.56 /testbed/django/db/models/fields/__init__.py(771):         if self.choices is not None:
0.56 /testbed/django/db/models/fields/__init__.py(762):         self.set_attributes_from_name(name)
0.56 /testbed/django/db/models/fields/__init__.py(749):         self.name = self.name or name
0.56 /testbed/django/db/models/fields/__init__.py(750):         self.attname, self.column = self.get_attname_column()
0.56 /testbed/django/db/models/fields/__init__.py(751):         self.concrete = self.column is not None
0.56 /testbed/django/db/models/fields/__init__.py(752):         if self.verbose_name is None and self.name:
0.56 /testbed/django/db/models/fields/__init__.py(763):         self.model = cls
0.56 /testbed/django/db/models/fields/__init__.py(764):         cls._meta.add_field(self, private=private_only)
0.56 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.56 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(765):         if self.column:
0.56 /testbed/django/db/models/fields/__init__.py(769):             if not getattr(cls, self.attname, None):
0.56 /testbed/django/db/models/fields/__init__.py(770):                 setattr(cls, self.attname, self.descriptor_class(self))
0.56 /testbed/django/db/models/fields/__init__.py(771):         if self.choices is not None:
0.56 /testbed/django/db/models/fields/__init__.py(762):         self.set_attributes_from_name(name)
0.56 /testbed/django/db/models/fields/__init__.py(749):         self.name = self.name or name
0.56 /testbed/django/db/models/fields/__init__.py(750):         self.attname, self.column = self.get_attname_column()
0.56 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.56 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.56 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.56 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.56 /testbed/django/db/models/fields/__init__.py(751):         self.concrete = self.column is not None
0.56 /testbed/django/db/models/fields/__init__.py(752):         if self.verbose_name is None and self.name:
0.56 /testbed/django/db/models/fields/__init__.py(763):         self.model = cls
0.56 /testbed/django/db/models/fields/__init__.py(764):         cls._meta.add_field(self, private=private_only)
0.56 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.56 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.56 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(765):         if self.column:
0.56 /testbed/django/db/models/fields/__init__.py(769):             if not getattr(cls, self.attname, None):
0.56 /testbed/django/db/models/fields/__init__.py(770):                 setattr(cls, self.attname, self.descriptor_class(self))
0.56 /testbed/django/db/models/fields/__init__.py(771):         if self.choices is not None:
0.56 /testbed/django/db/models/fields/__init__.py(762):         self.set_attributes_from_name(name)
0.56 /testbed/django/db/models/fields/__init__.py(749):         self.name = self.name or name
0.56 /testbed/django/db/models/fields/__init__.py(750):         self.attname, self.column = self.get_attname_column()
0.56 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.56 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.56 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.56 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.56 /testbed/django/db/models/fields/__init__.py(751):         self.concrete = self.column is not None
0.56 /testbed/django/db/models/fields/__init__.py(752):         if self.verbose_name is None and self.name:
0.56 /testbed/django/db/models/fields/__init__.py(763):         self.model = cls
0.56 /testbed/django/db/models/fields/__init__.py(764):         cls._meta.add_field(self, private=private_only)
0.56 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.56 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.56 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(765):         if self.column:
0.56 /testbed/django/db/models/fields/__init__.py(769):             if not getattr(cls, self.attname, None):
0.56 /testbed/django/db/models/fields/__init__.py(770):                 setattr(cls, self.attname, self.descriptor_class(self))
0.56 /testbed/django/db/models/fields/__init__.py(771):         if self.choices is not None:
0.56 /testbed/django/db/models/fields/__init__.py(762):         self.set_attributes_from_name(name)
0.56 /testbed/django/db/models/fields/__init__.py(749):         self.name = self.name or name
0.56 /testbed/django/db/models/fields/__init__.py(750):         self.attname, self.column = self.get_attname_column()
0.56 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.56 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.56 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.56 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.56 /testbed/django/db/models/fields/__init__.py(751):         self.concrete = self.column is not None
0.56 /testbed/django/db/models/fields/__init__.py(752):         if self.verbose_name is None and self.name:
0.56 /testbed/django/db/models/fields/__init__.py(763):         self.model = cls
0.56 /testbed/django/db/models/fields/__init__.py(764):         cls._meta.add_field(self, private=private_only)
0.56 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.56 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.56 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(765):         if self.column:
0.56 /testbed/django/db/models/fields/__init__.py(769):             if not getattr(cls, self.attname, None):
0.56 /testbed/django/db/models/fields/__init__.py(770):                 setattr(cls, self.attname, self.descriptor_class(self))
0.56 /testbed/django/db/models/fields/__init__.py(771):         if self.choices is not None:
0.56 /testbed/django/db/models/fields/__init__.py(776):             if 'get_%s_display' % self.name not in cls.__dict__:
0.56 /testbed/django/db/models/fields/__init__.py(777):                 setattr(
0.56 /testbed/django/db/models/fields/__init__.py(778):                     cls,
0.56 /testbed/django/db/models/fields/__init__.py(779):                     'get_%s_display' % self.name,
0.56 /testbed/django/db/models/fields/__init__.py(780):                     partialmethod(cls._get_FIELD_display, field=self),
0.56 /testbed/django/db/models/fields/__init__.py(762):         self.set_attributes_from_name(name)
0.56 /testbed/django/db/models/fields/__init__.py(749):         self.name = self.name or name
0.56 /testbed/django/db/models/fields/__init__.py(750):         self.attname, self.column = self.get_attname_column()
0.56 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.56 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.56 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.56 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.56 /testbed/django/db/models/fields/__init__.py(751):         self.concrete = self.column is not None
0.56 /testbed/django/db/models/fields/__init__.py(752):         if self.verbose_name is None and self.name:
0.56 /testbed/django/db/models/fields/__init__.py(763):         self.model = cls
0.56 /testbed/django/db/models/fields/__init__.py(764):         cls._meta.add_field(self, private=private_only)
0.56 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.56 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.56 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(765):         if self.column:
0.56 /testbed/django/db/models/fields/__init__.py(769):             if not getattr(cls, self.attname, None):
0.56 /testbed/django/db/models/fields/__init__.py(770):                 setattr(cls, self.attname, self.descriptor_class(self))
0.56 /testbed/django/db/models/fields/__init__.py(771):         if self.choices is not None:
0.56 /testbed/django/db/models/fields/__init__.py(2356):         kwargs['blank'] = True
0.56 /testbed/django/db/models/fields/__init__.py(2357):         super().__init__(*args, **kwargs)
0.56 /testbed/django/db/models/fields/__init__.py(138):         self.name = name
0.56 /testbed/django/db/models/fields/__init__.py(139):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.56 /testbed/django/db/models/fields/__init__.py(140):         self._verbose_name = verbose_name  # Store original for deconstruction
0.56 /testbed/django/db/models/fields/__init__.py(141):         self.primary_key = primary_key
0.56 /testbed/django/db/models/fields/__init__.py(142):         self.max_length, self._unique = max_length, unique
0.56 /testbed/django/db/models/fields/__init__.py(143):         self.blank, self.null = blank, null
0.56 /testbed/django/db/models/fields/__init__.py(144):         self.remote_field = rel
0.56 /testbed/django/db/models/fields/__init__.py(145):         self.is_relation = self.remote_field is not None
0.56 /testbed/django/db/models/fields/__init__.py(146):         self.default = default
0.56 /testbed/django/db/models/fields/__init__.py(147):         self.editable = editable
0.56 /testbed/django/db/models/fields/__init__.py(148):         self.serialize = serialize
0.56 /testbed/django/db/models/fields/__init__.py(149):         self.unique_for_date = unique_for_date
0.56 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_month = unique_for_month
0.56 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_year = unique_for_year
0.56 /testbed/django/db/models/fields/__init__.py(152):         if isinstance(choices, collections.abc.Iterator):
0.56 /testbed/django/db/models/fields/__init__.py(154):         self.choices = choices
0.56 /testbed/django/db/models/fields/__init__.py(155):         self.help_text = help_text
0.56 /testbed/django/db/models/fields/__init__.py(156):         self.db_index = db_index
0.56 /testbed/django/db/models/fields/__init__.py(157):         self.db_column = db_column
0.56 /testbed/django/db/models/fields/__init__.py(158):         self._db_tablespace = db_tablespace
0.56 /testbed/django/db/models/fields/__init__.py(159):         self.auto_created = auto_created
0.56 /testbed/django/db/models/fields/__init__.py(162):         if auto_created:
0.56 /testbed/django/db/models/fields/__init__.py(163):             self.creation_counter = Field.auto_creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(164):             Field.auto_creation_counter -= 1
0.56 /testbed/django/db/models/fields/__init__.py(169):         self._validators = list(validators)  # Store for deconstruction later
0.56 /testbed/django/db/models/fields/__init__.py(171):         messages = {}
0.56 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.56 /testbed/django/db/models/fields/__init__.py(174):         messages.update(error_messages or {})
0.56 /testbed/django/db/models/fields/__init__.py(175):         self._error_messages = error_messages  # Store for deconstruction later
0.56 /testbed/django/db/models/fields/__init__.py(176):         self.error_messages = messages
0.56 /testbed/django/db/models/fields/__init__.py(2393):         assert not cls._meta.auto_field, (
0.56 /testbed/django/db/models/fields/__init__.py(2397):         super().contribute_to_class(cls, name, **kwargs)
0.56 /testbed/django/db/models/fields/__init__.py(762):         self.set_attributes_from_name(name)
0.56 /testbed/django/db/models/fields/__init__.py(749):         self.name = self.name or name
0.56 /testbed/django/db/models/fields/__init__.py(750):         self.attname, self.column = self.get_attname_column()
0.56 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.56 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.56 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.56 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.56 /testbed/django/db/models/fields/__init__.py(751):         self.concrete = self.column is not None
0.56 /testbed/django/db/models/fields/__init__.py(752):         if self.verbose_name is None and self.name:
0.56 /testbed/django/db/models/fields/__init__.py(763):         self.model = cls
0.56 /testbed/django/db/models/fields/__init__.py(764):         cls._meta.add_field(self, private=private_only)
0.56 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.56 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.56 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(524):         if isinstance(other, Field):
0.56 /testbed/django/db/models/fields/__init__.py(525):             return self.creation_counter < other.creation_counter
0.56 /testbed/django/db/models/fields/__init__.py(765):         if self.column:
0.56 /testbed/django/db/models/fields/__init__.py(769):             if not getattr(cls, self.attname, None):
0.56 /testbed/django/db/models/fields/__init__.py(770):                 setattr(cls, self.attname, self.descriptor_class(self))
0.56 /testbed/django/db/models/fields/__init__.py(771):         if self.choices is not None:
0.56 /testbed/django/db/models/fields/__init__.py(2398):         cls._meta.auto_field = self
Skipping setup of unused database(s): default, other.
0.57 /testbed/django/db/models/fields/__init__.py(734):         return self._unique or self.primary_key
0.57 /testbed/django/db/models/fields/__init__.py(831):         return self._get_default()
0.57 /testbed/django/db/models/fields/__init__.py(835):         if self.has_default():
0.57 /testbed/django/db/models/fields/__init__.py(827):         return self.default is not NOT_PROVIDED
0.57 /testbed/django/db/models/fields/__init__.py(840):         if not self.empty_strings_allowed or self.null and not connection.features.interprets_empty_strings_as_nulls:
0.57 /testbed/django/db/models/fields/__init__.py(841):             return return_None
0.57 /testbed/django/db/models/fields/__init__.py(81):     return None
0.57 /testbed/django/db/models/fields/__init__.py(831):         return self._get_default()
0.57 /testbed/django/db/models/fields/__init__.py(835):         if self.has_default():
0.57 /testbed/django/db/models/fields/__init__.py(827):         return self.default is not NOT_PROVIDED
0.57 /testbed/django/db/models/fields/__init__.py(840):         if not self.empty_strings_allowed or self.null and not connection.features.interprets_empty_strings_as_nulls:
0.57 /testbed/django/db/models/fields/__init__.py(842):         return str  # return empty string
0.57 /testbed/django/db/models/fields/__init__.py(831):         return self._get_default()
0.57 /testbed/django/db/models/fields/__init__.py(835):         if self.has_default():
0.57 /testbed/django/db/models/fields/__init__.py(827):         return self.default is not NOT_PROVIDED
0.57 /testbed/django/db/models/fields/__init__.py(840):         if not self.empty_strings_allowed or self.null and not connection.features.interprets_empty_strings_as_nulls:
0.57 /testbed/django/db/models/fields/__init__.py(841):             return return_None
0.57 /testbed/django/db/models/fields/__init__.py(81):     return None
0.57 /testbed/django/db/models/fields/__init__.py(831):         return self._get_default()
0.57 /testbed/django/db/models/fields/__init__.py(835):         if self.has_default():
0.57 /testbed/django/db/models/fields/__init__.py(827):         return self.default is not NOT_PROVIDED
0.57 /testbed/django/db/models/fields/__init__.py(836):             if callable(self.default):
0.57 /testbed/django/db/models/fields/__init__.py(838):             return lambda: self.default
0.57 /testbed/django/db/models/fields/__init__.py(838):             return lambda: self.default
0.57 /testbed/django/db/models/fields/__init__.py(831):         return self._get_default()
0.57 /testbed/django/db/models/fields/__init__.py(835):         if self.has_default():
0.57 /testbed/django/db/models/fields/__init__.py(827):         return self.default is not NOT_PROVIDED
0.57 /testbed/django/db/models/fields/__init__.py(840):         if not self.empty_strings_allowed or self.null and not connection.features.interprets_empty_strings_as_nulls:
0.57 /testbed/django/db/models/fields/__init__.py(842):         return str  # return empty string
0.57 /testbed/django/db/models/fields/__init__.py(831):         return self._get_default()
0.57 /testbed/django/db/models/fields/__init__.py(835):         if self.has_default():
0.57 /testbed/django/db/models/fields/__init__.py(827):         return self.default is not NOT_PROVIDED
0.57 /testbed/django/db/models/fields/__init__.py(840):         if not self.empty_strings_allowed or self.null and not connection.features.interprets_empty_strings_as_nulls:
0.57 /testbed/django/db/models/fields/__init__.py(842):         return str  # return empty string
0.57 /testbed/django/db/models/fields/__init__.py(831):         return self._get_default()
0.57 /testbed/django/db/models/fields/__init__.py(835):         if self.has_default():
0.57 /testbed/django/db/models/fields/__init__.py(827):         return self.default is not NOT_PROVIDED
0.57 /testbed/django/db/models/fields/__init__.py(840):         if not self.empty_strings_allowed or self.null and not connection.features.interprets_empty_strings_as_nulls:
0.57 /testbed/django/db/models/fields/__init__.py(842):         return str  # return empty string
0.57 /testbed/django/db/models/fields/__init__.py(831):         return self._get_default()
0.57 /testbed/django/db/models/fields/__init__.py(835):         if self.has_default():
0.57 /testbed/django/db/models/fields/__init__.py(827):         return self.default is not NOT_PROVIDED
0.57 /testbed/django/db/models/fields/__init__.py(840):         if not self.empty_strings_allowed or self.null and not connection.features.interprets_empty_strings_as_nulls:
0.57 /testbed/django/db/models/fields/__init__.py(842):         return str  # return empty string
0.57 /testbed/django/db/models/fields/__init__.py(831):         return self._get_default()
0.57 /testbed/django/db/models/fields/__init__.py(835):         if self.has_default():
0.57 /testbed/django/db/models/fields/__init__.py(827):         return self.default is not NOT_PROVIDED
0.57 /testbed/django/db/models/fields/__init__.py(836):             if callable(self.default):
0.57 /testbed/django/db/models/fields/__init__.py(838):             return lambda: self.default
0.57 /testbed/django/db/models/fields/__init__.py(838):             return lambda: self.default
0.57 /testbed/django/db/models/fields/__init__.py(831):         return self._get_default()
0.57 /testbed/django/db/models/fields/__init__.py(835):         if self.has_default():
0.57 /testbed/django/db/models/fields/__init__.py(827):         return self.default is not NOT_PROVIDED
0.57 /testbed/django/db/models/fields/__init__.py(836):             if callable(self.default):
0.57 /testbed/django/db/models/fields/__init__.py(838):             return lambda: self.default
0.57 /testbed/django/db/models/fields/__init__.py(838):             return lambda: self.default
0.57 /testbed/django/db/models/fields/__init__.py(831):         return self._get_default()
0.57 /testbed/django/db/models/fields/__init__.py(835):         if self.has_default():
0.57 /testbed/django/db/models/fields/__init__.py(827):         return self.default is not NOT_PROVIDED
0.57 /testbed/django/db/models/fields/__init__.py(836):             if callable(self.default):
0.57 /testbed/django/db/models/fields/__init__.py(837):                 return self.default
0.57 /testbed/django/db/models/fields/__init__.py(831):         return self._get_default()
0.57 /testbed/django/db/models/fields/__init__.py(81):     return None
0.57 /testbed/django/db/models/fields/__init__.py(831):         return self._get_default()
0.57 /testbed/django/db/models/fields/__init__.py(831):         return self._get_default()
0.57 /testbed/django/db/models/fields/__init__.py(81):     return None
0.57 /testbed/django/db/models/fields/__init__.py(831):         return self._get_default()
0.57 /testbed/django/db/models/fields/__init__.py(838):             return lambda: self.default
0.57 /testbed/django/db/models/fields/__init__.py(831):         return self._get_default()
0.57 /testbed/django/db/models/fields/__init__.py(831):         return self._get_default()
0.57 /testbed/django/db/models/fields/__init__.py(831):         return self._get_default()
0.57 /testbed/django/db/models/fields/__init__.py(831):         return self._get_default()
0.57 /testbed/django/db/models/fields/__init__.py(831):         return self._get_default()
0.57 /testbed/django/db/models/fields/__init__.py(838):             return lambda: self.default
0.57 /testbed/django/db/models/fields/__init__.py(831):         return self._get_default()
0.57 /testbed/django/db/models/fields/__init__.py(838):             return lambda: self.default
0.57 /testbed/django/db/models/fields/__init__.py(831):         return self._get_default()
0.59 /testbed/django/db/models/fields/__init__.py(2361):             *super().check(**kwargs),
0.59 /testbed/django/db/models/fields/__init__.py(1724):             *super().check(**kwargs),
0.59 /testbed/django/db/models/fields/__init__.py(199):             *self._check_field_name(),
0.59 /testbed/django/db/models/fields/__init__.py(213):         if self.name.endswith('_'):
0.59 /testbed/django/db/models/fields/__init__.py(221):         elif LOOKUP_SEP in self.name:
0.59 /testbed/django/db/models/fields/__init__.py(229):         elif self.name == 'pk':
0.59 /testbed/django/db/models/fields/__init__.py(238):             return []
0.59 /testbed/django/db/models/fields/__init__.py(200):             *self._check_choices(),
0.59 /testbed/django/db/models/fields/__init__.py(245):         if not self.choices:
0.59 /testbed/django/db/models/fields/__init__.py(246):             return []
0.59 /testbed/django/db/models/fields/__init__.py(201):             *self._check_db_index(),
0.59 /testbed/django/db/models/fields/__init__.py(309):         if self.db_index not in (None, True, False):
0.59 /testbed/django/db/models/fields/__init__.py(318):             return []
0.59 /testbed/django/db/models/fields/__init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.59 /testbed/django/db/models/fields/__init__.py(321):         if (self.primary_key and self.null and
0.59 /testbed/django/db/models/fields/__init__.py(336):             return []
0.59 /testbed/django/db/models/fields/__init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.59 /testbed/django/db/models/fields/__init__.py(339):         if databases is None:
0.59 /testbed/django/db/models/fields/__init__.py(341):         app_label = self.model._meta.app_label
0.59 /testbed/django/db/models/fields/__init__.py(342):         errors = []
0.59 /testbed/django/db/models/fields/__init__.py(343):         for alias in databases:
0.59 /testbed/django/db/models/fields/__init__.py(346):         return errors
0.59 /testbed/django/db/models/fields/__init__.py(204):             *self._check_validators(),
0.59 /testbed/django/db/models/fields/__init__.py(349):         errors = []
0.59 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.59 /testbed/django/db/models/fields/__init__.py(1744):         validators_ = super().validators
0.59 /testbed/django/db/models/fields/__init__.py(595):         return [*self.default_validators, *self._validators]
0.59 /testbed/django/db/models/fields/__init__.py(1745):         internal_type = self.get_internal_type()
0.59 /testbed/django/db/models/fields/__init__.py(2435):         return 'AutoField'
0.59 /testbed/django/db/models/fields/__init__.py(1746):         min_value, max_value = connection.ops.integer_field_range(internal_type)
0.59 /testbed/django/db/models/fields/__init__.py(1747):         if min_value is not None and not any(
0.59 /testbed/django/db/models/fields/__init__.py(1757):         if max_value is not None and not any(
0.59 /testbed/django/db/models/fields/__init__.py(1767):         return validators_
0.59 /testbed/django/db/models/fields/__init__.py(365):         return errors
0.59 /testbed/django/db/models/fields/__init__.py(205):             *self._check_deprecation_details(),
0.59 /testbed/django/db/models/fields/__init__.py(368):         if self.system_check_removed_details is not None:
0.59 /testbed/django/db/models/fields/__init__.py(381):         elif self.system_check_deprecated_details is not None:
0.59 /testbed/django/db/models/fields/__init__.py(393):         return []
0.59 /testbed/django/db/models/fields/__init__.py(1725):             *self._check_max_length_warning(),
0.59 /testbed/django/db/models/fields/__init__.py(1729):         if self.max_length is not None:
0.59 /testbed/django/db/models/fields/__init__.py(1738):         return []
0.59 /testbed/django/db/models/fields/__init__.py(2362):             *self._check_primary_key(),
0.59 /testbed/django/db/models/fields/__init__.py(2366):         if not self.primary_key:
0.59 /testbed/django/db/models/fields/__init__.py(2375):             return []
0.59 /testbed/django/db/models/fields/__init__.py(991):             *super().check(**kwargs),
0.59 /testbed/django/db/models/fields/__init__.py(199):             *self._check_field_name(),
0.59 /testbed/django/db/models/fields/__init__.py(213):         if self.name.endswith('_'):
0.59 /testbed/django/db/models/fields/__init__.py(221):         elif LOOKUP_SEP in self.name:
0.59 /testbed/django/db/models/fields/__init__.py(229):         elif self.name == 'pk':
0.59 /testbed/django/db/models/fields/__init__.py(238):             return []
0.59 /testbed/django/db/models/fields/__init__.py(200):             *self._check_choices(),
0.59 /testbed/django/db/models/fields/__init__.py(245):         if not self.choices:
0.59 /testbed/django/db/models/fields/__init__.py(246):             return []
0.59 /testbed/django/db/models/fields/__init__.py(201):             *self._check_db_index(),
0.59 /testbed/django/db/models/fields/__init__.py(309):         if self.db_index not in (None, True, False):
0.59 /testbed/django/db/models/fields/__init__.py(318):             return []
0.59 /testbed/django/db/models/fields/__init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.59 /testbed/django/db/models/fields/__init__.py(321):         if (self.primary_key and self.null and
0.59 /testbed/django/db/models/fields/__init__.py(336):             return []
0.59 /testbed/django/db/models/fields/__init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.59 /testbed/django/db/models/fields/__init__.py(339):         if databases is None:
0.59 /testbed/django/db/models/fields/__init__.py(341):         app_label = self.model._meta.app_label
0.59 /testbed/django/db/models/fields/__init__.py(342):         errors = []
0.59 /testbed/django/db/models/fields/__init__.py(343):         for alias in databases:
0.59 /testbed/django/db/models/fields/__init__.py(346):         return errors
0.59 /testbed/django/db/models/fields/__init__.py(204):             *self._check_validators(),
0.59 /testbed/django/db/models/fields/__init__.py(349):         errors = []
0.59 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.59 /testbed/django/db/models/fields/__init__.py(351):             if not callable(validator):
0.59 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.59 /testbed/django/db/models/fields/__init__.py(365):         return errors
0.59 /testbed/django/db/models/fields/__init__.py(205):             *self._check_deprecation_details(),
0.59 /testbed/django/db/models/fields/__init__.py(368):         if self.system_check_removed_details is not None:
0.59 /testbed/django/db/models/fields/__init__.py(381):         elif self.system_check_deprecated_details is not None:
0.59 /testbed/django/db/models/fields/__init__.py(393):         return []
0.59 /testbed/django/db/models/fields/__init__.py(992):             *self._check_max_length_attribute(**kwargs),
0.59 /testbed/django/db/models/fields/__init__.py(996):         if self.max_length is None:
0.59 /testbed/django/db/models/fields/__init__.py(1004):         elif (not isinstance(self.max_length, int) or isinstance(self.max_length, bool) or
0.59 /testbed/django/db/models/fields/__init__.py(1005):                 self.max_length <= 0):
0.59 /testbed/django/db/models/fields/__init__.py(1014):             return []
0.59 /testbed/django/db/models/fields/__init__.py(991):             *super().check(**kwargs),
0.59 /testbed/django/db/models/fields/__init__.py(199):             *self._check_field_name(),
0.59 /testbed/django/db/models/fields/__init__.py(213):         if self.name.endswith('_'):
0.59 /testbed/django/db/models/fields/__init__.py(221):         elif LOOKUP_SEP in self.name:
0.59 /testbed/django/db/models/fields/__init__.py(229):         elif self.name == 'pk':
0.59 /testbed/django/db/models/fields/__init__.py(238):             return []
0.59 /testbed/django/db/models/fields/__init__.py(200):             *self._check_choices(),
0.59 /testbed/django/db/models/fields/__init__.py(245):         if not self.choices:
0.59 /testbed/django/db/models/fields/__init__.py(246):             return []
0.59 /testbed/django/db/models/fields/__init__.py(201):             *self._check_db_index(),
0.59 /testbed/django/db/models/fields/__init__.py(309):         if self.db_index not in (None, True, False):
0.59 /testbed/django/db/models/fields/__init__.py(318):             return []
0.59 /testbed/django/db/models/fields/__init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.59 /testbed/django/db/models/fields/__init__.py(321):         if (self.primary_key and self.null and
0.59 /testbed/django/db/models/fields/__init__.py(336):             return []
0.59 /testbed/django/db/models/fields/__init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.59 /testbed/django/db/models/fields/__init__.py(339):         if databases is None:
0.59 /testbed/django/db/models/fields/__init__.py(341):         app_label = self.model._meta.app_label
0.59 /testbed/django/db/models/fields/__init__.py(342):         errors = []
0.59 /testbed/django/db/models/fields/__init__.py(343):         for alias in databases:
0.59 /testbed/django/db/models/fields/__init__.py(346):         return errors
0.59 /testbed/django/db/models/fields/__init__.py(204):             *self._check_validators(),
0.59 /testbed/django/db/models/fields/__init__.py(349):         errors = []
0.59 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.59 /testbed/django/db/models/fields/__init__.py(351):             if not callable(validator):
0.59 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.59 /testbed/django/db/models/fields/__init__.py(365):         return errors
0.59 /testbed/django/db/models/fields/__init__.py(205):             *self._check_deprecation_details(),
0.59 /testbed/django/db/models/fields/__init__.py(368):         if self.system_check_removed_details is not None:
0.59 /testbed/django/db/models/fields/__init__.py(381):         elif self.system_check_deprecated_details is not None:
0.59 /testbed/django/db/models/fields/__init__.py(393):         return []
0.59 /testbed/django/db/models/fields/__init__.py(992):             *self._check_max_length_attribute(**kwargs),
0.59 /testbed/django/db/models/fields/__init__.py(996):         if self.max_length is None:
0.59 /testbed/django/db/models/fields/__init__.py(1004):         elif (not isinstance(self.max_length, int) or isinstance(self.max_length, bool) or
0.59 /testbed/django/db/models/fields/__init__.py(1005):                 self.max_length <= 0):
0.59 /testbed/django/db/models/fields/__init__.py(1014):             return []
0.59 /testbed/django/db/models/fields/__init__.py(518):         if isinstance(other, Field):
0.59 /testbed/django/db/models/fields/__init__.py(519):             return self.creation_counter == other.creation_counter
0.59 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.59 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.59 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.59 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.59 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.59 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.59 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.59 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.59 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.59 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.59 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.59 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.59 /testbed/django/db/models/fields/__init__.py(518):         if isinstance(other, Field):
0.59 /testbed/django/db/models/fields/__init__.py(519):             return self.creation_counter == other.creation_counter
0.59 /testbed/django/db/models/fields/__init__.py(518):         if isinstance(other, Field):
0.59 /testbed/django/db/models/fields/__init__.py(519):             return self.creation_counter == other.creation_counter
0.59 /testbed/django/db/models/fields/__init__.py(518):         if isinstance(other, Field):
0.59 /testbed/django/db/models/fields/__init__.py(519):             return self.creation_counter == other.creation_counter
0.59 /testbed/django/db/models/fields/__init__.py(2361):             *super().check(**kwargs),
0.59 /testbed/django/db/models/fields/__init__.py(1724):             *super().check(**kwargs),
0.59 /testbed/django/db/models/fields/__init__.py(199):             *self._check_field_name(),
0.59 /testbed/django/db/models/fields/__init__.py(213):         if self.name.endswith('_'):
0.59 /testbed/django/db/models/fields/__init__.py(221):         elif LOOKUP_SEP in self.name:
0.59 /testbed/django/db/models/fields/__init__.py(229):         elif self.name == 'pk':
0.59 /testbed/django/db/models/fields/__init__.py(238):             return []
0.59 /testbed/django/db/models/fields/__init__.py(200):             *self._check_choices(),
0.59 /testbed/django/db/models/fields/__init__.py(245):         if not self.choices:
0.59 /testbed/django/db/models/fields/__init__.py(246):             return []
0.59 /testbed/django/db/models/fields/__init__.py(201):             *self._check_db_index(),
0.59 /testbed/django/db/models/fields/__init__.py(309):         if self.db_index not in (None, True, False):
0.59 /testbed/django/db/models/fields/__init__.py(318):             return []
0.59 /testbed/django/db/models/fields/__init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.59 /testbed/django/db/models/fields/__init__.py(321):         if (self.primary_key and self.null and
0.59 /testbed/django/db/models/fields/__init__.py(336):             return []
0.59 /testbed/django/db/models/fields/__init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.59 /testbed/django/db/models/fields/__init__.py(339):         if databases is None:
0.59 /testbed/django/db/models/fields/__init__.py(341):         app_label = self.model._meta.app_label
0.59 /testbed/django/db/models/fields/__init__.py(342):         errors = []
0.59 /testbed/django/db/models/fields/__init__.py(343):         for alias in databases:
0.59 /testbed/django/db/models/fields/__init__.py(346):         return errors
0.59 /testbed/django/db/models/fields/__init__.py(204):             *self._check_validators(),
0.59 /testbed/django/db/models/fields/__init__.py(349):         errors = []
0.59 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.59 /testbed/django/db/models/fields/__init__.py(1744):         validators_ = super().validators
0.59 /testbed/django/db/models/fields/__init__.py(595):         return [*self.default_validators, *self._validators]
0.59 /testbed/django/db/models/fields/__init__.py(1745):         internal_type = self.get_internal_type()
0.59 /testbed/django/db/models/fields/__init__.py(2435):         return 'AutoField'
0.59 /testbed/django/db/models/fields/__init__.py(1746):         min_value, max_value = connection.ops.integer_field_range(internal_type)
0.59 /testbed/django/db/models/fields/__init__.py(1747):         if min_value is not None and not any(
0.59 /testbed/django/db/models/fields/__init__.py(1757):         if max_value is not None and not any(
0.59 /testbed/django/db/models/fields/__init__.py(1767):         return validators_
0.59 /testbed/django/db/models/fields/__init__.py(365):         return errors
0.59 /testbed/django/db/models/fields/__init__.py(205):             *self._check_deprecation_details(),
0.59 /testbed/django/db/models/fields/__init__.py(368):         if self.system_check_removed_details is not None:
0.59 /testbed/django/db/models/fields/__init__.py(381):         elif self.system_check_deprecated_details is not None:
0.59 /testbed/django/db/models/fields/__init__.py(393):         return []
0.59 /testbed/django/db/models/fields/__init__.py(1725):             *self._check_max_length_warning(),
0.59 /testbed/django/db/models/fields/__init__.py(1729):         if self.max_length is not None:
0.59 /testbed/django/db/models/fields/__init__.py(1738):         return []
0.59 /testbed/django/db/models/fields/__init__.py(2362):             *self._check_primary_key(),
0.59 /testbed/django/db/models/fields/__init__.py(2366):         if not self.primary_key:
0.59 /testbed/django/db/models/fields/__init__.py(2375):             return []
0.59 /testbed/django/db/models/fields/__init__.py(991):             *super().check(**kwargs),
0.59 /testbed/django/db/models/fields/__init__.py(199):             *self._check_field_name(),
0.59 /testbed/django/db/models/fields/__init__.py(213):         if self.name.endswith('_'):
0.59 /testbed/django/db/models/fields/__init__.py(221):         elif LOOKUP_SEP in self.name:
0.59 /testbed/django/db/models/fields/__init__.py(229):         elif self.name == 'pk':
0.59 /testbed/django/db/models/fields/__init__.py(238):             return []
0.59 /testbed/django/db/models/fields/__init__.py(200):             *self._check_choices(),
0.59 /testbed/django/db/models/fields/__init__.py(245):         if not self.choices:
0.59 /testbed/django/db/models/fields/__init__.py(246):             return []
0.59 /testbed/django/db/models/fields/__init__.py(201):             *self._check_db_index(),
0.59 /testbed/django/db/models/fields/__init__.py(309):         if self.db_index not in (None, True, False):
0.59 /testbed/django/db/models/fields/__init__.py(318):             return []
0.59 /testbed/django/db/models/fields/__init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.59 /testbed/django/db/models/fields/__init__.py(321):         if (self.primary_key and self.null and
0.59 /testbed/django/db/models/fields/__init__.py(336):             return []
0.59 /testbed/django/db/models/fields/__init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.59 /testbed/django/db/models/fields/__init__.py(339):         if databases is None:
0.59 /testbed/django/db/models/fields/__init__.py(341):         app_label = self.model._meta.app_label
0.59 /testbed/django/db/models/fields/__init__.py(342):         errors = []
0.59 /testbed/django/db/models/fields/__init__.py(343):         for alias in databases:
0.59 /testbed/django/db/models/fields/__init__.py(346):         return errors
0.59 /testbed/django/db/models/fields/__init__.py(204):             *self._check_validators(),
0.59 /testbed/django/db/models/fields/__init__.py(349):         errors = []
0.59 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.59 /testbed/django/db/models/fields/__init__.py(351):             if not callable(validator):
0.59 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.59 /testbed/django/db/models/fields/__init__.py(365):         return errors
0.59 /testbed/django/db/models/fields/__init__.py(205):             *self._check_deprecation_details(),
0.59 /testbed/django/db/models/fields/__init__.py(368):         if self.system_check_removed_details is not None:
0.59 /testbed/django/db/models/fields/__init__.py(381):         elif self.system_check_deprecated_details is not None:
0.59 /testbed/django/db/models/fields/__init__.py(393):         return []
0.59 /testbed/django/db/models/fields/__init__.py(992):             *self._check_max_length_attribute(**kwargs),
0.59 /testbed/django/db/models/fields/__init__.py(996):         if self.max_length is None:
0.59 /testbed/django/db/models/fields/__init__.py(1004):         elif (not isinstance(self.max_length, int) or isinstance(self.max_length, bool) or
0.59 /testbed/django/db/models/fields/__init__.py(1005):                 self.max_length <= 0):
0.59 /testbed/django/db/models/fields/__init__.py(1014):             return []
0.59 /testbed/django/db/models/fields/__init__.py(199):             *self._check_field_name(),
0.59 /testbed/django/db/models/fields/__init__.py(213):         if self.name.endswith('_'):
0.59 /testbed/django/db/models/fields/__init__.py(221):         elif LOOKUP_SEP in self.name:
0.59 /testbed/django/db/models/fields/__init__.py(229):         elif self.name == 'pk':
0.59 /testbed/django/db/models/fields/__init__.py(238):             return []
0.59 /testbed/django/db/models/fields/__init__.py(200):             *self._check_choices(),
0.59 /testbed/django/db/models/fields/__init__.py(245):         if not self.choices:
0.59 /testbed/django/db/models/fields/__init__.py(246):             return []
0.59 /testbed/django/db/models/fields/__init__.py(201):             *self._check_db_index(),
0.59 /testbed/django/db/models/fields/__init__.py(309):         if self.db_index not in (None, True, False):
0.59 /testbed/django/db/models/fields/__init__.py(318):             return []
0.59 /testbed/django/db/models/fields/__init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.59 /testbed/django/db/models/fields/__init__.py(321):         if (self.primary_key and self.null and
0.59 /testbed/django/db/models/fields/__init__.py(336):             return []
0.59 /testbed/django/db/models/fields/__init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.59 /testbed/django/db/models/fields/__init__.py(339):         if databases is None:
0.59 /testbed/django/db/models/fields/__init__.py(341):         app_label = self.model._meta.app_label
0.59 /testbed/django/db/models/fields/__init__.py(342):         errors = []
0.59 /testbed/django/db/models/fields/__init__.py(343):         for alias in databases:
0.59 /testbed/django/db/models/fields/__init__.py(346):         return errors
0.59 /testbed/django/db/models/fields/__init__.py(204):             *self._check_validators(),
0.59 /testbed/django/db/models/fields/__init__.py(349):         errors = []
0.59 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.59 /testbed/django/db/models/fields/__init__.py(595):         return [*self.default_validators, *self._validators]
0.59 /testbed/django/db/models/fields/__init__.py(365):         return errors
0.59 /testbed/django/db/models/fields/__init__.py(205):             *self._check_deprecation_details(),
0.59 /testbed/django/db/models/fields/__init__.py(368):         if self.system_check_removed_details is not None:
0.59 /testbed/django/db/models/fields/__init__.py(381):         elif self.system_check_deprecated_details is not None:
0.59 /testbed/django/db/models/fields/__init__.py(393):         return []
0.59 /testbed/django/db/models/fields/__init__.py(734):         return self._unique or self.primary_key
0.59 /testbed/django/db/models/fields/__init__.py(734):         return self._unique or self.primary_key
0.59 /testbed/django/db/models/fields/__init__.py(734):         return self._unique or self.primary_key
0.59 /testbed/django/db/models/fields/__init__.py(734):         return self._unique or self.primary_key
0.59 /testbed/django/db/models/fields/__init__.py(991):             *super().check(**kwargs),
0.59 /testbed/django/db/models/fields/__init__.py(199):             *self._check_field_name(),
0.59 /testbed/django/db/models/fields/__init__.py(213):         if self.name.endswith('_'):
0.59 /testbed/django/db/models/fields/__init__.py(221):         elif LOOKUP_SEP in self.name:
0.59 /testbed/django/db/models/fields/__init__.py(229):         elif self.name == 'pk':
0.59 /testbed/django/db/models/fields/__init__.py(238):             return []
0.59 /testbed/django/db/models/fields/__init__.py(200):             *self._check_choices(),
0.59 /testbed/django/db/models/fields/__init__.py(245):         if not self.choices:
0.59 /testbed/django/db/models/fields/__init__.py(246):             return []
0.59 /testbed/django/db/models/fields/__init__.py(201):             *self._check_db_index(),
0.59 /testbed/django/db/models/fields/__init__.py(309):         if self.db_index not in (None, True, False):
0.59 /testbed/django/db/models/fields/__init__.py(318):             return []
0.59 /testbed/django/db/models/fields/__init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.59 /testbed/django/db/models/fields/__init__.py(321):         if (self.primary_key and self.null and
0.59 /testbed/django/db/models/fields/__init__.py(336):             return []
0.59 /testbed/django/db/models/fields/__init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.59 /testbed/django/db/models/fields/__init__.py(339):         if databases is None:
0.59 /testbed/django/db/models/fields/__init__.py(341):         app_label = self.model._meta.app_label
0.59 /testbed/django/db/models/fields/__init__.py(342):         errors = []
0.59 /testbed/django/db/models/fields/__init__.py(343):         for alias in databases:
0.59 /testbed/django/db/models/fields/__init__.py(346):         return errors
0.59 /testbed/django/db/models/fields/__init__.py(204):             *self._check_validators(),
0.59 /testbed/django/db/models/fields/__init__.py(349):         errors = []
0.59 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.59 /testbed/django/db/models/fields/__init__.py(351):             if not callable(validator):
0.59 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.59 /testbed/django/db/models/fields/__init__.py(365):         return errors
0.59 /testbed/django/db/models/fields/__init__.py(205):             *self._check_deprecation_details(),
0.59 /testbed/django/db/models/fields/__init__.py(368):         if self.system_check_removed_details is not None:
0.59 /testbed/django/db/models/fields/__init__.py(381):         elif self.system_check_deprecated_details is not None:
0.59 /testbed/django/db/models/fields/__init__.py(393):         return []
0.59 /testbed/django/db/models/fields/__init__.py(992):             *self._check_max_length_attribute(**kwargs),
0.59 /testbed/django/db/models/fields/__init__.py(996):         if self.max_length is None:
0.59 /testbed/django/db/models/fields/__init__.py(1004):         elif (not isinstance(self.max_length, int) or isinstance(self.max_length, bool) or
0.59 /testbed/django/db/models/fields/__init__.py(1005):                 self.max_length <= 0):
0.59 /testbed/django/db/models/fields/__init__.py(1014):             return []
0.59 /testbed/django/db/models/fields/__init__.py(518):         if isinstance(other, Field):
0.59 /testbed/django/db/models/fields/__init__.py(519):             return self.creation_counter == other.creation_counter
0.59 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.59 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.59 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.59 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.59 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.59 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.59 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.59 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.59 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.59 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.59 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.59 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.59 /testbed/django/db/models/fields/__init__.py(518):         if isinstance(other, Field):
0.59 /testbed/django/db/models/fields/__init__.py(519):             return self.creation_counter == other.creation_counter
0.59 /testbed/django/db/models/fields/__init__.py(518):         if isinstance(other, Field):
0.59 /testbed/django/db/models/fields/__init__.py(519):             return self.creation_counter == other.creation_counter
0.59 /testbed/django/db/models/fields/__init__.py(518):         if isinstance(other, Field):
0.59 /testbed/django/db/models/fields/__init__.py(519):             return self.creation_counter == other.creation_counter
0.59 /testbed/django/db/models/fields/__init__.py(518):         if isinstance(other, Field):
0.59 /testbed/django/db/models/fields/__init__.py(519):             return self.creation_counter == other.creation_counter
0.59 /testbed/django/db/models/fields/__init__.py(518):         if isinstance(other, Field):
0.59 /testbed/django/db/models/fields/__init__.py(519):             return self.creation_counter == other.creation_counter
0.59 /testbed/django/db/models/fields/__init__.py(2361):             *super().check(**kwargs),
0.59 /testbed/django/db/models/fields/__init__.py(1724):             *super().check(**kwargs),
0.59 /testbed/django/db/models/fields/__init__.py(199):             *self._check_field_name(),
0.59 /testbed/django/db/models/fields/__init__.py(213):         if self.name.endswith('_'):
0.59 /testbed/django/db/models/fields/__init__.py(221):         elif LOOKUP_SEP in self.name:
0.59 /testbed/django/db/models/fields/__init__.py(229):         elif self.name == 'pk':
0.59 /testbed/django/db/models/fields/__init__.py(238):             return []
0.59 /testbed/django/db/models/fields/__init__.py(200):             *self._check_choices(),
0.59 /testbed/django/db/models/fields/__init__.py(245):         if not self.choices:
0.59 /testbed/django/db/models/fields/__init__.py(246):             return []
0.59 /testbed/django/db/models/fields/__init__.py(201):             *self._check_db_index(),
0.59 /testbed/django/db/models/fields/__init__.py(309):         if self.db_index not in (None, True, False):
0.59 /testbed/django/db/models/fields/__init__.py(318):             return []
0.59 /testbed/django/db/models/fields/__init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.59 /testbed/django/db/models/fields/__init__.py(321):         if (self.primary_key and self.null and
0.59 /testbed/django/db/models/fields/__init__.py(336):             return []
0.59 /testbed/django/db/models/fields/__init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.59 /testbed/django/db/models/fields/__init__.py(339):         if databases is None:
0.59 /testbed/django/db/models/fields/__init__.py(341):         app_label = self.model._meta.app_label
0.59 /testbed/django/db/models/fields/__init__.py(342):         errors = []
0.59 /testbed/django/db/models/fields/__init__.py(343):         for alias in databases:
0.59 /testbed/django/db/models/fields/__init__.py(346):         return errors
0.59 /testbed/django/db/models/fields/__init__.py(204):             *self._check_validators(),
0.59 /testbed/django/db/models/fields/__init__.py(349):         errors = []
0.59 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.59 /testbed/django/db/models/fields/__init__.py(1744):         validators_ = super().validators
0.59 /testbed/django/db/models/fields/__init__.py(595):         return [*self.default_validators, *self._validators]
0.59 /testbed/django/db/models/fields/__init__.py(1745):         internal_type = self.get_internal_type()
0.59 /testbed/django/db/models/fields/__init__.py(2435):         return 'AutoField'
0.59 /testbed/django/db/models/fields/__init__.py(1746):         min_value, max_value = connection.ops.integer_field_range(internal_type)
0.59 /testbed/django/db/models/fields/__init__.py(1747):         if min_value is not None and not any(
0.59 /testbed/django/db/models/fields/__init__.py(1757):         if max_value is not None and not any(
0.59 /testbed/django/db/models/fields/__init__.py(1767):         return validators_
0.59 /testbed/django/db/models/fields/__init__.py(365):         return errors
0.59 /testbed/django/db/models/fields/__init__.py(205):             *self._check_deprecation_details(),
0.59 /testbed/django/db/models/fields/__init__.py(368):         if self.system_check_removed_details is not None:
0.59 /testbed/django/db/models/fields/__init__.py(381):         elif self.system_check_deprecated_details is not None:
0.59 /testbed/django/db/models/fields/__init__.py(393):         return []
0.59 /testbed/django/db/models/fields/__init__.py(1725):             *self._check_max_length_warning(),
0.59 /testbed/django/db/models/fields/__init__.py(1729):         if self.max_length is not None:
0.59 /testbed/django/db/models/fields/__init__.py(1738):         return []
0.59 /testbed/django/db/models/fields/__init__.py(2362):             *self._check_primary_key(),
0.59 /testbed/django/db/models/fields/__init__.py(2366):         if not self.primary_key:
0.59 /testbed/django/db/models/fields/__init__.py(2375):             return []
0.59 /testbed/django/db/models/fields/__init__.py(991):             *super().check(**kwargs),
0.59 /testbed/django/db/models/fields/__init__.py(199):             *self._check_field_name(),
0.59 /testbed/django/db/models/fields/__init__.py(213):         if self.name.endswith('_'):
0.59 /testbed/django/db/models/fields/__init__.py(221):         elif LOOKUP_SEP in self.name:
0.59 /testbed/django/db/models/fields/__init__.py(229):         elif self.name == 'pk':
0.59 /testbed/django/db/models/fields/__init__.py(238):             return []
0.59 /testbed/django/db/models/fields/__init__.py(200):             *self._check_choices(),
0.59 /testbed/django/db/models/fields/__init__.py(245):         if not self.choices:
0.59 /testbed/django/db/models/fields/__init__.py(246):             return []
0.59 /testbed/django/db/models/fields/__init__.py(201):             *self._check_db_index(),
0.59 /testbed/django/db/models/fields/__init__.py(309):         if self.db_index not in (None, True, False):
0.59 /testbed/django/db/models/fields/__init__.py(318):             return []
0.59 /testbed/django/db/models/fields/__init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.59 /testbed/django/db/models/fields/__init__.py(321):         if (self.primary_key and self.null and
0.59 /testbed/django/db/models/fields/__init__.py(336):             return []
0.59 /testbed/django/db/models/fields/__init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.59 /testbed/django/db/models/fields/__init__.py(339):         if databases is None:
0.59 /testbed/django/db/models/fields/__init__.py(341):         app_label = self.model._meta.app_label
0.59 /testbed/django/db/models/fields/__init__.py(342):         errors = []
0.59 /testbed/django/db/models/fields/__init__.py(343):         for alias in databases:
0.59 /testbed/django/db/models/fields/__init__.py(346):         return errors
0.59 /testbed/django/db/models/fields/__init__.py(204):             *self._check_validators(),
0.59 /testbed/django/db/models/fields/__init__.py(349):         errors = []
0.59 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.59 /testbed/django/db/models/fields/__init__.py(351):             if not callable(validator):
0.59 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.59 /testbed/django/db/models/fields/__init__.py(365):         return errors
0.59 /testbed/django/db/models/fields/__init__.py(205):             *self._check_deprecation_details(),
0.59 /testbed/django/db/models/fields/__init__.py(368):         if self.system_check_removed_details is not None:
0.59 /testbed/django/db/models/fields/__init__.py(381):         elif self.system_check_deprecated_details is not None:
0.59 /testbed/django/db/models/fields/__init__.py(393):         return []
0.59 /testbed/django/db/models/fields/__init__.py(992):             *self._check_max_length_attribute(**kwargs),
0.59 /testbed/django/db/models/fields/__init__.py(996):         if self.max_length is None:
0.59 /testbed/django/db/models/fields/__init__.py(1004):         elif (not isinstance(self.max_length, int) or isinstance(self.max_length, bool) or
0.59 /testbed/django/db/models/fields/__init__.py(1005):                 self.max_length <= 0):
0.59 /testbed/django/db/models/fields/__init__.py(1014):             return []
0.59 /testbed/django/db/models/fields/__init__.py(199):             *self._check_field_name(),
0.59 /testbed/django/db/models/fields/__init__.py(213):         if self.name.endswith('_'):
0.59 /testbed/django/db/models/fields/__init__.py(221):         elif LOOKUP_SEP in self.name:
0.59 /testbed/django/db/models/fields/__init__.py(229):         elif self.name == 'pk':
0.59 /testbed/django/db/models/fields/__init__.py(238):             return []
0.59 /testbed/django/db/models/fields/__init__.py(200):             *self._check_choices(),
0.59 /testbed/django/db/models/fields/__init__.py(245):         if not self.choices:
0.59 /testbed/django/db/models/fields/__init__.py(246):             return []
0.59 /testbed/django/db/models/fields/__init__.py(201):             *self._check_db_index(),
0.59 /testbed/django/db/models/fields/__init__.py(309):         if self.db_index not in (None, True, False):
0.59 /testbed/django/db/models/fields/__init__.py(318):             return []
0.59 /testbed/django/db/models/fields/__init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.59 /testbed/django/db/models/fields/__init__.py(321):         if (self.primary_key and self.null and
0.59 /testbed/django/db/models/fields/__init__.py(336):             return []
0.59 /testbed/django/db/models/fields/__init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.59 /testbed/django/db/models/fields/__init__.py(339):         if databases is None:
0.59 /testbed/django/db/models/fields/__init__.py(341):         app_label = self.model._meta.app_label
0.59 /testbed/django/db/models/fields/__init__.py(342):         errors = []
0.59 /testbed/django/db/models/fields/__init__.py(343):         for alias in databases:
0.59 /testbed/django/db/models/fields/__init__.py(346):         return errors
0.59 /testbed/django/db/models/fields/__init__.py(204):             *self._check_validators(),
0.59 /testbed/django/db/models/fields/__init__.py(349):         errors = []
0.59 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.59 /testbed/django/db/models/fields/__init__.py(595):         return [*self.default_validators, *self._validators]
0.59 /testbed/django/db/models/fields/__init__.py(365):         return errors
0.59 /testbed/django/db/models/fields/__init__.py(205):             *self._check_deprecation_details(),
0.59 /testbed/django/db/models/fields/__init__.py(368):         if self.system_check_removed_details is not None:
0.59 /testbed/django/db/models/fields/__init__.py(381):         elif self.system_check_deprecated_details is not None:
0.59 /testbed/django/db/models/fields/__init__.py(393):         return []
0.59 /testbed/django/db/models/fields/__init__.py(734):         return self._unique or self.primary_key
0.59 /testbed/django/db/models/fields/__init__.py(518):         if isinstance(other, Field):
0.59 /testbed/django/db/models/fields/__init__.py(519):             return self.creation_counter == other.creation_counter
0.59 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.59 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.59 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.59 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.59 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.59 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.59 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.59 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.59 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.59 /testbed/django/db/models/fields/__init__.py(2361):             *super().check(**kwargs),
0.59 /testbed/django/db/models/fields/__init__.py(1724):             *super().check(**kwargs),
0.59 /testbed/django/db/models/fields/__init__.py(199):             *self._check_field_name(),
0.59 /testbed/django/db/models/fields/__init__.py(213):         if self.name.endswith('_'):
0.59 /testbed/django/db/models/fields/__init__.py(221):         elif LOOKUP_SEP in self.name:
0.59 /testbed/django/db/models/fields/__init__.py(229):         elif self.name == 'pk':
0.59 /testbed/django/db/models/fields/__init__.py(238):             return []
0.59 /testbed/django/db/models/fields/__init__.py(200):             *self._check_choices(),
0.59 /testbed/django/db/models/fields/__init__.py(245):         if not self.choices:
0.59 /testbed/django/db/models/fields/__init__.py(246):             return []
0.59 /testbed/django/db/models/fields/__init__.py(201):             *self._check_db_index(),
0.59 /testbed/django/db/models/fields/__init__.py(309):         if self.db_index not in (None, True, False):
0.59 /testbed/django/db/models/fields/__init__.py(318):             return []
0.59 /testbed/django/db/models/fields/__init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.59 /testbed/django/db/models/fields/__init__.py(321):         if (self.primary_key and self.null and
0.59 /testbed/django/db/models/fields/__init__.py(336):             return []
0.59 /testbed/django/db/models/fields/__init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.59 /testbed/django/db/models/fields/__init__.py(339):         if databases is None:
0.59 /testbed/django/db/models/fields/__init__.py(341):         app_label = self.model._meta.app_label
0.59 /testbed/django/db/models/fields/__init__.py(342):         errors = []
0.59 /testbed/django/db/models/fields/__init__.py(343):         for alias in databases:
0.59 /testbed/django/db/models/fields/__init__.py(346):         return errors
0.59 /testbed/django/db/models/fields/__init__.py(204):             *self._check_validators(),
0.59 /testbed/django/db/models/fields/__init__.py(349):         errors = []
0.59 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.59 /testbed/django/db/models/fields/__init__.py(1744):         validators_ = super().validators
0.59 /testbed/django/db/models/fields/__init__.py(595):         return [*self.default_validators, *self._validators]
0.59 /testbed/django/db/models/fields/__init__.py(1745):         internal_type = self.get_internal_type()
0.59 /testbed/django/db/models/fields/__init__.py(2435):         return 'AutoField'
0.59 /testbed/django/db/models/fields/__init__.py(1746):         min_value, max_value = connection.ops.integer_field_range(internal_type)
0.59 /testbed/django/db/models/fields/__init__.py(1747):         if min_value is not None and not any(
0.59 /testbed/django/db/models/fields/__init__.py(1757):         if max_value is not None and not any(
0.59 /testbed/django/db/models/fields/__init__.py(1767):         return validators_
0.59 /testbed/django/db/models/fields/__init__.py(365):         return errors
0.59 /testbed/django/db/models/fields/__init__.py(205):             *self._check_deprecation_details(),
0.59 /testbed/django/db/models/fields/__init__.py(368):         if self.system_check_removed_details is not None:
0.59 /testbed/django/db/models/fields/__init__.py(381):         elif self.system_check_deprecated_details is not None:
0.59 /testbed/django/db/models/fields/__init__.py(393):         return []
0.59 /testbed/django/db/models/fields/__init__.py(1725):             *self._check_max_length_warning(),
0.59 /testbed/django/db/models/fields/__init__.py(1729):         if self.max_length is not None:
0.59 /testbed/django/db/models/fields/__init__.py(1738):         return []
0.59 /testbed/django/db/models/fields/__init__.py(2362):             *self._check_primary_key(),
0.59 /testbed/django/db/models/fields/__init__.py(2366):         if not self.primary_key:
0.59 /testbed/django/db/models/fields/__init__.py(2375):             return []
0.59 /testbed/django/db/models/fields/__init__.py(991):             *super().check(**kwargs),
0.59 /testbed/django/db/models/fields/__init__.py(199):             *self._check_field_name(),
0.59 /testbed/django/db/models/fields/__init__.py(213):         if self.name.endswith('_'):
0.59 /testbed/django/db/models/fields/__init__.py(221):         elif LOOKUP_SEP in self.name:
0.59 /testbed/django/db/models/fields/__init__.py(229):         elif self.name == 'pk':
0.59 /testbed/django/db/models/fields/__init__.py(238):             return []
0.59 /testbed/django/db/models/fields/__init__.py(200):             *self._check_choices(),
0.59 /testbed/django/db/models/fields/__init__.py(245):         if not self.choices:
0.59 /testbed/django/db/models/fields/__init__.py(246):             return []
0.59 /testbed/django/db/models/fields/__init__.py(201):             *self._check_db_index(),
0.59 /testbed/django/db/models/fields/__init__.py(309):         if self.db_index not in (None, True, False):
0.59 /testbed/django/db/models/fields/__init__.py(318):             return []
0.59 /testbed/django/db/models/fields/__init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.59 /testbed/django/db/models/fields/__init__.py(321):         if (self.primary_key and self.null and
0.59 /testbed/django/db/models/fields/__init__.py(336):             return []
0.59 /testbed/django/db/models/fields/__init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.59 /testbed/django/db/models/fields/__init__.py(339):         if databases is None:
0.59 /testbed/django/db/models/fields/__init__.py(341):         app_label = self.model._meta.app_label
0.59 /testbed/django/db/models/fields/__init__.py(342):         errors = []
0.59 /testbed/django/db/models/fields/__init__.py(343):         for alias in databases:
0.59 /testbed/django/db/models/fields/__init__.py(346):         return errors
0.59 /testbed/django/db/models/fields/__init__.py(204):             *self._check_validators(),
0.59 /testbed/django/db/models/fields/__init__.py(349):         errors = []
0.59 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.59 /testbed/django/db/models/fields/__init__.py(351):             if not callable(validator):
0.59 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.59 /testbed/django/db/models/fields/__init__.py(365):         return errors
0.59 /testbed/django/db/models/fields/__init__.py(205):             *self._check_deprecation_details(),
0.59 /testbed/django/db/models/fields/__init__.py(368):         if self.system_check_removed_details is not None:
0.59 /testbed/django/db/models/fields/__init__.py(381):         elif self.system_check_deprecated_details is not None:
0.59 /testbed/django/db/models/fields/__init__.py(393):         return []
0.59 /testbed/django/db/models/fields/__init__.py(992):             *self._check_max_length_attribute(**kwargs),
0.59 /testbed/django/db/models/fields/__init__.py(996):         if self.max_length is None:
0.59 /testbed/django/db/models/fields/__init__.py(1004):         elif (not isinstance(self.max_length, int) or isinstance(self.max_length, bool) or
0.59 /testbed/django/db/models/fields/__init__.py(1005):                 self.max_length <= 0):
0.59 /testbed/django/db/models/fields/__init__.py(1014):             return []
0.59 /testbed/django/db/models/fields/__init__.py(1065):             *super().check(**kwargs),
0.59 /testbed/django/db/models/fields/__init__.py(199):             *self._check_field_name(),
0.59 /testbed/django/db/models/fields/__init__.py(213):         if self.name.endswith('_'):
0.59 /testbed/django/db/models/fields/__init__.py(221):         elif LOOKUP_SEP in self.name:
0.59 /testbed/django/db/models/fields/__init__.py(229):         elif self.name == 'pk':
0.59 /testbed/django/db/models/fields/__init__.py(238):             return []
0.59 /testbed/django/db/models/fields/__init__.py(200):             *self._check_choices(),
0.59 /testbed/django/db/models/fields/__init__.py(245):         if not self.choices:
0.59 /testbed/django/db/models/fields/__init__.py(246):             return []
0.59 /testbed/django/db/models/fields/__init__.py(201):             *self._check_db_index(),
0.59 /testbed/django/db/models/fields/__init__.py(309):         if self.db_index not in (None, True, False):
0.59 /testbed/django/db/models/fields/__init__.py(318):             return []
0.59 /testbed/django/db/models/fields/__init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.59 /testbed/django/db/models/fields/__init__.py(321):         if (self.primary_key and self.null and
0.59 /testbed/django/db/models/fields/__init__.py(336):             return []
0.59 /testbed/django/db/models/fields/__init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.59 /testbed/django/db/models/fields/__init__.py(339):         if databases is None:
0.59 /testbed/django/db/models/fields/__init__.py(341):         app_label = self.model._meta.app_label
0.59 /testbed/django/db/models/fields/__init__.py(342):         errors = []
0.59 /testbed/django/db/models/fields/__init__.py(343):         for alias in databases:
0.59 /testbed/django/db/models/fields/__init__.py(346):         return errors
0.59 /testbed/django/db/models/fields/__init__.py(204):             *self._check_validators(),
0.59 /testbed/django/db/models/fields/__init__.py(349):         errors = []
0.59 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.59 /testbed/django/db/models/fields/__init__.py(595):         return [*self.default_validators, *self._validators]
0.59 /testbed/django/db/models/fields/__init__.py(365):         return errors
0.59 /testbed/django/db/models/fields/__init__.py(205):             *self._check_deprecation_details(),
0.59 /testbed/django/db/models/fields/__init__.py(368):         if self.system_check_removed_details is not None:
0.59 /testbed/django/db/models/fields/__init__.py(381):         elif self.system_check_deprecated_details is not None:
0.59 /testbed/django/db/models/fields/__init__.py(393):         return []
0.59 /testbed/django/db/models/fields/__init__.py(1066):             *self._check_mutually_exclusive_options(),
0.59 /testbed/django/db/models/fields/__init__.py(1074):         mutually_exclusive_options = [self.auto_now_add, self.auto_now, self.has_default()]
0.59 /testbed/django/db/models/fields/__init__.py(827):         return self.default is not NOT_PROVIDED
0.59 /testbed/django/db/models/fields/__init__.py(1075):         enabled_options = [option not in (None, False) for option in mutually_exclusive_options].count(True)
0.59 /testbed/django/db/models/fields/__init__.py(1075):         enabled_options = [option not in (None, False) for option in mutually_exclusive_options].count(True)
0.59 /testbed/django/db/models/fields/__init__.py(1075):         enabled_options = [option not in (None, False) for option in mutually_exclusive_options].count(True)
0.59 /testbed/django/db/models/fields/__init__.py(1075):         enabled_options = [option not in (None, False) for option in mutually_exclusive_options].count(True)
0.59 /testbed/django/db/models/fields/__init__.py(1075):         enabled_options = [option not in (None, False) for option in mutually_exclusive_options].count(True)
0.59 /testbed/django/db/models/fields/__init__.py(1076):         if enabled_options > 1:
0.59 /testbed/django/db/models/fields/__init__.py(1087):             return []
0.59 /testbed/django/db/models/fields/__init__.py(1067):             *self._check_fix_default_value(),
0.59 /testbed/django/db/models/fields/__init__.py(1256):         if not self.has_default():
0.59 /testbed/django/db/models/fields/__init__.py(827):         return self.default is not NOT_PROVIDED
0.59 /testbed/django/db/models/fields/__init__.py(1257):             return []
0.59 /testbed/django/db/models/fields/__init__.py(199):             *self._check_field_name(),
0.59 /testbed/django/db/models/fields/__init__.py(213):         if self.name.endswith('_'):
0.59 /testbed/django/db/models/fields/__init__.py(221):         elif LOOKUP_SEP in self.name:
0.59 /testbed/django/db/models/fields/__init__.py(229):         elif self.name == 'pk':
0.59 /testbed/django/db/models/fields/__init__.py(238):             return []
0.59 /testbed/django/db/models/fields/__init__.py(200):             *self._check_choices(),
0.59 /testbed/django/db/models/fields/__init__.py(245):         if not self.choices:
0.59 /testbed/django/db/models/fields/__init__.py(246):             return []
0.59 /testbed/django/db/models/fields/__init__.py(201):             *self._check_db_index(),
0.59 /testbed/django/db/models/fields/__init__.py(309):         if self.db_index not in (None, True, False):
0.59 /testbed/django/db/models/fields/__init__.py(318):             return []
0.59 /testbed/django/db/models/fields/__init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.59 /testbed/django/db/models/fields/__init__.py(321):         if (self.primary_key and self.null and
0.59 /testbed/django/db/models/fields/__init__.py(336):             return []
0.59 /testbed/django/db/models/fields/__init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.59 /testbed/django/db/models/fields/__init__.py(339):         if databases is None:
0.59 /testbed/django/db/models/fields/__init__.py(341):         app_label = self.model._meta.app_label
0.59 /testbed/django/db/models/fields/__init__.py(342):         errors = []
0.59 /testbed/django/db/models/fields/__init__.py(343):         for alias in databases:
0.59 /testbed/django/db/models/fields/__init__.py(346):         return errors
0.59 /testbed/django/db/models/fields/__init__.py(204):             *self._check_validators(),
0.59 /testbed/django/db/models/fields/__init__.py(349):         errors = []
0.59 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.59 /testbed/django/db/models/fields/__init__.py(595):         return [*self.default_validators, *self._validators]
0.59 /testbed/django/db/models/fields/__init__.py(365):         return errors
0.59 /testbed/django/db/models/fields/__init__.py(205):             *self._check_deprecation_details(),
0.59 /testbed/django/db/models/fields/__init__.py(368):         if self.system_check_removed_details is not None:
0.59 /testbed/django/db/models/fields/__init__.py(381):         elif self.system_check_deprecated_details is not None:
0.59 /testbed/django/db/models/fields/__init__.py(393):         return []
0.59 /testbed/django/db/models/fields/__init__.py(991):             *super().check(**kwargs),
0.59 /testbed/django/db/models/fields/__init__.py(199):             *self._check_field_name(),
0.59 /testbed/django/db/models/fields/__init__.py(213):         if self.name.endswith('_'):
0.59 /testbed/django/db/models/fields/__init__.py(221):         elif LOOKUP_SEP in self.name:
0.59 /testbed/django/db/models/fields/__init__.py(229):         elif self.name == 'pk':
0.59 /testbed/django/db/models/fields/__init__.py(238):             return []
0.59 /testbed/django/db/models/fields/__init__.py(200):             *self._check_choices(),
0.59 /testbed/django/db/models/fields/__init__.py(245):         if not self.choices:
0.59 /testbed/django/db/models/fields/__init__.py(246):             return []
0.59 /testbed/django/db/models/fields/__init__.py(201):             *self._check_db_index(),
0.59 /testbed/django/db/models/fields/__init__.py(309):         if self.db_index not in (None, True, False):
0.59 /testbed/django/db/models/fields/__init__.py(318):             return []
0.59 /testbed/django/db/models/fields/__init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.59 /testbed/django/db/models/fields/__init__.py(321):         if (self.primary_key and self.null and
0.59 /testbed/django/db/models/fields/__init__.py(336):             return []
0.59 /testbed/django/db/models/fields/__init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.59 /testbed/django/db/models/fields/__init__.py(339):         if databases is None:
0.59 /testbed/django/db/models/fields/__init__.py(341):         app_label = self.model._meta.app_label
0.59 /testbed/django/db/models/fields/__init__.py(342):         errors = []
0.59 /testbed/django/db/models/fields/__init__.py(343):         for alias in databases:
0.59 /testbed/django/db/models/fields/__init__.py(346):         return errors
0.59 /testbed/django/db/models/fields/__init__.py(204):             *self._check_validators(),
0.59 /testbed/django/db/models/fields/__init__.py(349):         errors = []
0.59 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.59 /testbed/django/db/models/fields/__init__.py(351):             if not callable(validator):
0.59 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.59 /testbed/django/db/models/fields/__init__.py(351):             if not callable(validator):
0.59 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.59 /testbed/django/db/models/fields/__init__.py(365):         return errors
0.59 /testbed/django/db/models/fields/__init__.py(205):             *self._check_deprecation_details(),
0.59 /testbed/django/db/models/fields/__init__.py(368):         if self.system_check_removed_details is not None:
0.59 /testbed/django/db/models/fields/__init__.py(381):         elif self.system_check_deprecated_details is not None:
0.59 /testbed/django/db/models/fields/__init__.py(393):         return []
0.59 /testbed/django/db/models/fields/__init__.py(992):             *self._check_max_length_attribute(**kwargs),
0.59 /testbed/django/db/models/fields/__init__.py(996):         if self.max_length is None:
0.59 /testbed/django/db/models/fields/__init__.py(1004):         elif (not isinstance(self.max_length, int) or isinstance(self.max_length, bool) or
0.59 /testbed/django/db/models/fields/__init__.py(1005):                 self.max_length <= 0):
0.59 /testbed/django/db/models/fields/__init__.py(1014):             return []
0.59 /testbed/django/db/models/fields/__init__.py(991):             *super().check(**kwargs),
0.59 /testbed/django/db/models/fields/__init__.py(199):             *self._check_field_name(),
0.59 /testbed/django/db/models/fields/__init__.py(213):         if self.name.endswith('_'):
0.59 /testbed/django/db/models/fields/__init__.py(221):         elif LOOKUP_SEP in self.name:
0.59 /testbed/django/db/models/fields/__init__.py(229):         elif self.name == 'pk':
0.59 /testbed/django/db/models/fields/__init__.py(238):             return []
0.59 /testbed/django/db/models/fields/__init__.py(200):             *self._check_choices(),
0.59 /testbed/django/db/models/fields/__init__.py(245):         if not self.choices:
0.59 /testbed/django/db/models/fields/__init__.py(246):             return []
0.59 /testbed/django/db/models/fields/__init__.py(201):             *self._check_db_index(),
0.59 /testbed/django/db/models/fields/__init__.py(309):         if self.db_index not in (None, True, False):
0.59 /testbed/django/db/models/fields/__init__.py(318):             return []
0.59 /testbed/django/db/models/fields/__init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.59 /testbed/django/db/models/fields/__init__.py(321):         if (self.primary_key and self.null and
0.59 /testbed/django/db/models/fields/__init__.py(336):             return []
0.59 /testbed/django/db/models/fields/__init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.59 /testbed/django/db/models/fields/__init__.py(339):         if databases is None:
0.59 /testbed/django/db/models/fields/__init__.py(341):         app_label = self.model._meta.app_label
0.59 /testbed/django/db/models/fields/__init__.py(342):         errors = []
0.59 /testbed/django/db/models/fields/__init__.py(343):         for alias in databases:
0.59 /testbed/django/db/models/fields/__init__.py(346):         return errors
0.59 /testbed/django/db/models/fields/__init__.py(204):             *self._check_validators(),
0.59 /testbed/django/db/models/fields/__init__.py(349):         errors = []
0.59 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.59 /testbed/django/db/models/fields/__init__.py(351):             if not callable(validator):
0.59 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.59 /testbed/django/db/models/fields/__init__.py(365):         return errors
0.59 /testbed/django/db/models/fields/__init__.py(205):             *self._check_deprecation_details(),
0.59 /testbed/django/db/models/fields/__init__.py(368):         if self.system_check_removed_details is not None:
0.59 /testbed/django/db/models/fields/__init__.py(381):         elif self.system_check_deprecated_details is not None:
0.59 /testbed/django/db/models/fields/__init__.py(393):         return []
0.59 /testbed/django/db/models/fields/__init__.py(992):             *self._check_max_length_attribute(**kwargs),
0.59 /testbed/django/db/models/fields/__init__.py(996):         if self.max_length is None:
0.59 /testbed/django/db/models/fields/__init__.py(1004):         elif (not isinstance(self.max_length, int) or isinstance(self.max_length, bool) or
0.59 /testbed/django/db/models/fields/__init__.py(1005):                 self.max_length <= 0):
0.59 /testbed/django/db/models/fields/__init__.py(1014):             return []
0.59 /testbed/django/db/models/fields/__init__.py(991):             *super().check(**kwargs),
0.59 /testbed/django/db/models/fields/__init__.py(199):             *self._check_field_name(),
0.59 /testbed/django/db/models/fields/__init__.py(213):         if self.name.endswith('_'):
0.59 /testbed/django/db/models/fields/__init__.py(221):         elif LOOKUP_SEP in self.name:
0.59 /testbed/django/db/models/fields/__init__.py(229):         elif self.name == 'pk':
0.59 /testbed/django/db/models/fields/__init__.py(238):             return []
0.59 /testbed/django/db/models/fields/__init__.py(200):             *self._check_choices(),
0.59 /testbed/django/db/models/fields/__init__.py(245):         if not self.choices:
0.59 /testbed/django/db/models/fields/__init__.py(246):             return []
0.59 /testbed/django/db/models/fields/__init__.py(201):             *self._check_db_index(),
0.59 /testbed/django/db/models/fields/__init__.py(309):         if self.db_index not in (None, True, False):
0.59 /testbed/django/db/models/fields/__init__.py(318):             return []
0.59 /testbed/django/db/models/fields/__init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.59 /testbed/django/db/models/fields/__init__.py(321):         if (self.primary_key and self.null and
0.59 /testbed/django/db/models/fields/__init__.py(336):             return []
0.59 /testbed/django/db/models/fields/__init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.59 /testbed/django/db/models/fields/__init__.py(339):         if databases is None:
0.59 /testbed/django/db/models/fields/__init__.py(341):         app_label = self.model._meta.app_label
0.59 /testbed/django/db/models/fields/__init__.py(342):         errors = []
0.59 /testbed/django/db/models/fields/__init__.py(343):         for alias in databases:
0.59 /testbed/django/db/models/fields/__init__.py(346):         return errors
0.59 /testbed/django/db/models/fields/__init__.py(204):             *self._check_validators(),
0.59 /testbed/django/db/models/fields/__init__.py(349):         errors = []
0.59 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.59 /testbed/django/db/models/fields/__init__.py(351):             if not callable(validator):
0.59 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.59 /testbed/django/db/models/fields/__init__.py(365):         return errors
0.59 /testbed/django/db/models/fields/__init__.py(205):             *self._check_deprecation_details(),
0.59 /testbed/django/db/models/fields/__init__.py(368):         if self.system_check_removed_details is not None:
0.59 /testbed/django/db/models/fields/__init__.py(381):         elif self.system_check_deprecated_details is not None:
0.59 /testbed/django/db/models/fields/__init__.py(393):         return []
0.59 /testbed/django/db/models/fields/__init__.py(992):             *self._check_max_length_attribute(**kwargs),
0.59 /testbed/django/db/models/fields/__init__.py(996):         if self.max_length is None:
0.59 /testbed/django/db/models/fields/__init__.py(1004):         elif (not isinstance(self.max_length, int) or isinstance(self.max_length, bool) or
0.59 /testbed/django/db/models/fields/__init__.py(1005):                 self.max_length <= 0):
0.59 /testbed/django/db/models/fields/__init__.py(1014):             return []
0.59 /testbed/django/db/models/fields/__init__.py(991):             *super().check(**kwargs),
0.59 /testbed/django/db/models/fields/__init__.py(199):             *self._check_field_name(),
0.59 /testbed/django/db/models/fields/__init__.py(213):         if self.name.endswith('_'):
0.59 /testbed/django/db/models/fields/__init__.py(221):         elif LOOKUP_SEP in self.name:
0.59 /testbed/django/db/models/fields/__init__.py(229):         elif self.name == 'pk':
0.59 /testbed/django/db/models/fields/__init__.py(238):             return []
0.59 /testbed/django/db/models/fields/__init__.py(200):             *self._check_choices(),
0.59 /testbed/django/db/models/fields/__init__.py(245):         if not self.choices:
0.59 /testbed/django/db/models/fields/__init__.py(246):             return []
0.59 /testbed/django/db/models/fields/__init__.py(201):             *self._check_db_index(),
0.59 /testbed/django/db/models/fields/__init__.py(309):         if self.db_index not in (None, True, False):
0.59 /testbed/django/db/models/fields/__init__.py(318):             return []
0.59 /testbed/django/db/models/fields/__init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.59 /testbed/django/db/models/fields/__init__.py(321):         if (self.primary_key and self.null and
0.59 /testbed/django/db/models/fields/__init__.py(336):             return []
0.59 /testbed/django/db/models/fields/__init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.59 /testbed/django/db/models/fields/__init__.py(339):         if databases is None:
0.59 /testbed/django/db/models/fields/__init__.py(341):         app_label = self.model._meta.app_label
0.59 /testbed/django/db/models/fields/__init__.py(342):         errors = []
0.59 /testbed/django/db/models/fields/__init__.py(343):         for alias in databases:
0.59 /testbed/django/db/models/fields/__init__.py(346):         return errors
0.59 /testbed/django/db/models/fields/__init__.py(204):             *self._check_validators(),
0.59 /testbed/django/db/models/fields/__init__.py(349):         errors = []
0.59 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.59 /testbed/django/db/models/fields/__init__.py(351):             if not callable(validator):
0.59 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.59 /testbed/django/db/models/fields/__init__.py(351):             if not callable(validator):
0.59 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.59 /testbed/django/db/models/fields/__init__.py(365):         return errors
0.59 /testbed/django/db/models/fields/__init__.py(205):             *self._check_deprecation_details(),
0.59 /testbed/django/db/models/fields/__init__.py(368):         if self.system_check_removed_details is not None:
0.59 /testbed/django/db/models/fields/__init__.py(381):         elif self.system_check_deprecated_details is not None:
0.59 /testbed/django/db/models/fields/__init__.py(393):         return []
0.59 /testbed/django/db/models/fields/__init__.py(992):             *self._check_max_length_attribute(**kwargs),
0.59 /testbed/django/db/models/fields/__init__.py(996):         if self.max_length is None:
0.59 /testbed/django/db/models/fields/__init__.py(1004):         elif (not isinstance(self.max_length, int) or isinstance(self.max_length, bool) or
0.59 /testbed/django/db/models/fields/__init__.py(1005):                 self.max_length <= 0):
0.59 /testbed/django/db/models/fields/__init__.py(1014):             return []
0.59 /testbed/django/db/models/fields/__init__.py(199):             *self._check_field_name(),
0.59 /testbed/django/db/models/fields/__init__.py(213):         if self.name.endswith('_'):
0.59 /testbed/django/db/models/fields/__init__.py(221):         elif LOOKUP_SEP in self.name:
0.59 /testbed/django/db/models/fields/__init__.py(229):         elif self.name == 'pk':
0.59 /testbed/django/db/models/fields/__init__.py(238):             return []
0.59 /testbed/django/db/models/fields/__init__.py(200):             *self._check_choices(),
0.59 /testbed/django/db/models/fields/__init__.py(245):         if not self.choices:
0.59 /testbed/django/db/models/fields/__init__.py(246):             return []
0.59 /testbed/django/db/models/fields/__init__.py(201):             *self._check_db_index(),
0.59 /testbed/django/db/models/fields/__init__.py(309):         if self.db_index not in (None, True, False):
0.59 /testbed/django/db/models/fields/__init__.py(318):             return []
0.59 /testbed/django/db/models/fields/__init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.59 /testbed/django/db/models/fields/__init__.py(321):         if (self.primary_key and self.null and
0.59 /testbed/django/db/models/fields/__init__.py(336):             return []
0.59 /testbed/django/db/models/fields/__init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.59 /testbed/django/db/models/fields/__init__.py(339):         if databases is None:
0.59 /testbed/django/db/models/fields/__init__.py(341):         app_label = self.model._meta.app_label
0.59 /testbed/django/db/models/fields/__init__.py(342):         errors = []
0.59 /testbed/django/db/models/fields/__init__.py(343):         for alias in databases:
0.59 /testbed/django/db/models/fields/__init__.py(346):         return errors
0.59 /testbed/django/db/models/fields/__init__.py(204):             *self._check_validators(),
0.59 /testbed/django/db/models/fields/__init__.py(349):         errors = []
0.59 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.59 /testbed/django/db/models/fields/__init__.py(595):         return [*self.default_validators, *self._validators]
0.59 /testbed/django/db/models/fields/__init__.py(365):         return errors
0.59 /testbed/django/db/models/fields/__init__.py(205):             *self._check_deprecation_details(),
0.59 /testbed/django/db/models/fields/__init__.py(368):         if self.system_check_removed_details is not None:
0.59 /testbed/django/db/models/fields/__init__.py(381):         elif self.system_check_deprecated_details is not None:
0.59 /testbed/django/db/models/fields/__init__.py(393):         return []
0.59 /testbed/django/db/models/fields/__init__.py(199):             *self._check_field_name(),
0.59 /testbed/django/db/models/fields/__init__.py(213):         if self.name.endswith('_'):
0.59 /testbed/django/db/models/fields/__init__.py(221):         elif LOOKUP_SEP in self.name:
0.59 /testbed/django/db/models/fields/__init__.py(229):         elif self.name == 'pk':
0.59 /testbed/django/db/models/fields/__init__.py(238):             return []
0.59 /testbed/django/db/models/fields/__init__.py(200):             *self._check_choices(),
0.59 /testbed/django/db/models/fields/__init__.py(245):         if not self.choices:
0.59 /testbed/django/db/models/fields/__init__.py(246):             return []
0.59 /testbed/django/db/models/fields/__init__.py(201):             *self._check_db_index(),
0.59 /testbed/django/db/models/fields/__init__.py(309):         if self.db_index not in (None, True, False):
0.59 /testbed/django/db/models/fields/__init__.py(318):             return []
0.59 /testbed/django/db/models/fields/__init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.59 /testbed/django/db/models/fields/__init__.py(321):         if (self.primary_key and self.null and
0.59 /testbed/django/db/models/fields/__init__.py(336):             return []
0.59 /testbed/django/db/models/fields/__init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.59 /testbed/django/db/models/fields/__init__.py(339):         if databases is None:
0.59 /testbed/django/db/models/fields/__init__.py(341):         app_label = self.model._meta.app_label
0.59 /testbed/django/db/models/fields/__init__.py(342):         errors = []
0.59 /testbed/django/db/models/fields/__init__.py(343):         for alias in databases:
0.59 /testbed/django/db/models/fields/__init__.py(346):         return errors
0.59 /testbed/django/db/models/fields/__init__.py(204):             *self._check_validators(),
0.59 /testbed/django/db/models/fields/__init__.py(349):         errors = []
0.59 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.59 /testbed/django/db/models/fields/__init__.py(595):         return [*self.default_validators, *self._validators]
0.59 /testbed/django/db/models/fields/__init__.py(365):         return errors
0.59 /testbed/django/db/models/fields/__init__.py(205):             *self._check_deprecation_details(),
0.59 /testbed/django/db/models/fields/__init__.py(368):         if self.system_check_removed_details is not None:
0.59 /testbed/django/db/models/fields/__init__.py(381):         elif self.system_check_deprecated_details is not None:
0.59 /testbed/django/db/models/fields/__init__.py(393):         return []
0.59 /testbed/django/db/models/fields/__init__.py(1065):             *super().check(**kwargs),
0.59 /testbed/django/db/models/fields/__init__.py(199):             *self._check_field_name(),
0.59 /testbed/django/db/models/fields/__init__.py(213):         if self.name.endswith('_'):
0.59 /testbed/django/db/models/fields/__init__.py(221):         elif LOOKUP_SEP in self.name:
0.59 /testbed/django/db/models/fields/__init__.py(229):         elif self.name == 'pk':
0.59 /testbed/django/db/models/fields/__init__.py(238):             return []
0.59 /testbed/django/db/models/fields/__init__.py(200):             *self._check_choices(),
0.59 /testbed/django/db/models/fields/__init__.py(245):         if not self.choices:
0.59 /testbed/django/db/models/fields/__init__.py(246):             return []
0.59 /testbed/django/db/models/fields/__init__.py(201):             *self._check_db_index(),
0.59 /testbed/django/db/models/fields/__init__.py(309):         if self.db_index not in (None, True, False):
0.59 /testbed/django/db/models/fields/__init__.py(318):             return []
0.59 /testbed/django/db/models/fields/__init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.59 /testbed/django/db/models/fields/__init__.py(321):         if (self.primary_key and self.null and
0.59 /testbed/django/db/models/fields/__init__.py(336):             return []
0.59 /testbed/django/db/models/fields/__init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.59 /testbed/django/db/models/fields/__init__.py(339):         if databases is None:
0.59 /testbed/django/db/models/fields/__init__.py(341):         app_label = self.model._meta.app_label
0.59 /testbed/django/db/models/fields/__init__.py(342):         errors = []
0.59 /testbed/django/db/models/fields/__init__.py(343):         for alias in databases:
0.59 /testbed/django/db/models/fields/__init__.py(346):         return errors
0.59 /testbed/django/db/models/fields/__init__.py(204):             *self._check_validators(),
0.59 /testbed/django/db/models/fields/__init__.py(349):         errors = []
0.59 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.59 /testbed/django/db/models/fields/__init__.py(595):         return [*self.default_validators, *self._validators]
0.59 /testbed/django/db/models/fields/__init__.py(365):         return errors
0.59 /testbed/django/db/models/fields/__init__.py(205):             *self._check_deprecation_details(),
0.59 /testbed/django/db/models/fields/__init__.py(368):         if self.system_check_removed_details is not None:
0.59 /testbed/django/db/models/fields/__init__.py(381):         elif self.system_check_deprecated_details is not None:
0.59 /testbed/django/db/models/fields/__init__.py(393):         return []
0.59 /testbed/django/db/models/fields/__init__.py(1066):             *self._check_mutually_exclusive_options(),
0.59 /testbed/django/db/models/fields/__init__.py(1074):         mutually_exclusive_options = [self.auto_now_add, self.auto_now, self.has_default()]
0.59 /testbed/django/db/models/fields/__init__.py(827):         return self.default is not NOT_PROVIDED
0.59 /testbed/django/db/models/fields/__init__.py(1075):         enabled_options = [option not in (None, False) for option in mutually_exclusive_options].count(True)
0.59 /testbed/django/db/models/fields/__init__.py(1075):         enabled_options = [option not in (None, False) for option in mutually_exclusive_options].count(True)
0.59 /testbed/django/db/models/fields/__init__.py(1075):         enabled_options = [option not in (None, False) for option in mutually_exclusive_options].count(True)
0.59 /testbed/django/db/models/fields/__init__.py(1075):         enabled_options = [option not in (None, False) for option in mutually_exclusive_options].count(True)
0.59 /testbed/django/db/models/fields/__init__.py(1075):         enabled_options = [option not in (None, False) for option in mutually_exclusive_options].count(True)
0.59 /testbed/django/db/models/fields/__init__.py(1076):         if enabled_options > 1:
0.59 /testbed/django/db/models/fields/__init__.py(1087):             return []
0.59 /testbed/django/db/models/fields/__init__.py(1067):             *self._check_fix_default_value(),
0.59 /testbed/django/db/models/fields/__init__.py(1256):         if not self.has_default():
0.59 /testbed/django/db/models/fields/__init__.py(827):         return self.default is not NOT_PROVIDED
0.59 /testbed/django/db/models/fields/__init__.py(1259):         now = timezone.now()
0.59 /testbed/django/db/models/fields/__init__.py(1260):         if not timezone.is_naive(now):
0.59 /testbed/django/db/models/fields/__init__.py(1262):         value = self.default
0.59 /testbed/django/db/models/fields/__init__.py(1263):         if isinstance(value, datetime.datetime):
0.59 /testbed/django/db/models/fields/__init__.py(1269):         elif isinstance(value, datetime.date):
0.59 /testbed/django/db/models/fields/__init__.py(1278):             return []
0.59 /testbed/django/db/models/fields/__init__.py(199):             *self._check_field_name(),
0.59 /testbed/django/db/models/fields/__init__.py(213):         if self.name.endswith('_'):
0.59 /testbed/django/db/models/fields/__init__.py(221):         elif LOOKUP_SEP in self.name:
0.59 /testbed/django/db/models/fields/__init__.py(229):         elif self.name == 'pk':
0.59 /testbed/django/db/models/fields/__init__.py(238):             return []
0.59 /testbed/django/db/models/fields/__init__.py(200):             *self._check_choices(),
0.59 /testbed/django/db/models/fields/__init__.py(245):         if not self.choices:
0.59 /testbed/django/db/models/fields/__init__.py(246):             return []
0.59 /testbed/django/db/models/fields/__init__.py(201):             *self._check_db_index(),
0.59 /testbed/django/db/models/fields/__init__.py(309):         if self.db_index not in (None, True, False):
0.59 /testbed/django/db/models/fields/__init__.py(318):             return []
0.59 /testbed/django/db/models/fields/__init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.59 /testbed/django/db/models/fields/__init__.py(321):         if (self.primary_key and self.null and
0.59 /testbed/django/db/models/fields/__init__.py(336):             return []
0.59 /testbed/django/db/models/fields/__init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.59 /testbed/django/db/models/fields/__init__.py(339):         if databases is None:
0.59 /testbed/django/db/models/fields/__init__.py(341):         app_label = self.model._meta.app_label
0.59 /testbed/django/db/models/fields/__init__.py(342):         errors = []
0.59 /testbed/django/db/models/fields/__init__.py(343):         for alias in databases:
0.59 /testbed/django/db/models/fields/__init__.py(346):         return errors
0.59 /testbed/django/db/models/fields/__init__.py(204):             *self._check_validators(),
0.59 /testbed/django/db/models/fields/__init__.py(349):         errors = []
0.59 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.59 /testbed/django/db/models/fields/__init__.py(595):         return [*self.default_validators, *self._validators]
0.59 /testbed/django/db/models/fields/__init__.py(365):         return errors
0.59 /testbed/django/db/models/fields/__init__.py(205):             *self._check_deprecation_details(),
0.59 /testbed/django/db/models/fields/__init__.py(368):         if self.system_check_removed_details is not None:
0.59 /testbed/django/db/models/fields/__init__.py(381):         elif self.system_check_deprecated_details is not None:
0.59 /testbed/django/db/models/fields/__init__.py(393):         return []
0.59 /testbed/django/db/models/fields/__init__.py(734):         return self._unique or self.primary_key
0.59 /testbed/django/db/models/fields/__init__.py(199):             *self._check_field_name(),
0.59 /testbed/django/db/models/fields/__init__.py(213):         if self.name.endswith('_'):
0.59 /testbed/django/db/models/fields/__init__.py(221):         elif LOOKUP_SEP in self.name:
0.59 /testbed/django/db/models/fields/__init__.py(229):         elif self.name == 'pk':
0.59 /testbed/django/db/models/fields/__init__.py(238):             return []
0.59 /testbed/django/db/models/fields/__init__.py(200):             *self._check_choices(),
0.59 /testbed/django/db/models/fields/__init__.py(245):         if not self.choices:
0.59 /testbed/django/db/models/fields/__init__.py(246):             return []
0.59 /testbed/django/db/models/fields/__init__.py(201):             *self._check_db_index(),
0.59 /testbed/django/db/models/fields/__init__.py(309):         if self.db_index not in (None, True, False):
0.59 /testbed/django/db/models/fields/__init__.py(318):             return []
0.59 /testbed/django/db/models/fields/__init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.59 /testbed/django/db/models/fields/__init__.py(321):         if (self.primary_key and self.null and
0.59 /testbed/django/db/models/fields/__init__.py(336):             return []
0.59 /testbed/django/db/models/fields/__init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.59 /testbed/django/db/models/fields/__init__.py(339):         if databases is None:
0.59 /testbed/django/db/models/fields/__init__.py(341):         app_label = self.model._meta.app_label
0.59 /testbed/django/db/models/fields/__init__.py(342):         errors = []
0.59 /testbed/django/db/models/fields/__init__.py(343):         for alias in databases:
0.59 /testbed/django/db/models/fields/__init__.py(346):         return errors
0.59 /testbed/django/db/models/fields/__init__.py(204):             *self._check_validators(),
0.59 /testbed/django/db/models/fields/__init__.py(349):         errors = []
0.59 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.59 /testbed/django/db/models/fields/__init__.py(595):         return [*self.default_validators, *self._validators]
0.59 /testbed/django/db/models/fields/__init__.py(365):         return errors
0.59 /testbed/django/db/models/fields/__init__.py(205):             *self._check_deprecation_details(),
0.59 /testbed/django/db/models/fields/__init__.py(368):         if self.system_check_removed_details is not None:
0.59 /testbed/django/db/models/fields/__init__.py(381):         elif self.system_check_deprecated_details is not None:
0.59 /testbed/django/db/models/fields/__init__.py(393):         return []
0.59 /testbed/django/db/models/fields/__init__.py(734):         return self._unique or self.primary_key
0.59 /testbed/django/db/models/fields/__init__.py(518):         if isinstance(other, Field):
0.59 /testbed/django/db/models/fields/__init__.py(519):             return self.creation_counter == other.creation_counter
0.60 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.60 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.60 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.60 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.60 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.60 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.60 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.60 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.60 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.60 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.60 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.60 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.60 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.60 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.60 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.60 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.60 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.60 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.60 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.60 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.60 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.60 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.60 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.60 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.60 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.60 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.60 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.60 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.60 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.60 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.60 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.60 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.60 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.60 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.60 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.60 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.60 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.60 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.60 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.60 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.60 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.60 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.60 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.60 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.60 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.60 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.60 /testbed/django/db/models/fields/__init__.py(2361):             *super().check(**kwargs),
0.60 /testbed/django/db/models/fields/__init__.py(1724):             *super().check(**kwargs),
0.60 /testbed/django/db/models/fields/__init__.py(199):             *self._check_field_name(),
0.60 /testbed/django/db/models/fields/__init__.py(213):         if self.name.endswith('_'):
0.60 /testbed/django/db/models/fields/__init__.py(221):         elif LOOKUP_SEP in self.name:
0.60 /testbed/django/db/models/fields/__init__.py(229):         elif self.name == 'pk':
0.60 /testbed/django/db/models/fields/__init__.py(238):             return []
0.60 /testbed/django/db/models/fields/__init__.py(200):             *self._check_choices(),
0.60 /testbed/django/db/models/fields/__init__.py(245):         if not self.choices:
0.60 /testbed/django/db/models/fields/__init__.py(246):             return []
0.60 /testbed/django/db/models/fields/__init__.py(201):             *self._check_db_index(),
0.60 /testbed/django/db/models/fields/__init__.py(309):         if self.db_index not in (None, True, False):
0.60 /testbed/django/db/models/fields/__init__.py(318):             return []
0.60 /testbed/django/db/models/fields/__init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.60 /testbed/django/db/models/fields/__init__.py(321):         if (self.primary_key and self.null and
0.60 /testbed/django/db/models/fields/__init__.py(336):             return []
0.60 /testbed/django/db/models/fields/__init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.60 /testbed/django/db/models/fields/__init__.py(339):         if databases is None:
0.60 /testbed/django/db/models/fields/__init__.py(341):         app_label = self.model._meta.app_label
0.60 /testbed/django/db/models/fields/__init__.py(342):         errors = []
0.60 /testbed/django/db/models/fields/__init__.py(343):         for alias in databases:
0.60 /testbed/django/db/models/fields/__init__.py(346):         return errors
0.60 /testbed/django/db/models/fields/__init__.py(204):             *self._check_validators(),
0.60 /testbed/django/db/models/fields/__init__.py(349):         errors = []
0.60 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.60 /testbed/django/db/models/fields/__init__.py(1744):         validators_ = super().validators
0.60 /testbed/django/db/models/fields/__init__.py(595):         return [*self.default_validators, *self._validators]
0.60 /testbed/django/db/models/fields/__init__.py(1745):         internal_type = self.get_internal_type()
0.60 /testbed/django/db/models/fields/__init__.py(2435):         return 'AutoField'
0.60 /testbed/django/db/models/fields/__init__.py(1746):         min_value, max_value = connection.ops.integer_field_range(internal_type)
0.60 /testbed/django/db/models/fields/__init__.py(1747):         if min_value is not None and not any(
0.60 /testbed/django/db/models/fields/__init__.py(1757):         if max_value is not None and not any(
0.60 /testbed/django/db/models/fields/__init__.py(1767):         return validators_
0.60 /testbed/django/db/models/fields/__init__.py(365):         return errors
0.60 /testbed/django/db/models/fields/__init__.py(205):             *self._check_deprecation_details(),
0.60 /testbed/django/db/models/fields/__init__.py(368):         if self.system_check_removed_details is not None:
0.60 /testbed/django/db/models/fields/__init__.py(381):         elif self.system_check_deprecated_details is not None:
0.60 /testbed/django/db/models/fields/__init__.py(393):         return []
0.60 /testbed/django/db/models/fields/__init__.py(1725):             *self._check_max_length_warning(),
0.60 /testbed/django/db/models/fields/__init__.py(1729):         if self.max_length is not None:
0.60 /testbed/django/db/models/fields/__init__.py(1738):         return []
0.60 /testbed/django/db/models/fields/__init__.py(2362):             *self._check_primary_key(),
0.60 /testbed/django/db/models/fields/__init__.py(2366):         if not self.primary_key:
0.60 /testbed/django/db/models/fields/__init__.py(2375):             return []
0.60 /testbed/django/db/models/fields/__init__.py(991):             *super().check(**kwargs),
0.60 /testbed/django/db/models/fields/__init__.py(199):             *self._check_field_name(),
0.60 /testbed/django/db/models/fields/__init__.py(213):         if self.name.endswith('_'):
0.60 /testbed/django/db/models/fields/__init__.py(221):         elif LOOKUP_SEP in self.name:
0.60 /testbed/django/db/models/fields/__init__.py(229):         elif self.name == 'pk':
0.60 /testbed/django/db/models/fields/__init__.py(238):             return []
0.60 /testbed/django/db/models/fields/__init__.py(200):             *self._check_choices(),
0.60 /testbed/django/db/models/fields/__init__.py(245):         if not self.choices:
0.60 /testbed/django/db/models/fields/__init__.py(246):             return []
0.60 /testbed/django/db/models/fields/__init__.py(201):             *self._check_db_index(),
0.60 /testbed/django/db/models/fields/__init__.py(309):         if self.db_index not in (None, True, False):
0.60 /testbed/django/db/models/fields/__init__.py(318):             return []
0.60 /testbed/django/db/models/fields/__init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.60 /testbed/django/db/models/fields/__init__.py(321):         if (self.primary_key and self.null and
0.60 /testbed/django/db/models/fields/__init__.py(336):             return []
0.60 /testbed/django/db/models/fields/__init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.60 /testbed/django/db/models/fields/__init__.py(339):         if databases is None:
0.60 /testbed/django/db/models/fields/__init__.py(341):         app_label = self.model._meta.app_label
0.60 /testbed/django/db/models/fields/__init__.py(342):         errors = []
0.60 /testbed/django/db/models/fields/__init__.py(343):         for alias in databases:
0.60 /testbed/django/db/models/fields/__init__.py(346):         return errors
0.60 /testbed/django/db/models/fields/__init__.py(204):             *self._check_validators(),
0.60 /testbed/django/db/models/fields/__init__.py(349):         errors = []
0.60 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.60 /testbed/django/db/models/fields/__init__.py(351):             if not callable(validator):
0.60 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.60 /testbed/django/db/models/fields/__init__.py(351):             if not callable(validator):
0.60 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.60 /testbed/django/db/models/fields/__init__.py(365):         return errors
0.60 /testbed/django/db/models/fields/__init__.py(205):             *self._check_deprecation_details(),
0.60 /testbed/django/db/models/fields/__init__.py(368):         if self.system_check_removed_details is not None:
0.60 /testbed/django/db/models/fields/__init__.py(381):         elif self.system_check_deprecated_details is not None:
0.60 /testbed/django/db/models/fields/__init__.py(393):         return []
0.60 /testbed/django/db/models/fields/__init__.py(992):             *self._check_max_length_attribute(**kwargs),
0.60 /testbed/django/db/models/fields/__init__.py(996):         if self.max_length is None:
0.60 /testbed/django/db/models/fields/__init__.py(1004):         elif (not isinstance(self.max_length, int) or isinstance(self.max_length, bool) or
0.60 /testbed/django/db/models/fields/__init__.py(1005):                 self.max_length <= 0):
0.60 /testbed/django/db/models/fields/__init__.py(1014):             return []
0.60 /testbed/django/db/models/fields/__init__.py(991):             *super().check(**kwargs),
0.60 /testbed/django/db/models/fields/__init__.py(199):             *self._check_field_name(),
0.60 /testbed/django/db/models/fields/__init__.py(213):         if self.name.endswith('_'):
0.60 /testbed/django/db/models/fields/__init__.py(221):         elif LOOKUP_SEP in self.name:
0.60 /testbed/django/db/models/fields/__init__.py(229):         elif self.name == 'pk':
0.60 /testbed/django/db/models/fields/__init__.py(238):             return []
0.60 /testbed/django/db/models/fields/__init__.py(200):             *self._check_choices(),
0.60 /testbed/django/db/models/fields/__init__.py(245):         if not self.choices:
0.60 /testbed/django/db/models/fields/__init__.py(246):             return []
0.60 /testbed/django/db/models/fields/__init__.py(201):             *self._check_db_index(),
0.60 /testbed/django/db/models/fields/__init__.py(309):         if self.db_index not in (None, True, False):
0.60 /testbed/django/db/models/fields/__init__.py(318):             return []
0.60 /testbed/django/db/models/fields/__init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.60 /testbed/django/db/models/fields/__init__.py(321):         if (self.primary_key and self.null and
0.60 /testbed/django/db/models/fields/__init__.py(336):             return []
0.60 /testbed/django/db/models/fields/__init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.60 /testbed/django/db/models/fields/__init__.py(339):         if databases is None:
0.60 /testbed/django/db/models/fields/__init__.py(341):         app_label = self.model._meta.app_label
0.60 /testbed/django/db/models/fields/__init__.py(342):         errors = []
0.60 /testbed/django/db/models/fields/__init__.py(343):         for alias in databases:
0.60 /testbed/django/db/models/fields/__init__.py(346):         return errors
0.60 /testbed/django/db/models/fields/__init__.py(204):             *self._check_validators(),
0.60 /testbed/django/db/models/fields/__init__.py(349):         errors = []
0.60 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.60 /testbed/django/db/models/fields/__init__.py(351):             if not callable(validator):
0.60 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.60 /testbed/django/db/models/fields/__init__.py(365):         return errors
0.60 /testbed/django/db/models/fields/__init__.py(205):             *self._check_deprecation_details(),
0.60 /testbed/django/db/models/fields/__init__.py(368):         if self.system_check_removed_details is not None:
0.60 /testbed/django/db/models/fields/__init__.py(381):         elif self.system_check_deprecated_details is not None:
0.60 /testbed/django/db/models/fields/__init__.py(393):         return []
0.60 /testbed/django/db/models/fields/__init__.py(992):             *self._check_max_length_attribute(**kwargs),
0.60 /testbed/django/db/models/fields/__init__.py(996):         if self.max_length is None:
0.60 /testbed/django/db/models/fields/__init__.py(1004):         elif (not isinstance(self.max_length, int) or isinstance(self.max_length, bool) or
0.60 /testbed/django/db/models/fields/__init__.py(1005):                 self.max_length <= 0):
0.60 /testbed/django/db/models/fields/__init__.py(1014):             return []
0.60 /testbed/django/db/models/fields/__init__.py(518):         if isinstance(other, Field):
0.60 /testbed/django/db/models/fields/__init__.py(519):             return self.creation_counter == other.creation_counter
0.60 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.60 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.60 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.60 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.60 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.60 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.60 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.60 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.60 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.60 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.60 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.60 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.60 /testbed/django/db/models/fields/__init__.py(991):             *super().check(**kwargs),
0.60 /testbed/django/db/models/fields/__init__.py(199):             *self._check_field_name(),
0.60 /testbed/django/db/models/fields/__init__.py(213):         if self.name.endswith('_'):
0.60 /testbed/django/db/models/fields/__init__.py(221):         elif LOOKUP_SEP in self.name:
0.60 /testbed/django/db/models/fields/__init__.py(229):         elif self.name == 'pk':
0.60 /testbed/django/db/models/fields/__init__.py(238):             return []
0.60 /testbed/django/db/models/fields/__init__.py(200):             *self._check_choices(),
0.60 /testbed/django/db/models/fields/__init__.py(245):         if not self.choices:
0.60 /testbed/django/db/models/fields/__init__.py(246):             return []
0.60 /testbed/django/db/models/fields/__init__.py(201):             *self._check_db_index(),
0.60 /testbed/django/db/models/fields/__init__.py(309):         if self.db_index not in (None, True, False):
0.60 /testbed/django/db/models/fields/__init__.py(318):             return []
0.60 /testbed/django/db/models/fields/__init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.60 /testbed/django/db/models/fields/__init__.py(321):         if (self.primary_key and self.null and
0.60 /testbed/django/db/models/fields/__init__.py(336):             return []
0.60 /testbed/django/db/models/fields/__init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.60 /testbed/django/db/models/fields/__init__.py(339):         if databases is None:
0.60 /testbed/django/db/models/fields/__init__.py(341):         app_label = self.model._meta.app_label
0.60 /testbed/django/db/models/fields/__init__.py(342):         errors = []
0.60 /testbed/django/db/models/fields/__init__.py(343):         for alias in databases:
0.60 /testbed/django/db/models/fields/__init__.py(346):         return errors
0.60 /testbed/django/db/models/fields/__init__.py(204):             *self._check_validators(),
0.60 /testbed/django/db/models/fields/__init__.py(349):         errors = []
0.60 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.60 /testbed/django/db/models/fields/__init__.py(351):             if not callable(validator):
0.60 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.60 /testbed/django/db/models/fields/__init__.py(365):         return errors
0.60 /testbed/django/db/models/fields/__init__.py(205):             *self._check_deprecation_details(),
0.60 /testbed/django/db/models/fields/__init__.py(368):         if self.system_check_removed_details is not None:
0.60 /testbed/django/db/models/fields/__init__.py(381):         elif self.system_check_deprecated_details is not None:
0.60 /testbed/django/db/models/fields/__init__.py(393):         return []
0.60 /testbed/django/db/models/fields/__init__.py(992):             *self._check_max_length_attribute(**kwargs),
0.60 /testbed/django/db/models/fields/__init__.py(996):         if self.max_length is None:
0.60 /testbed/django/db/models/fields/__init__.py(1004):         elif (not isinstance(self.max_length, int) or isinstance(self.max_length, bool) or
0.60 /testbed/django/db/models/fields/__init__.py(1005):                 self.max_length <= 0):
0.60 /testbed/django/db/models/fields/__init__.py(1014):             return []
0.60 /testbed/django/db/models/fields/__init__.py(199):             *self._check_field_name(),
0.60 /testbed/django/db/models/fields/__init__.py(213):         if self.name.endswith('_'):
0.60 /testbed/django/db/models/fields/__init__.py(221):         elif LOOKUP_SEP in self.name:
0.60 /testbed/django/db/models/fields/__init__.py(229):         elif self.name == 'pk':
0.60 /testbed/django/db/models/fields/__init__.py(238):             return []
0.60 /testbed/django/db/models/fields/__init__.py(200):             *self._check_choices(),
0.60 /testbed/django/db/models/fields/__init__.py(245):         if not self.choices:
0.60 /testbed/django/db/models/fields/__init__.py(246):             return []
0.60 /testbed/django/db/models/fields/__init__.py(201):             *self._check_db_index(),
0.60 /testbed/django/db/models/fields/__init__.py(309):         if self.db_index not in (None, True, False):
0.60 /testbed/django/db/models/fields/__init__.py(318):             return []
0.60 /testbed/django/db/models/fields/__init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.60 /testbed/django/db/models/fields/__init__.py(321):         if (self.primary_key and self.null and
0.60 /testbed/django/db/models/fields/__init__.py(336):             return []
0.60 /testbed/django/db/models/fields/__init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.60 /testbed/django/db/models/fields/__init__.py(339):         if databases is None:
0.60 /testbed/django/db/models/fields/__init__.py(341):         app_label = self.model._meta.app_label
0.60 /testbed/django/db/models/fields/__init__.py(342):         errors = []
0.60 /testbed/django/db/models/fields/__init__.py(343):         for alias in databases:
0.60 /testbed/django/db/models/fields/__init__.py(346):         return errors
0.60 /testbed/django/db/models/fields/__init__.py(204):             *self._check_validators(),
0.60 /testbed/django/db/models/fields/__init__.py(349):         errors = []
0.60 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.60 /testbed/django/db/models/fields/__init__.py(595):         return [*self.default_validators, *self._validators]
0.60 /testbed/django/db/models/fields/__init__.py(365):         return errors
0.60 /testbed/django/db/models/fields/__init__.py(205):             *self._check_deprecation_details(),
0.60 /testbed/django/db/models/fields/__init__.py(368):         if self.system_check_removed_details is not None:
0.60 /testbed/django/db/models/fields/__init__.py(381):         elif self.system_check_deprecated_details is not None:
0.60 /testbed/django/db/models/fields/__init__.py(393):         return []
0.60 /testbed/django/db/models/fields/__init__.py(1065):             *super().check(**kwargs),
0.60 /testbed/django/db/models/fields/__init__.py(199):             *self._check_field_name(),
0.60 /testbed/django/db/models/fields/__init__.py(213):         if self.name.endswith('_'):
0.60 /testbed/django/db/models/fields/__init__.py(221):         elif LOOKUP_SEP in self.name:
0.60 /testbed/django/db/models/fields/__init__.py(229):         elif self.name == 'pk':
0.60 /testbed/django/db/models/fields/__init__.py(238):             return []
0.60 /testbed/django/db/models/fields/__init__.py(200):             *self._check_choices(),
0.60 /testbed/django/db/models/fields/__init__.py(245):         if not self.choices:
0.60 /testbed/django/db/models/fields/__init__.py(246):             return []
0.60 /testbed/django/db/models/fields/__init__.py(201):             *self._check_db_index(),
0.60 /testbed/django/db/models/fields/__init__.py(309):         if self.db_index not in (None, True, False):
0.60 /testbed/django/db/models/fields/__init__.py(318):             return []
0.60 /testbed/django/db/models/fields/__init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.60 /testbed/django/db/models/fields/__init__.py(321):         if (self.primary_key and self.null and
0.60 /testbed/django/db/models/fields/__init__.py(336):             return []
0.60 /testbed/django/db/models/fields/__init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.60 /testbed/django/db/models/fields/__init__.py(339):         if databases is None:
0.60 /testbed/django/db/models/fields/__init__.py(341):         app_label = self.model._meta.app_label
0.60 /testbed/django/db/models/fields/__init__.py(342):         errors = []
0.60 /testbed/django/db/models/fields/__init__.py(343):         for alias in databases:
0.60 /testbed/django/db/models/fields/__init__.py(346):         return errors
0.60 /testbed/django/db/models/fields/__init__.py(204):             *self._check_validators(),
0.60 /testbed/django/db/models/fields/__init__.py(349):         errors = []
0.60 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.60 /testbed/django/db/models/fields/__init__.py(595):         return [*self.default_validators, *self._validators]
0.60 /testbed/django/db/models/fields/__init__.py(365):         return errors
0.60 /testbed/django/db/models/fields/__init__.py(205):             *self._check_deprecation_details(),
0.60 /testbed/django/db/models/fields/__init__.py(368):         if self.system_check_removed_details is not None:
0.60 /testbed/django/db/models/fields/__init__.py(381):         elif self.system_check_deprecated_details is not None:
0.60 /testbed/django/db/models/fields/__init__.py(393):         return []
0.60 /testbed/django/db/models/fields/__init__.py(1066):             *self._check_mutually_exclusive_options(),
0.60 /testbed/django/db/models/fields/__init__.py(1074):         mutually_exclusive_options = [self.auto_now_add, self.auto_now, self.has_default()]
0.60 /testbed/django/db/models/fields/__init__.py(827):         return self.default is not NOT_PROVIDED
0.60 /testbed/django/db/models/fields/__init__.py(1075):         enabled_options = [option not in (None, False) for option in mutually_exclusive_options].count(True)
0.60 /testbed/django/db/models/fields/__init__.py(1075):         enabled_options = [option not in (None, False) for option in mutually_exclusive_options].count(True)
0.60 /testbed/django/db/models/fields/__init__.py(1075):         enabled_options = [option not in (None, False) for option in mutually_exclusive_options].count(True)
0.60 /testbed/django/db/models/fields/__init__.py(1075):         enabled_options = [option not in (None, False) for option in mutually_exclusive_options].count(True)
0.60 /testbed/django/db/models/fields/__init__.py(1075):         enabled_options = [option not in (None, False) for option in mutually_exclusive_options].count(True)
0.60 /testbed/django/db/models/fields/__init__.py(1076):         if enabled_options > 1:
0.60 /testbed/django/db/models/fields/__init__.py(1087):             return []
0.60 /testbed/django/db/models/fields/__init__.py(1067):             *self._check_fix_default_value(),
0.60 /testbed/django/db/models/fields/__init__.py(1256):         if not self.has_default():
0.60 /testbed/django/db/models/fields/__init__.py(827):         return self.default is not NOT_PROVIDED
0.60 /testbed/django/db/models/fields/__init__.py(1257):             return []
0.60 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.60 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.60 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.60 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.60 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.60 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.60 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.60 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.60 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.60 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.60 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.60 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.60 /testbed/django/db/models/fields/__init__.py(2361):             *super().check(**kwargs),
0.60 /testbed/django/db/models/fields/__init__.py(1724):             *super().check(**kwargs),
0.60 /testbed/django/db/models/fields/__init__.py(199):             *self._check_field_name(),
0.60 /testbed/django/db/models/fields/__init__.py(213):         if self.name.endswith('_'):
0.60 /testbed/django/db/models/fields/__init__.py(221):         elif LOOKUP_SEP in self.name:
0.60 /testbed/django/db/models/fields/__init__.py(229):         elif self.name == 'pk':
0.60 /testbed/django/db/models/fields/__init__.py(238):             return []
0.60 /testbed/django/db/models/fields/__init__.py(200):             *self._check_choices(),
0.60 /testbed/django/db/models/fields/__init__.py(245):         if not self.choices:
0.60 /testbed/django/db/models/fields/__init__.py(246):             return []
0.60 /testbed/django/db/models/fields/__init__.py(201):             *self._check_db_index(),
0.60 /testbed/django/db/models/fields/__init__.py(309):         if self.db_index not in (None, True, False):
0.60 /testbed/django/db/models/fields/__init__.py(318):             return []
0.60 /testbed/django/db/models/fields/__init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.60 /testbed/django/db/models/fields/__init__.py(321):         if (self.primary_key and self.null and
0.60 /testbed/django/db/models/fields/__init__.py(336):             return []
0.60 /testbed/django/db/models/fields/__init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.60 /testbed/django/db/models/fields/__init__.py(339):         if databases is None:
0.60 /testbed/django/db/models/fields/__init__.py(341):         app_label = self.model._meta.app_label
0.60 /testbed/django/db/models/fields/__init__.py(342):         errors = []
0.60 /testbed/django/db/models/fields/__init__.py(343):         for alias in databases:
0.60 /testbed/django/db/models/fields/__init__.py(346):         return errors
0.60 /testbed/django/db/models/fields/__init__.py(204):             *self._check_validators(),
0.60 /testbed/django/db/models/fields/__init__.py(349):         errors = []
0.60 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.60 /testbed/django/db/models/fields/__init__.py(1744):         validators_ = super().validators
0.60 /testbed/django/db/models/fields/__init__.py(595):         return [*self.default_validators, *self._validators]
0.60 /testbed/django/db/models/fields/__init__.py(1745):         internal_type = self.get_internal_type()
0.60 /testbed/django/db/models/fields/__init__.py(2435):         return 'AutoField'
0.60 /testbed/django/db/models/fields/__init__.py(1746):         min_value, max_value = connection.ops.integer_field_range(internal_type)
0.60 /testbed/django/db/models/fields/__init__.py(1747):         if min_value is not None and not any(
0.60 /testbed/django/db/models/fields/__init__.py(1757):         if max_value is not None and not any(
0.60 /testbed/django/db/models/fields/__init__.py(1767):         return validators_
0.60 /testbed/django/db/models/fields/__init__.py(365):         return errors
0.60 /testbed/django/db/models/fields/__init__.py(205):             *self._check_deprecation_details(),
0.60 /testbed/django/db/models/fields/__init__.py(368):         if self.system_check_removed_details is not None:
0.60 /testbed/django/db/models/fields/__init__.py(381):         elif self.system_check_deprecated_details is not None:
0.60 /testbed/django/db/models/fields/__init__.py(393):         return []
0.60 /testbed/django/db/models/fields/__init__.py(1725):             *self._check_max_length_warning(),
0.60 /testbed/django/db/models/fields/__init__.py(1729):         if self.max_length is not None:
0.60 /testbed/django/db/models/fields/__init__.py(1738):         return []
0.60 /testbed/django/db/models/fields/__init__.py(2362):             *self._check_primary_key(),
0.60 /testbed/django/db/models/fields/__init__.py(2366):         if not self.primary_key:
0.60 /testbed/django/db/models/fields/__init__.py(2375):             return []
0.60 /testbed/django/db/models/fields/__init__.py(1065):             *super().check(**kwargs),
0.60 /testbed/django/db/models/fields/__init__.py(199):             *self._check_field_name(),
0.60 /testbed/django/db/models/fields/__init__.py(213):         if self.name.endswith('_'):
0.60 /testbed/django/db/models/fields/__init__.py(221):         elif LOOKUP_SEP in self.name:
0.60 /testbed/django/db/models/fields/__init__.py(229):         elif self.name == 'pk':
0.60 /testbed/django/db/models/fields/__init__.py(238):             return []
0.60 /testbed/django/db/models/fields/__init__.py(200):             *self._check_choices(),
0.60 /testbed/django/db/models/fields/__init__.py(245):         if not self.choices:
0.60 /testbed/django/db/models/fields/__init__.py(246):             return []
0.60 /testbed/django/db/models/fields/__init__.py(201):             *self._check_db_index(),
0.60 /testbed/django/db/models/fields/__init__.py(309):         if self.db_index not in (None, True, False):
0.60 /testbed/django/db/models/fields/__init__.py(318):             return []
0.60 /testbed/django/db/models/fields/__init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.60 /testbed/django/db/models/fields/__init__.py(321):         if (self.primary_key and self.null and
0.60 /testbed/django/db/models/fields/__init__.py(336):             return []
0.60 /testbed/django/db/models/fields/__init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.60 /testbed/django/db/models/fields/__init__.py(339):         if databases is None:
0.60 /testbed/django/db/models/fields/__init__.py(341):         app_label = self.model._meta.app_label
0.60 /testbed/django/db/models/fields/__init__.py(342):         errors = []
0.60 /testbed/django/db/models/fields/__init__.py(343):         for alias in databases:
0.60 /testbed/django/db/models/fields/__init__.py(346):         return errors
0.60 /testbed/django/db/models/fields/__init__.py(204):             *self._check_validators(),
0.60 /testbed/django/db/models/fields/__init__.py(349):         errors = []
0.60 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.60 /testbed/django/db/models/fields/__init__.py(595):         return [*self.default_validators, *self._validators]
0.60 /testbed/django/db/models/fields/__init__.py(365):         return errors
0.60 /testbed/django/db/models/fields/__init__.py(205):             *self._check_deprecation_details(),
0.60 /testbed/django/db/models/fields/__init__.py(368):         if self.system_check_removed_details is not None:
0.60 /testbed/django/db/models/fields/__init__.py(381):         elif self.system_check_deprecated_details is not None:
0.60 /testbed/django/db/models/fields/__init__.py(393):         return []
0.60 /testbed/django/db/models/fields/__init__.py(1066):             *self._check_mutually_exclusive_options(),
0.60 /testbed/django/db/models/fields/__init__.py(1074):         mutually_exclusive_options = [self.auto_now_add, self.auto_now, self.has_default()]
0.60 /testbed/django/db/models/fields/__init__.py(827):         return self.default is not NOT_PROVIDED
0.60 /testbed/django/db/models/fields/__init__.py(1075):         enabled_options = [option not in (None, False) for option in mutually_exclusive_options].count(True)
0.60 /testbed/django/db/models/fields/__init__.py(1075):         enabled_options = [option not in (None, False) for option in mutually_exclusive_options].count(True)
0.60 /testbed/django/db/models/fields/__init__.py(1075):         enabled_options = [option not in (None, False) for option in mutually_exclusive_options].count(True)
0.60 /testbed/django/db/models/fields/__init__.py(1075):         enabled_options = [option not in (None, False) for option in mutually_exclusive_options].count(True)
0.60 /testbed/django/db/models/fields/__init__.py(1075):         enabled_options = [option not in (None, False) for option in mutually_exclusive_options].count(True)
0.60 /testbed/django/db/models/fields/__init__.py(1076):         if enabled_options > 1:
0.60 /testbed/django/db/models/fields/__init__.py(1087):             return []
0.60 /testbed/django/db/models/fields/__init__.py(1067):             *self._check_fix_default_value(),
0.60 /testbed/django/db/models/fields/__init__.py(1256):         if not self.has_default():
0.60 /testbed/django/db/models/fields/__init__.py(827):         return self.default is not NOT_PROVIDED
0.60 /testbed/django/db/models/fields/__init__.py(1259):         now = timezone.now()
0.60 /testbed/django/db/models/fields/__init__.py(1260):         if not timezone.is_naive(now):
0.60 /testbed/django/db/models/fields/__init__.py(1262):         value = self.default
0.60 /testbed/django/db/models/fields/__init__.py(1263):         if isinstance(value, datetime.datetime):
0.60 /testbed/django/db/models/fields/__init__.py(1269):         elif isinstance(value, datetime.date):
0.60 /testbed/django/db/models/fields/__init__.py(1278):             return []
0.60 /testbed/django/db/models/fields/__init__.py(199):             *self._check_field_name(),
0.60 /testbed/django/db/models/fields/__init__.py(213):         if self.name.endswith('_'):
0.60 /testbed/django/db/models/fields/__init__.py(221):         elif LOOKUP_SEP in self.name:
0.60 /testbed/django/db/models/fields/__init__.py(229):         elif self.name == 'pk':
0.60 /testbed/django/db/models/fields/__init__.py(238):             return []
0.60 /testbed/django/db/models/fields/__init__.py(200):             *self._check_choices(),
0.60 /testbed/django/db/models/fields/__init__.py(245):         if not self.choices:
0.60 /testbed/django/db/models/fields/__init__.py(246):             return []
0.60 /testbed/django/db/models/fields/__init__.py(201):             *self._check_db_index(),
0.60 /testbed/django/db/models/fields/__init__.py(309):         if self.db_index not in (None, True, False):
0.60 /testbed/django/db/models/fields/__init__.py(318):             return []
0.60 /testbed/django/db/models/fields/__init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.60 /testbed/django/db/models/fields/__init__.py(321):         if (self.primary_key and self.null and
0.60 /testbed/django/db/models/fields/__init__.py(336):             return []
0.60 /testbed/django/db/models/fields/__init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.60 /testbed/django/db/models/fields/__init__.py(339):         if databases is None:
0.60 /testbed/django/db/models/fields/__init__.py(341):         app_label = self.model._meta.app_label
0.60 /testbed/django/db/models/fields/__init__.py(342):         errors = []
0.60 /testbed/django/db/models/fields/__init__.py(343):         for alias in databases:
0.60 /testbed/django/db/models/fields/__init__.py(346):         return errors
0.60 /testbed/django/db/models/fields/__init__.py(204):             *self._check_validators(),
0.60 /testbed/django/db/models/fields/__init__.py(349):         errors = []
0.60 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.60 /testbed/django/db/models/fields/__init__.py(595):         return [*self.default_validators, *self._validators]
0.60 /testbed/django/db/models/fields/__init__.py(365):         return errors
0.60 /testbed/django/db/models/fields/__init__.py(205):             *self._check_deprecation_details(),
0.60 /testbed/django/db/models/fields/__init__.py(368):         if self.system_check_removed_details is not None:
0.60 /testbed/django/db/models/fields/__init__.py(381):         elif self.system_check_deprecated_details is not None:
0.60 /testbed/django/db/models/fields/__init__.py(393):         return []
0.60 /testbed/django/db/models/fields/__init__.py(734):         return self._unique or self.primary_key
0.60 /testbed/django/db/models/fields/__init__.py(734):         return self._unique or self.primary_key
0.60 /testbed/django/db/models/fields/__init__.py(734):         return self._unique or self.primary_key
0.60 /testbed/django/db/models/fields/__init__.py(734):         return self._unique or self.primary_key
0.60 /testbed/django/db/models/fields/__init__.py(734):         return self._unique or self.primary_key
0.60 /testbed/django/db/models/fields/__init__.py(734):         return self._unique or self.primary_key
0.60 /testbed/django/db/models/fields/__init__.py(734):         return self._unique or self.primary_key
0.60 /testbed/django/db/models/fields/__init__.py(734):         return self._unique or self.primary_key
0.60 /testbed/django/db/models/fields/__init__.py(734):         return self._unique or self.primary_key
0.60 /testbed/django/db/models/fields/__init__.py(734):         return self._unique or self.primary_key
0.60 /testbed/django/db/models/fields/__init__.py(734):         return self._unique or self.primary_key
0.60 /testbed/django/db/models/fields/__init__.py(734):         return self._unique or self.primary_key
0.60 /testbed/django/db/models/fields/__init__.py(734):         return self._unique or self.primary_key
0.60 /testbed/django/db/models/fields/__init__.py(734):         return self._unique or self.primary_key
0.60 /testbed/django/db/models/fields/__init__.py(199):             *self._check_field_name(),
0.60 /testbed/django/db/models/fields/__init__.py(213):         if self.name.endswith('_'):
0.60 /testbed/django/db/models/fields/__init__.py(221):         elif LOOKUP_SEP in self.name:
0.60 /testbed/django/db/models/fields/__init__.py(229):         elif self.name == 'pk':
0.60 /testbed/django/db/models/fields/__init__.py(238):             return []
0.60 /testbed/django/db/models/fields/__init__.py(200):             *self._check_choices(),
0.60 /testbed/django/db/models/fields/__init__.py(245):         if not self.choices:
0.60 /testbed/django/db/models/fields/__init__.py(246):             return []
0.60 /testbed/django/db/models/fields/__init__.py(201):             *self._check_db_index(),
0.60 /testbed/django/db/models/fields/__init__.py(309):         if self.db_index not in (None, True, False):
0.60 /testbed/django/db/models/fields/__init__.py(318):             return []
0.60 /testbed/django/db/models/fields/__init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.60 /testbed/django/db/models/fields/__init__.py(321):         if (self.primary_key and self.null and
0.60 /testbed/django/db/models/fields/__init__.py(336):             return []
0.60 /testbed/django/db/models/fields/__init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.60 /testbed/django/db/models/fields/__init__.py(339):         if databases is None:
0.60 /testbed/django/db/models/fields/__init__.py(341):         app_label = self.model._meta.app_label
0.60 /testbed/django/db/models/fields/__init__.py(342):         errors = []
0.60 /testbed/django/db/models/fields/__init__.py(343):         for alias in databases:
0.60 /testbed/django/db/models/fields/__init__.py(346):         return errors
0.60 /testbed/django/db/models/fields/__init__.py(204):             *self._check_validators(),
0.60 /testbed/django/db/models/fields/__init__.py(349):         errors = []
0.60 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.60 /testbed/django/db/models/fields/__init__.py(595):         return [*self.default_validators, *self._validators]
0.60 /testbed/django/db/models/fields/__init__.py(365):         return errors
0.60 /testbed/django/db/models/fields/__init__.py(205):             *self._check_deprecation_details(),
0.60 /testbed/django/db/models/fields/__init__.py(368):         if self.system_check_removed_details is not None:
0.60 /testbed/django/db/models/fields/__init__.py(381):         elif self.system_check_deprecated_details is not None:
0.60 /testbed/django/db/models/fields/__init__.py(393):         return []
0.60 /testbed/django/db/models/fields/__init__.py(734):         return self._unique or self.primary_key
0.60 /testbed/django/db/models/fields/__init__.py(734):         return self._unique or self.primary_key
0.60 /testbed/django/db/models/fields/__init__.py(734):         return self._unique or self.primary_key
0.60 /testbed/django/db/models/fields/__init__.py(734):         return self._unique or self.primary_key
0.60 /testbed/django/db/models/fields/__init__.py(199):             *self._check_field_name(),
0.60 /testbed/django/db/models/fields/__init__.py(213):         if self.name.endswith('_'):
0.60 /testbed/django/db/models/fields/__init__.py(221):         elif LOOKUP_SEP in self.name:
0.60 /testbed/django/db/models/fields/__init__.py(229):         elif self.name == 'pk':
0.60 /testbed/django/db/models/fields/__init__.py(238):             return []
0.60 /testbed/django/db/models/fields/__init__.py(200):             *self._check_choices(),
0.60 /testbed/django/db/models/fields/__init__.py(245):         if not self.choices:
0.60 /testbed/django/db/models/fields/__init__.py(246):             return []
0.60 /testbed/django/db/models/fields/__init__.py(201):             *self._check_db_index(),
0.60 /testbed/django/db/models/fields/__init__.py(309):         if self.db_index not in (None, True, False):
0.60 /testbed/django/db/models/fields/__init__.py(318):             return []
0.60 /testbed/django/db/models/fields/__init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.60 /testbed/django/db/models/fields/__init__.py(321):         if (self.primary_key and self.null and
0.60 /testbed/django/db/models/fields/__init__.py(336):             return []
0.60 /testbed/django/db/models/fields/__init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.60 /testbed/django/db/models/fields/__init__.py(339):         if databases is None:
0.60 /testbed/django/db/models/fields/__init__.py(341):         app_label = self.model._meta.app_label
0.60 /testbed/django/db/models/fields/__init__.py(342):         errors = []
0.60 /testbed/django/db/models/fields/__init__.py(343):         for alias in databases:
0.60 /testbed/django/db/models/fields/__init__.py(346):         return errors
0.60 /testbed/django/db/models/fields/__init__.py(204):             *self._check_validators(),
0.60 /testbed/django/db/models/fields/__init__.py(349):         errors = []
0.60 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.60 /testbed/django/db/models/fields/__init__.py(595):         return [*self.default_validators, *self._validators]
0.60 /testbed/django/db/models/fields/__init__.py(365):         return errors
0.60 /testbed/django/db/models/fields/__init__.py(205):             *self._check_deprecation_details(),
0.60 /testbed/django/db/models/fields/__init__.py(368):         if self.system_check_removed_details is not None:
0.60 /testbed/django/db/models/fields/__init__.py(381):         elif self.system_check_deprecated_details is not None:
0.60 /testbed/django/db/models/fields/__init__.py(393):         return []
0.60 /testbed/django/db/models/fields/__init__.py(991):             *super().check(**kwargs),
0.60 /testbed/django/db/models/fields/__init__.py(199):             *self._check_field_name(),
0.60 /testbed/django/db/models/fields/__init__.py(213):         if self.name.endswith('_'):
0.60 /testbed/django/db/models/fields/__init__.py(221):         elif LOOKUP_SEP in self.name:
0.60 /testbed/django/db/models/fields/__init__.py(229):         elif self.name == 'pk':
0.60 /testbed/django/db/models/fields/__init__.py(238):             return []
0.60 /testbed/django/db/models/fields/__init__.py(200):             *self._check_choices(),
0.60 /testbed/django/db/models/fields/__init__.py(245):         if not self.choices:
0.60 /testbed/django/db/models/fields/__init__.py(246):             return []
0.60 /testbed/django/db/models/fields/__init__.py(201):             *self._check_db_index(),
0.60 /testbed/django/db/models/fields/__init__.py(309):         if self.db_index not in (None, True, False):
0.60 /testbed/django/db/models/fields/__init__.py(318):             return []
0.60 /testbed/django/db/models/fields/__init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.60 /testbed/django/db/models/fields/__init__.py(321):         if (self.primary_key and self.null and
0.60 /testbed/django/db/models/fields/__init__.py(336):             return []
0.60 /testbed/django/db/models/fields/__init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.60 /testbed/django/db/models/fields/__init__.py(339):         if databases is None:
0.60 /testbed/django/db/models/fields/__init__.py(341):         app_label = self.model._meta.app_label
0.60 /testbed/django/db/models/fields/__init__.py(342):         errors = []
0.60 /testbed/django/db/models/fields/__init__.py(343):         for alias in databases:
0.60 /testbed/django/db/models/fields/__init__.py(346):         return errors
0.60 /testbed/django/db/models/fields/__init__.py(204):             *self._check_validators(),
0.60 /testbed/django/db/models/fields/__init__.py(349):         errors = []
0.60 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.60 /testbed/django/db/models/fields/__init__.py(351):             if not callable(validator):
0.60 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.60 /testbed/django/db/models/fields/__init__.py(365):         return errors
0.60 /testbed/django/db/models/fields/__init__.py(205):             *self._check_deprecation_details(),
0.60 /testbed/django/db/models/fields/__init__.py(368):         if self.system_check_removed_details is not None:
0.60 /testbed/django/db/models/fields/__init__.py(381):         elif self.system_check_deprecated_details is not None:
0.60 /testbed/django/db/models/fields/__init__.py(393):         return []
0.60 /testbed/django/db/models/fields/__init__.py(992):             *self._check_max_length_attribute(**kwargs),
0.60 /testbed/django/db/models/fields/__init__.py(996):         if self.max_length is None:
0.60 /testbed/django/db/models/fields/__init__.py(1004):         elif (not isinstance(self.max_length, int) or isinstance(self.max_length, bool) or
0.60 /testbed/django/db/models/fields/__init__.py(1005):                 self.max_length <= 0):
0.60 /testbed/django/db/models/fields/__init__.py(1014):             return []
0.60 /testbed/django/db/models/fields/__init__.py(1724):             *super().check(**kwargs),
0.60 /testbed/django/db/models/fields/__init__.py(199):             *self._check_field_name(),
0.60 /testbed/django/db/models/fields/__init__.py(213):         if self.name.endswith('_'):
0.60 /testbed/django/db/models/fields/__init__.py(221):         elif LOOKUP_SEP in self.name:
0.60 /testbed/django/db/models/fields/__init__.py(229):         elif self.name == 'pk':
0.60 /testbed/django/db/models/fields/__init__.py(238):             return []
0.60 /testbed/django/db/models/fields/__init__.py(200):             *self._check_choices(),
0.60 /testbed/django/db/models/fields/__init__.py(245):         if not self.choices:
0.60 /testbed/django/db/models/fields/__init__.py(248):         if not is_iterable(self.choices) or isinstance(self.choices, str):
0.60 /testbed/django/db/models/fields/__init__.py(257):         choice_max_length = 0
0.60 /testbed/django/db/models/fields/__init__.py(259):         for choices_group in self.choices:
0.60 /testbed/django/db/models/fields/__init__.py(260):             try:
0.60 /testbed/django/db/models/fields/__init__.py(261):                 group_name, group_choices = choices_group
0.60 /testbed/django/db/models/fields/__init__.py(265):             try:
0.60 /testbed/django/db/models/fields/__init__.py(266):                 if not all(
0.60 /testbed/django/db/models/fields/__init__.py(267):                     self._choices_is_value(value) and self._choices_is_value(human_name)
0.60 /testbed/django/db/models/fields/__init__.py(268):                     for value, human_name in group_choices
0.60 /testbed/django/db/models/fields/__init__.py(267):                     self._choices_is_value(value) and self._choices_is_value(human_name)
0.60 /testbed/django/db/models/fields/__init__.py(268):                     for value, human_name in group_choices
0.60 /testbed/django/db/models/fields/__init__.py(276):             except (TypeError, ValueError):
0.60 /testbed/django/db/models/fields/__init__.py(278):                 value, human_name = group_name, group_choices
0.60 /testbed/django/db/models/fields/__init__.py(279):                 if not self._choices_is_value(value) or not self._choices_is_value(human_name):
0.60 /testbed/django/db/models/fields/__init__.py(242):         return isinstance(value, (str, Promise)) or not is_iterable(value)
0.60 /testbed/django/db/models/fields/__init__.py(242):         return isinstance(value, (str, Promise)) or not is_iterable(value)
0.60 /testbed/django/db/models/fields/__init__.py(281):                 if self.max_length is not None and isinstance(value, str):
0.60 /testbed/django/db/models/fields/__init__.py(285):             if isinstance(choices_group, str):
0.60 /testbed/django/db/models/fields/__init__.py(259):         for choices_group in self.choices:
0.60 /testbed/django/db/models/fields/__init__.py(260):             try:
0.60 /testbed/django/db/models/fields/__init__.py(261):                 group_name, group_choices = choices_group
0.60 /testbed/django/db/models/fields/__init__.py(265):             try:
0.60 /testbed/django/db/models/fields/__init__.py(266):                 if not all(
0.60 /testbed/django/db/models/fields/__init__.py(267):                     self._choices_is_value(value) and self._choices_is_value(human_name)
0.60 /testbed/django/db/models/fields/__init__.py(268):                     for value, human_name in group_choices
0.60 /testbed/django/db/models/fields/__init__.py(267):                     self._choices_is_value(value) and self._choices_is_value(human_name)
0.60 /testbed/django/db/models/fields/__init__.py(268):                     for value, human_name in group_choices
0.60 /testbed/django/db/models/fields/__init__.py(276):             except (TypeError, ValueError):
0.60 /testbed/django/db/models/fields/__init__.py(278):                 value, human_name = group_name, group_choices
0.60 /testbed/django/db/models/fields/__init__.py(279):                 if not self._choices_is_value(value) or not self._choices_is_value(human_name):
0.60 /testbed/django/db/models/fields/__init__.py(242):         return isinstance(value, (str, Promise)) or not is_iterable(value)
0.60 /testbed/django/db/models/fields/__init__.py(242):         return isinstance(value, (str, Promise)) or not is_iterable(value)
0.60 /testbed/django/db/models/fields/__init__.py(281):                 if self.max_length is not None and isinstance(value, str):
0.60 /testbed/django/db/models/fields/__init__.py(285):             if isinstance(choices_group, str):
0.60 /testbed/django/db/models/fields/__init__.py(259):         for choices_group in self.choices:
0.60 /testbed/django/db/models/fields/__init__.py(260):             try:
0.60 /testbed/django/db/models/fields/__init__.py(261):                 group_name, group_choices = choices_group
0.60 /testbed/django/db/models/fields/__init__.py(265):             try:
0.60 /testbed/django/db/models/fields/__init__.py(266):                 if not all(
0.60 /testbed/django/db/models/fields/__init__.py(267):                     self._choices_is_value(value) and self._choices_is_value(human_name)
0.60 /testbed/django/db/models/fields/__init__.py(268):                     for value, human_name in group_choices
0.60 /testbed/django/db/models/fields/__init__.py(267):                     self._choices_is_value(value) and self._choices_is_value(human_name)
0.60 /testbed/django/db/models/fields/__init__.py(268):                     for value, human_name in group_choices
0.60 /testbed/django/db/models/fields/__init__.py(276):             except (TypeError, ValueError):
0.60 /testbed/django/db/models/fields/__init__.py(278):                 value, human_name = group_name, group_choices
0.60 /testbed/django/db/models/fields/__init__.py(279):                 if not self._choices_is_value(value) or not self._choices_is_value(human_name):
0.60 /testbed/django/db/models/fields/__init__.py(242):         return isinstance(value, (str, Promise)) or not is_iterable(value)
0.60 /testbed/django/db/models/fields/__init__.py(242):         return isinstance(value, (str, Promise)) or not is_iterable(value)
0.60 /testbed/django/db/models/fields/__init__.py(281):                 if self.max_length is not None and isinstance(value, str):
0.60 /testbed/django/db/models/fields/__init__.py(285):             if isinstance(choices_group, str):
0.60 /testbed/django/db/models/fields/__init__.py(259):         for choices_group in self.choices:
0.60 /testbed/django/db/models/fields/__init__.py(288):             if self.max_length is not None and choice_max_length > self.max_length:
0.60 /testbed/django/db/models/fields/__init__.py(297):             return []
0.60 /testbed/django/db/models/fields/__init__.py(201):             *self._check_db_index(),
0.60 /testbed/django/db/models/fields/__init__.py(309):         if self.db_index not in (None, True, False):
0.60 /testbed/django/db/models/fields/__init__.py(318):             return []
0.60 /testbed/django/db/models/fields/__init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.60 /testbed/django/db/models/fields/__init__.py(321):         if (self.primary_key and self.null and
0.60 /testbed/django/db/models/fields/__init__.py(336):             return []
0.60 /testbed/django/db/models/fields/__init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.60 /testbed/django/db/models/fields/__init__.py(339):         if databases is None:
0.60 /testbed/django/db/models/fields/__init__.py(341):         app_label = self.model._meta.app_label
0.60 /testbed/django/db/models/fields/__init__.py(342):         errors = []
0.60 /testbed/django/db/models/fields/__init__.py(343):         for alias in databases:
0.60 /testbed/django/db/models/fields/__init__.py(346):         return errors
0.60 /testbed/django/db/models/fields/__init__.py(204):             *self._check_validators(),
0.60 /testbed/django/db/models/fields/__init__.py(349):         errors = []
0.60 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.60 /testbed/django/db/models/fields/__init__.py(1744):         validators_ = super().validators
0.60 /testbed/django/db/models/fields/__init__.py(595):         return [*self.default_validators, *self._validators]
0.60 /testbed/django/db/models/fields/__init__.py(1745):         internal_type = self.get_internal_type()
0.60 /testbed/django/db/models/fields/__init__.py(2005):         return "PositiveSmallIntegerField"
0.60 /testbed/django/db/models/fields/__init__.py(1746):         min_value, max_value = connection.ops.integer_field_range(internal_type)
0.60 /testbed/django/db/models/fields/__init__.py(1747):         if min_value is not None and not any(
0.60 /testbed/django/db/models/fields/__init__.py(1757):         if max_value is not None and not any(
0.60 /testbed/django/db/models/fields/__init__.py(1767):         return validators_
0.60 /testbed/django/db/models/fields/__init__.py(365):         return errors
0.60 /testbed/django/db/models/fields/__init__.py(205):             *self._check_deprecation_details(),
0.60 /testbed/django/db/models/fields/__init__.py(368):         if self.system_check_removed_details is not None:
0.60 /testbed/django/db/models/fields/__init__.py(381):         elif self.system_check_deprecated_details is not None:
0.60 /testbed/django/db/models/fields/__init__.py(393):         return []
0.60 /testbed/django/db/models/fields/__init__.py(1725):             *self._check_max_length_warning(),
0.60 /testbed/django/db/models/fields/__init__.py(1729):         if self.max_length is not None:
0.60 /testbed/django/db/models/fields/__init__.py(1738):         return []
0.60 /testbed/django/db/models/fields/__init__.py(199):             *self._check_field_name(),
0.60 /testbed/django/db/models/fields/__init__.py(213):         if self.name.endswith('_'):
0.60 /testbed/django/db/models/fields/__init__.py(221):         elif LOOKUP_SEP in self.name:
0.60 /testbed/django/db/models/fields/__init__.py(229):         elif self.name == 'pk':
0.60 /testbed/django/db/models/fields/__init__.py(238):             return []
0.60 /testbed/django/db/models/fields/__init__.py(200):             *self._check_choices(),
0.60 /testbed/django/db/models/fields/__init__.py(245):         if not self.choices:
0.60 /testbed/django/db/models/fields/__init__.py(246):             return []
0.60 /testbed/django/db/models/fields/__init__.py(201):             *self._check_db_index(),
0.60 /testbed/django/db/models/fields/__init__.py(309):         if self.db_index not in (None, True, False):
0.60 /testbed/django/db/models/fields/__init__.py(318):             return []
0.60 /testbed/django/db/models/fields/__init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.60 /testbed/django/db/models/fields/__init__.py(321):         if (self.primary_key and self.null and
0.60 /testbed/django/db/models/fields/__init__.py(336):             return []
0.60 /testbed/django/db/models/fields/__init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.60 /testbed/django/db/models/fields/__init__.py(339):         if databases is None:
0.60 /testbed/django/db/models/fields/__init__.py(341):         app_label = self.model._meta.app_label
0.60 /testbed/django/db/models/fields/__init__.py(342):         errors = []
0.60 /testbed/django/db/models/fields/__init__.py(343):         for alias in databases:
0.60 /testbed/django/db/models/fields/__init__.py(346):         return errors
0.60 /testbed/django/db/models/fields/__init__.py(204):             *self._check_validators(),
0.60 /testbed/django/db/models/fields/__init__.py(349):         errors = []
0.60 /testbed/django/db/models/fields/__init__.py(350):         for i, validator in enumerate(self.validators):
0.60 /testbed/django/db/models/fields/__init__.py(595):         return [*self.default_validators, *self._validators]
test_to_python_with_dict_raises_validation_error (test_coverup_django__django-13023.DecimalFieldTest) ... ERROR

======================================================================
ERROR: test_to_python_with_dict_raises_validation_error (test_coverup_django__django-13023.DecimalFieldTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "./tests/test_coverup_django__django-13023.py", line 15, in test_to_python_with_dict_raises_validation_error
    decimal_field.to_python(invalid_input)
  File "/testbed/django/db/models/fields/__init__.py", line 1503, in to_python
    return decimal.Decimal(value)
TypeError: conversion from dict to Decimal is not supported

----------------------------------------------------------------------
Ran 1 test in 0.001s

FAILED (errors=1)
0.60 /testbed/django/db/models/fields/__init__.py(365):         return errors
0.60 /testbed/django/db/models/fields/__init__.py(205):             *self._check_deprecation_details(),
0.60 /testbed/django/db/models/fields/__init__.py(368):         if self.system_check_removed_details is not None:
0.60 /testbed/django/db/models/fields/__init__.py(381):         elif self.system_check_deprecated_details is not None:
0.60 /testbed/django/db/models/fields/__init__.py(393):         return []
0.60 /testbed/django/db/models/fields/__init__.py(518):         if isinstance(other, Field):
0.60 /testbed/django/db/models/fields/__init__.py(519):             return self.creation_counter == other.creation_counter
0.60 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.60 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.60 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.60 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.60 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.60 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.60 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.60 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.60 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.60 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.60 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.60 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.60 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.60 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.60 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.60 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.60 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.60 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.60 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.60 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
0.60 /testbed/django/db/models/fields/__init__.py(794):         attname = self.get_attname()
0.60 /testbed/django/db/models/fields/__init__.py(791):         return self.name
0.60 /testbed/django/db/models/fields/__init__.py(795):         column = self.db_column or attname
0.60 /testbed/django/db/models/fields/__init__.py(796):         return attname, column
System check identified no issues (0 silenced).
0.61 /testbed/django/db/models/fields/__init__.py(1401):         self.max_digits, self.decimal_places = max_digits, decimal_places
0.61 /testbed/django/db/models/fields/__init__.py(1402):         super().__init__(verbose_name, name, **kwargs)
0.61 /testbed/django/db/models/fields/__init__.py(138):         self.name = name
0.61 /testbed/django/db/models/fields/__init__.py(139):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.61 /testbed/django/db/models/fields/__init__.py(140):         self._verbose_name = verbose_name  # Store original for deconstruction
0.61 /testbed/django/db/models/fields/__init__.py(141):         self.primary_key = primary_key
0.61 /testbed/django/db/models/fields/__init__.py(142):         self.max_length, self._unique = max_length, unique
0.61 /testbed/django/db/models/fields/__init__.py(143):         self.blank, self.null = blank, null
0.61 /testbed/django/db/models/fields/__init__.py(144):         self.remote_field = rel
0.61 /testbed/django/db/models/fields/__init__.py(145):         self.is_relation = self.remote_field is not None
0.61 /testbed/django/db/models/fields/__init__.py(146):         self.default = default
0.61 /testbed/django/db/models/fields/__init__.py(147):         self.editable = editable
0.61 /testbed/django/db/models/fields/__init__.py(148):         self.serialize = serialize
0.61 /testbed/django/db/models/fields/__init__.py(149):         self.unique_for_date = unique_for_date
0.61 /testbed/django/db/models/fields/__init__.py(150):         self.unique_for_month = unique_for_month
0.61 /testbed/django/db/models/fields/__init__.py(151):         self.unique_for_year = unique_for_year
0.61 /testbed/django/db/models/fields/__init__.py(152):         if isinstance(choices, collections.abc.Iterator):
0.61 /testbed/django/db/models/fields/__init__.py(154):         self.choices = choices
0.61 /testbed/django/db/models/fields/__init__.py(155):         self.help_text = help_text
0.61 /testbed/django/db/models/fields/__init__.py(156):         self.db_index = db_index
0.61 /testbed/django/db/models/fields/__init__.py(157):         self.db_column = db_column
0.61 /testbed/django/db/models/fields/__init__.py(158):         self._db_tablespace = db_tablespace
0.61 /testbed/django/db/models/fields/__init__.py(159):         self.auto_created = auto_created
0.61 /testbed/django/db/models/fields/__init__.py(162):         if auto_created:
0.61 /testbed/django/db/models/fields/__init__.py(166):             self.creation_counter = Field.creation_counter
0.61 /testbed/django/db/models/fields/__init__.py(167):             Field.creation_counter += 1
0.61 /testbed/django/db/models/fields/__init__.py(169):         self._validators = list(validators)  # Store for deconstruction later
0.61 /testbed/django/db/models/fields/__init__.py(171):         messages = {}
0.61 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.61 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.61 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.61 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.61 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.61 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.61 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.61 /testbed/django/db/models/fields/__init__.py(173):             messages.update(getattr(c, 'default_error_messages', {}))
0.61 /testbed/django/db/models/fields/__init__.py(172):         for c in reversed(self.__class__.__mro__):
0.61 /testbed/django/db/models/fields/__init__.py(174):         messages.update(error_messages or {})
0.61 /testbed/django/db/models/fields/__init__.py(175):         self._error_messages = error_messages  # Store for deconstruction later
0.61 /testbed/django/db/models/fields/__init__.py(176):         self.error_messages = messages
0.61 /testbed/django/db/models/fields/__init__.py(1498):         if value is None:
0.61 /testbed/django/db/models/fields/__init__.py(1500):         if isinstance(value, float):
0.61 /testbed/django/db/models/fields/__init__.py(1502):         try:
0.61 /testbed/django/db/models/fields/__init__.py(1503):             return decimal.Decimal(value)
0.61 /testbed/django/db/models/fields/__init__.py(1504):         except decimal.InvalidOperation:
+ cat coverage.cover
{"/testbed/django/db/models/fields/__init__.py": {"1": 1, "2": 1, "3": 1, "4": 1, "5": 1, "6": 1, "7": 1, "8": 1, "9": 1, "11": 1, "12": 1, "13": 1, "14": 1, "15": 1, "16": 1, "17": 1, "18": 1, "19": 1, "20": 1, "23": 1, "24": 1, "25": 1, "26": 1, "27": 1, "28": 1, "31": 1, "32": 1, "33": 1, "34": 1, "35": 1, "36": 1, "37": 1, "38": 1, "42": 2, "46": 2, "52": 1, "55": 1, "74": 1, "80": 1, "84": 2, "85": 1, "936": 2, "982": 2, "1045": 2, "1061": 2, "1093": 2, "1236": 2, "1392": 2, "1527": 2, "1587": 2, "1611": 2, "1675": 2, "1715": 2, "1802": 2, "1817": 2, "1848": 2, "1928": 2, "1958": 2, "1975": 2, "1988": 2, "2001": 2, "2014": 2, "2047": 2, "2054": 2, "2080": 2, "2212": 2, "2235": 2, "2299": 2, "2352": 2, "2404": 2, "2432": 2, "2441": 2, "2450": 2, "43": 1, "47": 1, "56": 0, "75": 0, "76": 0, "77": 0, "81": 4, "90": 1, "91": 1, "96": 1, "97": 1, "98": 1, "100": 1, "101": 1, "102": 1, "103": 1, "107": 1, "110": 1, "111": 1, "114": 1, "116": 1, "117": 1, "118": 1, "119": 1, "120": 1, "122": 1, "125": 1, "129": 1, "131": 1, "132": 1, "133": 1, "134": 1, "135": 1, "136": 1, "137": 1, "178": 1, "189": 1, "197": 1, "208": 1, "240": 1, "244": 1, "308": 1, "320": 1, "338": 1, "348": 1, "367": 1, "395": 1, "404": 1, "409": 1, "417": 1, "508": 1, "516": 1, "522": 1, "528": 1, "531": 1, "542": 1, "550": 1, "570": 1, "581": 1, "589": 1, "597": 1, "613": 1, "644": 1, "655": 1, "658": 1, "670": 1, "696": 1, "704": 1, "711": 1, "724": 1, "727": 1, "732": 1, "736": 1, "740": 1, "748": 1, "755": 1, "783": 1, "790": 1, "793": 1, "798": 1, "801": 1, "805": 1, "811": 1, "821": 1, "825": 1, "829": 1, "833": 1, "844": 1, "870": 1, "877": 1, "888": 1, "890": 1, "893": 1, "931": 1, "126": 0, "127": 0, "138": 64, "139": 64, "140": 64, "141": 64, "142": 64, "143": 64, "144": 64, "145": 64, "146": 64, "147": 64, "148": 64, "149": 64, "150": 64, "151": 64, "152": 64, "153": 0, "154": 64, "155": 64, "156": 64, "157": 64, "158": 64, "159": 64, "162": 64, "163": 9, "164": 9, "166": 55, "167": 55, "169": 64, "171": 64, "172": 386, "173": 322, "174": 64, "175": 64, "176": 64, "183": 0, "184": 0, "185": 0, "186": 0, "187": 0, "191": 0, "192": 0, "193": 0, "194": 0, "195": 0, "199": 37, "200": 37, "201": 37, "202": 37, "203": 37, "204": 37, "205": 37, "213": 37, "215": 0, "216": 0, "217": 0, "218": 0, "221": 37, "223": 0, "224": 0, "225": 0, "226": 0, "229": 37, "231": 0, "232": 0, "233": 0, "234": 0, "238": 37, "242": 6, "245": 37, "246": 36, "248": 1, "250": 0, "251": 0, "252": 0, "253": 0, "257": 1, "259": 4, "260": 3, "261": 3, "262": 0, "264": 0, "265": 3, "266": 3, "267": 6, "268": 6, "270": 0, "271": 0, "272": 0, "273": 0, "274": 0, "276": 3, "278": 3, "279": 3, "280": 0, "281": 3, "282": 0, "285": 3, "286": 0, "288": 1, "290": 0, "291": 0, "292": 0, "293": 0, "294": 0, "297": 1, "300": 0, "301": 0, "303": 0, "304": 0, "309": 37, "311": 0, "312": 0, "313": 0, "314": 0, "318": 37, "321": 37, "322": 0, "327": 0, "328": 0, "329": 0, "331": 0, "332": 0, "336": 37, "339": 37, "340": 0, "341": 37, "342": 37, "343": 37, "344": 0, "345": 0, "346": 37, "349": 37, "350": 54, "351": 17, "352": 0, "353": 0, "354": 0, "356": 0, "358": 0, "361": 0, "362": 0, "365": 37, "368": 37, "370": 0, "371": 0, "372": 0, "373": 0, "374": 0, "376": 0, "377": 0, "378": 0, "381": 37, "383": 0, "384": 0, "385": 0, "386": 0, "388": 0, "389": 0, "390": 0, "393": 37, "396": 0, "397": 0, "398": 0, "399": 0, "400": 0, "402": 0, "406": 0, "407": 0, "415": 0, "450": 0, "452": 0, "453": 0, "454": 0, "455": 0, "456": 0, "457": 0, "458": 0, "459": 0, "460": 0, "461": 0, "462": 0, "463": 0, "464": 0, "465": 0, "466": 0, "467": 0, "468": 0, "469": 0, "470": 0, "471": 0, "474": 0, "475": 0, "476": 0, "477": 0, "478": 0, "480": 0, "481": 0, "482": 0, "484": 0, "485": 0, "487": 0, "488": 0, "489": 0, "491": 0, "492": 0, "494": 0, "495": 0, "496": 0, "497": 0, "498": 0, "499": 0, "500": 0, "501": 0, "502": 0, "503": 0, "504": 0, "506": 0, "513": 0, "514": 0, "518": 15, "519": 15, "520": 0, "524": 84, "525": 84, "526": 0, "529": 0, "534": 20, "535": 20, "536": 4, "537": 4, "538": 4, "539": 20, "540": 20, "545": 20, "546": 20, "547": 20, "548": 20, "556": 0, "562": 0, "565": 0, "566": 0, "567": 0, "568": 0, "577": 0, "578": 0, "579": 0, "587": 0, "595": 37, "598": 0, "599": 0, "601": 0, "602": 0, "603": 0, "604": 0, "605": 0, "606": 0, "607": 0, "608": 0, "610": 0, "611": 0, "618": 0, "620": 0, "622": 0, "623": 0, "624": 0, "627": 0, "628": 0, "629": 0, "630": 0, "631": 0, "632": 0, "633": 0, "634": 0, "635": 0, "638": 0, "639": 0, "641": 0, "642": 0, "650": 0, "651": 0, "652": 0, "653": 0, "656": 0, "664": 0, "665": 0, "666": 0, "667": 0, "668": 0, "690": 0, "691": 0, "692": 0, "693": 0, "694": 0, "702": 0, "706": 0, "707": 0, "708": 0, "709": 0, "717": 0, "718": 0, "720": 0, "721": 0, "725": 0, "728": 0, "729": 0, "730": 0, "734": 26, "738": 6, "746": 0, "749": 66, "750": 66, "751": 66, "752": 66, "753": 7, "762": 66, "763": 66, "764": 66, "765": 66, "769": 66, "770": 45, "771": 66, "776": 1, "777": 1, "778": 1, "779": 1, "780": 1, "788": 0, "791": 91, "794": 88, "795": 88, "796": 88, "799": 0, "803": 0, "807": 0, "808": 0, "809": 0, "817": 0, "818": 0, "819": 0, "823": 0, "827": 19, "831": 22, "835": 11, "836": 4, "837": 1, "838": 9, "840": 7, "841": 2, "842": 5, "849": 0, "850": 0, "851": 0, "852": 0, "853": 0, "854": 0, "855": 0, "856": 0, "857": 0, "858": 0, "860": 0, "861": 0, "863": 0, "864": 0, "865": 0, "866": 0, "867": 0, "875": 0, "879": 0, "880": 0, "881": 0, "882": 0, "883": 0, "884": 0, "886": 0, "887": 0, "891": 0, "896": 0, "897": 0, "898": 0, "900": 0, "901": 0, "902": 0, "903": 0, "905": 0, "906": 0, "908": 0, "909": 0, "910": 0, "911": 0, "912": 0, "913": 0, "914": 0, "915": 0, "917": 0, "921": 0, "922": 0, "924": 0, "925": 0, "926": 0, "927": 0, "928": 0, "929": 0, "933": 0, "937": 1, "939": 1, "940": 1, "942": 1, "944": 1, "947": 1, "963": 1, "969": 1, "945": 0, "948": 0, "949": 0, "950": 0, "952": 0, "953": 0, "954": 0, "955": 0, "956": 0, "957": 0, "958": 0, "959": 0, "960": 0, "964": 0, "965": 0, "966": 0, "967": 0, "970": 0, "971": 0, "972": 0, "974": 0, "978": 0, "979": 0, "983": 1, "985": 1, "989": 1, "995": 1, "1016": 1, "1021": 1, "1024": 1, "1029": 1, "1033": 1, "986": 14, "987": 14, "991": 14, "992": 14, "996": 14, "998": 0, "999": 0, "1000": 0, "1001": 0, "1004": 14, "1005": 14, "1007": 0, "1008": 0, "1009": 0, "1010": 0, "1014": 14, "1017": 0, "1018": 0, "1019": 0, "1022": 0, "1025": 0, "1026": 0, "1027": 0, "1030": 0, "1031": 0, "1037": 0, "1039": 0, "1040": 0, "1041": 0, "1042": 0, "1046": 1, "1047": 1, "1050": 1, "1054": 1, "1057": 1, "1063": 1, "1070": 1, "1089": 1, "1065": 4, "1066": 4, "1067": 4, "1074": 4, "1075": 20, "1076": 4, "1078": 0, "1079": 0, "1082": 0, "1083": 0, "1087": 4, "1090": 0, "1094": 1, "1096": 1, "1098": 1, "1101": 1, "1104": 1, "1111": 1, "1151": 1, "1162": 1, "1165": 1, "1195": 1, "1203": 1, "1215": 1, "1219": 1, "1225": 1, "1229": 1, "1105": 6, "1106": 6, "1107": 0, "1108": 0, "1109": 6, "1116": 0, "1117": 0, "1119": 0, "1120": 0, "1121": 0, "1122": 0, "1123": 0, "1124": 0, "1125": 0, "1126": 0, "1127": 0, "1129": 0, "1132": 0, "1133": 0, "1134": 0, "1135": 0, "1136": 0, "1138": 0, "1139": 0, "1140": 0, "1144": 0, "1145": 0, "1149": 0, "1152": 0, "1153": 0, "1154": 0, "1155": 0, "1156": 0, "1157": 0, "1158": 0, "1159": 0, "1160": 0, "1163": 0, "1166": 0, "1167": 0, "1168": 0, "1169": 0, "1172": 0, "1173": 0, "1174": 0, "1175": 0, "1176": 0, "1178": 0, "1179": 0, "1180": 0, "1181": 0, "1182": 0, "1183": 0, "1184": 0, "1185": 0, "1186": 0, "1189": 0, "1190": 0, "1191": 0, "1192": 0, "1196": 0, "1197": 0, "1198": 0, "1199": 0, "1201": 0, "1204": 8, "1205": 8, "1206": 5, "1207": 5, "1208": 5, "1210": 5, "1211": 5, "1212": 5, "1216": 0, "1217": 0, "1221": 0, "1222": 0, "1223": 0, "1226": 0, "1227": 0, "1230": 0, "1231": 0, "1232": 0, "1237": 1, "1239": 1, "1241": 1, "1243": 1, "1247": 1, "1251": 1, "1294": 1, "1297": 1, "1345": 1, "1356": 1, "1375": 1, "1381": 1, "1385": 1, "1256": 4, "1257": 2, "1259": 2, "1260": 2, "1261": 0, "1262": 2, "1263": 2, "1264": 0, "1265": 0, "1266": 0, "1267": 0, "1268": 0, "1269": 2, "1270": 0, "1271": 0, "1272": 0, "1273": 0, "1274": 0, "1275": 0, "1278": 2, "1279": 0, "1281": 0, "1282": 0, "1283": 0, "1287": 0, "1288": 0, "1292": 0, "1295": 0, "1298": 0, "1299": 0, "1300": 0, "1301": 0, "1302": 0, "1303": 0, "1304": 0, "1309": 0, "1311": 0, "1312": 0, "1313": 0, "1314": 0, "1315": 0, "1317": 0, "1318": 0, "1319": 0, "1320": 0, "1321": 0, "1322": 0, "1323": 0, "1324": 0, "1325": 0, "1328": 0, "1329": 0, "1330": 0, "1331": 0, "1332": 0, "1333": 0, "1334": 0, "1335": 0, "1336": 0, "1339": 0, "1340": 0, "1341": 0, "1342": 0, "1346": 0, "1347": 0, "1348": 0, "1349": 0, "1351": 0, "1357": 0, "1358": 0, "1359": 0, "1363": 0, "1364": 0, "1365": 0, "1366": 0, "1367": 0, "1369": 0, "1370": 0, "1371": 0, "1372": 0, "1373": 0, "1377": 0, "1378": 0, "1379": 0, "1382": 0, "1383": 0, "1386": 0, "1387": 0, "1388": 0, "1393": 1, "1395": 1, "1397": 1, "1400": 1, "1404": 1, "1417": 1, "1441": 1, "1465": 1, "1476": 1, "1482": 1, "1486": 1, "1494": 1, "1497": 1, "1511": 1, "1514": 1, "1518": 1, "1401": 1, "1402": 1, "1405": 0, "1408": 0, "1409": 0, "1411": 0, "1412": 0, "1414": 0, "1415": 0, "1418": 0, "1419": 0, "1420": 0, "1421": 0, "1422": 0, "1424": 0, "1425": 0, "1426": 0, "1427": 0, "1430": 0, "1432": 0, "1433": 0, "1434": 0, "1435": 0, "1439": 0, "1442": 0, "1443": 0, "1444": 0, "1445": 0, "1446": 0, "1448": 0, "1449": 0, "1450": 0, "1451": 0, "1454": 0, "1456": 0, "1457": 0, "1458": 0, "1459": 0, "1463": 0, "1466": 0, "1468": 0, "1469": 0, "1470": 0, "1471": 0, "1474": 0, "1478": 0, "1479": 0, "1484": 0, "1487": 0, "1488": 0, "1489": 0, "1490": 0, "1491": 0, "1492": 0, "1495": 0, "1498": 1, "1499": 0, "1500": 1, "1501": 0, "1502": 1, "1503": 1, "1504": 1, "1505": 0, "1506": 0, "1507": 0, "1508": 0, "1512": 0, "1515": 0, "1516": 0, "1519": 0, "1520": 0, "1521": 0, "1522": 0, "1523": 0, "1534": 1, "1536": 1, "1539": 1, "1541": 1, "1544": 1, "1563": 1, "1570": 1, "1576": 1, "1580": 1, "1542": 0, "1545": 0, "1546": 0, "1547": 0, "1548": 0, "1549": 0, "1550": 0, "1551": 0, "1552": 0, "1554": 0, "1555": 0, "1557": 0, "1558": 0, "1559": 0, "1560": 0, "1564": 0, "1565": 0, "1566": 0, "1567": 0, "1568": 0, "1571": 0, "1572": 0, "1573": 0, "1574": 0, "1577": 0, "1578": 0, "1581": 0, "1582": 0, "1583": 0, "1588": 1, "1589": 1, "1591": 1, "1596": 1, "1602": 1, "1593": 1, "1594": 1, "1597": 0, "1600": 0, "1605": 0, "1606": 0, "1607": 0, "1612": 1, "1615": 1, "1621": 1, "1627": 1, "1638": 1, "1654": 1, "1660": 1, "1671": 1, "1616": 0, "1617": 0, "1618": 0, "1619": 0, "1623": 0, "1624": 0, "1628": 0, "1630": 0, "1631": 0, "1632": 0, "1633": 0, "1636": 0, "1639": 0, "1640": 0, "1641": 0, "1642": 0, "1643": 0, "1644": 0, "1645": 0, "1646": 0, "1647": 0, "1648": 0, "1649": 0, "1650": 0, "1651": 0, "1652": 0, "1655": 0, "1656": 0, "1657": 0, "1658": 0, "1661": 0, "1662": 0, "1663": 0, "1664": 0, "1665": 0, "1666": 0, "1667": 0, "1668": 0, "1672": 0, "1676": 1, "1678": 1, "1680": 1, "1682": 1, "1693": 1, "1696": 1, "1708": 1, "1683": 0, "1684": 0, "1685": 0, "1686": 0, "1687": 0, "1688": 0, "1689": 0, "1690": 0, "1691": 0, "1694": 0, "1697": 0, "1698": 0, "1699": 0, "1700": 0, "1701": 0, "1702": 0, "1703": 0, "1704": 0, "1705": 0, "1709": 0, "1710": 0, "1711": 0, "1716": 1, "1718": 1, "1720": 1, "1722": 1, "1728": 1, "1740": 1, "1769": 1, "1780": 1, "1783": 1, "1795": 1, "1724": 7, "1725": 7, "1729": 7, "1731": 0, "1732": 0, "1733": 0, "1734": 0, "1735": 0, "1738": 7, "1744": 7, "1745": 7, "1746": 7, "1747": 7, "1748": 0, "1754": 0, "1756": 0, "1757": 7, "1758": 0, "1764": 0, "1766": 0, "1767": 7, "1770": 0, "1771": 0, "1772": 0, "1773": 0, "1774": 0, "1775": 0, "1776": 0, "1777": 0, "1778": 0, "1781": 0, "1784": 0, "1785": 0, "1786": 0, "1787": 0, "1788": 0, "1789": 0, "1790": 0, "1791": 0, "1792": 0, "1796": 0, "1797": 0, "1798": 0, "1803": 1, "1804": 1, "1806": 1, "1809": 1, "1807": 0, "1810": 0, "1811": 0, "1812": 0, "1813": 0, "1818": 1, "1819": 1, "1822": 1, "1825": 1, "1826": 1, "1829": 1, "1833": 1, "1838": 1, "1844": 1, "1830": 0, "1831": 0, "1834": 0, "1835": 0, "1836": 0, "1839": 0, "1840": 0, "1841": 0, "1842": 0, "1845": 0, "1849": 1, "1850": 1, "1851": 1, "1854": 1, "1863": 1, "1869": 1, "1881": 1, "1891": 1, "1894": 1, "1904": 1, "1909": 1, "1920": 1, "1855": 0, "1856": 0, "1858": 0, "1859": 0, "1860": 0, "1861": 0, "1865": 0, "1866": 0, "1870": 0, "1872": 0, "1873": 0, "1875": 0, "1876": 0, "1879": 0, "1882": 0, "1883": 0, "1884": 0, "1885": 0, "1886": 0, "1887": 0, "1888": 0, "1889": 0, "1892": 0, "1895": 0, "1896": 0, "1897": 0, "1898": 0, "1899": 0, "1900": 0, "1901": 0, "1902": 0, "1905": 0, "1906": 0, "1907": 0, "1910": 0, "1911": 0, "1912": 0, "1913": 0, "1914": 0, "1915": 0, "1916": 0, "1917": 0, "1918": 0, "1921": 0, "1922": 0, "1923": 0, "1924": 0, "1930": 1, "1931": 1, "1933": 1, "1936": 1, "1939": 1, "1940": 1, "1943": 1, "1948": 1, "1954": 1, "1944": 0, "1945": 0, "1946": 0, "1949": 0, "1950": 0, "1951": 0, "1952": 0, "1955": 0, "1960": 1, "1969": 0, "1970": 0, "1972": 0, "1976": 1, "1978": 1, "1981": 1, "1979": 0, "1982": 0, "1983": 0, "1984": 0, "1989": 1, "1991": 1, "1994": 1, "1992": 0, "1995": 0, "1996": 0, "1997": 0, "2002": 1, "2004": 1, "2007": 1, "2005": 1, "2008": 0, "2009": 0, "2010": 0, "2015": 1, "2016": 1, "2018": 1, "2024": 1, "2036": 1, "2039": 1, "2019": 0, "2020": 0, "2021": 0, "2022": 0, "2025": 0, "2026": 0, "2027": 0, "2028": 0, "2029": 0, "2031": 0, "2032": 0, "2033": 0, "2034": 0, "2037": 0, "2040": 0, "2041": 0, "2042": 0, "2043": 0, "2048": 1, "2050": 1, "2051": 0, "2055": 1, "2057": 1, "2060": 1, "2065": 1, "2069": 1, "2058": 0, "2061": 0, "2062": 0, "2063": 0, "2066": 0, "2067": 0, "2073": 0, "2074": 0, "2075": 0, "2076": 0, "2081": 1, "2083": 1, "2085": 1, "2088": 1, "2091": 1, "2098": 1, "2141": 1, "2152": 1, "2155": 1, "2183": 1, "2191": 1, "2195": 1, "2201": 1, "2205": 1, "2092": 1, "2093": 1, "2094": 0, "2095": 0, "2096": 1, "2103": 0, "2104": 0, "2106": 0, "2107": 0, "2108": 0, "2109": 0, "2110": 0, "2111": 0, "2112": 0, "2113": 0, "2114": 0, "2115": 0, "2116": 0, "2117": 0, "2118": 0, "2119": 0, "2120": 0, "2121": 0, "2122": 0, "2125": 0, "2126": 0, "2128": 0, "2129": 0, "2130": 0, "2134": 0, "2135": 0, "2139": 0, "2142": 0, "2143": 0, "2144": 0, "2145": 0, "2146": 0, "2147": 0, "2148": 0, "2149": 0, "2150": 0, "2153": 0, "2156": 0, "2157": 0, "2158": 0, "2159": 0, "2160": 0, "2164": 0, "2166": 0, "2167": 0, "2168": 0, "2169": 0, "2170": 0, "2171": 0, "2172": 0, "2173": 0, "2174": 0, "2177": 0, "2178": 0, "2179": 0, "2180": 0, "2184": 0, "2185": 0, "2186": 0, "2187": 0, "2189": 0, "2192": 0, "2193": 0, "2197": 0, "2198": 0, "2199": 0, "2202": 0, "2203": 0, "2206": 0, "2207": 0, "2208": 0, "2213": 1, "2214": 1, "2216": 1, "2220": 1, "2226": 1, "2217": 0, "2218": 0, "2221": 0, "2222": 0, "2223": 0, "2224": 0, "2229": 0, "2230": 0, "2231": 0, "2236": 1, "2237": 1, "2239": 1, "2245": 1, "2248": 1, "2260": 1, "2268": 1, "2271": 1, "2274": 1, "2282": 1, "2288": 1, "2292": 1, "2240": 0, "2241": 0, "2242": 0, "2243": 0, "2246": 0, "2249": 0, "2251": 0, "2252": 0, "2254": 0, "2255": 0, "2258": 0, "2261": 0, "2262": 0, "2263": 0, "2265": 0, "2266": 0, "2269": 0, "2272": 0, "2275": 0, "2276": 0, "2277": 0, "2278": 0, "2279": 0, "2280": 0, "2283": 0, "2284": 0, "2285": 0, "2286": 0, "2290": 0, "2294": 0, "2295": 0, "2296": 0, "2301": 1, "2303": 1, "2304": 1, "2306": 1, "2310": 1, "2315": 1, "2318": 1, "2322": 1, "2332": 1, "2345": 1, "2307": 0, "2308": 0, "2311": 0, "2312": 0, "2313": 0, "2316": 0, "2319": 0, "2320": 0, "2323": 0, "2324": 0, "2325": 0, "2326": 0, "2328": 0, "2329": 0, "2330": 0, "2333": 0, "2334": 0, "2335": 0, "2336": 0, "2337": 0, "2338": 0, "2339": 0, "2340": 0, "2341": 0, "2343": 0, "2346": 0, "2347": 0, "2348": 0, "2353": 1, "2355": 1, "2359": 1, "2365": 1, "2377": 1, "2383": 1, "2386": 1, "2392": 1, "2400": 1, "2356": 9, "2357": 9, "2361": 6, "2362": 6, "2366": 6, "2368": 0, "2369": 0, "2370": 0, "2371": 0, "2375": 6, "2378": 0, "2379": 0, "2380": 0, "2381": 0, "2384": 0, "2387": 0, "2388": 0, "2389": 0, "2390": 0, "2393": 9, "2394": 0, "2395": 0, "2397": 9, "2398": 9, "2401": 0, "2421": 1, "2425": 1, "2428": 1, "2423": 0, "2426": 0, "2429": 0, "2434": 1, "2437": 1, "2435": 6, "2438": 0, "2443": 1, "2446": 1, "2444": 0, "2447": 0, "2452": 1, "2455": 1, "2453": 0, "2456": 0}}
+ git checkout f83b44075dafa429d59e8755aa47e15577cc49f9
Note: switching to 'f83b44075dafa429d59e8755aa47e15577cc49f9'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at f83b44075d Refs #30913 -- Added system checks for covering indexes and unique constraints support.
+ git apply /root/pre_state.patch
error: unrecognized input
