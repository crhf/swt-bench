{"instance_id": "django__django-15503", "repo": "django/django", "version": "4.1", "environment_setup_commit": "647480166bfe7532e8c471fef0146e3a17e6c0c9", "patch_list": ["diff --git a/dev/null b/tests/test_coverup_django__django-15503.py\nnew file mode 100644\nindex e69de29..14cc80e 100644\n--- /dev/null\n+++ b/tests/test_coverup_django__django-15503.py\n@@ -0,0 +1,49 @@\n+from django.test import TestCase\n+from django.test.utils import override_settings\n+from django.db import models, connection\n+\n+# Define the model with JSONField\n+class JsonFieldHasKeyTest(models.Model):\n+    data = models.JSONField()\n+\n+    class Meta:\n+        app_label = 'tests'  # Use 'tests' as the app label to avoid KeyError\n+\n+# Test case for the issue\n+@override_settings(DATABASES={\n+    'default': {\n+        'ENGINE': 'django.db.backends.sqlite3',\n+        'NAME': ':memory:',  # Use in-memory database for testing\n+    }\n+})\n+class JsonFieldHasKeyTestCase(TestCase):\n+    @classmethod\n+    def setUpClass(cls):\n+        super().setUpClass()\n+        # Create the table manually since migrations are not applied in-memory\n+        with connection.cursor() as cursor:\n+            cursor.execute('PRAGMA foreign_keys = OFF;')\n+            cursor.execute('''\n+                CREATE TABLE tests_jsonfieldhaskeytest (\n+                    id INTEGER PRIMARY KEY AUTOINCREMENT,\n+                    data JSON NOT NULL\n+                );\n+            ''')\n+            cursor.execute('PRAGMA foreign_keys = ON;')\n+\n+    def setUp(self):\n+        # Insert test data with numeric keys\n+        JsonFieldHasKeyTest.objects.create(data={'foo': 'bar'})\n+        JsonFieldHasKeyTest.objects.create(data={'1111': 'bar'})\n+\n+    def test_json_field_has_key(self):\n+        # Perform has_key lookup for numeric keys\n+        c1 = JsonFieldHasKeyTest.objects.filter(data__has_key='foo').count()\n+        c2 = JsonFieldHasKeyTest.objects.filter(data__has_key='1111').count()\n+        \n+        # Assert that the count of found entries with the string key is 1\n+        self.assertEqual(c1, 1, \"Should have found 1 entry with key 'foo'\")\n+        \n+        # Assert that the count of found entries with the numeric key is 1\n+        self.assertEqual(c2, 1, \"Should have found 1 entry with key '1111'\")\n+\n"], "arch": "x86_64", "base_commit": "859a87d873ce7152af73ab851653b4e1c3ffea4c", "test_directives": ["test_coverup_django__django-15503"], "coverage_files": ["django/db/models/fields/json.py"], "env_name": "testbed", "run_id": "assertflip", "patch_id": "pred_pre__AssertFlip", "timeout": 1800, "rm_image": false, "force_rebuild": false, "exec_mode": "unit_test", "reproduction_script_name": null, "compute_coverage": true, "install": {"python": "3.9", "packages": "requirements.txt", "install": "python -m pip install -e ."}, "cache_level": "instance", "test_command": "python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/db/models/fields/json\\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-15503", "req_install_commands": ["conda create -n testbed python=3.9 -y", "cat <<'EOF_59812759871' > $HOME/requirements.txt\naiosmtpd\nasgiref >= 3.4.1\nargon2-cffi >= 16.1.0\nbackports.zoneinfo; python_version < '3.9'\nbcrypt\nblack\ndocutils\ngeoip2\njinja2 >= 2.9.2\nnumpy\nPillow >= 6.2.0\npylibmc; sys.platform != 'win32'\npymemcache >= 3.4.0\npytz\npywatchman; sys.platform != 'win32'\nPyYAML\nredis >= 3.0.0\nselenium\nsqlparse >= 0.2.2\ntblib >= 1.5.0\ntzdata\ncolorama; sys.platform == 'win32'\n\nEOF_59812759871", "conda activate testbed && python -m pip install -r $HOME/requirements.txt", "rm $HOME/requirements.txt"]}