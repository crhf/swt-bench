+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD 41d211c24a6781843b174379d6d6538f5c17adb9
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
nothing to commit, working tree clean
+ git show
commit 41d211c24a6781843b174379d6d6538f5c17adb9
Author: Ran Benita <ran@unusedvar.com>
Date:   Mon Jul 20 17:24:39 2020 +0300

    testing: use a tighter check if `bash` is available (#7520)
    
    This fixes CI on Windows since GitHub Actions started installing WSL on
    their images which apparently installs some wrapper `bash` which does
    not run actual bash.

diff --git a/testing/test_parseopt.py b/testing/test_parseopt.py
index 8cfb9e4a9..59b729d94 100644
--- a/testing/test_parseopt.py
+++ b/testing/test_parseopt.py
@@ -1,7 +1,7 @@
 import argparse
 import os
 import shlex
-import shutil
+import subprocess
 import sys
 
 import py
@@ -288,8 +288,19 @@ class TestParser:
 
 
 def test_argcomplete(testdir, monkeypatch) -> None:
-    if not shutil.which("bash"):
-        pytest.skip("bash not available")
+    try:
+        bash_version = subprocess.run(
+            ["bash", "--version"],
+            stdout=subprocess.PIPE,
+            stderr=subprocess.PIPE,
+            universal_newlines=True,
+        ).stdout
+    except OSError:
+        pytest.skip("bash is not available")
+    if "GNU bash" not in bash_version:
+        # See #7518.
+        pytest.skip("not a real bash")
+
     script = str(testdir.tmpdir.join("test_argcomplete"))
 
     with open(str(script), "w") as fp:
+ git diff 41d211c24a6781843b174379d6d6538f5c17adb9
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Checking if build backend supports build_editable: started
  Checking if build backend supports build_editable: finished with status 'done'
  Getting requirements to build editable: started
  Getting requirements to build editable: finished with status 'done'
  Preparing editable metadata (pyproject.toml): started
  Preparing editable metadata (pyproject.toml): finished with status 'done'
Requirement already satisfied: attrs>=17.4.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest==6.0.0rc2.dev51+g41d211c24) (23.1.0)
Requirement already satisfied: iniconfig in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest==6.0.0rc2.dev51+g41d211c24) (2.0.0)
Requirement already satisfied: more-itertools>=4.0.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest==6.0.0rc2.dev51+g41d211c24) (10.1.0)
Requirement already satisfied: packaging in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest==6.0.0rc2.dev51+g41d211c24) (23.1)
Requirement already satisfied: pluggy<1.0,>=0.12 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest==6.0.0rc2.dev51+g41d211c24) (0.13.1)
Requirement already satisfied: py>=1.8.2 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest==6.0.0rc2.dev51+g41d211c24) (1.11.0)
Requirement already satisfied: toml in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest==6.0.0rc2.dev51+g41d211c24) (0.10.2)
Building wheels for collected packages: pytest
  Building editable for pytest (pyproject.toml): started
  Building editable for pytest (pyproject.toml): finished with status 'done'
  Created wheel for pytest: filename=pytest-6.0.0rc2.dev51+g41d211c24-0.editable-py3-none-any.whl size=5185 sha256=4f4a5541b2b31b56d10388a8cd18e146a0a7fe862e105e4119a720ef63b2ddc4
  Stored in directory: /tmp/pip-ephem-wheel-cache-2jg8hjug/wheels/7d/66/67/70d1ee2124ccf21d601c352e25cdca10f611f7c8b3f9ffb9e4
Successfully built pytest
Installing collected packages: pytest
  Attempting uninstall: pytest
    Found existing installation: pytest 6.0.0rc2.dev51+g41d211c24
    Uninstalling pytest-6.0.0rc2.dev51+g41d211c24:
      Successfully uninstalled pytest-6.0.0rc2.dev51+g41d211c24
Successfully installed pytest-6.0.0rc2.dev51+g41d211c24
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git apply -v -
Checking patch testing/test_coverup_pytest-dev__pytest-7521.py...
Applied patch testing/test_coverup_pytest-dev__pytest-7521.py cleanly.
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(src/_pytest/capture\.py)' -m pytest -rA testing/test_coverup_pytest-dev__pytest-7521.py
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(src/_pytest/capture\\.py)']
0.13 /testbed/src/_pytest/capture.py(1): """
0.13 /testbed/src/_pytest/capture.py(5): import collections
0.13 /testbed/src/_pytest/capture.py(6): import contextlib
0.13 /testbed/src/_pytest/capture.py(7): import io
0.13 /testbed/src/_pytest/capture.py(8): import os
0.13 /testbed/src/_pytest/capture.py(9): import sys
0.13 /testbed/src/_pytest/capture.py(10): from io import UnsupportedOperation
0.13 /testbed/src/_pytest/capture.py(11): from tempfile import TemporaryFile
0.13 /testbed/src/_pytest/capture.py(12): from typing import Generator
0.13 /testbed/src/_pytest/capture.py(13): from typing import Optional
0.13 /testbed/src/_pytest/capture.py(14): from typing import TextIO
0.13 /testbed/src/_pytest/capture.py(15): from typing import Tuple
0.13 /testbed/src/_pytest/capture.py(16): from typing import Union
0.13 /testbed/src/_pytest/capture.py(18): import pytest
0.13 /testbed/src/_pytest/capture.py(19): from _pytest.compat import TYPE_CHECKING
0.13 /testbed/src/_pytest/capture.py(20): from _pytest.config import Config
0.13 /testbed/src/_pytest/capture.py(21): from _pytest.config.argparsing import Parser
0.13 /testbed/src/_pytest/capture.py(22): from _pytest.fixtures import SubRequest
0.13 /testbed/src/_pytest/capture.py(23): from _pytest.nodes import Collector
0.13 /testbed/src/_pytest/capture.py(24): from _pytest.nodes import Item
0.13 /testbed/src/_pytest/capture.py(26): if TYPE_CHECKING:
0.13 /testbed/src/_pytest/capture.py(32): def pytest_addoption(parser: Parser) -> None:
0.13 /testbed/src/_pytest/capture.py(51): def _colorama_workaround() -> None:
0.13 /testbed/src/_pytest/capture.py(67): def _readline_workaround() -> None:
0.13 /testbed/src/_pytest/capture.py(92): def _py36_windowsconsoleio_workaround(stream: TextIO) -> None:
0.13 /testbed/src/_pytest/capture.py(150): @pytest.hookimpl(hookwrapper=True)
0.13 /testbed/src/_pytest/capture.py(151): def pytest_load_initial_conftests(early_config: Config):
0.13 /testbed/src/_pytest/capture.py(177): class EncodedFile(io.TextIOWrapper):
0.13 /testbed/src/_pytest/capture.py(177): class EncodedFile(io.TextIOWrapper):
0.13 /testbed/src/_pytest/capture.py(178):     __slots__ = ()
0.13 /testbed/src/_pytest/capture.py(180):     @property
0.13 /testbed/src/_pytest/capture.py(181):     def name(self) -> str:
0.13 /testbed/src/_pytest/capture.py(186):     @property
0.13 /testbed/src/_pytest/capture.py(187):     def mode(self) -> str:
0.13 /testbed/src/_pytest/capture.py(193): class CaptureIO(io.TextIOWrapper):
0.13 /testbed/src/_pytest/capture.py(193): class CaptureIO(io.TextIOWrapper):
0.13 /testbed/src/_pytest/capture.py(194):     def __init__(self) -> None:
0.13 /testbed/src/_pytest/capture.py(197):     def getvalue(self) -> str:
0.13 /testbed/src/_pytest/capture.py(202): class TeeCaptureIO(CaptureIO):
0.13 /testbed/src/_pytest/capture.py(202): class TeeCaptureIO(CaptureIO):
0.13 /testbed/src/_pytest/capture.py(203):     def __init__(self, other: TextIO) -> None:
0.13 /testbed/src/_pytest/capture.py(207):     def write(self, s: str) -> int:
0.13 /testbed/src/_pytest/capture.py(212): class DontReadFromInput:
0.13 /testbed/src/_pytest/capture.py(212): class DontReadFromInput:
0.13 /testbed/src/_pytest/capture.py(213):     encoding = None
0.13 /testbed/src/_pytest/capture.py(215):     def read(self, *args):
0.13 /testbed/src/_pytest/capture.py(220):     readline = read
0.13 /testbed/src/_pytest/capture.py(221):     readlines = read
0.13 /testbed/src/_pytest/capture.py(222):     __next__ = read
0.13 /testbed/src/_pytest/capture.py(224):     def __iter__(self):
0.13 /testbed/src/_pytest/capture.py(227):     def fileno(self) -> int:
0.13 /testbed/src/_pytest/capture.py(230):     def isatty(self) -> bool:
0.13 /testbed/src/_pytest/capture.py(233):     def close(self) -> None:
0.13 /testbed/src/_pytest/capture.py(236):     @property
0.13 /testbed/src/_pytest/capture.py(237):     def buffer(self):
0.13 /testbed/src/_pytest/capture.py(244): patchsysdict = {0: "stdin", 1: "stdout", 2: "stderr"}
0.13 /testbed/src/_pytest/capture.py(247): class NoCapture:
0.13 /testbed/src/_pytest/capture.py(247): class NoCapture:
0.13 /testbed/src/_pytest/capture.py(248):     EMPTY_BUFFER = None
0.13 /testbed/src/_pytest/capture.py(249):     __init__ = start = done = suspend = resume = lambda *args: None
0.13 /testbed/src/_pytest/capture.py(252): class SysCaptureBinary:
0.13 /testbed/src/_pytest/capture.py(252): class SysCaptureBinary:
0.13 /testbed/src/_pytest/capture.py(254):     EMPTY_BUFFER = b""
0.13 /testbed/src/_pytest/capture.py(256):     def __init__(self, fd: int, tmpfile=None, *, tee: bool = False) -> None:
0.13 /testbed/src/_pytest/capture.py(268):     def repr(self, class_name: str) -> str:
0.13 /testbed/src/_pytest/capture.py(277):     def __repr__(self) -> str:
0.13 /testbed/src/_pytest/capture.py(286):     def _assert_state(self, op: str, states: Tuple[str, ...]) -> None:
0.13 /testbed/src/_pytest/capture.py(293):     def start(self) -> None:
0.13 /testbed/src/_pytest/capture.py(298):     def snap(self):
0.13 /testbed/src/_pytest/capture.py(306):     def done(self) -> None:
0.13 /testbed/src/_pytest/capture.py(315):     def suspend(self) -> None:
0.13 /testbed/src/_pytest/capture.py(320):     def resume(self) -> None:
0.13 /testbed/src/_pytest/capture.py(327):     def writeorg(self, data) -> None:
0.13 /testbed/src/_pytest/capture.py(334): class SysCapture(SysCaptureBinary):
0.13 /testbed/src/_pytest/capture.py(334): class SysCapture(SysCaptureBinary):
0.13 /testbed/src/_pytest/capture.py(335):     EMPTY_BUFFER = ""  # type: ignore[assignment]
0.13 /testbed/src/_pytest/capture.py(337):     def snap(self):
0.13 /testbed/src/_pytest/capture.py(343):     def writeorg(self, data):
0.13 /testbed/src/_pytest/capture.py(349): class FDCaptureBinary:
0.13 /testbed/src/_pytest/capture.py(349): class FDCaptureBinary:
0.13 /testbed/src/_pytest/capture.py(350):     """Capture IO to/from a given os-level filedescriptor.
0.13 /testbed/src/_pytest/capture.py(355):     EMPTY_BUFFER = b""
0.13 /testbed/src/_pytest/capture.py(357):     def __init__(self, targetfd: int) -> None:
0.13 /testbed/src/_pytest/capture.py(400):     def __repr__(self) -> str:
0.13 /testbed/src/_pytest/capture.py(409):     def _assert_state(self, op: str, states: Tuple[str, ...]) -> None:
0.13 /testbed/src/_pytest/capture.py(416):     def start(self) -> None:
0.13 /testbed/src/_pytest/capture.py(423):     def snap(self):
0.13 /testbed/src/_pytest/capture.py(431):     def done(self) -> None:
0.13 /testbed/src/_pytest/capture.py(447):     def suspend(self) -> None:
0.13 /testbed/src/_pytest/capture.py(455):     def resume(self) -> None:
0.13 /testbed/src/_pytest/capture.py(463):     def writeorg(self, data):
0.13 /testbed/src/_pytest/capture.py(469): class FDCapture(FDCaptureBinary):
0.13 /testbed/src/_pytest/capture.py(469): class FDCapture(FDCaptureBinary):
0.13 /testbed/src/_pytest/capture.py(470):     """Capture IO to/from a given os-level filedescriptor.
0.13 /testbed/src/_pytest/capture.py(476):     EMPTY_BUFFER = ""  # type: ignore
0.13 /testbed/src/_pytest/capture.py(478):     def snap(self):
0.13 /testbed/src/_pytest/capture.py(486):     def writeorg(self, data):
0.13 /testbed/src/_pytest/capture.py(493): CaptureResult = collections.namedtuple("CaptureResult", ["out", "err"])
0.13 /testbed/src/_pytest/capture.py(496): class MultiCapture:
0.13 /testbed/src/_pytest/capture.py(496): class MultiCapture:
0.13 /testbed/src/_pytest/capture.py(497):     _state = None
0.13 /testbed/src/_pytest/capture.py(498):     _in_suspended = False
0.13 /testbed/src/_pytest/capture.py(500):     def __init__(self, in_, out, err) -> None:
0.13 /testbed/src/_pytest/capture.py(505):     def __repr__(self) -> str:
0.13 /testbed/src/_pytest/capture.py(510):     def start_capturing(self) -> None:
0.13 /testbed/src/_pytest/capture.py(519):     def pop_outerr_to_orig(self):
0.13 /testbed/src/_pytest/capture.py(528):     def suspend_capturing(self, in_: bool = False) -> None:
0.13 /testbed/src/_pytest/capture.py(538):     def resume_capturing(self) -> None:
0.13 /testbed/src/_pytest/capture.py(548):     def stop_capturing(self) -> None:
0.13 /testbed/src/_pytest/capture.py(560):     def readouterr(self) -> CaptureResult:
0.13 /testbed/src/_pytest/capture.py(572): def _get_multicapture(method: "_CaptureMethod") -> MultiCapture:
0.13 /testbed/src/_pytest/capture.py(589): class CaptureManager:
0.13 /testbed/src/_pytest/capture.py(589): class CaptureManager:
0.13 /testbed/src/_pytest/capture.py(590):     """
0.13 /testbed/src/_pytest/capture.py(602):     def __init__(self, method: "_CaptureMethod") -> None:
0.13 /testbed/src/_pytest/capture.py(607):     def __repr__(self) -> str:
0.13 /testbed/src/_pytest/capture.py(612):     def is_capturing(self) -> Union[str, bool]:
0.13 /testbed/src/_pytest/capture.py(621):     def is_globally_capturing(self) -> bool:
0.13 /testbed/src/_pytest/capture.py(624):     def start_global_capturing(self) -> None:
0.13 /testbed/src/_pytest/capture.py(629):     def stop_global_capturing(self) -> None:
0.13 /testbed/src/_pytest/capture.py(635):     def resume_global_capture(self) -> None:
0.13 /testbed/src/_pytest/capture.py(641):     def suspend_global_capture(self, in_: bool = False) -> None:
0.13 /testbed/src/_pytest/capture.py(645):     def suspend(self, in_: bool = False) -> None:
0.13 /testbed/src/_pytest/capture.py(650):     def resume(self) -> None:
0.13 /testbed/src/_pytest/capture.py(654):     def read_global_capture(self):
0.13 /testbed/src/_pytest/capture.py(660):     def set_fixture(self, capture_fixture: "CaptureFixture") -> None:
0.13 /testbed/src/_pytest/capture.py(671):     def unset_fixture(self) -> None:
0.13 /testbed/src/_pytest/capture.py(674):     def activate_fixture(self) -> None:
0.13 /testbed/src/_pytest/capture.py(681):     def deactivate_fixture(self) -> None:
0.13 /testbed/src/_pytest/capture.py(686):     def suspend_fixture(self) -> None:
0.13 /testbed/src/_pytest/capture.py(690):     def resume_fixture(self) -> None:
0.13 /testbed/src/_pytest/capture.py(696):     @contextlib.contextmanager
0.13 /testbed/src/_pytest/capture.py(697):     def global_and_fixture_disabled(self) -> Generator[None, None, None]:
0.13 /testbed/src/_pytest/capture.py(705):     @contextlib.contextmanager
0.13 /testbed/src/_pytest/capture.py(706):     def item_capture(self, when: str, item: Item) -> Generator[None, None, None]:
0.13 /testbed/src/_pytest/capture.py(721):     @pytest.hookimpl(hookwrapper=True)
0.13 /testbed/src/_pytest/capture.py(722):     def pytest_make_collect_report(self, collector: Collector):
0.13 /testbed/src/_pytest/capture.py(736):     @pytest.hookimpl(hookwrapper=True)
0.13 /testbed/src/_pytest/capture.py(737):     def pytest_runtest_setup(self, item: Item) -> Generator[None, None, None]:
0.13 /testbed/src/_pytest/capture.py(741):     @pytest.hookimpl(hookwrapper=True)
0.13 /testbed/src/_pytest/capture.py(742):     def pytest_runtest_call(self, item: Item) -> Generator[None, None, None]:
0.13 /testbed/src/_pytest/capture.py(746):     @pytest.hookimpl(hookwrapper=True)
0.13 /testbed/src/_pytest/capture.py(747):     def pytest_runtest_teardown(self, item: Item) -> Generator[None, None, None]:
0.13 /testbed/src/_pytest/capture.py(751):     @pytest.hookimpl(tryfirst=True)
0.13 /testbed/src/_pytest/capture.py(752):     def pytest_keyboard_interrupt(self) -> None:
0.13 /testbed/src/_pytest/capture.py(755):     @pytest.hookimpl(tryfirst=True)
0.13 /testbed/src/_pytest/capture.py(756):     def pytest_internalerror(self) -> None:
0.13 /testbed/src/_pytest/capture.py(760): class CaptureFixture:
0.13 /testbed/src/_pytest/capture.py(760): class CaptureFixture:
0.13 /testbed/src/_pytest/capture.py(761):     """
0.13 /testbed/src/_pytest/capture.py(766):     def __init__(self, captureclass, request: SubRequest) -> None:
0.13 /testbed/src/_pytest/capture.py(773):     def _start(self) -> None:
0.13 /testbed/src/_pytest/capture.py(780):     def close(self) -> None:
0.13 /testbed/src/_pytest/capture.py(788):     def readouterr(self):
0.13 /testbed/src/_pytest/capture.py(802):     def _suspend(self) -> None:
0.13 /testbed/src/_pytest/capture.py(807):     def _resume(self) -> None:
0.13 /testbed/src/_pytest/capture.py(812):     @contextlib.contextmanager
0.13 /testbed/src/_pytest/capture.py(813):     def disabled(self) -> Generator[None, None, None]:
0.13 /testbed/src/_pytest/capture.py(823): @pytest.fixture
0.13 /testbed/src/_pytest/capture.py(824): def capsys(request: SubRequest) -> Generator[CaptureFixture, None, None]:
0.13 /testbed/src/_pytest/capture.py(840): @pytest.fixture
0.13 /testbed/src/_pytest/capture.py(841): def capsysbinary(request: SubRequest) -> Generator[CaptureFixture, None, None]:
0.13 /testbed/src/_pytest/capture.py(857): @pytest.fixture
0.13 /testbed/src/_pytest/capture.py(858): def capfd(request: SubRequest) -> Generator[CaptureFixture, None, None]:
0.13 /testbed/src/_pytest/capture.py(874): @pytest.fixture
0.13 /testbed/src/_pytest/capture.py(875): def capfdbinary(request: SubRequest) -> Generator[CaptureFixture, None, None]:
0.13 /testbed/src/_pytest/capture.py(33):     group = parser.getgroup("general")
0.13 /testbed/src/_pytest/capture.py(34):     group._addoption(
0.13 /testbed/src/_pytest/capture.py(35):         "--capture",
0.13 /testbed/src/_pytest/capture.py(36):         action="store",
0.13 /testbed/src/_pytest/capture.py(37):         default="fd",
0.13 /testbed/src/_pytest/capture.py(38):         metavar="method",
0.13 /testbed/src/_pytest/capture.py(39):         choices=["fd", "sys", "no", "tee-sys"],
0.13 /testbed/src/_pytest/capture.py(40):         help="per-test capturing method: one of fd|sys|no|tee-sys.",
0.13 /testbed/src/_pytest/capture.py(34):     group._addoption(
0.13 /testbed/src/_pytest/capture.py(42):     group._addoption(
0.13 /testbed/src/_pytest/capture.py(43):         "-s",
0.13 /testbed/src/_pytest/capture.py(44):         action="store_const",
0.13 /testbed/src/_pytest/capture.py(45):         const="no",
0.13 /testbed/src/_pytest/capture.py(46):         dest="capture",
0.13 /testbed/src/_pytest/capture.py(47):         help="shortcut for --capture=no.",
0.13 /testbed/src/_pytest/capture.py(42):     group._addoption(
0.25 /testbed/src/_pytest/capture.py(152):     ns = early_config.known_args_namespace
0.25 /testbed/src/_pytest/capture.py(153):     if ns.capture == "fd":
0.25 /testbed/src/_pytest/capture.py(154):         _py36_windowsconsoleio_workaround(sys.stdout)
0.25 /testbed/src/_pytest/capture.py(115):         not sys.platform.startswith("win32")
0.25 /testbed/src/_pytest/capture.py(114):     if (
0.25 /testbed/src/_pytest/capture.py(119):         return
0.25 /testbed/src/_pytest/capture.py(155):     _colorama_workaround()
0.25 /testbed/src/_pytest/capture.py(60):     if sys.platform.startswith("win32"):
0.25 /testbed/src/_pytest/capture.py(156):     _readline_workaround()
0.25 /testbed/src/_pytest/capture.py(85):     if sys.platform.startswith("win32"):
0.25 /testbed/src/_pytest/capture.py(157):     pluginmanager = early_config.pluginmanager
0.25 /testbed/src/_pytest/capture.py(158):     capman = CaptureManager(ns.capture)
0.25 /testbed/src/_pytest/capture.py(603):         self._method = method
0.25 /testbed/src/_pytest/capture.py(604):         self._global_capturing = None  # type: Optional[MultiCapture]
0.25 /testbed/src/_pytest/capture.py(605):         self._capture_fixture = None  # type: Optional[CaptureFixture]
0.25 /testbed/src/_pytest/capture.py(159):     pluginmanager.register(capman, "capturemanager")
0.25 /testbed/src/_pytest/capture.py(162):     early_config.add_cleanup(capman.stop_global_capturing)
0.25 /testbed/src/_pytest/capture.py(165):     capman.start_global_capturing()
0.25 /testbed/src/_pytest/capture.py(625):         assert self._global_capturing is None
0.25 /testbed/src/_pytest/capture.py(626):         self._global_capturing = _get_multicapture(self._method)
0.25 /testbed/src/_pytest/capture.py(573):     if method == "fd":
0.25 /testbed/src/_pytest/capture.py(574):         return MultiCapture(in_=FDCapture(0), out=FDCapture(1), err=FDCapture(2))
0.25 /testbed/src/_pytest/capture.py(358):         self.targetfd = targetfd
0.25 /testbed/src/_pytest/capture.py(360):         try:
0.25 /testbed/src/_pytest/capture.py(361):             os.fstat(targetfd)
0.25 /testbed/src/_pytest/capture.py(379):             self.targetfd_invalid = None
0.25 /testbed/src/_pytest/capture.py(380):         self.targetfd_save = os.dup(targetfd)
0.25 /testbed/src/_pytest/capture.py(382):         if targetfd == 0:
0.25 /testbed/src/_pytest/capture.py(383):             self.tmpfile = open(os.devnull)
0.25 /testbed/src/_pytest/capture.py(384):             self.syscapture = SysCapture(targetfd)
0.25 /testbed/src/_pytest/capture.py(257):         name = patchsysdict[fd]
0.25 /testbed/src/_pytest/capture.py(258):         self._old = getattr(sys, name)
0.25 /testbed/src/_pytest/capture.py(259):         self.name = name
0.25 /testbed/src/_pytest/capture.py(260):         if tmpfile is None:
0.25 /testbed/src/_pytest/capture.py(261):             if name == "stdin":
0.25 /testbed/src/_pytest/capture.py(262):                 tmpfile = DontReadFromInput()
0.25 /testbed/src/_pytest/capture.py(265):         self.tmpfile = tmpfile
0.25 /testbed/src/_pytest/capture.py(266):         self._state = "initialized"
0.25 /testbed/src/_pytest/capture.py(398):         self._state = "initialized"
0.25 /testbed/src/_pytest/capture.py(358):         self.targetfd = targetfd
0.25 /testbed/src/_pytest/capture.py(360):         try:
0.25 /testbed/src/_pytest/capture.py(361):             os.fstat(targetfd)
0.25 /testbed/src/_pytest/capture.py(379):             self.targetfd_invalid = None
0.25 /testbed/src/_pytest/capture.py(380):         self.targetfd_save = os.dup(targetfd)
0.25 /testbed/src/_pytest/capture.py(382):         if targetfd == 0:
0.25 /testbed/src/_pytest/capture.py(386):             self.tmpfile = EncodedFile(
0.25 /testbed/src/_pytest/capture.py(388):                 TemporaryFile(buffering=0),  # type: ignore[arg-type]
0.25 /testbed/src/_pytest/capture.py(389):                 encoding="utf-8",
0.25 /testbed/src/_pytest/capture.py(390):                 errors="replace",
0.25 /testbed/src/_pytest/capture.py(391):                 write_through=True,
0.25 /testbed/src/_pytest/capture.py(386):             self.tmpfile = EncodedFile(
0.25 /testbed/src/_pytest/capture.py(393):             if targetfd in patchsysdict:
0.25 /testbed/src/_pytest/capture.py(394):                 self.syscapture = SysCapture(targetfd, self.tmpfile)
0.25 /testbed/src/_pytest/capture.py(257):         name = patchsysdict[fd]
0.25 /testbed/src/_pytest/capture.py(258):         self._old = getattr(sys, name)
0.25 /testbed/src/_pytest/capture.py(259):         self.name = name
0.25 /testbed/src/_pytest/capture.py(260):         if tmpfile is None:
0.25 /testbed/src/_pytest/capture.py(265):         self.tmpfile = tmpfile
0.25 /testbed/src/_pytest/capture.py(266):         self._state = "initialized"
0.25 /testbed/src/_pytest/capture.py(398):         self._state = "initialized"
0.25 /testbed/src/_pytest/capture.py(358):         self.targetfd = targetfd
0.25 /testbed/src/_pytest/capture.py(360):         try:
0.25 /testbed/src/_pytest/capture.py(361):             os.fstat(targetfd)
0.25 /testbed/src/_pytest/capture.py(379):             self.targetfd_invalid = None
0.25 /testbed/src/_pytest/capture.py(380):         self.targetfd_save = os.dup(targetfd)
0.25 /testbed/src/_pytest/capture.py(382):         if targetfd == 0:
0.25 /testbed/src/_pytest/capture.py(386):             self.tmpfile = EncodedFile(
0.25 /testbed/src/_pytest/capture.py(388):                 TemporaryFile(buffering=0),  # type: ignore[arg-type]
0.25 /testbed/src/_pytest/capture.py(389):                 encoding="utf-8",
0.25 /testbed/src/_pytest/capture.py(390):                 errors="replace",
0.25 /testbed/src/_pytest/capture.py(391):                 write_through=True,
0.25 /testbed/src/_pytest/capture.py(386):             self.tmpfile = EncodedFile(
0.25 /testbed/src/_pytest/capture.py(393):             if targetfd in patchsysdict:
0.25 /testbed/src/_pytest/capture.py(394):                 self.syscapture = SysCapture(targetfd, self.tmpfile)
0.25 /testbed/src/_pytest/capture.py(257):         name = patchsysdict[fd]
0.25 /testbed/src/_pytest/capture.py(258):         self._old = getattr(sys, name)
0.25 /testbed/src/_pytest/capture.py(259):         self.name = name
0.25 /testbed/src/_pytest/capture.py(260):         if tmpfile is None:
0.25 /testbed/src/_pytest/capture.py(265):         self.tmpfile = tmpfile
0.25 /testbed/src/_pytest/capture.py(266):         self._state = "initialized"
0.25 /testbed/src/_pytest/capture.py(398):         self._state = "initialized"
0.25 /testbed/src/_pytest/capture.py(501):         self.in_ = in_
0.25 /testbed/src/_pytest/capture.py(502):         self.out = out
0.25 /testbed/src/_pytest/capture.py(503):         self.err = err
0.25 /testbed/src/_pytest/capture.py(627):         self._global_capturing.start_capturing()
0.25 /testbed/src/_pytest/capture.py(511):         self._state = "started"
0.25 /testbed/src/_pytest/capture.py(512):         if self.in_:
0.25 /testbed/src/_pytest/capture.py(513):             self.in_.start()
0.25 /testbed/src/_pytest/capture.py(418):         self._assert_state("start", ("initialized",))
0.25 /testbed/src/_pytest/capture.py(411):             self._state in states
0.25 /testbed/src/_pytest/capture.py(410):         assert (
0.25 /testbed/src/_pytest/capture.py(419):         os.dup2(self.tmpfile.fileno(), self.targetfd)
0.25 /testbed/src/_pytest/capture.py(420):         self.syscapture.start()
0.25 /testbed/src/_pytest/capture.py(294):         self._assert_state("start", ("initialized",))
0.25 /testbed/src/_pytest/capture.py(288):             self._state in states
0.25 /testbed/src/_pytest/capture.py(287):         assert (
0.25 /testbed/src/_pytest/capture.py(295):         setattr(sys, self.name, self.tmpfile)
0.25 /testbed/src/_pytest/capture.py(296):         self._state = "started"
0.25 /testbed/src/_pytest/capture.py(421):         self._state = "started"
0.25 /testbed/src/_pytest/capture.py(514):         if self.out:
0.25 /testbed/src/_pytest/capture.py(515):             self.out.start()
0.25 /testbed/src/_pytest/capture.py(418):         self._assert_state("start", ("initialized",))
0.25 /testbed/src/_pytest/capture.py(411):             self._state in states
0.25 /testbed/src/_pytest/capture.py(410):         assert (
0.25 /testbed/src/_pytest/capture.py(419):         os.dup2(self.tmpfile.fileno(), self.targetfd)
0.25 /testbed/src/_pytest/capture.py(420):         self.syscapture.start()
0.25 /testbed/src/_pytest/capture.py(294):         self._assert_state("start", ("initialized",))
0.25 /testbed/src/_pytest/capture.py(288):             self._state in states
0.25 /testbed/src/_pytest/capture.py(287):         assert (
0.25 /testbed/src/_pytest/capture.py(295):         setattr(sys, self.name, self.tmpfile)
0.26 /testbed/src/_pytest/capture.py(318):         self._state = "suspended"
0.26 /testbed/src/_pytest/capture.py(452):         os.dup2(self.targetfd_save, self.targetfd)
0.26 /testbed/src/_pytest/capture.py(453):         self._state = "suspended"
0.26 /testbed/src/_pytest/capture.py(532):         if self.err:
0.26 /testbed/src/_pytest/capture.py(533):             self.err.suspend()
0.26 /testbed/src/_pytest/capture.py(448):         self._assert_state("suspend", ("started", "suspended"))
0.26 /testbed/src/_pytest/capture.py(411):             self._state in states
0.26 /testbed/src/_pytest/capture.py(410):         assert (
0.26 /testbed/src/_pytest/capture.py(449):         if self._state == "suspended":
0.26 /testbed/src/_pytest/capture.py(451):         self.syscapture.suspend()
0.26 /testbed/src/_pytest/capture.py(316):         self._assert_state("suspend", ("started", "suspended"))
0.26 /testbed/src/_pytest/capture.py(288):             self._state in states
0.26 /testbed/src/_pytest/capture.py(287):         assert (
0.26 /testbed/src/_pytest/capture.py(317):         setattr(sys, self.name, self._old)
0.26 /testbed/src/_pytest/capture.py(318):         self._state = "suspended"
0.26 /testbed/src/_pytest/capture.py(452):         os.dup2(self.targetfd_save, self.targetfd)
0.26 /testbed/src/_pytest/capture.py(453):         self._state = "suspended"
0.26 /testbed/src/_pytest/capture.py(534):         if in_ and self.in_:
0.26 /testbed/src/_pytest/capture.py(168):     if outcome.excinfo is not None:
============================= test session starts ==============================
platform linux -- Python 3.9.23, pytest-6.0.0rc2.dev51+g41d211c24, py-1.11.0, pluggy-0.13.1
rootdir: /testbed, configfile: pyproject.toml
0.28 /testbed/src/_pytest/capture.py(723):         if isinstance(collector, pytest.File):
0.28 /testbed/src/_pytest/capture.py(734):             yield
0.28 /testbed/src/_pytest/capture.py(723):         if isinstance(collector, pytest.File):
0.28 /testbed/src/_pytest/capture.py(724):             self.resume_global_capture()
0.28 /testbed/src/_pytest/capture.py(638):         if self._global_capturing is not None:
0.28 /testbed/src/_pytest/capture.py(639):             self._global_capturing.resume_capturing()
0.28 /testbed/src/_pytest/capture.py(539):         self._state = "resumed"
0.28 /testbed/src/_pytest/capture.py(540):         if self.out:
0.28 /testbed/src/_pytest/capture.py(541):             self.out.resume()
0.28 /testbed/src/_pytest/capture.py(456):         self._assert_state("resume", ("started", "suspended"))
0.28 /testbed/src/_pytest/capture.py(411):             self._state in states
0.28 /testbed/src/_pytest/capture.py(410):         assert (
0.28 /testbed/src/_pytest/capture.py(457):         if self._state == "started":
0.28 /testbed/src/_pytest/capture.py(459):         self.syscapture.resume()
0.28 /testbed/src/_pytest/capture.py(321):         self._assert_state("resume", ("started", "suspended"))
0.28 /testbed/src/_pytest/capture.py(288):             self._state in states
0.28 /testbed/src/_pytest/capture.py(287):         assert (
0.28 /testbed/src/_pytest/capture.py(322):         if self._state == "started":
0.28 /testbed/src/_pytest/capture.py(324):         setattr(sys, self.name, self.tmpfile)
0.28 /testbed/src/_pytest/capture.py(318):         self._state = "suspended"
0.28 /testbed/src/_pytest/capture.py(452):         os.dup2(self.targetfd_save, self.targetfd)
0.28 /testbed/src/_pytest/capture.py(453):         self._state = "suspended"
0.28 /testbed/src/_pytest/capture.py(532):         if self.err:
0.28 /testbed/src/_pytest/capture.py(533):             self.err.suspend()
0.28 /testbed/src/_pytest/capture.py(448):         self._assert_state("suspend", ("started", "suspended"))
0.28 /testbed/src/_pytest/capture.py(411):             self._state in states
0.28 /testbed/src/_pytest/capture.py(410):         assert (
0.28 /testbed/src/_pytest/capture.py(449):         if self._state == "suspended":
0.28 /testbed/src/_pytest/capture.py(451):         self.syscapture.suspend()
0.28 /testbed/src/_pytest/capture.py(316):         self._assert_state("suspend", ("started", "suspended"))
0.28 /testbed/src/_pytest/capture.py(288):             self._state in states
0.28 /testbed/src/_pytest/capture.py(287):         assert (
0.28 /testbed/src/_pytest/capture.py(317):         setattr(sys, self.name, self._old)
0.28 /testbed/src/_pytest/capture.py(318):         self._state = "suspended"
0.28 /testbed/src/_pytest/capture.py(452):         os.dup2(self.targetfd_save, self.targetfd)
0.28 /testbed/src/_pytest/capture.py(453):         self._state = "suspended"
0.28 /testbed/src/_pytest/capture.py(534):         if in_ and self.in_:
0.28 /testbed/src/_pytest/capture.py(727):             out, err = self.read_global_capture()
0.28 /testbed/src/_pytest/capture.py(655):         assert self._global_capturing is not None
0.28 /testbed/src/_pytest/capture.py(656):         return self._global_capturing.readouterr()
0.28 /testbed/src/_pytest/capture.py(561):         if self.out:
0.28 /testbed/src/_pytest/capture.py(562):             out = self.out.snap()
0.28 /testbed/src/_pytest/capture.py(479):         self._assert_state("snap", ("started", "suspended"))
0.28 /testbed/src/_pytest/capture.py(411):             self._state in states
0.28 /testbed/src/_pytest/capture.py(410):         assert (
0.28 /testbed/src/_pytest/capture.py(480):         self.tmpfile.seek(0)
0.28 /testbed/src/_pytest/capture.py(481):         res = self.tmpfile.read()
0.28 /testbed/src/_pytest/capture.py(482):         self.tmpfile.seek(0)
0.28 /testbed/src/_pytest/capture.py(483):         self.tmpfile.truncate()
0.28 /testbed/src/_pytest/capture.py(484):         return res
0.28 /testbed/src/_pytest/capture.py(565):         if self.err:
0.28 /testbed/src/_pytest/capture.py(566):             err = self.err.snap()
0.28 /testbed/src/_pytest/capture.py(479):         self._assert_state("snap", ("started", "suspended"))
0.28 /testbed/src/_pytest/capture.py(411):             self._state in states
0.28 /testbed/src/_pytest/capture.py(410):         assert (
0.28 /testbed/src/_pytest/capture.py(480):         self.tmpfile.seek(0)
0.28 /testbed/src/_pytest/capture.py(481):         res = self.tmpfile.read()
0.28 /testbed/src/_pytest/capture.py(482):         self.tmpfile.seek(0)
0.28 /testbed/src/_pytest/capture.py(483):         self.tmpfile.truncate()
0.28 /testbed/src/_pytest/capture.py(484):         return res
0.28 /testbed/src/_pytest/capture.py(569):         return CaptureResult(out, err)
0.28 /testbed/src/_pytest/capture.py(728):             rep = outcome.get_result()
0.28 /testbed/src/_pytest/capture.py(729):             if out:
0.28 /testbed/src/_pytest/capture.py(730):                 rep.sections.append(("Captured stdout", out))
0.28 /testbed/src/_pytest/capture.py(731):             if err:
collected 1 item

testing/test_coverup_pytest-dev__pytest-7521.py 0.28 /testbed/src/_pytest/capture.py(738):         with self.item_capture("setup", item):
0.28 /testbed/src/_pytest/capture.py(707):         self.resume_global_capture()
0.28 /testbed/src/_pytest/capture.py(638):         if self._global_capturing is not None:
0.28 /testbed/src/_pytest/capture.py(639):             self._global_capturing.resume_capturing()
0.28 /testbed/src/_pytest/capture.py(539):         self._state = "resumed"
0.28 /testbed/src/_pytest/capture.py(540):         if self.out:
0.28 /testbed/src/_pytest/capture.py(541):             self.out.resume()
0.28 /testbed/src/_pytest/capture.py(456):         self._assert_state("resume", ("started", "suspended"))
0.28 /testbed/src/_pytest/capture.py(411):             self._state in states
0.28 /testbed/src/_pytest/capture.py(410):         assert (
0.28 /testbed/src/_pytest/capture.py(457):         if self._state == "started":
0.28 /testbed/src/_pytest/capture.py(459):         self.syscapture.resume()
0.28 /testbed/src/_pytest/capture.py(321):         self._assert_state("resume", ("started", "suspended"))
0.28 /testbed/src/_pytest/capture.py(288):             self._state in states
0.28 /testbed/src/_pytest/capture.py(287):         assert (
0.28 /testbed/src/_pytest/capture.py(322):         if self._state == "started":
0.28 /testbed/src/_pytest/capture.py(324):         setattr(sys, self.name, self.tmpfile)
0.28 /testbed/src/_pytest/capture.py(318):         self._state = "suspended"
0.28 /testbed/src/_pytest/capture.py(452):         os.dup2(self.targetfd_save, self.targetfd)
0.28 /testbed/src/_pytest/capture.py(453):         self._state = "suspended"
0.28 /testbed/src/_pytest/capture.py(532):         if self.err:
0.28 /testbed/src/_pytest/capture.py(533):             self.err.suspend()
0.28 /testbed/src/_pytest/capture.py(448):         self._assert_state("suspend", ("started", "suspended"))
0.28 /testbed/src/_pytest/capture.py(411):             self._state in states
0.28 /testbed/src/_pytest/capture.py(410):         assert (
0.28 /testbed/src/_pytest/capture.py(449):         if self._state == "suspended":
0.28 /testbed/src/_pytest/capture.py(451):         self.syscapture.suspend()
0.28 /testbed/src/_pytest/capture.py(316):         self._assert_state("suspend", ("started", "suspended"))
0.28 /testbed/src/_pytest/capture.py(288):             self._state in states
0.28 /testbed/src/_pytest/capture.py(287):         assert (
0.28 /testbed/src/_pytest/capture.py(317):         setattr(sys, self.name, self._old)
0.28 /testbed/src/_pytest/capture.py(318):         self._state = "suspended"
0.28 /testbed/src/_pytest/capture.py(452):         os.dup2(self.targetfd_save, self.targetfd)
0.28 /testbed/src/_pytest/capture.py(453):         self._state = "suspended"
0.28 /testbed/src/_pytest/capture.py(534):         if in_ and self.in_:
0.29 /testbed/src/_pytest/capture.py(715):         out, err = self.read_global_capture()
0.29 /testbed/src/_pytest/capture.py(655):         assert self._global_capturing is not None
0.29 /testbed/src/_pytest/capture.py(656):         return self._global_capturing.readouterr()
0.29 /testbed/src/_pytest/capture.py(561):         if self.out:
0.29 /testbed/src/_pytest/capture.py(562):             out = self.out.snap()
0.29 /testbed/src/_pytest/capture.py(479):         self._assert_state("snap", ("started", "suspended"))
0.29 /testbed/src/_pytest/capture.py(411):             self._state in states
0.29 /testbed/src/_pytest/capture.py(410):         assert (
0.29 /testbed/src/_pytest/capture.py(480):         self.tmpfile.seek(0)
0.29 /testbed/src/_pytest/capture.py(481):         res = self.tmpfile.read()
0.29 /testbed/src/_pytest/capture.py(482):         self.tmpfile.seek(0)
0.29 /testbed/src/_pytest/capture.py(483):         self.tmpfile.truncate()
0.29 /testbed/src/_pytest/capture.py(484):         return res
0.29 /testbed/src/_pytest/capture.py(565):         if self.err:
0.29 /testbed/src/_pytest/capture.py(566):             err = self.err.snap()
0.29 /testbed/src/_pytest/capture.py(479):         self._assert_state("snap", ("started", "suspended"))
0.29 /testbed/src/_pytest/capture.py(411):             self._state in states
0.29 /testbed/src/_pytest/capture.py(410):         assert (
0.29 /testbed/src/_pytest/capture.py(480):         self.tmpfile.seek(0)
0.29 /testbed/src/_pytest/capture.py(481):         res = self.tmpfile.read()
0.29 /testbed/src/_pytest/capture.py(482):         self.tmpfile.seek(0)
0.29 /testbed/src/_pytest/capture.py(483):         self.tmpfile.truncate()
0.29 /testbed/src/_pytest/capture.py(484):         return res
0.29 /testbed/src/_pytest/capture.py(569):         return CaptureResult(out, err)
0.29 /testbed/src/_pytest/capture.py(716):         item.add_report_section(when, "stdout", out)
0.29 /testbed/src/_pytest/capture.py(717):         item.add_report_section(when, "stderr", err)
0.29 /testbed/src/_pytest/capture.py(743):         with self.item_capture("call", item):
0.29 /testbed/src/_pytest/capture.py(707):         self.resume_global_capture()
0.29 /testbed/src/_pytest/capture.py(638):         if self._global_capturing is not None:
0.29 /testbed/src/_pytest/capture.py(639):             self._global_capturing.resume_capturing()
0.29 /testbed/src/_pytest/capture.py(539):         self._state = "resumed"
0.29 /testbed/src/_pytest/capture.py(540):         if self.out:
0.29 /testbed/src/_pytest/capture.py(541):             self.out.resume()
0.29 /testbed/src/_pytest/capture.py(456):         self._assert_state("resume", ("started", "suspended"))
0.29 /testbed/src/_pytest/capture.py(411):             self._state in states
0.29 /testbed/src/_pytest/capture.py(410):         assert (
0.29 /testbed/src/_pytest/capture.py(457):         if self._state == "started":
0.29 /testbed/src/_pytest/capture.py(459):         self.syscapture.resume()
0.29 /testbed/src/_pytest/capture.py(321):         self._assert_state("resume", ("started", "suspended"))
0.29 /testbed/src/_pytest/capture.py(288):             self._state in states
0.29 /testbed/src/_pytest/capture.py(287):         assert (
0.29 /testbed/src/_pytest/capture.py(322):         if self._state == "started":
0.29 /testbed/src/_pytest/capture.py(324):         setattr(sys, self.name, self.tmpfile)
0.29 /testbed/src/_pytest/capture.py(318):         self._state = "suspended"
0.29 /testbed/src/_pytest/capture.py(452):         os.dup2(self.targetfd_save, self.targetfd)
0.29 /testbed/src/_pytest/capture.py(453):         self._state = "suspended"
0.29 /testbed/src/_pytest/capture.py(532):         if self.err:
0.29 /testbed/src/_pytest/capture.py(533):             self.err.suspend()
0.29 /testbed/src/_pytest/capture.py(448):         self._assert_state("suspend", ("started", "suspended"))
0.29 /testbed/src/_pytest/capture.py(411):             self._state in states
0.29 /testbed/src/_pytest/capture.py(410):         assert (
0.29 /testbed/src/_pytest/capture.py(449):         if self._state == "suspended":
0.29 /testbed/src/_pytest/capture.py(451):         self.syscapture.suspend()
0.29 /testbed/src/_pytest/capture.py(316):         self._assert_state("suspend", ("started", "suspended"))
0.29 /testbed/src/_pytest/capture.py(288):             self._state in states
0.29 /testbed/src/_pytest/capture.py(287):         assert (
0.29 /testbed/src/_pytest/capture.py(317):         setattr(sys, self.name, self._old)
0.29 /testbed/src/_pytest/capture.py(318):         self._state = "suspended"
0.29 /testbed/src/_pytest/capture.py(452):         os.dup2(self.targetfd_save, self.targetfd)
0.29 /testbed/src/_pytest/capture.py(453):         self._state = "suspended"
0.29 /testbed/src/_pytest/capture.py(534):         if in_ and self.in_:
0.29 /testbed/src/_pytest/capture.py(715):         out, err = self.read_global_capture()
0.29 /testbed/src/_pytest/capture.py(655):         assert self._global_capturing is not None
0.29 /testbed/src/_pytest/capture.py(656):         return self._global_capturing.readouterr()
0.29 /testbed/src/_pytest/capture.py(561):         if self.out:
0.29 /testbed/src/_pytest/capture.py(562):             out = self.out.snap()
0.29 /testbed/src/_pytest/capture.py(479):         self._assert_state("snap", ("started", "suspended"))
0.29 /testbed/src/_pytest/capture.py(411):             self._state in states
0.29 /testbed/src/_pytest/capture.py(410):         assert (
0.29 /testbed/src/_pytest/capture.py(480):         self.tmpfile.seek(0)
0.29 /testbed/src/_pytest/capture.py(481):         res = self.tmpfile.read()
0.29 /testbed/src/_pytest/capture.py(482):         self.tmpfile.seek(0)
0.29 /testbed/src/_pytest/capture.py(483):         self.tmpfile.truncate()
0.29 /testbed/src/_pytest/capture.py(484):         return res
0.29 /testbed/src/_pytest/capture.py(565):         if self.err:
0.29 /testbed/src/_pytest/capture.py(566):             err = self.err.snap()
0.29 /testbed/src/_pytest/capture.py(479):         self._assert_state("snap", ("started", "suspended"))
0.29 /testbed/src/_pytest/capture.py(411):             self._state in states
0.29 /testbed/src/_pytest/capture.py(410):         assert (
0.29 /testbed/src/_pytest/capture.py(480):         self.tmpfile.seek(0)
0.29 /testbed/src/_pytest/capture.py(481):         res = self.tmpfile.read()
0.29 /testbed/src/_pytest/capture.py(482):         self.tmpfile.seek(0)
0.29 /testbed/src/_pytest/capture.py(483):         self.tmpfile.truncate()
0.29 /testbed/src/_pytest/capture.py(484):         return res
0.29 /testbed/src/_pytest/capture.py(569):         return CaptureResult(out, err)
0.29 /testbed/src/_pytest/capture.py(716):         item.add_report_section(when, "stdout", out)
0.29 /testbed/src/_pytest/capture.py(717):         item.add_report_section(when, "stderr", err)
F0.31 /testbed/src/_pytest/capture.py(748):         with self.item_capture("teardown", item):
0.31 /testbed/src/_pytest/capture.py(707):         self.resume_global_capture()
0.31 /testbed/src/_pytest/capture.py(638):         if self._global_capturing is not None:
0.31 /testbed/src/_pytest/capture.py(639):             self._global_capturing.resume_capturing()
0.31 /testbed/src/_pytest/capture.py(539):         self._state = "resumed"
0.31 /testbed/src/_pytest/capture.py(540):         if self.out:
0.31 /testbed/src/_pytest/capture.py(541):             self.out.resume()
0.31 /testbed/src/_pytest/capture.py(456):         self._assert_state("resume", ("started", "suspended"))
0.31 /testbed/src/_pytest/capture.py(411):             self._state in states
0.31 /testbed/src/_pytest/capture.py(410):         assert (
0.31 /testbed/src/_pytest/capture.py(457):         if self._state == "started":
0.31 /testbed/src/_pytest/capture.py(459):         self.syscapture.resume()
0.31 /testbed/src/_pytest/capture.py(321):         self._assert_state("resume", ("started", "suspended"))
0.31 /testbed/src/_pytest/capture.py(288):             self._state in states
0.31 /testbed/src/_pytest/capture.py(287):         assert (
0.31 /testbed/src/_pytest/capture.py(322):         if self._state == "started":
0.31 /testbed/src/_pytest/capture.py(324):         setattr(sys, self.name, self.tmpfile)
0.32 /testbed/src/_pytest/capture.py(318):         self._state = "suspended"
0.32 /testbed/src/_pytest/capture.py(452):         os.dup2(self.targetfd_save, self.targetfd)
0.32 /testbed/src/_pytest/capture.py(453):         self._state = "suspended"
0.32 /testbed/src/_pytest/capture.py(532):         if self.err:
0.32 /testbed/src/_pytest/capture.py(533):             self.err.suspend()
0.32 /testbed/src/_pytest/capture.py(448):         self._assert_state("suspend", ("started", "suspended"))
0.32 /testbed/src/_pytest/capture.py(411):             self._state in states
0.32 /testbed/src/_pytest/capture.py(410):         assert (
0.32 /testbed/src/_pytest/capture.py(449):         if self._state == "suspended":
0.32 /testbed/src/_pytest/capture.py(451):         self.syscapture.suspend()
0.32 /testbed/src/_pytest/capture.py(316):         self._assert_state("suspend", ("started", "suspended"))
0.32 /testbed/src/_pytest/capture.py(288):             self._state in states
0.32 /testbed/src/_pytest/capture.py(287):         assert (
0.32 /testbed/src/_pytest/capture.py(317):         setattr(sys, self.name, self._old)
0.32 /testbed/src/_pytest/capture.py(318):         self._state = "suspended"
0.32 /testbed/src/_pytest/capture.py(452):         os.dup2(self.targetfd_save, self.targetfd)
0.32 /testbed/src/_pytest/capture.py(453):         self._state = "suspended"
0.32 /testbed/src/_pytest/capture.py(534):         if in_ and self.in_:
0.32 /testbed/src/_pytest/capture.py(715):         out, err = self.read_global_capture()
0.32 /testbed/src/_pytest/capture.py(655):         assert self._global_capturing is not None
0.32 /testbed/src/_pytest/capture.py(656):         return self._global_capturing.readouterr()
0.32 /testbed/src/_pytest/capture.py(561):         if self.out:
0.32 /testbed/src/_pytest/capture.py(562):             out = self.out.snap()
0.32 /testbed/src/_pytest/capture.py(479):         self._assert_state("snap", ("started", "suspended"))
0.32 /testbed/src/_pytest/capture.py(411):             self._state in states
0.32 /testbed/src/_pytest/capture.py(410):         assert (
0.32 /testbed/src/_pytest/capture.py(480):         self.tmpfile.seek(0)
0.32 /testbed/src/_pytest/capture.py(481):         res = self.tmpfile.read()
0.32 /testbed/src/_pytest/capture.py(482):         self.tmpfile.seek(0)
0.32 /testbed/src/_pytest/capture.py(483):         self.tmpfile.truncate()
0.32 /testbed/src/_pytest/capture.py(484):         return res
0.32 /testbed/src/_pytest/capture.py(565):         if self.err:
0.32 /testbed/src/_pytest/capture.py(566):             err = self.err.snap()
0.32 /testbed/src/_pytest/capture.py(479):         self._assert_state("snap", ("started", "suspended"))
0.32 /testbed/src/_pytest/capture.py(411):             self._state in states
0.32 /testbed/src/_pytest/capture.py(410):         assert (
0.32 /testbed/src/_pytest/capture.py(480):         self.tmpfile.seek(0)
0.32 /testbed/src/_pytest/capture.py(481):         res = self.tmpfile.read()
0.32 /testbed/src/_pytest/capture.py(482):         self.tmpfile.seek(0)
0.32 /testbed/src/_pytest/capture.py(483):         self.tmpfile.truncate()
0.32 /testbed/src/_pytest/capture.py(484):         return res
0.32 /testbed/src/_pytest/capture.py(569):         return CaptureResult(out, err)
0.32 /testbed/src/_pytest/capture.py(716):         item.add_report_section(when, "stdout", out)
0.32 /testbed/src/_pytest/capture.py(717):         item.add_report_section(when, "stderr", err)
                        [100%]

=================================== FAILURES ===================================
_____________________ test_capfd_includes_carriage_return ______________________

capfd = <_pytest.capture.CaptureFixture object at 0x7f6d70215790>

    def test_capfd_includes_carriage_return(capfd):
        print('Test string with carriage return', end='\r')
        out, err = capfd.readouterr()
>       assert out.endswith('\r')
E       assert False
E        +  where False = <built-in method endswith of str object at 0x360923c0>('\r')
E        +    where <built-in method endswith of str object at 0x360923c0> = '28 /testbed/src/_pytest/capture.py(421):         self._state = "started"\n0.28 /testbed/src/_pytest/capture.py(516): ...c/_pytest/capture.py(410):         assert (\n0.29 /testbed/src/_pytest/capture.py(480):         self.tmpfile.seek(0)\n'.endswith

testing/test_coverup_pytest-dev__pytest-7521.py:6: AssertionError
---------------------------- Captured stdout setup -----------------------------
0.28 /testbed/src/_pytest/capture.py(325):         self._state = "started"
0.28 /testbed/src/_pytest/capture.py(460):         os.dup2(self.tmpfile.fileno(), self.targetfd)
0.28 /testbed/src/_pytest/capture.py(461):         self._state = "started"
0.28 /testbed/src/_pytest/capture.py(542):         if self.err:
0.28 /testbed/src/_pytest/capture.py(543):             self.err.resume()
0.28 /testbed/src/_pytest/capture.py(456):         self._assert_state("resume", ("started", "suspended"))
0.28 /testbed/src/_pytest/capture.py(411):             self._state in states
0.28 /testbed/src/_pytest/capture.py(410):         assert (
0.28 /testbed/src/_pytest/capture.py(457):         if self._state == "started":
0.28 /testbed/src/_pytest/capture.py(459):         self.syscapture.resume()
0.28 /testbed/src/_pytest/capture.py(321):         self._assert_state("resume", ("started", "suspended"))
0.28 /testbed/src/_pytest/capture.py(288):             self._state in states
0.28 /testbed/src/_pytest/capture.py(287):         assert (
0.28 /testbed/src/_pytest/capture.py(322):         if self._state == "started":
0.28 /testbed/src/_pytest/capture.py(324):         setattr(sys, self.name, self.tmpfile)
0.28 /testbed/src/_pytest/capture.py(325):         self._state = "started"
0.28 /testbed/src/_pytest/capture.py(460):         os.dup2(self.tmpfile.fileno(), self.targetfd)
0.28 /testbed/src/_pytest/capture.py(461):         self._state = "started"
0.28 /testbed/src/_pytest/capture.py(544):         if self._in_suspended:
0.28 /testbed/src/_pytest/capture.py(708):         self.activate_fixture()
0.28 /testbed/src/_pytest/capture.py(678):         if self._capture_fixture:
0.28 /testbed/src/_pytest/capture.py(709):         try:
0.28 /testbed/src/_pytest/capture.py(710):             yield
0.28 /testbed/src/_pytest/capture.py(739):             yield
0.28 /testbed/src/_pytest/capture.py(865):     capman = request.config.pluginmanager.getplugin("capturemanager")
0.28 /testbed/src/_pytest/capture.py(866):     capture_fixture = CaptureFixture(FDCapture, request)
0.28 /testbed/src/_pytest/capture.py(767):         self.captureclass = captureclass
0.28 /testbed/src/_pytest/capture.py(768):         self.request = request
0.28 /testbed/src/_pytest/capture.py(769):         self._capture = None  # type: Optional[MultiCapture]
0.28 /testbed/src/_pytest/capture.py(770):         self._captured_out = self.captureclass.EMPTY_BUFFER
0.28 /testbed/src/_pytest/capture.py(771):         self._captured_err = self.captureclass.EMPTY_BUFFER
0.28 /testbed/src/_pytest/capture.py(867):     capman.set_fixture(capture_fixture)
0.28 /testbed/src/_pytest/capture.py(661):         if self._capture_fixture:
0.28 /testbed/src/_pytest/capture.py(669):         self._capture_fixture = capture_fixture
0.28 /testbed/src/_pytest/capture.py(868):     capture_fixture._start()
0.28 /testbed/src/_pytest/capture.py(774):         if self._capture is None:
0.28 /testbed/src/_pytest/capture.py(775):             self._capture = MultiCapture(
0.28 /testbed/src/_pytest/capture.py(776):                 in_=None, out=self.captureclass(1), err=self.captureclass(2),
0.28 /testbed/src/_pytest/capture.py(358):         self.targetfd = targetfd
0.28 /testbed/src/_pytest/capture.py(360):         try:
0.28 /testbed/src/_pytest/capture.py(361):             os.fstat(targetfd)
0.28 /testbed/src/_pytest/capture.py(379):             self.targetfd_invalid = None
0.28 /testbed/src/_pytest/capture.py(380):         self.targetfd_save = os.dup(targetfd)
0.28 /testbed/src/_pytest/capture.py(382):         if targetfd == 0:
0.28 /testbed/src/_pytest/capture.py(386):             self.tmpfile = EncodedFile(
0.28 /testbed/src/_pytest/capture.py(388):                 TemporaryFile(buffering=0),  # type: ignore[arg-type]
0.28 /testbed/src/_pytest/capture.py(389):                 encoding="utf-8",
0.28 /testbed/src/_pytest/capture.py(390):                 errors="replace",
0.28 /testbed/src/_pytest/capture.py(391):                 write_through=True,
0.28 /testbed/src/_pytest/capture.py(386):             self.tmpfile = EncodedFile(
0.28 /testbed/src/_pytest/capture.py(393):             if targetfd in patchsysdict:
0.28 /testbed/src/_pytest/capture.py(394):                 self.syscapture = SysCapture(targetfd, self.tmpfile)
0.28 /testbed/src/_pytest/capture.py(257):         name = patchsysdict[fd]
0.28 /testbed/src/_pytest/capture.py(258):         self._old = getattr(sys, name)
0.28 /testbed/src/_pytest/capture.py(259):         self.name = name
0.28 /testbed/src/_pytest/capture.py(260):         if tmpfile is None:
0.28 /testbed/src/_pytest/capture.py(265):         self.tmpfile = tmpfile
0.28 /testbed/src/_pytest/capture.py(266):         self._state = "initialized"
0.28 /testbed/src/_pytest/capture.py(398):         self._state = "initialized"
0.28 /testbed/src/_pytest/capture.py(358):         self.targetfd = targetfd
0.28 /testbed/src/_pytest/capture.py(360):         try:
0.28 /testbed/src/_pytest/capture.py(361):             os.fstat(targetfd)
0.28 /testbed/src/_pytest/capture.py(379):             self.targetfd_invalid = None
0.28 /testbed/src/_pytest/capture.py(380):         self.targetfd_save = os.dup(targetfd)
0.28 /testbed/src/_pytest/capture.py(382):         if targetfd == 0:
0.28 /testbed/src/_pytest/capture.py(386):             self.tmpfile = EncodedFile(
0.28 /testbed/src/_pytest/capture.py(388):                 TemporaryFile(buffering=0),  # type: ignore[arg-type]
0.28 /testbed/src/_pytest/capture.py(389):                 encoding="utf-8",
0.28 /testbed/src/_pytest/capture.py(390):                 errors="replace",
0.28 /testbed/src/_pytest/capture.py(391):                 write_through=True,
0.28 /testbed/src/_pytest/capture.py(386):             self.tmpfile = EncodedFile(
0.28 /testbed/src/_pytest/capture.py(393):             if targetfd in patchsysdict:
0.28 /testbed/src/_pytest/capture.py(394):                 self.syscapture = SysCapture(targetfd, self.tmpfile)
0.28 /testbed/src/_pytest/capture.py(257):         name = patchsysdict[fd]
0.28 /testbed/src/_pytest/capture.py(258):         self._old = getattr(sys, name)
0.28 /testbed/src/_pytest/capture.py(259):         self.name = name
0.28 /testbed/src/_pytest/capture.py(260):         if tmpfile is None:
0.28 /testbed/src/_pytest/capture.py(265):         self.tmpfile = tmpfile
0.28 /testbed/src/_pytest/capture.py(266):         self._state = "initialized"
0.28 /testbed/src/_pytest/capture.py(398):         self._state = "initialized"
0.28 /testbed/src/_pytest/capture.py(775):             self._capture = MultiCapture(
0.28 /testbed/src/_pytest/capture.py(501):         self.in_ = in_
0.28 /testbed/src/_pytest/capture.py(502):         self.out = out
0.28 /testbed/src/_pytest/capture.py(503):         self.err = err
0.28 /testbed/src/_pytest/capture.py(778):             self._capture.start_capturing()
0.28 /testbed/src/_pytest/capture.py(511):         self._state = "started"
0.28 /testbed/src/_pytest/capture.py(512):         if self.in_:
0.28 /testbed/src/_pytest/capture.py(514):         if self.out:
0.28 /testbed/src/_pytest/capture.py(515):             self.out.start()
0.28 /testbed/src/_pytest/capture.py(418):         self._assert_state("start", ("initialized",))
0.28 /testbed/src/_pytest/capture.py(411):             self._state in states
0.28 /testbed/src/_pytest/capture.py(410):         assert (
0.28 /testbed/src/_pytest/capture.py(419):         os.dup2(self.tmpfile.fileno(), self.targetfd)
0.28 /testbed/src/_pytest/capture.py(420):         self.syscapture.start()
0.28 /testbed/src/_pytest/capture.py(294):         self._assert_state("start", ("initialized",))
0.28 /testbed/src/_pytest/capture.py(288):             self._state in states
0.28 /testbed/src/_pytest/capture.py(287):         assert (
0.28 /testbed/src/_pytest/capture.py(295):         setattr(sys, self.name, self.tmpfile)
28 /testbed/src/_pytest/capture.py(421):         self._state = "started"
0.28 /testbed/src/_pytest/capture.py(516):         if self.err:
0.28 /testbed/src/_pytest/capture.py(517):             self.err.start()
0.28 /testbed/src/_pytest/capture.py(418):         self._assert_state("start", ("initialized",))
0.28 /testbed/src/_pytest/capture.py(411):             self._state in states
0.28 /testbed/src/_pytest/capture.py(410):         assert (
0.28 /testbed/src/_pytest/capture.py(419):         os.dup2(self.tmpfile.fileno(), self.targetfd)
0.28 /testbed/src/_pytest/capture.py(420):         self.syscapture.start()
0.28 /testbed/src/_pytest/capture.py(294):         self._assert_state("start", ("initialized",))
0.28 /testbed/src/_pytest/capture.py(288):             self._state in states
0.28 /testbed/src/_pytest/capture.py(287):         assert (
0.28 /testbed/src/_pytest/capture.py(295):         setattr(sys, self.name, self.tmpfile)
0.28 /testbed/src/_pytest/capture.py(296):         self._state = "started"
0.28 /testbed/src/_pytest/capture.py(421):         self._state = "started"
0.28 /testbed/src/_pytest/capture.py(869):     yield capture_fixture
0.28 /testbed/src/_pytest/capture.py(712):             self.deactivate_fixture()
0.28 /testbed/src/_pytest/capture.py(683):         if self._capture_fixture:
0.28 /testbed/src/_pytest/capture.py(684):             self._capture_fixture.close()
0.28 /testbed/src/_pytest/capture.py(781):         if self._capture is not None:
0.28 /testbed/src/_pytest/capture.py(782):             out, err = self._capture.pop_outerr_to_orig()
0.28 /testbed/src/_pytest/capture.py(521):         out, err = self.readouterr()
0.28 /testbed/src/_pytest/capture.py(561):         if self.out:
0.28 /testbed/src/_pytest/capture.py(562):             out = self.out.snap()
0.28 /testbed/src/_pytest/capture.py(479):         self._assert_state("snap", ("started", "suspended"))
0.28 /testbed/src/_pytest/capture.py(411):             self._state in states
0.28 /testbed/src/_pytest/capture.py(410):         assert (
0.28 /testbed/src/_pytest/capture.py(480):         self.tmpfile.seek(0)
0.28 /testbed/src/_pytest/capture.py(311):         del self._old
0.28 /testbed/src/_pytest/capture.py(312):         self.tmpfile.close()
0.28 /testbed/src/_pytest/capture.py(313):         self._state = "done"
0.28 /testbed/src/_pytest/capture.py(444):         self.tmpfile.close()
0.28 /testbed/src/_pytest/capture.py(445):         self._state = "done"
0.28 /testbed/src/_pytest/capture.py(555):         if self.err:
0.28 /testbed/src/_pytest/capture.py(556):             self.err.done()
0.28 /testbed/src/_pytest/capture.py(434):         self._assert_state("done", ("initialized", "started", "suspended", "done"))
0.28 /testbed/src/_pytest/capture.py(411):             self._state in states
0.28 /testbed/src/_pytest/capture.py(410):         assert (
0.28 /testbed/src/_pytest/capture.py(435):         if self._state == "done":
0.28 /testbed/src/_pytest/capture.py(437):         os.dup2(self.targetfd_save, self.targetfd)
0.28 /testbed/src/_pytest/capture.py(438):         os.close(self.targetfd_save)
0.28 /testbed/src/_pytest/capture.py(439):         if self.targetfd_invalid is not None:
0.28 /testbed/src/_pytest/capture.py(443):         self.syscapture.done()
0.28 /testbed/src/_pytest/capture.py(307):         self._assert_state("done", ("initialized", "started", "suspended", "done"))
0.28 /testbed/src/_pytest/capture.py(288):             self._state in states
0.28 /testbed/src/_pytest/capture.py(287):         assert (
0.28 /testbed/src/_pytest/capture.py(308):         if self._state == "done":
0.28 /testbed/src/_pytest/capture.py(310):         setattr(sys, self.name, self._old)
0.28 /testbed/src/_pytest/capture.py(311):         del self._old
0.28 /testbed/src/_pytest/capture.py(312):         self.tmpfile.close()
0.28 /testbed/src/_pytest/capture.py(313):         self._state = "done"
0.28 /testbed/src/_pytest/capture.py(444):         self.tmpfile.close()
0.28 /testbed/src/_pytest/capture.py(445):         self._state = "done"
0.28 /testbed/src/_pytest/capture.py(557):         if self.in_:
0.28 /testbed/src/_pytest/capture.py(786):             self._capture = None
0.28 /testbed/src/_pytest/capture.py(713):             self.suspend_global_capture(in_=False)
0.28 /testbed/src/_pytest/capture.py(642):         if self._global_capturing is not None:
0.28 /testbed/src/_pytest/capture.py(643):             self._global_capturing.suspend_capturing(in_=in_)
0.28 /testbed/src/_pytest/capture.py(529):         self._state = "suspended"
0.28 /testbed/src/_pytest/capture.py(530):         if self.out:
0.28 /testbed/src/_pytest/capture.py(531):             self.out.suspend()
0.28 /testbed/src/_pytest/capture.py(448):         self._assert_state("suspend", ("started", "suspended"))
0.28 /testbed/src/_pytest/capture.py(411):             self._state in states
0.28 /testbed/src/_pytest/capture.py(410):         assert (
0.28 /testbed/src/_pytest/capture.py(449):         if self._state == "suspended":
0.28 /testbed/src/_pytest/capture.py(451):         self.syscapture.suspend()
0.28 /testbed/src/_pytest/capture.py(316):         self._assert_state("suspend", ("started", "suspended"))
0.28 /testbed/src/_pytest/capture.py(288):             self._state in states
0.28 /testbed/src/_pytest/capture.py(287):         assert (
0.28 /testbed/src/_pytest/capture.py(317):         setattr(sys, self.name, self._old)
----------------------------- Captured stdout call -----------------------------
0.29 /testbed/src/_pytest/capture.py(325):         self._state = "started"
0.29 /testbed/src/_pytest/capture.py(460):         os.dup2(self.tmpfile.fileno(), self.targetfd)
0.29 /testbed/src/_pytest/capture.py(461):         self._state = "started"
0.29 /testbed/src/_pytest/capture.py(542):         if self.err:
0.29 /testbed/src/_pytest/capture.py(543):             self.err.resume()
0.29 /testbed/src/_pytest/capture.py(456):         self._assert_state("resume", ("started", "suspended"))
0.29 /testbed/src/_pytest/capture.py(411):             self._state in states
0.29 /testbed/src/_pytest/capture.py(410):         assert (
0.29 /testbed/src/_pytest/capture.py(457):         if self._state == "started":
0.29 /testbed/src/_pytest/capture.py(459):         self.syscapture.resume()
0.29 /testbed/src/_pytest/capture.py(321):         self._assert_state("resume", ("started", "suspended"))
0.29 /testbed/src/_pytest/capture.py(288):             self._state in states
0.29 /testbed/src/_pytest/capture.py(287):         assert (
0.29 /testbed/src/_pytest/capture.py(322):         if self._state == "started":
0.29 /testbed/src/_pytest/capture.py(324):         setattr(sys, self.name, self.tmpfile)
0.29 /testbed/src/_pytest/capture.py(325):         self._state = "started"
0.29 /testbed/src/_pytest/capture.py(460):         os.dup2(self.tmpfile.fileno(), self.targetfd)
0.29 /testbed/src/_pytest/capture.py(461):         self._state = "started"
0.29 /testbed/src/_pytest/capture.py(544):         if self._in_suspended:
0.29 /testbed/src/_pytest/capture.py(708):         self.activate_fixture()
0.29 /testbed/src/_pytest/capture.py(678):         if self._capture_fixture:
0.29 /testbed/src/_pytest/capture.py(679):             self._capture_fixture._start()
0.29 /testbed/src/_pytest/capture.py(774):         if self._capture is None:
0.29 /testbed/src/_pytest/capture.py(775):             self._capture = MultiCapture(
0.29 /testbed/src/_pytest/capture.py(776):                 in_=None, out=self.captureclass(1), err=self.captureclass(2),
0.29 /testbed/src/_pytest/capture.py(358):         self.targetfd = targetfd
0.29 /testbed/src/_pytest/capture.py(360):         try:
0.29 /testbed/src/_pytest/capture.py(361):             os.fstat(targetfd)
0.29 /testbed/src/_pytest/capture.py(379):             self.targetfd_invalid = None
0.29 /testbed/src/_pytest/capture.py(380):         self.targetfd_save = os.dup(targetfd)
0.29 /testbed/src/_pytest/capture.py(382):         if targetfd == 0:
0.29 /testbed/src/_pytest/capture.py(386):             self.tmpfile = EncodedFile(
0.29 /testbed/src/_pytest/capture.py(388):                 TemporaryFile(buffering=0),  # type: ignore[arg-type]
0.29 /testbed/src/_pytest/capture.py(389):                 encoding="utf-8",
0.29 /testbed/src/_pytest/capture.py(390):                 errors="replace",
0.29 /testbed/src/_pytest/capture.py(391):                 write_through=True,
0.29 /testbed/src/_pytest/capture.py(386):             self.tmpfile = EncodedFile(
0.29 /testbed/src/_pytest/capture.py(393):             if targetfd in patchsysdict:
0.29 /testbed/src/_pytest/capture.py(394):                 self.syscapture = SysCapture(targetfd, self.tmpfile)
0.29 /testbed/src/_pytest/capture.py(257):         name = patchsysdict[fd]
0.29 /testbed/src/_pytest/capture.py(258):         self._old = getattr(sys, name)
0.29 /testbed/src/_pytest/capture.py(259):         self.name = name
0.29 /testbed/src/_pytest/capture.py(260):         if tmpfile is None:
0.29 /testbed/src/_pytest/capture.py(265):         self.tmpfile = tmpfile
0.29 /testbed/src/_pytest/capture.py(266):         self._state = "initialized"
0.29 /testbed/src/_pytest/capture.py(398):         self._state = "initialized"
0.29 /testbed/src/_pytest/capture.py(358):         self.targetfd = targetfd
0.29 /testbed/src/_pytest/capture.py(360):         try:
0.29 /testbed/src/_pytest/capture.py(361):             os.fstat(targetfd)
0.29 /testbed/src/_pytest/capture.py(379):             self.targetfd_invalid = None
0.29 /testbed/src/_pytest/capture.py(380):         self.targetfd_save = os.dup(targetfd)
0.29 /testbed/src/_pytest/capture.py(382):         if targetfd == 0:
0.29 /testbed/src/_pytest/capture.py(386):             self.tmpfile = EncodedFile(
0.29 /testbed/src/_pytest/capture.py(388):                 TemporaryFile(buffering=0),  # type: ignore[arg-type]
0.29 /testbed/src/_pytest/capture.py(389):                 encoding="utf-8",
0.29 /testbed/src/_pytest/capture.py(390):                 errors="replace",
0.29 /testbed/src/_pytest/capture.py(391):                 write_through=True,
0.29 /testbed/src/_pytest/capture.py(386):             self.tmpfile = EncodedFile(
0.29 /testbed/src/_pytest/capture.py(393):             if targetfd in patchsysdict:
0.29 /testbed/src/_pytest/capture.py(394):                 self.syscapture = SysCapture(targetfd, self.tmpfile)
0.29 /testbed/src/_pytest/capture.py(257):         name = patchsysdict[fd]
0.29 /testbed/src/_pytest/capture.py(258):         self._old = getattr(sys, name)
0.29 /testbed/src/_pytest/capture.py(259):         self.name = name
0.29 /testbed/src/_pytest/capture.py(260):         if tmpfile is None:
0.29 /testbed/src/_pytest/capture.py(265):         self.tmpfile = tmpfile
0.29 /testbed/src/_pytest/capture.py(266):         self._state = "initialized"
0.29 /testbed/src/_pytest/capture.py(398):         self._state = "initialized"
0.29 /testbed/src/_pytest/capture.py(775):             self._capture = MultiCapture(
0.29 /testbed/src/_pytest/capture.py(501):         self.in_ = in_
0.29 /testbed/src/_pytest/capture.py(502):         self.out = out
0.29 /testbed/src/_pytest/capture.py(503):         self.err = err
0.29 /testbed/src/_pytest/capture.py(778):             self._capture.start_capturing()
0.29 /testbed/src/_pytest/capture.py(511):         self._state = "started"
0.29 /testbed/src/_pytest/capture.py(512):         if self.in_:
0.29 /testbed/src/_pytest/capture.py(514):         if self.out:
0.29 /testbed/src/_pytest/capture.py(515):             self.out.start()
0.29 /testbed/src/_pytest/capture.py(418):         self._assert_state("start", ("initialized",))
0.29 /testbed/src/_pytest/capture.py(411):             self._state in states
0.29 /testbed/src/_pytest/capture.py(410):         assert (
0.29 /testbed/src/_pytest/capture.py(419):         os.dup2(self.tmpfile.fileno(), self.targetfd)
0.29 /testbed/src/_pytest/capture.py(420):         self.syscapture.start()
0.29 /testbed/src/_pytest/capture.py(294):         self._assert_state("start", ("initialized",))
0.29 /testbed/src/_pytest/capture.py(288):             self._state in states
0.29 /testbed/src/_pytest/capture.py(287):         assert (
0.29 /testbed/src/_pytest/capture.py(295):         setattr(sys, self.name, self.tmpfile)
29 /testbed/src/_pytest/capture.py(484):         return res
0.29 /testbed/src/_pytest/capture.py(565):         if self.err:
0.29 /testbed/src/_pytest/capture.py(566):             err = self.err.snap()
0.29 /testbed/src/_pytest/capture.py(479):         self._assert_state("snap", ("started", "suspended"))
0.29 /testbed/src/_pytest/capture.py(411):             self._state in states
0.29 /testbed/src/_pytest/capture.py(410):         assert (
0.29 /testbed/src/_pytest/capture.py(480):         self.tmpfile.seek(0)
0.29 /testbed/src/_pytest/capture.py(481):         res = self.tmpfile.read()
0.29 /testbed/src/_pytest/capture.py(482):         self.tmpfile.seek(0)
0.29 /testbed/src/_pytest/capture.py(483):         self.tmpfile.truncate()
0.29 /testbed/src/_pytest/capture.py(484):         return res
0.29 /testbed/src/_pytest/capture.py(569):         return CaptureResult(out, err)
0.29 /testbed/src/_pytest/capture.py(796):             captured_out += out
0.29 /testbed/src/_pytest/capture.py(797):             captured_err += err
0.29 /testbed/src/_pytest/capture.py(798):         self._captured_out = self.captureclass.EMPTY_BUFFER
0.29 /testbed/src/_pytest/capture.py(799):         self._captured_err = self.captureclass.EMPTY_BUFFER
0.29 /testbed/src/_pytest/capture.py(800):         return CaptureResult(captured_out, captured_err)
0.29 /testbed/src/_pytest/capture.py(712):             self.deactivate_fixture()
0.29 /testbed/src/_pytest/capture.py(683):         if self._capture_fixture:
0.29 /testbed/src/_pytest/capture.py(684):             self._capture_fixture.close()
0.29 /testbed/src/_pytest/capture.py(781):         if self._capture is not None:
0.29 /testbed/src/_pytest/capture.py(782):             out, err = self._capture.pop_outerr_to_orig()
0.29 /testbed/src/_pytest/capture.py(521):         out, err = self.readouterr()
0.29 /testbed/src/_pytest/capture.py(561):         if self.out:
0.29 /testbed/src/_pytest/capture.py(562):             out = self.out.snap()
0.29 /testbed/src/_pytest/capture.py(479):         self._assert_state("snap", ("started", "suspended"))
0.29 /testbed/src/_pytest/capture.py(411):             self._state in states
0.29 /testbed/src/_pytest/capture.py(410):         assert (
0.29 /testbed/src/_pytest/capture.py(480):         self.tmpfile.seek(0)
0.29 /testbed/src/_pytest/capture.py(311):         del self._old
0.29 /testbed/src/_pytest/capture.py(312):         self.tmpfile.close()
0.29 /testbed/src/_pytest/capture.py(313):         self._state = "done"
0.29 /testbed/src/_pytest/capture.py(444):         self.tmpfile.close()
0.29 /testbed/src/_pytest/capture.py(445):         self._state = "done"
0.29 /testbed/src/_pytest/capture.py(555):         if self.err:
0.29 /testbed/src/_pytest/capture.py(556):             self.err.done()
0.29 /testbed/src/_pytest/capture.py(434):         self._assert_state("done", ("initialized", "started", "suspended", "done"))
0.29 /testbed/src/_pytest/capture.py(411):             self._state in states
0.29 /testbed/src/_pytest/capture.py(410):         assert (
0.29 /testbed/src/_pytest/capture.py(435):         if self._state == "done":
0.29 /testbed/src/_pytest/capture.py(437):         os.dup2(self.targetfd_save, self.targetfd)
0.29 /testbed/src/_pytest/capture.py(438):         os.close(self.targetfd_save)
0.29 /testbed/src/_pytest/capture.py(439):         if self.targetfd_invalid is not None:
0.29 /testbed/src/_pytest/capture.py(443):         self.syscapture.done()
0.29 /testbed/src/_pytest/capture.py(307):         self._assert_state("done", ("initialized", "started", "suspended", "done"))
0.29 /testbed/src/_pytest/capture.py(288):             self._state in states
0.29 /testbed/src/_pytest/capture.py(287):         assert (
0.29 /testbed/src/_pytest/capture.py(308):         if self._state == "done":
0.29 /testbed/src/_pytest/capture.py(310):         setattr(sys, self.name, self._old)
0.29 /testbed/src/_pytest/capture.py(311):         del self._old
0.29 /testbed/src/_pytest/capture.py(312):         self.tmpfile.close()
0.29 /testbed/src/_pytest/capture.py(313):         self._state = "done"
0.29 /testbed/src/_pytest/capture.py(444):         self.tmpfile.close()
0.29 /testbed/src/_pytest/capture.py(445):         self._state = "done"
0.29 /testbed/src/_pytest/capture.py(557):         if self.in_:
0.29 /testbed/src/_pytest/capture.py(786):             self._capture = None
0.29 /testbed/src/_pytest/capture.py(713):             self.suspend_global_capture(in_=False)
0.29 /testbed/src/_pytest/capture.py(642):         if self._global_capturing is not None:
0.29 /testbed/src/_pytest/capture.py(643):             self._global_capturing.suspend_capturing(in_=in_)
0.29 /testbed/src/_pytest/capture.py(529):         self._state = "suspended"
0.29 /testbed/src/_pytest/capture.py(530):         if self.out:
0.29 /testbed/src/_pytest/capture.py(531):             self.out.suspend()
0.29 /testbed/src/_pytest/capture.py(448):         self._assert_state("suspend", ("started", "suspended"))
0.29 /testbed/src/_pytest/capture.py(411):             self._state in states
0.29 /testbed/src/_pytest/capture.py(410):         assert (
0.29 /testbed/src/_pytest/capture.py(449):         if self._state == "suspended":
0.29 /testbed/src/_pytest/capture.py(451):         self.syscapture.suspend()
0.29 /testbed/src/_pytest/capture.py(316):         self._assert_state("suspend", ("started", "suspended"))
0.29 /testbed/src/_pytest/capture.py(288):             self._state in states
0.29 /testbed/src/_pytest/capture.py(287):         assert (
0.29 /testbed/src/_pytest/capture.py(317):         setattr(sys, self.name, self._old)
--------------------------- Captured stdout teardown ---------------------------
0.31 /testbed/src/_pytest/capture.py(325):         self._state = "started"
0.31 /testbed/src/_pytest/capture.py(460):         os.dup2(self.tmpfile.fileno(), self.targetfd)
0.31 /testbed/src/_pytest/capture.py(461):         self._state = "started"
0.31 /testbed/src/_pytest/capture.py(542):         if self.err:
0.31 /testbed/src/_pytest/capture.py(543):             self.err.resume()
0.31 /testbed/src/_pytest/capture.py(456):         self._assert_state("resume", ("started", "suspended"))
0.31 /testbed/src/_pytest/capture.py(411):             self._state in states
0.31 /testbed/src/_pytest/capture.py(410):         assert (
0.31 /testbed/src/_pytest/capture.py(457):         if self._state == "started":
0.31 /testbed/src/_pytest/capture.py(459):         self.syscapture.resume()
0.31 /testbed/src/_pytest/capture.py(321):         self._assert_state("resume", ("started", "suspended"))
0.31 /testbed/src/_pytest/capture.py(288):             self._state in states
0.31 /testbed/src/_pytest/capture.py(287):         assert (
0.31 /testbed/src/_pytest/capture.py(322):         if self._state == "started":
0.31 /testbed/src/_pytest/capture.py(324):         setattr(sys, self.name, self.tmpfile)
0.31 /testbed/src/_pytest/capture.py(325):         self._state = "started"
0.31 /testbed/src/_pytest/capture.py(460):         os.dup2(self.tmpfile.fileno(), self.targetfd)
0.31 /testbed/src/_pytest/capture.py(461):         self._state = "started"
0.31 /testbed/src/_pytest/capture.py(544):         if self._in_suspended:
0.31 /testbed/src/_pytest/capture.py(708):         self.activate_fixture()
0.31 /testbed/src/_pytest/capture.py(678):         if self._capture_fixture:
0.31 /testbed/src/_pytest/capture.py(679):             self._capture_fixture._start()
0.31 /testbed/src/_pytest/capture.py(774):         if self._capture is None:
0.31 /testbed/src/_pytest/capture.py(775):             self._capture = MultiCapture(
0.31 /testbed/src/_pytest/capture.py(776):                 in_=None, out=self.captureclass(1), err=self.captureclass(2),
0.31 /testbed/src/_pytest/capture.py(358):         self.targetfd = targetfd
0.31 /testbed/src/_pytest/capture.py(360):         try:
0.31 /testbed/src/_pytest/capture.py(361):             os.fstat(targetfd)
0.31 /testbed/src/_pytest/capture.py(379):             self.targetfd_invalid = None
0.31 /testbed/src/_pytest/capture.py(380):         self.targetfd_save = os.dup(targetfd)
0.31 /testbed/src/_pytest/capture.py(382):         if targetfd == 0:
0.31 /testbed/src/_pytest/capture.py(386):             self.tmpfile = EncodedFile(
0.31 /testbed/src/_pytest/capture.py(388):                 TemporaryFile(buffering=0),  # type: ignore[arg-type]
0.31 /testbed/src/_pytest/capture.py(389):                 encoding="utf-8",
0.31 /testbed/src/_pytest/capture.py(390):                 errors="replace",
0.31 /testbed/src/_pytest/capture.py(391):                 write_through=True,
0.31 /testbed/src/_pytest/capture.py(386):             self.tmpfile = EncodedFile(
0.31 /testbed/src/_pytest/capture.py(393):             if targetfd in patchsysdict:
0.31 /testbed/src/_pytest/capture.py(394):                 self.syscapture = SysCapture(targetfd, self.tmpfile)
0.32 /testbed/src/_pytest/capture.py(257):         name = patchsysdict[fd]
0.32 /testbed/src/_pytest/capture.py(258):         self._old = getattr(sys, name)
0.32 /testbed/src/_pytest/capture.py(259):         self.name = name
0.32 /testbed/src/_pytest/capture.py(260):         if tmpfile is None:
0.32 /testbed/src/_pytest/capture.py(265):         self.tmpfile = tmpfile
0.32 /testbed/src/_pytest/capture.py(266):         self._state = "initialized"
0.32 /testbed/src/_pytest/capture.py(398):         self._state = "initialized"
0.32 /testbed/src/_pytest/capture.py(358):         self.targetfd = targetfd
0.32 /testbed/src/_pytest/capture.py(360):         try:
0.32 /testbed/src/_pytest/capture.py(361):             os.fstat(targetfd)
0.32 /testbed/src/_pytest/capture.py(379):             self.targetfd_invalid = None
0.32 /testbed/src/_pytest/capture.py(380):         self.targetfd_save = os.dup(targetfd)
0.32 /testbed/src/_pytest/capture.py(382):         if targetfd == 0:
0.32 /testbed/src/_pytest/capture.py(386):             self.tmpfile = EncodedFile(
0.32 /testbed/src/_pytest/capture.py(388):                 TemporaryFile(buffering=0),  # type: ignore[arg-type]
0.32 /testbed/src/_pytest/capture.py(389):                 encoding="utf-8",
0.32 /testbed/src/_pytest/capture.py(390):                 errors="replace",
0.32 /testbed/src/_pytest/capture.py(391):                 write_through=True,
0.32 /testbed/src/_pytest/capture.py(386):             self.tmpfile = EncodedFile(
0.32 /testbed/src/_pytest/capture.py(393):             if targetfd in patchsysdict:
0.32 /testbed/src/_pytest/capture.py(394):                 self.syscapture = SysCapture(targetfd, self.tmpfile)
0.32 /testbed/src/_pytest/capture.py(257):         name = patchsysdict[fd]
0.32 /testbed/src/_pytest/capture.py(258):         self._old = getattr(sys, name)
0.32 /testbed/src/_pytest/capture.py(259):         self.name = name
0.32 /testbed/src/_pytest/capture.py(260):         if tmpfile is None:
0.32 /testbed/src/_pytest/capture.py(265):         self.tmpfile = tmpfile
0.32 /testbed/src/_pytest/capture.py(266):         self._state = "initialized"
0.32 /testbed/src/_pytest/capture.py(398):         self._state = "initialized"
0.32 /testbed/src/_pytest/capture.py(775):             self._capture = MultiCapture(
0.32 /testbed/src/_pytest/capture.py(501):         self.in_ = in_
0.32 /testbed/src/_pytest/capture.py(502):         self.out = out
0.32 /testbed/src/_pytest/capture.py(503):         self.err = err
0.32 /testbed/src/_pytest/capture.py(778):             self._capture.start_capturing()
0.32 /testbed/src/_pytest/capture.py(511):         self._state = "started"
0.32 /testbed/src/_pytest/capture.py(512):         if self.in_:
0.32 /testbed/src/_pytest/capture.py(514):         if self.out:
0.32 /testbed/src/_pytest/capture.py(515):             self.out.start()
0.32 /testbed/src/_pytest/capture.py(418):         self._assert_state("start", ("initialized",))
0.32 /testbed/src/_pytest/capture.py(411):             self._state in states
0.32 /testbed/src/_pytest/capture.py(410):         assert (
0.32 /testbed/src/_pytest/capture.py(419):         os.dup2(self.tmpfile.fileno(), self.targetfd)
0.32 /testbed/src/_pytest/capture.py(420):         self.syscapture.start()
0.32 /testbed/src/_pytest/capture.py(294):         self._assert_state("start", ("initialized",))
0.32 /testbed/src/_pytest/capture.py(288):             self._state in states
0.32 /testbed/src/_pytest/capture.py(287):         assert (
0.32 /testbed/src/_pytest/capture.py(295):         setattr(sys, self.name, self.tmpfile)
32 /testbed/src/_pytest/capture.py(421):         self._state = "started"
0.32 /testbed/src/_pytest/capture.py(516):         if self.err:
0.32 /testbed/src/_pytest/capture.py(517):             self.err.start()
0.32 /testbed/src/_pytest/capture.py(418):         self._assert_state("start", ("initialized",))
0.32 /testbed/src/_pytest/capture.py(411):             self._state in states
0.32 /testbed/src/_pytest/capture.py(410):         assert (
0.32 /testbed/src/_pytest/capture.py(419):         os.dup2(self.tmpfile.fileno(), self.targetfd)
0.32 /testbed/src/_pytest/capture.py(420):         self.syscapture.start()
0.32 /testbed/src/_pytest/capture.py(294):         self._assert_state("start", ("initialized",))
0.32 /testbed/src/_pytest/capture.py(288):             self._state in states
0.32 /testbed/src/_pytest/capture.py(287):         assert (
0.32 /testbed/src/_pytest/capture.py(295):         setattr(sys, self.name, self.tmpfile)
0.32 /testbed/src/_pytest/capture.py(296):         self._state = "started"
0.32 /testbed/src/_pytest/capture.py(421):         self._state = "started"
0.32 /testbed/src/_pytest/capture.py(709):         try:
0.32 /testbed/src/_pytest/capture.py(710):             yield
0.32 /testbed/src/_pytest/capture.py(749):             yield
0.32 /testbed/src/_pytest/capture.py(870):     capture_fixture.close()
0.32 /testbed/src/_pytest/capture.py(781):         if self._capture is not None:
0.32 /testbed/src/_pytest/capture.py(782):             out, err = self._capture.pop_outerr_to_orig()
0.32 /testbed/src/_pytest/capture.py(521):         out, err = self.readouterr()
0.32 /testbed/src/_pytest/capture.py(561):         if self.out:
0.32 /testbed/src/_pytest/capture.py(562):             out = self.out.snap()
0.32 /testbed/src/_pytest/capture.py(479):         self._assert_state("snap", ("started", "suspended"))
0.32 /testbed/src/_pytest/capture.py(411):             self._state in states
0.32 /testbed/src/_pytest/capture.py(410):         assert (
0.32 /testbed/src/_pytest/capture.py(480):         self.tmpfile.seek(0)
0.32 /testbed/src/_pytest/capture.py(311):         del self._old
0.32 /testbed/src/_pytest/capture.py(312):         self.tmpfile.close()
0.32 /testbed/src/_pytest/capture.py(313):         self._state = "done"
0.32 /testbed/src/_pytest/capture.py(444):         self.tmpfile.close()
0.32 /testbed/src/_pytest/capture.py(445):         self._state = "done"
0.32 /testbed/src/_pytest/capture.py(555):         if self.err:
0.32 /testbed/src/_pytest/capture.py(556):             self.err.done()
0.32 /testbed/src/_pytest/capture.py(434):         self._assert_state("done", ("initialized", "started", "suspended", "done"))
0.32 /testbed/src/_pytest/capture.py(411):             self._state in states
0.32 /testbed/src/_pytest/capture.py(410):         assert (
0.32 /testbed/src/_pytest/capture.py(435):         if self._state == "done":
0.32 /testbed/src/_pytest/capture.py(437):         os.dup2(self.targetfd_save, self.targetfd)
0.32 /testbed/src/_pytest/capture.py(438):         os.close(self.targetfd_save)
0.32 /testbed/src/_pytest/capture.py(439):         if self.targetfd_invalid is not None:
0.32 /testbed/src/_pytest/capture.py(443):         self.syscapture.done()
0.32 /testbed/src/_pytest/capture.py(307):         self._assert_state("done", ("initialized", "started", "suspended", "done"))
0.32 /testbed/src/_pytest/capture.py(288):             self._state in states
0.32 /testbed/src/_pytest/capture.py(287):         assert (
0.32 /testbed/src/_pytest/capture.py(308):         if self._state == "done":
0.32 /testbed/src/_pytest/capture.py(310):         setattr(sys, self.name, self._old)
0.32 /testbed/src/_pytest/capture.py(311):         del self._old
0.32 /testbed/src/_pytest/capture.py(312):         self.tmpfile.close()
0.32 /testbed/src/_pytest/capture.py(313):         self._state = "done"
0.32 /testbed/src/_pytest/capture.py(444):         self.tmpfile.close()
0.32 /testbed/src/_pytest/capture.py(445):         self._state = "done"
0.32 /testbed/src/_pytest/capture.py(557):         if self.in_:
0.32 /testbed/src/_pytest/capture.py(786):             self._capture = None
0.32 /testbed/src/_pytest/capture.py(871):     capman.unset_fixture()
0.32 /testbed/src/_pytest/capture.py(672):         self._capture_fixture = None
0.32 /testbed/src/_pytest/capture.py(712):             self.deactivate_fixture()
0.32 /testbed/src/_pytest/capture.py(683):         if self._capture_fixture:
0.32 /testbed/src/_pytest/capture.py(713):             self.suspend_global_capture(in_=False)
0.32 /testbed/src/_pytest/capture.py(642):         if self._global_capturing is not None:
0.32 /testbed/src/_pytest/capture.py(643):             self._global_capturing.suspend_capturing(in_=in_)
0.32 /testbed/src/_pytest/capture.py(529):         self._state = "suspended"
0.32 /testbed/src/_pytest/capture.py(530):         if self.out:
0.32 /testbed/src/_pytest/capture.py(531):             self.out.suspend()
0.32 /testbed/src/_pytest/capture.py(448):         self._assert_state("suspend", ("started", "suspended"))
0.32 /testbed/src/_pytest/capture.py(411):             self._state in states
0.32 /testbed/src/_pytest/capture.py(410):         assert (
0.32 /testbed/src/_pytest/capture.py(449):         if self._state == "suspended":
0.32 /testbed/src/_pytest/capture.py(451):         self.syscapture.suspend()
0.32 /testbed/src/_pytest/capture.py(316):         self._assert_state("suspend", ("started", "suspended"))
0.32 /testbed/src/_pytest/capture.py(288):             self._state in states
0.32 /testbed/src/_pytest/capture.py(287):         assert (
0.32 /testbed/src/_pytest/capture.py(317):         setattr(sys, self.name, self._old)
=========================== short test summary info ============================
FAILED testing/test_coverup_pytest-dev__pytest-7521.py::test_capfd_includes_carriage_return
============================== 1 failed in 0.05s ===============================
0.32 /testbed/src/_pytest/capture.py(630):         if self._global_capturing is not None:
0.32 /testbed/src/_pytest/capture.py(631):             self._global_capturing.pop_outerr_to_orig()
0.32 /testbed/src/_pytest/capture.py(521):         out, err = self.readouterr()
0.32 /testbed/src/_pytest/capture.py(561):         if self.out:
0.32 /testbed/src/_pytest/capture.py(562):             out = self.out.snap()
0.32 /testbed/src/_pytest/capture.py(479):         self._assert_state("snap", ("started", "suspended"))
0.32 /testbed/src/_pytest/capture.py(411):             self._state in states
0.32 /testbed/src/_pytest/capture.py(410):         assert (
0.32 /testbed/src/_pytest/capture.py(480):         self.tmpfile.seek(0)
0.32 /testbed/src/_pytest/capture.py(481):         res = self.tmpfile.read()
0.32 /testbed/src/_pytest/capture.py(482):         self.tmpfile.seek(0)
0.32 /testbed/src/_pytest/capture.py(483):         self.tmpfile.truncate()
0.32 /testbed/src/_pytest/capture.py(484):         return res
0.32 /testbed/src/_pytest/capture.py(565):         if self.err:
0.32 /testbed/src/_pytest/capture.py(566):             err = self.err.snap()
0.32 /testbed/src/_pytest/capture.py(479):         self._assert_state("snap", ("started", "suspended"))
0.32 /testbed/src/_pytest/capture.py(411):             self._state in states
0.32 /testbed/src/_pytest/capture.py(410):         assert (
0.32 /testbed/src/_pytest/capture.py(480):         self.tmpfile.seek(0)
0.32 /testbed/src/_pytest/capture.py(481):         res = self.tmpfile.read()
0.32 /testbed/src/_pytest/capture.py(482):         self.tmpfile.seek(0)
0.32 /testbed/src/_pytest/capture.py(483):         self.tmpfile.truncate()
0.32 /testbed/src/_pytest/capture.py(484):         return res
0.32 /testbed/src/_pytest/capture.py(569):         return CaptureResult(out, err)
0.32 /testbed/src/_pytest/capture.py(522):         if out:
0.32 /testbed/src/_pytest/capture.py(524):         if err:
0.32 /testbed/src/_pytest/capture.py(526):         return out, err
0.32 /testbed/src/_pytest/capture.py(632):             self._global_capturing.stop_capturing()
0.32 /testbed/src/_pytest/capture.py(550):         if self._state == "stopped":
0.32 /testbed/src/_pytest/capture.py(552):         self._state = "stopped"
0.32 /testbed/src/_pytest/capture.py(553):         if self.out:
0.32 /testbed/src/_pytest/capture.py(554):             self.out.done()
0.32 /testbed/src/_pytest/capture.py(434):         self._assert_state("done", ("initialized", "started", "suspended", "done"))
0.32 /testbed/src/_pytest/capture.py(411):             self._state in states
0.32 /testbed/src/_pytest/capture.py(410):         assert (
0.32 /testbed/src/_pytest/capture.py(435):         if self._state == "done":
0.32 /testbed/src/_pytest/capture.py(437):         os.dup2(self.targetfd_save, self.targetfd)
0.32 /testbed/src/_pytest/capture.py(438):         os.close(self.targetfd_save)
0.32 /testbed/src/_pytest/capture.py(439):         if self.targetfd_invalid is not None:
0.32 /testbed/src/_pytest/capture.py(443):         self.syscapture.done()
0.32 /testbed/src/_pytest/capture.py(307):         self._assert_state("done", ("initialized", "started", "suspended", "done"))
0.32 /testbed/src/_pytest/capture.py(288):             self._state in states
0.32 /testbed/src/_pytest/capture.py(287):         assert (
0.32 /testbed/src/_pytest/capture.py(308):         if self._state == "done":
0.32 /testbed/src/_pytest/capture.py(310):         setattr(sys, self.name, self._old)
0.32 /testbed/src/_pytest/capture.py(311):         del self._old
0.32 /testbed/src/_pytest/capture.py(312):         self.tmpfile.close()
0.32 /testbed/src/_pytest/capture.py(313):         self._state = "done"
0.32 /testbed/src/_pytest/capture.py(444):         self.tmpfile.close()
0.32 /testbed/src/_pytest/capture.py(445):         self._state = "done"
0.32 /testbed/src/_pytest/capture.py(555):         if self.err:
0.32 /testbed/src/_pytest/capture.py(556):             self.err.done()
0.32 /testbed/src/_pytest/capture.py(434):         self._assert_state("done", ("initialized", "started", "suspended", "done"))
0.32 /testbed/src/_pytest/capture.py(411):             self._state in states
0.32 /testbed/src/_pytest/capture.py(410):         assert (
0.32 /testbed/src/_pytest/capture.py(435):         if self._state == "done":
0.32 /testbed/src/_pytest/capture.py(437):         os.dup2(self.targetfd_save, self.targetfd)
0.32 /testbed/src/_pytest/capture.py(438):         os.close(self.targetfd_save)
0.32 /testbed/src/_pytest/capture.py(439):         if self.targetfd_invalid is not None:
0.32 /testbed/src/_pytest/capture.py(443):         self.syscapture.done()
0.32 /testbed/src/_pytest/capture.py(307):         self._assert_state("done", ("initialized", "started", "suspended", "done"))
0.32 /testbed/src/_pytest/capture.py(288):             self._state in states
0.32 /testbed/src/_pytest/capture.py(287):         assert (
0.32 /testbed/src/_pytest/capture.py(308):         if self._state == "done":
0.32 /testbed/src/_pytest/capture.py(310):         setattr(sys, self.name, self._old)
0.32 /testbed/src/_pytest/capture.py(311):         del self._old
0.32 /testbed/src/_pytest/capture.py(312):         self.tmpfile.close()
0.32 /testbed/src/_pytest/capture.py(313):         self._state = "done"
0.32 /testbed/src/_pytest/capture.py(444):         self.tmpfile.close()
0.32 /testbed/src/_pytest/capture.py(445):         self._state = "done"
0.32 /testbed/src/_pytest/capture.py(557):         if self.in_:
0.32 /testbed/src/_pytest/capture.py(558):             self.in_.done()
0.32 /testbed/src/_pytest/capture.py(434):         self._assert_state("done", ("initialized", "started", "suspended", "done"))
0.32 /testbed/src/_pytest/capture.py(411):             self._state in states
0.32 /testbed/src/_pytest/capture.py(410):         assert (
0.32 /testbed/src/_pytest/capture.py(435):         if self._state == "done":
0.32 /testbed/src/_pytest/capture.py(437):         os.dup2(self.targetfd_save, self.targetfd)
0.32 /testbed/src/_pytest/capture.py(438):         os.close(self.targetfd_save)
0.32 /testbed/src/_pytest/capture.py(439):         if self.targetfd_invalid is not None:
0.32 /testbed/src/_pytest/capture.py(443):         self.syscapture.done()
0.32 /testbed/src/_pytest/capture.py(307):         self._assert_state("done", ("initialized", "started", "suspended", "done"))
0.32 /testbed/src/_pytest/capture.py(288):             self._state in states
0.32 /testbed/src/_pytest/capture.py(287):         assert (
0.32 /testbed/src/_pytest/capture.py(308):         if self._state == "done":
0.32 /testbed/src/_pytest/capture.py(310):         setattr(sys, self.name, self._old)
0.32 /testbed/src/_pytest/capture.py(311):         del self._old
0.32 /testbed/src/_pytest/capture.py(312):         self.tmpfile.close()
0.32 /testbed/src/_pytest/capture.py(234):         pass
0.32 /testbed/src/_pytest/capture.py(313):         self._state = "done"
0.32 /testbed/src/_pytest/capture.py(444):         self.tmpfile.close()
0.32 /testbed/src/_pytest/capture.py(445):         self._state = "done"
0.32 /testbed/src/_pytest/capture.py(633):             self._global_capturing = None
+ cat coverage.cover
{"/testbed/src/_pytest/capture.py": {"5": 1, "6": 1, "7": 1, "8": 1, "9": 1, "10": 1, "11": 1, "12": 1, "13": 1, "14": 1, "15": 1, "16": 1, "18": 1, "19": 1, "20": 1, "21": 1, "22": 1, "23": 1, "24": 1, "26": 1, "27": 0, "29": 0, "32": 1, "51": 1, "67": 1, "92": 1, "150": 1, "151": 1, "177": 2, "193": 2, "202": 2, "212": 2, "244": 1, "247": 2, "252": 2, "334": 2, "349": 2, "469": 2, "493": 1, "496": 2, "572": 1, "589": 2, "760": 2, "823": 1, "824": 1, "840": 1, "841": 1, "857": 1, "858": 1, "874": 1, "875": 1, "33": 1, "34": 2, "35": 1, "36": 1, "37": 1, "38": 1, "39": 1, "40": 1, "42": 2, "43": 1, "44": 1, "45": 1, "46": 1, "47": 1, "60": 1, "61": 0, "62": 0, "63": 0, "64": 0, "85": 1, "86": 0, "87": 0, "88": 0, "89": 0, "115": 1, "114": 1, "116": 0, "117": 0, "119": 1, "122": 0, "123": 0, "125": 0, "126": 0, "128": 0, "129": 0, "131": 0, "145": 0, "146": 0, "147": 0, "132": 0, "133": 0, "135": 0, "137": 0, "138": 0, "139": 0, "140": 0, "141": 0, "142": 0, "152": 1, "153": 1, "154": 1, "155": 1, "156": 1, "157": 1, "158": 1, "159": 1, "162": 1, "165": 1, "166": 1, "167": 1, "168": 1, "169": 0, "170": 0, "171": 0, "178": 1, "180": 1, "181": 1, "186": 1, "187": 1, "184": 0, "190": 0, "194": 1, "197": 1, "195": 0, "198": 0, "199": 0, "203": 1, "207": 1, "204": 0, "205": 0, "208": 0, "209": 0, "213": 1, "215": 1, "220": 1, "221": 1, "222": 1, "224": 1, "227": 1, "230": 1, "233": 1, "236": 1, "237": 1, "216": 0, "217": 0, "225": 0, "228": 0, "231": 0, "234": 1, "238": 0, "248": 1, "249": 1, "254": 1, "256": 1, "268": 1, "277": 1, "286": 1, "293": 1, "298": 1, "306": 1, "315": 1, "320": 1, "327": 1, "257": 9, "258": 9, "259": 9, "260": 9, "261": 1, "262": 1, "264": 0, "265": 9, "266": 9, "269": 0, "270": 0, "271": 0, "272": 0, "273": 0, "274": 0, "278": 0, "279": 0, "280": 0, "281": 0, "282": 0, "283": 0, "288": 36, "287": 36, "289": 0, "290": 0, "294": 9, "295": 9, "296": 9, "299": 0, "300": 0, "301": 0, "302": 0, "303": 0, "304": 0, "307": 9, "308": 9, "309": 0, "310": 9, "311": 9, "312": 9, "313": 9, "316": 10, "317": 10, "318": 10, "321": 8, "322": 8, "323": 0, "324": 8, "325": 8, "328": 0, "329": 0, "330": 0, "331": 0, "335": 1, "337": 1, "343": 1, "338": 0, "339": 0, "340": 0, "341": 0, "344": 0, "345": 0, "346": 0, "355": 1, "357": 1, "400": 1, "409": 1, "416": 1, "423": 1, "431": 1, "447": 1, "455": 1, "463": 1, "358": 9, "360": 9, "361": 9, "362": 0, "374": 0, "375": 0, "377": 0, "379": 9, "380": 9, "382": 9, "383": 1, "384": 1, "386": 16, "388": 8, "389": 8, "390": 8, "391": 8, "393": 8, "394": 8, "396": 0, "398": 9, "401": 0, "402": 0, "403": 0, "404": 0, "405": 0, "406": 0, "411": 57, "410": 57, "412": 0, "413": 0, "418": 9, "419": 9, "420": 9, "421": 9, "424": 0, "425": 0, "426": 0, "427": 0, "428": 0, "429": 0, "434": 9, "435": 9, "436": 0, "437": 9, "438": 9, "439": 9, "440": 0, "441": 0, "442": 0, "443": 9, "444": 9, "445": 9, "448": 10, "449": 10, "450": 0, "451": 10, "452": 10, "453": 10, "456": 8, "457": 8, "458": 0, "459": 8, "460": 8, "461": 8, "465": 3, "466": 3, "476": 1, "478": 1, "486": 1, "479": 18, "480": 18, "481": 18, "482": 18, "483": 18, "484": 18, "488": 3, "497": 1, "498": 1, "500": 1, "505": 1, "510": 1, "519": 1, "528": 1, "538": 1, "548": 1, "560": 1, "501": 4, "502": 4, "503": 4, "506": 0, "507": 0, "511": 4, "512": 4, "513": 1, "514": 4, "515": 4, "516": 4, "517": 4, "521": 4, "522": 4, "523": 3, "524": 4, "525": 0, "526": 4, "529": 5, "530": 5, "531": 5, "532": 5, "533": 5, "534": 5, "535": 0, "536": 0, "539": 4, "540": 4, "541": 4, "542": 4, "543": 4, "544": 4, "545": 0, "546": 0, "550": 4, "551": 0, "552": 4, "553": 4, "554": 4, "555": 4, "556": 4, "557": 4, "558": 1, "561": 9, "562": 9, "564": 0, "565": 9, "566": 9, "568": 0, "569": 9, "573": 1, "574": 1, "575": 0, "576": 0, "577": 0, "578": 0, "579": 0, "580": 0, "581": 0, "583": 0, "602": 1, "607": 1, "612": 1, "621": 1, "624": 1, "629": 1, "635": 1, "641": 1, "645": 1, "650": 1, "654": 1, "660": 1, "671": 1, "674": 1, "681": 1, "686": 1, "690": 1, "696": 1, "697": 1, "705": 1, "706": 1, "721": 1, "722": 1, "736": 1, "737": 1, "741": 1, "742": 1, "746": 1, "747": 1, "751": 1, "752": 1, "755": 1, "756": 1, "603": 1, "604": 1, "605": 1, "608": 0, "609": 0, "613": 0, "614": 0, "615": 0, "616": 0, "617": 0, "622": 0, "625": 1, "626": 1, "627": 1, "630": 1, "631": 1, "632": 1, "633": 1, "638": 4, "639": 4, "642": 5, "643": 5, "647": 0, "648": 0, "651": 0, "652": 0, "655": 4, "656": 4, "661": 1, "662": 0, "663": 0, "664": 0, "665": 0, "666": 0, "669": 1, "672": 1, "678": 3, "679": 2, "683": 3, "684": 2, "687": 0, "688": 0, "691": 0, "692": 0, "699": 0, "700": 0, "701": 0, "703": 0, "707": 3, "708": 3, "709": 3, "710": 3, "712": 3, "713": 3, "715": 3, "716": 3, "717": 3, "723": 2, "724": 1, "725": 1, "726": 1, "727": 1, "728": 1, "729": 1, "730": 1, "731": 1, "732": 0, "734": 1, "738": 1, "739": 1, "743": 1, "744": 1, "748": 1, "749": 1, "753": 0, "757": 0, "766": 1, "773": 1, "780": 1, "788": 1, "802": 1, "807": 1, "812": 1, "813": 1, "767": 1, "768": 1, "769": 1, "770": 1, "771": 1, "774": 3, "775": 6, "776": 3, "778": 3, "781": 3, "782": 3, "783": 3, "784": 3, "785": 3, "786": 3, "793": 1, "794": 1, "795": 1, "796": 1, "797": 1, "798": 1, "799": 1, "800": 1, "804": 0, "805": 0, "809": 0, "810": 0, "815": 0, "816": 0, "817": 0, "831": 0, "832": 0, "833": 0, "834": 0, "835": 0, "836": 0, "837": 0, "848": 0, "849": 0, "850": 0, "851": 0, "852": 0, "853": 0, "854": 0, "865": 1, "866": 1, "867": 1, "868": 1, "869": 1, "870": 1, "871": 1, "882": 0, "883": 0, "884": 0, "885": 0, "886": 0, "887": 0, "888": 0}}
+ git checkout 41d211c24a6781843b174379d6d6538f5c17adb9
Note: switching to '41d211c24a6781843b174379d6d6538f5c17adb9'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at 41d211c24 testing: use a tighter check if `bash` is available (#7520)
+ git apply /root/pre_state.patch
error: unrecognized input
