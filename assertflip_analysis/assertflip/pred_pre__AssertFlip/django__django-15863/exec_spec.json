{"instance_id": "django__django-15863", "repo": "django/django", "version": "4.2", "environment_setup_commit": "0fbdb9784da915fce5dcc1fe82bac9b4785749e5", "patch_list": ["diff --git a/dev/null b/tests/test_coverup_django__django-15863.py\nnew file mode 100644\nindex e69de29..0845fc3 100644\n--- /dev/null\n+++ b/tests/test_coverup_django__django-15863.py\n@@ -0,0 +1,32 @@\n+from decimal import Decimal\n+from django.test import SimpleTestCase\n+from django.template import Template, Context\n+from django.conf import settings\n+from django import setup\n+\n+class FloatFormatPrecisionTest(SimpleTestCase):\n+    @classmethod\n+    def setUpClass(cls):\n+        super().setUpClass()\n+        # Configure Django settings for template rendering\n+        TEMPLATES = [\n+            {\n+                'BACKEND': 'django.template.backends.django.DjangoTemplates',\n+            },\n+        ]\n+        if not settings.configured:\n+            settings.configure(TEMPLATES=TEMPLATES)\n+        setup()\n+\n+    def test_floatformat_precision_loss(self):\n+        # Create a template using the floatformat filter with high precision\n+        template = Template('{{ value|floatformat:20 }}')\n+        \n+        # Use a Decimal number with high precision\n+        context = Context({'value': Decimal('42.12345678901234567890')})\n+        \n+        # Render the template\n+        rendered = template.render(context)\n+        \n+        # Assert that the rendered output matches the correct output\n+        self.assertEqual(rendered, '42.12345678901234567890')\n"], "arch": "x86_64", "base_commit": "37c5b8c07be104fd5288cd87f101e48cb7a40298", "test_directives": ["test_coverup_django__django-15863"], "coverage_files": ["django/template/defaultfilters.py"], "env_name": "testbed", "run_id": "assertflip", "patch_id": "pred_pre__AssertFlip", "timeout": 1800, "rm_image": false, "force_rebuild": false, "exec_mode": "unit_test", "reproduction_script_name": null, "compute_coverage": true, "install": {"python": "3.9", "packages": "requirements.txt", "install": "python -m pip install -e ."}, "cache_level": "instance", "test_command": "python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/template/defaultfilters\\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-15863", "req_install_commands": ["conda create -n testbed python=3.9 -y", "cat <<'EOF_59812759871' > $HOME/requirements.txt\naiosmtpd\nasgiref >= 3.6.0\nargon2-cffi >= 19.2.0\nbackports.zoneinfo; python_version < '3.9'\nbcrypt\nblack\ndocutils\ngeoip2; python_version < '3.12'\njinja2 >= 2.11.0\nnumpy; python_version < '3.12'\nPillow >= 6.2.1; sys.platform != 'win32' or python_version < '3.12'\npylibmc; sys.platform != 'win32'\npymemcache >= 3.4.0\npytz\npywatchman; sys.platform != 'win32'\nPyYAML\nredis >= 3.4.0\nselenium\nsqlparse >= 0.3.1\ntblib >= 1.5.0\ntzdata\ncolorama; sys.platform == 'win32'\n\nEOF_59812759871", "conda activate testbed && python -m pip install -r $HOME/requirements.txt", "rm $HOME/requirements.txt"]}