diff --git a/dev/null b/tests/test_coverup_django__django-11603.py
new file mode 100644
index e69de29..278e65d 100644
--- /dev/null
+++ b/tests/test_coverup_django__django-11603.py
@@ -0,0 +1,59 @@
+from django.test import TestCase
+from django.db import models, connection
+from django.db.models import Avg, Sum
+
+# Define a temporary model for testing
+class MockModel(models.Model):
+    value = models.IntegerField()
+
+    class Meta:
+        app_label = 'tests'
+        managed = True
+
+class AggregateDistinctTests(TestCase):
+    databases = {'default'}
+
+    @classmethod
+    def setUpTestData(cls):
+        with connection.cursor() as cursor:
+            cursor.execute('CREATE TABLE tests_mockmodel (id INTEGER PRIMARY KEY AUTOINCREMENT, value INTEGER);')
+        
+        MockModel.objects.bulk_create([
+            MockModel(value=1),
+            MockModel(value=2),
+            MockModel(value=2),
+            MockModel(value=3),
+            MockModel(value=4),
+            MockModel(value=4),
+            MockModel(value=5),
+        ])
+
+    def test_avg_with_distinct(self):
+        queryset = MockModel.objects.all()
+        try:
+            result = queryset.aggregate(avg_value=Avg('value', distinct=True))
+            exception_thrown = False
+        except TypeError as e:
+            exception_thrown = True
+            result = str(e)
+        
+        self.assertFalse(exception_thrown, "Avg with DISTINCT should not throw a TypeError.")
+        self.assertAlmostEqual(result['avg_value'], 3.0, places=1)
+
+    def test_sum_with_distinct(self):
+        queryset = MockModel.objects.all()
+        try:
+            result = queryset.aggregate(sum_value=Sum('value', distinct=True))
+            exception_thrown = False
+        except TypeError as e:
+            exception_thrown = True
+            result = str(e)
+        
+        self.assertFalse(exception_thrown, "Sum with DISTINCT should not throw a TypeError.")
+        self.assertEqual(result['sum_value'], 15)
+
+    @classmethod
+    def tearDownClass(cls):
+        with connection.cursor() as cursor:
+            cursor.execute('DROP TABLE tests_mockmodel;')
+        super().tearDownClass()
