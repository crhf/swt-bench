+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD b9179e80d2daa1bb6cba1ffe35ca9e6612e115c9
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch master
nothing to commit, working tree clean
+ git show
commit b9179e80d2daa1bb6cba1ffe35ca9e6612e115c9
Merge: 65779e1a53 08fd91d4b6
Author: Oscar Benjamin <oscar.j.benjamin@gmail.com>
Date:   Tue Mar 31 20:18:53 2020 +0100

    Merge pull request #18881 from Mohitbalwani26/refactoring_tests
    
    refactor(test_ode): nth_order_linear_euler_eq_homogeneous

+ git diff b9179e80d2daa1bb6cba1ffe35ca9e6612e115c9
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Requirement already satisfied: mpmath>=0.19 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from sympy==1.6.dev0) (1.3.0)
Installing collected packages: sympy
  Attempting uninstall: sympy
    Found existing installation: sympy 1.6.dev0
    Uninstalling sympy-1.6.dev0:
      Successfully uninstalled sympy-1.6.dev0
  DEPRECATION: Legacy editable install of sympy==1.6.dev0 from file:///testbed (setup.py develop) is deprecated. pip 25.3 will enforce this behaviour change. A possible replacement is to add a pyproject.toml or enable --use-pep517, and use setuptools >= 64. If the resulting installation is not behaving as expected, try using --config-settings editable_mode=compat. Please consult the setuptools documentation for more information. Discussion can be found at https://github.com/pypa/pip/issues/11457
  Running setup.py develop for sympy
Successfully installed sympy
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git apply -v -
<stdin>:13: trailing whitespace.
    
<stdin>:16: trailing whitespace.
    
Checking patch sympy/polys/tests/test_coverup_sympy__sympy-19040.py...
Applied patch sympy/polys/tests/test_coverup_sympy__sympy-19040.py cleanly.
warning: 2 lines add whitespace errors.
+ PYTHONWARNINGS=ignore::UserWarning,ignore::SyntaxWarning
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(sympy/polys/factortools\.py)' bin/test -C --verbose sympy/polys/tests/test_coverup_sympy__sympy-19040.p
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(sympy/polys/factortools\\.py)']
0.29 factortools.py(1): """Polynomial factorization routines in characteristic zero. """
0.29 factortools.py(3): from __future__ import print_function, division
0.29 factortools.py(5): from sympy.polys.galoistools import (
0.29 factortools.py(13): from sympy.polys.densebasic import (
0.29 factortools.py(30): from sympy.polys.densearith import (
0.29 factortools.py(48): from sympy.polys.densetools import (
0.29 factortools.py(59): from sympy.polys.euclidtools import (
0.29 factortools.py(63): from sympy.polys.sqfreetools import (
0.29 factortools.py(68): from sympy.polys.polyutils import _sort_factors
0.29 factortools.py(69): from sympy.polys.polyconfig import query
0.29 factortools.py(71): from sympy.polys.polyerrors import (
0.29 factortools.py(74): from sympy.ntheory import nextprime, isprime, factorint
0.29 factortools.py(75): from sympy.utilities import subsets
0.29 factortools.py(77): from math import ceil as _ceil, log as _log
0.29 factortools.py(80): def dup_trial_division(f, factors, K):
0.29 factortools.py(103): def dmp_trial_division(f, factors, u, K):
0.29 factortools.py(126): def dup_zz_mignotte_bound(f, K):
0.29 factortools.py(135): def dmp_zz_mignotte_bound(f, u, K):
0.29 factortools.py(144): def dup_zz_hensel_step(m, f, g, h, s, t, K):
0.29 factortools.py(201): def dup_zz_hensel_lift(p, f, f_list, l, K):
0.29 factortools.py(258): def _test_pl(fc, q, pl):
0.29 factortools.py(265): def dup_zz_zassenhaus(f, K):
0.29 factortools.py(368): def dup_zz_irreducible_p(f, K):
0.29 factortools.py(383): def dup_cyclotomic_p(f, K, irreducible=False):
0.29 factortools.py(459): def dup_zz_cyclotomic_poly(n, K):
0.29 factortools.py(470): def _dup_cyclotomic_decompose(n, K):
0.29 factortools.py(484): def dup_zz_cyclotomic_factor(f, K):
0.29 factortools.py(528): def dup_zz_factor_sqf(f, K):
0.29 factortools.py(557): def dup_zz_factor(f, K):
0.29 factortools.py(632): def dmp_zz_wang_non_divisors(E, cs, ct, K):
0.29 factortools.py(652): def dmp_zz_wang_test_points(f, T, ct, A, u, K):
0.29 factortools.py(678): def dmp_zz_wang_lead_coeffs(f, T, cs, E, H, A, u, K):
0.29 factortools.py(732): def dup_zz_diophantine(F, m, p, K):
0.29 factortools.py(780): def dmp_zz_diophantine(F, c, A, d, p, u, K):
0.29 factortools.py(848): def dmp_zz_wang_hensel_lifting(f, H, LC, A, p, u, K):
0.29 factortools.py(900): def dmp_zz_wang(f, u, K, mod=None, seed=None):
0.29 factortools.py(1042): def dmp_zz_factor(f, u, K):
0.29 factortools.py(1107): def dup_ext_factor(f, K):
0.29 factortools.py(1138): def dmp_ext_factor(f, u, K):
0.29 factortools.py(1168): def dup_gf_factor(f, K):
0.29 factortools.py(1180): def dmp_gf_factor(f, u, K):
0.29 factortools.py(1185): def dup_factor_list(f, K0):
0.29 factortools.py(1247): def dup_factor_list_include(f, K):
0.29 factortools.py(1258): def dmp_factor_list(f, u, K0):
0.29 factortools.py(1331): def dmp_factor_list_include(f, u, K):
0.29 factortools.py(1345): def dup_irreducible_p(f, K):
0.29 factortools.py(1353): def dmp_irreducible_p(f, u, K):
============================= test process starts ==============================
executable:         /opt/miniconda3/envs/testbed/bin/python3  (3.9.23-final-0) [CPython]
architecture:       64-bit
cache:              no
ground types:       python 
numpy:              None
random seed:        59472489
hash randomization: on (PYTHONHASHSEED=1233860635)

sympy/polys/tests/test_coverup_sympy__sympy-19040.py[1] 
test_factor_with_extension_bug 0.55 factortools.py(1260):     if not u:
0.55 factortools.py(1261):         return dup_factor_list(f, K0)
0.55 factortools.py(1187):     j, f = dup_terms_gcd(f, K0)
0.55 factortools.py(1188):     cont, f = dup_primitive(f, K0)
0.55 factortools.py(1190):     if K0.is_FiniteField:
0.55 factortools.py(1192):     elif K0.is_Algebraic:
0.55 factortools.py(1195):         if not K0.is_Exact:
0.55 factortools.py(1199):             K0_inexact = None
0.55 factortools.py(1201):         if K0.is_Field:
0.55 factortools.py(1202):             K = K0.get_ring()
0.55 factortools.py(1204):             denom, f = dup_clear_denoms(f, K0, K)
0.55 factortools.py(1205):             f = dup_convert(f, K0, K)
0.55 factortools.py(1209):         if K.is_ZZ:
0.55 factortools.py(1210):             coeff, factors = dup_zz_factor(f, K)
0.55 factortools.py(603):     cont, g = dup_primitive(f, K)
0.55 factortools.py(605):     n = dup_degree(g)
0.55 factortools.py(607):     if dup_LC(g, K) < 0:
0.55 factortools.py(610):     if n <= 0:
0.55 factortools.py(612):     elif n == 1:
0.55 factortools.py(615):     if query('USE_IRREDUCIBLE_IN_FACTOR'):
0.55 factortools.py(619):     g = dup_sqf_part(g, K)
0.55 factortools.py(620):     H = None
0.55 factortools.py(622):     if query('USE_CYCLOTOMIC_FACTOR'):
0.55 factortools.py(623):         H = dup_zz_cyclotomic_factor(g, K)
0.55 factortools.py(502):     lc_f, tc_f = dup_LC(f, K), dup_TC(f, K)
0.55 factortools.py(504):     if dup_degree(f) <= 0:
0.55 factortools.py(507):     if lc_f != 1 or tc_f not in [-1, 1]:
0.55 factortools.py(510):     if any(bool(cf) for cf in f[1:-1]):
0.55 factortools.py(510):     if any(bool(cf) for cf in f[1:-1]):
0.55 factortools.py(510):     if any(bool(cf) for cf in f[1:-1]):
0.55 factortools.py(513):     n = dup_degree(f)
0.55 factortools.py(514):     F = _dup_cyclotomic_decompose(n, K)
0.55 factortools.py(471):     H = [[K.one, -K.one]]
0.55 factortools.py(473):     for p, k in factorint(n).items():
0.55 factortools.py(474):         Q = [ dup_quo(dup_inflate(h, p, K), h, K) for h in H ]
0.55 factortools.py(474):         Q = [ dup_quo(dup_inflate(h, p, K), h, K) for h in H ]
0.55 factortools.py(474):         Q = [ dup_quo(dup_inflate(h, p, K), h, K) for h in H ]
0.55 factortools.py(475):         H.extend(Q)
0.55 factortools.py(477):         for i in range(1, k):
0.55 factortools.py(473):     for p, k in factorint(n).items():
0.55 factortools.py(481):     return H
0.55 factortools.py(516):     if not K.is_one(tc_f):
0.55 factortools.py(519):         H = []
0.55 factortools.py(521):         for h in _dup_cyclotomic_decompose(2*n, K):
0.55 factortools.py(471):     H = [[K.one, -K.one]]
0.55 factortools.py(473):     for p, k in factorint(n).items():
0.55 factortools.py(474):         Q = [ dup_quo(dup_inflate(h, p, K), h, K) for h in H ]
0.55 factortools.py(474):         Q = [ dup_quo(dup_inflate(h, p, K), h, K) for h in H ]
0.55 factortools.py(474):         Q = [ dup_quo(dup_inflate(h, p, K), h, K) for h in H ]
0.55 factortools.py(475):         H.extend(Q)
0.55 factortools.py(477):         for i in range(1, k):
0.55 factortools.py(478):             Q = [ dup_inflate(q, p, K) for q in Q ]
0.55 factortools.py(478):             Q = [ dup_inflate(q, p, K) for q in Q ]
0.55 factortools.py(478):             Q = [ dup_inflate(q, p, K) for q in Q ]
0.55 factortools.py(479):             H.extend(Q)
0.55 factortools.py(477):         for i in range(1, k):
0.55 factortools.py(473):     for p, k in factorint(n).items():
0.55 factortools.py(481):     return H
0.55 factortools.py(522):             if h not in F:
0.55 factortools.py(521):         for h in _dup_cyclotomic_decompose(2*n, K):
0.55 factortools.py(522):             if h not in F:
0.55 factortools.py(521):         for h in _dup_cyclotomic_decompose(2*n, K):
0.55 factortools.py(522):             if h not in F:
0.55 factortools.py(523):                 H.append(h)
0.55 factortools.py(521):         for h in _dup_cyclotomic_decompose(2*n, K):
0.55 factortools.py(525):         return H
0.55 factortools.py(625):     if H is None:
0.55 factortools.py(628):     factors = dup_trial_division(f, H, K)
0.55 factortools.py(85):     result = []
0.55 factortools.py(87):     for factor in factors:
0.55 factortools.py(88):         k = 0
0.55 factortools.py(91):             q, r = dup_div(f, factor, K)
0.55 factortools.py(93):             if not r:
0.55 factortools.py(94):                 f, k = q, k + 1
0.55 factortools.py(91):             q, r = dup_div(f, factor, K)
0.55 factortools.py(93):             if not r:
0.55 factortools.py(98):         result.append((factor, k))
0.55 factortools.py(87):     for factor in factors:
0.55 factortools.py(100):     return _sort_factors(result)
0.55 factortools.py(629):     return cont, factors
0.55 factortools.py(1223):         if K0.is_Field:
0.55 factortools.py(1224):             for i, (f, k) in enumerate(factors):
0.55 factortools.py(1225):                 factors[i] = (dup_convert(f, K, K0), k)
0.55 factortools.py(1224):             for i, (f, k) in enumerate(factors):
0.55 factortools.py(1227):             coeff = K0.convert(coeff, K)
0.55 factortools.py(1228):             coeff = K0.quo(coeff, denom)
0.55 factortools.py(1230):             if K0_inexact:
0.55 factortools.py(1241):     if j:
0.55 factortools.py(1244):     return coeff*cont, _sort_factors(factors)
0.60 factortools.py(1260):     if not u:
0.60 factortools.py(1263):     J, f = dmp_terms_gcd(f, u, K0)
0.60 factortools.py(1264):     cont, f = dmp_ground_primitive(f, u, K0)
0.60 factortools.py(1266):     if K0.is_FiniteField:  # pragma: no cover
0.60 factortools.py(1268):     elif K0.is_Algebraic:
0.60 factortools.py(1269):         coeff, factors = dmp_ext_factor(f, u, K0)
0.60 factortools.py(1140):     if not u:
0.60 factortools.py(1143):     lc = dmp_ground_LC(f, u, K)
0.60 factortools.py(1144):     f = dmp_ground_monic(f, u, K)
0.60 factortools.py(1146):     if all(d <= 0 for d in dmp_degree_list(f, u)):
0.60 factortools.py(1146):     if all(d <= 0 for d in dmp_degree_list(f, u)):
0.60 factortools.py(1149):     f, F = dmp_sqf_part(f, u, K), f
0.60 factortools.py(1150):     s, g, r = dmp_sqf_norm(f, u, K)
0.61 factortools.py(1152):     factors = dmp_factor_list_include(r, u, K.dom)
0.61 factortools.py(1333):     if not u:
0.61 factortools.py(1336):     coeff, factors = dmp_factor_list(f, u, K)
0.61 factortools.py(1260):     if not u:
0.61 factortools.py(1263):     J, f = dmp_terms_gcd(f, u, K0)
0.61 factortools.py(1264):     cont, f = dmp_ground_primitive(f, u, K0)
0.61 factortools.py(1266):     if K0.is_FiniteField:  # pragma: no cover
0.61 factortools.py(1268):     elif K0.is_Algebraic:
0.61 factortools.py(1271):         if not K0.is_Exact:
0.61 factortools.py(1275):             K0_inexact = None
0.61 factortools.py(1277):         if K0.is_Field:
0.61 factortools.py(1278):             K = K0.get_ring()
0.61 factortools.py(1280):             denom, f = dmp_clear_denoms(f, u, K0, K)
0.61 factortools.py(1281):             f = dmp_convert(f, u, K0, K)
0.61 factortools.py(1285):         if K.is_ZZ:
0.61 factortools.py(1286):             levels, f, v = dmp_exclude(f, u, K)
0.61 factortools.py(1287):             coeff, factors = dmp_zz_factor(f, v, K)
0.61 factortools.py(1078):     if not u:
0.61 factortools.py(1079):         return dup_zz_factor(f, K)
0.61 factortools.py(603):     cont, g = dup_primitive(f, K)
0.61 factortools.py(605):     n = dup_degree(g)
0.61 factortools.py(607):     if dup_LC(g, K) < 0:
0.61 factortools.py(610):     if n <= 0:
0.61 factortools.py(612):     elif n == 1:
0.61 factortools.py(615):     if query('USE_IRREDUCIBLE_IN_FACTOR'):
0.61 factortools.py(619):     g = dup_sqf_part(g, K)
0.61 factortools.py(620):     H = None
0.61 factortools.py(622):     if query('USE_CYCLOTOMIC_FACTOR'):
0.61 factortools.py(623):         H = dup_zz_cyclotomic_factor(g, K)
0.61 factortools.py(502):     lc_f, tc_f = dup_LC(f, K), dup_TC(f, K)
0.61 factortools.py(504):     if dup_degree(f) <= 0:
0.61 factortools.py(507):     if lc_f != 1 or tc_f not in [-1, 1]:
0.61 factortools.py(508):         return None
0.61 factortools.py(625):     if H is None:
0.61 factortools.py(626):         H = dup_zz_zassenhaus(g, K)
0.61 factortools.py(267):     n = dup_degree(f)
0.61 factortools.py(269):     if n == 1:
0.61 factortools.py(272):     fc = f[-1]
0.61 factortools.py(273):     A = dup_max_norm(f, K)
0.61 factortools.py(274):     b = dup_LC(f, K)
0.61 factortools.py(275):     B = int(abs(K.sqrt(K(n + 1))*2**n*A*b))
0.61 factortools.py(276):     C = int((n + 1)**(2*n)*A**(2*n - 1))
0.61 factortools.py(277):     gamma = int(_ceil(2*_log(C, 2)))
0.61 factortools.py(278):     bound = int(2*gamma*_log(gamma))
0.61 factortools.py(279):     a = []
0.61 factortools.py(283):     for px in range(3, bound + 1):
0.61 factortools.py(284):         if not isprime(px) or b % px == 0:
0.61 factortools.py(287):         px = K.convert(px)
0.61 factortools.py(289):         F = gf_from_int_poly(f, px)
0.61 factortools.py(291):         if not gf_sqf_p(F, px, K):
0.61 factortools.py(293):         fsqfx = gf_factor_sqf(F, px, K)[1]
0.61 factortools.py(294):         a.append((px, fsqfx))
0.61 factortools.py(295):         if len(fsqfx) < 15 or len(a) > 4:
0.61 factortools.py(296):             break
0.61 factortools.py(297):     p, fsqf = min(a, key=lambda x: len(x[1]))
0.61 factortools.py(297):     p, fsqf = min(a, key=lambda x: len(x[1]))
0.61 factortools.py(299):     l = int(_ceil(_log(2*B + 1, p)))
0.61 factortools.py(301):     modular = [gf_to_int_poly(ff, p) for ff in fsqf]
0.61 factortools.py(301):     modular = [gf_to_int_poly(ff, p) for ff in fsqf]
0.61 factortools.py(301):     modular = [gf_to_int_poly(ff, p) for ff in fsqf]
0.61 factortools.py(303):     g = dup_zz_hensel_lift(p, f, modular, l, K)
0.61 factortools.py(224):     r = len(f_list)
0.61 factortools.py(225):     lc = dup_LC(f, K)
0.61 factortools.py(227):     if r == 1:
0.61 factortools.py(228):         F = dup_mul_ground(f, K.gcdex(lc, p**l)[0], K)
0.61 factortools.py(229):         return [ dup_trunc(F, p**l, K) ]
0.61 factortools.py(305):     sorted_T = range(len(g))
0.61 factortools.py(306):     T = set(sorted_T)
0.61 factortools.py(307):     factors, s = [], 1
0.61 factortools.py(308):     pl = p**l
0.61 factortools.py(310):     while 2*s <= len(T):
0.61 factortools.py(365):     return factors + [f]
0.61 factortools.py(628):     factors = dup_trial_division(f, H, K)
0.61 factortools.py(85):     result = []
0.61 factortools.py(87):     for factor in factors:
0.61 factortools.py(88):         k = 0
0.61 factortools.py(91):             q, r = dup_div(f, factor, K)
0.61 factortools.py(93):             if not r:
0.61 factortools.py(94):                 f, k = q, k + 1
0.61 factortools.py(91):             q, r = dup_div(f, factor, K)
0.61 factortools.py(93):             if not r:
0.61 factortools.py(98):         result.append((factor, k))
0.61 factortools.py(87):     for factor in factors:
0.61 factortools.py(100):     return _sort_factors(result)
0.61 factortools.py(629):     return cont, factors
0.61 factortools.py(1289):             for i, (f, k) in enumerate(factors):
0.61 factortools.py(1290):                 factors[i] = (dmp_include(f, levels, v, K), k)
0.61 factortools.py(1289):             for i, (f, k) in enumerate(factors):
0.61 factortools.py(1303):         if K0.is_Field:
0.61 factortools.py(1304):             for i, (f, k) in enumerate(factors):
0.61 factortools.py(1305):                 factors[i] = (dmp_convert(f, u, K, K0), k)
0.61 factortools.py(1304):             for i, (f, k) in enumerate(factors):
0.61 factortools.py(1307):             coeff = K0.convert(coeff, K)
0.61 factortools.py(1308):             coeff = K0.quo(coeff, denom)
0.61 factortools.py(1310):             if K0_inexact:
0.61 factortools.py(1321):     for i, j in enumerate(reversed(J)):
0.61 factortools.py(1322):         if not j:
0.61 factortools.py(1323):             continue
0.61 factortools.py(1321):     for i, j in enumerate(reversed(J)):
0.61 factortools.py(1322):         if not j:
0.61 factortools.py(1323):             continue
0.61 factortools.py(1321):     for i, j in enumerate(reversed(J)):
0.61 factortools.py(1328):     return coeff*cont, _sort_factors(factors)
0.61 factortools.py(1338):     if not factors:
0.61 factortools.py(1341):         g = dmp_mul_ground(factors[0][0], coeff, u, K)
0.61 factortools.py(1342):         return [(g, factors[0][1])] + factors[1:]
0.61 factortools.py(1154):     if len(factors) == 1:
0.61 factortools.py(1155):         factors = [f]
0.61 factortools.py(1165):     return lc, dmp_trial_division(F, factors, u, K)
0.61 factortools.py(108):     result = []
0.61 factortools.py(110):     for factor in factors:
0.61 factortools.py(111):         k = 0
0.61 factortools.py(114):             q, r = dmp_div(f, factor, u, K)
0.61 factortools.py(116):             if dmp_zero_p(r, u):
0.61 factortools.py(117):                 f, k = q, k + 1
0.61 factortools.py(114):             q, r = dmp_div(f, factor, u, K)
0.61 factortools.py(116):             if dmp_zero_p(r, u):
0.61 factortools.py(121):         result.append((factor, k))
0.61 factortools.py(110):     for factor in factors:
0.61 factortools.py(123):     return _sort_factors(result)
0.61 factortools.py(1321):     for i, j in enumerate(reversed(J)):
0.61 factortools.py(1322):         if not j:
0.61 factortools.py(1323):             continue
0.61 factortools.py(1321):     for i, j in enumerate(reversed(J)):
0.61 factortools.py(1322):         if not j:
0.61 factortools.py(1323):             continue
0.61 factortools.py(1321):     for i, j in enumerate(reversed(J)):
0.61 factortools.py(1328):     return coeff*cont, _sort_factors(factors)
F                                          [FAIL]


________________________________________________________________________________
 sympy/polys/tests/test_coverup_sympy__sympy-19040.py:test_factor_with_extension_bug 
Traceback (most recent call last):
  File "/testbed/sympy/polys/tests/test_coverup_sympy__sympy-19040.py", line 12, in test_factor_with_extension_bug
    assert result == (x - 1) * (y - 1)
AssertionError

============= tests finished: 0 passed, 1 failed, in 0.17 seconds ==============
DO *NOT* COMMIT!
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(sympy/polys/factortools\\.py)']
0.57 factortools.py(1): """Polynomial factorization routines in characteristic zero. """
0.57 factortools.py(3): from __future__ import print_function, division
0.57 factortools.py(5): from sympy.polys.galoistools import (
0.57 factortools.py(13): from sympy.polys.densebasic import (
0.58 factortools.py(30): from sympy.polys.densearith import (
0.58 factortools.py(48): from sympy.polys.densetools import (
0.58 factortools.py(59): from sympy.polys.euclidtools import (
0.58 factortools.py(63): from sympy.polys.sqfreetools import (
0.58 factortools.py(68): from sympy.polys.polyutils import _sort_factors
0.58 factortools.py(69): from sympy.polys.polyconfig import query
0.58 factortools.py(71): from sympy.polys.polyerrors import (
0.58 factortools.py(74): from sympy.ntheory import nextprime, isprime, factorint
0.58 factortools.py(75): from sympy.utilities import subsets
0.58 factortools.py(77): from math import ceil as _ceil, log as _log
0.58 factortools.py(80): def dup_trial_division(f, factors, K):
0.58 factortools.py(103): def dmp_trial_division(f, factors, u, K):
0.58 factortools.py(126): def dup_zz_mignotte_bound(f, K):
0.58 factortools.py(135): def dmp_zz_mignotte_bound(f, u, K):
0.58 factortools.py(144): def dup_zz_hensel_step(m, f, g, h, s, t, K):
0.58 factortools.py(201): def dup_zz_hensel_lift(p, f, f_list, l, K):
0.58 factortools.py(258): def _test_pl(fc, q, pl):
0.58 factortools.py(265): def dup_zz_zassenhaus(f, K):
0.58 factortools.py(368): def dup_zz_irreducible_p(f, K):
0.58 factortools.py(383): def dup_cyclotomic_p(f, K, irreducible=False):
0.58 factortools.py(459): def dup_zz_cyclotomic_poly(n, K):
0.58 factortools.py(470): def _dup_cyclotomic_decompose(n, K):
0.58 factortools.py(484): def dup_zz_cyclotomic_factor(f, K):
0.58 factortools.py(528): def dup_zz_factor_sqf(f, K):
0.58 factortools.py(557): def dup_zz_factor(f, K):
0.58 factortools.py(632): def dmp_zz_wang_non_divisors(E, cs, ct, K):
0.58 factortools.py(652): def dmp_zz_wang_test_points(f, T, ct, A, u, K):
0.58 factortools.py(678): def dmp_zz_wang_lead_coeffs(f, T, cs, E, H, A, u, K):
0.58 factortools.py(732): def dup_zz_diophantine(F, m, p, K):
0.58 factortools.py(780): def dmp_zz_diophantine(F, c, A, d, p, u, K):
0.58 factortools.py(848): def dmp_zz_wang_hensel_lifting(f, H, LC, A, p, u, K):
0.58 factortools.py(900): def dmp_zz_wang(f, u, K, mod=None, seed=None):
0.58 factortools.py(1042): def dmp_zz_factor(f, u, K):
0.58 factortools.py(1107): def dup_ext_factor(f, K):
0.58 factortools.py(1138): def dmp_ext_factor(f, u, K):
0.58 factortools.py(1168): def dup_gf_factor(f, K):
0.58 factortools.py(1180): def dmp_gf_factor(f, u, K):
0.58 factortools.py(1185): def dup_factor_list(f, K0):
0.58 factortools.py(1247): def dup_factor_list_include(f, K):
0.58 factortools.py(1258): def dmp_factor_list(f, u, K0):
0.58 factortools.py(1331): def dmp_factor_list_include(f, u, K):
0.58 factortools.py(1345): def dup_irreducible_p(f, K):
0.58 factortools.py(1353): def dmp_irreducible_p(f, u, K):
+ cat coverage.cover
{"/testbed/sympy/polys/factortools.py": {"3": 1, "5": 1, "13": 1, "30": 1, "48": 1, "59": 1, "63": 1, "68": 1, "69": 1, "71": 1, "74": 1, "75": 1, "77": 1, "80": 1, "103": 1, "126": 1, "135": 1, "144": 1, "201": 1, "258": 1, "265": 1, "368": 1, "383": 1, "459": 1, "470": 1, "484": 1, "528": 1, "557": 1, "632": 1, "652": 1, "678": 1, "732": 1, "780": 1, "848": 1, "900": 1, "1042": 1, "1107": 1, "1138": 1, "1168": 1, "1180": 1, "1185": 1, "1247": 1, "1258": 1, "1331": 1, "1345": 1, "1353": 1, "85": 2, "87": 4, "88": 2, "91": 4, "93": 4, "94": 2, "96": 0, "98": 2, "100": 2, "108": 1, "110": 2, "111": 1, "114": 2, "116": 2, "117": 1, "119": 0, "121": 1, "123": 1, "128": 0, "129": 0, "130": 0, "132": 0, "137": 0, "138": 0, "139": 0, "141": 0, "172": 0, "174": 0, "175": 0, "177": 0, "179": 0, "180": 0, "182": 0, "183": 0, "184": 0, "186": 0, "187": 0, "189": 0, "191": 0, "192": 0, "194": 0, "195": 0, "196": 0, "198": 0, "224": 1, "225": 1, "227": 1, "228": 1, "229": 1, "231": 0, "232": 0, "233": 0, "235": 0, "237": 0, "238": 0, "240": 0, "242": 0, "243": 0, "245": 0, "247": 0, "248": 0, "249": 0, "250": 0, "252": 0, "253": 0, "255": 0, "256": 0, "259": 0, "260": 0, "261": 0, "262": 0, "263": 0, "267": 1, "269": 1, "270": 0, "272": 1, "273": 1, "274": 1, "275": 1, "276": 1, "277": 1, "278": 1, "279": 1, "283": 1, "284": 1, "285": 0, "287": 1, "289": 1, "291": 1, "292": 0, "293": 1, "294": 1, "295": 1, "296": 1, "297": 2, "299": 1, "301": 3, "303": 1, "305": 1, "306": 1, "307": 1, "308": 1, "310": 1, "311": 0, "316": 0, "317": 0, "318": 0, "319": 0, "320": 0, "321": 0, "322": 0, "324": 0, "325": 0, "326": 0, "327": 0, "328": 0, "329": 0, "330": 0, "331": 0, "333": 0, "334": 0, "335": 0, "337": 0, "338": 0, "339": 0, "340": 0, "341": 0, "343": 0, "344": 0, "346": 0, "348": 0, "349": 0, "351": 0, "352": 0, "353": 0, "355": 0, "356": 0, "358": 0, "359": 0, "361": 0, "363": 0, "365": 1, "370": 0, "371": 0, "373": 0, "375": 0, "376": 0, "378": 0, "379": 0, "380": 0, "402": 0, "403": 0, "404": 0, "405": 0, "406": 0, "407": 0, "408": 0, "409": 0, "411": 0, "412": 0, "414": 0, "415": 0, "417": 0, "418": 0, "420": 0, "421": 0, "423": 0, "424": 0, "426": 0, "427": 0, "429": 0, "430": 0, "432": 0, "433": 0, "435": 0, "437": 0, "438": 0, "440": 0, "441": 0, "443": 0, "445": 0, "446": 0, "448": 0, "449": 0, "451": 0, "453": 0, "454": 0, "456": 0, "461": 0, "463": 0, "464": 0, "465": 0, "467": 0, "471": 2, "473": 4, "474": 6, "475": 2, "477": 3, "478": 3, "479": 1, "481": 2, "502": 2, "504": 2, "505": 0, "507": 2, "508": 1, "510": 3, "511": 0, "513": 1, "514": 1, "516": 1, "517": 0, "519": 1, "521": 4, "522": 3, "523": 1, "525": 1, "530": 0, "532": 0, "534": 0, "535": 0, "537": 0, "538": 0, "539": 0, "540": 0, "542": 0, "543": 0, "544": 0, "546": 0, "548": 0, "549": 0, "551": 0, "552": 0, "554": 0, "603": 2, "605": 2, "607": 2, "608": 0, "610": 2, "611": 0, "612": 2, "613": 0, "615": 2, "616": 0, "617": 0, "619": 2, "620": 2, "622": 2, "623": 2, "625": 2, "626": 1, "628": 2, "629": 2, "634": 0, "636": 0, "637": 0, "639": 0, "640": 0, "641": 0, "642": 0, "644": 0, "645": 0, "647": 0, "649": 0, "654": 0, "655": 0, "657": 0, "659": 0, "660": 0, "662": 0, "664": 0, "665": 0, "667": 0, "669": 0, "670": 0, "672": 0, "673": 0, "675": 0, "680": 0, "682": 0, "683": 0, "684": 0, "686": 0, "687": 0, "689": 0, "690": 0, "692": 0, "693": 0, "695": 0, "697": 0, "698": 0, "700": 0, "702": 0, "703": 0, "704": 0, "706": 0, "707": 0, "709": 0, "710": 0, "711": 0, "713": 0, "715": 0, "716": 0, "718": 0, "719": 0, "721": 0, "723": 0, "724": 0, "725": 0, "727": 0, "729": 0, "734": 0, "735": 0, "737": 0, "738": 0, "740": 0, "742": 0, "743": 0, "745": 0, "747": 0, "749": 0, "750": 0, "752": 0, "754": 0, "756": 0, "757": 0, "759": 0, "761": 0, "762": 0, "763": 0, "764": 0, "766": 0, "768": 0, "769": 0, "770": 0, "772": 0, "773": 0, "775": 0, "777": 0, "782": 0, "783": 0, "784": 0, "786": 0, "787": 0, "788": 0, "790": 0, "792": 0, "793": 0, "794": 0, "796": 0, "797": 0, "799": 0, "800": 0, "802": 0, "803": 0, "804": 0, "806": 0, "808": 0, "810": 0, "811": 0, "813": 0, "814": 0, "816": 0, "818": 0, "819": 0, "821": 0, "822": 0, "823": 0, "825": 0, "826": 0, "828": 0, "829": 0, "830": 0, "832": 0, "833": 0, "835": 0, "836": 0, "838": 0, "839": 0, "841": 0, "843": 0, "845": 0, "850": 0, "852": 0, "854": 0, "855": 0, "856": 0, "858": 0, "860": 0, "861": 0, "863": 0, "865": 0, "866": 0, "867": 0, "869": 0, "870": 0, "872": 0, "874": 0, "876": 0, "877": 0, "878": 0, "880": 0, "881": 0, "883": 0, "884": 0, "885": 0, "887": 0, "888": 0, "889": 0, "891": 0, "892": 0, "894": 0, "895": 0, "897": 0, "930": 0, "932": 0, "934": 0, "936": 0, "937": 0, "939": 0, "940": 0, "941": 0, "943": 0, "945": 0, "947": 0, "948": 0, "950": 0, "952": 0, "954": 0, "955": 0, "957": 0, "958": 0, "959": 0, "961": 0, "962": 0, "963": 0, "965": 0, "966": 0, "967": 0, "969": 0, "970": 0, "972": 0, "974": 0, "975": 0, "976": 0, "977": 0, "979": 0, "981": 0, "983": 0, "984": 0, "985": 0, "986": 0, "988": 0, "990": 0, "992": 0, "993": 0, "995": 0, "997": 0, "998": 0, "1000": 0, "1002": 0, "1004": 0, "1005": 0, "1007": 0, "1008": 0, "1009": 0, "1010": 0, "1012": 0, "1014": 0, "1016": 0, "1017": 0, "1019": 0, "1020": 0, "1021": 0, "1022": 0, "1023": 0, "1024": 0, "1026": 0, "1027": 0, "1029": 0, "1031": 0, "1032": 0, "1034": 0, "1035": 0, "1037": 0, "1039": 0, "1078": 1, "1079": 1, "1081": 0, "1082": 0, "1084": 0, "1086": 0, "1087": 0, "1089": 0, "1090": 0, "1092": 0, "1094": 0, "1096": 0, "1097": 0, "1098": 0, "1099": 0, "1101": 0, "1102": 0, "1104": 0, "1109": 0, "1111": 0, "1113": 0, "1114": 0, "1115": 0, "1116": 0, "1118": 0, "1119": 0, "1121": 0, "1123": 0, "1124": 0, "1126": 0, "1128": 0, "1129": 0, "1130": 0, "1131": 0, "1132": 0, "1134": 0, "1135": 0, "1140": 1, "1141": 0, "1143": 1, "1144": 1, "1146": 2, "1147": 0, "1149": 1, "1150": 1, "1152": 1, "1154": 1, "1155": 1, "1157": 0, "1159": 0, "1160": 0, "1161": 0, "1162": 0, "1163": 0, "1165": 1, "1170": 0, "1172": 0, "1174": 0, "1175": 0, "1177": 0, "1182": 0, "1187": 1, "1188": 1, "1190": 1, "1191": 0, "1192": 1, "1193": 0, "1195": 1, "1196": 0, "1197": 0, "1199": 1, "1201": 1, "1202": 1, "1204": 1, "1205": 1, "1207": 0, "1209": 1, "1210": 1, "1211": 0, "1212": 0, "1214": 0, "1216": 0, "1217": 0, "1219": 0, "1221": 0, "1223": 1, "1224": 2, "1225": 1, "1227": 1, "1228": 1, "1230": 1, "1231": 0, "1232": 0, "1233": 0, "1234": 0, "1235": 0, "1236": 0, "1238": 0, "1239": 0, "1241": 1, "1242": 0, "1244": 1, "1249": 0, "1251": 0, "1252": 0, "1254": 0, "1255": 0, "1260": 3, "1261": 1, "1263": 2, "1264": 2, "1266": 2, "1267": 0, "1268": 2, "1269": 1, "1271": 1, "1272": 0, "1273": 0, "1275": 1, "1277": 1, "1278": 1, "1280": 1, "1281": 1, "1283": 0, "1285": 1, "1286": 1, "1287": 1, "1289": 2, "1290": 1, "1291": 0, "1292": 0, "1294": 0, "1296": 0, "1297": 0, "1299": 0, "1301": 0, "1303": 1, "1304": 2, "1305": 1, "1307": 1, "1308": 1, "1310": 1, "1311": 0, "1312": 0, "1313": 0, "1314": 0, "1315": 0, "1316": 0, "1318": 0, "1319": 0, "1321": 6, "1322": 4, "1323": 4, "1325": 0, "1326": 0, "1328": 2, "1333": 1, "1334": 0, "1336": 1, "1338": 1, "1339": 0, "1341": 1, "1342": 1, "1350": 0, "1358": 0, "1360": 0, "1361": 0, "1362": 0, "1363": 0, "1365": 0, "1366": 0}}
{"/testbed/sympy/polys/factortools.py": {"3": 1, "5": 1, "13": 1, "30": 1, "48": 1, "59": 1, "63": 1, "68": 1, "69": 1, "71": 1, "74": 1, "75": 1, "77": 1, "80": 1, "103": 1, "126": 1, "135": 1, "144": 1, "201": 1, "258": 1, "265": 1, "368": 1, "383": 1, "459": 1, "470": 1, "484": 1, "528": 1, "557": 1, "632": 1, "652": 1, "678": 1, "732": 1, "780": 1, "848": 1, "900": 1, "1042": 1, "1107": 1, "1138": 1, "1168": 1, "1180": 1, "1185": 1, "1247": 1, "1258": 1, "1331": 1, "1345": 1, "1353": 1, "85": 0, "87": 0, "88": 0, "91": 0, "93": 0, "94": 0, "96": 0, "98": 0, "100": 0, "108": 0, "110": 0, "111": 0, "114": 0, "116": 0, "117": 0, "119": 0, "121": 0, "123": 0, "128": 0, "129": 0, "130": 0, "132": 0, "137": 0, "138": 0, "139": 0, "141": 0, "172": 0, "174": 0, "175": 0, "177": 0, "179": 0, "180": 0, "182": 0, "183": 0, "184": 0, "186": 0, "187": 0, "189": 0, "191": 0, "192": 0, "194": 0, "195": 0, "196": 0, "198": 0, "224": 0, "225": 0, "227": 0, "228": 0, "229": 0, "231": 0, "232": 0, "233": 0, "235": 0, "237": 0, "238": 0, "240": 0, "242": 0, "243": 0, "245": 0, "247": 0, "248": 0, "249": 0, "250": 0, "252": 0, "253": 0, "255": 0, "256": 0, "259": 0, "260": 0, "261": 0, "262": 0, "263": 0, "267": 0, "269": 0, "270": 0, "272": 0, "273": 0, "274": 0, "275": 0, "276": 0, "277": 0, "278": 0, "279": 0, "283": 0, "284": 0, "285": 0, "287": 0, "289": 0, "291": 0, "292": 0, "293": 0, "294": 0, "295": 0, "296": 0, "297": 0, "299": 0, "301": 0, "303": 0, "305": 0, "306": 0, "307": 0, "308": 0, "310": 0, "311": 0, "316": 0, "317": 0, "318": 0, "319": 0, "320": 0, "321": 0, "322": 0, "324": 0, "325": 0, "326": 0, "327": 0, "328": 0, "329": 0, "330": 0, "331": 0, "333": 0, "334": 0, "335": 0, "337": 0, "338": 0, "339": 0, "340": 0, "341": 0, "343": 0, "344": 0, "346": 0, "348": 0, "349": 0, "351": 0, "352": 0, "353": 0, "355": 0, "356": 0, "358": 0, "359": 0, "361": 0, "363": 0, "365": 0, "370": 0, "371": 0, "373": 0, "375": 0, "376": 0, "378": 0, "379": 0, "380": 0, "402": 0, "403": 0, "404": 0, "405": 0, "406": 0, "407": 0, "408": 0, "409": 0, "411": 0, "412": 0, "414": 0, "415": 0, "417": 0, "418": 0, "420": 0, "421": 0, "423": 0, "424": 0, "426": 0, "427": 0, "429": 0, "430": 0, "432": 0, "433": 0, "435": 0, "437": 0, "438": 0, "440": 0, "441": 0, "443": 0, "445": 0, "446": 0, "448": 0, "449": 0, "451": 0, "453": 0, "454": 0, "456": 0, "461": 0, "463": 0, "464": 0, "465": 0, "467": 0, "471": 0, "473": 0, "474": 0, "475": 0, "477": 0, "478": 0, "479": 0, "481": 0, "502": 0, "504": 0, "505": 0, "507": 0, "508": 0, "510": 0, "511": 0, "513": 0, "514": 0, "516": 0, "517": 0, "519": 0, "521": 0, "522": 0, "523": 0, "525": 0, "530": 0, "532": 0, "534": 0, "535": 0, "537": 0, "538": 0, "539": 0, "540": 0, "542": 0, "543": 0, "544": 0, "546": 0, "548": 0, "549": 0, "551": 0, "552": 0, "554": 0, "603": 0, "605": 0, "607": 0, "608": 0, "610": 0, "611": 0, "612": 0, "613": 0, "615": 0, "616": 0, "617": 0, "619": 0, "620": 0, "622": 0, "623": 0, "625": 0, "626": 0, "628": 0, "629": 0, "634": 0, "636": 0, "637": 0, "639": 0, "640": 0, "641": 0, "642": 0, "644": 0, "645": 0, "647": 0, "649": 0, "654": 0, "655": 0, "657": 0, "659": 0, "660": 0, "662": 0, "664": 0, "665": 0, "667": 0, "669": 0, "670": 0, "672": 0, "673": 0, "675": 0, "680": 0, "682": 0, "683": 0, "684": 0, "686": 0, "687": 0, "689": 0, "690": 0, "692": 0, "693": 0, "695": 0, "697": 0, "698": 0, "700": 0, "702": 0, "703": 0, "704": 0, "706": 0, "707": 0, "709": 0, "710": 0, "711": 0, "713": 0, "715": 0, "716": 0, "718": 0, "719": 0, "721": 0, "723": 0, "724": 0, "725": 0, "727": 0, "729": 0, "734": 0, "735": 0, "737": 0, "738": 0, "740": 0, "742": 0, "743": 0, "745": 0, "747": 0, "749": 0, "750": 0, "752": 0, "754": 0, "756": 0, "757": 0, "759": 0, "761": 0, "762": 0, "763": 0, "764": 0, "766": 0, "768": 0, "769": 0, "770": 0, "772": 0, "773": 0, "775": 0, "777": 0, "782": 0, "783": 0, "784": 0, "786": 0, "787": 0, "788": 0, "790": 0, "792": 0, "793": 0, "794": 0, "796": 0, "797": 0, "799": 0, "800": 0, "802": 0, "803": 0, "804": 0, "806": 0, "808": 0, "810": 0, "811": 0, "813": 0, "814": 0, "816": 0, "818": 0, "819": 0, "821": 0, "822": 0, "823": 0, "825": 0, "826": 0, "828": 0, "829": 0, "830": 0, "832": 0, "833": 0, "835": 0, "836": 0, "838": 0, "839": 0, "841": 0, "843": 0, "845": 0, "850": 0, "852": 0, "854": 0, "855": 0, "856": 0, "858": 0, "860": 0, "861": 0, "863": 0, "865": 0, "866": 0, "867": 0, "869": 0, "870": 0, "872": 0, "874": 0, "876": 0, "877": 0, "878": 0, "880": 0, "881": 0, "883": 0, "884": 0, "885": 0, "887": 0, "888": 0, "889": 0, "891": 0, "892": 0, "894": 0, "895": 0, "897": 0, "930": 0, "932": 0, "934": 0, "936": 0, "937": 0, "939": 0, "940": 0, "941": 0, "943": 0, "945": 0, "947": 0, "948": 0, "950": 0, "952": 0, "954": 0, "955": 0, "957": 0, "958": 0, "959": 0, "961": 0, "962": 0, "963": 0, "965": 0, "966": 0, "967": 0, "969": 0, "970": 0, "972": 0, "974": 0, "975": 0, "976": 0, "977": 0, "979": 0, "981": 0, "983": 0, "984": 0, "985": 0, "986": 0, "988": 0, "990": 0, "992": 0, "993": 0, "995": 0, "997": 0, "998": 0, "1000": 0, "1002": 0, "1004": 0, "1005": 0, "1007": 0, "1008": 0, "1009": 0, "1010": 0, "1012": 0, "1014": 0, "1016": 0, "1017": 0, "1019": 0, "1020": 0, "1021": 0, "1022": 0, "1023": 0, "1024": 0, "1026": 0, "1027": 0, "1029": 0, "1031": 0, "1032": 0, "1034": 0, "1035": 0, "1037": 0, "1039": 0, "1078": 0, "1079": 0, "1081": 0, "1082": 0, "1084": 0, "1086": 0, "1087": 0, "1089": 0, "1090": 0, "1092": 0, "1094": 0, "1096": 0, "1097": 0, "1098": 0, "1099": 0, "1101": 0, "1102": 0, "1104": 0, "1109": 0, "1111": 0, "1113": 0, "1114": 0, "1115": 0, "1116": 0, "1118": 0, "1119": 0, "1121": 0, "1123": 0, "1124": 0, "1126": 0, "1128": 0, "1129": 0, "1130": 0, "1131": 0, "1132": 0, "1134": 0, "1135": 0, "1140": 0, "1141": 0, "1143": 0, "1144": 0, "1146": 0, "1147": 0, "1149": 0, "1150": 0, "1152": 0, "1154": 0, "1155": 0, "1157": 0, "1159": 0, "1160": 0, "1161": 0, "1162": 0, "1163": 0, "1165": 0, "1170": 0, "1172": 0, "1174": 0, "1175": 0, "1177": 0, "1182": 0, "1187": 0, "1188": 0, "1190": 0, "1191": 0, "1192": 0, "1193": 0, "1195": 0, "1196": 0, "1197": 0, "1199": 0, "1201": 0, "1202": 0, "1204": 0, "1205": 0, "1207": 0, "1209": 0, "1210": 0, "1211": 0, "1212": 0, "1214": 0, "1216": 0, "1217": 0, "1219": 0, "1221": 0, "1223": 0, "1224": 0, "1225": 0, "1227": 0, "1228": 0, "1230": 0, "1231": 0, "1232": 0, "1233": 0, "1234": 0, "1235": 0, "1236": 0, "1238": 0, "1239": 0, "1241": 0, "1242": 0, "1244": 0, "1249": 0, "1251": 0, "1252": 0, "1254": 0, "1255": 0, "1260": 0, "1261": 0, "1263": 0, "1264": 0, "1266": 0, "1267": 0, "1268": 0, "1269": 0, "1271": 0, "1272": 0, "1273": 0, "1275": 0, "1277": 0, "1278": 0, "1280": 0, "1281": 0, "1283": 0, "1285": 0, "1286": 0, "1287": 0, "1289": 0, "1290": 0, "1291": 0, "1292": 0, "1294": 0, "1296": 0, "1297": 0, "1299": 0, "1301": 0, "1303": 0, "1304": 0, "1305": 0, "1307": 0, "1308": 0, "1310": 0, "1311": 0, "1312": 0, "1313": 0, "1314": 0, "1315": 0, "1316": 0, "1318": 0, "1319": 0, "1321": 0, "1322": 0, "1323": 0, "1325": 0, "1326": 0, "1328": 0, "1333": 0, "1334": 0, "1336": 0, "1338": 0, "1339": 0, "1341": 0, "1342": 0, "1350": 0, "1358": 0, "1360": 0, "1361": 0, "1362": 0, "1363": 0, "1365": 0, "1366": 0}}
+ git checkout b9179e80d2daa1bb6cba1ffe35ca9e6612e115c9
Note: switching to 'b9179e80d2daa1bb6cba1ffe35ca9e6612e115c9'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at b9179e80d2 Merge pull request #18881 from Mohitbalwani26/refactoring_tests
+ git apply /root/pre_state.patch
error: unrecognized input
