{"instance_id": "django__django-15278", "repo": "django/django", "version": "4.1", "environment_setup_commit": "647480166bfe7532e8c471fef0146e3a17e6c0c9", "patch_list": ["diff --git a/dev/null b/tests/test_coverup_django__django-15278.py\nnew file mode 100644\nindex e69de29..d221233 100644\n--- /dev/null\n+++ b/tests/test_coverup_django__django-15278.py\n@@ -0,0 +1,86 @@\n+from django.test import SimpleTestCase\n+from django.db import models, connection\n+from django.db.utils import OperationalError\n+from django.db.migrations.executor import MigrationExecutor\n+from django.db import migrations\n+\n+class AccessToken(models.Model):\n+    class Meta:\n+        app_label = 'oauth2_provider'\n+        db_table = 'oauth2_provider_accesstoken'\n+\n+class RefreshToken(models.Model):\n+    class Meta:\n+        app_label = 'oauth2_provider'\n+        db_table = 'oauth2_provider_refreshtoken'\n+\n+class AddNullableOneToOneFieldTest(SimpleTestCase):\n+    databases = '__all__'\n+\n+    def setUp(self):\n+        self.executor = MigrationExecutor(connection)\n+        self.start_state = self.executor.loader.project_state()\n+\n+    def test_add_nullable_onetoonefield(self):\n+        # Define the initial migration to create the models\n+        initial_operations = [\n+            migrations.CreateModel(\n+                name='AccessToken',\n+                fields=[\n+                    ('id', models.AutoField(primary_key=True)),\n+                ],\n+                options={\n+                    'db_table': 'oauth2_provider_accesstoken',\n+                },\n+            ),\n+            migrations.CreateModel(\n+                name='RefreshToken',\n+                fields=[\n+                    ('id', models.AutoField(primary_key=True)),\n+                ],\n+                options={\n+                    'db_table': 'oauth2_provider_refreshtoken',\n+                },\n+            ),\n+        ]\n+\n+        # Create the initial migration\n+        initial_migration = migrations.Migration('0001_initial', 'oauth2_provider')\n+        initial_migration.operations = initial_operations\n+\n+        # Apply the initial migration\n+        self.executor.apply_migration(self.start_state, initial_migration)\n+\n+        # Insert a record into the AccessToken table\n+        with connection.cursor() as cursor:\n+            cursor.execute('INSERT INTO oauth2_provider_accesstoken (id) VALUES (1)')\n+\n+        # Define the migration to add the OneToOneField\n+        add_field_operations = [\n+            migrations.AddField(\n+                model_name='accesstoken',\n+                name='source_refresh_token',\n+                field=models.OneToOneField(\n+                    blank=True,\n+                    null=True,\n+                    on_delete=models.SET_NULL,\n+                    to='oauth2_provider.RefreshToken',\n+                    related_name='refreshed_access_token',\n+                    unique=True,  # Ensure the field is unique\n+                ),\n+            ),\n+        ]\n+\n+        # Create a migration to add the OneToOneField\n+        add_field_migration = migrations.Migration('0002_add_onetoonefield', 'oauth2_provider')\n+        add_field_migration.operations = add_field_operations\n+\n+        # Apply the migration to add the OneToOneField\n+        try:\n+            self.executor.apply_migration(self.start_state, add_field_migration)\n+        except OperationalError as e:\n+            # The test should fail if an OperationalError is raised\n+            self.fail(f\"Unexpected OperationalError: {e}\")\n+        else:\n+            # If no error is raised, the test passes because the bug was fixed\n+            pass  # The test passes if no OperationalError is raised\n"], "arch": "x86_64", "base_commit": "0ab58c120939093fea90822f376e1866fc714d1f", "test_directives": ["test_coverup_django__django-15278"], "coverage_files": ["django/db/backends/sqlite3/schema.py"], "env_name": "testbed", "run_id": "assertflip", "patch_id": "pred_pre__AssertFlip", "timeout": 1800, "rm_image": false, "force_rebuild": false, "exec_mode": "unit_test", "reproduction_script_name": null, "compute_coverage": true, "install": {"python": "3.9", "packages": "requirements.txt", "install": "python -m pip install -e ."}, "cache_level": "instance", "test_command": "python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/db/backends/sqlite3/schema\\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-15278", "req_install_commands": ["conda create -n testbed python=3.9 -y", "cat <<'EOF_59812759871' > $HOME/requirements.txt\naiosmtpd\nasgiref >= 3.4.1\nargon2-cffi >= 16.1.0\nbackports.zoneinfo; python_version < '3.9'\nbcrypt\nblack\ndocutils\ngeoip2\njinja2 >= 2.9.2\nnumpy\nPillow >= 6.2.0\npylibmc; sys.platform != 'win32'\npymemcache >= 3.4.0\npytz\npywatchman; sys.platform != 'win32'\nPyYAML\nredis >= 3.0.0\nselenium\nsqlparse >= 0.2.2\ntblib >= 1.5.0\ntzdata\ncolorama; sys.platform == 'win32'\n\nEOF_59812759871", "conda activate testbed && python -m pip install -r $HOME/requirements.txt", "rm $HOME/requirements.txt"]}