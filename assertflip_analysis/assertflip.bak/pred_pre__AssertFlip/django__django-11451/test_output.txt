+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD e065b293878b1e3ea56655aa9d33e87576cd77ff
+ sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen
+ locale-gen
Generating locales (this might take a while)...
  en_US.UTF-8... done
Generation complete.
+ export LANG=en_US.UTF-8
+ LANG=en_US.UTF-8
+ export LANGUAGE=en_US:en
+ LANGUAGE=en_US:en
+ export LC_ALL=en_US.UTF-8
+ LC_ALL=en_US.UTF-8
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
nothing to commit, working tree clean
+ git show
commit e065b293878b1e3ea56655aa9d33e87576cd77ff
Author: Jon Dufresne <jon.dufresne@gmail.com>
Date:   Sun Jun 9 16:07:19 2019 -0700

    Refs #27804 -- Used subTest() in filesizeformat tests and HumanizeTests.

diff --git a/tests/humanize_tests/tests.py b/tests/humanize_tests/tests.py
index 16e8fa6bfd..7396c417ab 100644
--- a/tests/humanize_tests/tests.py
+++ b/tests/humanize_tests/tests.py
@@ -31,10 +31,14 @@ class HumanizeTests(SimpleTestCase):
 
     def humanize_tester(self, test_list, result_list, method, normalize_result_func=escape):
         for test_content, result in zip(test_list, result_list):
-            t = Template('{%% load humanize %%}{{ test_content|%s }}' % method)
-            rendered = t.render(Context(locals())).strip()
-            self.assertEqual(rendered, normalize_result_func(result),
-                             msg="%s test failed, produced '%s', should've produced '%s'" % (method, rendered, result))
+            with self.subTest(test_content):
+                t = Template('{%% load humanize %%}{{ test_content|%s }}' % method)
+                rendered = t.render(Context(locals())).strip()
+                self.assertEqual(
+                    rendered,
+                    normalize_result_func(result),
+                    msg="%s test failed, produced '%s', should've produced '%s'" % (method, rendered, result)
+                )
 
     def test_ordinal(self):
         test_list = ('1', '2', '3', '4', '11', '12',
@@ -289,9 +293,10 @@ class HumanizeTests(SimpleTestCase):
         humanize.datetime = DocumentedMockDateTime
         try:
             for test_time_string, expected_natural_time in test_data:
-                test_time = datetime.datetime.strptime(test_time_string, time_format)
-                natural_time = humanize.naturaltime(test_time).replace('\xa0', ' ')
-                self.assertEqual(expected_natural_time, natural_time)
+                with self.subTest(test_time_string):
+                    test_time = datetime.datetime.strptime(test_time_string, time_format)
+                    natural_time = humanize.naturaltime(test_time).replace('\xa0', ' ')
+                    self.assertEqual(expected_natural_time, natural_time)
         finally:
             humanize.datetime = orig_humanize_datetime
 
diff --git a/tests/template_tests/filter_tests/test_filesizeformat.py b/tests/template_tests/filter_tests/test_filesizeformat.py
index 2e425af8ac..2d2aa6743c 100644
--- a/tests/template_tests/filter_tests/test_filesizeformat.py
+++ b/tests/template_tests/filter_tests/test_filesizeformat.py
@@ -6,38 +6,53 @@ from django.utils import translation
 class FunctionTests(SimpleTestCase):
 
     def test_formats(self):
-        self.assertEqual(filesizeformat(1023), '1023\xa0bytes')
-        self.assertEqual(filesizeformat(1024), '1.0\xa0KB')
-        self.assertEqual(filesizeformat(10 * 1024), '10.0\xa0KB')
-        self.assertEqual(filesizeformat(1024 * 1024 - 1), '1024.0\xa0KB')
-        self.assertEqual(filesizeformat(1024 * 1024), '1.0\xa0MB')
-        self.assertEqual(filesizeformat(1024 * 1024 * 50), '50.0\xa0MB')
-        self.assertEqual(filesizeformat(1024 * 1024 * 1024 - 1), '1024.0\xa0MB')
-        self.assertEqual(filesizeformat(1024 * 1024 * 1024), '1.0\xa0GB')
-        self.assertEqual(filesizeformat(1024 * 1024 * 1024 * 1024), '1.0\xa0TB')
-        self.assertEqual(filesizeformat(1024 * 1024 * 1024 * 1024 * 1024), '1.0\xa0PB')
-        self.assertEqual(filesizeformat(1024 * 1024 * 1024 * 1024 * 1024 * 2000), '2000.0\xa0PB')
-        self.assertEqual(filesizeformat(complex(1, -1)), '0\xa0bytes')
-        self.assertEqual(filesizeformat(""), '0\xa0bytes')
-        self.assertEqual(filesizeformat("\N{GREEK SMALL LETTER ALPHA}"), '0\xa0bytes')
+        tests = [
+            (1023, '1023\xa0bytes'),
+            (1024, '1.0\xa0KB'),
+            (10 * 1024, '10.0\xa0KB'),
+            (1024 * 1024 - 1, '1024.0\xa0KB'),
+            (1024 * 1024, '1.0\xa0MB'),
+            (1024 * 1024 * 50, '50.0\xa0MB'),
+            (1024 * 1024 * 1024 - 1, '1024.0\xa0MB'),
+            (1024 * 1024 * 1024, '1.0\xa0GB'),
+            (1024 * 1024 * 1024 * 1024, '1.0\xa0TB'),
+            (1024 * 1024 * 1024 * 1024 * 1024, '1.0\xa0PB'),
+            (1024 * 1024 * 1024 * 1024 * 1024 * 2000, '2000.0\xa0PB'),
+            (complex(1, -1), '0\xa0bytes'),
+            ('', '0\xa0bytes'),
+            ('\N{GREEK SMALL LETTER ALPHA}', '0\xa0bytes'),
+        ]
+        for value, expected in tests:
+            with self.subTest(value=value):
+                self.assertEqual(filesizeformat(value), expected)
 
     def test_localized_formats(self):
+        tests = [
+            (1023, '1023\xa0Bytes'),
+            (1024, '1,0\xa0KB'),
+            (10 * 1024, '10,0\xa0KB'),
+            (1024 * 1024 - 1, '1024,0\xa0KB'),
+            (1024 * 1024, '1,0\xa0MB'),
+            (1024 * 1024 * 50, '50,0\xa0MB'),
+            (1024 * 1024 * 1024 - 1, '1024,0\xa0MB'),
+            (1024 * 1024 * 1024, '1,0\xa0GB'),
+            (1024 * 1024 * 1024 * 1024, '1,0\xa0TB'),
+            (1024 * 1024 * 1024 * 1024 * 1024, '1,0\xa0PB'),
+            (1024 * 1024 * 1024 * 1024 * 1024 * 2000, '2000,0\xa0PB'),
+            (complex(1, -1), '0\xa0Bytes'),
+            ('', '0\xa0Bytes'),
+            ('\N{GREEK SMALL LETTER ALPHA}', '0\xa0Bytes'),
+        ]
         with self.settings(USE_L10N=True), translation.override('de'):
-            self.assertEqual(filesizeformat(1023), '1023\xa0Bytes')
-            self.assertEqual(filesizeformat(1024), '1,0\xa0KB')
-            self.assertEqual(filesizeformat(10 * 1024), '10,0\xa0KB')
-            self.assertEqual(filesizeformat(1024 * 1024 - 1), '1024,0\xa0KB')
-            self.assertEqual(filesizeformat(1024 * 1024), '1,0\xa0MB')
-            self.assertEqual(filesizeformat(1024 * 1024 * 50), '50,0\xa0MB')
-            self.assertEqual(filesizeformat(1024 * 1024 * 1024 - 1), '1024,0\xa0MB')
-            self.assertEqual(filesizeformat(1024 * 1024 * 1024), '1,0\xa0GB')
-            self.assertEqual(filesizeformat(1024 * 1024 * 1024 * 1024), '1,0\xa0TB')
-            self.assertEqual(filesizeformat(1024 * 1024 * 1024 * 1024 * 1024), '1,0\xa0PB')
-            self.assertEqual(filesizeformat(1024 * 1024 * 1024 * 1024 * 1024 * 2000), '2000,0\xa0PB')
-            self.assertEqual(filesizeformat(complex(1, -1)), '0\xa0Bytes')
-            self.assertEqual(filesizeformat(""), '0\xa0Bytes')
-            self.assertEqual(filesizeformat("\N{GREEK SMALL LETTER ALPHA}"), '0\xa0Bytes')
+            for value, expected in tests:
+                with self.subTest(value=value):
+                    self.assertEqual(filesizeformat(value), expected)
 
     def test_negative_numbers(self):
-        self.assertEqual(filesizeformat(-100), '-100\xa0bytes')
-        self.assertEqual(filesizeformat(-1024 * 1024 * 50), '-50.0\xa0MB')
+        tests = [
+            (-100, '-100\xa0bytes'),
+            (-1024 * 1024 * 50, '-50.0\xa0MB'),
+        ]
+        for value, expected in tests:
+            with self.subTest(value=value):
+                self.assertEqual(filesizeformat(value), expected)
+ git diff e065b293878b1e3ea56655aa9d33e87576cd77ff
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
Requirement already satisfied: pytz in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.0.dev20190610064611) (2025.2)
Requirement already satisfied: sqlparse in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.0.dev20190610064611) (0.4.4)
Installing collected packages: Django
  Attempting uninstall: Django
    Found existing installation: Django 3.0.dev20190610064611
    Uninstalling Django-3.0.dev20190610064611:
      Successfully uninstalled Django-3.0.dev20190610064611
  Running setup.py develop for Django
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv
Successfully installed Django-3.0.dev20190610064611
+ git apply -v -
Checking patch tests/test_coverup_django__django-11451.py...
Applied patch tests/test_coverup_django__django-11451.py cleanly.
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/contrib/auth/backends\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-11451
Creating test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
test_authenticate_with_none_username (test_coverup_django__django-11451.ModelBackendAuthenticateTest) ... FAIL

======================================================================
FAIL: test_authenticate_with_none_username (test_coverup_django__django-11451.ModelBackendAuthenticateTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "./tests/test_coverup_django__django-11451.py", line 16, in test_authenticate_with_none_username
    mock_get_by_natural_key.assert_not_called()
  File "/opt/miniconda3/envs/testbed/lib/python3.6/unittest/mock.py", line 777, in assert_not_called
    raise AssertionError(msg)
AssertionError: Expected 'get_by_natural_key' to not have been called. Called 1 times.

----------------------------------------------------------------------
Ran 1 test in 0.002s

FAILED (failures=1)
Destroying test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(django/contrib/auth/backends\\.py)']
Testing against Django installed in '/testbed/django'
0.61 backends.py(1): import inspect
0.61 backends.py(2): import warnings
0.61 backends.py(4): from django.contrib.auth import get_user_model
0.61 backends.py(5): from django.contrib.auth.models import Permission
0.61 backends.py(6): from django.utils.deprecation import RemovedInDjango31Warning
0.61 backends.py(8): UserModel = get_user_model()
0.61 backends.py(11): class BaseBackend:
0.61 backends.py(11): class BaseBackend:
0.61 backends.py(12):     def authenticate(self, request, **kwargs):
0.61 backends.py(15):     def get_user(self, user_id):
0.61 backends.py(18):     def get_user_permissions(self, user_obj, obj=None):
0.61 backends.py(21):     def get_group_permissions(self, user_obj, obj=None):
0.61 backends.py(24):     def get_all_permissions(self, user_obj, obj=None):
0.61 backends.py(30):     def has_perm(self, user_obj, perm, obj=None):
0.61 backends.py(34): class ModelBackend(BaseBackend):
0.61 backends.py(34): class ModelBackend(BaseBackend):
0.61 backends.py(37):     """
0.61 backends.py(39):     def authenticate(self, request, username=None, password=None, **kwargs):
0.61 backends.py(52):     def user_can_authenticate(self, user):
0.61 backends.py(60):     def _get_user_permissions(self, user_obj):
0.61 backends.py(63):     def _get_group_permissions(self, user_obj):
0.61 backends.py(68):     def _get_permissions(self, user_obj, obj, from_name):
0.61 backends.py(87):     def get_user_permissions(self, user_obj, obj=None):
0.61 backends.py(94):     def get_group_permissions(self, user_obj, obj=None):
0.61 backends.py(101):     def get_all_permissions(self, user_obj, obj=None):
0.61 backends.py(108):     def has_perm(self, user_obj, perm, obj=None):
0.61 backends.py(111):     def has_module_perms(self, user_obj, app_label):
0.61 backends.py(120):     def get_user(self, user_id):
0.61 backends.py(128): class AllowAllUsersModelBackend(ModelBackend):
0.61 backends.py(128): class AllowAllUsersModelBackend(ModelBackend):
0.61 backends.py(129):     def user_can_authenticate(self, user):
0.61 backends.py(133): class RemoteUserBackend(ModelBackend):
0.61 backends.py(133): class RemoteUserBackend(ModelBackend):
0.61 backends.py(143):     """
0.61 backends.py(146):     create_unknown_user = True
0.61 backends.py(148):     def authenticate(self, request, remote_user):
0.61 backends.py(188):     def clean_username(self, username):
0.61 backends.py(197):     def configure_user(self, request, user):
0.61 backends.py(206): class AllowAllUsersRemoteUserBackend(RemoteUserBackend):
0.61 backends.py(206): class AllowAllUsersRemoteUserBackend(RemoteUserBackend):
0.61 backends.py(207):     def user_can_authenticate(self, user):
Skipping setup of unused database(s): other.
Operations to perform:
  Synchronize unmigrated apps: auth, contenttypes, messages, sessions, staticfiles
  Apply all migrations: admin, sites
Synchronizing apps without migrations:
  Creating tables...
    Creating table django_content_type
    Creating table auth_permission
    Creating table auth_group
    Creating table auth_user
    Creating table django_session
    Running deferred SQL...
Running migrations:
  Applying admin.0001_initial... OK
  Applying admin.0002_logentry_remove_auto_add... OK
  Applying admin.0003_logentry_add_action_flag_choices... OK
  Applying sites.0001_initial... OK
  Applying sites.0002_alter_domain_unique... OK
System check identified no issues (0 silenced).
0.80 backends.py(40):         if username is None:
0.80 backends.py(41):             username = kwargs.get(UserModel.USERNAME_FIELD)
0.80 backends.py(42):         try:
0.80 backends.py(43):             user = UserModel._default_manager.get_by_natural_key(username)
0.80 backends.py(44):         except UserModel.DoesNotExist:
0.80 backends.py(47):             UserModel().set_password(password)
+ cat coverage.cover
{"/testbed/django/contrib/auth/backends.py": {"1": 1, "2": 1, "4": 1, "5": 1, "6": 1, "8": 1, "11": 2, "34": 2, "128": 2, "133": 2, "206": 2, "12": 1, "15": 1, "18": 1, "21": 1, "24": 1, "30": 1, "13": 0, "16": 0, "19": 0, "22": 0, "26": 0, "27": 0, "31": 0, "39": 1, "52": 1, "60": 1, "63": 1, "68": 1, "87": 1, "94": 1, "101": 1, "108": 1, "111": 1, "120": 1, "40": 1, "41": 1, "42": 1, "43": 1, "44": 1, "47": 1, "49": 0, "50": 0, "57": 0, "58": 0, "61": 0, "64": 0, "65": 0, "66": 0, "74": 0, "75": 0, "77": 0, "78": 0, "79": 0, "80": 0, "82": 0, "83": 0, "84": 0, "85": 0, "92": 0, "99": 0, "102": 0, "103": 0, "104": 0, "105": 0, "106": 0, "109": 0, "115": 0, "116": 0, "117": 0, "121": 0, "122": 0, "123": 0, "124": 0, "125": 0, "129": 1, "130": 0, "146": 1, "148": 1, "188": 1, "197": 1, "157": 0, "158": 0, "159": 0, "160": 0, "165": 0, "166": 0, "167": 0, "169": 0, "170": 0, "171": 0, "172": 0, "173": 0, "174": 0, "175": 0, "176": 0, "178": 0, "180": 0, "182": 0, "183": 0, "184": 0, "185": 0, "186": 0, "195": 0, "203": 0, "207": 1, "208": 0}}
+ git checkout e065b293878b1e3ea56655aa9d33e87576cd77ff
Note: switching to 'e065b293878b1e3ea56655aa9d33e87576cd77ff'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at e065b29387 Refs #27804 -- Used subTest() in filesizeformat tests and HumanizeTests.
+ git apply /root/pre_state.patch
error: unrecognized input
