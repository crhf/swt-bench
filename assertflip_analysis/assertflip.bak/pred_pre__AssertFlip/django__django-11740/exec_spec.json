{"instance_id": "django__django-11740", "repo": "django/django", "version": "3.0", "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27", "patch_list": ["diff --git a/dev/null b/tests/test_coverup_django__django-11740.py\nnew file mode 100644\nindex e69de29..e3a0073 100644\n--- /dev/null\n+++ b/tests/test_coverup_django__django-11740.py\n@@ -0,0 +1,50 @@\n+import uuid\n+from django.test import TestCase\n+from django.db import models\n+from django.db.migrations.state import ProjectState\n+from django.db.migrations.autodetector import MigrationAutodetector\n+from django.db.migrations.state import ModelState\n+from django.apps import apps\n+\n+class MigrationTest(TestCase):\n+    def setUp(self):\n+        # Initial state with UUIDField\n+        self.from_state = ProjectState()\n+        self.from_state.add_model(ModelState(\n+            app_label='testapp1',\n+            name='App1',\n+            fields=[\n+                ('id', models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+                ('text', models.CharField(max_length=100)),\n+                ('another_app', models.UUIDField(null=True, blank=True)),\n+            ],\n+        ))\n+        self.from_state.add_model(ModelState(\n+            app_label='testapp2',\n+            name='App2',\n+            fields=[\n+                ('id', models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+                ('text', models.CharField(max_length=100)),\n+            ],\n+        ))\n+\n+        # New state with ForeignKey\n+        self.to_state = self.from_state.clone()\n+        self.to_state.models['testapp1', 'app1'].fields[2] = (\n+            'another_app',\n+            models.ForeignKey('testapp2.App2', null=True, blank=True, on_delete=models.SET_NULL)\n+        )\n+\n+    def test_uuid_to_fk_migration_dependency(self):\n+        autodetector = MigrationAutodetector(self.from_state, self.to_state)\n+        changes = autodetector._detect_changes()\n+\n+        # Check if the migration for testapp1 includes a dependency on testapp2\n+        app1_migrations = changes.get('testapp1', [])\n+        has_dependency = any(\n+            'dependencies' in migration.__dict__ and ('testapp2', 'app2', None, True) in migration.__dict__['dependencies']\n+            for migration in app1_migrations\n+        )\n+\n+        # Assert that the migration includes a dependency on testapp2\n+        self.assertTrue(has_dependency)\n"], "arch": "x86_64", "base_commit": "003bb34b218adb23d1a7e67932a6ba9b3c4dcc81", "test_directives": ["test_coverup_django__django-11740"], "coverage_files": ["django/db/migrations/autodetector.py"], "env_name": "testbed", "run_id": "assertflip", "patch_id": "pred_pre__AssertFlip", "timeout": 1800, "rm_image": false, "force_rebuild": false, "exec_mode": "unit_test", "reproduction_script_name": null, "compute_coverage": true, "install": {"python": "3.6", "packages": "requirements.txt", "install": "python -m pip install -e .", "eval_commands": ["sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen && locale-gen", "export LANG=en_US.UTF-8", "export LANGUAGE=en_US:en", "export LC_ALL=en_US.UTF-8"]}, "cache_level": "instance", "test_command": "python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/db/migrations/autodetector\\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-11740", "req_install_commands": ["conda create -n testbed python=3.6 -y", "cat <<'EOF_59812759871' > $HOME/requirements.txt\nasgiref ~= 3.2\nargon2-cffi >= 16.1.0\nbcrypt\ndocutils\ngeoip2\njinja2 >= 2.9.2\nnumpy\nPillow != 5.4.0\npylibmc; sys.platform != 'win32'\npython-memcached >= 1.59\npytz\npywatchman; sys.platform != 'win32'\nPyYAML\nselenium\nsqlparse >= 0.2.2\ntblib >= 1.5.0\n\nEOF_59812759871", "conda activate testbed && python -m pip install -r $HOME/requirements.txt", "rm $HOME/requirements.txt"]}