{"instance_id": "pytest-dev__pytest-7982", "repo": "pytest-dev/pytest", "version": "6.2", "environment_setup_commit": "902739cfc3bbc3379e6ef99c8e250de35f52ecde", "patch_list": ["diff --git a/dev/null b/testing/test_coverup_pytest-dev__pytest-7982.py\nnew file mode 100644\nindex e69de29..c0b12c5 100644\n--- /dev/null\n+++ b/testing/test_coverup_pytest-dev__pytest-7982.py\n@@ -0,0 +1,26 @@\n+import os\n+import pytest\n+import tempfile\n+\n+def test_symlinked_directory_not_collected(capsys):\n+    # Create a temporary directory structure\n+    with tempfile.TemporaryDirectory() as tempdir:\n+        # Create a target directory with a test file\n+        target_dir = os.path.join(tempdir, 'target')\n+        os.mkdir(target_dir)\n+        test_file = os.path.join(target_dir, 'test_example.py')\n+        with open(test_file, 'w') as f:\n+            f.write('def test_example():\\n    assert True\\n')\n+\n+        # Create a symlink to the target directory\n+        symlink_dir = os.path.join(tempdir, 'symlink')\n+        os.symlink(target_dir, symlink_dir)\n+\n+        # Run pytest on the directory containing the symlink with --collect-only\n+        pytest.main([tempdir, '--collect-only'])\n+\n+        # Capture the output\n+        captured = capsys.readouterr()\n+\n+        # Assert that the test in the symlinked directory is collected\n+        assert 'symlink/test_example.py' in captured.out\n"], "arch": "x86_64", "base_commit": "a7e38c5c61928033a2dc1915cbee8caa8544a4d0", "test_directives": ["testing/test_coverup_pytest-dev__pytest-7982.py"], "coverage_files": ["src/_pytest/pathlib.py"], "env_name": "testbed", "run_id": "assertflip", "patch_id": "pred_pre__AssertFlip", "timeout": 1800, "rm_image": false, "force_rebuild": false, "exec_mode": "unit_test", "reproduction_script_name": null, "compute_coverage": true, "install": {"python": "3.9", "install": "python -m pip install -e .", "pip_packages": ["attrs==23.1.0", "iniconfig==2.0.0", "packaging==23.1", "pluggy==0.13.1", "py==1.11.0", "toml==0.10.2"]}, "cache_level": "instance", "test_command": "python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(src/_pytest/pathlib\\.py)' -m pytest -rA testing/test_coverup_pytest-dev__pytest-7982.py", "req_install_commands": ["conda create -n testbed python=3.9  -y"]}