+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD 9c92924cd5d164701e2514e1c2d6574126bd7cc2
+ sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen
+ locale-gen
Generating locales (this might take a while)...
  en_US.UTF-8... done
Generation complete.
+ export LANG=en_US.UTF-8
+ LANG=en_US.UTF-8
+ export LANGUAGE=en_US:en
+ LANGUAGE=en_US:en
+ export LC_ALL=en_US.UTF-8
+ LC_ALL=en_US.UTF-8
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
nothing to commit, working tree clean
+ git show
commit 9c92924cd5d164701e2514e1c2d6574126bd7cc2
Author: Jeremy Lain√© <jeremy.laine@m4x.org>
Date:   Tue Aug 25 14:33:05 2020 +0200

    Fixed #31942 -- Made settings cleansing work with dictionary settings with non-string keys.

diff --git a/django/views/debug.py b/django/views/debug.py
index 68dba4b500..e45ef01ace 100644
--- a/django/views/debug.py
+++ b/django/views/debug.py
@@ -91,18 +91,19 @@ class SafeExceptionReporterFilter:
         value is a dictionary, recursively cleanse the keys in that dictionary.
         """
         try:
-            if self.hidden_settings.search(key):
-                cleansed = self.cleansed_substitute
-            elif isinstance(value, dict):
-                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}
-            elif isinstance(value, list):
-                cleansed = [self.cleanse_setting('', v) for v in value]
-            elif isinstance(value, tuple):
-                cleansed = tuple([self.cleanse_setting('', v) for v in value])
-            else:
-                cleansed = value
+            is_sensitive = self.hidden_settings.search(key)
         except TypeError:
-            # If the key isn't regex-able, just return as-is.
+            is_sensitive = False
+
+        if is_sensitive:
+            cleansed = self.cleansed_substitute
+        elif isinstance(value, dict):
+            cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}
+        elif isinstance(value, list):
+            cleansed = [self.cleanse_setting('', v) for v in value]
+        elif isinstance(value, tuple):
+            cleansed = tuple([self.cleanse_setting('', v) for v in value])
+        else:
             cleansed = value
 
         if callable(cleansed):
diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py
index bb5a45224d..6e839b44f5 100644
--- a/tests/view_tests/tests/test_debug.py
+++ b/tests/view_tests/tests/test_debug.py
@@ -1274,6 +1274,19 @@ class ExceptionReporterFilterTests(ExceptionReportTestMixin, LoggingCaptureMixin
             {'login': 'cooper', 'password': reporter_filter.cleansed_substitute},
         )
 
+    def test_cleanse_setting_recurses_in_dictionary_with_non_string_key(self):
+        reporter_filter = SafeExceptionReporterFilter()
+        initial = {('localhost', 8000): {'login': 'cooper', 'password': 'secret'}}
+        self.assertEqual(
+            reporter_filter.cleanse_setting('SETTING_NAME', initial),
+            {
+                ('localhost', 8000): {
+                    'login': 'cooper',
+                    'password': reporter_filter.cleansed_substitute,
+                },
+            },
+        )
+
     def test_cleanse_setting_recurses_in_list_tuples(self):
         reporter_filter = SafeExceptionReporterFilter()
         initial = [
+ git diff 9c92924cd5d164701e2514e1c2d6574126bd7cc2
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
Requirement already satisfied: asgiref>=3.2.10 in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.2) (3.4.1)
Requirement already satisfied: pytz in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.2) (2025.2)
Requirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.2) (0.4.4)
Requirement already satisfied: typing-extensions in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from asgiref>=3.2.10->Django==3.2) (4.1.1)
Installing collected packages: Django
  Attempting uninstall: Django
    Found existing installation: Django 3.2
    Uninstalling Django-3.2:
      Successfully uninstalled Django-3.2
  Running setup.py develop for Django
Successfully installed Django-3.2
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv
+ git apply -v -
Checking patch tests/test_coverup_django__django-13346.py...
Applied patch tests/test_coverup_django__django-13346.py cleanly.
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/db/models/fields/json\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-13346
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(django/db/models/fields/json\\.py)']
0.36 json.py(1): import json
0.36 json.py(3): from django import forms
0.36 json.py(4): from django.core import checks, exceptions
0.36 json.py(5): from django.db import NotSupportedError, connections, router
0.36 json.py(6): from django.db.models import lookups
0.36 json.py(7): from django.db.models.lookups import PostgresOperatorLookup, Transform
0.36 json.py(8): from django.utils.translation import gettext_lazy as _
0.36 json.py(10): from . import Field
0.36 json.py(11): from .mixins import CheckFieldDefaultMixin
0.36 json.py(13): __all__ = ['JSONField']
0.36 json.py(16): class JSONField(CheckFieldDefaultMixin, Field):
0.36 json.py(16): class JSONField(CheckFieldDefaultMixin, Field):
0.36 json.py(17):     empty_strings_allowed = False
0.36 json.py(18):     description = _('A JSON object')
0.36 json.py(20):         'invalid': _('Value must be valid JSON.'),
0.36 json.py(22):     _default_hint = ('dict', '{}')
0.36 json.py(25):         self, verbose_name=None, name=None, encoder=None, decoder=None,
0.36 json.py(36):     def check(self, **kwargs):
0.36 json.py(42):     def _check_supported(self, databases):
0.36 json.py(62):     def deconstruct(self):
0.36 json.py(70):     def from_db_value(self, value, expression, connection):
0.36 json.py(80):     def get_internal_type(self):
0.36 json.py(83):     def get_prep_value(self, value):
0.36 json.py(88):     def get_transform(self, name):
0.36 json.py(94):     def select_format(self, compiler, sql, params):
0.36 json.py(102):     def validate(self, value, model_instance):
0.36 json.py(113):     def value_to_string(self, obj):
0.36 json.py(116):     def formfield(self, **kwargs):
0.36 json.py(125): def compile_json_path(key_transforms, include_root=True):
0.36 json.py(138): class DataContains(PostgresOperatorLookup):
0.36 json.py(138): class DataContains(PostgresOperatorLookup):
0.36 json.py(139):     lookup_name = 'contains'
0.36 json.py(140):     postgres_operator = '@>'
0.36 json.py(142):     def as_sql(self, compiler, connection):
0.36 json.py(153): class ContainedBy(PostgresOperatorLookup):
0.36 json.py(153): class ContainedBy(PostgresOperatorLookup):
0.36 json.py(154):     lookup_name = 'contained_by'
0.36 json.py(155):     postgres_operator = '<@'
0.36 json.py(157):     def as_sql(self, compiler, connection):
0.36 json.py(168): class HasKeyLookup(PostgresOperatorLookup):
0.36 json.py(168): class HasKeyLookup(PostgresOperatorLookup):
0.36 json.py(169):     logical_operator = None
0.36 json.py(171):     def as_sql(self, compiler, connection, template=None):
0.36 json.py(199):     def as_mysql(self, compiler, connection):
0.36 json.py(202):     def as_oracle(self, compiler, connection):
0.36 json.py(208):     def as_postgresql(self, compiler, connection):
0.36 json.py(216):     def as_sqlite(self, compiler, connection):
0.36 json.py(220): class HasKey(HasKeyLookup):
0.36 json.py(220): class HasKey(HasKeyLookup):
0.36 json.py(221):     lookup_name = 'has_key'
0.36 json.py(222):     postgres_operator = '?'
0.36 json.py(223):     prepare_rhs = False
0.36 json.py(226): class HasKeys(HasKeyLookup):
0.36 json.py(226): class HasKeys(HasKeyLookup):
0.36 json.py(227):     lookup_name = 'has_keys'
0.36 json.py(228):     postgres_operator = '?&'
0.36 json.py(229):     logical_operator = ' AND '
0.36 json.py(231):     def get_prep_lookup(self):
0.36 json.py(235): class HasAnyKeys(HasKeys):
0.36 json.py(235): class HasAnyKeys(HasKeys):
0.36 json.py(236):     lookup_name = 'has_any_keys'
0.36 json.py(237):     postgres_operator = '?|'
0.36 json.py(238):     logical_operator = ' OR '
0.36 json.py(241): class JSONExact(lookups.Exact):
0.36 json.py(241): class JSONExact(lookups.Exact):
0.36 json.py(242):     can_use_none_as_rhs = True
0.36 json.py(244):     def process_lhs(self, compiler, connection):
0.36 json.py(253):     def process_rhs(self, compiler, connection):
0.36 json.py(264): JSONField.register_lookup(DataContains)
0.36 json.py(265): JSONField.register_lookup(ContainedBy)
0.36 json.py(266): JSONField.register_lookup(HasKey)
0.36 json.py(267): JSONField.register_lookup(HasKeys)
0.36 json.py(268): JSONField.register_lookup(HasAnyKeys)
0.36 json.py(269): JSONField.register_lookup(JSONExact)
0.36 json.py(272): class KeyTransform(Transform):
0.36 json.py(272): class KeyTransform(Transform):
0.36 json.py(273):     postgres_operator = '->'
0.36 json.py(274):     postgres_nested_operator = '#>'
0.36 json.py(276):     def __init__(self, key_name, *args, **kwargs):
0.36 json.py(280):     def preprocess_lhs(self, compiler, connection, lhs_only=False):
0.36 json.py(294):     def as_mysql(self, compiler, connection):
0.36 json.py(299):     def as_oracle(self, compiler, connection):
0.36 json.py(307):     def as_postgresql(self, compiler, connection):
0.36 json.py(317):     def as_sqlite(self, compiler, connection):
0.36 json.py(323): class KeyTextTransform(KeyTransform):
0.36 json.py(323): class KeyTextTransform(KeyTransform):
0.36 json.py(324):     postgres_operator = '->>'
0.36 json.py(325):     postgres_nested_operator = '#>>'
0.36 json.py(328): class KeyTransformTextLookupMixin:
0.36 json.py(328): class KeyTransformTextLookupMixin:
0.36 json.py(334):     """
0.36 json.py(335):     def __init__(self, key_transform, *args, **kwargs):
0.36 json.py(348): class CaseInsensitiveMixin:
0.36 json.py(348): class CaseInsensitiveMixin:
0.36 json.py(354):     """
0.36 json.py(355):     def process_lhs(self, compiler, connection):
0.36 json.py(361):     def process_rhs(self, compiler, connection):
0.36 json.py(368): class KeyTransformIsNull(lookups.IsNull):
0.36 json.py(368): class KeyTransformIsNull(lookups.IsNull):
0.36 json.py(370):     def as_oracle(self, compiler, connection):
0.36 json.py(375):     def as_sqlite(self, compiler, connection):
0.36 json.py(381): class KeyTransformExact(JSONExact):
0.36 json.py(381): class KeyTransformExact(JSONExact):
0.36 json.py(382):     def process_lhs(self, compiler, connection):
0.36 json.py(391):     def process_rhs(self, compiler, connection):
0.36 json.py(411):     def as_oracle(self, compiler, connection):
0.36 json.py(426): class KeyTransformIExact(CaseInsensitiveMixin, KeyTransformTextLookupMixin, lookups.IExact):
0.36 json.py(426): class KeyTransformIExact(CaseInsensitiveMixin, KeyTransformTextLookupMixin, lookups.IExact):
0.36 json.py(427):     pass
0.36 json.py(430): class KeyTransformIContains(CaseInsensitiveMixin, KeyTransformTextLookupMixin, lookups.IContains):
0.36 json.py(430): class KeyTransformIContains(CaseInsensitiveMixin, KeyTransformTextLookupMixin, lookups.IContains):
0.36 json.py(431):     pass
0.36 json.py(434): class KeyTransformStartsWith(KeyTransformTextLookupMixin, lookups.StartsWith):
0.36 json.py(434): class KeyTransformStartsWith(KeyTransformTextLookupMixin, lookups.StartsWith):
0.36 json.py(435):     pass
0.36 json.py(438): class KeyTransformIStartsWith(CaseInsensitiveMixin, KeyTransformTextLookupMixin, lookups.IStartsWith):
0.36 json.py(438): class KeyTransformIStartsWith(CaseInsensitiveMixin, KeyTransformTextLookupMixin, lookups.IStartsWith):
0.36 json.py(439):     pass
0.36 json.py(442): class KeyTransformEndsWith(KeyTransformTextLookupMixin, lookups.EndsWith):
0.36 json.py(442): class KeyTransformEndsWith(KeyTransformTextLookupMixin, lookups.EndsWith):
0.36 json.py(443):     pass
0.36 json.py(446): class KeyTransformIEndsWith(CaseInsensitiveMixin, KeyTransformTextLookupMixin, lookups.IEndsWith):
0.36 json.py(446): class KeyTransformIEndsWith(CaseInsensitiveMixin, KeyTransformTextLookupMixin, lookups.IEndsWith):
0.36 json.py(447):     pass
0.36 json.py(450): class KeyTransformRegex(KeyTransformTextLookupMixin, lookups.Regex):
0.36 json.py(450): class KeyTransformRegex(KeyTransformTextLookupMixin, lookups.Regex):
0.36 json.py(451):     pass
0.36 json.py(454): class KeyTransformIRegex(CaseInsensitiveMixin, KeyTransformTextLookupMixin, lookups.IRegex):
0.36 json.py(454): class KeyTransformIRegex(CaseInsensitiveMixin, KeyTransformTextLookupMixin, lookups.IRegex):
0.36 json.py(455):     pass
0.36 json.py(458): class KeyTransformNumericLookupMixin:
Creating test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
test_in_lookup_on_key_transform (test_coverup_django__django-13346.JSONFieldInLookupTest) ... FAIL

======================================================================
FAIL: test_in_lookup_on_key_transform (test_coverup_django__django-13346.JSONFieldInLookupTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "./tests/test_coverup_django__django-13346.py", line 33, in test_in_lookup_on_key_transform
    self.assertEqual(len(first_items), 3)  # This should return 3 items as expected
AssertionError: 0 != 3

----------------------------------------------------------------------
Ran 1 test in 0.006s

FAILED (failures=1)
Destroying test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
0.36 json.py(458): class KeyTransformNumericLookupMixin:
0.36 json.py(459):     def process_rhs(self, compiler, connection):
0.36 json.py(466): class KeyTransformLt(KeyTransformNumericLookupMixin, lookups.LessThan):
0.36 json.py(466): class KeyTransformLt(KeyTransformNumericLookupMixin, lookups.LessThan):
0.36 json.py(467):     pass
0.36 json.py(470): class KeyTransformLte(KeyTransformNumericLookupMixin, lookups.LessThanOrEqual):
0.36 json.py(470): class KeyTransformLte(KeyTransformNumericLookupMixin, lookups.LessThanOrEqual):
0.36 json.py(471):     pass
0.36 json.py(474): class KeyTransformGt(KeyTransformNumericLookupMixin, lookups.GreaterThan):
0.36 json.py(474): class KeyTransformGt(KeyTransformNumericLookupMixin, lookups.GreaterThan):
0.36 json.py(475):     pass
0.36 json.py(478): class KeyTransformGte(KeyTransformNumericLookupMixin, lookups.GreaterThanOrEqual):
0.36 json.py(478): class KeyTransformGte(KeyTransformNumericLookupMixin, lookups.GreaterThanOrEqual):
0.36 json.py(479):     pass
0.36 json.py(482): KeyTransform.register_lookup(KeyTransformExact)
0.36 json.py(483): KeyTransform.register_lookup(KeyTransformIExact)
0.36 json.py(484): KeyTransform.register_lookup(KeyTransformIsNull)
0.36 json.py(485): KeyTransform.register_lookup(KeyTransformIContains)
0.36 json.py(486): KeyTransform.register_lookup(KeyTransformStartsWith)
0.36 json.py(487): KeyTransform.register_lookup(KeyTransformIStartsWith)
0.36 json.py(488): KeyTransform.register_lookup(KeyTransformEndsWith)
0.36 json.py(489): KeyTransform.register_lookup(KeyTransformIEndsWith)
0.36 json.py(490): KeyTransform.register_lookup(KeyTransformRegex)
0.36 json.py(491): KeyTransform.register_lookup(KeyTransformIRegex)
0.36 json.py(493): KeyTransform.register_lookup(KeyTransformLt)
0.36 json.py(494): KeyTransform.register_lookup(KeyTransformLte)
0.36 json.py(495): KeyTransform.register_lookup(KeyTransformGt)
0.36 json.py(496): KeyTransform.register_lookup(KeyTransformGte)
0.36 json.py(499): class KeyTransformFactory:
0.36 json.py(499): class KeyTransformFactory:
0.36 json.py(501):     def __init__(self, key_name):
0.36 json.py(504):     def __call__(self, *args, **kwargs):
Testing against Django installed in '/testbed/django'
Skipping setup of unused database(s): other.
Operations to perform:
  Synchronize unmigrated apps: auth, contenttypes, messages, sessions, staticfiles
  Apply all migrations: admin, sites
Synchronizing apps without migrations:
  Creating tables...
    Creating table django_content_type
    Creating table auth_permission
    Creating table auth_group
    Creating table auth_user
    Creating table django_session
    Running deferred SQL...
Running migrations:
  Applying admin.0001_initial... OK
  Applying admin.0002_logentry_remove_auto_add... OK
  Applying admin.0003_logentry_add_action_flag_choices... OK
  Applying sites.0001_initial... OK
  Applying sites.0002_alter_domain_unique... OK
System check identified no issues (0 silenced).
0.86 json.py(28):         if encoder and not callable(encoder):
0.86 json.py(30):         if decoder and not callable(decoder):
0.86 json.py(32):         self.encoder = encoder
0.86 json.py(33):         self.decoder = decoder
0.86 json.py(34):         super().__init__(verbose_name, name, **kwargs)
0.87 json.py(84):         if value is None:
0.87 json.py(86):         return json.dumps(value, cls=self.encoder)
0.87 json.py(84):         if value is None:
0.87 json.py(86):         return json.dumps(value, cls=self.encoder)
0.87 json.py(84):         if value is None:
0.87 json.py(86):         return json.dumps(value, cls=self.encoder)
0.87 json.py(84):         if value is None:
0.87 json.py(86):         return json.dumps(value, cls=self.encoder)
0.87 json.py(89):         transform = super().get_transform(name)
0.87 json.py(90):         if transform:
0.87 json.py(92):         return KeyTransformFactory(name)
0.87 json.py(502):         self.key_name = key_name
0.87 json.py(505):         return KeyTransform(self.key_name, *args, **kwargs)
0.87 json.py(277):         super().__init__(*args, **kwargs)
0.87 json.py(278):         self.key_name = str(key_name)
0.87 json.py(84):         if value is None:
0.87 json.py(86):         return json.dumps(value, cls=self.encoder)
0.87 json.py(96):             compiler.connection.features.has_native_json_field and
0.87 json.py(100):         return super().select_format(compiler, sql, params)
0.87 json.py(318):         lhs, params, key_transforms = self.preprocess_lhs(compiler, connection)
0.87 json.py(281):         if not lhs_only:
0.87 json.py(282):             key_transforms = [self.key_name]
0.87 json.py(283):         previous = self.lhs
0.87 json.py(284):         while isinstance(previous, KeyTransform):
0.87 json.py(288):         lhs, params = compiler.compile(previous)
0.87 json.py(289):         if connection.vendor == 'oracle':
0.87 json.py(292):         return (lhs, params, key_transforms) if not lhs_only else (lhs, params)
0.87 json.py(319):         json_path = compile_json_path(key_transforms)
0.87 json.py(126):     path = ['$'] if include_root else []
0.87 json.py(127):     for key_transform in key_transforms:
0.87 json.py(128):         try:
0.87 json.py(129):             num = int(key_transform)
0.87 json.py(130):         except ValueError:  # non-integer
0.87 json.py(131):             path.append('.')
0.87 json.py(132):             path.append(json.dumps(key_transform))
0.87 json.py(127):     for key_transform in key_transforms:
0.87 json.py(135):     return ''.join(path)
0.87 json.py(320):         return 'JSON_EXTRACT(%s, %%s)' % lhs, tuple(params) + (json_path,)
0.87 json.py(81):         return 'JSONField'
0.87 json.py(81):         return 'JSONField'
0.87 json.py(81):         return 'JSONField'
+ cat coverage.cover
{"/testbed/django/db/models/fields/json.py": {"1": 1, "3": 1, "4": 1, "5": 1, "6": 1, "7": 1, "8": 1, "10": 1, "11": 1, "13": 1, "16": 2, "125": 1, "138": 2, "153": 2, "168": 2, "220": 2, "226": 2, "235": 2, "241": 2, "264": 1, "265": 1, "266": 1, "267": 1, "268": 1, "269": 1, "272": 2, "323": 2, "328": 2, "348": 2, "368": 2, "381": 2, "426": 2, "430": 2, "434": 2, "438": 2, "442": 2, "446": 2, "450": 2, "454": 2, "458": 2, "466": 2, "470": 2, "474": 2, "478": 2, "482": 1, "483": 1, "484": 1, "485": 1, "486": 1, "487": 1, "488": 1, "489": 1, "490": 1, "491": 1, "493": 1, "494": 1, "495": 1, "496": 1, "499": 2, "17": 1, "18": 1, "20": 1, "22": 1, "25": 1, "36": 1, "42": 1, "62": 1, "70": 1, "80": 1, "83": 1, "88": 1, "94": 1, "102": 1, "113": 1, "116": 1, "28": 1, "29": 0, "30": 1, "31": 0, "32": 1, "33": 1, "34": 1, "37": 0, "38": 0, "39": 0, "40": 0, "43": 0, "44": 0, "45": 0, "46": 0, "47": 0, "49": 0, "50": 0, "52": 0, "53": 0, "54": 0, "55": 0, "56": 0, "57": 0, "60": 0, "63": 0, "64": 0, "65": 0, "66": 0, "67": 0, "68": 0, "71": 0, "72": 0, "73": 0, "74": 0, "75": 0, "76": 0, "77": 0, "78": 0, "81": 3, "84": 5, "85": 0, "86": 5, "89": 1, "90": 1, "91": 0, "92": 1, "96": 1, "97": 0, "99": 0, "100": 1, "103": 0, "104": 0, "105": 0, "106": 0, "107": 0, "108": 0, "109": 0, "110": 0, "114": 0, "117": 0, "118": 0, "119": 0, "120": 0, "121": 0, "126": 1, "127": 2, "128": 1, "129": 1, "130": 1, "131": 1, "132": 1, "134": 0, "135": 1, "139": 1, "140": 1, "142": 1, "143": 0, "144": 0, "145": 0, "147": 0, "148": 0, "149": 0, "150": 0, "154": 1, "155": 1, "157": 1, "158": 0, "159": 0, "160": 0, "162": 0, "163": 0, "164": 0, "165": 0, "169": 1, "171": 1, "199": 1, "202": 1, "208": 1, "216": 1, "173": 0, "174": 0, "175": 0, "177": 0, "178": 0, "179": 0, "181": 0, "182": 0, "183": 0, "184": 0, "185": 0, "186": 0, "187": 0, "189": 0, "190": 0, "191": 0, "192": 0, "195": 0, "196": 0, "197": 0, "200": 0, "203": 0, "206": 0, "209": 0, "210": 0, "211": 0, "212": 0, "213": 0, "214": 0, "217": 0, "221": 1, "222": 1, "223": 1, "227": 1, "228": 1, "229": 1, "231": 1, "232": 0, "236": 1, "237": 1, "238": 1, "242": 1, "244": 1, "253": 1, "245": 0, "246": 0, "247": 0, "248": 0, "250": 0, "251": 0, "254": 0, "256": 0, "257": 0, "258": 0, "259": 0, "260": 0, "261": 0, "273": 1, "274": 1, "276": 1, "280": 1, "294": 1, "299": 1, "307": 1, "317": 1, "277": 1, "278": 1, "281": 1, "282": 1, "283": 1, "284": 1, "285": 0, "286": 0, "287": 0, "288": 1, "289": 1, "291": 0, "292": 1, "295": 0, "296": 0, "297": 0, "300": 0, "301": 0, "303": 0, "304": 0, "305": 0, "308": 0, "309": 0, "310": 0, "311": 0, "312": 0, "313": 0, "314": 0, "315": 0, "318": 1, "319": 1, "320": 1, "324": 1, "325": 1, "335": 1, "336": 0, "337": 0, "338": 0, "341": 0, "342": 0, "343": 0, "345": 0, "355": 1, "361": 1, "356": 0, "357": 0, "358": 0, "359": 0, "362": 0, "363": 0, "364": 0, "365": 0, "370": 1, "375": 1, "371": 0, "372": 0, "373": 0, "376": 0, "377": 0, "378": 0, "382": 1, "391": 1, "411": 1, "383": 0, "384": 0, "385": 0, "386": 0, "387": 0, "388": 0, "389": 0, "392": 0, "393": 0, "394": 0, "395": 0, "396": 0, "397": 0, "398": 0, "399": 0, "400": 0, "401": 0, "402": 0, "404": 0, "405": 0, "406": 0, "407": 0, "408": 0, "409": 0, "412": 0, "413": 0, "415": 0, "416": 0, "417": 0, "418": 0, "420": 0, "421": 0, "423": 0, "427": 1, "431": 1, "435": 1, "439": 1, "443": 1, "447": 1, "451": 1, "455": 1, "459": 1, "460": 0, "461": 0, "462": 0, "463": 0, "467": 1, "471": 1, "475": 1, "479": 1, "501": 1, "504": 1, "502": 1, "505": 1}}
+ git checkout 9c92924cd5d164701e2514e1c2d6574126bd7cc2
Note: switching to '9c92924cd5d164701e2514e1c2d6574126bd7cc2'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at 9c92924cd5 Fixed #31942 -- Made settings cleansing work with dictionary settings with non-string keys.
+ git apply /root/pre_state.patch
error: unrecognized input
