{"instance_id": "pytest-dev__pytest-7236", "repo": "pytest-dev/pytest", "version": "5.4", "environment_setup_commit": "678c1a0745f1cf175c442c719906a1f13e496910", "patch_list": ["diff --git a/dev/null b/testing/test_coverup_pytest-dev__pytest-7236.py\nnew file mode 100644\nindex e69de29..e3628ad 100644\n--- /dev/null\n+++ b/testing/test_coverup_pytest-dev__pytest-7236.py\n@@ -0,0 +1,32 @@\n+import pytest\n+import unittest\n+\n+class MyTestCase(unittest.TestCase):\n+    def setUp(self):\n+        pass\n+\n+    @unittest.skip(\"hello\")\n+    def test_one(self):\n+        pass\n+\n+    def tearDown(self):\n+        # This will raise an error if executed, which should not happen for a skipped test\n+        xxx\n+\n+def test_teardown_executed_on_skipped_test_with_pdb(monkeypatch):\n+    # Create an instance of the test case\n+    test_case = MyTestCase('test_one')\n+\n+    # Simulate the --pdb option by setting the _explicit_tearDown attribute\n+    test_case._explicit_tearDown = test_case.tearDown\n+    setattr(test_case, 'tearDown', lambda *args: None)\n+\n+    # Manually call the _explicit_tearDown to simulate the bug\n+    try:\n+        test_case._explicit_tearDown()\n+    except NameError:\n+        # If an exception is raised, the test should fail\n+        assert False, \"tearDown should not be executed for a skipped test\"\n+    else:\n+        # If no exception is raised, the test passes because the bug is fixed\n+        pass\n"], "arch": "x86_64", "base_commit": "c98bc4cd3d687fe9b392d8eecd905627191d4f06", "test_directives": ["testing/test_coverup_pytest-dev__pytest-7236.py"], "coverage_files": ["src/_pytest/unittest.py"], "env_name": "testbed", "run_id": "assertflip", "patch_id": "pred_pre__AssertFlip", "timeout": 1800, "rm_image": false, "force_rebuild": false, "exec_mode": "unit_test", "reproduction_script_name": null, "compute_coverage": true, "install": {"python": "3.9", "install": "python -m pip install -e .", "pip_packages": ["py==1.11.0", "packaging==23.1", "attrs==23.1.0", "more-itertools==10.1.0", "pluggy==0.13.1"]}, "cache_level": "instance", "test_command": "python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(src/_pytest/unittest\\.py)' -m pytest -rA testing/test_coverup_pytest-dev__pytest-7236.py", "req_install_commands": ["conda create -n testbed python=3.9  -y"]}