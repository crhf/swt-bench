+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD bdb49c4abfb35554a3c8ce761696ffff3bb837fe
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch master
nothing to commit, working tree clean
+ git show
commit bdb49c4abfb35554a3c8ce761696ffff3bb837fe
Merge: b4a02af736 9848dd4b74
Author: Oscar Benjamin <oscar.j.benjamin@gmail.com>
Date:   Fri Sep 25 19:45:11 2020 +0100

    Merge pull request #20134 from ehren/lambdify-integral
    
    Add support for Integral with lambdify (using scipy or mpmath)

+ git diff bdb49c4abfb35554a3c8ce761696ffff3bb837fe
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Requirement already satisfied: mpmath>=0.19 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from sympy==1.7.dev0) (1.3.0)
Installing collected packages: sympy
  Attempting uninstall: sympy
    Found existing installation: sympy 1.7.dev0
    Uninstalling sympy-1.7.dev0:
      Successfully uninstalled sympy-1.7.dev0
  DEPRECATION: Legacy editable install of sympy==1.7.dev0 from file:///testbed (setup.py develop) is deprecated. pip 25.3 will enforce this behaviour change. A possible replacement is to add a pyproject.toml or enable --use-pep517, and use setuptools >= 64. If the resulting installation is not behaving as expected, try using --config-settings editable_mode=compat. Please consult the setuptools documentation for more information. Discussion can be found at https://github.com/pypa/pip/issues/11457
  Running setup.py develop for sympy
Successfully installed sympy
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git apply -v -
<stdin>:12: trailing whitespace.
    
Checking patch sympy/polys/tests/test_coverup_sympy__sympy-20154.py...
<stdin>:17: new blank line at EOF.
+
Applied patch sympy/polys/tests/test_coverup_sympy__sympy-20154.py cleanly.
warning: 2 lines add whitespace errors.
+ PYTHONWARNINGS=ignore::UserWarning,ignore::SyntaxWarning
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(sympy/utilities/iterables\.py)' bin/test -C --verbose sympy/polys/tests/test_coverup_sympy__sympy-20154.p
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(sympy/utilities/iterables\\.py)']
0.27 iterables.py(1): from collections import defaultdict, OrderedDict
0.27 iterables.py(2): from itertools import (
0.27 iterables.py(6): import random
0.27 iterables.py(7): from operator import gt
0.27 iterables.py(9): from sympy.core import Basic
0.27 iterables.py(12): from sympy.core.compatibility import (
0.27 iterables.py(16): from sympy.utilities.enumerative import (
0.27 iterables.py(20): def is_palindromic(s, i=0, j=None):
0.27 iterables.py(56): def flatten(iterable, levels=None, cls=None):
0.27 iterables.py(120): def unflatten(iter, n=2):
0.27 iterables.py(129): def reshape(seq, how):
0.27 iterables.py(189): def group(seq, multiple=True):
0.27 iterables.py(234): def _iproduct2(iterable1, iterable2):
0.27 iterables.py(261): def iproduct(*iterables):
0.27 iterables.py(302): def multiset(seq):
0.27 iterables.py(325): def postorder_traversal(node, keys=None):
0.27 iterables.py(382): def interactive_traversal(expr):
0.27 iterables.py(475): def ibin(n, bits=None, str=False):
0.27 iterables.py(547): def variations(seq, n, repetition=False):
0.27 iterables.py(592): def subsets(seq, k=None, repetition=False):
0.27 iterables.py(642): def filter_symbols(iterator, exclude):
0.27 iterables.py(666): def numbered_symbols(prefix='x', cls=None, start=0, exclude=[], *args, **assumptions):
0.27 iterables.py(705): def capture(func):
0.27 iterables.py(735): def sift(seq, keyfunc, binary=False):
0.27 iterables.py(822): def take(iter, n):
0.27 iterables.py(827): def dict_merge(*dicts):
0.27 iterables.py(837): def common_prefix(*seqs):
0.27 iterables.py(863): def common_suffix(*seqs):
0.27 iterables.py(893): def prefixes(seq):
0.27 iterables.py(912): def postfixes(seq):
0.27 iterables.py(931): def topological_sort(graph, key=None):
0.27 iterables.py(1045): def strongly_connected_components(G):
0.27 iterables.py(1168): def connected_components(G):
0.27 iterables.py(1239): def rotate_left(x, y):
0.27 iterables.py(1258): def rotate_right(x, y):
0.27 iterables.py(1277): def least_rotation(x):
0.27 iterables.py(1317): def multiset_combinations(m, n, g=None):
0.27 iterables.py(1373): def multiset_permutations(m, size=None, g=None):
0.27 iterables.py(1422): def _partition(seq, vector, m=None):
0.27 iterables.py(1460): def _set_partitions(n):
0.27 iterables.py(1539): def multiset_partitions(multiset, m=None):
0.27 iterables.py(1696): def partitions(n, m=None, k=None, size=False):
0.27 iterables.py(1850): def ordered_partitions(n, m=None, sort=True):
0.27 iterables.py(1986): def binary_partitions(n):
0.27 iterables.py(2044): def has_dups(seq):
0.27 iterables.py(2068): def has_variety(seq):
0.27 iterables.py(2090): def uniq(seq, result=None):
0.27 iterables.py(2144): def generate_bell(n):
0.27 iterables.py(2251): def generate_involutions(n):
0.27 iterables.py(2288): def generate_derangements(perm):
0.27 iterables.py(2320): def necklaces(n, k, free=False):
0.27 iterables.py(2365): def bracelets(n, k):
0.27 iterables.py(2370): def generate_oriented_forest(n):
0.27 iterables.py(2416): def minlex(seq, directed=True, is_set=False, small=None):
0.27 iterables.py(2494): def runs(seq, op=gt):
0.27 iterables.py(2531): def kbins(l, k, ordered=None):
0.27 iterables.py(2657): def permute_signs(t):
0.27 iterables.py(2673): def signed_permutations(t):
0.27 iterables.py(2692): def rotations(s, dir=1):
0.27 iterables.py(2712): def roundrobin(*iterables):
0.36 iterables.py(808):     if not binary:
0.36 iterables.py(813):     sift = F, T = [], []
0.36 iterables.py(814):     for i in seq:
0.36 iterables.py(815):         try:
0.36 iterables.py(816):             sift[keyfunc(i)].append(i)
0.36 iterables.py(814):     for i in seq:
0.36 iterables.py(819):     return T, F
0.37 iterables.py(808):     if not binary:
0.37 iterables.py(813):     sift = F, T = [], []
0.37 iterables.py(814):     for i in seq:
0.37 iterables.py(815):         try:
0.37 iterables.py(816):             sift[keyfunc(i)].append(i)
0.37 iterables.py(814):     for i in seq:
0.37 iterables.py(815):         try:
0.37 iterables.py(816):             sift[keyfunc(i)].append(i)
0.37 iterables.py(814):     for i in seq:
0.37 iterables.py(819):     return T, F
0.41 iterables.py(1002):     V, E = graph
0.41 iterables.py(1004):     L = []
0.41 iterables.py(1005):     S = set(V)
0.41 iterables.py(1006):     E = list(E)
0.41 iterables.py(1008):     for v, u in E:
0.41 iterables.py(1009):         S.discard(u)
0.41 iterables.py(1008):     for v, u in E:
0.41 iterables.py(1009):         S.discard(u)
0.41 iterables.py(1008):     for v, u in E:
0.41 iterables.py(1009):         S.discard(u)
0.41 iterables.py(1008):     for v, u in E:
0.41 iterables.py(1009):         S.discard(u)
0.41 iterables.py(1008):     for v, u in E:
0.41 iterables.py(1009):         S.discard(u)
0.41 iterables.py(1008):     for v, u in E:
0.41 iterables.py(1011):     if key is None:
0.41 iterables.py(1012):         key = lambda value: value
0.41 iterables.py(1014):     S = sorted(S, key=key, reverse=True)
0.41 iterables.py(1012):         key = lambda value: value
0.41 iterables.py(1012):         key = lambda value: value
0.41 iterables.py(1012):         key = lambda value: value
0.41 iterables.py(1012):         key = lambda value: value
0.41 iterables.py(1012):         key = lambda value: value
0.41 iterables.py(1012):         key = lambda value: value
0.41 iterables.py(1012):         key = lambda value: value
0.41 iterables.py(1012):         key = lambda value: value
0.41 iterables.py(1012):         key = lambda value: value
0.41 iterables.py(1012):         key = lambda value: value
0.41 iterables.py(1012):         key = lambda value: value
0.41 iterables.py(1012):         key = lambda value: value
0.41 iterables.py(1012):         key = lambda value: value
0.41 iterables.py(1012):         key = lambda value: value
0.41 iterables.py(1012):         key = lambda value: value
0.41 iterables.py(1012):         key = lambda value: value
0.41 iterables.py(1012):         key = lambda value: value
0.41 iterables.py(1012):         key = lambda value: value
0.41 iterables.py(1012):         key = lambda value: value
0.41 iterables.py(1012):         key = lambda value: value
0.41 iterables.py(1012):         key = lambda value: value
0.41 iterables.py(1012):         key = lambda value: value
0.41 iterables.py(1012):         key = lambda value: value
0.41 iterables.py(1016):     while S:
0.41 iterables.py(1017):         node = S.pop()
0.41 iterables.py(1018):         L.append(node)
0.41 iterables.py(1020):         for u, v in list(E):
0.41 iterables.py(1021):             if u == node:
0.41 iterables.py(1020):         for u, v in list(E):
0.41 iterables.py(1021):             if u == node:
0.41 iterables.py(1020):         for u, v in list(E):
0.41 iterables.py(1021):             if u == node:
0.41 iterables.py(1020):         for u, v in list(E):
0.41 iterables.py(1021):             if u == node:
0.41 iterables.py(1020):         for u, v in list(E):
0.41 iterables.py(1021):             if u == node:
0.41 iterables.py(1020):         for u, v in list(E):
0.41 iterables.py(1016):     while S:
0.41 iterables.py(1017):         node = S.pop()
0.41 iterables.py(1018):         L.append(node)
0.41 iterables.py(1020):         for u, v in list(E):
0.41 iterables.py(1021):             if u == node:
0.41 iterables.py(1020):         for u, v in list(E):
0.41 iterables.py(1021):             if u == node:
0.41 iterables.py(1020):         for u, v in list(E):
0.41 iterables.py(1021):             if u == node:
0.41 iterables.py(1020):         for u, v in list(E):
0.41 iterables.py(1021):             if u == node:
0.41 iterables.py(1020):         for u, v in list(E):
0.41 iterables.py(1021):             if u == node:
0.41 iterables.py(1020):         for u, v in list(E):
0.41 iterables.py(1016):     while S:
0.41 iterables.py(1017):         node = S.pop()
0.41 iterables.py(1018):         L.append(node)
0.41 iterables.py(1020):         for u, v in list(E):
0.41 iterables.py(1021):             if u == node:
0.41 iterables.py(1020):         for u, v in list(E):
0.41 iterables.py(1021):             if u == node:
0.41 iterables.py(1020):         for u, v in list(E):
0.41 iterables.py(1021):             if u == node:
0.41 iterables.py(1020):         for u, v in list(E):
0.41 iterables.py(1021):             if u == node:
0.41 iterables.py(1020):         for u, v in list(E):
0.41 iterables.py(1021):             if u == node:
0.41 iterables.py(1020):         for u, v in list(E):
0.41 iterables.py(1016):     while S:
0.41 iterables.py(1017):         node = S.pop()
0.41 iterables.py(1018):         L.append(node)
0.41 iterables.py(1020):         for u, v in list(E):
0.41 iterables.py(1021):             if u == node:
0.41 iterables.py(1022):                 E.remove((u, v))
0.41 iterables.py(1024):                 for _u, _v in E:
0.41 iterables.py(1025):                     if v == _v:
0.41 iterables.py(1026):                         break
0.41 iterables.py(1020):         for u, v in list(E):
0.41 iterables.py(1021):             if u == node:
0.41 iterables.py(1020):         for u, v in list(E):
0.41 iterables.py(1021):             if u == node:
0.41 iterables.py(1020):         for u, v in list(E):
0.41 iterables.py(1021):             if u == node:
0.41 iterables.py(1020):         for u, v in list(E):
0.41 iterables.py(1021):             if u == node:
0.41 iterables.py(1020):         for u, v in list(E):
0.41 iterables.py(1016):     while S:
0.41 iterables.py(1017):         node = S.pop()
0.41 iterables.py(1018):         L.append(node)
0.41 iterables.py(1020):         for u, v in list(E):
0.41 iterables.py(1021):             if u == node:
0.41 iterables.py(1020):         for u, v in list(E):
0.41 iterables.py(1021):             if u == node:
0.41 iterables.py(1022):                 E.remove((u, v))
0.41 iterables.py(1024):                 for _u, _v in E:
0.41 iterables.py(1025):                     if v == _v:
0.41 iterables.py(1026):                         break
0.41 iterables.py(1020):         for u, v in list(E):
0.41 iterables.py(1021):             if u == node:
0.41 iterables.py(1020):         for u, v in list(E):
0.41 iterables.py(1021):             if u == node:
0.41 iterables.py(1020):         for u, v in list(E):
0.41 iterables.py(1016):     while S:
0.41 iterables.py(1017):         node = S.pop()
0.41 iterables.py(1018):         L.append(node)
0.41 iterables.py(1020):         for u, v in list(E):
0.41 iterables.py(1021):             if u == node:
0.41 iterables.py(1020):         for u, v in list(E):
0.41 iterables.py(1021):             if u == node:
0.41 iterables.py(1020):         for u, v in list(E):
0.41 iterables.py(1021):             if u == node:
0.41 iterables.py(1020):         for u, v in list(E):
0.41 iterables.py(1016):     while S:
0.41 iterables.py(1017):         node = S.pop()
0.41 iterables.py(1018):         L.append(node)
0.41 iterables.py(1020):         for u, v in list(E):
0.41 iterables.py(1021):             if u == node:
0.41 iterables.py(1020):         for u, v in list(E):
0.41 iterables.py(1021):             if u == node:
0.41 iterables.py(1020):         for u, v in list(E):
0.41 iterables.py(1021):             if u == node:
0.41 iterables.py(1020):         for u, v in list(E):
0.41 iterables.py(1016):     while S:
0.41 iterables.py(1017):         node = S.pop()
0.41 iterables.py(1018):         L.append(node)
0.41 iterables.py(1020):         for u, v in list(E):
0.41 iterables.py(1021):             if u == node:
0.41 iterables.py(1022):                 E.remove((u, v))
0.41 iterables.py(1024):                 for _u, _v in E:
0.41 iterables.py(1025):                     if v == _v:
0.41 iterables.py(1024):                 for _u, _v in E:
0.41 iterables.py(1025):                     if v == _v:
0.41 iterables.py(1026):                         break
0.41 iterables.py(1020):         for u, v in list(E):
0.41 iterables.py(1021):             if u == node:
0.41 iterables.py(1020):         for u, v in list(E):
0.41 iterables.py(1021):             if u == node:
0.41 iterables.py(1020):         for u, v in list(E):
0.41 iterables.py(1016):     while S:
0.41 iterables.py(1017):         node = S.pop()
0.41 iterables.py(1018):         L.append(node)
0.41 iterables.py(1020):         for u, v in list(E):
0.41 iterables.py(1021):             if u == node:
0.41 iterables.py(1020):         for u, v in list(E):
0.41 iterables.py(1021):             if u == node:
0.41 iterables.py(1020):         for u, v in list(E):
0.41 iterables.py(1016):     while S:
0.41 iterables.py(1017):         node = S.pop()
0.41 iterables.py(1018):         L.append(node)
0.41 iterables.py(1020):         for u, v in list(E):
0.41 iterables.py(1021):             if u == node:
0.41 iterables.py(1022):                 E.remove((u, v))
0.41 iterables.py(1024):                 for _u, _v in E:
0.41 iterables.py(1025):                     if v == _v:
0.41 iterables.py(1024):                 for _u, _v in E:
0.41 iterables.py(1028):                     kv = key(v)
0.41 iterables.py(1012):         key = lambda value: value
0.41 iterables.py(1030):                     for i, s in enumerate(S):
0.41 iterables.py(1031):                         ks = key(s)
0.41 iterables.py(1012):         key = lambda value: value
0.41 iterables.py(1033):                         if kv > ks:
0.41 iterables.py(1030):                     for i, s in enumerate(S):
0.41 iterables.py(1031):                         ks = key(s)
0.41 iterables.py(1012):         key = lambda value: value
0.41 iterables.py(1033):                         if kv > ks:
0.41 iterables.py(1030):                     for i, s in enumerate(S):
0.41 iterables.py(1031):                         ks = key(s)
0.41 iterables.py(1012):         key = lambda value: value
0.41 iterables.py(1033):                         if kv > ks:
0.41 iterables.py(1030):                     for i, s in enumerate(S):
0.41 iterables.py(1031):                         ks = key(s)
0.41 iterables.py(1012):         key = lambda value: value
0.41 iterables.py(1033):                         if kv > ks:
0.41 iterables.py(1030):                     for i, s in enumerate(S):
0.41 iterables.py(1031):                         ks = key(s)
0.41 iterables.py(1012):         key = lambda value: value
0.41 iterables.py(1033):                         if kv > ks:
0.41 iterables.py(1030):                     for i, s in enumerate(S):
0.41 iterables.py(1031):                         ks = key(s)
0.41 iterables.py(1012):         key = lambda value: value
0.41 iterables.py(1033):                         if kv > ks:
0.41 iterables.py(1030):                     for i, s in enumerate(S):
0.41 iterables.py(1031):                         ks = key(s)
0.41 iterables.py(1012):         key = lambda value: value
0.41 iterables.py(1033):                         if kv > ks:
0.41 iterables.py(1030):                     for i, s in enumerate(S):
0.41 iterables.py(1031):                         ks = key(s)
0.41 iterables.py(1012):         key = lambda value: value
0.41 iterables.py(1033):                         if kv > ks:
0.41 iterables.py(1030):                     for i, s in enumerate(S):
0.41 iterables.py(1031):                         ks = key(s)
0.41 iterables.py(1012):         key = lambda value: value
0.41 iterables.py(1033):                         if kv > ks:
0.41 iterables.py(1030):                     for i, s in enumerate(S):
0.41 iterables.py(1031):                         ks = key(s)
0.41 iterables.py(1012):         key = lambda value: value
0.41 iterables.py(1033):                         if kv > ks:
0.41 iterables.py(1030):                     for i, s in enumerate(S):
0.41 iterables.py(1031):                         ks = key(s)
0.41 iterables.py(1012):         key = lambda value: value
0.41 iterables.py(1033):                         if kv > ks:
0.41 iterables.py(1030):                     for i, s in enumerate(S):
0.41 iterables.py(1031):                         ks = key(s)
0.41 iterables.py(1012):         key = lambda value: value
0.41 iterables.py(1033):                         if kv > ks:
0.41 iterables.py(1030):                     for i, s in enumerate(S):
0.41 iterables.py(1031):                         ks = key(s)
0.41 iterables.py(1012):         key = lambda value: value
0.41 iterables.py(1033):                         if kv > ks:
0.41 iterables.py(1030):                     for i, s in enumerate(S):
0.41 iterables.py(1037):                         S.append(v)
0.41 iterables.py(1020):         for u, v in list(E):
0.41 iterables.py(1021):             if u == node:
0.41 iterables.py(1020):         for u, v in list(E):
0.41 iterables.py(1016):     while S:
0.41 iterables.py(1017):         node = S.pop()
0.41 iterables.py(1018):         L.append(node)
0.41 iterables.py(1020):         for u, v in list(E):
0.41 iterables.py(1021):             if u == node:
0.41 iterables.py(1022):                 E.remove((u, v))
0.41 iterables.py(1024):                 for _u, _v in E:
0.41 iterables.py(1028):                     kv = key(v)
0.41 iterables.py(1012):         key = lambda value: value
0.41 iterables.py(1030):                     for i, s in enumerate(S):
0.41 iterables.py(1031):                         ks = key(s)
0.41 iterables.py(1012):         key = lambda value: value
0.41 iterables.py(1033):                         if kv > ks:
0.41 iterables.py(1030):                     for i, s in enumerate(S):
0.41 iterables.py(1031):                         ks = key(s)
0.41 iterables.py(1012):         key = lambda value: value
0.41 iterables.py(1033):                         if kv > ks:
0.41 iterables.py(1030):                     for i, s in enumerate(S):
0.41 iterables.py(1031):                         ks = key(s)
0.41 iterables.py(1012):         key = lambda value: value
0.41 iterables.py(1033):                         if kv > ks:
0.41 iterables.py(1030):                     for i, s in enumerate(S):
0.41 iterables.py(1031):                         ks = key(s)
0.41 iterables.py(1012):         key = lambda value: value
0.41 iterables.py(1033):                         if kv > ks:
0.41 iterables.py(1030):                     for i, s in enumerate(S):
0.41 iterables.py(1031):                         ks = key(s)
0.41 iterables.py(1012):         key = lambda value: value
0.41 iterables.py(1033):                         if kv > ks:
0.41 iterables.py(1030):                     for i, s in enumerate(S):
0.41 iterables.py(1031):                         ks = key(s)
0.41 iterables.py(1012):         key = lambda value: value
0.41 iterables.py(1033):                         if kv > ks:
0.41 iterables.py(1030):                     for i, s in enumerate(S):
0.41 iterables.py(1031):                         ks = key(s)
0.41 iterables.py(1012):         key = lambda value: value
0.41 iterables.py(1033):                         if kv > ks:
0.41 iterables.py(1030):                     for i, s in enumerate(S):
0.41 iterables.py(1031):                         ks = key(s)
0.41 iterables.py(1012):         key = lambda value: value
0.41 iterables.py(1033):                         if kv > ks:
0.41 iterables.py(1030):                     for i, s in enumerate(S):
0.41 iterables.py(1031):                         ks = key(s)
0.41 iterables.py(1012):         key = lambda value: value
0.41 iterables.py(1033):                         if kv > ks:
0.41 iterables.py(1030):                     for i, s in enumerate(S):
0.41 iterables.py(1031):                         ks = key(s)
0.41 iterables.py(1012):         key = lambda value: value
0.41 iterables.py(1033):                         if kv > ks:
0.41 iterables.py(1030):                     for i, s in enumerate(S):
0.41 iterables.py(1031):                         ks = key(s)
0.41 iterables.py(1012):         key = lambda value: value
0.41 iterables.py(1033):                         if kv > ks:
0.41 iterables.py(1030):                     for i, s in enumerate(S):
0.41 iterables.py(1031):                         ks = key(s)
0.41 iterables.py(1012):         key = lambda value: value
0.41 iterables.py(1033):                         if kv > ks:
0.41 iterables.py(1030):                     for i, s in enumerate(S):
0.41 iterables.py(1031):                         ks = key(s)
0.41 iterables.py(1012):         key = lambda value: value
0.41 iterables.py(1033):                         if kv > ks:
0.41 iterables.py(1030):                     for i, s in enumerate(S):
0.41 iterables.py(1037):                         S.append(v)
0.41 iterables.py(1020):         for u, v in list(E):
0.41 iterables.py(1016):     while S:
0.41 iterables.py(1017):         node = S.pop()
0.41 iterables.py(1018):         L.append(node)
0.41 iterables.py(1020):         for u, v in list(E):
0.41 iterables.py(1016):     while S:
0.41 iterables.py(1017):         node = S.pop()
0.41 iterables.py(1018):         L.append(node)
0.41 iterables.py(1020):         for u, v in list(E):
0.41 iterables.py(1016):     while S:
0.41 iterables.py(1017):         node = S.pop()
0.41 iterables.py(1018):         L.append(node)
0.41 iterables.py(1020):         for u, v in list(E):
0.41 iterables.py(1016):     while S:
0.41 iterables.py(1017):         node = S.pop()
0.41 iterables.py(1018):         L.append(node)
0.41 iterables.py(1020):         for u, v in list(E):
0.41 iterables.py(1016):     while S:
0.41 iterables.py(1017):         node = S.pop()
0.41 iterables.py(1018):         L.append(node)
0.41 iterables.py(1020):         for u, v in list(E):
0.41 iterables.py(1016):     while S:
0.41 iterables.py(1017):         node = S.pop()
0.41 iterables.py(1018):         L.append(node)
0.41 iterables.py(1020):         for u, v in list(E):
0.41 iterables.py(1016):     while S:
0.41 iterables.py(1017):         node = S.pop()
0.41 iterables.py(1018):         L.append(node)
0.41 iterables.py(1020):         for u, v in list(E):
0.41 iterables.py(1016):     while S:
0.41 iterables.py(1017):         node = S.pop()
0.41 iterables.py(1018):         L.append(node)
0.41 iterables.py(1020):         for u, v in list(E):
0.41 iterables.py(1016):     while S:
0.41 iterables.py(1017):         node = S.pop()
0.41 iterables.py(1018):         L.append(node)
0.41 iterables.py(1020):         for u, v in list(E):
0.41 iterables.py(1016):     while S:
0.41 iterables.py(1017):         node = S.pop()
0.41 iterables.py(1018):         L.append(node)
0.41 iterables.py(1020):         for u, v in list(E):
0.41 iterables.py(1016):     while S:
0.41 iterables.py(1017):         node = S.pop()
0.41 iterables.py(1018):         L.append(node)
0.41 iterables.py(1020):         for u, v in list(E):
0.41 iterables.py(1016):     while S:
0.41 iterables.py(1017):         node = S.pop()
0.41 iterables.py(1018):         L.append(node)
0.41 iterables.py(1020):         for u, v in list(E):
0.41 iterables.py(1016):     while S:
0.41 iterables.py(1017):         node = S.pop()
0.41 iterables.py(1018):         L.append(node)
0.41 iterables.py(1020):         for u, v in list(E):
0.41 iterables.py(1016):     while S:
0.41 iterables.py(1017):         node = S.pop()
0.41 iterables.py(1018):         L.append(node)
0.41 iterables.py(1020):         for u, v in list(E):
0.41 iterables.py(1016):     while S:
0.41 iterables.py(1039):     if E:
0.41 iterables.py(1042):         return L
0.50 iterables.py(808):     if not binary:
0.50 iterables.py(813):     sift = F, T = [], []
0.50 iterables.py(814):     for i in seq:
0.50 iterables.py(815):         try:
0.50 iterables.py(816):             sift[keyfunc(i)].append(i)
0.50 iterables.py(814):     for i in seq:
0.50 iterables.py(815):         try:
0.50 iterables.py(816):             sift[keyfunc(i)].append(i)
0.50 iterables.py(814):     for i in seq:
0.50 iterables.py(819):     return T, F
0.56 iterables.py(808):     if not binary:
0.56 iterables.py(813):     sift = F, T = [], []
0.56 iterables.py(814):     for i in seq:
0.56 iterables.py(815):         try:
0.56 iterables.py(816):             sift[keyfunc(i)].append(i)
0.56 iterables.py(814):     for i in seq:
0.56 iterables.py(819):     return T, F
0.57 iterables.py(808):     if not binary:
0.57 iterables.py(813):     sift = F, T = [], []
0.57 iterables.py(814):     for i in seq:
0.57 iterables.py(815):         try:
0.57 iterables.py(816):             sift[keyfunc(i)].append(i)
0.57 iterables.py(814):     for i in seq:
0.57 iterables.py(819):     return T, F
0.57 iterables.py(808):     if not binary:
0.57 iterables.py(813):     sift = F, T = [], []
0.57 iterables.py(814):     for i in seq:
0.57 iterables.py(815):         try:
0.57 iterables.py(816):             sift[keyfunc(i)].append(i)
0.57 iterables.py(814):     for i in seq:
0.57 iterables.py(819):     return T, F
0.57 iterables.py(808):     if not binary:
0.57 iterables.py(813):     sift = F, T = [], []
0.57 iterables.py(814):     for i in seq:
0.57 iterables.py(815):         try:
0.57 iterables.py(816):             sift[keyfunc(i)].append(i)
0.57 iterables.py(814):     for i in seq:
0.57 iterables.py(815):         try:
0.57 iterables.py(816):             sift[keyfunc(i)].append(i)
0.57 iterables.py(814):     for i in seq:
0.57 iterables.py(819):     return T, F
0.57 iterables.py(808):     if not binary:
0.57 iterables.py(813):     sift = F, T = [], []
0.57 iterables.py(814):     for i in seq:
0.57 iterables.py(815):         try:
0.57 iterables.py(816):             sift[keyfunc(i)].append(i)
0.57 iterables.py(814):     for i in seq:
0.57 iterables.py(815):         try:
0.57 iterables.py(816):             sift[keyfunc(i)].append(i)
0.57 iterables.py(814):     for i in seq:
0.57 iterables.py(819):     return T, F
0.57 iterables.py(808):     if not binary:
0.57 iterables.py(813):     sift = F, T = [], []
0.57 iterables.py(814):     for i in seq:
0.57 iterables.py(815):         try:
0.57 iterables.py(816):             sift[keyfunc(i)].append(i)
0.57 iterables.py(814):     for i in seq:
0.57 iterables.py(819):     return T, F
0.57 iterables.py(808):     if not binary:
0.57 iterables.py(813):     sift = F, T = [], []
0.57 iterables.py(814):     for i in seq:
0.57 iterables.py(815):         try:
0.57 iterables.py(816):             sift[keyfunc(i)].append(i)
0.57 iterables.py(814):     for i in seq:
0.57 iterables.py(819):     return T, F
0.57 iterables.py(808):     if not binary:
0.57 iterables.py(813):     sift = F, T = [], []
0.57 iterables.py(814):     for i in seq:
0.57 iterables.py(815):         try:
0.57 iterables.py(816):             sift[keyfunc(i)].append(i)
0.57 iterables.py(814):     for i in seq:
0.57 iterables.py(819):     return T, F
0.63 iterables.py(808):     if not binary:
0.63 iterables.py(813):     sift = F, T = [], []
0.63 iterables.py(814):     for i in seq:
0.63 iterables.py(815):         try:
0.63 iterables.py(816):             sift[keyfunc(i)].append(i)
0.63 iterables.py(814):     for i in seq:
0.63 iterables.py(819):     return T, F
0.63 iterables.py(808):     if not binary:
0.63 iterables.py(813):     sift = F, T = [], []
0.63 iterables.py(814):     for i in seq:
0.63 iterables.py(815):         try:
0.63 iterables.py(816):             sift[keyfunc(i)].append(i)
0.63 iterables.py(814):     for i in seq:
0.63 iterables.py(819):     return T, F
0.63 iterables.py(808):     if not binary:
0.63 iterables.py(813):     sift = F, T = [], []
0.63 iterables.py(814):     for i in seq:
0.63 iterables.py(815):         try:
0.63 iterables.py(816):             sift[keyfunc(i)].append(i)
0.63 iterables.py(814):     for i in seq:
0.63 iterables.py(819):     return T, F
0.63 iterables.py(808):     if not binary:
0.63 iterables.py(813):     sift = F, T = [], []
0.63 iterables.py(814):     for i in seq:
0.63 iterables.py(815):         try:
0.63 iterables.py(816):             sift[keyfunc(i)].append(i)
0.63 iterables.py(814):     for i in seq:
0.63 iterables.py(815):         try:
0.63 iterables.py(816):             sift[keyfunc(i)].append(i)
0.63 iterables.py(814):     for i in seq:
0.63 iterables.py(819):     return T, F
0.63 iterables.py(808):     if not binary:
0.63 iterables.py(813):     sift = F, T = [], []
0.63 iterables.py(814):     for i in seq:
0.63 iterables.py(815):         try:
0.63 iterables.py(816):             sift[keyfunc(i)].append(i)
0.63 iterables.py(814):     for i in seq:
0.63 iterables.py(815):         try:
0.63 iterables.py(816):             sift[keyfunc(i)].append(i)
0.63 iterables.py(814):     for i in seq:
0.63 iterables.py(819):     return T, F
0.63 iterables.py(808):     if not binary:
0.63 iterables.py(813):     sift = F, T = [], []
0.63 iterables.py(814):     for i in seq:
0.63 iterables.py(815):         try:
0.63 iterables.py(816):             sift[keyfunc(i)].append(i)
0.63 iterables.py(814):     for i in seq:
0.63 iterables.py(815):         try:
0.63 iterables.py(816):             sift[keyfunc(i)].append(i)
0.63 iterables.py(814):     for i in seq:
0.63 iterables.py(819):     return T, F
0.64 iterables.py(808):     if not binary:
0.64 iterables.py(813):     sift = F, T = [], []
0.64 iterables.py(814):     for i in seq:
0.64 iterables.py(815):         try:
0.64 iterables.py(816):             sift[keyfunc(i)].append(i)
0.64 iterables.py(814):     for i in seq:
0.64 iterables.py(819):     return T, F
0.64 iterables.py(808):     if not binary:
0.64 iterables.py(813):     sift = F, T = [], []
0.64 iterables.py(814):     for i in seq:
0.64 iterables.py(815):         try:
0.64 iterables.py(816):             sift[keyfunc(i)].append(i)
0.64 iterables.py(814):     for i in seq:
0.64 iterables.py(815):         try:
0.64 iterables.py(816):             sift[keyfunc(i)].append(i)
0.64 iterables.py(814):     for i in seq:
0.64 iterables.py(819):     return T, F
0.64 iterables.py(808):     if not binary:
0.64 iterables.py(813):     sift = F, T = [], []
0.64 iterables.py(814):     for i in seq:
0.64 iterables.py(815):         try:
0.64 iterables.py(816):             sift[keyfunc(i)].append(i)
0.64 iterables.py(814):     for i in seq:
0.64 iterables.py(815):         try:
0.64 iterables.py(816):             sift[keyfunc(i)].append(i)
0.64 iterables.py(814):     for i in seq:
0.64 iterables.py(819):     return T, F
0.64 iterables.py(808):     if not binary:
0.64 iterables.py(813):     sift = F, T = [], []
0.64 iterables.py(814):     for i in seq:
0.64 iterables.py(815):         try:
0.64 iterables.py(816):             sift[keyfunc(i)].append(i)
0.64 iterables.py(814):     for i in seq:
0.64 iterables.py(819):     return T, F
0.64 iterables.py(808):     if not binary:
0.64 iterables.py(813):     sift = F, T = [], []
0.64 iterables.py(814):     for i in seq:
0.64 iterables.py(815):         try:
0.64 iterables.py(816):             sift[keyfunc(i)].append(i)
0.64 iterables.py(814):     for i in seq:
0.64 iterables.py(819):     return T, F
0.64 iterables.py(808):     if not binary:
0.64 iterables.py(813):     sift = F, T = [], []
0.64 iterables.py(814):     for i in seq:
0.64 iterables.py(815):         try:
0.64 iterables.py(816):             sift[keyfunc(i)].append(i)
0.64 iterables.py(814):     for i in seq:
0.64 iterables.py(819):     return T, F
0.65 iterables.py(808):     if not binary:
0.65 iterables.py(813):     sift = F, T = [], []
0.65 iterables.py(814):     for i in seq:
0.65 iterables.py(815):         try:
0.65 iterables.py(816):             sift[keyfunc(i)].append(i)
0.65 iterables.py(814):     for i in seq:
0.65 iterables.py(819):     return T, F
0.67 iterables.py(808):     if not binary:
0.67 iterables.py(813):     sift = F, T = [], []
0.67 iterables.py(814):     for i in seq:
0.67 iterables.py(815):         try:
0.67 iterables.py(816):             sift[keyfunc(i)].append(i)
0.67 iterables.py(814):     for i in seq:
0.67 iterables.py(819):     return T, F
0.67 iterables.py(808):     if not binary:
0.67 iterables.py(813):     sift = F, T = [], []
0.67 iterables.py(814):     for i in seq:
0.67 iterables.py(815):         try:
0.67 iterables.py(816):             sift[keyfunc(i)].append(i)
0.67 iterables.py(814):     for i in seq:
0.67 iterables.py(819):     return T, F
0.67 iterables.py(808):     if not binary:
0.67 iterables.py(813):     sift = F, T = [], []
0.67 iterables.py(814):     for i in seq:
0.67 iterables.py(815):         try:
0.67 iterables.py(816):             sift[keyfunc(i)].append(i)
0.67 iterables.py(814):     for i in seq:
0.67 iterables.py(819):     return T, F
0.67 iterables.py(808):     if not binary:
0.67 iterables.py(813):     sift = F, T = [], []
0.67 iterables.py(814):     for i in seq:
0.67 iterables.py(815):         try:
0.67 iterables.py(816):             sift[keyfunc(i)].append(i)
0.67 iterables.py(814):     for i in seq:
0.67 iterables.py(819):     return T, F
0.67 iterables.py(808):     if not binary:
0.67 iterables.py(813):     sift = F, T = [], []
0.67 iterables.py(814):     for i in seq:
0.67 iterables.py(815):         try:
0.67 iterables.py(816):             sift[keyfunc(i)].append(i)
0.67 iterables.py(814):     for i in seq:
0.67 iterables.py(819):     return T, F
0.67 iterables.py(808):     if not binary:
0.67 iterables.py(813):     sift = F, T = [], []
0.67 iterables.py(814):     for i in seq:
0.67 iterables.py(815):         try:
0.67 iterables.py(816):             sift[keyfunc(i)].append(i)
0.67 iterables.py(814):     for i in seq:
0.67 iterables.py(819):     return T, F
0.67 iterables.py(808):     if not binary:
0.67 iterables.py(813):     sift = F, T = [], []
0.67 iterables.py(814):     for i in seq:
0.67 iterables.py(815):         try:
0.67 iterables.py(816):             sift[keyfunc(i)].append(i)
0.67 iterables.py(814):     for i in seq:
0.67 iterables.py(819):     return T, F
0.67 iterables.py(808):     if not binary:
0.67 iterables.py(813):     sift = F, T = [], []
0.67 iterables.py(814):     for i in seq:
0.67 iterables.py(815):         try:
0.67 iterables.py(816):             sift[keyfunc(i)].append(i)
0.67 iterables.py(814):     for i in seq:
0.67 iterables.py(819):     return T, F
0.67 iterables.py(808):     if not binary:
0.67 iterables.py(813):     sift = F, T = [], []
0.67 iterables.py(814):     for i in seq:
0.67 iterables.py(815):         try:
0.67 iterables.py(816):             sift[keyfunc(i)].append(i)
0.67 iterables.py(814):     for i in seq:
0.67 iterables.py(819):     return T, F
0.67 iterables.py(808):     if not binary:
0.67 iterables.py(813):     sift = F, T = [], []
0.67 iterables.py(814):     for i in seq:
0.67 iterables.py(815):         try:
0.67 iterables.py(816):             sift[keyfunc(i)].append(i)
0.67 iterables.py(814):     for i in seq:
0.67 iterables.py(819):     return T, F
0.67 iterables.py(808):     if not binary:
0.67 iterables.py(813):     sift = F, T = [], []
0.67 iterables.py(814):     for i in seq:
0.67 iterables.py(815):         try:
0.67 iterables.py(816):             sift[keyfunc(i)].append(i)
0.67 iterables.py(814):     for i in seq:
0.67 iterables.py(819):     return T, F
0.67 iterables.py(808):     if not binary:
0.67 iterables.py(813):     sift = F, T = [], []
0.67 iterables.py(814):     for i in seq:
0.67 iterables.py(815):         try:
0.67 iterables.py(816):             sift[keyfunc(i)].append(i)
0.67 iterables.py(814):     for i in seq:
0.67 iterables.py(819):     return T, F
0.67 iterables.py(808):     if not binary:
0.67 iterables.py(813):     sift = F, T = [], []
0.67 iterables.py(814):     for i in seq:
0.67 iterables.py(815):         try:
0.67 iterables.py(816):             sift[keyfunc(i)].append(i)
0.67 iterables.py(814):     for i in seq:
0.67 iterables.py(819):     return T, F
0.67 iterables.py(808):     if not binary:
0.67 iterables.py(813):     sift = F, T = [], []
0.67 iterables.py(814):     for i in seq:
0.67 iterables.py(815):         try:
0.67 iterables.py(816):             sift[keyfunc(i)].append(i)
0.67 iterables.py(814):     for i in seq:
0.67 iterables.py(819):     return T, F
0.67 iterables.py(808):     if not binary:
0.67 iterables.py(813):     sift = F, T = [], []
0.67 iterables.py(814):     for i in seq:
0.67 iterables.py(815):         try:
0.67 iterables.py(816):             sift[keyfunc(i)].append(i)
0.67 iterables.py(814):     for i in seq:
0.67 iterables.py(819):     return T, F
0.67 iterables.py(808):     if not binary:
0.67 iterables.py(813):     sift = F, T = [], []
0.67 iterables.py(814):     for i in seq:
0.67 iterables.py(815):         try:
0.67 iterables.py(816):             sift[keyfunc(i)].append(i)
0.67 iterables.py(814):     for i in seq:
0.67 iterables.py(819):     return T, F
0.67 iterables.py(808):     if not binary:
0.67 iterables.py(813):     sift = F, T = [], []
0.67 iterables.py(814):     for i in seq:
0.67 iterables.py(815):         try:
0.67 iterables.py(816):             sift[keyfunc(i)].append(i)
0.67 iterables.py(814):     for i in seq:
0.67 iterables.py(819):     return T, F
0.67 iterables.py(808):     if not binary:
0.67 iterables.py(813):     sift = F, T = [], []
0.67 iterables.py(814):     for i in seq:
0.67 iterables.py(815):         try:
0.67 iterables.py(816):             sift[keyfunc(i)].append(i)
0.67 iterables.py(814):     for i in seq:
0.67 iterables.py(819):     return T, F
0.67 iterables.py(808):     if not binary:
0.67 iterables.py(813):     sift = F, T = [], []
0.67 iterables.py(814):     for i in seq:
0.67 iterables.py(815):         try:
0.67 iterables.py(816):             sift[keyfunc(i)].append(i)
0.67 iterables.py(814):     for i in seq:
0.67 iterables.py(819):     return T, F
0.67 iterables.py(808):     if not binary:
0.67 iterables.py(813):     sift = F, T = [], []
0.67 iterables.py(814):     for i in seq:
0.67 iterables.py(815):         try:
0.67 iterables.py(816):             sift[keyfunc(i)].append(i)
0.67 iterables.py(814):     for i in seq:
0.67 iterables.py(819):     return T, F
0.68 iterables.py(808):     if not binary:
0.68 iterables.py(813):     sift = F, T = [], []
0.68 iterables.py(814):     for i in seq:
0.68 iterables.py(815):         try:
0.68 iterables.py(816):             sift[keyfunc(i)].append(i)
0.68 iterables.py(814):     for i in seq:
0.68 iterables.py(819):     return T, F
0.68 iterables.py(808):     if not binary:
0.68 iterables.py(813):     sift = F, T = [], []
0.68 iterables.py(814):     for i in seq:
0.68 iterables.py(815):         try:
0.68 iterables.py(816):             sift[keyfunc(i)].append(i)
0.68 iterables.py(814):     for i in seq:
0.68 iterables.py(819):     return T, F
0.68 iterables.py(808):     if not binary:
0.68 iterables.py(813):     sift = F, T = [], []
0.68 iterables.py(814):     for i in seq:
0.68 iterables.py(815):         try:
0.68 iterables.py(816):             sift[keyfunc(i)].append(i)
0.68 iterables.py(814):     for i in seq:
0.68 iterables.py(819):     return T, F
0.68 iterables.py(808):     if not binary:
0.68 iterables.py(813):     sift = F, T = [], []
0.68 iterables.py(814):     for i in seq:
0.68 iterables.py(815):         try:
0.68 iterables.py(816):             sift[keyfunc(i)].append(i)
0.68 iterables.py(814):     for i in seq:
0.68 iterables.py(819):     return T, F
0.68 iterables.py(808):     if not binary:
0.68 iterables.py(813):     sift = F, T = [], []
0.68 iterables.py(814):     for i in seq:
0.68 iterables.py(815):         try:
0.68 iterables.py(816):             sift[keyfunc(i)].append(i)
0.68 iterables.py(814):     for i in seq:
0.68 iterables.py(819):     return T, F
0.68 iterables.py(808):     if not binary:
0.68 iterables.py(813):     sift = F, T = [], []
0.68 iterables.py(814):     for i in seq:
0.68 iterables.py(815):         try:
0.68 iterables.py(816):             sift[keyfunc(i)].append(i)
0.68 iterables.py(814):     for i in seq:
0.68 iterables.py(819):     return T, F
0.68 iterables.py(808):     if not binary:
0.68 iterables.py(813):     sift = F, T = [], []
0.68 iterables.py(814):     for i in seq:
0.68 iterables.py(815):         try:
0.68 iterables.py(816):             sift[keyfunc(i)].append(i)
0.68 iterables.py(814):     for i in seq:
0.68 iterables.py(819):     return T, F
0.68 iterables.py(808):     if not binary:
0.68 iterables.py(813):     sift = F, T = [], []
0.68 iterables.py(814):     for i in seq:
0.68 iterables.py(815):         try:
0.68 iterables.py(816):             sift[keyfunc(i)].append(i)
0.68 iterables.py(814):     for i in seq:
0.68 iterables.py(815):         try:
0.68 iterables.py(816):             sift[keyfunc(i)].append(i)
0.68 iterables.py(814):     for i in seq:
0.68 iterables.py(819):     return T, F
0.68 iterables.py(808):     if not binary:
0.68 iterables.py(813):     sift = F, T = [], []
0.68 iterables.py(814):     for i in seq:
0.68 iterables.py(815):         try:
0.68 iterables.py(816):             sift[keyfunc(i)].append(i)
0.68 iterables.py(814):     for i in seq:
0.68 iterables.py(815):         try:
0.68 iterables.py(816):             sift[keyfunc(i)].append(i)
0.68 iterables.py(814):     for i in seq:
0.68 iterables.py(819):     return T, F
0.68 iterables.py(808):     if not binary:
0.68 iterables.py(813):     sift = F, T = [], []
0.68 iterables.py(814):     for i in seq:
0.68 iterables.py(815):         try:
0.68 iterables.py(816):             sift[keyfunc(i)].append(i)
0.68 iterables.py(814):     for i in seq:
0.68 iterables.py(819):     return T, F
0.68 iterables.py(808):     if not binary:
0.68 iterables.py(813):     sift = F, T = [], []
0.68 iterables.py(814):     for i in seq:
0.68 iterables.py(815):         try:
0.68 iterables.py(816):             sift[keyfunc(i)].append(i)
0.68 iterables.py(814):     for i in seq:
0.68 iterables.py(815):         try:
0.68 iterables.py(816):             sift[keyfunc(i)].append(i)
0.68 iterables.py(814):     for i in seq:
0.68 iterables.py(819):     return T, F
0.68 iterables.py(808):     if not binary:
0.68 iterables.py(813):     sift = F, T = [], []
0.68 iterables.py(814):     for i in seq:
0.68 iterables.py(815):         try:
0.68 iterables.py(816):             sift[keyfunc(i)].append(i)
0.68 iterables.py(814):     for i in seq:
0.68 iterables.py(815):         try:
0.68 iterables.py(816):             sift[keyfunc(i)].append(i)
0.68 iterables.py(814):     for i in seq:
0.68 iterables.py(819):     return T, F
0.68 iterables.py(808):     if not binary:
0.68 iterables.py(813):     sift = F, T = [], []
0.68 iterables.py(814):     for i in seq:
0.68 iterables.py(815):         try:
0.68 iterables.py(816):             sift[keyfunc(i)].append(i)
0.68 iterables.py(814):     for i in seq:
0.68 iterables.py(815):         try:
0.68 iterables.py(816):             sift[keyfunc(i)].append(i)
0.68 iterables.py(814):     for i in seq:
0.68 iterables.py(815):         try:
0.68 iterables.py(816):             sift[keyfunc(i)].append(i)
0.68 iterables.py(814):     for i in seq:
0.68 iterables.py(819):     return T, F
0.68 iterables.py(808):     if not binary:
0.68 iterables.py(813):     sift = F, T = [], []
0.68 iterables.py(814):     for i in seq:
0.68 iterables.py(815):         try:
0.68 iterables.py(816):             sift[keyfunc(i)].append(i)
0.68 iterables.py(814):     for i in seq:
0.68 iterables.py(815):         try:
0.68 iterables.py(816):             sift[keyfunc(i)].append(i)
0.68 iterables.py(814):     for i in seq:
0.68 iterables.py(819):     return T, F
0.68 iterables.py(808):     if not binary:
0.68 iterables.py(813):     sift = F, T = [], []
0.68 iterables.py(814):     for i in seq:
0.68 iterables.py(815):         try:
0.68 iterables.py(816):             sift[keyfunc(i)].append(i)
0.68 iterables.py(814):     for i in seq:
0.68 iterables.py(815):         try:
0.68 iterables.py(816):             sift[keyfunc(i)].append(i)
0.68 iterables.py(814):     for i in seq:
0.68 iterables.py(819):     return T, F
0.68 iterables.py(808):     if not binary:
0.68 iterables.py(813):     sift = F, T = [], []
0.68 iterables.py(814):     for i in seq:
0.68 iterables.py(815):         try:
0.68 iterables.py(816):             sift[keyfunc(i)].append(i)
0.68 iterables.py(814):     for i in seq:
0.68 iterables.py(819):     return T, F
0.68 iterables.py(808):     if not binary:
0.68 iterables.py(813):     sift = F, T = [], []
0.68 iterables.py(814):     for i in seq:
0.68 iterables.py(815):         try:
0.68 iterables.py(816):             sift[keyfunc(i)].append(i)
0.68 iterables.py(814):     for i in seq:
0.68 iterables.py(819):     return T, F
0.68 iterables.py(808):     if not binary:
0.68 iterables.py(813):     sift = F, T = [], []
0.68 iterables.py(814):     for i in seq:
0.68 iterables.py(815):         try:
0.68 iterables.py(816):             sift[keyfunc(i)].append(i)
0.68 iterables.py(814):     for i in seq:
0.68 iterables.py(819):     return T, F
0.69 iterables.py(808):     if not binary:
0.69 iterables.py(813):     sift = F, T = [], []
0.69 iterables.py(814):     for i in seq:
0.69 iterables.py(815):         try:
0.69 iterables.py(816):             sift[keyfunc(i)].append(i)
0.69 iterables.py(814):     for i in seq:
0.69 iterables.py(819):     return T, F
0.69 iterables.py(808):     if not binary:
0.69 iterables.py(813):     sift = F, T = [], []
0.69 iterables.py(814):     for i in seq:
0.69 iterables.py(815):         try:
0.69 iterables.py(816):             sift[keyfunc(i)].append(i)
0.69 iterables.py(814):     for i in seq:
0.69 iterables.py(819):     return T, F
0.69 iterables.py(808):     if not binary:
0.69 iterables.py(813):     sift = F, T = [], []
0.69 iterables.py(814):     for i in seq:
0.69 iterables.py(815):         try:
0.69 iterables.py(816):             sift[keyfunc(i)].append(i)
0.69 iterables.py(814):     for i in seq:
0.69 iterables.py(819):     return T, F
0.69 iterables.py(808):     if not binary:
0.69 iterables.py(813):     sift = F, T = [], []
0.69 iterables.py(814):     for i in seq:
0.69 iterables.py(815):         try:
0.69 iterables.py(816):             sift[keyfunc(i)].append(i)
0.69 iterables.py(814):     for i in seq:
0.69 iterables.py(819):     return T, F
0.69 iterables.py(808):     if not binary:
0.69 iterables.py(813):     sift = F, T = [], []
0.69 iterables.py(814):     for i in seq:
0.69 iterables.py(815):         try:
0.69 iterables.py(816):             sift[keyfunc(i)].append(i)
0.69 iterables.py(814):     for i in seq:
0.69 iterables.py(819):     return T, F
0.69 iterables.py(808):     if not binary:
0.69 iterables.py(813):     sift = F, T = [], []
0.69 iterables.py(814):     for i in seq:
0.69 iterables.py(815):         try:
0.69 iterables.py(816):             sift[keyfunc(i)].append(i)
0.69 iterables.py(814):     for i in seq:
0.69 iterables.py(819):     return T, F
0.69 iterables.py(808):     if not binary:
0.69 iterables.py(813):     sift = F, T = [], []
0.69 iterables.py(814):     for i in seq:
0.69 iterables.py(815):         try:
0.69 iterables.py(816):             sift[keyfunc(i)].append(i)
0.69 iterables.py(814):     for i in seq:
0.69 iterables.py(819):     return T, F
0.69 iterables.py(808):     if not binary:
0.69 iterables.py(813):     sift = F, T = [], []
0.69 iterables.py(814):     for i in seq:
0.69 iterables.py(815):         try:
0.69 iterables.py(816):             sift[keyfunc(i)].append(i)
0.69 iterables.py(814):     for i in seq:
0.69 iterables.py(819):     return T, F
0.69 iterables.py(808):     if not binary:
0.69 iterables.py(813):     sift = F, T = [], []
0.69 iterables.py(814):     for i in seq:
0.69 iterables.py(815):         try:
0.69 iterables.py(816):             sift[keyfunc(i)].append(i)
0.69 iterables.py(814):     for i in seq:
0.69 iterables.py(819):     return T, F
0.69 iterables.py(808):     if not binary:
0.69 iterables.py(813):     sift = F, T = [], []
0.69 iterables.py(814):     for i in seq:
0.69 iterables.py(815):         try:
0.69 iterables.py(816):             sift[keyfunc(i)].append(i)
0.69 iterables.py(814):     for i in seq:
0.69 iterables.py(815):         try:
0.69 iterables.py(816):             sift[keyfunc(i)].append(i)
0.69 iterables.py(814):     for i in seq:
0.69 iterables.py(819):     return T, F
0.69 iterables.py(808):     if not binary:
0.69 iterables.py(813):     sift = F, T = [], []
0.69 iterables.py(814):     for i in seq:
0.69 iterables.py(815):         try:
0.69 iterables.py(816):             sift[keyfunc(i)].append(i)
0.69 iterables.py(814):     for i in seq:
0.69 iterables.py(815):         try:
0.69 iterables.py(816):             sift[keyfunc(i)].append(i)
0.69 iterables.py(814):     for i in seq:
0.69 iterables.py(819):     return T, F
0.70 iterables.py(808):     if not binary:
0.70 iterables.py(813):     sift = F, T = [], []
0.70 iterables.py(814):     for i in seq:
0.70 iterables.py(815):         try:
0.70 iterables.py(816):             sift[keyfunc(i)].append(i)
0.70 iterables.py(814):     for i in seq:
0.70 iterables.py(815):         try:
0.70 iterables.py(816):             sift[keyfunc(i)].append(i)
0.70 iterables.py(814):     for i in seq:
0.70 iterables.py(815):         try:
0.70 iterables.py(816):             sift[keyfunc(i)].append(i)
0.70 iterables.py(814):     for i in seq:
0.70 iterables.py(819):     return T, F
0.70 iterables.py(808):     if not binary:
0.70 iterables.py(813):     sift = F, T = [], []
0.70 iterables.py(814):     for i in seq:
0.70 iterables.py(815):         try:
0.70 iterables.py(816):             sift[keyfunc(i)].append(i)
0.70 iterables.py(814):     for i in seq:
0.70 iterables.py(815):         try:
0.70 iterables.py(816):             sift[keyfunc(i)].append(i)
0.70 iterables.py(814):     for i in seq:
0.70 iterables.py(815):         try:
0.70 iterables.py(816):             sift[keyfunc(i)].append(i)
0.70 iterables.py(814):     for i in seq:
0.70 iterables.py(815):         try:
0.70 iterables.py(816):             sift[keyfunc(i)].append(i)
0.70 iterables.py(814):     for i in seq:
0.70 iterables.py(815):         try:
0.70 iterables.py(816):             sift[keyfunc(i)].append(i)
0.70 iterables.py(814):     for i in seq:
0.70 iterables.py(815):         try:
0.70 iterables.py(816):             sift[keyfunc(i)].append(i)
0.70 iterables.py(814):     for i in seq:
0.70 iterables.py(819):     return T, F
0.70 iterables.py(808):     if not binary:
0.70 iterables.py(813):     sift = F, T = [], []
0.70 iterables.py(814):     for i in seq:
0.70 iterables.py(815):         try:
0.70 iterables.py(816):             sift[keyfunc(i)].append(i)
0.70 iterables.py(814):     for i in seq:
0.70 iterables.py(819):     return T, F
0.70 iterables.py(808):     if not binary:
0.70 iterables.py(813):     sift = F, T = [], []
0.70 iterables.py(814):     for i in seq:
0.70 iterables.py(815):         try:
0.70 iterables.py(816):             sift[keyfunc(i)].append(i)
0.70 iterables.py(814):     for i in seq:
0.70 iterables.py(819):     return T, F
0.70 iterables.py(808):     if not binary:
0.70 iterables.py(813):     sift = F, T = [], []
0.70 iterables.py(814):     for i in seq:
0.70 iterables.py(815):         try:
0.70 iterables.py(816):             sift[keyfunc(i)].append(i)
0.70 iterables.py(814):     for i in seq:
0.70 iterables.py(819):     return T, F
0.70 iterables.py(808):     if not binary:
0.70 iterables.py(813):     sift = F, T = [], []
0.70 iterables.py(814):     for i in seq:
0.70 iterables.py(815):         try:
0.70 iterables.py(816):             sift[keyfunc(i)].append(i)
0.70 iterables.py(814):     for i in seq:
0.70 iterables.py(815):         try:
0.70 iterables.py(816):             sift[keyfunc(i)].append(i)
0.70 iterables.py(814):     for i in seq:
0.70 iterables.py(819):     return T, F
0.70 iterables.py(808):     if not binary:
0.70 iterables.py(813):     sift = F, T = [], []
0.70 iterables.py(814):     for i in seq:
0.70 iterables.py(815):         try:
0.70 iterables.py(816):             sift[keyfunc(i)].append(i)
0.70 iterables.py(814):     for i in seq:
0.70 iterables.py(819):     return T, F
0.70 iterables.py(808):     if not binary:
0.70 iterables.py(813):     sift = F, T = [], []
0.70 iterables.py(814):     for i in seq:
0.70 iterables.py(815):         try:
0.70 iterables.py(816):             sift[keyfunc(i)].append(i)
0.70 iterables.py(814):     for i in seq:
0.70 iterables.py(819):     return T, F
0.70 iterables.py(808):     if not binary:
0.70 iterables.py(813):     sift = F, T = [], []
0.70 iterables.py(814):     for i in seq:
0.70 iterables.py(815):         try:
0.70 iterables.py(816):             sift[keyfunc(i)].append(i)
0.70 iterables.py(814):     for i in seq:
0.70 iterables.py(815):         try:
0.70 iterables.py(816):             sift[keyfunc(i)].append(i)
0.70 iterables.py(814):     for i in seq:
0.70 iterables.py(819):     return T, F
0.70 iterables.py(808):     if not binary:
0.70 iterables.py(813):     sift = F, T = [], []
0.70 iterables.py(814):     for i in seq:
0.70 iterables.py(815):         try:
0.70 iterables.py(816):             sift[keyfunc(i)].append(i)
0.70 iterables.py(814):     for i in seq:
0.70 iterables.py(819):     return T, F
0.70 iterables.py(808):     if not binary:
0.70 iterables.py(813):     sift = F, T = [], []
0.70 iterables.py(814):     for i in seq:
0.70 iterables.py(815):         try:
0.70 iterables.py(816):             sift[keyfunc(i)].append(i)
0.70 iterables.py(814):     for i in seq:
0.70 iterables.py(815):         try:
0.70 iterables.py(816):             sift[keyfunc(i)].append(i)
0.70 iterables.py(814):     for i in seq:
0.70 iterables.py(819):     return T, F
0.70 iterables.py(808):     if not binary:
0.70 iterables.py(813):     sift = F, T = [], []
0.70 iterables.py(814):     for i in seq:
0.70 iterables.py(815):         try:
0.70 iterables.py(816):             sift[keyfunc(i)].append(i)
0.70 iterables.py(814):     for i in seq:
0.70 iterables.py(819):     return T, F
0.70 iterables.py(808):     if not binary:
0.70 iterables.py(813):     sift = F, T = [], []
0.70 iterables.py(814):     for i in seq:
0.70 iterables.py(815):         try:
0.70 iterables.py(816):             sift[keyfunc(i)].append(i)
0.70 iterables.py(814):     for i in seq:
0.70 iterables.py(819):     return T, F
0.70 iterables.py(808):     if not binary:
0.70 iterables.py(813):     sift = F, T = [], []
0.70 iterables.py(814):     for i in seq:
0.70 iterables.py(815):         try:
0.70 iterables.py(816):             sift[keyfunc(i)].append(i)
0.70 iterables.py(814):     for i in seq:
0.70 iterables.py(819):     return T, F
0.70 iterables.py(808):     if not binary:
0.70 iterables.py(813):     sift = F, T = [], []
0.70 iterables.py(814):     for i in seq:
0.70 iterables.py(815):         try:
0.70 iterables.py(816):             sift[keyfunc(i)].append(i)
0.70 iterables.py(814):     for i in seq:
0.70 iterables.py(819):     return T, F
0.70 iterables.py(808):     if not binary:
0.70 iterables.py(813):     sift = F, T = [], []
0.70 iterables.py(814):     for i in seq:
0.70 iterables.py(815):         try:
0.70 iterables.py(816):             sift[keyfunc(i)].append(i)
0.70 iterables.py(814):     for i in seq:
0.70 iterables.py(819):     return T, F
0.70 iterables.py(808):     if not binary:
0.70 iterables.py(813):     sift = F, T = [], []
0.70 iterables.py(814):     for i in seq:
0.70 iterables.py(815):         try:
0.70 iterables.py(816):             sift[keyfunc(i)].append(i)
0.70 iterables.py(814):     for i in seq:
0.70 iterables.py(819):     return T, F
0.70 iterables.py(808):     if not binary:
0.70 iterables.py(813):     sift = F, T = [], []
0.70 iterables.py(814):     for i in seq:
0.70 iterables.py(815):         try:
0.70 iterables.py(816):             sift[keyfunc(i)].append(i)
0.70 iterables.py(814):     for i in seq:
0.70 iterables.py(819):     return T, F
0.71 iterables.py(808):     if not binary:
0.71 iterables.py(813):     sift = F, T = [], []
0.71 iterables.py(814):     for i in seq:
0.71 iterables.py(815):         try:
0.71 iterables.py(816):             sift[keyfunc(i)].append(i)
0.71 iterables.py(814):     for i in seq:
0.71 iterables.py(819):     return T, F
0.71 iterables.py(808):     if not binary:
0.71 iterables.py(813):     sift = F, T = [], []
0.71 iterables.py(814):     for i in seq:
0.71 iterables.py(815):         try:
0.71 iterables.py(816):             sift[keyfunc(i)].append(i)
0.71 iterables.py(814):     for i in seq:
0.71 iterables.py(819):     return T, F
0.71 iterables.py(808):     if not binary:
0.71 iterables.py(813):     sift = F, T = [], []
0.71 iterables.py(814):     for i in seq:
0.71 iterables.py(815):         try:
0.71 iterables.py(816):             sift[keyfunc(i)].append(i)
0.71 iterables.py(814):     for i in seq:
0.71 iterables.py(819):     return T, F
0.71 iterables.py(808):     if not binary:
0.71 iterables.py(813):     sift = F, T = [], []
0.71 iterables.py(814):     for i in seq:
0.71 iterables.py(815):         try:
0.71 iterables.py(816):             sift[keyfunc(i)].append(i)
0.71 iterables.py(814):     for i in seq:
0.71 iterables.py(819):     return T, F
0.71 iterables.py(808):     if not binary:
0.71 iterables.py(813):     sift = F, T = [], []
0.71 iterables.py(814):     for i in seq:
0.71 iterables.py(815):         try:
0.71 iterables.py(816):             sift[keyfunc(i)].append(i)
0.71 iterables.py(814):     for i in seq:
0.71 iterables.py(815):         try:
0.71 iterables.py(816):             sift[keyfunc(i)].append(i)
0.71 iterables.py(814):     for i in seq:
0.71 iterables.py(819):     return T, F
0.71 iterables.py(808):     if not binary:
0.71 iterables.py(813):     sift = F, T = [], []
0.71 iterables.py(814):     for i in seq:
0.71 iterables.py(815):         try:
0.71 iterables.py(816):             sift[keyfunc(i)].append(i)
0.71 iterables.py(814):     for i in seq:
0.71 iterables.py(815):         try:
0.71 iterables.py(816):             sift[keyfunc(i)].append(i)
0.71 iterables.py(814):     for i in seq:
0.71 iterables.py(819):     return T, F
0.71 iterables.py(808):     if not binary:
0.71 iterables.py(813):     sift = F, T = [], []
0.71 iterables.py(814):     for i in seq:
0.71 iterables.py(815):         try:
0.71 iterables.py(816):             sift[keyfunc(i)].append(i)
0.71 iterables.py(814):     for i in seq:
0.71 iterables.py(819):     return T, F
0.71 iterables.py(808):     if not binary:
0.71 iterables.py(813):     sift = F, T = [], []
0.71 iterables.py(814):     for i in seq:
0.71 iterables.py(815):         try:
0.71 iterables.py(816):             sift[keyfunc(i)].append(i)
0.71 iterables.py(814):     for i in seq:
0.71 iterables.py(815):         try:
0.71 iterables.py(816):             sift[keyfunc(i)].append(i)
0.71 iterables.py(814):     for i in seq:
0.71 iterables.py(819):     return T, F
0.71 iterables.py(808):     if not binary:
0.71 iterables.py(813):     sift = F, T = [], []
0.71 iterables.py(814):     for i in seq:
0.71 iterables.py(815):         try:
0.71 iterables.py(816):             sift[keyfunc(i)].append(i)
0.71 iterables.py(814):     for i in seq:
0.71 iterables.py(819):     return T, F
0.71 iterables.py(808):     if not binary:
0.71 iterables.py(813):     sift = F, T = [], []
0.71 iterables.py(814):     for i in seq:
0.71 iterables.py(815):         try:
0.71 iterables.py(816):             sift[keyfunc(i)].append(i)
0.71 iterables.py(814):     for i in seq:
0.71 iterables.py(815):         try:
0.71 iterables.py(816):             sift[keyfunc(i)].append(i)
0.71 iterables.py(814):     for i in seq:
0.71 iterables.py(819):     return T, F
0.71 iterables.py(808):     if not binary:
0.71 iterables.py(813):     sift = F, T = [], []
0.71 iterables.py(814):     for i in seq:
0.71 iterables.py(815):         try:
0.71 iterables.py(816):             sift[keyfunc(i)].append(i)
0.71 iterables.py(814):     for i in seq:
0.71 iterables.py(815):         try:
0.71 iterables.py(816):             sift[keyfunc(i)].append(i)
0.71 iterables.py(814):     for i in seq:
0.71 iterables.py(819):     return T, F
0.71 iterables.py(808):     if not binary:
0.71 iterables.py(813):     sift = F, T = [], []
0.71 iterables.py(814):     for i in seq:
0.71 iterables.py(815):         try:
0.71 iterables.py(816):             sift[keyfunc(i)].append(i)
0.71 iterables.py(814):     for i in seq:
0.71 iterables.py(815):         try:
0.71 iterables.py(816):             sift[keyfunc(i)].append(i)
0.71 iterables.py(814):     for i in seq:
0.71 iterables.py(819):     return T, F
0.71 iterables.py(808):     if not binary:
0.71 iterables.py(813):     sift = F, T = [], []
0.71 iterables.py(814):     for i in seq:
0.71 iterables.py(815):         try:
0.71 iterables.py(816):             sift[keyfunc(i)].append(i)
0.71 iterables.py(814):     for i in seq:
0.71 iterables.py(819):     return T, F
0.71 iterables.py(808):     if not binary:
0.71 iterables.py(813):     sift = F, T = [], []
0.71 iterables.py(814):     for i in seq:
0.71 iterables.py(815):         try:
0.71 iterables.py(816):             sift[keyfunc(i)].append(i)
0.71 iterables.py(814):     for i in seq:
0.71 iterables.py(819):     return T, F
0.71 iterables.py(808):     if not binary:
0.71 iterables.py(813):     sift = F, T = [], []
0.71 iterables.py(814):     for i in seq:
0.71 iterables.py(815):         try:
0.71 iterables.py(816):             sift[keyfunc(i)].append(i)
0.71 iterables.py(814):     for i in seq:
0.71 iterables.py(819):     return T, F
0.71 iterables.py(808):     if not binary:
0.71 iterables.py(813):     sift = F, T = [], []
0.71 iterables.py(814):     for i in seq:
0.71 iterables.py(815):         try:
0.71 iterables.py(816):             sift[keyfunc(i)].append(i)
0.71 iterables.py(814):     for i in seq:
0.71 iterables.py(815):         try:
0.71 iterables.py(816):             sift[keyfunc(i)].append(i)
0.71 iterables.py(814):     for i in seq:
0.71 iterables.py(819):     return T, F
0.72 iterables.py(808):     if not binary:
0.72 iterables.py(813):     sift = F, T = [], []
0.72 iterables.py(814):     for i in seq:
0.72 iterables.py(815):         try:
0.72 iterables.py(816):             sift[keyfunc(i)].append(i)
0.72 iterables.py(814):     for i in seq:
0.72 iterables.py(815):         try:
0.72 iterables.py(816):             sift[keyfunc(i)].append(i)
0.72 iterables.py(814):     for i in seq:
0.72 iterables.py(815):         try:
0.72 iterables.py(816):             sift[keyfunc(i)].append(i)
0.72 iterables.py(814):     for i in seq:
0.72 iterables.py(819):     return T, F
0.72 iterables.py(808):     if not binary:
0.72 iterables.py(813):     sift = F, T = [], []
0.72 iterables.py(814):     for i in seq:
0.72 iterables.py(815):         try:
0.72 iterables.py(816):             sift[keyfunc(i)].append(i)
0.72 iterables.py(814):     for i in seq:
0.72 iterables.py(815):         try:
0.72 iterables.py(816):             sift[keyfunc(i)].append(i)
0.72 iterables.py(814):     for i in seq:
0.72 iterables.py(819):     return T, F
0.72 iterables.py(808):     if not binary:
0.72 iterables.py(813):     sift = F, T = [], []
0.72 iterables.py(814):     for i in seq:
0.72 iterables.py(815):         try:
0.72 iterables.py(816):             sift[keyfunc(i)].append(i)
0.72 iterables.py(814):     for i in seq:
0.72 iterables.py(815):         try:
0.72 iterables.py(816):             sift[keyfunc(i)].append(i)
0.72 iterables.py(814):     for i in seq:
0.72 iterables.py(819):     return T, F
0.72 iterables.py(808):     if not binary:
0.72 iterables.py(813):     sift = F, T = [], []
0.72 iterables.py(814):     for i in seq:
0.72 iterables.py(815):         try:
0.72 iterables.py(816):             sift[keyfunc(i)].append(i)
0.72 iterables.py(814):     for i in seq:
0.72 iterables.py(815):         try:
0.72 iterables.py(816):             sift[keyfunc(i)].append(i)
0.72 iterables.py(814):     for i in seq:
0.72 iterables.py(815):         try:
0.72 iterables.py(816):             sift[keyfunc(i)].append(i)
0.72 iterables.py(814):     for i in seq:
0.72 iterables.py(819):     return T, F
0.73 iterables.py(808):     if not binary:
0.73 iterables.py(813):     sift = F, T = [], []
0.73 iterables.py(814):     for i in seq:
0.73 iterables.py(815):         try:
0.73 iterables.py(816):             sift[keyfunc(i)].append(i)
0.73 iterables.py(814):     for i in seq:
0.73 iterables.py(815):         try:
0.73 iterables.py(816):             sift[keyfunc(i)].append(i)
0.73 iterables.py(814):     for i in seq:
0.73 iterables.py(819):     return T, F
0.73 iterables.py(808):     if not binary:
0.73 iterables.py(813):     sift = F, T = [], []
0.73 iterables.py(814):     for i in seq:
0.73 iterables.py(815):         try:
0.73 iterables.py(816):             sift[keyfunc(i)].append(i)
0.73 iterables.py(814):     for i in seq:
0.73 iterables.py(815):         try:
0.73 iterables.py(816):             sift[keyfunc(i)].append(i)
0.73 iterables.py(814):     for i in seq:
0.73 iterables.py(819):     return T, F
0.73 iterables.py(808):     if not binary:
0.73 iterables.py(813):     sift = F, T = [], []
0.73 iterables.py(814):     for i in seq:
0.73 iterables.py(815):         try:
0.73 iterables.py(816):             sift[keyfunc(i)].append(i)
0.73 iterables.py(814):     for i in seq:
0.73 iterables.py(815):         try:
0.73 iterables.py(816):             sift[keyfunc(i)].append(i)
0.73 iterables.py(814):     for i in seq:
0.73 iterables.py(819):     return T, F
0.73 iterables.py(808):     if not binary:
0.73 iterables.py(813):     sift = F, T = [], []
0.73 iterables.py(814):     for i in seq:
0.73 iterables.py(815):         try:
0.73 iterables.py(816):             sift[keyfunc(i)].append(i)
0.73 iterables.py(814):     for i in seq:
0.73 iterables.py(815):         try:
0.73 iterables.py(816):             sift[keyfunc(i)].append(i)
0.73 iterables.py(814):     for i in seq:
0.73 iterables.py(819):     return T, F
0.73 iterables.py(808):     if not binary:
0.73 iterables.py(813):     sift = F, T = [], []
0.73 iterables.py(814):     for i in seq:
0.73 iterables.py(815):         try:
0.73 iterables.py(816):             sift[keyfunc(i)].append(i)
0.73 iterables.py(814):     for i in seq:
0.73 iterables.py(815):         try:
0.73 iterables.py(816):             sift[keyfunc(i)].append(i)
0.73 iterables.py(814):     for i in seq:
0.73 iterables.py(819):     return T, F
0.73 iterables.py(808):     if not binary:
0.73 iterables.py(813):     sift = F, T = [], []
0.73 iterables.py(814):     for i in seq:
0.73 iterables.py(815):         try:
0.73 iterables.py(816):             sift[keyfunc(i)].append(i)
0.73 iterables.py(814):     for i in seq:
0.73 iterables.py(815):         try:
0.73 iterables.py(816):             sift[keyfunc(i)].append(i)
0.73 iterables.py(814):     for i in seq:
0.73 iterables.py(819):     return T, F
0.73 iterables.py(808):     if not binary:
0.73 iterables.py(813):     sift = F, T = [], []
0.73 iterables.py(814):     for i in seq:
0.73 iterables.py(815):         try:
0.73 iterables.py(816):             sift[keyfunc(i)].append(i)
0.73 iterables.py(814):     for i in seq:
0.73 iterables.py(815):         try:
0.73 iterables.py(816):             sift[keyfunc(i)].append(i)
0.73 iterables.py(814):     for i in seq:
0.73 iterables.py(819):     return T, F
0.73 iterables.py(808):     if not binary:
0.73 iterables.py(813):     sift = F, T = [], []
0.73 iterables.py(814):     for i in seq:
0.73 iterables.py(815):         try:
0.73 iterables.py(816):             sift[keyfunc(i)].append(i)
0.73 iterables.py(814):     for i in seq:
0.73 iterables.py(815):         try:
0.73 iterables.py(816):             sift[keyfunc(i)].append(i)
0.73 iterables.py(814):     for i in seq:
0.73 iterables.py(819):     return T, F
0.73 iterables.py(808):     if not binary:
0.73 iterables.py(813):     sift = F, T = [], []
0.73 iterables.py(814):     for i in seq:
0.73 iterables.py(815):         try:
0.73 iterables.py(816):             sift[keyfunc(i)].append(i)
0.73 iterables.py(814):     for i in seq:
0.73 iterables.py(815):         try:
0.73 iterables.py(816):             sift[keyfunc(i)].append(i)
0.73 iterables.py(814):     for i in seq:
0.73 iterables.py(819):     return T, F
0.73 iterables.py(808):     if not binary:
0.73 iterables.py(813):     sift = F, T = [], []
0.73 iterables.py(814):     for i in seq:
0.73 iterables.py(815):         try:
0.73 iterables.py(816):             sift[keyfunc(i)].append(i)
0.73 iterables.py(814):     for i in seq:
0.73 iterables.py(815):         try:
0.73 iterables.py(816):             sift[keyfunc(i)].append(i)
0.73 iterables.py(814):     for i in seq:
0.73 iterables.py(819):     return T, F
0.73 iterables.py(808):     if not binary:
0.73 iterables.py(813):     sift = F, T = [], []
0.73 iterables.py(814):     for i in seq:
0.73 iterables.py(815):         try:
0.73 iterables.py(816):             sift[keyfunc(i)].append(i)
0.73 iterables.py(814):     for i in seq:
0.73 iterables.py(815):         try:
0.73 iterables.py(816):             sift[keyfunc(i)].append(i)
0.73 iterables.py(814):     for i in seq:
0.73 iterables.py(819):     return T, F
0.73 iterables.py(808):     if not binary:
0.73 iterables.py(813):     sift = F, T = [], []
0.73 iterables.py(814):     for i in seq:
0.73 iterables.py(815):         try:
0.73 iterables.py(816):             sift[keyfunc(i)].append(i)
0.73 iterables.py(814):     for i in seq:
0.73 iterables.py(815):         try:
0.73 iterables.py(816):             sift[keyfunc(i)].append(i)
0.73 iterables.py(814):     for i in seq:
0.73 iterables.py(819):     return T, F
0.73 iterables.py(808):     if not binary:
0.73 iterables.py(813):     sift = F, T = [], []
0.73 iterables.py(814):     for i in seq:
0.73 iterables.py(815):         try:
0.73 iterables.py(816):             sift[keyfunc(i)].append(i)
0.73 iterables.py(814):     for i in seq:
0.73 iterables.py(815):         try:
0.73 iterables.py(816):             sift[keyfunc(i)].append(i)
0.73 iterables.py(814):     for i in seq:
0.73 iterables.py(819):     return T, F
0.73 iterables.py(808):     if not binary:
0.73 iterables.py(813):     sift = F, T = [], []
0.73 iterables.py(814):     for i in seq:
0.73 iterables.py(815):         try:
0.73 iterables.py(816):             sift[keyfunc(i)].append(i)
0.73 iterables.py(814):     for i in seq:
0.73 iterables.py(819):     return T, F
0.73 iterables.py(808):     if not binary:
0.73 iterables.py(813):     sift = F, T = [], []
0.73 iterables.py(814):     for i in seq:
0.73 iterables.py(815):         try:
0.73 iterables.py(816):             sift[keyfunc(i)].append(i)
0.73 iterables.py(814):     for i in seq:
0.73 iterables.py(819):     return T, F
0.73 iterables.py(808):     if not binary:
0.73 iterables.py(813):     sift = F, T = [], []
0.73 iterables.py(814):     for i in seq:
0.73 iterables.py(815):         try:
0.73 iterables.py(816):             sift[keyfunc(i)].append(i)
0.73 iterables.py(814):     for i in seq:
0.73 iterables.py(819):     return T, F
0.73 iterables.py(808):     if not binary:
0.73 iterables.py(813):     sift = F, T = [], []
0.73 iterables.py(814):     for i in seq:
0.73 iterables.py(815):         try:
0.73 iterables.py(816):             sift[keyfunc(i)].append(i)
0.73 iterables.py(814):     for i in seq:
0.73 iterables.py(819):     return T, F
0.73 iterables.py(808):     if not binary:
0.73 iterables.py(813):     sift = F, T = [], []
0.73 iterables.py(814):     for i in seq:
0.73 iterables.py(815):         try:
0.73 iterables.py(816):             sift[keyfunc(i)].append(i)
0.73 iterables.py(814):     for i in seq:
0.73 iterables.py(815):         try:
0.73 iterables.py(816):             sift[keyfunc(i)].append(i)
0.73 iterables.py(814):     for i in seq:
0.73 iterables.py(815):         try:
0.73 iterables.py(816):             sift[keyfunc(i)].append(i)
0.73 iterables.py(814):     for i in seq:
0.73 iterables.py(819):     return T, F
0.74 iterables.py(808):     if not binary:
0.74 iterables.py(813):     sift = F, T = [], []
0.74 iterables.py(814):     for i in seq:
0.74 iterables.py(815):         try:
0.74 iterables.py(816):             sift[keyfunc(i)].append(i)
0.74 iterables.py(814):     for i in seq:
0.74 iterables.py(815):         try:
0.74 iterables.py(816):             sift[keyfunc(i)].append(i)
0.74 iterables.py(814):     for i in seq:
0.74 iterables.py(815):         try:
0.74 iterables.py(816):             sift[keyfunc(i)].append(i)
0.74 iterables.py(814):     for i in seq:
0.74 iterables.py(815):         try:
0.74 iterables.py(816):             sift[keyfunc(i)].append(i)
0.74 iterables.py(814):     for i in seq:
0.74 iterables.py(819):     return T, F
0.74 iterables.py(808):     if not binary:
0.74 iterables.py(813):     sift = F, T = [], []
0.74 iterables.py(814):     for i in seq:
0.74 iterables.py(815):         try:
0.74 iterables.py(816):             sift[keyfunc(i)].append(i)
0.74 iterables.py(814):     for i in seq:
0.74 iterables.py(815):         try:
0.74 iterables.py(816):             sift[keyfunc(i)].append(i)
0.74 iterables.py(814):     for i in seq:
0.74 iterables.py(815):         try:
0.74 iterables.py(816):             sift[keyfunc(i)].append(i)
0.74 iterables.py(814):     for i in seq:
0.74 iterables.py(819):     return T, F
0.74 iterables.py(808):     if not binary:
0.74 iterables.py(813):     sift = F, T = [], []
0.74 iterables.py(814):     for i in seq:
0.74 iterables.py(815):         try:
0.74 iterables.py(816):             sift[keyfunc(i)].append(i)
0.74 iterables.py(814):     for i in seq:
0.74 iterables.py(815):         try:
0.74 iterables.py(816):             sift[keyfunc(i)].append(i)
0.74 iterables.py(814):     for i in seq:
0.74 iterables.py(819):     return T, F
0.74 iterables.py(808):     if not binary:
0.74 iterables.py(813):     sift = F, T = [], []
0.74 iterables.py(814):     for i in seq:
0.74 iterables.py(815):         try:
0.74 iterables.py(816):             sift[keyfunc(i)].append(i)
0.74 iterables.py(814):     for i in seq:
0.74 iterables.py(815):         try:
0.74 iterables.py(816):             sift[keyfunc(i)].append(i)
0.74 iterables.py(814):     for i in seq:
0.74 iterables.py(819):     return T, F
0.74 iterables.py(808):     if not binary:
0.74 iterables.py(813):     sift = F, T = [], []
0.74 iterables.py(814):     for i in seq:
0.74 iterables.py(815):         try:
0.74 iterables.py(816):             sift[keyfunc(i)].append(i)
0.74 iterables.py(814):     for i in seq:
0.74 iterables.py(815):         try:
0.74 iterables.py(816):             sift[keyfunc(i)].append(i)
0.74 iterables.py(814):     for i in seq:
0.74 iterables.py(819):     return T, F
0.74 iterables.py(808):     if not binary:
0.74 iterables.py(813):     sift = F, T = [], []
0.74 iterables.py(814):     for i in seq:
0.74 iterables.py(815):         try:
0.74 iterables.py(816):             sift[keyfunc(i)].append(i)
0.74 iterables.py(814):     for i in seq:
0.74 iterables.py(815):         try:
0.74 iterables.py(816):             sift[keyfunc(i)].append(i)
0.74 iterables.py(814):     for i in seq:
0.74 iterables.py(819):     return T, F
0.74 iterables.py(808):     if not binary:
0.74 iterables.py(813):     sift = F, T = [], []
0.74 iterables.py(814):     for i in seq:
0.74 iterables.py(815):         try:
0.74 iterables.py(816):             sift[keyfunc(i)].append(i)
0.74 iterables.py(814):     for i in seq:
0.74 iterables.py(815):         try:
0.74 iterables.py(816):             sift[keyfunc(i)].append(i)
0.74 iterables.py(814):     for i in seq:
0.74 iterables.py(819):     return T, F
0.74 iterables.py(808):     if not binary:
0.74 iterables.py(813):     sift = F, T = [], []
0.74 iterables.py(814):     for i in seq:
0.74 iterables.py(815):         try:
0.74 iterables.py(816):             sift[keyfunc(i)].append(i)
0.74 iterables.py(814):     for i in seq:
0.74 iterables.py(815):         try:
0.74 iterables.py(816):             sift[keyfunc(i)].append(i)
0.74 iterables.py(814):     for i in seq:
0.74 iterables.py(815):         try:
0.74 iterables.py(816):             sift[keyfunc(i)].append(i)
0.74 iterables.py(814):     for i in seq:
0.74 iterables.py(819):     return T, F
0.74 iterables.py(808):     if not binary:
0.74 iterables.py(813):     sift = F, T = [], []
0.74 iterables.py(814):     for i in seq:
0.74 iterables.py(815):         try:
0.74 iterables.py(816):             sift[keyfunc(i)].append(i)
0.74 iterables.py(814):     for i in seq:
0.74 iterables.py(815):         try:
0.74 iterables.py(816):             sift[keyfunc(i)].append(i)
0.74 iterables.py(814):     for i in seq:
0.74 iterables.py(819):     return T, F
0.74 iterables.py(808):     if not binary:
0.74 iterables.py(813):     sift = F, T = [], []
0.74 iterables.py(814):     for i in seq:
0.74 iterables.py(815):         try:
0.74 iterables.py(816):             sift[keyfunc(i)].append(i)
0.74 iterables.py(814):     for i in seq:
0.74 iterables.py(815):         try:
0.74 iterables.py(816):             sift[keyfunc(i)].append(i)
0.74 iterables.py(814):     for i in seq:
0.74 iterables.py(819):     return T, F
0.74 iterables.py(808):     if not binary:
0.74 iterables.py(813):     sift = F, T = [], []
0.74 iterables.py(814):     for i in seq:
0.74 iterables.py(815):         try:
0.74 iterables.py(816):             sift[keyfunc(i)].append(i)
0.74 iterables.py(814):     for i in seq:
0.74 iterables.py(815):         try:
0.74 iterables.py(816):             sift[keyfunc(i)].append(i)
0.74 iterables.py(814):     for i in seq:
0.74 iterables.py(815):         try:
0.74 iterables.py(816):             sift[keyfunc(i)].append(i)
0.74 iterables.py(814):     for i in seq:
0.74 iterables.py(819):     return T, F
0.74 iterables.py(808):     if not binary:
0.74 iterables.py(813):     sift = F, T = [], []
0.74 iterables.py(814):     for i in seq:
0.74 iterables.py(815):         try:
0.74 iterables.py(816):             sift[keyfunc(i)].append(i)
0.74 iterables.py(814):     for i in seq:
0.74 iterables.py(815):         try:
0.74 iterables.py(816):             sift[keyfunc(i)].append(i)
0.74 iterables.py(814):     for i in seq:
0.74 iterables.py(815):         try:
0.74 iterables.py(816):             sift[keyfunc(i)].append(i)
0.74 iterables.py(814):     for i in seq:
0.74 iterables.py(815):         try:
0.74 iterables.py(816):             sift[keyfunc(i)].append(i)
0.74 iterables.py(814):     for i in seq:
0.74 iterables.py(819):     return T, F
0.74 iterables.py(808):     if not binary:
0.74 iterables.py(813):     sift = F, T = [], []
0.74 iterables.py(814):     for i in seq:
0.74 iterables.py(815):         try:
0.74 iterables.py(816):             sift[keyfunc(i)].append(i)
0.74 iterables.py(814):     for i in seq:
0.74 iterables.py(815):         try:
0.74 iterables.py(816):             sift[keyfunc(i)].append(i)
0.74 iterables.py(814):     for i in seq:
0.74 iterables.py(815):         try:
0.74 iterables.py(816):             sift[keyfunc(i)].append(i)
0.74 iterables.py(814):     for i in seq:
0.74 iterables.py(815):         try:
0.74 iterables.py(816):             sift[keyfunc(i)].append(i)
0.74 iterables.py(814):     for i in seq:
0.74 iterables.py(819):     return T, F
0.74 iterables.py(808):     if not binary:
0.74 iterables.py(813):     sift = F, T = [], []
0.74 iterables.py(814):     for i in seq:
0.74 iterables.py(815):         try:
0.74 iterables.py(816):             sift[keyfunc(i)].append(i)
0.74 iterables.py(814):     for i in seq:
0.74 iterables.py(819):     return T, F
0.74 iterables.py(808):     if not binary:
0.74 iterables.py(813):     sift = F, T = [], []
0.74 iterables.py(814):     for i in seq:
0.74 iterables.py(815):         try:
0.74 iterables.py(816):             sift[keyfunc(i)].append(i)
0.74 iterables.py(814):     for i in seq:
0.74 iterables.py(815):         try:
0.74 iterables.py(816):             sift[keyfunc(i)].append(i)
0.74 iterables.py(814):     for i in seq:
0.74 iterables.py(819):     return T, F
0.74 iterables.py(808):     if not binary:
0.74 iterables.py(813):     sift = F, T = [], []
0.74 iterables.py(814):     for i in seq:
0.74 iterables.py(815):         try:
0.74 iterables.py(816):             sift[keyfunc(i)].append(i)
0.74 iterables.py(814):     for i in seq:
0.74 iterables.py(815):         try:
0.74 iterables.py(816):             sift[keyfunc(i)].append(i)
0.74 iterables.py(814):     for i in seq:
0.74 iterables.py(819):     return T, F
0.74 iterables.py(808):     if not binary:
0.74 iterables.py(813):     sift = F, T = [], []
0.74 iterables.py(814):     for i in seq:
0.74 iterables.py(815):         try:
0.74 iterables.py(816):             sift[keyfunc(i)].append(i)
0.74 iterables.py(814):     for i in seq:
0.74 iterables.py(815):         try:
0.74 iterables.py(816):             sift[keyfunc(i)].append(i)
0.74 iterables.py(814):     for i in seq:
0.74 iterables.py(815):         try:
0.74 iterables.py(816):             sift[keyfunc(i)].append(i)
0.74 iterables.py(814):     for i in seq:
0.74 iterables.py(819):     return T, F
0.74 iterables.py(808):     if not binary:
0.74 iterables.py(813):     sift = F, T = [], []
0.74 iterables.py(814):     for i in seq:
0.74 iterables.py(815):         try:
0.74 iterables.py(816):             sift[keyfunc(i)].append(i)
0.74 iterables.py(814):     for i in seq:
0.74 iterables.py(815):         try:
0.74 iterables.py(816):             sift[keyfunc(i)].append(i)
0.74 iterables.py(814):     for i in seq:
0.74 iterables.py(819):     return T, F
0.74 iterables.py(808):     if not binary:
0.74 iterables.py(813):     sift = F, T = [], []
0.74 iterables.py(814):     for i in seq:
0.74 iterables.py(815):         try:
0.74 iterables.py(816):             sift[keyfunc(i)].append(i)
0.74 iterables.py(814):     for i in seq:
0.74 iterables.py(815):         try:
0.74 iterables.py(816):             sift[keyfunc(i)].append(i)
0.74 iterables.py(814):     for i in seq:
0.74 iterables.py(815):         try:
0.74 iterables.py(816):             sift[keyfunc(i)].append(i)
0.74 iterables.py(814):     for i in seq:
0.74 iterables.py(819):     return T, F
0.75 iterables.py(808):     if not binary:
0.75 iterables.py(813):     sift = F, T = [], []
0.75 iterables.py(814):     for i in seq:
0.75 iterables.py(815):         try:
0.75 ['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(sympy/utilities/iterables\\.py)']
0.21 iterables.py(1): from collections import defaultdict, OrderedDict
0.22 iterables.py(2): from itertools import (
0.22 iterables.py(6): import random
0.22 iterables.py(7): from operator import gt
0.22 iterables.py(9): from sympy.core import Basic
0.22 iterables.py(12): from sympy.core.compatibility import (
0.22 iterables.py(16): from sympy.utilities.enumerative import (
0.22 iterables.py(20): def is_palindromic(s, i=0, j=None):
0.22 iterables.py(56): def flatten(iterable, levels=None, cls=None):
0.22 iterables.py(120): def unflatten(iter, n=2):
0.22 iterables.py(129): def reshape(seq, how):
0.22 iterables.py(189): def group(seq, multiple=True):
0.22 iterables.py(234): def _iproduct2(iterable1, iterable2):
0.22 iterables.py(261): def iproduct(*iterables):
0.22 iterables.py(302): def multiset(seq):
0.22 iterables.py(325): def postorder_traversal(node, keys=None):
0.22 iterables.py(382): def interactive_traversal(expr):
0.22 iterables.py(475): def ibin(n, bits=None, str=False):
0.22 iterables.py(547): def variations(seq, n, repetition=False):
0.22 iterables.py(592): def subsets(seq, k=None, repetition=False):
0.22 iterables.py(642): def filter_symbols(iterator, exclude):
0.22 iterables.py(666): def numbered_symbols(prefix='x', cls=None, start=0, exclude=[], *args, **assumptions):
0.22 iterables.py(705): def capture(func):
0.22 iterables.py(735): def sift(seq, keyfunc, binary=False):
0.22 iterables.py(822): def take(iter, n):
0.22 iterables.py(827): def dict_merge(*dicts):
0.22 iterables.py(837): def common_prefix(*seqs):
0.22 iterables.py(863): def common_suffix(*seqs):
0.22 iterables.py(893): def prefixes(seq):
0.22 iterables.py(912): def postfixes(seq):
0.22 iterables.py(931): def topological_sort(graph, key=None):
0.22 iterables.py(1045): def strongly_connected_components(G):
0.22 iterables.py(1168): def connected_components(G):
0.22 iterables.py(1239): def rotate_left(x, y):
0.22 iterables.py(1258): def rotate_right(x, y):
0.22 iterables.py(1277): def least_rotation(x):
0.22 iterables.py(1317): def multiset_combinations(m, n, g=None):
0.22 iterables.py(1373): def multiset_permutations(m, size=None, g=None):
0.22 iterables.py(1422): def _partition(seq, vector, m=None):
0.22 iterables.py(1460): def _set_partitions(n):
0.22 iterables.py(1539): def multiset_partitions(multiset, m=None):
0.22 iterables.py(1696): def partitions(n, m=None, k=None, size=False):
0.22 iterables.py(1850): def ordered_partitions(n, m=None, sort=True):
0.22 iterables.py(1986): def binary_partitions(n):
0.22 iterables.py(2044): def has_dups(seq):
0.22 iterables.py(2068): def has_variety(seq):
0.22 iterables.py(2090): def uniq(seq, result=None):
0.22 iterables.py(2144): def generate_bell(n):
0.22 iterables.py(2251): def generate_involutions(n):
0.22 iterables.py(2288): def generate_derangements(perm):
0.22 iterables.py(2320): def necklaces(n, k, free=False):
0.22 iterables.py(2365): def bracelets(n, k):
0.22 iterables.py(2370): def generate_oriented_forest(n):
0.22 iterables.py(2416): def minlex(seq, directed=True, is_set=False, small=None):
0.22 iterables.py(2494): def runs(seq, op=gt):
0.22 iterables.py(2531): def kbins(l, k, ordered=None):
0.22 iterables.py(2657): def permute_signs(t):
0.22 iterables.py(2673): def signed_permutations(t):
0.22 iterables.py(2692): def rotations(s, dir=1):
0.22 iterables.py(2712): def roundrobin(*iterables):
0.25 iterables.py(808):     if not binary:
0.25 iterables.py(813):     sift = F, T = [], []
0.25 iterables.py(814):     for i in seq:
0.25 iterables.py(815):         try:
0.25 iterables.py(816):             sift[keyfunc(i)].append(i)
0.25 iterables.py(814):     for i in seq:
0.25 iterables.py(819):     return T, F
0.25 iterables.py(808):     if not binary:
0.25 iterables.py(813):     sift = F, T = [], []
0.25 iterables.py(814):     for i in seq:
0.25 iterables.py(815):         try:
0.25 iterables.py(816):             sift[keyfunc(i)].append(i)
0.25 iterables.py(814):     for i in seq:
0.25 iterables.py(815):         try:
0.25 iterables.py(816):             sift[keyfunc(i)].append(i)
0.25 iterables.py(814):     for i in seq:
0.25 iterables.py(819):     return T, F
0.26 iterables.py(1002):     V, E = graph
0.26 iterables.py(1004):     L = []
0.26 iterables.py(1005):     S = set(V)
0.26 iterables.py(1006):     E = list(E)
0.26 iterables.py(1008):     for v, u in E:
0.26 iterables.py(1009):         S.discard(u)
0.26 iterables.py(1008):     for v, u in E:
0.26 iterables.py(1009):         S.discard(u)
0.26 iterables.py(1008):     for v, u in E:
0.26 iterables.py(1009):         S.discard(u)
0.26 iterables.py(1008):     for v, u in E:
0.26 iterables.py(1009):         S.discard(u)
0.26 iterables.py(1008):     for v, u in E:
0.26 iterables.py(1009):         S.discard(u)
0.26 iterables.py(1008):     for v, u in E:
0.26 iterables.py(1011):     if key is None:
0.26 iterables.py(1012):         key = lambda value: value
0.26 iterables.py(1014):     S = sorted(S, key=key, reverse=True)
0.26 iterables.py(1012):         key = lambda value: value
0.26 iterables.py(1012):         key = lambda value: value
0.26 iterables.py(1012):         key = lambda value: value
0.26 iterables.py(1012):         key = lambda value: value
0.26 iterables.py(1012):         key = lambda value: value
0.26 iterables.py(1012):         key = lambda value: value
0.26 iterables.py(1012):         key = lambda value: value
0.26 iterables.py(1012):         key = lambda value: value
0.26 iterables.py(1012):         key = lambda value: value
0.26 iterables.py(1012):         key = lambda value: value
0.26 iterables.py(1012):         key = lambda value: value
0.26 iterables.py(1012):         key = lambda value: value
0.26 iterables.py(1012):         key = lambda value: value
0.26 iterables.py(1012):         key = lambda value: value
0.26 iterables.py(1012):         key = lambda value: value
0.26 iterables.py(1012):         key = lambda value: value
0.26 iterables.py(1012):         key = lambda value: value
0.26 iterables.py(1012):         key = lambda value: value
0.26 iterables.py(1012):         key = lambda value: value
0.26 iterables.py(1012):         key = lambda value: value
0.26 iterables.py(1012):         key = lambda value: value
0.26 iterables.py(1012):         key = lambda value: value
0.26 iterables.py(1012):         key = lambda value: value
0.26 iterables.py(1016):     while S:
0.26 iterables.py(1017):         node = S.pop()
0.26 iterables.py(1018):         L.append(node)
0.26 iterables.py(1020):         for u, v in list(E):
0.26 iterables.py(1021):             if u == node:
0.26 iterables.py(1020):         for u, v in list(E):
0.26 iterables.py(1021):             if u == node:
0.26 iterables.py(1020):         for u, v in list(E):
0.26 iterables.py(1021):             if u == node:
0.26 iterables.py(1020):         for u, v in list(E):
0.26 iterables.py(1021):             if u == node:
0.26 iterables.py(1020):         for u, v in list(E):
0.26 iterables.py(1021):             if u == node:
0.26 iterables.py(1020):         for u, v in list(E):
0.26 iterables.py(1016):     while S:
0.26 iterables.py(1017):         node = S.pop()
0.26 iterables.py(1018):         L.append(node)
0.26 iterables.py(1020):         for u, v in list(E):
0.26 iterables.py(1021):             if u == node:
0.26 iterables.py(1020):         for u, v in list(E):
0.26 iterables.py(1021):             if u == node:
0.26 iterables.py(1020):         for u, v in list(E):
0.26 iterables.py(1021):             if u == node:
0.26 iterables.py(1020):         for u, v in list(E):
0.26 iterables.py(1021):             if u == node:
0.26 iterables.py(1020):         for u, v in list(E):
0.26 iterables.py(1021):             if u == node:
0.26 iterables.py(1020):         for u, v in list(E):
0.26 iterables.py(1016):     while S:
0.26 iterables.py(1017):         node = S.pop()
0.26 iterables.py(1018):         L.append(node)
0.26 iterables.py(1020):         for u, v in list(E):
0.26 iterables.py(1021):             if u == node:
0.26 iterables.py(1020):         for u, v in list(E):
0.26 iterables.py(1021):             if u == node:
0.26 iterables.py(1020):         for u, v in list(E):
0.26 iterables.py(1021):             if u == node:
0.26 iterables.py(1020):         for u, v in list(E):
0.26 iterables.py(1021):             if u == node:
0.26 iterables.py(1020):         for u, v in list(E):
0.26 iterables.py(1021):             if u == node:
0.26 iterables.py(1020):         for u, v in list(E):
0.26 iterables.py(1016):     while S:
0.26 iterables.py(1017):         node = S.pop()
0.26 iterables.py(1018):         L.append(node)
0.26 iterables.py(1020):         for u, v in list(E):
0.26 iterables.py(1021):             if u == node:
0.26 iterables.py(1020):         for u, v in list(E):
0.26 iterables.py(1021):             if u == node:
0.26 iterables.py(1020):         for u, v in list(E):
0.26 iterables.py(1021):             if u == node:
0.26 iterables.py(1022):                 E.remove((u, v))
0.26 iterables.py(1024):                 for _u, _v in E:
0.26 iterables.py(1025):                     if v == _v:
0.26 iterables.py(1026):                         break
0.26 iterables.py(1020):         for u, v in list(E):
0.26 iterables.py(1021):             if u == node:
0.26 iterables.py(1020):         for u, v in list(E):
0.26 iterables.py(1021):             if u == node:
0.26 iterables.py(1020):         for u, v in list(E):
0.26 iterables.py(1016):     while S:
0.26 iterables.py(1017):         node = S.pop()
0.26 iterables.py(1018):         L.append(node)
0.26 iterables.py(1020):         for u, v in list(E):
0.26 iterables.py(1021):             if u == node:
0.26 iterables.py(1020):         for u, v in list(E):
0.26 iterables.py(1021):             if u == node:
0.26 iterables.py(1020):         for u, v in list(E):
0.26 iterables.py(1021):             if u == node:
0.26 iterables.py(1022):                 E.remove((u, v))
0.26 iterables.py(1024):                 for _u, _v in E:
0.26 iterables.py(1025):                     if v == _v:
0.26 iterables.py(1026):                         break
0.26 iterables.py(1020):         for u, v in list(E):
0.26 iterables.py(1021):             if u == node:
0.26 iterables.py(1020):         for u, v in list(E):
0.26 iterables.py(1016):     while S:
0.26 iterables.py(1017):         node = S.pop()
0.26 iterables.py(1018):         L.append(node)
0.26 iterables.py(1020):         for u, v in list(E):
0.26 iterables.py(1021):             if u == node:
0.26 iterables.py(1020):         for u, v in list(E):
0.26 iterables.py(1021):             if u == node:
0.26 iterables.py(1020):         for u, v in list(E):
0.26 iterables.py(1021):             if u == node:
0.26 iterables.py(1020):         for u, v in list(E):
0.26 iterables.py(1016):     while S:
0.26 iterables.py(1017):         node = S.pop()
0.26 iterables.py(1018):         L.append(node)
0.26 iterables.py(1020):         for u, v in list(E):
0.26 iterables.py(1021):             if u == node:
0.26 iterables.py(1020):         for u, v in list(E):
0.26 iterables.py(1021):             if u == node:
0.26 iterables.py(1020):         for u, v in list(E):
0.26 iterables.py(1021):             if u == node:
0.26 iterables.py(1020):         for u, v in list(E):
0.26 iterables.py(1016):     while S:
0.26 iterables.py(1017):         node = S.pop()
0.26 iterables.py(1018):         L.append(node)
0.26 iterables.py(1020):         for u, v in list(E):
0.26 iterables.py(1021):             if u == node:
0.26 iterables.py(1020):         for u, v in list(E):
0.26 iterables.py(1021):             if u == node:
0.26 iterables.py(1020):         for u, v in list(E):
0.26 iterables.py(1021):             if u == node:
0.26 iterables.py(1022):                 E.remove((u, v))
0.26 iterables.py(1024):                 for _u, _v in E:
0.26 iterables.py(1025):                     if v == _v:
0.26 iterables.py(1026):                         break
0.26 iterables.py(1020):         for u, v in list(E):
0.26 iterables.py(1016):     while S:
0.26 iterables.py(1017):         node = S.pop()
0.26 iterables.py(1018):         L.append(node)
0.26 iterables.py(1020):         for u, v in list(E):
0.26 iterables.py(1021):             if u == node:
0.26 iterables.py(1020):         for u, v in list(E):
0.26 iterables.py(1021):             if u == node:
0.26 iterables.py(1020):         for u, v in list(E):
0.26 iterables.py(1016):     while S:
0.26 iterables.py(1017):         node = S.pop()
0.26 iterables.py(1018):         L.append(node)
0.26 iterables.py(1020):         for u, v in list(E):
0.26 iterables.py(1021):             if u == node:
0.26 iterables.py(1020):         for u, v in list(E):
0.26 iterables.py(1021):             if u == node:
0.26 iterables.py(1022):                 E.remove((u, v))
0.26 iterables.py(1024):                 for _u, _v in E:
0.26 iterables.py(1025):                     if v == _v:
0.26 iterables.py(1024):                 for _u, _v in E:
0.26 iterables.py(1028):                     kv = key(v)
0.26 iterables.py(1012):         key = lambda value: value
0.26 iterables.py(1030):                     for i, s in enumerate(S):
0.26 iterables.py(1031):                         ks = key(s)
0.26 iterables.py(1012):         key = lambda value: value
0.26 iterables.py(1033):                         if kv > ks:
0.26 iterables.py(1030):                     for i, s in enumerate(S):
0.26 iterables.py(1031):                         ks = key(s)
0.26 iterables.py(1012):         key = lambda value: value
0.26 iterables.py(1033):                         if kv > ks:
0.26 iterables.py(1030):                     for i, s in enumerate(S):
0.26 iterables.py(1031):                         ks = key(s)
0.26 iterables.py(1012):         key = lambda value: value
0.26 iterables.py(1033):                         if kv > ks:
0.26 iterables.py(1030):                     for i, s in enumerate(S):
0.26 iterables.py(1031):                         ks = key(s)
0.26 iterables.py(1012):         key = lambda value: value
0.26 iterables.py(1033):                         if kv > ks:
0.26 iterables.py(1030):                     for i, s in enumerate(S):
0.26 iterables.py(1031):                         ks = key(s)
0.26 iterables.py(1012):         key = lambda value: value
0.26 iterables.py(1033):                         if kv > ks:
0.26 iterables.py(1030):                     for i, s in enumerate(S):
0.26 iterables.py(1031):                         ks = key(s)
0.26 iterables.py(1012):         key = lambda value: value
0.26 iterables.py(1033):                         if kv > ks:
0.26 iterables.py(1030):                     for i, s in enumerate(S):
0.26 iterables.py(1031):                         ks = key(s)
0.26 iterables.py(1012):         key = lambda value: value
0.26 iterables.py(1033):                         if kv > ks:
0.26 iterables.py(1030):                     for i, s in enumerate(S):
0.26 iterables.py(1031):                         ks = key(s)
0.26 iterables.py(1012):         key = lambda value: value
0.26 iterables.py(1033):                         if kv > ks:
0.26 iterables.py(1030):                     for i, s in enumerate(S):
0.26 iterables.py(1031):                         ks = key(s)
0.26 iterables.py(1012):         key = lambda value: value
0.26 iterables.py(1033):                         if kv > ks:
0.26 iterables.py(1030):                     for i, s in enumerate(S):
0.26 iterables.py(1031):                         ks = key(s)
0.26 iterables.py(1012):         key = lambda value: value
0.26 iterables.py(1033):                         if kv > ks:
0.26 iterables.py(1030):                     for i, s in enumerate(S):
0.26 iterables.py(1031):                         ks = key(s)
0.26 iterables.py(1012):         key = lambda value: value
0.26 iterables.py(1033):                         if kv > ks:
0.26 iterables.py(1030):                     for i, s in enumerate(S):
0.26 iterables.py(1031):                         ks = key(s)
0.26 iterables.py(1012):         key = lambda value: value
0.26 iterables.py(1033):                         if kv > ks:
0.26 iterables.py(1030):                     for i, s in enumerate(S):
0.26 iterables.py(1031):                         ks = key(s)
0.26 iterables.py(1012):         key = lambda value: value
0.26 iterables.py(1033):                         if kv > ks:
0.26 iterables.py(1030):                     for i, s in enumerate(S):
0.26 iterables.py(1037):                         S.append(v)
0.26 iterables.py(1020):         for u, v in list(E):
0.26 iterables.py(1016):     while S:
0.26 iterables.py(1017):         node = S.pop()
0.26 iterables.py(1018):         L.append(node)
0.26 iterables.py(1020):         for u, v in list(E):
0.26 iterables.py(1021):             if u == node:
0.26 iterables.py(1022):                 E.remove((u, v))
0.26 iterables.py(1024):                 for _u, _v in E:
0.26 iterables.py(1028):                     kv = key(v)
0.26 iterables.py(1012):         key = lambda value: value
0.26 iterables.py(1030):                     for i, s in enumerate(S):
0.26 iterables.py(1031):                         ks = key(s)
0.26 iterables.py(1012):         key = lambda value: value
0.26 iterables.py(1033):                         if kv > ks:
0.26 iterables.py(1030):                     for i, s in enumerate(S):
0.26 iterables.py(1031):                         ks = key(s)
0.26 iterables.py(1012):         key = lambda value: value
0.26 iterables.py(1033):                         if kv > ks:
0.26 iterables.py(1030):                     for i, s in enumerate(S):
0.26 iterables.py(1031):                         ks = key(s)
0.26 iterables.py(1012):         key = lambda value: value
0.26 iterables.py(1033):                         if kv > ks:
0.26 iterables.py(1030):                     for i, s in enumerate(S):
0.26 iterables.py(1031):                         ks = key(s)
0.26 iterables.py(1012):         key = lambda value: value
0.26 iterables.py(1033):                         if kv > ks:
0.26 iterables.py(1030):                     for i, s in enumerate(S):
0.26 iterables.py(1031):                         ks = key(s)
0.26 iterables.py(1012):         key = lambda value: value
0.26 iterables.py(1033):                         if kv > ks:
0.26 iterables.py(1030):                     for i, s in enumerate(S):
0.26 iterables.py(1031):                         ks = key(s)
0.26 iterables.py(1012):         key = lambda value: value
0.26 iterables.py(1033):                         if kv > ks:
0.26 iterables.py(1030):                     for i, s in enumerate(S):
0.26 iterables.py(1031):                         ks = key(s)
0.26 iterables.py(1012):         key = lambda value: value
0.26 iterables.py(1033):                         if kv > ks:
0.26 iterables.py(1030):                     for i, s in enumerate(S):
0.26 iterables.py(1031):                         ks = key(s)
0.26 iterables.py(1012):         key = lambda value: value
0.26 iterables.py(1033):                         if kv > ks:
0.26 iterables.py(1030):                     for i, s in enumerate(S):
0.26 iterables.py(1031):                         ks = key(s)
0.26 iterables.py(1012):         key = lambda value: value
0.26 iterables.py(1033):                         if kv > ks:
0.26 iterables.py(1030):                     for i, s in enumerate(S):
0.26 iterables.py(1031):                         ks = key(s)
0.26 iterables.py(1012):         key = lambda value: value
0.26 iterables.py(1033):                         if kv > ks:
0.26 iterables.py(1030):                     for i, s in enumerate(S):
0.26 iterables.py(1031):                         ks = key(s)
0.26 iterables.py(1012):         key = lambda value: value
0.26 iterables.py(1033):                         if kv > ks:
0.26 iterables.py(1030):                     for i, s in enumerate(S):
0.26 iterables.py(1031):                         ks = key(s)
0.26 iterables.py(1012):         key = lambda value: value
0.26 iterables.py(1033):                         if kv > ks:
0.26 iterables.py(1030):                     for i, s in enumerate(S):
0.26 iterables.py(1031):                         ks = key(s)
0.26 iterables.py(1012):         key = lambda value: value
0.26 iterables.py(1033):                         if kv > ks:
0.26 iterables.py(1030):                     for i, s in enumerate(S):
0.26 iterables.py(1037):                         S.append(v)
0.26 iterables.py(1020):         for u, v in list(E):
0.26 iterables.py(1016):     while S:
0.26 iterables.py(1017):         node = S.pop()
0.26 iterables.py(1018):         L.append(node)
0.26 iterables.py(1020):         for u, v in list(E):
0.26 iterables.py(1016):     while S:
0.26 iterables.py(1017):         node = S.pop()
0.26 iterables.py(1018):         L.append(node)
0.26 iterables.py(1020):         for u, v in list(E):
0.26 iterables.py(1016):     while S:
0.26 iterables.py(1017):         node = S.pop()
0.26 iterables.py(1018):         L.append(node)
0.26 iterables.py(1020):         for u, v in list(E):
0.26 iterables.py(1016):     while S:
0.26 iterables.py(1017):         node = S.pop()
0.26 iterables.py(1018):         L.append(node)
0.26 iterables.py(1020):         for u, v in list(E):
0.26 iterables.py(1016):     while S:
0.26 iterables.py(1017):         node = S.pop()
0.26 iterables.py(1018):         L.append(node)
0.26 iterables.py(1020):         for u, v in list(E):
0.26 iterables.py(1016):     while S:
0.26 iterables.py(1017):         node = S.pop()
0.26 iterables.py(1018):         L.append(node)
0.26 iterables.py(1020):         for u, v in list(E):
0.26 iterables.py(1016):     while S:
0.26 iterables.py(1017):         node = S.pop()
0.26 iterables.py(1018):         L.append(node)
0.26 iterables.py(1020):         for u, v in list(E):
0.26 iterables.py(1016):     while S:
0.26 iterables.py(1017):         node = S.pop()
0.26 iterables.py(1018):         L.append(node)
0.26 iterables.py(1020):         for u, v in list(E):
0.26 iterables.py(1016):     while S:
0.26 iterables.py(1017):         node = S.pop()
0.26 iterables.py(1018):         L.append(node)
0.26 iterables.py(1020):         for u, v in list(E):
0.26 iterables.py(1016):     while S:
0.26 iterables.py(1017):         node = S.pop()
0.26 iterables.py(1018):         L.append(node)
0.26 iterables.py(1020):         for u, v in list(E):
0.26 iterables.py(1016):     while S:
0.26 iterables.py(1017):         node = S.pop()
0.26 iterables.py(1018):         L.append(node)
0.26 iterables.py(1020):         for u, v in list(E):
0.26 iterables.py(1016):     while S:
0.26 iterables.py(1017):         node = S.pop()
0.26 iterables.py(1018):         L.append(node)
0.26 iterables.py(1020):         for u, v in list(E):
0.26 iterables.py(1016):     while S:
0.26 iterables.py(1017):         node = S.pop()
0.26 iterables.py(1018):         L.append(node)
0.26 iterables.py(1020):         for u, v in list(E):
0.26 iterables.py(1016):     while S:
0.26 iterables.py(1017):         node = S.pop()
0.26 iterables.py(1018):         L.append(node)
0.26 iterables.py(1020):         for u, v in list(E):
0.26 iterables.py(1016):     while S:
0.26 iterables.py(1039):     if E:
0.26 iterables.py(1042):         return L
0.28 iterables.py(808):     if not binary:
0.28 iterables.py(813):     sift = F, T = [], []
0.28 iterables.py(814):     for i in seq:
0.28 iterables.py(815):         try:
0.28 iterables.py(816):             sift[keyfunc(i)].append(i)
0.28 iterables.py(814):     for i in seq:
0.28 iterables.py(815):         try:
0.28 iterables.py(816):             sift[keyfunc(i)].append(i)
0.28 iterables.py(814):     for i in seq:
0.28 iterables.py(819):     return T, F
0.29 iterables.py(808):     if not binary:
0.29 iterables.py(813):     sift = F, T = [], []
0.29 iterables.py(814):     for i in seq:
0.29 iterables.py(815):         try:
0.29 iterables.py(816):             sift[keyfunc(i)].append(i)
0.29 iterables.py(814):     for i in seq:
0.29 iterables.py(819):     return T, F
0.29 iterables.py(808):     if not binary:
0.29 iterables.py(813):     sift = F, T = [], []
0.29 iterables.py(814):     for i in seq:
0.29 iterables.py(815):         try:
0.29 iterables.py(816):             sift[keyfunc(i)].append(i)
0.29 iterables.py(814):     for i in seq:
0.29 iterables.py(819):     return T, F
0.29 iterables.py(808):     if not binary:
0.29 iterables.py(813):     sift = F, T = [], []
0.29 iterables.py(814):     for i in seq:
0.29 iterables.py(815):         try:
0.29 iterables.py(816):             sift[keyfunc(i)].append(i)
0.29 iterables.py(814):     for i in seq:
0.29 iterables.py(819):     return T, F
0.29 iterables.py(808):     if not binary:
0.29 iterables.py(813):     sift = F, T = [], []
0.29 iterables.py(814):     for i in seq:
0.29 iterables.py(815):         try:
0.29 iterables.py(816):             sift[keyfunc(i)].append(i)
0.29 iterables.py(814):     for i in seq:
0.29 iterables.py(815):         try:
0.29 iterables.py(816):             sift[keyfunc(i)].append(i)
0.29 iterables.py(814):     for i in seq:
0.29 iterables.py(819):     return T, F
0.29 iterables.py(808):     if not binary:
0.29 iterables.py(813):     sift = F, T = [], []
0.29 iterables.py(814):     for i in seq:
0.29 iterables.py(815):         try:
0.29 iterables.py(816):             sift[keyfunc(i)].append(i)
0.29 iterables.py(814):     for i in seq:
0.29 iterables.py(815):         try:
0.29 iterables.py(816):             sift[keyfunc(i)].append(i)
0.29 iterables.py(814):     for i in seq:
0.29 iterables.py(819):     return T, F
0.29 iterables.py(808):     if not binary:
0.29 iterables.py(813):     sift = F, T = [], []
0.29 iterables.py(814):     for i in seq:
0.29 iterables.py(815):         try:
0.29 iterables.py(816):             sift[keyfunc(i)].append(i)
0.29 iterables.py(814):     for i in seq:
0.29 iterables.py(819):     return T, F
0.29 iterables.py(808):     if not binary:
0.29 iterables.py(813):     sift = F, T = [], []
0.29 iterables.py(814):     for i in seq:
0.29 iterables.py(815):         try:
0.29 iterables.py(816):             sift[keyfunc(i)].append(i)
0.29 iterables.py(814):     for i in seq:
0.29 iterables.py(819):     return T, F
0.29 iterables.py(808):     if not binary:
0.29 iterables.py(813):     sift = F, T = [], []
0.29 iterables.py(814):     for i in seq:
0.29 iterables.py(815):         try:
0.29 iterables.py(816):             sift[keyfunc(i)].append(i)
0.29 iterables.py(814):     for i in seq:
0.29 iterables.py(819):     return T, F
0.30 iterables.py(808):     if not binary:
0.30 iterables.py(813):     sift = F, T = [], []
0.30 iterables.py(814):     for i in seq:
0.30 iterables.py(815):         try:
0.30 iterables.py(816):             sift[keyfunc(i)].append(i)
0.30 iterables.py(814):     for i in seq:
0.30 iterables.py(819):     return T, F
0.30 iterables.py(808):     if not binary:
0.30 iterables.py(813):     sift = F, T = [], []
0.30 iterables.py(814):     for i in seq:
0.30 iterables.py(815):         try:
0.30 iterables.py(816):             sift[keyfunc(i)].append(i)
0.30 iterables.py(814):     for i in seq:
0.30 iterables.py(819):     return T, F
0.30 iterables.py(808):     if not binary:
0.30 iterables.py(813):     sift = F, T = [], []
0.30 iterables.py(814):     for i in seq:
0.30 iterables.py(815):         try:
0.30 iterables.py(816):             sift[keyfunc(i)].append(i)
0.30 iterables.py(814):     for i in seq:
0.30 iterables.py(819):     return T, F
0.30 iterables.py(808):     if not binary:
0.30 iterables.py(813):     sift = F, T = [], []
0.30 iterables.py(814):     for i in seq:
0.30 iterables.py(815):         try:
0.30 iterables.py(816):             sift[keyfunc(i)].append(i)
0.30 iterables.py(814):     for i in seq:
0.30 iterables.py(815):         try:
0.30 iterables.py(816):             sift[keyfunc(i)].append(i)
0.30 iterables.py(814):     for i in seq:
0.30 iterables.py(819):     return T, F
0.30 iterables.py(808):     if not binary:
0.30 iterables.py(813):     sift = F, T = [], []
0.30 iterables.py(814):     for i in seq:
0.30 iterables.py(815):         try:
0.30 iterables.py(816):             sift[keyfunc(i)].append(i)
0.30 iterables.py(814):     for i in seq:
0.30 iterables.py(815):         try:
0.30 iterables.py(816):             sift[keyfunc(i)].append(i)
0.30 iterables.py(814):     for i in seq:
0.30 iterables.py(819):     return T, F
0.30 iterables.py(808):     if not binary:
0.30 iterables.py(813):     sift = F, T = [], []
0.30 iterables.py(814):     for i in seq:
0.30 iterables.py(815):         try:
0.30 iterables.py(816):             sift[keyfunc(i)].append(i)
0.30 iterables.py(814):     for i in seq:
0.30 iterables.py(815):         try:
0.30 iterables.py(816):             sift[keyfunc(i)].append(i)
0.30 iterables.py(814):     for i in seq:
0.30 iterables.py(819):     return T, F
0.31 iterables.py(808):     if not binary:
0.31 iterables.py(813):     sift = F, T = [], []
0.31 iterables.py(814):     for i in seq:
0.31 iterables.py(815):         try:
0.31 iterables.py(816):             sift[keyfunc(i)].append(i)
0.31 iterables.py(814):     for i in seq:
0.31 iterables.py(819):     return T, F
0.31 iterables.py(808):     if not binary:
0.31 iterables.py(813):     sift = F, T = [], []
0.31 iterables.py(814):     for i in seq:
0.31 iterables.py(815):         try:
0.31 iterables.py(816):             sift[keyfunc(i)].append(i)
0.31 iterables.py(814):     for i in seq:
0.31 iterables.py(815):         try:
0.31 iterables.py(816):             sift[keyfunc(i)].append(i)
0.31 iterables.py(814):     for i in seq:
0.31 iterables.py(819):     return T, F
0.31 iterables.py(808):     if not binary:
0.31 iterables.py(813):     sift = F, T = [], []
0.31 iterables.py(814):     for i in seq:
0.31 iterables.py(815):         try:
0.31 iterables.py(816):             sift[keyfunc(i)].append(i)
0.31 iterables.py(814):     for i in seq:
0.31 iterables.py(815):         try:
0.31 iterables.py(816):             sift[keyfunc(i)].append(i)
0.31 iterables.py(814):     for i in seq:
0.31 iterables.py(819):     return T, F
0.31 iterables.py(808):     if not binary:
0.31 iterables.py(813):     sift = F, T = [], []
0.31 iterables.py(814):     for i in seq:
0.31 iterables.py(815):         try:
0.31 iterables.py(816):             sift[keyfunc(i)].append(i)
0.31 iterables.py(814):     for i in seq:
0.31 iterables.py(819):     return T, F
0.32 iterables.py(808):     if not binary:
0.32 iterables.py(813):     sift = F, T = [], []
0.32 iterables.py(814):     for i in seq:
0.32 iterables.py(815):         try:
0.32 iterables.py(816):             sift[keyfunc(i)].append(i)
0.32 iterables.py(814):     for i in seq:
0.32 iterables.py(819):     return T, F
0.32 iterables.py(808):     if not binary:
0.32 iterables.py(813):     sift = F, T = [], []
0.32 iterables.py(814):     for i in seq:
0.32 iterables.py(815):         try:
0.32 iterables.py(816):             sift[keyfunc(i)].append(i)
0.32 iterables.py(814):     for i in seq:
0.32 iterables.py(819):     return T, F
0.32 iterables.py(808):     if not binary:
0.32 iterables.py(813):     sift = F, T = [], []
0.32 iterables.py(814):     for i in seq:
0.32 iterables.py(815):         try:
0.32 iterables.py(816):             sift[keyfunc(i)].append(i)
0.32 iterables.py(814):     for i in seq:
0.32 iterables.py(819):     return T, F
0.32 iterables.py(808):     if not binary:
0.32 iterables.py(813):     sift = F, T = [], []
0.32 iterables.py(814):     for i in seq:
0.32 iterables.py(815):         try:
0.32 iterables.py(816):             sift[keyfunc(i)].append(i)
0.32 iterables.py(814):     for i in seq:
0.32 iterables.py(819):     return T, F
0.32 iterables.py(808):     if not binary:
0.32 iterables.py(813):     sift = F, T = [], []
0.32 iterables.py(814):     for i in seq:
0.32 iterables.py(815):         try:
0.32 iterables.py(816):             sift[keyfunc(i)].append(i)
0.32 iterables.py(814):     for i in seq:
0.32 iterables.py(819):     return T, F
0.32 iterables.py(808):     if not binary:
0.32 iterables.py(813):     sift = F, T = [], []
0.32 iterables.py(814):     for i in seq:
0.32 iterables.py(815):         try:
0.32 iterables.py(816):             sift[keyfunc(i)].append(i)
0.32 iterables.py(814):     for i in seq:
0.32 iterables.py(819):     return T, F
0.32 iterables.py(808):     if not binary:
0.32 iterables.py(813):     sift = F, T = [], []
0.32 iterables.py(814):     for i in seq:
0.32 iterables.py(815):         try:
0.32 iterables.py(816):             sift[keyfunc(i)].append(i)
0.32 iterables.py(814):     for i in seq:
0.32 iterables.py(819):     return T, F
0.32 iterables.py(808):     if not binary:
0.32 iterables.py(813):     sift = F, T = [], []
0.32 iterables.py(814):     for i in seq:
0.32 iterables.py(815):         try:
0.32 iterables.py(816):             sift[keyfunc(i)].append(i)
0.32 iterables.py(814):     for i in seq:
0.32 iterables.py(819):     return T, F
0.32 iterables.py(808):     if not binary:
0.32 iterables.py(813):     sift = F, T = [], []
0.32 iterables.py(814):     for i in seq:
0.32 iterables.py(815):         try:
0.32 iterables.py(816):             sift[keyfunc(i)].append(i)
0.32 iterables.py(814):     for i in seq:
0.32 iterables.py(819):     return T, F
0.32 iterables.py(808):     if not binary:
0.32 iterables.py(813):     sift = F, T = [], []
0.32 iterables.py(814):     for i in seq:
0.32 iterables.py(815):         try:
0.32 iterables.py(816):             sift[keyfunc(i)].append(i)
0.32 iterables.py(814):     for i in seq:
0.32 iterables.py(819):     return T, F
0.32 iterables.py(808):     if not binary:
0.32 iterables.py(813):     sift = F, T = [], []
0.32 iterables.py(814):     for i in seq:
0.32 iterables.py(815):         try:
0.32 iterables.py(816):             sift[keyfunc(i)].append(i)
0.32 iterables.py(814):     for i in seq:
0.32 iterables.py(819):     return T, F
0.32 iterables.py(808):     if not binary:
0.32 iterables.py(813):     sift = F, T = [], []
0.32 iterables.py(814):     for i in seq:
0.32 iterables.py(815):         try:
0.32 iterables.py(816):             sift[keyfunc(i)].append(i)
0.32 iterables.py(814):     for i in seq:
0.32 iterables.py(819):     return T, F
0.32 iterables.py(808):     if not binary:
0.32 iterables.py(813):     sift = F, T = [], []
0.32 iterables.py(814):     for i in seq:
0.32 iterables.py(815):         try:
0.32 iterables.py(816):             sift[keyfunc(i)].append(i)
0.32 iterables.py(814):     for i in seq:
0.32 iterables.py(819):     return T, F
0.32 iterables.py(808):     if not binary:
0.32 iterables.py(813):     sift = F, T = [], []
0.32 iterables.py(814):     for i in seq:
0.32 iterables.py(815):         try:
0.32 iterables.py(816):             sift[keyfunc(i)].append(i)
0.32 iterables.py(814):     for i in seq:
0.32 iterables.py(819):     return T, F
0.32 iterables.py(808):     if not binary:
0.32 iterables.py(813):     sift = F, T = [], []
0.32 iterables.py(814):     for i in seq:
0.32 iterables.py(815):         try:
0.32 iterables.py(816):             sift[keyfunc(i)].append(i)
0.32 iterables.py(814):     for i in seq:
0.32 iterables.py(819):     return T, F
0.32 iterables.py(808):     if not binary:
0.32 iterables.py(813):     sift = F, T = [], []
0.32 iterables.py(814):     for i in seq:
0.32 iterables.py(815):         try:
0.32 iterables.py(816):             sift[keyfunc(i)].append(i)
0.32 iterables.py(814):     for i in seq:
0.32 iterables.py(819):     return T, F
0.32 iterables.py(808):     if not binary:
0.32 iterables.py(813):     sift = F, T = [], []
0.32 iterables.py(814):     for i in seq:
0.32 iterables.py(815):         try:
0.32 iterables.py(816):             sift[keyfunc(i)].append(i)
0.32 iterables.py(814):     for i in seq:
0.32 iterables.py(819):     return T, F
0.32 iterables.py(808):     if not binary:
0.32 iterables.py(813):     sift = F, T = [], []
0.32 iterables.py(814):     for i in seq:
0.32 iterables.py(815):         try:
0.32 iterables.py(816):             sift[keyfunc(i)].append(i)
0.32 iterables.py(814):     for i in seq:
0.32 iterables.py(819):     return T, F
0.32 iterables.py(808):     if not binary:
0.32 iterables.py(813):     sift = F, T = [], []
0.32 iterables.py(814):     for i in seq:
0.32 iterables.py(815):         try:
0.32 iterables.py(816):             sift[keyfunc(i)].append(i)
0.32 iterables.py(814):     for i in seq:
0.32 iterables.py(819):     return T, F
0.33 iterables.py(808):     if not binary:
0.33 iterables.py(813):     sift = F, T = [], []
0.33 iterables.py(814):     for i in seq:
0.33 iterables.py(815):         try:
0.33 iterables.py(816):             sift[keyfunc(i)].append(i)
0.33 iterables.py(814):     for i in seq:
0.33 iterables.py(819):     return T, F
0.33 iterables.py(808):     if not binary:
0.33 iterables.py(813):     sift = F, T = [], []
0.33 iterables.py(814):     for i in seq:
0.33 iterables.py(815):         try:
0.33 iterables.py(816):             sift[keyfunc(i)].append(i)
0.33 iterables.py(814):     for i in seq:
0.33 iterables.py(819):     return T, F
0.33 iterables.py(808):     if not binary:
0.33 iterables.py(813):     sift = F, T = [], []
0.33 iterables.py(814):     for i in seq:
0.33 iterables.py(815):         try:
0.33 iterables.py(816):             sift[keyfunc(i)].append(i)
0.33 iterables.py(814):     for i in seq:
0.33 iterables.py(819):     return T, F
0.33 iterables.py(808):     if not binary:
0.33 iterables.py(813):     sift = F, T = [], []
0.33 iterables.py(814):     for i in seq:
0.33 iterables.py(815):         try:
0.33 iterables.py(816):             sift[keyfunc(i)].append(i)
0.33 iterables.py(814):     for i in seq:
0.33 iterables.py(819):     return T, F
0.33 iterables.py(808):     if not binary:
0.33 iterables.py(813):     sift = F, T = [], []
0.33 iterables.py(814):     for i in seq:
0.33 iterables.py(815):         try:
0.33 iterables.py(816):             sift[keyfunc(i)].append(i)
0.33 iterables.py(814):     for i in seq:
0.33 iterables.py(819):     return T, F
0.33 iterables.py(808):     if not binary:
0.33 iterables.py(813):     sift = F, T = [], []
0.33 iterables.py(814):     for i in seq:
0.33 iterables.py(815):         try:
0.33 iterables.py(816):             sift[keyfunc(i)].append(i)
0.33 iterables.py(814):     for i in seq:
0.33 iterables.py(819):     return T, F
0.33 iterables.py(808):     if not binary:
0.33 iterables.py(813):     sift = F, T = [], []
0.33 iterables.py(814):     for i in seq:
0.33 iterables.py(815):         try:
0.33 iterables.py(816):             sift[keyfunc(i)].append(i)
0.33 iterables.py(814):     for i in seq:
0.33 iterables.py(819):     return T, F
0.33 iterables.py(808):     if not binary:
0.33 iterables.py(813):     sift = F, T = [], []
0.33 iterables.py(814):     for i in seq:
0.33 iterables.py(815):         try:
0.33 iterables.py(816):             sift[keyfunc(i)].append(i)
0.33 iterables.py(814):     for i in seq:
0.33 iterables.py(819):     return T, F
0.33 iterables.py(808):     if not binary:
0.33 iterables.py(813):     sift = F, T = [], []
0.33 iterables.py(814):     for i in seq:
0.33 iterables.py(815):         try:
0.33 iterables.py(816):             sift[keyfunc(i)].append(i)
0.33 iterables.py(814):     for i in seq:
0.33 iterables.py(819):     return T, F
0.33 iterables.py(808):     if not binary:
0.33 iterables.py(813):     sift = F, T = [], []
0.33 iterables.py(814):     for i in seq:
0.33 iterables.py(815):         try:
0.33 iterables.py(816):             sift[keyfunc(i)].append(i)
0.33 iterables.py(814):     for i in seq:
0.33 iterables.py(819):     return T, F
0.33 iterables.py(808):     if not binary:
0.33 iterables.py(813):     sift = F, T = [], []
0.33 iterables.py(814):     for i in seq:
0.33 iterables.py(815):         try:
0.33 iterables.py(816):             sift[keyfunc(i)].append(i)
0.33 iterables.py(814):     for i in seq:
0.33 iterables.py(819):     return T, F
0.33 iterables.py(808):     if not binary:
0.33 iterables.py(813):     sift = F, T = [], []
0.33 iterables.py(814):     for i in seq:
0.33 iterables.py(815):         try:
0.33 iterables.py(816):             sift[keyfunc(i)].append(i)
0.33 iterables.py(814):     for i in seq:
0.33 iterables.py(815):         try:
0.33 iterables.py(816):             sift[keyfunc(i)].append(i)
0.33 iterables.py(814):     for i in seq:
0.33 iterables.py(819):     return T, F
0.33 iterables.py(808):     if not binary:
0.33 iterables.py(813):     sift = F, T = [], []
0.33 iterables.py(814):     for i in seq:
0.33 iterables.py(815):         try:
0.33 iterables.py(816):             sift[keyfunc(i)].append(i)
0.33 iterables.py(814):     for i in seq:
0.33 iterables.py(815):         try:
0.33 iterables.py(816):             sift[keyfunc(i)].append(i)
0.33 iterables.py(814):     for i in seq:
0.33 iterables.py(819):     return T, F
0.33 iterables.py(808):     if not binary:
0.33 iterables.py(813):     sift = F, T = [], []
0.33 iterables.py(814):     for i in seq:
0.33 iterables.py(815):         try:
0.33 iterables.py(816):             sift[keyfunc(i)].append(i)
0.33 iterables.py(814):     for i in seq:
0.33 iterables.py(819):     return T, F
0.33 iterables.py(808):     if not binary:
0.33 iterables.py(813):     sift = F, T = [], []
0.33 iterables.py(814):     for i in seq:
0.33 iterables.py(815):         try:
0.33 iterables.py(816):             sift[keyfunc(i)].append(i)
0.33 iterables.py(814):     for i in seq:
0.33 iterables.py(815):         try:
0.33 iterables.py(816):             sift[keyfunc(i)].append(i)
0.33 iterables.py(814):     for i in seq:
0.33 iterables.py(819):     return T, F
0.33 iterables.py(808):     if not binary:
0.33 iterables.py(813):     sift = F, T = [], []
0.33 iterables.py(814):     for i in seq:
0.33 iterables.py(815):         try:
0.33 iterables.py(816):             sift[keyfunc(i)].append(i)
0.33 iterables.py(814):     for i in seq:
0.33 iterables.py(815):         try:
0.33 iterables.py(816):             sift[keyfunc(i)].append(i)
0.33 iterables.py(814):     for i in seq:
0.33 iterables.py(819):     return T, F
0.33 iterables.py(808):     if not binary:
0.33 iterables.py(813):     sift = F, T = [], []
0.33 iterables.py(814):     for i in seq:
0.33 iterables.py(815):         try:
0.33 iterables.py(816):             sift[keyfunc(i)].append(i)
0.33 iterables.py(814):     for i in seq:
0.33 iterables.py(815):         try:
0.33 iterables.py(816):             sift[keyfunc(i)].append(i)
0.33 iterables.py(814):     for i in seq:
0.33 iterables.py(815):         try:
0.33 iterables.py(816):             sift[keyfunc(i)].append(i)
0.33 iterables.py(814):     for i in seq:
0.33 iterables.py(819):     return T, F
0.33 iterables.py(808):     if not binary:
0.33 iterables.py(813):     sift = F, T = [], []
0.33 iterables.py(814):     for i in seq:
0.33 iterables.py(815):         try:
0.33 iterables.py(816):             sift[keyfunc(i)].append(i)
0.33 iterables.py(814):     for i in seq:
0.33 iterables.py(815):         try:
0.33 iterables.py(816):             sift[keyfunc(i)].append(i)
0.33 iterables.py(814):     for i in seq:
0.33 iterables.py(819):     return T, F
0.33 iterables.py(808):     if not binary:
0.33 iterables.py(813):     sift = F, T = [], []
0.33 iterables.py(814):     for i in seq:
0.33 iterables.py(815):         try:
0.33 iterables.py(816):             sift[keyfunc(i)].append(i)
0.33 iterables.py(814):     for i in seq:
0.33 iterables.py(815):         try:
0.33 iterables.py(816):             sift[keyfunc(i)].append(i)
0.33 iterables.py(814):     for i in seq:
0.33 iterables.py(819):     return T, F
0.33 iterables.py(808):     if not binary:
0.33 iterables.py(813):     sift = F, T = [], []
0.33 iterables.py(814):     for i in seq:
0.33 iterables.py(815):         try:
0.33 iterables.py(816):             sift[keyfunc(i)].append(i)
0.33 iterables.py(814):     for i in seq:
0.33 iterables.py(819):     return T, F
0.33 iterables.py(808):     if not binary:
0.33 iterables.py(813):     sift = F, T = [], []
0.33 iterables.py(814):     for i in seq:
0.33 iterables.py(815):         try:
0.33 iterables.py(816):             sift[keyfunc(i)].append(i)
0.33 iterables.py(814):     for i in seq:
0.33 iterables.py(819):     return T, F
0.33 iterables.py(808):     if not binary:
0.33 iterables.py(813):     sift = F, T = [], []
0.33 iterables.py(814):     for i in seq:
0.33 iterables.py(815):         try:
0.33 iterables.py(816):             sift[keyfunc(i)].append(i)
0.33 iterables.py(814):     for i in seq:
0.33 iterables.py(819):     return T, F
0.33 iterables.py(808):     if not binary:
0.33 iterables.py(813):     sift = F, T = [], []
0.33 iterables.py(814):     for i in seq:
0.33 iterables.py(815):         try:
0.33 iterables.py(816):             sift[keyfunc(i)].append(i)
0.33 iterables.py(814):     for i in seq:
0.33 iterables.py(819):     return T, F
0.33 iterables.py(808):     if not binary:
0.33 iterables.py(813):     sift = F, T = [], []
0.33 iterables.py(814):     for i in seq:
0.33 iterables.py(815):         try:
0.33 iterables.py(816):             sift[keyfunc(i)].append(i)
0.33 iterables.py(814):     for i in seq:
0.33 iterables.py(819):     return T, F
0.33 iterables.py(808):     if not binary:
0.33 iterables.py(813):     sift = F, T = [], []
0.33 iterables.py(814):     for i in seq:
0.33 iterables.py(815):         try:
0.33 iterables.py(816):             sift[keyfunc(i)].append(i)
0.33 iterables.py(814):     for i in seq:
0.33 iterables.py(819):     return T, F
0.33 iterables.py(808):     if not binary:
0.33 iterables.py(813):     sift = F, T = [], []
0.33 iterables.py(814):     for i in seq:
0.33 iterables.py(815):         try:
0.33 iterables.py(816):             sift[keyfunc(i)].append(i)
0.33 iterables.py(814):     for i in seq:
0.33 iterables.py(819):     return T, F
0.33 iterables.py(808):     if not binary:
0.33 iterables.py(813):     sift = F, T = [], []
0.33 iterables.py(814):     for i in seq:
0.33 iterables.py(815):         try:
0.33 iterables.py(816):             sift[keyfunc(i)].append(i)
0.33 iterables.py(814):     for i in seq:
0.33 iterables.py(819):     return T, F
0.33 iterables.py(808):     if not binary:
0.33 iterables.py(813):     sift = F, T = [], []
0.33 iterables.py(814):     for i in seq:
0.33 iterables.py(815):         try:
0.33 iterables.py(816):             sift[keyfunc(i)].append(i)
0.33 iterables.py(814):     for i in seq:
0.33 iterables.py(819):     return T, F
0.33 iterables.py(808):     if not binary:
0.33 iterables.py(813):     sift = F, T = [], []
0.33 iterables.py(814):     for i in seq:
0.33 iterables.py(815):         try:
0.33 iterables.py(816):             sift[keyfunc(i)].append(i)
0.33 iterables.py(814):     for i in seq:
0.33 iterables.py(819):     return T, F
0.33 iterables.py(808):     if not binary:
0.33 iterables.py(813):     sift = F, T = [], []
0.33 iterables.py(814):     for i in seq:
0.33 iterables.py(815):         try:
0.33 iterables.py(816):             sift[keyfunc(i)].append(i)
0.33 iterables.py(814):     for i in seq:
0.33 iterables.py(819):     return T, F
0.33 iterables.py(808):     if not binary:
0.33 iterables.py(813):     sift = F, T = [], []
0.33 iterables.py(814):     for i in seq:
0.33 iterables.py(815):         try:
0.33 iterables.py(816):             sift[keyfunc(i)].append(i)
0.33 iterables.py(814):     for i in seq:
0.33 iterables.py(819):     return T, F
0.33 iterables.py(808):     if not binary:
0.33 iterables.py(813):     sift = F, T = [], []
0.33 iterables.py(814):     for i in seq:
0.33 iterables.py(815):         try:
0.33 iterables.py(816):             sift[keyfunc(i)].append(i)
0.33 iterables.py(814):     for i in seq:
0.33 iterables.py(815):         try:
0.33 iterables.py(816):             sift[keyfunc(i)].append(i)
0.33 iterables.py(814):     for i in seq:
0.33 iterables.py(819):     return T, F
0.33 iterables.py(808):     if not binary:
0.33 iterables.py(813):     sift = F, T = [], []
0.33 iterables.py(814):     for i in seq:
0.33 iterables.py(815):         try:
0.33 iterables.py(816):             sift[keyfunc(i)].append(i)
0.33 iterables.py(814):     for i in seq:
0.33 iterables.py(815):         try:
0.33 iterables.py(816):             sift[keyfunc(i)].append(i)
0.33 iterables.py(814):     for i in seq:
0.33 iterables.py(819):     return T, F
0.33 iterables.py(808):     if not binary:
0.33 iterables.py(813):     sift = F, T = [], []
0.33 iterables.py(814):     for i in seq:
0.33 iterables.py(815):         try:
0.33 iterables.py(816):             sift[keyfunc(i)].append(i)
0.33 iterables.py(814):     for i in seq:
0.33 iterables.py(815):         try:
0.33 iterables.py(816):             sift[keyfunc(i)].append(i)
0.33 iterables.py(814):     for i in seq:
0.33 iterables.py(815):         try:
0.33 iterables.py(816):             sift[keyfunc(i)].append(i)
0.33 iterables.py(814):     for i in seq:
0.33 iterables.py(819):     return T, F
0.34 iterables.py(808):     if not binary:
0.34 iterables.py(813):     sift = F, T = [], []
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(815):         try:
0.34 iterables.py(816):             sift[keyfunc(i)].append(i)
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(815):         try:
0.34 iterables.py(816):             sift[keyfunc(i)].append(i)
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(815):         try:
0.34 iterables.py(816):             sift[keyfunc(i)].append(i)
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(815):         try:
0.34 iterables.py(816):             sift[keyfunc(i)].append(i)
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(815):         try:
0.34 iterables.py(816):             sift[keyfunc(i)].append(i)
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(815):         try:
0.34 iterables.py(816):             sift[keyfunc(i)].append(i)
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(819):     return T, F
0.34 iterables.py(808):     if not binary:
0.34 iterables.py(813):     sift = F, T = [], []
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(815):         try:
0.34 iterables.py(816):             sift[keyfunc(i)].append(i)
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(819):     return T, F
0.34 iterables.py(808):     if not binary:
0.34 iterables.py(813):     sift = F, T = [], []
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(815):         try:
0.34 iterables.py(816):             sift[keyfunc(i)].append(i)
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(819):     return T, F
0.34 iterables.py(808):     if not binary:
0.34 iterables.py(813):     sift = F, T = [], []
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(815):         try:
0.34 iterables.py(816):             sift[keyfunc(i)].append(i)
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(819):     return T, F
0.34 iterables.py(808):     if not binary:
0.34 iterables.py(813):     sift = F, T = [], []
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(815):         try:
0.34 iterables.py(816):             sift[keyfunc(i)].append(i)
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(815):         try:
0.34 iterables.py(816):             sift[keyfunc(i)].append(i)
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(819):     return T, F
0.34 iterables.py(808):     if not binary:
0.34 iterables.py(813):     sift = F, T = [], []
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(815):         try:
0.34 iterables.py(816):             sift[keyfunc(i)].append(i)
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(819):     return T, F
0.34 iterables.py(808):     if not binary:
0.34 iterables.py(813):     sift = F, T = [], []
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(815):         try:
0.34 iterables.py(816):             sift[keyfunc(i)].append(i)
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(819):     return T, F
0.34 iterables.py(808):     if not binary:
0.34 iterables.py(813):     sift = F, T = [], []
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(815):         try:
0.34 iterables.py(816):             sift[keyfunc(i)].append(i)
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(815):         try:
0.34 iterables.py(816):             sift[keyfunc(i)].append(i)
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(819):     return T, F
0.34 iterables.py(808):     if not binary:
0.34 iterables.py(813):     sift = F, T = [], []
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(815):         try:
0.34 iterables.py(816):             sift[keyfunc(i)].append(i)
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(819):     return T, F
0.34 iterables.py(808):     if not binary:
0.34 iterables.py(813):     sift = F, T = [], []
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(815):         try:
0.34 iterables.py(816):             sift[keyfunc(i)].append(i)
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(815):         try:
0.34 iterables.py(816):             sift[keyfunc(i)].append(i)
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(819):     return T, F
0.34 iterables.py(808):     if not binary:
0.34 iterables.py(813):     sift = F, T = [], []
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(815):         try:
0.34 iterables.py(816):             sift[keyfunc(i)].append(i)
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(819):     return T, F
0.34 iterables.py(808):     if not binary:
0.34 iterables.py(813):     sift = F, T = [], []
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(815):         try:
0.34 iterables.py(816):             sift[keyfunc(i)].append(i)
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(819):     return T, F
0.34 iterables.py(808):     if not binary:
0.34 iterables.py(813):     sift = F, T = [], []
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(815):         try:
0.34 iterables.py(816):             sift[keyfunc(i)].append(i)
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(819):     return T, F
0.34 iterables.py(808):     if not binary:
0.34 iterables.py(813):     sift = F, T = [], []
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(815):         try:
0.34 iterables.py(816):             sift[keyfunc(i)].append(i)
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(819):     return T, F
0.34 iterables.py(808):     if not binary:
0.34 iterables.py(813):     sift = F, T = [], []
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(815):         try:
0.34 iterables.py(816):             sift[keyfunc(i)].append(i)
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(819):     return T, F
0.34 iterables.py(808):     if not binary:
0.34 iterables.py(813):     sift = F, T = [], []
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(815):         try:
0.34 iterables.py(816):             sift[keyfunc(i)].append(i)
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(819):     return T, F
0.34 iterables.py(808):     if not binary:
0.34 iterables.py(813):     sift = F, T = [], []
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(815):         try:
0.34 iterables.py(816):             sift[keyfunc(i)].append(i)
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(819):     return T, F
0.34 iterables.py(808):     if not binary:
0.34 iterables.py(813):     sift = F, T = [], []
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(815):         try:
0.34 iterables.py(816):             sift[keyfunc(i)].append(i)
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(819):     return T, F
0.34 iterables.py(808):     if not binary:
0.34 iterables.py(813):     sift = F, T = [], []
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(815):         try:
0.34 iterables.py(816):             sift[keyfunc(i)].append(i)
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(819):     return T, F
0.34 iterables.py(808):     if not binary:
0.34 iterables.py(813):     sift = F, T = [], []
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(815):         try:
0.34 iterables.py(816):             sift[keyfunc(i)].append(i)
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(819):     return T, F
0.34 iterables.py(808):     if not binary:
0.34 iterables.py(813):     sift = F, T = [], []
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(815):         try:
0.34 iterables.py(816):             sift[keyfunc(i)].append(i)
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(819):     return T, F
0.34 iterables.py(808):     if not binary:
0.34 iterables.py(813):     sift = F, T = [], []
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(815):         try:
0.34 iterables.py(816):             sift[keyfunc(i)].append(i)
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(815):         try:
0.34 iterables.py(816):             sift[keyfunc(i)].append(i)
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(819):     return T, F
0.34 iterables.py(808):     if not binary:
0.34 iterables.py(813):     sift = F, T = [], []
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(815):         try:
0.34 iterables.py(816):             sift[keyfunc(i)].append(i)
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(815):         try:
0.34 iterables.py(816):             sift[keyfunc(i)].append(i)
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(819):     return T, F
0.34 iterables.py(808):     if not binary:
0.34 iterables.py(813):     sift = F, T = [], []
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(815):         try:
0.34 iterables.py(816):             sift[keyfunc(i)].append(i)
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(819):     return T, F
0.34 iterables.py(808):     if not binary:
0.34 iterables.py(813):     sift = F, T = [], []
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(815):         try:
0.34 iterables.py(816):             sift[keyfunc(i)].append(i)
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(815):         try:
0.34 iterables.py(816):             sift[keyfunc(i)].append(i)
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(819):     return T, F
0.34 iterables.py(808):     if not binary:
0.34 iterables.py(813):     sift = F, T = [], []
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(815):         try:
0.34 iterables.py(816):             sift[keyfunc(i)].append(i)
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(819):     return T, F
0.34 iterables.py(808):     if not binary:
0.34 iterables.py(813):     sift = F, T = [], []
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(815):         try:
0.34 iterables.py(816):             sift[keyfunc(i)].append(i)
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(815):         try:
0.34 iterables.py(816):             sift[keyfunc(i)].append(i)
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(819):     return T, F
0.34 iterables.py(808):     if not binary:
0.34 iterables.py(813):     sift = F, T = [], []
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(815):         try:
0.34 iterables.py(816):             sift[keyfunc(i)].append(i)
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(815):         try:
0.34 iterables.py(816):             sift[keyfunc(i)].append(i)
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(819):     return T, F
0.34 iterables.py(808):     if not binary:
0.34 iterables.py(813):     sift = F, T = [], []
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(815):         try:
0.34 iterables.py(816):             sift[keyfunc(i)].append(i)
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(815):         try:
0.34 iterables.py(816):             sift[keyfunc(i)].append(i)
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(819):     return T, F
0.34 iterables.py(808):     if not binary:
0.34 iterables.py(813):     sift = F, T = [], []
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(815):         try:
0.34 iterables.py(816):             sift[keyfunc(i)].append(i)
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(819):     return T, F
0.34 iterables.py(808):     if not binary:
0.34 iterables.py(813):     sift = F, T = [], []
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(815):         try:
0.34 iterables.py(816):             sift[keyfunc(i)].append(i)
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(819):     return T, F
0.34 iterables.py(808):     if not binary:
0.34 iterables.py(813):     sift = F, T = [], []
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(815):         try:
0.34 iterables.py(816):             sift[keyfunc(i)].append(i)
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(819):     return T, F
0.34 iterables.py(808):     if not binary:
0.34 iterables.py(813):     sift = F, T = [], []
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(815):         try:
0.34 iterables.py(816):             sift[keyfunc(i)].append(i)
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(815):         try:
0.34 iterables.py(816):             sift[keyfunc(i)].append(i)
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(819):     return T, F
0.34 iterables.py(808):     if not binary:
0.34 iterables.py(813):     sift = F, T = [], []
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(815):         try:
0.34 iterables.py(816):             sift[keyfunc(i)].append(i)
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(815):         try:
0.34 iterables.py(816):             sift[keyfunc(i)].append(i)
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(815):         try:
0.34 iterables.py(816):             sift[keyfunc(i)].append(i)
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(819):     return T, F
0.34 iterables.py(808):     if not binary:
0.34 iterables.py(813):     sift = F, T = [], []
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(815):         try:
0.34 iterables.py(816):             sift[keyfunc(i)].append(i)
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(815):         try:
0.34 iterables.py(816):             sift[keyfunc(i)].append(i)
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(819):     return T, F
0.34 iterables.py(808):     if not binary:
0.34 iterables.py(813):     sift = F, T = [], []
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(815):         try:
0.34 iterables.py(816):             sift[keyfunc(i)].append(i)
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(815):         try:
0.34 iterables.py(816):             sift[keyfunc(i)].append(i)
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(819):     return T, F
0.34 iterables.py(808):     if not binary:
0.34 iterables.py(813):     sift = F, T = [], []
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(815):         try:
0.34 iterables.py(816):             sift[keyfunc(i)].append(i)
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(815):         try:
0.34 iterables.py(816):             sift[keyfunc(i)].append(i)
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(815):         try:
0.34 iterables.py(816):             sift[keyfunc(i)].append(i)
0.34 iterables.py(814):     for i in seq:
0.34 iterables.py(819):     return T, F
0.35 iterables.py(808):     if not binary:
0.35 iterables.py(813):     sift = F, T = [], []
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(819):     return T, F
0.35 iterables.py(808):     if not binary:
0.35 iterables.py(813):     sift = F, T = [], []
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(819):     return T, F
0.35 iterables.py(808):     if not binary:
0.35 iterables.py(813):     sift = F, T = [], []
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(819):     return T, F
0.35 iterables.py(808):     if not binary:
0.35 iterables.py(813):     sift = F, T = [], []
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(819):     return T, F
0.35 iterables.py(808):     if not binary:
0.35 iterables.py(813):     sift = F, T = [], []
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(819):     return T, F
0.35 iterables.py(808):     if not binary:
0.35 iterables.py(813):     sift = F, T = [], []
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(819):     return T, F
0.35 iterables.py(808):     if not binary:
0.35 iterables.py(813):     sift = F, T = [], []
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(819):     return T, F
0.35 iterables.py(808):     if not binary:
0.35 iterables.py(813):     sift = F, T = [], []
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(819):     return T, F
0.35 iterables.py(808):     if not binary:
0.35 iterables.py(813):     sift = F, T = [], []
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(819):     return T, F
0.35 iterables.py(808):     if not binary:
0.35 iterables.py(813):     sift = F, T = [], []
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(819):     return T, F
0.35 iterables.py(808):     if not binary:
0.35 iterables.py(813):     sift = F, T = [], []
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(819):     return T, F
0.35 iterables.py(808):     if not binary:
0.35 iterables.py(813):     sift = F, T = [], []
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(819):     return T, F
0.35 iterables.py(808):     if not binary:
0.35 iterables.py(813):     sift = F, T = [], []
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(819):     return T, F
0.35 iterables.py(808):     if not binary:
0.35 iterables.py(813):     sift = F, T = [], []
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(819):     return T, F
0.35 iterables.py(808):     if not binary:
0.35 iterables.py(813):     sift = F, T = [], []
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(819):     return T, F
0.35 iterables.py(808):     if not binary:
0.35 iterables.py(813):     sift = F, T = [], []
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(819):     return T, F
0.35 iterables.py(808):     if not binary:
0.35 iterables.py(813):     sift = F, T = [], []
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(819):     return T, F
0.35 iterables.py(808):     if not binary:
0.35 iterables.py(813):     sift = F, T = [], []
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(819):     return T, F
0.35 iterables.py(808):     if not binary:
0.35 iterables.py(813):     sift = F, T = [], []
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(819):     return T, F
0.35 iterables.py(808):     if not binary:
0.35 iterables.py(813):     sift = F, T = [], []
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(819):     return T, F
0.35 iterables.py(808):     if not binary:
0.35 iterables.py(813):     sift = F, T = [], []
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(819):     return T, F
0.35 iterables.py(808):     if not binary:
0.35 iterables.py(813):     sift = F, T = [], []
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(819):     return T, F
0.35 iterables.py(808):     if not binary:
0.35 iterables.py(813):     sift = F, T = [], []
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(819):     return T, F
0.35 iterables.py(808):     if not binary:
0.35 iterables.py(813):     sift = F, T = [], []
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(819):     return T, F
0.35 iterables.py(808):     if not binary:
0.35 iterables.py(813):     sift = F, T = [], []
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(819):     return T, F
0.35 iterables.py(808):     if not binary:
0.35 iterables.py(813):     sift = F, T = [], []
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(819):     return T, F
0.35 iterables.py(808):     if not binary:
0.35 iterables.py(813):     sift = F, T = [], []
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(819):     return T, F
0.35 iterables.py(808):     if not binary:
0.35 iterables.py(813):     sift = F, T = [], []
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(819):     return T, F
0.35 iterables.py(808):     if not binary:
0.35 iterables.py(813):     sift = F, T = [], []
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(819):     return T, F
0.35 iterables.py(808):     if not binary:
0.35 iterables.py(813):     sift = F, T = [], []
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(819):     return T, F
0.35 iterables.py(808):     if not binary:
0.35 iterables.py(813):     sift = F, T = [], []
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(819):     return T, F
0.35 iterables.py(808):     if not binary:
0.35 iterables.py(813):     sift = F, T = [], []
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(819):     return T, F
0.35 iterables.py(808):     if not binary:
0.35 iterables.py(813):     sift = F, T = [], []
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(819):     return T, F
0.35 iterables.py(808):     if not binary:
0.35 iterables.py(813):     sift = F, T = [], []
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(819):     return T, F
0.35 iterables.py(808):     if not binary:
0.35 iterables.py(813):     sift = F, T = [], []
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(819):     return T, F
0.35 iterables.py(808):     if not binary:
0.35 iterables.py(813):     sift = F, T = [], []
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(819):     return T, F
0.35 iterables.py(808):     if not binary:
0.35 iterables.py(813):     sift = F, T = [], []
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(819):     return T, F
0.35 iterables.py(808):     if not binary:
0.35 iterables.py(813):     sift = F, T = [], []
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(819):     return T, F
0.35 iterables.py(808):     if not binary:
0.35 iterables.py(813):     sift = F, T = [], []
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(819):     return T, F
0.35 iterables.py(808):     if not binary:
0.35 iterables.py(813):     sift = F, T = [], []
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(815):         try:
0.35 iterables.py(816):             sift[keyfunc(i)].append(i)
0.35 iterables.py(814):     for i in seq:
0.35 iterables.py(819):     return T, F
0.36 iterables.py(808):     if not binary:
0.36 iterables.py(813):     sift = F, T = [], []
0.36 iterables.py(814):     for i in seq:
0.36 iterables.py(815):         try:
0.36 iterables.py(816):             sift[keyfunc(i)].append(i)
0.36 iterables.py(814):     for i in seq:
0.36 iterables.py(815):         try:
0.36 iterables.py(816):             sift[keyfunc(i)].append(i)
0.36 iterables.py(814):     for i in seq:
0.36 iterables.py(819):     return T, F
0.37 iterables.py(808):     if not binary:
0.37 iterables.py(813):     sift = F, T = [], []
0.37 iterables.py(814):     for i in seq:
0.37 iterables.py(815):         try:
0.37 iterables.py(816):             sift[keyfunc(i)].append(i)
0.37 iterables.py(814):     for i in seq:
0.37 iterables.py(815):         try:
0.37 iterables.py(816):             sift[keyfunc(i)].append(i)
0.37 iterables.py(814):     for i in seq:
0.37 iterables.py(815):         try:
0.37 iterables.py(816):             sift[keyfunc(i)].append(i)
0.37 iterables.py(814):     for i in seq:
0.37 iterables.py(819):     return T, F
============================= test process starts ==============================
executable:         /opt/miniconda3/envs/testbed/bin/python3  (3.9.23-final-0) [CPython]
architecture:       64-bit
cache:              no
ground types:       python 
numpy:              None
random seed:        92140113
hash randomization: on (PYTHONHASHSEED=2159110950)

sympy/polys/tests/test_coverup_sympy__sympy-20154.py[1] 
test_partitions_reuse_bug 0.49 iterables.py(1769):     if (n <= 0 or
0.49 iterables.py(1770):         m is not None and m < 1 or
0.49 iterables.py(1769):     if (n <= 0 or
0.49 iterables.py(1771):         k is not None and k < 1 or
0.49 iterables.py(1769):     if (n <= 0 or
0.49 iterables.py(1771):         k is not None and k < 1 or
0.49 iterables.py(1769):     if (n <= 0 or
0.49 iterables.py(1772):         m and k and m*k < n):
0.49 iterables.py(1769):     if (n <= 0 or
0.49 iterables.py(1782):     if m is None:
0.49 iterables.py(1783):         m = n
0.49 iterables.py(1787):     if n == 0:
0.49 iterables.py(1794):     k = min(k or n, n)
0.49 iterables.py(1796):     n, m, k = as_int(n), as_int(m), as_int(k)
0.49 iterables.py(1797):     q, r = divmod(n, k)
0.49 iterables.py(1798):     ms = {k: q}
0.49 iterables.py(1799):     keys = [k]  # ms.keys(), from largest to smallest
0.49 iterables.py(1800):     if r:
0.49 iterables.py(1803):     room = m - q - bool(r)
0.49 iterables.py(1804):     if size:
0.49 iterables.py(1807):         yield ms
0.49 iterables.py(1809):     while keys != [1]:
0.49 iterables.py(1811):         if keys[-1] == 1:
0.49 iterables.py(1816):             reuse = 0
0.49 iterables.py(1821):             i = keys[-1]
0.49 iterables.py(1822):             newcount = ms[i] = ms[i] - 1
0.49 iterables.py(1823):             reuse += i
0.49 iterables.py(1824):             if newcount == 0:
0.49 iterables.py(1826):             room += 1
0.49 iterables.py(1829):             i -= 1
0.49 iterables.py(1830):             q, r = divmod(reuse, i)
0.49 iterables.py(1831):             need = q + bool(r)
0.49 iterables.py(1832):             if need > room:
0.49 iterables.py(1837):             ms[i] = q
0.49 iterables.py(1838):             keys.append(i)
0.49 iterables.py(1839):             if r:
0.49 iterables.py(1843):         room -= need
0.49 iterables.py(1844):         if size:
0.49 iterables.py(1847):             yield ms
0.49 iterables.py(1809):     while keys != [1]:
0.49 iterables.py(1811):         if keys[-1] == 1:
0.49 iterables.py(1812):             del keys[-1]
0.49 iterables.py(1813):             reuse = ms.pop(1)
0.49 iterables.py(1814):             room += reuse
0.49 iterables.py(1821):             i = keys[-1]
0.49 iterables.py(1822):             newcount = ms[i] = ms[i] - 1
0.49 iterables.py(1823):             reuse += i
0.49 iterables.py(1824):             if newcount == 0:
0.49 iterables.py(1826):             room += 1
0.49 iterables.py(1829):             i -= 1
0.49 iterables.py(1830):             q, r = divmod(reuse, i)
0.49 iterables.py(1831):             need = q + bool(r)
0.49 iterables.py(1832):             if need > room:
0.49 iterables.py(1837):             ms[i] = q
0.49 iterables.py(1838):             keys.append(i)
0.49 iterables.py(1839):             if r:
0.49 iterables.py(1843):         room -= need
0.49 iterables.py(1844):         if size:
0.49 iterables.py(1847):             yield ms
0.49 iterables.py(1809):     while keys != [1]:
0.49 iterables.py(1811):         if keys[-1] == 1:
0.49 iterables.py(1812):             del keys[-1]
0.49 iterables.py(1813):             reuse = ms.pop(1)
0.49 iterables.py(1814):             room += reuse
0.49 iterables.py(1821):             i = keys[-1]
0.49 iterables.py(1822):             newcount = ms[i] = ms[i] - 1
0.49 iterables.py(1823):             reuse += i
0.49 iterables.py(1824):             if newcount == 0:
0.49 iterables.py(1825):                 del keys[-1], ms[i]
0.49 iterables.py(1826):             room += 1
0.49 iterables.py(1829):             i -= 1
0.49 iterables.py(1830):             q, r = divmod(reuse, i)
0.49 iterables.py(1831):             need = q + bool(r)
0.49 iterables.py(1832):             if need > room:
0.49 iterables.py(1837):             ms[i] = q
0.49 iterables.py(1838):             keys.append(i)
0.49 iterables.py(1839):             if r:
0.49 iterables.py(1843):         room -= need
0.49 iterables.py(1844):         if size:
0.49 iterables.py(1847):             yield ms
0.49 iterables.py(1809):     while keys != [1]:
F                                               [FAIL]


________________________________________________________________________________
 sympy/polys/tests/test_coverup_sympy__sympy-20154.py:test_partitions_reuse_bug 
Traceback (most recent call last):
  File "/testbed/sympy/polys/tests/test_coverup_sympy__sympy-20154.py", line 10, in test_partitions_reuse_bug
    assert partition is not first_partition  # Correct behavior: each partition should be a distinct object
AssertionError

============= tests finished: 0 passed, 1 failed, in 0.01 seconds ==============
DO *NOT* COMMIT!
iterables.py(816):             sift[keyfunc(i)].append(i)
0.75 iterables.py(814):     for i in seq:
0.75 iterables.py(815):         try:
0.75 iterables.py(816):             sift[keyfunc(i)].append(i)
0.75 iterables.py(814):     for i in seq:
0.75 iterables.py(815):         try:
0.75 iterables.py(816):             sift[keyfunc(i)].append(i)
0.75 iterables.py(814):     for i in seq:
0.75 iterables.py(819):     return T, F
0.75 iterables.py(808):     if not binary:
0.75 iterables.py(813):     sift = F, T = [], []
0.75 iterables.py(814):     for i in seq:
0.75 iterables.py(815):         try:
0.75 iterables.py(816):             sift[keyfunc(i)].append(i)
0.75 iterables.py(814):     for i in seq:
0.75 iterables.py(815):         try:
0.75 iterables.py(816):             sift[keyfunc(i)].append(i)
0.75 iterables.py(814):     for i in seq:
0.75 iterables.py(815):         try:
0.75 iterables.py(816):             sift[keyfunc(i)].append(i)
0.75 iterables.py(814):     for i in seq:
0.75 iterables.py(819):     return T, F
0.75 iterables.py(808):     if not binary:
0.75 iterables.py(813):     sift = F, T = [], []
0.75 iterables.py(814):     for i in seq:
0.75 iterables.py(815):         try:
0.75 iterables.py(816):             sift[keyfunc(i)].append(i)
0.75 iterables.py(814):     for i in seq:
0.75 iterables.py(815):         try:
0.75 iterables.py(816):             sift[keyfunc(i)].append(i)
0.75 iterables.py(814):     for i in seq:
0.75 iterables.py(815):         try:
0.75 iterables.py(816):             sift[keyfunc(i)].append(i)
0.75 iterables.py(814):     for i in seq:
0.75 iterables.py(819):     return T, F
0.80 iterables.py(808):     if not binary:
0.80 iterables.py(813):     sift = F, T = [], []
0.80 iterables.py(814):     for i in seq:
0.80 iterables.py(815):         try:
0.80 iterables.py(816):             sift[keyfunc(i)].append(i)
0.80 iterables.py(814):     for i in seq:
0.80 iterables.py(815):         try:
0.80 iterables.py(816):             sift[keyfunc(i)].append(i)
0.80 iterables.py(814):     for i in seq:
0.80 iterables.py(819):     return T, F
0.88 iterables.py(808):     if not binary:
0.88 iterables.py(813):     sift = F, T = [], []
0.88 iterables.py(814):     for i in seq:
0.88 iterables.py(815):         try:
0.88 iterables.py(816):             sift[keyfunc(i)].append(i)
0.88 iterables.py(814):     for i in seq:
0.88 iterables.py(815):         try:
0.88 iterables.py(816):             sift[keyfunc(i)].append(i)
0.88 iterables.py(814):     for i in seq:
0.88 iterables.py(815):         try:
0.88 iterables.py(816):             sift[keyfunc(i)].append(i)
0.88 iterables.py(814):     for i in seq:
0.88 iterables.py(819):     return T, F
+ cat coverage.cover
{"/testbed/sympy/utilities/iterables.py": {"1": 1, "2": 1, "6": 1, "7": 1, "9": 1, "12": 1, "16": 1, "20": 1, "56": 1, "120": 1, "129": 1, "189": 1, "234": 1, "261": 1, "302": 1, "325": 1, "382": 1, "475": 1, "547": 1, "592": 1, "642": 1, "666": 1, "705": 1, "735": 1, "822": 1, "827": 1, "837": 1, "863": 1, "893": 1, "912": 1, "931": 1, "1045": 1, "1168": 1, "1239": 1, "1258": 1, "1277": 1, "1317": 1, "1373": 1, "1422": 1, "1460": 1, "1539": 1, "1696": 1, "1850": 1, "1986": 1, "2044": 1, "2068": 1, "2090": 1, "2144": 1, "2251": 1, "2288": 1, "2320": 1, "2365": 1, "2370": 1, "2416": 1, "2494": 1, "2531": 1, "2657": 1, "2673": 1, "2692": 1, "2712": 1, "50": 0, "51": 0, "53": 0, "92": 0, "93": 0, "94": 0, "95": 0, "96": 0, "97": 0, "99": 0, "100": 0, "102": 0, "103": 0, "105": 0, "107": 0, "109": 0, "110": 0, "111": 0, "112": 0, "113": 0, "115": 0, "117": 0, "124": 0, "125": 0, "126": 0, "166": 0, "167": 0, "168": 0, "169": 0, "171": 0, "172": 0, "173": 0, "174": 0, "175": 0, "176": 0, "177": 0, "178": 0, "179": 0, "181": 0, "182": 0, "183": 0, "184": 0, "185": 0, "186": 0, "211": 0, "212": 0, "214": 0, "216": 0, "217": 0, "218": 0, "220": 0, "221": 0, "223": 0, "225": 0, "226": 0, "228": 0, "229": 0, "231": 0, "237": 0, "238": 0, "240": 0, "241": 0, "243": 0, "244": 0, "249": 0, "250": 0, "251": 0, "253": 0, "254": 0, "255": 0, "256": 0, "257": 0, "258": 0, "245": 0, "246": 0, "247": 0, "288": 0, "289": 0, "290": 0, "291": 0, "292": 0, "293": 0, "294": 0, "295": 0, "297": 0, "298": 0, "299": 0, "319": 0, "320": 0, "321": 0, "322": 0, "367": 0, "368": 0, "369": 0, "370": 0, "371": 0, "373": 0, "374": 0, "375": 0, "376": 0, "377": 0, "378": 0, "379": 0, "384": 0, "386": 0, "387": 0, "388": 0, "389": 0, "390": 0, "391": 0, "392": 0, "394": 0, "397": 0, "472": 0, "395": 0, "398": 0, "399": 0, "401": 0, "402": 0, "403": 0, "404": 0, "406": 0, "407": 0, "408": 0, "409": 0, "410": 0, "412": 0, "413": 0, "414": 0, "416": 0, "418": 0, "420": 0, "421": 0, "423": 0, "424": 0, "425": 0, "426": 0, "428": 0, "429": 0, "431": 0, "433": 0, "434": 0, "435": 0, "436": 0, "437": 0, "439": 0, "440": 0, "441": 0, "442": 0, "443": 0, "444": 0, "445": 0, "447": 0, "448": 0, "449": 0, "450": 0, "451": 0, "452": 0, "453": 0, "454": 0, "455": 0, "457": 0, "458": 0, "459": 0, "460": 0, "461": 0, "462": 0, "464": 0, "465": 0, "466": 0, "468": 0, "470": 0, "519": 0, "520": 0, "521": 0, "523": 0, "524": 0, "526": 0, "527": 0, "528": 0, "529": 0, "531": 0, "532": 0, "533": 0, "535": 0, "536": 0, "537": 0, "539": 0, "541": 0, "542": 0, "544": 0, "580": 0, "581": 0, "582": 0, "583": 0, "584": 0, "586": 0, "587": 0, "589": 0, "632": 0, "633": 0, "634": 0, "636": 0, "637": 0, "639": 0, "661": 0, "662": 0, "663": 0, "664": 0, "690": 0, "691": 0, "694": 0, "695": 0, "698": 0, "699": 0, "700": 0, "701": 0, "702": 0, "723": 0, "724": 0, "726": 0, "727": 0, "728": 0, "729": 0, "731": 0, "732": 0, "808": 153, "809": 0, "810": 0, "811": 0, "812": 0, "813": 153, "814": 401, "815": 248, "816": 248, "817": 0, "818": 0, "819": 153, "824": 0, "829": 0, "831": 0, "832": 0, "834": 0, "850": 0, "851": 0, "852": 0, "853": 0, "854": 0, "855": 0, "856": 0, "857": 0, "859": 0, "860": 0, "877": 0, "878": 0, "879": 0, "880": 0, "881": 0, "882": 0, "883": 0, "884": 0, "886": 0, "887": 0, "888": 0, "890": 0, "906": 0, "908": 0, "909": 0, "925": 0, "927": 0, "928": 0, "1002": 1, "1004": 1, "1005": 1, "1006": 1, "1008": 6, "1009": 5, "1011": 1, "1012": 52, "1014": 1, "1016": 26, "1017": 25, "1018": 25, "1020": 63, "1021": 38, "1022": 5, "1024": 6, "1025": 4, "1026": 3, "1028": 2, "1030": 28, "1031": 26, "1033": 26, "1034": 0, "1035": 0, "1037": 2, "1039": 1, "1040": 0, "1042": 1, "1117": 0, "1118": 0, "1119": 0, "1120": 0, "1123": 0, "1124": 0, "1125": 0, "1126": 0, "1127": 0, "1128": 0, "1130": 0, "1136": 0, "1148": 0, "1149": 0, "1150": 0, "1151": 0, "1152": 0, "1153": 0, "1154": 0, "1156": 0, "1157": 0, "1159": 0, "1160": 0, "1161": 0, "1162": 0, "1165": 0, "1131": 0, "1132": 0, "1133": 0, "1134": 0, "1138": 0, "1139": 0, "1140": 0, "1141": 0, "1142": 0, "1143": 0, "1144": 0, "1145": 0, "1146": 0, "1232": 0, "1233": 0, "1234": 0, "1235": 0, "1236": 0, "1252": 0, "1253": 0, "1254": 0, "1255": 0, "1271": 0, "1272": 0, "1273": 0, "1274": 0, "1298": 0, "1299": 0, "1300": 0, "1301": 0, "1302": 0, "1303": 0, "1304": 0, "1305": 0, "1306": 0, "1307": 0, "1308": 0, "1309": 0, "1310": 0, "1311": 0, "1313": 0, "1314": 0, "1343": 0, "1344": 0, "1345": 0, "1346": 0, "1347": 0, "1349": 0, "1350": 0, "1351": 0, "1352": 0, "1353": 0, "1354": 0, "1355": 0, "1356": 0, "1357": 0, "1358": 0, "1359": 0, "1360": 0, "1362": 0, "1363": 0, "1364": 0, "1365": 0, "1366": 0, "1367": 0, "1368": 0, "1369": 0, "1370": 0, "1389": 0, "1390": 0, "1391": 0, "1393": 0, "1394": 0, "1395": 0, "1396": 0, "1397": 0, "1398": 0, "1399": 0, "1400": 0, "1401": 0, "1402": 0, "1403": 0, "1404": 0, "1405": 0, "1406": 0, "1407": 0, "1408": 0, "1409": 0, "1410": 0, "1411": 0, "1413": 0, "1414": 0, "1415": 0, "1416": 0, "1417": 0, "1418": 0, "1419": 0, "1450": 0, "1451": 0, "1452": 0, "1453": 0, "1454": 0, "1455": 0, "1456": 0, "1457": 0, "1514": 0, "1515": 0, "1516": 0, "1517": 0, "1518": 0, "1519": 0, "1521": 0, "1522": 0, "1523": 0, "1524": 0, "1525": 0, "1526": 0, "1527": 0, "1528": 0, "1529": 0, "1530": 0, "1531": 0, "1532": 0, "1533": 0, "1534": 0, "1535": 0, "1536": 0, "1616": 0, "1617": 0, "1618": 0, "1619": 0, "1620": 0, "1621": 0, "1622": 0, "1623": 0, "1632": 0, "1633": 0, "1634": 0, "1635": 0, "1636": 0, "1637": 0, "1638": 0, "1640": 0, "1641": 0, "1643": 0, "1646": 0, "1647": 0, "1648": 0, "1649": 0, "1650": 0, "1651": 0, "1652": 0, "1653": 0, "1654": 0, "1655": 0, "1656": 0, "1657": 0, "1658": 0, "1660": 0, "1661": 0, "1662": 0, "1663": 0, "1664": 0, "1665": 0, "1666": 0, "1671": 0, "1673": 0, "1676": 0, "1677": 0, "1678": 0, "1679": 0, "1681": 0, "1682": 0, "1688": 0, "1689": 0, "1690": 0, "1691": 0, "1692": 0, "1693": 0, "1769": 5, "1770": 1, "1771": 2, "1772": 1, "1776": 0, "1777": 0, "1779": 0, "1780": 0, "1782": 1, "1783": 1, "1785": 0, "1787": 1, "1788": 0, "1789": 0, "1791": 0, "1792": 0, "1794": 1, "1796": 1, "1797": 1, "1798": 1, "1799": 1, "1800": 1, "1801": 0, "1802": 0, "1803": 1, "1804": 1, "1805": 0, "1807": 1, "1809": 4, "1811": 3, "1812": 2, "1813": 2, "1814": 2, "1816": 1, "1821": 3, "1822": 3, "1823": 3, "1824": 3, "1825": 1, "1826": 3, "1829": 3, "1830": 3, "1831": 3, "1832": 3, "1833": 0, "1834": 0, "1835": 0, "1837": 3, "1838": 3, "1839": 3, "1840": 0, "1841": 0, "1842": 0, "1843": 3, "1844": 3, "1845": 0, "1847": 3, "1928": 0, "1932": 0, "1933": 0, "1935": 0, "1940": 0, "1941": 0, "1942": 0, "1943": 0, "1944": 0, "1945": 0, "1946": 0, "1947": 0, "1948": 0, "1949": 0, "1950": 0, "1951": 0, "1952": 0, "1953": 0, "1954": 0, "1955": 0, "1956": 0, "1957": 0, "1958": 0, "1959": 0, "1960": 0, "1961": 0, "1962": 0, "1963": 0, "1966": 0, "1967": 0, "1968": 0, "1969": 0, "1970": 0, "1971": 0, "1972": 0, "1973": 0, "1974": 0, "1975": 0, "1976": 0, "1977": 0, "1979": 0, "1980": 0, "1981": 0, "1982": 0, "1983": 0, "2012": 0, "2013": 0, "2014": 0, "2015": 0, "2016": 0, "2017": 0, "2018": 0, "2019": 0, "2020": 0, "2022": 0, "2023": 0, "2024": 0, "2025": 0, "2026": 0, "2027": 0, "2028": 0, "2029": 0, "2030": 0, "2031": 0, "2032": 0, "2033": 0, "2034": 0, "2035": 0, "2036": 0, "2037": 0, "2038": 0, "2040": 0, "2041": 0, "2060": 0, "2061": 0, "2062": 0, "2063": 0, "2064": 0, "2065": 0, "2081": 0, "2082": 0, "2083": 0, "2085": 0, "2086": 0, "2087": 0, "2116": 0, "2117": 0, "2118": 0, "2119": 0, "2120": 0, "2126": 0, "2127": 0, "2128": 0, "2129": 0, "2130": 0, "2131": 0, "2132": 0, "2133": 0, "2134": 0, "2135": 0, "2136": 0, "2137": 0, "2138": 0, "2139": 0, "2141": 0, "2124": 0, "2125": 0, "2209": 0, "2210": 0, "2211": 0, "2212": 0, "2213": 0, "2214": 0, "2215": 0, "2216": 0, "2217": 0, "2218": 0, "2220": 0, "2221": 0, "2222": 0, "2224": 0, "2226": 0, "2227": 0, "2228": 0, "2229": 0, "2230": 0, "2231": 0, "2232": 0, "2234": 0, "2235": 0, "2236": 0, "2239": 0, "2240": 0, "2242": 0, "2243": 0, "2244": 0, "2246": 0, "2247": 0, "2248": 0, "2279": 0, "2280": 0, "2281": 0, "2282": 0, "2283": 0, "2285": 0, "2315": 0, "2316": 0, "2317": 0, "2361": 0, "2362": 0, "2367": 0, "2396": 0, "2398": 0, "2399": 0, "2400": 0, "2402": 0, "2403": 0, "2404": 0, "2405": 0, "2406": 0, "2407": 0, "2408": 0, "2409": 0, "2410": 0, "2411": 0, "2413": 0, "2448": 0, "2449": 0, "2450": 0, "2451": 0, "2452": 0, "2453": 0, "2454": 0, "2455": 0, "2456": 0, "2457": 0, "2458": 0, "2459": 0, "2460": 0, "2461": 0, "2462": 0, "2463": 0, "2465": 0, "2466": 0, "2467": 0, "2473": 0, "2474": 0, "2475": 0, "2476": 0, "2477": 0, "2481": 0, "2482": 0, "2483": 0, "2484": 0, "2485": 0, "2486": 0, "2487": 0, "2489": 0, "2490": 0, "2491": 0, "2509": 0, "2510": 0, "2511": 0, "2512": 0, "2513": 0, "2514": 0, "2516": 0, "2517": 0, "2518": 0, "2519": 0, "2520": 0, "2521": 0, "2522": 0, "2524": 0, "2525": 0, "2526": 0, "2527": 0, "2528": 0, "2614": 0, "2626": 0, "2627": 0, "2628": 0, "2629": 0, "2630": 0, "2631": 0, "2632": 0, "2633": 0, "2634": 0, "2635": 0, "2636": 0, "2637": 0, "2638": 0, "2639": 0, "2640": 0, "2641": 0, "2642": 0, "2643": 0, "2644": 0, "2645": 0, "2646": 0, "2647": 0, "2648": 0, "2649": 0, "2650": 0, "2651": 0, "2653": 0, "2654": 0, "2618": 0, "2619": 0, "2620": 0, "2621": 0, "2622": 0, "2623": 0, "2624": 0, "2668": 0, "2669": 0, "2670": 0, "2688": 0, "2689": 0, "2706": 0, "2707": 0, "2708": 0, "2709": 0, "2720": 0, "2722": 0, "2724": 0, "2725": 0, "2726": 0, "2727": 0, "2728": 0, "2729": 0, "2730": 0, "2731": 0}}
{"/testbed/sympy/utilities/iterables.py": {"1": 1, "2": 1, "6": 1, "7": 1, "9": 1, "12": 1, "16": 1, "20": 1, "56": 1, "120": 1, "129": 1, "189": 1, "234": 1, "261": 1, "302": 1, "325": 1, "382": 1, "475": 1, "547": 1, "592": 1, "642": 1, "666": 1, "705": 1, "735": 1, "822": 1, "827": 1, "837": 1, "863": 1, "893": 1, "912": 1, "931": 1, "1045": 1, "1168": 1, "1239": 1, "1258": 1, "1277": 1, "1317": 1, "1373": 1, "1422": 1, "1460": 1, "1539": 1, "1696": 1, "1850": 1, "1986": 1, "2044": 1, "2068": 1, "2090": 1, "2144": 1, "2251": 1, "2288": 1, "2320": 1, "2365": 1, "2370": 1, "2416": 1, "2494": 1, "2531": 1, "2657": 1, "2673": 1, "2692": 1, "2712": 1, "50": 0, "51": 0, "53": 0, "92": 0, "93": 0, "94": 0, "95": 0, "96": 0, "97": 0, "99": 0, "100": 0, "102": 0, "103": 0, "105": 0, "107": 0, "109": 0, "110": 0, "111": 0, "112": 0, "113": 0, "115": 0, "117": 0, "124": 0, "125": 0, "126": 0, "166": 0, "167": 0, "168": 0, "169": 0, "171": 0, "172": 0, "173": 0, "174": 0, "175": 0, "176": 0, "177": 0, "178": 0, "179": 0, "181": 0, "182": 0, "183": 0, "184": 0, "185": 0, "186": 0, "211": 0, "212": 0, "214": 0, "216": 0, "217": 0, "218": 0, "220": 0, "221": 0, "223": 0, "225": 0, "226": 0, "228": 0, "229": 0, "231": 0, "237": 0, "238": 0, "240": 0, "241": 0, "243": 0, "244": 0, "249": 0, "250": 0, "251": 0, "253": 0, "254": 0, "255": 0, "256": 0, "257": 0, "258": 0, "245": 0, "246": 0, "247": 0, "288": 0, "289": 0, "290": 0, "291": 0, "292": 0, "293": 0, "294": 0, "295": 0, "297": 0, "298": 0, "299": 0, "319": 0, "320": 0, "321": 0, "322": 0, "367": 0, "368": 0, "369": 0, "370": 0, "371": 0, "373": 0, "374": 0, "375": 0, "376": 0, "377": 0, "378": 0, "379": 0, "384": 0, "386": 0, "387": 0, "388": 0, "389": 0, "390": 0, "391": 0, "392": 0, "394": 0, "397": 0, "472": 0, "395": 0, "398": 0, "399": 0, "401": 0, "402": 0, "403": 0, "404": 0, "406": 0, "407": 0, "408": 0, "409": 0, "410": 0, "412": 0, "413": 0, "414": 0, "416": 0, "418": 0, "420": 0, "421": 0, "423": 0, "424": 0, "425": 0, "426": 0, "428": 0, "429": 0, "431": 0, "433": 0, "434": 0, "435": 0, "436": 0, "437": 0, "439": 0, "440": 0, "441": 0, "442": 0, "443": 0, "444": 0, "445": 0, "447": 0, "448": 0, "449": 0, "450": 0, "451": 0, "452": 0, "453": 0, "454": 0, "455": 0, "457": 0, "458": 0, "459": 0, "460": 0, "461": 0, "462": 0, "464": 0, "465": 0, "466": 0, "468": 0, "470": 0, "519": 0, "520": 0, "521": 0, "523": 0, "524": 0, "526": 0, "527": 0, "528": 0, "529": 0, "531": 0, "532": 0, "533": 0, "535": 0, "536": 0, "537": 0, "539": 0, "541": 0, "542": 0, "544": 0, "580": 0, "581": 0, "582": 0, "583": 0, "584": 0, "586": 0, "587": 0, "589": 0, "632": 0, "633": 0, "634": 0, "636": 0, "637": 0, "639": 0, "661": 0, "662": 0, "663": 0, "664": 0, "690": 0, "691": 0, "694": 0, "695": 0, "698": 0, "699": 0, "700": 0, "701": 0, "702": 0, "723": 0, "724": 0, "726": 0, "727": 0, "728": 0, "729": 0, "731": 0, "732": 0, "808": 153, "809": 0, "810": 0, "811": 0, "812": 0, "813": 153, "814": 401, "815": 248, "816": 248, "817": 0, "818": 0, "819": 153, "824": 0, "829": 0, "831": 0, "832": 0, "834": 0, "850": 0, "851": 0, "852": 0, "853": 0, "854": 0, "855": 0, "856": 0, "857": 0, "859": 0, "860": 0, "877": 0, "878": 0, "879": 0, "880": 0, "881": 0, "882": 0, "883": 0, "884": 0, "886": 0, "887": 0, "888": 0, "890": 0, "906": 0, "908": 0, "909": 0, "925": 0, "927": 0, "928": 0, "1002": 1, "1004": 1, "1005": 1, "1006": 1, "1008": 6, "1009": 5, "1011": 1, "1012": 52, "1014": 1, "1016": 26, "1017": 25, "1018": 25, "1020": 63, "1021": 38, "1022": 5, "1024": 7, "1025": 5, "1026": 3, "1028": 2, "1030": 28, "1031": 26, "1033": 26, "1034": 0, "1035": 0, "1037": 2, "1039": 1, "1040": 0, "1042": 1, "1117": 0, "1118": 0, "1119": 0, "1120": 0, "1123": 0, "1124": 0, "1125": 0, "1126": 0, "1127": 0, "1128": 0, "1130": 0, "1136": 0, "1148": 0, "1149": 0, "1150": 0, "1151": 0, "1152": 0, "1153": 0, "1154": 0, "1156": 0, "1157": 0, "1159": 0, "1160": 0, "1161": 0, "1162": 0, "1165": 0, "1131": 0, "1132": 0, "1133": 0, "1134": 0, "1138": 0, "1139": 0, "1140": 0, "1141": 0, "1142": 0, "1143": 0, "1144": 0, "1145": 0, "1146": 0, "1232": 0, "1233": 0, "1234": 0, "1235": 0, "1236": 0, "1252": 0, "1253": 0, "1254": 0, "1255": 0, "1271": 0, "1272": 0, "1273": 0, "1274": 0, "1298": 0, "1299": 0, "1300": 0, "1301": 0, "1302": 0, "1303": 0, "1304": 0, "1305": 0, "1306": 0, "1307": 0, "1308": 0, "1309": 0, "1310": 0, "1311": 0, "1313": 0, "1314": 0, "1343": 0, "1344": 0, "1345": 0, "1346": 0, "1347": 0, "1349": 0, "1350": 0, "1351": 0, "1352": 0, "1353": 0, "1354": 0, "1355": 0, "1356": 0, "1357": 0, "1358": 0, "1359": 0, "1360": 0, "1362": 0, "1363": 0, "1364": 0, "1365": 0, "1366": 0, "1367": 0, "1368": 0, "1369": 0, "1370": 0, "1389": 0, "1390": 0, "1391": 0, "1393": 0, "1394": 0, "1395": 0, "1396": 0, "1397": 0, "1398": 0, "1399": 0, "1400": 0, "1401": 0, "1402": 0, "1403": 0, "1404": 0, "1405": 0, "1406": 0, "1407": 0, "1408": 0, "1409": 0, "1410": 0, "1411": 0, "1413": 0, "1414": 0, "1415": 0, "1416": 0, "1417": 0, "1418": 0, "1419": 0, "1450": 0, "1451": 0, "1452": 0, "1453": 0, "1454": 0, "1455": 0, "1456": 0, "1457": 0, "1514": 0, "1515": 0, "1516": 0, "1517": 0, "1518": 0, "1519": 0, "1521": 0, "1522": 0, "1523": 0, "1524": 0, "1525": 0, "1526": 0, "1527": 0, "1528": 0, "1529": 0, "1530": 0, "1531": 0, "1532": 0, "1533": 0, "1534": 0, "1535": 0, "1536": 0, "1616": 0, "1617": 0, "1618": 0, "1619": 0, "1620": 0, "1621": 0, "1622": 0, "1623": 0, "1632": 0, "1633": 0, "1634": 0, "1635": 0, "1636": 0, "1637": 0, "1638": 0, "1640": 0, "1641": 0, "1643": 0, "1646": 0, "1647": 0, "1648": 0, "1649": 0, "1650": 0, "1651": 0, "1652": 0, "1653": 0, "1654": 0, "1655": 0, "1656": 0, "1657": 0, "1658": 0, "1660": 0, "1661": 0, "1662": 0, "1663": 0, "1664": 0, "1665": 0, "1666": 0, "1671": 0, "1673": 0, "1676": 0, "1677": 0, "1678": 0, "1679": 0, "1681": 0, "1682": 0, "1688": 0, "1689": 0, "1690": 0, "1691": 0, "1692": 0, "1693": 0, "1769": 0, "1770": 0, "1771": 0, "1772": 0, "1776": 0, "1777": 0, "1779": 0, "1780": 0, "1782": 0, "1783": 0, "1785": 0, "1787": 0, "1788": 0, "1789": 0, "1791": 0, "1792": 0, "1794": 0, "1796": 0, "1797": 0, "1798": 0, "1799": 0, "1800": 0, "1801": 0, "1802": 0, "1803": 0, "1804": 0, "1805": 0, "1807": 0, "1809": 0, "1811": 0, "1812": 0, "1813": 0, "1814": 0, "1816": 0, "1821": 0, "1822": 0, "1823": 0, "1824": 0, "1825": 0, "1826": 0, "1829": 0, "1830": 0, "1831": 0, "1832": 0, "1833": 0, "1834": 0, "1835": 0, "1837": 0, "1838": 0, "1839": 0, "1840": 0, "1841": 0, "1842": 0, "1843": 0, "1844": 0, "1845": 0, "1847": 0, "1928": 0, "1932": 0, "1933": 0, "1935": 0, "1940": 0, "1941": 0, "1942": 0, "1943": 0, "1944": 0, "1945": 0, "1946": 0, "1947": 0, "1948": 0, "1949": 0, "1950": 0, "1951": 0, "1952": 0, "1953": 0, "1954": 0, "1955": 0, "1956": 0, "1957": 0, "1958": 0, "1959": 0, "1960": 0, "1961": 0, "1962": 0, "1963": 0, "1966": 0, "1967": 0, "1968": 0, "1969": 0, "1970": 0, "1971": 0, "1972": 0, "1973": 0, "1974": 0, "1975": 0, "1976": 0, "1977": 0, "1979": 0, "1980": 0, "1981": 0, "1982": 0, "1983": 0, "2012": 0, "2013": 0, "2014": 0, "2015": 0, "2016": 0, "2017": 0, "2018": 0, "2019": 0, "2020": 0, "2022": 0, "2023": 0, "2024": 0, "2025": 0, "2026": 0, "2027": 0, "2028": 0, "2029": 0, "2030": 0, "2031": 0, "2032": 0, "2033": 0, "2034": 0, "2035": 0, "2036": 0, "2037": 0, "2038": 0, "2040": 0, "2041": 0, "2060": 0, "2061": 0, "2062": 0, "2063": 0, "2064": 0, "2065": 0, "2081": 0, "2082": 0, "2083": 0, "2085": 0, "2086": 0, "2087": 0, "2116": 0, "2117": 0, "2118": 0, "2119": 0, "2120": 0, "2126": 0, "2127": 0, "2128": 0, "2129": 0, "2130": 0, "2131": 0, "2132": 0, "2133": 0, "2134": 0, "2135": 0, "2136": 0, "2137": 0, "2138": 0, "2139": 0, "2141": 0, "2124": 0, "2125": 0, "2209": 0, "2210": 0, "2211": 0, "2212": 0, "2213": 0, "2214": 0, "2215": 0, "2216": 0, "2217": 0, "2218": 0, "2220": 0, "2221": 0, "2222": 0, "2224": 0, "2226": 0, "2227": 0, "2228": 0, "2229": 0, "2230": 0, "2231": 0, "2232": 0, "2234": 0, "2235": 0, "2236": 0, "2239": 0, "2240": 0, "2242": 0, "2243": 0, "2244": 0, "2246": 0, "2247": 0, "2248": 0, "2279": 0, "2280": 0, "2281": 0, "2282": 0, "2283": 0, "2285": 0, "2315": 0, "2316": 0, "2317": 0, "2361": 0, "2362": 0, "2367": 0, "2396": 0, "2398": 0, "2399": 0, "2400": 0, "2402": 0, "2403": 0, "2404": 0, "2405": 0, "2406": 0, "2407": 0, "2408": 0, "2409": 0, "2410": 0, "2411": 0, "2413": 0, "2448": 0, "2449": 0, "2450": 0, "2451": 0, "2452": 0, "2453": 0, "2454": 0, "2455": 0, "2456": 0, "2457": 0, "2458": 0, "2459": 0, "2460": 0, "2461": 0, "2462": 0, "2463": 0, "2465": 0, "2466": 0, "2467": 0, "2473": 0, "2474": 0, "2475": 0, "2476": 0, "2477": 0, "2481": 0, "2482": 0, "2483": 0, "2484": 0, "2485": 0, "2486": 0, "2487": 0, "2489": 0, "2490": 0, "2491": 0, "2509": 0, "2510": 0, "2511": 0, "2512": 0, "2513": 0, "2514": 0, "2516": 0, "2517": 0, "2518": 0, "2519": 0, "2520": 0, "2521": 0, "2522": 0, "2524": 0, "2525": 0, "2526": 0, "2527": 0, "2528": 0, "2614": 0, "2626": 0, "2627": 0, "2628": 0, "2629": 0, "2630": 0, "2631": 0, "2632": 0, "2633": 0, "2634": 0, "2635": 0, "2636": 0, "2637": 0, "2638": 0, "2639": 0, "2640": 0, "2641": 0, "2642": 0, "2643": 0, "2644": 0, "2645": 0, "2646": 0, "2647": 0, "2648": 0, "2649": 0, "2650": 0, "2651": 0, "2653": 0, "2654": 0, "2618": 0, "2619": 0, "2620": 0, "2621": 0, "2622": 0, "2623": 0, "2624": 0, "2668": 0, "2669": 0, "2670": 0, "2688": 0, "2689": 0, "2706": 0, "2707": 0, "2708": 0, "2709": 0, "2720": 0, "2722": 0, "2724": 0, "2725": 0, "2726": 0, "2727": 0, "2728": 0, "2729": 0, "2730": 0, "2731": 0}}
+ git checkout bdb49c4abfb35554a3c8ce761696ffff3bb837fe
Note: switching to 'bdb49c4abfb35554a3c8ce761696ffff3bb837fe'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at bdb49c4abf Merge pull request #20134 from ehren/lambdify-integral
+ git apply /root/pre_state.patch
error: unrecognized input
