+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD 53d8646f799de7f92ab9defe9dc56c6125448102
+ sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen
+ locale-gen
Generating locales (this might take a while)...
  en_US.UTF-8... done
Generation complete.
+ export LANG=en_US.UTF-8
+ LANG=en_US.UTF-8
+ export LANGUAGE=en_US:en
+ LANGUAGE=en_US:en
+ export LC_ALL=en_US.UTF-8
+ LC_ALL=en_US.UTF-8
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
nothing to commit, working tree clean
+ git show
commit 53d8646f799de7f92ab9defe9dc56c6125448102
Author: Mariusz Felisiak <felisiak.mariusz@gmail.com>
Date:   Wed Jan 8 08:05:43 2020 +0100

    Fixed #31141 -- Relaxed system check of translation settings for sublanguages.
    
    Regression in 4400d8296d268f5a8523cd02ddc33b12219b2535.
    
    Thanks Enrique Matías Sánchez for the report.

diff --git a/django/core/checks/translation.py b/django/core/checks/translation.py
index 138ed07ff8..8457a6b89d 100644
--- a/django/core/checks/translation.py
+++ b/django/core/checks/translation.py
@@ -1,4 +1,5 @@
 from django.conf import settings
+from django.utils.translation import get_supported_language_variant
 from django.utils.translation.trans_real import language_code_re
 
 from . import Error, Tags, register
@@ -55,7 +56,9 @@ def check_setting_languages_bidi(app_configs, **kwargs):
 @register(Tags.translation)
 def check_language_settings_consistent(app_configs, **kwargs):
     """Error if language settings are not consistent with each other."""
-    available_tags = {i for i, _ in settings.LANGUAGES} | {'en-us'}
-    if settings.LANGUAGE_CODE not in available_tags:
+    try:
+        get_supported_language_variant(settings.LANGUAGE_CODE)
+    except LookupError:
         return [E004]
-    return []
+    else:
+        return []
diff --git a/docs/releases/3.0.3.txt b/docs/releases/3.0.3.txt
index 61ef456d93..27ace475d1 100644
--- a/docs/releases/3.0.3.txt
+++ b/docs/releases/3.0.3.txt
@@ -16,3 +16,7 @@ Bugfixes
 * Fixed a regression in Django 3.0 where ``QuerySet.values()`` and
   ``values_list()`` crashed if a queryset contained an aggregation and
   ``Exists()`` annotation (:ticket:`31136`).
+
+* Relaxed the system check added in Django 3.0 to reallow use of a sublanguage
+  in the :setting:`LANGUAGE_CODE` setting, when a base language is available in
+  Django but the sublanguage is not (:ticket:`31141`).
diff --git a/tests/check_framework/test_translation.py b/tests/check_framework/test_translation.py
index 4cd79d803f..8747a52cda 100644
--- a/tests/check_framework/test_translation.py
+++ b/tests/check_framework/test_translation.py
@@ -3,7 +3,7 @@ from django.core.checks.translation import (
     check_language_settings_consistent, check_setting_language_code,
     check_setting_languages, check_setting_languages_bidi,
 )
-from django.test import SimpleTestCase
+from django.test import SimpleTestCase, override_settings
 
 
 class TranslationCheckTests(SimpleTestCase):
@@ -75,12 +75,36 @@ class TranslationCheckTests(SimpleTestCase):
                     Error(msg % tag, id='translation.E003'),
                 ])
 
+    @override_settings(USE_I18N=True, LANGUAGES=[('en', 'English')])
     def test_inconsistent_language_settings(self):
         msg = (
             'You have provided a value for the LANGUAGE_CODE setting that is '
             'not in the LANGUAGES setting.'
         )
-        with self.settings(LANGUAGE_CODE='fr', LANGUAGES=[('en', 'English')]):
-            self.assertEqual(check_language_settings_consistent(None), [
-                Error(msg, id='translation.E004'),
-            ])
+        for tag in ['fr', 'fr-CA', 'fr-357']:
+            with self.subTest(tag), self.settings(LANGUAGE_CODE=tag):
+                self.assertEqual(check_language_settings_consistent(None), [
+                    Error(msg, id='translation.E004'),
+                ])
+
+    @override_settings(
+        USE_I18N=True,
+        LANGUAGES=[
+            ('de', 'German'),
+            ('es', 'Spanish'),
+            ('fr', 'French'),
+            ('ca', 'Catalan'),
+        ],
+    )
+    def test_valid_variant_consistent_language_settings(self):
+        tests = [
+            # language + region.
+            'fr-CA',
+            'es-419',
+            'de-at',
+            # language + region + variant.
+            'ca-ES-valencia',
+        ]
+        for tag in tests:
+            with self.subTest(tag), self.settings(LANGUAGE_CODE=tag):
+                self.assertEqual(check_language_settings_consistent(None), [])
+ git diff 53d8646f799de7f92ab9defe9dc56c6125448102
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
Requirement already satisfied: asgiref>=3.2 in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.1) (3.4.1)
Requirement already satisfied: pytz in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.1) (2025.2)
Requirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.1) (0.4.4)
Requirement already satisfied: typing-extensions in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from asgiref>=3.2->Django==3.1) (4.1.1)
Installing collected packages: Django
  Attempting uninstall: Django
    Found existing installation: Django 3.1
    Uninstalling Django-3.1:
      Successfully uninstalled Django-3.1
  Running setup.py develop for Django
Successfully installed Django-3.1
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv
+ git apply -v -
Checking patch tests/test_coverup_django__django-12276.py...
Applied patch tests/test_coverup_django__django-12276.py cleanly.
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/forms/widgets\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-12276
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(django/forms/widgets\\.py)']
0.18 widgets.py(3): """
0.18 widgets.py(5): import copy
0.18 widgets.py(6): import datetime
0.18 widgets.py(7): import warnings
0.18 widgets.py(8): from collections import defaultdict
0.18 widgets.py(9): from itertools import chain
0.18 widgets.py(11): from django.conf import settings
0.18 widgets.py(12): from django.forms.utils import to_current_timezone
0.18 widgets.py(13): from django.templatetags.static import static
0.19 widgets.py(14): from django.utils import datetime_safe, formats
0.19 widgets.py(15): from django.utils.datastructures import OrderedSet
0.19 widgets.py(16): from django.utils.dates import MONTHS
0.19 widgets.py(17): from django.utils.formats import get_format
0.19 widgets.py(18): from django.utils.html import format_html, html_safe
0.19 widgets.py(19): from django.utils.regex_helper import _lazy_re_compile
0.19 widgets.py(20): from django.utils.safestring import mark_safe
0.19 widgets.py(21): from django.utils.topological_sort import (
0.19 widgets.py(24): from django.utils.translation import gettext_lazy as _
0.19 widgets.py(26): from .renderers import get_default_renderer
0.25 widgets.py(35):     'SplitHiddenDateTimeWidget', 'SelectDateWidget',
0.25 widgets.py(38): MEDIA_TYPES = ('css', 'js')
0.25 widgets.py(41): class MediaOrderConflictWarning(RuntimeWarning):
0.25 widgets.py(41): class MediaOrderConflictWarning(RuntimeWarning):
0.25 widgets.py(42):     pass
0.25 widgets.py(45): @html_safe
0.25 widgets.py(45): @html_safe
0.25 widgets.py(47):     def __init__(self, media=None, css=None, js=None):
0.25 widgets.py(59):     def __repr__(self):
0.25 widgets.py(62):     def __str__(self):
0.25 widgets.py(65):     @property
0.25 widgets.py(73):     @property
0.25 widgets.py(77):     def render(self):
0.25 widgets.py(80):     def render_js(self):
0.25 widgets.py(88):     def render_css(self):
0.25 widgets.py(99):     def absolute_path(self, path):
0.25 widgets.py(109):     def __getitem__(self, name):
0.25 widgets.py(115):     @staticmethod
0.25 widgets.py(148):     def __add__(self, other):
0.25 widgets.py(155): def media_property(cls):
0.25 widgets.py(181): class MediaDefiningClass(type):
0.25 widgets.py(181): class MediaDefiningClass(type):
0.25 widgets.py(184):     """
0.25 widgets.py(185):     def __new__(mcs, name, bases, attrs):
0.25 widgets.py(194): class Widget(metaclass=MediaDefiningClass):
0.25 widgets.py(194): class Widget(metaclass=MediaDefiningClass):
0.25 widgets.py(195):     needs_multipart_form = False  # Determines does this widget need multipart form
0.25 widgets.py(196):     is_localized = False
0.25 widgets.py(197):     is_required = False
0.25 widgets.py(198):     supports_microseconds = True
0.25 widgets.py(200):     def __init__(self, attrs=None):
0.25 widgets.py(203):     def __deepcopy__(self, memo):
0.25 widgets.py(209):     @property
0.25 widgets.py(213):     def subwidgets(self, name, value, attrs=None):
0.25 widgets.py(217):     def format_value(self, value):
0.25 widgets.py(227):     def get_context(self, name, value, attrs):
0.25 widgets.py(239):     def render(self, name, value, attrs=None, renderer=None):
0.25 widgets.py(244):     def _render(self, template_name, context, renderer=None):
0.25 widgets.py(249):     def build_attrs(self, base_attrs, extra_attrs=None):
0.25 widgets.py(253):     def value_from_datadict(self, data, files, name):
0.25 widgets.py(260):     def value_omitted_from_data(self, data, files, name):
0.25 widgets.py(263):     def id_for_label(self, id_):
0.25 widgets.py(275):     def use_required_attribute(self, initial):
0.25 widgets.py(186):         new_class = super().__new__(mcs, name, bases, attrs)
0.25 widgets.py(188):         if 'media' not in attrs:
0.25 widgets.py(189):             new_class.media = media_property(new_class)
0.25 widgets.py(156):     def _media(self):
0.25 widgets.py(178):     return property(_media)
0.25 widgets.py(191):         return new_class
0.25 widgets.py(279): class Input(Widget):
0.25 widgets.py(279): class Input(Widget):
0.25 widgets.py(282):     """
0.25 widgets.py(283):     input_type = None  # Subclasses must define this.
0.25 widgets.py(284):     template_name = 'django/forms/widgets/input.html'
0.25 widgets.py(286):     def __init__(self, attrs=None):
0.25 widgets.py(292):     def get_context(self, name, value, attrs):
0.25 widgets.py(186):         new_class = super().__new__(mcs, name, bases, attrs)
0.25 widgets.py(188):         if 'media' not in attrs:
0.25 widgets.py(189):             new_class.media = media_property(new_class)
0.25 widgets.py(156):     def _media(self):
0.25 widgets.py(178):     return property(_media)
0.25 widgets.py(191):         return new_class
0.25 widgets.py(298): class TextInput(Input):
0.25 widgets.py(298): class TextInput(Input):
0.25 widgets.py(299):     input_type = 'text'
0.25 widgets.py(300):     template_name = 'django/forms/widgets/text.html'
0.25 widgets.py(186):         new_class = super().__new__(mcs, name, bases, attrs)
0.25 widgets.py(188):         if 'media' not in attrs:
0.25 widgets.py(189):             new_class.media = media_property(new_class)
0.25 widgets.py(156):     def _media(self):
0.25 widgets.py(178):     return property(_media)
0.25 widgets.py(191):         return new_class
0.25 widgets.py(303): class NumberInput(Input):
0.25 widgets.py(303): class NumberInput(Input):
0.25 widgets.py(304):     input_type = 'number'
0.25 widgets.py(305):     template_name = 'django/forms/widgets/number.html'
0.25 widgets.py(186):         new_class = super().__new__(mcs, name, bases, attrs)
0.25 widgets.py(188):         if 'media' not in attrs:
0.25 widgets.py(189):             new_class.media = media_property(new_class)
0.25 widgets.py(156):     def _media(self):
0.25 widgets.py(178):     return property(_media)
0.25 widgets.py(191):         return new_class
0.25 widgets.py(308): class EmailInput(Input):
0.25 widgets.py(308): class EmailInput(Input):
0.25 widgets.py(309):     input_type = 'email'
0.25 widgets.py(310):     template_name = 'django/forms/widgets/email.html'
0.25 widgets.py(186):         new_class = super().__new__(mcs, name, bases, attrs)
0.25 widgets.py(188):         if 'media' not in attrs:
0.25 widgets.py(189):             new_class.media = media_property(new_class)
0.25 widgets.py(156):     def _media(self):
0.25 widgets.py(178):     return property(_media)
0.25 widgets.py(191):         return new_class
0.25 widgets.py(313): class URLInput(Input):
0.25 widgets.py(313): class URLInput(Input):
0.25 widgets.py(314):     input_type = 'url'
0.25 widgets.py(315):     template_name = 'django/forms/widgets/url.html'
0.25 widgets.py(186):         new_class = super().__new__(mcs, name, bases, attrs)
0.25 widgets.py(188):         if 'media' not in attrs:
0.25 widgets.py(189):             new_class.media = media_property(new_class)
0.25 widgets.py(156):     def _media(self):
0.25 widgets.py(178):     return property(_media)
0.25 widgets.py(191):         return new_class
0.25 widgets.py(318): class PasswordInput(Input):
0.25 widgets.py(318): class PasswordInput(Input):
0.25 widgets.py(319):     input_type = 'password'
0.25 widgets.py(320):     template_name = 'django/forms/widgets/password.html'
0.25 widgets.py(322):     def __init__(self, attrs=None, render_value=False):
0.25 widgets.py(326):     def get_context(self, name, value, attrs):
0.25 widgets.py(186):         new_class = super().__new__(mcs, name, bases, attrs)
0.25 widgets.py(188):         if 'media' not in attrs:
0.25 widgets.py(189):             new_class.media = media_property(new_class)
0.25 widgets.py(156):     def _media(self):
0.25 widgets.py(178):     return property(_media)
0.25 widgets.py(191):         return new_class
0.25 widgets.py(332): class HiddenInput(Input):
0.25 widgets.py(332): class HiddenInput(Input):
0.25 widgets.py(333):     input_type = 'hidden'
0.25 widgets.py(334):     template_name = 'django/forms/widgets/hidden.html'
0.25 widgets.py(186):         new_class = super().__new__(mcs, name, bases, attrs)
0.25 widgets.py(188):         if 'media' not in attrs:
0.25 widgets.py(189):             new_class.media = media_property(new_class)
0.25 widgets.py(156):     def _media(self):
0.25 widgets.py(178):     return property(_media)
0.25 widgets.py(191):         return new_class
0.25 widgets.py(337): class MultipleHiddenInput(HiddenInput):
0.25 widgets.py(337): class MultipleHiddenInput(HiddenInput):
0.25 widgets.py(341):     """
0.25 widgets.py(342):     template_name = 'django/forms/widgets/multiple_hidden.html'
0.25 widgets.py(344):     def get_context(self, name, value, attrs):
0.25 widgets.py(363):     def value_from_datadict(self, data, files, name):
0.25 widgets.py(370):     def format_value(self, value):
0.25 widgets.py(186):         new_class = super().__new__(mcs, name, bases, attrs)
0.25 widgets.py(188):         if 'media' not in attrs:
0.25 widgets.py(189):             new_class.media = media_property(new_class)
0.25 widgets.py(156):     def _media(self):
0.25 widgets.py(178):     return property(_media)
0.25 widgets.py(191):         return new_class
0.25 widgets.py(374): class FileInput(Input):
0.25 widgets.py(374): class FileInput(Input):
0.25 widgets.py(375):     input_type = 'file'
0.25 widgets.py(376):     needs_multipart_form = True
0.25 widgets.py(377):     template_name = 'django/forms/widgets/file.html'
0.25 widgets.py(379):     def format_value(self, value):
0.25 widgets.py(383):     def value_from_datadict(self, data, files, name):
0.25 widgets.py(387):     def value_omitted_from_data(self, data, files, name):
0.25 widgets.py(186):         new_class = super().__new__(mcs, name, bases, attrs)
0.25 widgets.py(188):         if 'media' not in attrs:
0.25 widgets.py(189):             new_class.media = media_property(new_class)
0.25 widgets.py(156):     def _media(self):
0.25 widgets.py(178):     return property(_media)
0.25 widgets.py(191):         return new_class
0.25 widgets.py(391): FILE_INPUT_CONTRADICTION = object()
0.25 widgets.py(394): class ClearableFileInput(FileInput):
0.25 widgets.py(394): class ClearableFileInput(FileInput):
0.25 widgets.py(395):     clear_checkbox_label = _('Clear')
0.25 widgets.py(396):     initial_text = _('Currently')
0.25 widgets.py(397):     input_text = _('Change')
0.25 widgets.py(398):     template_name = 'django/forms/widgets/clearable_file_input.html'
0.25 widgets.py(400):     def clear_checkbox_name(self, name):
0.25 widgets.py(407):     def clear_checkbox_id(self, name):
0.25 widgets.py(413):     def is_initial(self, value):
0.25 widgets.py(419):     def format_value(self, value):
0.25 widgets.py(426):     def get_context(self, name, value, attrs):
0.25 widgets.py(440):     def value_from_datadict(self, data, files, name):
0.25 widgets.py(454):     def use_required_attribute(self, initial):
0.25 widgets.py(457):     def value_omitted_from_data(self, data, files, name):
0.25 widgets.py(186):         new_class = super().__new__(mcs, name, bases, attrs)
0.25 widgets.py(188):         if 'media' not in attrs:
0.25 widgets.py(189):             new_class.media = media_property(new_class)
0.25 widgets.py(156):     def _media(self):
0.25 widgets.py(178):     return property(_media)
0.25 widgets.py(191):         return new_class
0.25 widgets.py(464): class Textarea(Widget):
0.25 widgets.py(464): class Textarea(Widget):
0.25 widgets.py(465):     template_name = 'django/forms/widgets/textarea.html'
0.25 widgets.py(467):     def __init__(self, attrs=None):
0.25 widgets.py(186):         new_class = super().__new__(mcs, name, bases, attrs)
0.25 widgets.py(188):         if 'media' not in attrs:
0.25 widgets.py(189):             new_class.media = media_property(new_class)
0.25 widgets.py(156):     def _media(self):
0.25 widgets.py(178):     return property(_media)
0.25 widgets.py(191):         return new_class
0.25 widgets.py(475): class DateTimeBaseInput(TextInput):
0.25 widgets.py(475): class DateTimeBaseInput(TextInput):
0.25 widgets.py(476):     format_key = ''
0.25 widgets.py(477):     supports_microseconds = False
0.25 widgets.py(479):     def __init__(self, attrs=None, format=None):
0.25 widgets.py(483):     def format_value(self, value):
0.25 widgets.py(186):         new_class = super().__new__(mcs, name, bases, attrs)
0.25 widgets.py(188):         if 'media' not in attrs:
0.25 widgets.py(189):             new_class.media = media_property(new_class)
0.25 widgets.py(156):     def _media(self):
0.25 widgets.py(178):     return property(_media)
0.25 widgets.py(191):         return new_class
0.25 widgets.py(487): class DateInput(DateTimeBaseInput):
0.25 widgets.py(487): class DateInput(DateTimeBaseInput):
0.25 widgets.py(488):     format_key = 'DATE_INPUT_FORMATS'
0.25 widgets.py(489):     template_name = 'django/forms/widgets/date.html'
0.25 widgets.py(186):         new_class = super().__new__(mcs, name, bases, attrs)
0.25 widgets.py(188):         if 'media' not in attrs:
0.25 widgets.py(189):             new_class.media = media_property(new_class)
0.25 widgets.py(156):     def _media(self):
0.25 widgets.py(178):     return property(_media)
0.25 widgets.py(191):         return new_class
0.25 widgets.py(492): class DateTimeInput(DateTimeBaseInput):
0.25 widgets.py(492): class DateTimeInput(DateTimeBaseInput):
0.25 widgets.py(493):     format_key = 'DATETIME_INPUT_FORMATS'
0.25 widgets.py(494):     template_name = 'django/forms/widgets/datetime.html'
0.25 widgets.py(186):         new_class = super().__new__(mcs, name, bases, attrs)
0.25 widgets.py(188):         if 'media' not in attrs:
0.25 widgets.py(189):             new_class.media = media_property(new_class)
0.25 widgets.py(156):     def _media(self):
0.25 widgets.py(178):     return property(_media)
0.25 widgets.py(191):         return new_class
0.25 widgets.py(497): class TimeInput(DateTimeBaseInput):
0.25 widgets.py(497): class TimeInput(DateTimeBaseInput):
0.25 widgets.py(498):     format_key = 'TIME_INPUT_FORMATS'
0.25 widgets.py(499):     template_name = 'django/forms/widgets/time.html'
0.25 widgets.py(186):         new_class = super().__new__(mcs, name, bases, attrs)
0.25 widgets.py(188):         if 'media' not in attrs:
0.25 widgets.py(189):             new_class.media = media_property(new_class)
0.25 widgets.py(156):     def _media(self):
0.25 widgets.py(178):     return property(_media)
0.25 widgets.py(191):         return new_class
0.25 widgets.py(503): def boolean_check(v):
0.25 widgets.py(507): class CheckboxInput(Input):
0.25 widgets.py(507): class CheckboxInput(Input):
0.25 widgets.py(508):     input_type = 'checkbox'
0.25 widgets.py(509):     template_name = 'django/forms/widgets/checkbox.html'
0.25 widgets.py(511):     def __init__(self, attrs=None, check_test=None):
0.25 widgets.py(517):     def format_value(self, value):
0.25 widgets.py(523):     def get_context(self, name, value, attrs):
0.25 widgets.py(528):     def value_from_datadict(self, data, files, name):
0.25 widgets.py(540):     def value_omitted_from_data(self, data, files, name):
0.25 widgets.py(186):         new_class = super().__new__(mcs, name, bases, attrs)
0.25 widgets.py(188):         if 'media' not in attrs:
0.25 widgets.py(189):             new_class.media = media_property(new_class)
0.25 widgets.py(156):     def _media(self):
0.25 widgets.py(178):     return property(_media)
0.25 widgets.py(191):         return new_class
0.25 widgets.py(546): class ChoiceWidget(Widget):
0.25 widgets.py(546): class ChoiceWidget(Widget):
0.25 widgets.py(547):     allow_multiple_selected = False
0.25 widgets.py(548):     input_type = None
0.25 widgets.py(549):     template_name = None
0.25 widgets.py(550):     option_template_name = None
0.25 widgets.py(551):     add_id_index = True
0.25 widgets.py(552):     checked_attribute = {'checked': True}
0.25 widgets.py(553):     option_inherits_attrs = True
0.25 widgets.py(555):     def __init__(self, attrs=None, choices=()):
0.25 widgets.py(562):     def __deepcopy__(self, memo):
0.25 widgets.py(569):     def subwidgets(self, name, value, attrs=None):
0.25 widgets.py(577):     def options(self, name, value, attrs=None):
0.25 widgets.py(582):     def optgroups(self, name, value, attrs=None):
0.25 widgets.py(616):     def create_option(self, name, value, label, selected, index, subindex=None, attrs=None):
0.25 widgets.py(637):     def get_context(self, name, value, attrs):
0.25 widgets.py(642):     def id_for_label(self, id_, index='0'):
0.25 widgets.py(651):     def value_from_datadict(self, data, files, name):
0.25 widgets.py(660):     def format_value(self, value):
0.25 widgets.py(186):         new_class = super().__new__(mcs, name, bases, attrs)
0.25 widgets.py(188):         if 'media' not in attrs:
0.25 widgets.py(189):             new_class.media = media_property(new_class)
0.25 widgets.py(156):     def _media(self):
0.25 widgets.py(178):     return property(_media)
0.25 widgets.py(191):         return new_class
0.25 widgets.py(669): class Select(ChoiceWidget):
0.25 widgets.py(669): class Select(ChoiceWidget):
0.25 widgets.py(670):     input_type = 'select'
0.25 widgets.py(671):     template_name = 'django/forms/widgets/select.html'
0.25 widgets.py(672):     option_template_name = 'django/forms/widgets/select_option.html'
0.25 widgets.py(673):     add_id_index = False
0.25 widgets.py(674):     checked_attribute = {'selected': True}
0.25 widgets.py(675):     option_inherits_attrs = False
0.25 widgets.py(677):     def get_context(self, name, value, attrs):
0.25 widgets.py(683):     @staticmethod
0.25 widgets.py(689):     def use_required_attribute(self, initial):
0.25 widgets.py(186):         new_class = super().__new__(mcs, name, bases, attrs)
0.25 widgets.py(188):         if 'media' not in attrs:
0.25 widgets.py(189):             new_class.media = media_property(new_class)
0.25 widgets.py(156):     def _media(self):
0.25 widgets.py(178):     return property(_media)
0.25 widgets.py(191):         return new_class
0.25 widgets.py(703): class NullBooleanSelect(Select):
0.25 widgets.py(703): class NullBooleanSelect(Select):
0.25 widgets.py(706):     """
0.25 widgets.py(707):     def __init__(self, attrs=None):
0.25 widgets.py(715):     def format_value(self, value):
0.25 widgets.py(726):     def value_from_datadict(self, data, files, name):
0.25 widgets.py(186):         new_class = super().__new__(mcs, name, bases, attrs)
0.25 widgets.py(188):         if 'media' not in attrs:
0.25 widgets.py(189):             new_class.media = media_property(new_class)
0.25 widgets.py(156):     def _media(self):
0.25 widgets.py(178):     return property(_media)
0.25 widgets.py(191):         return new_class
0.25 widgets.py(741): class SelectMultiple(Select):
0.25 widgets.py(741): class SelectMultiple(Select):
0.25 widgets.py(742):     allow_multiple_selected = True
0.25 widgets.py(744):     def value_from_datadict(self, data, files, name):
0.25 widgets.py(751):     def value_omitted_from_data(self, data, files, name):
0.25 widgets.py(186):         new_class = super().__new__(mcs, name, bases, attrs)
0.25 widgets.py(188):         if 'media' not in attrs:
0.25 widgets.py(189):             new_class.media = media_property(new_class)
0.25 widgets.py(156):     def _media(self):
0.25 widgets.py(178):     return property(_media)
0.25 widgets.py(191):         return new_class
0.25 widgets.py(757): class RadioSelect(ChoiceWidget):
0.25 widgets.py(757): class RadioSelect(ChoiceWidget):
0.25 widgets.py(758):     input_type = 'radio'
0.25 widgets.py(759):     template_name = 'django/forms/widgets/radio.html'
0.25 widgets.py(760):     option_template_name = 'django/forms/widgets/radio_option.html'
0.25 widgets.py(186):         new_class = super().__new__(mcs, name, bases, attrs)
0.25 widgets.py(188):         if 'media' not in attrs:
0.25 widgets.py(189):             new_class.media = media_property(new_class)
0.25 widgets.py(156):     def _media(self):
0.25 widgets.py(178):     return property(_media)
0.25 widgets.py(191):         return new_class
0.25 widgets.py(763): class CheckboxSelectMultiple(ChoiceWidget):
0.25 widgets.py(763): class CheckboxSelectMultiple(ChoiceWidget):
0.25 widgets.py(764):     allow_multiple_selected = True
0.25 widgets.py(765):     input_type = 'checkbox'
0.25 widgets.py(766):     template_name = 'django/forms/widgets/checkbox_select.html'
0.25 widgets.py(767):     option_template_name = 'django/forms/widgets/checkbox_option.html'
0.25 widgets.py(769):     def use_required_attribute(self, initial):
0.25 widgets.py(774):     def value_omitted_from_data(self, data, files, name):
0.25 widgets.py(779):     def id_for_label(self, id_, index=None):
0.25 widgets.py(186):         new_class = super().__new__(mcs, name, bases, attrs)
0.25 widgets.py(188):         if 'media' not in attrs:
0.25 widgets.py(189):             new_class.media = media_property(new_class)
0.25 widgets.py(156):     def _media(self):
0.25 widgets.py(178):     return property(_media)
0.25 widgets.py(191):         return new_class
0.25 widgets.py(789): class MultiWidget(Widget):
0.25 widgets.py(789): class MultiWidget(Widget):
0.25 widgets.py(798):     """
0.25 widgets.py(799):     template_name = 'django/forms/widgets/multiwidget.html'
0.25 widgets.py(801):     def __init__(self, widgets, attrs=None):
0.25 widgets.py(805):     @property
0.25 widgets.py(809):     def get_context(self, name, value, attrs):
0.25 widgets.py(840):     def id_for_label(self, id_):
0.25 widgets.py(845):     def value_from_datadict(self, data, files, name):
0.25 widgets.py(848):     def value_omitted_from_data(self, data, files, name):
0.25 widgets.py(854):     def decompress(self, value):
0.25 widgets.py(862):     def _get_media(self):
0.25 widgets.py(871):     media = property(_get_media)
0.25 widgets.py(873):     def __deepcopy__(self, memo):
0.25 widgets.py(878):     @property
0.25 widgets.py(186):         new_class = super().__new__(mcs, name, bases, attrs)
0.25 widgets.py(188):         if 'media' not in attrs:
0.25 widgets.py(191):         return new_class
0.25 widgets.py(883): class SplitDateTimeWidget(MultiWidget):
0.25 widgets.py(883): class SplitDateTimeWidget(MultiWidget):
0.25 widgets.py(886):     """
0.25 widgets.py(887):     supports_microseconds = False
0.25 widgets.py(888):     template_name = 'django/forms/widgets/splitdatetime.html'
0.25 widgets.py(890):     def __init__(self, attrs=None, date_format=None, time_format=None, date_attrs=None, time_attrs=None):
0.25 widgets.py(903):     def decompress(self, value):
0.25 widgets.py(186):         new_class = super().__new__(mcs, name, bases, attrs)
0.25 widgets.py(188):         if 'media' not in attrs:
0.25 widgets.py(189):             new_class.media = media_property(new_class)
0.25 widgets.py(156):     def _media(self):
0.25 widgets.py(178):     return property(_media)
0.25 widgets.py(191):         return new_class
0.25 widgets.py(910): class SplitHiddenDateTimeWidget(SplitDateTimeWidget):
0.25 widgets.py(910): class SplitHiddenDateTimeWidget(SplitDateTimeWidget):
0.25 widgets.py(913):     """
0.25 widgets.py(914):     template_name = 'django/forms/widgets/splithiddendatetime.html'
0.25 widgets.py(916):     def __init__(self, attrs=None, date_format=None, time_format=None, date_attrs=None, time_attrs=None):
0.25 widgets.py(186):         new_class = super().__new__(mcs, name, bases, attrs)
0.25 widgets.py(188):         if 'media' not in attrs:
0.25 widgets.py(189):             new_class.media = media_property(new_class)
0.25 widgets.py(156):     def _media(self):
0.25 widgets.py(178):     return property(_media)
0.25 widgets.py(191):         return new_class
0.25 widgets.py(922): class SelectDateWidget(Widget):
0.25 widgets.py(922): class SelectDateWidget(Widget):
0.25 widgets.py(928):     """
0.25 widgets.py(929):     none_value = ('', '---')
0.25 widgets.py(930):     month_field = '%s_month'
0.25 widgets.py(931):     day_field = '%s_day'
0.25 widgets.py(932):     year_field = '%s_year'
0.25 widgets.py(933):     template_name = 'django/forms/widgets/select_date.html'
0.25 widgets.py(934):     input_type = 'select'
0.25 widgets.py(935):     select_widget = Select
0.25 widgets.py(936):     date_re = _lazy_re_compile(r'(\d{4}|0)-(\d\d?)-(\d\d?)$')
0.25 widgets.py(938):     def __init__(self, attrs=None, years=None, months=None, empty_label=None):
0.25 widgets.py(970):     def get_context(self, name, value, attrs):
0.25 widgets.py(1006):     def format_value(self, value):
0.25 widgets.py(1031):     @staticmethod
0.25 widgets.py(1047):     def id_for_label(self, id_):
0.25 widgets.py(1052):     def value_from_datadict(self, data, files, name):
0.25 widgets.py(1070):     def value_omitted_from_data(self, data, files, name):
0.25 widgets.py(186):         new_class = super().__new__(mcs, name, bases, attrs)
0.25 widgets.py(188):         if 'media' not in attrs:
0.25 widgets.py(189):             new_class.media = media_property(new_class)
0.25 widgets.py(156):     def _media(self):
0.25 widgets.py(178):     return property(_media)
0.25 widgets.py(191):         return new_class
0.26 widgets.py(186):         new_class = super().__new__(mcs, name, bases, attrs)
0.26 widgets.py(188):         if 'media' not in attrs:
0.26 widgets.py(189):             new_class.media = media_property(new_class)
0.26 widgets.py(156):     def _media(self):
0.26 widgets.py(178):     return property(_media)
0.26 widgets.py(191):         return new_class
0.26 widgets.py(186):         new_class = super().__new__(mcs, name, bases, attrs)
0.26 widgets.py(188):         if 'media' not in attrs:
0.26 widgets.py(189):             new_class.media = media_property(new_class)
0.26 widgets.py(156):     def _media(self):
0.26 widgets.py(178):     return property(_media)
0.26 widgets.py(191):         return new_class
0.27 widgets.py(186):         new_class = super().__new__(mcs, name, bases, attrs)
0.27 widgets.py(188):         if 'media' not in attrs:
0.27 widgets.py(189):             new_class.media = media_property(new_class)
0.27 widgets.py(156):     def _media(self):
0.27 widgets.py(178):     return property(_media)
0.27 widgets.py(191):         return new_class
Testing against Django installed in '/testbed/django'
0.50 widgets.py(556):         super().__init__(attrs)
0.50 widgets.py(201):         self.attrs = {} if attrs is None else attrs.copy()
0.50 widgets.py(560):         self.choices = list(choices)
0.50 widgets.py(287):         if attrs is not None:
0.50 widgets.py(288):             attrs = attrs.copy()
0.50 widgets.py(289):             self.input_type = attrs.pop('type', self.input_type)
0.50 widgets.py(290):         super().__init__(attrs)
0.50 widgets.py(201):         self.attrs = {} if attrs is None else attrs.copy()
0.50 widgets.py(204):         obj = copy.copy(self)
0.50 widgets.py(205):         obj.attrs = self.attrs.copy()
0.50 widgets.py(206):         memo[id(self)] = obj
0.50 widgets.py(207):         return obj
0.50 widgets.py(186):         new_class = super().__new__(mcs, name, bases, attrs)
0.50 widgets.py(188):         if 'media' not in attrs:
0.50 widgets.py(189):             new_class.media = media_property(new_class)
0.50 widgets.py(156):     def _media(self):
0.50 widgets.py(178):     return property(_media)
0.50 widgets.py(191):         return new_class
0.50 widgets.py(512):         super().__init__(attrs)
0.50 widgets.py(287):         if attrs is not None:
0.50 widgets.py(288):             attrs = attrs.copy()
0.50 widgets.py(289):             self.input_type = attrs.pop('type', self.input_type)
0.50 widgets.py(290):         super().__init__(attrs)
0.50 widgets.py(201):         self.attrs = {} if attrs is None else attrs.copy()
0.50 widgets.py(515):         self.check_test = boolean_check if check_test is None else check_test
0.50 widgets.py(186):         new_class = super().__new__(mcs, name, bases, attrs)
0.50 widgets.py(188):         if 'media' not in attrs:
0.50 widgets.py(191):         return new_class
0.50 widgets.py(186):         new_class = super().__new__(mcs, name, bases, attrs)
0.50 widgets.py(188):         if 'media' not in attrs:
0.50 widgets.py(189):             new_class.media = media_property(new_class)
0.50 widgets.py(156):     def _media(self):
0.50 widgets.py(178):     return property(_media)
0.50 widgets.py(191):         return new_class
0.50 widgets.py(186):         new_class = super().__new__(mcs, name, bases, attrs)
0.50 widgets.py(188):         if 'media' not in attrs:
0.50 widgets.py(189):             new_class.media = media_property(new_class)
0.50 widgets.py(156):     def _media(self):
0.50 widgets.py(178):     return property(_media)
0.50 widgets.py(191):         return new_class
0.50 widgets.py(186):         new_class = super().__new__(mcs, name, bases, attrs)
0.50 widgets.py(188):         if 'media' not in attrs:
0.50 widgets.py(189):             new_class.media = media_property(new_class)
0.50 widgets.py(156):     def _media(self):
0.50 widgets.py(178):     return property(_media)
0.50 widgets.py(191):         return new_class
0.50 widgets.py(186):         new_class = super().__new__(mcs, name, bases, attrs)
0.50 widgets.py(188):         if 'media' not in attrs:
0.50 widgets.py(189):             new_class.media = media_property(new_class)
0.50 widgets.py(156):     def _media(self):
0.50 widgets.py(178):     return property(_media)
0.50 widgets.py(191):         return new_class
0.50 widgets.py(186):         new_class = super().__new__(mcs, name, bases, attrs)
0.50 widgets.py(188):         if 'media' not in attrs:
0.50 widgets.py(189):             new_class.media = media_property(new_class)
0.50 widgets.py(156):     def _media(self):
0.50 widgets.py(178):     return property(_media)
0.50 widgets.py(191):         return new_class
0.50 widgets.py(186):         new_class = super().__new__(mcs, name, bases, attrs)
0.50 widgets.py(188):         if 'media' not in attrs:
0.50 widgets.py(189):             new_class.media = media_property(new_class)
0.50 widgets.py(156):     def _media(self):
0.50 widgets.py(178):     return property(_media)
0.50 widgets.py(191):         return new_class
0.50 widgets.py(186):         new_class = super().__new__(mcs, name, bases, attrs)
0.50 widgets.py(188):         if 'media' not in attrs:
0.50 widgets.py(189):             new_class.media = media_property(new_class)
0.50 widgets.py(156):     def _media(self):
0.50 widgets.py(178):     return property(_media)
0.50 widgets.py(191):         return new_class
0.50 widgets.py(186):         new_class = super().__new__(mcs, name, bases, attrs)
0.50 widgets.py(188):         if 'media' not in attrs:
0.50 widgets.py(191):         return new_class
0.50 widgets.py(186):         new_class = super().__new__(mcs, name, bases, attrs)
0.50 widgets.py(188):         if 'media' not in attrs:
0.50 widgets.py(189):             new_class.media = media_property(new_class)
0.50 widgets.py(156):     def _media(self):
0.50 widgets.py(178):     return property(_media)
0.51 widgets.py(191):         return new_class
0.51 widgets.py(186):         new_class = super().__new__(mcs, name, bases, attrs)
0.51 widgets.py(188):         if 'media' not in attrs:
0.51 widgets.py(189):             new_class.media = media_property(new_class)
0.51 widgets.py(156):     def _media(self):
0.51 widgets.py(178):     return property(_media)
0.51 widgets.py(191):         return new_class
0.51 widgets.py(186):         new_class = super().__new__(mcs, name, bases, attrs)
0.51 widgets.py(188):         if 'media' not in attrs:
0.51 widgets.py(189):             new_class.media = media_property(new_class)
0.51 widgets.py(156):     def _media(self):
0.51 widgets.py(178):     return property(_media)
0.51 widgets.py(191):         return new_class
0.51 widgets.py(186):         new_class = super().__new__(mcs, name, bases, attrs)
0.51 widgets.py(188):         if 'media' not in attrs:
0.51 widgets.py(189):             new_class.media = media_property(new_class)
0.51 widgets.py(156):     def _media(self):
0.51 widgets.py(178):     return property(_media)
0.51 widgets.py(191):         return new_class
0.51 widgets.py(186):         new_class = super().__new__(mcs, name, bases, attrs)
0.51 widgets.py(188):         if 'media' not in attrs:
0.51 widgets.py(189):             new_class.media = media_property(new_class)
0.51 widgets.py(156):     def _media(self):
0.51 widgets.py(178):     return property(_media)
0.51 widgets.py(191):         return new_class
0.51 widgets.py(186):         new_class = super().__new__(mcs, name, bases, attrs)
0.51 widgets.py(188):         if 'media' not in attrs:
0.51 widgets.py(189):             new_class.media = media_property(new_class)
0.51 widgets.py(156):     def _media(self):
0.51 widgets.py(178):     return property(_media)
0.51 widgets.py(191):         return new_class
0.51 widgets.py(186):         new_class = super().__new__(mcs, name, bases, attrs)
test_file_input_with_initial_data_shows_required (test_coverup_django__django-12276.TestFileInputRequiredAttribute) ... FAIL

======================================================================
FAIL: test_file_input_with_initial_data_shows_required (test_coverup_django__django-12276.TestFileInputRequiredAttribute)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "./tests/test_coverup_django__django-12276.py", line 18, in test_file_input_with_initial_data_shows_required
    self.assertIn('required', rendered_html_with_initial)  # This should fail, revealing the bug
AssertionError: 'required' not found in '<p><label for="id_file_field">File field:</label> Currently: <a href="mock_url">&lt;test_coverup_django__django-12276.MockFile object at 0x7f723b1c00b8&gt;</a><br>\nChange:\n<input type="file" name="file_field" id="id_file_field"></p>'

----------------------------------------------------------------------
Ran 1 test in 0.013s

FAILED (failures=1)
0.51 widgets.py(188):         if 'media' not in attrs:
0.51 widgets.py(189):             new_class.media = media_property(new_class)
0.51 widgets.py(156):     def _media(self):
0.51 widgets.py(178):     return property(_media)
0.51 widgets.py(191):         return new_class
0.51 widgets.py(186):         new_class = super().__new__(mcs, name, bases, attrs)
0.51 widgets.py(188):         if 'media' not in attrs:
0.51 widgets.py(189):             new_class.media = media_property(new_class)
0.51 widgets.py(156):     def _media(self):
0.51 widgets.py(178):     return property(_media)
0.51 widgets.py(191):         return new_class
0.51 widgets.py(186):         new_class = super().__new__(mcs, name, bases, attrs)
0.51 widgets.py(188):         if 'media' not in attrs:
0.51 widgets.py(189):             new_class.media = media_property(new_class)
0.51 widgets.py(156):     def _media(self):
0.51 widgets.py(178):     return property(_media)
0.51 widgets.py(191):         return new_class
0.51 widgets.py(186):         new_class = super().__new__(mcs, name, bases, attrs)
0.51 widgets.py(188):         if 'media' not in attrs:
0.51 widgets.py(189):             new_class.media = media_property(new_class)
0.51 widgets.py(156):     def _media(self):
0.51 widgets.py(178):     return property(_media)
0.51 widgets.py(191):         return new_class
0.51 widgets.py(186):         new_class = super().__new__(mcs, name, bases, attrs)
0.51 widgets.py(188):         if 'media' not in attrs:
0.51 widgets.py(191):         return new_class
0.51 widgets.py(186):         new_class = super().__new__(mcs, name, bases, attrs)
0.51 widgets.py(188):         if 'media' not in attrs:
0.51 widgets.py(191):         return new_class
0.51 widgets.py(186):         new_class = super().__new__(mcs, name, bases, attrs)
0.51 widgets.py(188):         if 'media' not in attrs:
0.51 widgets.py(189):             new_class.media = media_property(new_class)
0.51 widgets.py(156):     def _media(self):
0.51 widgets.py(178):     return property(_media)
0.51 widgets.py(191):         return new_class
0.51 widgets.py(186):         new_class = super().__new__(mcs, name, bases, attrs)
0.51 widgets.py(188):         if 'media' not in attrs:
0.51 widgets.py(189):             new_class.media = media_property(new_class)
0.51 widgets.py(156):     def _media(self):
0.51 widgets.py(178):     return property(_media)
0.51 widgets.py(191):         return new_class
Skipping setup of unused database(s): default, other.
0.60 widgets.py(186):         new_class = super().__new__(mcs, name, bases, attrs)
0.60 widgets.py(188):         if 'media' not in attrs:
0.60 widgets.py(189):             new_class.media = media_property(new_class)
0.60 widgets.py(156):     def _media(self):
0.60 widgets.py(178):     return property(_media)
0.60 widgets.py(191):         return new_class
System check identified no issues (0 silenced).
0.61 widgets.py(287):         if attrs is not None:
0.61 widgets.py(290):         super().__init__(attrs)
0.61 widgets.py(201):         self.attrs = {} if attrs is None else attrs.copy()
0.61 widgets.py(204):         obj = copy.copy(self)
0.61 widgets.py(205):         obj.attrs = self.attrs.copy()
0.61 widgets.py(206):         memo[id(self)] = obj
0.61 widgets.py(207):         return obj
0.61 widgets.py(186):         new_class = super().__new__(mcs, name, bases, attrs)
0.61 widgets.py(188):         if 'media' not in attrs:
0.61 widgets.py(189):             new_class.media = media_property(new_class)
0.61 widgets.py(156):     def _media(self):
0.61 widgets.py(178):     return property(_media)
0.61 widgets.py(191):         return new_class
0.61 widgets.py(204):         obj = copy.copy(self)
0.61 widgets.py(205):         obj.attrs = self.attrs.copy()
0.61 widgets.py(206):         memo[id(self)] = obj
0.61 widgets.py(207):         return obj
0.61 widgets.py(211):         return self.input_type == 'hidden' if hasattr(self, 'input_type') else False
0.61 widgets.py(273):         return id_
0.61 widgets.py(455):         return super().use_required_attribute(initial) and not initial
0.61 widgets.py(276):         return not self.is_hidden
0.61 widgets.py(211):         return self.input_type == 'hidden' if hasattr(self, 'input_type') else False
0.61 widgets.py(241):         context = self.get_context(name, value, attrs)
0.61 widgets.py(427):         context = super().get_context(name, value, attrs)
0.61 widgets.py(293):         context = super().get_context(name, value, attrs)
0.61 widgets.py(228):         context = {}
0.61 widgets.py(230):             'name': name,
0.61 widgets.py(231):             'is_hidden': self.is_hidden,
0.61 widgets.py(211):         return self.input_type == 'hidden' if hasattr(self, 'input_type') else False
0.61 widgets.py(232):             'required': self.is_required,
0.61 widgets.py(233):             'value': self.format_value(value),
0.61 widgets.py(423):         if self.is_initial(value):
0.61 widgets.py(417):         return bool(value and getattr(value, 'url', False))
0.61 widgets.py(424):             return value
0.61 widgets.py(234):             'attrs': self.build_attrs(self.attrs, attrs),
0.61 widgets.py(251):         return {**base_attrs, **(extra_attrs or {})}
0.61 widgets.py(235):             'template_name': self.template_name,
0.61 widgets.py(237):         return context
0.61 widgets.py(294):         context['widget']['type'] = self.input_type
0.61 widgets.py(295):         return context
0.61 widgets.py(428):         checkbox_name = self.clear_checkbox_name(name)
0.61 widgets.py(405):         return name + '-clear'
0.61 widgets.py(429):         checkbox_id = self.clear_checkbox_id(checkbox_name)
0.61 widgets.py(411):         return name + '_id'
0.61 widgets.py(430):         context['widget'].update({
0.61 widgets.py(431):             'checkbox_name': checkbox_name,
0.61 widgets.py(432):             'checkbox_id': checkbox_id,
0.61 widgets.py(433):             'is_initial': self.is_initial(value),
0.61 widgets.py(417):         return bool(value and getattr(value, 'url', False))
0.61 widgets.py(434):             'input_text': self.input_text,
0.61 widgets.py(435):             'initial_text': self.initial_text,
0.61 widgets.py(436):             'clear_checkbox_label': self.clear_checkbox_label,
0.61 widgets.py(438):         return context
0.61 widgets.py(242):         return self._render(self.template_name, context, renderer)
0.61 widgets.py(245):         if renderer is None:
0.61 widgets.py(247):         return mark_safe(renderer.render(template_name, context))
+ cat coverage.cover
{"/testbed/django/forms/widgets.py": {"5": 1, "6": 1, "7": 1, "8": 1, "9": 1, "11": 1, "12": 1, "13": 1, "14": 1, "15": 1, "16": 1, "17": 1, "18": 1, "19": 1, "20": 1, "21": 1, "24": 1, "26": 1, "35": 1, "38": 1, "41": 2, "45": 2, "155": 1, "181": 2, "194": 2, "279": 2, "298": 2, "303": 2, "308": 2, "313": 2, "318": 2, "332": 2, "337": 2, "374": 2, "391": 1, "394": 2, "464": 2, "475": 2, "487": 2, "492": 2, "497": 2, "503": 1, "507": 2, "546": 2, "669": 2, "703": 2, "741": 2, "757": 2, "763": 2, "789": 2, "883": 2, "910": 2, "922": 2, "42": 1, "47": 1, "59": 1, "62": 1, "65": 1, "73": 1, "77": 1, "80": 1, "88": 1, "99": 1, "109": 1, "115": 1, "148": 1, "48": 0, "49": 0, "50": 0, "52": 0, "53": 0, "54": 0, "55": 0, "56": 0, "57": 0, "60": 0, "63": 0, "67": 0, "68": 0, "69": 0, "70": 0, "71": 0, "75": 0, "78": 0, "82": 0, "85": 0, "91": 0, "92": 0, "97": 0, "93": 0, "96": 0, "105": 0, "106": 0, "107": 0, "111": 0, "112": 0, "113": 0, "125": 0, "126": 0, "127": 0, "128": 0, "131": 0, "132": 0, "133": 0, "135": 0, "136": 0, "137": 0, "138": 0, "139": 0, "140": 0, "141": 0, "142": 0, "143": 0, "144": 0, "146": 0, "149": 0, "150": 0, "151": 0, "152": 0, "156": 51, "178": 51, "158": 0, "159": 0, "160": 0, "161": 0, "162": 0, "165": 0, "166": 0, "167": 0, "168": 0, "169": 0, "170": 0, "172": 0, "173": 0, "174": 0, "175": 0, "176": 0, "177": 0, "185": 1, "186": 56, "188": 56, "189": 51, "191": 56, "195": 1, "196": 1, "197": 1, "198": 1, "200": 1, "203": 1, "209": 1, "213": 1, "217": 1, "227": 1, "239": 1, "244": 1, "249": 1, "253": 1, "260": 1, "263": 1, "275": 1, "201": 4, "204": 3, "205": 3, "206": 3, "207": 3, "211": 3, "214": 0, "215": 0, "221": 0, "222": 0, "223": 0, "224": 0, "225": 0, "228": 1, "230": 1, "231": 1, "232": 1, "233": 1, "234": 1, "235": 1, "237": 1, "241": 1, "242": 1, "245": 1, "246": 0, "247": 1, "251": 1, "258": 0, "261": 0, "273": 1, "276": 1, "283": 1, "284": 1, "286": 1, "292": 1, "287": 3, "288": 2, "289": 2, "290": 3, "293": 1, "294": 1, "295": 1, "299": 1, "300": 1, "304": 1, "305": 1, "309": 1, "310": 1, "314": 1, "315": 1, "319": 1, "320": 1, "322": 1, "326": 1, "323": 0, "324": 0, "327": 0, "328": 0, "329": 0, "333": 1, "334": 1, "342": 1, "344": 1, "363": 1, "370": 1, "345": 0, "346": 0, "347": 0, "349": 0, "350": 0, "351": 0, "352": 0, "355": 0, "356": 0, "357": 0, "358": 0, "360": 0, "361": 0, "364": 0, "365": 0, "366": 0, "367": 0, "368": 0, "371": 0, "375": 1, "376": 1, "377": 1, "379": 1, "383": 1, "387": 1, "381": 0, "385": 0, "388": 0, "395": 1, "396": 1, "397": 1, "398": 1, "400": 1, "407": 1, "413": 1, "419": 1, "426": 1, "440": 1, "454": 1, "457": 1, "405": 1, "411": 1, "417": 2, "423": 1, "424": 1, "427": 1, "428": 1, "429": 1, "430": 1, "431": 1, "432": 1, "433": 1, "434": 1, "435": 1, "436": 1, "438": 1, "441": 0, "442": 0, "443": 0, "445": 0, "449": 0, "451": 0, "452": 0, "455": 1, "459": 0, "460": 0, "465": 1, "467": 1, "469": 0, "470": 0, "471": 0, "472": 0, "476": 1, "477": 1, "479": 1, "483": 1, "480": 0, "481": 0, "484": 0, "488": 1, "489": 1, "493": 1, "494": 1, "498": 1, "499": 1, "504": 0, "508": 1, "509": 1, "511": 1, "517": 1, "523": 1, "528": 1, "540": 1, "512": 1, "515": 1, "519": 0, "520": 0, "521": 0, "524": 0, "525": 0, "526": 0, "529": 0, "532": 0, "533": 0, "535": 0, "536": 0, "537": 0, "538": 0, "543": 0, "547": 1, "548": 1, "549": 1, "550": 1, "551": 1, "552": 1, "553": 1, "555": 1, "562": 1, "569": 1, "577": 1, "582": 1, "616": 1, "637": 1, "642": 1, "651": 1, "660": 1, "556": 1, "560": 1, "563": 0, "564": 0, "565": 0, "566": 0, "567": 0, "574": 0, "575": 0, "579": 0, "580": 0, "584": 0, "585": 0, "587": 0, "588": 0, "589": 0, "591": 0, "592": 0, "593": 0, "594": 0, "595": 0, "597": 0, "598": 0, "599": 0, "600": 0, "602": 0, "604": 0, "605": 0, "607": 0, "608": 0, "609": 0, "610": 0, "612": 0, "613": 0, "614": 0, "617": 0, "618": 0, "619": 0, "620": 0, "621": 0, "622": 0, "623": 0, "624": 0, "626": 0, "627": 0, "628": 0, "629": 0, "630": 0, "631": 0, "632": 0, "633": 0, "634": 0, "638": 0, "639": 0, "640": 0, "647": 0, "648": 0, "649": 0, "652": 0, "653": 0, "654": 0, "655": 0, "656": 0, "657": 0, "658": 0, "662": 0, "663": 0, "664": 0, "665": 0, "666": 0, "670": 1, "671": 1, "672": 1, "673": 1, "674": 1, "675": 1, "677": 1, "683": 1, "689": 1, "678": 0, "679": 0, "680": 0, "681": 0, "686": 0, "687": 0, "694": 0, "696": 0, "697": 0, "699": 0, "700": 0, "707": 1, "715": 1, "726": 1, "709": 0, "710": 0, "711": 0, "713": 0, "716": 0, "718": 0, "719": 0, "721": 0, "722": 0, "723": 0, "724": 0, "727": 0, "729": 0, "730": 0, "731": 0, "732": 0, "733": 0, "734": 0, "736": 0, "737": 0, "738": 0, "742": 1, "744": 1, "751": 1, "745": 0, "746": 0, "747": 0, "748": 0, "749": 0, "754": 0, "758": 1, "759": 1, "760": 1, "764": 1, "765": 1, "766": 1, "767": 1, "769": 1, "774": 1, "779": 1, "772": 0, "777": 0, "784": 0, "785": 0, "786": 0, "799": 1, "801": 1, "805": 1, "809": 1, "840": 1, "845": 1, "848": 1, "854": 1, "862": 1, "871": 1, "873": 1, "878": 1, "802": 0, "803": 0, "807": 0, "810": 0, "811": 0, "812": 0, "813": 0, "816": 0, "817": 0, "819": 0, "820": 0, "821": 0, "822": 0, "823": 0, "824": 0, "825": 0, "826": 0, "827": 0, "828": 0, "829": 0, "830": 0, "831": 0, "832": 0, "833": 0, "835": 0, "836": 0, "837": 0, "838": 0, "841": 0, "842": 0, "843": 0, "846": 0, "849": 0, "850": 0, "851": 0, "860": 0, "867": 0, "868": 0, "869": 0, "870": 0, "874": 0, "875": 0, "876": 0, "880": 0, "887": 1, "888": 1, "890": 1, "903": 1, "892": 0, "893": 0, "894": 0, "896": 0, "897": 0, "898": 0, "901": 0, "904": 0, "905": 0, "906": 0, "907": 0, "914": 1, "916": 1, "917": 0, "918": 0, "919": 0, "929": 1, "930": 1, "931": 1, "932": 1, "933": 1, "934": 1, "935": 1, "936": 1, "938": 1, "970": 1, "1006": 1, "1031": 1, "1047": 1, "1052": 1, "1070": 1, "939": 0, "942": 0, "943": 0, "945": 0, "946": 0, "949": 0, "950": 0, "952": 0, "955": 0, "956": 0, "957": 0, "959": 0, "960": 0, "961": 0, "963": 0, "964": 0, "966": 0, "967": 0, "968": 0, "971": 0, "972": 0, "973": 0, "974": 0, "975": 0, "976": 0, "977": 0, "978": 0, "979": 0, "980": 0, "982": 0, "983": 0, "984": 0, "985": 0, "986": 0, "987": 0, "988": 0, "989": 0, "991": 0, "992": 0, "993": 0, "994": 0, "995": 0, "996": 0, "997": 0, "998": 0, "1000": 0, "1001": 0, "1002": 0, "1003": 0, "1004": 0, "1012": 0, "1013": 0, "1014": 0, "1015": 0, "1016": 0, "1017": 0, "1020": 0, "1021": 0, "1022": 0, "1023": 0, "1024": 0, "1025": 0, "1026": 0, "1028": 0, "1029": 0, "1033": 0, "1034": 0, "1035": 0, "1036": 0, "1037": 0, "1038": 0, "1039": 0, "1040": 0, "1041": 0, "1042": 0, "1043": 0, "1044": 0, "1045": 0, "1048": 0, "1049": 0, "1050": 0, "1053": 0, "1054": 0, "1055": 0, "1056": 0, "1057": 0, "1058": 0, "1059": 0, "1060": 0, "1061": 0, "1062": 0, "1065": 0, "1066": 0, "1067": 0, "1068": 0, "1071": 0, "1072": 0, "1073": 0}}
+ git checkout 53d8646f799de7f92ab9defe9dc56c6125448102
Note: switching to '53d8646f799de7f92ab9defe9dc56c6125448102'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at 53d8646f79 Fixed #31141 -- Relaxed system check of translation settings for sublanguages.
+ git apply /root/pre_state.patch
error: unrecognized input
