+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD 768da1c6f6ec907524b8ebbf6bf818c92b56101b
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch master
nothing to commit, working tree clean
+ git show
commit 768da1c6f6ec907524b8ebbf6bf818c92b56101b
Merge: c3b443ef9e 1b68b7c925
Author: Jason Moore <moorepants@gmail.com>
Date:   Sat Oct 6 09:18:08 2018 -0700

    Merge pull request #15347 from iamprayush/master
    
    Added an example plot output

+ git diff 768da1c6f6ec907524b8ebbf6bf818c92b56101b
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Requirement already satisfied: mpmath>=0.19 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from sympy==1.4.dev0) (1.3.0)
Installing collected packages: sympy
  Attempting uninstall: sympy
    Found existing installation: sympy 1.4.dev0
    Uninstalling sympy-1.4.dev0:
      Successfully uninstalled sympy-1.4.dev0
  DEPRECATION: Legacy editable install of sympy==1.4.dev0 from file:///testbed (setup.py develop) is deprecated. pip 25.3 will enforce this behaviour change. A possible replacement is to add a pyproject.toml or enable --use-pep517, and use setuptools >= 64. If the resulting installation is not behaving as expected, try using --config-settings editable_mode=compat. Please consult the setuptools documentation for more information. Discussion can be found at https://github.com/pypa/pip/issues/11457
  Running setup.py develop for sympy
Successfully installed sympy
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git apply -v -
<stdin>:13: trailing whitespace.
    
<stdin>:16: trailing whitespace.
    
<stdin>:19: trailing whitespace.
    
<stdin>:26: trailing whitespace.
    
Checking patch sympy/polys/tests/test_coverup_sympy__sympy-15349.py...
<stdin>:29: new blank line at EOF.
+
Applied patch sympy/polys/tests/test_coverup_sympy__sympy-15349.py cleanly.
warning: 5 lines add whitespace errors.
+ PYTHONWARNINGS=ignore::UserWarning,ignore::SyntaxWarning
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(sympy/algebras/quaternion\.py)' bin/test -C --verbose sympy/polys/tests/test_coverup_sympy__sympy-15349.p
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(sympy/algebras/quaternion\\.py)']
0.62 quaternion.py(4): from __future__ import print_function
0.62 quaternion.py(6): from sympy.core.expr import Expr
0.62 quaternion.py(7): from sympy import Rational
0.62 quaternion.py(8): from sympy import re, im, conjugate
0.62 quaternion.py(9): from sympy import sqrt, sin, cos, acos, asin, exp, ln
0.62 quaternion.py(10): from sympy import trigsimp
0.62 quaternion.py(11): from sympy import diff, integrate
0.62 quaternion.py(12): from sympy import Matrix, Add, Mul
0.62 quaternion.py(13): from sympy import symbols, sympify
0.62 quaternion.py(14): from sympy.printing.latex import latex
0.62 quaternion.py(15): from sympy.printing import StrPrinter
0.62 quaternion.py(16): from sympy.core.numbers import Integer
0.62 quaternion.py(17): from sympy.core.compatibility import SYMPY_INTS
0.62 quaternion.py(20): class Quaternion(Expr):
0.62 quaternion.py(20): class Quaternion(Expr):
0.62 quaternion.py(21):     """Provides basic quaternion operations.
0.62 quaternion.py(45):     _op_priority = 11.0
0.62 quaternion.py(47):     is_commutative = False
0.62 quaternion.py(49):     def __new__(cls, a=0, b=0, c=0, d=0, real_field=True):
0.62 quaternion.py(66):     @property
0.62 quaternion.py(67):     def a(self):
0.62 quaternion.py(70):     @property
0.62 quaternion.py(71):     def b(self):
0.62 quaternion.py(74):     @property
0.62 quaternion.py(75):     def c(self):
0.62 quaternion.py(78):     @property
0.62 quaternion.py(79):     def d(self):
0.62 quaternion.py(81):     @property
0.62 quaternion.py(82):     def real_field(self):
0.62 quaternion.py(85):     @classmethod
0.62 quaternion.py(86):     def from_axis_angle(cls, vector, angle):
0.62 quaternion.py(109):     @classmethod
0.62 quaternion.py(110):     def from_rotation_matrix(cls, M):
0.62 quaternion.py(143):     @staticmethod
0.62 quaternion.py(144):     def __copysign(x, y):
0.62 quaternion.py(153):     def __add__(self, other):
0.62 quaternion.py(156):     def __radd__(self, other):
0.62 quaternion.py(159):     def __sub__(self, other):
0.62 quaternion.py(162):     def __mul__(self, other):
0.62 quaternion.py(165):     def __rmul__(self, other):
0.62 quaternion.py(168):     def __pow__(self, p):
0.62 quaternion.py(171):     def __neg__(self):
0.62 quaternion.py(174):     def _eval_Integral(self, *args):
0.62 quaternion.py(177):     def _eval_diff(self, *symbols, **kwargs):
0.62 quaternion.py(180):     def add(self, other):
0.62 quaternion.py(224):     def mul(self, other):
0.62 quaternion.py(252):     @staticmethod
0.62 quaternion.py(253):     def _generic_mul(q1, q2):
0.62 quaternion.py(288):     def _eval_conjugate(self):
0.62 quaternion.py(293):     def norm(self):
0.62 quaternion.py(300):     def normalize(self):
0.62 quaternion.py(305):     def inverse(self):
0.62 quaternion.py(312):     def pow(self, p):
0.62 quaternion.py(344):     def exp(self):
0.62 quaternion.py(368):     def _ln(self):
0.62 quaternion.py(393):     def pow_cos_sin(self, p):
0.62 quaternion.py(415):     def diff(self, *args):
0.62 quaternion.py(419):     def integrate(self, *args):
0.62 quaternion.py(424):     @staticmethod
0.62 quaternion.py(425):     def rotate_point(pin, r):
0.62 quaternion.py(450):     def to_axis_angle(self):
0.62 quaternion.py(489):     def to_rotation_matrix(self, v=None):
============================= test process starts ==============================
executable:         /opt/miniconda3/envs/testbed/bin/python3  (3.9.23-final-0) [CPython]
architecture:       64-bit
cache:              no
ground types:       python 
numpy:              None
random seed:        85321771
hash randomization: on (PYTHONHASHSEED=1162432832)

sympy/polys/tests/test_coverup_sympy__sympy-15349.py[1] 
test_quaternion_to_rotation_matrix_bug 0.66 quaternion.py(50):         a = sympify(a)
0.66 quaternion.py(51):         b = sympify(b)
0.66 quaternion.py(52):         c = sympify(c)
0.66 quaternion.py(53):         d = sympify(d)
0.66 quaternion.py(55):         if any(i.is_commutative is False for i in [a, b, c, d]):
0.66 quaternion.py(55):         if any(i.is_commutative is False for i in [a, b, c, d]):
0.66 quaternion.py(55):         if any(i.is_commutative is False for i in [a, b, c, d]):
0.66 quaternion.py(55):         if any(i.is_commutative is False for i in [a, b, c, d]):
0.66 quaternion.py(55):         if any(i.is_commutative is False for i in [a, b, c, d]):
0.66 quaternion.py(55):         if any(i.is_commutative is False for i in [a, b, c, d]):
0.66 quaternion.py(58):             obj = Expr.__new__(cls, a, b, c, d)
0.66 quaternion.py(59):             obj._a = a
0.66 quaternion.py(60):             obj._b = b
0.66 quaternion.py(61):             obj._c = c
0.66 quaternion.py(62):             obj._d = d
0.66 quaternion.py(63):             obj._real_field = real_field
0.66 quaternion.py(64):             return obj
0.66 quaternion.py(524):         q = self
0.66 quaternion.py(525):         s = q.norm()**-2
0.66 quaternion.py(295):         q = self
0.66 quaternion.py(298):         return sqrt(trigsimp(q.a**2 + q.b**2 + q.c**2 + q.d**2))
0.66 quaternion.py(68):         return self._a
0.66 quaternion.py(72):         return self._b
0.66 quaternion.py(76):         return self._c
0.66 quaternion.py(80):         return self._d
0.81 quaternion.py(526):         m00 = 1 - 2*s*(q.c**2 + q.d**2)
0.81 quaternion.py(76):         return self._c
0.81 quaternion.py(80):         return self._d
0.81 quaternion.py(527):         m01 = 2*s*(q.b*q.c - q.d*q.a)
0.81 quaternion.py(72):         return self._b
0.81 quaternion.py(76):         return self._c
0.81 quaternion.py(80):         return self._d
0.81 quaternion.py(68):         return self._a
0.81 quaternion.py(528):         m02 = 2*s*(q.b*q.d + q.c*q.a)
0.81 quaternion.py(72):         return self._b
0.81 quaternion.py(80):         return self._d
0.81 quaternion.py(76):         return self._c
0.81 quaternion.py(68):         return self._a
0.81 quaternion.py(530):         m10 = 2*s*(q.b*q.c + q.d*q.a)
0.81 quaternion.py(72):         return self._b
0.81 quaternion.py(76):         return self._c
0.81 quaternion.py(80):         return self._d
0.81 quaternion.py(68):         return self._a
0.81 quaternion.py(531):         m11 = 1 - 2*s*(q.b**2 + q.d**2)
0.81 quaternion.py(72):         return self._b
0.81 quaternion.py(80):         return self._d
0.81 quaternion.py(532):         m12 = 2*s*(q.c*q.d + q.b*q.a)
0.81 quaternion.py(76):         return self._c
0.81 quaternion.py(80):         return self._d
0.81 quaternion.py(72):         return self._b
0.81 quaternion.py(68):         return self._a
0.82 quaternion.py(534):         m20 = 2*s*(q.b*q.d - q.c*q.a)
0.82 quaternion.py(72):         return self._b
0.82 quaternion.py(80):         return self._d
0.82 quaternion.py(76):         return self._c
0.82 quaternion.py(68):         return self._a
0.82 quaternion.py(535):         m21 = 2*s*(q.c*q.d + q.b*q.a)
0.82 quaternion.py(76):         return self._c
0.82 quaternion.py(80):         return self._d
0.82 quaternion.py(72):         return self._b
0.82 quaternion.py(68):         return self._a
0.82 quaternion.py(536):         m22 = 1 - 2*s*(q.b**2 + q.c**2)
0.82 quaternion.py(72):         return self._b
0.82 quaternion.py(76):         return self._c
0.82 quaternion.py(538):         if not v:
0.82 quaternion.py(539):             return Matrix([[m00, m01, m02], [m10, m11, m12], [m20, m21, m22]])
F                                  [FAIL]


________________________________________________________________________________
 sympy/polys/tests/test_coverup_sympy__sympy-15349.py:test_quaternion_to_rotation_matrix_bug 
Traceback (most recent call last):
  File "/testbed/sympy/polys/tests/test_coverup_sympy__sympy-15349.py", line 22, in test_quaternion_to_rotation_matrix_bug
    assert rotation_matrix == expected_matrix, "The rotation matrix does not match the expected correct form."
AssertionError: The rotation matrix does not match the expected correct form.

============= tests finished: 0 passed, 1 failed, in 0.58 seconds ==============
DO *NOT* COMMIT!
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(sympy/algebras/quaternion\\.py)']
1.26 quaternion.py(4): from __future__ import print_function
1.26 quaternion.py(6): from sympy.core.expr import Expr
1.26 quaternion.py(7): from sympy import Rational
1.26 quaternion.py(8): from sympy import re, im, conjugate
1.26 quaternion.py(9): from sympy import sqrt, sin, cos, acos, asin, exp, ln
1.26 quaternion.py(10): from sympy import trigsimp
1.26 quaternion.py(11): from sympy import diff, integrate
1.26 quaternion.py(12): from sympy import Matrix, Add, Mul
1.26 quaternion.py(13): from sympy import symbols, sympify
1.26 quaternion.py(14): from sympy.printing.latex import latex
1.26 quaternion.py(15): from sympy.printing import StrPrinter
1.26 quaternion.py(16): from sympy.core.numbers import Integer
1.26 quaternion.py(17): from sympy.core.compatibility import SYMPY_INTS
1.26 quaternion.py(20): class Quaternion(Expr):
1.26 quaternion.py(20): class Quaternion(Expr):
1.26 quaternion.py(21):     """Provides basic quaternion operations.
1.26 quaternion.py(45):     _op_priority = 11.0
1.26 quaternion.py(47):     is_commutative = False
1.26 quaternion.py(49):     def __new__(cls, a=0, b=0, c=0, d=0, real_field=True):
1.26 quaternion.py(66):     @property
1.26 quaternion.py(67):     def a(self):
1.26 quaternion.py(70):     @property
1.26 quaternion.py(71):     def b(self):
1.26 quaternion.py(74):     @property
1.26 quaternion.py(75):     def c(self):
1.26 quaternion.py(78):     @property
1.26 quaternion.py(79):     def d(self):
1.26 quaternion.py(81):     @property
1.26 quaternion.py(82):     def real_field(self):
1.26 quaternion.py(85):     @classmethod
1.26 quaternion.py(86):     def from_axis_angle(cls, vector, angle):
1.26 quaternion.py(109):     @classmethod
1.26 quaternion.py(110):     def from_rotation_matrix(cls, M):
1.26 quaternion.py(143):     @staticmethod
1.26 quaternion.py(144):     def __copysign(x, y):
1.26 quaternion.py(153):     def __add__(self, other):
1.26 quaternion.py(156):     def __radd__(self, other):
1.26 quaternion.py(159):     def __sub__(self, other):
1.26 quaternion.py(162):     def __mul__(self, other):
1.26 quaternion.py(165):     def __rmul__(self, other):
1.26 quaternion.py(168):     def __pow__(self, p):
1.26 quaternion.py(171):     def __neg__(self):
1.26 quaternion.py(174):     def _eval_Integral(self, *args):
1.26 quaternion.py(177):     def _eval_diff(self, *symbols, **kwargs):
1.26 quaternion.py(180):     def add(self, other):
1.26 quaternion.py(224):     def mul(self, other):
1.26 quaternion.py(252):     @staticmethod
1.26 quaternion.py(253):     def _generic_mul(q1, q2):
1.26 quaternion.py(288):     def _eval_conjugate(self):
1.26 quaternion.py(293):     def norm(self):
1.26 quaternion.py(300):     def normalize(self):
1.26 quaternion.py(305):     def inverse(self):
1.26 quaternion.py(312):     def pow(self, p):
1.26 quaternion.py(344):     def exp(self):
1.26 quaternion.py(368):     def _ln(self):
1.26 quaternion.py(393):     def pow_cos_sin(self, p):
1.26 quaternion.py(415):     def diff(self, *args):
1.26 quaternion.py(419):     def integrate(self, *args):
1.26 quaternion.py(424):     @staticmethod
1.26 quaternion.py(425):     def rotate_point(pin, r):
1.26 quaternion.py(450):     def to_axis_angle(self):
1.26 quaternion.py(489):     def to_rotation_matrix(self, v=None):
+ cat coverage.cover
{"/testbed/sympy/algebras/quaternion.py": {"4": 1, "6": 1, "7": 1, "8": 1, "9": 1, "10": 1, "11": 1, "12": 1, "13": 1, "14": 1, "15": 1, "16": 1, "17": 1, "20": 2, "45": 1, "47": 1, "49": 1, "66": 1, "67": 1, "70": 1, "71": 1, "74": 1, "75": 1, "78": 1, "79": 1, "81": 1, "82": 1, "85": 1, "86": 1, "109": 1, "110": 1, "143": 1, "144": 1, "153": 1, "156": 1, "159": 1, "162": 1, "165": 1, "168": 1, "171": 1, "174": 1, "177": 1, "180": 1, "224": 1, "252": 1, "253": 1, "288": 1, "293": 1, "300": 1, "305": 1, "312": 1, "344": 1, "368": 1, "393": 1, "415": 1, "419": 1, "424": 1, "425": 1, "450": 1, "489": 1, "50": 1, "51": 1, "52": 1, "53": 1, "55": 6, "56": 0, "58": 1, "59": 1, "60": 1, "61": 1, "62": 1, "63": 1, "64": 1, "68": 7, "72": 9, "76": 9, "80": 9, "83": 0, "98": 0, "99": 0, "100": 0, "101": 0, "102": 0, "103": 0, "104": 0, "105": 0, "107": 0, "126": 0, "128": 0, "129": 0, "130": 0, "131": 0, "133": 0, "134": 0, "135": 0, "136": 0, "138": 0, "139": 0, "141": 0, "149": 0, "150": 0, "151": 0, "154": 0, "157": 0, "160": 0, "163": 0, "166": 0, "169": 0, "172": 0, "175": 0, "178": 0, "207": 0, "208": 0, "211": 0, "212": 0, "213": 0, "214": 0, "217": 0, "219": 0, "221": 0, "222": 0, "250": 0, "255": 0, "256": 0, "259": 0, "260": 0, "263": 0, "264": 0, "265": 0, "266": 0, "268": 0, "270": 0, "274": 0, "275": 0, "276": 0, "277": 0, "279": 0, "281": 0, "283": 0, "284": 0, "285": 0, "286": 0, "290": 0, "291": 0, "295": 1, "298": 1, "302": 0, "303": 0, "307": 0, "308": 0, "309": 0, "310": 0, "324": 0, "325": 0, "326": 0, "327": 0, "329": 0, "330": 0, "332": 0, "333": 0, "335": 0, "336": 0, "337": 0, "339": 0, "340": 0, "342": 0, "359": 0, "360": 0, "361": 0, "362": 0, "363": 0, "364": 0, "366": 0, "383": 0, "384": 0, "385": 0, "386": 0, "387": 0, "388": 0, "389": 0, "391": 0, "410": 0, "411": 0, "412": 0, "413": 0, "416": 0, "417": 0, "421": 0, "422": 0, "441": 0, "443": 0, "446": 0, "447": 0, "448": 0, "464": 0, "465": 0, "467": 0, "470": 0, "471": 0, "472": 0, "474": 0, "475": 0, "478": 0, "480": 0, "481": 0, "482": 0, "484": 0, "485": 0, "487": 0, "524": 1, "525": 1, "526": 1, "527": 1, "528": 1, "530": 1, "531": 1, "532": 1, "534": 1, "535": 1, "536": 1, "538": 1, "539": 1, "542": 0, "544": 0, "545": 0, "546": 0, "547": 0, "548": 0, "550": 0, "551": 0}}
{"/testbed/sympy/algebras/quaternion.py": {"4": 1, "6": 1, "7": 1, "8": 1, "9": 1, "10": 1, "11": 1, "12": 1, "13": 1, "14": 1, "15": 1, "16": 1, "17": 1, "20": 2, "45": 1, "47": 1, "49": 1, "66": 1, "67": 1, "70": 1, "71": 1, "74": 1, "75": 1, "78": 1, "79": 1, "81": 1, "82": 1, "85": 1, "86": 1, "109": 1, "110": 1, "143": 1, "144": 1, "153": 1, "156": 1, "159": 1, "162": 1, "165": 1, "168": 1, "171": 1, "174": 1, "177": 1, "180": 1, "224": 1, "252": 1, "253": 1, "288": 1, "293": 1, "300": 1, "305": 1, "312": 1, "344": 1, "368": 1, "393": 1, "415": 1, "419": 1, "424": 1, "425": 1, "450": 1, "489": 1, "50": 0, "51": 0, "52": 0, "53": 0, "55": 0, "56": 0, "58": 0, "59": 0, "60": 0, "61": 0, "62": 0, "63": 0, "64": 0, "68": 0, "72": 0, "76": 0, "80": 0, "83": 0, "98": 0, "99": 0, "100": 0, "101": 0, "102": 0, "103": 0, "104": 0, "105": 0, "107": 0, "126": 0, "128": 0, "129": 0, "130": 0, "131": 0, "133": 0, "134": 0, "135": 0, "136": 0, "138": 0, "139": 0, "141": 0, "149": 0, "150": 0, "151": 0, "154": 0, "157": 0, "160": 0, "163": 0, "166": 0, "169": 0, "172": 0, "175": 0, "178": 0, "207": 0, "208": 0, "211": 0, "212": 0, "213": 0, "214": 0, "217": 0, "219": 0, "221": 0, "222": 0, "250": 0, "255": 0, "256": 0, "259": 0, "260": 0, "263": 0, "264": 0, "265": 0, "266": 0, "268": 0, "270": 0, "274": 0, "275": 0, "276": 0, "277": 0, "279": 0, "281": 0, "283": 0, "284": 0, "285": 0, "286": 0, "290": 0, "291": 0, "295": 0, "298": 0, "302": 0, "303": 0, "307": 0, "308": 0, "309": 0, "310": 0, "324": 0, "325": 0, "326": 0, "327": 0, "329": 0, "330": 0, "332": 0, "333": 0, "335": 0, "336": 0, "337": 0, "339": 0, "340": 0, "342": 0, "359": 0, "360": 0, "361": 0, "362": 0, "363": 0, "364": 0, "366": 0, "383": 0, "384": 0, "385": 0, "386": 0, "387": 0, "388": 0, "389": 0, "391": 0, "410": 0, "411": 0, "412": 0, "413": 0, "416": 0, "417": 0, "421": 0, "422": 0, "441": 0, "443": 0, "446": 0, "447": 0, "448": 0, "464": 0, "465": 0, "467": 0, "470": 0, "471": 0, "472": 0, "474": 0, "475": 0, "478": 0, "480": 0, "481": 0, "482": 0, "484": 0, "485": 0, "487": 0, "524": 0, "525": 0, "526": 0, "527": 0, "528": 0, "530": 0, "531": 0, "532": 0, "534": 0, "535": 0, "536": 0, "538": 0, "539": 0, "542": 0, "544": 0, "545": 0, "546": 0, "547": 0, "548": 0, "550": 0, "551": 0}}
+ git checkout 768da1c6f6ec907524b8ebbf6bf818c92b56101b
Note: switching to '768da1c6f6ec907524b8ebbf6bf818c92b56101b'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at 768da1c6f6 Merge pull request #15347 from iamprayush/master
+ git apply /root/pre_state.patch
error: unrecognized input
