+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD 755dbf39fcdc491fe9b588358303e259c7750be4
+ sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen
+ locale-gen
Generating locales (this might take a while)...
  en_US.UTF-8... done
Generation complete.
+ export LANG=en_US.UTF-8
+ LANG=en_US.UTF-8
+ export LANGUAGE=en_US:en
+ LANGUAGE=en_US:en
+ export LC_ALL=en_US.UTF-8
+ LC_ALL=en_US.UTF-8
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
nothing to commit, working tree clean
+ git show
commit 755dbf39fcdc491fe9b588358303e259c7750be4
Author: Tim Graham <timograham@gmail.com>
Date:   Mon Sep 7 15:45:56 2020 -0400

    Replaced @no_oracle skips with DatabaseFeatures.allows_group_by_lob.

diff --git a/django/db/backends/base/features.py b/django/db/backends/base/features.py
index 0b315aac02..03c97e6691 100644
--- a/django/db/backends/base/features.py
+++ b/django/db/backends/base/features.py
@@ -4,6 +4,8 @@ from django.utils.functional import cached_property
 
 class BaseDatabaseFeatures:
     gis_enabled = False
+    # Oracle can't group by LOB (large object) data types.
+    allows_group_by_lob = True
     allows_group_by_pk = False
     allows_group_by_selected_pks = False
     empty_fetchmany_value = []
diff --git a/django/db/backends/oracle/features.py b/django/db/backends/oracle/features.py
index b0eebe5008..63d825f68a 100644
--- a/django/db/backends/oracle/features.py
+++ b/django/db/backends/oracle/features.py
@@ -4,6 +4,9 @@ from django.utils.functional import cached_property
 
 
 class DatabaseFeatures(BaseDatabaseFeatures):
+    # Oracle crashes with "ORA-00932: inconsistent datatypes: expected - got
+    # BLOB" when grouping by LOBs (#24096).
+    allows_group_by_lob = False
     interprets_empty_strings_as_nulls = True
     has_select_for_update = True
     has_select_for_update_nowait = True
diff --git a/tests/expressions_case/tests.py b/tests/expressions_case/tests.py
index 54c53ef4de..ec811ca511 100644
--- a/tests/expressions_case/tests.py
+++ b/tests/expressions_case/tests.py
@@ -5,6 +5,7 @@ from operator import attrgetter, itemgetter
 from uuid import UUID
 
 from django.core.exceptions import FieldError
+from django.db import connection
 from django.db.models import (
     BinaryField, BooleanField, Case, Count, DecimalField, F,
     GenericIPAddressField, IntegerField, Max, Min, Q, Sum, TextField, Value,
@@ -56,10 +57,13 @@ class CaseExpressionTests(TestCase):
         O2OCaseTestModel.objects.create(o2o=o, integer=1)
         FKCaseTestModel.objects.create(fk=o, integer=5)
 
-        # GROUP BY on Oracle fails with TextField/BinaryField; see #24096.
-        cls.non_lob_fields = [
+        cls.group_by_fields = [
             f.name for f in CaseTestModel._meta.get_fields()
-            if not (f.is_relation and f.auto_created) and not isinstance(f, (BinaryField, TextField))
+            if not (f.is_relation and f.auto_created) and
+            (
+                connection.features.allows_group_by_lob or
+                not isinstance(f, (BinaryField, TextField))
+            )
         ]
 
     def test_annotate(self):
@@ -197,7 +201,7 @@ class CaseExpressionTests(TestCase):
 
     def test_annotate_with_aggregation_in_value(self):
         self.assertQuerysetEqual(
-            CaseTestModel.objects.values(*self.non_lob_fields).annotate(
+            CaseTestModel.objects.values(*self.group_by_fields).annotate(
                 min=Min('fk_rel__integer'),
                 max=Max('fk_rel__integer'),
             ).annotate(
@@ -212,7 +216,7 @@ class CaseExpressionTests(TestCase):
 
     def test_annotate_with_aggregation_in_condition(self):
         self.assertQuerysetEqual(
-            CaseTestModel.objects.values(*self.non_lob_fields).annotate(
+            CaseTestModel.objects.values(*self.group_by_fields).annotate(
                 min=Min('fk_rel__integer'),
                 max=Max('fk_rel__integer'),
             ).annotate(
@@ -227,7 +231,7 @@ class CaseExpressionTests(TestCase):
 
     def test_annotate_with_aggregation_in_predicate(self):
         self.assertQuerysetEqual(
-            CaseTestModel.objects.values(*self.non_lob_fields).annotate(
+            CaseTestModel.objects.values(*self.group_by_fields).annotate(
                 max=Max('fk_rel__integer'),
             ).annotate(
                 test=Case(
@@ -483,7 +487,7 @@ class CaseExpressionTests(TestCase):
 
     def test_filter_with_aggregation_in_value(self):
         self.assertQuerysetEqual(
-            CaseTestModel.objects.values(*self.non_lob_fields).annotate(
+            CaseTestModel.objects.values(*self.group_by_fields).annotate(
                 min=Min('fk_rel__integer'),
                 max=Max('fk_rel__integer'),
             ).filter(
@@ -498,7 +502,7 @@ class CaseExpressionTests(TestCase):
 
     def test_filter_with_aggregation_in_condition(self):
         self.assertQuerysetEqual(
-            CaseTestModel.objects.values(*self.non_lob_fields).annotate(
+            CaseTestModel.objects.values(*self.group_by_fields).annotate(
                 min=Min('fk_rel__integer'),
                 max=Max('fk_rel__integer'),
             ).filter(
@@ -513,7 +517,7 @@ class CaseExpressionTests(TestCase):
 
     def test_filter_with_aggregation_in_predicate(self):
         self.assertQuerysetEqual(
-            CaseTestModel.objects.values(*self.non_lob_fields).annotate(
+            CaseTestModel.objects.values(*self.group_by_fields).annotate(
                 max=Max('fk_rel__integer'),
             ).filter(
                 integer=Case(
diff --git a/tests/gis_tests/geoapp/test_regress.py b/tests/gis_tests/geoapp/test_regress.py
index 661124dcba..674f19ba54 100644
--- a/tests/gis_tests/geoapp/test_regress.py
+++ b/tests/gis_tests/geoapp/test_regress.py
@@ -5,7 +5,6 @@ from django.contrib.gis.shortcuts import render_to_kmz
 from django.db.models import Count, Min
 from django.test import TestCase, skipUnlessDBFeature
 
-from ..utils import no_oracle
 from .models import City, PennsylvaniaCity, State, Truth
 
 
@@ -65,10 +64,7 @@ class GeoRegressionTests(TestCase):
         # .count() should not throw TypeError in __eq__
         self.assertEqual(cities_within_state.count(), 1)
 
-    # TODO: fix on Oracle -- get the following error because the SQL is ordered
-    # by a geometry object, which Oracle apparently doesn't like:
-    #  ORA-22901: cannot compare nested table or VARRAY or LOB attributes of an object type
-    @no_oracle
+    @skipUnlessDBFeature('allows_group_by_lob')
     def test_defer_or_only_with_annotate(self):
         "Regression for #16409. Make sure defer() and only() work with annotate()"
         self.assertIsInstance(list(City.objects.annotate(Count('point')).defer('name')), list)
diff --git a/tests/gis_tests/relatedapp/tests.py b/tests/gis_tests/relatedapp/tests.py
index 5f003b78f2..2b4a0b0ed0 100644
--- a/tests/gis_tests/relatedapp/tests.py
+++ b/tests/gis_tests/relatedapp/tests.py
@@ -222,10 +222,7 @@ class RelatedGeoModelTest(TestCase):
         self.assertIn('Aurora', names)
         self.assertIn('Kecksburg', names)
 
-    # TODO: fix on Oracle -- get the following error because the SQL is ordered
-    # by a geometry object, which Oracle apparently doesn't like:
-    #  ORA-22901: cannot compare nested table or VARRAY or LOB attributes of an object type
-    @no_oracle
+    @skipUnlessDBFeature('allows_group_by_lob')
     def test12a_count(self):
         "Testing `Count` aggregate on geo-fields."
         # The City, 'Fort Worth' uses the same location as Dallas.
@@ -247,10 +244,7 @@ class RelatedGeoModelTest(TestCase):
         self.assertEqual(1, len(vqs))
         self.assertEqual(3, vqs[0]['num_books'])
 
-    # TODO: fix on Oracle -- get the following error because the SQL is ordered
-    # by a geometry object, which Oracle apparently doesn't like:
-    #  ORA-22901: cannot compare nested table or VARRAY or LOB attributes of an object type
-    @no_oracle
+    @skipUnlessDBFeature('allows_group_by_lob')
     def test13c_count(self):
         "Testing `Count` aggregate with `.values()`.  See #15305."
         qs = Location.objects.filter(id=5).annotate(num_cities=Count('city')).values('id', 'point', 'num_cities')
diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py
index f45589e075..1c63d70bf9 100644
--- a/tests/model_fields/test_jsonfield.py
+++ b/tests/model_fields/test_jsonfield.py
@@ -355,7 +355,7 @@ class TestQuerying(TestCase):
             operator.itemgetter('key', 'count'),
         )
 
-    @skipIf(connection.vendor == 'oracle', "Oracle doesn't support grouping by LOBs, see #24096.")
+    @skipUnlessDBFeature('allows_group_by_lob')
     def test_ordering_grouping_by_count(self):
         qs = NullableJSONModel.objects.filter(
             value__isnull=False,
+ git diff 755dbf39fcdc491fe9b588358303e259c7750be4
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
Requirement already satisfied: asgiref>=3.2.10 in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.2) (3.4.1)
Requirement already satisfied: pytz in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.2) (2025.2)
Requirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.2) (0.4.4)
Requirement already satisfied: typing-extensions in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from asgiref>=3.2.10->Django==3.2) (4.1.1)
Installing collected packages: Django
  Attempting uninstall: Django
    Found existing installation: Django 3.2
    Uninstalling Django-3.2:
      Successfully uninstalled Django-3.2
  Running setup.py develop for Django
Successfully installed Django-3.2
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv
+ git apply -v -
Checking patch tests/test_coverup_django__django-13590.py...
Applied patch tests/test_coverup_django__django-13590.py cleanly.
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/db/models/sql/query\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-13590
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(django/db/models/sql/query\\.py)']
0.28 query.py(8): """
0.28 query.py(9): import copy
0.28 query.py(10): import difflib
0.28 query.py(11): import functools
0.28 query.py(12): import inspect
0.28 query.py(13): import sys
0.28 query.py(14): import warnings
0.28 query.py(15): from collections import Counter, namedtuple
0.28 query.py(16): from collections.abc import Iterator, Mapping
0.28 query.py(17): from itertools import chain, count, product
0.28 query.py(18): from string import ascii_uppercase
0.28 query.py(20): from django.core.exceptions import (
0.28 query.py(23): from django.db import DEFAULT_DB_ALIAS, NotSupportedError, connections
0.28 query.py(24): from django.db.models.aggregates import Count
0.28 query.py(25): from django.db.models.constants import LOOKUP_SEP
0.28 query.py(26): from django.db.models.expressions import BaseExpression, Col, F, OuterRef, Ref
0.28 query.py(27): from django.db.models.fields import Field
0.28 query.py(28): from django.db.models.fields.related_lookups import MultiColSource
0.28 query.py(29): from django.db.models.lookups import Lookup
0.28 query.py(30): from django.db.models.query_utils import (
0.28 query.py(33): from django.db.models.sql.constants import INNER, LOUTER, ORDER_DIR, SINGLE
0.28 query.py(34): from django.db.models.sql.datastructures import (
0.28 query.py(37): from django.db.models.sql.where import (
0.29 query.py(40): from django.utils.deprecation import RemovedInDjango40Warning
0.29 query.py(41): from django.utils.functional import cached_property
0.29 query.py(42): from django.utils.tree import Node
0.29 query.py(44): __all__ = ['Query', 'RawQuery']
0.29 query.py(47): def get_field_names_from_opts(opts):
0.29 query.py(54): def get_children_from_q(q):
0.29 query.py(62): JoinInfo = namedtuple(
0.29 query.py(63):     'JoinInfo',
0.29 query.py(64):     ('final_field', 'targets', 'opts', 'joins', 'path', 'transform_function')
0.29 query.py(68): class RawQuery:
0.29 query.py(68): class RawQuery:
0.29 query.py(69):     """A single raw SQL query."""
0.29 query.py(71):     def __init__(self, sql, using, params=None):
0.29 query.py(83):     def chain(self, using):
0.29 query.py(86):     def clone(self, using):
0.29 query.py(89):     def get_columns(self):
0.29 query.py(96):     def __iter__(self):
0.29 query.py(108):     def __repr__(self):
0.29 query.py(111):     @property
0.29 query.py(115):     def __str__(self):
0.29 query.py(118):     def _execute_query(self):
0.29 query.py(136): class Query(BaseExpression):
0.29 query.py(136): class Query(BaseExpression):
0.29 query.py(137):     """A single SQL query."""
0.29 query.py(139):     alias_prefix = 'T'
0.29 query.py(140):     subq_aliases = frozenset([alias_prefix])
0.29 query.py(142):     compiler = 'SQLCompiler'
0.29 query.py(144):     def __init__(self, model, where=WhereNode, alias_cols=True):
0.29 query.py(232):     @property
0.29 query.py(240):     @property
0.29 query.py(244):     @cached_property
0.29 query.py(249):     def __str__(self):
0.29 query.py(260):     def sql_with_params(self):
0.29 query.py(267):     def __deepcopy__(self, memo):
0.29 query.py(273):     def get_compiler(self, using=None, connection=None):
0.29 query.py(280):     def get_meta(self):
0.29 query.py(288):     def clone(self):
0.29 query.py(339):     def chain(self, klass=None):
0.29 query.py(354):     def relabeled_clone(self, change_map):
0.29 query.py(359):     def _get_col(self, target, field, alias):
0.29 query.py(364):     def rewrite_cols(self, annotation, col_cnt):
0.29 query.py(416):     def get_aggregation(self, using, added_aggregate_names):
0.29 query.py(511):     def get_count(self, using):
0.29 query.py(522):     def has_filters(self):
0.29 query.py(525):     def exists(self):
0.29 query.py(540):     def has_results(self, using):
0.29 query.py(545):     def explain(self, using, format=None, **options):
0.29 query.py(553):     def combine(self, rhs, connector):
0.29 query.py(654):     def deferred_to_data(self, target, callback):
0.29 query.py(740):     def table_alias(self, table_name, create=False, filtered_relation=None):
0.29 query.py(765):     def ref_alias(self, alias):
0.29 query.py(769):     def unref_alias(self, alias, amount=1):
0.29 query.py(773):     def promote_joins(self, aliases):
0.29 query.py(807):     def demote_joins(self, aliases):
0.29 query.py(826):     def reset_refcounts(self, to_counts):
0.29 query.py(835):     def change_aliases(self, change_map):
0.29 query.py(874):     def bump_prefix(self, outer_query):
0.29 query.py(923):     def get_initial_alias(self):
0.29 query.py(935):     def count_active_tables(self):
0.29 query.py(943):     def join(self, join, reuse=None, reuse_with_filtered_relation=False):
0.29 query.py(991):     def join_parent_model(self, opts, model, alias, seen):
0.29 query.py(1024):     def add_annotation(self, annotation, alias, is_summary=False, select=True):
0.29 query.py(1034):     def resolve_expression(self, query, *args, **kwargs):
0.29 query.py(1059):     def get_external_cols(self):
0.29 query.py(1066):     def as_sql(self, compiler, connection):
0.29 query.py(1072):     def resolve_lookup_value(self, value, can_reuse, allow_joins):
0.29 query.py(1086):     def solve_lookup_type(self, lookup):
0.29 query.py(1104):     def check_query_object_type(self, value, opts, field):
0.29 query.py(1115):     def check_related_objects(self, field, value, opts):
0.29 query.py(1135):     def check_filterable(self, expression):
0.29 query.py(1149):     def build_lookup(self, lookups, lhs, rhs):
0.29 query.py(1194):     def try_transform(self, lhs, name):
0.29 query.py(1216):                      reuse_with_filtered_relation=False, check_filterable=True):
0.29 query.py(1361):     def add_filter(self, filter_clause):
0.29 query.py(1364):     def add_q(self, q_object):
0.29 query.py(1381):     def build_where(self, filter_expr):
0.29 query.py(1386):                check_filterable=True):
0.29 query.py(1406):     def build_filtered_relation_q(self, q_object, reuse, branch_negated=False, current_negated=False):
0.29 query.py(1428):     def add_filtered_relation(self, filtered_relation, alias):
0.29 query.py(1457):     def names_to_path(self, names, opts, allow_many=True, fail_on_missing=False):
0.29 query.py(1561):                     reuse_with_filtered_relation=False):
0.29 query.py(1662):     def trim_joins(self, targets, joins, path):
0.29 query.py(1690):     @classmethod
0.29 query.py(1698):     @classmethod
0.29 query.py(1702):     def resolve_ref(self, name, allow_joins=True, reuse=None, summarize=False):
0.29 query.py(1743):     def split_exclude(self, filter_expr, can_reuse, names_with_path):
0.29 query.py(1816):     def set_empty(self):
0.29 query.py(1821):     def is_empty(self):
0.29 query.py(1824):     def set_limits(self, low=None, high=None):
0.29 query.py(1847):     def clear_limits(self):
0.29 query.py(1851):     @property
0.29 query.py(1855):     def has_limit_one(self):
0.29 query.py(1858):     def can_filter(self):
0.29 query.py(1866):     def clear_select_clause(self):
0.29 query.py(1874):     def clear_select_fields(self):
0.29 query.py(1883):     def add_select_col(self, col):
0.29 query.py(1887):     def set_select(self, cols):
0.29 query.py(1891):     def add_distinct_fields(self, *field_names):
0.29 query.py(1898):     def add_fields(self, field_names, allow_m2m=True):
0.29 query.py(1941):     def add_ordering(self, *ordering):
0.29 query.py(1987):     def clear_ordering(self, force_empty):
0.29 query.py(1997):     def set_group_by(self, allow_aliases=True):
0.29 query.py(2038):     def add_select_related(self, fields):
0.29 query.py(2054):     def add_extra(self, select, select_params, where, params, tables, order_by):
0.29 query.py(2086):     def clear_deferred_loading(self):
0.29 query.py(2090):     def add_deferred_loading(self, field_names):
0.29 query.py(2110):     def add_immediate_loading(self, field_names):
0.29 query.py(2134):     def get_loaded_field_names(self):
0.29 query.py(2153):     def get_loaded_field_names_cb(self, target, model, fields):
0.29 query.py(2157):     def set_annotation_mask(self, names):
test_named_tuple_causes_type_error (test_coverup_django__django-13590.ResolveLookupValueTest) ... 0.29 query.py(2165):     def append_annotation_mask(self, names):
0.29 query.py(2169):     def set_extra_mask(self, names):
0.29 query.py(2180):     def set_values(self, fields):
0.29 query.py(2227):     @property
0.29 query.py(2246):     @property
0.29 query.py(2261):     def trim_start(self, names_with_path):
0.29 query.py(2335):     def is_nullable(self, field):
0.29 query.py(2354): def get_order_dir(field, default='ASC'):
0.29 query.py(2368): def add_to_dict(data, key, value):
0.29 query.py(2379): def is_reverse_o2o(field):
0.29 query.py(2387): class JoinPromoter:
0.29 query.py(2387): class JoinPromoter:
0.29 query.py(2391):     """
0.29 query.py(2393):     def __init__(self, connector, num_children, negated):
0.29 query.py(2408):     def add_votes(self, votes):
0.29 query.py(2415):     def update_join_types(self, query):
Testing against Django installed in '/testbed/django'
Skipping setup of unused database(s): default, other.
System check identified no issues (0 silenced).
0.68 query.py(145):         self.model = model
0.68 query.py(146):         self.alias_refcount = {}
0.68 query.py(152):         self.alias_map = {}
0.68 query.py(154):         self.alias_cols = alias_cols
0.68 query.py(159):         self.external_aliases = {}
0.68 query.py(160):         self.table_map = {}     # Maps table names to list of aliases.
0.68 query.py(161):         self.default_cols = True
0.68 query.py(162):         self.default_ordering = True
0.68 query.py(163):         self.standard_ordering = True
0.68 query.py(164):         self.used_aliases = set()
0.68 query.py(165):         self.filter_is_sticky = False
0.68 query.py(166):         self.subquery = False
0.68 query.py(174):         self.select = ()
0.68 query.py(175):         self.where = where()
0.68 query.py(176):         self.where_class = where
0.68 query.py(183):         self.group_by = None
0.68 query.py(184):         self.order_by = ()
0.68 query.py(185):         self.low_mark, self.high_mark = 0, None  # Used for offset/limit
0.68 query.py(186):         self.distinct = False
0.68 query.py(187):         self.distinct_fields = ()
0.68 query.py(188):         self.select_for_update = False
0.68 query.py(189):         self.select_for_update_nowait = False
0.68 query.py(190):         self.select_for_update_skip_locked = False
0.68 query.py(191):         self.select_for_update_of = ()
0.68 query.py(192):         self.select_for_no_key_update = False
0.68 query.py(194):         self.select_related = False
0.68 query.py(196):         self.max_depth = 5
0.68 query.py(200):         self.values_select = ()
0.68 query.py(203):         self.annotations = {}  # Maps alias -> Annotation Expression
0.68 query.py(204):         self.annotation_select_mask = None
0.68 query.py(205):         self._annotation_select_cache = None
0.68 query.py(208):         self.combinator = None
0.68 query.py(209):         self.combinator_all = False
0.68 query.py(210):         self.combined_queries = ()
0.68 query.py(214):         self.extra = {}  # Maps col_alias -> (col_sql, params).
0.68 query.py(215):         self.extra_select_mask = None
0.68 query.py(216):         self._extra_select_cache = None
0.68 query.py(218):         self.extra_tables = ()
0.68 query.py(219):         self.extra_order_by = ()
0.68 query.py(224):         self.deferred_loading = (frozenset(), True)
0.68 query.py(226):         self._filtered_relations = {}
0.68 query.py(228):         self.explain_query = False
0.68 query.py(229):         self.explain_format = None
0.68 query.py(230):         self.explain_options = {}
0.68 query.py(1073):         if hasattr(value, 'resolve_expression'):
0.68 query.py(1077):         elif isinstance(value, (list, tuple)):
0.68 query.py(1080):             return type(value)(
0.68 query.py(1081):                 self.resolve_lookup_value(sub_value, can_reuse, allow_joins)
0.68 query.py(1082):                 for sub_value in value
FAIL

======================================================================
FAIL: test_named_tuple_causes_type_error (test_coverup_django__django-13590.ResolveLookupValueTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "./tests/test_coverup_django__django-13590.py", line 21, in test_named_tuple_causes_type_error
    query_instance.resolve_lookup_value(point_instance, can_reuse=None, allow_joins=True)
TypeError: __new__() missing 1 required positional argument: 'far'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "./tests/test_coverup_django__django-13590.py", line 24, in test_named_tuple_causes_type_error
    self.fail(f"TypeError was raised: {e}")
AssertionError: TypeError was raised: __new__() missing 1 required positional argument: 'far'

----------------------------------------------------------------------
Ran 1 test in 0.001s

FAILED (failures=1)
+ cat coverage.cover
{"/testbed/django/db/models/sql/query.py": {"9": 1, "10": 1, "11": 1, "12": 1, "13": 1, "14": 1, "15": 1, "16": 1, "17": 1, "18": 1, "20": 1, "23": 1, "24": 1, "25": 1, "26": 1, "27": 1, "28": 1, "29": 1, "30": 1, "33": 1, "34": 1, "37": 1, "40": 1, "41": 1, "42": 1, "44": 1, "47": 1, "54": 1, "62": 1, "63": 1, "64": 1, "68": 2, "136": 2, "2354": 1, "2368": 1, "2379": 1, "2387": 2, "48": 0, "49": 0, "50": 0, "55": 0, "56": 0, "57": 0, "59": 0, "71": 1, "83": 1, "86": 1, "89": 1, "96": 1, "108": 1, "111": 1, "115": 1, "118": 1, "72": 0, "73": 0, "74": 0, "75": 0, "79": 0, "80": 0, "81": 0, "84": 0, "87": 0, "90": 0, "91": 0, "92": 0, "93": 0, "94": 0, "99": 0, "100": 0, "103": 0, "105": 0, "106": 0, "109": 0, "113": 0, "116": 0, "119": 0, "123": 0, "124": 0, "125": 0, "126": 0, "127": 0, "128": 0, "130": 0, "132": 0, "133": 0, "139": 1, "140": 1, "142": 1, "144": 1, "232": 1, "240": 1, "244": 1, "249": 1, "260": 1, "267": 1, "273": 1, "280": 1, "288": 1, "339": 1, "354": 1, "359": 1, "364": 1, "416": 1, "511": 1, "522": 1, "525": 1, "540": 1, "545": 1, "553": 1, "654": 1, "740": 1, "765": 1, "769": 1, "773": 1, "807": 1, "826": 1, "835": 1, "874": 1, "923": 1, "935": 1, "943": 1, "991": 1, "1024": 1, "1034": 1, "1059": 1, "1066": 1, "1072": 1, "1086": 1, "1104": 1, "1115": 1, "1135": 1, "1149": 1, "1194": 1, "1216": 1, "1361": 1, "1364": 1, "1381": 1, "1386": 1, "1406": 1, "1428": 1, "1457": 1, "1561": 1, "1662": 1, "1690": 1, "1698": 1, "1702": 1, "1743": 1, "1816": 1, "1821": 1, "1824": 1, "1847": 1, "1851": 1, "1855": 1, "1858": 1, "1866": 1, "1874": 1, "1883": 1, "1887": 1, "1891": 1, "1898": 1, "1941": 1, "1987": 1, "1997": 1, "2038": 1, "2054": 1, "2086": 1, "2090": 1, "2110": 1, "2134": 1, "2153": 1, "2157": 1, "2165": 1, "2169": 1, "2180": 1, "2227": 1, "2246": 1, "2261": 1, "2335": 1, "145": 1, "146": 1, "152": 1, "154": 1, "159": 1, "160": 1, "161": 1, "162": 1, "163": 1, "164": 1, "165": 1, "166": 1, "174": 1, "175": 1, "176": 1, "183": 1, "184": 1, "185": 1, "186": 1, "187": 1, "188": 1, "189": 1, "190": 1, "191": 1, "192": 1, "194": 1, "196": 1, "200": 1, "203": 1, "204": 1, "205": 1, "208": 1, "209": 1, "210": 1, "214": 1, "215": 1, "216": 1, "218": 1, "219": 1, "224": 1, "226": 1, "228": 1, "229": 1, "230": 1, "234": 0, "235": 0, "236": 0, "237": 0, "238": 0, "242": 0, "246": 0, "247": 0, "257": 0, "258": 0, "265": 0, "269": 0, "270": 0, "271": 0, "274": 0, "275": 0, "276": 0, "277": 0, "278": 0, "286": 0, "293": 0, "294": 0, "296": 0, "298": 0, "299": 0, "300": 0, "301": 0, "302": 0, "303": 0, "304": 0, "305": 0, "307": 0, "308": 0, "314": 0, "315": 0, "316": 0, "317": 0, "319": 0, "320": 0, "321": 0, "323": 0, "324": 0, "327": 0, "328": 0, "329": 0, "330": 0, "331": 0, "333": 0, "334": 0, "335": 0, "336": 0, "337": 0, "344": 0, "345": 0, "346": 0, "347": 0, "348": 0, "349": 0, "350": 0, "351": 0, "352": 0, "355": 0, "356": 0, "357": 0, "360": 0, "361": 0, "362": 0, "376": 0, "377": 0, "378": 0, "382": 0, "385": 0, "386": 0, "390": 0, "391": 0, "394": 0, "395": 0, "396": 0, "397": 0, "400": 0, "403": 0, "404": 0, "405": 0, "406": 0, "407": 0, "411": 0, "412": 0, "413": 0, "414": 0, "420": 0, "421": 0, "423": 0, "424": 0, "438": 0, "439": 0, "440": 0, "441": 0, "442": 0, "443": 0, "444": 0, "445": 0, "446": 0, "450": 0, "451": 0, "457": 0, "458": 0, "461": 0, "462": 0, "463": 0, "465": 0, "466": 0, "469": 0, "470": 0, "471": 0, "472": 0, "473": 0, "474": 0, "475": 0, "476": 0, "478": 0, "479": 0, "483": 0, "484": 0, "485": 0, "486": 0, "487": 0, "489": 0, "492": 0, "493": 0, "494": 0, "495": 0, "497": 0, "498": 0, "499": 0, "500": 0, "501": 0, "502": 0, "503": 0, "504": 0, "506": 0, "507": 0, "509": 0, "425": 0, "459": 0, "515": 0, "516": 0, "517": 0, "518": 0, "519": 0, "520": 0, "523": 0, "526": 0, "527": 0, "528": 0, "529": 0, "532": 0, "533": 0, "534": 0, "535": 0, "536": 0, "537": 0, "538": 0, "541": 0, "542": 0, "543": 0, "546": 0, "547": 0, "548": 0, "549": 0, "550": 0, "551": 0, "562": 0, "563": 0, "564": 0, "565": 0, "566": 0, "567": 0, "568": 0, "569": 0, "572": 0, "573": 0, "587": 0, "590": 0, "591": 0, "592": 0, "593": 0, "594": 0, "597": 0, "598": 0, "599": 0, "602": 0, "603": 0, "604": 0, "605": 0, "609": 0, "610": 0, "611": 0, "612": 0, "617": 0, "618": 0, "619": 0, "623": 0, "624": 0, "625": 0, "628": 0, "629": 0, "631": 0, "633": 0, "637": 0, "638": 0, "639": 0, "640": 0, "641": 0, "642": 0, "643": 0, "644": 0, "645": 0, "646": 0, "647": 0, "651": 0, "652": 0, "668": 0, "669": 0, "670": 0, "671": 0, "672": 0, "673": 0, "674": 0, "675": 0, "676": 0, "677": 0, "678": 0, "679": 0, "680": 0, "681": 0, "682": 0, "683": 0, "684": 0, "686": 0, "687": 0, "691": 0, "692": 0, "693": 0, "694": 0, "695": 0, "696": 0, "697": 0, "698": 0, "699": 0, "700": 0, "701": 0, "703": 0, "708": 0, "709": 0, "710": 0, "711": 0, "712": 0, "713": 0, "714": 0, "719": 0, "720": 0, "721": 0, "722": 0, "724": 0, "725": 0, "726": 0, "731": 0, "735": 0, "736": 0, "737": 0, "738": 0, "748": 0, "749": 0, "750": 0, "751": 0, "752": 0, "755": 0, "756": 0, "757": 0, "760": 0, "761": 0, "762": 0, "763": 0, "767": 0, "771": 0, "784": 0, "785": 0, "786": 0, "787": 0, "791": 0, "793": 0, "794": 0, "795": 0, "796": 0, "797": 0, "798": 0, "799": 0, "802": 0, "803": 0, "804": 0, "817": 0, "818": 0, "819": 0, "820": 0, "821": 0, "822": 0, "823": 0, "824": 0, "831": 0, "832": 0, "833": 0, "841": 0, "845": 0, "846": 0, "847": 0, "848": 0, "849": 0, "850": 0, "854": 0, "855": 0, "856": 0, "857": 0, "858": 0, "859": 0, "860": 0, "861": 0, "863": 0, "864": 0, "865": 0, "866": 0, "867": 0, "868": 0, "871": 0, "881": 0, "899": 0, "901": 0, "907": 0, "908": 0, "909": 0, "910": 0, "911": 0, "912": 0, "913": 0, "914": 0, "916": 0, "917": 0, "918": 0, "920": 0, "890": 0, "891": 0, "892": 0, "893": 0, "894": 0, "895": 0, "896": 0, "897": 0, "928": 0, "929": 0, "930": 0, "932": 0, "933": 0, "941": 0, "959": 0, "961": 0, "966": 0, "969": 0, "970": 0, "971": 0, "975": 0, "976": 0, "977": 0, "980": 0, "981": 0, "982": 0, "983": 0, "985": 0, "986": 0, "987": 0, "988": 0, "989": 0, "962": 0, "967": 0, "1000": 0, "1001": 0, "1002": 0, "1003": 0, "1004": 0, "1005": 0, "1006": 0, "1007": 0, "1008": 0, "1009": 0, "1010": 0, "1015": 0, "1016": 0, "1017": 0, "1018": 0, "1019": 0, "1020": 0, "1021": 0, "1022": 0, "1026": 0, "1027": 0, "1028": 0, "1029": 0, "1031": 0, "1032": 0, "1035": 0, "1037": 0, "1038": 0, "1041": 0, "1042": 0, "1043": 0, "1044": 0, "1045": 0, "1046": 0, "1047": 0, "1048": 0, "1049": 0, "1050": 0, "1052": 0, "1054": 0, "1055": 0, "1057": 0, "1060": 0, "1062": 0, "1063": 0, "1067": 0, "1068": 0, "1069": 0, "1070": 0, "1073": 1, "1074": 0, "1075": 0, "1077": 1, "1080": 1, "1081": 1, "1082": 1, "1084": 0, "1090": 0, "1091": 0, "1092": 0, "1093": 0, "1094": 0, "1095": 0, "1096": 0, "1097": 0, "1098": 0, "1099": 0, "1100": 0, "1102": 0, "1109": 0, "1110": 0, "1111": 0, "1112": 0, "1113": 0, "1117": 0, "1123": 0, "1124": 0, "1125": 0, "1126": 0, "1127": 0, "1129": 0, "1130": 0, "1131": 0, "1132": 0, "1133": 0, "1138": 0, "1139": 0, "1141": 0, "1142": 0, "1145": 0, "1146": 0, "1147": 0, "1159": 0, "1160": 0, "1161": 0, "1164": 0, "1165": 0, "1166": 0, "1167": 0, "1170": 0, "1171": 0, "1172": 0, "1173": 0, "1174": 0, "1176": 0, "1179": 0, "1180": 0, "1181": 0, "1182": 0, "1188": 0, "1189": 0, "1190": 0, "1192": 0, "1199": 0, "1200": 0, "1201": 0, "1203": 0, "1204": 0, "1205": 0, "1206": 0, "1208": 0, "1209": 0, "1210": 0, "1211": 0, "1245": 0, "1246": 0, "1247": 0, "1248": 0, "1249": 0, "1250": 0, "1251": 0, "1252": 0, "1253": 0, "1254": 0, "1255": 0, "1257": 0, "1258": 0, "1259": 0, "1260": 0, "1261": 0, "1263": 0, "1264": 0, "1265": 0, "1266": 0, "1267": 0, "1268": 0, "1269": 0, "1271": 0, "1272": 0, "1274": 0, "1275": 0, "1277": 0, "1278": 0, "1279": 0, "1281": 0, "1282": 0, "1284": 0, "1285": 0, "1286": 0, "1287": 0, "1288": 0, "1290": 0, "1291": 0, "1292": 0, "1294": 0, "1295": 0, "1296": 0, "1297": 0, "1301": 0, "1302": 0, "1303": 0, "1307": 0, "1308": 0, "1309": 0, "1313": 0, "1314": 0, "1315": 0, "1316": 0, "1318": 0, "1320": 0, "1321": 0, "1322": 0, "1323": 0, "1324": 0, "1326": 0, "1328": 0, "1330": 0, "1331": 0, "1332": 0, "1334": 0, "1335": 0, "1336": 0, "1337": 0, "1348": 0, "1349": 0, "1351": 0, "1352": 0, "1353": 0, "1356": 0, "1357": 0, "1358": 0, "1359": 0, "1362": 0, "1375": 0, "1376": 0, "1377": 0, "1378": 0, "1379": 0, "1382": 0, "1388": 0, "1389": 0, "1390": 0, "1391": 0, "1392": 0, "1393": 0, "1394": 0, "1395": 0, "1396": 0, "1397": 0, "1398": 0, "1400": 0, "1401": 0, "1402": 0, "1403": 0, "1404": 0, "1408": 0, "1409": 0, "1410": 0, "1411": 0, "1412": 0, "1413": 0, "1414": 0, "1415": 0, "1416": 0, "1419": 0, "1420": 0, "1421": 0, "1422": 0, "1423": 0, "1425": 0, "1426": 0, "1429": 0, "1430": 0, "1431": 0, "1432": 0, "1433": 0, "1434": 0, "1435": 0, "1437": 0, "1438": 0, "1439": 0, "1440": 0, "1441": 0, "1442": 0, "1443": 0, "1444": 0, "1445": 0, "1447": 0, "1450": 0, "1451": 0, "1453": 0, "1455": 0, "1472": 0, "1473": 0, "1474": 0, "1475": 0, "1476": 0, "1478": 0, "1479": 0, "1480": 0, "1481": 0, "1482": 0, "1483": 0, "1484": 0, "1485": 0, "1486": 0, "1487": 0, "1488": 0, "1489": 0, "1490": 0, "1492": 0, "1494": 0, "1495": 0, "1499": 0, "1500": 0, "1501": 0, "1504": 0, "1506": 0, "1507": 0, "1508": 0, "1511": 0, "1515": 0, "1516": 0, "1517": 0, "1518": 0, "1519": 0, "1520": 0, "1522": 0, "1523": 0, "1524": 0, "1528": 0, "1529": 0, "1530": 0, "1531": 0, "1532": 0, "1533": 0, "1534": 0, "1535": 0, "1536": 0, "1537": 0, "1538": 0, "1539": 0, "1540": 0, "1541": 0, "1542": 0, "1543": 0, "1544": 0, "1545": 0, "1546": 0, "1547": 0, "1548": 0, "1551": 0, "1552": 0, "1553": 0, "1554": 0, "1555": 0, "1556": 0, "1557": 0, "1558": 0, "1592": 0, "1598": 0, "1603": 0, "1604": 0, "1605": 0, "1606": 0, "1607": 0, "1609": 0, "1610": 0, "1613": 0, "1615": 0, "1619": 0, "1620": 0, "1621": 0, "1622": 0, "1632": 0, "1636": 0, "1637": 0, "1638": 0, "1639": 0, "1641": 0, "1642": 0, "1643": 0, "1644": 0, "1645": 0, "1647": 0, "1648": 0, "1649": 0, "1650": 0, "1652": 0, "1653": 0, "1654": 0, "1655": 0, "1657": 0, "1658": 0, "1659": 0, "1660": 0, "1599": 0, "1623": 0, "1624": 0, "1625": 0, "1626": 0, "1628": 0, "1629": 0, "1631": 0, "1675": 0, "1676": 0, "1677": 0, "1678": 0, "1679": 0, "1680": 0, "1681": 0, "1682": 0, "1683": 0, "1684": 0, "1685": 0, "1686": 0, "1687": 0, "1688": 0, "1692": 0, "1693": 0, "1694": 0, "1696": 0, "1700": 0, "1703": 0, "1704": 0, "1705": 0, "1706": 0, "1707": 0, "1708": 0, "1709": 0, "1710": 0, "1711": 0, "1714": 0, "1719": 0, "1720": 0, "1721": 0, "1722": 0, "1724": 0, "1726": 0, "1728": 0, "1729": 0, "1730": 0, "1731": 0, "1732": 0, "1733": 0, "1734": 0, "1738": 0, "1739": 0, "1740": 0, "1741": 0, "1762": 0, "1763": 0, "1764": 0, "1765": 0, "1766": 0, "1768": 0, "1769": 0, "1770": 0, "1771": 0, "1774": 0, "1780": 0, "1781": 0, "1782": 0, "1783": 0, "1784": 0, "1785": 0, "1786": 0, "1787": 0, "1788": 0, "1791": 0, "1792": 0, "1795": 0, "1796": 0, "1797": 0, "1798": 0, "1800": 0, "1801": 0, "1802": 0, "1803": 0, "1804": 0, "1805": 0, "1806": 0, "1807": 0, "1814": 0, "1817": 0, "1818": 0, "1819": 0, "1822": 0, "1833": 0, "1834": 0, "1835": 0, "1837": 0, "1838": 0, "1839": 0, "1840": 0, "1842": 0, "1844": 0, "1845": 0, "1849": 0, "1853": 0, "1856": 0, "1864": 0, "1868": 0, "1869": 0, "1870": 0, "1871": 0, "1872": 0, "1880": 0, "1881": 0, "1884": 0, "1885": 0, "1888": 0, "1889": 0, "1895": 0, "1896": 0, "1903": 0, "1904": 0, "1906": 0, "1907": 0, "1908": 0, "1911": 0, "1912": 0, "1913": 0, "1914": 0, "1915": 0, "1917": 0, "1918": 0, "1919": 0, "1920": 0, "1921": 0, "1922": 0, "1923": 0, "1924": 0, "1927": 0, "1928": 0, "1929": 0, "1930": 0, "1931": 0, "1934": 0, "1935": 0, "1936": 0, "1938": 0, "1939": 0, "1950": 0, "1951": 0, "1952": 0, "1953": 0, "1954": 0, "1955": 0, "1957": 0, "1958": 0, "1959": 0, "1961": 0, "1962": 0, "1963": 0, "1964": 0, "1965": 0, "1966": 0, "1967": 0, "1968": 0, "1969": 0, "1972": 0, "1973": 0, "1974": 0, "1975": 0, "1976": 0, "1977": 0, "1978": 0, "1980": 0, "1981": 0, "1982": 0, "1983": 0, "1985": 0, "1992": 0, "1993": 0, "1994": 0, "1995": 0, "2007": 0, "2008": 0, "2009": 0, "2010": 0, "2011": 0, "2012": 0, "2013": 0, "2015": 0, "2017": 0, "2019": 0, "2020": 0, "2021": 0, "2022": 0, "2023": 0, "2024": 0, "2026": 0, "2028": 0, "2029": 0, "2030": 0, "2032": 0, "2033": 0, "2034": 0, "2035": 0, "2036": 0, "2044": 0, "2045": 0, "2047": 0, "2048": 0, "2049": 0, "2050": 0, "2051": 0, "2052": 0, "2059": 0, "2064": 0, "2065": 0, "2066": 0, "2068": 0, "2069": 0, "2070": 0, "2071": 0, "2072": 0, "2073": 0, "2074": 0, "2075": 0, "2076": 0, "2077": 0, "2078": 0, "2079": 0, "2080": 0, "2081": 0, "2082": 0, "2083": 0, "2084": 0, "2088": 0, "2102": 0, "2103": 0, "2105": 0, "2108": 0, "2120": 0, "2121": 0, "2122": 0, "2123": 0, "2124": 0, "2126": 0, "2129": 0, "2132": 0, "2145": 0, "2146": 0, "2147": 0, "2148": 0, "2149": 0, "2150": 0, "2151": 0, "2155": 0, "2159": 0, "2160": 0, "2162": 0, "2163": 0, "2166": 0, "2167": 0, "2174": 0, "2175": 0, "2177": 0, "2178": 0, "2181": 0, "2182": 0, "2183": 0, "2185": 0, "2186": 0, "2187": 0, "2188": 0, "2189": 0, "2192": 0, "2194": 0, "2195": 0, "2196": 0, "2197": 0, "2198": 0, "2199": 0, "2201": 0, "2202": 0, "2203": 0, "2205": 0, "2208": 0, "2209": 0, "2212": 0, "2213": 0, "2214": 0, "2217": 0, "2218": 0, "2219": 0, "2220": 0, "2221": 0, "2222": 0, "2224": 0, "2225": 0, "2233": 0, "2234": 0, "2235": 0, "2236": 0, "2237": 0, "2238": 0, "2239": 0, "2242": 0, "2244": 0, "2240": 0, "2248": 0, "2249": 0, "2250": 0, "2251": 0, "2252": 0, "2253": 0, "2254": 0, "2257": 0, "2259": 0, "2255": 0, "2274": 0, "2275": 0, "2276": 0, "2277": 0, "2282": 0, "2285": 0, "2286": 0, "2287": 0, "2288": 0, "2289": 0, "2290": 0, "2291": 0, "2293": 0, "2295": 0, "2296": 0, "2297": 0, "2298": 0, "2299": 0, "2300": 0, "2301": 0, "2302": 0, "2303": 0, "2304": 0, "2311": 0, "2312": 0, "2313": 0, "2314": 0, "2315": 0, "2316": 0, "2317": 0, "2318": 0, "2319": 0, "2324": 0, "2325": 0, "2328": 0, "2329": 0, "2330": 0, "2331": 0, "2332": 0, "2333": 0, "2283": 0, "2349": 0, "2350": 0, "2351": 0, "2362": 0, "2363": 0, "2364": 0, "2365": 0, "2373": 0, "2374": 0, "2376": 0, "2384": 0, "2393": 1, "2408": 1, "2415": 1, "2394": 0, "2395": 0, "2396": 0, "2397": 0, "2398": 0, "2400": 0, "2402": 0, "2403": 0, "2406": 0, "2413": 0, "2422": 0, "2423": 0, "2426": 0, "2437": 0, "2438": 0, "2449": 0, "2450": 0, "2451": 0, "2467": 0, "2468": 0, "2469": 0}}
+ git checkout 755dbf39fcdc491fe9b588358303e259c7750be4
Note: switching to '755dbf39fcdc491fe9b588358303e259c7750be4'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at 755dbf39fc Replaced @no_oracle skips with DatabaseFeatures.allows_group_by_lob.
+ git apply /root/pre_state.patch
error: unrecognized input
