{"instance_id": "django__django-13933", "repo": "django/django", "version": "4.0", "environment_setup_commit": "475cffd1d64c690cdad16ede4d5e81985738ceb4", "patch_list": ["diff --git a/dev/null b/tests/test_coverup_django__django-13933.py\nnew file mode 100644\nindex e69de29..bb31c5c 100644\n--- /dev/null\n+++ b/tests/test_coverup_django__django-13933.py\n@@ -0,0 +1,35 @@\n+from django.test import SimpleTestCase\n+from django.core.exceptions import ValidationError\n+from django.forms import ModelChoiceField\n+from django.db import models\n+\n+# Define a simple model for testing\n+class TestModel(models.Model):\n+    name = models.CharField(max_length=100)\n+\n+    class Meta:\n+        app_label = 'test'\n+\n+class ModelChoiceFieldTest(SimpleTestCase):\n+    def setUp(self):\n+        # Create a queryset with a single valid choice\n+        self.queryset = TestModel.objects.all()\n+\n+    def test_invalid_choice_includes_value_in_error_message(self):\n+        # Initialize ModelChoiceField with the queryset\n+        field = ModelChoiceField(queryset=self.queryset)\n+\n+        # Invalid choice value\n+        invalid_choice = 'invalid_choice_value'\n+\n+        # Attempt to convert the invalid choice to a Python object\n+        with self.assertRaises(ValidationError) as cm:\n+            field.to_python(invalid_choice)\n+\n+        # Capture the ValidationError\n+        e = cm.exception\n+\n+        # Assert that the ValidationError is raised\n+        self.assertEqual(e.code, 'invalid_choice')\n+        # Assert that the error message includes the invalid choice value\n+        self.assertIn(invalid_choice, e.message % {'value': invalid_choice})\n"], "arch": "x86_64", "base_commit": "42e8cf47c7ee2db238bf91197ea398126c546741", "test_directives": ["test_coverup_django__django-13933"], "coverage_files": ["django/forms/models.py"], "env_name": "testbed", "run_id": "assertflip", "patch_id": "pred_pre__AssertFlip", "timeout": 1800, "rm_image": false, "force_rebuild": false, "exec_mode": "unit_test", "reproduction_script_name": null, "compute_coverage": true, "install": {"python": "3.8", "packages": "requirements.txt", "install": "python -m pip install -e ."}, "cache_level": "instance", "test_command": "python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/forms/models\\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-13933", "req_install_commands": ["conda create -n testbed python=3.8 -y", "cat <<'EOF_59812759871' > $HOME/requirements.txt\nasgiref >= 3.3.2\nargon2-cffi >= 16.1.0\nbackports.zoneinfo; python_version < '3.9'\nbcrypt\ndocutils\ngeoip2\njinja2 >= 2.9.2\nnumpy\nPillow >= 6.2.0\npylibmc; sys.platform != 'win32'\npymemcache >= 3.4.0\npython-memcached >= 1.59\npytz\npywatchman; sys.platform != 'win32'\nPyYAML\nredis >= 3.0.0\nselenium\nsqlparse >= 0.2.2\ntblib >= 1.5.0\ntzdata\ncolorama; sys.platform == 'win32'\n\nEOF_59812759871", "conda activate testbed && python -m pip install -r $HOME/requirements.txt", "rm $HOME/requirements.txt"]}