+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD 6efc35b4fe3009666e56a60af0675d7d532bf4ff
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
nothing to commit, working tree clean
+ git show
commit 6efc35b4fe3009666e56a60af0675d7d532bf4ff
Author: Nick Pope <nick@nickpope.me.uk>
Date:   Tue Mar 23 09:45:58 2021 +0000

    Optimized django.utils.text.capfirst().
    
    Unconditionally coercing to str type twice is expensive.

diff --git a/django/utils/text.py b/django/utils/text.py
index 2b1be6c2b1..7cc388f7fe 100644
--- a/django/utils/text.py
+++ b/django/utils/text.py
@@ -12,7 +12,11 @@ from django.utils.translation import gettext as _, gettext_lazy, pgettext
 @keep_lazy_text
 def capfirst(x):
     """Capitalize the first letter of a string."""
-    return x and str(x)[0].upper() + str(x)[1:]
+    if not x:
+        return x
+    if not isinstance(x, str):
+        x = str(x)
+    return x[0].upper() + x[1:]
 
 
 # Set up regular expressions
+ git diff 6efc35b4fe3009666e56a60af0675d7d532bf4ff
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Checking if build backend supports build_editable: started
  Checking if build backend supports build_editable: finished with status 'done'
  Getting requirements to build editable: started
  Getting requirements to build editable: finished with status 'done'
  Preparing editable metadata (pyproject.toml): started
  Preparing editable metadata (pyproject.toml): finished with status 'done'
Requirement already satisfied: asgiref>=3.2.10 in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from Django==4.0) (3.8.1)
Requirement already satisfied: pytz in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from Django==4.0) (2025.2)
Requirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from Django==4.0) (0.5.3)
Requirement already satisfied: typing-extensions>=4 in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from asgiref>=3.2.10->Django==4.0) (4.13.2)
Building wheels for collected packages: Django
  Building editable for Django (pyproject.toml): started
  Building editable for Django (pyproject.toml): finished with status 'done'
  Created wheel for Django: filename=django-4.0-0.editable-py3-none-any.whl size=25589 sha256=f24d3444f8a726d3e057e4fc5f8c246ad670522a6fc6d3691f3e335edad143fa
  Stored in directory: /tmp/pip-ephem-wheel-cache-mvrn01va/wheels/b2/50/f1/218f2e9962a80d01a4b1297698978f9fb3b60056aa24343f24
Successfully built Django
Installing collected packages: Django
  Attempting uninstall: Django
    Found existing installation: Django 4.0
    Uninstalling Django-4.0:
      Successfully uninstalled Django-4.0
Successfully installed Django-4.0
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable.It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git apply -v -
Checking patch tests/test_coverup_django__django-14170.py...
Applied patch tests/test_coverup_django__django-14170.py cleanly.
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/db/models/lookups\.py|django/db/backends/base/operations\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-14170
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(django/db/models/lookups\\.py|django/db/backends/base/operations\\.py)']
0.35 lookups.py(1): import itertools
0.35 lookups.py(2): import math
0.35 lookups.py(3): from copy import copy
0.35 lookups.py(5): from django.core.exceptions import EmptyResultSet
0.35 lookups.py(6): from django.db.models.expressions import Case, Exists, Func, Value, When
0.35 lookups.py(7): from django.db.models.fields import (
0.35 lookups.py(10): from django.db.models.query_utils import RegisterLookupMixin
0.35 lookups.py(11): from django.utils.datastructures import OrderedSet
0.35 lookups.py(12): from django.utils.functional import cached_property
0.35 lookups.py(13): from django.utils.hashable import make_hashable
0.35 lookups.py(16): class Lookup:
0.35 lookups.py(16): class Lookup:
0.35 lookups.py(17):     lookup_name = None
0.35 lookups.py(18):     prepare_rhs = True
0.35 lookups.py(19):     can_use_none_as_rhs = False
0.35 lookups.py(21):     def __init__(self, lhs, rhs):
0.35 lookups.py(38):     def apply_bilateral_transforms(self, value):
0.35 lookups.py(43):     def batch_process_rhs(self, compiler, connection, rhs=None):
0.35 lookups.py(60):     def get_source_expressions(self):
0.35 lookups.py(65):     def set_source_expressions(self, new_exprs):
0.35 lookups.py(71):     def get_prep_lookup(self):
0.35 lookups.py(78):     def get_db_prep_lookup(self, value, connection):
0.35 lookups.py(81):     def process_lhs(self, compiler, connection, lhs=None):
0.35 lookups.py(87):     def process_rhs(self, compiler, connection):
0.35 lookups.py(101):     def rhs_is_direct_value(self):
0.35 lookups.py(104):     def relabeled_clone(self, relabels):
0.35 lookups.py(111):     def get_group_by_cols(self, alias=None):
0.35 lookups.py(117):     def as_sql(self, compiler, connection):
0.35 lookups.py(120):     def as_oracle(self, compiler, connection):
0.35 lookups.py(133):     @cached_property
0.35 lookups.py(134):     def contains_aggregate(self):
0.35 lookups.py(137):     @cached_property
0.35 lookups.py(138):     def contains_over_clause(self):
0.35 lookups.py(141):     @property
0.35 lookups.py(142):     def is_summary(self):
0.35 lookups.py(145):     @property
0.35 lookups.py(146):     def identity(self):
0.35 lookups.py(149):     def __eq__(self, other):
0.35 lookups.py(154):     def __hash__(self):
0.35 lookups.py(158): class Transform(RegisterLookupMixin, Func):
0.35 lookups.py(158): class Transform(RegisterLookupMixin, Func):
0.35 lookups.py(159):     """
0.35 lookups.py(163):     bilateral = False
0.35 lookups.py(164):     arity = 1
0.35 lookups.py(166):     @property
0.35 lookups.py(167):     def lhs(self):
0.35 lookups.py(170):     def get_bilateral_transforms(self):
0.35 lookups.py(180): class BuiltinLookup(Lookup):
0.35 lookups.py(180): class BuiltinLookup(Lookup):
0.35 lookups.py(181):     def process_lhs(self, compiler, connection, lhs=None):
0.35 lookups.py(190):     def as_sql(self, compiler, connection):
0.35 lookups.py(197):     def get_rhs_op(self, connection, rhs):
0.35 lookups.py(201): class FieldGetDbPrepValueMixin:
0.35 lookups.py(201): class FieldGetDbPrepValueMixin:
0.35 lookups.py(202):     """
0.35 lookups.py(206):     get_db_prep_lookup_value_is_iterable = False
0.35 lookups.py(208):     def get_db_prep_lookup(self, value, connection):
0.35 lookups.py(221): class FieldGetDbPrepValueIterableMixin(FieldGetDbPrepValueMixin):
0.35 lookups.py(221): class FieldGetDbPrepValueIterableMixin(FieldGetDbPrepValueMixin):
0.35 lookups.py(222):     """
0.35 lookups.py(226):     get_db_prep_lookup_value_is_iterable = True
0.35 lookups.py(228):     def get_prep_lookup(self):
0.35 lookups.py(242):     def process_rhs(self, compiler, connection):
0.35 lookups.py(250):     def resolve_expression_parameter(self, compiler, connection, sql, param):
0.35 lookups.py(258):     def batch_process_rhs(self, compiler, connection, rhs=None):
0.35 lookups.py(272): class PostgresOperatorLookup(FieldGetDbPrepValueMixin, Lookup):
0.35 lookups.py(272): class PostgresOperatorLookup(FieldGetDbPrepValueMixin, Lookup):
0.35 lookups.py(273):     """Lookup defined by operators on PostgreSQL."""
0.35 lookups.py(274):     postgres_operator = None
0.35 lookups.py(276):     def as_postgresql(self, compiler, connection):
0.35 lookups.py(283): @Field.register_lookup
0.35 lookups.py(284): class Exact(FieldGetDbPrepValueMixin, BuiltinLookup):
0.35 lookups.py(283): @Field.register_lookup
0.35 lookups.py(285):     lookup_name = 'exact'
0.35 lookups.py(287):     def process_rhs(self, compiler, connection):
0.35 lookups.py(301):     def as_sql(self, compiler, connection):
0.35 lookups.py(316): @Field.register_lookup
0.35 lookups.py(317): class IExact(BuiltinLookup):
0.35 lookups.py(316): @Field.register_lookup
0.35 lookups.py(318):     lookup_name = 'iexact'
0.35 lookups.py(319):     prepare_rhs = False
0.35 lookups.py(321):     def process_rhs(self, qn, connection):
0.35 lookups.py(328): @Field.register_lookup
0.35 lookups.py(329): class GreaterThan(FieldGetDbPrepValueMixin, BuiltinLookup):
0.35 lookups.py(328): @Field.register_lookup
0.35 lookups.py(330):     lookup_name = 'gt'
0.35 lookups.py(333): @Field.register_lookup
0.35 lookups.py(334): class GreaterThanOrEqual(FieldGetDbPrepValueMixin, BuiltinLookup):
0.35 lookups.py(333): @Field.register_lookup
0.35 lookups.py(335):     lookup_name = 'gte'
0.35 lookups.py(338): @Field.register_lookup
0.35 lookups.py(339): class LessThan(FieldGetDbPrepValueMixin, BuiltinLookup):
0.35 lookups.py(338): @Field.register_lookup
0.35 lookups.py(340):     lookup_name = 'lt'
0.35 lookups.py(343): @Field.register_lookup
0.35 lookups.py(344): class LessThanOrEqual(FieldGetDbPrepValueMixin, BuiltinLookup):
0.35 lookups.py(343): @Field.register_lookup
0.35 lookups.py(345):     lookup_name = 'lte'
0.35 lookups.py(348): class IntegerFieldFloatRounding:
0.35 lookups.py(348): class IntegerFieldFloatRounding:
0.35 lookups.py(349):     """
0.35 lookups.py(353):     def get_prep_lookup(self):
0.35 lookups.py(359): @IntegerField.register_lookup
0.35 lookups.py(360): class IntegerGreaterThanOrEqual(IntegerFieldFloatRounding, GreaterThanOrEqual):
0.35 lookups.py(359): @IntegerField.register_lookup
0.35 lookups.py(361):     pass
0.35 lookups.py(364): @IntegerField.register_lookup
0.35 lookups.py(365): class IntegerLessThan(IntegerFieldFloatRounding, LessThan):
0.35 lookups.py(364): @IntegerField.register_lookup
0.35 lookups.py(366):     pass
0.35 lookups.py(369): @Field.register_lookup
0.35 lookups.py(370): class In(FieldGetDbPrepValueIterableMixin, BuiltinLookup):
0.35 lookups.py(369): @Field.register_lookup
0.35 lookups.py(371):     lookup_name = 'in'
0.35 lookups.py(373):     def process_rhs(self, compiler, connection):
0.35 lookups.py(403):     def get_rhs_op(self, connection, rhs):
0.35 lookups.py(406):     def as_sql(self, compiler, connection):
0.35 lookups.py(412):     def split_parameter_list_as_sql(self, compiler, connection):
0.35 lookups.py(435): class PatternLookup(BuiltinLookup):
0.35 lookups.py(435): class PatternLookup(BuiltinLookup):
0.35 lookups.py(436):     param_pattern = '%%%s%%'
0.35 lookups.py(437):     prepare_rhs = False
0.35 lookups.py(439):     def get_rhs_op(self, connection, rhs):
0.35 lookups.py(455):     def process_rhs(self, qn, connection):
0.35 lookups.py(462): @Field.register_lookup
0.35 lookups.py(463): class Contains(PatternLookup):
0.35 lookups.py(462): @Field.register_lookup
0.35 lookups.py(464):     lookup_name = 'contains'
0.35 lookups.py(467): @Field.register_lookup
0.35 lookups.py(468): class IContains(Contains):
0.35 lookups.py(467): @Field.register_lookup
0.35 lookups.py(469):     lookup_name = 'icontains'
0.35 lookups.py(472): @Field.register_lookup
0.35 lookups.py(473): class StartsWith(PatternLookup):
0.35 lookups.py(472): @Field.register_lookup
0.35 lookups.py(474):     lookup_name = 'startswith'
0.35 lookups.py(475):     param_pattern = '%s%%'
0.35 lookups.py(478): @Field.register_lookup
0.35 lookups.py(479): class IStartsWith(StartsWith):
0.35 lookups.py(478): @Field.register_lookup
0.35 lookups.py(480):     lookup_name = 'istartswith'
0.35 lookups.py(483): @Field.register_lookup
0.35 lookups.py(484): class EndsWith(PatternLookup):
0.35 lookups.py(483): @Field.register_lookup
0.35 lookups.py(485):     lookup_name = 'endswith'
0.35 lookups.py(486):     param_pattern = '%%%s'
0.35 lookups.py(489): @Field.register_lookup
0.35 lookups.py(490): class IEndsWith(EndsWith):
0.35 lookups.py(489): @Field.register_lookup
0.35 lookups.py(491):     lookup_name = 'iendswith'
0.35 lookups.py(494): @Field.register_lookup
0.35 lookups.py(495): class Range(FieldGetDbPrepValueIterableMixin, BuiltinLookup):
0.35 lookups.py(494): @Field.register_lookup
0.35 lookups.py(496):     lookup_name = 'range'
0.35 lookups.py(498):     def get_rhs_op(self, connection, rhs):
0.35 lookups.py(502): @Field.register_lookup
0.35 lookups.py(503): class IsNull(BuiltinLookup):
0.35 lookups.py(502): @Field.register_lookup
0.35 lookups.py(504):     lookup_name = 'isnull'
0.35 lookups.py(505):     prepare_rhs = False
0.35 lookups.py(507):     def as_sql(self, compiler, connection):
0.35 lookups.py(520): @Field.register_lookup
0.35 lookups.py(521): class Regex(BuiltinLookup):
0.35 lookups.py(520): @Field.register_lookup
0.35 lookups.py(522):     lookup_name = 'regex'
0.35 lookups.py(523):     prepare_rhs = False
0.35 lookups.py(525):     def as_sql(self, compiler, connection):
0.35 lookups.py(535): @Field.register_lookup
0.35 lookups.py(536): class IRegex(Regex):
0.35 lookups.py(535): @Field.register_lookup
0.35 lookups.py(537):     lookup_name = 'iregex'
0.35 lookups.py(540): class YearLookup(Lookup):
0.35 lookups.py(540): class YearLookup(Lookup):
0.35 lookups.py(541):     def year_lookup_bounds(self, connection, year):
0.35 lookups.py(549):     def as_sql(self, compiler, connection):
0.35 lookups.py(563):     def get_direct_rhs_sql(self, connection, rhs):
0.35 lookups.py(566):     def get_bound_params(self, start, finish):
0.35 lookups.py(572): class YearExact(YearLookup, Exact):
0.35 lookups.py(572): class YearExact(YearLookup, Exact):
0.35 lookups.py(573):     def get_direct_rhs_sql(self, connection, rhs):
0.35 lookups.py(576):     def get_bound_params(self, start, finish):
0.35 lookups.py(580): class YearGt(YearLookup, GreaterThan):
0.35 lookups.py(580): class YearGt(YearLookup, GreaterThan):
0.35 lookups.py(581):     def get_bound_params(self, start, finish):
0.35 lookups.py(585): class YearGte(YearLookup, GreaterThanOrEqual):
0.35 lookups.py(585): class YearGte(YearLookup, GreaterThanOrEqual):
0.35 lookups.py(586):     def get_bound_params(self, start, finish):
0.35 lookups.py(590): class YearLt(YearLookup, LessThan):
0.35 lookups.py(590): class YearLt(YearLookup, LessThan):
0.35 lookups.py(591):     def get_bound_params(self, start, finish):
0.35 lookups.py(595): class YearLte(YearLookup, LessThanOrEqual):
0.35 lookups.py(595): class YearLte(YearLookup, LessThanOrEqual):
0.35 lookups.py(596):     def get_bound_params(self, start, finish):
0.35 lookups.py(600): class UUIDTextMixin:
0.35 lookups.py(600): class UUIDTextMixin:
0.35 lookups.py(601):     """
0.35 lookups.py(605):     def process_rhs(self, qn, connection):
0.35 lookups.py(615): @UUIDField.register_lookup
0.35 lookups.py(616): class UUIDIExact(UUIDTextMixin, IExact):
0.35 lookups.py(615): @UUIDField.register_lookup
0.35 lookups.py(617):     pass
0.35 lookups.py(620): @UUIDField.register_lookup
0.35 lookups.py(621): class UUIDContains(UUIDTextMixin, Contains):
0.35 lookups.py(620): @UUIDField.register_lookup
0.35 lookups.py(622):     pass
0.35 lookups.py(625): @UUIDField.register_lookup
0.35 lookups.py(626): class UUIDIContains(UUIDTextMixin, IContains):
0.35 lookups.py(625): @UUIDField.register_lookup
0.35 lookups.py(627):     pass
0.35 lookups.py(630): @UUIDField.register_lookup
0.35 lookups.py(631): class UUIDStartsWith(UUIDTextMixin, StartsWith):
0.35 lookups.py(630): @UUIDField.register_lookup
0.35 lookups.py(632):     pass
0.35 lookups.py(635): @UUIDField.register_lookup
0.35 lookups.py(636): class UUIDIStartsWith(UUIDTextMixin, IStartsWith):
0.35 lookups.py(635): @UUIDField.register_lookup
0.35 lookups.py(637):     pass
0.35 lookups.py(640): @UUIDField.register_lookup
0.35 lookups.py(641): class UUIDEndsWith(UUIDTextMixin, EndsWith):
0.35 lookups.py(640): @UUIDField.register_lookup
0.35 lookups.py(642):     pass
0.35 lookups.py(645): @UUIDField.register_lookup
0.35 lookups.py(646): class UUIDIEndsWith(UUIDTextMixin, IEndsWith):
0.35 lookups.py(645): @UUIDField.register_lookup
0.35 lookups.py(647):     pass
Testing against Django installed in '/testbed/django'
0.70 operations.py(1): import datetime
0.70 operations.py(2): import decimal
0.70 operations.py(3): from importlib import import_module
0.70 operations.py(5): import sqlparse
0.70 operations.py(7): from django.conf import settings
0.70 operations.py(8): from django.db import NotSupportedError, transaction
0.70 operations.py(9): from django.db.backends import utils
0.70 operations.py(10): from django.utils import timezone
0.70 operations.py(11): from django.utils.encoding import force_str
0.70 operations.py(14): class BaseDatabaseOperations:
0.70 operations.py(14): class BaseDatabaseOperations:
0.70 operations.py(15):     """
0.70 operations.py(19):     compiler_module = "django.db.models.sql.compiler"
0.70 operations.py(24):         'SmallIntegerField': (-32768, 32767),
0.70 operations.py(25):         'IntegerField': (-2147483648, 2147483647),
0.70 operations.py(26):         'BigIntegerField': (-9223372036854775808, 9223372036854775807),
0.70 operations.py(27):         'PositiveBigIntegerField': (0, 9223372036854775807),
0.70 operations.py(28):         'PositiveSmallIntegerField': (0, 32767),
0.70 operations.py(29):         'PositiveIntegerField': (0, 2147483647),
0.70 operations.py(30):         'SmallAutoField': (-32768, 32767),
0.70 operations.py(31):         'AutoField': (-2147483648, 2147483647),
0.70 operations.py(32):         'BigAutoField': (-9223372036854775808, 9223372036854775807),
0.70 operations.py(23):     integer_field_ranges = {
0.70 operations.py(35):         'union': 'UNION',
0.70 operations.py(36):         'intersection': 'INTERSECT',
0.70 operations.py(37):         'difference': 'EXCEPT',
0.70 operations.py(34):     set_operators = {
0.70 operations.py(42):     cast_data_types = {}
0.70 operations.py(44):     cast_char_field_without_max_length = None
0.70 operations.py(47):     PRECEDING = 'PRECEDING'
0.70 operations.py(48):     FOLLOWING = 'FOLLOWING'
0.70 operations.py(49):     UNBOUNDED_PRECEDING = 'UNBOUNDED ' + PRECEDING
0.70 operations.py(50):     UNBOUNDED_FOLLOWING = 'UNBOUNDED ' + FOLLOWING
0.70 operations.py(51):     CURRENT_ROW = 'CURRENT ROW'
0.70 operations.py(54):     explain_prefix = None
0.70 operations.py(56):     def __init__(self, connection):
0.70 operations.py(60):     def autoinc_sql(self, table, column):
0.70 operations.py(69):     def bulk_batch_size(self, fields, objs):
0.70 operations.py(77):     def cache_key_culling_sql(self):
0.70 operations.py(87):     def unification_cast_sql(self, output_field):
0.70 operations.py(95):     def date_extract_sql(self, lookup_type, field_name):
0.70 operations.py(102):     def date_trunc_sql(self, lookup_type, field_name, tzname=None):
0.70 operations.py(113):     def datetime_cast_date_sql(self, field_name, tzname):
0.70 operations.py(122):     def datetime_cast_time_sql(self, field_name, tzname):
0.70 operations.py(128):     def datetime_extract_sql(self, lookup_type, field_name, tzname):
0.70 operations.py(136):     def datetime_trunc_sql(self, lookup_type, field_name, tzname):
0.70 operations.py(144):     def time_trunc_sql(self, lookup_type, field_name, tzname=None):
0.70 operations.py(155):     def time_extract_sql(self, lookup_type, field_name):
0.70 operations.py(162):     def deferrable_sql(self):
0.70 operations.py(169):     def distinct_sql(self, fields, params):
0.70 operations.py(180):     def fetch_returned_insert_columns(self, cursor, returning_params):
0.70 operations.py(187):     def field_cast_sql(self, db_type, internal_type):
0.70 operations.py(196):     def force_no_ordering(self):
0.70 operations.py(203):     def for_update_sql(self, nowait=False, skip_locked=False, of=(), no_key=False):
0.70 operations.py(214):     def _get_limit_offset_params(self, low_mark, high_mark):
0.70 operations.py(222):     def limit_offset_sql(self, low_mark, high_mark):
0.70 operations.py(230):     def last_executed_query(self, cursor, sql, params):
0.70 operations.py(252):     def last_insert_id(self, cursor, table_name, pk_name):
0.70 operations.py(261):     def lookup_cast(self, lookup_type, internal_type=None):
0.70 operations.py(269):     def max_in_list_size(self):
0.70 operations.py(276):     def max_name_length(self):
0.70 operations.py(283):     def no_limit_value(self):
0.70 operations.py(290):     def pk_default_value(self):
0.70 operations.py(297):     def prepare_sql_script(self, sql):
0.70 operations.py(311):     def process_clob(self, value):
0.70 operations.py(318):     def return_insert_columns(self, fields):
0.70 operations.py(326):     def compiler(self, compiler_name):
0.70 operations.py(336):     def quote_name(self, name):
0.70 operations.py(343):     def regex_lookup(self, lookup_type):
0.70 operations.py(354):     def savepoint_create_sql(self, sid):
0.70 operations.py(362):     def savepoint_commit_sql(self, sid):
0.70 operations.py(368):     def savepoint_rollback_sql(self, sid):
0.70 operations.py(374):     def set_time_zone_sql(self):
0.70 operations.py(382):     def sql_flush(self, style, tables, *, reset_sequences=False, allow_cascade=False):
0.70 operations.py(400):     def execute_sql_flush(self, sql_list):
0.70 operations.py(410):     def sequence_reset_by_name_sql(self, style, sequences):
0.70 operations.py(420):     def sequence_reset_sql(self, style, model_list):
0.70 operations.py(430):     def start_transaction_sql(self):
0.70 operations.py(434):     def end_transaction_sql(self, success=True):
0.70 operations.py(440):     def tablespace_sql(self, tablespace, inline=False):
0.70 operations.py(451):     def prep_for_like_query(self, x):
0.70 operations.py(457):     prep_for_iexact_query = prep_for_like_query
0.70 operations.py(459):     def validate_autopk_value(self, value):
0.70 operations.py(467):     def adapt_unknown_value(self, value):
0.70 operations.py(486):     def adapt_datefield_value(self, value):
0.70 operations.py(495):     def adapt_datetimefield_value(self, value):
0.70 operations.py(504):     def adapt_timefield_value(self, value):
0.70 operations.py(515):     def adapt_decimalfield_value(self, value, max_digits=None, decimal_places=None):
0.70 operations.py(522):     def adapt_ipaddressfield_value(self, value):
0.70 operations.py(529):     def year_lookup_bounds_for_date_field(self, value):
0.70 operations.py(543):     def year_lookup_bounds_for_datetime_field(self, value):
0.70 operations.py(561):     def get_db_converters(self, expression):
0.70 operations.py(570):     def convert_durationfield_value(self, value, expression, connection):
0.70 operations.py(574):     def check_expression_support(self, expression):
0.70 operations.py(585):     def conditional_expression_supported_in_where_clause(self, expression):
0.70 operations.py(592):     def combine_expression(self, connector, sub_expressions):
0.70 operations.py(602):     def combine_duration_expression(self, connector, sub_expressions):
0.70 operations.py(605):     def binary_placeholder_sql(self, value):
0.70 operations.py(612):     def modify_insert_params(self, placeholder, params):
0.70 operations.py(619):     def integer_field_range(self, internal_type):
0.70 operations.py(627):     def subtract_temporals(self, internal_type, lhs, rhs):
0.70 operations.py(634):     def window_frame_start(self, start):
0.70 operations.py(644):     def window_frame_end(self, end):
0.70 operations.py(654):     def window_frame_rows_start_end(self, start=None, end=None):
0.70 operations.py(662):     def window_frame_range_start_end(self, start=None, end=None):
0.70 operations.py(674):     def explain_query_prefix(self, format=None, **options):
0.70 operations.py(689):     def insert_statement(self, ignore_conflicts=False):
0.70 operations.py(692):     def ignore_conflicts_suffix_sql(self, ignore_conflicts=None):
0.71 operations.py(57):         self.connection = connection
0.71 operations.py(58):         self._cache = None
0.71 operations.py(281):         return None
0.71 operations.py(281):         return None
0.71 operations.py(281):         return None
0.71 operations.py(281):         return None
0.72 operations.py(281):         return None
0.72 operations.py(281):         return None
0.72 operations.py(281):         return None
0.72 operations.py(281):         return None
0.72 operations.py(281):         return None
0.72 operations.py(281):         return None
0.73 operations.py(281):         return None
Skipping setup of unused database(s): other.
0.73 operations.py(57):         self.connection = connection
0.73 operations.py(58):         self._cache = None
Operations to perform:
  Synchronize unmigrated apps: auth, contenttypes, messages, sessions, staticfiles
  Apply all migrations: admin, sites
0.76 operations.py(281):         return None
0.76 operations.py(281):         return None
0.76 operations.py(281):         return None
Synchronizing apps without migrations:
  Creating tables...
    Creating table django_content_type
0.76 operations.py(332):         if self._cache is None:
0.76 operations.py(333):             self._cache = import_module(self.compiler_module)
0.77 operations.py(334):         return getattr(self._cache, compiler_name)
0.77 operations.py(67):         return None
    Creating table auth_permission
0.77 operations.py(332):         if self._cache is None:
0.77 operations.py(334):         return getattr(self._cache, compiler_name)
0.77 operations.py(67):         return None
0.77 operations.py(332):         if self._cache is None:
0.77 operations.py(334):         return getattr(self._cache, compiler_name)
    Creating table auth_group
0.77 operations.py(67):         return None
0.77 operations.py(332):         if self._cache is None:
0.77 operations.py(334):         return getattr(self._cache, compiler_name)
0.77 operations.py(67):         return None
0.77 operations.py(332):         if self._cache is None:
0.77 operations.py(334):         return getattr(self._cache, compiler_name)
0.77 operations.py(332):         if self._cache is None:
0.77 operations.py(334):         return getattr(self._cache, compiler_name)
    Creating table auth_user
0.77 operations.py(67):         return None
0.77 operations.py(332):         if self._cache is None:
0.77 operations.py(334):         return getattr(self._cache, compiler_name)
0.77 operations.py(67):         return None
0.77 operations.py(332):         if self._cache is None:
0.77 operations.py(334):         return getattr(self._cache, compiler_name)
0.77 operations.py(332):         if self._cache is None:
0.77 operations.py(334):         return getattr(self._cache, compiler_name)
0.77 operations.py(332):         if self._cache is None:
0.77 operations.py(334):         return getattr(self._cache, compiler_name)
0.77 operations.py(67):         return None
0.77 operations.py(332):         if self._cache is None:
0.77 operations.py(334):         return getattr(self._cache, compiler_name)
0.77 operations.py(332):         if self._cache is None:
0.77 operations.py(334):         return getattr(self._cache, compiler_name)
    Creating table django_session
0.77 operations.py(332):         if self._cache is None:
0.77 operations.py(334):         return getattr(self._cache, compiler_name)
    Running deferred SQL...
0.77 operations.py(281):         return None
0.77 operations.py(281):         return None
0.77 operations.py(281):         return None
0.78 operations.py(281):         return None
0.78 operations.py(281):         return None
0.78 operations.py(281):         return None
0.78 operations.py(281):         return None
0.78 operations.py(281):         return None
0.78 operations.py(281):         return None
0.78 operations.py(281):         return None
0.78 operations.py(281):         return None
0.78 operations.py(281):         return None
0.78 operations.py(281):         return None
Running migrations:
0.78 operations.py(67):         return None
  Applying admin.0001_initial...0.78 operations.py(281):         return None
0.78 operations.py(67):         return None
0.78 operations.py(332):         if self._cache is None:
0.78 operations.py(334):         return getattr(self._cache, compiler_name)
0.78 operations.py(332):         if self._cache is None:
0.78 operations.py(334):         return getattr(self._cache, compiler_name)
0.78 operations.py(281):         return None
0.78 operations.py(281):         return None
0.78 operations.py(332):         if self._cache is None:
0.78 operations.py(334):         return getattr(self._cache, compiler_name)
0.78 operations.py(690):         return 'INSERT INTO'
0.78 operations.py(617):         return params
0.78 operations.py(617):         return params
0.78 operations.py(617):         return params
0.78 operations.py(693):         return ''
0.78 operations.py(259):         return cursor.lastrowid
 OK
  Applying admin.0002_logentry_remove_auto_add...0.79 operations.py(281):         return None
0.79 operations.py(67):         return None
0.79 operations.py(332):         if self._cache is None:
0.79 operations.py(334):         return getattr(self._cache, compiler_name)
0.79 operations.py(332):         if self._cache is None:
0.79 operations.py(334):         return getattr(self._cache, compiler_name)
0.79 operations.py(281):         return None
0.79 operations.py(281):         return None
0.79 operations.py(332):         if self._cache is None:
0.79 operations.py(334):         return getattr(self._cache, compiler_name)
0.79 operations.py(690):         return 'INSERT INTO'
0.79 operations.py(617):         return params
0.79 operations.py(617):         return params
0.79 operations.py(617):         return params
0.79 operations.py(693):         return ''
0.79 operations.py(259):         return cursor.lastrowid
 OK
  Applying admin.0003_logentry_add_action_flag_choices...0.80 operations.py(281):         return None
0.80 operations.py(67):         return None
0.80 operations.py(332):         if self._cache is None:
0.80 operations.py(334):         return getattr(self._cache, compiler_name)
0.80 operations.py(332):         if self._cache is None:
0.80 operations.py(334):         return getattr(self._cache, compiler_name)
0.80 operations.py(281):         return None
0.80 operations.py(281):         return None
0.80 operations.py(332):         if self._cache is None:
0.80 operations.py(334):         return getattr(self._cache, compiler_name)
0.80 operations.py(690):         return 'INSERT INTO'
0.80 operations.py(617):         return params
0.80 operations.py(617):         return params
0.80 operations.py(617):         return params
0.80 operations.py(693):         return ''
0.80 operations.py(259):         return cursor.lastrowid
 OK
  Applying sites.0001_initial...0.80 operations.py(67):         return None
0.80 operations.py(332):         if self._cache is None:
0.80 operations.py(334):         return getattr(self._cache, compiler_name)
0.80 operations.py(690):         return 'INSERT INTO'
0.80 operations.py(617):         return params
0.80 operations.py(617):         return params
0.80 operations.py(617):         return params
0.80 operations.py(693):         return ''
0.80 operations.py(259):         return cursor.lastrowid
 OK
  Applying sites.0002_alter_domain_unique...0.81 operations.py(67):         return None
0.81 operations.py(332):         if self._cache is None:
0.81 operations.py(334):         return getattr(self._cache, compiler_name)
0.81 operations.py(690):         return 'INSERT INTO'
0.81 operations.py(617):         return params
0.81 operations.py(617):         return params
0.81 operations.py(617):         return params
0.81 operations.py(693):         return ''
0.81 operations.py(259):         return cursor.lastrowid
 OK
0.81 operations.py(332):         if self._cache is None:
0.81 operations.py(334):         return getattr(self._cache, compiler_name)
0.81 operations.py(568):         return []
0.81 operations.py(568):         return []
0.81 operations.py(568):         return []
0.81 operations.py(568):         return []
0.81 operations.py(281):         return None
0.81 operations.py(281):         return None
0.82 operations.py(281):         return None
0.82 operations.py(281):         return None
0.82 operations.py(281):         return None
0.82 operations.py(281):         return None
0.82 operations.py(281):         return None
0.82 operations.py(281):         return None
0.82 operations.py(281):         return None
0.82 lookups.py(22):         self.lhs, self.rhs = lhs, rhs
0.82 lookups.py(23):         self.rhs = self.get_prep_lookup()
0.82 lookups.py(72):         if hasattr(self.rhs, 'resolve_expression'):
0.82 lookups.py(74):         if self.prepare_rhs and hasattr(self.lhs.output_field, 'get_prep_value'):
0.82 lookups.py(75):             return self.lhs.output_field.get_prep_value(self.rhs)
0.82 lookups.py(24):         if hasattr(self.lhs, 'get_bilateral_transforms'):
0.82 lookups.py(27):             bilateral_transforms = []
0.82 lookups.py(28):         if bilateral_transforms:
0.82 lookups.py(36):         self.bilateral_transforms = bilateral_transforms
0.82 operations.py(332):         if self._cache is None:
0.82 operations.py(334):         return getattr(self._cache, compiler_name)
0.82 lookups.py(135):         return self.lhs.contains_aggregate or getattr(self.rhs, 'contains_aggregate', False)
0.82 lookups.py(306):             isinstance(self.rhs, bool) and
0.82 lookups.py(305):         if (
0.82 lookups.py(313):         return super().as_sql(compiler, connection)
0.82 lookups.py(191):         lhs_sql, params = self.process_lhs(compiler, connection)
0.82 lookups.py(182):         lhs_sql, params = super().process_lhs(compiler, connection, lhs)
0.82 lookups.py(82):         lhs = lhs or self.lhs
0.82 lookups.py(83):         if hasattr(lhs, 'resolve_expression'):
0.82 lookups.py(84):             lhs = lhs.resolve_expression(compiler.query)
0.82 lookups.py(85):         return compiler.compile(lhs)
0.82 lookups.py(183):         field_internal_type = self.lhs.output_field.get_internal_type()
0.82 lookups.py(184):         db_type = self.lhs.output_field.db_type(connection=connection)
0.82 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.82 lookups.py(186):             db_type, field_internal_type) % lhs_sql
0.82 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.82 operations.py(194):         return '%s'
0.82 lookups.py(186):             db_type, field_internal_type) % lhs_sql
0.82 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.82 lookups.py(187):         lhs_sql = connection.ops.lookup_cast(self.lookup_name, field_internal_type) % lhs_sql
0.82 operations.py(267):         return "%s"
0.82 lookups.py(188):         return lhs_sql, list(params)
0.82 lookups.py(192):         rhs_sql, rhs_params = self.process_rhs(compiler, connection)
0.82 lookups.py(288):         from django.db.models.sql.query import Query
0.82 lookups.py(289):         if isinstance(self.rhs, Query):
0.82 lookups.py(299):         return super().process_rhs(compiler, connection)
0.82 lookups.py(88):         value = self.rhs
0.82 lookups.py(89):         if self.bilateral_transforms:
0.82 lookups.py(96):         if hasattr(value, 'as_sql'):
0.82 lookups.py(99):             return self.get_db_prep_lookup(value, connection)
0.82 lookups.py(211):         field = getattr(self.lhs.output_field, 'target_field', None)
0.82 lookups.py(212):         get_db_prep_value = getattr(field, 'get_db_prep_value', None) or self.lhs.output_field.get_db_prep_value
0.82 lookups.py(214):             '%s',
0.82 lookups.py(216):             if self.get_db_prep_lookup_value_is_iterable else
0.82 lookups.py(215):             [get_db_prep_value(v, connection, prepared=True) for v in value]
0.82 lookups.py(217):             [get_db_prep_value(value, connection, prepared=True)]
0.82 lookups.py(213):         return (
0.82 lookups.py(193):         params.extend(rhs_params)
0.82 lookups.py(194):         rhs_sql = self.get_rhs_op(connection, rhs_sql)
0.82 lookups.py(198):         return connection.operators[self.lookup_name] % rhs
0.82 lookups.py(195):         return '%s %s' % (lhs_sql, rhs_sql), params
0.82 operations.py(568):         return []
0.82 operations.py(568):         return []
0.82 operations.py(568):         return []
0.82 operations.py(332):         if self._cache is None:
0.82 operations.py(334):         return getattr(self._cache, compiler_name)
0.82 operations.py(690):         return 'INSERT INTO'
0.82 operations.py(617):         return params
0.82 operations.py(617):         return params
0.82 operations.py(693):         return ''
0.82 lookups.py(22):         self.lhs, self.rhs = lhs, rhs
0.82 lookups.py(23):         self.rhs = self.get_prep_lookup()
0.82 lookups.py(72):         if hasattr(self.rhs, 'resolve_expression'):
0.82 lookups.py(74):         if self.prepare_rhs and hasattr(self.lhs.output_field, 'get_prep_value'):
0.82 lookups.py(75):             return self.lhs.output_field.get_prep_value(self.rhs)
0.82 lookups.py(24):         if hasattr(self.lhs, 'get_bilateral_transforms'):
0.82 lookups.py(27):             bilateral_transforms = []
0.82 lookups.py(28):         if bilateral_transforms:
0.82 lookups.py(36):         self.bilateral_transforms = bilateral_transforms
0.82 operations.py(332):         if self._cache is None:
0.82 operations.py(334):         return getattr(self._cache, compiler_name)
0.82 lookups.py(135):         return self.lhs.contains_aggregate or getattr(self.rhs, 'contains_aggregate', False)
0.82 lookups.py(306):             isinstance(self.rhs, bool) and
0.82 lookups.py(305):         if (
0.82 lookups.py(313):         return super().as_sql(compiler, connection)
0.82 lookups.py(191):         lhs_sql, params = self.process_lhs(compiler, connection)
0.82 lookups.py(182):         lhs_sql, params = super().process_lhs(compiler, connection, lhs)
0.82 lookups.py(82):         lhs = lhs or self.lhs
0.82 lookups.py(83):         if hasattr(lhs, 'resolve_expression'):
0.82 lookups.py(84):             lhs = lhs.resolve_expression(compiler.query)
0.82 lookups.py(85):         return compiler.compile(lhs)
0.82 lookups.py(183):         field_internal_type = self.lhs.output_field.get_internal_type()
0.82 lookups.py(184):         db_type = self.lhs.output_field.db_type(connection=connection)
0.82 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.82 lookups.py(186):             db_type, field_internal_type) % lhs_sql
0.82 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.82 operations.py(194):         return '%s'
0.82 lookups.py(186):             db_type, field_internal_type) % lhs_sql
0.82 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.82 lookups.py(187):         lhs_sql = connection.ops.lookup_cast(self.lookup_name, field_internal_type) % lhs_sql
0.82 operations.py(267):         return "%s"
0.82 lookups.py(188):         return lhs_sql, list(params)
0.82 lookups.py(192):         rhs_sql, rhs_params = self.process_rhs(compiler, connection)
0.82 lookups.py(288):         from django.db.models.sql.query import Query
0.82 lookups.py(289):         if isinstance(self.rhs, Query):
0.82 lookups.py(299):         return super().process_rhs(compiler, connection)
0.82 lookups.py(88):         value = self.rhs
0.82 lookups.py(89):         if self.bilateral_transforms:
0.82 lookups.py(96):         if hasattr(value, 'as_sql'):
0.82 lookups.py(99):             return self.get_db_prep_lookup(value, connection)
0.82 lookups.py(211):         field = getattr(self.lhs.output_field, 'target_field', None)
0.82 lookups.py(212):         get_db_prep_value = getattr(field, 'get_db_prep_value', None) or self.lhs.output_field.get_db_prep_value
0.82 lookups.py(214):             '%s',
0.82 lookups.py(216):             if self.get_db_prep_lookup_value_is_iterable else
0.82 lookups.py(215):             [get_db_prep_value(v, connection, prepared=True) for v in value]
0.82 lookups.py(217):             [get_db_prep_value(value, connection, prepared=True)]
0.82 lookups.py(213):         return (
0.82 lookups.py(193):         params.extend(rhs_params)
0.82 lookups.py(194):         rhs_sql = self.get_rhs_op(connection, rhs_sql)
0.82 lookups.py(198):         return connection.operators[self.lookup_name] % rhs
0.82 lookups.py(195):         return '%s %s' % (lhs_sql, rhs_sql), params
0.83 operations.py(568):         return []
0.83 operations.py(568):         return []
0.83 operations.py(568):         return []
0.83 lookups.py(22):         self.lhs, self.rhs = lhs, rhs
0.83 lookups.py(23):         self.rhs = self.get_prep_lookup()
0.83 lookups.py(72):         if hasattr(self.rhs, 'resolve_expression'):
0.83 lookups.py(74):         if self.prepare_rhs and hasattr(self.lhs.output_field, 'get_prep_value'):
0.83 lookups.py(75):             return self.lhs.output_field.get_prep_value(self.rhs)
0.83 lookups.py(24):         if hasattr(self.lhs, 'get_bilateral_transforms'):
0.83 lookups.py(27):             bilateral_transforms = []
0.83 lookups.py(28):         if bilateral_transforms:
0.83 lookups.py(36):         self.bilateral_transforms = bilateral_transforms
0.83 lookups.py(22):         self.lhs, self.rhs = lhs, rhs
0.83 lookups.py(23):         self.rhs = self.get_prep_lookup()
0.83 lookups.py(72):         if hasattr(self.rhs, 'resolve_expression'):
0.83 lookups.py(74):         if self.prepare_rhs and hasattr(self.lhs.output_field, 'get_prep_value'):
0.83 lookups.py(75):             return self.lhs.output_field.get_prep_value(self.rhs)
0.83 lookups.py(24):         if hasattr(self.lhs, 'get_bilateral_transforms'):
0.83 lookups.py(27):             bilateral_transforms = []
0.83 lookups.py(28):         if bilateral_transforms:
0.83 lookups.py(36):         self.bilateral_transforms = bilateral_transforms
0.83 operations.py(332):         if self._cache is None:
0.83 operations.py(334):         return getattr(self._cache, compiler_name)
0.83 lookups.py(135):         return self.lhs.contains_aggregate or getattr(self.rhs, 'contains_aggregate', False)
0.83 lookups.py(135):         return self.lhs.contains_aggregate or getattr(self.rhs, 'contains_aggregate', False)
0.83 lookups.py(306):             isinstance(self.rhs, bool) and
0.83 lookups.py(305):         if (
0.83 lookups.py(313):         return super().as_sql(compiler, connection)
0.83 lookups.py(191):         lhs_sql, params = self.process_lhs(compiler, connection)
0.83 lookups.py(182):         lhs_sql, params = super().process_lhs(compiler, connection, lhs)
0.83 lookups.py(82):         lhs = lhs or self.lhs
0.83 lookups.py(83):         if hasattr(lhs, 'resolve_expression'):
0.83 lookups.py(84):             lhs = lhs.resolve_expression(compiler.query)
0.83 lookups.py(85):         return compiler.compile(lhs)
0.83 lookups.py(183):         field_internal_type = self.lhs.output_field.get_internal_type()
0.83 lookups.py(184):         db_type = self.lhs.output_field.db_type(connection=connection)
0.83 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.83 lookups.py(186):             db_type, field_internal_type) % lhs_sql
0.83 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.83 operations.py(194):         return '%s'
0.83 lookups.py(186):             db_type, field_internal_type) % lhs_sql
0.83 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.83 lookups.py(187):         lhs_sql = connection.ops.lookup_cast(self.lookup_name, field_internal_type) % lhs_sql
0.83 operations.py(267):         return "%s"
0.83 lookups.py(188):         return lhs_sql, list(params)
0.83 lookups.py(192):         rhs_sql, rhs_params = self.process_rhs(compiler, connection)
0.83 lookups.py(288):         from django.db.models.sql.query import Query
0.83 lookups.py(289):         if isinstance(self.rhs, Query):
0.83 lookups.py(299):         return super().process_rhs(compiler, connection)
0.83 lookups.py(88):         value = self.rhs
0.83 lookups.py(89):         if self.bilateral_transforms:
0.83 lookups.py(96):         if hasattr(value, 'as_sql'):
0.83 lookups.py(99):             return self.get_db_prep_lookup(value, connection)
0.83 lookups.py(211):         field = getattr(self.lhs.output_field, 'target_field', None)
0.83 lookups.py(212):         get_db_prep_value = getattr(field, 'get_db_prep_value', None) or self.lhs.output_field.get_db_prep_value
0.83 lookups.py(214):             '%s',
0.83 lookups.py(216):             if self.get_db_prep_lookup_value_is_iterable else
0.83 lookups.py(215):             [get_db_prep_value(v, connection, prepared=True) for v in value]
0.83 lookups.py(217):             [get_db_prep_value(value, connection, prepared=True)]
0.83 lookups.py(213):         return (
0.83 lookups.py(193):         params.extend(rhs_params)
0.83 lookups.py(194):         rhs_sql = self.get_rhs_op(connection, rhs_sql)
0.83 lookups.py(198):         return connection.operators[self.lookup_name] % rhs
0.83 lookups.py(195):         return '%s %s' % (lhs_sql, rhs_sql), params
0.83 lookups.py(306):             isinstance(self.rhs, bool) and
0.83 lookups.py(305):         if (
0.83 lookups.py(313):         return super().as_sql(compiler, connection)
0.83 lookups.py(191):         lhs_sql, params = self.process_lhs(compiler, connection)
0.83 lookups.py(182):         lhs_sql, params = super().process_lhs(compiler, connection, lhs)
0.83 lookups.py(82):         lhs = lhs or self.lhs
0.83 lookups.py(83):         if hasattr(lhs, 'resolve_expression'):
0.83 lookups.py(84):             lhs = lhs.resolve_expression(compiler.query)
0.83 lookups.py(85):         return compiler.compile(lhs)
0.83 lookups.py(183):         field_internal_type = self.lhs.output_field.get_internal_type()
0.83 lookups.py(184):         db_type = self.lhs.output_field.db_type(connection=connection)
0.83 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.83 lookups.py(186):             db_type, field_internal_type) % lhs_sql
0.83 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.83 operations.py(194):         return '%s'
0.83 lookups.py(186):             db_type, field_internal_type) % lhs_sql
0.83 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.83 lookups.py(187):         lhs_sql = connection.ops.lookup_cast(self.lookup_name, field_internal_type) % lhs_sql
0.83 operations.py(267):         return "%s"
0.83 lookups.py(188):         return lhs_sql, list(params)
0.83 lookups.py(192):         rhs_sql, rhs_params = self.process_rhs(compiler, connection)
0.83 lookups.py(288):         from django.db.models.sql.query import Query
0.83 lookups.py(289):         if isinstance(self.rhs, Query):
0.83 lookups.py(299):         return super().process_rhs(compiler, connection)
0.83 lookups.py(88):         value = self.rhs
0.83 lookups.py(89):         if self.bilateral_transforms:
0.83 lookups.py(96):         if hasattr(value, 'as_sql'):
0.83 lookups.py(99):             return self.get_db_prep_lookup(value, connection)
0.83 lookups.py(211):         field = getattr(self.lhs.output_field, 'target_field', None)
0.83 lookups.py(212):         get_db_prep_value = getattr(field, 'get_db_prep_value', None) or self.lhs.output_field.get_db_prep_value
0.83 lookups.py(214):             '%s',
0.83 lookups.py(216):             if self.get_db_prep_lookup_value_is_iterable else
0.83 lookups.py(215):             [get_db_prep_value(v, connection, prepared=True) for v in value]
0.83 lookups.py(217):             [get_db_prep_value(value, connection, prepared=True)]
0.83 lookups.py(213):         return (
0.83 lookups.py(193):         params.extend(rhs_params)
0.83 lookups.py(194):         rhs_sql = self.get_rhs_op(connection, rhs_sql)
0.83 lookups.py(198):         return connection.operators[self.lookup_name] % rhs
0.83 lookups.py(195):         return '%s %s' % (lhs_sql, rhs_sql), params
0.83 operations.py(224):         limit, offset = self._get_limit_offset_params(low_mark, high_mark)
0.83 operations.py(215):         offset = low_mark or 0
0.83 operations.py(216):         if high_mark is not None:
0.83 operations.py(217):             return (high_mark - offset), offset
0.83 operations.py(225):         return ' '.join(sql for sql in (
0.83 operations.py(226):             ('LIMIT %d' % limit) if limit else None,
0.83 operations.py(227):             ('OFFSET %d' % offset) if offset else None,
0.83 operations.py(225):         return ' '.join(sql for sql in (
0.83 operations.py(225):         return ' '.join(sql for sql in (
0.83 operations.py(228):         ) if sql)
0.83 operations.py(225):         return ' '.join(sql for sql in (
0.83 operations.py(225):         return ' '.join(sql for sql in (
0.83 operations.py(228):         ) if sql)
0.83 operations.py(225):         return ' '.join(sql for sql in (
0.83 operations.py(568):         return []
0.83 operations.py(568):         return []
0.83 operations.py(568):         return []
0.83 lookups.py(22):         self.lhs, self.rhs = lhs, rhs
0.83 lookups.py(23):         self.rhs = self.get_prep_lookup()
0.83 lookups.py(102):         return not hasattr(self.rhs, 'as_sql')
0.83 lookups.py(229):         if hasattr(self.rhs, 'resolve_expression'):
0.83 lookups.py(231):         prepared_values = []
0.83 lookups.py(232):         for rhs_value in self.rhs:
0.83 lookups.py(233):             if hasattr(rhs_value, 'resolve_expression'):
0.83 lookups.py(237):             elif self.prepare_rhs and hasattr(self.lhs.output_field, 'get_prep_value'):
0.83 lookups.py(238):                 rhs_value = self.lhs.output_field.get_prep_value(rhs_value)
0.83 lookups.py(239):             prepared_values.append(rhs_value)
0.83 lookups.py(232):         for rhs_value in self.rhs:
0.83 lookups.py(240):         return prepared_values
0.83 lookups.py(24):         if hasattr(self.lhs, 'get_bilateral_transforms'):
0.83 lookups.py(27):             bilateral_transforms = []
0.83 lookups.py(28):         if bilateral_transforms:
0.83 lookups.py(36):         self.bilateral_transforms = bilateral_transforms
0.83 operations.py(332):         if self._cache is None:
0.83 operations.py(334):         return getattr(self._cache, compiler_name)
0.83 lookups.py(135):         return self.lhs.contains_aggregate or getattr(self.rhs, 'contains_aggregate', False)
0.83 lookups.py(407):         max_in_list_size = connection.ops.max_in_list_size()
0.83 operations.py(274):         return None
0.83 lookups.py(408):         if self.rhs_is_direct_value() and max_in_list_size and len(self.rhs) > max_in_list_size:
0.83 lookups.py(102):         return not hasattr(self.rhs, 'as_sql')
0.83 lookups.py(410):         return super().as_sql(compiler, connection)
0.83 lookups.py(191):         lhs_sql, params = self.process_lhs(compiler, connection)
0.83 lookups.py(182):         lhs_sql, params = super().process_lhs(compiler, connection, lhs)
0.83 lookups.py(82):         lhs = lhs or self.lhs
0.83 lookups.py(83):         if hasattr(lhs, 'resolve_expression'):
0.83 lookups.py(84):             lhs = lhs.resolve_expression(compiler.query)
0.83 lookups.py(85):         return compiler.compile(lhs)
0.83 lookups.py(183):         field_internal_type = self.lhs.output_field.get_internal_type()
0.83 lookups.py(184):         db_type = self.lhs.output_field.db_type(connection=connection)
0.83 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.83 lookups.py(186):             db_type, field_internal_type) % lhs_sql
0.83 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.83 operations.py(194):         return '%s'
0.83 lookups.py(186):             db_type, field_internal_type) % lhs_sql
0.83 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.83 lookups.py(187):         lhs_sql = connection.ops.lookup_cast(self.lookup_name, field_internal_type) % lhs_sql
0.83 operations.py(267):         return "%s"
0.83 lookups.py(188):         return lhs_sql, list(params)
0.83 lookups.py(192):         rhs_sql, rhs_params = self.process_rhs(compiler, connection)
0.83 lookups.py(374):         db_rhs = getattr(self.rhs, '_db', None)
0.83 lookups.py(375):         if db_rhs is not None and db_rhs != connection.alias:
0.83 lookups.py(381):         if self.rhs_is_direct_value():
0.83 lookups.py(102):         return not hasattr(self.rhs, 'as_sql')
0.83 lookups.py(383):             try:
0.83 lookups.py(384):                 rhs = OrderedSet(self.rhs)
0.83 lookups.py(385):                 rhs.discard(None)
0.83 lookups.py(389):             if not rhs:
0.83 lookups.py(394):             sqls, sqls_params = self.batch_process_rhs(compiler, connection, rhs)
0.83 lookups.py(259):         pre_processed = super().batch_process_rhs(compiler, connection, rhs)
0.83 lookups.py(44):         if rhs is None:
0.83 lookups.py(46):         if self.bilateral_transforms:
0.83 lookups.py(56):             _, params = self.get_db_prep_lookup(rhs, connection)
0.83 lookups.py(211):         field = getattr(self.lhs.output_field, 'target_field', None)
0.83 lookups.py(212):         get_db_prep_value = getattr(field, 'get_db_prep_value', None) or self.lhs.output_field.get_db_prep_value
0.83 lookups.py(214):             '%s',
0.83 lookups.py(216):             if self.get_db_prep_lookup_value_is_iterable else
0.83 lookups.py(215):             [get_db_prep_value(v, connection, prepared=True) for v in value]
0.83 lookups.py(215):             [get_db_prep_value(v, connection, prepared=True) for v in value]
0.83 lookups.py(215):             [get_db_prep_value(v, connection, prepared=True) for v in value]
0.83 lookups.py(213):         return (
0.83 lookups.py(57):             sqls, sqls_params = ['%s'] * len(params), params
0.83 lookups.py(58):         return sqls, sqls_params
0.83 lookups.py(264):         sql, params = zip(*(
0.83 lookups.py(266):             for sql, param in zip(*pre_processed)
0.83 lookups.py(264):         sql, params = zip(*(
0.83 lookups.py(264):         sql, params = zip(*(
0.83 lookups.py(266):             for sql, param in zip(*pre_processed)
0.83 lookups.py(265):             self.resolve_expression_parameter(compiler, connection, sql, param)
0.83 lookups.py(251):         params = [param]
0.83 lookups.py(252):         if hasattr(param, 'resolve_expression'):
0.83 lookups.py(254):         if hasattr(param, 'as_sql'):
0.83 lookups.py(256):         return sql, params
0.83 lookups.py(264):         sql, params = zip(*(
0.83 lookups.py(268):         params = itertools.chain.from_iterable(params)
0.83 lookups.py(269):         return sql, tuple(params)
0.83 lookups.py(395):             placeholder = '(' + ', '.join(sqls) + ')'
0.83 lookups.py(396):             return (placeholder, sqls_params)
0.83 lookups.py(193):         params.extend(rhs_params)
0.83 lookups.py(194):         rhs_sql = self.get_rhs_op(connection, rhs_sql)
0.83 lookups.py(404):         return 'IN %s' % rhs
0.83 lookups.py(195):         return '%s %s' % (lhs_sql, rhs_sql), params
0.83 operations.py(568):         return []
0.83 operations.py(568):         return []
0.83 operations.py(332):         if self._cache is None:
0.83 operations.py(334):         return getattr(self._cache, compiler_name)
0.83 operations.py(690):         return 'INSERT INTO'
0.83 operations.py(465):         return value
0.83 operations.py(465):         return value
0.83 operations.py(465):         return value
0.83 operations.py(465):         return value
0.83 operations.py(617):         return params
0.83 operations.py(617):         return params
0.83 operations.py(617):         return params
0.83 operations.py(617):         return params
0.83 operations.py(617):         return params
0.83 operations.py(617):         return params
0.83 operations.py(617):         return params
0.83 operations.py(617):         return params
0.83 operations.py(617):         return params
0.83 operations.py(617):         return params
0.83 operations.py(617):         return params
0.83 operations.py(617):         return params
0.83 operations.py(693):         return ''
0.83 lookups.py(22):         self.lhs, self.rhs = lhs, rhs
0.83 lookups.py(23):         self.rhs = self.get_prep_lookup()
0.83 lookups.py(72):         if hasattr(self.rhs, 'resolve_expression'):
0.83 lookups.py(74):         if self.prepare_rhs and hasattr(self.lhs.output_field, 'get_prep_value'):
0.83 lookups.py(75):             return self.lhs.output_field.get_prep_value(self.rhs)
0.83 lookups.py(24):         if hasattr(self.lhs, 'get_bilateral_transforms'):
0.83 lookups.py(27):             bilateral_transforms = []
0.83 lookups.py(28):         if bilateral_transforms:
0.83 lookups.py(36):         self.bilateral_transforms = bilateral_transforms
0.83 operations.py(332):         if self._cache is None:
0.83 operations.py(334):         return getattr(self._cache, compiler_name)
0.83 lookups.py(135):         return self.lhs.contains_aggregate or getattr(self.rhs, 'contains_aggregate', False)
0.83 lookups.py(306):             isinstance(self.rhs, bool) and
0.83 lookups.py(305):         if (
0.83 lookups.py(313):         return super().as_sql(compiler, connection)
0.83 lookups.py(191):         lhs_sql, params = self.process_lhs(compiler, connection)
0.83 lookups.py(182):         lhs_sql, params = super().process_lhs(compiler, connection, lhs)
0.83 lookups.py(82):         lhs = lhs or self.lhs
0.83 lookups.py(83):         if hasattr(lhs, 'resolve_expression'):
0.83 lookups.py(84):             lhs = lhs.resolve_expression(compiler.query)
0.83 lookups.py(85):         return compiler.compile(lhs)
0.83 lookups.py(183):         field_internal_type = self.lhs.output_field.get_internal_type()
0.83 lookups.py(184):         db_type = self.lhs.output_field.db_type(connection=connection)
0.83 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.83 lookups.py(186):             db_type, field_internal_type) % lhs_sql
0.83 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.83 operations.py(194):         return '%s'
0.83 lookups.py(186):             db_type, field_internal_type) % lhs_sql
0.83 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.83 lookups.py(187):         lhs_sql = connection.ops.lookup_cast(self.lookup_name, field_internal_type) % lhs_sql
0.83 operations.py(267):         return "%s"
0.83 lookups.py(188):         return lhs_sql, list(params)
0.83 lookups.py(192):         rhs_sql, rhs_params = self.process_rhs(compiler, connection)
0.83 lookups.py(288):         from django.db.models.sql.query import Query
0.83 lookups.py(289):         if isinstance(self.rhs, Query):
0.83 lookups.py(299):         return super().process_rhs(compiler, connection)
0.83 lookups.py(88):         value = self.rhs
0.83 lookups.py(89):         if self.bilateral_transforms:
0.83 lookups.py(96):         if hasattr(value, 'as_sql'):
0.83 lookups.py(99):             return self.get_db_prep_lookup(value, connection)
0.83 lookups.py(211):         field = getattr(self.lhs.output_field, 'target_field', None)
0.83 lookups.py(212):         get_db_prep_value = getattr(field, 'get_db_prep_value', None) or self.lhs.output_field.get_db_prep_value
0.83 lookups.py(214):             '%s',
0.83 lookups.py(216):             if self.get_db_prep_lookup_value_is_iterable else
0.83 lookups.py(215):             [get_db_prep_value(v, connection, prepared=True) for v in value]
0.83 lookups.py(217):             [get_db_prep_value(value, connection, prepared=True)]
0.83 lookups.py(213):         return (
0.83 lookups.py(193):         params.extend(rhs_params)
0.83 lookups.py(194):         rhs_sql = self.get_rhs_op(connection, rhs_sql)
0.83 lookups.py(198):         return connection.operators[self.lookup_name] % rhs
0.83 lookups.py(195):         return '%s %s' % (lhs_sql, rhs_sql), params
0.83 operations.py(568):         return []
0.83 operations.py(568):         return []
0.83 operations.py(568):         return []
0.83 operations.py(332):         if self._cache is None:
0.83 operations.py(334):         return getattr(self._cache, compiler_name)
0.83 operations.py(690):         return 'INSERT INTO'
0.83 operations.py(617):         return params
0.83 operations.py(617):         return params
0.83 operations.py(617):         return params
0.83 operations.py(617):         return params
0.83 operations.py(617):         return params
0.83 operations.py(617):         return params
0.83 operations.py(693):         return ''
0.83 lookups.py(22):         self.lhs, self.rhs = lhs, rhs
0.83 lookups.py(23):         self.rhs = self.get_prep_lookup()
0.83 lookups.py(72):         if hasattr(self.rhs, 'resolve_expression'):
0.83 lookups.py(74):         if self.prepare_rhs and hasattr(self.lhs.output_field, 'get_prep_value'):
0.83 lookups.py(75):             return self.lhs.output_field.get_prep_value(self.rhs)
0.83 lookups.py(24):         if hasattr(self.lhs, 'get_bilateral_transforms'):
0.83 lookups.py(27):             bilateral_transforms = []
0.83 lookups.py(28):         if bilateral_transforms:
0.83 lookups.py(36):         self.bilateral_transforms = bilateral_transforms
0.83 operations.py(332):         if self._cache is None:
0.83 operations.py(334):         return getattr(self._cache, compiler_name)
0.83 lookups.py(135):         return self.lhs.contains_aggregate or getattr(self.rhs, 'contains_aggregate', False)
0.83 lookups.py(306):             isinstance(self.rhs, bool) and
0.83 lookups.py(305):         if (
0.83 lookups.py(313):         return super().as_sql(compiler, connection)
0.83 lookups.py(191):         lhs_sql, params = self.process_lhs(compiler, connection)
0.83 lookups.py(182):         lhs_sql, params = super().process_lhs(compiler, connection, lhs)
0.83 lookups.py(82):         lhs = lhs or self.lhs
0.83 lookups.py(83):         if hasattr(lhs, 'resolve_expression'):
0.83 lookups.py(84):             lhs = lhs.resolve_expression(compiler.query)
0.83 lookups.py(85):         return compiler.compile(lhs)
0.83 lookups.py(183):         field_internal_type = self.lhs.output_field.get_internal_type()
0.83 lookups.py(184):         db_type = self.lhs.output_field.db_type(connection=connection)
0.83 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.83 lookups.py(186):             db_type, field_internal_type) % lhs_sql
0.83 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.83 operations.py(194):         return '%s'
0.83 lookups.py(186):             db_type, field_internal_type) % lhs_sql
0.83 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.83 lookups.py(187):         lhs_sql = connection.ops.lookup_cast(self.lookup_name, field_internal_type) % lhs_sql
0.83 operations.py(267):         return "%s"
0.83 lookups.py(188):         return lhs_sql, list(params)
0.83 lookups.py(192):         rhs_sql, rhs_params = self.process_rhs(compiler, connection)
0.83 lookups.py(288):         from django.db.models.sql.query import Query
0.83 lookups.py(289):         if isinstance(self.rhs, Query):
0.83 lookups.py(299):         return super().process_rhs(compiler, connection)
0.83 lookups.py(88):         value = self.rhs
0.83 lookups.py(89):         if self.bilateral_transforms:
0.83 lookups.py(96):         if hasattr(value, 'as_sql'):
0.83 lookups.py(99):             return self.get_db_prep_lookup(value, connection)
0.83 lookups.py(211):         field = getattr(self.lhs.output_field, 'target_field', None)
0.83 lookups.py(212):         get_db_prep_value = getattr(field, 'get_db_prep_value', None) or self.lhs.output_field.get_db_prep_value
0.83 lookups.py(214):             '%s',
0.83 lookups.py(216):             if self.get_db_prep_lookup_value_is_iterable else
0.83 lookups.py(215):             [get_db_prep_value(v, connection, prepared=True) for v in value]
0.83 lookups.py(217):             [get_db_prep_value(value, connection, prepared=True)]
0.83 lookups.py(213):         return (
0.83 lookups.py(193):         params.extend(rhs_params)
0.83 lookups.py(194):         rhs_sql = self.get_rhs_op(connection, rhs_sql)
0.83 lookups.py(198):         return connection.operators[self.lookup_name] % rhs
0.83 lookups.py(195):         return '%s %s' % (lhs_sql, rhs_sql), params
0.83 operations.py(568):         return []
0.83 operations.py(568):         return []
0.83 operations.py(568):         return []
0.83 lookups.py(22):         self.lhs, self.rhs = lhs, rhs
0.83 lookups.py(23):         self.rhs = self.get_prep_lookup()
0.83 lookups.py(72):         if hasattr(self.rhs, 'resolve_expression'):
0.83 lookups.py(74):         if self.prepare_rhs and hasattr(self.lhs.output_field, 'get_prep_value'):
0.83 lookups.py(75):             return self.lhs.output_field.get_prep_value(self.rhs)
0.83 lookups.py(24):         if hasattr(self.lhs, 'get_bilateral_transforms'):
0.83 lookups.py(27):             bilateral_transforms = []
0.83 lookups.py(28):         if bilateral_transforms:
0.83 lookups.py(36):         self.bilateral_transforms = bilateral_transforms
0.83 lookups.py(22):         self.lhs, self.rhs = lhs, rhs
0.83 lookups.py(23):         self.rhs = self.get_prep_lookup()
0.83 lookups.py(72):         if hasattr(self.rhs, 'resolve_expression'):
0.83 lookups.py(74):         if self.prepare_rhs and hasattr(self.lhs.output_field, 'get_prep_value'):
0.83 lookups.py(75):             return self.lhs.output_field.get_prep_value(self.rhs)
0.83 lookups.py(24):         if hasattr(self.lhs, 'get_bilateral_transforms'):
0.83 lookups.py(27):             bilateral_transforms = []
0.83 lookups.py(28):         if bilateral_transforms:
0.83 lookups.py(36):         self.bilateral_transforms = bilateral_transforms
0.83 operations.py(332):         if self._cache is None:
0.83 operations.py(334):         return getattr(self._cache, compiler_name)
0.83 lookups.py(135):         return self.lhs.contains_aggregate or getattr(self.rhs, 'contains_aggregate', False)
0.83 lookups.py(135):         return self.lhs.contains_aggregate or getattr(self.rhs, 'contains_aggregate', False)
0.83 lookups.py(306):             isinstance(self.rhs, bool) and
0.83 lookups.py(305):         if (
0.83 lookups.py(313):         return super().as_sql(compiler, connection)
0.83 lookups.py(191):         lhs_sql, params = self.process_lhs(compiler, connection)
0.83 lookups.py(182):         lhs_sql, params = super().process_lhs(compiler, connection, lhs)
0.83 lookups.py(82):         lhs = lhs or self.lhs
0.83 lookups.py(83):         if hasattr(lhs, 'resolve_expression'):
0.83 lookups.py(84):             lhs = lhs.resolve_expression(compiler.query)
0.83 lookups.py(85):         return compiler.compile(lhs)
0.83 lookups.py(183):         field_internal_type = self.lhs.output_field.get_internal_type()
0.83 lookups.py(184):         db_type = self.lhs.output_field.db_type(connection=connection)
0.83 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.83 lookups.py(186):             db_type, field_internal_type) % lhs_sql
0.83 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.83 operations.py(194):         return '%s'
0.83 lookups.py(186):             db_type, field_internal_type) % lhs_sql
0.83 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.83 lookups.py(187):         lhs_sql = connection.ops.lookup_cast(self.lookup_name, field_internal_type) % lhs_sql
0.83 operations.py(267):         return "%s"
0.83 lookups.py(188):         return lhs_sql, list(params)
0.83 lookups.py(192):         rhs_sql, rhs_params = self.process_rhs(compiler, connection)
0.83 lookups.py(288):         from django.db.models.sql.query import Query
0.83 lookups.py(289):         if isinstance(self.rhs, Query):
0.83 lookups.py(299):         return super().process_rhs(compiler, connection)
0.83 lookups.py(88):         value = self.rhs
0.83 lookups.py(89):         if self.bilateral_transforms:
0.83 lookups.py(96):         if hasattr(value, 'as_sql'):
0.83 lookups.py(99):             return self.get_db_prep_lookup(value, connection)
0.83 lookups.py(211):         field = getattr(self.lhs.output_field, 'target_field', None)
0.83 lookups.py(212):         get_db_prep_value = getattr(field, 'get_db_prep_value', None) or self.lhs.output_field.get_db_prep_value
0.83 lookups.py(214):             '%s',
0.83 lookups.py(216):             if self.get_db_prep_lookup_value_is_iterable else
0.83 lookups.py(215):             [get_db_prep_value(v, connection, prepared=True) for v in value]
0.83 lookups.py(217):             [get_db_prep_value(value, connection, prepared=True)]
0.83 lookups.py(213):         return (
0.83 lookups.py(193):         params.extend(rhs_params)
0.83 lookups.py(194):         rhs_sql = self.get_rhs_op(connection, rhs_sql)
0.83 lookups.py(198):         return connection.operators[self.lookup_name] % rhs
0.83 lookups.py(195):         return '%s %s' % (lhs_sql, rhs_sql), params
0.83 lookups.py(306):             isinstance(self.rhs, bool) and
0.83 lookups.py(305):         if (
0.83 lookups.py(313):         return super().as_sql(compiler, connection)
0.83 lookups.py(191):         lhs_sql, params = self.process_lhs(compiler, connection)
0.83 lookups.py(182):         lhs_sql, params = super().process_lhs(compiler, connection, lhs)
0.83 lookups.py(82):         lhs = lhs or self.lhs
0.83 lookups.py(83):         if hasattr(lhs, 'resolve_expression'):
0.83 lookups.py(84):             lhs = lhs.resolve_expression(compiler.query)
0.83 lookups.py(85):         return compiler.compile(lhs)
0.83 lookups.py(183):         field_internal_type = self.lhs.output_field.get_internal_type()
0.83 lookups.py(184):         db_type = self.lhs.output_field.db_type(connection=connection)
0.83 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.83 lookups.py(186):             db_type, field_internal_type) % lhs_sql
0.83 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.83 operations.py(194):         return '%s'
0.83 lookups.py(186):             db_type, field_internal_type) % lhs_sql
0.83 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.83 lookups.py(187):         lhs_sql = connection.ops.lookup_cast(self.lookup_name, field_internal_type) % lhs_sql
0.83 operations.py(267):         return "%s"
0.83 lookups.py(188):         return lhs_sql, list(params)
0.83 lookups.py(192):         rhs_sql, rhs_params = self.process_rhs(compiler, connection)
0.83 lookups.py(288):         from django.db.models.sql.query import Query
0.83 lookups.py(289):         if isinstance(self.rhs, Query):
0.83 lookups.py(299):         return super().process_rhs(compiler, connection)
0.83 lookups.py(88):         value = self.rhs
0.83 lookups.py(89):         if self.bilateral_transforms:
0.83 lookups.py(96):         if hasattr(value, 'as_sql'):
0.83 lookups.py(99):             return self.get_db_prep_lookup(value, connection)
0.83 lookups.py(211):         field = getattr(self.lhs.output_field, 'target_field', None)
0.83 lookups.py(212):         get_db_prep_value = getattr(field, 'get_db_prep_value', None) or self.lhs.output_field.get_db_prep_value
0.83 lookups.py(214):             '%s',
0.83 lookups.py(216):             if self.get_db_prep_lookup_value_is_iterable else
0.83 lookups.py(215):             [get_db_prep_value(v, connection, prepared=True) for v in value]
0.83 lookups.py(217):             [get_db_prep_value(value, connection, prepared=True)]
0.83 lookups.py(213):         return (
0.83 lookups.py(193):         params.extend(rhs_params)
0.83 lookups.py(194):         rhs_sql = self.get_rhs_op(connection, rhs_sql)
0.83 lookups.py(198):         return connection.operators[self.lookup_name] % rhs
0.83 lookups.py(195):         return '%s %s' % (lhs_sql, rhs_sql), params
0.83 operations.py(224):         limit, offset = self._get_limit_offset_params(low_mark, high_mark)
0.83 operations.py(215):         offset = low_mark or 0
0.83 operations.py(216):         if high_mark is not None:
0.83 operations.py(217):             return (high_mark - offset), offset
0.83 operations.py(225):         return ' '.join(sql for sql in (
0.83 operations.py(226):             ('LIMIT %d' % limit) if limit else None,
0.83 operations.py(227):             ('OFFSET %d' % offset) if offset else None,
0.83 operations.py(225):         return ' '.join(sql for sql in (
0.83 operations.py(225):         return ' '.join(sql for sql in (
0.83 operations.py(228):         ) if sql)
0.83 operations.py(225):         return ' '.join(sql for sql in (
0.83 operations.py(225):         return ' '.join(sql for sql in (
0.83 operations.py(228):         ) if sql)
0.83 operations.py(225):         return ' '.join(sql for sql in (
0.83 operations.py(568):         return []
0.83 operations.py(568):         return []
0.83 operations.py(568):         return []
0.83 lookups.py(22):         self.lhs, self.rhs = lhs, rhs
0.83 lookups.py(23):         self.rhs = self.get_prep_lookup()
0.83 lookups.py(72):         if hasattr(self.rhs, 'resolve_expression'):
0.83 lookups.py(74):         if self.prepare_rhs and hasattr(self.lhs.output_field, 'get_prep_value'):
0.83 lookups.py(75):             return self.lhs.output_field.get_prep_value(self.rhs)
0.83 lookups.py(24):         if hasattr(self.lhs, 'get_bilateral_transforms'):
0.83 lookups.py(27):             bilateral_transforms = []
0.83 lookups.py(28):         if bilateral_transforms:
0.83 lookups.py(36):         self.bilateral_transforms = bilateral_transforms
0.83 lookups.py(22):         self.lhs, self.rhs = lhs, rhs
0.83 lookups.py(23):         self.rhs = self.get_prep_lookup()
0.83 lookups.py(72):         if hasattr(self.rhs, 'resolve_expression'):
0.83 lookups.py(74):         if self.prepare_rhs and hasattr(self.lhs.output_field, 'get_prep_value'):
0.83 lookups.py(75):             return self.lhs.output_field.get_prep_value(self.rhs)
0.83 lookups.py(24):         if hasattr(self.lhs, 'get_bilateral_transforms'):
0.83 lookups.py(27):             bilateral_transforms = []
0.83 lookups.py(28):         if bilateral_transforms:
0.83 lookups.py(36):         self.bilateral_transforms = bilateral_transforms
0.83 operations.py(332):         if self._cache is None:
0.83 operations.py(334):         return getattr(self._cache, compiler_name)
0.83 lookups.py(135):         return self.lhs.contains_aggregate or getattr(self.rhs, 'contains_aggregate', False)
0.83 lookups.py(135):         return self.lhs.contains_aggregate or getattr(self.rhs, 'contains_aggregate', False)
0.83 lookups.py(306):             isinstance(self.rhs, bool) and
0.83 lookups.py(305):         if (
0.83 lookups.py(313):         return super().as_sql(compiler, connection)
0.83 lookups.py(191):         lhs_sql, params = self.process_lhs(compiler, connection)
0.83 lookups.py(182):         lhs_sql, params = super().process_lhs(compiler, connection, lhs)
0.83 lookups.py(82):         lhs = lhs or self.lhs
0.83 lookups.py(83):         if hasattr(lhs, 'resolve_expression'):
0.83 lookups.py(84):             lhs = lhs.resolve_expression(compiler.query)
0.83 lookups.py(85):         return compiler.compile(lhs)
0.83 lookups.py(183):         field_internal_type = self.lhs.output_field.get_internal_type()
0.83 lookups.py(184):         db_type = self.lhs.output_field.db_type(connection=connection)
0.83 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.83 lookups.py(186):             db_type, field_internal_type) % lhs_sql
0.83 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.83 operations.py(194):         return '%s'
0.83 lookups.py(186):             db_type, field_internal_type) % lhs_sql
0.83 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.83 lookups.py(187):         lhs_sql = connection.ops.lookup_cast(self.lookup_name, field_internal_type) % lhs_sql
0.83 operations.py(267):         return "%s"
0.83 lookups.py(188):         return lhs_sql, list(params)
0.83 lookups.py(192):         rhs_sql, rhs_params = self.process_rhs(compiler, connection)
0.83 lookups.py(288):         from django.db.models.sql.query import Query
0.83 lookups.py(289):         if isinstance(self.rhs, Query):
0.83 lookups.py(299):         return super().process_rhs(compiler, connection)
0.83 lookups.py(88):         value = self.rhs
0.83 lookups.py(89):         if self.bilateral_transforms:
0.83 lookups.py(96):         if hasattr(value, 'as_sql'):
0.83 lookups.py(99):             return self.get_db_prep_lookup(value, connection)
0.83 lookups.py(211):         field = getattr(self.lhs.output_field, 'target_field', None)
0.83 lookups.py(212):         get_db_prep_value = getattr(field, 'get_db_prep_value', None) or self.lhs.output_field.get_db_prep_value
0.83 lookups.py(214):             '%s',
0.83 lookups.py(216):             if self.get_db_prep_lookup_value_is_iterable else
0.83 lookups.py(215):             [get_db_prep_value(v, connection, prepared=True) for v in value]
0.83 lookups.py(217):             [get_db_prep_value(value, connection, prepared=True)]
0.83 lookups.py(213):         return (
0.83 lookups.py(193):         params.extend(rhs_params)
0.83 lookups.py(194):         rhs_sql = self.get_rhs_op(connection, rhs_sql)
0.83 lookups.py(198):         return connection.operators[self.lookup_name] % rhs
0.83 lookups.py(195):         return '%s %s' % (lhs_sql, rhs_sql), params
0.83 lookups.py(306):             isinstance(self.rhs, bool) and
0.83 lookups.py(305):         if (
0.83 lookups.py(313):         return super().as_sql(compiler, connection)
0.83 lookups.py(191):         lhs_sql, params = self.process_lhs(compiler, connection)
0.83 lookups.py(182):         lhs_sql, params = super().process_lhs(compiler, connection, lhs)
0.83 lookups.py(82):         lhs = lhs or self.lhs
0.83 lookups.py(83):         if hasattr(lhs, 'resolve_expression'):
0.83 lookups.py(84):             lhs = lhs.resolve_expression(compiler.query)
0.83 lookups.py(85):         return compiler.compile(lhs)
0.83 lookups.py(183):         field_internal_type = self.lhs.output_field.get_internal_type()
0.83 lookups.py(184):         db_type = self.lhs.output_field.db_type(connection=connection)
0.83 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.83 lookups.py(186):             db_type, field_internal_type) % lhs_sql
0.83 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.83 operations.py(194):         return '%s'
0.83 lookups.py(186):             db_type, field_internal_type) % lhs_sql
0.83 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.83 lookups.py(187):         lhs_sql = connection.ops.lookup_cast(self.lookup_name, field_internal_type) % lhs_sql
0.83 operations.py(267):         return "%s"
0.83 lookups.py(188):         return lhs_sql, list(params)
0.83 lookups.py(192):         rhs_sql, rhs_params = self.process_rhs(compiler, connection)
0.83 lookups.py(288):         from django.db.models.sql.query import Query
0.83 lookups.py(289):         if isinstance(self.rhs, Query):
0.83 lookups.py(299):         return super().process_rhs(compiler, connection)
0.83 lookups.py(88):         value = self.rhs
0.83 lookups.py(89):         if self.bilateral_transforms:
0.83 lookups.py(96):         if hasattr(value, 'as_sql'):
0.83 lookups.py(99):             return self.get_db_prep_lookup(value, connection)
0.83 lookups.py(211):         field = getattr(self.lhs.output_field, 'target_field', None)
0.83 lookups.py(212):         get_db_prep_value = getattr(field, 'get_db_prep_value', None) or self.lhs.output_field.get_db_prep_value
0.83 lookups.py(214):             '%s',
0.83 lookups.py(216):             if self.get_db_prep_lookup_value_is_iterable else
0.83 lookups.py(215):             [get_db_prep_value(v, connection, prepared=True) for v in value]
0.83 lookups.py(217):             [get_db_prep_value(value, connection, prepared=True)]
0.83 lookups.py(213):         return (
0.83 lookups.py(193):         params.extend(rhs_params)
0.83 lookups.py(194):         rhs_sql = self.get_rhs_op(connection, rhs_sql)
0.83 lookups.py(198):         return connection.operators[self.lookup_name] % rhs
0.83 lookups.py(195):         return '%s %s' % (lhs_sql, rhs_sql), params
0.83 operations.py(224):         limit, offset = self._get_limit_offset_params(low_mark, high_mark)
0.83 operations.py(215):         offset = low_mark or 0
0.83 operations.py(216):         if high_mark is not None:
0.83 operations.py(217):             return (high_mark - offset), offset
0.83 operations.py(225):         return ' '.join(sql for sql in (
0.83 operations.py(226):             ('LIMIT %d' % limit) if limit else None,
0.83 operations.py(227):             ('OFFSET %d' % offset) if offset else None,
0.83 operations.py(225):         return ' '.join(sql for sql in (
0.83 operations.py(225):         return ' '.join(sql for sql in (
0.83 operations.py(228):         ) if sql)
0.83 operations.py(225):         return ' '.join(sql for sql in (
0.83 operations.py(225):         return ' '.join(sql for sql in (
0.83 operations.py(228):         ) if sql)
0.83 operations.py(225):         return ' '.join(sql for sql in (
0.83 operations.py(568):         return []
0.83 operations.py(568):         return []
0.83 operations.py(568):         return []
0.83 lookups.py(22):         self.lhs, self.rhs = lhs, rhs
0.83 lookups.py(23):         self.rhs = self.get_prep_lookup()
0.83 lookups.py(72):         if hasattr(self.rhs, 'resolve_expression'):
0.83 lookups.py(74):         if self.prepare_rhs and hasattr(self.lhs.output_field, 'get_prep_value'):
0.83 lookups.py(75):             return self.lhs.output_field.get_prep_value(self.rhs)
0.83 lookups.py(24):         if hasattr(self.lhs, 'get_bilateral_transforms'):
0.83 lookups.py(27):             bilateral_transforms = []
0.83 lookups.py(28):         if bilateral_transforms:
0.83 lookups.py(36):         self.bilateral_transforms = bilateral_transforms
0.83 lookups.py(22):         self.lhs, self.rhs = lhs, rhs
0.83 lookups.py(23):         self.rhs = self.get_prep_lookup()
0.83 lookups.py(72):         if hasattr(self.rhs, 'resolve_expression'):
0.83 lookups.py(74):         if self.prepare_rhs and hasattr(self.lhs.output_field, 'get_prep_value'):
0.83 lookups.py(75):             return self.lhs.output_field.get_prep_value(self.rhs)
0.83 lookups.py(24):         if hasattr(self.lhs, 'get_bilateral_transforms'):
0.83 lookups.py(27):             bilateral_transforms = []
0.83 lookups.py(28):         if bilateral_transforms:
0.83 lookups.py(36):         self.bilateral_transforms = bilateral_transforms
0.83 operations.py(332):         if self._cache is None:
0.83 operations.py(334):         return getattr(self._cache, compiler_name)
0.83 lookups.py(135):         return self.lhs.contains_aggregate or getattr(self.rhs, 'contains_aggregate', False)
0.83 lookups.py(135):         return self.lhs.contains_aggregate or getattr(self.rhs, 'contains_aggregate', False)
0.83 lookups.py(306):             isinstance(self.rhs, bool) and
0.83 lookups.py(305):         if (
0.83 lookups.py(313):         return super().as_sql(compiler, connection)
0.83 lookups.py(191):         lhs_sql, params = self.process_lhs(compiler, connection)
0.83 lookups.py(182):         lhs_sql, params = super().process_lhs(compiler, connection, lhs)
0.83 lookups.py(82):         lhs = lhs or self.lhs
0.83 lookups.py(83):         if hasattr(lhs, 'resolve_expression'):
0.83 lookups.py(84):             lhs = lhs.resolve_expression(compiler.query)
0.83 lookups.py(85):         return compiler.compile(lhs)
0.83 lookups.py(183):         field_internal_type = self.lhs.output_field.get_internal_type()
0.83 lookups.py(184):         db_type = self.lhs.output_field.db_type(connection=connection)
0.83 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.83 lookups.py(186):             db_type, field_internal_type) % lhs_sql
0.83 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.83 operations.py(194):         return '%s'
0.83 lookups.py(186):             db_type, field_internal_type) % lhs_sql
0.83 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.83 lookups.py(187):         lhs_sql = connection.ops.lookup_cast(self.lookup_name, field_internal_type) % lhs_sql
0.83 operations.py(267):         return "%s"
0.83 lookups.py(188):         return lhs_sql, list(params)
0.83 lookups.py(192):         rhs_sql, rhs_params = self.process_rhs(compiler, connection)
0.83 lookups.py(288):         from django.db.models.sql.query import Query
0.83 lookups.py(289):         if isinstance(self.rhs, Query):
0.83 lookups.py(299):         return super().process_rhs(compiler, connection)
0.83 lookups.py(88):         value = self.rhs
0.83 lookups.py(89):         if self.bilateral_transforms:
0.83 lookups.py(96):         if hasattr(value, 'as_sql'):
0.83 lookups.py(99):             return self.get_db_prep_lookup(value, connection)
0.83 lookups.py(211):         field = getattr(self.lhs.output_field, 'target_field', None)
0.83 lookups.py(212):         get_db_prep_value = getattr(field, 'get_db_prep_value', None) or self.lhs.output_field.get_db_prep_value
0.83 lookups.py(214):             '%s',
0.83 lookups.py(216):             if self.get_db_prep_lookup_value_is_iterable else
0.83 lookups.py(215):             [get_db_prep_value(v, connection, prepared=True) for v in value]
0.83 lookups.py(217):             [get_db_prep_value(value, connection, prepared=True)]
0.83 lookups.py(213):         return (
0.83 lookups.py(193):         params.extend(rhs_params)
0.83 lookups.py(194):         rhs_sql = self.get_rhs_op(connection, rhs_sql)
0.83 lookups.py(198):         return connection.operators[self.lookup_name] % rhs
0.83 lookups.py(195):         return '%s %s' % (lhs_sql, rhs_sql), params
0.83 lookups.py(306):             isinstance(self.rhs, bool) and
0.83 lookups.py(305):         if (
0.83 lookups.py(313):         return super().as_sql(compiler, connection)
0.83 lookups.py(191):         lhs_sql, params = self.process_lhs(compiler, connection)
0.83 lookups.py(182):         lhs_sql, params = super().process_lhs(compiler, connection, lhs)
0.83 lookups.py(82):         lhs = lhs or self.lhs
0.83 lookups.py(83):         if hasattr(lhs, 'resolve_expression'):
0.83 lookups.py(84):             lhs = lhs.resolve_expression(compiler.query)
0.83 lookups.py(85):         return compiler.compile(lhs)
0.83 lookups.py(183):         field_internal_type = self.lhs.output_field.get_internal_type()
0.83 lookups.py(184):         db_type = self.lhs.output_field.db_type(connection=connection)
0.83 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.83 lookups.py(186):             db_type, field_internal_type) % lhs_sql
0.83 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.83 operations.py(194):         return '%s'
0.83 lookups.py(186):             db_type, field_internal_type) % lhs_sql
0.83 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.83 lookups.py(187):         lhs_sql = connection.ops.lookup_cast(self.lookup_name, field_internal_type) % lhs_sql
0.83 operations.py(267):         return "%s"
0.83 lookups.py(188):         return lhs_sql, list(params)
0.83 lookups.py(192):         rhs_sql, rhs_params = self.process_rhs(compiler, connection)
0.83 lookups.py(288):         from django.db.models.sql.query import Query
0.83 lookups.py(289):         if isinstance(self.rhs, Query):
0.83 lookups.py(299):         return super().process_rhs(compiler, connection)
0.83 lookups.py(88):         value = self.rhs
0.83 lookups.py(89):         if self.bilateral_transforms:
0.83 lookups.py(96):         if hasattr(value, 'as_sql'):
0.83 lookups.py(99):             return self.get_db_prep_lookup(value, connection)
0.83 lookups.py(211):         field = getattr(self.lhs.output_field, 'target_field', None)
0.83 lookups.py(212):         get_db_prep_value = getattr(field, 'get_db_prep_value', None) or self.lhs.output_field.get_db_prep_value
0.83 lookups.py(214):             '%s',
0.83 lookups.py(216):             if self.get_db_prep_lookup_value_is_iterable else
0.83 lookups.py(215):             [get_db_prep_value(v, connection, prepared=True) for v in value]
0.83 lookups.py(217):             [get_db_prep_value(value, connection, prepared=True)]
0.83 lookups.py(213):         return (
0.83 lookups.py(193):         params.extend(rhs_params)
0.83 lookups.py(194):         rhs_sql = self.get_rhs_op(connection, rhs_sql)
0.83 lookups.py(198):         return connection.operators[self.lookup_name] % rhs
0.83 lookups.py(195):         return '%s %s' % (lhs_sql, rhs_sql), params
0.83 operations.py(224):         limit, offset = self._get_limit_offset_params(low_mark, high_mark)
0.83 operations.py(215):         offset = low_mark or 0
0.83 operations.py(216):         if high_mark is not None:
0.83 operations.py(217):             return (high_mark - offset), offset
0.83 operations.py(225):         return ' '.join(sql for sql in (
0.83 operations.py(226):             ('LIMIT %d' % limit) if limit else None,
0.83 operations.py(227):             ('OFFSET %d' % offset) if offset else None,
0.83 operations.py(225):         return ' '.join(sql for sql in (
0.83 operations.py(225):         return ' '.join(sql for sql in (
0.83 operations.py(228):         ) if sql)
0.83 operations.py(225):         return ' '.join(sql for sql in (
0.83 operations.py(225):         return ' '.join(sql for sql in (
0.83 operations.py(228):         ) if sql)
0.83 operations.py(225):         return ' '.join(sql for sql in (
0.83 operations.py(568):         return []
0.83 operations.py(568):         return []
0.83 operations.py(568):         return []
0.84 lookups.py(22):         self.lhs, self.rhs = lhs, rhs
0.84 lookups.py(23):         self.rhs = self.get_prep_lookup()
0.84 lookups.py(102):         return not hasattr(self.rhs, 'as_sql')
0.84 lookups.py(229):         if hasattr(self.rhs, 'resolve_expression'):
0.84 lookups.py(231):         prepared_values = []
0.84 lookups.py(232):         for rhs_value in self.rhs:
0.84 lookups.py(233):             if hasattr(rhs_value, 'resolve_expression'):
0.84 lookups.py(237):             elif self.prepare_rhs and hasattr(self.lhs.output_field, 'get_prep_value'):
0.84 lookups.py(238):                 rhs_value = self.lhs.output_field.get_prep_value(rhs_value)
0.84 lookups.py(239):             prepared_values.append(rhs_value)
0.84 lookups.py(232):         for rhs_value in self.rhs:
0.84 lookups.py(233):             if hasattr(rhs_value, 'resolve_expression'):
0.84 lookups.py(237):             elif self.prepare_rhs and hasattr(self.lhs.output_field, 'get_prep_value'):
0.84 lookups.py(238):                 rhs_value = self.lhs.output_field.get_prep_value(rhs_value)
0.84 lookups.py(239):             prepared_values.append(rhs_value)
0.84 lookups.py(232):         for rhs_value in self.rhs:
0.84 lookups.py(233):             if hasattr(rhs_value, 'resolve_expression'):
0.84 lookups.py(237):             elif self.prepare_rhs and hasattr(self.lhs.output_field, 'get_prep_value'):
0.84 lookups.py(238):                 rhs_value = self.lhs.output_field.get_prep_value(rhs_value)
0.84 lookups.py(239):             prepared_values.append(rhs_value)
0.84 lookups.py(232):         for rhs_value in self.rhs:
0.84 lookups.py(240):         return prepared_values
0.84 lookups.py(24):         if hasattr(self.lhs, 'get_bilateral_transforms'):
0.84 lookups.py(27):             bilateral_transforms = []
0.84 lookups.py(28):         if bilateral_transforms:
0.84 lookups.py(36):         self.bilateral_transforms = bilateral_transforms
0.84 operations.py(332):         if self._cache is None:
0.84 operations.py(334):         return getattr(self._cache, compiler_name)
0.84 lookups.py(135):         return self.lhs.contains_aggregate or getattr(self.rhs, 'contains_aggregate', False)
0.84 lookups.py(407):         max_in_list_size = connection.ops.max_in_list_size()
0.84 operations.py(274):         return None
0.84 lookups.py(408):         if self.rhs_is_direct_value() and max_in_list_size and len(self.rhs) > max_in_list_size:
0.84 lookups.py(102):         return not hasattr(self.rhs, 'as_sql')
0.84 lookups.py(410):         return super().as_sql(compiler, connection)
0.84 lookups.py(191):         lhs_sql, params = self.process_lhs(compiler, connection)
0.84 lookups.py(182):         lhs_sql, params = super().process_lhs(compiler, connection, lhs)
0.84 lookups.py(82):         lhs = lhs or self.lhs
0.84 lookups.py(83):         if hasattr(lhs, 'resolve_expression'):
0.84 lookups.py(84):             lhs = lhs.resolve_expression(compiler.query)
0.84 lookups.py(85):         return compiler.compile(lhs)
0.84 lookups.py(183):         field_internal_type = self.lhs.output_field.get_internal_type()
0.84 lookups.py(184):         db_type = self.lhs.output_field.db_type(connection=connection)
0.84 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.84 lookups.py(186):             db_type, field_internal_type) % lhs_sql
0.84 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.84 operations.py(194):         return '%s'
0.84 lookups.py(186):             db_type, field_internal_type) % lhs_sql
0.84 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.84 lookups.py(187):         lhs_sql = connection.ops.lookup_cast(self.lookup_name, field_internal_type) % lhs_sql
0.84 operations.py(267):         return "%s"
0.84 lookups.py(188):         return lhs_sql, list(params)
0.84 lookups.py(192):         rhs_sql, rhs_params = self.process_rhs(compiler, connection)
0.84 lookups.py(374):         db_rhs = getattr(self.rhs, '_db', None)
0.84 lookups.py(375):         if db_rhs is not None and db_rhs != connection.alias:
0.84 lookups.py(381):         if self.rhs_is_direct_value():
0.84 lookups.py(102):         return not hasattr(self.rhs, 'as_sql')
0.84 lookups.py(383):             try:
0.84 lookups.py(384):                 rhs = OrderedSet(self.rhs)
0.84 lookups.py(385):                 rhs.discard(None)
0.84 lookups.py(389):             if not rhs:
0.84 lookups.py(394):             sqls, sqls_params = self.batch_process_rhs(compiler, connection, rhs)
0.84 lookups.py(259):         pre_processed = super().batch_process_rhs(compiler, connection, rhs)
0.84 lookups.py(44):         if rhs is None:
0.84 lookups.py(46):         if self.bilateral_transforms:
0.84 lookups.py(56):             _, params = self.get_db_prep_lookup(rhs, connection)
0.84 lookups.py(211):         field = getattr(self.lhs.output_field, 'target_field', None)
0.84 lookups.py(212):         get_db_prep_value = getattr(field, 'get_db_prep_value', None) or self.lhs.output_field.get_db_prep_value
0.84 lookups.py(214):             '%s',
0.84 lookups.py(216):             if self.get_db_prep_lookup_value_is_iterable else
0.84 lookups.py(215):             [get_db_prep_value(v, connection, prepared=True) for v in value]
0.84 lookups.py(215):             [get_db_prep_value(v, connection, prepared=True) for v in value]
0.84 lookups.py(215):             [get_db_prep_value(v, connection, prepared=True) for v in value]
0.84 lookups.py(215):             [get_db_prep_value(v, connection, prepared=True) for v in value]
0.84 lookups.py(215):             [get_db_prep_value(v, connection, prepared=True) for v in value]
0.84 lookups.py(213):         return (
0.84 lookups.py(57):             sqls, sqls_params = ['%s'] * len(params), params
0.84 lookups.py(58):         return sqls, sqls_params
0.84 lookups.py(264):         sql, params = zip(*(
0.84 lookups.py(266):             for sql, param in zip(*pre_processed)
0.84 lookups.py(264):         sql, params = zip(*(
0.84 lookups.py(264):         sql, params = zip(*(
0.84 lookups.py(266):             for sql, param in zip(*pre_processed)
0.84 lookups.py(265):             self.resolve_expression_parameter(compiler, connection, sql, param)
0.84 lookups.py(251):         params = [param]
0.84 lookups.py(252):         if hasattr(param, 'resolve_expression'):
0.84 lookups.py(254):         if hasattr(param, 'as_sql'):
0.84 lookups.py(256):         return sql, params
0.84 lookups.py(264):         sql, params = zip(*(
0.84 lookups.py(266):             for sql, param in zip(*pre_processed)
0.84 lookups.py(265):             self.resolve_expression_parameter(compiler, connection, sql, param)
0.84 lookups.py(251):         params = [param]
0.84 lookups.py(252):         if hasattr(param, 'resolve_expression'):
0.84 lookups.py(254):         if hasattr(param, 'as_sql'):
0.84 lookups.py(256):         return sql, params
0.84 lookups.py(264):         sql, params = zip(*(
0.84 lookups.py(266):             for sql, param in zip(*pre_processed)
0.84 lookups.py(265):             self.resolve_expression_parameter(compiler, connection, sql, param)
0.84 lookups.py(251):         params = [param]
0.84 lookups.py(252):         if hasattr(param, 'resolve_expression'):
0.84 lookups.py(254):         if hasattr(param, 'as_sql'):
0.84 lookups.py(256):         return sql, params
0.84 lookups.py(264):         sql, params = zip(*(
0.84 lookups.py(268):         params = itertools.chain.from_iterable(params)
0.84 lookups.py(269):         return sql, tuple(params)
0.84 lookups.py(395):             placeholder = '(' + ', '.join(sqls) + ')'
0.84 lookups.py(396):             return (placeholder, sqls_params)
0.84 lookups.py(193):         params.extend(rhs_params)
0.84 lookups.py(194):         rhs_sql = self.get_rhs_op(connection, rhs_sql)
0.84 lookups.py(404):         return 'IN %s' % rhs
0.84 lookups.py(195):         return '%s %s' % (lhs_sql, rhs_sql), params
0.84 operations.py(568):         return []
0.84 operations.py(568):         return []
0.84 operations.py(332):         if self._cache is None:
0.84 operations.py(334):         return getattr(self._cache, compiler_name)
0.84 operations.py(690):         return 'INSERT INTO'
0.84 operations.py(465):         return value
0.84 operations.py(465):         return value
0.84 operations.py(465):         return value
0.84 operations.py(465):         return value
0.84 operations.py(465):         return value
0.84 operations.py(465):         return value
0.84 operations.py(465):         return value
0.84 operations.py(465):         return value
0.84 operations.py(465):         return value
0.84 operations.py(465):         return value
0.84 operations.py(465):         return value
0.84 operations.py(465):         return value
0.84 operations.py(617):         return params
0.84 operations.py(617):         return params
0.84 operations.py(617):         return params
0.84 operations.py(617):         return params
0.84 operations.py(617):         return params
0.84 operations.py(617):         return params
0.84 operations.py(617):         return params
0.84 operations.py(617):         return params
0.84 operations.py(617):         return params
0.84 operations.py(617):         return params
0.84 operations.py(617):         return params
0.84 operations.py(617):         return params
0.84 operations.py(617):         return params
0.84 operations.py(617):         return params
0.84 operations.py(617):         return params
0.84 operations.py(617):         return params
0.84 operations.py(617):         return params
0.84 operations.py(617):         return params
0.84 operations.py(617):         return params
0.84 operations.py(617):         return params
0.84 operations.py(617):         return params
0.84 operations.py(617):         return params
0.84 operations.py(617):         return params
0.84 operations.py(617):         return params
0.84 operations.py(617):         return params
0.84 operations.py(617):         return params
0.84 operations.py(617):         return params
0.84 operations.py(617):         return params
0.84 operations.py(617):         return params
0.84 operations.py(617):         return params
0.84 operations.py(617):         return params
0.84 operations.py(617):         return params
0.84 operations.py(617):         return params
0.84 operations.py(617):         return params
0.84 operations.py(617):         return params
0.84 operations.py(617):         return params
0.84 operations.py(693):         return ''
0.84 lookups.py(22):         self.lhs, self.rhs = lhs, rhs
0.84 lookups.py(23):         self.rhs = self.get_prep_lookup()
0.84 lookups.py(72):         if hasattr(self.rhs, 'resolve_expression'):
0.84 lookups.py(74):         if self.prepare_rhs and hasattr(self.lhs.output_field, 'get_prep_value'):
0.84 lookups.py(75):             return self.lhs.output_field.get_prep_value(self.rhs)
0.84 lookups.py(24):         if hasattr(self.lhs, 'get_bilateral_transforms'):
0.84 lookups.py(27):             bilateral_transforms = []
0.84 lookups.py(28):         if bilateral_transforms:
0.84 lookups.py(36):         self.bilateral_transforms = bilateral_transforms
0.84 operations.py(332):         if self._cache is None:
0.84 operations.py(334):         return getattr(self._cache, compiler_name)
0.84 lookups.py(135):         return self.lhs.contains_aggregate or getattr(self.rhs, 'contains_aggregate', False)
0.84 lookups.py(306):             isinstance(self.rhs, bool) and
0.84 lookups.py(305):         if (
0.84 lookups.py(313):         return super().as_sql(compiler, connection)
0.84 lookups.py(191):         lhs_sql, params = self.process_lhs(compiler, connection)
0.84 lookups.py(182):         lhs_sql, params = super().process_lhs(compiler, connection, lhs)
0.84 lookups.py(82):         lhs = lhs or self.lhs
0.84 lookups.py(83):         if hasattr(lhs, 'resolve_expression'):
0.84 lookups.py(84):             lhs = lhs.resolve_expression(compiler.query)
0.84 lookups.py(85):         return compiler.compile(lhs)
0.84 lookups.py(183):         field_internal_type = self.lhs.output_field.get_internal_type()
0.84 lookups.py(184):         db_type = self.lhs.output_field.db_type(connection=connection)
0.84 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.84 lookups.py(186):             db_type, field_internal_type) % lhs_sql
0.84 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.84 operations.py(194):         return '%s'
0.84 lookups.py(186):             db_type, field_internal_type) % lhs_sql
0.84 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.84 lookups.py(187):         lhs_sql = connection.ops.lookup_cast(self.lookup_name, field_internal_type) % lhs_sql
0.84 operations.py(267):         return "%s"
0.84 lookups.py(188):         return lhs_sql, list(params)
0.84 lookups.py(192):         rhs_sql, rhs_params = self.process_rhs(compiler, connection)
0.84 lookups.py(288):         from django.db.models.sql.query import Query
0.84 lookups.py(289):         if isinstance(self.rhs, Query):
0.84 lookups.py(299):         return super().process_rhs(compiler, connection)
0.84 lookups.py(88):         value = self.rhs
0.84 lookups.py(89):         if self.bilateral_transforms:
0.84 lookups.py(96):         if hasattr(value, 'as_sql'):
0.84 lookups.py(99):             return self.get_db_prep_lookup(value, connection)
0.84 lookups.py(211):         field = getattr(self.lhs.output_field, 'target_field', None)
0.84 lookups.py(212):         get_db_prep_value = getattr(field, 'get_db_prep_value', None) or self.lhs.output_field.get_db_prep_value
0.84 lookups.py(214):             '%s',
0.84 lookups.py(216):             if self.get_db_prep_lookup_value_is_iterable else
0.84 lookups.py(215):             [get_db_prep_value(v, connection, prepared=True) for v in value]
0.84 lookups.py(217):             [get_db_prep_value(value, connection, prepared=True)]
0.84 lookups.py(213):         return (
0.84 lookups.py(193):         params.extend(rhs_params)
0.84 lookups.py(194):         rhs_sql = self.get_rhs_op(connection, rhs_sql)
0.84 lookups.py(198):         return connection.operators[self.lookup_name] % rhs
0.84 lookups.py(195):         return '%s %s' % (lhs_sql, rhs_sql), params
0.84 operations.py(568):         return []
0.84 operations.py(568):         return []
0.84 operations.py(568):         return []
0.84 operations.py(332):         if self._cache is None:
0.84 operations.py(334):         return getattr(self._cache, compiler_name)
0.84 operations.py(690):         return 'INSERT INTO'
0.84 operations.py(617):         return params
0.84 operations.py(617):         return params
0.84 operations.py(693):         return ''
0.84 lookups.py(22):         self.lhs, self.rhs = lhs, rhs
0.84 lookups.py(23):         self.rhs = self.get_prep_lookup()
0.84 lookups.py(72):         if hasattr(self.rhs, 'resolve_expression'):
0.84 lookups.py(74):         if self.prepare_rhs and hasattr(self.lhs.output_field, 'get_prep_value'):
0.84 lookups.py(75):             return self.lhs.output_field.get_prep_value(self.rhs)
0.84 lookups.py(24):         if hasattr(self.lhs, 'get_bilateral_transforms'):
0.84 lookups.py(27):             bilateral_transforms = []
0.84 lookups.py(28):         if bilateral_transforms:
0.84 lookups.py(36):         self.bilateral_transforms = bilateral_transforms
0.84 operations.py(332):         if self._cache is None:
0.84 operations.py(334):         return getattr(self._cache, compiler_name)
0.84 lookups.py(135):         return self.lhs.contains_aggregate or getattr(self.rhs, 'contains_aggregate', False)
0.84 lookups.py(306):             isinstance(self.rhs, bool) and
0.84 lookups.py(305):         if (
0.84 lookups.py(313):         return super().as_sql(compiler, connection)
0.84 lookups.py(191):         lhs_sql, params = self.process_lhs(compiler, connection)
0.84 lookups.py(182):         lhs_sql, params = super().process_lhs(compiler, connection, lhs)
0.84 lookups.py(82):         lhs = lhs or self.lhs
0.84 lookups.py(83):         if hasattr(lhs, 'resolve_expression'):
0.84 lookups.py(84):             lhs = lhs.resolve_expression(compiler.query)
0.84 lookups.py(85):         return compiler.compile(lhs)
0.84 lookups.py(183):         field_internal_type = self.lhs.output_field.get_internal_type()
0.84 lookups.py(184):         db_type = self.lhs.output_field.db_type(connection=connection)
0.84 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.84 lookups.py(186):             db_type, field_internal_type) % lhs_sql
0.84 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.84 operations.py(194):         return '%s'
0.84 lookups.py(186):             db_type, field_internal_type) % lhs_sql
0.84 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.84 lookups.py(187):         lhs_sql = connection.ops.lookup_cast(self.lookup_name, field_internal_type) % lhs_sql
0.84 operations.py(267):         return "%s"
0.84 lookups.py(188):         return lhs_sql, list(params)
0.84 lookups.py(192):         rhs_sql, rhs_params = self.process_rhs(compiler, connection)
0.84 lookups.py(288):         from django.db.models.sql.query import Query
0.84 lookups.py(289):         if isinstance(self.rhs, Query):
0.84 lookups.py(299):         return super().process_rhs(compiler, connection)
0.84 lookups.py(88):         value = self.rhs
0.84 lookups.py(89):         if self.bilateral_transforms:
0.84 lookups.py(96):         if hasattr(value, 'as_sql'):
0.84 lookups.py(99):             return self.get_db_prep_lookup(value, connection)
0.84 lookups.py(211):         field = getattr(self.lhs.output_field, 'target_field', None)
0.84 lookups.py(212):         get_db_prep_value = getattr(field, 'get_db_prep_value', None) or self.lhs.output_field.get_db_prep_value
0.84 lookups.py(214):             '%s',
0.84 lookups.py(216):             if self.get_db_prep_lookup_value_is_iterable else
0.84 lookups.py(215):             [get_db_prep_value(v, connection, prepared=True) for v in value]
0.84 lookups.py(217):             [get_db_prep_value(value, connection, prepared=True)]
0.84 lookups.py(213):         return (
0.84 lookups.py(193):         params.extend(rhs_params)
0.84 lookups.py(194):         rhs_sql = self.get_rhs_op(connection, rhs_sql)
0.84 lookups.py(198):         return connection.operators[self.lookup_name] % rhs
0.84 lookups.py(195):         return '%s %s' % (lhs_sql, rhs_sql), params
0.84 operations.py(568):         return []
0.84 operations.py(568):         return []
0.84 operations.py(568):         return []
0.84 lookups.py(22):         self.lhs, self.rhs = lhs, rhs
0.84 lookups.py(23):         self.rhs = self.get_prep_lookup()
0.84 lookups.py(72):         if hasattr(self.rhs, 'resolve_expression'):
0.84 lookups.py(74):         if self.prepare_rhs and hasattr(self.lhs.output_field, 'get_prep_value'):
0.84 lookups.py(75):             return self.lhs.output_field.get_prep_value(self.rhs)
0.84 lookups.py(24):         if hasattr(self.lhs, 'get_bilateral_transforms'):
0.84 lookups.py(27):             bilateral_transforms = []
0.84 lookups.py(28):         if bilateral_transforms:
0.84 lookups.py(36):         self.bilateral_transforms = bilateral_transforms
0.84 lookups.py(22):         self.lhs, self.rhs = lhs, rhs
0.84 lookups.py(23):         self.rhs = self.get_prep_lookup()
0.84 lookups.py(72):         if hasattr(self.rhs, 'resolve_expression'):
0.84 lookups.py(74):         if self.prepare_rhs and hasattr(self.lhs.output_field, 'get_prep_value'):
0.84 lookups.py(75):             return self.lhs.output_field.get_prep_value(self.rhs)
0.84 lookups.py(24):         if hasattr(self.lhs, 'get_bilateral_transforms'):
0.84 lookups.py(27):             bilateral_transforms = []
0.84 lookups.py(28):         if bilateral_transforms:
0.84 lookups.py(36):         self.bilateral_transforms = bilateral_transforms
0.84 operations.py(332):         if self._cache is None:
0.84 operations.py(334):         return getattr(self._cache, compiler_name)
0.84 lookups.py(135):         return self.lhs.contains_aggregate or getattr(self.rhs, 'contains_aggregate', False)
0.84 lookups.py(135):         return self.lhs.contains_aggregate or getattr(self.rhs, 'contains_aggregate', False)
0.84 lookups.py(306):             isinstance(self.rhs, bool) and
0.84 lookups.py(305):         if (
0.84 lookups.py(313):         return super().as_sql(compiler, connection)
0.84 lookups.py(191):         lhs_sql, params = self.process_lhs(compiler, connection)
0.84 lookups.py(182):         lhs_sql, params = super().process_lhs(compiler, connection, lhs)
0.84 lookups.py(82):         lhs = lhs or self.lhs
0.84 lookups.py(83):         if hasattr(lhs, 'resolve_expression'):
0.84 lookups.py(84):             lhs = lhs.resolve_expression(compiler.query)
0.84 lookups.py(85):         return compiler.compile(lhs)
0.84 lookups.py(183):         field_internal_type = self.lhs.output_field.get_internal_type()
0.84 lookups.py(184):         db_type = self.lhs.output_field.db_type(connection=connection)
0.84 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.84 lookups.py(186):             db_type, field_internal_type) % lhs_sql
0.84 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.84 operations.py(194):         return '%s'
0.84 lookups.py(186):             db_type, field_internal_type) % lhs_sql
0.84 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.84 lookups.py(187):         lhs_sql = connection.ops.lookup_cast(self.lookup_name, field_internal_type) % lhs_sql
0.84 operations.py(267):         return "%s"
0.84 lookups.py(188):         return lhs_sql, list(params)
0.84 lookups.py(192):         rhs_sql, rhs_params = self.process_rhs(compiler, connection)
0.84 lookups.py(288):         from django.db.models.sql.query import Query
0.84 lookups.py(289):         if isinstance(self.rhs, Query):
0.84 lookups.py(299):         return super().process_rhs(compiler, connection)
0.84 lookups.py(88):         value = self.rhs
0.84 lookups.py(89):         if self.bilateral_transforms:
0.84 lookups.py(96):         if hasattr(value, 'as_sql'):
0.84 lookups.py(99):             return self.get_db_prep_lookup(value, connection)
0.84 lookups.py(211):         field = getattr(self.lhs.output_field, 'target_field', None)
0.84 lookups.py(212):         get_db_prep_value = getattr(field, 'get_db_prep_value', None) or self.lhs.output_field.get_db_prep_value
0.84 lookups.py(214):             '%s',
0.84 lookups.py(216):             if self.get_db_prep_lookup_value_is_iterable else
0.84 lookups.py(215):             [get_db_prep_value(v, connection, prepared=True) for v in value]
0.84 lookups.py(217):             [get_db_prep_value(value, connection, prepared=True)]
0.84 lookups.py(213):         return (
0.84 lookups.py(193):         params.extend(rhs_params)
0.84 lookups.py(194):         rhs_sql = self.get_rhs_op(connection, rhs_sql)
0.84 lookups.py(198):         return connection.operators[self.lookup_name] % rhs
0.84 lookups.py(195):         return '%s %s' % (lhs_sql, rhs_sql), params
0.84 lookups.py(306):             isinstance(self.rhs, bool) and
0.84 lookups.py(305):         if (
0.84 lookups.py(313):         return super().as_sql(compiler, connection)
0.84 lookups.py(191):         lhs_sql, params = self.process_lhs(compiler, connection)
0.84 lookups.py(182):         lhs_sql, params = super().process_lhs(compiler, connection, lhs)
0.84 lookups.py(82):         lhs = lhs or self.lhs
0.84 lookups.py(83):         if hasattr(lhs, 'resolve_expression'):
0.84 lookups.py(84):             lhs = lhs.resolve_expression(compiler.query)
0.84 lookups.py(85):         return compiler.compile(lhs)
0.84 lookups.py(183):         field_internal_type = self.lhs.output_field.get_internal_type()
0.84 lookups.py(184):         db_type = self.lhs.output_field.db_type(connection=connection)
0.84 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.84 lookups.py(186):             db_type, field_internal_type) % lhs_sql
0.84 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.84 operations.py(194):         return '%s'
0.84 lookups.py(186):             db_type, field_internal_type) % lhs_sql
0.84 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.84 lookups.py(187):         lhs_sql = connection.ops.lookup_cast(self.lookup_name, field_internal_type) % lhs_sql
0.84 operations.py(267):         return "%s"
0.84 lookups.py(188):         return lhs_sql, list(params)
0.84 lookups.py(192):         rhs_sql, rhs_params = self.process_rhs(compiler, connection)
0.84 lookups.py(288):         from django.db.models.sql.query import Query
0.84 lookups.py(289):         if isinstance(self.rhs, Query):
0.84 lookups.py(299):         return super().process_rhs(compiler, connection)
0.84 lookups.py(88):         value = self.rhs
0.84 lookups.py(89):         if self.bilateral_transforms:
0.84 lookups.py(96):         if hasattr(value, 'as_sql'):
0.84 lookups.py(99):             return self.get_db_prep_lookup(value, connection)
0.84 lookups.py(211):         field = getattr(self.lhs.output_field, 'target_field', None)
0.84 lookups.py(212):         get_db_prep_value = getattr(field, 'get_db_prep_value', None) or self.lhs.output_field.get_db_prep_value
0.84 lookups.py(214):             '%s',
0.84 lookups.py(216):             if self.get_db_prep_lookup_value_is_iterable else
0.84 lookups.py(215):             [get_db_prep_value(v, connection, prepared=True) for v in value]
0.84 lookups.py(217):             [get_db_prep_value(value, connection, prepared=True)]
0.84 lookups.py(213):         return (
0.84 lookups.py(193):         params.extend(rhs_params)
0.84 lookups.py(194):         rhs_sql = self.get_rhs_op(connection, rhs_sql)
0.84 lookups.py(198):         return connection.operators[self.lookup_name] % rhs
0.84 lookups.py(195):         return '%s %s' % (lhs_sql, rhs_sql), params
0.84 operations.py(224):         limit, offset = self._get_limit_offset_params(low_mark, high_mark)
0.84 operations.py(215):         offset = low_mark or 0
0.84 operations.py(216):         if high_mark is not None:
0.84 operations.py(217):             return (high_mark - offset), offset
0.84 operations.py(225):         return ' '.join(sql for sql in (
0.84 operations.py(226):             ('LIMIT %d' % limit) if limit else None,
0.84 operations.py(227):             ('OFFSET %d' % offset) if offset else None,
0.84 operations.py(225):         return ' '.join(sql for sql in (
0.84 operations.py(225):         return ' '.join(sql for sql in (
0.84 operations.py(228):         ) if sql)
0.84 operations.py(225):         return ' '.join(sql for sql in (
0.84 operations.py(225):         return ' '.join(sql for sql in (
0.84 operations.py(228):         ) if sql)
0.84 operations.py(225):         return ' '.join(sql for sql in (
0.84 operations.py(568):         return []
0.84 operations.py(568):         return []
0.84 operations.py(568):         return []
0.84 lookups.py(22):         self.lhs, self.rhs = lhs, rhs
0.84 lookups.py(23):         self.rhs = self.get_prep_lookup()
0.84 lookups.py(102):         return not hasattr(self.rhs, 'as_sql')
0.84 lookups.py(229):         if hasattr(self.rhs, 'resolve_expression'):
0.84 lookups.py(231):         prepared_values = []
0.84 lookups.py(232):         for rhs_value in self.rhs:
0.84 lookups.py(233):             if hasattr(rhs_value, 'resolve_expression'):
0.84 lookups.py(237):             elif self.prepare_rhs and hasattr(self.lhs.output_field, 'get_prep_value'):
0.84 lookups.py(238):                 rhs_value = self.lhs.output_field.get_prep_value(rhs_value)
0.84 lookups.py(239):             prepared_values.append(rhs_value)
0.84 lookups.py(232):         for rhs_value in self.rhs:
0.84 lookups.py(240):         return prepared_values
0.84 lookups.py(24):         if hasattr(self.lhs, 'get_bilateral_transforms'):
0.84 lookups.py(27):             bilateral_transforms = []
0.84 lookups.py(28):         if bilateral_transforms:
0.84 lookups.py(36):         self.bilateral_transforms = bilateral_transforms
0.84 operations.py(332):         if self._cache is None:
0.84 operations.py(334):         return getattr(self._cache, compiler_name)
0.84 lookups.py(135):         return self.lhs.contains_aggregate or getattr(self.rhs, 'contains_aggregate', False)
0.84 lookups.py(407):         max_in_list_size = connection.ops.max_in_list_size()
0.84 operations.py(274):         return None
0.84 lookups.py(408):         if self.rhs_is_direct_value() and max_in_list_size and len(self.rhs) > max_in_list_size:
0.84 lookups.py(102):         return not hasattr(self.rhs, 'as_sql')
0.84 lookups.py(410):         return super().as_sql(compiler, connection)
0.84 lookups.py(191):         lhs_sql, params = self.process_lhs(compiler, connection)
0.84 lookups.py(182):         lhs_sql, params = super().process_lhs(compiler, connection, lhs)
0.84 lookups.py(82):         lhs = lhs or self.lhs
0.84 lookups.py(83):         if hasattr(lhs, 'resolve_expression'):
0.84 lookups.py(84):             lhs = lhs.resolve_expression(compiler.query)
0.84 lookups.py(85):         return compiler.compile(lhs)
0.84 lookups.py(183):         field_internal_type = self.lhs.output_field.get_internal_type()
0.84 lookups.py(184):         db_type = self.lhs.output_field.db_type(connection=connection)
0.84 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.84 lookups.py(186):             db_type, field_internal_type) % lhs_sql
0.84 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.84 operations.py(194):         return '%s'
0.84 lookups.py(186):             db_type, field_internal_type) % lhs_sql
0.84 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.84 lookups.py(187):         lhs_sql = connection.ops.lookup_cast(self.lookup_name, field_internal_type) % lhs_sql
0.84 operations.py(267):         return "%s"
0.84 lookups.py(188):         return lhs_sql, list(params)
0.84 lookups.py(192):         rhs_sql, rhs_params = self.process_rhs(compiler, connection)
0.84 lookups.py(374):         db_rhs = getattr(self.rhs, '_db', None)
0.84 lookups.py(375):         if db_rhs is not None and db_rhs != connection.alias:
0.84 lookups.py(381):         if self.rhs_is_direct_value():
0.84 lookups.py(102):         return not hasattr(self.rhs, 'as_sql')
0.84 lookups.py(383):             try:
0.84 lookups.py(384):                 rhs = OrderedSet(self.rhs)
0.84 lookups.py(385):                 rhs.discard(None)
0.84 lookups.py(389):             if not rhs:
0.84 lookups.py(394):             sqls, sqls_params = self.batch_process_rhs(compiler, connection, rhs)
0.84 lookups.py(259):         pre_processed = super().batch_process_rhs(compiler, connection, rhs)
0.84 lookups.py(44):         if rhs is None:
0.84 lookups.py(46):         if self.bilateral_transforms:
0.84 lookups.py(56):             _, params = self.get_db_prep_lookup(rhs, connection)
0.84 lookups.py(211):         field = getattr(self.lhs.output_field, 'target_field', None)
0.84 lookups.py(212):         get_db_prep_value = getattr(field, 'get_db_prep_value', None) or self.lhs.output_field.get_db_prep_value
0.84 lookups.py(214):             '%s',
0.84 lookups.py(216):             if self.get_db_prep_lookup_value_is_iterable else
0.84 lookups.py(215):             [get_db_prep_value(v, connection, prepared=True) for v in value]
0.84 lookups.py(215):             [get_db_prep_value(v, connection, prepared=True) for v in value]
0.84 lookups.py(215):             [get_db_prep_value(v, connection, prepared=True) for v in value]
0.84 lookups.py(213):         return (
0.84 lookups.py(57):             sqls, sqls_params = ['%s'] * len(params), params
0.84 lookups.py(58):         return sqls, sqls_params
0.84 lookups.py(264):         sql, params = zip(*(
0.84 lookups.py(266):             for sql, param in zip(*pre_processed)
0.84 lookups.py(264):         sql, params = zip(*(
0.84 lookups.py(264):         sql, params = zip(*(
0.84 lookups.py(266):             for sql, param in zip(*pre_processed)
0.84 lookups.py(265):             self.resolve_expression_parameter(compiler, connection, sql, param)
0.84 lookups.py(251):         params = [param]
0.84 lookups.py(252):         if hasattr(param, 'resolve_expression'):
0.84 lookups.py(254):         if hasattr(param, 'as_sql'):
0.84 lookups.py(256):         return sql, params
0.84 lookups.py(264):         sql, params = zip(*(
0.84 lookups.py(268):         params = itertools.chain.from_iterable(params)
0.84 lookups.py(269):         return sql, tuple(params)
0.84 lookups.py(395):             placeholder = '(' + ', '.join(sqls) + ')'
0.84 lookups.py(396):             return (placeholder, sqls_params)
0.84 lookups.py(193):         params.extend(rhs_params)
0.84 lookups.py(194):         rhs_sql = self.get_rhs_op(connection, rhs_sql)
0.84 lookups.py(404):         return 'IN %s' % rhs
0.84 lookups.py(195):         return '%s %s' % (lhs_sql, rhs_sql), params
0.84 operations.py(568):         return []
0.84 operations.py(568):         return []
0.84 operations.py(332):         if self._cache is None:
0.84 operations.py(334):         return getattr(self._cache, compiler_name)
0.84 operations.py(690):         return 'INSERT INTO'
0.84 operations.py(465):         return value
0.84 operations.py(465):         return value
0.84 operations.py(465):         return value
0.84 operations.py(465):         return value
0.84 operations.py(617):         return params
0.84 operations.py(617):         return params
0.84 operations.py(617):         return params
0.84 operations.py(617):         return params
0.84 operations.py(617):         return params
0.84 operations.py(617):         return params
0.84 operations.py(617):         return params
0.84 operations.py(617):         return params
0.84 operations.py(617):         return params
0.84 operations.py(617):         return params
0.84 operations.py(617):         return params
0.84 operations.py(617):         return params
0.84 operations.py(693):         return ''
0.84 operations.py(332):         if self._cache is None:
0.84 operations.py(334):         return getattr(self._cache, compiler_name)
0.84 operations.py(224):         limit, offset = self._get_limit_offset_params(low_mark, high_mark)
0.84 operations.py(215):         offset = low_mark or 0
0.84 operations.py(216):         if high_mark is not None:
0.84 operations.py(217):             return (high_mark - offset), offset
0.84 operations.py(225):         return ' '.join(sql for sql in (
0.84 operations.py(226):             ('LIMIT %d' % limit) if limit else None,
0.84 operations.py(227):             ('OFFSET %d' % offset) if offset else None,
0.84 operations.py(225):         return ' '.join(sql for sql in (
0.84 operations.py(225):         return ' '.join(sql for sql in (
0.84 operations.py(228):         ) if sql)
0.84 operations.py(225):         return ' '.join(sql for sql in (
0.84 operations.py(225):         return ' '.join(sql for sql in (
0.84 operations.py(228):         ) if sql)
0.84 operations.py(225):         return ' '.join(sql for sql in (
0.84 lookups.py(22):         self.lhs, self.rhs = lhs, rhs
0.84 lookups.py(23):         self.rhs = self.get_prep_lookup()
0.84 lookups.py(72):         if hasattr(self.rhs, 'resolve_expression'):
0.84 lookups.py(74):         if self.prepare_rhs and hasattr(self.lhs.output_field, 'get_prep_value'):
0.84 lookups.py(75):             return self.lhs.output_field.get_prep_value(self.rhs)
0.84 lookups.py(24):         if hasattr(self.lhs, 'get_bilateral_transforms'):
0.84 lookups.py(27):             bilateral_transforms = []
0.84 lookups.py(28):         if bilateral_transforms:
0.84 lookups.py(36):         self.bilateral_transforms = bilateral_transforms
0.84 operations.py(332):         if self._cache is None:
0.84 operations.py(334):         return getattr(self._cache, compiler_name)
0.84 lookups.py(306):             isinstance(self.rhs, bool) and
0.84 lookups.py(305):         if (
0.84 lookups.py(313):         return super().as_sql(compiler, connection)
0.84 lookups.py(191):         lhs_sql, params = self.process_lhs(compiler, connection)
0.84 lookups.py(182):         lhs_sql, params = super().process_lhs(compiler, connection, lhs)
0.84 lookups.py(82):         lhs = lhs or self.lhs
0.84 lookups.py(83):         if hasattr(lhs, 'resolve_expression'):
0.84 lookups.py(84):             lhs = lhs.resolve_expression(compiler.query)
0.84 lookups.py(85):         return compiler.compile(lhs)
0.84 lookups.py(183):         field_internal_type = self.lhs.output_field.get_internal_type()
0.84 lookups.py(184):         db_type = self.lhs.output_field.db_type(connection=connection)
0.84 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.84 lookups.py(186):             db_type, field_internal_type) % lhs_sql
0.84 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.84 operations.py(194):         return '%s'
0.84 lookups.py(186):             db_type, field_internal_type) % lhs_sql
0.84 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.84 lookups.py(187):         lhs_sql = connection.ops.lookup_cast(self.lookup_name, field_internal_type) % lhs_sql
0.84 operations.py(267):         return "%s"
0.84 lookups.py(188):         return lhs_sql, list(params)
0.84 lookups.py(192):         rhs_sql, rhs_params = self.process_rhs(compiler, connection)
0.84 lookups.py(288):         from django.db.models.sql.query import Query
0.84 lookups.py(289):         if isinstance(self.rhs, Query):
0.84 lookups.py(299):         return super().process_rhs(compiler, connection)
0.84 lookups.py(88):         value = self.rhs
0.84 lookups.py(89):         if self.bilateral_transforms:
0.84 lookups.py(96):         if hasattr(value, 'as_sql'):
0.84 lookups.py(99):             return self.get_db_prep_lookup(value, connection)
0.84 lookups.py(211):         field = getattr(self.lhs.output_field, 'target_field', None)
0.84 lookups.py(212):         get_db_prep_value = getattr(field, 'get_db_prep_value', None) or self.lhs.output_field.get_db_prep_value
0.84 lookups.py(214):             '%s',
0.84 lookups.py(216):             if self.get_db_prep_lookup_value_is_iterable else
0.84 lookups.py(215):             [get_db_prep_value(v, connection, prepared=True) for v in value]
0.84 lookups.py(217):             [get_db_prep_value(value, connection, prepared=True)]
0.84 lookups.py(213):         return (
0.84 lookups.py(193):         params.extend(rhs_params)
0.84 lookups.py(194):         rhs_sql = self.get_rhs_op(connection, rhs_sql)
0.84 lookups.py(198):         return connection.operators[self.lookup_name] % rhs
0.84 lookups.py(195):         return '%s %s' % (lhs_sql, rhs_sql), params
0.85 operations.py(332):         if self._cache is None:
0.85 operations.py(334):         return getattr(self._cache, compiler_name)
0.85 operations.py(690):         return 'INSERT INTO'
0.85 operations.py(465):         return value
0.85 operations.py(617):         return params
0.85 operations.py(617):         return params
0.85 operations.py(617):         return params
0.85 operations.py(693):         return ''
0.85 operations.py(259):         return cursor.lastrowid
0.85 operations.py(428):         return []  # No sequence reset required by default.
0.85 lookups.py(22):         self.lhs, self.rhs = lhs, rhs
0.85 lookups.py(23):         self.rhs = self.get_prep_lookup()
0.85 lookups.py(72):         if hasattr(self.rhs, 'resolve_expression'):
0.85 lookups.py(74):         if self.prepare_rhs and hasattr(self.lhs.output_field, 'get_prep_value'):
0.85 lookups.py(75):             return self.lhs.output_field.get_prep_value(self.rhs)
0.85 lookups.py(24):         if hasattr(self.lhs, 'get_bilateral_transforms'):
0.85 lookups.py(27):             bilateral_transforms = []
0.85 lookups.py(28):         if bilateral_transforms:
0.85 lookups.py(36):         self.bilateral_transforms = bilateral_transforms
0.85 operations.py(332):         if self._cache is None:
0.85 operations.py(334):         return getattr(self._cache, compiler_name)
0.85 lookups.py(135):         return self.lhs.contains_aggregate or getattr(self.rhs, 'contains_aggregate', False)
0.85 lookups.py(306):             isinstance(self.rhs, bool) and
0.85 lookups.py(305):         if (
0.85 lookups.py(313):         return super().as_sql(compiler, connection)
0.85 lookups.py(191):         lhs_sql, params = self.process_lhs(compiler, connection)
0.85 lookups.py(182):         lhs_sql, params = super().process_lhs(compiler, connection, lhs)
0.85 lookups.py(82):         lhs = lhs or self.lhs
0.85 lookups.py(83):         if hasattr(lhs, 'resolve_expression'):
0.85 lookups.py(84):             lhs = lhs.resolve_expression(compiler.query)
0.85 lookups.py(85):         return compiler.compile(lhs)
0.85 lookups.py(183):         field_internal_type = self.lhs.output_field.get_internal_type()
0.85 lookups.py(184):         db_type = self.lhs.output_field.db_type(connection=connection)
0.85 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.85 lookups.py(186):             db_type, field_internal_type) % lhs_sql
0.85 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.85 operations.py(194):         return '%s'
0.85 lookups.py(186):             db_type, field_internal_type) % lhs_sql
0.85 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.85 lookups.py(187):         lhs_sql = connection.ops.lookup_cast(self.lookup_name, field_internal_type) % lhs_sql
0.85 operations.py(267):         return "%s"
0.85 lookups.py(188):         return lhs_sql, list(params)
0.85 lookups.py(192):         rhs_sql, rhs_params = self.process_rhs(compiler, connection)
0.85 lookups.py(288):         from django.db.models.sql.query import Query
0.85 lookups.py(289):         if isinstance(self.rhs, Query):
0.85 lookups.py(299):         return super().process_rhs(compiler, connection)
0.85 lookups.py(88):         value = self.rhs
0.85 lookups.py(89):         if self.bilateral_transforms:
0.85 lookups.py(96):         if hasattr(value, 'as_sql'):
0.85 lookups.py(99):             return self.get_db_prep_lookup(value, connection)
0.85 lookups.py(211):         field = getattr(self.lhs.output_field, 'target_field', None)
0.85 lookups.py(212):         get_db_prep_value = getattr(field, 'get_db_prep_value', None) or self.lhs.output_field.get_db_prep_value
0.85 lookups.py(214):             '%s',
0.85 lookups.py(216):             if self.get_db_prep_lookup_value_is_iterable else
0.85 lookups.py(215):             [get_db_prep_value(v, connection, prepared=True) for v in value]
0.85 lookups.py(217):             [get_db_prep_value(value, connection, prepared=True)]
0.85 lookups.py(213):         return (
0.85 lookups.py(193):         params.extend(rhs_params)
0.85 lookups.py(194):         rhs_sql = self.get_rhs_op(connection, rhs_sql)
0.85 lookups.py(198):         return connection.operators[self.lookup_name] % rhs
0.85 lookups.py(195):         return '%s %s' % (lhs_sql, rhs_sql), params
0.85 operations.py(568):         return []
0.85 operations.py(568):         return []
0.85 operations.py(568):         return []
0.85 operations.py(332):         if self._cache is None:
0.85 operations.py(334):         return getattr(self._cache, compiler_name)
0.85 operations.py(690):         return 'INSERT INTO'
0.85 operations.py(617):         return params
0.85 operations.py(617):         return params
0.85 operations.py(693):         return ''
0.85 lookups.py(22):         self.lhs, self.rhs = lhs, rhs
0.85 lookups.py(23):         self.rhs = self.get_prep_lookup()
0.85 lookups.py(72):         if hasattr(self.rhs, 'resolve_expression'):
0.85 lookups.py(74):         if self.prepare_rhs and hasattr(self.lhs.output_field, 'get_prep_value'):
0.85 lookups.py(75):             return self.lhs.output_field.get_prep_value(self.rhs)
0.85 lookups.py(24):         if hasattr(self.lhs, 'get_bilateral_transforms'):
0.85 lookups.py(27):             bilateral_transforms = []
0.85 lookups.py(28):         if bilateral_transforms:
0.85 lookups.py(36):         self.bilateral_transforms = bilateral_transforms
0.85 operations.py(332):         if self._cache is None:
0.85 operations.py(334):         return getattr(self._cache, compiler_name)
0.85 lookups.py(135):         return self.lhs.contains_aggregate or getattr(self.rhs, 'contains_aggregate', False)
0.85 lookups.py(306):             isinstance(self.rhs, bool) and
0.85 lookups.py(305):         if (
0.85 lookups.py(313):         return super().as_sql(compiler, connection)
0.85 lookups.py(191):         lhs_sql, params = self.process_lhs(compiler, connection)
0.85 lookups.py(182):         lhs_sql, params = super().process_lhs(compiler, connection, lhs)
0.85 lookups.py(82):         lhs = lhs or self.lhs
0.85 lookups.py(83):         if hasattr(lhs, 'resolve_expression'):
0.85 lookups.py(84):             lhs = lhs.resolve_expression(compiler.query)
0.85 lookups.py(85):         return compiler.compile(lhs)
0.85 lookups.py(183):         field_internal_type = self.lhs.output_field.get_internal_type()
0.85 lookups.py(184):         db_type = self.lhs.output_field.db_type(connection=connection)
0.85 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.85 lookups.py(186):             db_type, field_internal_type) % lhs_sql
0.85 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.85 operations.py(194):         return '%s'
0.85 lookups.py(186):             db_type, field_internal_type) % lhs_sql
0.85 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.85 lookups.py(187):         lhs_sql = connection.ops.lookup_cast(self.lookup_name, field_internal_type) % lhs_sql
0.85 operations.py(267):         return "%s"
0.85 lookups.py(188):         return lhs_sql, list(params)
0.85 lookups.py(192):         rhs_sql, rhs_params = self.process_rhs(compiler, connection)
0.85 lookups.py(288):         from django.db.models.sql.query import Query
0.85 lookups.py(289):         if isinstance(self.rhs, Query):
0.85 lookups.py(299):         return super().process_rhs(compiler, connection)
0.85 lookups.py(88):         value = self.rhs
0.85 lookups.py(89):         if self.bilateral_transforms:
0.85 lookups.py(96):         if hasattr(value, 'as_sql'):
0.85 lookups.py(99):             return self.get_db_prep_lookup(value, connection)
0.85 lookups.py(211):         field = getattr(self.lhs.output_field, 'target_field', None)
0.85 lookups.py(212):         get_db_prep_value = getattr(field, 'get_db_prep_value', None) or self.lhs.output_field.get_db_prep_value
0.85 lookups.py(214):             '%s',
0.85 lookups.py(216):             if self.get_db_prep_lookup_value_is_iterable else
0.85 lookups.py(215):             [get_db_prep_value(v, connection, prepared=True) for v in value]
0.85 lookups.py(217):             [get_db_prep_value(value, connection, prepared=True)]
0.85 lookups.py(213):         return (
0.85 lookups.py(193):         params.extend(rhs_params)
0.85 lookups.py(194):         rhs_sql = self.get_rhs_op(connection, rhs_sql)
0.85 lookups.py(198):         return connection.operators[self.lookup_name] % rhs
0.85 lookups.py(195):         return '%s %s' % (lhs_sql, rhs_sql), params
0.85 operations.py(568):         return []
0.85 operations.py(568):         return []
0.85 operations.py(568):         return []
0.85 lookups.py(22):         self.lhs, self.rhs = lhs, rhs
0.85 lookups.py(23):         self.rhs = self.get_prep_lookup()
0.85 lookups.py(72):         if hasattr(self.rhs, 'resolve_expression'):
0.85 lookups.py(74):         if self.prepare_rhs and hasattr(self.lhs.output_field, 'get_prep_value'):
0.85 lookups.py(75):             return self.lhs.output_field.get_prep_value(self.rhs)
0.85 lookups.py(24):         if hasattr(self.lhs, 'get_bilateral_transforms'):
0.85 lookups.py(27):             bilateral_transforms = []
0.85 lookups.py(28):         if bilateral_transforms:
0.85 lookups.py(36):         self.bilateral_transforms = bilateral_transforms
0.85 lookups.py(22):         self.lhs, self.rhs = lhs, rhs
0.85 lookups.py(23):         self.rhs = self.get_prep_lookup()
0.85 lookups.py(72):         if hasattr(self.rhs, 'resolve_expression'):
0.85 lookups.py(74):         if self.prepare_rhs and hasattr(self.lhs.output_field, 'get_prep_value'):
0.85 lookups.py(75):             return self.lhs.output_field.get_prep_value(self.rhs)
0.85 lookups.py(24):         if hasattr(self.lhs, 'get_bilateral_transforms'):
0.85 lookups.py(27):             bilateral_transforms = []
0.85 lookups.py(28):         if bilateral_transforms:
0.85 lookups.py(36):         self.bilateral_transforms = bilateral_transforms
0.85 operations.py(332):         if self._cache is None:
0.85 operations.py(334):         return getattr(self._cache, compiler_name)
0.85 lookups.py(135):         return self.lhs.contains_aggregate or getattr(self.rhs, 'contains_aggregate', False)
0.85 lookups.py(135):         return self.lhs.contains_aggregate or getattr(self.rhs, 'contains_aggregate', False)
0.85 lookups.py(306):             isinstance(self.rhs, bool) and
0.85 lookups.py(305):         if (
0.85 lookups.py(313):         return super().as_sql(compiler, connection)
0.85 lookups.py(191):         lhs_sql, params = self.process_lhs(compiler, connection)
0.85 lookups.py(182):         lhs_sql, params = super().process_lhs(compiler, connection, lhs)
0.85 lookups.py(82):         lhs = lhs or self.lhs
0.85 lookups.py(83):         if hasattr(lhs, 'resolve_expression'):
0.85 lookups.py(84):             lhs = lhs.resolve_expression(compiler.query)
0.85 lookups.py(85):         return compiler.compile(lhs)
0.85 lookups.py(183):         field_internal_type = self.lhs.output_field.get_internal_type()
0.85 lookups.py(184):         db_type = self.lhs.output_field.db_type(connection=connection)
0.85 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.85 lookups.py(186):             db_type, field_internal_type) % lhs_sql
0.85 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.85 operations.py(194):         return '%s'
0.85 lookups.py(186):             db_type, field_internal_type) % lhs_sql
0.85 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.85 lookups.py(187):         lhs_sql = connection.ops.lookup_cast(self.lookup_name, field_internal_type) % lhs_sql
0.85 operations.py(267):         return "%s"
0.85 lookups.py(188):         return lhs_sql, list(params)
0.85 lookups.py(192):         rhs_sql, rhs_params = self.process_rhs(compiler, connection)
0.85 lookups.py(288):         from django.db.models.sql.query import Query
0.85 lookups.py(289):         if isinstance(self.rhs, Query):
0.85 lookups.py(299):         return super().process_rhs(compiler, connection)
0.85 lookups.py(88):         value = self.rhs
0.85 lookups.py(89):         if self.bilateral_transforms:
0.85 lookups.py(96):         if hasattr(value, 'as_sql'):
0.85 lookups.py(99):             return self.get_db_prep_lookup(value, connection)
0.85 lookups.py(211):         field = getattr(self.lhs.output_field, 'target_field', None)
0.85 lookups.py(212):         get_db_prep_value = getattr(field, 'get_db_prep_value', None) or self.lhs.output_field.get_db_prep_value
0.85 lookups.py(214):             '%s',
0.85 lookups.py(216):             if self.get_db_prep_lookup_value_is_iterable else
0.85 lookups.py(215):             [get_db_prep_value(v, connection, prepared=True) for v in value]
0.85 lookups.py(217):             [get_db_prep_value(value, connection, prepared=True)]
0.85 lookups.py(213):         return (
0.85 lookups.py(193):         params.extend(rhs_params)
0.85 lookups.py(194):         rhs_sql = self.get_rhs_op(connection, rhs_sql)
0.85 lookups.py(198):         return connection.operators[self.lookup_name] % rhs
0.85 lookups.py(195):         return '%s %s' % (lhs_sql, rhs_sql), params
0.85 lookups.py(306):             isinstance(self.rhs, bool) and
0.85 lookups.py(305):         if (
0.85 lookups.py(313):         return super().as_sql(compiler, connection)
0.85 lookups.py(191):         lhs_sql, params = self.process_lhs(compiler, connection)
0.85 lookups.py(182):         lhs_sql, params = super().process_lhs(compiler, connection, lhs)
0.85 lookups.py(82):         lhs = lhs or self.lhs
0.85 lookups.py(83):         if hasattr(lhs, 'resolve_expression'):
0.85 lookups.py(84):             lhs = lhs.resolve_expression(compiler.query)
0.85 lookups.py(85):         return compiler.compile(lhs)
0.85 lookups.py(183):         field_internal_type = self.lhs.output_field.get_internal_type()
0.85 lookups.py(184):         db_type = self.lhs.output_field.db_type(connection=connection)
0.85 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.85 lookups.py(186):             db_type, field_internal_type) % lhs_sql
0.85 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.85 operations.py(194):         return '%s'
0.85 lookups.py(186):             db_type, field_internal_type) % lhs_sql
0.85 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.85 lookups.py(187):         lhs_sql = connection.ops.lookup_cast(self.lookup_name, field_internal_type) % lhs_sql
0.85 operations.py(267):         return "%s"
0.85 lookups.py(188):         return lhs_sql, list(params)
0.85 lookups.py(192):         rhs_sql, rhs_params = self.process_rhs(compiler, connection)
0.85 lookups.py(288):         from django.db.models.sql.query import Query
0.85 lookups.py(289):         if isinstance(self.rhs, Query):
0.85 lookups.py(299):         return super().process_rhs(compiler, connection)
0.85 lookups.py(88):         value = self.rhs
0.85 lookups.py(89):         if self.bilateral_transforms:
0.85 lookups.py(96):         if hasattr(value, 'as_sql'):
0.85 lookups.py(99):             return self.get_db_prep_lookup(value, connection)
0.85 lookups.py(211):         field = getattr(self.lhs.output_field, 'target_field', None)
0.85 lookups.py(212):         get_db_prep_value = getattr(field, 'get_db_prep_value', None) or self.lhs.output_field.get_db_prep_value
0.85 lookups.py(214):             '%s',
0.85 lookups.py(216):             if self.get_db_prep_lookup_value_is_iterable else
0.85 lookups.py(215):             [get_db_prep_value(v, connection, prepared=True) for v in value]
0.85 lookups.py(217):             [get_db_prep_value(value, connection, prepared=True)]
0.85 lookups.py(213):         return (
0.85 lookups.py(193):         params.extend(rhs_params)
0.85 lookups.py(194):         rhs_sql = self.get_rhs_op(connection, rhs_sql)
0.85 lookups.py(198):         return connection.operators[self.lookup_name] % rhs
0.85 lookups.py(195):         return '%s %s' % (lhs_sql, rhs_sql), params
0.85 operations.py(224):         limit, offset = self._get_limit_offset_params(low_mark, high_mark)
0.85 operations.py(215):         offset = low_mark or 0
0.85 operations.py(216):         if high_mark is not None:
0.85 operations.py(217):             return (high_mark - offset), offset
0.85 operations.py(225):         return ' '.join(sql for sql in (
0.85 operations.py(226):             ('LIMIT %d' % limit) if limit else None,
0.85 operations.py(227):             ('OFFSET %d' % offset) if offset else None,
0.85 operations.py(225):         return ' '.join(sql for sql in (
0.85 operations.py(225):         return ' '.join(sql for sql in (
0.85 operations.py(228):         ) if sql)
0.85 operations.py(225):         return ' '.join(sql for sql in (
0.85 operations.py(225):         return ' '.join(sql for sql in (
0.85 operations.py(228):         ) if sql)
0.85 operations.py(225):         return ' '.join(sql for sql in (
0.85 operations.py(568):         return []
0.85 operations.py(568):         return []
0.85 operations.py(568):         return []
0.85 lookups.py(22):         self.lhs, self.rhs = lhs, rhs
0.85 lookups.py(23):         self.rhs = self.get_prep_lookup()
0.85 lookups.py(102):         return not hasattr(self.rhs, 'as_sql')
0.85 lookups.py(229):         if hasattr(self.rhs, 'resolve_expression'):
0.85 lookups.py(231):         prepared_values = []
0.85 lookups.py(232):         for rhs_value in self.rhs:
0.85 lookups.py(233):             if hasattr(rhs_value, 'resolve_expression'):
0.85 lookups.py(237):             elif self.prepare_rhs and hasattr(self.lhs.output_field, 'get_prep_value'):
0.85 lookups.py(238):                 rhs_value = self.lhs.output_field.get_prep_value(rhs_value)
0.85 lookups.py(239):             prepared_values.append(rhs_value)
0.85 lookups.py(232):         for rhs_value in self.rhs:
0.85 lookups.py(240):         return prepared_values
0.85 lookups.py(24):         if hasattr(self.lhs, 'get_bilateral_transforms'):
0.85 lookups.py(27):             bilateral_transforms = []
0.85 lookups.py(28):         if bilateral_transforms:
0.85 lookups.py(36):         self.bilateral_transforms = bilateral_transforms
0.85 operations.py(332):         if self._cache is None:
0.85 operations.py(334):         return getattr(self._cache, compiler_name)
0.85 lookups.py(135):         return self.lhs.contains_aggregate or getattr(self.rhs, 'contains_aggregate', False)
0.85 lookups.py(407):         max_in_list_size = connection.ops.max_in_list_size()
0.85 operations.py(274):         return None
0.85 lookups.py(408):         if self.rhs_is_direct_value() and max_in_list_size and len(self.rhs) > max_in_list_size:
0.85 lookups.py(102):         return not hasattr(self.rhs, 'as_sql')
0.85 lookups.py(410):         return super().as_sql(compiler, connection)
0.85 lookups.py(191):         lhs_sql, params = self.process_lhs(compiler, connection)
0.85 lookups.py(182):         lhs_sql, params = super().process_lhs(compiler, connection, lhs)
0.85 lookups.py(82):         lhs = lhs or self.lhs
0.85 lookups.py(83):         if hasattr(lhs, 'resolve_expression'):
0.85 lookups.py(84):             lhs = lhs.resolve_expression(compiler.query)
0.85 lookups.py(85):         return compiler.compile(lhs)
0.85 lookups.py(183):         field_internal_type = self.lhs.output_field.get_internal_type()
0.85 lookups.py(184):         db_type = self.lhs.output_field.db_type(connection=connection)
0.85 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.85 lookups.py(186):             db_type, field_internal_type) % lhs_sql
0.85 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.85 operations.py(194):         return '%s'
0.85 lookups.py(186):             db_type, field_internal_type) % lhs_sql
0.85 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.85 lookups.py(187):         lhs_sql = connection.ops.lookup_cast(self.lookup_name, field_internal_type) % lhs_sql
0.85 operations.py(267):         return "%s"
0.85 lookups.py(188):         return lhs_sql, list(params)
0.85 lookups.py(192):         rhs_sql, rhs_params = self.process_rhs(compiler, connection)
0.85 lookups.py(374):         db_rhs = getattr(self.rhs, '_db', None)
0.85 lookups.py(375):         if db_rhs is not None and db_rhs != connection.alias:
0.85 lookups.py(381):         if self.rhs_is_direct_value():
0.85 lookups.py(102):         return not hasattr(self.rhs, 'as_sql')
0.85 lookups.py(383):             try:
0.85 lookups.py(384):                 rhs = OrderedSet(self.rhs)
0.85 lookups.py(385):                 rhs.discard(None)
0.85 lookups.py(389):             if not rhs:
0.85 lookups.py(394):             sqls, sqls_params = self.batch_process_rhs(compiler, connection, rhs)
0.85 lookups.py(259):         pre_processed = super().batch_process_rhs(compiler, connection, rhs)
0.85 lookups.py(44):         if rhs is None:
0.85 lookups.py(46):         if self.bilateral_transforms:
0.85 lookups.py(56):             _, params = self.get_db_prep_lookup(rhs, connection)
0.85 lookups.py(211):         field = getattr(self.lhs.output_field, 'target_field', None)
0.85 lookups.py(212):         get_db_prep_value = getattr(field, 'get_db_prep_value', None) or self.lhs.output_field.get_db_prep_value
0.85 lookups.py(214):             '%s',
0.85 lookups.py(216):             if self.get_db_prep_lookup_value_is_iterable else
0.85 lookups.py(215):             [get_db_prep_value(v, connection, prepared=True) for v in value]
0.85 lookups.py(215):             [get_db_prep_value(v, connection, prepared=True) for v in value]
0.85 lookups.py(215):             [get_db_prep_value(v, connection, prepared=True) for v in value]
0.85 lookups.py(213):         return (
0.85 lookups.py(57):             sqls, sqls_params = ['%s'] * len(params), params
0.85 lookups.py(58):         return sqls, sqls_params
0.85 lookups.py(264):         sql, params = zip(*(
0.85 lookups.py(266):             for sql, param in zip(*pre_processed)
0.85 lookups.py(264):         sql, params = zip(*(
0.85 lookups.py(264):         sql, params = zip(*(
0.85 lookups.py(266):             for sql, param in zip(*pre_processed)
0.85 lookups.py(265):             self.resolve_expression_parameter(compiler, connection, sql, param)
0.85 lookups.py(251):         params = [param]
0.85 lookups.py(252):         if hasattr(param, 'resolve_expression'):
0.85 lookups.py(254):         if hasattr(param, 'as_sql'):
0.85 lookups.py(256):         return sql, params
0.85 lookups.py(264):         sql, params = zip(*(
0.85 lookups.py(268):         params = itertools.chain.from_iterable(params)
0.85 lookups.py(269):         return sql, tuple(params)
0.85 lookups.py(395):             placeholder = '(' + ', '.join(sqls) + ')'
0.85 lookups.py(396):             return (placeholder, sqls_params)
0.85 lookups.py(193):         params.extend(rhs_params)
0.85 lookups.py(194):         rhs_sql = self.get_rhs_op(connection, rhs_sql)
0.85 lookups.py(404):         return 'IN %s' % rhs
0.85 lookups.py(195):         return '%s %s' % (lhs_sql, rhs_sql), params
0.85 operations.py(568):         return []
0.85 operations.py(568):         return []
0.85 operations.py(332):         if self._cache is None:
0.85 operations.py(334):         return getattr(self._cache, compiler_name)
0.85 operations.py(690):         return 'INSERT INTO'
0.85 operations.py(465):         return value
0.85 operations.py(465):         return value
0.85 operations.py(465):         return value
0.85 operations.py(465):         return value
0.85 operations.py(617):         return params
0.85 operations.py(617):         return params
0.85 operations.py(617):         return params
0.85 operations.py(617):         return params
0.85 operations.py(617):         return params
0.85 operations.py(617):         return params
0.85 operations.py(617):         return params
0.85 operations.py(617):         return params
0.85 operations.py(617):         return params
0.85 operations.py(617):         return params
0.85 operations.py(617):         return params
0.85 operations.py(617):         return params
0.85 operations.py(693):         return ''
0.85 lookups.py(22):         self.lhs, self.rhs = lhs, rhs
0.85 lookups.py(23):         self.rhs = self.get_prep_lookup()
0.85 lookups.py(72):         if hasattr(self.rhs, 'resolve_expression'):
0.85 lookups.py(74):         if self.prepare_rhs and hasattr(self.lhs.output_field, 'get_prep_value'):
0.85 lookups.py(75):             return self.lhs.output_field.get_prep_value(self.rhs)
0.85 lookups.py(24):         if hasattr(self.lhs, 'get_bilateral_transforms'):
0.85 lookups.py(27):             bilateral_transforms = []
0.85 lookups.py(28):         if bilateral_transforms:
0.85 lookups.py(36):         self.bilateral_transforms = bilateral_transforms
0.85 operations.py(332):         if self._cache is None:
0.85 operations.py(334):         return getattr(self._cache, compiler_name)
0.85 lookups.py(135):         return self.lhs.contains_aggregate or getattr(self.rhs, 'contains_aggregate', False)
0.85 lookups.py(306):             isinstance(self.rhs, bool) and
0.85 lookups.py(305):         if (
0.85 lookups.py(313):         return super().as_sql(compiler, connection)
0.85 lookups.py(191):         lhs_sql, params = self.process_lhs(compiler, connection)
0.85 lookups.py(182):         lhs_sql, params = super().process_lhs(compiler, connection, lhs)
0.85 lookups.py(82):         lhs = lhs or self.lhs
0.85 lookups.py(83):         if hasattr(lhs, 'resolve_expression'):
0.85 lookups.py(84):             lhs = lhs.resolve_expression(compiler.query)
0.85 lookups.py(85):         return compiler.compile(lhs)
0.85 lookups.py(183):         field_internal_type = self.lhs.output_field.get_internal_type()
0.85 lookups.py(184):         db_type = self.lhs.output_field.db_type(connection=connection)
0.85 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.85 lookups.py(186):             db_type, field_internal_type) % lhs_sql
0.85 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.85 operations.py(194):         return '%s'
0.85 lookups.py(186):             db_type, field_internal_type) % lhs_sql
0.85 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.85 lookups.py(187):         lhs_sql = connection.ops.lookup_cast(self.lookup_name, field_internal_type) % lhs_sql
0.85 operations.py(267):         return "%s"
0.85 lookups.py(188):         return lhs_sql, list(params)
0.85 lookups.py(192):         rhs_sql, rhs_params = self.process_rhs(compiler, connection)
0.85 lookups.py(288):         from django.db.models.sql.query import Query
0.85 lookups.py(289):         if isinstance(self.rhs, Query):
0.85 lookups.py(299):         return super().process_rhs(compiler, connection)
0.85 lookups.py(88):         value = self.rhs
0.85 lookups.py(89):         if self.bilateral_transforms:
0.85 lookups.py(96):         if hasattr(value, 'as_sql'):
0.85 lookups.py(99):             return self.get_db_prep_lookup(value, connection)
0.85 lookups.py(211):         field = getattr(self.lhs.output_field, 'target_field', None)
0.85 lookups.py(212):         get_db_prep_value = getattr(field, 'get_db_prep_value', None) or self.lhs.output_field.get_db_prep_value
0.85 lookups.py(214):             '%s',
0.85 lookups.py(216):             if self.get_db_prep_lookup_value_is_iterable else
0.85 lookups.py(215):             [get_db_prep_value(v, connection, prepared=True) for v in value]
0.85 lookups.py(217):             [get_db_prep_value(value, connection, prepared=True)]
0.85 lookups.py(213):         return (
0.85 lookups.py(193):         params.extend(rhs_params)
0.85 lookups.py(194):         rhs_sql = self.get_rhs_op(connection, rhs_sql)
0.85 lookups.py(198):         return connection.operators[self.lookup_name] % rhs
0.85 lookups.py(195):         return '%s %s' % (lhs_sql, rhs_sql), params
0.85 operations.py(568):         return []
0.85 operations.py(568):         return []
0.85 operations.py(568):         return []
0.85 operations.py(332):         if self._cache is None:
0.85 operations.py(334):         return getattr(self._cache, compiler_name)
0.85 operations.py(690):         return 'INSERT INTO'
0.85 operations.py(617):         return params
0.85 operations.py(617):         return params
0.85 operations.py(693):         return ''
0.85 lookups.py(22):         self.lhs, self.rhs = lhs, rhs
0.85 lookups.py(23):         self.rhs = self.get_prep_lookup()
0.85 lookups.py(72):         if hasattr(self.rhs, 'resolve_expression'):
0.85 lookups.py(74):         if self.prepare_rhs and hasattr(self.lhs.output_field, 'get_prep_value'):
0.85 lookups.py(75):             return self.lhs.output_field.get_prep_value(self.rhs)
0.85 lookups.py(24):         if hasattr(self.lhs, 'get_bilateral_transforms'):
0.85 lookups.py(27):             bilateral_transforms = []
0.85 lookups.py(28):         if bilateral_transforms:
0.85 lookups.py(36):         self.bilateral_transforms = bilateral_transforms
0.85 operations.py(332):         if self._cache is None:
0.85 operations.py(334):         return getattr(self._cache, compiler_name)
0.85 lookups.py(135):         return self.lhs.contains_aggregate or getattr(self.rhs, 'contains_aggregate', False)
0.85 lookups.py(306):             isinstance(self.rhs, bool) and
0.85 lookups.py(305):         if (
0.85 lookups.py(313):         return super().as_sql(compiler, connection)
0.85 lookups.py(191):         lhs_sql, params = self.process_lhs(compiler, connection)
0.85 lookups.py(182):         lhs_sql, params = super().process_lhs(compiler, connection, lhs)
0.85 lookups.py(82):         lhs = lhs or self.lhs
0.85 lookups.py(83):         if hasattr(lhs, 'resolve_expression'):
0.85 lookups.py(84):             lhs = lhs.resolve_expression(compiler.query)
0.85 lookups.py(85):         return compiler.compile(lhs)
0.85 lookups.py(183):         field_internal_type = self.lhs.output_field.get_internal_type()
0.85 lookups.py(184):         db_type = self.lhs.output_field.db_type(connection=connection)
0.85 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.85 lookups.py(186):             db_type, field_internal_type) % lhs_sql
0.85 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.85 operations.py(194):         return '%s'
0.85 lookups.py(186):             db_type, field_internal_type) % lhs_sql
0.85 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.85 lookups.py(187):         lhs_sql = connection.ops.lookup_cast(self.lookup_name, field_internal_type) % lhs_sql
0.85 operations.py(267):         return "%s"
0.85 lookups.py(188):         return lhs_sql, list(params)
0.85 lookups.py(192):         rhs_sql, rhs_params = self.process_rhs(compiler, connection)
0.85 lookups.py(288):         from django.db.models.sql.query import Query
0.85 lookups.py(289):         if isinstance(self.rhs, Query):
0.85 lookups.py(299):         return super().process_rhs(compiler, connection)
0.85 lookups.py(88):         value = self.rhs
0.85 lookups.py(89):         if self.bilateral_transforms:
0.85 lookups.py(96):         if hasattr(value, 'as_sql'):
0.85 lookups.py(99):             return self.get_db_prep_lookup(value, connection)
0.85 lookups.py(211):         field = getattr(self.lhs.output_field, 'target_field', None)
0.85 lookups.py(212):         get_db_prep_value = getattr(field, 'get_db_prep_value', None) or self.lhs.output_field.get_db_prep_value
0.85 lookups.py(214):             '%s',
0.85 lookups.py(216):             if self.get_db_prep_lookup_value_is_iterable else
0.85 lookups.py(215):             [get_db_prep_value(v, connection, prepared=True) for v in value]
0.85 lookups.py(217):             [get_db_prep_value(value, connection, prepared=True)]
0.85 lookups.py(213):         return (
0.85 lookups.py(193):         params.extend(rhs_params)
0.85 lookups.py(194):         rhs_sql = self.get_rhs_op(connection, rhs_sql)
0.85 lookups.py(198):         return connection.operators[self.lookup_name] % rhs
0.85 lookups.py(195):         return '%s %s' % (lhs_sql, rhs_sql), params
0.85 operations.py(568):         return []
0.85 operations.py(568):         return []
0.85 operations.py(568):         return []
0.85 lookups.py(22):         self.lhs, self.rhs = lhs, rhs
0.85 lookups.py(23):         self.rhs = self.get_prep_lookup()
0.85 lookups.py(72):         if hasattr(self.rhs, 'resolve_expression'):
0.85 lookups.py(74):         if self.prepare_rhs and hasattr(self.lhs.output_field, 'get_prep_value'):
0.85 lookups.py(75):             return self.lhs.output_field.get_prep_value(self.rhs)
0.85 lookups.py(24):         if hasattr(self.lhs, 'get_bilateral_transforms'):
0.85 lookups.py(27):             bilateral_transforms = []
0.85 lookups.py(28):         if bilateral_transforms:
0.85 lookups.py(36):         self.bilateral_transforms = bilateral_transforms
0.85 lookups.py(22):         self.lhs, self.rhs = lhs, rhs
0.85 lookups.py(23):         self.rhs = self.get_prep_lookup()
0.85 lookups.py(72):         if hasattr(self.rhs, 'resolve_expression'):
0.85 lookups.py(74):         if self.prepare_rhs and hasattr(self.lhs.output_field, 'get_prep_value'):
0.85 lookups.py(75):             return self.lhs.output_field.get_prep_value(self.rhs)
0.85 lookups.py(24):         if hasattr(self.lhs, 'get_bilateral_transforms'):
0.85 lookups.py(27):             bilateral_transforms = []
0.85 lookups.py(28):         if bilateral_transforms:
0.85 lookups.py(36):         self.bilateral_transforms = bilateral_transforms
0.85 operations.py(332):         if self._cache is None:
0.85 operations.py(334):         return getattr(self._cache, compiler_name)
0.85 lookups.py(135):         return self.lhs.contains_aggregate or getattr(self.rhs, 'contains_aggregate', False)
0.85 lookups.py(135):         return self.lhs.contains_aggregate or getattr(self.rhs, 'contains_aggregate', False)
0.85 lookups.py(306):             isinstance(self.rhs, bool) and
0.85 lookups.py(305):         if (
0.85 lookups.py(313):         return super().as_sql(compiler, connection)
0.85 lookups.py(191):         lhs_sql, params = self.process_lhs(compiler, connection)
0.85 lookups.py(182):         lhs_sql, params = super().process_lhs(compiler, connection, lhs)
0.85 lookups.py(82):         lhs = lhs or self.lhs
0.85 lookups.py(83):         if hasattr(lhs, 'resolve_expression'):
0.85 lookups.py(84):             lhs = lhs.resolve_expression(compiler.query)
0.85 lookups.py(85):         return compiler.compile(lhs)
0.85 lookups.py(183):         field_internal_type = self.lhs.output_field.get_internal_type()
0.85 lookups.py(184):         db_type = self.lhs.output_field.db_type(connection=connection)
0.85 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.85 lookups.py(186):             db_type, field_internal_type) % lhs_sql
0.85 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.85 operations.py(194):         return '%s'
0.85 lookups.py(186):             db_type, field_internal_type) % lhs_sql
0.85 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.85 lookups.py(187):         lhs_sql = connection.ops.lookup_cast(self.lookup_name, field_internal_type) % lhs_sql
0.85 operations.py(267):         return "%s"
0.85 lookups.py(188):         return lhs_sql, list(params)
0.85 lookups.py(192):         rhs_sql, rhs_params = self.process_rhs(compiler, connection)
0.85 lookups.py(288):         from django.db.models.sql.query import Query
0.85 lookups.py(289):         if isinstance(self.rhs, Query):
0.85 lookups.py(299):         return super().process_rhs(compiler, connection)
0.85 lookups.py(88):         value = self.rhs
0.85 lookups.py(89):         if self.bilateral_transforms:
0.85 lookups.py(96):         if hasattr(value, 'as_sql'):
0.85 lookups.py(99):             return self.get_db_prep_lookup(value, connection)
0.85 lookups.py(211):         field = getattr(self.lhs.output_field, 'target_field', None)
0.85 lookups.py(212):         get_db_prep_value = getattr(field, 'get_db_prep_value', None) or self.lhs.output_field.get_db_prep_value
0.85 lookups.py(214):             '%s',
0.85 lookups.py(216):             if self.get_db_prep_lookup_value_is_iterable else
0.85 lookups.py(215):             [get_db_prep_value(v, connection, prepared=True) for v in value]
0.85 lookups.py(217):             [get_db_prep_value(value, connection, prepared=True)]
0.85 lookups.py(213):         return (
0.85 lookups.py(193):         params.extend(rhs_params)
0.85 lookups.py(194):         rhs_sql = self.get_rhs_op(connection, rhs_sql)
0.85 lookups.py(198):         return connection.operators[self.lookup_name] % rhs
0.85 lookups.py(195):         return '%s %s' % (lhs_sql, rhs_sql), params
0.85 lookups.py(306):             isinstance(self.rhs, bool) and
0.85 lookups.py(305):         if (
0.85 lookups.py(313):         return super().as_sql(compiler, connection)
0.85 lookups.py(191):         lhs_sql, params = self.process_lhs(compiler, connection)
0.85 lookups.py(182):         lhs_sql, params = super().process_lhs(compiler, connection, lhs)
0.85 lookups.py(82):         lhs = lhs or self.lhs
0.85 lookups.py(83):         if hasattr(lhs, 'resolve_expression'):
0.85 lookups.py(84):             lhs = lhs.resolve_expression(compiler.query)
0.85 lookups.py(85):         return compiler.compile(lhs)
0.85 lookups.py(183):         field_internal_type = self.lhs.output_field.get_internal_type()
0.85 lookups.py(184):         db_type = self.lhs.output_field.db_type(connection=connection)
0.85 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.85 lookups.py(186):             db_type, field_internal_type) % lhs_sql
0.85 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.85 operations.py(194):         return '%s'
0.85 lookups.py(186):             db_type, field_internal_type) % lhs_sql
0.85 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.85 lookups.py(187):         lhs_sql = connection.ops.lookup_cast(self.lookup_name, field_internal_type) % lhs_sql
0.85 operations.py(267):         return "%s"
0.85 lookups.py(188):         return lhs_sql, list(params)
0.85 lookups.py(192):         rhs_sql, rhs_params = self.process_rhs(compiler, connection)
0.85 lookups.py(288):         from django.db.models.sql.query import Query
0.85 lookups.py(289):         if isinstance(self.rhs, Query):
0.85 lookups.py(299):         return super().process_rhs(compiler, connection)
0.85 lookups.py(88):         value = self.rhs
0.85 lookups.py(89):         if self.bilateral_transforms:
0.85 lookups.py(96):         if hasattr(value, 'as_sql'):
0.85 lookups.py(99):             return self.get_db_prep_lookup(value, connection)
0.85 lookups.py(211):         field = getattr(self.lhs.output_field, 'target_field', None)
0.85 lookups.py(212):         get_db_prep_value = getattr(field, 'get_db_prep_value', None) or self.lhs.output_field.get_db_prep_value
0.85 lookups.py(214):             '%s',
0.85 lookups.py(216):             if self.get_db_prep_lookup_value_is_iterable else
0.85 lookups.py(215):             [get_db_prep_value(v, connection, prepared=True) for v in value]
0.85 lookups.py(217):             [get_db_prep_value(value, connection, prepared=True)]
0.85 lookups.py(213):         return (
0.85 lookups.py(193):         params.extend(rhs_params)
0.85 lookups.py(194):         rhs_sql = self.get_rhs_op(connection, rhs_sql)
0.85 lookups.py(198):         return connection.operators[self.lookup_name] % rhs
0.85 lookups.py(195):         return '%s %s' % (lhs_sql, rhs_sql), params
0.85 operations.py(224):         limit, offset = self._get_limit_offset_params(low_mark, high_mark)
0.85 operations.py(215):         offset = low_mark or 0
0.85 operations.py(216):         if high_mark is not None:
0.85 operations.py(217):             return (high_mark - offset), offset
0.85 operations.py(225):         return ' '.join(sql for sql in (
0.85 operations.py(226):             ('LIMIT %d' % limit) if limit else None,
0.85 operations.py(227):             ('OFFSET %d' % offset) if offset else None,
0.85 operations.py(225):         return ' '.join(sql for sql in (
0.85 operations.py(225):         return ' '.join(sql for sql in (
0.85 operations.py(228):         ) if sql)
0.85 operations.py(225):         return ' '.join(sql for sql in (
0.85 operations.py(225):         return ' '.join(sql for sql in (
0.85 operations.py(228):         ) if sql)
0.85 operations.py(225):         return ' '.join(sql for sql in (
0.85 operations.py(568):         return []
0.85 operations.py(568):         return []
0.85 operations.py(568):         return []
0.85 lookups.py(22):         self.lhs, self.rhs = lhs, rhs
0.85 lookups.py(23):         self.rhs = self.get_prep_lookup()
0.85 lookups.py(102):         return not hasattr(self.rhs, 'as_sql')
0.85 lookups.py(229):         if hasattr(self.rhs, 'resolve_expression'):
0.85 lookups.py(231):         prepared_values = []
0.85 lookups.py(232):         for rhs_value in self.rhs:
0.85 lookups.py(233):             if hasattr(rhs_value, 'resolve_expression'):
0.85 lookups.py(237):             elif self.prepare_rhs and hasattr(self.lhs.output_field, 'get_prep_value'):
0.85 lookups.py(238):                 rhs_value = self.lhs.output_field.get_prep_value(rhs_value)
0.85 lookups.py(239):             prepared_values.append(rhs_value)
0.85 lookups.py(232):         for rhs_value in self.rhs:
0.85 lookups.py(240):         return prepared_values
0.85 lookups.py(24):         if hasattr(self.lhs, 'get_bilateral_transforms'):
0.85 lookups.py(27):             bilateral_transforms = []
0.85 lookups.py(28):         if bilateral_transforms:
0.85 lookups.py(36):         self.bilateral_transforms = bilateral_transforms
0.85 operations.py(332):         if self._cache is None:
0.85 operations.py(334):         return getattr(self._cache, compiler_name)
0.85 lookups.py(135):         return self.lhs.contains_aggregate or getattr(self.rhs, 'contains_aggregate', False)
0.85 lookups.py(407):         max_in_list_size = connection.ops.max_in_list_size()
0.85 operations.py(274):         return None
0.85 lookups.py(408):         if self.rhs_is_direct_value() and max_in_list_size and len(self.rhs) > max_in_list_size:
0.85 lookups.py(102):         return not hasattr(self.rhs, 'as_sql')
0.85 lookups.py(410):         return super().as_sql(compiler, connection)
0.85 lookups.py(191):         lhs_sql, params = self.process_lhs(compiler, connection)
0.85 lookups.py(182):         lhs_sql, params = super().process_lhs(compiler, connection, lhs)
0.85 lookups.py(82):         lhs = lhs or self.lhs
0.85 lookups.py(83):         if hasattr(lhs, 'resolve_expression'):
0.85 lookups.py(84):             lhs = lhs.resolve_expression(compiler.query)
0.85 lookups.py(85):         return compiler.compile(lhs)
0.85 lookups.py(183):         field_internal_type = self.lhs.output_field.get_internal_type()
0.85 lookups.py(184):         db_type = self.lhs.output_field.db_type(connection=connection)
0.85 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.85 lookups.py(186):             db_type, field_internal_type) % lhs_sql
0.85 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.85 operations.py(194):         return '%s'
0.85 lookups.py(186):             db_type, field_internal_type) % lhs_sql
0.85 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.85 lookups.py(187):         lhs_sql = connection.ops.lookup_cast(self.lookup_name, field_internal_type) % lhs_sql
0.85 operations.py(267):         return "%s"
0.85 lookups.py(188):         return lhs_sql, list(params)
0.85 lookups.py(192):         rhs_sql, rhs_params = self.process_rhs(compiler, connection)
0.85 lookups.py(374):         db_rhs = getattr(self.rhs, '_db', None)
0.85 lookups.py(375):         if db_rhs is not None and db_rhs != connection.alias:
0.85 lookups.py(381):         if self.rhs_is_direct_value():
0.85 lookups.py(102):         return not hasattr(self.rhs, 'as_sql')
0.85 lookups.py(383):             try:
0.85 lookups.py(384):                 rhs = OrderedSet(self.rhs)
0.85 lookups.py(385):                 rhs.discard(None)
0.85 lookups.py(389):             if not rhs:
0.85 lookups.py(394):             sqls, sqls_params = self.batch_process_rhs(compiler, connection, rhs)
0.85 lookups.py(259):         pre_processed = super().batch_process_rhs(compiler, connection, rhs)
0.85 lookups.py(44):         if rhs is None:
0.85 lookups.py(46):         if self.bilateral_transforms:
0.85 lookups.py(56):             _, params = self.get_db_prep_lookup(rhs, connection)
0.85 lookups.py(211):         field = getattr(self.lhs.output_field, 'target_field', None)
0.85 lookups.py(212):         get_db_prep_value = getattr(field, 'get_db_prep_value', None) or self.lhs.output_field.get_db_prep_value
0.85 lookups.py(214):             '%s',
0.85 lookups.py(216):             if self.get_db_prep_lookup_value_is_iterable else
0.85 lookups.py(215):             [get_db_prep_value(v, connection, prepared=True) for v in value]
0.85 lookups.py(215):             [get_db_prep_value(v, connection, prepared=True) for v in value]
0.85 lookups.py(215):             [get_db_prep_value(v, connection, prepared=True) for v in value]
0.85 lookups.py(213):         return (
0.85 lookups.py(57):             sqls, sqls_params = ['%s'] * len(params), params
0.85 lookups.py(58):         return sqls, sqls_params
0.85 lookups.py(264):         sql, params = zip(*(
0.85 lookups.py(266):             for sql, param in zip(*pre_processed)
0.85 lookups.py(264):         sql, params = zip(*(
0.85 lookups.py(264):         sql, params = zip(*(
0.85 lookups.py(266):             for sql, param in zip(*pre_processed)
0.85 lookups.py(265):             self.resolve_expression_parameter(compiler, connection, sql, param)
0.85 lookups.py(251):         params = [param]
0.85 lookups.py(252):         if hasattr(param, 'resolve_expression'):
0.85 lookups.py(254):         if hasattr(param, 'as_sql'):
0.85 lookups.py(256):         return sql, params
0.85 lookups.py(264):         sql, params = zip(*(
0.85 lookups.py(268):         params = itertools.chain.from_iterable(params)
0.85 lookups.py(269):         return sql, tuple(params)
0.85 lookups.py(395):             placeholder = '(' + ', '.join(sqls) + ')'
0.85 lookups.py(396):             return (placeholder, sqls_params)
0.85 lookups.py(193):         params.extend(rhs_params)
0.85 lookups.py(194):         rhs_sql = self.get_rhs_op(connection, rhs_sql)
0.85 lookups.py(404):         return 'IN %s' % rhs
0.85 lookups.py(195):         return '%s %s' % (lhs_sql, rhs_sql), params
0.85 operations.py(568):         return []
0.85 operations.py(568):         return []
0.85 operations.py(332):         if self._cache is None:
0.85 operations.py(334):         return getattr(self._cache, compiler_name)
0.85 operations.py(690):         return 'INSERT INTO'
0.85 operations.py(465):         return value
0.85 operations.py(465):         return value
0.85 operations.py(465):         return value
0.85 operations.py(465):         return value
0.85 operations.py(617):         return params
0.85 operations.py(617):         return params
0.85 operations.py(617):         return params
0.85 operations.py(617):         return params
0.85 operations.py(617):         return params
0.85 operations.py(617):         return params
0.85 operations.py(617):         return params
0.85 operations.py(617):         return params
0.85 operations.py(617):         return params
0.85 operations.py(617):         return params
0.85 operations.py(617):         return params
0.85 operations.py(617):         return params
0.85 operations.py(693):         return ''
Creating test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
0.89 operations.py(281):         return None
0.89 operations.py(281):         return None
0.89 operations.py(281):         return None
0.90 operations.py(281):         return None
0.90 operations.py(281):         return None
0.90 operations.py(281):         return None
0.90 operations.py(281):         return None
System check identified no issues (0 silenced).
test_iso_year_lookup_uses_between (test_coverup_django__django-14170.IsoYearLookupTest) ... FAIL

======================================================================
FAIL: test_iso_year_lookup_uses_between (test_coverup_django__django-14170.IsoYearLookupTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/./tests/test_coverup_django__django-14170.py", line 33, in test_iso_year_lookup_uses_between
    self.assertIn('EXTRACT', query)
AssertionError: 'EXTRACT' not found in 'SELECT "test_app_dtmodel"."id" FROM "test_app_dtmodel" WHERE "test_app_dtmodel"."start_date" BETWEEN 2020-01-01 AND 2020-12-31'

----------------------------------------------------------------------
Ran 1 test in 0.004s

FAILED (failures=1)
Destroying test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
0.90 operations.py(332):         if self._cache is None:
0.90 operations.py(334):         return getattr(self._cache, compiler_name)
0.90 operations.py(690):         return 'INSERT INTO'
0.90 operations.py(491):         if value is None:
0.90 operations.py(493):         return str(value)
0.90 operations.py(617):         return params
0.90 operations.py(693):         return ''
0.90 operations.py(259):         return cursor.lastrowid
0.90 operations.py(332):         if self._cache is None:
0.90 operations.py(334):         return getattr(self._cache, compiler_name)
0.90 operations.py(690):         return 'INSERT INTO'
0.90 operations.py(491):         if value is None:
0.90 operations.py(493):         return str(value)
0.90 operations.py(617):         return params
0.90 operations.py(693):         return ''
0.90 operations.py(259):         return cursor.lastrowid
0.90 operations.py(332):         if self._cache is None:
0.90 operations.py(334):         return getattr(self._cache, compiler_name)
0.90 operations.py(690):         return 'INSERT INTO'
0.90 operations.py(491):         if value is None:
0.90 operations.py(493):         return str(value)
0.90 operations.py(617):         return params
0.90 operations.py(693):         return ''
0.90 operations.py(259):         return cursor.lastrowid
0.90 operations.py(360):         return "SAVEPOINT %s" % self.quote_name(sid)
0.91 lookups.py(22):         self.lhs, self.rhs = lhs, rhs
0.91 lookups.py(23):         self.rhs = self.get_prep_lookup()
0.91 lookups.py(72):         if hasattr(self.rhs, 'resolve_expression'):
0.91 lookups.py(74):         if self.prepare_rhs and hasattr(self.lhs.output_field, 'get_prep_value'):
0.91 lookups.py(75):             return self.lhs.output_field.get_prep_value(self.rhs)
0.91 lookups.py(24):         if hasattr(self.lhs, 'get_bilateral_transforms'):
0.91 lookups.py(25):             bilateral_transforms = self.lhs.get_bilateral_transforms()
0.91 lookups.py(171):         if hasattr(self.lhs, 'get_bilateral_transforms'):
0.91 lookups.py(168):         return self.get_source_expressions()[0]
0.91 lookups.py(174):             bilateral_transforms = []
0.91 lookups.py(175):         if self.bilateral:
0.91 lookups.py(177):         return bilateral_transforms
0.91 lookups.py(28):         if bilateral_transforms:
0.91 lookups.py(36):         self.bilateral_transforms = bilateral_transforms
0.91 operations.py(332):         if self._cache is None:
0.91 operations.py(334):         return getattr(self._cache, compiler_name)
0.91 lookups.py(135):         return self.lhs.contains_aggregate or getattr(self.rhs, 'contains_aggregate', False)
0.91 lookups.py(552):         if self.rhs_is_direct_value():
0.91 lookups.py(102):         return not hasattr(self.rhs, 'as_sql')
0.91 lookups.py(555):             lhs_sql, params = self.process_lhs(compiler, connection, self.lhs.lhs)
0.91 lookups.py(168):         return self.get_source_expressions()[0]
0.91 lookups.py(182):         lhs_sql, params = super().process_lhs(compiler, connection, lhs)
0.91 lookups.py(82):         lhs = lhs or self.lhs
0.91 lookups.py(83):         if hasattr(lhs, 'resolve_expression'):
0.91 lookups.py(84):             lhs = lhs.resolve_expression(compiler.query)
0.91 lookups.py(85):         return compiler.compile(lhs)
0.91 lookups.py(183):         field_internal_type = self.lhs.output_field.get_internal_type()
0.91 lookups.py(184):         db_type = self.lhs.output_field.db_type(connection=connection)
0.91 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.91 lookups.py(186):             db_type, field_internal_type) % lhs_sql
0.91 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.91 operations.py(194):         return '%s'
0.91 lookups.py(186):             db_type, field_internal_type) % lhs_sql
0.91 lookups.py(185):         lhs_sql = connection.ops.field_cast_sql(
0.91 lookups.py(187):         lhs_sql = connection.ops.lookup_cast(self.lookup_name, field_internal_type) % lhs_sql
0.91 operations.py(267):         return "%s"
0.91 lookups.py(188):         return lhs_sql, list(params)
0.91 lookups.py(556):             rhs_sql, _ = self.process_rhs(compiler, connection)
0.91 lookups.py(288):         from django.db.models.sql.query import Query
0.91 lookups.py(289):         if isinstance(self.rhs, Query):
0.91 lookups.py(299):         return super().process_rhs(compiler, connection)
0.91 lookups.py(88):         value = self.rhs
0.91 lookups.py(89):         if self.bilateral_transforms:
0.91 lookups.py(96):         if hasattr(value, 'as_sql'):
0.91 lookups.py(99):             return self.get_db_prep_lookup(value, connection)
0.91 lookups.py(211):         field = getattr(self.lhs.output_field, 'target_field', None)
0.91 lookups.py(212):         get_db_prep_value = getattr(field, 'get_db_prep_value', None) or self.lhs.output_field.get_db_prep_value
0.91 lookups.py(214):             '%s',
0.91 lookups.py(216):             if self.get_db_prep_lookup_value_is_iterable else
0.91 lookups.py(215):             [get_db_prep_value(v, connection, prepared=True) for v in value]
0.91 lookups.py(217):             [get_db_prep_value(value, connection, prepared=True)]
0.91 lookups.py(213):         return (
0.91 lookups.py(557):             rhs_sql = self.get_direct_rhs_sql(connection, rhs_sql)
0.91 lookups.py(574):         return 'BETWEEN %s AND %s'
0.91 lookups.py(558):             start, finish = self.year_lookup_bounds(connection, self.rhs)
0.91 lookups.py(542):         output_field = self.lhs.lhs.output_field
0.91 lookups.py(168):         return self.get_source_expressions()[0]
0.91 lookups.py(543):         if isinstance(output_field, DateTimeField):
0.91 lookups.py(546):             bounds = connection.ops.year_lookup_bounds_for_date_field(year)
0.91 operations.py(537):         first = datetime.date(value, 1, 1)
0.91 operations.py(538):         second = datetime.date(value, 12, 31)
0.91 operations.py(539):         first = self.adapt_datefield_value(first)
0.91 operations.py(491):         if value is None:
0.91 operations.py(493):         return str(value)
0.91 operations.py(540):         second = self.adapt_datefield_value(second)
0.91 operations.py(491):         if value is None:
0.91 operations.py(493):         return str(value)
0.91 operations.py(541):         return [first, second]
0.91 lookups.py(547):         return bounds
0.91 lookups.py(559):             params.extend(self.get_bound_params(start, finish))
0.91 lookups.py(577):         return (start, finish)
0.91 lookups.py(560):             return '%s %s' % (lhs_sql, rhs_sql), params
0.91 operations.py(372):         return "ROLLBACK TO SAVEPOINT %s" % self.quote_name(sid)
0.91 operations.py(366):         return "RELEASE SAVEPOINT %s" % self.quote_name(sid)
+ cat coverage.cover
{"/testbed/django/db/models/lookups.py": {"1": 1, "2": 1, "3": 1, "5": 1, "6": 1, "7": 1, "10": 1, "11": 1, "12": 1, "13": 1, "16": 2, "158": 2, "180": 2, "201": 2, "221": 2, "272": 2, "283": 2, "284": 1, "316": 2, "317": 1, "328": 2, "329": 1, "333": 2, "334": 1, "338": 2, "339": 1, "343": 2, "344": 1, "348": 2, "359": 2, "360": 1, "364": 2, "365": 1, "369": 2, "370": 1, "435": 2, "462": 2, "463": 1, "467": 2, "468": 1, "472": 2, "473": 1, "478": 2, "479": 1, "483": 2, "484": 1, "489": 2, "490": 1, "494": 2, "495": 1, "502": 2, "503": 1, "520": 2, "521": 1, "535": 2, "536": 1, "540": 2, "572": 2, "580": 2, "585": 2, "590": 2, "595": 2, "600": 2, "615": 2, "616": 1, "620": 2, "621": 1, "625": 2, "626": 1, "630": 2, "631": 1, "635": 2, "636": 1, "640": 2, "641": 1, "645": 2, "646": 1, "17": 1, "18": 1, "19": 1, "21": 1, "38": 1, "43": 1, "60": 1, "65": 1, "71": 1, "78": 1, "81": 1, "87": 1, "101": 1, "104": 1, "111": 1, "117": 1, "120": 1, "133": 1, "134": 1, "137": 1, "138": 1, "141": 1, "142": 1, "145": 1, "146": 1, "149": 1, "154": 1, "22": 31, "23": 31, "24": 31, "25": 1, "27": 30, "28": 31, "31": 0, "34": 0, "35": 0, "36": 31, "39": 0, "40": 0, "41": 0, "44": 5, "45": 0, "46": 5, "47": 0, "48": 0, "49": 0, "50": 0, "51": 0, "52": 0, "53": 0, "54": 0, "56": 5, "57": 5, "58": 5, "61": 0, "62": 0, "63": 0, "66": 0, "67": 0, "69": 0, "72": 26, "73": 0, "74": 26, "75": 26, "76": 0, "79": 0, "82": 31, "83": 31, "84": 31, "85": 31, "88": 26, "89": 26, "90": 0, "93": 0, "94": 0, "95": 0, "96": 26, "97": 0, "99": 26, "102": 16, "105": 0, "106": 0, "107": 0, "108": 0, "109": 0, "112": 0, "113": 0, "114": 0, "115": 0, "118": 0, "123": 0, "124": 0, "125": 0, "126": 0, "127": 0, "128": 0, "129": 0, "130": 0, "131": 0, "135": 30, "139": 0, "143": 0, "147": 0, "150": 0, "151": 0, "152": 0, "155": 0, "163": 1, "164": 1, "166": 1, "167": 1, "170": 1, "168": 3, "171": 1, "172": 0, "174": 1, "175": 1, "176": 0, "177": 1, "181": 1, "190": 1, "197": 1, "182": 31, "183": 31, "184": 31, "185": 93, "186": 62, "187": 31, "188": 31, "191": 30, "192": 30, "193": 30, "194": 30, "195": 30, "198": 25, "206": 1, "208": 1, "211": 31, "212": 31, "214": 31, "216": 31, "215": 43, "217": 26, "213": 31, "226": 1, "228": 1, "242": 1, "250": 1, "258": 1, "229": 5, "230": 0, "231": 5, "232": 12, "233": 7, "236": 0, "237": 7, "238": 7, "239": 7, "240": 5, "243": 0, "246": 0, "248": 0, "251": 7, "252": 7, "253": 0, "254": 7, "255": 0, "256": 7, "259": 5, "264": 22, "266": 12, "268": 5, "269": 5, "265": 7, "274": 1, "276": 1, "277": 0, "278": 0, "279": 0, "280": 0, "285": 1, "287": 1, "301": 1, "288": 26, "289": 26, "290": 0, "291": 0, "292": 0, "293": 0, "295": 0, "296": 0, "299": 26, "306": 25, "305": 25, "307": 0, "308": 0, "310": 0, "311": 0, "312": 0, "313": 25, "318": 1, "319": 1, "321": 1, "322": 0, "323": 0, "324": 0, "325": 0, "330": 1, "335": 1, "340": 1, "345": 1, "353": 1, "354": 0, "355": 0, "356": 0, "361": 1, "366": 1, "371": 1, "373": 1, "403": 1, "406": 1, "412": 1, "374": 5, "375": 5, "376": 0, "377": 0, "381": 5, "383": 5, "384": 5, "385": 5, "386": 0, "387": 0, "389": 5, "390": 0, "394": 5, "395": 5, "396": 5, "398": 0, "399": 0, "400": 0, "401": 0, "404": 5, "407": 5, "408": 5, "409": 0, "410": 5, "415": 0, "416": 0, "417": 0, "418": 0, "419": 0, "420": 0, "421": 0, "422": 0, "423": 0, "424": 0, "425": 0, "426": 0, "427": 0, "428": 0, "429": 0, "430": 0, "431": 0, "432": 0, "436": 1, "437": 1, "439": 1, "455": 1, "449": 0, "450": 0, "451": 0, "453": 0, "456": 0, "457": 0, "458": 0, "459": 0, "464": 1, "469": 1, "474": 1, "475": 1, "480": 1, "485": 1, "486": 1, "491": 1, "496": 1, "498": 1, "499": 0, "504": 1, "505": 1, "507": 1, "508": 0, "509": 0, "510": 0, "513": 0, "514": 0, "515": 0, "517": 0, "522": 1, "523": 1, "525": 1, "526": 0, "527": 0, "529": 0, "530": 0, "531": 0, "532": 0, "537": 1, "541": 1, "549": 1, "563": 1, "566": 1, "542": 1, "543": 1, "544": 0, "546": 1, "547": 1, "552": 1, "555": 1, "556": 1, "557": 1, "558": 1, "559": 1, "560": 1, "561": 0, "564": 0, "567": 0, "568": 0, "573": 1, "576": 1, "574": 1, "577": 1, "581": 1, "582": 0, "586": 1, "587": 0, "591": 1, "592": 0, "596": 1, "597": 0, "605": 1, "606": 0, "607": 0, "608": 0, "609": 0, "610": 0, "611": 0, "612": 0, "617": 1, "622": 1, "627": 1, "632": 1, "637": 1, "642": 1, "647": 1}}
{"/testbed/django/db/backends/base/operations.py": {"1": 1, "2": 1, "3": 1, "5": 1, "7": 1, "8": 1, "9": 1, "10": 1, "11": 1, "14": 2, "19": 1, "24": 1, "25": 1, "26": 1, "27": 1, "28": 1, "29": 1, "30": 1, "31": 1, "32": 1, "23": 1, "35": 1, "36": 1, "37": 1, "34": 1, "42": 1, "44": 1, "47": 1, "48": 1, "49": 1, "50": 1, "51": 1, "54": 1, "56": 1, "60": 1, "69": 1, "77": 1, "87": 1, "95": 1, "102": 1, "113": 1, "122": 1, "128": 1, "136": 1, "144": 1, "155": 1, "162": 1, "169": 1, "180": 1, "187": 1, "196": 1, "203": 1, "214": 1, "222": 1, "230": 1, "252": 1, "261": 1, "269": 1, "276": 1, "283": 1, "290": 1, "297": 1, "311": 1, "318": 1, "326": 1, "336": 1, "343": 1, "354": 1, "362": 1, "368": 1, "374": 1, "382": 1, "400": 1, "410": 1, "420": 1, "430": 1, "434": 1, "440": 1, "451": 1, "457": 1, "459": 1, "467": 1, "486": 1, "495": 1, "504": 1, "515": 1, "522": 1, "529": 1, "543": 1, "561": 1, "570": 1, "574": 1, "585": 1, "592": 1, "602": 1, "605": 1, "612": 1, "619": 1, "627": 1, "634": 1, "644": 1, "654": 1, "662": 1, "674": 1, "689": 1, "692": 1, "57": 2, "58": 2, "67": 13, "75": 0, "85": 0, "93": 0, "100": 0, "111": 0, "117": 0, "118": 0, "126": 0, "134": 0, "142": 0, "153": 0, "160": 0, "167": 0, "175": 0, "176": 0, "178": 0, "185": 0, "194": 31, "201": 0, "207": 0, "208": 0, "209": 0, "210": 0, "211": 0, "215": 8, "216": 8, "217": 8, "218": 0, "219": 0, "220": 0, "224": 8, "225": 48, "226": 8, "227": 8, "228": 16, "241": 0, "243": 0, "244": 0, "245": 0, "246": 0, "248": 0, "250": 0, "242": 0, "259": 9, "267": 31, "274": 5, "281": 52, "288": 0, "295": 0, "306": 0, "308": 0, "307": 0, "316": 0, "324": 0, "332": 64, "333": 1, "334": 64, "341": 0, "352": 0, "360": 1, "366": 1, "372": 1, "380": 0, "398": 0, "402": 0, "403": 0, "404": 0, "406": 0, "407": 0, "408": 0, "418": 0, "428": 1, "432": 0, "436": 0, "437": 0, "438": 0, "449": 0, "453": 0, "465": 29, "475": 0, "476": 0, "477": 0, "478": 0, "479": 0, "480": 0, "481": 0, "482": 0, "484": 0, "491": 5, "492": 0, "493": 5, "500": 0, "501": 0, "502": 0, "509": 0, "510": 0, "511": 0, "512": 0, "513": 0, "520": 0, "527": 0, "537": 1, "538": 1, "539": 1, "540": 1, "541": 1, "551": 0, "552": 0, "553": 0, "554": 0, "555": 0, "556": 0, "557": 0, "558": 0, "559": 0, "568": 65, "571": 0, "572": 0, "583": 0, "590": 0, "599": 0, "600": 0, "603": 0, "610": 0, "617": 119, "625": 0, "628": 0, "629": 0, "630": 0, "631": 0, "632": 0, "635": 0, "636": 0, "637": 0, "638": 0, "639": 0, "640": 0, "641": 0, "642": 0, "645": 0, "646": 0, "647": 0, "648": 0, "649": 0, "650": 0, "651": 0, "652": 0, "658": 0, "659": 0, "660": 0, "663": 0, "665": 0, "664": 0, "666": 0, "668": 0, "669": 0, "670": 0, "672": 0, "675": 0, "676": 0, "677": 0, "678": 0, "679": 0, "680": 0, "681": 0, "682": 0, "683": 0, "684": 0, "685": 0, "686": 0, "687": 0, "690": 19, "693": 19}}
+ git checkout 6efc35b4fe3009666e56a60af0675d7d532bf4ff
Note: switching to '6efc35b4fe3009666e56a60af0675d7d532bf4ff'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at 6efc35b4fe Optimized django.utils.text.capfirst().
+ git apply /root/pre_state.patch
error: unrecognized input
