{"instance_id": "django__django-13449", "repo": "django/django", "version": "3.2", "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d", "patch_list": ["diff --git a/dev/null b/tests/test_coverup_django__django-13449.py\nnew file mode 100644\nindex e69de29..824f74d 100644\n--- /dev/null\n+++ b/tests/test_coverup_django__django-13449.py\n@@ -0,0 +1,54 @@\n+from django.test import TestCase\n+from django.db import models, connection\n+from django.db.models import F, Window\n+from django.db.models.functions import Lag\n+from django.db.utils import OperationalError\n+\n+class LagTest(models.Model):\n+    modified = models.DateField()\n+    data = models.FloatField()\n+    amount = models.DecimalField(decimal_places=4, max_digits=7)\n+\n+    class Meta:\n+        app_label = 'test_app'\n+\n+class LagTestCase(TestCase):\n+    databases = {'default'}\n+\n+    @classmethod\n+    def setUpTestData(cls):\n+        # Create the table manually since migrations are not applied\n+        with connection.cursor() as cursor:\n+            cursor.execute('PRAGMA foreign_keys = OFF;')\n+            cursor.execute('''\n+                CREATE TABLE test_app_lagtest (\n+                    id INTEGER PRIMARY KEY AUTOINCREMENT,\n+                    modified DATE NOT NULL,\n+                    data REAL NOT NULL,\n+                    amount NUMERIC NOT NULL\n+                );\n+            ''')\n+            cursor.execute('PRAGMA foreign_keys = ON;')\n+\n+        # Create test data\n+        LagTest.objects.create(modified='2021-01-01', data=1.0, amount=1.2345)\n+        LagTest.objects.create(modified='2021-01-02', data=2.0, amount=2.3456)\n+        LagTest.objects.create(modified='2020-01-01', data=3.0, amount=3.4567)\n+        LagTest.objects.create(modified='2020-01-01', data=4.0, amount=4.5678)\n+        LagTest.objects.create(modified='2020-01-02', data=5.0, amount=5.6789)\n+        LagTest.objects.create(modified='2020-01-03', data=6.0, amount=6.7890)\n+        LagTest.objects.create(modified='2020-01-04', data=7.0, amount=9.8765)\n+        LagTest.objects.create(modified='2020-01-05', data=8.0, amount=10.1234)\n+        LagTest.objects.create(modified='2020-01-06', data=9.0, amount=11.2345)\n+\n+    def test_lag_with_decimalfield_on_sqlite(self):\n+        \"\"\"\n+        Test that using Lag() with a DecimalField on SQLite does not raise an OperationalError.\n+        \"\"\"\n+        w = Window(expression=Lag('amount', 7), partition_by=[F('modified')], order_by=F('modified').asc())\n+        q = LagTest.objects.all().annotate(w=w)\n+        try:\n+            list(q)  # Force evaluation to trigger the error\n+        except OperationalError as e:\n+            # If an error is raised, the test should fail because the bug is present\n+            self.fail(f\"OperationalError raised: {e}\")\n"], "arch": "x86_64", "base_commit": "2a55431a5678af52f669ffe7dff3dd0bd21727f8", "test_directives": ["test_coverup_django__django-13449"], "coverage_files": ["django/db/models/expressions.py"], "env_name": "testbed", "run_id": "assertflip", "patch_id": "pred_pre__AssertFlip", "timeout": 1800, "rm_image": false, "force_rebuild": false, "exec_mode": "unit_test", "reproduction_script_name": null, "compute_coverage": true, "install": {"python": "3.6", "packages": "requirements.txt", "install": "python -m pip install -e .", "eval_commands": ["sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen && locale-gen", "export LANG=en_US.UTF-8", "export LANGUAGE=en_US:en", "export LC_ALL=en_US.UTF-8"]}, "cache_level": "instance", "test_command": "python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/db/models/expressions\\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-13449", "req_install_commands": ["conda create -n testbed python=3.6 -y", "cat <<'EOF_59812759871' > $HOME/requirements.txt\nasgiref >= 3.3.2\nargon2-cffi >= 16.1.0\nbackports.zoneinfo; python_version < '3.9'\nbcrypt\ndocutils\ngeoip2\njinja2 >= 2.9.2\nnumpy\nPillow >= 6.2.0\npylibmc; sys.platform != 'win32'\npymemcache >= 3.4.0\npython-memcached >= 1.59\npytz\npywatchman; sys.platform != 'win32'\nPyYAML\nselenium\nsqlparse >= 0.2.2\ntblib >= 1.5.0\ntzdata\ncolorama; sys.platform == 'win32'\n\nEOF_59812759871", "conda activate testbed && python -m pip install -r $HOME/requirements.txt", "rm $HOME/requirements.txt"]}