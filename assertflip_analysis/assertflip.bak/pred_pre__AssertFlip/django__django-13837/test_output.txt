+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD 415f50298f97fb17f841a9df38d995ccf347dfcc
+ sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen
+ locale-gen
Generating locales (this might take a while)...
  en_US.UTF-8... done
Generation complete.
+ export LANG=en_US.UTF-8
+ LANG=en_US.UTF-8
+ export LANGUAGE=en_US:en
+ LANGUAGE=en_US:en
+ export LC_ALL=en_US.UTF-8
+ LC_ALL=en_US.UTF-8
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
nothing to commit, working tree clean
+ git show
commit 415f50298f97fb17f841a9df38d995ccf347dfcc
Author: Alexander Lyabah <a.lyabah@checkio.org>
Date:   Sat Nov 28 18:08:27 2020 +0200

    Fixed #32231 -- Allowed passing None params to QuerySet.raw().

diff --git a/django/db/models/query.py b/django/db/models/query.py
index 9dc98c02d1..32fee78e9f 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -818,7 +818,7 @@ class QuerySet:
     # PUBLIC METHODS THAT RETURN A QUERYSET SUBCLASS #
     ##################################################
 
-    def raw(self, raw_query, params=None, translations=None, using=None):
+    def raw(self, raw_query, params=(), translations=None, using=None):
         if using is None:
             using = self.db
         qs = RawQuerySet(raw_query, model=self.model, params=params, translations=translations, using=using)
@@ -1419,14 +1419,14 @@ class RawQuerySet:
     Provide an iterator which converts the results of raw SQL queries into
     annotated model instances.
     """
-    def __init__(self, raw_query, model=None, query=None, params=None,
+    def __init__(self, raw_query, model=None, query=None, params=(),
                  translations=None, using=None, hints=None):
         self.raw_query = raw_query
         self.model = model
         self._db = using
         self._hints = hints or {}
         self.query = query or sql.RawQuery(sql=raw_query, using=self.db, params=params)
-        self.params = params or ()
+        self.params = params
         self.translations = translations or {}
         self._result_cache = None
         self._prefetch_related_lookups = ()
diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index 93cc32ac3c..a39430b28d 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -69,8 +69,8 @@ JoinInfo = namedtuple(
 class RawQuery:
     """A single raw SQL query."""
 
-    def __init__(self, sql, using, params=None):
-        self.params = params or ()
+    def __init__(self, sql, using, params=()):
+        self.params = params
         self.sql = sql
         self.using = using
         self.cursor = None
@@ -111,9 +111,13 @@ class RawQuery:
 
     @property
     def params_type(self):
+        if self.params is None:
+            return None
         return dict if isinstance(self.params, Mapping) else tuple
 
     def __str__(self):
+        if self.params_type is None:
+            return self.sql
         return self.sql % self.params_type(self.params)
 
     def _execute_query(self):
@@ -127,6 +131,8 @@ class RawQuery:
             params = tuple(adapter(val) for val in self.params)
         elif params_type is dict:
             params = {key: adapter(val) for key, val in self.params.items()}
+        elif params_type is None:
+            params = None
         else:
             raise RuntimeError("Unexpected params type: %s" % params_type)
 
diff --git a/docs/ref/models/querysets.txt b/docs/ref/models/querysets.txt
index 70a6989306..2c8c2e38fd 100644
--- a/docs/ref/models/querysets.txt
+++ b/docs/ref/models/querysets.txt
@@ -1843,7 +1843,7 @@ raised if ``select_for_update()`` is used in autocommit mode.
 ``raw()``
 ~~~~~~~~~
 
-.. method:: raw(raw_query, params=None, translations=None)
+.. method:: raw(raw_query, params=(), translations=None)
 
 Takes a raw SQL query, executes it, and returns a
 ``django.db.models.query.RawQuerySet`` instance. This ``RawQuerySet`` instance
@@ -1858,6 +1858,11 @@ See the :doc:`/topics/db/sql` for more information.
   filtering. As such, it should generally be called from the ``Manager`` or
   from a fresh ``QuerySet`` instance.
 
+.. versionchanged:: 3.2
+
+    The default value of the ``params`` argument was changed from ``None`` to
+    an empty tuple.
+
 Operators that return new ``QuerySet``\s
 ----------------------------------------
 
diff --git a/docs/topics/db/sql.txt b/docs/topics/db/sql.txt
index c7224c78b0..fe7b0a4bd8 100644
--- a/docs/topics/db/sql.txt
+++ b/docs/topics/db/sql.txt
@@ -43,7 +43,7 @@ Performing raw queries
 The ``raw()`` manager method can be used to perform raw SQL queries that
 return model instances:
 
-.. method:: Manager.raw(raw_query, params=None, translations=None)
+.. method:: Manager.raw(raw_query, params=(), translations=None)
 
 This method takes a raw SQL query, executes it, and returns a
 ``django.db.models.query.RawQuerySet`` instance. This ``RawQuerySet`` instance
@@ -99,6 +99,11 @@ make it very powerful.
     both rows will match. To prevent this, perform the correct typecasting
     before using the value in a query.
 
+.. versionchanged:: 3.2
+
+    The default value of the ``params`` argument was changed from ``None`` to
+    an empty tuple.
+
 Mapping query fields to model fields
 ------------------------------------
 
diff --git a/tests/raw_query/tests.py b/tests/raw_query/tests.py
index 17a5a68a8a..cf57cfd696 100644
--- a/tests/raw_query/tests.py
+++ b/tests/raw_query/tests.py
@@ -180,6 +180,11 @@ class RawQueryTests(TestCase):
         self.assertEqual(len(results), 1)
         self.assertIsInstance(repr(qset), str)
 
+    def test_params_none(self):
+        query = "SELECT * FROM raw_query_author WHERE first_name like 'J%'"
+        qset = Author.objects.raw(query, params=None)
+        self.assertEqual(len(qset), 2)
+
     def test_escaped_percent(self):
         query = "SELECT * FROM raw_query_author WHERE first_name like 'J%%'"
         qset = Author.objects.raw(query)
+ git diff 415f50298f97fb17f841a9df38d995ccf347dfcc
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
Requirement already satisfied: asgiref>=3.2.10 in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.2) (3.4.1)
Requirement already satisfied: pytz in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.2) (2025.2)
Requirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.2) (0.4.4)
Requirement already satisfied: typing-extensions in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from asgiref>=3.2.10->Django==3.2) (4.1.1)
Installing collected packages: Django
  Attempting uninstall: Django
    Found existing installation: Django 3.2
    Uninstalling Django-3.2:
      Successfully uninstalled Django-3.2
  Running setup.py develop for Django
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv
Successfully installed Django-3.2
+ git apply -v -
<stdin>:16: trailing whitespace.
        
Checking patch tests/test_coverup_django__django-13837.py...
Applied patch tests/test_coverup_django__django-13837.py cleanly.
warning: 1 line adds whitespace errors.
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/utils/autoreload\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-13837
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(django/utils/autoreload\\.py)']
0.09 autoreload.py(1): import functools
0.09 autoreload.py(2): import itertools
0.09 autoreload.py(3): import logging
0.09 autoreload.py(4): import os
0.09 autoreload.py(5): import signal
0.09 autoreload.py(6): import subprocess
0.09 autoreload.py(7): import sys
0.09 autoreload.py(8): import threading
0.09 autoreload.py(9): import time
0.09 autoreload.py(10): import traceback
0.09 autoreload.py(11): import weakref
0.09 autoreload.py(12): from collections import defaultdict
0.09 autoreload.py(13): from pathlib import Path
0.09 autoreload.py(14): from types import ModuleType
0.09 autoreload.py(15): from zipimport import zipimporter
0.09 autoreload.py(17): import django
0.09 autoreload.py(18): from django.apps import apps
0.09 autoreload.py(19): from django.core.signals import request_finished
0.09 autoreload.py(20): from django.dispatch import Signal
0.09 autoreload.py(21): from django.utils.functional import cached_property
0.09 autoreload.py(22): from django.utils.version import get_version_tuple
0.09 autoreload.py(24): autoreload_started = Signal()
0.09 autoreload.py(25): file_changed = Signal()
0.09 autoreload.py(27): DJANGO_AUTORELOAD_ENV = 'RUN_MAIN'
0.09 autoreload.py(29): logger = logging.getLogger('django.utils.autoreload')
0.09 autoreload.py(34): _error_files = []
0.09 autoreload.py(35): _exception = None
0.09 autoreload.py(37): try:
0.09 autoreload.py(38):     import termios
0.09 autoreload.py(43): try:
0.09 autoreload.py(44):     import pywatchman
0.09 autoreload.py(49): def is_django_module(module):
0.09 autoreload.py(54): def is_django_path(path):
0.09 autoreload.py(59): def check_errors(fn):
0.09 autoreload.py(84): def raise_last_exception():
0.09 autoreload.py(90): def ensure_echo_on():
0.09 autoreload.py(109): def iter_all_python_module_files():
0.09 autoreload.py(119): @functools.lru_cache(maxsize=1)
0.09 autoreload.py(165): @functools.lru_cache(maxsize=1)
0.09 autoreload.py(196): def sys_path_directories():
0.09 autoreload.py(213): def get_child_arguments():
0.09 autoreload.py(249): def trigger_reload(filename):
0.09 autoreload.py(254): def restart_with_reloader():
0.09 autoreload.py(263): class BaseReloader:
0.09 autoreload.py(263): class BaseReloader:
0.09 autoreload.py(264):     def __init__(self):
0.09 autoreload.py(269):     def watch_dir(self, path, glob):
0.09 autoreload.py(283):     def watched_files(self, include_globs=True):
0.09 autoreload.py(295):     def wait_for_apps_ready(self, app_reg, django_main_thread):
0.09 autoreload.py(313):     def run(self, django_main_thread):
0.09 autoreload.py(330):     def run_loop(self):
0.09 autoreload.py(339):     def tick(self):
0.09 autoreload.py(349):     @classmethod
0.09 autoreload.py(353):     def notify_file_changed(self, path):
0.09 autoreload.py(360):     @property
0.09 autoreload.py(364):     def stop(self):
0.09 autoreload.py(368): class StatReloader(BaseReloader):
0.09 autoreload.py(368): class StatReloader(BaseReloader):
0.09 autoreload.py(369):     SLEEP_TIME = 1  # Check for changes once per second.
0.09 autoreload.py(371):     def tick(self):
0.09 autoreload.py(387):     def snapshot_files(self):
0.09 autoreload.py(401):     @classmethod
0.09 autoreload.py(406): class WatchmanUnavailable(RuntimeError):
0.09 autoreload.py(406): class WatchmanUnavailable(RuntimeError):
0.09 autoreload.py(407):     pass
0.09 autoreload.py(410): class WatchmanReloader(BaseReloader):
0.09 autoreload.py(410): class WatchmanReloader(BaseReloader):
0.09 autoreload.py(411):     def __init__(self):
0.09 autoreload.py(417):     @cached_property
0.09 autoreload.py(421):     def _watch_root(self, root):
0.09 autoreload.py(442):     @functools.lru_cache()
0.09 autoreload.py(446):     def _subscribe(self, directory, name, expression):
0.09 autoreload.py(466):     def _subscribe_dir(self, directory, filenames):
0.09 autoreload.py(480):     def _watch_glob(self, directory, patterns):
0.09 autoreload.py(503):     def watched_roots(self, watched_files):
0.09 autoreload.py(509):     def _update_watches(self):
0.09 autoreload.py(525):     def update_watches(self):
0.09 autoreload.py(533):     def _check_subscription(self, sub):
0.09 autoreload.py(548):     def request_processed(self, **kwargs):
0.09 autoreload.py(552):     def tick(self):
0.09 autoreload.py(573):     def stop(self):
0.09 autoreload.py(577):     def check_server_status(self, inner_ex=None):
0.09 autoreload.py(585):     @classmethod
0.09 autoreload.py(603): def get_reloader():
0.09 autoreload.py(612): def start_django(reloader, main_func, *args, **kwargs):
0.09 autoreload.py(631): def run_with_reloader(main_func, *args, **kwargs):
Testing against Django installed in '/testbed/django'
Skipping setup of unused database(s): default, other.
System check identified no issues (0 silenced).
test_get_child_arguments_with_other_package (test_coverup_django__django-13837.GetChildArgumentsTest) ... FAIL

======================================================================
FAIL: test_get_child_arguments_with_other_package (test_coverup_django__django-13837.GetChildArgumentsTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "./tests/test_coverup_django__django-13837.py", line 22, in test_get_child_arguments_with_other_package
    self.assertIn('-m some_other_package', args)  # This should be the correct behavior once the bug is fixed
AssertionError: '-m some_other_package' not found in ['/opt/miniconda3/envs/testbed/bin/python3', '-m', 'django', 'runserver']

----------------------------------------------------------------------
Ran 1 test in 0.001s

FAILED (failures=1)
0.64 autoreload.py(219):     import django.__main__
0.64 autoreload.py(220):     django_main_path = Path(django.__main__.__file__)
0.64 autoreload.py(221):     py_script = Path(sys.argv[0])
0.64 autoreload.py(223):     args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions]
0.64 autoreload.py(223):     args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions]
0.64 autoreload.py(224):     if py_script == django_main_path:
0.64 autoreload.py(226):         args += ['-m', 'django']
0.64 autoreload.py(227):         args += sys.argv[1:]
0.64 autoreload.py(246):     return args
+ cat coverage.cover
{"/testbed/django/utils/autoreload.py": {"1": 1, "2": 1, "3": 1, "4": 1, "5": 1, "6": 1, "7": 1, "8": 1, "9": 1, "10": 1, "11": 1, "12": 1, "13": 1, "14": 1, "15": 1, "17": 1, "18": 1, "19": 1, "20": 1, "21": 1, "22": 1, "24": 1, "25": 1, "27": 1, "29": 1, "34": 1, "35": 1, "37": 1, "38": 1, "39": 0, "40": 0, "43": 1, "44": 1, "45": 0, "46": 0, "49": 1, "54": 1, "59": 1, "84": 1, "90": 1, "109": 1, "119": 1, "165": 1, "196": 1, "213": 1, "249": 1, "254": 1, "263": 2, "368": 2, "406": 2, "410": 2, "603": 1, "612": 1, "631": 1, "51": 0, "56": 0, "60": 0, "81": 0, "63": 0, "64": 0, "65": 0, "66": 0, "68": 0, "70": 0, "72": 0, "74": 0, "76": 0, "77": 0, "79": 0, "86": 0, "87": 0, "95": 0, "96": 0, "97": 0, "98": 0, "99": 0, "100": 0, "101": 0, "103": 0, "104": 0, "105": 0, "106": 0, "114": 0, "115": 0, "116": 0, "122": 0, "123": 0, "127": 0, "128": 0, "129": 0, "134": 0, "135": 0, "136": 0, "137": 0, "138": 0, "139": 0, "142": 0, "143": 0, "144": 0, "146": 0, "147": 0, "148": 0, "149": 0, "150": 0, "151": 0, "152": 0, "155": 0, "156": 0, "158": 0, "159": 0, "160": 0, "161": 0, "162": 0, "176": 0, "177": 0, "178": 0, "179": 0, "181": 0, "182": 0, "184": 0, "187": 0, "193": 0, "188": 0, "189": 0, "190": 0, "191": 0, "201": 0, "202": 0, "203": 0, "204": 0, "205": 0, "207": 0, "208": 0, "210": 0, "219": 1, "220": 1, "221": 1, "223": 2, "224": 1, "226": 1, "227": 1, "228": 0, "231": 0, "232": 0, "236": 0, "237": 0, "238": 0, "242": 0, "243": 0, "245": 0, "246": 1, "250": 0, "251": 0, "255": 0, "256": 0, "257": 0, "258": 0, "259": 0, "260": 0, "264": 1, "269": 1, "283": 1, "295": 1, "313": 1, "330": 1, "339": 1, "349": 1, "353": 1, "360": 1, "364": 1, "265": 0, "266": 0, "267": 0, "270": 0, "271": 0, "272": 0, "273": 0, "274": 0, "275": 0, "276": 0, "277": 0, "279": 0, "280": 0, "281": 0, "288": 0, "289": 0, "290": 0, "291": 0, "292": 0, "293": 0, "306": 0, "307": 0, "308": 0, "310": 0, "311": 0, "314": 0, "315": 0, "316": 0, "320": 0, "321": 0, "322": 0, "325": 0, "326": 0, "327": 0, "328": 0, "331": 0, "332": 0, "333": 0, "334": 0, "335": 0, "336": 0, "337": 0, "347": 0, "351": 0, "354": 0, "355": 0, "356": 0, "357": 0, "362": 0, "365": 0, "369": 1, "371": 1, "387": 1, "401": 1, "372": 0, "373": 0, "374": 0, "375": 0, "376": 0, "377": 0, "378": 0, "379": 0, "380": 0, "381": 0, "382": 0, "384": 0, "385": 0, "389": 0, "390": 0, "391": 0, "392": 0, "393": 0, "394": 0, "395": 0, "397": 0, "398": 0, "399": 0, "403": 0, "407": 1, "411": 1, "417": 1, "421": 1, "442": 1, "446": 1, "466": 1, "480": 1, "503": 1, "509": 1, "525": 1, "533": 1, "548": 1, "552": 1, "573": 1, "577": 1, "585": 1, "412": 0, "413": 0, "414": 0, "415": 0, "419": 0, "431": 0, "432": 0, "433": 0, "434": 0, "435": 0, "436": 0, "437": 0, "438": 0, "439": 0, "440": 0, "444": 0, "447": 0, "451": 0, "452": 0, "453": 0, "456": 0, "457": 0, "458": 0, "459": 0, "461": 0, "462": 0, "463": 0, "464": 0, "467": 0, "468": 0, "469": 0, "470": 0, "471": 0, "472": 0, "473": 0, "474": 0, "476": 0, "477": 0, "478": 0, "489": 0, "490": 0, "491": 0, "492": 0, "493": 0, "494": 0, "495": 0, "496": 0, "498": 0, "499": 0, "500": 0, "501": 0, "504": 0, "505": 0, "506": 0, "507": 0, "510": 0, "511": 0, "512": 0, "513": 0, "515": 0, "516": 0, "517": 0, "518": 0, "520": 0, "521": 0, "523": 0, "526": 0, "527": 0, "528": 0, "530": 0, "531": 0, "534": 0, "535": 0, "536": 0, "537": 0, "538": 0, "543": 0, "544": 0, "545": 0, "546": 0, "549": 0, "550": 0, "553": 0, "554": 0, "555": 0, "556": 0, "557": 0, "558": 0, "559": 0, "560": 0, "561": 0, "562": 0, "563": 0, "564": 0, "565": 0, "567": 0, "568": 0, "569": 0, "571": 0, "574": 0, "575": 0, "579": 0, "580": 0, "581": 0, "582": 0, "583": 0, "587": 0, "588": 0, "589": 0, "590": 0, "591": 0, "592": 0, "594": 0, "595": 0, "598": 0, "599": 0, "600": 0, "605": 0, "606": 0, "607": 0, "608": 0, "609": 0, "613": 0, "615": 0, "616": 0, "617": 0, "618": 0, "620": 0, "621": 0, "622": 0, "623": 0, "626": 0, "627": 0, "628": 0, "632": 0, "633": 0, "634": 0, "635": 0, "636": 0, "637": 0, "639": 0, "640": 0, "641": 0, "642": 0}}
+ git checkout 415f50298f97fb17f841a9df38d995ccf347dfcc
Note: switching to '415f50298f97fb17f841a9df38d995ccf347dfcc'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at 415f50298f Fixed #32231 -- Allowed passing None params to QuerySet.raw().
+ git apply /root/pre_state.patch
error: unrecognized input
