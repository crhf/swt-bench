{"instance_id": "sympy__sympy-22456", "repo": "sympy/sympy", "version": "1.10", "environment_setup_commit": "fd40404e72921b9e52a5f9582246e4a6cd96c431", "patch_list": ["diff --git a/dev/null b/sympy/polys/tests/test_coverup_sympy__sympy-22456.py\nnew file mode 100644\nindex e69de29..3df4c2e 100644\n--- /dev/null\n+++ b/sympy/polys/tests/test_coverup_sympy__sympy-22456.py\n@@ -0,0 +1,15 @@\n+from sympy.codegen.ast import String\n+\n+def test_string_argument_invariance_bug():\n+    # Create a String instance with a sample string\n+    original_string = String('example')\n+\n+    # Extract the args from the String instance\n+    args = original_string.args\n+\n+    # Attempt to reconstruct the String object using expr.func and expr.args\n+    # This should hold true when the bug is fixed\n+    reconstructed_string = original_string.func(*args)\n+\n+    # Check if the reconstructed string is equal to the original string\n+    assert reconstructed_string == original_string, \"Reconstructed string does not match the original\"\n"], "arch": "x86_64", "base_commit": "a3475b3f9ac662cd425157dd3bdb93ad7111c090", "test_directives": ["sympy/polys/tests/test_coverup_sympy__sympy-22456.py"], "coverage_files": ["sympy/codegen/ast.py"], "env_name": "testbed", "run_id": "assertflip", "patch_id": "pred_pre__AssertFlip", "timeout": 1800, "rm_image": false, "force_rebuild": false, "exec_mode": "unit_test", "reproduction_script_name": null, "compute_coverage": true, "install": {"python": "3.9", "packages": "mpmath flake8", "pip_packages": ["mpmath==1.3.0", "flake8-comprehensions"], "install": "python -m pip install -e ."}, "cache_level": "instance", "test_command": "PYTHONWARNINGS='ignore::UserWarning,ignore::SyntaxWarning' python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(sympy/codegen/ast\\.py)' bin/test -C --verbose sympy/polys/tests/test_coverup_sympy__sympy-22456.p", "req_install_commands": ["conda create -n testbed python=3.9 mpmath flake8 -y"]}