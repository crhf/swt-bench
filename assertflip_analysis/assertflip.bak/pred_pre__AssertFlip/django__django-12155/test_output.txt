+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD e8fcdaad5c428878d0a5d6ba820d957013f75595
+ sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen
+ locale-gen
Generating locales (this might take a while)...
  en_US.UTF-8... done
Generation complete.
+ export LANG=en_US.UTF-8
+ LANG=en_US.UTF-8
+ export LANGUAGE=en_US:en
+ LANGUAGE=en_US:en
+ export LC_ALL=en_US.UTF-8
+ LC_ALL=en_US.UTF-8
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
nothing to commit, working tree clean
+ git show
commit e8fcdaad5c428878d0a5d6ba820d957013f75595
Author: Mariusz Felisiak <felisiak.mariusz@gmail.com>
Date:   Thu Nov 28 11:46:08 2019 +0100

    Fixed #31021 -- Fixed proxy model permissions data migration crash with a multiple databases setup.
    
    Regression in 98296f86b340c8c9c968375d59f1d3a3479e60c2.

diff --git a/django/contrib/auth/migrations/0011_update_proxy_permissions.py b/django/contrib/auth/migrations/0011_update_proxy_permissions.py
index c3f617f438..7409ea1254 100644
--- a/django/contrib/auth/migrations/0011_update_proxy_permissions.py
+++ b/django/contrib/auth/migrations/0011_update_proxy_permissions.py
@@ -23,6 +23,7 @@ def update_proxy_model_permissions(apps, schema_editor, reverse=False):
     style = color_style()
     Permission = apps.get_model('auth', 'Permission')
     ContentType = apps.get_model('contenttypes', 'ContentType')
+    alias = schema_editor.connection.alias
     for Model in apps.get_models():
         opts = Model._meta
         if not opts.proxy:
@@ -34,13 +35,14 @@ def update_proxy_model_permissions(apps, schema_editor, reverse=False):
         permissions_query = Q(codename__in=proxy_default_permissions_codenames)
         for codename, name in opts.permissions:
             permissions_query = permissions_query | Q(codename=codename, name=name)
-        concrete_content_type = ContentType.objects.get_for_model(Model, for_concrete_model=True)
-        proxy_content_type = ContentType.objects.get_for_model(Model, for_concrete_model=False)
+        content_type_manager = ContentType.objects.db_manager(alias)
+        concrete_content_type = content_type_manager.get_for_model(Model, for_concrete_model=True)
+        proxy_content_type = content_type_manager.get_for_model(Model, for_concrete_model=False)
         old_content_type = proxy_content_type if reverse else concrete_content_type
         new_content_type = concrete_content_type if reverse else proxy_content_type
         try:
-            with transaction.atomic():
-                Permission.objects.filter(
+            with transaction.atomic(using=alias):
+                Permission.objects.using(alias).filter(
                     permissions_query,
                     content_type=old_content_type,
                 ).update(content_type=new_content_type)
diff --git a/docs/releases/2.2.8.txt b/docs/releases/2.2.8.txt
index e9bd1ed1cb..4d8f9869c5 100644
--- a/docs/releases/2.2.8.txt
+++ b/docs/releases/2.2.8.txt
@@ -13,3 +13,7 @@ Bugfixes
 * Fixed a data loss possibility in the admin changelist view when a custom
   :ref:`formset's prefix <formset-prefix>` contains regular expression special
   characters, e.g. `'$'` (:ticket:`31031`).
+
+* Fixed a regression in Django 2.2.1 that caused a crash when migrating
+  permissions for proxy models with a multiple database setup if the
+  ``default`` entry was empty (:ticket:`31021`).
diff --git a/tests/auth_tests/test_migrations.py b/tests/auth_tests/test_migrations.py
index 98c5b5964a..a91b9a9146 100644
--- a/tests/auth_tests/test_migrations.py
+++ b/tests/auth_tests/test_migrations.py
@@ -3,7 +3,8 @@ from importlib import import_module
 from django.apps import apps
 from django.contrib.auth.models import Permission, User
 from django.contrib.contenttypes.models import ContentType
-from django.test import TestCase
+from django.db import connection, connections
+from django.test import TransactionTestCase
 from django.test.utils import captured_stdout
 
 from .models import Proxy, UserProxy
@@ -11,7 +12,7 @@ from .models import Proxy, UserProxy
 update_proxy_permissions = import_module('django.contrib.auth.migrations.0011_update_proxy_permissions')
 
 
-class ProxyModelWithDifferentAppLabelTests(TestCase):
+class ProxyModelWithDifferentAppLabelTests(TransactionTestCase):
     available_apps = [
         'auth_tests',
         'django.contrib.auth',
@@ -41,7 +42,8 @@ class ProxyModelWithDifferentAppLabelTests(TestCase):
         proxy_model_content_type = ContentType.objects.get_for_model(UserProxy, for_concrete_model=False)
         self.assertEqual(self.default_permission.content_type, self.concrete_content_type)
         self.assertEqual(self.custom_permission.content_type, self.concrete_content_type)
-        update_proxy_permissions.update_proxy_model_permissions(apps, None)
+        with connection.schema_editor() as editor:
+            update_proxy_permissions.update_proxy_model_permissions(apps, editor)
         self.default_permission.refresh_from_db()
         self.assertEqual(self.default_permission.content_type, proxy_model_content_type)
         self.custom_permission.refresh_from_db()
@@ -54,7 +56,8 @@ class ProxyModelWithDifferentAppLabelTests(TestCase):
         for permission in [self.default_permission, self.custom_permission]:
             self.assertTrue(user.has_perm('auth.' + permission.codename))
             self.assertFalse(user.has_perm('auth_tests.' + permission.codename))
-        update_proxy_permissions.update_proxy_model_permissions(apps, None)
+        with connection.schema_editor() as editor:
+            update_proxy_permissions.update_proxy_model_permissions(apps, editor)
         # Reload user to purge the _perm_cache.
         user = User._default_manager.get(pk=user.pk)
         for permission in [self.default_permission, self.custom_permission]:
@@ -62,8 +65,9 @@ class ProxyModelWithDifferentAppLabelTests(TestCase):
             self.assertTrue(user.has_perm('auth_tests.' + permission.codename))
 
     def test_migrate_backwards(self):
-        update_proxy_permissions.update_proxy_model_permissions(apps, None)
-        update_proxy_permissions.revert_proxy_model_permissions(apps, None)
+        with connection.schema_editor() as editor:
+            update_proxy_permissions.update_proxy_model_permissions(apps, editor)
+            update_proxy_permissions.revert_proxy_model_permissions(apps, editor)
         self.default_permission.refresh_from_db()
         self.assertEqual(self.default_permission.content_type, self.concrete_content_type)
         self.custom_permission.refresh_from_db()
@@ -76,8 +80,9 @@ class ProxyModelWithDifferentAppLabelTests(TestCase):
         for permission in [self.default_permission, self.custom_permission]:
             self.assertTrue(user.has_perm('auth.' + permission.codename))
             self.assertFalse(user.has_perm('auth_tests.' + permission.codename))
-        update_proxy_permissions.update_proxy_model_permissions(apps, None)
-        update_proxy_permissions.revert_proxy_model_permissions(apps, None)
+        with connection.schema_editor() as editor:
+            update_proxy_permissions.update_proxy_model_permissions(apps, editor)
+            update_proxy_permissions.revert_proxy_model_permissions(apps, editor)
         # Reload user to purge the _perm_cache.
         user = User._default_manager.get(pk=user.pk)
         for permission in [self.default_permission, self.custom_permission]:
@@ -85,7 +90,7 @@ class ProxyModelWithDifferentAppLabelTests(TestCase):
             self.assertFalse(user.has_perm('auth_tests.' + permission.codename))
 
 
-class ProxyModelWithSameAppLabelTests(TestCase):
+class ProxyModelWithSameAppLabelTests(TransactionTestCase):
     available_apps = [
         'auth_tests',
         'django.contrib.auth',
@@ -115,7 +120,8 @@ class ProxyModelWithSameAppLabelTests(TestCase):
         proxy_model_content_type = ContentType.objects.get_for_model(Proxy, for_concrete_model=False)
         self.assertEqual(self.default_permission.content_type, self.concrete_content_type)
         self.assertEqual(self.custom_permission.content_type, self.concrete_content_type)
-        update_proxy_permissions.update_proxy_model_permissions(apps, None)
+        with connection.schema_editor() as editor:
+            update_proxy_permissions.update_proxy_model_permissions(apps, editor)
         self.default_permission.refresh_from_db()
         self.custom_permission.refresh_from_db()
         self.assertEqual(self.default_permission.content_type, proxy_model_content_type)
@@ -127,15 +133,17 @@ class ProxyModelWithSameAppLabelTests(TestCase):
         user.user_permissions.add(self.custom_permission)
         for permission in [self.default_permission, self.custom_permission]:
             self.assertTrue(user.has_perm('auth_tests.' + permission.codename))
-        update_proxy_permissions.update_proxy_model_permissions(apps, None)
+        with connection.schema_editor() as editor:
+            update_proxy_permissions.update_proxy_model_permissions(apps, editor)
         # Reload user to purge the _perm_cache.
         user = User._default_manager.get(pk=user.pk)
         for permission in [self.default_permission, self.custom_permission]:
             self.assertTrue(user.has_perm('auth_tests.' + permission.codename))
 
     def test_migrate_backwards(self):
-        update_proxy_permissions.update_proxy_model_permissions(apps, None)
-        update_proxy_permissions.revert_proxy_model_permissions(apps, None)
+        with connection.schema_editor() as editor:
+            update_proxy_permissions.update_proxy_model_permissions(apps, editor)
+            update_proxy_permissions.revert_proxy_model_permissions(apps, editor)
         self.default_permission.refresh_from_db()
         self.assertEqual(self.default_permission.content_type, self.concrete_content_type)
         self.custom_permission.refresh_from_db()
@@ -147,8 +155,9 @@ class ProxyModelWithSameAppLabelTests(TestCase):
         user.user_permissions.add(self.custom_permission)
         for permission in [self.default_permission, self.custom_permission]:
             self.assertTrue(user.has_perm('auth_tests.' + permission.codename))
-        update_proxy_permissions.update_proxy_model_permissions(apps, None)
-        update_proxy_permissions.revert_proxy_model_permissions(apps, None)
+        with connection.schema_editor() as editor:
+            update_proxy_permissions.update_proxy_model_permissions(apps, editor)
+            update_proxy_permissions.revert_proxy_model_permissions(apps, editor)
         # Reload user to purge the _perm_cache.
         user = User._default_manager.get(pk=user.pk)
         for permission in [self.default_permission, self.custom_permission]:
@@ -175,5 +184,36 @@ class ProxyModelWithSameAppLabelTests(TestCase):
             name='May display proxys information',
         )
         with captured_stdout() as stdout:
-            update_proxy_permissions.update_proxy_model_permissions(apps, None)
+            with connection.schema_editor() as editor:
+                update_proxy_permissions.update_proxy_model_permissions(apps, editor)
         self.assertIn('A problem arose migrating proxy model permissions', stdout.getvalue())
+
+
+class MultiDBProxyModelAppLabelTests(TransactionTestCase):
+    databases = {'default', 'other'}
+    available_apps = [
+        'auth_tests',
+        'django.contrib.auth',
+        'django.contrib.contenttypes',
+    ]
+
+    def setUp(self):
+        ContentType.objects.all().delete()
+        Permission.objects.using('other').delete()
+        concrete_content_type = ContentType.objects.db_manager(
+            'other'
+        ).get_for_model(Proxy)
+        self.permission = Permission.objects.using('other').create(
+            content_type=concrete_content_type,
+            codename='add_proxy',
+            name='Can add proxy',
+        )
+
+    def test_migrate_other_database(self):
+        proxy_model_content_type = ContentType.objects.db_manager(
+            'other'
+        ).get_for_model(Proxy, for_concrete_model=False)
+        with connections['other'].schema_editor() as editor:
+            update_proxy_permissions.update_proxy_model_permissions(apps, editor)
+        self.permission.refresh_from_db()
+        self.assertEqual(self.permission.content_type, proxy_model_content_type)
+ git diff e8fcdaad5c428878d0a5d6ba820d957013f75595
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
Requirement already satisfied: asgiref>=3.2 in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.1) (3.4.1)
Requirement already satisfied: pytz in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.1) (2025.2)
Requirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.1) (0.4.4)
Requirement already satisfied: typing-extensions in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from asgiref>=3.2->Django==3.1) (4.1.1)
Installing collected packages: Django
  Attempting uninstall: Django
    Found existing installation: Django 3.1
    Uninstalling Django-3.1:
      Successfully uninstalled Django-3.1
  Running setup.py develop for Django
Successfully installed Django-3.1
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv
+ git apply -v -
<stdin>:25: trailing whitespace.
        
Checking patch tests/test_coverup_django__django-12155.py...
Applied patch tests/test_coverup_django__django-12155.py cleanly.
warning: 1 line adds whitespace errors.
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/contrib/admindocs/utils\.py|django/contrib/admindocs/views\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-12155
test_trim_docstring_with_non_empty_first_line (test_coverup_django__django-12155.TrimDocstringTest) ... FAIL

======================================================================
FAIL: test_trim_docstring_with_non_empty_first_line (test_coverup_django__django-12155.TrimDocstringTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "./tests/test_coverup_django__django-12155.py", line 21, in test_trim_docstring_with_non_empty_first_line
    self.assertEqual(output, expected_output)
AssertionError: 'This is a test docstring.\n        It has multiple lines.' != 'This is a test docstring.\nIt has multiple lines.'
  This is a test docstring.
-         It has multiple lines.? --------
+ It has multiple lines.

----------------------------------------------------------------------
Ran 1 test in 0.041s

FAILED (failures=1)
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(django/contrib/admindocs/utils\\.py|django/contrib/admindocs/views\\.py)']
Testing against Django installed in '/testbed/django'
Skipping setup of unused database(s): default, other.
System check identified no issues (0 silenced).
0.71 utils.py(1): "Misc. utility functions/classes for admin documentation generator."
0.71 utils.py(3): import re
0.71 utils.py(4): from email.errors import HeaderParseError
0.71 utils.py(5): from email.parser import HeaderParser
0.71 utils.py(7): from django.urls import reverse
0.71 utils.py(8): from django.utils.regex_helper import _lazy_re_compile
0.71 utils.py(9): from django.utils.safestring import mark_safe
0.71 utils.py(11): try:
0.71 utils.py(12):     import docutils.core
0.73 utils.py(13):     import docutils.nodes
0.73 utils.py(14):     import docutils.parsers.rst.roles
0.75 utils.py(18):     docutils_is_available = True
0.75 utils.py(21): def get_view_name(view_func):
0.75 utils.py(27): def trim_docstring(docstring):
0.75 utils.py(42): def parse_docstring(docstring):
0.75 utils.py(68): def parse_rst(text, default_reference_context, thing_being_parsed=None):
0.75 utils.py(102):     'model': '%s/models/%s/',
0.75 utils.py(103):     'view': '%s/views/%s/',
0.75 utils.py(104):     'template': '%s/templates/%s/',
0.75 utils.py(105):     'filter': '%s/filters/#%s',
0.75 utils.py(106):     'tag': '%s/tags/#%s',
0.75 utils.py(110): def create_reference_role(rolename, urlbase):
0.75 utils.py(127): def default_reference_role(name, rawtext, text, lineno, inliner, options=None, content=None):
0.75 utils.py(143): if docutils_is_available:
0.75 utils.py(144):     docutils.parsers.rst.roles.register_canonical_role('cmsreference', default_reference_role)
0.75 utils.py(146):     for name, urlbase in ROLES.items():
0.75 utils.py(147):         create_reference_role(name, urlbase)
0.75 utils.py(111):     def _role(name, rawtext, text, lineno, inliner, options=None, content=None):
0.75 utils.py(124):     docutils.parsers.rst.roles.register_canonical_role(rolename, _role)
0.75 utils.py(146):     for name, urlbase in ROLES.items():
0.75 utils.py(147):         create_reference_role(name, urlbase)
0.75 utils.py(111):     def _role(name, rawtext, text, lineno, inliner, options=None, content=None):
0.75 utils.py(124):     docutils.parsers.rst.roles.register_canonical_role(rolename, _role)
0.75 utils.py(146):     for name, urlbase in ROLES.items():
0.75 utils.py(147):         create_reference_role(name, urlbase)
0.75 utils.py(111):     def _role(name, rawtext, text, lineno, inliner, options=None, content=None):
0.75 utils.py(124):     docutils.parsers.rst.roles.register_canonical_role(rolename, _role)
0.75 utils.py(146):     for name, urlbase in ROLES.items():
0.75 utils.py(147):         create_reference_role(name, urlbase)
0.75 utils.py(111):     def _role(name, rawtext, text, lineno, inliner, options=None, content=None):
0.75 utils.py(124):     docutils.parsers.rst.roles.register_canonical_role(rolename, _role)
0.75 utils.py(146):     for name, urlbase in ROLES.items():
0.75 utils.py(147):         create_reference_role(name, urlbase)
0.75 utils.py(111):     def _role(name, rawtext, text, lineno, inliner, options=None, content=None):
0.75 utils.py(124):     docutils.parsers.rst.roles.register_canonical_role(rolename, _role)
0.75 utils.py(146):     for name, urlbase in ROLES.items():
0.75 utils.py(150): named_group_matcher = _lazy_re_compile(r'\(\?P(<\w+>)')
0.75 utils.py(151): unnamed_group_matcher = _lazy_re_compile(r'\(')
0.75 utils.py(154): def replace_named_groups(pattern):
0.75 utils.py(192): def replace_unnamed_groups(pattern):
0.75 utils.py(33):     if not docstring or not docstring.strip():
0.75 utils.py(36):     lines = docstring.expandtabs().splitlines()
0.75 utils.py(37):     indent = min(len(line) - len(line.lstrip()) for line in lines if line.lstrip())
0.75 utils.py(37):     indent = min(len(line) - len(line.lstrip()) for line in lines if line.lstrip())
0.75 utils.py(37):     indent = min(len(line) - len(line.lstrip()) for line in lines if line.lstrip())
0.75 utils.py(37):     indent = min(len(line) - len(line.lstrip()) for line in lines if line.lstrip())
0.75 utils.py(37):     indent = min(len(line) - len(line.lstrip()) for line in lines if line.lstrip())
0.75 utils.py(38):     trimmed = [lines[0].lstrip()] + [line[indent:].rstrip() for line in lines[1:]]
0.75 utils.py(38):     trimmed = [lines[0].lstrip()] + [line[indent:].rstrip() for line in lines[1:]]
0.75 utils.py(38):     trimmed = [lines[0].lstrip()] + [line[indent:].rstrip() for line in lines[1:]]
0.75 utils.py(38):     trimmed = [lines[0].lstrip()] + [line[indent:].rstrip() for line in lines[1:]]
0.75 utils.py(39):     return "\n".join(trimmed).strip()
+ cat coverage.cover
{"/testbed/django/contrib/admindocs/utils.py": {"3": 1, "4": 1, "5": 1, "7": 1, "8": 1, "9": 1, "11": 1, "12": 1, "13": 1, "14": 1, "15": 0, "16": 0, "18": 1, "21": 1, "27": 1, "42": 1, "68": 1, "102": 1, "103": 1, "104": 1, "105": 1, "106": 1, "110": 1, "127": 1, "143": 1, "144": 1, "146": 6, "147": 5, "150": 1, "151": 1, "154": 1, "192": 1, "22": 0, "23": 0, "24": 0, "33": 1, "34": 0, "36": 1, "37": 5, "38": 4, "39": 1, "46": 0, "47": 0, "48": 0, "49": 0, "50": 0, "51": 0, "53": 0, "54": 0, "55": 0, "56": 0, "57": 0, "58": 0, "60": 0, "61": 0, "62": 0, "64": 0, "65": 0, "73": 0, "74": 0, "75": 0, "76": 0, "77": 0, "78": 0, "80": 0, "89": 0, "90": 0, "91": 0, "92": 0, "93": 0, "95": 0, "111": 5, "124": 5, "112": 0, "113": 0, "114": 0, "115": 0, "116": 0, "117": 0, "118": 0, "119": 0, "121": 0, "123": 0, "128": 0, "129": 0, "130": 0, "131": 0, "132": 0, "133": 0, "134": 0, "135": 0, "136": 0, "138": 0, "140": 0, "163": 0, "164": 0, "167": 0, "169": 0, "171": 0, "172": 0, "175": 0, "176": 0, "177": 0, "178": 0, "179": 0, "182": 0, "183": 0, "184": 0, "187": 0, "188": 0, "189": 0, "200": 0, "202": 0, "204": 0, "206": 0, "207": 0, "210": 0, "211": 0, "212": 0, "213": 0, "214": 0, "216": 0, "217": 0, "218": 0, "220": 0, "221": 0, "222": 0, "223": 0, "224": 0, "225": 0, "227": 0, "231": 0, "232": 0, "233": 0, "234": 0, "235": 0, "236": 0, "237": 0, "238": 0, "240": 0}}
+ git checkout e8fcdaad5c428878d0a5d6ba820d957013f75595
Note: switching to 'e8fcdaad5c428878d0a5d6ba820d957013f75595'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at e8fcdaad5c Fixed #31021 -- Fixed proxy model permissions data migration crash with a multiple databases setup.
+ git apply /root/pre_state.patch
error: unrecognized input
