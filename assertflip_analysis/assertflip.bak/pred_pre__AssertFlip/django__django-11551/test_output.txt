+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD 7991111af12056ec9a856f35935d273526338c1f
+ sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen
+ locale-gen
Generating locales (this might take a while)...
  en_US.UTF-8... done
Generation complete.
+ export LANG=en_US.UTF-8
+ LANG=en_US.UTF-8
+ export LANGUAGE=en_US:en
+ LANGUAGE=en_US:en
+ export LC_ALL=en_US.UTF-8
+ LC_ALL=en_US.UTF-8
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
nothing to commit, working tree clean
+ git show
commit 7991111af12056ec9a856f35935d273526338c1f
Author: Mariusz Felisiak <felisiak.mariusz@gmail.com>
Date:   Wed Jul 10 10:33:36 2019 +0200

    Fixed #30621 -- Fixed crash of __contains lookup for Date/DateTimeRangeField when the right hand side is the same type.
    
    Thanks Tilman Koschnick for the report and initial patch.
    Thanks Carlton Gibson the review.
    
    Regression in 6b048b364ca1e0e56a0d3815bf2be33ac9998355.

diff --git a/django/contrib/postgres/fields/ranges.py b/django/contrib/postgres/fields/ranges.py
index 74ba4eb230..0e8a347d5f 100644
--- a/django/contrib/postgres/fields/ranges.py
+++ b/django/contrib/postgres/fields/ranges.py
@@ -170,7 +170,12 @@ class DateTimeRangeContains(models.Lookup):
         params = lhs_params + rhs_params
         # Cast the rhs if needed.
         cast_sql = ''
-        if isinstance(self.rhs, models.Expression) and self.rhs._output_field_or_none:
+        if (
+            isinstance(self.rhs, models.Expression) and
+            self.rhs._output_field_or_none and
+            # Skip cast if rhs has a matching range type.
+            not isinstance(self.rhs._output_field_or_none, self.lhs.output_field.__class__)
+        ):
             cast_internal_type = self.lhs.output_field.base_field.get_internal_type()
             cast_sql = '::{}'.format(connection.data_types.get(cast_internal_type))
         return '%s @> %s%s' % (lhs, rhs, cast_sql), params
diff --git a/docs/releases/2.2.4.txt b/docs/releases/2.2.4.txt
index a1a849680d..0ad92f4ab1 100644
--- a/docs/releases/2.2.4.txt
+++ b/docs/releases/2.2.4.txt
@@ -12,3 +12,9 @@ Bugfixes
 * Fixed a regression in Django 2.2 when ordering a ``QuerySet.union()``,
   ``intersection()``, or ``difference()`` by a field type present more than
   once results in the wrong ordering being used (:ticket:`30628`).
+
+* Fixed a migration crash on PostgreSQL when adding a check constraint
+  with a ``contains`` lookup on
+  :class:`~django.contrib.postgres.fields.DateRangeField` or
+  :class:`~django.contrib.postgres.fields.DateTimeRangeField`, if the right
+  hand side of an expression is the same type (:ticket:`30621`).
diff --git a/tests/postgres_tests/migrations/0002_create_test_models.py b/tests/postgres_tests/migrations/0002_create_test_models.py
index dc941de139..b9f9cee6bf 100644
--- a/tests/postgres_tests/migrations/0002_create_test_models.py
+++ b/tests/postgres_tests/migrations/0002_create_test_models.py
@@ -211,7 +211,9 @@ class Migration(migrations.Migration):
                 ('bigints', BigIntegerRangeField(null=True, blank=True)),
                 ('decimals', DecimalRangeField(null=True, blank=True)),
                 ('timestamps', DateTimeRangeField(null=True, blank=True)),
+                ('timestamps_inner', DateTimeRangeField(null=True, blank=True)),
                 ('dates', DateRangeField(null=True, blank=True)),
+                ('dates_inner', DateRangeField(null=True, blank=True)),
             ],
             options={
                 'required_db_vendor': 'postgresql'
diff --git a/tests/postgres_tests/models.py b/tests/postgres_tests/models.py
index 2bb6e6fcdf..3d170a9a1a 100644
--- a/tests/postgres_tests/models.py
+++ b/tests/postgres_tests/models.py
@@ -135,7 +135,9 @@ class RangesModel(PostgreSQLModel):
     bigints = BigIntegerRangeField(blank=True, null=True)
     decimals = DecimalRangeField(blank=True, null=True)
     timestamps = DateTimeRangeField(blank=True, null=True)
+    timestamps_inner = DateTimeRangeField(blank=True, null=True)
     dates = DateRangeField(blank=True, null=True)
+    dates_inner = DateRangeField(blank=True, null=True)
 
 
 class RangeLookupsModel(PostgreSQLModel):
diff --git a/tests/postgres_tests/test_constraints.py b/tests/postgres_tests/test_constraints.py
index 0e09a1c546..2fc6ee5322 100644
--- a/tests/postgres_tests/test_constraints.py
+++ b/tests/postgres_tests/test_constraints.py
@@ -1,5 +1,7 @@
+import datetime
+
 from django.db import connection, transaction
-from django.db.models import Q
+from django.db.models import F, Q
 from django.db.models.constraints import CheckConstraint
 from django.db.utils import IntegrityError
 
@@ -33,3 +35,51 @@ class SchemaTests(PostgreSQLTestCase):
         with self.assertRaises(IntegrityError), transaction.atomic():
             RangesModel.objects.create(ints=(20, 50))
         RangesModel.objects.create(ints=(10, 30))
+
+    def test_check_constraint_daterange_contains(self):
+        constraint_name = 'dates_contains'
+        self.assertNotIn(constraint_name, self.get_constraints(RangesModel._meta.db_table))
+        constraint = CheckConstraint(
+            check=Q(dates__contains=F('dates_inner')),
+            name=constraint_name,
+        )
+        with connection.schema_editor() as editor:
+            editor.add_constraint(RangesModel, constraint)
+        with connection.cursor() as cursor:
+            constraints = connection.introspection.get_constraints(cursor, RangesModel._meta.db_table)
+        self.assertIn(constraint_name, constraints)
+        date_1 = datetime.date(2016, 1, 1)
+        date_2 = datetime.date(2016, 1, 4)
+        with self.assertRaises(IntegrityError), transaction.atomic():
+            RangesModel.objects.create(
+                dates=(date_1, date_2),
+                dates_inner=(date_1, date_2.replace(day=5)),
+            )
+        RangesModel.objects.create(
+            dates=(date_1, date_2),
+            dates_inner=(date_1, date_2),
+        )
+
+    def test_check_constraint_datetimerange_contains(self):
+        constraint_name = 'timestamps_contains'
+        self.assertNotIn(constraint_name, self.get_constraints(RangesModel._meta.db_table))
+        constraint = CheckConstraint(
+            check=Q(timestamps__contains=F('timestamps_inner')),
+            name=constraint_name,
+        )
+        with connection.schema_editor() as editor:
+            editor.add_constraint(RangesModel, constraint)
+        with connection.cursor() as cursor:
+            constraints = connection.introspection.get_constraints(cursor, RangesModel._meta.db_table)
+        self.assertIn(constraint_name, constraints)
+        datetime_1 = datetime.datetime(2016, 1, 1)
+        datetime_2 = datetime.datetime(2016, 1, 2, 12)
+        with self.assertRaises(IntegrityError), transaction.atomic():
+            RangesModel.objects.create(
+                timestamps=(datetime_1, datetime_2),
+                timestamps_inner=(datetime_1, datetime_2.replace(hour=13)),
+            )
+        RangesModel.objects.create(
+            timestamps=(datetime_1, datetime_2),
+            timestamps_inner=(datetime_1, datetime_2),
+        )
diff --git a/tests/postgres_tests/test_ranges.py b/tests/postgres_tests/test_ranges.py
index ae834b6ff0..89f32ee77c 100644
--- a/tests/postgres_tests/test_ranges.py
+++ b/tests/postgres_tests/test_ranges.py
@@ -115,11 +115,15 @@ class TestRangeContainsLookup(PostgreSQLTestCase):
         ]
         cls.obj = RangesModel.objects.create(
             dates=(cls.dates[0], cls.dates[3]),
+            dates_inner=(cls.dates[1], cls.dates[2]),
             timestamps=(cls.timestamps[0], cls.timestamps[3]),
+            timestamps_inner=(cls.timestamps[1], cls.timestamps[2]),
         )
         cls.aware_obj = RangesModel.objects.create(
             dates=(cls.dates[0], cls.dates[3]),
+            dates_inner=(cls.dates[1], cls.dates[2]),
             timestamps=(cls.aware_timestamps[0], cls.aware_timestamps[3]),
+            timestamps_inner=(cls.timestamps[1], cls.timestamps[2]),
         )
         # Objects that don't match any queries.
         for i in range(3, 4):
@@ -140,6 +144,7 @@ class TestRangeContainsLookup(PostgreSQLTestCase):
             (self.aware_timestamps[1], self.aware_timestamps[2]),
             Value(self.dates[0], output_field=DateTimeField()),
             Func(F('dates'), function='lower', output_field=DateTimeField()),
+            F('timestamps_inner'),
         )
         for filter_arg in filter_args:
             with self.subTest(filter_arg=filter_arg):
@@ -154,6 +159,7 @@ class TestRangeContainsLookup(PostgreSQLTestCase):
             (self.dates[1], self.dates[2]),
             Value(self.dates[0], output_field=DateField()),
             Func(F('timestamps'), function='lower', output_field=DateField()),
+            F('dates_inner'),
         )
         for filter_arg in filter_args:
             with self.subTest(filter_arg=filter_arg):
@@ -361,7 +367,9 @@ class TestSerialization(PostgreSQLSimpleTestCase):
         '\\"bounds\\": \\"[)\\"}", "decimals": "{\\"empty\\": true}", '
         '"bigints": null, "timestamps": "{\\"upper\\": \\"2014-02-02T12:12:12+00:00\\", '
         '\\"lower\\": \\"2014-01-01T00:00:00+00:00\\", \\"bounds\\": \\"[)\\"}", '
-        '"dates": "{\\"upper\\": \\"2014-02-02\\", \\"lower\\": \\"2014-01-01\\", \\"bounds\\": \\"[)\\"}" }, '
+        '"timestamps_inner": null, '
+        '"dates": "{\\"upper\\": \\"2014-02-02\\", \\"lower\\": \\"2014-01-01\\", \\"bounds\\": \\"[)\\"}", '
+        '"dates_inner": null }, '
         '"model": "postgres_tests.rangesmodel", "pk": null}]'
     )
 
+ git diff 7991111af12056ec9a856f35935d273526338c1f
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
Requirement already satisfied: pytz in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.0.dev20190710083336) (2025.2)
Requirement already satisfied: sqlparse in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.0.dev20190710083336) (0.4.4)
Requirement already satisfied: asgiref in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.0.dev20190710083336) (3.4.1)
Requirement already satisfied: typing-extensions in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from asgiref->Django==3.0.dev20190710083336) (4.1.1)
Installing collected packages: Django
  Attempting uninstall: Django
    Found existing installation: Django 3.0.dev20190710083336
    Uninstalling Django-3.0.dev20190710083336:
      Successfully uninstalled Django-3.0.dev20190710083336
  Running setup.py develop for Django
Successfully installed Django-3.0.dev20190710083336
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv
+ git apply -v -
Checking patch tests/test_coverup_django__django-11551.py...
Applied patch tests/test_coverup_django__django-11551.py cleanly.
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/contrib/admin/checks\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-11551
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(django/contrib/admin/checks\\.py)']
Testing against Django installed in '/testbed/django'
0.54 checks.py(1): from itertools import chain
0.54 checks.py(3): from django.apps import apps
0.54 checks.py(4): from django.conf import settings
0.54 checks.py(5): from django.contrib.admin.utils import (
0.54 checks.py(8): from django.core import checks
0.54 checks.py(9): from django.core.exceptions import FieldDoesNotExist
0.54 checks.py(10): from django.db import models
0.54 checks.py(11): from django.db.models.constants import LOOKUP_SEP
0.54 checks.py(12): from django.db.models.expressions import Combinable, F, OrderBy
0.54 checks.py(13): from django.forms.models import (
0.54 checks.py(16): from django.template import engines
0.54 checks.py(17): from django.template.backends.django import DjangoTemplates
0.54 checks.py(18): from django.utils.module_loading import import_string
0.54 checks.py(21): def _issubclass(cls, classinfo):
0.54 checks.py(32): def _contains_subclass(class_path, candidate_paths):
0.54 checks.py(49): def check_admin_app(app_configs, **kwargs):
0.54 checks.py(57): def check_dependencies(**kwargs):
0.54 checks.py(129): class BaseModelAdminChecks:
0.54 checks.py(129): class BaseModelAdminChecks:
0.54 checks.py(131):     def check(self, admin_obj, **kwargs):
0.54 checks.py(148):     def _check_autocomplete_fields(self, obj):
0.54 checks.py(160):     def _check_autocomplete_fields_item(self, obj, field_name, label):
0.54 checks.py(203):     def _check_raw_id_fields(self, obj):
0.54 checks.py(215):     def _check_raw_id_fields_item(self, obj, field_name, label):
0.54 checks.py(230):     def _check_fields(self, obj):
0.54 checks.py(262):     def _check_fieldsets(self, obj):
0.54 checks.py(277):     def _check_fieldsets_item(self, obj, fieldset, label, seen_fields):
0.54 checks.py(312):     def _check_field_spec(self, obj, fields, label):
0.54 checks.py(325):     def _check_field_spec_item(self, obj, field_name, label):
0.54 checks.py(353):     def _check_exclude(self, obj):
0.54 checks.py(371):     def _check_form(self, obj):
0.54 checks.py(379):     def _check_filter_vertical(self, obj):
0.54 checks.py(389):     def _check_filter_horizontal(self, obj):
0.54 checks.py(399):     def _check_filter_item(self, obj, field_name, label):
0.54 checks.py(413):     def _check_radio_fields(self, obj):
0.54 checks.py(424):     def _check_radio_fields_key(self, obj, field_name, label):
0.54 checks.py(447):     def _check_radio_fields_value(self, obj, val, label):
0.54 checks.py(463):     def _check_view_on_site_url(self, obj):
0.54 checks.py(475):     def _check_prepopulated_fields(self, obj):
0.54 checks.py(487):     def _check_prepopulated_fields_key(self, obj, field_name, label):
0.54 checks.py(509):     def _check_prepopulated_fields_value(self, obj, val, label):
0.54 checks.py(521):     def _check_prepopulated_fields_value_item(self, obj, field_name, label):
0.54 checks.py(532):     def _check_ordering(self, obj):
0.54 checks.py(546):     def _check_ordering_item(self, obj, field_name, label):
0.54 checks.py(583):     def _check_readonly_fields(self, obj):
0.54 checks.py(596):     def _check_readonly_fields_item(self, obj, field_name, label):
0.54 checks.py(620): class ModelAdminChecks(BaseModelAdminChecks):
0.54 checks.py(620): class ModelAdminChecks(BaseModelAdminChecks):
0.54 checks.py(622):     def check(self, admin_obj, **kwargs):
0.54 checks.py(641):     def _check_save_as(self, obj):
0.54 checks.py(650):     def _check_save_on_top(self, obj):
0.54 checks.py(659):     def _check_inlines(self, obj):
0.54 checks.py(670):     def _check_inlines_item(self, obj, inline, label):
0.54 checks.py(706):     def _check_list_display(self, obj):
0.54 checks.py(718):     def _check_list_display_item(self, obj, item, label):
0.54 checks.py(751):     def _check_list_display_links(self, obj):
0.54 checks.py(768):     def _check_list_display_links_item(self, obj, field_name, label):
0.54 checks.py(782):     def _check_list_filter(self, obj):
0.54 checks.py(791):     def _check_list_filter_item(self, obj, item, label):
0.54 checks.py(843):     def _check_list_select_related(self, obj):
0.54 checks.py(851):     def _check_list_per_page(self, obj):
0.54 checks.py(859):     def _check_list_max_show_all(self, obj):
0.54 checks.py(867):     def _check_list_editable(self, obj):
0.54 checks.py(879):     def _check_list_editable_item(self, obj, field_name, label):
0.54 checks.py(929):     def _check_search_fields(self, obj):
0.54 checks.py(937):     def _check_date_hierarchy(self, obj):
0.54 checks.py(960):     def _check_action_permission_methods(self, obj):
0.54 checks.py(986):     def _check_actions_uniqueness(self, obj):
0.54 checks.py(999): class InlineModelAdminChecks(BaseModelAdminChecks):
0.54 checks.py(999): class InlineModelAdminChecks(BaseModelAdminChecks):
0.54 checks.py(1001):     def check(self, inline_obj, **kwargs):
0.54 checks.py(1013):     def _check_exclude_of_parent_model(self, obj, parent_model):
0.54 checks.py(1042):     def _check_relation(self, obj, parent_model):
0.54 checks.py(1050):     def _check_extra(self, obj):
0.54 checks.py(1058):     def _check_max_num(self, obj):
0.54 checks.py(1068):     def _check_min_num(self, obj):
0.54 checks.py(1078):     def _check_formset(self, obj):
0.54 checks.py(1087): def must_be(type, option, obj, id):
0.54 checks.py(1097): def must_inherit_from(parent, option, obj, id):
0.54 checks.py(1107): def refer_to_missing_field(field, option, obj, id):
Skipping setup of unused database(s): default, other.
0.62 checks.py(61):     if not apps.is_installed('django.contrib.admin'):
0.62 checks.py(63):     errors = []
0.62 checks.py(67):         ('django.contrib.messages', 406),
0.62 checks.py(69):     for app_name, error_code in app_dependencies:
0.62 checks.py(70):         if not apps.is_installed(app_name):
0.62 checks.py(69):     for app_name, error_code in app_dependencies:
0.62 checks.py(70):         if not apps.is_installed(app_name):
0.62 checks.py(69):     for app_name, error_code in app_dependencies:
0.62 checks.py(70):         if not apps.is_installed(app_name):
0.62 checks.py(69):     for app_name, error_code in app_dependencies:
0.62 checks.py(76):     for engine in engines.all():
0.63 checks.py(77):         if isinstance(engine, DjangoTemplates):
0.63 checks.py(78):             django_templates_instance = engine.engine
0.63 checks.py(79):             break
0.63 checks.py(82):     if not django_templates_instance:
0.63 checks.py(90):         if ('django.contrib.auth.context_processors.auth'
0.63 checks.py(91):                 not in django_templates_instance.context_processors and
0.63 checks.py(99):         if ('django.contrib.messages.context_processors.messages'
0.63 checks.py(100):                 not in django_templates_instance.context_processors):
0.63 checks.py(108):     if not _contains_subclass('django.contrib.auth.middleware.AuthenticationMiddleware', settings.MIDDLEWARE):
0.63 checks.py(37):     cls = import_string(class_path)
0.63 checks.py(38):     for path in candidate_paths:
0.63 checks.py(39):         try:
0.63 checks.py(40):             candidate_cls = import_string(path)
0.64 checks.py(44):         if _issubclass(candidate_cls, cls):
0.64 checks.py(26):     try:
0.64 checks.py(27):         return issubclass(cls, classinfo)
0.64 checks.py(38):     for path in candidate_paths:
0.64 checks.py(39):         try:
0.64 checks.py(40):             candidate_cls = import_string(path)
0.64 checks.py(44):         if _issubclass(candidate_cls, cls):
0.64 checks.py(26):     try:
0.64 checks.py(27):         return issubclass(cls, classinfo)
0.64 checks.py(38):     for path in candidate_paths:
0.64 checks.py(39):         try:
0.64 checks.py(40):             candidate_cls = import_string(path)
0.64 checks.py(44):         if _issubclass(candidate_cls, cls):
0.64 checks.py(26):     try:
0.64 checks.py(27):         return issubclass(cls, classinfo)
0.64 checks.py(38):     for path in candidate_paths:
0.64 checks.py(39):         try:
0.64 checks.py(40):             candidate_cls = import_string(path)
0.64 checks.py(44):         if _issubclass(candidate_cls, cls):
test_list_display_with_mock_position_field (test_coverup_django__django-11551.ThingAdminCheckTests) ... FAIL

======================================================================
FAIL: test_list_display_with_mock_position_field (test_coverup_django__django-11551.ThingAdminCheckTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "./tests/test_coverup_django__django-11551.py", line 36, in test_list_display_with_mock_position_field
    "admin.E108 error should be raised due to MockPositionField in list_display"
AssertionError: False is not true : admin.E108 error should be raised due to MockPositionField in list_display

----------------------------------------------------------------------
Ran 1 test in 0.007s

FAILED (failures=1)
0.64 checks.py(26):     try:
0.64 checks.py(27):         return issubclass(cls, classinfo)
0.64 checks.py(45):             return True
0.64 checks.py(114):     if not _contains_subclass('django.contrib.messages.middleware.MessageMiddleware', settings.MIDDLEWARE):
0.64 checks.py(37):     cls = import_string(class_path)
0.64 checks.py(38):     for path in candidate_paths:
0.64 checks.py(39):         try:
0.64 checks.py(40):             candidate_cls = import_string(path)
0.64 checks.py(44):         if _issubclass(candidate_cls, cls):
0.64 checks.py(26):     try:
0.64 checks.py(27):         return issubclass(cls, classinfo)
0.64 checks.py(38):     for path in candidate_paths:
0.64 checks.py(39):         try:
0.64 checks.py(40):             candidate_cls = import_string(path)
0.64 checks.py(44):         if _issubclass(candidate_cls, cls):
0.64 checks.py(26):     try:
0.64 checks.py(27):         return issubclass(cls, classinfo)
0.64 checks.py(38):     for path in candidate_paths:
0.64 checks.py(39):         try:
0.64 checks.py(40):             candidate_cls = import_string(path)
0.64 checks.py(44):         if _issubclass(candidate_cls, cls):
0.64 checks.py(26):     try:
0.64 checks.py(27):         return issubclass(cls, classinfo)
0.64 checks.py(38):     for path in candidate_paths:
0.64 checks.py(39):         try:
0.64 checks.py(40):             candidate_cls = import_string(path)
0.64 checks.py(44):         if _issubclass(candidate_cls, cls):
0.64 checks.py(26):     try:
0.64 checks.py(27):         return issubclass(cls, classinfo)
0.64 checks.py(38):     for path in candidate_paths:
0.64 checks.py(39):         try:
0.64 checks.py(40):             candidate_cls = import_string(path)
0.64 checks.py(44):         if _issubclass(candidate_cls, cls):
0.64 checks.py(26):     try:
0.64 checks.py(27):         return issubclass(cls, classinfo)
0.64 checks.py(45):             return True
0.64 checks.py(120):     if not _contains_subclass('django.contrib.sessions.middleware.SessionMiddleware', settings.MIDDLEWARE):
0.64 checks.py(37):     cls = import_string(class_path)
0.64 checks.py(38):     for path in candidate_paths:
0.64 checks.py(39):         try:
0.64 checks.py(40):             candidate_cls = import_string(path)
0.64 checks.py(44):         if _issubclass(candidate_cls, cls):
0.64 checks.py(26):     try:
0.64 checks.py(27):         return issubclass(cls, classinfo)
0.64 checks.py(45):             return True
0.64 checks.py(126):     return errors
0.64 checks.py(50):     from django.contrib.admin.sites import all_sites
0.64 checks.py(51):     errors = []
0.64 checks.py(52):     for site in all_sites:
0.64 checks.py(54):     return errors
System check identified no issues (0 silenced).
0.65 checks.py(61):     if not apps.is_installed('django.contrib.admin'):
0.65 checks.py(63):     errors = []
0.65 checks.py(67):         ('django.contrib.messages', 406),
0.65 checks.py(69):     for app_name, error_code in app_dependencies:
0.65 checks.py(70):         if not apps.is_installed(app_name):
0.65 checks.py(69):     for app_name, error_code in app_dependencies:
0.65 checks.py(70):         if not apps.is_installed(app_name):
0.65 checks.py(69):     for app_name, error_code in app_dependencies:
0.65 checks.py(70):         if not apps.is_installed(app_name):
0.65 checks.py(69):     for app_name, error_code in app_dependencies:
0.65 checks.py(76):     for engine in engines.all():
0.65 checks.py(77):         if isinstance(engine, DjangoTemplates):
0.66 checks.py(78):             django_templates_instance = engine.engine
0.66 checks.py(79):             break
0.66 checks.py(82):     if not django_templates_instance:
0.66 checks.py(90):         if ('django.contrib.auth.context_processors.auth'
0.66 checks.py(91):                 not in django_templates_instance.context_processors and
0.66 checks.py(99):         if ('django.contrib.messages.context_processors.messages'
0.66 checks.py(100):                 not in django_templates_instance.context_processors):
0.66 checks.py(108):     if not _contains_subclass('django.contrib.auth.middleware.AuthenticationMiddleware', settings.MIDDLEWARE):
0.66 checks.py(37):     cls = import_string(class_path)
0.66 checks.py(38):     for path in candidate_paths:
0.66 checks.py(39):         try:
0.66 checks.py(40):             candidate_cls = import_string(path)
0.66 checks.py(44):         if _issubclass(candidate_cls, cls):
0.66 checks.py(26):     try:
0.66 checks.py(27):         return issubclass(cls, classinfo)
0.66 checks.py(38):     for path in candidate_paths:
0.66 checks.py(39):         try:
0.66 checks.py(40):             candidate_cls = import_string(path)
0.66 checks.py(44):         if _issubclass(candidate_cls, cls):
0.66 checks.py(26):     try:
0.66 checks.py(27):         return issubclass(cls, classinfo)
0.66 checks.py(38):     for path in candidate_paths:
0.66 checks.py(39):         try:
0.66 checks.py(40):             candidate_cls = import_string(path)
0.66 checks.py(44):         if _issubclass(candidate_cls, cls):
0.66 checks.py(26):     try:
0.66 checks.py(27):         return issubclass(cls, classinfo)
0.66 checks.py(38):     for path in candidate_paths:
0.66 checks.py(39):         try:
0.66 checks.py(40):             candidate_cls = import_string(path)
0.66 checks.py(44):         if _issubclass(candidate_cls, cls):
0.66 checks.py(26):     try:
0.66 checks.py(27):         return issubclass(cls, classinfo)
0.66 checks.py(45):             return True
0.66 checks.py(114):     if not _contains_subclass('django.contrib.messages.middleware.MessageMiddleware', settings.MIDDLEWARE):
0.66 checks.py(37):     cls = import_string(class_path)
0.66 checks.py(38):     for path in candidate_paths:
0.66 checks.py(39):         try:
0.66 checks.py(40):             candidate_cls = import_string(path)
0.66 checks.py(44):         if _issubclass(candidate_cls, cls):
0.66 checks.py(26):     try:
0.66 checks.py(27):         return issubclass(cls, classinfo)
0.66 checks.py(38):     for path in candidate_paths:
0.66 checks.py(39):         try:
0.66 checks.py(40):             candidate_cls = import_string(path)
0.66 checks.py(44):         if _issubclass(candidate_cls, cls):
0.66 checks.py(26):     try:
0.66 checks.py(27):         return issubclass(cls, classinfo)
0.66 checks.py(38):     for path in candidate_paths:
0.66 checks.py(39):         try:
0.66 checks.py(40):             candidate_cls = import_string(path)
0.66 checks.py(44):         if _issubclass(candidate_cls, cls):
0.66 checks.py(26):     try:
0.66 checks.py(27):         return issubclass(cls, classinfo)
0.66 checks.py(38):     for path in candidate_paths:
0.66 checks.py(39):         try:
0.66 checks.py(40):             candidate_cls = import_string(path)
0.66 checks.py(44):         if _issubclass(candidate_cls, cls):
0.66 checks.py(26):     try:
0.66 checks.py(27):         return issubclass(cls, classinfo)
0.66 checks.py(38):     for path in candidate_paths:
0.66 checks.py(39):         try:
0.66 checks.py(40):             candidate_cls = import_string(path)
0.66 checks.py(44):         if _issubclass(candidate_cls, cls):
0.66 checks.py(26):     try:
0.66 checks.py(27):         return issubclass(cls, classinfo)
0.66 checks.py(45):             return True
0.66 checks.py(120):     if not _contains_subclass('django.contrib.sessions.middleware.SessionMiddleware', settings.MIDDLEWARE):
0.66 checks.py(37):     cls = import_string(class_path)
0.66 checks.py(38):     for path in candidate_paths:
0.66 checks.py(39):         try:
0.66 checks.py(40):             candidate_cls = import_string(path)
0.66 checks.py(44):         if _issubclass(candidate_cls, cls):
0.66 checks.py(26):     try:
0.66 checks.py(27):         return issubclass(cls, classinfo)
0.66 checks.py(45):             return True
0.66 checks.py(126):     return errors
0.66 checks.py(50):     from django.contrib.admin.sites import all_sites
0.66 checks.py(51):     errors = []
0.66 checks.py(52):     for site in all_sites:
0.66 checks.py(53):         errors.extend(site.check(app_configs))
0.66 checks.py(52):     for site in all_sites:
0.66 checks.py(54):     return errors
+ cat coverage.cover
{"/testbed/django/contrib/admin/checks.py": {"1": 1, "3": 1, "4": 1, "5": 1, "8": 1, "9": 1, "10": 1, "11": 1, "12": 1, "13": 1, "16": 1, "17": 1, "18": 1, "21": 1, "32": 1, "49": 1, "57": 1, "129": 2, "620": 2, "999": 2, "1087": 1, "1097": 1, "1107": 1, "26": 20, "27": 20, "28": 0, "29": 0, "37": 6, "38": 20, "39": 20, "40": 20, "41": 0, "43": 0, "44": 20, "45": 6, "46": 0, "50": 2, "51": 2, "52": 3, "53": 1, "54": 2, "61": 2, "62": 0, "63": 2, "67": 2, "69": 8, "70": 6, "71": 0, "72": 0, "73": 0, "74": 0, "76": 2, "77": 2, "78": 2, "79": 2, "81": 0, "82": 2, "83": 0, "84": 0, "87": 0, "90": 2, "91": 2, "92": 0, "93": 0, "94": 0, "97": 0, "99": 2, "100": 2, "101": 0, "102": 0, "105": 0, "108": 2, "109": 0, "110": 0, "112": 0, "114": 2, "115": 0, "116": 0, "118": 0, "120": 2, "121": 0, "122": 0, "124": 0, "126": 2, "131": 1, "148": 1, "160": 1, "203": 1, "215": 1, "230": 1, "262": 1, "277": 1, "312": 1, "325": 1, "353": 1, "371": 1, "379": 1, "389": 1, "399": 1, "413": 1, "424": 1, "447": 1, "463": 1, "475": 1, "487": 1, "509": 1, "521": 1, "532": 1, "546": 1, "583": 1, "596": 1, "133": 0, "134": 0, "135": 0, "136": 0, "137": 0, "138": 0, "139": 0, "140": 0, "141": 0, "142": 0, "143": 0, "144": 0, "145": 0, "152": 0, "153": 0, "155": 0, "156": 0, "157": 0, "166": 0, "167": 0, "168": 0, "169": 0, "171": 0, "172": 0, "173": 0, "174": 0, "176": 0, "177": 0, "179": 0, "180": 0, "182": 0, "183": 0, "185": 0, "186": 0, "189": 0, "191": 0, "192": 0, "194": 0, "195": 0, "197": 0, "198": 0, "201": 0, "207": 0, "208": 0, "210": 0, "211": 0, "212": 0, "220": 0, "221": 0, "222": 0, "223": 0, "225": 0, "226": 0, "228": 0, "235": 0, "236": 0, "237": 0, "238": 0, "239": 0, "241": 0, "242": 0, "243": 0, "244": 0, "247": 0, "248": 0, "250": 0, "251": 0, "252": 0, "253": 0, "257": 0, "258": 0, "259": 0, "266": 0, "267": 0, "268": 0, "269": 0, "271": 0, "272": 0, "273": 0, "274": 0, "281": 0, "282": 0, "283": 0, "284": 0, "285": 0, "286": 0, "287": 0, "289": 0, "290": 0, "291": 0, "292": 0, "295": 0, "296": 0, "298": 0, "299": 0, "301": 0, "302": 0, "303": 0, "304": 0, "307": 0, "308": 0, "309": 0, "317": 0, "318": 0, "319": 0, "320": 0, "323": 0, "326": 0, "330": 0, "332": 0, "333": 0, "334": 0, "337": 0, "339": 0, "340": 0, "342": 0, "343": 0, "345": 0, "346": 0, "347": 0, "351": 0, "356": 0, "357": 0, "358": 0, "359": 0, "360": 0, "362": 0, "363": 0, "364": 0, "365": 0, "369": 0, "373": 0, "374": 0, "375": 0, "377": 0, "381": 0, "382": 0, "384": 0, "385": 0, "386": 0, "391": 0, "392": 0, "394": 0, "395": 0, "396": 0, "403": 0, "404": 0, "405": 0, "406": 0, "408": 0, "409": 0, "411": 0, "415": 0, "416": 0, "418": 0, "419": 0, "421": 0, "428": 0, "429": 0, "430": 0, "431": 0, "433": 0, "435": 0, "436": 0, "438": 0, "440": 0, "441": 0, "445": 0, "450": 0, "452": 0, "454": 0, "455": 0, "456": 0, "457": 0, "461": 0, "464": 0, "466": 0, "467": 0, "468": 0, "469": 0, "473": 0, "478": 0, "479": 0, "481": 0, "482": 0, "484": 0, "492": 0, "493": 0, "494": 0, "495": 0, "497": 0, "499": 0, "500": 0, "501": 0, "502": 0, "503": 0, "507": 0, "513": 0, "514": 0, "516": 0, "517": 0, "518": 0, "525": 0, "526": 0, "527": 0, "528": 0, "530": 0, "536": 0, "537": 0, "538": 0, "539": 0, "541": 0, "542": 0, "543": 0, "548": 0, "549": 0, "550": 0, "551": 0, "552": 0, "554": 0, "555": 0, "557": 0, "558": 0, "560": 0, "561": 0, "562": 0, "565": 0, "566": 0, "567": 0, "570": 0, "572": 0, "573": 0, "574": 0, "575": 0, "576": 0, "577": 0, "578": 0, "579": 0, "581": 0, "586": 0, "587": 0, "588": 0, "589": 0, "591": 0, "592": 0, "593": 0, "597": 0, "598": 0, "599": 0, "600": 0, "601": 0, "602": 0, "604": 0, "605": 0, "606": 0, "608": 0, "609": 0, "610": 0, "612": 0, "613": 0, "617": 0, "622": 1, "641": 1, "650": 1, "659": 1, "670": 1, "706": 1, "718": 1, "751": 1, "768": 1, "782": 1, "791": 1, "843": 1, "851": 1, "859": 1, "867": 1, "879": 1, "929": 1, "937": 1, "960": 1, "986": 1, "624": 0, "625": 0, "626": 0, "627": 0, "628": 0, "629": 0, "630": 0, "631": 0, "632": 0, "633": 0, "634": 0, "635": 0, "636": 0, "637": 0, "638": 0, "644": 0, "645": 0, "646": 0, "648": 0, "653": 0, "654": 0, "655": 0, "657": 0, "662": 0, "663": 0, "665": 0, "666": 0, "667": 0, "672": 0, "673": 0, "674": 0, "676": 0, "677": 0, "678": 0, "679": 0, "683": 0, "685": 0, "687": 0, "688": 0, "689": 0, "690": 0, "693": 0, "695": 0, "696": 0, "697": 0, "698": 0, "701": 0, "702": 0, "704": 0, "710": 0, "711": 0, "713": 0, "714": 0, "715": 0, "719": 0, "720": 0, "721": 0, "722": 0, "723": 0, "724": 0, "725": 0, "726": 0, "727": 0, "729": 0, "731": 0, "732": 0, "733": 0, "734": 0, "737": 0, "740": 0, "741": 0, "743": 0, "744": 0, "746": 0, "747": 0, "754": 0, "756": 0, "757": 0, "758": 0, "759": 0, "761": 0, "762": 0, "763": 0, "764": 0, "766": 0, "769": 0, "771": 0, "772": 0, "773": 0, "775": 0, "776": 0, "780": 0, "783": 0, "784": 0, "786": 0, "787": 0, "788": 0, "800": 0, "802": 0, "804": 0, "805": 0, "806": 0, "808": 0, "810": 0, "811": 0, "812": 0, "813": 0, "817": 0, "818": 0, "820": 0, "821": 0, "822": 0, "824": 0, "827": 0, "830": 0, "831": 0, "832": 0, "834": 0, "835": 0, "836": 0, "837": 0, "841": 0, "846": 0, "847": 0, "849": 0, "854": 0, "855": 0, "857": 0, "862": 0, "863": 0, "865": 0, "871": 0, "872": 0, "874": 0, "875": 0, "876": 0, "880": 0, "881": 0, "882": 0, "883": 0, "885": 0, "887": 0, "888": 0, "889": 0, "890": 0, "891": 0, "894": 0, "896": 0, "897": 0, "898": 0, "899": 0, "904": 0, "905": 0, "907": 0, "908": 0, "910": 0, "912": 0, "913": 0, "916": 0, "918": 0, "919": 0, "920": 0, "922": 0, "923": 0, "927": 0, "932": 0, "933": 0, "935": 0, "940": 0, "941": 0, "943": 0, "944": 0, "945": 0, "947": 0, "948": 0, "949": 0, "950": 0, "951": 0, "955": 0, "956": 0, "958": 0, "965": 0, "966": 0, "967": 0, "968": 0, "969": 0, "970": 0, "971": 0, "972": 0, "973": 0, "974": 0, "975": 0, "976": 0, "977": 0, "978": 0, "980": 0, "981": 0, "984": 0, "988": 0, "989": 0, "990": 0, "991": 0, "992": 0, "993": 0, "994": 0, "996": 0, "1001": 1, "1013": 1, "1042": 1, "1050": 1, "1058": 1, "1068": 1, "1078": 1, "1002": 0, "1004": 0, "1005": 0, "1006": 0, "1007": 0, "1008": 0, "1009": 0, "1010": 0, "1016": 0, "1017": 0, "1018": 0, "1021": 0, "1022": 0, "1024": 0, "1025": 0, "1027": 0, "1028": 0, "1030": 0, "1031": 0, "1033": 0, "1035": 0, "1036": 0, "1040": 0, "1043": 0, "1044": 0, "1045": 0, "1046": 0, "1048": 0, "1053": 0, "1054": 0, "1056": 0, "1061": 0, "1062": 0, "1063": 0, "1064": 0, "1066": 0, "1071": 0, "1072": 0, "1073": 0, "1074": 0, "1076": 0, "1081": 0, "1082": 0, "1084": 0, "1089": 0, "1090": 0, "1091": 0, "1092": 0, "1099": 0, "1100": 0, "1101": 0, "1102": 0, "1109": 0, "1110": 0, "1111": 0, "1113": 0, "1114": 0}}
+ git checkout 7991111af12056ec9a856f35935d273526338c1f
Note: switching to '7991111af12056ec9a856f35935d273526338c1f'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at 7991111af1 Fixed #30621 -- Fixed crash of __contains lookup for Date/DateTimeRangeField when the right hand side is the same type.
+ git apply /root/pre_state.patch
error: unrecognized input
