{"instance_id": "psf__requests-1142", "repo": "psf/requests", "version": "1.1", "environment_setup_commit": "ba25184ed5f0bf9b876dea3cf4312fa35b539a7c", "patch_list": ["diff --git a/dev/null b/test_coverup_psf__requests-1142.py\nnew file mode 100644\nindex e69de29..4f41d71 100644\n--- /dev/null\n+++ b/test_coverup_psf__requests-1142.py\n@@ -0,0 +1,34 @@\n+import pytest\n+from requests import Session\n+from requests.models import Request, PreparedRequest\n+\n+def test_get_request_does_not_include_content_length_header(monkeypatch):\n+    # Mock the adapter's send method to capture the prepared request\n+    class MockAdapter:\n+        def send(self, request, **kwargs):\n+            # Assert that the 'Content-Length' header is NOT present, which is the correct behavior\n+            assert 'Content-Length' not in request.headers\n+            # Return a mock response object\n+            class MockResponse:\n+                status_code = 503  # Simulate the server returning a 503 error due to 'Content-Length'\n+                headers = request.headers\n+                cookies = {}\n+            return MockResponse()\n+\n+    # Mock the get_adapter method to return the mock adapter\n+    def mock_get_adapter(self, url):\n+        return MockAdapter()\n+\n+    # Use monkeypatch to replace the get_adapter method with the mock_get_adapter\n+    monkeypatch.setattr(Session, 'get_adapter', mock_get_adapter)\n+\n+    # Create a session and send a GET request\n+    session = Session()\n+    response = session.get('http://example.com')\n+\n+    # Assert that the response status code is 503, indicating the server rejected the request due to 'Content-Length'\n+    assert response.status_code == 503\n+\n+    # Assert that 'Content-Length' is NOT present in the headers, which is the correct behavior\n+    assert 'Content-Length' not in response.headers\n+\n"], "arch": "x86_64", "base_commit": "22623bd8c265b78b161542663ee980738441c307", "test_directives": ["test_coverup_psf__requests-1142.py"], "coverage_files": ["requests/models.py"], "env_name": "testbed", "run_id": "assertflip", "patch_id": "pred_pre__AssertFlip", "timeout": 1800, "rm_image": false, "force_rebuild": false, "exec_mode": "unit_test", "reproduction_script_name": null, "compute_coverage": true, "install": {"python": "3.9", "packages": "pytest", "install": "python -m pip install ."}, "cache_level": "instance", "test_command": "python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(requests/models\\.py)' -m pytest --no-header -rA  -p no:cacheprovider test_coverup_psf__requests-1142.py", "req_install_commands": ["conda create -n testbed python=3.9 pytest -y"]}