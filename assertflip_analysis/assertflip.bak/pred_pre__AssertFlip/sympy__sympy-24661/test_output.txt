+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD a36caf5c74fe654cedc488e8a8a05fad388f8406
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch master
nothing to commit, working tree clean
+ git show
commit a36caf5c74fe654cedc488e8a8a05fad388f8406
Merge: c5a22c578f 254869dd3a
Author: Oscar Benjamin <oscar.j.benjamin@gmail.com>
Date:   Sat Feb 4 15:02:28 2023 +0000

    Merge pull request #24572 from erdos4d/master
    
    Add Lenstra–Lenstra–Lovász (LLL) basis reduction algorithm

+ git diff a36caf5c74fe654cedc488e8a8a05fad388f8406
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Requirement already satisfied: mpmath>=0.19 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from sympy==1.12.dev0) (1.3.0)
Installing collected packages: sympy
  Attempting uninstall: sympy
    Found existing installation: sympy 1.12.dev0
    Uninstalling sympy-1.12.dev0:
      Successfully uninstalled sympy-1.12.dev0
  DEPRECATION: Legacy editable install of sympy==1.12.dev0 from file:///testbed (setup.py develop) is deprecated. pip 25.3 will enforce this behaviour change. A possible replacement is to add a pyproject.toml or enable --use-pep517, and use setuptools >= 64. If the resulting installation is not behaving as expected, try using --config-settings editable_mode=compat. Please consult the setuptools documentation for more information. Discussion can be found at https://github.com/pypa/pip/issues/11457
  Running setup.py develop for sympy
Successfully installed sympy
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git apply -v -
Checking patch sympy/polys/tests/test_coverup_sympy__sympy-24661.py...
Applied patch sympy/polys/tests/test_coverup_sympy__sympy-24661.py cleanly.
+ PYTHONWARNINGS=ignore::UserWarning,ignore::SyntaxWarning
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(sympy/parsing/sympy_parser\.py)' bin/test -C --verbose sympy/polys/tests/test_coverup_sympy__sympy-24661.p
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(sympy/parsing/sympy_parser\\.py)']
0.97 sympy_parser.py(1): """Transform a string with Python-like source code into SymPy expression. """
0.97 sympy_parser.py(3): from tokenize import (generate_tokens, untokenize, TokenError,
0.97 sympy_parser.py(6): from keyword import iskeyword
0.97 sympy_parser.py(8): import ast
0.97 sympy_parser.py(9): import unicodedata
0.97 sympy_parser.py(10): from io import StringIO
0.97 sympy_parser.py(11): import builtins
0.97 sympy_parser.py(12): import types
0.97 sympy_parser.py(13): from typing import Tuple as tTuple, Dict as tDict, Any, Callable, \
0.97 sympy_parser.py(16): from sympy.assumptions.ask import AssumptionKeys
0.97 sympy_parser.py(17): from sympy.core.basic import Basic
0.97 sympy_parser.py(18): from sympy.core import Symbol
0.97 sympy_parser.py(19): from sympy.core.function import Function
0.97 sympy_parser.py(20): from sympy.utilities.misc import func_name
0.97 sympy_parser.py(21): from sympy.functions.elementary.miscellaneous import Max, Min
0.97 sympy_parser.py(24): null = ''
0.97 sympy_parser.py(26): TOKEN = tTuple[int, str]
0.97 sympy_parser.py(27): DICT = tDict[str, Any]
0.97 sympy_parser.py(28): TRANS = Callable[[List[TOKEN], DICT, DICT], List[TOKEN]]
0.97 sympy_parser.py(30): def _token_splittable(token_name: str) -> bool:
0.97 sympy_parser.py(46): def _token_callable(token: TOKEN, local_dict: DICT, global_dict: DICT, nextToken=None):
0.97 sympy_parser.py(59): def _add_factorial_tokens(name: str, result: List[TOKEN]) -> List[TOKEN]:
0.97 sympy_parser.py(87): class ParenthesisGroup(List[TOKEN]):
0.97 sympy_parser.py(87): class ParenthesisGroup(List[TOKEN]):
0.97 sympy_parser.py(88):     """List of tokens representing an expression in parentheses."""
0.97 sympy_parser.py(89):     pass
0.97 sympy_parser.py(92): class AppliedFunction:
0.97 sympy_parser.py(92): class AppliedFunction:
0.97 sympy_parser.py(93):     """
0.97 sympy_parser.py(98):     def __init__(self, function: TOKEN, args: ParenthesisGroup, exponent=None):
0.97 sympy_parser.py(106):     def expand(self) -> List[TOKEN]:
0.97 sympy_parser.py(110):     def __getitem__(self, index):
0.97 sympy_parser.py(113):     def __repr__(self):
0.97 sympy_parser.py(118): def _flatten(result: List[tUnion[TOKEN, AppliedFunction]]):
0.97 sympy_parser.py(128): def _group_parentheses(recursor: TRANS):
0.97 sympy_parser.py(172): def _apply_functions(tokens: List[tUnion[TOKEN, ParenthesisGroup]], local_dict: DICT, global_dict: DICT):
0.97 sympy_parser.py(197): def _implicit_multiplication(tokens: List[tUnion[TOKEN, AppliedFunction]], local_dict: DICT, global_dict: DICT):
0.97 sympy_parser.py(262): def _implicit_application(tokens: List[tUnion[TOKEN, AppliedFunction]], local_dict: DICT, global_dict: DICT):
0.97 sympy_parser.py(313): def function_exponentiation(tokens: List[TOKEN], local_dict: DICT, global_dict: DICT):
0.97 sympy_parser.py(365): def split_symbols_custom(predicate: Callable[[str], bool]):
0.97 sympy_parser.py(452): split_symbols = split_symbols_custom(_token_splittable)
0.97 sympy_parser.py(387):     def _split_symbols(tokens: List[TOKEN], local_dict: DICT, global_dict: DICT):
0.97 sympy_parser.py(443):     return _split_symbols
0.97 sympy_parser.py(455): def implicit_multiplication(tokens: List[TOKEN], local_dict: DICT,
0.97 sympy_parser.py(456):                             global_dict: DICT) -> List[TOKEN]:
0.97 sympy_parser.py(455): def implicit_multiplication(tokens: List[TOKEN], local_dict: DICT,
0.97 sympy_parser.py(479): def implicit_application(tokens: List[TOKEN], local_dict: DICT,
0.97 sympy_parser.py(480):                          global_dict: DICT) -> List[TOKEN]:
0.97 sympy_parser.py(479): def implicit_application(tokens: List[TOKEN], local_dict: DICT,
0.97 sympy_parser.py(503): def implicit_multiplication_application(result: List[TOKEN], local_dict: DICT,
0.97 sympy_parser.py(504):                                         global_dict: DICT) -> List[TOKEN]:
0.97 sympy_parser.py(503): def implicit_multiplication_application(result: List[TOKEN], local_dict: DICT,
0.97 sympy_parser.py(534): def auto_symbol(tokens: List[TOKEN], local_dict: DICT, global_dict: DICT):
0.97 sympy_parser.py(585): def lambda_notation(tokens: List[TOKEN], local_dict: DICT, global_dict: DICT):
0.97 sympy_parser.py(625): def factorial_notation(tokens: List[TOKEN], local_dict: DICT, global_dict: DICT):
0.97 sympy_parser.py(649): def convert_xor(tokens: List[TOKEN], local_dict: DICT, global_dict: DICT):
0.97 sympy_parser.py(664): def repeated_decimals(tokens: List[TOKEN], local_dict: DICT, global_dict: DICT):
0.97 sympy_parser.py(755): def auto_number(tokens: List[TOKEN], local_dict: DICT, global_dict: DICT):
0.97 sympy_parser.py(789): def rationalize(tokens: List[TOKEN], local_dict: DICT, global_dict: DICT):
0.97 sympy_parser.py(808): def _transform_equals_sign(tokens: List[TOKEN], local_dict: DICT, global_dict: DICT):
0.97 sympy_parser.py(837): def convert_equals_signs(tokens: List[TOKEN], local_dict: DICT,
0.97 sympy_parser.py(838):                          global_dict: DICT) -> List[TOKEN]:
0.97 sympy_parser.py(837): def convert_equals_signs(tokens: List[TOKEN], local_dict: DICT,
0.97 sympy_parser.py(877):     = (lambda_notation, auto_symbol, repeated_decimals, auto_number,
0.97 sympy_parser.py(878):        factorial_notation)
0.97 sympy_parser.py(877):     = (lambda_notation, auto_symbol, repeated_decimals, auto_number,
0.97 sympy_parser.py(876): standard_transformations: tTuple[TRANS, ...] \
0.97 sympy_parser.py(881): def stringify_expr(s: str, local_dict: DICT, global_dict: DICT,
0.97 sympy_parser.py(882):         transformations: tTuple[TRANS, ...]) -> str:
0.97 sympy_parser.py(881): def stringify_expr(s: str, local_dict: DICT, global_dict: DICT,
0.97 sympy_parser.py(900): def eval_expr(code, local_dict: DICT, global_dict: DICT):
0.97 sympy_parser.py(911): def parse_expr(s: str, local_dict: Optional[DICT] = None,
0.97 sympy_parser.py(913):                    = standard_transformations,
0.97 sympy_parser.py(914):                global_dict: Optional[DICT] = None, evaluate=True):
0.97 sympy_parser.py(911): def parse_expr(s: str, local_dict: Optional[DICT] = None,
0.97 sympy_parser.py(912):                transformations: tUnion[tTuple[TRANS, ...], str] \
0.97 sympy_parser.py(914):                global_dict: Optional[DICT] = None, evaluate=True):
0.97 sympy_parser.py(911): def parse_expr(s: str, local_dict: Optional[DICT] = None,
0.97 sympy_parser.py(1090): def evaluateFalse(s: str):
0.97 sympy_parser.py(1102): class EvaluateFalseTransformer(ast.NodeTransformer):
0.97 sympy_parser.py(1102): class EvaluateFalseTransformer(ast.NodeTransformer):
0.97 sympy_parser.py(1104):         ast.Add: 'Add',
0.97 sympy_parser.py(1105):         ast.Mult: 'Mul',
0.97 sympy_parser.py(1106):         ast.Pow: 'Pow',
0.97 sympy_parser.py(1107):         ast.Sub: 'Add',
0.97 sympy_parser.py(1108):         ast.Div: 'Mul',
0.97 sympy_parser.py(1109):         ast.BitOr: 'Or',
0.97 sympy_parser.py(1110):         ast.BitAnd: 'And',
0.97 sympy_parser.py(1111):         ast.BitXor: 'Not',
0.97 sympy_parser.py(1103):     operators = {
0.97 sympy_parser.py(1113):     functions = (
0.97 sympy_parser.py(1122):     def flatten(self, args, func):
0.97 sympy_parser.py(1137):     def visit_BinOp(self, node):
0.97 sympy_parser.py(1189):     def visit_Call(self, node):
0.97 sympy_parser.py(1197): 0: lambda_notation,
0.97 sympy_parser.py(1198): 1: auto_symbol,
0.97 sympy_parser.py(1199): 2: repeated_decimals,
0.97 sympy_parser.py(1200): 3: auto_number,
0.97 sympy_parser.py(1201): 4: factorial_notation,
0.97 sympy_parser.py(1202): 5: implicit_multiplication_application,
0.97 sympy_parser.py(1203): 6: convert_xor,
0.97 sympy_parser.py(1204): 7: implicit_application,
0.97 sympy_parser.py(1205): 8: implicit_multiplication,
0.97 sympy_parser.py(1206): 9: convert_equals_signs,
0.97 sympy_parser.py(1207): 10: function_exponentiation,
0.97 sympy_parser.py(1208): 11: rationalize}
0.97 sympy_parser.py(1196): _transformation = {  # items can be added but never re-ordered
0.97 ['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(sympy/parsing/sympy_parser\\.py)']
0.27 sympy_parser.py(1): """Transform a string with Python-like source code into SymPy expression. """
0.27 sympy_parser.py(3): from tokenize import (generate_tokens, untokenize, TokenError,
0.27 sympy_parser.py(6): from keyword import iskeyword
0.27 sympy_parser.py(8): import ast
0.27 sympy_parser.py(9): import unicodedata
0.27 sympy_parser.py(10): from io import StringIO
0.27 sympy_parser.py(11): import builtins
0.27 sympy_parser.py(12): import types
0.27 sympy_parser.py(13): from typing import Tuple as tTuple, Dict as tDict, Any, Callable, \
0.27 sympy_parser.py(16): from sympy.assumptions.ask import AssumptionKeys
0.27 sympy_parser.py(17): from sympy.core.basic import Basic
0.27 sympy_parser.py(18): from sympy.core import Symbol
0.27 sympy_parser.py(19): from sympy.core.function import Function
0.27 sympy_parser.py(20): from sympy.utilities.misc import func_name
0.27 sympy_parser.py(21): from sympy.functions.elementary.miscellaneous import Max, Min
0.27 sympy_parser.py(24): null = ''
0.27 sympy_parser.py(26): TOKEN = tTuple[int, str]
0.27 sympy_parser.py(27): DICT = tDict[str, Any]
0.27 sympy_parser.py(28): TRANS = Callable[[List[TOKEN], DICT, DICT], List[TOKEN]]
0.27 sympy_parser.py(30): def _token_splittable(token_name: str) -> bool:
0.27 sympy_parser.py(46): def _token_callable(token: TOKEN, local_dict: DICT, global_dict: DICT, nextToken=None):
0.27 sympy_parser.py(59): def _add_factorial_tokens(name: str, result: List[TOKEN]) -> List[TOKEN]:
0.27 sympy_parser.py(87): class ParenthesisGroup(List[TOKEN]):
0.27 sympy_parser.py(87): class ParenthesisGroup(List[TOKEN]):
0.27 sympy_parser.py(88):     """List of tokens representing an expression in parentheses."""
0.27 sympy_parser.py(89):     pass
0.27 sympy_parser.py(92): class AppliedFunction:
0.27 sympy_parser.py(92): class AppliedFunction:
0.27 sympy_parser.py(93):     """
0.27 sympy_parser.py(98):     def __init__(self, function: TOKEN, args: ParenthesisGroup, exponent=None):
0.27 sympy_parser.py(106):     def expand(self) -> List[TOKEN]:
0.27 sympy_parser.py(110):     def __getitem__(self, index):
0.27 sympy_parser.py(113):     def __repr__(self):
0.27 sympy_parser.py(118): def _flatten(result: List[tUnion[TOKEN, AppliedFunction]]):
0.27 sympy_parser.py(128): def _group_parentheses(recursor: TRANS):
0.27 sympy_parser.py(172): def _apply_functions(tokens: List[tUnion[TOKEN, ParenthesisGroup]], local_dict: DICT, global_dict: DICT):
0.27 sympy_parser.py(197): def _implicit_multiplication(tokens: List[tUnion[TOKEN, AppliedFunction]], local_dict: DICT, global_dict: DICT):
0.27 sympy_parser.py(262): def _implicit_application(tokens: List[tUnion[TOKEN, AppliedFunction]], local_dict: DICT, global_dict: DICT):
0.27 sympy_parser.py(313): def function_exponentiation(tokens: List[TOKEN], local_dict: DICT, global_dict: DICT):
0.27 sympy_parser.py(365): def split_symbols_custom(predicate: Callable[[str], bool]):
0.27 sympy_parser.py(452): split_symbols = split_symbols_custom(_token_splittable)
0.27 sympy_parser.py(387):     def _split_symbols(tokens: List[TOKEN], local_dict: DICT, global_dict: DICT):
0.27 sympy_parser.py(443):     return _split_symbols
0.27 sympy_parser.py(455): def implicit_multiplication(tokens: List[TOKEN], local_dict: DICT,
0.27 sympy_parser.py(456):                             global_dict: DICT) -> List[TOKEN]:
0.27 sympy_parser.py(455): def implicit_multiplication(tokens: List[TOKEN], local_dict: DICT,
0.27 sympy_parser.py(479): def implicit_application(tokens: List[TOKEN], local_dict: DICT,
0.27 sympy_parser.py(480):                          global_dict: DICT) -> List[TOKEN]:
0.27 sympy_parser.py(479): def implicit_application(tokens: List[TOKEN], local_dict: DICT,
0.27 sympy_parser.py(503): def implicit_multiplication_application(result: List[TOKEN], local_dict: DICT,
0.27 sympy_parser.py(504):                                         global_dict: DICT) -> List[TOKEN]:
0.27 sympy_parser.py(503): def implicit_multiplication_application(result: List[TOKEN], local_dict: DICT,
0.27 sympy_parser.py(534): def auto_symbol(tokens: List[TOKEN], local_dict: DICT, global_dict: DICT):
0.27 sympy_parser.py(585): def lambda_notation(tokens: List[TOKEN], local_dict: DICT, global_dict: DICT):
0.27 sympy_parser.py(625): def factorial_notation(tokens: List[TOKEN], local_dict: DICT, global_dict: DICT):
0.27 sympy_parser.py(649): def convert_xor(tokens: List[TOKEN], local_dict: DICT, global_dict: DICT):
0.27 sympy_parser.py(664): def repeated_decimals(tokens: List[TOKEN], local_dict: DICT, global_dict: DICT):
0.27 sympy_parser.py(755): def auto_number(tokens: List[TOKEN], local_dict: DICT, global_dict: DICT):
0.27 sympy_parser.py(789): def rationalize(tokens: List[TOKEN], local_dict: DICT, global_dict: DICT):
0.27 sympy_parser.py(808): def _transform_equals_sign(tokens: List[TOKEN], local_dict: DICT, global_dict: DICT):
0.27 sympy_parser.py(837): def convert_equals_signs(tokens: List[TOKEN], local_dict: DICT,
0.27 sympy_parser.py(838):                          global_dict: DICT) -> List[TOKEN]:
0.27 sympy_parser.py(837): def convert_equals_signs(tokens: List[TOKEN], local_dict: DICT,
0.27 sympy_parser.py(877):     = (lambda_notation, auto_symbol, repeated_decimals, auto_number,
0.27 sympy_parser.py(878):        factorial_notation)
0.27 sympy_parser.py(877):     = (lambda_notation, auto_symbol, repeated_decimals, auto_number,
0.27 sympy_parser.py(876): standard_transformations: tTuple[TRANS, ...] \
0.27 sympy_parser.py(881): def stringify_expr(s: str, local_dict: DICT, global_dict: DICT,
0.27 sympy_parser.py(882):         transformations: tTuple[TRANS, ...]) -> str:
0.27 sympy_parser.py(881): def stringify_expr(s: str, local_dict: DICT, global_dict: DICT,
0.27 sympy_parser.py(900): def eval_expr(code, local_dict: DICT, global_dict: DICT):
0.27 sympy_parser.py(911): def parse_expr(s: str, local_dict: Optional[DICT] = None,
0.27 sympy_parser.py(913):                    = standard_transformations,
0.27 sympy_parser.py(914):                global_dict: Optional[DICT] = None, evaluate=True):
0.27 sympy_parser.py(911): def parse_expr(s: str, local_dict: Optional[DICT] = None,
0.27 sympy_parser.py(912):                transformations: tUnion[tTuple[TRANS, ...], str] \
0.27 sympy_parser.py(914):                global_dict: Optional[DICT] = None, evaluate=True):
0.27 sympy_parser.py(911): def parse_expr(s: str, local_dict: Optional[DICT] = None,
0.27 sympy_parser.py(1090): def evaluateFalse(s: str):
0.27 sympy_parser.py(1102): class EvaluateFalseTransformer(ast.NodeTransformer):
0.27 sympy_parser.py(1102): class EvaluateFalseTransformer(ast.NodeTransformer):
0.27 sympy_parser.py(1104):         ast.Add: 'Add',
0.27 sympy_parser.py(1105):         ast.Mult: 'Mul',
0.27 sympy_parser.py(1106):         ast.Pow: 'Pow',
0.27 sympy_parser.py(1107):         ast.Sub: 'Add',
0.27 sympy_parser.py(1108):         ast.Div: 'Mul',
0.27 sympy_parser.py(1109):         ast.BitOr: 'Or',
0.27 sympy_parser.py(1110):         ast.BitAnd: 'And',
0.27 sympy_parser.py(1111):         ast.BitXor: 'Not',
0.27 sympy_parser.py(1103):     operators = {
0.27 sympy_parser.py(1113):     functions = (
0.27 sympy_parser.py(1122):     def flatten(self, args, func):
0.27 sympy_parser.py(1137):     def visit_BinOp(self, node):
0.27 sympy_parser.py(1189):     def visit_Call(self, node):
0.27 sympy_parser.py(1197): 0: lambda_notation,
0.27 sympy_parser.py(1198): 1: auto_symbol,
0.27 sympy_parser.py(1199): 2: repeated_decimals,
0.27 sympy_parser.py(1200): 3: auto_number,
0.27 sympy_parser.py(1201): 4: factorial_notation,
0.27 sympy_parser.py(1202): 5: implicit_multiplication_application,
0.27 sympy_parser.py(1203): 6: convert_xor,
0.27 sympy_parser.py(1204): 7: implicit_application,
0.27 sympy_parser.py(1205): 8: implicit_multiplication,
0.27 sympy_parser.py(1206): 9: convert_equals_signs,
0.27 sympy_parser.py(1207): 10: function_exponentiation,
0.27 sympy_parser.py(1208): 11: rationalize}
0.27 sympy_parser.py(1196): _transformation = {  # items can be added but never re-ordered
0.27 sympy_parser.py(1210): transformations = '\n'.join('%s: %s' % (i, func_name(f)) for i, f in _transformation.items())
0.27 sympy_parser.py(1210): transformations = '\n'.join('%s: %s' % (i, func_name(f)) for i, f in _transformation.items())
0.27 sympy_parser.py(1210): transformations = '\n'.join('%s: %s' % (i, func_name(f)) for i, f in _transformation.items())
0.27 sympy_parser.py(1210): transformations = '\n'.join('%s: %s' % (i, func_name(f)) for i, f in _transformation.items())
0.27 sympy_parser.py(1210): transformations = '\n'.join('%s: %s' % (i, func_name(f)) for i, f in _transformation.items())
0.27 sympy_parser.py(1210): transformations = '\n'.join('%s: %s' % (i, func_name(f)) for i, f in _transformation.items())
0.27 sympy_parser.py(1210): transformations = '\n'.join('%s: %s' % (i, func_name(f)) for i, f in _transformation.items())
0.27 sympy_parser.py(1210): transformations = '\n'.join('%s: %s' % (i, func_name(f)) for i, f in _transformation.items())
0.27 sympy_parser.py(1210): transformations = '\n'.join('%s: %s' % (i, func_name(f)) for i, f in _transformation.items())
0.27 sympy_parser.py(1210): transformations = '\n'.join('%s: %s' % (i, func_name(f)) for i, f in _transformation.items())
0.27 sympy_parser.py(1210): transformations = '\n'.join('%s: %s' % (i, func_name(f)) for i, f in _transformation.items())
0.27 sympy_parser.py(1210): transformations = '\n'.join('%s: %s' % (i, func_name(f)) for i, f in _transformation.items())
0.27 sympy_parser.py(1210): transformations = '\n'.join('%s: %s' % (i, func_name(f)) for i, f in _transformation.items())
0.27 sympy_parser.py(1210): transformations = '\n'.join('%s: %s' % (i, func_name(f)) for i, f in _transformation.items())
0.27 sympy_parser.py(1213): class _T():
0.27 sympy_parser.py(1213): class _T():
0.27 sympy_parser.py(1214):     """class to retrieve transformations from a given slice
0.27 sympy_parser.py(1222):     def __init__(self):
0.27 sympy_parser.py(1225):     def __str__(self):
0.27 sympy_parser.py(1228):     def __getitem__(self, t):
0.27 sympy_parser.py(1241): T = _T()
0.27 sympy_parser.py(1223):         self.N = len(_transformation)
============================= test process starts ==============================
executable:         /opt/miniconda3/envs/testbed/bin/python3  (3.9.23-final-0) [CPython]
architecture:       64-bit
cache:              no
ground types:       python 
numpy:              None
random seed:        31918506
hash randomization: on (PYTHONHASHSEED=955812444)

sympy/polys/tests/test_coverup_sympy__sympy-24661.py[1] 
test_parse_expr_evaluate_false_ignored_for_relationals 0.32 sympy_parser.py(1040):     if local_dict is None:
0.32 sympy_parser.py(1041):         local_dict = {}
0.32 sympy_parser.py(1047):     if global_dict is None:
0.32 sympy_parser.py(1048):         global_dict = {}
0.32 sympy_parser.py(1049):         exec('from sympy import *', global_dict)
0.32 sympy_parser.py(1051):         builtins_dict = vars(builtins)
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1054):                 global_dict[name] = obj
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1054):                 global_dict[name] = obj
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1054):                 global_dict[name] = obj
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1054):                 global_dict[name] = obj
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1054):                 global_dict[name] = obj
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1054):                 global_dict[name] = obj
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1054):                 global_dict[name] = obj
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1054):                 global_dict[name] = obj
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1054):                 global_dict[name] = obj
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1054):                 global_dict[name] = obj
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1054):                 global_dict[name] = obj
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1054):                 global_dict[name] = obj
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1054):                 global_dict[name] = obj
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1054):                 global_dict[name] = obj
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1054):                 global_dict[name] = obj
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1054):                 global_dict[name] = obj
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1054):                 global_dict[name] = obj
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1054):                 global_dict[name] = obj
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1054):                 global_dict[name] = obj
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1054):                 global_dict[name] = obj
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1054):                 global_dict[name] = obj
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1054):                 global_dict[name] = obj
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1054):                 global_dict[name] = obj
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1054):                 global_dict[name] = obj
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1054):                 global_dict[name] = obj
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1054):                 global_dict[name] = obj
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1054):                 global_dict[name] = obj
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1054):                 global_dict[name] = obj
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1054):                 global_dict[name] = obj
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1054):                 global_dict[name] = obj
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1054):                 global_dict[name] = obj
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1054):                 global_dict[name] = obj
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1054):                 global_dict[name] = obj
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1054):                 global_dict[name] = obj
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1054):                 global_dict[name] = obj
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1054):                 global_dict[name] = obj
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1054):                 global_dict[name] = obj
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1054):                 global_dict[name] = obj
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1054):                 global_dict[name] = obj
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1054):                 global_dict[name] = obj
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1054):                 global_dict[name] = obj
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1054):                 global_dict[name] = obj
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1054):                 global_dict[name] = obj
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1053):             if isinstance(obj, types.BuiltinFunctionType):
0.32 sympy_parser.py(1052):         for name, obj in builtins_dict.items():
0.32 sympy_parser.py(1055):         global_dict['max'] = Max
0.32 sympy_parser.py(1056):         global_dict['min'] = Min
0.32 sympy_parser.py(1061):     transformations = transformations or ()
0.32 sympy_parser.py(1062):     if isinstance(transformations, str):
0.32 sympy_parser.py(1070):         _transformations = transformations
0.32 sympy_parser.py(1072):     code = stringify_expr(s, local_dict, global_dict, _transformations)
0.32 sympy_parser.py(889):     tokens = []
0.32 sympy_parser.py(890):     input_code = StringIO(s.strip())
0.32 sympy_parser.py(891):     for toknum, tokval, _, _, _ in generate_tokens(input_code.readline):
0.32 sympy_parser.py(892):         tokens.append((toknum, tokval))
0.32 sympy_parser.py(891):     for toknum, tokval, _, _, _ in generate_tokens(input_code.readline):
0.32 sympy_parser.py(892):         tokens.append((toknum, tokval))
0.32 sympy_parser.py(891):     for toknum, tokval, _, _, _ in generate_tokens(input_code.readline):
0.32 sympy_parser.py(892):         tokens.append((toknum, tokval))
0.32 sympy_parser.py(891):     for toknum, tokval, _, _, _ in generate_tokens(input_code.readline):
0.32 sympy_parser.py(892):         tokens.append((toknum, tokval))
0.32 sympy_parser.py(891):     for toknum, tokval, _, _, _ in generate_tokens(input_code.readline):
0.32 sympy_parser.py(892):         tokens.append((toknum, tokval))
0.32 sympy_parser.py(891):     for toknum, tokval, _, _, _ in generate_tokens(input_code.readline):
0.32 sympy_parser.py(894):     for transform in transformations:
0.32 sympy_parser.py(895):         tokens = transform(tokens, local_dict, global_dict)
0.32 sympy_parser.py(591):     result: List[TOKEN] = []
0.32 sympy_parser.py(592):     flag = False
0.32 sympy_parser.py(593):     toknum, tokval = tokens[0]
0.32 sympy_parser.py(594):     tokLen = len(tokens)
0.32 sympy_parser.py(596):     if toknum == NAME and tokval == 'lambda':
0.32 sympy_parser.py(620):         result.extend(tokens)
0.32 sympy_parser.py(622):     return result
0.32 sympy_parser.py(894):     for transform in transformations:
0.32 sympy_parser.py(895):         tokens = transform(tokens, local_dict, global_dict)
0.32 sympy_parser.py(536):     result: List[TOKEN] = []
0.32 sympy_parser.py(537):     prevTok = (-1, '')
0.32 sympy_parser.py(539):     tokens.append((-1, ''))  # so zip traverses all tokens
0.32 sympy_parser.py(540):     for tok, nextTok in zip(tokens, tokens[1:]):
0.32 sympy_parser.py(541):         tokNum, tokVal = tok
0.32 sympy_parser.py(542):         nextTokNum, nextTokVal = nextTok
0.32 sympy_parser.py(543):         if tokNum == NAME:
0.32 sympy_parser.py(578):             result.append((tokNum, tokVal))
0.32 sympy_parser.py(580):         prevTok = (tokNum, tokVal)
0.32 sympy_parser.py(540):     for tok, nextTok in zip(tokens, tokens[1:]):
0.32 sympy_parser.py(541):         tokNum, tokVal = tok
0.32 sympy_parser.py(542):         nextTokNum, nextTokVal = nextTok
0.32 sympy_parser.py(543):         if tokNum == NAME:
0.32 sympy_parser.py(578):             result.append((tokNum, tokVal))
0.32 sympy_parser.py(580):         prevTok = (tokNum, tokVal)
0.32 sympy_parser.py(540):     for tok, nextTok in zip(tokens, tokens[1:]):
0.32 sympy_parser.py(541):         tokNum, tokVal = tok
0.32 sympy_parser.py(542):         nextTokNum, nextTokVal = nextTok
0.32 sympy_parser.py(543):         if tokNum == NAME:
0.32 sympy_parser.py(578):             result.append((tokNum, tokVal))
0.32 sympy_parser.py(580):         prevTok = (tokNum, tokVal)
0.32 sympy_parser.py(540):     for tok, nextTok in zip(tokens, tokens[1:]):
0.32 sympy_parser.py(541):         tokNum, tokVal = tok
0.32 sympy_parser.py(542):         nextTokNum, nextTokVal = nextTok
0.32 sympy_parser.py(543):         if tokNum == NAME:
0.32 sympy_parser.py(578):             result.append((tokNum, tokVal))
0.32 sympy_parser.py(580):         prevTok = (tokNum, tokVal)
0.32 sympy_parser.py(540):     for tok, nextTok in zip(tokens, tokens[1:]):
0.32 sympy_parser.py(541):         tokNum, tokVal = tok
0.32 sympy_parser.py(542):         nextTokNum, nextTokVal = nextTok
0.32 sympy_parser.py(543):         if tokNum == NAME:
0.32 sympy_parser.py(578):             result.append((tokNum, tokVal))
0.32 sympy_parser.py(580):         prevTok = (tokNum, tokVal)
0.32 sympy_parser.py(540):     for tok, nextTok in zip(tokens, tokens[1:]):
0.32 sympy_parser.py(582):     return result
0.32 sympy_parser.py(894):     for transform in transformations:
0.32 sympy_parser.py(895):         tokens = transform(tokens, local_dict, global_dict)
0.32 sympy_parser.py(671):     result: List[TOKEN] = []
0.32 sympy_parser.py(673):     def is_digit(s):
0.32 sympy_parser.py(677):     num: List[TOKEN] = []
0.32 sympy_parser.py(678):     for toknum, tokval in tokens:
0.32 sympy_parser.py(679):         if toknum == NUMBER:
0.32 sympy_parser.py(680):             if (not num and '.' in tokval and 'e' not in tokval.lower() and
0.32 sympy_parser.py(683):             elif is_digit(tokval)and  len(num) == 2:
0.32 sympy_parser.py(674):         return all(i in '0123456789_' for i in s)
0.32 sympy_parser.py(674):         return all(i in '0123456789_' for i in s)
0.32 sympy_parser.py(674):         return all(i in '0123456789_' for i in s)
0.32 sympy_parser.py(685):             elif is_digit(tokval) and len(num) == 3 and is_digit(num[-1][1]):
0.32 sympy_parser.py(674):         return all(i in '0123456789_' for i in s)
0.32 sympy_parser.py(674):         return all(i in '0123456789_' for i in s)
0.32 sympy_parser.py(674):         return all(i in '0123456789_' for i in s)
0.32 sympy_parser.py(690):                 num = []
0.32 sympy_parser.py(704):         result.append((toknum, tokval))
0.32 sympy_parser.py(706):         if num and num[-1][1] == ']':
0.32 sympy_parser.py(678):     for toknum, tokval in tokens:
0.32 sympy_parser.py(679):         if toknum == NUMBER:
0.32 sympy_parser.py(691):         elif toknum == OP:
0.32 sympy_parser.py(692):             if tokval == '[' and len(num) == 1:
0.32 sympy_parser.py(694):             elif tokval == ']' and len(num) >= 3:
0.32 sympy_parser.py(696):             elif tokval == '.' and not num:
0.32 sympy_parser.py(700):                 num = []
0.32 sympy_parser.py(704):         result.append((toknum, tokval))
0.32 sympy_parser.py(706):         if num and num[-1][1] == ']':
0.32 sympy_parser.py(678):     for toknum, tokval in tokens:
0.32 sympy_parser.py(679):         if toknum == NUMBER:
0.32 sympy_parser.py(680):             if (not num and '.' in tokval and 'e' not in tokval.lower() and
0.32 sympy_parser.py(683):             elif is_digit(tokval)and  len(num) == 2:
0.32 sympy_parser.py(674):         return all(i in '0123456789_' for i in s)
0.32 sympy_parser.py(674):         return all(i in '0123456789_' for i in s)
0.32 sympy_parser.py(674):         return all(i in '0123456789_' for i in s)
0.32 sympy_parser.py(685):             elif is_digit(tokval) and len(num) == 3 and is_digit(num[-1][1]):
0.32 sympy_parser.py(674):         return all(i in '0123456789_' for i in s)
0.32 sympy_parser.py(674):         return all(i in '0123456789_' for i in s)
0.32 sympy_parser.py(674):         return all(i in '0123456789_' for i in s)
0.32 sympy_parser.py(690):                 num = []
0.32 sympy_parser.py(704):         result.append((toknum, tokval))
0.32 sympy_parser.py(706):         if num and num[-1][1] == ']':
0.32 sympy_parser.py(678):     for toknum, tokval in tokens:
0.32 sympy_parser.py(679):         if toknum == NUMBER:
0.32 sympy_parser.py(691):         elif toknum == OP:
0.32 sympy_parser.py(702):             num = []
0.32 sympy_parser.py(704):         result.append((toknum, tokval))
0.32 sympy_parser.py(706):         if num and num[-1][1] == ']':
0.32 sympy_parser.py(678):     for toknum, tokval in tokens:
0.32 sympy_parser.py(679):         if toknum == NUMBER:
0.32 sympy_parser.py(691):         elif toknum == OP:
0.32 sympy_parser.py(702):             num = []
0.32 sympy_parser.py(704):         result.append((toknum, tokval))
0.32 sympy_parser.py(706):         if num and num[-1][1] == ']':
0.32 sympy_parser.py(678):     for toknum, tokval in tokens:
0.32 sympy_parser.py(752):     return result
0.32 sympy_parser.py(894):     for transform in transformations:
0.32 sympy_parser.py(895):         tokens = transform(tokens, local_dict, global_dict)
0.32 sympy_parser.py(763):     result: List[TOKEN] = []
0.32 sympy_parser.py(765):     for toknum, tokval in tokens:
0.32 sympy_parser.py(766):         if toknum == NUMBER:
0.32 sympy_parser.py(767):             number = tokval
0.32 sympy_parser.py(768):             postfix = []
0.32 sympy_parser.py(770):             if number.endswith('j') or number.endswith('J'):
0.32 sympy_parser.py(774):             if '.' in number or (('e' in number or 'E' in number) and
0.32 sympy_parser.py(779):                 seq = [(NAME, 'Integer'), (OP, '('), (
0.32 sympy_parser.py(780):                     NUMBER, number), (OP, ')')]
0.32 sympy_parser.py(779):                 seq = [(NAME, 'Integer'), (OP, '('), (
0.32 sympy_parser.py(780):                     NUMBER, number), (OP, ')')]
0.32 sympy_parser.py(779):                 seq = [(NAME, 'Integer'), (OP, '('), (
0.32 sympy_parser.py(782):             result.extend(seq + postfix)
0.32 sympy_parser.py(765):     for toknum, tokval in tokens:
0.32 sympy_parser.py(766):         if toknum == NUMBER:
0.32 sympy_parser.py(784):             result.append((toknum, tokval))
0.32 sympy_parser.py(765):     for toknum, tokval in tokens:
0.32 sympy_parser.py(766):         if toknum == NUMBER:
0.32 sympy_parser.py(767):             number = tokval
0.32 sympy_parser.py(768):             postfix = []
0.32 sympy_parser.py(770):             if number.endswith('j') or number.endswith('J'):
0.32 sympy_parser.py(774):             if '.' in number or (('e' in number or 'E' in number) and
0.32 sympy_parser.py(779):                 seq = [(NAME, 'Integer'), (OP, '('), (
0.32 sympy_parser.py(780):                     NUMBER, number), (OP, ')')]
0.32 sympy_parser.py(779):                 seq = [(NAME, 'Integer'), (OP, '('), (
0.32 sympy_parser.py(780):                     NUMBER, number), (OP, ')')]
0.32 sympy_parser.py(779):                 seq = [(NAME, 'Integer'), (OP, '('), (
0.32 sympy_parser.py(782):             result.extend(seq + postfix)
0.32 sympy_parser.py(765):     for toknum, tokval in tokens:
0.32 sympy_parser.py(766):         if toknum == NUMBER:
0.32 sympy_parser.py(784):             result.append((toknum, tokval))
0.32 sympy_parser.py(765):     for toknum, tokval in tokens:
0.32 sympy_parser.py(766):         if toknum == NUMBER:
0.32 sympy_parser.py(784):             result.append((toknum, tokval))
0.32 sympy_parser.py(765):     for toknum, tokval in tokens:
0.32 sympy_parser.py(786):     return result
0.32 sympy_parser.py(894):     for transform in transformations:
0.32 sympy_parser.py(895):         tokens = transform(tokens, local_dict, global_dict)
0.32 sympy_parser.py(627):     result: List[TOKEN] = []
0.32 sympy_parser.py(628):     nfactorial = 0
0.32 sympy_parser.py(629):     for toknum, tokval in tokens:
0.32 sympy_parser.py(630):         if toknum == ERRORTOKEN:
0.32 sympy_parser.py(638):             if nfactorial == 1:
0.32 sympy_parser.py(640):             elif nfactorial == 2:
0.32 sympy_parser.py(642):             elif nfactorial > 2:
0.32 sympy_parser.py(644):             nfactorial = 0
0.32 sympy_parser.py(645):             result.append((toknum, tokval))
0.32 sympy_parser.py(629):     for toknum, tokval in tokens:
0.32 sympy_parser.py(630):         if toknum == ERRORTOKEN:
0.32 sympy_parser.py(638):             if nfactorial == 1:
0.32 sympy_parser.py(640):             elif nfactorial == 2:
0.32 sympy_parser.py(642):             elif nfactorial > 2:
0.32 sympy_parser.py(644):             nfactorial = 0
0.32 sympy_parser.py(645):             result.append((toknum, tokval))
0.32 sympy_parser.py(629):     for toknum, tokval in tokens:
0.32 sympy_parser.py(630):         if toknum == ERRORTOKEN:
0.32 sympy_parser.py(638):             if nfactorial == 1:
0.32 sympy_parser.py(640):             elif nfactorial == 2:
0.32 sympy_parser.py(642):             elif nfactorial > 2:
0.32 sympy_parser.py(644):             nfactorial = 0
0.32 sympy_parser.py(645):             result.append((toknum, tokval))
0.32 sympy_parser.py(629):     for toknum, tokval in tokens:
0.32 sympy_parser.py(630):         if toknum == ERRORTOKEN:
0.32 sympy_parser.py(638):             if nfactorial == 1:
0.32 sympy_parser.py(640):             elif nfactorial == 2:
0.32 sympy_parser.py(642):             elif nfactorial > 2:
0.32 sympy_parser.py(644):             nfactorial = 0
0.32 sympy_parser.py(645):             result.append((toknum, tokval))
0.32 sympy_parser.py(629):     for toknum, tokval in tokens:
0.32 sympy_parser.py(630):         if toknum == ERRORTOKEN:
0.32 sympy_parser.py(638):             if nfactorial == 1:
0.32 sympy_parser.py(640):             elif nfactorial == 2:
0.32 sympy_parser.py(642):             elif nfactorial > 2:
0.32 sympy_parser.py(644):             nfactorial = 0
0.32 sympy_parser.py(645):             result.append((toknum, tokval))
0.32 sympy_parser.py(629):     for toknum, tokval in tokens:
0.32 sympy_parser.py(630):         if toknum == ERRORTOKEN:
0.32 sympy_parser.py(638):             if nfactorial == 1:
0.32 sympy_parser.py(640):             elif nfactorial == 2:
0.32 sympy_parser.py(642):             elif nfactorial > 2:
0.32 sympy_parser.py(644):             nfactorial = 0
0.32 sympy_parser.py(645):             result.append((toknum, tokval))
0.32 sympy_parser.py(629):     for toknum, tokval in tokens:
0.32 sympy_parser.py(630):         if toknum == ERRORTOKEN:
0.32 sympy_parser.py(638):             if nfactorial == 1:
0.32 sympy_parser.py(640):             elif nfactorial == 2:
0.32 sympy_parser.py(642):             elif nfactorial > 2:
0.32 sympy_parser.py(644):             nfactorial = 0
0.32 sympy_parser.py(645):             result.append((toknum, tokval))
0.32 sympy_parser.py(629):     for toknum, tokval in tokens:
0.32 sympy_parser.py(630):         if toknum == ERRORTOKEN:
0.32 sympy_parser.py(638):             if nfactorial == 1:
0.32 sympy_parser.py(640):             elif nfactorial == 2:
0.32 sympy_parser.py(642):             elif nfactorial > 2:
0.32 sympy_parser.py(644):             nfactorial = 0
0.32 sympy_parser.py(645):             result.append((toknum, tokval))
0.32 sympy_parser.py(629):     for toknum, tokval in tokens:
0.32 sympy_parser.py(630):         if toknum == ERRORTOKEN:
0.32 sympy_parser.py(638):             if nfactorial == 1:
0.32 sympy_parser.py(640):             elif nfactorial == 2:
0.32 sympy_parser.py(642):             elif nfactorial > 2:
0.32 sympy_parser.py(644):             nfactorial = 0
0.32 sympy_parser.py(645):             result.append((toknum, tokval))
0.32 sympy_parser.py(629):     for toknum, tokval in tokens:
0.32 sympy_parser.py(630):         if toknum == ERRORTOKEN:
0.32 sympy_parser.py(638):             if nfactorial == 1:
0.32 sympy_parser.py(640):             elif nfactorial == 2:
0.32 sympy_parser.py(642):             elif nfactorial > 2:
0.32 sympy_parser.py(644):             nfactorial = 0
0.32 sympy_parser.py(645):             result.append((toknum, tokval))
0.32 sympy_parser.py(629):     for toknum, tokval in tokens:
0.32 sympy_parser.py(630):         if toknum == ERRORTOKEN:
0.32 sympy_parser.py(638):             if nfactorial == 1:
0.32 sympy_parser.py(640):             elif nfactorial == 2:
0.32 sympy_parser.py(642):             elif nfactorial > 2:
0.32 sympy_parser.py(644):             nfactorial = 0
0.32 sympy_parser.py(645):             result.append((toknum, tokval))
0.32 sympy_parser.py(629):     for toknum, tokval in tokens:
0.32 sympy_parser.py(646):     return result
0.32 sympy_parser.py(894):     for transform in transformations:
0.32 sympy_parser.py(897):     return untokenize(tokens)
0.32 sympy_parser.py(1074):     if not evaluate:
0.32 sympy_parser.py(1075):         code = compile(evaluateFalse(code), '<string>', 'eval')
0.32 sympy_parser.py(1094):     node = ast.parse(s)
0.32 sympy_parser.py(1095):     transformed_node = EvaluateFalseTransformer().visit(node)
0.32 sympy_parser.py(1190):         new_node = self.generic_visit(node)
0.32 sympy_parser.py(1191):         if isinstance(node.func, ast.Name) and node.func.id in self.functions:
0.32 sympy_parser.py(1193):         return new_node
0.32 sympy_parser.py(1190):         new_node = self.generic_visit(node)
0.32 sympy_parser.py(1191):         if isinstance(node.func, ast.Name) and node.func.id in self.functions:
0.32 sympy_parser.py(1193):         return new_node
0.32 sympy_parser.py(1097):     transformed_node = ast.Expression(transformed_node.body[0].value)
0.32 sympy_parser.py(1099):     return ast.fix_missing_locations(transformed_node)
0.32 sympy_parser.py(1077):     try:
0.32 sympy_parser.py(1078):         rv = eval_expr(code, local_dict, global_dict)
0.32 sympy_parser.py(906):     expr = eval(
0.32 sympy_parser.py(907):         code, global_dict, local_dict)  # take local objects in preference
0.32 sympy_parser.py(906):     expr = eval(
0.32 sympy_parser.py(908):     return expr
0.32 sympy_parser.py(1080):         for i in local_dict.pop(null, ()):
0.32 sympy_parser.py(1082):         return rv
F                  [FAIL]


________________________________________________________________________________
 sympy/polys/tests/test_coverup_sympy__sympy-24661.py:test_parse_expr_evaluate_false_ignored_for_relationals 
Traceback (most recent call last):
  File "/testbed/sympy/polys/tests/test_coverup_sympy__sympy-24661.py", line 6, in test_parse_expr_evaluate_false_ignored_for_relationals
    assert result == Lt(1, 2, evaluate=False)
AssertionError

============= tests finished: 0 passed, 1 failed, in 0.01 seconds ==============
DO *NOT* COMMIT!
sympy_parser.py(1210): transformations = '\n'.join('%s: %s' % (i, func_name(f)) for i, f in _transformation.items())
0.97 sympy_parser.py(1210): transformations = '\n'.join('%s: %s' % (i, func_name(f)) for i, f in _transformation.items())
0.97 sympy_parser.py(1210): transformations = '\n'.join('%s: %s' % (i, func_name(f)) for i, f in _transformation.items())
0.97 sympy_parser.py(1210): transformations = '\n'.join('%s: %s' % (i, func_name(f)) for i, f in _transformation.items())
0.97 sympy_parser.py(1210): transformations = '\n'.join('%s: %s' % (i, func_name(f)) for i, f in _transformation.items())
0.97 sympy_parser.py(1210): transformations = '\n'.join('%s: %s' % (i, func_name(f)) for i, f in _transformation.items())
0.97 sympy_parser.py(1210): transformations = '\n'.join('%s: %s' % (i, func_name(f)) for i, f in _transformation.items())
0.97 sympy_parser.py(1210): transformations = '\n'.join('%s: %s' % (i, func_name(f)) for i, f in _transformation.items())
0.97 sympy_parser.py(1210): transformations = '\n'.join('%s: %s' % (i, func_name(f)) for i, f in _transformation.items())
0.97 sympy_parser.py(1210): transformations = '\n'.join('%s: %s' % (i, func_name(f)) for i, f in _transformation.items())
0.97 sympy_parser.py(1210): transformations = '\n'.join('%s: %s' % (i, func_name(f)) for i, f in _transformation.items())
0.97 sympy_parser.py(1210): transformations = '\n'.join('%s: %s' % (i, func_name(f)) for i, f in _transformation.items())
0.97 sympy_parser.py(1210): transformations = '\n'.join('%s: %s' % (i, func_name(f)) for i, f in _transformation.items())
0.97 sympy_parser.py(1210): transformations = '\n'.join('%s: %s' % (i, func_name(f)) for i, f in _transformation.items())
0.97 sympy_parser.py(1213): class _T():
0.97 sympy_parser.py(1213): class _T():
0.97 sympy_parser.py(1214):     """class to retrieve transformations from a given slice
0.97 sympy_parser.py(1222):     def __init__(self):
0.97 sympy_parser.py(1225):     def __str__(self):
0.97 sympy_parser.py(1228):     def __getitem__(self, t):
0.97 sympy_parser.py(1241): T = _T()
0.97 sympy_parser.py(1223):         self.N = len(_transformation)
+ cat coverage.cover
{"/testbed/sympy/parsing/sympy_parser.py": {"3": 1, "6": 1, "8": 1, "9": 1, "10": 1, "11": 1, "12": 1, "13": 1, "16": 1, "17": 1, "18": 1, "19": 1, "20": 1, "21": 1, "24": 1, "26": 1, "27": 1, "28": 1, "30": 1, "46": 1, "59": 1, "87": 2, "92": 2, "118": 1, "128": 1, "172": 1, "197": 1, "262": 1, "313": 1, "365": 1, "452": 1, "455": 2, "456": 1, "479": 2, "480": 1, "503": 2, "504": 1, "534": 1, "585": 1, "625": 1, "649": 1, "664": 1, "755": 1, "789": 1, "808": 1, "837": 2, "838": 1, "877": 2, "878": 1, "876": 1, "881": 2, "882": 1, "900": 1, "911": 3, "913": 1, "914": 2, "912": 1, "1090": 1, "1102": 2, "1197": 1, "1198": 1, "1199": 1, "1200": 1, "1201": 1, "1202": 1, "1203": 1, "1204": 1, "1205": 1, "1206": 1, "1207": 1, "1208": 1, "1196": 1, "1210": 14, "1213": 2, "1241": 1, "38": 0, "39": 0, "40": 0, "41": 0, "42": 0, "43": 0, "53": 0, "54": 0, "55": 0, "56": 0, "60": 0, "61": 0, "63": 0, "64": 0, "66": 0, "67": 0, "69": 0, "70": 0, "71": 0, "73": 0, "74": 0, "75": 0, "76": 0, "78": 0, "79": 0, "80": 0, "82": 0, "84": 0, "89": 1, "98": 1, "106": 1, "110": 1, "113": 1, "99": 0, "100": 0, "101": 0, "102": 0, "103": 0, "104": 0, "108": 0, "111": 0, "114": 0, "115": 0, "119": 0, "120": 0, "121": 0, "122": 0, "124": 0, "125": 0, "129": 0, "169": 0, "135": 0, "136": 0, "137": 0, "138": 0, "139": 0, "140": 0, "141": 0, "142": 0, "143": 0, "144": 0, "145": 0, "147": 0, "150": 0, "154": 0, "155": 0, "156": 0, "157": 0, "158": 0, "159": 0, "160": 0, "161": 0, "162": 0, "163": 0, "165": 0, "166": 0, "167": 0, "168": 0, "179": 0, "180": 0, "181": 0, "182": 0, "183": 0, "184": 0, "185": 0, "187": 0, "188": 0, "189": 0, "190": 0, "192": 0, "193": 0, "194": 0, "213": 0, "214": 0, "215": 0, "216": 0, "217": 0, "218": 0, "219": 0, "220": 0, "222": 0, "223": 0, "224": 0, "225": 0, "226": 0, "227": 0, "229": 0, "230": 0, "231": 0, "232": 0, "234": 0, "236": 0, "237": 0, "239": 0, "240": 0, "242": 0, "243": 0, "245": 0, "246": 0, "247": 0, "248": 0, "250": 0, "251": 0, "253": 0, "254": 0, "256": 0, "257": 0, "258": 0, "259": 0, "264": 0, "265": 0, "266": 0, "268": 0, "270": 0, "271": 0, "272": 0, "273": 0, "274": 0, "275": 0, "277": 0, "278": 0, "279": 0, "280": 0, "285": 0, "286": 0, "290": 0, "291": 0, "292": 0, "293": 0, "294": 0, "295": 0, "296": 0, "297": 0, "298": 0, "299": 0, "300": 0, "301": 0, "302": 0, "303": 0, "305": 0, "306": 0, "308": 0, "309": 0, "310": 0, "325": 0, "326": 0, "327": 0, "328": 0, "329": 0, "330": 0, "331": 0, "332": 0, "333": 0, "334": 0, "335": 0, "336": 0, "339": 0, "340": 0, "342": 0, "343": 0, "344": 0, "345": 0, "346": 0, "347": 0, "348": 0, "349": 0, "350": 0, "351": 0, "352": 0, "353": 0, "354": 0, "355": 0, "356": 0, "357": 0, "358": 0, "359": 0, "360": 0, "361": 0, "362": 0, "387": 1, "443": 1, "388": 0, "389": 0, "390": 0, "392": 0, "393": 0, "395": 0, "396": 0, "397": 0, "399": 0, "400": 0, "402": 0, "403": 0, "405": 0, "406": 0, "407": 0, "409": 0, "410": 0, "411": 0, "412": 0, "413": 0, "414": 0, "415": 0, "416": 0, "417": 0, "418": 0, "419": 0, "420": 0, "421": 0, "422": 0, "423": 0, "425": 0, "426": 0, "427": 0, "428": 0, "432": 0, "433": 0, "434": 0, "437": 0, "439": 0, "441": 0, "472": 0, "473": 0, "474": 0, "475": 0, "476": 0, "496": 0, "497": 0, "498": 0, "499": 0, "500": 0, "527": 0, "528": 0, "529": 0, "531": 0, "536": 1, "537": 1, "539": 1, "540": 6, "541": 5, "542": 5, "543": 5, "544": 0, "546": 0, "547": 0, "549": 0, "551": 0, "552": 0, "554": 0, "555": 0, "556": 0, "557": 0, "558": 0, "559": 0, "560": 0, "562": 0, "563": 0, "564": 0, "565": 0, "566": 0, "567": 0, "568": 0, "569": 0, "571": 0, "572": 0, "573": 0, "574": 0, "575": 0, "578": 5, "580": 5, "582": 1, "591": 1, "592": 1, "593": 1, "594": 1, "596": 1, "597": 0, "600": 0, "601": 0, "602": 0, "603": 0, "604": 0, "605": 0, "606": 0, "607": 0, "609": 0, "610": 0, "611": 0, "612": 0, "613": 0, "614": 0, "615": 0, "616": 0, "618": 0, "620": 1, "622": 1, "627": 1, "628": 1, "629": 12, "630": 11, "631": 0, "632": 0, "633": 0, "635": 0, "636": 0, "638": 11, "639": 0, "640": 11, "641": 0, "642": 11, "643": 0, "644": 11, "645": 11, "646": 1, "651": 0, "652": 0, "653": 0, "654": 0, "655": 0, "657": 0, "659": 0, "661": 0, "671": 1, "673": 1, "677": 1, "678": 6, "679": 5, "680": 2, "681": 0, "682": 0, "683": 2, "684": 0, "685": 2, "688": 0, "690": 2, "691": 3, "692": 1, "693": 0, "694": 1, "695": 0, "696": 1, "698": 0, "700": 1, "702": 2, "704": 5, "706": 5, "709": 0, "710": 0, "711": 0, "712": 0, "713": 0, "715": 0, "716": 0, "717": 0, "719": 0, "720": 0, "723": 0, "724": 0, "725": 0, "728": 0, "729": 0, "730": 0, "731": 0, "732": 0, "733": 0, "734": 0, "735": 0, "736": 0, "737": 0, "738": 0, "739": 0, "740": 0, "741": 0, "742": 0, "743": 0, "744": 0, "745": 0, "746": 0, "747": 0, "727": 0, "749": 0, "750": 0, "752": 1, "674": 12, "763": 1, "765": 6, "766": 5, "767": 2, "768": 2, "770": 2, "771": 0, "772": 0, "774": 2, "775": 0, "776": 0, "777": 0, "779": 6, "780": 4, "782": 2, "784": 3, "786": 1, "791": 0, "792": 0, "793": 0, "794": 0, "795": 0, "796": 0, "797": 0, "798": 0, "799": 0, "800": 0, "801": 0, "803": 0, "805": 0, "822": 0, "823": 0, "824": 0, "825": 0, "826": 0, "827": 0, "828": 0, "829": 0, "830": 0, "831": 0, "833": 0, "834": 0, "866": 0, "867": 0, "868": 0, "869": 0, "870": 0, "889": 1, "890": 1, "891": 6, "892": 5, "894": 6, "895": 5, "897": 1, "906": 2, "907": 1, "908": 1, "1040": 1, "1041": 1, "1042": 0, "1043": 0, "1044": 0, "1045": 0, "1047": 1, "1048": 1, "1049": 1, "1051": 1, "1052": 153, "1053": 152, "1054": 43, "1055": 1, "1056": 1, "1058": 0, "1059": 0, "1061": 1, "1062": 1, "1063": 0, "1064": 0, "1065": 0, "1066": 0, "1068": 0, "1070": 1, "1072": 1, "1074": 1, "1075": 1, "1077": 1, "1078": 1, "1080": 1, "1081": 0, "1082": 1, "1083": 0, "1085": 0, "1086": 0, "1087": 0, "1094": 1, "1095": 1, "1097": 1, "1099": 1, "1104": 1, "1105": 1, "1106": 1, "1107": 1, "1108": 1, "1109": 1, "1110": 1, "1111": 1, "1103": 1, "1113": 1, "1122": 1, "1137": 1, "1189": 1, "1123": 0, "1124": 0, "1125": 0, "1126": 0, "1127": 0, "1128": 0, "1129": 0, "1130": 0, "1132": 0, "1134": 0, "1135": 0, "1138": 0, "1139": 0, "1140": 0, "1141": 0, "1143": 0, "1144": 0, "1145": 0, "1146": 0, "1147": 0, "1148": 0, "1149": 0, "1150": 0, "1152": 0, "1153": 0, "1154": 0, "1155": 0, "1156": 0, "1157": 0, "1158": 0, "1159": 0, "1160": 0, "1161": 0, "1164": 0, "1165": 0, "1166": 0, "1167": 0, "1168": 0, "1169": 0, "1172": 0, "1173": 0, "1174": 0, "1175": 0, "1176": 0, "1177": 0, "1178": 0, "1179": 0, "1182": 0, "1184": 0, "1186": 0, "1187": 0, "1190": 2, "1191": 2, "1192": 0, "1193": 2, "1222": 1, "1225": 1, "1228": 1, "1223": 1, "1226": 0, "1229": 0, "1230": 0, "1231": 0, "1232": 0, "1233": 0, "1234": 0, "1235": 0, "1236": 0, "1238": 0, "1239": 0}}
{"/testbed/sympy/parsing/sympy_parser.py": {"3": 1, "6": 1, "8": 1, "9": 1, "10": 1, "11": 1, "12": 1, "13": 1, "16": 1, "17": 1, "18": 1, "19": 1, "20": 1, "21": 1, "24": 1, "26": 1, "27": 1, "28": 1, "30": 1, "46": 1, "59": 1, "87": 2, "92": 2, "118": 1, "128": 1, "172": 1, "197": 1, "262": 1, "313": 1, "365": 1, "452": 1, "455": 2, "456": 1, "479": 2, "480": 1, "503": 2, "504": 1, "534": 1, "585": 1, "625": 1, "649": 1, "664": 1, "755": 1, "789": 1, "808": 1, "837": 2, "838": 1, "877": 2, "878": 1, "876": 1, "881": 2, "882": 1, "900": 1, "911": 3, "913": 1, "914": 2, "912": 1, "1090": 1, "1102": 2, "1197": 1, "1198": 1, "1199": 1, "1200": 1, "1201": 1, "1202": 1, "1203": 1, "1204": 1, "1205": 1, "1206": 1, "1207": 1, "1208": 1, "1196": 1, "1210": 14, "1213": 2, "1241": 1, "38": 0, "39": 0, "40": 0, "41": 0, "42": 0, "43": 0, "53": 0, "54": 0, "55": 0, "56": 0, "60": 0, "61": 0, "63": 0, "64": 0, "66": 0, "67": 0, "69": 0, "70": 0, "71": 0, "73": 0, "74": 0, "75": 0, "76": 0, "78": 0, "79": 0, "80": 0, "82": 0, "84": 0, "89": 1, "98": 1, "106": 1, "110": 1, "113": 1, "99": 0, "100": 0, "101": 0, "102": 0, "103": 0, "104": 0, "108": 0, "111": 0, "114": 0, "115": 0, "119": 0, "120": 0, "121": 0, "122": 0, "124": 0, "125": 0, "129": 0, "169": 0, "135": 0, "136": 0, "137": 0, "138": 0, "139": 0, "140": 0, "141": 0, "142": 0, "143": 0, "144": 0, "145": 0, "147": 0, "150": 0, "154": 0, "155": 0, "156": 0, "157": 0, "158": 0, "159": 0, "160": 0, "161": 0, "162": 0, "163": 0, "165": 0, "166": 0, "167": 0, "168": 0, "179": 0, "180": 0, "181": 0, "182": 0, "183": 0, "184": 0, "185": 0, "187": 0, "188": 0, "189": 0, "190": 0, "192": 0, "193": 0, "194": 0, "213": 0, "214": 0, "215": 0, "216": 0, "217": 0, "218": 0, "219": 0, "220": 0, "222": 0, "223": 0, "224": 0, "225": 0, "226": 0, "227": 0, "229": 0, "230": 0, "231": 0, "232": 0, "234": 0, "236": 0, "237": 0, "239": 0, "240": 0, "242": 0, "243": 0, "245": 0, "246": 0, "247": 0, "248": 0, "250": 0, "251": 0, "253": 0, "254": 0, "256": 0, "257": 0, "258": 0, "259": 0, "264": 0, "265": 0, "266": 0, "268": 0, "270": 0, "271": 0, "272": 0, "273": 0, "274": 0, "275": 0, "277": 0, "278": 0, "279": 0, "280": 0, "285": 0, "286": 0, "290": 0, "291": 0, "292": 0, "293": 0, "294": 0, "295": 0, "296": 0, "297": 0, "298": 0, "299": 0, "300": 0, "301": 0, "302": 0, "303": 0, "305": 0, "306": 0, "308": 0, "309": 0, "310": 0, "325": 0, "326": 0, "327": 0, "328": 0, "329": 0, "330": 0, "331": 0, "332": 0, "333": 0, "334": 0, "335": 0, "336": 0, "339": 0, "340": 0, "342": 0, "343": 0, "344": 0, "345": 0, "346": 0, "347": 0, "348": 0, "349": 0, "350": 0, "351": 0, "352": 0, "353": 0, "354": 0, "355": 0, "356": 0, "357": 0, "358": 0, "359": 0, "360": 0, "361": 0, "362": 0, "387": 1, "443": 1, "388": 0, "389": 0, "390": 0, "392": 0, "393": 0, "395": 0, "396": 0, "397": 0, "399": 0, "400": 0, "402": 0, "403": 0, "405": 0, "406": 0, "407": 0, "409": 0, "410": 0, "411": 0, "412": 0, "413": 0, "414": 0, "415": 0, "416": 0, "417": 0, "418": 0, "419": 0, "420": 0, "421": 0, "422": 0, "423": 0, "425": 0, "426": 0, "427": 0, "428": 0, "432": 0, "433": 0, "434": 0, "437": 0, "439": 0, "441": 0, "472": 0, "473": 0, "474": 0, "475": 0, "476": 0, "496": 0, "497": 0, "498": 0, "499": 0, "500": 0, "527": 0, "528": 0, "529": 0, "531": 0, "536": 0, "537": 0, "539": 0, "540": 0, "541": 0, "542": 0, "543": 0, "544": 0, "546": 0, "547": 0, "549": 0, "551": 0, "552": 0, "554": 0, "555": 0, "556": 0, "557": 0, "558": 0, "559": 0, "560": 0, "562": 0, "563": 0, "564": 0, "565": 0, "566": 0, "567": 0, "568": 0, "569": 0, "571": 0, "572": 0, "573": 0, "574": 0, "575": 0, "578": 0, "580": 0, "582": 0, "591": 0, "592": 0, "593": 0, "594": 0, "596": 0, "597": 0, "600": 0, "601": 0, "602": 0, "603": 0, "604": 0, "605": 0, "606": 0, "607": 0, "609": 0, "610": 0, "611": 0, "612": 0, "613": 0, "614": 0, "615": 0, "616": 0, "618": 0, "620": 0, "622": 0, "627": 0, "628": 0, "629": 0, "630": 0, "631": 0, "632": 0, "633": 0, "635": 0, "636": 0, "638": 0, "639": 0, "640": 0, "641": 0, "642": 0, "643": 0, "644": 0, "645": 0, "646": 0, "651": 0, "652": 0, "653": 0, "654": 0, "655": 0, "657": 0, "659": 0, "661": 0, "671": 0, "673": 0, "677": 0, "678": 0, "679": 0, "680": 0, "681": 0, "682": 0, "683": 0, "684": 0, "685": 0, "688": 0, "690": 0, "691": 0, "692": 0, "693": 0, "694": 0, "695": 0, "696": 0, "698": 0, "700": 0, "702": 0, "704": 0, "706": 0, "709": 0, "710": 0, "711": 0, "712": 0, "713": 0, "715": 0, "716": 0, "717": 0, "719": 0, "720": 0, "723": 0, "724": 0, "725": 0, "728": 0, "729": 0, "730": 0, "731": 0, "732": 0, "733": 0, "734": 0, "735": 0, "736": 0, "737": 0, "738": 0, "739": 0, "740": 0, "741": 0, "742": 0, "743": 0, "744": 0, "745": 0, "746": 0, "747": 0, "727": 0, "749": 0, "750": 0, "752": 0, "674": 0, "763": 0, "765": 0, "766": 0, "767": 0, "768": 0, "770": 0, "771": 0, "772": 0, "774": 0, "775": 0, "776": 0, "777": 0, "779": 0, "780": 0, "782": 0, "784": 0, "786": 0, "791": 0, "792": 0, "793": 0, "794": 0, "795": 0, "796": 0, "797": 0, "798": 0, "799": 0, "800": 0, "801": 0, "803": 0, "805": 0, "822": 0, "823": 0, "824": 0, "825": 0, "826": 0, "827": 0, "828": 0, "829": 0, "830": 0, "831": 0, "833": 0, "834": 0, "866": 0, "867": 0, "868": 0, "869": 0, "870": 0, "889": 0, "890": 0, "891": 0, "892": 0, "894": 0, "895": 0, "897": 0, "906": 0, "907": 0, "908": 0, "1040": 0, "1041": 0, "1042": 0, "1043": 0, "1044": 0, "1045": 0, "1047": 0, "1048": 0, "1049": 0, "1051": 0, "1052": 0, "1053": 0, "1054": 0, "1055": 0, "1056": 0, "1058": 0, "1059": 0, "1061": 0, "1062": 0, "1063": 0, "1064": 0, "1065": 0, "1066": 0, "1068": 0, "1070": 0, "1072": 0, "1074": 0, "1075": 0, "1077": 0, "1078": 0, "1080": 0, "1081": 0, "1082": 0, "1083": 0, "1085": 0, "1086": 0, "1087": 0, "1094": 0, "1095": 0, "1097": 0, "1099": 0, "1104": 1, "1105": 1, "1106": 1, "1107": 1, "1108": 1, "1109": 1, "1110": 1, "1111": 1, "1103": 1, "1113": 1, "1122": 1, "1137": 1, "1189": 1, "1123": 0, "1124": 0, "1125": 0, "1126": 0, "1127": 0, "1128": 0, "1129": 0, "1130": 0, "1132": 0, "1134": 0, "1135": 0, "1138": 0, "1139": 0, "1140": 0, "1141": 0, "1143": 0, "1144": 0, "1145": 0, "1146": 0, "1147": 0, "1148": 0, "1149": 0, "1150": 0, "1152": 0, "1153": 0, "1154": 0, "1155": 0, "1156": 0, "1157": 0, "1158": 0, "1159": 0, "1160": 0, "1161": 0, "1164": 0, "1165": 0, "1166": 0, "1167": 0, "1168": 0, "1169": 0, "1172": 0, "1173": 0, "1174": 0, "1175": 0, "1176": 0, "1177": 0, "1178": 0, "1179": 0, "1182": 0, "1184": 0, "1186": 0, "1187": 0, "1190": 0, "1191": 0, "1192": 0, "1193": 0, "1222": 1, "1225": 1, "1228": 1, "1223": 1, "1226": 0, "1229": 0, "1230": 0, "1231": 0, "1232": 0, "1233": 0, "1234": 0, "1235": 0, "1236": 0, "1238": 0, "1239": 0}}
+ git checkout a36caf5c74fe654cedc488e8a8a05fad388f8406
Note: switching to 'a36caf5c74fe654cedc488e8a8a05fad388f8406'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at a36caf5c74 Merge pull request #24572 from erdos4d/master
+ git apply /root/pre_state.patch
error: unrecognized input
