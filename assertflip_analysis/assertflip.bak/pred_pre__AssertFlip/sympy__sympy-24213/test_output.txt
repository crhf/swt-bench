+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD e8c22f6eac7314be8d92590bfff92ced79ee03e2
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch master
nothing to commit, working tree clean
+ git show
commit e8c22f6eac7314be8d92590bfff92ced79ee03e2
Merge: 13ab4047a6 5b7d208db6
Author: Chris Smith <smichr@gmail.com>
Date:   Thu Nov 3 15:03:32 2022 -0500

    Merge pull request #24214 from TJStienstra/FixMailmap
    
    Fix mailmap

+ git diff e8c22f6eac7314be8d92590bfff92ced79ee03e2
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Requirement already satisfied: mpmath>=0.19 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from sympy==1.12.dev0) (1.3.0)
Installing collected packages: sympy
  Attempting uninstall: sympy
    Found existing installation: sympy 1.12.dev0
    Uninstalling sympy-1.12.dev0:
      Successfully uninstalled sympy-1.12.dev0
  DEPRECATION: Legacy editable install of sympy==1.12.dev0 from file:///testbed (setup.py develop) is deprecated. pip 25.3 will enforce this behaviour change. A possible replacement is to add a pyproject.toml or enable --use-pep517, and use setuptools >= 64. If the resulting installation is not behaving as expected, try using --config-settings editable_mode=compat. Please consult the setuptools documentation for more information. Discussion can be found at https://github.com/pypa/pip/issues/11457
  Running setup.py develop for sympy
Successfully installed sympy
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git apply -v -
Checking patch sympy/polys/tests/test_coverup_sympy__sympy-24213.py...
Applied patch sympy/polys/tests/test_coverup_sympy__sympy-24213.py cleanly.
+ PYTHONWARNINGS=ignore::UserWarning,ignore::SyntaxWarning
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(sympy/physics/units/unitsystem\.py)' bin/test -C --verbose sympy/polys/tests/test_coverup_sympy__sympy-24213.p
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(sympy/physics/units/unitsystem\\.py)']
============================= test process starts ==============================
executable:         /opt/miniconda3/envs/testbed/bin/python3  (3.9.23-final-0) [CPython]
architecture:       64-bit
cache:              no
ground types:       python 
numpy:              None
random seed:        66466611
hash randomization: on (PYTHONHASHSEED=1093554679)

0.42 unitsystem.py(1): """
0.42 unitsystem.py(5): from typing import Dict as tDict, Set as tSet
0.42 unitsystem.py(7): from sympy.core.add import Add
0.42 unitsystem.py(8): from sympy.core.function import (Derivative, Function)
0.42 unitsystem.py(9): from sympy.core.mul import Mul
0.42 unitsystem.py(10): from sympy.core.power import Pow
0.42 unitsystem.py(11): from sympy.core.singleton import S
0.42 unitsystem.py(12): from sympy.physics.units.dimensions import _QuantityMapper
0.42 unitsystem.py(13): from sympy.physics.units.quantities import Quantity
0.47 unitsystem.py(15): from .dimensions import Dimension
0.47 unitsystem.py(18): class UnitSystem(_QuantityMapper):
0.47 unitsystem.py(18): class UnitSystem(_QuantityMapper):
0.47 unitsystem.py(19):     """
0.47 unitsystem.py(28):     _unit_systems = {}  # type: tDict[str, UnitSystem]
0.47 unitsystem.py(30):     def __init__(self, base_units, units=(), name="", descr="", dimension_system=None, derived_units: tDict[Dimension, Quantity]={}):
0.47 unitsystem.py(45):     def __str__(self):
0.47 unitsystem.py(59):     def __repr__(self):
0.47 unitsystem.py(62):     def extend(self, base, units=(), name="", description="", dimension_system=None, derived_units: tDict[Dimension, Quantity]={}):
0.47 unitsystem.py(75):     def get_dimension_system(self):
0.47 unitsystem.py(78):     def get_quantity_dimension(self, unit):
0.47 unitsystem.py(84):     def get_quantity_scale_factor(self, unit):
0.47 unitsystem.py(90):     @staticmethod
0.47 unitsystem.py(91):     def get_unit_system(unit_system):
0.47 unitsystem.py(105):     @staticmethod
0.47 unitsystem.py(106):     def get_default_unit_system():
0.47 unitsystem.py(109):     @property
0.47 unitsystem.py(110):     def dim(self):
0.47 unitsystem.py(118):     @property
0.47 unitsystem.py(119):     def is_consistent(self):
0.47 unitsystem.py(126):     @property
0.47 unitsystem.py(127):     def derived_units(self) -> tDict[Dimension, Quantity]:
0.47 unitsystem.py(130):     def get_dimensional_expr(self, expr):
0.47 unitsystem.py(152):     def _collect_factor_and_dimension(self, expr):
0.47 unitsystem.py(201):     def get_units_non_prefixed(self) -> tSet[Quantity]:
0.67 unitsystem.py(32):         UnitSystem._unit_systems[name] = self
0.67 unitsystem.py(34):         self.name = name
0.67 unitsystem.py(35):         self.descr = descr
0.67 unitsystem.py(37):         self._base_units = base_units
0.67 unitsystem.py(38):         self._dimension_system = dimension_system
0.67 unitsystem.py(39):         self._units = tuple(set(base_units) | set(units))
0.67 unitsystem.py(40):         self._base_units = tuple(base_units)
0.67 unitsystem.py(41):         self._derived_units = derived_units
0.67 unitsystem.py(43):         super().__init__()
0.70 unitsystem.py(70):         base = self._base_units + tuple(base)
0.70 unitsystem.py(71):         units = self._units + tuple(units)
0.70 unitsystem.py(73):         return UnitSystem(base, units, name, description, dimension_system, {**self._derived_units, **derived_units})
0.70 unitsystem.py(32):         UnitSystem._unit_systems[name] = self
0.70 unitsystem.py(34):         self.name = name
0.70 unitsystem.py(35):         self.descr = descr
0.70 unitsystem.py(37):         self._base_units = base_units
0.70 unitsystem.py(38):         self._dimension_system = dimension_system
0.70 unitsystem.py(39):         self._units = tuple(set(base_units) | set(units))
0.70 unitsystem.py(40):         self._base_units = tuple(base_units)
0.70 unitsystem.py(41):         self._derived_units = derived_units
0.70 unitsystem.py(43):         super().__init__()
0.70 unitsystem.py(32):         UnitSystem._unit_systems[name] = self
0.70 unitsystem.py(34):         self.name = name
0.70 unitsystem.py(35):         self.descr = descr
0.70 unitsystem.py(37):         self._base_units = base_units
0.70 unitsystem.py(38):         self._dimension_system = dimension_system
0.70 unitsystem.py(39):         self._units = tuple(set(base_units) | set(units))
0.70 unitsystem.py(40):         self._base_units = tuple(base_units)
0.70 unitsystem.py(41):         self._derived_units = derived_units
0.70 unitsystem.py(43):         super().__init__()
0.77 unitsystem.py(70):         base = self._base_units + tuple(base)
0.77 unitsystem.py(71):         units = self._units + tuple(units)
0.77 unitsystem.py(73):         return UnitSystem(base, units, name, description, dimension_system, {**self._derived_units, **derived_units})
0.77 unitsystem.py(32):         UnitSystem._unit_systems[name] = self
0.77 unitsystem.py(34):         self.name = name
0.77 unitsystem.py(35):         self.descr = descr
0.77 unitsystem.py(37):         self._base_units = base_units
0.77 unitsystem.py(38):         self._dimension_system = dimension_system
0.77 unitsystem.py(39):         self._units = tuple(set(base_units) | set(units))
0.78 unitsystem.py(40):         self._base_units = tuple(base_units)
0.78 unitsystem.py(41):         self._derived_units = derived_units
0.78 unitsystem.py(43):         super().__init__()
0.78 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.78 unitsystem.py(76):         return self._dimension_system
0.78 unitsystem.py(86):         if unit in qsfm:
0.78 unitsystem.py(88):         return super().get_quantity_scale_factor(unit)
0.78 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.78 unitsystem.py(76):         return self._dimension_system
0.78 unitsystem.py(86):         if unit in qsfm:
0.78 unitsystem.py(87):             return qsfm[unit]
0.78 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.78 unitsystem.py(76):         return self._dimension_system
0.78 unitsystem.py(86):         if unit in qsfm:
0.78 unitsystem.py(88):         return super().get_quantity_scale_factor(unit)
0.78 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.78 unitsystem.py(76):         return self._dimension_system
0.78 unitsystem.py(86):         if unit in qsfm:
0.78 unitsystem.py(88):         return super().get_quantity_scale_factor(unit)
0.78 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.78 unitsystem.py(76):         return self._dimension_system
0.78 unitsystem.py(86):         if unit in qsfm:
0.78 unitsystem.py(88):         return super().get_quantity_scale_factor(unit)
0.78 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.78 unitsystem.py(76):         return self._dimension_system
0.78 unitsystem.py(86):         if unit in qsfm:
0.78 unitsystem.py(88):         return super().get_quantity_scale_factor(unit)
0.78 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.78 unitsystem.py(76):         return self._dimension_system
0.78 unitsystem.py(86):         if unit in qsfm:
0.78 unitsystem.py(88):         return super().get_quantity_scale_factor(unit)
0.78 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.78 unitsystem.py(76):         return self._dimension_system
0.78 unitsystem.py(86):         if unit in qsfm:
0.78 unitsystem.py(88):         return super().get_quantity_scale_factor(unit)
0.78 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.78 unitsystem.py(76):         return self._dimension_system
0.78 unitsystem.py(86):         if unit in qsfm:
0.78 unitsystem.py(88):         return super().get_quantity_scale_factor(unit)
0.78 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.78 unitsystem.py(76):         return self._dimension_system
0.78 unitsystem.py(86):         if unit in qsfm:
0.78 unitsystem.py(87):             return qsfm[unit]
0.78 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.78 unitsystem.py(76):         return self._dimension_system
0.78 unitsystem.py(86):         if unit in qsfm:
0.78 unitsystem.py(88):         return super().get_quantity_scale_factor(unit)
0.78 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.78 unitsystem.py(76):         return self._dimension_system
0.78 unitsystem.py(86):         if unit in qsfm:
0.78 unitsystem.py(87):             return qsfm[unit]
0.78 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.78 unitsystem.py(76):         return self._dimension_system
0.78 unitsystem.py(86):         if unit in qsfm:
0.78 unitsystem.py(87):             return qsfm[unit]
0.78 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.78 unitsystem.py(76):         return self._dimension_system
0.78 unitsystem.py(86):         if unit in qsfm:
0.78 unitsystem.py(88):         return super().get_quantity_scale_factor(unit)
0.78 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.78 unitsystem.py(76):         return self._dimension_system
0.78 unitsystem.py(86):         if unit in qsfm:
0.78 unitsystem.py(88):         return super().get_quantity_scale_factor(unit)
0.78 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.78 unitsystem.py(76):         return self._dimension_system
0.78 unitsystem.py(86):         if unit in qsfm:
0.78 unitsystem.py(87):             return qsfm[unit]
0.78 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.78 unitsystem.py(76):         return self._dimension_system
0.78 unitsystem.py(86):         if unit in qsfm:
0.78 unitsystem.py(87):             return qsfm[unit]
0.78 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.78 unitsystem.py(76):         return self._dimension_system
0.78 unitsystem.py(86):         if unit in qsfm:
0.78 unitsystem.py(88):         return super().get_quantity_scale_factor(unit)
0.78 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.78 unitsystem.py(76):         return self._dimension_system
0.78 unitsystem.py(86):         if unit in qsfm:
0.78 unitsystem.py(88):         return super().get_quantity_scale_factor(unit)
0.78 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.78 unitsystem.py(76):         return self._dimension_system
0.78 unitsystem.py(86):         if unit in qsfm:
0.78 unitsystem.py(87):             return qsfm[unit]
0.78 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.78 unitsystem.py(76):         return self._dimension_system
0.78 unitsystem.py(86):         if unit in qsfm:
0.78 unitsystem.py(88):         return super().get_quantity_scale_factor(unit)
0.78 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.78 unitsystem.py(76):         return self._dimension_system
0.78 unitsystem.py(86):         if unit in qsfm:
0.78 unitsystem.py(87):             return qsfm[unit]
0.78 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.78 unitsystem.py(76):         return self._dimension_system
0.78 unitsystem.py(86):         if unit in qsfm:
0.78 unitsystem.py(87):             return qsfm[unit]
0.78 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.78 unitsystem.py(76):         return self._dimension_system
0.78 unitsystem.py(86):         if unit in qsfm:
0.78 unitsystem.py(87):             return qsfm[unit]
0.79 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.79 unitsystem.py(76):         return self._dimension_system
0.79 unitsystem.py(86):         if unit in qsfm:
0.79 unitsystem.py(88):         return super().get_quantity_scale_factor(unit)
0.79 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.79 unitsystem.py(76):         return self._dimension_system
0.79 unitsystem.py(86):         if unit in qsfm:
0.79 unitsystem.py(87):             return qsfm[unit]
0.79 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.79 unitsystem.py(76):         return self._dimension_system
0.79 unitsystem.py(86):         if unit in qsfm:
0.79 unitsystem.py(88):         return super().get_quantity_scale_factor(unit)
0.79 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.79 unitsystem.py(76):         return self._dimension_system
0.79 unitsystem.py(86):         if unit in qsfm:
0.79 unitsystem.py(88):         return super().get_quantity_scale_factor(unit)
0.79 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.79 unitsystem.py(76):         return self._dimension_system
0.79 unitsystem.py(86):         if unit in qsfm:
0.79 unitsystem.py(88):         return super().get_quantity_scale_factor(unit)
0.79 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.79 unitsystem.py(76):         return self._dimension_system
0.79 unitsystem.py(86):         if unit in qsfm:
0.79 unitsystem.py(87):             return qsfm[unit]
0.82 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.82 unitsystem.py(76):         return self._dimension_system
0.82 unitsystem.py(86):         if unit in qsfm:
0.82 unitsystem.py(88):         return super().get_quantity_scale_factor(unit)
0.82 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.82 unitsystem.py(76):         return self._dimension_system
0.82 unitsystem.py(86):         if unit in qsfm:
0.82 unitsystem.py(87):             return qsfm[unit]
0.82 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.82 unitsystem.py(76):         return self._dimension_system
0.82 unitsystem.py(86):         if unit in qsfm:
0.82 unitsystem.py(87):             return qsfm[unit]
0.82 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.82 unitsystem.py(76):         return self._dimension_system
0.82 unitsystem.py(86):         if unit in qsfm:
0.82 unitsystem.py(87):             return qsfm[unit]
0.85 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.85 unitsystem.py(76):         return self._dimension_system
0.85 unitsystem.py(86):         if unit in qsfm:
0.85 unitsystem.py(88):         return super().get_quantity_scale_factor(unit)
0.85 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.85 unitsystem.py(76):         return self._dimension_system
0.85 unitsystem.py(86):         if unit in qsfm:
0.85 unitsystem.py(88):         return super().get_quantity_scale_factor(unit)
0.85 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.85 unitsystem.py(76):         return self._dimension_system
0.85 unitsystem.py(86):         if unit in qsfm:
0.85 unitsystem.py(88):         return super().get_quantity_scale_factor(unit)
0.85 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.85 unitsystem.py(76):         return self._dimension_system
0.85 unitsystem.py(86):         if unit in qsfm:
0.85 unitsystem.py(88):         return super().get_quantity_scale_factor(unit)
0.86 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.86 unitsystem.py(76):         return self._dimension_system
0.86 unitsystem.py(86):         if unit in qsfm:
0.86 unitsystem.py(88):         return super().get_quantity_scale_factor(unit)
0.86 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.86 unitsystem.py(76):         return self._dimension_system
0.86 unitsystem.py(86):         if unit in qsfm:
0.86 unitsystem.py(87):             return qsfm[unit]
0.86 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.86 unitsystem.py(76):         return self._dimension_system
0.86 unitsystem.py(86):         if unit in qsfm:
0.86 unitsystem.py(88):         return super().get_quantity_scale_factor(unit)
0.86 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.86 unitsystem.py(76):         return self._dimension_system
0.86 unitsystem.py(86):         if unit in qsfm:
0.86 unitsystem.py(87):             return qsfm[unit]
0.86 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.86 unitsystem.py(76):         return self._dimension_system
0.86 unitsystem.py(86):         if unit in qsfm:
0.86 unitsystem.py(87):             return qsfm[unit]
0.86 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.86 unitsystem.py(76):         return self._dimension_system
0.86 unitsystem.py(86):         if unit in qsfm:
0.86 unitsystem.py(87):             return qsfm[unit]
0.86 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.86 unitsystem.py(76):         return self._dimension_system
0.86 unitsystem.py(86):         if unit in qsfm:
0.86 unitsystem.py(88):         return super().get_quantity_scale_factor(unit)
0.86 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.86 unitsystem.py(76):         return self._dimension_system
0.86 unitsystem.py(86):         if unit in qsfm:
0.86 unitsystem.py(87):             return qsfm[unit]
0.87 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.87 unitsystem.py(76):         return self._dimension_system
0.87 unitsystem.py(86):         if unit in qsfm:
0.87 unitsystem.py(88):         return super().get_quantity_scale_factor(unit)
0.87 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.87 unitsystem.py(76):         return self._dimension_system
0.87 unitsystem.py(86):         if unit in qsfm:
0.87 unitsystem.py(87):             return qsfm[unit]
0.88 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.88 unitsystem.py(76):         return self._dimension_system
0.88 unitsystem.py(86):         if unit in qsfm:
0.88 unitsystem.py(88):         return super().get_quantity_scale_factor(unit)
0.88 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.88 unitsystem.py(76):         return self._dimension_system
0.88 unitsystem.py(86):         if unit in qsfm:
0.88 unitsystem.py(87):             return qsfm[unit]
0.89 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.89 unitsystem.py(76):         return self._dimension_system
0.89 unitsystem.py(86):         if unit in qsfm:
0.89 unitsystem.py(88):         return super().get_quantity_scale_factor(unit)
0.89 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.89 unitsystem.py(76):         return self._dimension_system
0.89 unitsystem.py(86):         if unit in qsfm:
0.89 unitsystem.py(88):         return super().get_quantity_scale_factor(unit)
0.89 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.89 unitsystem.py(76):         return self._dimension_system
0.89 unitsystem.py(86):         if unit in qsfm:
0.89 unitsystem.py(88):         return super().get_quantity_scale_factor(unit)
0.89 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.89 unitsystem.py(76):         return self._dimension_system
0.89 unitsystem.py(86):         if unit in qsfm:
0.89 unitsystem.py(87):             return qsfm[unit]
0.89 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.89 unitsystem.py(76):         return self._dimension_system
0.89 unitsystem.py(86):         if unit in qsfm:
0.89 unitsystem.py(88):         return super().get_quantity_scale_factor(unit)
0.89 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.89 unitsystem.py(76):         return self._dimension_system
0.89 unitsystem.py(86):         if unit in qsfm:
0.89 unitsystem.py(88):         return super().get_quantity_scale_factor(unit)
0.89 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.89 unitsystem.py(76):         return self._dimension_system
0.89 unitsystem.py(86):         if unit in qsfm:
0.89 unitsystem.py(88):         return super().get_quantity_scale_factor(unit)
0.89 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.89 unitsystem.py(76):         return self._dimension_system
0.89 unitsystem.py(86):         if unit in qsfm:
0.89 unitsystem.py(87):             return qsfm[unit]
0.89 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.89 unitsystem.py(76):         return self._dimension_system
0.89 unitsystem.py(86):         if unit in qsfm:
0.89 unitsystem.py(87):             return qsfm[unit]
0.89 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.89 unitsystem.py(76):         return self._dimension_system
0.89 unitsystem.py(86):         if unit in qsfm:
0.89 unitsystem.py(88):         return super().get_quantity_scale_factor(unit)
0.89 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.89 unitsystem.py(76):         return self._dimension_system
0.89 unitsystem.py(86):         if unit in qsfm:
0.89 unitsystem.py(88):         return super().get_quantity_scale_factor(unit)
0.89 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.89 unitsystem.py(76):         return self._dimension_system
0.89 unitsystem.py(86):         if unit in qsfm:
0.89 unitsystem.py(87):             return qsfm[unit]
0.89 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.89 unitsystem.py(76):         return self._dimension_system
0.89 unitsystem.py(86):         if unit in qsfm:
0.89 unitsystem.py(88):         return super().get_quantity_scale_factor(unit)
0.89 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.89 unitsystem.py(76):         return self._dimension_system
0.89 unitsystem.py(86):         if unit in qsfm:
0.89 unitsystem.py(88):         return super().get_quantity_scale_factor(unit)
0.89 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.89 unitsystem.py(76):         return self._dimension_system
0.89 unitsystem.py(86):         if unit in qsfm:
0.89 unitsystem.py(88):         return super().get_quantity_scale_factor(unit)
0.89 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.89 unitsystem.py(76):         return self._dimension_system
0.89 unitsystem.py(86):         if unit in qsfm:
0.89 unitsystem.py(87):             return qsfm[unit]
0.90 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.90 unitsystem.py(76):         return self._dimension_system
0.90 unitsystem.py(86):         if unit in qsfm:
0.90 unitsystem.py(87):             return qsfm[unit]
0.90 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.90 unitsystem.py(76):         return self._dimension_system
0.90 unitsystem.py(86):         if unit in qsfm:
0.90 unitsystem.py(88):         return super().get_quantity_scale_factor(unit)
0.90 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.90 unitsystem.py(76):         return self._dimension_system
0.90 unitsystem.py(86):         if unit in qsfm:
0.90 unitsystem.py(88):         return super().get_quantity_scale_factor(unit)
0.90 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.90 unitsystem.py(76):         return self._dimension_system
0.90 unitsystem.py(86):         if unit in qsfm:
0.90 unitsystem.py(88):         return super().get_quantity_scale_factor(unit)
0.90 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.90 unitsystem.py(76):         return self._dimension_system
0.90 unitsystem.py(86):         if unit in qsfm:
0.90 unitsystem.py(88):         return super().get_quantity_scale_factor(unit)
0.90 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.90 unitsystem.py(76):         return self._dimension_system
0.90 unitsystem.py(86):         if unit in qsfm:
0.90 unitsystem.py(87):             return qsfm[unit]
0.90 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.90 unitsystem.py(76):         return self._dimension_system
0.90 unitsystem.py(86):         if unit in qsfm:
0.90 unitsystem.py(87):             return qsfm[unit]
0.90 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.90 unitsystem.py(76):         return self._dimension_system
0.90 unitsystem.py(86):         if unit in qsfm:
0.90 unitsystem.py(87):             return qsfm[unit]
0.90 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.90 unitsystem.py(76):         return self._dimension_system
0.90 unitsystem.py(86):         if unit in qsfm:
0.90 unitsystem.py(87):             return qsfm[unit]
0.90 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.90 unitsystem.py(76):         return self._dimension_system
0.90 unitsystem.py(86):         if unit in qsfm:
0.90 unitsystem.py(87):             return qsfm[unit]
0.90 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.90 unitsystem.py(76):         return self._dimension_system
0.90 unitsystem.py(86):         if unit in qsfm:
0.90 unitsystem.py(87):             return qsfm[unit]
0.90 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.90 unitsystem.py(76):         return self._dimension_system
0.90 unitsystem.py(86):         if unit in qsfm:
0.90 unitsystem.py(87):             return qsfm[unit]
0.91 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.91 unitsystem.py(76):         return self._dimension_system
0.91 unitsystem.py(86):         if unit in qsfm:
0.91 unitsystem.py(87):             return qsfm[unit]
0.91 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.91 unitsystem.py(76):         return self._dimension_system
0.91 unitsystem.py(86):         if unit in qsfm:
0.91 unitsystem.py(88):         return super().get_quantity_scale_factor(unit)
0.91 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.91 unitsystem.py(76):         return self._dimension_system
0.91 unitsystem.py(86):         if unit in qsfm:
0.91 unitsystem.py(87):             return qsfm[unit]
0.91 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.91 unitsystem.py(76):         return self._dimension_system
0.91 unitsystem.py(86):         if unit in qsfm:
0.91 unitsystem.py(87):             return qsfm[unit]
0.91 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.91 unitsystem.py(76):         return self._dimension_system
0.91 unitsystem.py(86):         if unit in qsfm:
0.91 unitsystem.py(87):             return qsfm[unit]
0.92 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.92 unitsystem.py(76):         return self._dimension_system
0.92 unitsystem.py(86):         if unit in qsfm:
0.92 unitsystem.py(87):             return qsfm[unit]
0.92 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.92 unitsystem.py(76):         return self._dimension_system
0.92 unitsystem.py(86):         if unit in qsfm:
0.92 unitsystem.py(87):             return qsfm[unit]
0.92 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.92 unitsystem.py(76):         return self._dimension_system
0.92 unitsystem.py(86):         if unit in qsfm:
0.92 unitsystem.py(87):             return qsfm[unit]
0.92 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.92 unitsystem.py(76):         return self._dimension_system
0.92 unitsystem.py(86):         if unit in qsfm:
0.92 unitsystem.py(87):             return qsfm[unit]
0.93 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.93 unitsystem.py(76):         return self._dimension_system
0.93 unitsystem.py(86):         if unit in qsfm:
0.93 unitsystem.py(87):             return qsfm[unit]
0.93 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.93 unitsystem.py(76):         return self._dimension_system
0.93 unitsystem.py(86):         if unit in qsfm:
0.93 unitsystem.py(88):         return super().get_quantity_scale_factor(unit)
0.93 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.93 unitsystem.py(76):         return self._dimension_system
0.93 unitsystem.py(86):         if unit in qsfm:
0.93 unitsystem.py(88):         return super().get_quantity_scale_factor(unit)
0.93 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.93 unitsystem.py(76):         return self._dimension_system
0.93 unitsystem.py(86):         if unit in qsfm:
0.93 unitsystem.py(88):         return super().get_quantity_scale_factor(unit)
0.94 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.94 unitsystem.py(76):         return self._dimension_system
0.94 unitsystem.py(86):         if unit in qsfm:
0.94 unitsystem.py(87):             return qsfm[unit]
0.94 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.94 unitsystem.py(76):         return self._dimension_system
0.94 unitsystem.py(86):         if unit in qsfm:
0.94 unitsystem.py(88):         return super().get_quantity_scale_factor(unit)
0.94 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.94 unitsystem.py(76):         return self._dimension_system
0.94 unitsystem.py(86):         if unit in qsfm:
0.94 unitsystem.py(87):             return qsfm[unit]
0.94 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.94 unitsystem.py(76):         return self._dimension_system
0.94 unitsystem.py(86):         if unit in qsfm:
0.94 unitsystem.py(88):         return super().get_quantity_scale_factor(unit)
0.94 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.94 unitsystem.py(76):         return self._dimension_system
0.94 unitsystem.py(86):         if unit in qsfm:
0.94 unitsystem.py(88):         return super().get_quantity_scale_factor(unit)
0.94 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.94 unitsystem.py(76):         return self._dimension_system
0.94 unitsystem.py(86):         if unit in qsfm:
0.94 unitsystem.py(88):         return super().get_quantity_scale_factor(unit)
0.94 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.94 unitsystem.py(76):         return self._dimension_system
0.94 unitsystem.py(86):         if unit in qsfm:
0.94 unitsystem.py(88):         return super().get_quantity_scale_factor(unit)
0.95 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.95 unitsystem.py(76):         return self._dimension_system
0.95 unitsystem.py(86):         if unit in qsfm:
0.95 unitsystem.py(88):         return super().get_quantity_scale_factor(unit)
0.95 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.95 unitsystem.py(76):         return self._dimension_system
0.95 unitsystem.py(86):         if unit in qsfm:
0.95 unitsystem.py(88):         return super().get_quantity_scale_factor(unit)
0.95 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.95 unitsystem.py(76):         return self._dimension_system
0.95 unitsystem.py(86):         if unit in qsfm:
0.95 unitsystem.py(88):         return super().get_quantity_scale_factor(unit)
0.95 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.95 unitsystem.py(76):         return self._dimension_system
0.95 unitsystem.py(86):         if unit in qsfm:
0.95 unitsystem.py(88):         return super().get_quantity_scale_factor(unit)
0.96 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.96 unitsystem.py(76):         return self._dimension_system
0.96 unitsystem.py(86):         if unit in qsfm:
0.96 unitsystem.py(88):         return super().get_quantity_scale_factor(unit)
0.96 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.96 unitsystem.py(76):         return self._dimension_system
0.96 unitsystem.py(86):         if unit in qsfm:
0.96 unitsystem.py(87):             return qsfm[unit]
0.96 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.96 unitsystem.py(76):         return self._dimension_system
0.96 unitsystem.py(86):         if unit in qsfm:
0.96 unitsystem.py(88):         return super().get_quantity_scale_factor(unit)
0.96 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.96 unitsystem.py(76):         return self._dimension_system
0.96 unitsystem.py(86):         if unit in qsfm:
0.96 unitsystem.py(88):         return super().get_quantity_scale_factor(unit)
0.97 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.97 unitsystem.py(76):         return self._dimension_system
0.97 unitsystem.py(86):         if unit in qsfm:
0.97 unitsystem.py(88):         return super().get_quantity_scale_factor(unit)
0.97 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.97 unitsystem.py(76):         return self._dimension_system
0.97 unitsystem.py(86):         if unit in qsfm:
0.97 unitsystem.py(88):         return super().get_quantity_scale_factor(unit)
0.97 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.97 unitsystem.py(76):         return self._dimension_system
0.97 unitsystem.py(86):         if unit in qsfm:
0.97 unitsystem.py(88):         return super().get_quantity_scale_factor(unit)
0.97 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.97 unitsystem.py(76):         return self._dimension_system
0.97 unitsystem.py(86):         if unit in qsfm:
0.97 unitsystem.py(88):         return super().get_quantity_scale_factor(unit)
0.97 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.97 unitsystem.py(76):         return self._dimension_system
0.97 unitsystem.py(86):         if unit in qsfm:
0.97 unitsystem.py(88):         return super().get_quantity_scale_factor(unit)
0.98 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.98 unitsystem.py(76):         return self._dimension_system
0.98 unitsystem.py(86):         if unit in qsfm:
0.98 unitsystem.py(88):         return super().get_quantity_scale_factor(unit)
0.98 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.98 unitsystem.py(76):         return self._dimension_system
0.98 unitsystem.py(86):         if unit in qsfm:
0.98 unitsystem.py(88):         return super().get_quantity_scale_factor(unit)
0.98 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.98 unitsystem.py(76):         return self._dimension_system
0.98 unitsystem.py(86):         if unit in qsfm:
0.98 unitsystem.py(88):         return super().get_quantity_scale_factor(unit)
0.98 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.98 unitsystem.py(76):         return self._dimension_system
0.98 unitsystem.py(86):         if unit in qsfm:
0.98 unitsystem.py(88):         return super().get_quantity_scale_factor(unit)
0.98 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.98 unitsystem.py(76):         return self._dimension_system
0.98 unitsystem.py(86):         if unit in qsfm:
0.98 unitsystem.py(87):             return qsfm[unit]
0.98 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.98 unitsystem.py(76):         return self._dimension_system
0.98 unitsystem.py(86):         if unit in qsfm:
0.98 unitsystem.py(88):         return super().get_quantity_scale_factor(unit)
0.98 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.98 unitsystem.py(76):         return self._dimension_system
0.98 unitsystem.py(86):         if unit in qsfm:
0.98 unitsystem.py(88):         return super().get_quantity_scale_factor(unit)
0.98 unitsystem.py(131):         from sympy.physics.units import Quantity
0.98 unitsystem.py(132):         if isinstance(expr, Mul):
0.98 unitsystem.py(134):         elif isinstance(expr, Pow):
0.98 unitsystem.py(136):         elif isinstance(expr, Add):
0.98 unitsystem.py(138):         elif isinstance(expr, Derivative):
0.98 unitsystem.py(143):         elif isinstance(expr, Function):
0.98 unitsystem.py(148):         elif isinstance(expr, Quantity):
0.98 unitsystem.py(150):         return S.One
0.98 unitsystem.py(131):         from sympy.physics.units import Quantity
0.98 unitsystem.py(132):         if isinstance(expr, Mul):
0.98 unitsystem.py(134):         elif isinstance(expr, Pow):
0.98 unitsystem.py(136):         elif isinstance(expr, Add):
0.98 unitsystem.py(138):         elif isinstance(expr, Derivative):
0.98 unitsystem.py(143):         elif isinstance(expr, Function):
0.98 unitsystem.py(148):         elif isinstance(expr, Quantity):
0.98 unitsystem.py(150):         return S.One
0.98 unitsystem.py(131):         from sympy.physics.units import Quantity
0.98 unitsystem.py(132):         if isinstance(expr, Mul):
0.98 unitsystem.py(134):         elif isinstance(expr, Pow):
0.98 unitsystem.py(136):         elif isinstance(expr, Add):
0.98 unitsystem.py(138):         elif isinstance(expr, Derivative):
0.98 unitsystem.py(143):         elif isinstance(expr, Function):
0.98 unitsystem.py(148):         elif isinstance(expr, Quantity):
0.98 unitsystem.py(150):         return S.One
0.98 unitsystem.py(131):         from sympy.physics.units import Quantity
0.98 unitsystem.py(132):         if isinstance(expr, Mul):
0.98 unitsystem.py(134):         elif isinstance(expr, Pow):
0.98 unitsystem.py(136):         elif isinstance(expr, Add):
0.98 unitsystem.py(138):         elif isinstance(expr, Derivative):
0.98 unitsystem.py(143):         elif isinstance(expr, Function):
0.98 unitsystem.py(148):         elif isinstance(expr, Quantity):
0.98 unitsystem.py(150):         return S.One
0.98 unitsystem.py(131):         from sympy.physics.units import Quantity
0.98 unitsystem.py(132):         if isinstance(expr, Mul):
0.98 unitsystem.py(134):         elif isinstance(expr, Pow):
0.98 unitsystem.py(136):         elif isinstance(expr, Add):
0.98 unitsystem.py(138):         elif isinstance(expr, Derivative):
0.98 unitsystem.py(143):         elif isinstance(expr, Function):
0.98 unitsystem.py(148):         elif isinstance(expr, Quantity):
0.98 unitsystem.py(150):         return S.One
0.98 unitsystem.py(131):         from sympy.physics.units import Quantity
0.98 unitsystem.py(132):         if isinstance(expr, Mul):
0.98 unitsystem.py(134):         elif isinstance(expr, Pow):
0.98 unitsystem.py(136):         elif isinstance(expr, Add):
0.98 unitsystem.py(138):         elif isinstance(expr, Derivative):
0.98 unitsystem.py(143):         elif isinstance(expr, Function):
0.98 unitsystem.py(148):         elif isinstance(expr, Quantity):
0.98 unitsystem.py(150):         return S.One
0.98 unitsystem.py(131):         from sympy.physics.units import Quantity
0.98 unitsystem.py(132):         if isinstance(expr, Mul):
0.98 unitsystem.py(134):         elif isinstance(expr, Pow):
0.98 unitsystem.py(136):         elif isinstance(expr, Add):
0.98 unitsystem.py(138):         elif isinstance(expr, Derivative):
0.98 unitsystem.py(143):         elif isinstance(expr, Function):
0.98 unitsystem.py(148):         elif isinstance(expr, Quantity):
0.98 unitsystem.py(150):         return S.One
0.98 unitsystem.py(131):         from sympy.physics.units import Quantity
0.98 unitsystem.py(132):         if isinstance(expr, Mul):
0.98 unitsystem.py(134):         elif isinstance(expr, Pow):
0.98 unitsystem.py(136):         elif isinstance(expr, Add):
0.98 unitsystem.py(138):         elif isinstance(expr, Derivative):
0.98 unitsystem.py(143):         elif isinstance(expr, Function):
0.98 unitsystem.py(148):         elif isinstance(expr, Quantity):
0.98 unitsystem.py(150):         return S.One
0.98 unitsystem.py(131):         from sympy.physics.units import Quantity
0.98 unitsystem.py(132):         if isinstance(expr, Mul):
0.98 unitsystem.py(134):         elif isinstance(expr, Pow):
0.98 unitsystem.py(136):         elif isinstance(expr, Add):
0.98 unitsystem.py(138):         elif isinstance(expr, Derivative):
0.98 unitsystem.py(143):         elif isinstance(expr, Function):
0.98 unitsystem.py(148):         elif isinstance(expr, Quantity):
0.98 unitsystem.py(150):         return S.One
0.98 unitsystem.py(131):         from sympy.physics.units import Quantity
0.98 unitsystem.py(132):         if isinstance(expr, Mul):
0.98 unitsystem.py(134):         elif isinstance(expr, Pow):
0.98 unitsystem.py(136):         elif isinstance(expr, Add):
0.98 unitsystem.py(138):         elif isinstance(expr, Derivative):
0.98 unitsystem.py(143):         elif isinstance(expr, Function):
0.98 unitsystem.py(148):         elif isinstance(expr, Quantity):
0.98 unitsystem.py(150):         return S.One
0.98 unitsystem.py(131):         from sympy.physics.units import Quantity
0.98 unitsystem.py(132):         if isinstance(expr, Mul):
0.98 unitsystem.py(134):         elif isinstance(expr, Pow):
0.98 unitsystem.py(136):         elif isinstance(expr, Add):
0.98 unitsystem.py(138):         elif isinstance(expr, Derivative):
0.98 unitsystem.py(143):         elif isinstance(expr, Function):
0.98 unitsystem.py(148):         elif isinstance(expr, Quantity):
0.98 unitsystem.py(150):         return S.One
0.98 unitsystem.py(131):         from sympy.physics.units import Quantity
0.98 unitsystem.py(132):         if isinstance(expr, Mul):
0.98 unitsystem.py(134):         elif isinstance(expr, Pow):
0.98 unitsystem.py(136):         elif isinstance(expr, Add):
0.98 unitsystem.py(138):         elif isinstance(expr, Derivative):
0.98 unitsystem.py(143):         elif isinstance(expr, Function):
0.98 unitsystem.py(148):         elif isinstance(expr, Quantity):
0.98 unitsystem.py(150):         return S.One
0.98 unitsystem.py(131):         from sympy.physics.units import Quantity
0.98 unitsystem.py(132):         if isinstance(expr, Mul):
0.98 unitsystem.py(134):         elif isinstance(expr, Pow):
0.98 unitsystem.py(136):         elif isinstance(expr, Add):
0.98 unitsystem.py(138):         elif isinstance(expr, Derivative):
0.98 unitsystem.py(143):         elif isinstance(expr, Function):
0.98 unitsystem.py(148):         elif isinstance(expr, Quantity):
0.98 unitsystem.py(150):         return S.One
0.98 unitsystem.py(131):         from sympy.physics.units import Quantity
0.98 unitsystem.py(132):         if isinstance(expr, Mul):
0.98 unitsystem.py(134):         elif isinstance(expr, Pow):
0.98 unitsystem.py(136):         elif isinstance(expr, Add):
0.98 unitsystem.py(138):         elif isinstance(expr, Derivative):
0.98 unitsystem.py(143):         elif isinstance(expr, Function):
0.98 unitsystem.py(148):         elif isinstance(expr, Quantity):
0.98 unitsystem.py(150):         return S.One
0.98 unitsystem.py(131):         from sympy.physics.units import Quantity
0.98 unitsystem.py(132):         if isinstance(expr, Mul):
0.98 unitsystem.py(134):         elif isinstance(expr, Pow):
0.98 unitsystem.py(136):         elif isinstance(expr, Add):
0.98 unitsystem.py(138):         elif isinstance(expr, Derivative):
0.98 unitsystem.py(143):         elif isinstance(expr, Function):
0.98 unitsystem.py(148):         elif isinstance(expr, Quantity):
0.98 unitsystem.py(150):         return S.One
0.98 unitsystem.py(131):         from sympy.physics.units import Quantity
0.98 unitsystem.py(132):         if isinstance(expr, Mul):
0.98 unitsystem.py(134):         elif isinstance(expr, Pow):
0.98 unitsystem.py(136):         elif isinstance(expr, Add):
0.98 unitsystem.py(138):         elif isinstance(expr, Derivative):
0.98 unitsystem.py(143):         elif isinstance(expr, Function):
0.98 unitsystem.py(148):         elif isinstance(expr, Quantity):
0.98 unitsystem.py(150):         return S.One
0.98 unitsystem.py(131):         from sympy.physics.units import Quantity
0.98 unitsystem.py(132):         if isinstance(expr, Mul):
0.98 unitsystem.py(134):         elif isinstance(expr, Pow):
0.98 unitsystem.py(136):         elif isinstance(expr, Add):
0.98 unitsystem.py(138):         elif isinstance(expr, Derivative):
0.98 unitsystem.py(143):         elif isinstance(expr, Function):
0.98 unitsystem.py(148):         elif isinstance(expr, Quantity):
0.98 unitsystem.py(150):         return S.One
0.98 unitsystem.py(131):         from sympy.physics.units import Quantity
0.98 unitsystem.py(132):         if isinstance(expr, Mul):
0.98 unitsystem.py(134):         elif isinstance(expr, Pow):
0.98 unitsystem.py(136):         elif isinstance(expr, Add):
0.98 unitsystem.py(138):         elif isinstance(expr, Derivative):
0.98 unitsystem.py(143):         elif isinstance(expr, Function):
0.98 unitsystem.py(148):         elif isinstance(expr, Quantity):
0.98 unitsystem.py(150):         return S.One
0.98 unitsystem.py(131):         from sympy.physics.units import Quantity
0.98 unitsystem.py(132):         if isinstance(expr, Mul):
0.98 unitsystem.py(134):         elif isinstance(expr, Pow):
0.98 unitsystem.py(136):         elif isinstance(expr, Add):
0.98 unitsystem.py(138):         elif isinstance(expr, Derivative):
0.98 unitsystem.py(143):         elif isinstance(expr, Function):
0.98 unitsystem.py(148):         elif isinstance(expr, Quantity):
0.98 unitsystem.py(150):         return S.One
0.98 unitsystem.py(131):         from sympy.physics.units import Quantity
0.98 unitsystem.py(132):         if isinstance(expr, Mul):
0.98 unitsystem.py(134):         elif isinstance(expr, Pow):
0.98 unitsystem.py(136):         elif isinstance(expr, Add):
0.98 unitsystem.py(138):         elif isinstance(expr, Derivative):
0.98 unitsystem.py(143):         elif isinstance(expr, Function):
0.98 unitsystem.py(148):         elif isinstance(expr, Quantity):
0.98 unitsystem.py(150):         return S.One
0.98 unitsystem.py(131):         from sympy.physics.units import Quantity
0.98 unitsystem.py(132):         if isinstance(expr, Mul):
0.98 unitsystem.py(134):         elif isinstance(expr, Pow):
0.98 unitsystem.py(136):         elif isinstance(expr, Add):
0.98 unitsystem.py(138):         elif isinstance(expr, Derivative):
0.98 unitsystem.py(143):         elif isinstance(expr, Function):
0.98 unitsystem.py(148):         elif isinstance(expr, Quantity):
0.98 unitsystem.py(150):         return S.One
0.98 unitsystem.py(131):         from sympy.physics.units import Quantity
0.98 unitsystem.py(132):         if isinstance(expr, Mul):
0.98 unitsystem.py(133):             return Mul(*[self.get_dimensional_expr(i) for i in expr.args])
0.98 unitsystem.py(133):             return Mul(*[self.get_dimensional_expr(i) for i in expr.args])
0.98 unitsystem.py(131):         from sympy.physics.units import Quantity
0.98 unitsystem.py(132):         if isinstance(expr, Mul):
0.98 unitsystem.py(134):         elif isinstance(expr, Pow):
0.98 unitsystem.py(136):         elif isinstance(expr, Add):
0.98 unitsystem.py(138):         elif isinstance(expr, Derivative):
0.98 unitsystem.py(143):         elif isinstance(expr, Function):
0.98 unitsystem.py(148):         elif isinstance(expr, Quantity):
0.98 unitsystem.py(150):         return S.One
0.98 unitsystem.py(133):             return Mul(*[self.get_dimensional_expr(i) for i in expr.args])
0.98 unitsystem.py(131):         from sympy.physics.units import Quantity
0.98 unitsystem.py(132):         if isinstance(expr, Mul):
0.98 unitsystem.py(134):         elif isinstance(expr, Pow):
0.98 unitsystem.py(135):             return self.get_dimensional_expr(expr.base) ** expr.exp
0.98 unitsystem.py(131):         from sympy.physics.units import Quantity
0.98 unitsystem.py(132):         if isinstance(expr, Mul):
0.98 unitsystem.py(134):         elif isinstance(expr, Pow):
0.98 unitsystem.py(136):         elif isinstance(expr, Add):
0.98 unitsystem.py(138):         elif isinstance(expr, Derivative):
0.98 unitsystem.py(143):         elif isinstance(expr, Function):
0.98 unitsystem.py(148):         elif isinstance(expr, Quantity):
0.98 unitsystem.py(150):         return S.One
0.98 unitsystem.py(133):             return Mul(*[self.get_dimensional_expr(i) for i in expr.args])
0.98 unitsystem.py(131):         from sympy.physics.units import Quantity
0.98 unitsystem.py(132):         if isinstance(expr, Mul):
0.98 unitsystem.py(134):         elif isinstance(expr, Pow):
0.98 unitsystem.py(136):         elif isinstance(expr, Add):
0.98 unitsystem.py(138):         elif isinstance(expr, Derivative):
0.98 unitsystem.py(143):         elif isinstance(expr, Function):
0.98 unitsystem.py(148):         elif isinstance(expr, Quantity):
0.98 unitsystem.py(150):         return S.One
0.98 unitsystem.py(131):         from sympy.physics.units import Quantity
0.98 unitsystem.py(132):         if isinstance(expr, Mul):
0.98 unitsystem.py(134):         elif isinstance(expr, Pow):
0.98 unitsystem.py(136):         elif isinstance(expr, Add):
0.98 unitsystem.py(138):         elif isinstance(expr, Derivative):
0.98 unitsystem.py(143):         elif isinstance(expr, Function):
0.98 unitsystem.py(148):         elif isinstance(expr, Quantity):
0.98 unitsystem.py(150):         return S.One
0.98 unitsystem.py(131):         from sympy.physics.units import Quantity
0.98 unitsystem.py(132):         if isinstance(expr, Mul):
0.98 unitsystem.py(134):         elif isinstance(expr, Pow):
0.98 unitsystem.py(136):         elif isinstance(expr, Add):
0.98 unitsystem.py(138):         elif isinstance(expr, Derivative):
0.98 unitsystem.py(143):         elif isinstance(expr, Function):
0.98 unitsystem.py(148):         elif isinstance(expr, Quantity):
0.98 unitsystem.py(150):         return S.One
0.98 unitsystem.py(131):         from sympy.physics.units import Quantity
0.98 unitsystem.py(132):         if isinstance(expr, Mul):
0.98 unitsystem.py(134):         elif isinstance(expr, Pow):
0.98 unitsystem.py(136):         elif isinstance(expr, Add):
0.98 unitsystem.py(138):         elif isinstance(expr, Derivative):
0.98 unitsystem.py(143):         elif isinstance(expr, Function):
0.98 unitsystem.py(148):         elif isinstance(expr, Quantity):
0.98 unitsystem.py(150):         return S.One
0.98 unitsystem.py(131):         from sympy.physics.units import Quantity
0.98 unitsystem.py(132):         if isinstance(expr, Mul):
0.98 unitsystem.py(133):             return Mul(*[self.get_dimensional_expr(i) for i in expr.args])
0.98 unitsystem.py(133):             return Mul(*[self.get_dimensional_expr(i) for i in expr.args])
0.98 unitsystem.py(131):         from sympy.physics.units import Quantity
0.98 unitsystem.py(132):         if isinstance(expr, Mul):
0.98 unitsystem.py(134):         elif isinstance(expr, Pow):
0.98 unitsystem.py(136):         elif isinstance(expr, Add):
0.98 unitsystem.py(138):         elif isinstance(expr, Derivative):
0.98 unitsystem.py(143):         elif isinstance(expr, Function):
0.98 unitsystem.py(148):         elif isinstance(expr, Quantity):
0.98 unitsystem.py(150):         return S.One
0.98 unitsystem.py(133):             return Mul(*[self.get_dimensional_expr(i) for i in expr.args])
0.98 unitsystem.py(131):         from sympy.physics.units import Quantity
0.98 unitsystem.py(132):         if isinstance(expr, Mul):
0.98 unitsystem.py(134):         elif isinstance(expr, Pow):
0.98 unitsystem.py(135):             return self.get_dimensional_expr(expr.base) ** expr.exp
0.98 unitsystem.py(131):         from sympy.physics.units import Quantity
0.98 unitsystem.py(132):         if isinstance(expr, Mul):
0.98 unitsystem.py(134):         elif isinstance(expr, Pow):
0.98 unitsystem.py(136):         elif isinstance(expr, Add):
0.98 unitsystem.py(138):         elif isinstance(expr, Derivative):
0.98 unitsystem.py(143):         elif isinstance(expr, Function):
0.98 unitsystem.py(148):         elif isinstance(expr, Quantity):
0.98 unitsystem.py(150):         return S.One
0.98 unitsystem.py(133):             return Mul(*[self.get_dimensional_expr(i) for i in expr.args])
0.98 unitsystem.py(131):         from sympy.physics.units import Quantity
0.98 unitsystem.py(132):         if isinstance(expr, Mul):
0.98 unitsystem.py(134):         elif isinstance(expr, Pow):
0.98 unitsystem.py(136):         elif isinstance(expr, Add):
0.98 unitsystem.py(138):         elif isinstance(expr, Derivative):
0.98 unitsystem.py(143):         elif isinstance(expr, Function):
0.98 unitsystem.py(148):         elif isinstance(expr, Quantity):
0.98 unitsystem.py(150):         return S.One
0.98 unitsystem.py(131):         from sympy.physics.units import Quantity
0.98 unitsystem.py(132):         if isinstance(expr, Mul):
0.98 unitsystem.py(133):             return Mul(*[self.get_dimensional_expr(i) for i in expr.args])
0.98 unitsystem.py(133):             return Mul(*[self.get_dimensional_expr(i) for i in expr.args])
0.98 unitsystem.py(131):         from sympy.physics.units import Quantity
0.98 unitsystem.py(132):         if isinstance(expr, Mul):
0.98 unitsystem.py(134):         elif isinstance(expr, Pow):
0.98 unitsystem.py(136):         elif isinstance(expr, Add):
0.98 unitsystem.py(138):         elif isinstance(expr, Derivative):
0.98 unitsystem.py(143):         elif isinstance(expr, Function):
0.98 unitsystem.py(148):         elif isinstance(expr, Quantity):
0.98 unitsystem.py(150):         return S.One
0.98 unitsystem.py(133):             return Mul(*[self.get_dimensional_expr(i) for i in expr.args])
0.98 unitsystem.py(131):         from sympy.physics.units import Quantity
0.98 unitsystem.py(132):         if isinstance(expr, Mul):
0.98 unitsystem.py(134):         elif isinstance(expr, Pow):
0.98 unitsystem.py(136):         elif isinstance(expr, Add):
0.98 unitsystem.py(138):         elif isinstance(expr, Derivative):
0.98 unitsystem.py(143):         elif isinstance(expr, Function):
0.98 unitsystem.py(148):         elif isinstance(expr, Quantity):
0.98 unitsystem.py(150):         return S.One
0.98 unitsystem.py(133):             return Mul(*[self.get_dimensional_expr(i) for i in expr.args])
0.98 unitsystem.py(131):         from sympy.physics.units import Quantity
0.98 unitsystem.py(132):         if isinstance(expr, Mul):
0.98 unitsystem.py(133):             return Mul(*[self.get_dimensional_expr(i) for i in expr.args])
0.98 unitsystem.py(133):             return Mul(*[self.get_dimensional_expr(i) for i in expr.args])
0.98 unitsystem.py(131):         from sympy.physics.units import Quantity
0.98 unitsystem.py(132):         if isinstance(expr, Mul):
0.98 unitsystem.py(134):         elif isinstance(expr, Pow):
0.98 unitsystem.py(136):         elif isinstance(expr, Add):
0.98 unitsystem.py(138):         elif isinstance(expr, Derivative):
0.98 unitsystem.py(143):         elif isinstance(expr, Function):
0.98 unitsystem.py(148):         elif isinstance(expr, Quantity):
0.98 unitsystem.py(150):         return S.One
0.98 unitsystem.py(133):             return Mul(*[self.get_dimensional_expr(i) for i in expr.args])
0.98 unitsystem.py(131):         from sympy.physics.units import Quantity
0.98 unitsystem.py(132):         if isinstance(expr, Mul):
0.98 unitsystem.py(134):         elif isinstance(expr, Pow):
0.98 unitsystem.py(135):             return self.get_dimensional_expr(expr.base) ** expr.exp
0.98 unitsystem.py(131):         from sympy.physics.units import Quantity
0.98 unitsystem.py(132):         if isinstance(expr, Mul):
0.98 unitsystem.py(134):         elif isinstance(expr, Pow):
0.98 unitsystem.py(136):         elif isinstance(expr, Add):
0.98 unitsystem.py(138):         elif isinstance(expr, Derivative):
0.98 unitsystem.py(143):         elif isinstance(expr, Function):
0.98 unitsystem.py(148):         elif isinstance(expr, Quantity):
0.98 unitsystem.py(150):         return S.One
0.98 unitsystem.py(133):             return Mul(*[self.get_dimensional_expr(i) for i in expr.args])
0.98 unitsystem.py(131):         from sympy.physics.units import Quantity
0.98 unitsystem.py(132):         if isinstance(expr, Mul):
0.98 unitsystem.py(133):             return Mul(*[self.get_dimensional_expr(i) for i in expr.args])
0.98 unitsystem.py(133):             return Mul(*[self.get_dimensional_expr(i) for i in expr.args])
0.98 unitsystem.py(131):         from sympy.physics.units import Quantity
0.98 unitsystem.py(132):         if isinstance(expr, Mul):
0.98 unitsystem.py(134):         elif isinstance(expr, Pow):
0.98 unitsystem.py(136):         elif isinstance(expr, Add):
0.98 unitsystem.py(138):         elif isinstance(expr, Derivative):
0.98 unitsystem.py(143):         elif isinstance(expr, Function):
0.98 unitsystem.py(148):         elif isinstance(expr, Quantity):
0.98 unitsystem.py(150):         return S.One
0.98 unitsystem.py(133):             return Mul(*[self.get_dimensional_expr(i) for i in expr.args])
0.98 unitsystem.py(131):         from sympy.physics.units import Quantity
0.98 unitsystem.py(132):         if isinstance(expr, Mul):
0.98 unitsystem.py(134):         elif isinstance(expr, Pow):
0.98 unitsystem.py(136):         elif isinstance(expr, Add):
0.98 unitsystem.py(138):         elif isinstance(expr, Derivative):
0.98 unitsystem.py(143):         elif isinstance(expr, Function):
0.98 unitsystem.py(148):         elif isinstance(expr, Quantity):
0.98 unitsystem.py(150):         return S.One
0.98 unitsystem.py(133):             return Mul(*[self.get_dimensional_expr(i) for i in expr.args])
0.98 unitsystem.py(131):         from sympy.physics.units import Quantity
0.98 unitsystem.py(132):         if isinstance(expr, Mul):
0.98 unitsystem.py(134):         elif isinstance(expr, Pow):
0.98 unitsystem.py(136):         elif isinstance(expr, Add):
0.98 unitsystem.py(138):         elif isinstance(expr, Derivative):
0.98 unitsystem.py(143):         elif isinstance(expr, Function):
0.98 unitsystem.py(148):         elif isinstance(expr, Quantity):
0.98 unitsystem.py(150):         return S.One
0.98 unitsystem.py(131):         from sympy.physics.units import Quantity
0.98 unitsystem.py(132):         if isinstance(expr, Mul):
0.98 unitsystem.py(134):         elif isinstance(expr, Pow):
0.98 unitsystem.py(136):         elif isinstance(expr, Add):
0.98 unitsystem.py(138):         elif isinstance(expr, Derivative):
0.98 unitsystem.py(143):         elif isinstance(expr, Function):
0.98 unitsystem.py(148):         elif isinstance(expr, Quantity):
0.98 unitsystem.py(150):         return S.One
0.98 unitsystem.py(131):         from sympy.physics.units import Quantity
0.98 unitsystem.py(132):         if isinstance(expr, Mul):
0.98 unitsystem.py(134):         elif isinstance(expr, Pow):
0.98 unitsystem.py(136):         elif isinstance(expr, Add):
0.98 unitsystem.py(138):         elif isinstance(expr, Derivative):
0.98 unitsystem.py(143):         elif isinstance(expr, Function):
0.98 unitsystem.py(148):         elif isinstance(expr, Quantity):
0.98 unitsystem.py(150):         return S.One
0.98 unitsystem.py(131):         from sympy.physics.units import Quantity
0.98 unitsystem.py(132):         if isinstance(expr, Mul):
0.98 unitsystem.py(134):         elif isinstance(expr, Pow):
0.98 unitsystem.py(136):         elif isinstance(expr, Add):
0.98 unitsystem.py(138):         elif isinstance(expr, Derivative):
0.98 unitsystem.py(143):         elif isinstance(expr, Function):
0.98 unitsystem.py(148):         elif isinstance(expr, Quantity):
0.98 unitsystem.py(150):         return S.One
0.98 unitsystem.py(131):         from sympy.physics.units import Quantity
0.98 unitsystem.py(132):         if isinstance(expr, Mul):
0.98 unitsystem.py(134):         elif isinstance(expr, Pow):
0.98 unitsystem.py(136):         elif isinstance(expr, Add):
0.98 unitsystem.py(138):         elif isinstance(expr, Derivative):
0.98 unitsystem.py(143):         elif isinstance(expr, Function):
0.98 unitsystem.py(148):         elif isinstance(expr, Quantity):
0.98 unitsystem.py(150):         return S.One
0.98 unitsystem.py(131):         from sympy.physics.units import Quantity
0.98 unitsystem.py(132):         if isinstance(expr, Mul):
0.98 unitsystem.py(134):         elif isinstance(expr, Pow):
0.98 unitsystem.py(136):         elif isinstance(expr, Add):
0.98 unitsystem.py(138):         elif isinstance(expr, Derivative):
0.98 unitsystem.py(143):         elif isinstance(expr, Function):
0.98 unitsystem.py(148):         elif isinstance(expr, Quantity):
0.98 unitsystem.py(150):         return S.One
0.98 unitsystem.py(131):         from sympy.physics.units import Quantity
0.98 unitsystem.py(132):         if isinstance(expr, Mul):
0.98 unitsystem.py(134):         elif isinstance(expr, Pow):
0.98 unitsystem.py(136):         elif isinstance(expr, Add):
0.98 unitsystem.py(138):         elif isinstance(expr, Derivative):
0.98 unitsystem.py(143):         elif isinstance(expr, Function):
0.98 unitsystem.py(148):         elif isinstance(expr, Quantity):
0.98 unitsystem.py(150):         return S.One
0.98 unitsystem.py(131):         from sympy.physics.units import Quantity
0.98 unitsystem.py(132):         if isinstance(expr, Mul):
0.98 unitsystem.py(133):             return Mul(*[self.get_dimensional_expr(i) for i in expr.args])
0.98 unitsystem.py(133):             return Mul(*[self.get_dimensional_expr(i) for i in expr.args])
0.98 unitsystem.py(131):         from sympy.physics.units import Quantity
0.98 unitsystem.py(132):         if isinstance(expr, Mul):
0.98 unitsystem.py(134):         elif isinstance(expr, Pow):
0.98 unitsystem.py(136):         elif isinstance(expr, Add):
0.98 unitsystem.py(138):         elif isinstance(expr, Derivative):
0.98 unitsystem.py(143):         elif isinstance(expr, Function):
0.98 unitsystem.py(148):         elif isinstance(expr, Quantity):
0.98 unitsystem.py(150):         return S.One
0.98 unitsystem.py(133):             return Mul(*[self.get_dimensional_expr(i) for i in expr.args])
0.98 unitsystem.py(131):         from sympy.physics.units import Quantity
0.98 unitsystem.py(132):         if isinstance(expr, Mul):
0.98 unitsystem.py(134):         elif isinstance(expr, Pow):
0.98 unitsystem.py(135):             return self.get_dimensional_expr(expr.base) ** expr.exp
0.98 unitsystem.py(131):         from sympy.physics.units import Quantity
0.98 unitsystem.py(132):         if isinstance(expr, Mul):
0.98 unitsystem.py(134):         elif isinstance(expr, Pow):
0.98 unitsystem.py(136):         elif isinstance(expr, Add):
0.98 unitsystem.py(138):         elif isinstance(expr, Derivative):
0.98 unitsystem.py(143):         elif isinstance(expr, Function):
0.98 unitsystem.py(148):         elif isinstance(expr, Quantity):
0.98 unitsystem.py(150):         return S.One
0.98 unitsystem.py(133):             return Mul(*[self.get_dimensional_expr(i) for i in expr.args])
0.98 unitsystem.py(131):         from sympy.physics.units import Quantity
0.98 unitsystem.py(132):         if isinstance(expr, Mul):
0.98 unitsystem.py(134):         elif isinstance(expr, Pow):
0.98 unitsystem.py(135):             return self.get_dimensional_expr(expr.base) ** expr.exp
0.98 unitsystem.py(131):         from sympy.physics.units import Quantity
0.98 unitsystem.py(132):         if isinstance(expr, Mul):
0.98 unitsystem.py(134):         elif isinstance(expr, Pow):
0.98 unitsystem.py(136):         elif isinstance(expr, Add):
0.98 unitsystem.py(138):         elif isinstance(expr, Derivative):
0.98 unitsystem.py(143):         elif isinstance(expr, Function):
0.98 unitsystem.py(148):         elif isinstance(expr, Quantity):
0.98 unitsystem.py(150):         return S.One
0.98 unitsystem.py(133):             return Mul(*[self.get_dimensional_expr(i) for i in expr.args])
0.98 unitsystem.py(131):         from sympy.physics.units import Quantity
0.98 unitsystem.py(132):         if isinstance(expr, Mul):
0.98 unitsystem.py(133):             return Mul(*[self.get_dimensional_expr(i) for i in expr.args])
0.98 unitsystem.py(133):             return Mul(*[self.get_dimensional_expr(i) for i in expr.args])
0.98 unitsystem.py(131):         from sympy.physics.units import Quantity
0.98 unitsystem.py(132):         if isinstance(expr, Mul):
0.98 unitsystem.py(134):         elif isinstance(expr, Pow):
0.98 unitsystem.py(136):         elif isinstance(expr, Add):
0.98 unitsystem.py(138):         elif isinstance(expr, Derivative):
0.98 unitsystem.py(143):         elif isinstance(expr, Function):
0.98 unitsystem.py(148):         elif isinstance(expr, Quantity):
0.98 unitsystem.py(150):         return S.One
0.98 unitsystem.py(133):             return Mul(*[self.get_dimensional_expr(i) for i in expr.args])
0.98 unitsystem.py(131):         from sympy.physics.units import Quantity
0.98 unitsystem.py(132):         if isinstance(expr, Mul):
0.98 unitsystem.py(134):         elif isinstance(expr, Pow):
0.98 unitsystem.py(135):             return self.get_dimensional_expr(expr.base) ** expr.exp
0.98 unitsystem.py(131):         from sympy.physics.units import Quantity
0.98 unitsystem.py(132):         if isinstance(expr, Mul):
0.98 unitsystem.py(134):         elif isinstance(expr, Pow):
0.98 unitsystem.py(136):         elif isinstance(expr, Add):
0.98 unitsystem.py(138):         elif isinstance(expr, Derivative):
0.98 unitsystem.py(143):         elif isinstance(expr, Function):
0.98 unitsystem.py(148):         elif isinstance(expr, Quantity):
0.98 unitsystem.py(150):         return S.One
0.98 unitsystem.py(133):             return Mul(*[self.get_dimensional_expr(i) for i in expr.args])
0.98 unitsystem.py(131):         from sympy.physics.units import Quantity
0.98 unitsystem.py(132):         if isinstance(expr, Mul):
0.98 unitsystem.py(134):         elif isinstance(expr, Pow):
0.98 unitsystem.py(135):             return self.get_dimensional_expr(expr.base) ** expr.exp
0.98 unitsystem.py(131):         from sympy.physics.units import Quantity
0.98 unitsystem.py(132):         if isinstance(expr, Mul):
0.98 unitsystem.py(134):         elif isinstance(expr, Pow):
0.98 unitsystem.py(136):         elif isinstance(expr, Add):
0.98 unitsystem.py(138):         elif isinstance(expr, Derivative):
0.98 unitsystem.py(143):         elif isinstance(expr, Function):
0.98 unitsystem.py(148):         elif isinstance(expr, Quantity):
0.98 unitsystem.py(150):         return S.One
0.98 unitsystem.py(133):             return Mul(*[self.get_dimensional_expr(i) for i in expr.args])
0.98 unitsystem.py(131):         from sympy.physics.units import Quantity
0.98 unitsystem.py(132):         if isinstance(expr, Mul):
0.98 unitsystem.py(133):             return Mul(*[self.get_dimensional_expr(i) for i in expr.args])
0.98 unitsystem.py(133):             return Mul(*[self.get_dimensional_expr(i) for i in expr.args])
0.98 unitsystem.py(131):         from sympy.physics.units import Quantity
0.98 unitsystem.py(132):         if isinstance(expr, Mul):
0.98 unitsystem.py(134):         elif isinstance(expr, Pow):
0.98 unitsystem.py(136):         elif isinstance(expr, Add):
0.98 unitsystem.py(138):         elif isinstance(expr, Derivative):
0.98 unitsystem.py(143):         elif isinstance(expr, Function):
0.98 unitsystem.py(148):         elif isinstance(expr, Quantity):
0.98 unitsystem.py(150):         return S.One
0.98 unitsystem.py(133):             return Mul(*[self.get_dimensional_expr(i) for i in expr.args])
0.98 unitsystem.py(131):         from sympy.physics.units import Quantity
0.98 unitsystem.py(132):         if isinstance(expr, Mul):
0.98 unitsystem.py(134):         elif isinstance(expr, Pow):
0.98 unitsystem.py(135):             return self.get_dimensional_expr(expr.base) ** expr.exp
0.98 unitsystem.py(131):         from sympy.physics.units import Quantity
0.98 unitsystem.py(132):         if isinstance(expr, Mul):
0.98 unitsystem.py(134):         elif isinstance(expr, Pow):
0.98 unitsystem.py(136):         elif isinstance(expr, Add):
0.98 unitsystem.py(138):         elif isinstance(expr, Derivative):
0.98 unitsystem.py(143):         elif isinstance(expr, Function):
0.98 unitsystem.py(148):         elif isinstance(expr, Quantity):
0.98 unitsystem.py(150):         return S.One
0.98 unitsystem.py(133):             return Mul(*[self.get_dimensional_expr(i) for i in expr.args])
0.98 unitsystem.py(131):         from sympy.physics.units import Quantity
0.98 unitsystem.py(132):         if isinstance(expr, Mul):
0.98 unitsystem.py(134):         elif isinstance(expr, Pow):
0.98 unitsystem.py(135):             return self.get_dimensional_expr(expr.base) ** expr.exp
0.98 unitsystem.py(131):         from sympy.physics.units import Quantity
0.98 unitsystem.py(132):         if isinstance(expr, Mul):
0.98 unitsystem.py(134):         elif isinstance(expr, Pow):
0.98 unitsystem.py(136):         elif isinstance(expr, Add):
0.98 unitsystem.py(138):         elif isinstance(expr, Derivative):
0.98 unitsystem.py(143):         elif isinstance(expr, Function):
0.98 unitsystem.py(148):         elif isinstance(expr, Quantity):
0.98 unitsystem.py(150):         return S.One
0.98 unitsystem.py(133):             return Mul(*[self.get_dimensional_expr(i) for i in expr.args])
0.98 unitsystem.py(131):         from sympy.physics.units import Quantity
0.98 unitsystem.py(132):         if isinstance(expr, Mul):
0.98 unitsystem.py(133):             return Mul(*[self.get_dimensional_expr(i) for i in expr.args])
0.98 unitsystem.py(133):             return Mul(*[self.get_dimensional_expr(i) for i in expr.args])
0.98 unitsystem.py(131):         from sympy.physics.units import Quantity
0.98 unitsystem.py(132):         if isinstance(expr, Mul):
0.98 unitsystem.py(134):         elif isinstance(expr, Pow):
0.98 unitsystem.py(136):         elif isinstance(expr, Add):
0.98 unitsystem.py(138):         elif isinstance(expr, Derivative):
0.98 unitsystem.py(143):         elif isinstance(expr, Function):
0.98 unitsystem.py(148):         elif isinstance(expr, Quantity):
0.98 unitsystem.py(150):         return S.One
0.98 unitsystem.py(133):             return Mul(*[self.get_dimensional_expr(i) for i in expr.args])
0.98 unitsystem.py(131):         from sympy.physics.units import Quantity
0.98 unitsystem.py(132):         if isinstance(expr, Mul):
0.98 unitsystem.py(134):         elif isinstance(expr, Pow):
0.99 unitsystem.py(135):             return self.get_dimensional_expr(expr.base) ** expr.exp
0.99 unitsystem.py(131):         from sympy.physics.units import Quantity
0.99 unitsystem.py(132):         if isinstance(expr, Mul):
0.99 unitsystem.py(134):         elif isinstance(expr, Pow):
0.99 unitsystem.py(136):         elif isinstance(expr, Add):
0.99 unitsystem.py(138):         elif isinstance(expr, Derivative):
0.99 unitsystem.py(143):         elif isinstance(expr, Function):
0.99 unitsystem.py(148):         elif isinstance(expr, Quantity):
0.99 unitsystem.py(150):         return S.One
0.99 unitsystem.py(133):             return Mul(*[self.get_dimensional_expr(i) for i in expr.args])
0.99 unitsystem.py(131):         from sympy.physics.units import Quantity
0.99 unitsystem.py(132):         if isinstance(expr, Mul):
0.99 unitsystem.py(134):         elif isinstance(expr, Pow):
0.99 unitsystem.py(135):             return self.get_dimensional_expr(expr.base) ** expr.exp
0.99 unitsystem.py(131):         from sympy.physics.units import Quantity
0.99 unitsystem.py(132):         if isinstance(expr, Mul):
0.99 unitsystem.py(134):         elif isinstance(expr, Pow):
0.99 unitsystem.py(136):         elif isinstance(expr, Add):
0.99 unitsystem.py(138):         elif isinstance(expr, Derivative):
0.99 unitsystem.py(143):         elif isinstance(expr, Function):
0.99 unitsystem.py(148):         elif isinstance(expr, Quantity):
0.99 unitsystem.py(150):         return S.One
0.99 unitsystem.py(133):             return Mul(*[self.get_dimensional_expr(i) for i in expr.args])
0.99 unitsystem.py(131):         from sympy.physics.units import Quantity
0.99 unitsystem.py(132):         if isinstance(expr, Mul):
0.99 unitsystem.py(133):             return Mul(*[self.get_dimensional_expr(i) for i in expr.args])
0.99 unitsystem.py(133):             return Mul(*[self.get_dimensional_expr(i) for i in expr.args])
0.99 unitsystem.py(131):         from sympy.physics.units import Quantity
0.99 unitsystem.py(132):         if isinstance(expr, Mul):
0.99 unitsystem.py(134):         elif isinstance(expr, Pow):
0.99 unitsystem.py(136):         elif isinstance(expr, Add):
0.99 unitsystem.py(138):         elif isinstance(expr, Derivative):
0.99 unitsystem.py(143):         elif isinstance(expr, Function):
0.99 unitsystem.py(148):         elif isinstance(expr, Quantity):
0.99 unitsystem.py(150):         return S.One
0.99 unitsystem.py(133):             return Mul(*[self.get_dimensional_expr(i) for i in expr.args])
0.99 unitsystem.py(131):         from sympy.physics.units import Quantity
0.99 unitsystem.py(132):         if isinstance(expr, Mul):
0.99 unitsystem.py(134):         elif isinstance(expr, Pow):
0.99 unitsystem.py(135):             return self.get_dimensional_expr(expr.base) ** expr.exp
0.99 unitsystem.py(131):         from sympy.physics.units import Quantity
0.99 unitsystem.py(132):         if isinstance(expr, Mul):
0.99 unitsystem.py(134):         elif isinstance(expr, Pow):
0.99 unitsystem.py(136):         elif isinstance(expr, Add):
0.99 unitsystem.py(138):         elif isinstance(expr, Derivative):
0.99 unitsystem.py(143):         elif isinstance(expr, Function):
0.99 unitsystem.py(148):         elif isinstance(expr, Quantity):
0.99 unitsystem.py(150):         return S.One
0.99 unitsystem.py(133):             return Mul(*[self.get_dimensional_expr(i) for i in expr.args])
0.99 unitsystem.py(131):         from sympy.physics.units import Quantity
0.99 unitsystem.py(132):         if isinstance(expr, Mul):
0.99 unitsystem.py(134):         elif isinstance(expr, Pow):
0.99 unitsystem.py(135):             return self.get_dimensional_expr(expr.base) ** expr.exp
0.99 unitsystem.py(131):         from sympy.physics.units import Quantity
0.99 unitsystem.py(132):         if isinstance(expr, Mul):
0.99 unitsystem.py(134):         elif isinstance(expr, Pow):
0.99 unitsystem.py(136):         elif isinstance(expr, Add):
0.99 unitsystem.py(138):         elif isinstance(expr, Derivative):
0.99 unitsystem.py(143):         elif isinstance(expr, Function):
0.99 unitsystem.py(148):         elif isinstance(expr, Quantity):
0.99 unitsystem.py(150):         return S.One
0.99 unitsystem.py(133):             return Mul(*[self.get_dimensional_expr(i) for i in expr.args])
0.99 unitsystem.py(131):         from sympy.physics.units import Quantity
0.99 unitsystem.py(132):         if isinstance(expr, Mul):
0.99 unitsystem.py(133):             return Mul(*[self.get_dimensional_expr(i) for i in expr.args])
0.99 unitsystem.py(133):             return Mul(*[self.get_dimensional_expr(i) for i in expr.args])
0.99 unitsystem.py(131):         from sympy.physics.units import Quantity
0.99 unitsystem.py(132):         if isinstance(expr, Mul):
0.99 unitsystem.py(134):         elif isinstance(expr, Pow):
0.99 unitsystem.py(136):         elif isinstance(expr, Add):
0.99 unitsystem.py(138):         elif isinstance(expr, Derivative):
0.99 unitsystem.py(143):         elif isinstance(expr, Function):
0.99 unitsystem.py(148):         elif isinstance(expr, Quantity):
0.99 unitsystem.py(150):         return S.One
0.99 unitsystem.py(133):             return Mul(*[self.get_dimensional_expr(i) for i in expr.args])
0.99 unitsystem.py(131):         from sympy.physics.units import Quantity
0.99 unitsystem.py(132):         if isinstance(expr, Mul):
0.99 unitsystem.py(134):         elif isinstance(expr, Pow):
0.99 unitsystem.py(135):             return self.get_dimensional_expr(expr.base) ** expr.exp
0.99 unitsystem.py(131):         from sympy.physics.units import Quantity
0.99 unitsystem.py(132):         if isinstance(expr, Mul):
0.99 unitsystem.py(134):         elif isinstance(expr, Pow):
0.99 unitsystem.py(136):         elif isinstance(expr, Add):
0.99 unitsystem.py(138):         elif isinstance(expr, Derivative):
0.99 unitsystem.py(143):         elif isinstance(expr, Function):
0.99 unitsystem.py(148):         elif isinstance(expr, Quantity):
0.99 unitsystem.py(150):         return S.One
0.99 unitsystem.py(133):             return Mul(*[self.get_dimensional_expr(i) for i in expr.args])
0.99 unitsystem.py(131):         from sympy.physics.units import Quantity
0.99 unitsystem.py(132):         if isinstance(expr, Mul):
0.99 unitsystem.py(133):             return Mul(*[self.get_dimensional_expr(i) for i in expr.args])
0.99 unitsystem.py(133):             return Mul(*[self.get_dimensional_expr(i) for i in expr.args])
0.99 unitsystem.py(131):         from sympy.physics.units import Quantity
0.99 unitsystem.py(132):         if isinstance(expr, Mul):
0.99 unitsystem.py(134):         elif isinstance(expr, Pow):
0.99 unitsystem.py(136):         elif isinstance(expr, Add):
0.99 unitsystem.py(138):         elif isinstance(expr, Derivative):
0.99 unitsystem.py(143):         elif isinstance(expr, Function):
0.99 unitsystem.py(148):         elif isinstance(expr, Quantity):
0.99 unitsystem.py(150):         return S.One
0.99 unitsystem.py(133):             return Mul(*[self.get_dimensional_expr(i) for i in expr.args])
0.99 unitsystem.py(131):         from sympy.physics.units import Quantity
0.99 unitsystem.py(132):         if isinstance(expr, Mul):
0.99 unitsystem.py(134):         elif isinstance(expr, Pow):
0.99 unitsystem.py(135):             return self.get_dimensional_expr(expr.base) ** expr.exp
0.99 unitsystem.py(131):         from sympy.physics.units import Quantity
0.99 unitsystem.py(132):         if isinstance(expr, Mul):
0.99 unitsystem.py(134):         elif isinstance(expr, Pow):
0.99 unitsystem.py(136):         elif isinstance(expr, Add):
0.99 unitsystem.py(138):         elif isinstance(expr, Derivative):
0.99 unitsystem.py(143):         elif isinstance(expr, Function):
0.99 unitsystem.py(148):         elif isinstance(expr, Quantity):
0.99 unitsystem.py(150):         return S.One
0.99 unitsystem.py(133):             return Mul(*[self.get_dimensional_expr(i) for i in expr.args])
0.99 unitsystem.py(131):         from sympy.physics.units import Quantity
0.99 unitsystem.py(132):         if isinstance(expr, Mul):
0.99 unitsystem.py(134):         elif isinstance(expr, Pow):
0.99 unitsystem.py(135):             return self.get_dimensional_expr(expr.base) ** expr.exp
0.99 unitsystem.py(131):         from sympy.physics.units import Quantity
0.99 unitsystem.py(132):         if isinstance(expr, Mul):
0.99 unitsystem.py(134):         elif isinstance(expr, Pow):
0.99 unitsystem.py(136):         elif isinstance(expr, Add):
0.99 unitsystem.py(138):         elif isinstance(expr, Derivative):
0.99 unitsystem.py(143):         elif isinstance(expr, Function):
0.99 unitsystem.py(148):         elif isinstance(expr, Quantity):
0.99 unitsystem.py(150):         return S.One
0.99 unitsystem.py(133):             return Mul(*[self.get_dimensional_expr(i) for i in expr.args])
0.99 unitsystem.py(131):         from sympy.physics.units import Quantity
0.99 unitsystem.py(132):         if isinstance(expr, Mul):
0.99 unitsystem.py(133):             return Mul(*[self.get_dimensional_expr(i) for i in expr.args])
0.99 unitsystem.py(133):             return Mul(*[self.get_dimensional_expr(i) for i in expr.args])
0.99 unitsystem.py(131):         from sympy.physics.units import Quantity
0.99 unitsystem.py(132):         if isinstance(expr, Mul):
0.99 unitsystem.py(134):         elif isinstance(expr, Pow):
0.99 unitsystem.py(136):         elif isinstance(expr, Add):
0.99 unitsystem.py(138):         elif isinstance(expr, Derivative):
0.99 unitsystem.py(143):         elif isinstance(expr, Function):
0.99 unitsystem.py(148):         elif isinstance(expr, Quantity):
0.99 unitsystem.py(150):         return S.One
0.99 unitsystem.py(133):             return Mul(*[self.get_dimensional_expr(i) for i in expr.args])
0.99 unitsystem.py(131):         from sympy.physics.units import Quantity
0.99 unitsystem.py(132):         if isinstance(expr, Mul):
0.99 unitsystem.py(134):         elif isinstance(expr, Pow):
0.99 unitsystem.py(135):             return self.get_dimensional_expr(expr.base) ** expr.exp
0.99 unitsystem.py(131):         from sympy.physics.units import Quantity
0.99 unitsystem.py(132):         if isinstance(expr, Mul):
0.99 unitsystem.py(134):         elif isinstance(expr, Pow):
0.99 unitsystem.py(136):         elif isinstance(expr, Add):
0.99 unitsystem.py(138):         elif isinstance(expr, Derivative):
0.99 unitsystem.py(143):         elif isinstance(expr, Function):
0.99 unitsystem.py(148):         elif isinstance(expr, Quantity):
0.99 unitsystem.py(150):         return S.One
0.99 unitsystem.py(133):             return Mul(*[self.get_dimensional_expr(i) for i in expr.args])
0.99 unitsystem.py(131):         from sympy.physics.units import Quantity
0.99 unitsystem.py(132):         if isinstance(expr, Mul):
0.99 unitsystem.py(134):         elif isinstance(expr, Pow):
0.99 unitsystem.py(135):             return self.get_dimensional_expr(expr.base) ** expr.exp
0.99 unitsystem.py(131):         from sympy.physics.units import Quantity
0.99 unitsystem.py(132):         if isinstance(expr, Mul):
0.99 unitsystem.py(134):         elif isinstance(expr, Pow):
0.99 unitsystem.py(136):         elif isinstance(expr, Add):
0.99 unitsystem.py(138):         elif isinstance(expr, Derivative):
0.99 unitsystem.py(143):         elif isinstance(expr, Function):
0.99 unitsystem.py(148):         elif isinstance(expr, Quantity):
0.99 unitsystem.py(150):         return S.One
0.99 unitsystem.py(133):             return Mul(*[self.get_dimensional_expr(i) for i in expr.args])
0.99 unitsystem.py(131):         from sympy.physics.units import Quantity
0.99 unitsystem.py(132):         if isinstance(expr, Mul):
0.99 unitsystem.py(133):             return Mul(*[self.get_dimensional_expr(i) for i in expr.args])
0.99 unitsystem.py(133):             return Mul(*[self.get_dimensional_expr(i) for i in expr.args])
0.99 unitsystem.py(131):         from sympy.physics.units import Quantity
0.99 unitsystem.py(132):         if isinstance(expr, Mul):
0.99 unitsystem.py(134):         elif isinstance(expr, Pow):
0.99 unitsystem.py(136):         elif isinstance(expr, Add):
0.99 unitsystem.py(138):         elif isinstance(expr, Derivative):
0.99 unitsystem.py(143):         elif isinstance(expr, Function):
0.99 unitsystem.py(148):         elif isinstance(expr, Quantity):
0.99 unitsystem.py(150):         return S.One
0.99 unitsystem.py(133):             return Mul(*[self.get_dimensional_expr(i) for i in expr.args])
0.99 unitsystem.py(131):         from sympy.physics.units import Quantity
0.99 unitsystem.py(132):         if isinstance(expr, Mul):
0.99 unitsystem.py(134):         elif isinstance(expr, Pow):
0.99 unitsystem.py(135):             return self.get_dimensional_expr(expr.base) ** expr.exp
0.99 unitsystem.py(131):         from sympy.physics.units import Quantity
0.99 unitsystem.py(132):         if isinstance(expr, Mul):
0.99 unitsystem.py(134):         elif isinstance(expr, Pow):
0.99 unitsystem.py(136):         elif isinstance(expr, Add):
0.99 unitsystem.py(138):         elif isinstance(expr, Derivative):
0.99 unitsystem.py(143):         elif isinstance(expr, Function):
0.99 unitsystem.py(148):         elif isinstance(expr, Quantity):
0.99 unitsystem.py(150):         return S.One
0.99 unitsystem.py(133):             return Mul(*[self.get_dimensional_expr(i) for i in expr.args])
0.99 unitsystem.py(131):         from sympy.physics.units import Quantity
0.99 unitsystem.py(132):         if isinstance(expr, Mul):
0.99 unitsystem.py(134):         elif isinstance(expr, Pow):
0.99 unitsystem.py(135):             return self.get_dimensional_expr(expr.base) ** expr.exp
0.99 unitsystem.py(131):         from sympy.physics.units import Quantity
0.99 unitsystem.py(132):         if isinstance(expr, Mul):
0.99 unitsystem.py(134):         elif isinstance(expr, Pow):
0.99 unitsystem.py(136):         elif isinstance(expr, Add):
0.99 unitsystem.py(138):         elif isinstance(expr, Derivative):
0.99 unitsystem.py(143):         elif isinstance(expr, Function):
0.99 unitsystem.py(148):         elif isinstance(expr, Quantity):
0.99 unitsystem.py(150):         return S.One
0.99 unitsystem.py(133):             return Mul(*[self.get_dimensional_expr(i) for i in expr.args])
0.99 unitsystem.py(131):         from sympy.physics.units import Quantity
0.99 unitsystem.py(132):         if isinstance(expr, Mul):
0.99 unitsystem.py(134):         elif isinstance(expr, Pow):
0.99 unitsystem.py(136):         elif isinstance(expr, Add):
0.99 unitsystem.py(138):         elif isinstance(expr, Derivative):
0.99 unitsystem.py(143):         elif isinstance(expr, Function):
0.99 unitsystem.py(148):         elif isinstance(expr, Quantity):
0.99 unitsystem.py(150):         return S.One
0.99 unitsystem.py(131):         from sympy.physics.units import Quantity
0.99 unitsystem.py(132):         if isinstance(expr, Mul):
0.99 unitsystem.py(134):         elif isinstance(expr, Pow):
0.99 unitsystem.py(136):         elif isinstance(expr, Add):
0.99 unitsystem.py(138):         elif isinstance(expr, Derivative):
0.99 unitsystem.py(143):         elif isinstance(expr, Function):
0.99 unitsystem.py(148):         elif isinstance(expr, Quantity):
0.99 unitsystem.py(150):         return S.One
sympy/polys/tests/test_coverup_sympy__sympy-24213.py[1] 
test_collect_factor_and_dimension_equivalent_dimensions 0.99 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.99 unitsystem.py(76):         return self._dimension_system
0.99 unitsystem.py(86):         if unit in qsfm:
0.99 unitsystem.py(87):             return qsfm[unit]
0.99 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.99 unitsystem.py(76):         return self._dimension_system
0.99 unitsystem.py(86):         if unit in qsfm:
0.99 unitsystem.py(87):             return qsfm[unit]
0.99 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.99 unitsystem.py(76):         return self._dimension_system
0.99 unitsystem.py(86):         if unit in qsfm:
0.99 unitsystem.py(87):             return qsfm[unit]
0.99 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.99 unitsystem.py(76):         return self._dimension_system
0.99 unitsystem.py(86):         if unit in qsfm:
0.99 unitsystem.py(87):             return qsfm[unit]
0.99 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.99 unitsystem.py(76):         return self._dimension_system
0.99 unitsystem.py(86):         if unit in qsfm:
0.99 unitsystem.py(87):             return qsfm[unit]
0.99 unitsystem.py(156):         from sympy.physics.units import Quantity
0.99 unitsystem.py(157):         if isinstance(expr, Quantity):
0.99 unitsystem.py(159):         elif isinstance(expr, Mul):
0.99 unitsystem.py(167):         elif isinstance(expr, Pow):
0.99 unitsystem.py(173):         elif isinstance(expr, Add):
0.99 unitsystem.py(174):             factor, dim = self._collect_factor_and_dimension(expr.args[0])
0.99 unitsystem.py(156):         from sympy.physics.units import Quantity
0.99 unitsystem.py(157):         if isinstance(expr, Quantity):
0.99 unitsystem.py(159):         elif isinstance(expr, Mul):
0.99 unitsystem.py(160):             factor = 1
0.99 unitsystem.py(161):             dimension = Dimension(1)
0.99 unitsystem.py(162):             for arg in expr.args:
0.99 unitsystem.py(163):                 arg_factor, arg_dim = self._collect_factor_and_dimension(arg)
0.99 unitsystem.py(156):         from sympy.physics.units import Quantity
0.99 unitsystem.py(157):         if isinstance(expr, Quantity):
0.99 unitsystem.py(158):             return expr.scale_factor, expr.dimension
0.99 unitsystem.py(107):         return UnitSystem._unit_systems["SI"]
0.99 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.99 unitsystem.py(76):         return self._dimension_system
0.99 unitsystem.py(86):         if unit in qsfm:
0.99 unitsystem.py(88):         return super().get_quantity_scale_factor(unit)
0.99 unitsystem.py(107):         return UnitSystem._unit_systems["SI"]
0.99 unitsystem.py(79):         qdm = self.get_dimension_system()._quantity_dimension_map
0.99 unitsystem.py(76):         return self._dimension_system
0.99 unitsystem.py(80):         if unit in qdm:
0.99 unitsystem.py(82):         return super().get_quantity_dimension(unit)
0.99 unitsystem.py(164):                 factor *= arg_factor
0.99 unitsystem.py(165):                 dimension *= arg_dim
0.99 unitsystem.py(162):             for arg in expr.args:
0.99 unitsystem.py(163):                 arg_factor, arg_dim = self._collect_factor_and_dimension(arg)
0.99 unitsystem.py(156):         from sympy.physics.units import Quantity
0.99 unitsystem.py(157):         if isinstance(expr, Quantity):
0.99 unitsystem.py(158):             return expr.scale_factor, expr.dimension
0.99 unitsystem.py(107):         return UnitSystem._unit_systems["SI"]
0.99 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.99 unitsystem.py(76):         return self._dimension_system
0.99 unitsystem.py(86):         if unit in qsfm:
0.99 unitsystem.py(88):         return super().get_quantity_scale_factor(unit)
0.99 unitsystem.py(107):         return UnitSystem._unit_systems["SI"]
0.99 unitsystem.py(79):         qdm = self.get_dimension_system()._quantity_dimension_map
0.99 unitsystem.py(76):         return self._dimension_system
0.99 unitsystem.py(80):         if unit in qdm:
0.99 unitsystem.py(82):         return super().get_quantity_dimension(unit)
0.99 unitsystem.py(164):                 factor *= arg_factor
0.99 unitsystem.py(165):                 dimension *= arg_dim
0.99 unitsystem.py(162):             for arg in expr.args:
0.99 unitsystem.py(166):             return factor, dimension
0.99 unitsystem.py(175):             for addend in expr.args[1:]:
0.99 unitsystem.py(177):                     self._collect_factor_and_dimension(addend)
0.99 unitsystem.py(156):         from sympy.physics.units import Quantity
0.99 unitsystem.py(157):         if isinstance(expr, Quantity):
0.99 unitsystem.py(158):             return expr.scale_factor, expr.dimension
0.99 unitsystem.py(107):         return UnitSystem._unit_systems["SI"]
0.99 unitsystem.py(85):         qsfm = self.get_dimension_system()._quantity_scale_factors
0.99 unitsystem.py(76):         return self._dimension_system
0.99 unitsystem.py(86):         if unit in qsfm:
0.99 unitsystem.py(88):         return super().get_quantity_scale_factor(unit)
0.99 unitsystem.py(107):         return UnitSystem._unit_systems["SI"]
0.99 unitsystem.py(79):         qdm = self.get_dimension_system()._quantity_dimension_map
0.99 unitsystem.py(76):         return self._dimension_system
0.99 unitsystem.py(80):         if unit in qdm:
0.99 unitsystem.py(82):         return super().get_quantity_dimension(unit)
0.99 unitsystem.py(176):                 addend_factor, addend_dim = \
0.99 unitsystem.py(178):                 if dim != addend_dim:
0.99 unitsystem.py(179):                     raise ValueError(
0.99 unitsystem.py(180):                         'Dimension of "{}" is {}, '
0.99 unitsystem.py(182):                             addend, addend_dim, dim))
0.99 unitsystem.py(180):                         'Dimension of "{}" is {}, '
0.99 unitsystem.py(179):                     raise ValueError(
E                 [FAIL]


________________________________________________________________________________
 sympy/polys/tests/test_coverup_sympy__sympy-24213.py:test_collect_factor_and_dimension_equivalent_dimensions 
Traceback (most recent call last):
  File "/testbed/sympy/polys/tests/test_coverup_sympy__sympy-24213.py", line 23, in test_collect_factor_and_dimension_equivalent_dimensions
    SI._collect_factor_and_dimension(expr1)
  File "/testbed/sympy/physics/units/unitsystem.py", line 179, in _collect_factor_and_dimension
    raise ValueError(
ValueError: Dimension of "v1" is Dimension(velocity), but it should be Dimension(acceleration*time)

=========== tests finished: 0 passed, 1 exceptions, in 0.59 seconds ============
DO *NOT* COMMIT!
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(sympy/physics/units/unitsystem\\.py)']
+ cat coverage.cover
{"/testbed/sympy/physics/units/unitsystem.py": {"5": 1, "7": 1, "8": 1, "9": 1, "10": 1, "11": 1, "12": 1, "13": 1, "15": 1, "18": 2, "28": 1, "30": 1, "45": 1, "59": 1, "62": 1, "75": 1, "78": 1, "84": 1, "90": 1, "91": 1, "105": 1, "106": 1, "109": 1, "110": 1, "118": 1, "119": 1, "126": 1, "127": 1, "130": 1, "152": 1, "201": 1, "32": 4, "34": 4, "35": 4, "37": 4, "38": 4, "39": 4, "40": 4, "41": 4, "43": 4, "53": 0, "54": 0, "56": 0, "57": 0, "60": 0, "70": 2, "71": 2, "73": 2, "76": 129, "79": 3, "80": 3, "81": 0, "82": 3, "85": 126, "86": 126, "87": 53, "88": 73, "92": 0, "93": 0, "95": 0, "96": 0, "97": 0, "99": 0, "103": 0, "107": 6, "116": 0, "124": 0, "128": 0, "131": 105, "132": 105, "133": 64, "134": 91, "135": 20, "136": 71, "137": 0, "138": 71, "139": 0, "140": 0, "141": 0, "142": 0, "143": 71, "144": 0, "145": 0, "146": 0, "147": 0, "148": 71, "149": 0, "150": 71, "156": 5, "157": 5, "158": 3, "159": 2, "160": 1, "161": 1, "162": 3, "163": 2, "164": 2, "165": 2, "166": 1, "167": 1, "168": 0, "169": 0, "170": 0, "171": 0, "172": 0, "173": 1, "174": 1, "175": 1, "177": 1, "176": 1, "178": 1, "179": 2, "180": 2, "182": 1, "183": 0, "184": 0, "185": 0, "186": 0, "187": 0, "188": 0, "189": 0, "190": 0, "191": 0, "192": 0, "193": 0, "194": 0, "195": 0, "196": 0, "197": 0, "199": 0, "205": 0}}
+ git checkout e8c22f6eac7314be8d92590bfff92ced79ee03e2
Note: switching to 'e8c22f6eac7314be8d92590bfff92ced79ee03e2'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at e8c22f6eac Merge pull request #24214 from TJStienstra/FixMailmap
+ git apply /root/pre_state.patch
error: unrecognized input
