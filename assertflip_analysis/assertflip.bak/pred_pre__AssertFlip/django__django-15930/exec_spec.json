{"instance_id": "django__django-15930", "repo": "django/django", "version": "4.2", "environment_setup_commit": "0fbdb9784da915fce5dcc1fe82bac9b4785749e5", "patch_list": ["diff --git a/dev/null b/tests/test_coverup_django__django-15930.py\nnew file mode 100644\nindex e69de29..c5c1b97 100644\n--- /dev/null\n+++ b/tests/test_coverup_django__django-15930.py\n@@ -0,0 +1,26 @@\n+from django.test import TestCase\n+from django.db.models import Q, Value, BooleanField, Case, When\n+from django.contrib.auth.models import User\n+from django.db import connection\n+\n+class CaseExpressionTest(TestCase):\n+    def test_case_with_negated_empty_q(self):\n+        \"\"\"\n+        Test Case expression with a negated Q object checking for an empty list.\n+        This should expose the bug where the SQL is malformed.\n+        \"\"\"\n+        # Attempt to annotate using a Case expression with ~Q(pk__in=[])\n+        queryset = User.objects.annotate(\n+            _a=Case(\n+                When(~Q(pk__in=[]), then=Value(True)),\n+                default=Value(False),\n+                output_field=BooleanField(),\n+            )\n+        ).order_by(\"-_a\").values(\"pk\")\n+\n+        # Capture the SQL generated by the query\n+        sql = str(queryset.query)\n+\n+        # Assert that the SQL is correctly formed\n+        # The test should fail by confirming the absence of the bug\n+        self.assertNotIn(\"WHEN  THEN\", sql)\n"], "arch": "x86_64", "base_commit": "63884829acd207404f2a5c3cc1d6b4cd0a822b70", "test_directives": ["test_coverup_django__django-15930"], "coverage_files": ["django/db/models/expressions.py"], "env_name": "testbed", "run_id": "assertflip", "patch_id": "pred_pre__AssertFlip", "timeout": 1800, "rm_image": false, "force_rebuild": false, "exec_mode": "unit_test", "reproduction_script_name": null, "compute_coverage": true, "install": {"python": "3.9", "packages": "requirements.txt", "install": "python -m pip install -e ."}, "cache_level": "instance", "test_command": "python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/db/models/expressions\\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-15930", "req_install_commands": ["conda create -n testbed python=3.9 -y", "cat <<'EOF_59812759871' > $HOME/requirements.txt\naiosmtpd\nasgiref >= 3.6.0\nargon2-cffi >= 19.2.0\nbackports.zoneinfo; python_version < '3.9'\nbcrypt\nblack\ndocutils\ngeoip2; python_version < '3.12'\njinja2 >= 2.11.0\nnumpy; python_version < '3.12'\nPillow >= 6.2.1; sys.platform != 'win32' or python_version < '3.12'\npylibmc; sys.platform != 'win32'\npymemcache >= 3.4.0\npytz\npywatchman; sys.platform != 'win32'\nPyYAML\nredis >= 3.4.0\nselenium\nsqlparse >= 0.3.1\ntblib >= 1.5.0\ntzdata\ncolorama; sys.platform == 'win32'\n\nEOF_59812759871", "conda activate testbed && python -m pip install -r $HOME/requirements.txt", "rm $HOME/requirements.txt"]}