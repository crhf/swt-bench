+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD 859a87d873ce7152af73ab851653b4e1c3ffea4c
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
nothing to commit, working tree clean
+ git show
commit 859a87d873ce7152af73ab851653b4e1c3ffea4c
Author: Biel Frontera <bfrontera@socib.es>
Date:   Mon Mar 14 09:53:36 2022 +0100

    Fixed #31357 -- Fixed get_for_models() crash for stale content types when model with the same name exists in another app.

diff --git a/django/contrib/contenttypes/models.py b/django/contrib/contenttypes/models.py
index ef4f30556f..b83c9afcae 100644
--- a/django/contrib/contenttypes/models.py
+++ b/django/contrib/contenttypes/models.py
@@ -2,6 +2,7 @@ from collections import defaultdict
 
 from django.apps import apps
 from django.db import models
+from django.db.models import Q
 from django.utils.translation import gettext_lazy as _
 
 
@@ -64,9 +65,8 @@ class ContentTypeManager(models.Manager):
         Given *models, return a dictionary mapping {model: content_type}.
         """
         results = {}
-        # Models that aren't already in the cache.
-        needed_app_labels = set()
-        needed_models = set()
+        # Models that aren't already in the cache grouped by app labels.
+        needed_models = defaultdict(set)
         # Mapping of opts to the list of models requiring it.
         needed_opts = defaultdict(list)
         for model in models:
@@ -74,14 +74,20 @@ class ContentTypeManager(models.Manager):
             try:
                 ct = self._get_from_cache(opts)
             except KeyError:
-                needed_app_labels.add(opts.app_label)
-                needed_models.add(opts.model_name)
+                needed_models[opts.app_label].add(opts.model_name)
                 needed_opts[opts].append(model)
             else:
                 results[model] = ct
         if needed_opts:
             # Lookup required content types from the DB.
-            cts = self.filter(app_label__in=needed_app_labels, model__in=needed_models)
+            condition = Q(
+                *(
+                    Q(("app_label", app_label), ("model__in", models), _connector=Q.AND)
+                    for app_label, models in needed_models.items()
+                ),
+                _connector=Q.OR,
+            )
+            cts = self.filter(condition)
             for ct in cts:
                 opts_models = needed_opts.pop(ct.model_class()._meta, [])
                 for model in opts_models:
diff --git a/tests/contenttypes_tests/test_models.py b/tests/contenttypes_tests/test_models.py
index e2fb7fe818..a96e12e69f 100644
--- a/tests/contenttypes_tests/test_models.py
+++ b/tests/contenttypes_tests/test_models.py
@@ -248,6 +248,26 @@ class ContentTypesTests(TestCase):
         ct_fetched = ContentType.objects.get_for_id(ct.pk)
         self.assertIsNone(ct_fetched.model_class())
 
+    def test_missing_model_with_existing_model_name(self):
+        """
+        Displaying content types in admin (or anywhere) doesn't break on
+        leftover content type records in the DB for which no model is defined
+        anymore, even if a model with the same name exists in another app.
+        """
+        # Create a stale ContentType that matches the name of an existing
+        # model.
+        ContentType.objects.create(app_label="contenttypes", model="author")
+        ContentType.objects.clear_cache()
+        # get_for_models() should work as expected for existing models.
+        cts = ContentType.objects.get_for_models(ContentType, Author)
+        self.assertEqual(
+            cts,
+            {
+                ContentType: ContentType.objects.get_for_model(ContentType),
+                Author: ContentType.objects.get_for_model(Author),
+            },
+        )
+
     def test_str(self):
         ct = ContentType.objects.get(app_label="contenttypes_tests", model="site")
         self.assertEqual(str(ct), "contenttypes_tests | site")
+ git diff 859a87d873ce7152af73ab851653b4e1c3ffea4c
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Checking if build backend supports build_editable: started
  Checking if build backend supports build_editable: finished with status 'done'
  Getting requirements to build editable: started
  Getting requirements to build editable: finished with status 'done'
  Preparing editable metadata (pyproject.toml): started
  Preparing editable metadata (pyproject.toml): finished with status 'done'
Requirement already satisfied: asgiref>=3.4.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Django==4.1.dev20220314115226) (3.9.1)
Requirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Django==4.1.dev20220314115226) (0.5.3)
Requirement already satisfied: typing_extensions>=4 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from asgiref>=3.4.1->Django==4.1.dev20220314115226) (4.14.1)
Building wheels for collected packages: Django
  Building editable for Django (pyproject.toml): started
  Building editable for Django (pyproject.toml): finished with status 'done'
  Created wheel for Django: filename=django-4.1.dev20220314115226-0.editable-py3-none-any.whl size=27003 sha256=4109056c52617adfbe0208a2f29a249406c45c9b3a7df4f6f95628c3468fa6ea
  Stored in directory: /tmp/pip-ephem-wheel-cache-2eelerxi/wheels/7d/66/67/70d1ee2124ccf21d601c352e25cdca10f611f7c8b3f9ffb9e4
Successfully built Django
Installing collected packages: Django
  Attempting uninstall: Django
    Found existing installation: Django 4.1.dev20220314115226
    Uninstalling Django-4.1.dev20220314115226:
      Successfully uninstalled Django-4.1.dev20220314115226
Successfully installed Django-4.1.dev20220314115226
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git apply -v -
<stdin>:49: trailing whitespace.
        
<stdin>:52: trailing whitespace.
        
Checking patch tests/test_coverup_django__django-15503.py...
<stdin>:55: new blank line at EOF.
+
Applied patch tests/test_coverup_django__django-15503.py cleanly.
warning: 3 lines add whitespace errors.
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/db/models/fields/json\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-15503
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(django/db/models/fields/json\\.py)']
0.29 json.py(1): import json
0.29 json.py(3): from django import forms
0.29 json.py(4): from django.core import checks, exceptions
0.29 json.py(5): from django.db import NotSupportedError, connections, router
0.29 json.py(6): from django.db.models import lookups
0.29 json.py(7): from django.db.models.lookups import PostgresOperatorLookup, Transform
0.29 json.py(8): from django.utils.translation import gettext_lazy as _
0.29 json.py(10): from . import Field
0.29 json.py(11): from .mixins import CheckFieldDefaultMixin
0.29 json.py(13): __all__ = ["JSONField"]
0.29 json.py(16): class JSONField(CheckFieldDefaultMixin, Field):
0.29 json.py(16): class JSONField(CheckFieldDefaultMixin, Field):
0.29 json.py(17):     empty_strings_allowed = False
0.29 json.py(18):     description = _("A JSON object")
0.29 json.py(20):         "invalid": _("Value must be valid JSON."),
0.29 json.py(19):     default_error_messages = {
0.29 json.py(22):     _default_hint = ("dict", "{}")
0.29 json.py(24):     def __init__(
0.29 json.py(40):     def check(self, **kwargs):
0.29 json.py(46):     def _check_supported(self, databases):
0.29 json.py(70):     def deconstruct(self):
0.29 json.py(78):     def from_db_value(self, value, expression, connection):
0.29 json.py(90):     def get_internal_type(self):
0.29 json.py(93):     def get_prep_value(self, value):
0.29 json.py(98):     def get_transform(self, name):
0.29 json.py(104):     def validate(self, value, model_instance):
0.29 json.py(115):     def value_to_string(self, obj):
0.29 json.py(118):     def formfield(self, **kwargs):
0.29 json.py(129): def compile_json_path(key_transforms, include_root=True):
0.29 json.py(142): class DataContains(PostgresOperatorLookup):
0.29 json.py(142): class DataContains(PostgresOperatorLookup):
0.29 json.py(143):     lookup_name = "contains"
0.29 json.py(144):     postgres_operator = "@>"
0.29 json.py(146):     def as_sql(self, compiler, connection):
0.29 json.py(157): class ContainedBy(PostgresOperatorLookup):
0.29 json.py(157): class ContainedBy(PostgresOperatorLookup):
0.29 json.py(158):     lookup_name = "contained_by"
0.29 json.py(159):     postgres_operator = "<@"
0.29 json.py(161):     def as_sql(self, compiler, connection):
0.29 json.py(172): class HasKeyLookup(PostgresOperatorLookup):
0.29 json.py(172): class HasKeyLookup(PostgresOperatorLookup):
0.29 json.py(173):     logical_operator = None
0.29 json.py(175):     def as_sql(self, compiler, connection, template=None):
0.29 json.py(208):     def as_mysql(self, compiler, connection):
0.29 json.py(213):     def as_oracle(self, compiler, connection):
0.29 json.py(221):     def as_postgresql(self, compiler, connection):
0.29 json.py(229):     def as_sqlite(self, compiler, connection):
0.29 json.py(235): class HasKey(HasKeyLookup):
0.29 json.py(235): class HasKey(HasKeyLookup):
0.29 json.py(236):     lookup_name = "has_key"
0.29 json.py(237):     postgres_operator = "?"
0.29 json.py(238):     prepare_rhs = False
0.29 json.py(241): class HasKeys(HasKeyLookup):
0.29 json.py(241): class HasKeys(HasKeyLookup):
0.29 json.py(242):     lookup_name = "has_keys"
0.29 json.py(243):     postgres_operator = "?&"
0.29 json.py(244):     logical_operator = " AND "
0.29 json.py(246):     def get_prep_lookup(self):
0.29 json.py(250): class HasAnyKeys(HasKeys):
0.29 json.py(250): class HasAnyKeys(HasKeys):
0.29 json.py(251):     lookup_name = "has_any_keys"
0.29 json.py(252):     postgres_operator = "?|"
0.29 json.py(253):     logical_operator = " OR "
0.29 json.py(256): class CaseInsensitiveMixin:
0.29 json.py(256): class CaseInsensitiveMixin:
0.29 json.py(257):     """
0.29 json.py(264):     def process_lhs(self, compiler, connection):
0.29 json.py(270):     def process_rhs(self, compiler, connection):
0.29 json.py(277): class JSONExact(lookups.Exact):
0.29 json.py(277): class JSONExact(lookups.Exact):
0.29 json.py(278):     can_use_none_as_rhs = True
0.29 json.py(280):     def process_rhs(self, compiler, connection):
0.29 json.py(291): class JSONIContains(CaseInsensitiveMixin, lookups.IContains):
0.29 json.py(291): class JSONIContains(CaseInsensitiveMixin, lookups.IContains):
0.29 json.py(292):     pass
0.29 json.py(295): JSONField.register_lookup(DataContains)
0.29 json.py(296): JSONField.register_lookup(ContainedBy)
0.29 json.py(297): JSONField.register_lookup(HasKey)
0.29 json.py(298): JSONField.register_lookup(HasKeys)
0.29 json.py(299): JSONField.register_lookup(HasAnyKeys)
0.29 json.py(300): JSONField.register_lookup(JSONExact)
0.29 json.py(301): JSONField.register_lookup(JSONIContains)
0.29 json.py(304): class KeyTransform(Transform):
0.29 json.py(304): class KeyTransform(Transform):
0.29 json.py(305):     postgres_operator = "->"
0.29 json.py(306):     postgres_nested_operator = "#>"
0.29 json.py(308):     def __init__(self, key_name, *args, **kwargs):
0.29 json.py(312):     def preprocess_lhs(self, compiler, connection):
0.29 json.py(324):     def as_mysql(self, compiler, connection):
0.29 json.py(329):     def as_oracle(self, compiler, connection):
0.29 json.py(337):     def as_postgresql(self, compiler, connection):
0.29 json.py(348):     def as_sqlite(self, compiler, connection):
0.29 json.py(360): class KeyTextTransform(KeyTransform):
0.29 json.py(360): class KeyTextTransform(KeyTransform):
0.29 json.py(361):     postgres_operator = "->>"
0.29 json.py(362):     postgres_nested_operator = "#>>"
0.29 json.py(365): class KeyTransformTextLookupMixin:
0.29 json.py(365): class KeyTransformTextLookupMixin:
0.29 json.py(366):     """
0.29 json.py(373):     def __init__(self, key_transform, *args, **kwargs):
0.29 json.py(387): class KeyTransformIsNull(lookups.IsNull):
0.29 json.py(387): class KeyTransformIsNull(lookups.IsNull):
0.29 json.py(389):     def as_oracle(self, compiler, connection):
0.29 json.py(400):     def as_sqlite(self, compiler, connection):
0.29 json.py(411): class KeyTransformIn(lookups.In):
0.29 json.py(411): class KeyTransformIn(lookups.In):
0.29 json.py(412):     def resolve_expression_parameter(self, compiler, connection, sql, param):
0.29 json.py(440): class KeyTransformExact(JSONExact):
0.29 json.py(440): class KeyTransformExact(JSONExact):
0.29 json.py(441):     def process_rhs(self, compiler, connection):
0.29 json.py(465):     def as_oracle(self, compiler, connection):
0.29 json.py(480): class KeyTransformIExact(
0.29 json.py(481):     CaseInsensitiveMixin, KeyTransformTextLookupMixin, lookups.IExact
0.29 json.py(480): class KeyTransformIExact(
0.29 json.py(480): class KeyTransformIExact(
0.29 json.py(483):     pass
0.29 json.py(486): class KeyTransformIContains(
0.29 json.py(487):     CaseInsensitiveMixin, KeyTransformTextLookupMixin, lookups.IContains
0.29 json.py(486): class KeyTransformIContains(
0.29 json.py(486): class KeyTransformIContains(
0.29 json.py(489):     pass
0.29 json.py(492): class KeyTransformStartsWith(KeyTransformTextLookupMixin, lookups.StartsWith):
0.29 json.py(492): class KeyTransformStartsWith(KeyTransformTextLookupMixin, lookups.StartsWith):
0.29 json.py(493):     pass
0.29 json.py(496): class KeyTransformIStartsWith(
0.29 json.py(497):     CaseInsensitiveMixin, KeyTransformTextLookupMixin, lookups.IStartsWith
0.29 json.py(496): class KeyTransformIStartsWith(
0.29 json.py(496): class KeyTransformIStartsWith(
0.29 json.py(499):     pass
0.29 json.py(502): class KeyTransformEndsWith(KeyTransformTextLookupMixin, lookups.EndsWith):
0.29 json.py(502): class KeyTransformEndsWith(KeyTransformTextLookupMixin, lookups.EndsWith):
0.29 json.py(503):     pass
0.29 json.py(506): class KeyTransformIEndsWith(
0.29 json.py(507):     CaseInsensitiveMixin, KeyTransformTextLookupMixin, lookups.IEndsWith
0.29 json.py(506): class KeyTransformIEndsWith(
0.29 json.py(506): class KeyTransformIEndsWith(
0.29 json.py(509):     pass
0.29 json.py(512): class KeyTransformRegex(KeyTransformTextLookupMixin, lookups.Regex):
0.29 json.py(512): class KeyTransformRegex(KeyTransformTextLookupMixin, lookups.Regex):
0.29 json.py(513):     pass
0.29 json.py(516): class KeyTransformIRegex(
0.29 Creating test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
json.py(517):     CaseInsensitiveMixin, KeyTransformTextLookupMixin, lookups.IRegex
0.29 json.py(516): class KeyTransformIRegex(
0.29 json.py(516): class KeyTransformIRegex(
0.29 json.py(519):     pass
0.29 json.py(522): class KeyTransformNumericLookupMixin:
0.29 json.py(522): class KeyTransformNumericLookupMixin:
0.29 json.py(523):     def process_rhs(self, compiler, connection):
0.29 json.py(530): class KeyTransformLt(KeyTransformNumericLookupMixin, lookups.LessThan):
0.29 json.py(530): class KeyTransformLt(KeyTransformNumericLookupMixin, lookups.LessThan):
0.29 json.py(531):     pass
0.29 json.py(534): class KeyTransformLte(KeyTransformNumericLookupMixin, lookups.LessThanOrEqual):
0.29 json.py(534): class KeyTransformLte(KeyTransformNumericLookupMixin, lookups.LessThanOrEqual):
0.29 json.py(535):     pass
0.29 json.py(538): class KeyTransformGt(KeyTransformNumericLookupMixin, lookups.GreaterThan):
0.29 json.py(538): class KeyTransformGt(KeyTransformNumericLookupMixin, lookups.GreaterThan):
0.29 json.py(539):     pass
0.29 json.py(542): class KeyTransformGte(KeyTransformNumericLookupMixin, lookups.GreaterThanOrEqual):
0.29 json.py(542): class KeyTransformGte(KeyTransformNumericLookupMixin, lookups.GreaterThanOrEqual):
0.29 json.py(543):     pass
0.29 json.py(546): KeyTransform.register_lookup(KeyTransformIn)
0.29 json.py(547): KeyTransform.register_lookup(KeyTransformExact)
0.29 json.py(548): KeyTransform.register_lookup(KeyTransformIExact)
0.29 json.py(549): KeyTransform.register_lookup(KeyTransformIsNull)
0.29 json.py(550): KeyTransform.register_lookup(KeyTransformIContains)
0.29 json.py(551): KeyTransform.register_lookup(KeyTransformStartsWith)
0.29 json.py(552): KeyTransform.register_lookup(KeyTransformIStartsWith)
0.29 json.py(553): KeyTransform.register_lookup(KeyTransformEndsWith)
0.29 json.py(554): KeyTransform.register_lookup(KeyTransformIEndsWith)
0.29 json.py(555): KeyTransform.register_lookup(KeyTransformRegex)
0.29 json.py(556): KeyTransform.register_lookup(KeyTransformIRegex)
0.29 json.py(558): KeyTransform.register_lookup(KeyTransformLt)
0.29 json.py(559): KeyTransform.register_lookup(KeyTransformLte)
0.29 json.py(560): KeyTransform.register_lookup(KeyTransformGt)
0.29 json.py(561): KeyTransform.register_lookup(KeyTransformGte)
0.29 json.py(564): class KeyTransformFactory:
0.29 json.py(564): class KeyTransformFactory:
0.29 json.py(565):     def __init__(self, key_name):
0.29 json.py(568):     def __call__(self, *args, **kwargs):
0.29 json.py(32):         if encoder and not callable(encoder):
0.29 json.py(34):         if decoder and not callable(decoder):
0.29 json.py(36):         self.encoder = encoder
0.29 json.py(37):         self.decoder = decoder
0.29 json.py(38):         super().__init__(verbose_name, name, **kwargs)
Testing against Django installed in '/testbed/django'
0.66 json.py(32):         if encoder and not callable(encoder):
0.66 json.py(34):         if decoder and not callable(decoder):
0.66 json.py(36):         self.encoder = encoder
0.66 json.py(37):         self.decoder = decoder
0.66 json.py(38):         super().__init__(verbose_name, name, **kwargs)
Found 1 test(s).
Skipping setup of unused database(s): other.
Operations to perform:
  Synchronize unmigrated apps: auth, contenttypes, messages, sessions, staticfiles
  Apply all migrations: admin, sites
Synchronizing apps without migrations:
  Creating tables...
    Creating table django_content_type
    Creating table auth_permission
    Creating table auth_group
    Creating table auth_user
    Creating table django_session
    Running deferred SQL...
Running migrations:
  Applying admin.0001_initial... OK
  Applying admin.0002_logentry_remove_auto_add... OK
  Applying admin.0003_logentry_add_action_flag_choices... OK
  Applying sites.0001_initial... OK
  Applying sites.0002_alter_domain_unique... OK
System check identified no issues (0 silenced).
/testbed/django/test/testcases.py:1351: UserWarning: Overriding setting DATABASES can lead to unexpected behavior.
  super().setUpClass()
test_json_field_has_key (test_coverup_django__django-15503.JsonFieldHasKeyTestCase) ... FAIL

======================================================================
FAIL: test_json_field_has_key (test_coverup_django__django-15503.JsonFieldHasKeyTestCase)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/./tests/test_coverup_django__django-15503.py", line 48, in test_json_field_has_key
    self.assertEqual(c2, 1, "Should have found 1 entry with key '1111'")
AssertionError: 0 != 1 : Should have found 1 entry with key '1111'

----------------------------------------------------------------------
Ran 1 test in 0.004s

FAILED (failures=1)
Destroying test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
0.81 json.py(94):         if value is None:
0.81 json.py(96):         return json.dumps(value, cls=self.encoder)
0.81 json.py(94):         if value is None:
0.81 json.py(96):         return json.dumps(value, cls=self.encoder)
0.81 json.py(230):         return self.as_sql(
0.81 json.py(231):             compiler, connection, template="JSON_TYPE(%s, %%s) IS NOT NULL"
0.81 json.py(230):         return self.as_sql(
0.81 json.py(177):         if isinstance(self.lhs, KeyTransform):
0.81 json.py(183):             lhs, lhs_params = self.process_lhs(compiler, connection)
0.81 json.py(184):             lhs_json_path = "$"
0.81 json.py(185):         sql = template % lhs
0.81 json.py(187):         rhs = self.rhs
0.81 json.py(188):         rhs_params = []
0.81 json.py(189):         if not isinstance(rhs, (list, tuple)):
0.81 json.py(190):             rhs = [rhs]
0.81 json.py(191):         for key in rhs:
0.81 json.py(192):             if isinstance(key, KeyTransform):
0.81 json.py(195):                 rhs_key_transforms = [key]
0.81 json.py(196):             rhs_params.append(
0.81 json.py(197):                 "%s%s"
0.81 json.py(199):                     lhs_json_path,
0.81 json.py(200):                     compile_json_path(rhs_key_transforms, include_root=False),
0.81 json.py(130):     path = ["$"] if include_root else []
0.81 json.py(131):     for key_transform in key_transforms:
0.81 json.py(132):         try:
0.81 json.py(133):             num = int(key_transform)
0.81 json.py(134):         except ValueError:  # non-integer
0.81 json.py(135):             path.append(".")
0.81 json.py(136):             path.append(json.dumps(key_transform))
0.81 json.py(131):     for key_transform in key_transforms:
0.81 json.py(139):     return "".join(path)
0.81 json.py(198):                 % (
0.81 json.py(197):                 "%s%s"
0.81 json.py(196):             rhs_params.append(
0.81 json.py(191):         for key in rhs:
0.81 json.py(204):         if self.logical_operator:
0.81 json.py(206):         return sql, tuple(lhs_params) + tuple(rhs_params)
0.81 json.py(230):         return self.as_sql(
0.81 json.py(231):             compiler, connection, template="JSON_TYPE(%s, %%s) IS NOT NULL"
0.81 json.py(230):         return self.as_sql(
0.81 json.py(177):         if isinstance(self.lhs, KeyTransform):
0.81 json.py(183):             lhs, lhs_params = self.process_lhs(compiler, connection)
0.81 json.py(184):             lhs_json_path = "$"
0.81 json.py(185):         sql = template % lhs
0.81 json.py(187):         rhs = self.rhs
0.81 json.py(188):         rhs_params = []
0.81 json.py(189):         if not isinstance(rhs, (list, tuple)):
0.81 json.py(190):             rhs = [rhs]
0.81 json.py(191):         for key in rhs:
0.81 json.py(192):             if isinstance(key, KeyTransform):
0.81 json.py(195):                 rhs_key_transforms = [key]
0.81 json.py(196):             rhs_params.append(
0.81 json.py(197):                 "%s%s"
0.81 json.py(199):                     lhs_json_path,
0.81 json.py(200):                     compile_json_path(rhs_key_transforms, include_root=False),
0.81 json.py(130):     path = ["$"] if include_root else []
0.81 json.py(131):     for key_transform in key_transforms:
0.81 json.py(132):         try:
0.81 json.py(133):             num = int(key_transform)
0.81 json.py(138):             path.append("[%s]" % num)
0.81 json.py(131):     for key_transform in key_transforms:
0.81 json.py(139):     return "".join(path)
0.81 json.py(198):                 % (
0.81 json.py(197):                 "%s%s"
0.81 json.py(196):             rhs_params.append(
0.81 json.py(191):         for key in rhs:
0.81 json.py(204):         if self.logical_operator:
0.81 json.py(206):         return sql, tuple(lhs_params) + tuple(rhs_params)
+ cat coverage.cover
{"/testbed/django/db/models/fields/json.py": {"1": 1, "3": 1, "4": 1, "5": 1, "6": 1, "7": 1, "8": 1, "10": 1, "11": 1, "13": 1, "16": 2, "129": 1, "142": 2, "157": 2, "172": 2, "235": 2, "241": 2, "250": 2, "256": 2, "277": 2, "291": 2, "295": 1, "296": 1, "297": 1, "298": 1, "299": 1, "300": 1, "301": 1, "304": 2, "360": 2, "365": 2, "387": 2, "411": 2, "440": 2, "480": 3, "481": 1, "486": 3, "487": 1, "492": 2, "496": 3, "497": 1, "502": 2, "506": 3, "507": 1, "512": 2, "516": 3, "517": 1, "522": 2, "530": 2, "534": 2, "538": 2, "542": 2, "546": 1, "547": 1, "548": 1, "549": 1, "550": 1, "551": 1, "552": 1, "553": 1, "554": 1, "555": 1, "556": 1, "558": 1, "559": 1, "560": 1, "561": 1, "564": 2, "17": 1, "18": 1, "20": 1, "19": 1, "22": 1, "24": 1, "40": 1, "46": 1, "70": 1, "78": 1, "90": 1, "93": 1, "98": 1, "104": 1, "115": 1, "118": 1, "32": 2, "33": 0, "34": 2, "35": 0, "36": 2, "37": 2, "38": 2, "41": 0, "42": 0, "43": 0, "44": 0, "47": 0, "48": 0, "49": 0, "50": 0, "51": 0, "53": 0, "52": 0, "54": 0, "56": 0, "58": 0, "57": 0, "59": 0, "61": 0, "62": 0, "63": 0, "64": 0, "65": 0, "68": 0, "71": 0, "72": 0, "73": 0, "74": 0, "75": 0, "76": 0, "79": 0, "80": 0, "83": 0, "84": 0, "85": 0, "86": 0, "87": 0, "88": 0, "91": 0, "94": 2, "95": 0, "96": 2, "99": 0, "100": 0, "101": 0, "102": 0, "105": 0, "106": 0, "107": 0, "108": 0, "109": 0, "110": 0, "111": 0, "112": 0, "116": 0, "119": 0, "121": 0, "122": 0, "123": 0, "120": 0, "124": 0, "130": 2, "131": 4, "132": 2, "133": 2, "134": 1, "135": 1, "136": 1, "138": 1, "139": 2, "143": 1, "144": 1, "146": 1, "147": 0, "148": 0, "149": 0, "151": 0, "152": 0, "153": 0, "154": 0, "158": 1, "159": 1, "161": 1, "162": 0, "163": 0, "164": 0, "166": 0, "167": 0, "168": 0, "169": 0, "173": 1, "175": 1, "208": 1, "213": 1, "221": 1, "229": 1, "177": 2, "178": 0, "179": 0, "181": 0, "183": 2, "184": 2, "185": 2, "187": 2, "188": 2, "189": 2, "190": 2, "191": 4, "192": 2, "193": 0, "195": 2, "196": 4, "197": 4, "199": 2, "200": 2, "198": 2, "204": 2, "205": 0, "206": 2, "209": 0, "210": 0, "214": 0, "215": 0, "219": 0, "222": 0, "223": 0, "224": 0, "225": 0, "226": 0, "227": 0, "230": 4, "231": 2, "236": 1, "237": 1, "238": 1, "242": 1, "243": 1, "244": 1, "246": 1, "247": 0, "251": 1, "252": 1, "253": 1, "264": 1, "270": 1, "265": 0, "266": 0, "267": 0, "268": 0, "271": 0, "272": 0, "273": 0, "274": 0, "278": 1, "280": 1, "281": 0, "283": 0, "284": 0, "285": 0, "286": 0, "287": 0, "288": 0, "292": 1, "305": 1, "306": 1, "308": 1, "312": 1, "324": 1, "329": 1, "337": 1, "348": 1, "309": 0, "310": 0, "313": 0, "314": 0, "315": 0, "316": 0, "317": 0, "318": 0, "319": 0, "321": 0, "322": 0, "325": 0, "326": 0, "327": 0, "330": 0, "331": 0, "333": 0, "334": 0, "335": 0, "332": 0, "338": 0, "339": 0, "340": 0, "341": 0, "342": 0, "343": 0, "344": 0, "345": 0, "346": 0, "349": 0, "350": 0, "351": 0, "352": 0, "355": 0, "357": 0, "354": 0, "361": 1, "362": 1, "373": 1, "374": 0, "375": 0, "376": 0, "379": 0, "380": 0, "381": 0, "382": 0, "384": 0, "389": 1, "400": 1, "390": 0, "391": 0, "392": 0, "393": 0, "394": 0, "395": 0, "397": 0, "398": 0, "401": 0, "402": 0, "403": 0, "404": 0, "405": 0, "406": 0, "407": 0, "412": 1, "413": 0, "414": 0, "415": 0, "416": 0, "417": 0, "420": 0, "419": 0, "421": 0, "423": 0, "424": 0, "425": 0, "426": 0, "427": 0, "429": 0, "430": 0, "431": 0, "432": 0, "434": 0, "435": 0, "436": 0, "437": 0, "441": 1, "465": 1, "442": 0, "443": 0, "444": 0, "445": 0, "446": 0, "447": 0, "448": 0, "449": 0, "450": 0, "451": 0, "453": 0, "454": 0, "455": 0, "456": 0, "457": 0, "458": 0, "459": 0, "461": 0, "462": 0, "463": 0, "466": 0, "467": 0, "469": 0, "470": 0, "471": 0, "472": 0, "474": 0, "475": 0, "473": 0, "477": 0, "483": 1, "489": 1, "493": 1, "499": 1, "503": 1, "509": 1, "513": 1, "519": 1, "523": 1, "524": 0, "525": 0, "526": 0, "527": 0, "531": 1, "535": 1, "539": 1, "543": 1, "565": 1, "568": 1, "566": 0, "569": 0}}
+ git checkout 859a87d873ce7152af73ab851653b4e1c3ffea4c
Note: switching to '859a87d873ce7152af73ab851653b4e1c3ffea4c'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at 859a87d873 Fixed #31357 -- Fixed get_for_models() crash for stale content types when model with the same name exists in another app.
+ git apply /root/pre_state.patch
error: unrecognized input
