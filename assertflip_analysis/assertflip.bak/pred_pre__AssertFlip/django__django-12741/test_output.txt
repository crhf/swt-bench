+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD 537d422942b53bc0a2b6a51968f379c0de07793c
+ sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen
+ locale-gen
Generating locales (this might take a while)...
  en_US.UTF-8... done
Generation complete.
+ export LANG=en_US.UTF-8
+ LANG=en_US.UTF-8
+ export LANGUAGE=en_US:en
+ LANGUAGE=en_US:en
+ export LC_ALL=en_US.UTF-8
+ LC_ALL=en_US.UTF-8
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
nothing to commit, working tree clean
+ git show
commit 537d422942b53bc0a2b6a51968f379c0de07793c
Author: Jon Dufresne <jon.dufresne@gmail.com>
Date:   Sat Apr 18 11:48:30 2020 -0700

    Simplified LongNameTest.test_sequence_name_length_limits_flush() with execute_sql_flush().

diff --git a/tests/backends/tests.py b/tests/backends/tests.py
index 2cbfa2f5a2..d6c2331378 100644
--- a/tests/backends/tests.py
+++ b/tests/backends/tests.py
@@ -162,9 +162,7 @@ class LongNameTest(TransactionTestCase):
             VLM_m2m._meta.db_table,
         ]
         sql_list = connection.ops.sql_flush(no_style(), tables, reset_sequences=True)
-        with connection.cursor() as cursor:
-            for statement in sql_list:
-                cursor.execute(statement)
+        connection.ops.execute_sql_flush(connection.alias, sql_list)
 
 
 class SequenceResetTest(TestCase):
+ git diff 537d422942b53bc0a2b6a51968f379c0de07793c
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
Requirement already satisfied: asgiref>=3.2 in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.1) (3.4.1)
Requirement already satisfied: pytz in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.1) (2025.2)
Requirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.1) (0.4.4)
Requirement already satisfied: typing-extensions in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from asgiref>=3.2->Django==3.1) (4.1.1)
Installing collected packages: Django
  Attempting uninstall: Django
    Found existing installation: Django 3.1
    Uninstalling Django-3.1:
      Successfully uninstalled Django-3.1
  Running setup.py develop for Django
Successfully installed Django-3.1
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv
+ git apply -v -
Checking patch tests/test_coverup_django__django-12741.py...
Applied patch tests/test_coverup_django__django-12741.py cleanly.
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/db/backends/base/operations\.py|django/core/management/commands/flush\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-12741
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(django/db/backends/base/operations\\.py|django/core/management/commands/flush\\.py)']
Testing against Django installed in '/testbed/django'
0.56 operations.py(1): import datetime
0.56 operations.py(2): import decimal
0.56 operations.py(3): from importlib import import_module
0.56 operations.py(5): import sqlparse
0.56 operations.py(7): from django.conf import settings
0.56 operations.py(8): from django.db import NotSupportedError, transaction
0.56 operations.py(9): from django.db.backends import utils
0.56 operations.py(10): from django.utils import timezone
0.56 operations.py(11): from django.utils.encoding import force_str
0.56 operations.py(14): class BaseDatabaseOperations:
0.56 operations.py(14): class BaseDatabaseOperations:
0.56 operations.py(18):     """
0.56 operations.py(19):     compiler_module = "django.db.models.sql.compiler"
0.56 operations.py(24):         'SmallIntegerField': (-32768, 32767),
0.56 operations.py(25):         'IntegerField': (-2147483648, 2147483647),
0.56 operations.py(26):         'BigIntegerField': (-9223372036854775808, 9223372036854775807),
0.56 operations.py(27):         'PositiveBigIntegerField': (0, 9223372036854775807),
0.56 operations.py(28):         'PositiveSmallIntegerField': (0, 32767),
0.56 operations.py(29):         'PositiveIntegerField': (0, 2147483647),
0.56 operations.py(30):         'SmallAutoField': (-32768, 32767),
0.56 operations.py(31):         'AutoField': (-2147483648, 2147483647),
0.56 operations.py(32):         'BigAutoField': (-9223372036854775808, 9223372036854775807),
0.56 operations.py(35):         'union': 'UNION',
0.56 operations.py(36):         'intersection': 'INTERSECT',
0.56 operations.py(37):         'difference': 'EXCEPT',
0.56 operations.py(42):     cast_data_types = {}
0.56 operations.py(44):     cast_char_field_without_max_length = None
0.56 operations.py(47):     PRECEDING = 'PRECEDING'
0.56 operations.py(48):     FOLLOWING = 'FOLLOWING'
0.56 operations.py(49):     UNBOUNDED_PRECEDING = 'UNBOUNDED ' + PRECEDING
0.56 operations.py(50):     UNBOUNDED_FOLLOWING = 'UNBOUNDED ' + FOLLOWING
0.56 operations.py(51):     CURRENT_ROW = 'CURRENT ROW'
0.56 operations.py(54):     explain_prefix = None
0.56 operations.py(56):     def __init__(self, connection):
0.56 operations.py(60):     def autoinc_sql(self, table, column):
0.56 operations.py(69):     def bulk_batch_size(self, fields, objs):
0.56 operations.py(77):     def cache_key_culling_sql(self):
0.56 operations.py(87):     def unification_cast_sql(self, output_field):
0.56 operations.py(95):     def date_extract_sql(self, lookup_type, field_name):
0.56 operations.py(102):     def date_interval_sql(self, timedelta):
0.56 operations.py(108):     def date_trunc_sql(self, lookup_type, field_name):
0.56 operations.py(116):     def datetime_cast_date_sql(self, field_name, tzname):
0.56 operations.py(125):     def datetime_cast_time_sql(self, field_name, tzname):
0.56 operations.py(131):     def datetime_extract_sql(self, lookup_type, field_name, tzname):
0.56 operations.py(139):     def datetime_trunc_sql(self, lookup_type, field_name, tzname):
0.56 operations.py(147):     def time_trunc_sql(self, lookup_type, field_name):
0.56 operations.py(155):     def time_extract_sql(self, lookup_type, field_name):
0.56 operations.py(162):     def deferrable_sql(self):
0.56 operations.py(169):     def distinct_sql(self, fields, params):
0.56 operations.py(180):     def fetch_returned_insert_columns(self, cursor, returning_params):
0.56 operations.py(187):     def field_cast_sql(self, db_type, internal_type):
0.56 operations.py(196):     def force_no_ordering(self):
0.56 operations.py(203):     def for_update_sql(self, nowait=False, skip_locked=False, of=()):
0.56 operations.py(213):     def _get_limit_offset_params(self, low_mark, high_mark):
0.56 operations.py(221):     def limit_offset_sql(self, low_mark, high_mark):
0.56 operations.py(229):     def last_executed_query(self, cursor, sql, params):
0.56 operations.py(251):     def last_insert_id(self, cursor, table_name, pk_name):
0.56 operations.py(260):     def lookup_cast(self, lookup_type, internal_type=None):
0.56 operations.py(268):     def max_in_list_size(self):
0.56 operations.py(275):     def max_name_length(self):
0.56 operations.py(282):     def no_limit_value(self):
0.56 operations.py(289):     def pk_default_value(self):
0.56 operations.py(296):     def prepare_sql_script(self, sql):
0.56 operations.py(310):     def process_clob(self, value):
0.56 operations.py(317):     def return_insert_columns(self, fields):
0.56 operations.py(325):     def compiler(self, compiler_name):
0.56 operations.py(335):     def quote_name(self, name):
0.56 operations.py(342):     def random_function_sql(self):
0.56 operations.py(346):     def regex_lookup(self, lookup_type):
0.56 operations.py(357):     def savepoint_create_sql(self, sid):
0.56 operations.py(365):     def savepoint_commit_sql(self, sid):
0.56 operations.py(371):     def savepoint_rollback_sql(self, sid):
0.56 operations.py(377):     def set_time_zone_sql(self):
0.56 operations.py(385):     def sql_flush(self, style, tables, *, reset_sequences=False, allow_cascade=False):
0.56 operations.py(403):     def execute_sql_flush(self, using, sql_list):
0.56 operations.py(410):     def sequence_reset_by_name_sql(self, style, sequences):
0.56 operations.py(420):     def sequence_reset_sql(self, style, model_list):
0.56 operations.py(430):     def start_transaction_sql(self):
0.56 operations.py(434):     def end_transaction_sql(self, success=True):
0.56 operations.py(440):     def tablespace_sql(self, tablespace, inline=False):
0.56 operations.py(451):     def prep_for_like_query(self, x):
0.56 operations.py(457):     prep_for_iexact_query = prep_for_like_query
0.56 operations.py(459):     def validate_autopk_value(self, value):
0.56 operations.py(467):     def adapt_unknown_value(self, value):
0.56 operations.py(486):     def adapt_datefield_value(self, value):
0.56 operations.py(495):     def adapt_datetimefield_value(self, value):
0.56 operations.py(504):     def adapt_timefield_value(self, value):
0.56 operations.py(515):     def adapt_decimalfield_value(self, value, max_digits=None, decimal_places=None):
0.56 operations.py(522):     def adapt_ipaddressfield_value(self, value):
0.56 operations.py(529):     def year_lookup_bounds_for_date_field(self, value):
0.56 operations.py(543):     def year_lookup_bounds_for_datetime_field(self, value):
0.56 operations.py(561):     def get_db_converters(self, expression):
0.56 operations.py(570):     def convert_durationfield_value(self, value, expression, connection):
0.56 operations.py(574):     def check_expression_support(self, expression):
0.56 operations.py(585):     def conditional_expression_supported_in_where_clause(self, expression):
0.56 operations.py(592):     def combine_expression(self, connector, sub_expressions):
0.56 operations.py(602):     def combine_duration_expression(self, connector, sub_expressions):
0.56 operations.py(605):     def binary_placeholder_sql(self, value):
0.56 operations.py(612):     def modify_insert_params(self, placeholder, params):
0.56 operations.py(619):     def integer_field_range(self, internal_type):
0.56 operations.py(627):     def subtract_temporals(self, internal_type, lhs, rhs):
0.56 operations.py(634):     def window_frame_start(self, start):
0.56 operations.py(644):     def window_frame_end(self, end):
0.56 operations.py(654):     def window_frame_rows_start_end(self, start=None, end=None):
0.56 operations.py(662):     def window_frame_range_start_end(self, start=None, end=None):
0.56 operations.py(674):     def explain_query_prefix(self, format=None, **options):
0.56 operations.py(689):     def insert_statement(self, ignore_conflicts=False):
0.56 operations.py(692):     def ignore_conflicts_suffix_sql(self, ignore_conflicts=None):
0.57 operations.py(57):         self.connection = connection
0.57 operations.py(58):         self._cache = None
0.57 operations.py(280):         return None
0.57 operations.py(280):         return None
0.57 operations.py(280):         return None
0.57 operations.py(280):         return None
0.58 operations.py(280):         return None
0.58 operations.py(280):         return None
0.58 operations.py(280):         return None
0.58 operations.py(280):         return None
0.58 operations.py(280):         return None
0.58 operations.py(280):         return None
Skipping setup of unused database(s): other.
0.59 operations.py(57):         self.connection = connection
0.59 operations.py(58):         self._cache = None
Operations to perform:
  Synchronize unmigrated apps: auth, contenttypes, messages, sessions, staticfiles
  Apply all migrations: admin, sites
0.62 operations.py(280):         return None
0.62 operations.py(280):         return None
0.62 operations.py(280):         return None
Synchronizing apps without migrations:
  Creating tables...
    Creating table django_content_type
0.63 operations.py(67):         return None
    Creating table auth_permission
0.63 operations.py(67):         return None
    Creating table auth_group
0.63 operations.py(67):         return None
0.63 operations.py(67):         return None
    Creating table auth_user
0.63 operations.py(67):         return None
0.63 operations.py(67):         return None
0.63 operations.py(67):         return None
    Creating table django_session
    Running deferred SQL...
0.63 operations.py(280):         return None
0.63 operations.py(280):         return None
0.63 operations.py(280):         return None
0.63 operations.py(280):         return None
0.63 operations.py(280):         return None
0.63 operations.py(280):         return None
0.63 operations.py(280):         return None
0.63 operations.py(280):         return None
0.63 operations.py(280):         return None
0.63 operations.py(280):         return None
0.63 operations.py(280):         return None
0.63 operations.py(280):         return None
0.63 operations.py(280):         return None
Running migrations:
0.63 operations.py(67):         return None
  Applying admin.0001_initial...0.64 operations.py(280):         return None
0.64 operations.py(67):         return None
0.64 operations.py(331):         if self._cache is None:
0.64 operations.py(332):             self._cache = import_module(self.compiler_module)
0.65 operations.py(333):         return getattr(self._cache, compiler_name)
0.65 operations.py(690):         return 'INSERT INTO'
0.65 operations.py(617):         return params
0.65 operations.py(617):         return params
0.65 operations.py(617):         return params
0.65 operations.py(693):         return ''
0.65 operations.py(258):         return cursor.lastrowid
0.65 operations.py(280):         return None
0.65 operations.py(280):         return None
 OK
  Applying admin.0002_logentry_remove_auto_add...0.65 operations.py(280):         return None
0.65 operations.py(67):         return None
0.66 operations.py(280):         return None
0.66 operations.py(280):         return None
0.66 operations.py(331):         if self._cache is None:
0.66 operations.py(333):         return getattr(self._cache, compiler_name)
0.66 operations.py(690):         return 'INSERT INTO'
0.66 operations.py(617):         return params
0.66 operations.py(617):         return params
0.66 operations.py(617):         return params
0.66 operations.py(693):         return ''
0.66 operations.py(258):         return cursor.lastrowid
 OK
  Applying admin.0003_logentry_add_action_flag_choices...0.66 operations.py(280):         return None
0.66 operations.py(67):         return None
0.67 operations.py(280):         return None
0.67 operations.py(280):         return None
0.67 operations.py(331):         if self._cache is None:
0.67 operations.py(333):         return getattr(self._cache, compiler_name)
0.67 operations.py(690):         return 'INSERT INTO'
0.67 operations.py(617):         return params
0.67 operations.py(617):         return params
0.67 operations.py(617):         return params
0.67 operations.py(693):         return ''
0.67 operations.py(258):         return cursor.lastrowid
 OK
  Applying sites.0001_initial...0.67 operations.py(67):         return None
0.67 operations.py(331):         if self._cache is None:
0.67 operations.py(333):         return getattr(self._cache, compiler_name)
0.67 operations.py(690):         return 'INSERT INTO'
0.67 operations.py(617):         return params
0.67 operations.py(617):         return params
0.67 operations.py(617):         return params
0.67 operations.py(693):         return ''
0.67 operations.py(258):         return cursor.lastrowid
 OK
  Applying sites.0002_alter_domain_unique...0.68 operations.py(67):         return None
0.68 operations.py(331):         if self._cache is None:
0.68 operations.py(333):         return getattr(self._cache, compiler_name)
0.68 operations.py(690):         return 'INSERT INTO'
0.68 operations.py(617):         return params
0.68 operations.py(617):         return params
0.68 operations.py(617):         return params
0.68 operations.py(693):         return ''
0.68 operations.py(258):         return cursor.lastrowid
 OK
0.68 operations.py(331):         if self._cache is None:
0.68 operations.py(333):         return getattr(self._cache, compiler_name)
0.68 operations.py(568):         return []
0.68 operations.py(568):         return []
0.68 operations.py(568):         return []
0.68 operations.py(568):         return []
0.68 operations.py(280):         return None
0.68 operations.py(280):         return None
0.68 operations.py(280):         return None
0.69 operations.py(280):         return None
0.69 operations.py(280):         return None
0.69 operations.py(280):         return None
0.69 operations.py(280):         return None
0.69 operations.py(280):         return None
0.69 operations.py(280):         return None
0.69 operations.py(331):         if self._cache is None:
0.69 operations.py(333):         return getattr(self._cache, compiler_name)
0.69 operations.py(194):         return '%s'
0.69 operations.py(266):         return "%s"
0.69 operations.py(568):         return []
0.69 operations.py(568):         return []
0.69 operations.py(568):         return []
0.69 operations.py(331):         if self._cache is None:
0.69 operations.py(333):         return getattr(self._cache, compiler_name)
0.69 operations.py(690):         return 'INSERT INTO'
0.69 operations.py(617):         return params
0.69 operations.py(617):         return params
0.69 operations.py(693):         return ''
0.70 operations.py(331):         if self._cache is None:
0.70 operations.py(333):         return getattr(self._cache, compiler_name)
0.70 operations.py(194):         return '%s'
0.70 operations.py(266):         return "%s"
0.70 operations.py(568):         return []
0.70 operations.py(568):         return []
0.70 operations.py(568):         return []
0.70 operations.py(331):         if self._cache is None:
0.70 operations.py(333):         return getattr(self._cache, compiler_name)
0.70 operations.py(194):         return '%s'
0.70 operations.py(266):         return "%s"
0.70 operations.py(194):         return '%s'
0.70 operations.py(266):         return "%s"
0.70 operations.py(223):         limit, offset = self._get_limit_offset_params(low_mark, high_mark)
0.70 operations.py(214):         offset = low_mark or 0
0.70 operations.py(215):         if high_mark is not None:
0.70 operations.py(216):             return (high_mark - offset), offset
0.70 operations.py(224):         return ' '.join(sql for sql in (
0.70 operations.py(225):             ('LIMIT %d' % limit) if limit else None,
0.70 operations.py(226):             ('OFFSET %d' % offset) if offset else None,
0.70 operations.py(224):         return ' '.join(sql for sql in (
0.70 operations.py(227):         ) if sql)
0.70 operations.py(224):         return ' '.join(sql for sql in (
0.70 operations.py(227):         ) if sql)
0.70 operations.py(224):         return ' '.join(sql for sql in (
0.70 operations.py(568):         return []
0.70 operations.py(568):         return []
0.70 operations.py(568):         return []
0.70 operations.py(331):         if self._cache is None:
0.70 operations.py(333):         return getattr(self._cache, compiler_name)
0.70 operations.py(273):         return None
0.70 operations.py(194):         return '%s'
0.70 operations.py(266):         return "%s"
0.70 operations.py(568):         return []
0.70 operations.py(568):         return []
0.70 operations.py(331):         if self._cache is None:
0.70 operations.py(333):         return getattr(self._cache, compiler_name)
0.70 operations.py(690):         return 'INSERT INTO'
0.70 operations.py(465):         return value
0.70 operations.py(465):         return value
0.70 operations.py(465):         return value
0.70 operations.py(465):         return value
0.70 operations.py(617):         return params
0.70 operations.py(617):         return params
0.70 operations.py(617):         return params
0.70 operations.py(617):         return params
0.70 operations.py(617):         return params
0.70 operations.py(617):         return params
0.70 operations.py(617):         return params
0.70 operations.py(617):         return params
0.70 operations.py(617):         return params
0.70 operations.py(617):         return params
0.70 operations.py(617):         return params
0.70 operations.py(617):         return params
0.70 operations.py(693):         return ''
0.70 operations.py(331):         if self._cache is None:
0.70 operations.py(333):         return getattr(self._cache, compiler_name)
0.70 operations.py(194):         return '%s'
0.70 operations.py(266):         return "%s"
0.70 operations.py(568):         return []
0.70 operations.py(568):         return []
0.70 operations.py(568):         return []
0.70 operations.py(331):         if self._cache is None:
0.70 operations.py(333):         return getattr(self._cache, compiler_name)
0.70 operations.py(690):         return 'INSERT INTO'
0.70 operations.py(617):         return params
0.70 operations.py(617):         return params
0.70 operations.py(617):         return params
0.70 operations.py(617):         return params
0.70 operations.py(617):         return params
0.70 operations.py(617):         return params
0.70 operations.py(693):         return ''
0.70 operations.py(331):         if self._cache is None:
0.70 operations.py(333):         return getattr(self._cache, compiler_name)
0.70 operations.py(194):         return '%s'
0.70 operations.py(266):         return "%s"
0.70 operations.py(568):         return []
0.70 operations.py(568):         return []
0.70 operations.py(568):         return []
0.70 operations.py(331):         if self._cache is None:
0.70 operations.py(333):         return getattr(self._cache, compiler_name)
0.70 operations.py(194):         return '%s'
0.70 operations.py(266):         return "%s"
0.70 operations.py(194):         return '%s'
0.70 operations.py(266):         return "%s"
0.70 operations.py(223):         limit, offset = self._get_limit_offset_params(low_mark, high_mark)
0.70 operations.py(214):         offset = low_mark or 0
0.70 operations.py(215):         if high_mark is not None:
0.70 operations.py(216):             return (high_mark - offset), offset
0.70 operations.py(224):         return ' '.join(sql for sql in (
0.70 operations.py(225):             ('LIMIT %d' % limit) if limit else None,
0.70 operations.py(226):             ('OFFSET %d' % offset) if offset else None,
0.70 operations.py(224):         return ' '.join(sql for sql in (
0.70 operations.py(227):         ) if sql)
0.70 operations.py(224):         return ' '.join(sql for sql in (
0.70 operations.py(227):         ) if sql)
0.70 operations.py(224):         return ' '.join(sql for sql in (
0.70 operations.py(568):         return []
0.70 operations.py(568):         return []
0.70 operations.py(568):         return []
0.70 operations.py(331):         if self._cache is None:
0.70 operations.py(333):         return getattr(self._cache, compiler_name)
0.70 operations.py(194):         return '%s'
0.70 operations.py(266):         return "%s"
0.70 operations.py(194):         return '%s'
0.70 operations.py(266):         return "%s"
0.70 operations.py(223):         limit, offset = self._get_limit_offset_params(low_mark, high_mark)
0.70 operations.py(214):         offset = low_mark or 0
0.70 operations.py(215):         if high_mark is not None:
0.70 operations.py(216):             return (high_mark - offset), offset
0.70 operations.py(224):         return ' '.join(sql for sql in (
0.70 operations.py(225):             ('LIMIT %d' % limit) if limit else None,
0.70 operations.py(226):             ('OFFSET %d' % offset) if offset else None,
0.70 operations.py(224):         return ' '.join(sql for sql in (
0.70 operations.py(227):         ) if sql)
0.70 operations.py(224):         return ' '.join(sql for sql in (
0.70 operations.py(227):         ) if sql)
0.70 operations.py(224):         return ' '.join(sql for sql in (
0.70 operations.py(568):         return []
0.70 operations.py(568):         return []
0.70 operations.py(568):         return []
0.70 operations.py(331):         if self._cache is None:
0.70 operations.py(333):         return getattr(self._cache, compiler_name)
0.70 operations.py(194):         return '%s'
0.70 operations.py(266):         return "%s"
0.70 operations.py(194):         return '%s'
0.70 operations.py(266):         return "%s"
0.70 operations.py(223):         limit, offset = self._get_limit_offset_params(low_mark, high_mark)
0.70 operations.py(214):         offset = low_mark or 0
0.70 operations.py(215):         if high_mark is not None:
0.70 operations.py(216):             return (high_mark - offset), offset
0.70 operations.py(224):         return ' '.join(sql for sql in (
0.70 operations.py(225):             ('LIMIT %d' % limit) if limit else None,
0.70 operations.py(226):             ('OFFSET %d' % offset) if offset else None,
0.70 operations.py(224):         return ' '.join(sql for sql in (
0.70 operations.py(227):         ) if sql)
0.70 operations.py(224):         return ' '.join(sql for sql in (
0.70 operations.py(227):         ) if sql)
0.70 operations.py(224):         return ' '.join(sql for sql in (
0.70 operations.py(568):         return []
0.70 operations.py(568):         return []
0.70 operations.py(568):         return []
0.71 operations.py(331):         if self._cache is None:
0.71 operations.py(333):         return getattr(self._cache, compiler_name)
0.71 operations.py(273):         return None
0.71 operations.py(194):         return '%s'
0.71 operations.py(266):         return "%s"
0.71 operations.py(568):         return []
0.71 operations.py(568):         return []
0.71 operations.py(331):         if self._cache is None:
0.71 operations.py(333):         return getattr(self._cache, compiler_name)
0.71 operations.py(690):         return 'INSERT INTO'
0.71 operations.py(465):         return value
0.71 operations.py(465):         return value
0.71 operations.py(465):         return value
0.71 operations.py(465):         return value
0.71 operations.py(465):         return value
0.71 operations.py(465):         return value
0.71 operations.py(465):         return value
0.71 operations.py(465):         return value
0.71 operations.py(465):         return value
0.71 operations.py(465):         return value
0.71 operations.py(465):         return value
0.71 operations.py(465):         return value
0.71 operations.py(617):         return params
0.71 operations.py(617):         return params
0.71 operations.py(617):         return params
0.71 operations.py(617):         return params
0.71 operations.py(617):         return params
0.71 operations.py(617):         return params
0.71 operations.py(617):         return params
0.71 operations.py(617):         return params
0.71 operations.py(617):         return params
0.71 operations.py(617):         return params
0.71 operations.py(617):         return params
0.71 operations.py(617):         return params
0.71 operations.py(617):         return params
0.71 operations.py(617):         return params
0.71 operations.py(617):         return params
0.71 operations.py(617):         return params
0.71 operations.py(617):         return params
0.71 operations.py(617):         return params
0.71 operations.py(617):         return params
0.71 operations.py(617):         return params
0.71 operations.py(617):         return params
0.71 operations.py(617):         return params
0.71 operations.py(617):         return params
0.71 operations.py(617):         return params
0.71 operations.py(617):         return params
0.71 operations.py(617):         return params
0.71 operations.py(617):         return params
0.71 operations.py(617):         return params
0.71 operations.py(617):         return params
0.71 operations.py(617):         return params
0.71 operations.py(617):         return params
0.71 operations.py(617):         return params
0.71 operations.py(617):         return params
0.71 operations.py(617):         return params
0.71 operations.py(617):         return params
0.71 operations.py(617):         return params
0.71 operations.py(693):         return ''
0.71 operations.py(331):         if self._cache is None:
0.71 operations.py(333):         return getattr(self._cache, compiler_name)
0.71 operations.py(194):         return '%s'
0.71 operations.py(266):         return "%s"
0.71 operations.py(568):         return []
0.71 operations.py(568):         return []
0.71 operations.py(568):         return []
0.71 operations.py(331):         if self._cache is None:
0.71 operations.py(333):         return getattr(self._cache, compiler_name)
0.71 operations.py(690):         return 'INSERT INTO'
0.71 operations.py(617):         return params
0.71 operations.py(617):         return params
0.71 operations.py(693):         return ''
0.71 operations.py(331):         if self._cache is None:
0.71 operations.py(333):         return getattr(self._cache, compiler_name)
0.71 operations.py(194):         return '%s'
0.71 operations.py(266):         return "%s"
0.71 operations.py(568):         return []
0.71 operations.py(568):         return []
0.71 operations.py(568):         return []
0.71 operations.py(331):         if self._cache is None:
0.71 operations.py(333):         return getattr(self._cache, compiler_name)
0.71 operations.py(194):         return '%s'
0.71 operations.py(266):         return "%s"
0.71 operations.py(194):         return '%s'
0.71 operations.py(266):         return "%s"
0.71 operations.py(223):         limit, offset = self._get_limit_offset_params(low_mark, high_mark)
0.71 operations.py(214):         offset = low_mark or 0
0.71 operations.py(215):         if high_mark is not None:
0.71 operations.py(216):             return (high_mark - offset), offset
0.71 operations.py(224):         return ' '.join(sql for sql in (
0.71 operations.py(225):             ('LIMIT %d' % limit) if limit else None,
0.71 operations.py(226):             ('OFFSET %d' % offset) if offset else None,
0.71 operations.py(224):         return ' '.join(sql for sql in (
0.71 operations.py(227):         ) if sql)
0.71 operations.py(224):         return ' '.join(sql for sql in (
0.71 operations.py(227):         ) if sql)
0.71 operations.py(224):         return ' '.join(sql for sql in (
0.71 operations.py(568):         return []
0.71 operations.py(568):         return []
0.71 operations.py(568):         return []
0.71 operations.py(331):         if self._cache is None:
0.71 operations.py(333):         return getattr(self._cache, compiler_name)
0.71 operations.py(273):         return None
0.71 operations.py(194):         return '%s'
0.71 operations.py(266):         return "%s"
0.71 operations.py(568):         return []
0.71 operations.py(568):         return []
0.71 operations.py(331):         if self._cache is None:
0.71 operations.py(333):         return getattr(self._cache, compiler_name)
0.71 operations.py(690):         return 'INSERT INTO'
0.71 operations.py(465):         return value
0.71 operations.py(465):         return value
0.71 operations.py(465):         return value
0.71 operations.py(465):         return value
0.71 operations.py(617):         return params
0.71 operations.py(617):         return params
0.71 operations.py(617):         return params
0.71 operations.py(617):         return params
0.71 operations.py(617):         return params
0.71 operations.py(617):         return params
0.71 operations.py(617):         return params
0.71 operations.py(617):         return params
0.71 operations.py(617):         return params
0.71 operations.py(617):         return params
0.71 operations.py(617):         return params
0.71 operations.py(617):         return params
0.71 operations.py(693):         return ''
0.71 operations.py(331):         if self._cache is None:
0.71 operations.py(333):         return getattr(self._cache, compiler_name)
0.71 operations.py(223):         limit, offset = self._get_limit_offset_params(low_mark, high_mark)
0.71 operations.py(214):         offset = low_mark or 0
0.71 operations.py(215):         if high_mark is not None:
0.71 operations.py(216):             return (high_mark - offset), offset
0.71 operations.py(224):         return ' '.join(sql for sql in (
0.71 operations.py(225):             ('LIMIT %d' % limit) if limit else None,
0.71 operations.py(226):             ('OFFSET %d' % offset) if offset else None,
0.71 operations.py(224):         return ' '.join(sql for sql in (
0.71 operations.py(227):         ) if sql)
0.71 operations.py(224):         return ' '.join(sql for sql in (
0.71 operations.py(227):         ) if sql)
0.71 operations.py(224):         return ' '.join(sql for sql in (
0.72 operations.py(331):         if self._cache is None:
0.72 operations.py(333):         return getattr(self._cache, compiler_name)
0.72 operations.py(194):         return '%s'
0.72 operations.py(266):         return "%s"
0.72 operations.py(331):         if self._cache is None:
0.72 operations.py(333):         return getattr(self._cache, compiler_name)
0.72 operations.py(690):         return 'INSERT INTO'
0.72 operations.py(465):         return value
0.72 operations.py(617):         return params
0.72 operations.py(617):         return params
0.72 operations.py(617):         return params
0.72 operations.py(693):         return ''
0.72 operations.py(258):         return cursor.lastrowid
0.72 operations.py(428):         return []  # No sequence reset required by default.
0.72 operations.py(331):         if self._cache is None:
0.72 operations.py(333):         return getattr(self._cache, compiler_name)
0.72 operations.py(194):         return '%s'
0.72 operations.py(266):         return "%s"
0.72 operations.py(568):         return []
0.72 operations.py(568):         return []
0.72 operations.py(568):         return []
0.72 operations.py(331):         if self._cache is None:
0.72 operations.py(333):         return getattr(self._cache, compiler_name)
0.72 operations.py(690):         return 'INSERT INTO'
0.72 operations.py(617):         return params
0.72 operations.py(617):         return params
0.72 operations.py(693):         return ''
0.72 operations.py(331):         if self._cache is None:
0.72 operations.py(333):         return getattr(self._cache, compiler_name)
0.72 operations.py(194):         return '%s'
0.72 operations.py(266):         return "%s"
0.72 operations.py(568):         return []
0.72 operations.py(568):         return []
0.72 operations.py(568):         return []
0.72 operations.py(331):         if self._cache is None:
0.72 operations.py(333):         return getattr(self._cache, compiler_name)
0.72 operations.py(194):         return '%s'
0.72 operations.py(266):         return "%s"
0.72 operations.py(194):         return '%s'
0.72 operations.py(266):         return "%s"
0.72 operations.py(223):         limit, offset = self._get_limit_offset_params(low_mark, high_mark)
0.72 operations.py(214):         offset = low_mark or 0
0.72 operations.py(215):         if high_mark is not None:
0.72 operations.py(216):             return (high_mark - offset), offset
0.72 operations.py(224):         return ' '.join(sql for sql in (
0.72 operations.py(225):             ('LIMIT %d' % limit) if limit else None,
0.72 operations.py(226):             ('OFFSET %d' % offset) if offset else None,
0.72 operations.py(224):         return ' '.join(sql for sql in (
0.72 operations.py(227):         ) if sql)
0.72 operations.py(224):         return ' '.join(sql for sql in (
0.72 operations.py(227):         ) if sql)
0.72 operations.py(224):         return ' '.join(sql for sql in (
0.72 operations.py(568):         return []
Creating test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
test_execute_sql_flush_with_using_argument (test_coverup_django__django-12741.ExecuteSQLFlushTests) ... FAIL
test_execute_sql_flush_without_using_argument (test_coverup_django__django-12741.ExecuteSQLFlushTests) ... FAIL

======================================================================
FAIL: test_execute_sql_flush_with_using_argument (test_coverup_django__django-12741.ExecuteSQLFlushTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/opt/miniconda3/envs/testbed/lib/python3.6/unittest/mock.py", line 1183, in patched
    return func(*args, **keywargs)
  File "./tests/test_coverup_django__django-12741.py", line 30, in test_execute_sql_flush_with_using_argument
    self.assertTrue(self.cursor.execute.called)  # This should be True if the method worked correctly
AssertionError: False is not true

======================================================================
FAIL: test_execute_sql_flush_without_using_argument (test_coverup_django__django-12741.ExecuteSQLFlushTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/opt/miniconda3/envs/testbed/lib/python3.6/unittest/mock.py", line 1183, in patched
    return func(*args, **keywargs)
  File "./tests/test_coverup_django__django-12741.py", line 47, in test_execute_sql_flush_without_using_argument
    self.assertTrue(self.cursor.execute.called)  # This should be True if the method worked correctly
AssertionError: False is not true

----------------------------------------------------------------------
Ran 2 tests in 0.006s

FAILED (failures=2)
Destroying test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
0.72 operations.py(568):         return []
0.72 operations.py(568):         return []
0.72 operations.py(331):         if self._cache is None:
0.72 operations.py(333):         return getattr(self._cache, compiler_name)
0.72 operations.py(273):         return None
0.72 operations.py(194):         return '%s'
0.72 operations.py(266):         return "%s"
0.72 operations.py(568):         return []
0.72 operations.py(568):         return []
0.72 operations.py(331):         if self._cache is None:
0.72 operations.py(333):         return getattr(self._cache, compiler_name)
0.72 operations.py(690):         return 'INSERT INTO'
0.72 operations.py(465):         return value
0.72 operations.py(465):         return value
0.72 operations.py(465):         return value
0.72 operations.py(465):         return value
0.72 operations.py(617):         return params
0.72 operations.py(617):         return params
0.72 operations.py(617):         return params
0.72 operations.py(617):         return params
0.72 operations.py(617):         return params
0.72 operations.py(617):         return params
0.72 operations.py(617):         return params
0.72 operations.py(617):         return params
0.72 operations.py(617):         return params
0.72 operations.py(617):         return params
0.72 operations.py(617):         return params
0.72 operations.py(617):         return params
0.72 operations.py(693):         return ''
0.72 operations.py(331):         if self._cache is None:
0.72 operations.py(333):         return getattr(self._cache, compiler_name)
0.72 operations.py(194):         return '%s'
0.72 operations.py(266):         return "%s"
0.72 operations.py(568):         return []
0.72 operations.py(568):         return []
0.72 operations.py(568):         return []
0.72 operations.py(331):         if self._cache is None:
0.72 operations.py(333):         return getattr(self._cache, compiler_name)
0.72 operations.py(690):         return 'INSERT INTO'
0.72 operations.py(617):         return params
0.72 operations.py(617):         return params
0.72 operations.py(693):         return ''
0.72 operations.py(331):         if self._cache is None:
0.72 operations.py(333):         return getattr(self._cache, compiler_name)
0.72 operations.py(194):         return '%s'
0.72 operations.py(266):         return "%s"
0.72 operations.py(568):         return []
0.72 operations.py(568):         return []
0.72 operations.py(568):         return []
0.72 operations.py(331):         if self._cache is None:
0.72 operations.py(333):         return getattr(self._cache, compiler_name)
0.72 operations.py(194):         return '%s'
0.72 operations.py(266):         return "%s"
0.72 operations.py(194):         return '%s'
0.72 operations.py(266):         return "%s"
0.72 operations.py(223):         limit, offset = self._get_limit_offset_params(low_mark, high_mark)
0.72 operations.py(214):         offset = low_mark or 0
0.72 operations.py(215):         if high_mark is not None:
0.72 operations.py(216):             return (high_mark - offset), offset
0.72 operations.py(224):         return ' '.join(sql for sql in (
0.72 operations.py(225):             ('LIMIT %d' % limit) if limit else None,
0.72 operations.py(226):             ('OFFSET %d' % offset) if offset else None,
0.72 operations.py(224):         return ' '.join(sql for sql in (
0.72 operations.py(227):         ) if sql)
0.72 operations.py(224):         return ' '.join(sql for sql in (
0.72 operations.py(227):         ) if sql)
0.72 operations.py(224):         return ' '.join(sql for sql in (
0.72 operations.py(568):         return []
0.72 operations.py(568):         return []
0.72 operations.py(568):         return []
0.72 operations.py(331):         if self._cache is None:
0.72 operations.py(333):         return getattr(self._cache, compiler_name)
0.73 operations.py(273):         return None
0.73 operations.py(194):         return '%s'
0.73 operations.py(266):         return "%s"
0.73 operations.py(568):         return []
0.73 operations.py(568):         return []
0.73 operations.py(331):         if self._cache is None:
0.73 operations.py(333):         return getattr(self._cache, compiler_name)
0.73 operations.py(690):         return 'INSERT INTO'
0.73 operations.py(465):         return value
0.73 operations.py(465):         return value
0.73 operations.py(465):         return value
0.73 operations.py(465):         return value
0.73 operations.py(617):         return params
0.73 operations.py(617):         return params
0.73 operations.py(617):         return params
0.73 operations.py(617):         return params
0.73 operations.py(617):         return params
0.73 operations.py(617):         return params
0.73 operations.py(617):         return params
0.73 operations.py(617):         return params
0.73 operations.py(617):         return params
0.73 operations.py(617):         return params
0.73 operations.py(617):         return params
0.73 operations.py(617):         return params
0.73 operations.py(693):         return ''
0.76 operations.py(331):         if self._cache is None:
0.76 operations.py(333):         return getattr(self._cache, compiler_name)
0.76 operations.py(568):         return []
0.76 operations.py(568):         return []
0.76 operations.py(568):         return []
0.76 operations.py(568):         return []
0.76 operations.py(331):         if self._cache is None:
0.76 operations.py(333):         return getattr(self._cache, compiler_name)
0.76 operations.py(568):         return []
0.76 operations.py(568):         return []
0.76 operations.py(568):         return []
0.76 operations.py(331):         if self._cache is None:
0.76 operations.py(333):         return getattr(self._cache, compiler_name)
0.77 operations.py(568):         return []
0.77 operations.py(568):         return []
0.77 operations.py(568):         return []
0.77 operations.py(568):         return []
0.77 operations.py(568):         return []
0.77 operations.py(568):         return []
0.77 operations.py(568):         return []
0.77 operations.py(568):         return []
0.80 operations.py(280):         return None
0.80 operations.py(280):         return None
0.80 operations.py(280):         return None
0.80 operations.py(280):         return None
0.80 operations.py(280):         return None
0.80 operations.py(280):         return None
0.81 operations.py(280):         return None
System check identified no issues (0 silenced).
0.81 operations.py(363):         return "SAVEPOINT %s" % self.quote_name(sid)
0.81 operations.py(375):         return "ROLLBACK TO SAVEPOINT %s" % self.quote_name(sid)
0.81 operations.py(369):         return "RELEASE SAVEPOINT %s" % self.quote_name(sid)
0.81 operations.py(363):         return "SAVEPOINT %s" % self.quote_name(sid)
0.82 operations.py(375):         return "ROLLBACK TO SAVEPOINT %s" % self.quote_name(sid)
0.82 operations.py(369):         return "RELEASE SAVEPOINT %s" % self.quote_name(sid)
+ cat coverage.cover
{"/testbed/django/db/backends/base/operations.py": {"1": 1, "2": 1, "3": 1, "5": 1, "7": 1, "8": 1, "9": 1, "10": 1, "11": 1, "14": 2, "19": 1, "24": 1, "25": 1, "26": 1, "27": 1, "28": 1, "29": 1, "30": 1, "31": 1, "32": 1, "35": 1, "36": 1, "37": 1, "42": 1, "44": 1, "47": 1, "48": 1, "49": 1, "50": 1, "51": 1, "54": 1, "56": 1, "60": 1, "69": 1, "77": 1, "87": 1, "95": 1, "102": 1, "108": 1, "116": 1, "125": 1, "131": 1, "139": 1, "147": 1, "155": 1, "162": 1, "169": 1, "180": 1, "187": 1, "196": 1, "203": 1, "213": 1, "221": 1, "229": 1, "251": 1, "260": 1, "268": 1, "275": 1, "282": 1, "289": 1, "296": 1, "310": 1, "317": 1, "325": 1, "335": 1, "342": 1, "346": 1, "357": 1, "365": 1, "371": 1, "377": 1, "385": 1, "403": 1, "410": 1, "420": 1, "430": 1, "434": 1, "440": 1, "451": 1, "457": 1, "459": 1, "467": 1, "486": 1, "495": 1, "504": 1, "515": 1, "522": 1, "529": 1, "543": 1, "561": 1, "570": 1, "574": 1, "585": 1, "592": 1, "602": 1, "605": 1, "612": 1, "619": 1, "627": 1, "634": 1, "644": 1, "654": 1, "662": 1, "674": 1, "689": 1, "692": 1, "57": 2, "58": 2, "67": 13, "75": 0, "85": 0, "93": 0, "100": 0, "106": 0, "114": 0, "120": 0, "121": 0, "129": 0, "137": 0, "145": 0, "153": 0, "160": 0, "167": 0, "175": 0, "176": 0, "178": 0, "185": 0, "194": 30, "201": 0, "207": 0, "208": 0, "209": 0, "210": 0, "214": 8, "215": 8, "216": 8, "217": 0, "218": 0, "219": 0, "223": 8, "224": 32, "225": 8, "226": 8, "227": 16, "240": 0, "242": 0, "243": 0, "244": 0, "245": 0, "247": 0, "249": 0, "241": 0, "258": 6, "266": 30, "273": 5, "280": 51, "287": 0, "294": 0, "306": 0, "307": 0, "315": 0, "323": 0, "331": 44, "332": 1, "333": 44, "340": 0, "344": 0, "355": 0, "363": 2, "369": 2, "375": 2, "383": 0, "401": 0, "405": 0, "406": 0, "407": 0, "408": 0, "418": 0, "428": 1, "432": 0, "436": 0, "437": 0, "438": 0, "449": 0, "453": 0, "465": 29, "475": 0, "476": 0, "477": 0, "478": 0, "479": 0, "480": 0, "481": 0, "482": 0, "484": 0, "491": 0, "492": 0, "493": 0, "500": 0, "501": 0, "502": 0, "509": 0, "510": 0, "511": 0, "512": 0, "513": 0, "520": 0, "527": 0, "537": 0, "538": 0, "539": 0, "540": 0, "541": 0, "551": 0, "552": 0, "553": 0, "554": 0, "555": 0, "556": 0, "557": 0, "558": 0, "559": 0, "568": 80, "571": 0, "572": 0, "583": 0, "590": 0, "599": 0, "600": 0, "603": 0, "610": 0, "617": 116, "625": 0, "628": 0, "629": 0, "630": 0, "631": 0, "632": 0, "635": 0, "636": 0, "637": 0, "638": 0, "639": 0, "640": 0, "641": 0, "642": 0, "645": 0, "646": 0, "647": 0, "648": 0, "649": 0, "650": 0, "651": 0, "652": 0, "658": 0, "659": 0, "660": 0, "663": 0, "665": 0, "666": 0, "668": 0, "669": 0, "670": 0, "672": 0, "675": 0, "676": 0, "677": 0, "678": 0, "679": 0, "680": 0, "681": 0, "682": 0, "683": 0, "684": 0, "685": 0, "686": 0, "687": 0, "690": 16, "693": 16}}
+ git checkout 537d422942b53bc0a2b6a51968f379c0de07793c
Note: switching to '537d422942b53bc0a2b6a51968f379c0de07793c'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at 537d422942 Simplified LongNameTest.test_sequence_name_length_limits_flush() with execute_sql_flush().
+ git apply /root/pre_state.patch
error: unrecognized input
