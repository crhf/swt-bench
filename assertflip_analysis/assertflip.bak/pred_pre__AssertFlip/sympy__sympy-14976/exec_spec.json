{"instance_id": "sympy__sympy-14976", "repo": "sympy/sympy", "version": "1.2", "environment_setup_commit": "e53e809176de9aa0fb62e85689f8cdb669d4cacb", "patch_list": ["diff --git a/dev/null b/sympy/polys/tests/test_coverup_sympy__sympy-14976.py\nnew file mode 100644\nindex e69de29..82288e5 100644\n--- /dev/null\n+++ b/sympy/polys/tests/test_coverup_sympy__sympy-14976.py\n@@ -0,0 +1,27 @@\n+from sympy import Eq, S, RisingFactorial, lambdify, Float, rf\n+from sympy.abc import x\n+import inspect\n+import mpmath\n+\n+def test_lambdify_mpmath_rational_precision():\n+    # Define the symbolic equation with a rational number\n+    eqn = Eq(rf(18, x), 77 + S(1)/3)\n+    \n+    # Create a lambda function using lambdify with mpmath\n+    f = lambdify(x, eqn.lhs - eqn.rhs, 'mpmath')\n+    \n+    # Get the source code of the generated lambda function\n+    source_code = inspect.getsource(f)\n+    \n+    # Assert that the source code does not contain the unevaluated rational number\n+    assert '232/3' not in source_code  # The rational should be evaluated to a float\n+    \n+    # Solve the equation numerically with high precision\n+    x0 = mpmath.nsolve(eqn, Float('1.5', 64), prec=64)\n+    \n+    # Evaluate the result with high precision\n+    result = rf(18, x0).evalf(64)\n+    \n+    # Assert that the result matches the expected high precision result\n+    expected_result = 77 + S(1)/3\n+    assert result == expected_result.evalf(64)  # The result should match the expected high precision result\n"], "arch": "x86_64", "base_commit": "9cbea134220b0b951587e11b63e2c832c7246cbc", "test_directives": ["sympy/polys/tests/test_coverup_sympy__sympy-14976.py"], "coverage_files": ["sympy/printing/pycode.py"], "env_name": "testbed", "run_id": "assertflip", "patch_id": "pred_pre__AssertFlip", "timeout": 1800, "rm_image": false, "force_rebuild": false, "exec_mode": "unit_test", "reproduction_script_name": null, "compute_coverage": true, "install": {"python": "3.9", "packages": "mpmath flake8", "pip_packages": ["mpmath==1.3.0", "flake8-comprehensions"], "install": "python -m pip install -e ."}, "cache_level": "instance", "test_command": "PYTHONWARNINGS='ignore::UserWarning,ignore::SyntaxWarning' python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(sympy/printing/pycode\\.py)' bin/test -C --verbose sympy/polys/tests/test_coverup_sympy__sympy-14976.p", "req_install_commands": ["conda create -n testbed python=3.9 mpmath flake8 -y"]}