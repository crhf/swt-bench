+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD 67e3c956083d0128a621f65ee86a7dacd4f9f19f
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch master
nothing to commit, working tree clean
+ git show
commit 67e3c956083d0128a621f65ee86a7dacd4f9f19f
Merge: 5cdce47f4a 5a1fe1650a
Author: Francesco Bonazzi <franz.bonazzi@gmail.com>
Date:   Mon Nov 27 12:13:22 2017 -0500

    Merge pull request #13641 from Upabjojr/diff_and_arrays
    
    diff( ) now supports derivatives by matrices and arrays

+ git diff 67e3c956083d0128a621f65ee86a7dacd4f9f19f
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Requirement already satisfied: mpmath>=0.19 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from sympy==1.1.2.dev0) (1.3.0)
Installing collected packages: sympy
  Attempting uninstall: sympy
    Found existing installation: sympy 1.1.2.dev0
    Uninstalling sympy-1.1.2.dev0:
      Successfully uninstalled sympy-1.1.2.dev0
  DEPRECATION: Legacy editable install of sympy==1.1.2.dev0 from file:///testbed (setup.py develop) is deprecated. pip 25.3 will enforce this behaviour change. A possible replacement is to add a pyproject.toml or enable --use-pep517, and use setuptools >= 64. If the resulting installation is not behaving as expected, try using --config-settings editable_mode=compat. Please consult the setuptools documentation for more information. Discussion can be found at https://github.com/pypa/pip/issues/11457
  Running setup.py develop for sympy
Successfully installed sympy
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git apply -v -
<stdin>:17: trailing whitespace.
    
<stdin>:20: trailing whitespace.
    
Checking patch sympy/polys/tests/test_coverup_sympy__sympy-13647.py...
Applied patch sympy/polys/tests/test_coverup_sympy__sympy-13647.py cleanly.
warning: 2 lines add whitespace errors.
+ PYTHONWARNINGS=ignore::UserWarning,ignore::SyntaxWarning
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(sympy/matrices/common\.py)' bin/test -C --verbose sympy/polys/tests/test_coverup_sympy__sympy-13647.p
/testbed/sympy/core/basic.py:3: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
  from collections import Mapping, defaultdict
/testbed/sympy/core/containers.py:271: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
  class OrderedSet(collections.MutableSet):
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(sympy/matrices/common\\.py)']
0.79 common.py(1): """
0.79 common.py(7): from __future__ import print_function, division
0.79 common.py(9): import collections
0.79 common.py(10): from sympy.core.add import Add
0.79 common.py(11): from sympy.core.basic import Basic, Atom
0.79 common.py(12): from sympy.core.expr import Expr
0.79 common.py(13): from sympy.core.symbol import Symbol
0.79 common.py(14): from sympy.core.function import count_ops
0.79 common.py(15): from sympy.core.singleton import S
0.79 common.py(16): from sympy.core.sympify import sympify
0.79 common.py(17): from sympy.core.compatibility import is_sequence, default_sort_key, range, \
0.79 common.py(20): from sympy.simplify import simplify as _simplify, signsimp, nsimplify
0.79 common.py(21): from sympy.utilities.iterables import flatten
0.79 common.py(22): from sympy.functions import Abs
0.79 common.py(23): from sympy.core.compatibility import reduce, as_int, string_types
0.79 common.py(24): from sympy.assumptions.refine import refine
0.79 common.py(25): from sympy.core.decorators import call_highest_priority
0.79 common.py(27): from types import FunctionType
0.79 common.py(30): class MatrixError(Exception):
0.79 common.py(30): class MatrixError(Exception):
0.79 common.py(31):     pass
0.79 common.py(34): class ShapeError(ValueError, MatrixError):
0.79 common.py(34): class ShapeError(ValueError, MatrixError):
0.79 common.py(35):     """Wrong matrix shape"""
0.79 common.py(36):     pass
0.79 common.py(39): class NonSquareMatrixError(ShapeError):
0.79 common.py(39): class NonSquareMatrixError(ShapeError):
0.79 common.py(40):     pass
0.79 common.py(43): class MatrixRequired(object):
0.79 common.py(43): class MatrixRequired(object):
0.79 common.py(44):     """All subclasses of matrix objects must implement the
0.79 common.py(46):     rows = None
0.79 common.py(47):     cols = None
0.79 common.py(48):     shape = None
0.79 common.py(49):     _simplify = None
0.79 common.py(51):     @classmethod
0.79 common.py(52):     def _new(cls, *args, **kwargs):
0.79 common.py(58):     def __eq__(self, other):
0.79 common.py(61):     def __getitem__(self, key):
0.79 common.py(68):     def __len__(self):
0.79 common.py(73): class MatrixShaping(MatrixRequired):
0.79 common.py(73): class MatrixShaping(MatrixRequired):
0.79 common.py(74):     """Provides basic matrix shaping and extracting of submatrices"""
0.79 common.py(76):     def _eval_col_del(self, col):
0.79 common.py(81):     def _eval_col_insert(self, pos, other):
0.79 common.py(94):     def _eval_col_join(self, other):
0.79 common.py(105):     def _eval_extract(self, rowsList, colsList):
0.79 common.py(112):     def _eval_get_diag_blocks(self):
0.79 common.py(138):     def _eval_row_del(self, row):
0.79 common.py(143):     def _eval_row_insert(self, pos, other):
0.79 common.py(149):     def _eval_row_join(self, other):
0.79 common.py(160):     def _eval_tolist(self):
0.79 common.py(163):     def _eval_vec(self):
0.79 common.py(174):     def col_del(self, col):
0.79 common.py(182):     def col_insert(self, pos, other):
0.79 common.py(220):     def col_join(self, other):
0.79 common.py(251):     def col(self, j):
0.79 common.py(275):     def extract(self, rowsList, colsList):
0.79 common.py(337):     def get_diag_blocks(self):
0.79 common.py(363):     @classmethod
0.79 common.py(364):     def hstack(cls, *args):
0.79 common.py(383):     def reshape(self, rows, cols):
0.79 common.py(408):     def row_del(self, row):
0.79 common.py(417):     def row_insert(self, pos, other):
0.79 common.py(457):     def row_join(self, other):
0.79 common.py(487):     def row(self, i):
0.79 common.py(509):     @property
0.79 common.py(510):     def shape(self):
0.79 common.py(527):     def tolist(self):
0.79 common.py(558):     def vec(self):
0.79 common.py(584):     @classmethod
0.79 common.py(585):     def vstack(cls, *args):
0.79 common.py(607): class MatrixSpecial(MatrixRequired):
0.79 common.py(607): class MatrixSpecial(MatrixRequired):
0.79 common.py(608):     """Construction of special matrices"""
0.79 common.py(610):     @classmethod
0.79 common.py(611):     def _eval_diag(cls, rows, cols, diag_dict):
0.79 common.py(618):     @classmethod
0.79 common.py(619):     def _eval_eye(cls, rows, cols):
0.79 common.py(624):     @classmethod
0.79 common.py(625):     def _eval_jordan_block(cls, rows, cols, eigenvalue, band='upper'):
0.79 common.py(642):     @classmethod
0.79 common.py(643):     def _eval_ones(cls, rows, cols):
0.79 common.py(648):     @classmethod
0.79 common.py(649):     def _eval_zeros(cls, rows, cols):
0.79 common.py(654):     @classmethod
0.79 common.py(655):     def diag(kls, *args, **kwargs):
0.79 common.py(761):     @classmethod
0.79 common.py(762):     def eye(kls, rows, cols=None, **kwargs):
0.79 common.py(782):     @classmethod
0.79 common.py(783):     def jordan_block(kls, *args, **kwargs):
0.79 common.py(857):     @classmethod
0.79 common.py(858):     def ones(kls, rows, cols=None, **kwargs):
0.79 common.py(878):     @classmethod
0.79 common.py(879):     def zeros(kls, rows, cols=None, **kwargs):
0.79 common.py(900): class MatrixProperties(MatrixRequired):
0.79 common.py(900): class MatrixProperties(MatrixRequired):
0.79 common.py(901):     """Provides basic properties of a matrix."""
0.79 common.py(903):     def _eval_atoms(self, *types):
0.79 common.py(909):     def _eval_free_symbols(self):
0.79 common.py(912):     def _eval_has(self, *patterns):
0.79 common.py(915):     def _eval_is_anti_symmetric(self, simpfunc):
0.79 common.py(920):     def _eval_is_diagonal(self):
0.79 common.py(930):     def _eval_is_matrix_hermitian(self, simpfunc):
0.79 common.py(934):     def _eval_is_Identity(self):
0.79 common.py(943):     def _eval_is_lower_hessenberg(self):
0.79 common.py(948):     def _eval_is_lower(self):
0.79 common.py(953):     def _eval_is_symbolic(self):
0.79 common.py(956):     def _eval_is_symmetric(self, simpfunc):
0.79 common.py(960):     def _eval_is_zero(self):
0.79 common.py(967):     def _eval_is_upper_hessenberg(self):
0.79 common.py(972):     def _eval_values(self):
0.79 common.py(975):     def atoms(self, *types):
0.79 common.py(994):     @property
0.79 common.py(995):     def free_symbols(self):
0.79 common.py(1008):     def has(self, *patterns):
0.79 common.py(1033):     def is_anti_symmetric(self, simplify=True):
0.79 common.py(1104):     def is_diagonal(self):
0.79 common.py(1147):     @property
0.79 common.py(1148):     def is_hermitian(self, simplify=True):
0.79 common.py(1185):     @property
0.79 common.py(1186):     def is_Identity(self):
0.79 common.py(1191):     @property
0.79 common.py(1192):     def is_lower_hessenberg(self):
0.79 common.py(1220):     @property
0.79 common.py(1221):     def is_lower(self):
0.79 common.py(1265):     @property
0.79 common.py(1266):     def is_square(self):
0.79 common.py(1289):     def is_symbolic(self):
0.79 common.py(1304):     def is_symmetric(self, simplify=True):
0.79 common.py(1368):     @property
0.79 common.py(1369):     def is_upper_hessenberg(self):
0.79 common.py(1397):     @property
0.79 common.py(1398):     def is_upper(self):
0.79 common.py(1443):     @property
0.79 common.py(1444):     def is_zero(self):
0.79 common.py(1474):     def values(self):
0.79 common.py(1479): class MatrixOperations(MatrixRequired):
0.79 common.py(1479): class MatrixOperations(MatrixRequired):
0.79 common.py(1480):     """Provides basic matrix shape and elementwise
0.79 common.py(1483):     def _eval_adjoint(self):
0.79 common.py(1486):     def _eval_applyfunc(self, f):
0.79 common.py(1490):     def _eval_as_real_imag(self):
0.79 common.py(1495):     def _eval_conjugate(self):
0.79 common.py(1498):     def _eval_permute_cols(self, perm):
0.79 common.py(1507):     def _eval_permute_rows(self, perm):
0.79 common.py(1516):     def _eval_trace(self):
0.79 common.py(1519):     def _eval_transpose(self):
0.79 common.py(1522):     def adjoint(self):
0.79 common.py(1526):     def applyfunc(self, f):
0.79 common.py(1549):     def as_real_imag(self):
0.79 common.py(1553):     def conjugate(self):
0.79 /testbed/sympy/plotting/plot.py:28: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
  from collections import Callable
/testbed/sympy/core/basic.py:3: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
  from collections import Mapping, defaultdict
/testbed/sympy/core/containers.py:271: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
  class OrderedSet(collections.MutableSet):
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(sympy/matrices/common\\.py)']
0.32 common.py(1): """
0.32 common.py(7): from __future__ import print_function, division
0.32 common.py(9): import collections
0.32 common.py(10): from sympy.core.add import Add
0.32 common.py(11): from sympy.core.basic import Basic, Atom
0.32 common.py(12): from sympy.core.expr import Expr
0.32 common.py(13): from sympy.core.symbol import Symbol
0.32 common.py(14): from sympy.core.function import count_ops
0.32 common.py(15): from sympy.core.singleton import S
0.32 common.py(16): from sympy.core.sympify import sympify
0.32 common.py(17): from sympy.core.compatibility import is_sequence, default_sort_key, range, \
0.32 common.py(20): from sympy.simplify import simplify as _simplify, signsimp, nsimplify
0.32 common.py(21): from sympy.utilities.iterables import flatten
0.32 common.py(22): from sympy.functions import Abs
0.32 common.py(23): from sympy.core.compatibility import reduce, as_int, string_types
0.32 common.py(24): from sympy.assumptions.refine import refine
0.32 common.py(25): from sympy.core.decorators import call_highest_priority
0.32 common.py(27): from types import FunctionType
0.32 common.py(30): class MatrixError(Exception):
0.32 common.py(30): class MatrixError(Exception):
0.32 common.py(31):     pass
0.32 common.py(34): class ShapeError(ValueError, MatrixError):
0.32 common.py(34): class ShapeError(ValueError, MatrixError):
0.32 common.py(35):     """Wrong matrix shape"""
0.32 common.py(36):     pass
0.32 common.py(39): class NonSquareMatrixError(ShapeError):
0.32 common.py(39): class NonSquareMatrixError(ShapeError):
0.32 common.py(40):     pass
0.32 common.py(43): class MatrixRequired(object):
0.32 common.py(43): class MatrixRequired(object):
0.32 common.py(44):     """All subclasses of matrix objects must implement the
0.32 common.py(46):     rows = None
0.32 common.py(47):     cols = None
0.32 common.py(48):     shape = None
0.32 common.py(49):     _simplify = None
0.32 common.py(51):     @classmethod
0.32 common.py(52):     def _new(cls, *args, **kwargs):
0.32 common.py(58):     def __eq__(self, other):
0.32 common.py(61):     def __getitem__(self, key):
0.32 common.py(68):     def __len__(self):
0.32 common.py(73): class MatrixShaping(MatrixRequired):
0.32 common.py(73): class MatrixShaping(MatrixRequired):
0.32 common.py(74):     """Provides basic matrix shaping and extracting of submatrices"""
0.32 common.py(76):     def _eval_col_del(self, col):
0.32 common.py(81):     def _eval_col_insert(self, pos, other):
0.32 common.py(94):     def _eval_col_join(self, other):
0.32 common.py(105):     def _eval_extract(self, rowsList, colsList):
0.32 common.py(112):     def _eval_get_diag_blocks(self):
0.32 common.py(138):     def _eval_row_del(self, row):
0.32 common.py(143):     def _eval_row_insert(self, pos, other):
0.32 common.py(149):     def _eval_row_join(self, other):
0.32 common.py(160):     def _eval_tolist(self):
0.32 common.py(163):     def _eval_vec(self):
0.32 common.py(174):     def col_del(self, col):
0.32 common.py(182):     def col_insert(self, pos, other):
0.32 common.py(220):     def col_join(self, other):
0.32 common.py(251):     def col(self, j):
0.32 common.py(275):     def extract(self, rowsList, colsList):
0.32 common.py(337):     def get_diag_blocks(self):
0.32 common.py(363):     @classmethod
0.32 common.py(364):     def hstack(cls, *args):
0.32 common.py(383):     def reshape(self, rows, cols):
0.32 common.py(408):     def row_del(self, row):
0.32 common.py(417):     def row_insert(self, pos, other):
0.32 common.py(457):     def row_join(self, other):
0.32 common.py(487):     def row(self, i):
0.32 common.py(509):     @property
0.32 common.py(510):     def shape(self):
0.32 common.py(527):     def tolist(self):
0.32 common.py(558):     def vec(self):
0.32 common.py(584):     @classmethod
0.32 common.py(585):     def vstack(cls, *args):
0.32 common.py(607): class MatrixSpecial(MatrixRequired):
0.32 common.py(607): class MatrixSpecial(MatrixRequired):
0.32 common.py(608):     """Construction of special matrices"""
0.32 common.py(610):     @classmethod
0.32 common.py(611):     def _eval_diag(cls, rows, cols, diag_dict):
0.32 common.py(618):     @classmethod
0.32 common.py(619):     def _eval_eye(cls, rows, cols):
0.32 common.py(624):     @classmethod
0.32 common.py(625):     def _eval_jordan_block(cls, rows, cols, eigenvalue, band='upper'):
0.32 common.py(642):     @classmethod
0.32 common.py(643):     def _eval_ones(cls, rows, cols):
0.32 common.py(648):     @classmethod
0.32 common.py(649):     def _eval_zeros(cls, rows, cols):
0.32 common.py(654):     @classmethod
0.32 common.py(655):     def diag(kls, *args, **kwargs):
0.32 common.py(761):     @classmethod
0.32 common.py(762):     def eye(kls, rows, cols=None, **kwargs):
0.32 common.py(782):     @classmethod
0.32 common.py(783):     def jordan_block(kls, *args, **kwargs):
0.32 common.py(857):     @classmethod
0.32 common.py(858):     def ones(kls, rows, cols=None, **kwargs):
0.32 common.py(878):     @classmethod
0.32 common.py(879):     def zeros(kls, rows, cols=None, **kwargs):
0.32 common.py(900): class MatrixProperties(MatrixRequired):
0.32 common.py(900): class MatrixProperties(MatrixRequired):
0.32 common.py(901):     """Provides basic properties of a matrix."""
0.32 common.py(903):     def _eval_atoms(self, *types):
0.32 common.py(909):     def _eval_free_symbols(self):
0.32 common.py(912):     def _eval_has(self, *patterns):
0.32 common.py(915):     def _eval_is_anti_symmetric(self, simpfunc):
0.32 common.py(920):     def _eval_is_diagonal(self):
0.32 common.py(930):     def _eval_is_matrix_hermitian(self, simpfunc):
0.32 common.py(934):     def _eval_is_Identity(self):
0.32 common.py(943):     def _eval_is_lower_hessenberg(self):
0.32 common.py(948):     def _eval_is_lower(self):
0.32 common.py(953):     def _eval_is_symbolic(self):
0.32 common.py(956):     def _eval_is_symmetric(self, simpfunc):
0.32 common.py(960):     def _eval_is_zero(self):
0.32 common.py(967):     def _eval_is_upper_hessenberg(self):
0.32 common.py(972):     def _eval_values(self):
0.32 common.py(975):     def atoms(self, *types):
0.32 common.py(994):     @property
0.32 common.py(995):     def free_symbols(self):
0.32 common.py(1008):     def has(self, *patterns):
0.32 common.py(1033):     def is_anti_symmetric(self, simplify=True):
0.32 common.py(1104):     def is_diagonal(self):
0.32 common.py(1147):     @property
0.32 common.py(1148):     def is_hermitian(self, simplify=True):
0.32 common.py(1185):     @property
0.32 common.py(1186):     def is_Identity(self):
0.32 common.py(1191):     @property
0.32 common.py(1192):     def is_lower_hessenberg(self):
0.32 common.py(1220):     @property
0.32 common.py(1221):     def is_lower(self):
0.32 common.py(1265):     @property
0.32 common.py(1266):     def is_square(self):
0.32 common.py(1289):     def is_symbolic(self):
0.32 common.py(1304):     def is_symmetric(self, simplify=True):
0.32 common.py(1368):     @property
0.32 common.py(1369):     def is_upper_hessenberg(self):
0.32 common.py(1397):     @property
0.32 common.py(1398):     def is_upper(self):
0.32 common.py(1443):     @property
0.32 common.py(1444):     def is_zero(self):
0.32 common.py(1474):     def values(self):
0.32 common.py(1479): class MatrixOperations(MatrixRequired):
0.32 common.py(1479): class MatrixOperations(MatrixRequired):
0.32 common.py(1480):     """Provides basic matrix shape and elementwise
0.32 common.py(1483):     def _eval_adjoint(self):
0.32 common.py(1486):     def _eval_applyfunc(self, f):
0.32 common.py(1490):     def _eval_as_real_imag(self):
0.32 common.py(1495):     def _eval_conjugate(self):
0.32 common.py(1498):     def _eval_permute_cols(self, perm):
0.32 common.py(1507):     def _eval_permute_rows(self, perm):
0.32 common.py(1516):     def _eval_trace(self):
0.32 common.py(1519):     def _eval_transpose(self):
0.32 common.py(1522):     def adjoint(self):
0.32 common.py(1526):     def applyfunc(self, f):
0.32 common.py(1549):     def as_real_imag(self):
0.32 common.py(1553):     def conjugate(self):
0.32 /testbed/sympy/plotting/plot.py:28: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
  from collections import Callable
common.py(1582):     def doit(self, **kwargs):
0.32 common.py(1585):     def evalf(self, prec=None, **options):
0.32 common.py(1589):     def expand(self, deep=True, modulus=None, power_base=True, power_exp=True,
0.32 common.py(1608):     @property
0.32 common.py(1609):     def H(self):
0.32 common.py(1634):     def permute(self, perm, orientation='rows', direction='forward'):
0.32 common.py(1713):     def permute_cols(self, swaps, direction='forward'):
0.32 common.py(1723):     def permute_rows(self, swaps, direction='forward'):
0.32 common.py(1733):     def refine(self, assumptions=True):
0.32 common.py(1753):     def replace(self, F, G, map=False):
0.32 common.py(1773):     def simplify(self, ratio=1.7, measure=count_ops):
0.32 common.py(1789):     def subs(self, *args, **kwargs):  # should mirror core.basic.subs
0.32 common.py(1806):     def trace(self):
0.32 common.py(1824):     def transpose(self):
0.32 common.py(1859):     T = property(transpose, None, None, "Matrix transposition.")
0.32 common.py(1861):     C = property(conjugate, None, None, "By-element conjugation.")
0.32 common.py(1863):     n = evalf
0.32 common.py(1865):     def xreplace(self, rule):  # should mirror core.basic.xreplace
0.32 common.py(1882):     _eval_simplify = simplify
0.32 common.py(1884):     def _eval_trigsimp(self, **opts):
0.32 common.py(1889): class MatrixArithmetic(MatrixRequired):
0.32 common.py(1889): class MatrixArithmetic(MatrixRequired):
0.32 common.py(1890):     """Provides basic matrix arithmetic operations.
0.32 common.py(1893):     _op_priority = 10.01
0.32 common.py(1895):     def _eval_Abs(self):
0.32 common.py(1898):     def _eval_add(self, other):
0.32 common.py(1902):     def _eval_matrix_mul(self, other):
0.32 common.py(1919):     def _eval_matrix_mul_elementwise(self, other):
0.32 common.py(1922):     def _eval_matrix_rmul(self, other):
0.32 common.py(1927):     def _eval_pow_by_recursion(self, num):
0.32 common.py(1935):     def _eval_scalar_mul(self, other):
0.32 common.py(1938):     def _eval_scalar_rmul(self, other):
0.32 common.py(1942):     def __abs__(self):
0.32 common.py(1946):     @call_highest_priority('__radd__')
0.32 common.py(1947):     def __add__(self, other):
0.32 common.py(1970):     @call_highest_priority('__rdiv__')
0.32 common.py(1971):     def __div__(self, other):
0.32 common.py(1974):     @call_highest_priority('__rmatmul__')
0.32 common.py(1975):     def __matmul__(self, other):
0.32 common.py(1978):     @call_highest_priority('__rmul__')
0.32 common.py(1979):     def __mul__(self, other):
0.32 common.py(2028):     def __neg__(self):
0.32 common.py(2031):     @call_highest_priority('__rpow__')
0.32 common.py(2032):     def __pow__(self, num):
0.32 common.py(2063):     @call_highest_priority('__add__')
0.32 common.py(2064):     def __radd__(self, other):
0.32 common.py(2067):     @call_highest_priority('__matmul__')
0.32 common.py(2068):     def __rmatmul__(self, other):
0.32 common.py(2071):     @call_highest_priority('__mul__')
0.32 common.py(2072):     def __rmul__(self, other):
0.32 common.py(2094):     @call_highest_priority('__sub__')
0.32 common.py(2095):     def __rsub__(self, a):
0.32 common.py(2098):     @call_highest_priority('__rsub__')
0.32 common.py(2099):     def __sub__(self, a):
0.32 common.py(2102):     @call_highest_priority('__rtruediv__')
0.32 common.py(2103):     def __truediv__(self, other):
0.32 common.py(2106):     def multiply_elementwise(self, other):
0.32 common.py(2133): class MatrixCommon(MatrixArithmetic, MatrixOperations, MatrixProperties,
0.32 common.py(2134):                   MatrixSpecial, MatrixShaping):
0.32 common.py(2133): class MatrixCommon(MatrixArithmetic, MatrixOperations, MatrixProperties,
0.32 common.py(2133): class MatrixCommon(MatrixArithmetic, MatrixOperations, MatrixProperties,
0.32 common.py(2135):     """All common matrix operations including basic arithmetic, shaping,
0.32 common.py(2137):     _diff_wrt = True
0.32 common.py(2140): class _MinimalMatrix(object):
0.32 common.py(2140): class _MinimalMatrix(object):
0.32 common.py(2141):     """Class providing the minimum functionality
0.32 common.py(2150):     is_MatrixLike = True
0.32 common.py(2151):     _sympify = staticmethod(sympify)
0.32 common.py(2152):     _class_priority = 3
0.32 common.py(2154):     is_Matrix = True
0.32 common.py(2155):     is_MatrixExpr = False
0.32 common.py(2157):     @classmethod
0.32 common.py(2158):     def _new(cls, *args, **kwargs):
0.32 common.py(2161):     def __init__(self, rows, cols=None, mat=None):
0.32 common.py(2185):     def __getitem__(self, key):
0.32 common.py(2224):     def __eq__(self, other):
0.32 common.py(2227):     def __len__(self):
0.32 common.py(2230):     def __repr__(self):
0.32 common.py(2234):     @property
0.32 common.py(2235):     def shape(self):
0.32 common.py(2239): class _MatrixWrapper(object):
0.32 common.py(2239): class _MatrixWrapper(object):
0.32 common.py(2240):     """Wrapper class providing the minimum functionality
0.32 common.py(2246):     is_MatrixLike = True
0.32 common.py(2248):     def __init__(self, mat, shape=None):
0.32 common.py(2252):     def __getattr__(self, attr):
0.32 common.py(2257):     def __getitem__(self, key):
0.32 common.py(2261): def _matrixify(mat):
0.32 common.py(2273): def a2idx(j, n=None):
0.32 common.py(2288): def classof(A, B):
============================= test process starts ==============================
executable:         /opt/miniconda3/envs/testbed/bin/python3  (3.9.23-final-0) [CPython]
architecture:       64-bit
cache:              no
ground types:       python 
numpy:              None
random seed:        83902103
hash randomization: on (PYTHONHASHSEED=1484975064)

sympy/polys/tests/test_coverup_sympy__sympy-13647.py[1] 
test_matrix_col_insert_bug 0.38 common.py(775):         if cols is None:
0.38 common.py(776):             cols = rows
0.38 common.py(777):         klass = kwargs.get('cls', kls)
0.38 common.py(778):         rows, cols = as_int(rows), as_int(cols)
0.38 common.py(780):         return klass._eval_eye(rows, cols)
0.38 common.py(620):         def entry(i, j):
0.38 common.py(622):         return cls._new(rows, cols, entry)
0.38 common.py(621):             return S.One if i == j else S.Zero
0.38 common.py(621):             return S.One if i == j else S.Zero
0.38 common.py(621):             return S.One if i == j else S.Zero
0.38 common.py(621):             return S.One if i == j else S.Zero
0.38 common.py(621):             return S.One if i == j else S.Zero
0.38 common.py(621):             return S.One if i == j else S.Zero
0.38 common.py(621):             return S.One if i == j else S.Zero
0.38 common.py(621):             return S.One if i == j else S.Zero
0.38 common.py(621):             return S.One if i == j else S.Zero
0.38 common.py(621):             return S.One if i == j else S.Zero
0.38 common.py(621):             return S.One if i == j else S.Zero
0.38 common.py(621):             return S.One if i == j else S.Zero
0.38 common.py(621):             return S.One if i == j else S.Zero
0.38 common.py(621):             return S.One if i == j else S.Zero
0.38 common.py(621):             return S.One if i == j else S.Zero
0.38 common.py(621):             return S.One if i == j else S.Zero
0.38 common.py(621):             return S.One if i == j else S.Zero
0.38 common.py(621):             return S.One if i == j else S.Zero
0.38 common.py(621):             return S.One if i == j else S.Zero
0.38 common.py(621):             return S.One if i == j else S.Zero
0.38 common.py(621):             return S.One if i == j else S.Zero
0.38 common.py(621):             return S.One if i == j else S.Zero
0.38 common.py(621):             return S.One if i == j else S.Zero
0.38 common.py(621):             return S.One if i == j else S.Zero
0.38 common.py(621):             return S.One if i == j else S.Zero
0.38 common.py(621):             return S.One if i == j else S.Zero
0.38 common.py(621):             return S.One if i == j else S.Zero
0.38 common.py(621):             return S.One if i == j else S.Zero
0.38 common.py(621):             return S.One if i == j else S.Zero
0.38 common.py(621):             return S.One if i == j else S.Zero
0.38 common.py(621):             return S.One if i == j else S.Zero
0.38 common.py(621):             return S.One if i == j else S.Zero
0.38 common.py(621):             return S.One if i == j else S.Zero
0.38 common.py(621):             return S.One if i == j else S.Zero
0.38 common.py(621):             return S.One if i == j else S.Zero
0.38 common.py(621):             return S.One if i == j else S.Zero
0.38 common.py(871):         if cols is None:
0.38 common.py(873):         klass = kwargs.get('cls', kls)
0.38 common.py(874):         rows, cols = as_int(rows), as_int(cols)
0.38 common.py(876):         return klass._eval_ones(rows, cols)
0.38 common.py(644):         def entry(i, j):
0.38 common.py(646):         return cls._new(rows, cols, entry)
0.38 common.py(645):             return S.One
0.38 common.py(645):             return S.One
0.38 common.py(645):             return S.One
0.38 common.py(645):             return S.One
0.38 common.py(645):             return S.One
0.38 common.py(645):             return S.One
0.38 common.py(645):             return S.One
0.38 common.py(645):             return S.One
0.38 common.py(645):             return S.One
0.38 common.py(645):             return S.One
0.38 common.py(645):             return S.One
0.38 common.py(645):             return S.One
0.38 common.py(2073):         other = _matrixify(other)
0.38 common.py(2265):     if getattr(mat, 'is_Matrix', False):
0.38 common.py(2267):     if hasattr(mat, 'shape'):
0.38 common.py(2270):     return mat
0.38 common.py(2076):         if hasattr(other, 'shape') and len(other.shape) == 2:
0.38 common.py(2081):         if getattr(other, 'is_Matrix', False):
0.38 common.py(2084):         if getattr(other, 'is_MatrixLike', False):
0.38 common.py(2087):         try:
0.38 common.py(2088):             return self._eval_scalar_rmul(other)
0.38 common.py(204):         if not self:
0.38 common.py(207):         if pos < 0:
0.38 common.py(209):         if pos < 0:
0.38 common.py(211):         elif pos > self.cols:
0.38 common.py(214):         if self.rows != other.rows:
0.38 common.py(218):         return self._eval_col_insert(pos, other)
0.38 common.py(82):         cols = self.cols
0.38 common.py(84):         def entry(i, j):
0.38 common.py(91):         return self._new(self.rows, self.cols + other.cols,
0.38 common.py(92):                          lambda i, j: entry(i, j))
0.38 common.py(91):         return self._new(self.rows, self.cols + other.cols,
0.38 common.py(92):                          lambda i, j: entry(i, j))
0.38 common.py(85):             if j < pos:
0.38 common.py(86):                 return self[i, j]
0.38 common.py(525):         return (self.rows, self.cols)
0.38 common.py(92):                          lambda i, j: entry(i, j))
0.38 common.py(85):             if j < pos:
0.38 common.py(86):                 return self[i, j]
0.38 common.py(525):         return (self.rows, self.cols)
0.38 common.py(92):                          lambda i, j: entry(i, j))
0.38 common.py(85):             if j < pos:
0.38 common.py(86):                 return self[i, j]
0.38 common.py(525):         return (self.rows, self.cols)
0.38 common.py(92):                          lambda i, j: entry(i, j))
0.38 common.py(85):             if j < pos:
0.38 common.py(87):             elif pos <= j < pos + other.cols:
0.38 common.py(88):                 return other[i, j - pos]
0.38 common.py(525):         return (self.rows, self.cols)
0.38 common.py(92):                          lambda i, j: entry(i, j))
0.38 common.py(85):             if j < pos:
0.38 common.py(87):             elif pos <= j < pos + other.cols:
0.38 common.py(88):                 return other[i, j - pos]
0.38 common.py(525):         return (self.rows, self.cols)
0.38 common.py(92):                          lambda i, j: entry(i, j))
0.38 common.py(85):             if j < pos:
0.38 common.py(87):             elif pos <= j < pos + other.cols:
0.38 common.py(89):             return self[i, j - pos - other.cols]
0.38 common.py(525):         return (self.rows, self.cols)
0.38 common.py(92):                          lambda i, j: entry(i, j))
0.38 common.py(85):             if j < pos:
0.38 common.py(87):             elif pos <= j < pos + other.cols:
0.38 common.py(89):             return self[i, j - pos - other.cols]
0.38 common.py(525):         return (self.rows, self.cols)
0.38 common.py(92):                          lambda i, j: entry(i, j))
0.38 common.py(85):             if j < pos:
0.38 common.py(87):             elif pos <= j < pos + other.cols:
0.38 common.py(89):             return self[i, j - pos - other.cols]
0.38 common.py(525):         return (self.rows, self.cols)
0.38 common.py(92):                          lambda i, j: entry(i, j))
0.38 common.py(85):             if j < pos:
0.38 common.py(86):                 return self[i, j]
0.38 common.py(525):         return (self.rows, self.cols)
0.38 common.py(92):                          lambda i, j: entry(i, j))
0.38 common.py(85):             if j < pos:
0.38 common.py(86):                 return self[i, j]
0.38 common.py(525):         return (self.rows, self.cols)
0.38 common.py(92):                          lambda i, j: entry(i, j))
0.38 common.py(85):             if j < pos:
0.38 common.py(86):                 return self[i, j]
0.38 common.py(525):         return (self.rows, self.cols)
0.38 common.py(92):                          lambda i, j: entry(i, j))
0.38 common.py(85):             if j < pos:
0.38 common.py(87):             elif pos <= j < pos + other.cols:
0.38 common.py(88):                 return other[i, j - pos]
0.38 common.py(525):         return (self.rows, self.cols)
0.38 common.py(92):                          lambda i, j: entry(i, j))
0.38 common.py(85):             if j < pos:
0.38 common.py(87):             elif pos <= j < pos + other.cols:
0.38 common.py(88):                 return other[i, j - pos]
0.38 common.py(525):         return (self.rows, self.cols)
0.38 common.py(92):                          lambda i, j: entry(i, j))
0.38 common.py(85):             if j < pos:
0.38 common.py(87):             elif pos <= j < pos + other.cols:
0.38 common.py(89):             return self[i, j - pos - other.cols]
0.38 common.py(525):         return (self.rows, self.cols)
0.38 common.py(92):                          lambda i, j: entry(i, j))
0.38 common.py(85):             if j < pos:
0.38 common.py(87):             elif pos <= j < pos + other.cols:
0.38 common.py(89):             return self[i, j - pos - other.cols]
0.38 common.py(525):         return (self.rows, self.cols)
0.38 common.py(92):                          lambda i, j: entry(i, j))
0.38 common.py(85):             if j < pos:
0.38 common.py(87):             elif pos <= j < pos + other.cols:
0.38 common.py(89):             return self[i, j - pos - other.cols]
0.38 common.py(525):         return (self.rows, self.cols)
0.38 common.py(92):                          lambda i, j: entry(i, j))
0.38 common.py(85):             if j < pos:
0.38 common.py(86):                 return self[i, j]
0.38 common.py(525):         return (self.rows, self.cols)
0.38 common.py(92):                          lambda i, j: entry(i, j))
0.38 common.py(85):             if j < pos:
0.38 common.py(86):                 return self[i, j]
0.38 common.py(525):         return (self.rows, self.cols)
0.38 common.py(92):                          lambda i, j: entry(i, j))
0.38 common.py(85):             if j < pos:
0.38 common.py(86):                 return self[i, j]
0.38 common.py(525):         return (self.rows, self.cols)
0.38 common.py(92):                          lambda i, j: entry(i, j))
0.38 common.py(85):             if j < pos:
0.38 common.py(87):             elif pos <= j < pos + other.cols:
0.38 common.py(88):                 return other[i, j - pos]
0.38 common.py(525):         return (self.rows, self.cols)
0.38 common.py(92):                          lambda i, j: entry(i, j))
0.38 common.py(85):             if j < pos:
0.38 common.py(87):             elif pos <= j < pos + other.cols:
0.38 common.py(88):                 return other[i, j - pos]
0.38 common.py(525):         return (self.rows, self.cols)
0.38 common.py(92):                          lambda i, j: entry(i, j))
0.38 common.py(85):             if j < pos:
0.38 common.py(87):             elif pos <= j < pos + other.cols:
0.38 common.py(89):             return self[i, j - pos - other.cols]
0.38 common.py(525):         return (self.rows, self.cols)
0.38 common.py(92):                          lambda i, j: entry(i, j))
0.38 common.py(85):             if j < pos:
0.38 common.py(87):             elif pos <= j < pos + other.cols:
0.38 common.py(89):             return self[i, j - pos - other.cols]
0.38 common.py(525):         return (self.rows, self.cols)
0.38 common.py(92):                          lambda i, j: entry(i, j))
0.38 common.py(85):             if j < pos:
0.38 common.py(87):             elif pos <= j < pos + other.cols:
0.38 common.py(89):             return self[i, j - pos - other.cols]
0.38 common.py(525):         return (self.rows, self.cols)
0.38 common.py(92):                          lambda i, j: entry(i, j))
0.38 common.py(85):             if j < pos:
0.38 common.py(86):                 return self[i, j]
0.38 common.py(525):         return (self.rows, self.cols)
0.38 common.py(92):                          lambda i, j: entry(i, j))
0.38 common.py(85):             if j < pos:
0.38 common.py(86):                 return self[i, j]
0.38 common.py(525):         return (self.rows, self.cols)
0.38 common.py(92):                          lambda i, j: entry(i, j))
0.38 common.py(85):             if j < pos:
0.38 common.py(86):                 return self[i, j]
0.38 common.py(525):         return (self.rows, self.cols)
0.38 common.py(92):                          lambda i, j: entry(i, j))
0.38 common.py(85):             if j < pos:
0.38 common.py(87):             elif pos <= j < pos + other.cols:
0.38 common.py(88):                 return other[i, j - pos]
0.38 common.py(525):         return (self.rows, self.cols)
0.38 common.py(92):                          lambda i, j: entry(i, j))
0.38 common.py(85):             if j < pos:
0.38 common.py(87):             elif pos <= j < pos + other.cols:
0.38 common.py(88):                 return other[i, j - pos]
0.38 common.py(525):         return (self.rows, self.cols)
0.38 common.py(92):                          lambda i, j: entry(i, j))
0.38 common.py(85):             if j < pos:
0.38 common.py(87):             elif pos <= j < pos + other.cols:
0.38 common.py(89):             return self[i, j - pos - other.cols]
0.38 common.py(525):         return (self.rows, self.cols)
0.38 common.py(92):                          lambda i, j: entry(i, j))
0.38 common.py(85):             if j < pos:
0.38 common.py(87):             elif pos <= j < pos + other.cols:
0.38 common.py(89):             return self[i, j - pos - other.cols]
0.38 common.py(525):         return (self.rows, self.cols)
0.38 common.py(92):                          lambda i, j: entry(i, j))
0.38 common.py(85):             if j < pos:
0.38 common.py(87):             elif pos <= j < pos + other.cols:
0.38 common.py(89):             return self[i, j - pos - other.cols]
0.38 common.py(525):         return (self.rows, self.cols)
0.38 common.py(92):                          lambda i, j: entry(i, j))
0.38 common.py(85):             if j < pos:
0.38 common.py(86):                 return self[i, j]
0.38 common.py(525):         return (self.rows, self.cols)
0.38 common.py(92):                          lambda i, j: entry(i, j))
0.38 common.py(85):             if j < pos:
0.38 common.py(86):                 return self[i, j]
0.38 common.py(525):         return (self.rows, self.cols)
0.38 common.py(92):                          lambda i, j: entry(i, j))
0.38 common.py(85):             if j < pos:
0.38 common.py(86):                 return self[i, j]
0.38 common.py(525):         return (self.rows, self.cols)
0.38 common.py(92):                          lambda i, j: entry(i, j))
0.38 common.py(85):             if j < pos:
0.38 common.py(87):             elif pos <= j < pos + other.cols:
0.38 common.py(88):                 return other[i, j - pos]
0.38 common.py(525):         return (self.rows, self.cols)
0.38 common.py(92):                          lambda i, j: entry(i, j))
0.38 common.py(85):             if j < pos:
0.38 common.py(87):             elif pos <= j < pos + other.cols:
0.38 common.py(88):                 return other[i, j - pos]
0.38 common.py(525):         return (self.rows, self.cols)
0.38 common.py(92):                          lambda i, j: entry(i, j))
0.38 common.py(85):             if j < pos:
0.38 common.py(87):             elif pos <= j < pos + other.cols:
0.38 common.py(89):             return self[i, j - pos - other.cols]
0.38 common.py(525):         return (self.rows, self.cols)
0.38 common.py(92):                          lambda i, j: entry(i, j))
0.38 common.py(85):             if j < pos:
0.38 common.py(87):             elif pos <= j < pos + other.cols:
0.38 common.py(89):             return self[i, j - pos - other.cols]
0.38 common.py(525):         return (self.rows, self.cols)
0.38 common.py(92):                          lambda i, j: entry(i, j))
0.38 common.py(85):             if j < pos:
0.38 common.py(87):             elif pos <= j < pos + other.cols:
0.38 common.py(89):             return self[i, j - pos - other.cols]
0.38 common.py(525):         return (self.rows, self.cols)
0.38 common.py(92):                          lambda i, j: entry(i, j))
0.38 common.py(85):             if j < pos:
0.38 common.py(86):                 return self[i, j]
0.38 common.py(525):         return (self.rows, self.cols)
0.38 common.py(92):                          lambda i, j: entry(i, j))
0.38 common.py(85):             if j < pos:
0.38 common.py(86):                 return self[i, j]
0.38 common.py(525):         return (self.rows, self.cols)
0.38 common.py(92):                          lambda i, j: entry(i, j))
0.38 common.py(85):             if j < pos:
0.38 common.py(86):                 return self[i, j]
0.38 common.py(525):         return (self.rows, self.cols)
0.38 common.py(92):                          lambda i, j: entry(i, j))
0.38 common.py(85):             if j < pos:
0.38 common.py(87):             elif pos <= j < pos + other.cols:
0.38 common.py(88):                 return other[i, j - pos]
0.38 common.py(525):         return (self.rows, self.cols)
0.38 common.py(92):                          lambda i, j: entry(i, j))
0.38 common.py(85):             if j < pos:
0.38 common.py(87):             elif pos <= j < pos + other.cols:
0.38 common.py(88):                 return other[i, j - pos]
0.38 common.py(525):         return (self.rows, self.cols)
0.38 common.py(92):                          lambda i, j: entry(i, j))
0.38 common.py(85):             if j < pos:
0.38 common.py(87):             elif pos <= j < pos + other.cols:
0.38 common.py(89):             return self[i, j - pos - other.cols]
0.38 common.py(525):         return (self.rows, self.cols)
0.38 common.py(92):                          lambda i, j: entry(i, j))
0.38 common.py(85):             if j < pos:
0.38 common.py(87):             elif pos <= j < pos + other.cols:
0.38 common.py(89):             return self[i, j - pos - other.cols]
0.38 common.py(525):         return (self.rows, self.cols)
0.38 common.py(92):                          lambda i, j: entry(i, j))
0.38 common.py(85):             if j < pos:
0.38 common.py(87):             elif pos <= j < pos + other.cols:
0.38 common.py(89):             return self[i, j - pos - other.cols]
0.38 common.py(525):         return (self.rows, self.cols)
0.38 common.py(525):         return (self.rows, self.cols)
0.38 common.py(552):         if not self.rows:
0.38 common.py(554):         if not self.cols:
0.38 common.py(556):         return self._eval_tolist()
F                                              [FAIL]


________________________________________________________________________________
 sympy/polys/tests/test_coverup_sympy__sympy-13647.py:test_matrix_col_insert_bug 
  File "/testbed/sympy/polys/tests/test_coverup_sympy__sympy-13647.py", line 24, in test_matrix_col_insert_bug
    assert result.tolist() == expected_correct_matrix
AssertionError

============= tests finished: 0 passed, 1 failed, in 0.02 seconds ==============
DO *NOT* COMMIT!
common.py(1582):     def doit(self, **kwargs):
0.79 common.py(1585):     def evalf(self, prec=None, **options):
0.79 common.py(1589):     def expand(self, deep=True, modulus=None, power_base=True, power_exp=True,
0.79 common.py(1608):     @property
0.79 common.py(1609):     def H(self):
0.79 common.py(1634):     def permute(self, perm, orientation='rows', direction='forward'):
0.79 common.py(1713):     def permute_cols(self, swaps, direction='forward'):
0.79 common.py(1723):     def permute_rows(self, swaps, direction='forward'):
0.79 common.py(1733):     def refine(self, assumptions=True):
0.79 common.py(1753):     def replace(self, F, G, map=False):
0.79 common.py(1773):     def simplify(self, ratio=1.7, measure=count_ops):
0.79 common.py(1789):     def subs(self, *args, **kwargs):  # should mirror core.basic.subs
0.79 common.py(1806):     def trace(self):
0.79 common.py(1824):     def transpose(self):
0.79 common.py(1859):     T = property(transpose, None, None, "Matrix transposition.")
0.79 common.py(1861):     C = property(conjugate, None, None, "By-element conjugation.")
0.79 common.py(1863):     n = evalf
0.79 common.py(1865):     def xreplace(self, rule):  # should mirror core.basic.xreplace
0.79 common.py(1882):     _eval_simplify = simplify
0.79 common.py(1884):     def _eval_trigsimp(self, **opts):
0.79 common.py(1889): class MatrixArithmetic(MatrixRequired):
0.79 common.py(1889): class MatrixArithmetic(MatrixRequired):
0.79 common.py(1890):     """Provides basic matrix arithmetic operations.
0.79 common.py(1893):     _op_priority = 10.01
0.79 common.py(1895):     def _eval_Abs(self):
0.79 common.py(1898):     def _eval_add(self, other):
0.79 common.py(1902):     def _eval_matrix_mul(self, other):
0.79 common.py(1919):     def _eval_matrix_mul_elementwise(self, other):
0.79 common.py(1922):     def _eval_matrix_rmul(self, other):
0.79 common.py(1927):     def _eval_pow_by_recursion(self, num):
0.79 common.py(1935):     def _eval_scalar_mul(self, other):
0.79 common.py(1938):     def _eval_scalar_rmul(self, other):
0.79 common.py(1942):     def __abs__(self):
0.79 common.py(1946):     @call_highest_priority('__radd__')
0.79 common.py(1947):     def __add__(self, other):
0.79 common.py(1970):     @call_highest_priority('__rdiv__')
0.79 common.py(1971):     def __div__(self, other):
0.79 common.py(1974):     @call_highest_priority('__rmatmul__')
0.79 common.py(1975):     def __matmul__(self, other):
0.79 common.py(1978):     @call_highest_priority('__rmul__')
0.79 common.py(1979):     def __mul__(self, other):
0.79 common.py(2028):     def __neg__(self):
0.79 common.py(2031):     @call_highest_priority('__rpow__')
0.79 common.py(2032):     def __pow__(self, num):
0.79 common.py(2063):     @call_highest_priority('__add__')
0.79 common.py(2064):     def __radd__(self, other):
0.79 common.py(2067):     @call_highest_priority('__matmul__')
0.79 common.py(2068):     def __rmatmul__(self, other):
0.79 common.py(2071):     @call_highest_priority('__mul__')
0.79 common.py(2072):     def __rmul__(self, other):
0.79 common.py(2094):     @call_highest_priority('__sub__')
0.79 common.py(2095):     def __rsub__(self, a):
0.79 common.py(2098):     @call_highest_priority('__rsub__')
0.79 common.py(2099):     def __sub__(self, a):
0.79 common.py(2102):     @call_highest_priority('__rtruediv__')
0.79 common.py(2103):     def __truediv__(self, other):
0.79 common.py(2106):     def multiply_elementwise(self, other):
0.79 common.py(2133): class MatrixCommon(MatrixArithmetic, MatrixOperations, MatrixProperties,
0.79 common.py(2134):                   MatrixSpecial, MatrixShaping):
0.79 common.py(2133): class MatrixCommon(MatrixArithmetic, MatrixOperations, MatrixProperties,
0.79 common.py(2133): class MatrixCommon(MatrixArithmetic, MatrixOperations, MatrixProperties,
0.79 common.py(2135):     """All common matrix operations including basic arithmetic, shaping,
0.79 common.py(2137):     _diff_wrt = True
0.79 common.py(2140): class _MinimalMatrix(object):
0.79 common.py(2140): class _MinimalMatrix(object):
0.79 common.py(2141):     """Class providing the minimum functionality
0.79 common.py(2150):     is_MatrixLike = True
0.79 common.py(2151):     _sympify = staticmethod(sympify)
0.79 common.py(2152):     _class_priority = 3
0.79 common.py(2154):     is_Matrix = True
0.79 common.py(2155):     is_MatrixExpr = False
0.79 common.py(2157):     @classmethod
0.79 common.py(2158):     def _new(cls, *args, **kwargs):
0.79 common.py(2161):     def __init__(self, rows, cols=None, mat=None):
0.79 common.py(2185):     def __getitem__(self, key):
0.79 common.py(2224):     def __eq__(self, other):
0.79 common.py(2227):     def __len__(self):
0.79 common.py(2230):     def __repr__(self):
0.79 common.py(2234):     @property
0.79 common.py(2235):     def shape(self):
0.79 common.py(2239): class _MatrixWrapper(object):
0.79 common.py(2239): class _MatrixWrapper(object):
0.79 common.py(2240):     """Wrapper class providing the minimum functionality
0.79 common.py(2246):     is_MatrixLike = True
0.79 common.py(2248):     def __init__(self, mat, shape=None):
0.79 common.py(2252):     def __getattr__(self, attr):
0.79 common.py(2257):     def __getitem__(self, key):
0.79 common.py(2261): def _matrixify(mat):
0.79 common.py(2273): def a2idx(j, n=None):
0.79 common.py(2288): def classof(A, B):
+ cat coverage.cover
{"/testbed/sympy/matrices/common.py": {"7": 1, "9": 1, "10": 1, "11": 1, "12": 1, "13": 1, "14": 1, "15": 1, "16": 1, "17": 1, "20": 1, "21": 1, "22": 1, "23": 1, "24": 1, "25": 1, "27": 1, "30": 2, "34": 2, "39": 2, "43": 2, "73": 2, "607": 2, "900": 2, "1479": 2, "1889": 2, "2133": 3, "2134": 1, "2140": 2, "2239": 2, "2261": 1, "2273": 1, "2288": 1, "31": 1, "36": 1, "40": 1, "46": 1, "47": 1, "48": 1, "49": 1, "51": 1, "52": 1, "58": 1, "61": 1, "68": 1, "56": 0, "59": 0, "66": 0, "70": 0, "76": 1, "81": 1, "94": 1, "105": 1, "112": 1, "138": 1, "143": 1, "149": 1, "160": 1, "163": 1, "174": 1, "182": 1, "220": 1, "251": 1, "275": 1, "337": 1, "363": 1, "364": 1, "383": 1, "408": 1, "417": 1, "457": 1, "487": 1, "509": 1, "510": 1, "527": 1, "558": 1, "584": 1, "585": 1, "77": 0, "79": 0, "78": 0, "82": 1, "84": 1, "91": 2, "92": 49, "85": 48, "86": 18, "87": 30, "88": 12, "89": 18, "95": 0, "97": 0, "102": 0, "103": 0, "98": 0, "99": 0, "100": 0, "106": 0, "107": 0, "108": 0, "109": 0, "110": 0, "113": 0, "115": 0, "135": 0, "136": 0, "116": 0, "117": 0, "118": 0, "119": 0, "120": 0, "122": 0, "123": 0, "124": 0, "125": 0, "126": 0, "128": 0, "129": 0, "130": 0, "132": 0, "133": 0, "139": 0, "141": 0, "140": 0, "144": 0, "145": 0, "146": 0, "147": 0, "150": 0, "152": 0, "157": 0, "158": 0, "153": 0, "154": 0, "155": 0, "161": 0, "164": 0, "166": 0, "172": 0, "168": 0, "169": 0, "170": 0, "176": 0, "177": 0, "178": 0, "179": 0, "180": 0, "204": 1, "205": 0, "207": 1, "208": 0, "209": 1, "210": 0, "211": 1, "212": 0, "214": 1, "215": 0, "216": 0, "218": 1, "243": 0, "244": 0, "246": 0, "247": 0, "248": 0, "249": 0, "273": 0, "323": 0, "324": 0, "326": 0, "327": 0, "328": 0, "329": 0, "332": 0, "333": 0, "335": 0, "361": 0, "377": 0, "378": 0, "380": 0, "381": 0, "404": 0, "405": 0, "406": 0, "410": 0, "411": 0, "412": 0, "413": 0, "415": 0, "439": 0, "441": 0, "442": 0, "444": 0, "445": 0, "446": 0, "447": 0, "448": 0, "449": 0, "451": 0, "452": 0, "453": 0, "455": 0, "479": 0, "480": 0, "482": 0, "483": 0, "484": 0, "485": 0, "507": 0, "525": 49, "552": 1, "553": 0, "554": 1, "555": 0, "556": 1, "582": 0, "600": 0, "601": 0, "603": 0, "604": 0, "610": 1, "611": 1, "618": 1, "619": 1, "624": 1, "625": 1, "642": 1, "643": 1, "648": 1, "649": 1, "654": 1, "655": 1, "761": 1, "762": 1, "782": 1, "783": 1, "857": 1, "858": 1, "878": 1, "879": 1, "614": 0, "616": 0, "615": 0, "620": 1, "622": 1, "621": 36, "626": 0, "627": 0, "634": 0, "640": 0, "628": 0, "629": 0, "630": 0, "631": 0, "632": 0, "635": 0, "636": 0, "637": 0, "638": 0, "639": 0, "644": 1, "646": 1, "645": 12, "650": 0, "652": 0, "651": 0, "724": 0, "726": 0, "727": 0, "729": 0, "734": 0, "735": 0, "736": 0, "737": 0, "738": 0, "739": 0, "740": 0, "741": 0, "744": 0, "745": 0, "746": 0, "747": 0, "749": 0, "750": 0, "751": 0, "752": 0, "753": 0, "756": 0, "757": 0, "758": 0, "759": 0, "731": 0, "732": 0, "733": 0, "775": 1, "776": 1, "777": 1, "778": 1, "780": 1, "825": 0, "826": 0, "827": 0, "828": 0, "829": 0, "830": 0, "831": 0, "832": 0, "833": 0, "834": 0, "835": 0, "837": 0, "838": 0, "840": 0, "841": 0, "843": 0, "844": 0, "846": 0, "847": 0, "848": 0, "849": 0, "850": 0, "851": 0, "853": 0, "855": 0, "871": 1, "872": 0, "873": 1, "874": 1, "876": 1, "892": 0, "893": 0, "894": 0, "895": 0, "897": 0, "903": 1, "909": 1, "912": 1, "915": 1, "920": 1, "930": 1, "934": 1, "943": 1, "948": 1, "953": 1, "956": 1, "960": 1, "967": 1, "972": 1, "975": 1, "994": 1, "995": 1, "1008": 1, "1033": 1, "1104": 1, "1147": 1, "1148": 1, "1185": 1, "1186": 1, "1191": 1, "1192": 1, "1220": 1, "1221": 1, "1265": 1, "1266": 1, "1289": 1, "1304": 1, "1368": 1, "1369": 1, "1397": 1, "1398": 1, "1443": 1, "1444": 1, "1474": 1, "904": 0, "905": 0, "906": 0, "907": 0, "910": 0, "913": 0, "916": 0, "917": 0, "918": 0, "921": 0, "922": 0, "923": 0, "924": 0, "925": 0, "931": 0, "932": 0, "935": 0, "940": 0, "936": 0, "937": 0, "938": 0, "941": 0, "944": 0, "945": 0, "946": 0, "949": 0, "950": 0, "951": 0, "954": 0, "957": 0, "958": 0, "961": 0, "962": 0, "963": 0, "964": 0, "965": 0, "968": 0, "969": 0, "970": 0, "973": 0, "989": 0, "990": 0, "991": 0, "992": 0, "1006": 0, "1031": 0, "1096": 0, "1097": 0, "1098": 0, "1100": 0, "1101": 0, "1102": 0, "1145": 0, "1176": 0, "1177": 0, "1179": 0, "1180": 0, "1181": 0, "1183": 0, "1187": 0, "1188": 0, "1189": 0, "1218": 0, "1263": 0, "1287": 0, "1302": 0, "1359": 0, "1360": 0, "1361": 0, "1363": 0, "1364": 0, "1366": 0, "1395": 0, "1439": 0, "1440": 0, "1441": 0, "1472": 0, "1476": 0, "1483": 1, "1486": 1, "1490": 1, "1495": 1, "1498": 1, "1507": 1, "1516": 1, "1519": 1, "1522": 1, "1526": 1, "1549": 1, "1553": 1, "1582": 1, "1585": 1, "1589": 1, "1608": 1, "1609": 1, "1634": 1, "1713": 1, "1723": 1, "1733": 1, "1753": 1, "1773": 1, "1789": 1, "1806": 1, "1824": 1, "1859": 1, "1861": 1, "1863": 1, "1865": 1, "1882": 1, "1884": 1, "1484": 0, "1487": 0, "1488": 0, "1491": 0, "1493": 0, "1496": 0, "1500": 0, "1502": 0, "1505": 0, "1503": 0, "1509": 0, "1511": 0, "1514": 0, "1512": 0, "1517": 0, "1520": 0, "1524": 0, "1544": 0, "1545": 0, "1547": 0, "1551": 0, "1580": 0, "1583": 0, "1587": 0, "1604": 0, "1605": 0, "1606": 0, "1632": 0, "1670": 0, "1671": 0, "1672": 0, "1673": 0, "1674": 0, "1675": 0, "1677": 0, "1678": 0, "1679": 0, "1680": 0, "1681": 0, "1682": 0, "1685": 0, "1686": 0, "1687": 0, "1690": 0, "1691": 0, "1693": 0, "1694": 0, "1698": 0, "1699": 0, "1700": 0, "1701": 0, "1702": 0, "1703": 0, "1705": 0, "1706": 0, "1708": 0, "1709": 0, "1710": 0, "1711": 0, "1721": 0, "1731": 0, "1751": 0, "1771": 0, "1787": 0, "1804": 0, "1820": 0, "1821": 0, "1822": 0, "1857": 0, "1880": 0, "1885": 0, "1886": 0, "1893": 1, "1895": 1, "1898": 1, "1902": 1, "1919": 1, "1922": 1, "1927": 1, "1935": 1, "1938": 1, "1942": 1, "1946": 1, "1947": 1, "1970": 1, "1971": 1, "1974": 1, "1975": 1, "1978": 1, "1979": 1, "2028": 1, "2031": 1, "2032": 1, "2063": 1, "2064": 1, "2067": 1, "2068": 1, "2071": 1, "2072": 1, "2094": 1, "2095": 1, "2098": 1, "2099": 1, "2102": 1, "2103": 1, "2106": 1, "1896": 0, "1899": 0, "1900": 0, "1903": 0, "1917": 0, "1904": 0, "1905": 0, "1906": 0, "1912": 0, "1913": 0, "1914": 0, "1915": 0, "1920": 0, "1923": 0, "1925": 0, "1924": 0, "1928": 0, "1929": 0, "1930": 0, "1931": 0, "1932": 0, "1933": 0, "1936": 0, "1939": 0, "1944": 0, "1949": 0, "1952": 0, "1953": 0, "1954": 0, "1955": 0, "1958": 0, "1960": 0, "1961": 0, "1962": 0, "1963": 0, "1965": 0, "1966": 0, "1968": 0, "1972": 0, "1976": 0, "2006": 0, "2009": 0, "2010": 0, "2011": 0, "2012": 0, "2015": 0, "2016": 0, "2018": 0, "2019": 0, "2021": 0, "2022": 0, "2023": 0, "2024": 0, "2026": 0, "2029": 0, "2033": 0, "2034": 0, "2035": 0, "2036": 0, "2037": 0, "2038": 0, "2039": 0, "2040": 0, "2041": 0, "2042": 0, "2043": 0, "2044": 0, "2045": 0, "2049": 0, "2050": 0, "2051": 0, "2052": 0, "2053": 0, "2054": 0, "2055": 0, "2056": 0, "2058": 0, "2059": 0, "2060": 0, "2061": 0, "2065": 0, "2069": 0, "2073": 1, "2076": 1, "2077": 0, "2078": 0, "2081": 1, "2082": 0, "2084": 1, "2085": 0, "2087": 1, "2088": 1, "2089": 0, "2090": 0, "2092": 0, "2096": 0, "2100": 0, "2104": 0, "2127": 0, "2128": 0, "2130": 0, "2137": 1, "2150": 1, "2151": 1, "2152": 1, "2154": 1, "2155": 1, "2157": 1, "2158": 1, "2161": 1, "2185": 1, "2224": 1, "2227": 1, "2230": 1, "2234": 1, "2235": 1, "2159": 0, "2162": 0, "2164": 0, "2165": 0, "2166": 0, "2167": 0, "2168": 0, "2169": 0, "2170": 0, "2171": 0, "2173": 0, "2174": 0, "2175": 0, "2176": 0, "2177": 0, "2178": 0, "2179": 0, "2180": 0, "2181": 0, "2182": 0, "2183": 0, "2186": 0, "2200": 0, "2205": 0, "2206": 0, "2207": 0, "2210": 0, "2212": 0, "2213": 0, "2214": 0, "2216": 0, "2217": 0, "2221": 0, "2222": 0, "2190": 0, "2191": 0, "2192": 0, "2194": 0, "2195": 0, "2196": 0, "2198": 0, "2203": 0, "2215": 0, "2225": 0, "2228": 0, "2231": 0, "2232": 0, "2236": 0, "2246": 1, "2248": 1, "2252": 1, "2257": 1, "2249": 0, "2250": 0, "2255": 0, "2258": 0, "2265": 1, "2266": 0, "2267": 1, "2268": 0, "2269": 0, "2270": 1, "2275": 0, "2276": 0, "2277": 0, "2278": 0, "2279": 0, "2280": 0, "2281": 0, "2282": 0, "2283": 0, "2284": 0, "2285": 0, "2304": 0, "2305": 0, "2306": 0, "2308": 0, "2309": 0, "2310": 0, "2311": 0, "2312": 0, "2313": 0, "2314": 0, "2315": 0, "2316": 0, "2317": 0, "2318": 0, "2319": 0}}
{"/testbed/sympy/matrices/common.py": {"7": 1, "9": 1, "10": 1, "11": 1, "12": 1, "13": 1, "14": 1, "15": 1, "16": 1, "17": 1, "20": 1, "21": 1, "22": 1, "23": 1, "24": 1, "25": 1, "27": 1, "30": 2, "34": 2, "39": 2, "43": 2, "73": 2, "607": 2, "900": 2, "1479": 2, "1889": 2, "2133": 3, "2134": 1, "2140": 2, "2239": 2, "2261": 1, "2273": 1, "2288": 1, "31": 1, "36": 1, "40": 1, "46": 1, "47": 1, "48": 1, "49": 1, "51": 1, "52": 1, "58": 1, "61": 1, "68": 1, "56": 0, "59": 0, "66": 0, "70": 0, "76": 1, "81": 1, "94": 1, "105": 1, "112": 1, "138": 1, "143": 1, "149": 1, "160": 1, "163": 1, "174": 1, "182": 1, "220": 1, "251": 1, "275": 1, "337": 1, "363": 1, "364": 1, "383": 1, "408": 1, "417": 1, "457": 1, "487": 1, "509": 1, "510": 1, "527": 1, "558": 1, "584": 1, "585": 1, "77": 0, "79": 0, "78": 0, "82": 0, "84": 0, "91": 0, "92": 0, "85": 0, "86": 0, "87": 0, "88": 0, "89": 0, "95": 0, "97": 0, "102": 0, "103": 0, "98": 0, "99": 0, "100": 0, "106": 0, "107": 0, "108": 0, "109": 0, "110": 0, "113": 0, "115": 0, "135": 0, "136": 0, "116": 0, "117": 0, "118": 0, "119": 0, "120": 0, "122": 0, "123": 0, "124": 0, "125": 0, "126": 0, "128": 0, "129": 0, "130": 0, "132": 0, "133": 0, "139": 0, "141": 0, "140": 0, "144": 0, "145": 0, "146": 0, "147": 0, "150": 0, "152": 0, "157": 0, "158": 0, "153": 0, "154": 0, "155": 0, "161": 0, "164": 0, "166": 0, "172": 0, "168": 0, "169": 0, "170": 0, "176": 0, "177": 0, "178": 0, "179": 0, "180": 0, "204": 0, "205": 0, "207": 0, "208": 0, "209": 0, "210": 0, "211": 0, "212": 0, "214": 0, "215": 0, "216": 0, "218": 0, "243": 0, "244": 0, "246": 0, "247": 0, "248": 0, "249": 0, "273": 0, "323": 0, "324": 0, "326": 0, "327": 0, "328": 0, "329": 0, "332": 0, "333": 0, "335": 0, "361": 0, "377": 0, "378": 0, "380": 0, "381": 0, "404": 0, "405": 0, "406": 0, "410": 0, "411": 0, "412": 0, "413": 0, "415": 0, "439": 0, "441": 0, "442": 0, "444": 0, "445": 0, "446": 0, "447": 0, "448": 0, "449": 0, "451": 0, "452": 0, "453": 0, "455": 0, "479": 0, "480": 0, "482": 0, "483": 0, "484": 0, "485": 0, "507": 0, "525": 0, "552": 0, "553": 0, "554": 0, "555": 0, "556": 0, "582": 0, "600": 0, "601": 0, "603": 0, "604": 0, "610": 1, "611": 1, "618": 1, "619": 1, "624": 1, "625": 1, "642": 1, "643": 1, "648": 1, "649": 1, "654": 1, "655": 1, "761": 1, "762": 1, "782": 1, "783": 1, "857": 1, "858": 1, "878": 1, "879": 1, "614": 0, "616": 0, "615": 0, "620": 0, "622": 0, "621": 0, "626": 0, "627": 0, "634": 0, "640": 0, "628": 0, "629": 0, "630": 0, "631": 0, "632": 0, "635": 0, "636": 0, "637": 0, "638": 0, "639": 0, "644": 0, "646": 0, "645": 0, "650": 0, "652": 0, "651": 0, "724": 0, "726": 0, "727": 0, "729": 0, "734": 0, "735": 0, "736": 0, "737": 0, "738": 0, "739": 0, "740": 0, "741": 0, "744": 0, "745": 0, "746": 0, "747": 0, "749": 0, "750": 0, "751": 0, "752": 0, "753": 0, "756": 0, "757": 0, "758": 0, "759": 0, "731": 0, "732": 0, "733": 0, "775": 0, "776": 0, "777": 0, "778": 0, "780": 0, "825": 0, "826": 0, "827": 0, "828": 0, "829": 0, "830": 0, "831": 0, "832": 0, "833": 0, "834": 0, "835": 0, "837": 0, "838": 0, "840": 0, "841": 0, "843": 0, "844": 0, "846": 0, "847": 0, "848": 0, "849": 0, "850": 0, "851": 0, "853": 0, "855": 0, "871": 0, "872": 0, "873": 0, "874": 0, "876": 0, "892": 0, "893": 0, "894": 0, "895": 0, "897": 0, "903": 1, "909": 1, "912": 1, "915": 1, "920": 1, "930": 1, "934": 1, "943": 1, "948": 1, "953": 1, "956": 1, "960": 1, "967": 1, "972": 1, "975": 1, "994": 1, "995": 1, "1008": 1, "1033": 1, "1104": 1, "1147": 1, "1148": 1, "1185": 1, "1186": 1, "1191": 1, "1192": 1, "1220": 1, "1221": 1, "1265": 1, "1266": 1, "1289": 1, "1304": 1, "1368": 1, "1369": 1, "1397": 1, "1398": 1, "1443": 1, "1444": 1, "1474": 1, "904": 0, "905": 0, "906": 0, "907": 0, "910": 0, "913": 0, "916": 0, "917": 0, "918": 0, "921": 0, "922": 0, "923": 0, "924": 0, "925": 0, "931": 0, "932": 0, "935": 0, "940": 0, "936": 0, "937": 0, "938": 0, "941": 0, "944": 0, "945": 0, "946": 0, "949": 0, "950": 0, "951": 0, "954": 0, "957": 0, "958": 0, "961": 0, "962": 0, "963": 0, "964": 0, "965": 0, "968": 0, "969": 0, "970": 0, "973": 0, "989": 0, "990": 0, "991": 0, "992": 0, "1006": 0, "1031": 0, "1096": 0, "1097": 0, "1098": 0, "1100": 0, "1101": 0, "1102": 0, "1145": 0, "1176": 0, "1177": 0, "1179": 0, "1180": 0, "1181": 0, "1183": 0, "1187": 0, "1188": 0, "1189": 0, "1218": 0, "1263": 0, "1287": 0, "1302": 0, "1359": 0, "1360": 0, "1361": 0, "1363": 0, "1364": 0, "1366": 0, "1395": 0, "1439": 0, "1440": 0, "1441": 0, "1472": 0, "1476": 0, "1483": 1, "1486": 1, "1490": 1, "1495": 1, "1498": 1, "1507": 1, "1516": 1, "1519": 1, "1522": 1, "1526": 1, "1549": 1, "1553": 1, "1582": 1, "1585": 1, "1589": 1, "1608": 1, "1609": 1, "1634": 1, "1713": 1, "1723": 1, "1733": 1, "1753": 1, "1773": 1, "1789": 1, "1806": 1, "1824": 1, "1859": 1, "1861": 1, "1863": 1, "1865": 1, "1882": 1, "1884": 1, "1484": 0, "1487": 0, "1488": 0, "1491": 0, "1493": 0, "1496": 0, "1500": 0, "1502": 0, "1505": 0, "1503": 0, "1509": 0, "1511": 0, "1514": 0, "1512": 0, "1517": 0, "1520": 0, "1524": 0, "1544": 0, "1545": 0, "1547": 0, "1551": 0, "1580": 0, "1583": 0, "1587": 0, "1604": 0, "1605": 0, "1606": 0, "1632": 0, "1670": 0, "1671": 0, "1672": 0, "1673": 0, "1674": 0, "1675": 0, "1677": 0, "1678": 0, "1679": 0, "1680": 0, "1681": 0, "1682": 0, "1685": 0, "1686": 0, "1687": 0, "1690": 0, "1691": 0, "1693": 0, "1694": 0, "1698": 0, "1699": 0, "1700": 0, "1701": 0, "1702": 0, "1703": 0, "1705": 0, "1706": 0, "1708": 0, "1709": 0, "1710": 0, "1711": 0, "1721": 0, "1731": 0, "1751": 0, "1771": 0, "1787": 0, "1804": 0, "1820": 0, "1821": 0, "1822": 0, "1857": 0, "1880": 0, "1885": 0, "1886": 0, "1893": 1, "1895": 1, "1898": 1, "1902": 1, "1919": 1, "1922": 1, "1927": 1, "1935": 1, "1938": 1, "1942": 1, "1946": 1, "1947": 1, "1970": 1, "1971": 1, "1974": 1, "1975": 1, "1978": 1, "1979": 1, "2028": 1, "2031": 1, "2032": 1, "2063": 1, "2064": 1, "2067": 1, "2068": 1, "2071": 1, "2072": 1, "2094": 1, "2095": 1, "2098": 1, "2099": 1, "2102": 1, "2103": 1, "2106": 1, "1896": 0, "1899": 0, "1900": 0, "1903": 0, "1917": 0, "1904": 0, "1905": 0, "1906": 0, "1912": 0, "1913": 0, "1914": 0, "1915": 0, "1920": 0, "1923": 0, "1925": 0, "1924": 0, "1928": 0, "1929": 0, "1930": 0, "1931": 0, "1932": 0, "1933": 0, "1936": 0, "1939": 0, "1944": 0, "1949": 0, "1952": 0, "1953": 0, "1954": 0, "1955": 0, "1958": 0, "1960": 0, "1961": 0, "1962": 0, "1963": 0, "1965": 0, "1966": 0, "1968": 0, "1972": 0, "1976": 0, "2006": 0, "2009": 0, "2010": 0, "2011": 0, "2012": 0, "2015": 0, "2016": 0, "2018": 0, "2019": 0, "2021": 0, "2022": 0, "2023": 0, "2024": 0, "2026": 0, "2029": 0, "2033": 0, "2034": 0, "2035": 0, "2036": 0, "2037": 0, "2038": 0, "2039": 0, "2040": 0, "2041": 0, "2042": 0, "2043": 0, "2044": 0, "2045": 0, "2049": 0, "2050": 0, "2051": 0, "2052": 0, "2053": 0, "2054": 0, "2055": 0, "2056": 0, "2058": 0, "2059": 0, "2060": 0, "2061": 0, "2065": 0, "2069": 0, "2073": 0, "2076": 0, "2077": 0, "2078": 0, "2081": 0, "2082": 0, "2084": 0, "2085": 0, "2087": 0, "2088": 0, "2089": 0, "2090": 0, "2092": 0, "2096": 0, "2100": 0, "2104": 0, "2127": 0, "2128": 0, "2130": 0, "2137": 1, "2150": 1, "2151": 1, "2152": 1, "2154": 1, "2155": 1, "2157": 1, "2158": 1, "2161": 1, "2185": 1, "2224": 1, "2227": 1, "2230": 1, "2234": 1, "2235": 1, "2159": 0, "2162": 0, "2164": 0, "2165": 0, "2166": 0, "2167": 0, "2168": 0, "2169": 0, "2170": 0, "2171": 0, "2173": 0, "2174": 0, "2175": 0, "2176": 0, "2177": 0, "2178": 0, "2179": 0, "2180": 0, "2181": 0, "2182": 0, "2183": 0, "2186": 0, "2200": 0, "2205": 0, "2206": 0, "2207": 0, "2210": 0, "2212": 0, "2213": 0, "2214": 0, "2216": 0, "2217": 0, "2221": 0, "2222": 0, "2190": 0, "2191": 0, "2192": 0, "2194": 0, "2195": 0, "2196": 0, "2198": 0, "2203": 0, "2215": 0, "2225": 0, "2228": 0, "2231": 0, "2232": 0, "2236": 0, "2246": 1, "2248": 1, "2252": 1, "2257": 1, "2249": 0, "2250": 0, "2255": 0, "2258": 0, "2265": 0, "2266": 0, "2267": 0, "2268": 0, "2269": 0, "2270": 0, "2275": 0, "2276": 0, "2277": 0, "2278": 0, "2279": 0, "2280": 0, "2281": 0, "2282": 0, "2283": 0, "2284": 0, "2285": 0, "2304": 0, "2305": 0, "2306": 0, "2308": 0, "2309": 0, "2310": 0, "2311": 0, "2312": 0, "2313": 0, "2314": 0, "2315": 0, "2316": 0, "2317": 0, "2318": 0, "2319": 0}}
+ git checkout 67e3c956083d0128a621f65ee86a7dacd4f9f19f
Note: switching to '67e3c956083d0128a621f65ee86a7dacd4f9f19f'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at 67e3c95608 Merge pull request #13641 from Upabjojr/diff_and_arrays
+ git apply /root/pre_state.patch
error: unrecognized input
