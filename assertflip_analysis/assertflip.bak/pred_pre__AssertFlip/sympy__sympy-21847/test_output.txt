+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD d9b18c518d64d0ebe8e35a98c2fb519938b9b151
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch master
nothing to commit, working tree clean
+ git show
commit d9b18c518d64d0ebe8e35a98c2fb519938b9b151
Merge: 8daad34079 2f5dd663dd
Author: Oscar Benjamin <oscar.j.benjamin@gmail.com>
Date:   Tue Aug 10 00:26:06 2021 +0100

    Merge pull request #21769 from redeboer/CG._latex
    
    Fixed rendering of Clebsch-Gordan (CG) class

+ git diff d9b18c518d64d0ebe8e35a98c2fb519938b9b151
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Requirement already satisfied: mpmath>=0.19 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from sympy==1.9.dev0) (1.3.0)
Installing collected packages: sympy
  Attempting uninstall: sympy
    Found existing installation: sympy 1.9.dev0
    Uninstalling sympy-1.9.dev0:
      Successfully uninstalled sympy-1.9.dev0
  DEPRECATION: Legacy editable install of sympy==1.9.dev0 from file:///testbed (setup.py develop) is deprecated. pip 25.3 will enforce this behaviour change. A possible replacement is to add a pyproject.toml or enable --use-pep517, and use setuptools >= 64. If the resulting installation is not behaving as expected, try using --config-settings editable_mode=compat. Please consult the setuptools documentation for more information. Discussion can be found at https://github.com/pypa/pip/issues/11457
  Running setup.py develop for sympy
Successfully installed sympy
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git apply -v -
<stdin>:19: trailing whitespace.
    monomials = sorted(itermonomials(states, max_degrees, min_degrees=min_degrees), 
Checking patch sympy/polys/tests/test_coverup_sympy__sympy-21847.py...
Applied patch sympy/polys/tests/test_coverup_sympy__sympy-21847.py cleanly.
warning: 1 line adds whitespace errors.
+ PYTHONWARNINGS=ignore::UserWarning,ignore::SyntaxWarning
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(sympy/polys/monomials\.py)' bin/test -C --verbose sympy/polys/tests/test_coverup_sympy__sympy-21847.p
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(sympy/polys/monomials\\.py)']
0.28 monomials.py(1): """Tools and arithmetics for monomials of distributed polynomials. """
0.28 monomials.py(4): from itertools import combinations_with_replacement, product
0.28 monomials.py(5): from textwrap import dedent
0.28 monomials.py(7): from sympy.core import Mul, S, Tuple, sympify
0.28 monomials.py(8): from sympy.core.compatibility import iterable
0.28 monomials.py(9): from sympy.polys.polyerrors import ExactQuotientFailed
0.28 monomials.py(10): from sympy.polys.polyutils import PicklableWithSlots, dict_from_expr
0.28 monomials.py(11): from sympy.utilities import public
0.28 monomials.py(12): from sympy.core.compatibility import is_sequence
0.28 monomials.py(14): @public
0.28 monomials.py(15): def itermonomials(variables, max_degrees, min_degrees=None):
0.28 monomials.py(154): def monomial_count(V, N):
0.28 monomials.py(187): def monomial_mul(A, B):
0.28 monomials.py(206): def monomial_div(A, B):
0.28 monomials.py(235): def monomial_ldiv(A, B):
0.28 monomials.py(259): def monomial_pow(A, n):
0.28 monomials.py(263): def monomial_gcd(A, B):
0.28 monomials.py(282): def monomial_lcm(A, B):
0.28 monomials.py(301): def monomial_divides(A, B):
0.28 monomials.py(316): def monomial_max(*monoms):
0.28 monomials.py(341): def monomial_min(*monoms):
0.28 monomials.py(366): def monomial_deg(M):
0.28 monomials.py(381): def term_div(a, b, domain):
0.28 monomials.py(399): class MonomialOps:
0.28 monomials.py(399): class MonomialOps:
0.28 monomials.py(400):     """Code generator of fast monomial arithmetic functions. """
0.28 monomials.py(402):     def __init__(self, ngens):
0.28 monomials.py(405):     def _build(self, code, name):
0.28 monomials.py(410):     def _vars(self, name):
0.28 monomials.py(413):     def mul(self):
0.28 monomials.py(427):     def pow(self):
0.28 monomials.py(439):     def mulpow(self):
0.28 monomials.py(453):     def ldiv(self):
0.28 monomials.py(467):     def div(self):
0.28 monomials.py(483):     def lcm(self):
0.28 monomials.py(497):     def gcd(self):
0.28 monomials.py(511): @public
0.28 monomials.py(512): class Monomial(PicklableWithSlots):
0.28 monomials.py(511): @public
0.28 monomials.py(513):     """Class representing a monomial, i.e. a product of powers. """
0.28 monomials.py(515):     __slots__ = ('exponents', 'gens')
0.28 monomials.py(517):     def __init__(self, monom, gens=None):
0.28 monomials.py(528):     def rebuild(self, exponents, gens=None):
0.28 monomials.py(531):     def __len__(self):
0.28 monomials.py(534):     def __iter__(self):
0.28 monomials.py(537):     def __getitem__(self, item):
0.28 monomials.py(540):     def __hash__(self):
0.28 monomials.py(543):     def __str__(self):
0.28 monomials.py(549):     def as_expr(self, *gens):
0.28 monomials.py(559):     def __eq__(self, other):
0.28 monomials.py(569):     def __ne__(self, other):
0.28 monomials.py(572):     def __mul__(self, other):
0.28 monomials.py(582):     def __truediv__(self, other):
0.28 monomials.py(597):     __floordiv__ = __truediv__
0.28 monomials.py(599):     def __pow__(self, other):
0.28 monomials.py(614):     def gcd(self, other):
0.28 monomials.py(626):     def lcm(self, other):
============================= test process starts ==============================
executable:         /opt/miniconda3/envs/testbed/bin/python3  (3.9.23-final-0) [CPython]
architecture:       64-bit
cache:              no
ground types:       python 
numpy:              None
random seed:        95745353
hash randomization: on (PYTHONHASHSEED=2353874848)

sympy/polys/tests/test_coverup_sympy__sympy-21847.py[1] 
test_itermonomials_min_degrees_bug 0.50 monomials.py(88):     n = len(variables)
0.50 monomials.py(89):     if is_sequence(max_degrees):
0.50 monomials.py(103):         max_degree = max_degrees
0.50 monomials.py(104):         if max_degree < 0:
0.50 monomials.py(106):         if min_degrees is None:
0.50 monomials.py(109):             if min_degrees < 0:
0.50 monomials.py(111):             min_degree = min_degrees
0.50 monomials.py(112):         total_degree = True
0.50 monomials.py(113):     if total_degree:
0.50 monomials.py(114):         if min_degree > max_degree:
0.50 monomials.py(116):         if not variables or max_degree == 0:
0.50 monomials.py(120):         variables = list(variables) + [S.One]
0.50 monomials.py(121):         if all(variable.is_commutative for variable in variables):
0.50 monomials.py(121):         if all(variable.is_commutative for variable in variables):
0.50 monomials.py(121):         if all(variable.is_commutative for variable in variables):
0.50 monomials.py(121):         if all(variable.is_commutative for variable in variables):
0.50 monomials.py(121):         if all(variable.is_commutative for variable in variables):
0.50 monomials.py(121):         if all(variable.is_commutative for variable in variables):
0.50 monomials.py(122):             monomials_list_comm = []
0.50 monomials.py(123):             for item in combinations_with_replacement(variables, max_degree):
0.50 monomials.py(124):                 powers = dict()
0.50 monomials.py(125):                 for variable in variables:
0.50 monomials.py(126):                     powers[variable] = 0
0.50 monomials.py(125):                 for variable in variables:
0.50 monomials.py(126):                     powers[variable] = 0
0.50 monomials.py(125):                 for variable in variables:
0.50 monomials.py(126):                     powers[variable] = 0
0.50 monomials.py(125):                 for variable in variables:
0.50 monomials.py(126):                     powers[variable] = 0
0.50 monomials.py(125):                 for variable in variables:
0.50 monomials.py(127):                 for variable in item:
0.50 monomials.py(128):                     if variable != 1:
0.50 monomials.py(129):                         powers[variable] += 1
0.50 monomials.py(127):                 for variable in item:
0.50 monomials.py(128):                     if variable != 1:
0.50 monomials.py(129):                         powers[variable] += 1
0.50 monomials.py(127):                 for variable in item:
0.50 monomials.py(128):                     if variable != 1:
0.50 monomials.py(129):                         powers[variable] += 1
0.50 monomials.py(127):                 for variable in item:
0.50 monomials.py(130):                 if max(powers.values()) >= min_degree:
0.50 monomials.py(131):                     monomials_list_comm.append(Mul(*item))
0.62 monomials.py(123):             for item in combinations_with_replacement(variables, max_degree):
0.62 monomials.py(124):                 powers = dict()
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(126):                     powers[variable] = 0
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(126):                     powers[variable] = 0
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(126):                     powers[variable] = 0
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(126):                     powers[variable] = 0
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(127):                 for variable in item:
0.62 monomials.py(128):                     if variable != 1:
0.62 monomials.py(129):                         powers[variable] += 1
0.62 monomials.py(127):                 for variable in item:
0.62 monomials.py(128):                     if variable != 1:
0.62 monomials.py(129):                         powers[variable] += 1
0.62 monomials.py(127):                 for variable in item:
0.62 monomials.py(128):                     if variable != 1:
0.62 monomials.py(129):                         powers[variable] += 1
0.62 monomials.py(127):                 for variable in item:
0.62 monomials.py(130):                 if max(powers.values()) >= min_degree:
0.62 monomials.py(123):             for item in combinations_with_replacement(variables, max_degree):
0.62 monomials.py(124):                 powers = dict()
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(126):                     powers[variable] = 0
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(126):                     powers[variable] = 0
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(126):                     powers[variable] = 0
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(126):                     powers[variable] = 0
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(127):                 for variable in item:
0.62 monomials.py(128):                     if variable != 1:
0.62 monomials.py(129):                         powers[variable] += 1
0.62 monomials.py(127):                 for variable in item:
0.62 monomials.py(128):                     if variable != 1:
0.62 monomials.py(129):                         powers[variable] += 1
0.62 monomials.py(127):                 for variable in item:
0.62 monomials.py(128):                     if variable != 1:
0.62 monomials.py(129):                         powers[variable] += 1
0.62 monomials.py(127):                 for variable in item:
0.62 monomials.py(130):                 if max(powers.values()) >= min_degree:
0.62 monomials.py(123):             for item in combinations_with_replacement(variables, max_degree):
0.62 monomials.py(124):                 powers = dict()
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(126):                     powers[variable] = 0
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(126):                     powers[variable] = 0
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(126):                     powers[variable] = 0
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(126):                     powers[variable] = 0
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(127):                 for variable in item:
0.62 monomials.py(128):                     if variable != 1:
0.62 monomials.py(129):                         powers[variable] += 1
0.62 monomials.py(127):                 for variable in item:
0.62 monomials.py(128):                     if variable != 1:
0.62 monomials.py(129):                         powers[variable] += 1
0.62 monomials.py(127):                 for variable in item:
0.62 monomials.py(128):                     if variable != 1:
0.62 monomials.py(127):                 for variable in item:
0.62 monomials.py(130):                 if max(powers.values()) >= min_degree:
0.62 monomials.py(123):             for item in combinations_with_replacement(variables, max_degree):
0.62 monomials.py(124):                 powers = dict()
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(126):                     powers[variable] = 0
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(126):                     powers[variable] = 0
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(126):                     powers[variable] = 0
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(126):                     powers[variable] = 0
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(127):                 for variable in item:
0.62 monomials.py(128):                     if variable != 1:
0.62 monomials.py(129):                         powers[variable] += 1
0.62 monomials.py(127):                 for variable in item:
0.62 monomials.py(128):                     if variable != 1:
0.62 monomials.py(129):                         powers[variable] += 1
0.62 monomials.py(127):                 for variable in item:
0.62 monomials.py(128):                     if variable != 1:
0.62 monomials.py(129):                         powers[variable] += 1
0.62 monomials.py(127):                 for variable in item:
0.62 monomials.py(130):                 if max(powers.values()) >= min_degree:
0.62 monomials.py(123):             for item in combinations_with_replacement(variables, max_degree):
0.62 monomials.py(124):                 powers = dict()
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(126):                     powers[variable] = 0
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(126):                     powers[variable] = 0
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(126):                     powers[variable] = 0
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(126):                     powers[variable] = 0
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(127):                 for variable in item:
0.62 monomials.py(128):                     if variable != 1:
0.62 monomials.py(129):                         powers[variable] += 1
0.62 monomials.py(127):                 for variable in item:
0.62 monomials.py(128):                     if variable != 1:
0.62 monomials.py(129):                         powers[variable] += 1
0.62 monomials.py(127):                 for variable in item:
0.62 monomials.py(128):                     if variable != 1:
0.62 monomials.py(129):                         powers[variable] += 1
0.62 monomials.py(127):                 for variable in item:
0.62 monomials.py(130):                 if max(powers.values()) >= min_degree:
0.62 monomials.py(123):             for item in combinations_with_replacement(variables, max_degree):
0.62 monomials.py(124):                 powers = dict()
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(126):                     powers[variable] = 0
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(126):                     powers[variable] = 0
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(126):                     powers[variable] = 0
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(126):                     powers[variable] = 0
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(127):                 for variable in item:
0.62 monomials.py(128):                     if variable != 1:
0.62 monomials.py(129):                         powers[variable] += 1
0.62 monomials.py(127):                 for variable in item:
0.62 monomials.py(128):                     if variable != 1:
0.62 monomials.py(129):                         powers[variable] += 1
0.62 monomials.py(127):                 for variable in item:
0.62 monomials.py(128):                     if variable != 1:
0.62 monomials.py(127):                 for variable in item:
0.62 monomials.py(130):                 if max(powers.values()) >= min_degree:
0.62 monomials.py(123):             for item in combinations_with_replacement(variables, max_degree):
0.62 monomials.py(124):                 powers = dict()
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(126):                     powers[variable] = 0
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(126):                     powers[variable] = 0
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(126):                     powers[variable] = 0
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(126):                     powers[variable] = 0
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(127):                 for variable in item:
0.62 monomials.py(128):                     if variable != 1:
0.62 monomials.py(129):                         powers[variable] += 1
0.62 monomials.py(127):                 for variable in item:
0.62 monomials.py(128):                     if variable != 1:
0.62 monomials.py(129):                         powers[variable] += 1
0.62 monomials.py(127):                 for variable in item:
0.62 monomials.py(128):                     if variable != 1:
0.62 monomials.py(129):                         powers[variable] += 1
0.62 monomials.py(127):                 for variable in item:
0.62 monomials.py(130):                 if max(powers.values()) >= min_degree:
0.62 monomials.py(123):             for item in combinations_with_replacement(variables, max_degree):
0.62 monomials.py(124):                 powers = dict()
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(126):                     powers[variable] = 0
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(126):                     powers[variable] = 0
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(126):                     powers[variable] = 0
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(126):                     powers[variable] = 0
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(127):                 for variable in item:
0.62 monomials.py(128):                     if variable != 1:
0.62 monomials.py(129):                         powers[variable] += 1
0.62 monomials.py(127):                 for variable in item:
0.62 monomials.py(128):                     if variable != 1:
0.62 monomials.py(129):                         powers[variable] += 1
0.62 monomials.py(127):                 for variable in item:
0.62 monomials.py(128):                     if variable != 1:
0.62 monomials.py(127):                 for variable in item:
0.62 monomials.py(130):                 if max(powers.values()) >= min_degree:
0.62 monomials.py(123):             for item in combinations_with_replacement(variables, max_degree):
0.62 monomials.py(124):                 powers = dict()
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(126):                     powers[variable] = 0
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(126):                     powers[variable] = 0
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(126):                     powers[variable] = 0
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(126):                     powers[variable] = 0
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(127):                 for variable in item:
0.62 monomials.py(128):                     if variable != 1:
0.62 monomials.py(129):                         powers[variable] += 1
0.62 monomials.py(127):                 for variable in item:
0.62 monomials.py(128):                     if variable != 1:
0.62 monomials.py(127):                 for variable in item:
0.62 monomials.py(128):                     if variable != 1:
0.62 monomials.py(127):                 for variable in item:
0.62 monomials.py(130):                 if max(powers.values()) >= min_degree:
0.62 monomials.py(123):             for item in combinations_with_replacement(variables, max_degree):
0.62 monomials.py(124):                 powers = dict()
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(126):                     powers[variable] = 0
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(126):                     powers[variable] = 0
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(126):                     powers[variable] = 0
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(126):                     powers[variable] = 0
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(127):                 for variable in item:
0.62 monomials.py(128):                     if variable != 1:
0.62 monomials.py(129):                         powers[variable] += 1
0.62 monomials.py(127):                 for variable in item:
0.62 monomials.py(128):                     if variable != 1:
0.62 monomials.py(129):                         powers[variable] += 1
0.62 monomials.py(127):                 for variable in item:
0.62 monomials.py(128):                     if variable != 1:
0.62 monomials.py(129):                         powers[variable] += 1
0.62 monomials.py(127):                 for variable in item:
0.62 monomials.py(130):                 if max(powers.values()) >= min_degree:
0.62 monomials.py(131):                     monomials_list_comm.append(Mul(*item))
0.62 monomials.py(123):             for item in combinations_with_replacement(variables, max_degree):
0.62 monomials.py(124):                 powers = dict()
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(126):                     powers[variable] = 0
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(126):                     powers[variable] = 0
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(126):                     powers[variable] = 0
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(126):                     powers[variable] = 0
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(127):                 for variable in item:
0.62 monomials.py(128):                     if variable != 1:
0.62 monomials.py(129):                         powers[variable] += 1
0.62 monomials.py(127):                 for variable in item:
0.62 monomials.py(128):                     if variable != 1:
0.62 monomials.py(129):                         powers[variable] += 1
0.62 monomials.py(127):                 for variable in item:
0.62 monomials.py(128):                     if variable != 1:
0.62 monomials.py(129):                         powers[variable] += 1
0.62 monomials.py(127):                 for variable in item:
0.62 monomials.py(130):                 if max(powers.values()) >= min_degree:
0.62 monomials.py(123):             for item in combinations_with_replacement(variables, max_degree):
0.62 monomials.py(124):                 powers = dict()
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(126):                     powers[variable] = 0
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(126):                     powers[variable] = 0
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(126):                     powers[variable] = 0
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(126):                     powers[variable] = 0
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(127):                 for variable in item:
0.62 monomials.py(128):                     if variable != 1:
0.62 monomials.py(129):                         powers[variable] += 1
0.62 monomials.py(127):                 for variable in item:
0.62 monomials.py(128):                     if variable != 1:
0.62 monomials.py(129):                         powers[variable] += 1
0.62 monomials.py(127):                 for variable in item:
0.62 monomials.py(128):                     if variable != 1:
0.62 monomials.py(127):                 for variable in item:
0.62 monomials.py(130):                 if max(powers.values()) >= min_degree:
0.62 monomials.py(123):             for item in combinations_with_replacement(variables, max_degree):
0.62 monomials.py(124):                 powers = dict()
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(126):                     powers[variable] = 0
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(126):                     powers[variable] = 0
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(126):                     powers[variable] = 0
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(126):                     powers[variable] = 0
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(127):                 for variable in item:
0.62 monomials.py(128):                     if variable != 1:
0.62 monomials.py(129):                         powers[variable] += 1
0.62 monomials.py(127):                 for variable in item:
0.62 monomials.py(128):                     if variable != 1:
0.62 monomials.py(129):                         powers[variable] += 1
0.62 monomials.py(127):                 for variable in item:
0.62 monomials.py(128):                     if variable != 1:
0.62 monomials.py(129):                         powers[variable] += 1
0.62 monomials.py(127):                 for variable in item:
0.62 monomials.py(130):                 if max(powers.values()) >= min_degree:
0.62 monomials.py(123):             for item in combinations_with_replacement(variables, max_degree):
0.62 monomials.py(124):                 powers = dict()
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(126):                     powers[variable] = 0
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(126):                     powers[variable] = 0
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(126):                     powers[variable] = 0
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(126):                     powers[variable] = 0
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(127):                 for variable in item:
0.62 monomials.py(128):                     if variable != 1:
0.62 monomials.py(129):                         powers[variable] += 1
0.62 monomials.py(127):                 for variable in item:
0.62 monomials.py(128):                     if variable != 1:
0.62 monomials.py(129):                         powers[variable] += 1
0.62 monomials.py(127):                 for variable in item:
0.62 monomials.py(128):                     if variable != 1:
0.62 monomials.py(127):                 for variable in item:
0.62 monomials.py(130):                 if max(powers.values()) >= min_degree:
0.62 monomials.py(123):             for item in combinations_with_replacement(variables, max_degree):
0.62 monomials.py(124):                 powers = dict()
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(126):                     powers[variable] = 0
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(126):                     powers[variable] = 0
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(126):                     powers[variable] = 0
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(126):                     powers[variable] = 0
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(127):                 for variable in item:
0.62 monomials.py(128):                     if variable != 1:
0.62 monomials.py(129):                         powers[variable] += 1
0.62 monomials.py(127):                 for variable in item:
0.62 monomials.py(128):                     if variable != 1:
0.62 monomials.py(127):                 for variable in item:
0.62 monomials.py(128):                     if variable != 1:
0.62 monomials.py(127):                 for variable in item:
0.62 monomials.py(130):                 if max(powers.values()) >= min_degree:
0.62 monomials.py(123):             for item in combinations_with_replacement(variables, max_degree):
0.62 monomials.py(124):                 powers = dict()
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(126):                     powers[variable] = 0
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(126):                     powers[variable] = 0
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(126):                     powers[variable] = 0
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(126):                     powers[variable] = 0
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(127):                 for variable in item:
0.62 monomials.py(128):                     if variable != 1:
0.62 monomials.py(129):                         powers[variable] += 1
0.62 monomials.py(127):                 for variable in item:
0.62 monomials.py(128):                     if variable != 1:
0.62 monomials.py(129):                         powers[variable] += 1
0.62 monomials.py(127):                 for variable in item:
0.62 monomials.py(128):                     if variable != 1:
0.62 monomials.py(129):                         powers[variable] += 1
0.62 monomials.py(127):                 for variable in item:
0.62 monomials.py(130):                 if max(powers.values()) >= min_degree:
0.62 monomials.py(131):                     monomials_list_comm.append(Mul(*item))
0.62 monomials.py(123):             for item in combinations_with_replacement(variables, max_degree):
0.62 monomials.py(124):                 powers = dict()
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(126):                     powers[variable] = 0
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(126):                     powers[variable] = 0
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(126):                     powers[variable] = 0
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(126):                     powers[variable] = 0
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(127):                 for variable in item:
0.62 monomials.py(128):                     if variable != 1:
0.62 monomials.py(129):                         powers[variable] += 1
0.62 monomials.py(127):                 for variable in item:
0.62 monomials.py(128):                     if variable != 1:
0.62 monomials.py(129):                         powers[variable] += 1
0.62 monomials.py(127):                 for variable in item:
0.62 monomials.py(128):                     if variable != 1:
0.62 monomials.py(127):                 for variable in item:
0.62 monomials.py(130):                 if max(powers.values()) >= min_degree:
0.62 monomials.py(123):             for item in combinations_with_replacement(variables, max_degree):
0.62 monomials.py(124):                 powers = dict()
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(126):                     powers[variable] = 0
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(126):                     powers[variable] = 0
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(126):                     powers[variable] = 0
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(126):                     powers[variable] = 0
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(127):                 for variable in item:
0.62 monomials.py(128):                     if variable != 1:
0.62 monomials.py(129):                         powers[variable] += 1
0.62 monomials.py(127):                 for variable in item:
0.62 monomials.py(128):                     if variable != 1:
0.62 monomials.py(127):                 for variable in item:
0.62 monomials.py(128):                     if variable != 1:
0.62 monomials.py(127):                 for variable in item:
0.62 monomials.py(130):                 if max(powers.values()) >= min_degree:
0.62 monomials.py(123):             for item in combinations_with_replacement(variables, max_degree):
0.62 monomials.py(124):                 powers = dict()
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(126):                     powers[variable] = 0
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(126):                     powers[variable] = 0
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(126):                     powers[variable] = 0
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(126):                     powers[variable] = 0
0.62 monomials.py(125):                 for variable in variables:
0.62 monomials.py(127):                 for variable in item:
0.62 monomials.py(128):                     if variable != 1:
0.62 monomials.py(127):                 for variable in item:
0.62 monomials.py(128):                     if variable != 1:
0.62 monomials.py(127):                 for variable in item:
0.62 monomials.py(128):                     if variable != 1:
0.62 monomials.py(127):                 for variable in item:
0.62 monomials.py(130):                 if max(powers.values()) >= min_degree:
0.62 monomials.py(123):             for item in combinations_with_replacement(variables, max_degree):
0.62 monomials.py(132):             yield from set(monomials_list_comm)
F                                      [FAIL]


________________________________________________________________________________
 sympy/polys/tests/test_coverup_sympy__sympy-21847.py:test_itermonomials_min_degrees_bug 
Traceback (most recent call last):
  File "/testbed/sympy/polys/tests/test_coverup_sympy__sympy-21847.py", line 20, in test_itermonomials_min_degrees_bug
    assert set(monomials) == expected_monomials, f"BUG: Incorrect monomials generated: {set(monomials)}"
AssertionError: BUG: Incorrect monomials generated: {x2**3, x3**3, x1**3}

============= tests finished: 0 passed, 1 failed, in 0.14 seconds ==============
DO *NOT* COMMIT!
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(sympy/polys/monomials\\.py)']
0.41 monomials.py(1): """Tools and arithmetics for monomials of distributed polynomials. """
0.41 monomials.py(4): from itertools import combinations_with_replacement, product
0.41 monomials.py(5): from textwrap import dedent
0.41 monomials.py(7): from sympy.core import Mul, S, Tuple, sympify
0.41 monomials.py(8): from sympy.core.compatibility import iterable
0.41 monomials.py(9): from sympy.polys.polyerrors import ExactQuotientFailed
0.41 monomials.py(10): from sympy.polys.polyutils import PicklableWithSlots, dict_from_expr
0.41 monomials.py(11): from sympy.utilities import public
0.41 monomials.py(12): from sympy.core.compatibility import is_sequence
0.41 monomials.py(14): @public
0.41 monomials.py(15): def itermonomials(variables, max_degrees, min_degrees=None):
0.41 monomials.py(154): def monomial_count(V, N):
0.41 monomials.py(187): def monomial_mul(A, B):
0.41 monomials.py(206): def monomial_div(A, B):
0.41 monomials.py(235): def monomial_ldiv(A, B):
0.41 monomials.py(259): def monomial_pow(A, n):
0.41 monomials.py(263): def monomial_gcd(A, B):
0.41 monomials.py(282): def monomial_lcm(A, B):
0.41 monomials.py(301): def monomial_divides(A, B):
0.41 monomials.py(316): def monomial_max(*monoms):
0.41 monomials.py(341): def monomial_min(*monoms):
0.41 monomials.py(366): def monomial_deg(M):
0.41 monomials.py(381): def term_div(a, b, domain):
0.41 monomials.py(399): class MonomialOps:
0.41 monomials.py(399): class MonomialOps:
0.41 monomials.py(400):     """Code generator of fast monomial arithmetic functions. """
0.41 monomials.py(402):     def __init__(self, ngens):
0.41 monomials.py(405):     def _build(self, code, name):
0.41 monomials.py(410):     def _vars(self, name):
0.41 monomials.py(413):     def mul(self):
0.41 monomials.py(427):     def pow(self):
0.41 monomials.py(439):     def mulpow(self):
0.41 monomials.py(453):     def ldiv(self):
0.41 monomials.py(467):     def div(self):
0.41 monomials.py(483):     def lcm(self):
0.41 monomials.py(497):     def gcd(self):
0.41 monomials.py(511): @public
0.41 monomials.py(512): class Monomial(PicklableWithSlots):
0.41 monomials.py(511): @public
0.41 monomials.py(513):     """Class representing a monomial, i.e. a product of powers. """
0.41 monomials.py(515):     __slots__ = ('exponents', 'gens')
0.41 monomials.py(517):     def __init__(self, monom, gens=None):
0.41 monomials.py(528):     def rebuild(self, exponents, gens=None):
0.41 monomials.py(531):     def __len__(self):
0.41 monomials.py(534):     def __iter__(self):
0.41 monomials.py(537):     def __getitem__(self, item):
0.41 monomials.py(540):     def __hash__(self):
0.41 monomials.py(543):     def __str__(self):
0.41 monomials.py(549):     def as_expr(self, *gens):
0.41 monomials.py(559):     def __eq__(self, other):
0.41 monomials.py(569):     def __ne__(self, other):
0.41 monomials.py(572):     def __mul__(self, other):
0.41 monomials.py(582):     def __truediv__(self, other):
0.41 monomials.py(597):     __floordiv__ = __truediv__
0.41 monomials.py(599):     def __pow__(self, other):
0.41 monomials.py(614):     def gcd(self, other):
0.41 monomials.py(626):     def lcm(self, other):
+ cat coverage.cover
{"/testbed/sympy/polys/monomials.py": {"4": 1, "5": 1, "7": 1, "8": 1, "9": 1, "10": 1, "11": 1, "12": 1, "14": 1, "15": 1, "154": 1, "187": 1, "206": 1, "235": 1, "259": 1, "263": 1, "282": 1, "301": 1, "316": 1, "341": 1, "366": 1, "381": 1, "399": 2, "511": 2, "512": 1, "88": 1, "89": 1, "90": 0, "91": 0, "92": 0, "93": 0, "94": 0, "95": 0, "97": 0, "98": 0, "99": 0, "100": 0, "101": 0, "103": 1, "104": 1, "105": 0, "106": 1, "107": 0, "109": 1, "110": 0, "111": 1, "112": 1, "113": 1, "114": 1, "115": 0, "116": 1, "117": 0, "118": 0, "120": 1, "121": 6, "122": 1, "123": 21, "124": 20, "125": 100, "126": 80, "127": 80, "128": 60, "129": 45, "130": 20, "131": 3, "132": 1, "134": 0, "135": 0, "136": 0, "137": 0, "138": 0, "139": 0, "140": 0, "141": 0, "142": 0, "143": 0, "144": 0, "146": 0, "147": 0, "148": 0, "149": 0, "150": 0, "151": 0, "152": 0, "184": 0, "185": 0, "204": 0, "228": 0, "230": 0, "231": 0, "233": 0, "257": 0, "261": 0, "280": 0, "299": 0, "314": 0, "333": 0, "335": 0, "336": 0, "337": 0, "339": 0, "358": 0, "360": 0, "361": 0, "362": 0, "364": 0, "379": 0, "383": 0, "384": 0, "386": 0, "388": 0, "389": 0, "390": 0, "392": 0, "394": 0, "395": 0, "397": 0, "402": 1, "405": 1, "410": 1, "413": 1, "427": 1, "439": 1, "453": 1, "467": 1, "483": 1, "497": 1, "403": 0, "406": 0, "407": 0, "408": 0, "411": 0, "414": 0, "415": 0, "421": 0, "422": 0, "423": 0, "424": 0, "425": 0, "428": 0, "429": 0, "434": 0, "435": 0, "436": 0, "437": 0, "440": 0, "441": 0, "447": 0, "448": 0, "449": 0, "450": 0, "451": 0, "454": 0, "455": 0, "461": 0, "462": 0, "463": 0, "464": 0, "465": 0, "468": 0, "469": 0, "476": 0, "477": 0, "478": 0, "479": 0, "480": 0, "481": 0, "484": 0, "485": 0, "491": 0, "492": 0, "493": 0, "494": 0, "495": 0, "498": 0, "499": 0, "505": 0, "506": 0, "507": 0, "508": 0, "509": 0, "515": 1, "517": 1, "528": 1, "531": 1, "534": 1, "537": 1, "540": 1, "543": 1, "549": 1, "559": 1, "569": 1, "572": 1, "582": 1, "597": 1, "599": 1, "614": 1, "626": 1, "518": 0, "519": 0, "520": 0, "521": 0, "523": 0, "525": 0, "526": 0, "529": 0, "532": 0, "535": 0, "538": 0, "541": 0, "544": 0, "545": 0, "547": 0, "551": 0, "553": 0, "554": 0, "555": 0, "557": 0, "560": 0, "561": 0, "562": 0, "563": 0, "565": 0, "567": 0, "570": 0, "573": 0, "574": 0, "575": 0, "576": 0, "578": 0, "580": 0, "583": 0, "584": 0, "585": 0, "586": 0, "588": 0, "590": 0, "592": 0, "593": 0, "595": 0, "600": 0, "602": 0, "603": 0, "604": 0, "605": 0, "607": 0, "608": 0, "610": 0, "612": 0, "616": 0, "617": 0, "618": 0, "619": 0, "621": 0, "622": 0, "624": 0, "628": 0, "629": 0, "630": 0, "631": 0, "633": 0, "634": 0, "636": 0}}
{"/testbed/sympy/polys/monomials.py": {"4": 1, "5": 1, "7": 1, "8": 1, "9": 1, "10": 1, "11": 1, "12": 1, "14": 1, "15": 1, "154": 1, "187": 1, "206": 1, "235": 1, "259": 1, "263": 1, "282": 1, "301": 1, "316": 1, "341": 1, "366": 1, "381": 1, "399": 2, "511": 2, "512": 1, "88": 0, "89": 0, "90": 0, "91": 0, "92": 0, "93": 0, "94": 0, "95": 0, "97": 0, "98": 0, "99": 0, "100": 0, "101": 0, "103": 0, "104": 0, "105": 0, "106": 0, "107": 0, "109": 0, "110": 0, "111": 0, "112": 0, "113": 0, "114": 0, "115": 0, "116": 0, "117": 0, "118": 0, "120": 0, "121": 0, "122": 0, "123": 0, "124": 0, "125": 0, "126": 0, "127": 0, "128": 0, "129": 0, "130": 0, "131": 0, "132": 0, "134": 0, "135": 0, "136": 0, "137": 0, "138": 0, "139": 0, "140": 0, "141": 0, "142": 0, "143": 0, "144": 0, "146": 0, "147": 0, "148": 0, "149": 0, "150": 0, "151": 0, "152": 0, "184": 0, "185": 0, "204": 0, "228": 0, "230": 0, "231": 0, "233": 0, "257": 0, "261": 0, "280": 0, "299": 0, "314": 0, "333": 0, "335": 0, "336": 0, "337": 0, "339": 0, "358": 0, "360": 0, "361": 0, "362": 0, "364": 0, "379": 0, "383": 0, "384": 0, "386": 0, "388": 0, "389": 0, "390": 0, "392": 0, "394": 0, "395": 0, "397": 0, "402": 1, "405": 1, "410": 1, "413": 1, "427": 1, "439": 1, "453": 1, "467": 1, "483": 1, "497": 1, "403": 0, "406": 0, "407": 0, "408": 0, "411": 0, "414": 0, "415": 0, "421": 0, "422": 0, "423": 0, "424": 0, "425": 0, "428": 0, "429": 0, "434": 0, "435": 0, "436": 0, "437": 0, "440": 0, "441": 0, "447": 0, "448": 0, "449": 0, "450": 0, "451": 0, "454": 0, "455": 0, "461": 0, "462": 0, "463": 0, "464": 0, "465": 0, "468": 0, "469": 0, "476": 0, "477": 0, "478": 0, "479": 0, "480": 0, "481": 0, "484": 0, "485": 0, "491": 0, "492": 0, "493": 0, "494": 0, "495": 0, "498": 0, "499": 0, "505": 0, "506": 0, "507": 0, "508": 0, "509": 0, "515": 1, "517": 1, "528": 1, "531": 1, "534": 1, "537": 1, "540": 1, "543": 1, "549": 1, "559": 1, "569": 1, "572": 1, "582": 1, "597": 1, "599": 1, "614": 1, "626": 1, "518": 0, "519": 0, "520": 0, "521": 0, "523": 0, "525": 0, "526": 0, "529": 0, "532": 0, "535": 0, "538": 0, "541": 0, "544": 0, "545": 0, "547": 0, "551": 0, "553": 0, "554": 0, "555": 0, "557": 0, "560": 0, "561": 0, "562": 0, "563": 0, "565": 0, "567": 0, "570": 0, "573": 0, "574": 0, "575": 0, "576": 0, "578": 0, "580": 0, "583": 0, "584": 0, "585": 0, "586": 0, "588": 0, "590": 0, "592": 0, "593": 0, "595": 0, "600": 0, "602": 0, "603": 0, "604": 0, "605": 0, "607": 0, "608": 0, "610": 0, "612": 0, "616": 0, "617": 0, "618": 0, "619": 0, "621": 0, "622": 0, "624": 0, "628": 0, "629": 0, "630": 0, "631": 0, "633": 0, "634": 0, "636": 0}}
+ git checkout d9b18c518d64d0ebe8e35a98c2fb519938b9b151
Note: switching to 'd9b18c518d64d0ebe8e35a98c2fb519938b9b151'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at d9b18c518d Merge pull request #21769 from redeboer/CG._latex
+ git apply /root/pre_state.patch
error: unrecognized input
