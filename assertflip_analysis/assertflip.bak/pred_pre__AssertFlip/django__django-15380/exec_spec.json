{"instance_id": "django__django-15380", "repo": "django/django", "version": "4.1", "environment_setup_commit": "647480166bfe7532e8c471fef0146e3a17e6c0c9", "patch_list": ["diff --git a/dev/null b/tests/test_coverup_django__django-15380.py\nnew file mode 100644\nindex e69de29..7f696cc 100644\n--- /dev/null\n+++ b/tests/test_coverup_django__django-15380.py\n@@ -0,0 +1,51 @@\n+from django.test import SimpleTestCase\n+from django.db import models\n+from django.db.migrations.state import ProjectState, ModelState\n+from django.db.migrations.autodetector import MigrationAutodetector\n+from django.db.migrations.questioner import NonInteractiveMigrationQuestioner\n+\n+class MigrationAutodetectorTest(SimpleTestCase):\n+    def test_rename_model_and_field_triggers_keyerror(self):\n+        \"\"\"\n+        Test that renaming a model and a field in a single migration step\n+        does not trigger a KeyError in the migration autodetector.\n+        \"\"\"\n+        # Initial state with MyModel and a field my_field\n+        initial_state = ProjectState()\n+        initial_state.add_model(ModelState(\n+            app_label='test_one',\n+            name='MyModel',\n+            fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('my_field', models.CharField(max_length=100)),\n+            ]\n+        ))\n+\n+        # Target state with MyModel2 and a field my_field2\n+        target_state = ProjectState()\n+        target_state.add_model(ModelState(\n+            app_label='test_one',\n+            name='MyModel2',\n+            fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('my_field2', models.CharField(max_length=100)),\n+            ]\n+        ))\n+\n+        # Initialize the autodetector\n+        autodetector = MigrationAutodetector(\n+            from_state=initial_state,\n+            to_state=target_state,\n+            questioner=NonInteractiveMigrationQuestioner()\n+        )\n+\n+        # Simulate the renaming of a model and a field\n+        autodetector.renamed_models = {('test_one', 'mymodel'): 'MyModel2'}\n+        autodetector.new_field_keys = {('test_one', 'MyModel2', 'my_field2')}\n+        autodetector.old_field_keys = {('test_one', 'MyModel', 'my_field')}\n+\n+        # Run the autodetector to ensure no KeyError is raised\n+        try:\n+            autodetector.generate_renamed_fields()\n+        except KeyError:\n+            self.fail(\"KeyError was raised when renaming a model and a field, which indicates a bug.\")\n"], "arch": "x86_64", "base_commit": "71e7c8e73712419626f1c2b6ec036e8559a2d667", "test_directives": ["test_coverup_django__django-15380"], "coverage_files": ["django/db/migrations/autodetector.py"], "env_name": "testbed", "run_id": "assertflip", "patch_id": "pred_pre__AssertFlip", "timeout": 1800, "rm_image": false, "force_rebuild": false, "exec_mode": "unit_test", "reproduction_script_name": null, "compute_coverage": true, "install": {"python": "3.9", "packages": "requirements.txt", "install": "python -m pip install -e ."}, "cache_level": "instance", "test_command": "python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/db/migrations/autodetector\\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-15380", "req_install_commands": ["conda create -n testbed python=3.9 -y", "cat <<'EOF_59812759871' > $HOME/requirements.txt\naiosmtpd\nasgiref >= 3.4.1\nargon2-cffi >= 16.1.0\nbackports.zoneinfo; python_version < '3.9'\nbcrypt\nblack\ndocutils\ngeoip2\njinja2 >= 2.9.2\nnumpy\nPillow >= 6.2.0\npylibmc; sys.platform != 'win32'\npymemcache >= 3.4.0\npytz\npywatchman; sys.platform != 'win32'\nPyYAML\nredis >= 3.0.0\nselenium\nsqlparse >= 0.2.2\ntblib >= 1.5.0\ntzdata\ncolorama; sys.platform == 'win32'\n\nEOF_59812759871", "conda activate testbed && python -m pip install -r $HOME/requirements.txt", "rm $HOME/requirements.txt"]}