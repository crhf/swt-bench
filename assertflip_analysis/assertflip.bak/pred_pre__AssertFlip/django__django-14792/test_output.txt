+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD d89f976bddb49fb168334960acc8979c3de991fa
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
nothing to commit, working tree clean
+ git show
commit d89f976bddb49fb168334960acc8979c3de991fa
Author: Eugene Morozov <jmv@emorozov.net>
Date:   Tue Aug 24 23:29:55 2021 +0300

    Fixed #33054 -- Made TestCase.captureOnCommitCallbacks() capture callbacks recursively.

diff --git a/django/test/testcases.py b/django/test/testcases.py
index b947d70a45..41d01b89b4 100644
--- a/django/test/testcases.py
+++ b/django/test/testcases.py
@@ -1282,11 +1282,18 @@ class TestCase(TransactionTestCase):
         try:
             yield callbacks
         finally:
-            run_on_commit = connections[using].run_on_commit[start_count:]
-            callbacks[:] = [func for sids, func in run_on_commit]
-            if execute:
-                for callback in callbacks:
-                    callback()
+            callback_count = len(connections[using].run_on_commit)
+            while True:
+                run_on_commit = connections[using].run_on_commit[start_count:]
+                callbacks[:] = [func for sids, func in run_on_commit]
+                if execute:
+                    for callback in callbacks:
+                        callback()
+
+                if callback_count == len(connections[using].run_on_commit):
+                    break
+                start_count = callback_count - 1
+                callback_count = len(connections[using].run_on_commit)
 
 
 class CheckCondition:
diff --git a/docs/releases/4.0.txt b/docs/releases/4.0.txt
index 45743c4139..53b738c8ec 100644
--- a/docs/releases/4.0.txt
+++ b/docs/releases/4.0.txt
@@ -368,6 +368,9 @@ Tests
 * The :option:`test --parallel` option now supports the value ``auto`` to run
   one test process for each processor core.
 
+* :meth:`.TestCase.captureOnCommitCallbacks` now captures new callbacks added
+  while executing :func:`.transaction.on_commit` callbacks.
+
 URLs
 ~~~~
 
diff --git a/docs/topics/testing/tools.txt b/docs/topics/testing/tools.txt
index 8e4f077fad..846d428980 100644
--- a/docs/topics/testing/tools.txt
+++ b/docs/topics/testing/tools.txt
@@ -912,6 +912,11 @@ It also provides an additional method:
                 self.assertEqual(mail.outbox[0].subject, 'Contact Form')
                 self.assertEqual(mail.outbox[0].body, 'I like your site')
 
+    .. versionchanged:: 4.0
+
+        In older versions, new callbacks added while executing
+        :func:`.transaction.on_commit` callbacks were not captured.
+
 .. _live-test-server:
 
 ``LiveServerTestCase``
diff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py
index 44301aaa1b..82ec36ab38 100644
--- a/tests/test_utils/tests.py
+++ b/tests/test_utils/tests.py
@@ -1502,6 +1502,13 @@ class CaptureOnCommitCallbacksTests(TestCase):
 
         self.assertEqual(callbacks, [])
 
+    def test_execute_recursive(self):
+        with self.captureOnCommitCallbacks(execute=True) as callbacks:
+            transaction.on_commit(self.enqueue_callback)
+
+        self.assertEqual(len(callbacks), 2)
+        self.assertIs(self.callback_called, True)
+
 
 class DisallowedDatabaseQueriesTests(SimpleTestCase):
     def test_disallowed_database_connections(self):
+ git diff d89f976bddb49fb168334960acc8979c3de991fa
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Checking if build backend supports build_editable: started
  Checking if build backend supports build_editable: finished with status 'done'
  Getting requirements to build editable: started
  Getting requirements to build editable: finished with status 'done'
  Preparing editable metadata (pyproject.toml): started
  Preparing editable metadata (pyproject.toml): finished with status 'done'
Requirement already satisfied: asgiref>=3.3.2 in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from Django==4.0.dev20210830050622) (3.8.1)
Requirement already satisfied: pytz in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from Django==4.0.dev20210830050622) (2025.2)
Requirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from Django==4.0.dev20210830050622) (0.5.3)
Requirement already satisfied: typing-extensions>=4 in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from asgiref>=3.3.2->Django==4.0.dev20210830050622) (4.13.2)
Building wheels for collected packages: Django
  Building editable for Django (pyproject.toml): started
  Building editable for Django (pyproject.toml): finished with status 'done'
  Created wheel for Django: filename=django-4.0.dev20210830050622-0.editable-py3-none-any.whl size=26631 sha256=39a6a733165d451ca8a351a9f578e6d61a8caca1d0b4f4ef042b0d89871b4bfb
  Stored in directory: /tmp/pip-ephem-wheel-cache-91ck9_s_/wheels/b2/50/f1/218f2e9962a80d01a4b1297698978f9fb3b60056aa24343f24
Successfully built Django
Installing collected packages: Django
  Attempting uninstall: Django
    Found existing installation: Django 4.0.dev20210830050622
    Uninstalling Django-4.0.dev20210830050622:
      Successfully uninstalled Django-4.0.dev20210830050622
Successfully installed Django-4.0.dev20210830050622
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable.It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git apply -v -
Checking patch tests/test_coverup_django__django-14792.py...
Applied patch tests/test_coverup_django__django-14792.py cleanly.
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/utils/timezone\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-14792
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(django/utils/timezone\\.py)']
0.15 timezone.py(1): """
0.15 timezone.py(5): import functools
0.15 timezone.py(6): from contextlib import ContextDecorator
0.15 timezone.py(7): from datetime import datetime, timedelta, timezone, tzinfo
0.15 timezone.py(9): import pytz
0.15 timezone.py(10): from asgiref.local import Local
0.15 timezone.py(12): from django.conf import settings
0.15 timezone.py(15):     'utc', 'get_fixed_timezone',
0.15 timezone.py(16):     'get_default_timezone', 'get_default_timezone_name',
0.15 timezone.py(17):     'get_current_timezone', 'get_current_timezone_name',
0.15 timezone.py(18):     'activate', 'deactivate', 'override',
0.15 timezone.py(19):     'localtime', 'now',
0.15 timezone.py(20):     'is_aware', 'is_naive', 'make_aware', 'make_naive',
0.15 timezone.py(14): __all__ = [
0.15 timezone.py(25): utc = pytz.utc
0.15 timezone.py(27): _PYTZ_BASE_CLASSES = (pytz.tzinfo.BaseTzInfo, pytz._FixedOffset)
0.15 timezone.py(29): if not isinstance(pytz.UTC, pytz._FixedOffset):
0.15 timezone.py(30):     _PYTZ_BASE_CLASSES = _PYTZ_BASE_CLASSES + (type(pytz.UTC),)
0.15 timezone.py(33): def get_fixed_timezone(offset):
0.15 timezone.py(45): @functools.lru_cache()
0.15 timezone.py(46): def get_default_timezone():
0.15 timezone.py(56): def get_default_timezone_name():
0.15 timezone.py(61): _active = Local()
0.15 timezone.py(64): def get_current_timezone():
0.15 timezone.py(69): def get_current_timezone_name():
0.15 timezone.py(74): def _get_timezone_name(timezone):
0.15 timezone.py(84): def activate(timezone):
0.15 timezone.py(99): def deactivate():
0.15 timezone.py(109): class override(ContextDecorator):
0.15 timezone.py(109): class override(ContextDecorator):
0.15 timezone.py(110):     """
0.15 timezone.py(121):     def __init__(self, timezone):
0.15 timezone.py(124):     def __enter__(self):
0.15 timezone.py(131):     def __exit__(self, exc_type, exc_value, traceback):
0.15 timezone.py(140): def template_localtime(value, use_tz=None):
0.15 timezone.py(160): def localtime(value=None, timezone=None):
0.15 timezone.py(180): def localdate(value=None, timezone=None):
0.15 timezone.py(193): def now():
0.15 timezone.py(203): def is_aware(value):
0.15 timezone.py(216): def is_naive(value):
0.15 timezone.py(229): def make_aware(value, timezone=None, is_dst=None):
0.15 timezone.py(245): def make_naive(value, timezone=None):
0.15 timezone.py(255): def _is_pytz_zone(tz):
0.15 timezone.py(260): def _datetime_ambiguous_or_imaginary(dt, tz):
Testing against Django installed in '/testbed/django'
Found 1 test(s).
Skipping setup of unused database(s): other.
Operations to perform:
  Synchronize unmigrated apps: auth, contenttypes, messages, sessions, staticfiles
  Apply all migrations: admin, sites
Synchronizing apps without migrations:
  Creating tables...
    Creating table django_content_type
    Creating table auth_permission
    Creating table auth_group
    Creating table auth_user
    Creating table django_session
    Running deferred SQL...
Running migrations:
  Applying admin.0001_initial...0.57 timezone.py(197):     return datetime.now(tz=utc if settings.USE_TZ else None)
0.57 timezone.py(213):     return value.utcoffset() is not None
 OK
  Applying admin.0002_logentry_remove_auto_add...0.58 timezone.py(197):     return datetime.now(tz=utc if settings.USE_TZ else None)
0.58 timezone.py(213):     return value.utcoffset() is not None
 OK
  Applying admin.0003_logentry_add_action_flag_choices...0.58 timezone.py(197):     return datetime.now(tz=utc if settings.USE_TZ else None)
0.58 timezone.py(213):     return value.utcoffset() is not None
 OK
  Applying sites.0001_initial...0.59 timezone.py(197):     return datetime.now(tz=utc if settings.USE_TZ else None)
0.59 timezone.py(213):     return value.utcoffset() is not None
 OK
  Applying sites.0002_alter_domain_unique...Creating test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
0.59 timezone.py(197):     return datetime.now(tz=utc if settings.USE_TZ else None)
0.59 timezone.py(213):     return value.utcoffset() is not None
 OK
0.66 timezone.py(197):     return datetime.now(tz=utc if settings.USE_TZ else None)
0.66 timezone.py(197):     return datetime.now(tz=utc if settings.USE_TZ else None)
System check identified no issues (0 silenced).
test_trunc_timezone_conversion (test_coverup_django__django-14792.TruncTimezoneTest)
Test that Trunc with 'Etc/GMT-10' timezone correctly converts to '-10' in the SQL query. ... FAIL

======================================================================
FAIL: test_trunc_timezone_conversion (test_coverup_django__django-14792.TruncTimezoneTest)
Test that Trunc with 'Etc/GMT-10' timezone correctly converts to '-10' in the SQL query.
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/./tests/test_coverup_django__django-14792.py", line 38, in test_trunc_timezone_conversion
    self.assertIn("AT TIME ZONE '-10'", sql)
AssertionError: "AT TIME ZONE '-10'" not found in 'SELECT "tests_mymodel"."id", "tests_mymodel"."start_at", django_datetime_trunc(\'day\', "tests_mymodel"."start_at", NULL, NULL) AS "truncated_date" FROM "tests_mymodel"'

----------------------------------------------------------------------
Ran 1 test in 0.024s

FAILED (failures=1)
Destroying test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
0.66 timezone.py(197):     return datetime.now(tz=utc if settings.USE_TZ else None)
0.66 timezone.py(213):     return value.utcoffset() is not None
0.66 timezone.py(66):     return getattr(_active, "value", get_default_timezone())
0.66 timezone.py(52):     return pytz.timezone(settings.TIME_ZONE)
+ cat coverage.cover
{"/testbed/django/utils/timezone.py": {"5": 1, "6": 1, "7": 1, "9": 1, "10": 1, "12": 1, "15": 1, "16": 1, "17": 1, "18": 1, "19": 1, "20": 1, "14": 1, "25": 1, "27": 1, "29": 1, "30": 1, "33": 1, "45": 1, "46": 1, "56": 1, "61": 1, "64": 1, "69": 1, "74": 1, "84": 1, "99": 1, "109": 2, "140": 1, "160": 1, "180": 1, "193": 1, "203": 1, "216": 1, "229": 1, "245": 1, "255": 1, "260": 1, "35": 0, "36": 0, "37": 0, "38": 0, "39": 0, "40": 0, "52": 1, "58": 0, "66": 1, "71": 0, "76": 0, "91": 0, "92": 0, "93": 0, "94": 0, "96": 0, "105": 0, "106": 0, "121": 1, "124": 1, "131": 1, "122": 0, "125": 0, "126": 0, "127": 0, "129": 0, "132": 0, "133": 0, "135": 0, "150": 0, "151": 0, "152": 0, "153": 0, "149": 0, "155": 0, "170": 0, "171": 0, "172": 0, "173": 0, "175": 0, "176": 0, "177": 0, "190": 0, "197": 8, "213": 6, "226": 0, "231": 0, "232": 0, "233": 0, "235": 0, "238": 0, "239": 0, "240": 0, "242": 0, "247": 0, "248": 0, "250": 0, "251": 0, "252": 0, "257": 0, "261": 0, "262": 0, "263": 0, "264": 0, "265": 0, "267": 0, "269": 0}}
+ git checkout d89f976bddb49fb168334960acc8979c3de991fa
Note: switching to 'd89f976bddb49fb168334960acc8979c3de991fa'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at d89f976bdd Fixed #33054 -- Made TestCase.captureOnCommitCallbacks() capture callbacks recursively.
+ git apply /root/pre_state.patch
error: unrecognized input
