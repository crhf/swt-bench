+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD 278881e37619278789942513916acafaa88d26f3
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
nothing to commit, working tree clean
+ git show
commit 278881e37619278789942513916acafaa88d26f3
Author: Simon Charette <charette.s@gmail.com>
Date:   Fri Feb 17 20:38:08 2023 -0500

    Fixed #34346 -- Ordered selected expressions by position.
    
    Used the same approach as for #34176 by using selected expressions
    position to prevent ambiguous aliases in collisions.
    
    Thanks henribru for the report.
    
    Regression in 04518e310d4552ff7595a34f5a7f93487d78a406.

diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py
index db123a2516..919e951fa2 100644
--- a/django/db/models/sql/compiler.py
+++ b/django/db/models/sql/compiler.py
@@ -27,6 +27,15 @@ from django.utils.hashable import make_hashable
 from django.utils.regex_helper import _lazy_re_compile
 
 
+class PositionRef(Ref):
+    def __init__(self, ordinal, refs, source):
+        self.ordinal = ordinal
+        super().__init__(refs, source)
+
+    def as_sql(self, compiler, connection):
+        return str(self.ordinal), ()
+
+
 class SQLCompiler:
     # Multiline ordering SQL clause may appear from RawSQL.
     ordering_parts = _lazy_re_compile(
@@ -321,6 +330,14 @@ class SQLCompiler:
         else:
             default_order, _ = ORDER_DIR["DESC"]
 
+        selected_exprs = {}
+        if select := self.select:
+            for ordinal, (expr, _, alias) in enumerate(select, start=1):
+                pos_expr = PositionRef(ordinal, alias, expr)
+                if alias:
+                    selected_exprs[alias] = pos_expr
+                selected_exprs[expr] = pos_expr
+
         for field in ordering:
             if hasattr(field, "resolve_expression"):
                 if isinstance(field, Value):
@@ -331,13 +348,23 @@ class SQLCompiler:
                 if not self.query.standard_ordering:
                     field = field.copy()
                     field.reverse_ordering()
-                if isinstance(field.expression, F) and (
-                    annotation := self.query.annotation_select.get(
-                        field.expression.name
-                    )
+                select_ref = selected_exprs.get(field.expression)
+                if select_ref or (
+                    isinstance(field.expression, F)
+                    and (select_ref := selected_exprs.get(field.expression.name))
                 ):
-                    field.expression = Ref(field.expression.name, annotation)
-                yield field, isinstance(field.expression, Ref)
+                    # Emulation of NULLS (FIRST|LAST) cannot be combined with
+                    # the usage of ordering by position.
+                    if (
+                        field.nulls_first is None and field.nulls_last is None
+                    ) or self.connection.features.supports_order_by_nulls_modifier:
+                        field.expression = select_ref
+                    # Alias collisions are not possible when dealing with
+                    # combined queries so fallback to it if emulation of NULLS
+                    # handling is required.
+                    elif self.query.combinator:
+                        field.expression = Ref(select_ref.refs, select_ref.source)
+                yield field, select_ref is not None
                 continue
             if field == "?":  # random
                 yield OrderBy(Random()), False
@@ -346,11 +373,11 @@ class SQLCompiler:
             col, order = get_order_dir(field, default_order)
             descending = order == "DESC"
 
-            if col in self.query.annotation_select:
+            if select_ref := selected_exprs.get(col):
                 # Reference to expression in SELECT clause
                 yield (
                     OrderBy(
-                        Ref(col, self.query.annotation_select[col]),
+                        select_ref,
                         descending=descending,
                     ),
                     True,
diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py
index 79e1714ab6..7ff38acc4a 100644
--- a/tests/ordering/tests.py
+++ b/tests/ordering/tests.py
@@ -8,6 +8,7 @@ from django.db.models import (
     DateTimeField,
     F,
     Max,
+    OrderBy,
     OuterRef,
     Subquery,
     Value,
@@ -619,3 +620,21 @@ class OrderingTests(TestCase):
             ),
             Author.objects.order_by(Length(Upper("name"))),
         )
+
+    def test_ordering_select_related_collision(self):
+        self.assertEqual(
+            Article.objects.select_related("author")
+            .annotate(name=Upper("author__name"))
+            .filter(pk=self.a1.pk)
+            .order_by(OrderBy(F("name")))
+            .first(),
+            self.a1,
+        )
+        self.assertEqual(
+            Article.objects.select_related("author")
+            .annotate(name=Upper("author__name"))
+            .filter(pk=self.a1.pk)
+            .order_by("name")
+            .first(),
+            self.a1,
+        )
diff --git a/tests/postgres_tests/test_array.py b/tests/postgres_tests/test_array.py
index f58c9477fc..f7615c974e 100644
--- a/tests/postgres_tests/test_array.py
+++ b/tests/postgres_tests/test_array.py
@@ -465,10 +465,9 @@ class TestQuerying(PostgreSQLTestCase):
                     {"field__0": 20, "arrayagg": [self.objs[3].pk]},
                 ],
             )
-        alias = connection.ops.quote_name("field__0")
         sql = ctx[0]["sql"]
         self.assertIn("GROUP BY 1", sql)
-        self.assertIn(f"ORDER BY {alias}", sql)
+        self.assertIn("ORDER BY 1", sql)
 
     def test_index(self):
         self.assertSequenceEqual(
+ git diff 278881e37619278789942513916acafaa88d26f3
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Checking if build backend supports build_editable: started
  Checking if build backend supports build_editable: finished with status 'done'
  Getting requirements to build editable: started
  Getting requirements to build editable: finished with status 'done'
  Preparing editable metadata (pyproject.toml): started
  Preparing editable metadata (pyproject.toml): finished with status 'done'
Requirement already satisfied: asgiref>=3.6.0 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from Django==5.0.dev20230220045425) (3.9.1)
Requirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from Django==5.0.dev20230220045425) (0.5.3)
Building wheels for collected packages: Django
  Building editable for Django (pyproject.toml): started
  Building editable for Django (pyproject.toml): finished with status 'done'
  Created wheel for Django: filename=django-5.0.dev20230220045425-0.editable-py3-none-any.whl size=27429 sha256=ad1ecd5c9882b18d9b897c539d28d94236a1a4d6d317911cba9256a4f4f4c4bc
  Stored in directory: /tmp/pip-ephem-wheel-cache-7f2vzuxp/wheels/49/5f/4f/01b7d31ea6ddac9643da788242d33e5fd3467d95d17b032c6b
Successfully built Django
Installing collected packages: Django
  Attempting uninstall: Django
    Found existing installation: Django 5.0.dev20230220045425
    Uninstalling Django-5.0.dev20230220045425:
      Successfully uninstalled Django-5.0.dev20230220045425
Successfully installed Django-5.0.dev20230220045425
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git apply -v -
Checking patch tests/test_coverup_django__django-16569.py...
Applied patch tests/test_coverup_django__django-16569.py cleanly.
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/forms/formsets\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-16569
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(django/forms/formsets\\.py)']
0.18 formsets.py(1): from django.core.exceptions import ValidationError
0.18 formsets.py(2): from django.forms import Form
0.18 formsets.py(3): from django.forms.fields import BooleanField, IntegerField
0.18 formsets.py(4): from django.forms.renderers import get_default_renderer
0.18 formsets.py(5): from django.forms.utils import ErrorList, RenderableFormMixin
0.18 formsets.py(6): from django.forms.widgets import CheckboxInput, HiddenInput, NumberInput
0.18 formsets.py(7): from django.utils.functional import cached_property
0.18 formsets.py(8): from django.utils.translation import gettext_lazy as _
0.18 formsets.py(9): from django.utils.translation import ngettext_lazy
0.18 formsets.py(11): __all__ = ("BaseFormSet", "formset_factory", "all_valid")
0.18 formsets.py(14): TOTAL_FORM_COUNT = "TOTAL_FORMS"
0.18 formsets.py(15): INITIAL_FORM_COUNT = "INITIAL_FORMS"
0.18 formsets.py(16): MIN_NUM_FORM_COUNT = "MIN_NUM_FORMS"
0.18 formsets.py(17): MAX_NUM_FORM_COUNT = "MAX_NUM_FORMS"
0.18 formsets.py(18): ORDERING_FIELD_NAME = "ORDER"
0.18 formsets.py(19): DELETION_FIELD_NAME = "DELETE"
0.18 formsets.py(22): DEFAULT_MIN_NUM = 0
0.18 formsets.py(25): DEFAULT_MAX_NUM = 1000
0.18 formsets.py(28): class ManagementForm(Form):
0.18 formsets.py(28): class ManagementForm(Form):
0.18 formsets.py(29):     """
0.18 formsets.py(35):     TOTAL_FORMS = IntegerField(widget=HiddenInput)
0.18 formsets.py(36):     INITIAL_FORMS = IntegerField(widget=HiddenInput)
0.18 formsets.py(40):     MIN_NUM_FORMS = IntegerField(required=False, widget=HiddenInput)
0.18 formsets.py(41):     MAX_NUM_FORMS = IntegerField(required=False, widget=HiddenInput)
0.18 formsets.py(43):     def clean(self):
0.18 formsets.py(52): class BaseFormSet(RenderableFormMixin):
0.18 formsets.py(52): class BaseFormSet(RenderableFormMixin):
0.18 formsets.py(53):     """
0.18 formsets.py(57):     deletion_widget = CheckboxInput
0.18 formsets.py(58):     ordering_widget = NumberInput
0.18 formsets.py(60):         "missing_management_form": _(
0.18 formsets.py(61):             "ManagementForm data is missing or has been tampered with. Missing fields: "
0.18 formsets.py(60):         "missing_management_form": _(
0.18 formsets.py(64):         "too_many_forms": ngettext_lazy(
0.18 formsets.py(65):             "Please submit at most %(num)d form.",
0.18 formsets.py(66):             "Please submit at most %(num)d forms.",
0.18 formsets.py(67):             "num",
0.18 formsets.py(64):         "too_many_forms": ngettext_lazy(
0.18 formsets.py(69):         "too_few_forms": ngettext_lazy(
0.18 formsets.py(70):             "Please submit at least %(num)d form.",
0.18 formsets.py(71):             "Please submit at least %(num)d forms.",
0.18 formsets.py(72):             "num",
0.18 formsets.py(69):         "too_few_forms": ngettext_lazy(
0.18 formsets.py(59):     default_error_messages = {
0.18 formsets.py(76):     template_name_div = "django/forms/formsets/div.html"
0.18 formsets.py(77):     template_name_p = "django/forms/formsets/p.html"
0.18 formsets.py(78):     template_name_table = "django/forms/formsets/table.html"
0.18 formsets.py(79):     template_name_ul = "django/forms/formsets/ul.html"
0.18 formsets.py(83):         data=None,
0.18 formsets.py(84):         files=None,
0.18 formsets.py(85):         auto_id="id_%s",
0.18 formsets.py(86):         prefix=None,
0.18 formsets.py(87):         initial=None,
0.18 formsets.py(88):         error_class=ErrorList,
0.18 formsets.py(89):         form_kwargs=None,
0.18 formsets.py(90):         error_messages=None,
0.18 formsets.py(81):     def __init__(
0.18 formsets.py(110):     def __iter__(self):
0.18 formsets.py(114):     def __getitem__(self, index):
0.18 formsets.py(118):     def __len__(self):
0.18 formsets.py(121):     def __bool__(self):
0.18 formsets.py(128):     def __repr__(self):
0.18 formsets.py(144):     @cached_property
0.18 formsets.py(145):     def management_form(self):
0.18 formsets.py(144):     @cached_property
0.18 formsets.py(145):     def management_form(self):
0.18 formsets.py(169):     def total_form_count(self):
0.18 formsets.py(190):     def initial_form_count(self):
0.18 formsets.py(199):     @cached_property
0.18 formsets.py(200):     def forms(self):
0.18 formsets.py(199):     @cached_property
0.18 formsets.py(200):     def forms(self):
0.18 formsets.py(208):     def get_form_kwargs(self, index):
0.18 formsets.py(217):     def _construct_form(self, i, **kwargs):
0.18 formsets.py(246):     @property
0.18 formsets.py(247):     def initial_forms(self):
0.18 formsets.py(246):     @property
0.18 formsets.py(247):     def initial_forms(self):
0.18 formsets.py(251):     @property
0.18 formsets.py(252):     def extra_forms(self):
0.18 formsets.py(251):     @property
0.18 formsets.py(252):     def extra_forms(self):
0.18 formsets.py(256):     @property
0.18 formsets.py(257):     def empty_form(self):
0.18 formsets.py(256):     @property
0.18 formsets.py(257):     def empty_form(self):
0.18 formsets.py(270):     @property
0.18 formsets.py(271):     def cleaned_data(self):
0.18 formsets.py(270):     @property
0.18 formsets.py(271):     def cleaned_data(self):
0.18 formsets.py(281):     @property
0.18 formsets.py(282):     def deleted_forms(self):
0.18 formsets.py(281):     @property
0.18 formsets.py(282):     def deleted_forms(self):
0.18 formsets.py(298):     @property
0.18 formsets.py(299):     def ordered_forms(self):
0.18 formsets.py(298):     @property
0.18 formsets.py(299):     def ordered_forms(self):
0.18 formsets.py(338):     @classmethod
0.18 formsets.py(339):     def get_default_prefix(cls):
0.18 formsets.py(338):     @classmethod
0.18 formsets.py(339):     def get_default_prefix(cls):
0.18 formsets.py(342):     @classmethod
0.18 formsets.py(343):     def get_deletion_widget(cls):
0.18 formsets.py(342):     @classmethod
0.18 formsets.py(343):     def get_deletion_widget(cls):
0.18 formsets.py(346):     @classmethod
0.18 formsets.py(347):     def get_ordering_widget(cls):
0.18 formsets.py(346):     @classmethod
0.18 formsets.py(347):     def get_ordering_widget(cls):
0.18 formsets.py(350):     def non_form_errors(self):
0.18 formsets.py(360):     @property
0.18 formsets.py(361):     def errors(self):
0.18 formsets.py(360):     @property
0.18 formsets.py(361):     def errors(self):
0.18 formsets.py(367):     def total_error_count(self):
0.18 formsets.py(373):     def _should_delete_form(self, form):
0.18 formsets.py(377):     def is_valid(self):
0.18 formsets.py(394):     def full_clean(self):
0.18 formsets.py(462):     def clean(self):
0.18 formsets.py(471):     def has_changed(self):
0.18 formsets.py(475):     def add_fields(self, form, index):
0.18 formsets.py(500):     def add_prefix(self, index):
0.18 formsets.py(503):     def is_multipart(self):
0.18 formsets.py(513):     @property
0.18 formsets.py(514):     def media(self):
0.18 formsets.py(513):     @property
0.18 formsets.py(514):     def media(self):
0.18 formsets.py(522):     @property
0.18 formsets.py(523):     def template_name(self):
0.18 formsets.py(522):     @property
0.18 formsets.py(523):     def template_name(self):
0.18 formsets.py(526):     def get_context(self):
0.18 formsets.py(532):     formset=BaseFormSet,
0.18 formsets.py(533):     extra=1,
0.18 formsets.py(534):     can_order=False,
0.18 formsets.py(535):     can_delete=False,
0.18 formsets.py(536):     max_num=None,
0.18 formsets.py(537):     validate_max=False,
0.18 formsets.py(538):     min_num=None,
0.18 formsets.py(539):     validate_min=False,
0.18 formsets.py(540):     absolute_max=None,
0.18 formsets.py(541):     can_delete_extra=True,
0.18 formsets.py(542):     renderer=None,
0.18 formsets.py(530): def formset_factory(
0.18 formsets.py(572): def all_valid(formsets):
Testing against Django installed in '/testbed/django'
Found 1 test(s).
Skipping setup of unused database(s): default, other.
System check identified no issues (0 silenced).
test_add_fields_with_none_index (test_coverup_django__django-16569.FormsetAddFieldsTest.test_add_fields_with_none_index) ... FAIL

======================================================================
FAIL: test_add_fields_with_none_index (test_coverup_django__django-16569.FormsetAddFieldsTest.test_add_fields_with_none_index)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/./tests/test_coverup_django__django-16569.py", line 29, in test_add_fields_with_none_index
    _ = my_formset.empty_form
        ^^^^^^^^^^^^^^^^^^^^^
  File "/testbed/django/forms/formsets.py", line 267, in empty_form
    self.add_fields(form, None)
  File "/testbed/django/forms/formsets.py", line 493, in add_fields
    if self.can_delete and (self.can_delete_extra or index < initial_form_count):
                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
TypeError: '<' not supported between instances of 'NoneType' and 'int'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/testbed/./tests/test_coverup_django__django-16569.py", line 32, in test_add_fields_with_none_index
    self.fail("TypeError raised: " + str(e))
AssertionError: TypeError raised: '<' not supported between instances of 'NoneType' and 'int'

----------------------------------------------------------------------
Ran 1 test in 0.001s

FAILED (failures=1)
0.57 formsets.py(545):     if min_num is None:
0.57 formsets.py(546):         min_num = DEFAULT_MIN_NUM
0.57 formsets.py(547):     if max_num is None:
0.57 formsets.py(548):         max_num = DEFAULT_MAX_NUM
0.57 formsets.py(552):     if absolute_max is None:
0.57 formsets.py(553):         absolute_max = max_num + DEFAULT_MAX_NUM
0.57 formsets.py(554):     if max_num > absolute_max:
0.57 formsets.py(557):         "form": form,
0.57 formsets.py(558):         "extra": extra,
0.57 formsets.py(559):         "can_order": can_order,
0.57 formsets.py(560):         "can_delete": can_delete,
0.57 formsets.py(561):         "can_delete_extra": can_delete_extra,
0.57 formsets.py(562):         "min_num": min_num,
0.57 formsets.py(563):         "max_num": max_num,
0.57 formsets.py(564):         "absolute_max": absolute_max,
0.57 formsets.py(565):         "validate_min": validate_min,
0.57 formsets.py(566):         "validate_max": validate_max,
0.57 formsets.py(567):         "renderer": renderer or get_default_renderer(),
0.57 formsets.py(556):     attrs = {
0.57 formsets.py(569):     return type(form.__name__ + "FormSet", (formset,), attrs)
0.57 formsets.py(92):         self.is_bound = data is not None or files is not None
0.57 formsets.py(93):         self.prefix = prefix or self.get_default_prefix()
0.57 formsets.py(340):         return "form"
0.57 formsets.py(94):         self.auto_id = auto_id
0.57 formsets.py(95):         self.data = data or {}
0.57 formsets.py(96):         self.files = files or {}
0.57 formsets.py(97):         self.initial = initial
0.57 formsets.py(98):         self.form_kwargs = form_kwargs or {}
0.57 formsets.py(99):         self.error_class = error_class
0.57 formsets.py(100):         self._errors = None
0.57 formsets.py(101):         self._non_form_errors = None
0.57 formsets.py(103):         messages = {}
0.57 formsets.py(104):         for cls in reversed(type(self).__mro__):
0.57 formsets.py(105):             messages.update(getattr(cls, "default_error_messages", {}))
0.57 formsets.py(104):         for cls in reversed(type(self).__mro__):
0.57 formsets.py(105):             messages.update(getattr(cls, "default_error_messages", {}))
0.57 formsets.py(104):         for cls in reversed(type(self).__mro__):
0.57 formsets.py(105):             messages.update(getattr(cls, "default_error_messages", {}))
0.57 formsets.py(104):         for cls in reversed(type(self).__mro__):
0.57 formsets.py(105):             messages.update(getattr(cls, "default_error_messages", {}))
0.57 formsets.py(104):         for cls in reversed(type(self).__mro__):
0.57 formsets.py(105):             messages.update(getattr(cls, "default_error_messages", {}))
0.57 formsets.py(104):         for cls in reversed(type(self).__mro__):
0.57 formsets.py(106):         if error_messages is not None:
0.57 formsets.py(108):         self.error_messages = messages
0.57 formsets.py(258):         form_kwargs = {
0.57 formsets.py(259):             **self.get_form_kwargs(None),
0.57 formsets.py(215):         return self.form_kwargs.copy()
0.57 formsets.py(258):         form_kwargs = {
0.57 formsets.py(260):             "auto_id": self.auto_id,
0.57 formsets.py(261):             "prefix": self.add_prefix("__prefix__"),
0.57 formsets.py(501):         return "%s-%s" % (self.prefix, index)
0.57 formsets.py(262):             "empty_permitted": True,
0.57 formsets.py(263):             "use_required_attribute": False,
0.57 formsets.py(264):             "renderer": self.renderer,
0.57 formsets.py(258):         form_kwargs = {
0.57 formsets.py(266):         form = self.form(**form_kwargs)
0.57 formsets.py(267):         self.add_fields(form, None)
0.57 formsets.py(477):         initial_form_count = self.initial_form_count()
0.57 formsets.py(192):         if self.is_bound:
0.57 formsets.py(196):             initial_forms = len(self.initial) if self.initial else 0
0.57 formsets.py(197):         return initial_forms
0.57 formsets.py(478):         if self.can_order:
0.57 formsets.py(493):         if self.can_delete and (self.can_delete_extra or index < initial_form_count):
+ cat coverage.cover
{"/testbed/django/forms/formsets.py": {"0": 0, "1": 1, "2": 1, "3": 1, "4": 1, "5": 1, "6": 1, "7": 1, "8": 1, "9": 1, "11": 1, "14": 1, "15": 1, "16": 1, "17": 1, "18": 1, "19": 1, "22": 1, "25": 1, "28": 2, "52": 2, "532": 1, "533": 1, "534": 1, "535": 1, "536": 1, "537": 1, "538": 1, "539": 1, "540": 1, "541": 1, "542": 1, "530": 1, "572": 1, "35": 1, "36": 1, "40": 1, "41": 1, "43": 1, "44": 0, "47": 0, "48": 0, "49": 0, "57": 1, "58": 1, "60": 2, "61": 1, "64": 2, "65": 1, "66": 1, "67": 1, "69": 2, "70": 1, "71": 1, "72": 1, "59": 1, "76": 1, "77": 1, "78": 1, "79": 1, "83": 1, "84": 1, "85": 1, "86": 1, "87": 1, "88": 1, "89": 1, "90": 1, "81": 1, "110": 1, "114": 1, "118": 1, "121": 1, "128": 1, "144": 2, "145": 2, "169": 1, "190": 1, "199": 2, "200": 2, "208": 1, "217": 1, "246": 2, "247": 2, "251": 2, "252": 2, "256": 2, "257": 2, "270": 2, "271": 2, "281": 2, "282": 2, "298": 2, "299": 2, "338": 2, "339": 2, "342": 2, "343": 2, "346": 2, "347": 2, "350": 1, "360": 2, "361": 2, "367": 1, "373": 1, "377": 1, "394": 1, "462": 1, "471": 1, "475": 1, "500": 1, "503": 1, "513": 2, "514": 2, "522": 2, "523": 2, "526": 1, "92": 1, "93": 1, "94": 1, "95": 1, "96": 1, "97": 1, "98": 1, "99": 1, "100": 1, "101": 1, "103": 1, "104": 6, "105": 5, "106": 1, "107": 0, "108": 1, "112": 0, "116": 0, "119": 0, "126": 0, "129": 0, "130": 0, "133": 0, "134": 0, "135": 0, "132": 0, "138": 0, "139": 0, "140": 0, "141": 0, "137": 0, "147": 0, "148": 0, "149": 0, "150": 0, "151": 0, "152": 0, "154": 0, "156": 0, "157": 0, "158": 0, "160": 0, "161": 0, "162": 0, "163": 0, "159": 0, "165": 0, "167": 0, "171": 0, "176": 0, "177": 0, "180": 0, "181": 0, "184": 0, "185": 0, "186": 0, "187": 0, "188": 0, "192": 1, "193": 0, "196": 1, "197": 1, "203": 0, "205": 0, "204": 0, "215": 1, "220": 0, "221": 0, "222": 0, "226": 0, "227": 0, "219": 0, "229": 0, "230": 0, "231": 0, "232": 0, "233": 0, "234": 0, "235": 0, "236": 0, "239": 0, "240": 0, "241": 0, "242": 0, "243": 0, "244": 0, "249": 0, "254": 0, "258": 3, "259": 1, "260": 1, "261": 1, "262": 1, "263": 1, "264": 1, "266": 1, "267": 1, "268": 0, "275": 0, "276": 0, "277": 0, "279": 0, "284": 0, "285": 0, "288": 0, "289": 0, "290": 0, "292": 0, "293": 0, "294": 0, "295": 0, "296": 0, "304": 0, "305": 0, "306": 0, "312": 0, "313": 0, "314": 0, "316": 0, "317": 0, "319": 0, "320": 0, "321": 0, "328": 0, "333": 0, "336": 0, "329": 0, "330": 0, "331": 0, "340": 1, "344": 0, "348": 0, "356": 0, "357": 0, "358": 0, "363": 0, "364": 0, "365": 0, "369": 0, "370": 0, "375": 0, "379": 0, "380": 0, "382": 0, "385": 0, "386": 0, "388": 0, "392": 0, "389": 0, "387": 0, "399": 0, "400": 0, "401": 0, "403": 0, "405": 0, "406": 0, "408": 0, "409": 0, "410": 0, "412": 0, "414": 0, "411": 0, "417": 0, "419": 0, "421": 0, "423": 0, "424": 0, "427": 0, "428": 0, "429": 0, "430": 0, "431": 0, "433": 0, "432": 0, "434": 0, "435": 0, "436": 0, "437": 0, "438": 0, "439": 0, "440": 0, "443": 0, "442": 0, "444": 0, "445": 0, "446": 0, "447": 0, "449": 0, "450": 0, "451": 0, "454": 0, "455": 0, "456": 0, "457": 0, "458": 0, "459": 0, "413": 0, "469": 0, "473": 0, "477": 1, "478": 1, "480": 0, "481": 0, "482": 0, "483": 0, "484": 0, "485": 0, "488": 0, "489": 0, "490": 0, "491": 0, "493": 1, "494": 0, "495": 0, "496": 0, "497": 0, "501": 1, "508": 0, "509": 0, "511": 0, "517": 0, "518": 0, "520": 0, "524": 0, "527": 0, "545": 1, "546": 1, "547": 1, "548": 1, "552": 1, "553": 1, "554": 1, "555": 0, "557": 1, "558": 1, "559": 1, "560": 1, "561": 1, "562": 1, "563": 1, "564": 1, "565": 1, "566": 1, "567": 1, "556": 1, "569": 1, "575": 0}}
+ git checkout 278881e37619278789942513916acafaa88d26f3
Note: switching to '278881e37619278789942513916acafaa88d26f3'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at 278881e376 Fixed #34346 -- Ordered selected expressions by position.
+ git apply /root/pre_state.patch
error: unrecognized input
