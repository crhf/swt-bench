+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD e02f67ef2d03d48128e7a118bf75f0418e24e8ac
+ sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen
+ locale-gen
Generating locales (this might take a while)...
  en_US.UTF-8... done
Generation complete.
+ export LANG=en_US.UTF-8
+ LANG=en_US.UTF-8
+ export LANGUAGE=en_US:en
+ LANGUAGE=en_US:en
+ export LC_ALL=en_US.UTF-8
+ LC_ALL=en_US.UTF-8
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
nothing to commit, working tree clean
+ git show
commit e02f67ef2d03d48128e7a118bf75f0418e24e8ac
Author: David Vaz <davidmgvaz@gmail.com>
Date:   Fri Sep 27 14:31:58 2019 -0700

    Doc'd that migrate commmand accepts a unique migration name prefix.

diff --git a/docs/ref/django-admin.txt b/docs/ref/django-admin.txt
index 7927b89e63..ea935501c6 100644
--- a/docs/ref/django-admin.txt
+++ b/docs/ref/django-admin.txt
@@ -802,8 +802,10 @@ The behavior of this command changes depending on the arguments provided:
 * ``<app_label> <migrationname>``: Brings the database schema to a state where
   the named migration is applied, but no later migrations in the same app are
   applied. This may involve unapplying migrations if you have previously
-  migrated past the named migration. Use the name ``zero`` to migrate all the
-  way back i.e. to revert all applied migrations for an app.
+  migrated past the named migration. You can use a prefix of the migration
+  name, e.g. ``0001``, as long as it's unique for the given app name. Use the
+  name ``zero`` to migrate all the way back i.e. to revert all applied
+  migrations for an app.
 
 .. warning::
 
+ git diff e02f67ef2d03d48128e7a118bf75f0418e24e8ac
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
Requirement already satisfied: pytz in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.1) (2025.2)
Requirement already satisfied: sqlparse in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.1) (0.4.4)
Requirement already satisfied: asgiref in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.1) (3.4.1)
Requirement already satisfied: typing-extensions in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from asgiref->Django==3.1) (4.1.1)
Installing collected packages: Django
  Attempting uninstall: Django
    Found existing installation: Django 3.1
    Uninstalling Django-3.1:
      Successfully uninstalled Django-3.1
  Running setup.py develop for Django
Successfully installed Django-3.1
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv
+ git apply -v -
Checking patch tests/test_coverup_django__django-11815.py...
Applied patch tests/test_coverup_django__django-11815.py cleanly.
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/db/migrations/serializer\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-11815
test_enum_serialization_bug (test_coverup_django__django-11815.MigrationTest) ... ['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(django/db/migrations/serializer\\.py)']
Testing against Django installed in '/testbed/django'
0.66 serializer.py(1): import builtins
0.66 serializer.py(2): import collections.abc
0.66 serializer.py(3): import datetime
0.66 serializer.py(4): import decimal
0.66 serializer.py(5): import enum
0.66 serializer.py(6): import functools
0.66 serializer.py(7): import math
0.66 serializer.py(8): import re
0.66 serializer.py(9): import types
0.66 serializer.py(10): import uuid
0.66 serializer.py(12): from django.conf import SettingsReference
0.66 serializer.py(13): from django.db import models
0.66 serializer.py(14): from django.db.migrations.operations.base import Operation
0.66 serializer.py(15): from django.db.migrations.utils import COMPILED_REGEX_TYPE, RegexObject
0.66 serializer.py(16): from django.utils.functional import LazyObject, Promise
0.66 serializer.py(17): from django.utils.timezone import utc
0.66 serializer.py(18): from django.utils.version import get_docs_version
0.66 serializer.py(21): class BaseSerializer:
0.66 serializer.py(21): class BaseSerializer:
0.66 serializer.py(22):     def __init__(self, value):
0.66 serializer.py(25):     def serialize(self):
0.66 serializer.py(29): class BaseSequenceSerializer(BaseSerializer):
0.66 serializer.py(29): class BaseSequenceSerializer(BaseSerializer):
0.66 serializer.py(30):     def _format(self):
0.66 serializer.py(33):     def serialize(self):
0.66 serializer.py(44): class BaseSimpleSerializer(BaseSerializer):
0.66 serializer.py(44): class BaseSimpleSerializer(BaseSerializer):
0.66 serializer.py(45):     def serialize(self):
0.66 serializer.py(49): class ChoicesSerializer(BaseSerializer):
0.66 serializer.py(49): class ChoicesSerializer(BaseSerializer):
0.66 serializer.py(50):     def serialize(self):
0.66 serializer.py(54): class DateTimeSerializer(BaseSerializer):
0.66 serializer.py(54): class DateTimeSerializer(BaseSerializer):
0.66 serializer.py(55):     """For datetime.*, except datetime.datetime."""
0.66 serializer.py(56):     def serialize(self):
0.66 serializer.py(60): class DatetimeDatetimeSerializer(BaseSerializer):
0.66 serializer.py(60): class DatetimeDatetimeSerializer(BaseSerializer):
0.66 serializer.py(61):     """For datetime.datetime."""
0.66 serializer.py(62):     def serialize(self):
0.66 serializer.py(71): class DecimalSerializer(BaseSerializer):
0.66 serializer.py(71): class DecimalSerializer(BaseSerializer):
0.66 serializer.py(72):     def serialize(self):
0.66 serializer.py(76): class DeconstructableSerializer(BaseSerializer):
0.66 serializer.py(76): class DeconstructableSerializer(BaseSerializer):
0.66 serializer.py(77):     @staticmethod
0.66 serializer.py(91):     @staticmethod
0.66 serializer.py(102):     def serialize(self):
0.66 serializer.py(106): class DictionarySerializer(BaseSerializer):
0.66 serializer.py(106): class DictionarySerializer(BaseSerializer):
0.66 serializer.py(107):     def serialize(self):
0.66 serializer.py(119): class EnumSerializer(BaseSerializer):
0.66 serializer.py(119): class EnumSerializer(BaseSerializer):
0.66 serializer.py(120):     def serialize(self):
0.66 serializer.py(128): class FloatSerializer(BaseSimpleSerializer):
0.66 serializer.py(128): class FloatSerializer(BaseSimpleSerializer):
0.66 serializer.py(129):     def serialize(self):
0.66 serializer.py(135): class FrozensetSerializer(BaseSequenceSerializer):
0.66 serializer.py(135): class FrozensetSerializer(BaseSequenceSerializer):
0.66 serializer.py(136):     def _format(self):
0.66 serializer.py(140): class FunctionTypeSerializer(BaseSerializer):
0.66 serializer.py(140): class FunctionTypeSerializer(BaseSerializer):
0.66 serializer.py(141):     def serialize(self):
0.66 serializer.py(162): class FunctoolsPartialSerializer(BaseSerializer):
0.66 serializer.py(162): class FunctoolsPartialSerializer(BaseSerializer):
0.66 serializer.py(163):     def serialize(self):
0.66 serializer.py(181): class IterableSerializer(BaseSerializer):
0.66 serializer.py(181): class IterableSerializer(BaseSerializer):
0.66 serializer.py(182):     def serialize(self):
0.66 serializer.py(195): class ModelFieldSerializer(DeconstructableSerializer):
0.66 serializer.py(195): class ModelFieldSerializer(DeconstructableSerializer):
0.66 serializer.py(196):     def serialize(self):
0.66 serializer.py(201): class ModelManagerSerializer(DeconstructableSerializer):
0.66 serializer.py(201): class ModelManagerSerializer(DeconstructableSerializer):
0.66 serializer.py(202):     def serialize(self):
0.66 serializer.py(211): class OperationSerializer(BaseSerializer):
0.66 serializer.py(211): class OperationSerializer(BaseSerializer):
0.66 serializer.py(212):     def serialize(self):
0.66 serializer.py(219): class RegexSerializer(BaseSerializer):
0.66 serializer.py(219): class RegexSerializer(BaseSerializer):
0.66 serializer.py(220):     def serialize(self):
0.66 serializer.py(233): class SequenceSerializer(BaseSequenceSerializer):
0.66 serializer.py(233): class SequenceSerializer(BaseSequenceSerializer):
0.66 serializer.py(234):     def _format(self):
0.66 serializer.py(238): class SetSerializer(BaseSequenceSerializer):
0.66 serializer.py(238): class SetSerializer(BaseSequenceSerializer):
0.66 serializer.py(239):     def _format(self):
0.66 serializer.py(245): class SettingsReferenceSerializer(BaseSerializer):
0.66 serializer.py(245): class SettingsReferenceSerializer(BaseSerializer):
0.66 serializer.py(246):     def serialize(self):
0.66 serializer.py(250): class TupleSerializer(BaseSequenceSerializer):
0.66 serializer.py(250): class TupleSerializer(BaseSequenceSerializer):
0.66 serializer.py(251):     def _format(self):
0.66 serializer.py(257): class TypeSerializer(BaseSerializer):
0.66 serializer.py(257): class TypeSerializer(BaseSerializer):
0.66 serializer.py(258):     def serialize(self):
0.66 serializer.py(274): class UUIDSerializer(BaseSerializer):
0.66 serializer.py(274): class UUIDSerializer(BaseSerializer):
0.66 serializer.py(275):     def serialize(self):
0.66 serializer.py(279): class Serializer:
0.66 serializer.py(279): class Serializer:
0.66 serializer.py(282):         frozenset: FrozensetSerializer,
0.66 serializer.py(283):         list: SequenceSerializer,
0.66 serializer.py(284):         set: SetSerializer,
0.66 serializer.py(285):         tuple: TupleSerializer,
0.66 serializer.py(286):         dict: DictionarySerializer,
0.66 serializer.py(287):         models.Choices: ChoicesSerializer,
0.66 serializer.py(288):         enum.Enum: EnumSerializer,
0.66 serializer.py(289):         datetime.datetime: DatetimeDatetimeSerializer,
0.66 serializer.py(290):         (datetime.date, datetime.timedelta, datetime.time): DateTimeSerializer,
0.66 serializer.py(291):         SettingsReference: SettingsReferenceSerializer,
0.66 serializer.py(292):         float: FloatSerializer,
0.66 serializer.py(293):         (bool, int, type(None), bytes, str, range): BaseSimpleSerializer,
0.66 serializer.py(294):         decimal.Decimal: DecimalSerializer,
0.66 serializer.py(295):         (functools.partial, functools.partialmethod): FunctoolsPartialSerializer,
0.66 serializer.py(296):         (types.FunctionType, types.BuiltinFunctionType, types.MethodType): FunctionTypeSerializer,
0.66 serializer.py(297):         collections.abc.Iterable: IterableSerializer,
0.66 serializer.py(298):         (COMPILED_REGEX_TYPE, RegexObject): RegexSerializer,
0.66 serializer.py(299):         uuid.UUID: UUIDSerializer,
0.66 serializer.py(302):     @classmethod
0.66 serializer.py(308):     @classmethod
0.66 serializer.py(313): def serializer_factory(value):
Skipping setup of unused database(s): default, other.
System check identified no issues (0 silenced).
0.70 serializer.py(23):         self.value = value
0.70 serializer.py(121):         enum_class = self.value.__class__
0.70 serializer.py(122):         module = enum_class.__module__
0.70 serializer.py(123):         v_string, v_imports = serializer_factory(self.value.value).serialize()
0.70 serializer.py(314):     if isinstance(value, Promise):
0.70 serializer.py(315):         value = str(value)
0.70 serializer.py(321):     if isinstance(value, models.Field):
0.70 serializer.py(323):     if isinstance(value, models.manager.BaseManager):
0.70 serializer.py(325):     if isinstance(value, Operation):
0.70 serializer.py(327):     if isinstance(value, type):
0.70 serializer.py(330):     if hasattr(value, 'deconstruct'):
0.70 serializer.py(332):     for type_, serializer_cls in Serializer._registry.items():
0.70 serializer.py(333):         if isinstance(value, type_):
0.70 serializer.py(332):     for type_, serializer_cls in Serializer._registry.items():
0.70 serializer.py(333):         if isinstance(value, type_):
0.70 serializer.py(332):     for type_, serializer_cls in Serializer._registry.items():
0.70 serializer.py(333):         if isinstance(value, type_):
0.70 serializer.py(332):     for type_, serializer_cls in Serializer._registry.items():
0.70 serializer.py(333):         if isinstance(value, type_):
0.70 serializer.py(332):     for type_, serializer_cls in Serializer._registry.items():
0.70 serializer.py(333):         if isinstance(value, type_):
0.70 serializer.py(332):     for type_, serializer_cls in Serializer._registry.items():
0.70 serializer.py(333):         if isinstance(value, type_):
0.70 serializer.py(332):     for type_, serializer_cls in Serializer._registry.items():
0.70 serializer.py(333):         if isinstance(value, type_):
0.70 serializer.py(332):     for type_, serializer_cls in Serializer._registry.items():
0.70 serializer.py(333):         if isinstance(value, type_):
0.70 serializer.py(332):     for type_, serializer_cls in Serializer._registry.items():
0.70 serializer.py(333):         if isinstance(value, type_):
0.70 serializer.py(332):     for type_, serializer_cls in Serializer._registry.items():
0.70 serializer.py(333):         if isinstance(value, type_):
0.70 serializer.py(332):     for type_, serializer_cls in Serializer._registry.items():
0.70 serializer.py(333):         if isinstance(value, type_):
0.70 serializer.py(332):     for type_, serializer_cls in Serializer._registry.items():
0.70 serializer.py(333):         if isinstance(value, type_):
0.70 serializer.py(334):             return serializer_cls(value)
0.70 serializer.py(23):         self.value = value
0.70 serializer.py(46):         return repr(self.value), set()
0.70 serializer.py(124):         imports = {'import %s' % module, *v_imports}
0.70 serializer.py(125):         return "%s.%s(%s)" % (module, enum_class.__name__, v_string), imports
FAIL

======================================================================
FAIL: test_enum_serialization_bug (test_coverup_django__django-11815.MigrationTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "./tests/test_coverup_django__django-11815.py", line 25, in test_enum_serialization_bug
    self.assertIn("Status['GOOD']", serialized_value)
AssertionError: "Status['GOOD']" not found in "test_coverup_django__django-11815.Status('Good')"

----------------------------------------------------------------------
Ran 1 test in 0.001s

FAILED (failures=1)
+ cat coverage.cover
{"/testbed/django/db/migrations/serializer.py": {"1": 1, "2": 1, "3": 1, "4": 1, "5": 1, "6": 1, "7": 1, "8": 1, "9": 1, "10": 1, "12": 1, "13": 1, "14": 1, "15": 1, "16": 1, "17": 1, "18": 1, "21": 2, "29": 2, "44": 2, "49": 2, "54": 2, "60": 2, "71": 2, "76": 2, "106": 2, "119": 2, "128": 2, "135": 2, "140": 2, "162": 2, "181": 2, "195": 2, "201": 2, "211": 2, "219": 2, "233": 2, "238": 2, "245": 2, "250": 2, "257": 2, "274": 2, "279": 2, "313": 1, "22": 1, "25": 1, "23": 2, "26": 0, "30": 1, "33": 1, "31": 0, "34": 0, "35": 0, "36": 0, "37": 0, "38": 0, "39": 0, "40": 0, "41": 0, "45": 1, "46": 1, "50": 1, "51": 0, "56": 1, "57": 0, "62": 1, "63": 0, "64": 0, "65": 0, "66": 0, "67": 0, "68": 0, "72": 1, "73": 0, "77": 1, "91": 1, "102": 1, "79": 0, "80": 0, "81": 0, "82": 0, "83": 0, "84": 0, "85": 0, "86": 0, "87": 0, "88": 0, "89": 0, "93": 0, "94": 0, "95": 0, "96": 0, "98": 0, "99": 0, "100": 0, "103": 0, "107": 1, "108": 0, "109": 0, "110": 0, "111": 0, "112": 0, "113": 0, "114": 0, "115": 0, "116": 0, "120": 1, "121": 1, "122": 1, "123": 1, "124": 1, "125": 1, "129": 1, "130": 0, "131": 0, "132": 0, "136": 1, "137": 0, "141": 1, "142": 0, "143": 0, "144": 0, "145": 0, "147": 0, "148": 0, "149": 0, "150": 0, "152": 0, "154": 0, "155": 0, "157": 0, "158": 0, "163": 1, "165": 0, "166": 0, "167": 0, "169": 0, "171": 0, "172": 0, "173": 0, "174": 0, "175": 0, "177": 0, "182": 1, "183": 0, "184": 0, "185": 0, "186": 0, "187": 0, "188": 0, "191": 0, "192": 0, "196": 1, "197": 0, "198": 0, "202": 1, "203": 0, "204": 0, "205": 0, "206": 0, "208": 0, "212": 1, "213": 0, "214": 0, "216": 0, "220": 1, "221": 0, "224": 0, "225": 0, "226": 0, "227": 0, "228": 0, "229": 0, "230": 0, "234": 1, "235": 0, "239": 1, "242": 0, "246": 1, "247": 0, "251": 1, "254": 0, "258": 1, "260": 0, "261": 0, "263": 0, "264": 0, "265": 0, "266": 0, "267": 0, "268": 0, "269": 0, "271": 0, "275": 1, "276": 0, "282": 1, "283": 1, "284": 1, "285": 1, "286": 1, "287": 1, "288": 1, "289": 1, "290": 1, "291": 1, "292": 1, "293": 1, "294": 1, "295": 1, "296": 1, "297": 1, "298": 1, "299": 1, "302": 1, "308": 1, "304": 0, "305": 0, "306": 0, "310": 0, "314": 1, "315": 1, "316": 0, "319": 0, "321": 1, "322": 0, "323": 1, "324": 0, "325": 1, "326": 0, "327": 1, "328": 0, "330": 1, "331": 0, "332": 12, "333": 12, "334": 1, "335": 0, "336": 0, "338": 0}}
+ git checkout e02f67ef2d03d48128e7a118bf75f0418e24e8ac
Note: switching to 'e02f67ef2d03d48128e7a118bf75f0418e24e8ac'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at e02f67ef2d Doc'd that migrate commmand accepts a unique migration name prefix.
+ git apply /root/pre_state.patch
error: unrecognized input
