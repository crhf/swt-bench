+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD 3dff1b98a78f28c953ae2140b69356b8391e399c
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch master
nothing to commit, working tree clean
+ git show
commit 3dff1b98a78f28c953ae2140b69356b8391e399c
Merge: 70bf1f88ff 0bbbc7738f
Author: S.Y. Lee <sylee957@gmail.com>
Date:   Fri Feb 21 12:04:16 2020 +0900

    Merge pull request #18690 from mohitacecode/issue_18666_2
    
    migrate all the eigen-related test to test_eigen.py

+ git diff 3dff1b98a78f28c953ae2140b69356b8391e399c
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Requirement already satisfied: mpmath>=0.19 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from sympy==1.6.dev0) (1.3.0)
Installing collected packages: sympy
  Attempting uninstall: sympy
    Found existing installation: sympy 1.6.dev0
    Uninstalling sympy-1.6.dev0:
      Successfully uninstalled sympy-1.6.dev0
  DEPRECATION: Legacy editable install of sympy==1.6.dev0 from file:///testbed (setup.py develop) is deprecated. pip 25.3 will enforce this behaviour change. A possible replacement is to add a pyproject.toml or enable --use-pep517, and use setuptools >= 64. If the resulting installation is not behaving as expected, try using --config-settings editable_mode=compat. Please consult the setuptools documentation for more information. Discussion can be found at https://github.com/pypa/pip/issues/11457
  Running setup.py develop for sympy
Successfully installed sympy
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git apply -v -
<stdin>:14: trailing whitespace.
    
<stdin>:17: trailing whitespace.
    
<stdin>:20: trailing whitespace.
    
Checking patch sympy/polys/tests/test_coverup_sympy__sympy-18698.py...
Applied patch sympy/polys/tests/test_coverup_sympy__sympy-18698.py cleanly.
warning: 3 lines add whitespace errors.
+ PYTHONWARNINGS=ignore::UserWarning,ignore::SyntaxWarning
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(sympy/polys/polytools\.py)' bin/test -C --verbose sympy/polys/tests/test_coverup_sympy__sympy-18698.p
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(sympy/polys/polytools\\.py)']
0.39 polytools.py(1): """User-friendly public interface to polynomial functions. """
0.39 polytools.py(3): from __future__ import print_function, division
0.39 polytools.py(5): from functools import wraps
0.39 polytools.py(7): from sympy.core import (
0.39 polytools.py(10): from sympy.core.basic import preorder_traversal
0.39 polytools.py(11): from sympy.core.compatibility import iterable, ordered
0.39 polytools.py(12): from sympy.core.decorators import _sympifyit
0.39 polytools.py(13): from sympy.core.function import Derivative
0.39 polytools.py(14): from sympy.core.mul import _keep_coeff
0.39 polytools.py(15): from sympy.core.relational import Relational
0.39 polytools.py(16): from sympy.core.symbol import Symbol
0.39 polytools.py(17): from sympy.core.sympify import sympify, _sympify
0.39 polytools.py(18): from sympy.logic.boolalg import BooleanAtom
0.39 polytools.py(19): from sympy.polys import polyoptions as options
0.40 polytools.py(20): from sympy.polys.constructor import construct_domain
0.60 polytools.py(21): from sympy.polys.domains import FF, QQ, ZZ
0.60 polytools.py(22): from sympy.polys.fglmtools import matrix_fglm
0.60 polytools.py(23): from sympy.polys.groebnertools import groebner as _groebner
0.60 polytools.py(24): from sympy.polys.monomials import Monomial
0.60 polytools.py(25): from sympy.polys.orderings import monomial_key
0.60 polytools.py(26): from sympy.polys.polyclasses import DMP
0.60 polytools.py(27): from sympy.polys.polyerrors import (
0.60 polytools.py(37): from sympy.polys.polyutils import (
0.60 polytools.py(45): from sympy.polys.rationaltools import together
0.60 polytools.py(46): from sympy.polys.rootisolation import dup_isolate_real_roots_list
0.60 polytools.py(47): from sympy.utilities import group, sift, public, filldedent
0.60 polytools.py(48): from sympy.utilities.exceptions import SymPyDeprecationWarning
0.60 polytools.py(51): import sympy.polys
0.60 polytools.py(53): import mpmath
0.60 polytools.py(54): from mpmath.libmp.libhyper import NoConvergence
0.60 polytools.py(58): def _polifyit(func):
0.60 polytools.py(87): @public
0.60 polytools.py(88): class Poly(Basic):
0.60 polytools.py(87): @public
0.60 polytools.py(89):     """
0.60 polytools.py(134):     __slots__ = ('rep',)
0.60 polytools.py(136):     is_commutative = True
0.60 polytools.py(137):     is_Poly = True
0.60 polytools.py(138):     _op_priority = 10.001
0.60 polytools.py(140):     def __new__(cls, rep, *gens, **args):
0.60 polytools.py(160):     @classmethod
0.60 polytools.py(161):     def new(cls, rep, *gens):
0.60 polytools.py(176):     @property
0.60 polytools.py(177):     def expr(self):
0.60 polytools.py(180):     @property
0.60 polytools.py(181):     def gens(self):
0.60 polytools.py(184):     @classmethod
0.60 polytools.py(185):     def from_dict(cls, rep, *gens, **args):
0.60 polytools.py(190):     @classmethod
0.60 polytools.py(191):     def from_list(cls, rep, *gens, **args):
0.60 polytools.py(196):     @classmethod
0.60 polytools.py(197):     def from_poly(cls, rep, *gens, **args):
0.60 polytools.py(202):     @classmethod
0.60 polytools.py(203):     def from_expr(cls, rep, *gens, **args):
0.60 polytools.py(208):     @classmethod
0.60 polytools.py(209):     def _from_dict(cls, rep, opt):
0.60 polytools.py(228):     @classmethod
0.60 polytools.py(229):     def _from_list(cls, rep, opt):
0.60 polytools.py(250):     @classmethod
0.60 polytools.py(251):     def _from_poly(cls, rep, opt):
0.60 polytools.py(273):     @classmethod
0.60 polytools.py(274):     def _from_expr(cls, rep, opt):
0.60 polytools.py(279):     def __hash__(self):
0.60 polytools.py(282):     @property
0.60 polytools.py(283):     def free_symbols(self):
0.60 polytools.py(313):     @property
0.60 polytools.py(314):     def free_symbols_in_domain(self):
0.60 polytools.py(343):     @property
0.60 polytools.py(344):     def gen(self):
0.60 polytools.py(360):     @property
0.60 polytools.py(361):     def domain(self):
0.60 polytools.py(365):     @property
0.60 polytools.py(366):     def zero(self):
0.60 polytools.py(370):     @property
0.60 polytools.py(371):     def one(self):
0.60 polytools.py(375):     @property
0.60 polytools.py(376):     def unit(self):
0.60 polytools.py(380):     def unify(f, g):
0.60 polytools.py(408):     def _unify(f, g):
0.60 polytools.py(459):     def per(f, rep, gens=None, remove=None):
0.60 polytools.py(488):     def set_domain(f, domain):
0.60 polytools.py(493):     def get_domain(f):
0.60 polytools.py(497):     def set_modulus(f, modulus):
0.60 polytools.py(514):     def get_modulus(f):
0.60 polytools.py(535):     def _eval_subs(f, old, new):
0.60 polytools.py(548):     def exclude(f):
0.60 polytools.py(571):     def replace(f, x, y=None, *_ignore):
0.60 polytools.py(606):     def match(f, *args, **kwargs):
0.60 polytools.py(610):     def reorder(f, *gens, **args):
0.60 polytools.py(636):     def ltrim(f, gen):
0.60 polytools.py(672):     def has_only_gens(f, *gens):
0.60 polytools.py(706):     def to_ring(f):
0.60 polytools.py(727):     def to_field(f):
0.60 polytools.py(748):     def to_exact(f):
0.60 polytools.py(769):     def retract(f, field=None):
0.60 polytools.py(793):     def slice(f, x, m, n=None):
0.60 polytools.py(809):     def coeffs(f, order=None):
0.60 polytools.py(831):     def monoms(f, order=None):
0.60 polytools.py(851):     def terms(f, order=None):
0.60 polytools.py(871):     def all_coeffs(f):
0.60 polytools.py(887):     def all_monoms(f):
0.60 polytools.py(907):     def all_terms(f):
0.60 polytools.py(923):     def termwise(f, func, *gens, **args):
0.60 polytools.py(960):     def length(f):
0.60 polytools.py(976):     def as_dict(f, native=False, zero=False):
0.60 polytools.py(995):     def as_list(f, native=False):
0.60 polytools.py(1002):     def as_expr(f, *gens):
0.60 polytools.py(1040):     def as_poly(self, *gens, **args):
0.60 polytools.py(1066):     def lift(f):
0.60 polytools.py(1087):     def deflate(f):
0.60 polytools.py(1108):     def inject(f, front=False):
0.60 polytools.py(1145):     def eject(f, *gens):
0.60 polytools.py(1187):     def terms_gcd(f):
0.60 polytools.py(1208):     def add_ground(f, coeff):
0.60 polytools.py(1229):     def sub_ground(f, coeff):
0.60 polytools.py(1250):     def mul_ground(f, coeff):
0.60 polytools.py(1271):     def quo_ground(f, coeff):
0.60 polytools.py(1295):     def exquo_ground(f, coeff):
0.60 polytools.py(1321):     def abs(f):
0.60 polytools.py(1342):     def neg(f):
0.60 polytools.py(1366):     def add(f, g):
0.60 polytools.py(1397):     def sub(f, g):
0.60 polytools.py(1428):     def mul(f, g):
0.60 polytools.py(1459):     def sqr(f):
0.60 polytools.py(1483):     def pow(f, n):
0.60 polytools.py(1509):     def pdiv(f, g):
0.60 polytools.py(1532):     def prem(f, g):
0.60 polytools.py(1571):     def pquo(f, g):
0.60 polytools.py(1599):     def pexquo(f, g):
0.60 polytools.py(1630):     def div(f, g, auto=True):
0.60 polytools.py(1669):     def rem(f, g, auto=True):
0.60 polytools.py(1706):     def quo(f, g, auto=True):
0.60 polytools.py(1743):     def exquo(f, g, auto=True):
0.60 polytools.py(1785):     def _gen_to_level(f, gen):
0.60 polytools.py(1805):     def degree(f, gen=0):
0.60 polytools.py(1832):     def degree_list(f):
0.60 polytools.py(1851):     def total_degree(f):
0.60 polytools.py(1872):     def homogenize(f, s):
0.60 polytools.py(1906):     def homogeneous_order(f):
0.60 polytools.py(1931):     def LC(f, order=None):
0.60 polytools.py(1955):     def TC(f):
0.60 polytools.py(1976):     def EC(f, order=None):
0.60 polytools.py(1995):     def coeff_monomial(f, monom):
0.60 polytools.py(2032):     def nth(f, *N):
0.60 polytools.py(2066):     def coeff(f, x, n=1, right=False):
0.60 polytools.py(2078):     def LM(f, order=None):
0.60 polytools.py(2098):     def EM(f, order=None):
0.60 polytools.py(2114):     def LT(f, order=None):
0.60 polytools.py(2135):     def ET(f, order=None):
0.60 polytools.py(2152):     def max_norm(f):
0.60 polytools.py(2173):     def l1_norm(f):
0.60 polytools.py(2194):     def clear_denoms(self, convert=False):
0.60 polytools.py(2233):     def rat_clear_denoms(self, g):
0.60 polytools.py(2272):     def integrate(self, *specs, **args):
0.60 polytools.py(2312):     def diff(f, *specs, **kwargs):
0.60 polytools.py(2350):     _eval_derivative = diff
0.60 polytools.py(2352):     def eval(self, x, a=None, auto=True):
0.60 polytools.py(2427):     def __call__(f, *values):
0.60 polytools.py(2449):     def half_gcdex(f, g, auto=True):
0.60 polytools.py(2480):     def gcdex(f, g, auto=True):
0.60 polytools.py(2513):     def invert(f, g, auto=True):
0.60 polytools.py(2544):     def revert(f, n):
0.60 polytools.py(2578):     def subresultants(f, g):
0.60 polytools.py(2603):     def resultant(f, g, includePRS=False):
0.60 polytools.py(2640):     def discriminant(f):
0.60 polytools.py(2661):     def dispersionset(f, g=None):
0.60 polytools.py(2736):     def dispersion(f, g=None):
0.60 polytools.py(2811):     def cofactors(f, g):
0.60 polytools.py(2840):     def gcd(f, g):
0.60 polytools.py(2863):     def lcm(f, g):
0.60 polytools.py(2886):     def trunc(f, p):
0.60 polytools.py(2909):     def monic(self, auto=True):
0.60 polytools.py(2938):     def content(f):
0.60 polytools.py(2959):     def primitive(f):
0.60 polytools.py(2980):     def compose(f, g):
0.60 polytools.py(3003):     def decompose(f):
0.60 polytools.py(3024):     def shift(f, a):
0.60 polytools.py(3045):     def transform(f, p, q):
0.60 polytools.py(3071):     def sturm(self, auto=True):
0.60 polytools.py(3100):     def gff_list(f):
0.60 polytools.py(3123):     def norm(f):
0.60 polytools.py(3158):     def sqf_norm(f):
0.60 polytools.py(3189):     def sqf_part(f):
0.60 polytools.py(3210):     def sqf_list(f, all=False):
0.60 polytools.py(3239):     def sqf_list_include(f, all=False):
0.60 polytools.py(3272):     def factor_list(f):
0.60 polytools.py(3299):     def factor_list_include(f):
0.60 polytools.py(3326):     def intervals(f, all=False, eps=None, inf=None, sup=None, fast=False, sqf=False):
0.60 polytools.py(3402):     def refine_root(f, s, t, eps=None, steps=None, fast=False, check_sqf=False):
0.60 polytools.py(3439):     def count_roots(f, inf=None, sup=None):
0.60 polytools.py(3502):     def root(f, index, radicals=True):
0.60 polytools.py(3531):     def real_roots(f, multiple=True, radicals=True):
0.60 polytools.py(3554):     def all_roots(f, multiple=True, radicals=True):
0.60 polytools.py(3579):     def nroots(f, n=15, maxsteps=50, cleanup=True):
0.60 polytools.py(3653):     def ground_roots(f):
0.60 polytools.py(3680):     def nth_power_roots_poly(f, n):
0.60 polytools.py(3720):     def cancel(f, g, include=False):
0.60 polytools.py(3757):     @property
0.60 polytools.py(3758):     def is_zero(f):
0.60 polytools.py(3776):     @property
0.60 polytools.py(3777):     def is_one(f):
0.60 polytools.py(3795):     @property
0.60 polytools.py(3796):     def is_sqf(f):
0.60 polytools.py(3814):     @property
0.60 polytools.py(3815):     def is_monic(f):
0.60 polytools.py(3833):     @property
0.60 polytools.py(3834):     def is_primitive(f):
0.60 polytools.py(3852):     @property
0.60 polytools.py(3853):     def is_ground(f):
0.60 polytools.py(3873):     @property
0.60 polytools.py(3874):     def is_linear(f):
0.60 polytools.py(3892):     @property
0.60 polytools.py(3893):     def is_quadratic(f):
0.60 polytools.py(3911):     @property
0.60 polytools.py(3912):     def is_monomial(f):
0.60 polytools.py(3930):     @property
0.60 polytools.py(3931):     def is_homogeneous(f):
0.60 polytools.py(3954):     @property
0.60 polytools.py(3955):     def is_irreducible(f):
0.60 polytools.py(3973):     @property
0.60 polytools.py(3974):     def is_univariate(f):
0.60 polytools.py(3996):     @property
0.60 polytools.py(3997):     def is_multivariate(f):
0.60 polytools.py(4019):     @property
0.60 polytools.py(4020):     def is_cyclotomic(f):
0.60 polytools.py(4043):     def __abs__(f):
0.60 polytools.py(4046):     def __neg__(f):
0.60 polytools.py(4049):     @_polifyit
0.60 polytools.py(4050):     def __add__(f, g):
0.60 polytools.py(59):     @wraps(func)
0.60 polytools.py(60):     def wrapper(f, g):
0.60 polytools.py(83):     return wrapper
0.60 polytools.py(4053):     @_polifyit
0.60 polytools.py(4054):     def __radd__(f, g):
0.60 polytools.py(59):     @wraps(func)
0.60 polytools.py(60):     def wrapper(f, g):
0.60 polytools.py(83):     return wrapper
0.60 polytools.py(4057):     @_polifyit
0.60 polytools.py(4058):     def __sub__(f, g):
0.60 polytools.py(59):     @wraps(func)
0.60 polytools.py(60):     def wrapper(f, g):
0.60 polytools.py(83):     return wrapper
0.60 polytools.py(4061):     @_polifyit
0.60 polytools.py(4062):     def __rsub__(f, g):
0.60 polytools.py(59):     @wraps(func)
0.60 polytools.py(60):     def wrapper(f, g):
0.60 polytools.py(83):     return wrapper
0.60 polytools.py(4065):     @_polifyit
0.60 polytools.py(4066):     def __mul__(f, g):
0.60 polytools.py(59):     @wraps(func)
0.60 polytools.py(60):     def wrapper(f, g):
0.60 polytools.py(83):     return wrapper
0.60 polytools.py(4069):     @_polifyit
0.60 polytools.py(4070):     def __rmul__(f, g):
0.60 polytools.py(59):     @wraps(func)
0.60 polytools.py(60):     def wrapper(f, g):
0.60 polytools.py(83):     return wrapper
0.60 polytools.py(4073):     @_sympifyit('n', NotImplemented)
0.60 polytools.py(4074):     def __pow__(f, n):
0.60 polytools.py(4080):     @_polifyit
0.60 polytools.py(4081):     def __divmod__(f, g):
0.60 polytools.py(59):     @wraps(func)
0.60 polytools.py(60):     def wrapper(f, g):
0.60 polytools.py(83):     return wrapper
0.60 polytools.py(4084):     @_polifyit
0.60 polytools.py(4085):     def __rdivmod__(f, g):
0.60 polytools.py(59):     @wraps(func)
0.60 polytools.py(60):     def wrapper(f, g):
0.60 polytools.py(83):     return wrapper
0.60 polytools.py(4088):     @_polifyit
0.60 polytools.py(4089):     def __mod__(f, g):
0.60 polytools.py(59):     @wraps(func)
0.60 polytools.py(60):     def wrapper(f, g):
0.60 polytools.py(83):     return wrapper
0.60 polytools.py(4092):     @_polifyit
0.60 polytools.py(4093):     def __rmod__(f, g):
0.60 polytools.py(59):     @wraps(func)
0.60 polytools.py(60):     def wrapper(f, g):
0.60 polytools.py(83):     return wrapper
0.60 polytools.py(4096):     @_polifyit
0.60 polytools.py(4097):     def __floordiv__(f, g):
0.60 polytools.py(59):     @wraps(func)
0.60 polytools.py(60):     def wrapper(f, g):
0.60 polytools.py(83):     return wrapper
0.60 polytools.py(4100):     @_polifyit
0.60 polytools.py(4101):     def __rfloordiv__(f, g):
0.60 polytools.py(59):     @wraps(func)
0.60 polytools.py(60):     def wrapper(f, g):
0.60 polytools.py(83):     return wrapper
0.60 polytools.py(4104):     @_sympifyit('g', NotImplemented)
0.60 polytools.py(4105):     def __div__(f, g):
0.60 polytools.py(4108):     @_sympifyit('g', NotImplemented)
0.60 polytools.py(4109):     def __rdiv__(f, g):
0.60 polytools.py(4112):     __truediv__ = __div__
0.60 polytools.py(4113):     __rtruediv__ = __rdiv__
0.60 polytools.py(4115):     @_sympifyit('other', NotImplemented)
0.60 polytools.py(4116):     def __eq__(self, other):
0.60 polytools.py(4133):     @_sympifyit('g', NotImplemented)
0.60 polytools.py(4134):     def __ne__(f, g):
0.60 polytools.py(4137):     def __nonzero__(f):
0.60 polytools.py(4140):     __bool__ = __nonzero__
0.60 polytools.py(4142):     def eq(f, g, strict=False):
0.60 polytools.py(4148):     def ne(f, g, strict=False):
0.60 polytools.py(4151):     def _strict_eq(f, g):
0.60 polytools.py(4155): @public
0.60 polytools.py(4156): class PurePoly(Poly):
0.60 polytools.py(4155): @public
0.60 polytools.py(4157):     """Class for representing pure polynomials. """
0.60 polytools.py(4159):     def _hashable_content(self):
0.60 polytools.py(4163):     def __hash__(self):
0.60 polytools.py(4166):     @property
0.60 polytools.py(4167):     def free_symbols(self):
0.60 polytools.py(4187):     @_sympifyit('other', NotImplemented)
0.60 polytools.py(4188):     def __eq__(self, other):
0.60 polytools.py(4211):     def _strict_eq(f, g):
0.60 polytools.py(4214):     def _unify(f, g):
0.60 polytools.py(4249): @public
0.60 ['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(sympy/polys/polytools\\.py)']
0.25 polytools.py(1): """User-friendly public interface to polynomial functions. """
0.25 polytools.py(3): from __future__ import print_function, division
0.25 polytools.py(5): from functools import wraps
0.25 polytools.py(7): from sympy.core import (
0.25 polytools.py(10): from sympy.core.basic import preorder_traversal
0.25 polytools.py(11): from sympy.core.compatibility import iterable, ordered
0.25 polytools.py(12): from sympy.core.decorators import _sympifyit
0.25 polytools.py(13): from sympy.core.function import Derivative
0.25 polytools.py(14): from sympy.core.mul import _keep_coeff
0.25 polytools.py(15): from sympy.core.relational import Relational
0.25 polytools.py(16): from sympy.core.symbol import Symbol
0.25 polytools.py(17): from sympy.core.sympify import sympify, _sympify
0.25 polytools.py(18): from sympy.logic.boolalg import BooleanAtom
0.25 polytools.py(19): from sympy.polys import polyoptions as options
0.25 polytools.py(20): from sympy.polys.constructor import construct_domain
0.29 polytools.py(21): from sympy.polys.domains import FF, QQ, ZZ
0.29 polytools.py(22): from sympy.polys.fglmtools import matrix_fglm
0.29 polytools.py(23): from sympy.polys.groebnertools import groebner as _groebner
0.29 polytools.py(24): from sympy.polys.monomials import Monomial
0.29 polytools.py(25): from sympy.polys.orderings import monomial_key
0.29 polytools.py(26): from sympy.polys.polyclasses import DMP
0.29 polytools.py(27): from sympy.polys.polyerrors import (
0.29 polytools.py(37): from sympy.polys.polyutils import (
0.29 polytools.py(45): from sympy.polys.rationaltools import together
0.30 polytools.py(46): from sympy.polys.rootisolation import dup_isolate_real_roots_list
0.30 polytools.py(47): from sympy.utilities import group, sift, public, filldedent
0.30 polytools.py(48): from sympy.utilities.exceptions import SymPyDeprecationWarning
0.30 polytools.py(51): import sympy.polys
0.30 polytools.py(53): import mpmath
0.30 polytools.py(54): from mpmath.libmp.libhyper import NoConvergence
0.30 polytools.py(58): def _polifyit(func):
0.30 polytools.py(87): @public
0.30 polytools.py(88): class Poly(Basic):
0.30 polytools.py(87): @public
0.30 polytools.py(89):     """
0.30 polytools.py(134):     __slots__ = ('rep',)
0.30 polytools.py(136):     is_commutative = True
0.30 polytools.py(137):     is_Poly = True
0.30 polytools.py(138):     _op_priority = 10.001
0.30 polytools.py(140):     def __new__(cls, rep, *gens, **args):
0.30 polytools.py(160):     @classmethod
0.30 polytools.py(161):     def new(cls, rep, *gens):
0.30 polytools.py(176):     @property
0.30 polytools.py(177):     def expr(self):
0.30 polytools.py(180):     @property
0.30 polytools.py(181):     def gens(self):
0.30 polytools.py(184):     @classmethod
0.30 polytools.py(185):     def from_dict(cls, rep, *gens, **args):
0.30 polytools.py(190):     @classmethod
0.30 polytools.py(191):     def from_list(cls, rep, *gens, **args):
0.30 polytools.py(196):     @classmethod
0.30 polytools.py(197):     def from_poly(cls, rep, *gens, **args):
0.30 polytools.py(202):     @classmethod
0.30 polytools.py(203):     def from_expr(cls, rep, *gens, **args):
0.30 polytools.py(208):     @classmethod
0.30 polytools.py(209):     def _from_dict(cls, rep, opt):
0.30 polytools.py(228):     @classmethod
0.30 polytools.py(229):     def _from_list(cls, rep, opt):
0.30 polytools.py(250):     @classmethod
0.30 polytools.py(251):     def _from_poly(cls, rep, opt):
0.30 polytools.py(273):     @classmethod
0.30 polytools.py(274):     def _from_expr(cls, rep, opt):
0.30 polytools.py(279):     def __hash__(self):
0.30 polytools.py(282):     @property
0.30 polytools.py(283):     def free_symbols(self):
0.30 polytools.py(313):     @property
0.30 polytools.py(314):     def free_symbols_in_domain(self):
0.30 polytools.py(343):     @property
0.30 polytools.py(344):     def gen(self):
0.30 polytools.py(360):     @property
0.30 polytools.py(361):     def domain(self):
0.30 polytools.py(365):     @property
0.30 polytools.py(366):     def zero(self):
0.30 polytools.py(370):     @property
0.30 polytools.py(371):     def one(self):
0.30 polytools.py(375):     @property
0.30 polytools.py(376):     def unit(self):
0.30 polytools.py(380):     def unify(f, g):
0.30 polytools.py(408):     def _unify(f, g):
0.30 polytools.py(459):     def per(f, rep, gens=None, remove=None):
0.30 polytools.py(488):     def set_domain(f, domain):
0.30 polytools.py(493):     def get_domain(f):
0.30 polytools.py(497):     def set_modulus(f, modulus):
0.30 polytools.py(514):     def get_modulus(f):
0.30 polytools.py(535):     def _eval_subs(f, old, new):
0.30 polytools.py(548):     def exclude(f):
0.30 polytools.py(571):     def replace(f, x, y=None, *_ignore):
0.30 polytools.py(606):     def match(f, *args, **kwargs):
0.30 polytools.py(610):     def reorder(f, *gens, **args):
0.30 polytools.py(636):     def ltrim(f, gen):
0.30 polytools.py(672):     def has_only_gens(f, *gens):
0.30 polytools.py(706):     def to_ring(f):
0.30 polytools.py(727):     def to_field(f):
0.30 polytools.py(748):     def to_exact(f):
0.30 polytools.py(769):     def retract(f, field=None):
0.30 polytools.py(793):     def slice(f, x, m, n=None):
0.30 polytools.py(809):     def coeffs(f, order=None):
0.30 polytools.py(831):     def monoms(f, order=None):
0.30 polytools.py(851):     def terms(f, order=None):
0.30 polytools.py(871):     def all_coeffs(f):
0.30 polytools.py(887):     def all_monoms(f):
0.30 polytools.py(907):     def all_terms(f):
0.30 polytools.py(923):     def termwise(f, func, *gens, **args):
0.30 polytools.py(960):     def length(f):
0.30 polytools.py(976):     def as_dict(f, native=False, zero=False):
0.30 polytools.py(995):     def as_list(f, native=False):
0.30 polytools.py(1002):     def as_expr(f, *gens):
0.30 polytools.py(1040):     def as_poly(self, *gens, **args):
0.30 polytools.py(1066):     def lift(f):
0.30 polytools.py(1087):     def deflate(f):
0.30 polytools.py(1108):     def inject(f, front=False):
0.30 polytools.py(1145):     def eject(f, *gens):
0.30 polytools.py(1187):     def terms_gcd(f):
0.30 polytools.py(1208):     def add_ground(f, coeff):
0.30 polytools.py(1229):     def sub_ground(f, coeff):
0.30 polytools.py(1250):     def mul_ground(f, coeff):
0.30 polytools.py(1271):     def quo_ground(f, coeff):
0.30 polytools.py(1295):     def exquo_ground(f, coeff):
0.30 polytools.py(1321):     def abs(f):
0.30 polytools.py(1342):     def neg(f):
0.30 polytools.py(1366):     def add(f, g):
0.30 polytools.py(1397):     def sub(f, g):
0.30 polytools.py(1428):     def mul(f, g):
0.30 polytools.py(1459):     def sqr(f):
0.30 polytools.py(1483):     def pow(f, n):
0.30 polytools.py(1509):     def pdiv(f, g):
0.30 polytools.py(1532):     def prem(f, g):
0.30 polytools.py(1571):     def pquo(f, g):
0.30 polytools.py(1599):     def pexquo(f, g):
0.30 polytools.py(1630):     def div(f, g, auto=True):
0.30 polytools.py(1669):     def rem(f, g, auto=True):
0.30 polytools.py(1706):     def quo(f, g, auto=True):
0.30 polytools.py(1743):     def exquo(f, g, auto=True):
0.30 polytools.py(1785):     def _gen_to_level(f, gen):
0.30 polytools.py(1805):     def degree(f, gen=0):
0.30 polytools.py(1832):     def degree_list(f):
0.30 polytools.py(1851):     def total_degree(f):
0.30 polytools.py(1872):     def homogenize(f, s):
0.30 polytools.py(1906):     def homogeneous_order(f):
0.30 polytools.py(1931):     def LC(f, order=None):
0.30 polytools.py(1955):     def TC(f):
0.30 polytools.py(1976):     def EC(f, order=None):
0.30 polytools.py(1995):     def coeff_monomial(f, monom):
0.30 polytools.py(2032):     def nth(f, *N):
0.30 polytools.py(2066):     def coeff(f, x, n=1, right=False):
0.30 polytools.py(2078):     def LM(f, order=None):
0.30 polytools.py(2098):     def EM(f, order=None):
0.30 polytools.py(2114):     def LT(f, order=None):
0.30 polytools.py(2135):     def ET(f, order=None):
0.30 polytools.py(2152):     def max_norm(f):
0.30 polytools.py(2173):     def l1_norm(f):
0.30 polytools.py(2194):     def clear_denoms(self, convert=False):
0.30 polytools.py(2233):     def rat_clear_denoms(self, g):
0.30 polytools.py(2272):     def integrate(self, *specs, **args):
0.30 polytools.py(2312):     def diff(f, *specs, **kwargs):
0.30 polytools.py(2350):     _eval_derivative = diff
0.30 polytools.py(2352):     def eval(self, x, a=None, auto=True):
0.30 polytools.py(2427):     def __call__(f, *values):
0.30 polytools.py(2449):     def half_gcdex(f, g, auto=True):
0.30 polytools.py(2480):     def gcdex(f, g, auto=True):
0.30 polytools.py(2513):     def invert(f, g, auto=True):
0.30 polytools.py(2544):     def revert(f, n):
0.30 polytools.py(2578):     def subresultants(f, g):
0.30 polytools.py(2603):     def resultant(f, g, includePRS=False):
0.30 polytools.py(2640):     def discriminant(f):
0.30 polytools.py(2661):     def dispersionset(f, g=None):
0.30 polytools.py(2736):     def dispersion(f, g=None):
0.30 polytools.py(2811):     def cofactors(f, g):
0.30 polytools.py(2840):     def gcd(f, g):
0.30 polytools.py(2863):     def lcm(f, g):
0.30 polytools.py(2886):     def trunc(f, p):
0.30 polytools.py(2909):     def monic(self, auto=True):
0.30 polytools.py(2938):     def content(f):
0.30 polytools.py(2959):     def primitive(f):
0.30 polytools.py(2980):     def compose(f, g):
0.30 polytools.py(3003):     def decompose(f):
0.30 polytools.py(3024):     def shift(f, a):
0.30 polytools.py(3045):     def transform(f, p, q):
0.30 polytools.py(3071):     def sturm(self, auto=True):
0.30 polytools.py(3100):     def gff_list(f):
0.30 polytools.py(3123):     def norm(f):
0.30 polytools.py(3158):     def sqf_norm(f):
0.30 polytools.py(3189):     def sqf_part(f):
0.30 polytools.py(3210):     def sqf_list(f, all=False):
0.30 polytools.py(3239):     def sqf_list_include(f, all=False):
0.30 polytools.py(3272):     def factor_list(f):
0.30 polytools.py(3299):     def factor_list_include(f):
0.30 polytools.py(3326):     def intervals(f, all=False, eps=None, inf=None, sup=None, fast=False, sqf=False):
0.30 polytools.py(3402):     def refine_root(f, s, t, eps=None, steps=None, fast=False, check_sqf=False):
0.30 polytools.py(3439):     def count_roots(f, inf=None, sup=None):
0.30 polytools.py(3502):     def root(f, index, radicals=True):
0.30 polytools.py(3531):     def real_roots(f, multiple=True, radicals=True):
0.30 polytools.py(3554):     def all_roots(f, multiple=True, radicals=True):
0.30 polytools.py(3579):     def nroots(f, n=15, maxsteps=50, cleanup=True):
0.30 polytools.py(3653):     def ground_roots(f):
0.30 polytools.py(3680):     def nth_power_roots_poly(f, n):
0.30 polytools.py(3720):     def cancel(f, g, include=False):
0.30 polytools.py(3757):     @property
0.30 polytools.py(3758):     def is_zero(f):
0.30 polytools.py(3776):     @property
0.30 polytools.py(3777):     def is_one(f):
0.30 polytools.py(3795):     @property
0.30 polytools.py(3796):     def is_sqf(f):
0.30 polytools.py(3814):     @property
0.30 polytools.py(3815):     def is_monic(f):
0.30 polytools.py(3833):     @property
0.30 polytools.py(3834):     def is_primitive(f):
0.30 polytools.py(3852):     @property
0.30 polytools.py(3853):     def is_ground(f):
0.30 polytools.py(3873):     @property
0.30 polytools.py(3874):     def is_linear(f):
0.30 polytools.py(3892):     @property
0.30 polytools.py(3893):     def is_quadratic(f):
0.30 polytools.py(3911):     @property
0.30 polytools.py(3912):     def is_monomial(f):
0.30 polytools.py(3930):     @property
0.30 polytools.py(3931):     def is_homogeneous(f):
0.30 polytools.py(3954):     @property
0.30 polytools.py(3955):     def is_irreducible(f):
0.30 polytools.py(3973):     @property
0.30 polytools.py(3974):     def is_univariate(f):
0.30 polytools.py(3996):     @property
0.30 polytools.py(3997):     def is_multivariate(f):
0.30 polytools.py(4019):     @property
0.30 polytools.py(4020):     def is_cyclotomic(f):
0.30 polytools.py(4043):     def __abs__(f):
0.30 polytools.py(4046):     def __neg__(f):
0.30 polytools.py(4049):     @_polifyit
0.30 polytools.py(4050):     def __add__(f, g):
0.30 polytools.py(59):     @wraps(func)
0.30 polytools.py(60):     def wrapper(f, g):
0.30 polytools.py(83):     return wrapper
0.30 polytools.py(4053):     @_polifyit
0.30 polytools.py(4054):     def __radd__(f, g):
0.30 polytools.py(59):     @wraps(func)
0.30 polytools.py(60):     def wrapper(f, g):
0.30 polytools.py(83):     return wrapper
0.30 polytools.py(4057):     @_polifyit
0.30 polytools.py(4058):     def __sub__(f, g):
0.30 polytools.py(59):     @wraps(func)
0.30 polytools.py(60):     def wrapper(f, g):
0.30 polytools.py(83):     return wrapper
0.30 polytools.py(4061):     @_polifyit
0.30 polytools.py(4062):     def __rsub__(f, g):
0.30 polytools.py(59):     @wraps(func)
0.30 polytools.py(60):     def wrapper(f, g):
0.30 polytools.py(83):     return wrapper
0.30 polytools.py(4065):     @_polifyit
0.30 polytools.py(4066):     def __mul__(f, g):
0.30 polytools.py(59):     @wraps(func)
0.30 polytools.py(60):     def wrapper(f, g):
0.30 polytools.py(83):     return wrapper
0.30 polytools.py(4069):     @_polifyit
0.30 polytools.py(4070):     def __rmul__(f, g):
0.30 polytools.py(59):     @wraps(func)
0.30 polytools.py(60):     def wrapper(f, g):
0.30 polytools.py(83):     return wrapper
0.30 polytools.py(4073):     @_sympifyit('n', NotImplemented)
0.30 polytools.py(4074):     def __pow__(f, n):
0.30 polytools.py(4080):     @_polifyit
0.30 polytools.py(4081):     def __divmod__(f, g):
0.30 polytools.py(59):     @wraps(func)
0.30 polytools.py(60):     def wrapper(f, g):
0.30 polytools.py(83):     return wrapper
0.30 polytools.py(4084):     @_polifyit
0.30 polytools.py(4085):     def __rdivmod__(f, g):
0.30 polytools.py(59):     @wraps(func)
0.30 polytools.py(60):     def wrapper(f, g):
0.30 polytools.py(83):     return wrapper
0.30 polytools.py(4088):     @_polifyit
0.30 polytools.py(4089):     def __mod__(f, g):
0.30 polytools.py(59):     @wraps(func)
0.30 polytools.py(60):     def wrapper(f, g):
0.30 polytools.py(83):     return wrapper
0.30 polytools.py(4092):     @_polifyit
0.30 polytools.py(4093):     def __rmod__(f, g):
0.30 polytools.py(59):     @wraps(func)
0.30 polytools.py(60):     def wrapper(f, g):
0.30 polytools.py(83):     return wrapper
0.30 polytools.py(4096):     @_polifyit
0.30 polytools.py(4097):     def __floordiv__(f, g):
0.30 polytools.py(59):     @wraps(func)
0.30 polytools.py(60):     def wrapper(f, g):
0.30 polytools.py(83):     return wrapper
0.30 polytools.py(4100):     @_polifyit
0.30 polytools.py(4101):     def __rfloordiv__(f, g):
0.30 polytools.py(59):     @wraps(func)
0.30 polytools.py(60):     def wrapper(f, g):
0.30 polytools.py(83):     return wrapper
0.30 polytools.py(4104):     @_sympifyit('g', NotImplemented)
0.30 polytools.py(4105):     def __div__(f, g):
0.30 polytools.py(4108):     @_sympifyit('g', NotImplemented)
0.30 polytools.py(4109):     def __rdiv__(f, g):
0.30 polytools.py(4112):     __truediv__ = __div__
0.30 polytools.py(4113):     __rtruediv__ = __rdiv__
0.30 polytools.py(4115):     @_sympifyit('other', NotImplemented)
0.30 polytools.py(4116):     def __eq__(self, other):
0.30 polytools.py(4133):     @_sympifyit('g', NotImplemented)
0.30 polytools.py(4134):     def __ne__(f, g):
0.30 polytools.py(4137):     def __nonzero__(f):
0.30 polytools.py(4140):     __bool__ = __nonzero__
0.30 polytools.py(4142):     def eq(f, g, strict=False):
0.30 polytools.py(4148):     def ne(f, g, strict=False):
0.30 polytools.py(4151):     def _strict_eq(f, g):
0.30 polytools.py(4155): @public
0.30 polytools.py(4156): class PurePoly(Poly):
0.30 polytools.py(4155): @public
0.30 polytools.py(4157):     """Class for representing pure polynomials. """
0.30 polytools.py(4159):     def _hashable_content(self):
0.30 polytools.py(4163):     def __hash__(self):
0.30 polytools.py(4166):     @property
0.30 polytools.py(4167):     def free_symbols(self):
0.30 polytools.py(4187):     @_sympifyit('other', NotImplemented)
0.30 polytools.py(4188):     def __eq__(self, other):
0.30 polytools.py(4211):     def _strict_eq(f, g):
0.30 polytools.py(4214):     def _unify(f, g):
0.30 polytools.py(4249): @public
0.30 polytools.py(4250): def poly_from_expr(expr, *gens, **args):
0.30 polytools.py(4256): def _poly_from_expr(expr, opt):
0.30 polytools.py(4296): @public
0.30 polytools.py(4297): def parallel_poly_from_expr(exprs, *gens, **args):
0.30 polytools.py(4303): def _parallel_poly_from_expr(exprs, opt):
0.30 polytools.py(4398): def _update_args(args, key, value):
0.30 polytools.py(4408): @public
0.30 polytools.py(4409): def degree(f, gen=0):
0.30 polytools.py(4467): @public
0.30 polytools.py(4468): def total_degree(f, *gens):
0.30 polytools.py(4520): @public
0.30 polytools.py(4521): def degree_list(f, *gens, **args):
0.30 polytools.py(4547): @public
0.30 polytools.py(4548): def LC(f, *gens, **args):
0.30 polytools.py(4572): @public
0.30 polytools.py(4573): def LM(f, *gens, **args):
0.30 polytools.py(4598): @public
0.30 polytools.py(4599): def LT(f, *gens, **args):
0.30 polytools.py(4624): @public
0.30 polytools.py(4625): def pdiv(f, g, *gens, **args):
0.30 polytools.py(4654): @public
0.30 polytools.py(4655): def prem(f, g, *gens, **args):
0.30 polytools.py(4684): @public
0.30 polytools.py(4685): def pquo(f, g, *gens, **args):
0.30 polytools.py(4719): @public
0.30 polytools.py(4720): def pexquo(f, g, *gens, **args):
0.30 polytools.py(4754): @public
0.30 polytools.py(4755): def div(f, g, *gens, **args):
0.30 polytools.py(4786): @public
0.30 polytools.py(4787): def rem(f, g, *gens, **args):
0.30 polytools.py(4818): @public
0.30 polytools.py(4819): def quo(f, g, *gens, **args):
0.30 polytools.py(4850): @public
0.30 polytools.py(4851): def exquo(f, g, *gens, **args):
0.30 polytools.py(4885): @public
0.30 polytools.py(4886): def half_gcdex(f, g, *gens, **args):
0.30 polytools.py(4924): @public
0.30 polytools.py(4925): def gcdex(f, g, *gens, **args):
0.30 polytools.py(4963): @public
0.30 polytools.py(4964): def invert(f, g, *gens, **args):
0.30 polytools.py(5017): @public
0.30 polytools.py(5018): def subresultants(f, g, *gens, **args):
0.30 polytools.py(5047): @public
0.30 polytools.py(5048): def resultant(f, g, *gens, **args):
0.30 polytools.py(5085): @public
0.30 polytools.py(5086): def discriminant(f, *gens, **args):
0.30 polytools.py(5115): @public
0.30 polytools.py(5116): def cofactors(f, g, *gens, **args):
0.30 polytools.py(5156): @public
0.30 polytools.py(5157): def gcd_list(seq, *gens, **args):
0.30 polytools.py(5240): @public
0.30 polytools.py(5241): def gcd(f, g=None, *gens, **args):
0.30 polytools.py(5291): @public
0.30 polytools.py(5292): def lcm_list(seq, *gens, **args):
0.30 polytools.py(5369): @public
0.30 polytools.py(5370): def lcm(f, g=None, *gens, **args):
0.30 polytools.py(5420): @public
0.30 polytools.py(5421): def terms_gcd(f, *gens, **args):
0.30 polytools.py(5539): @public
0.30 polytools.py(5540): def trunc(f, p, *gens, **args):
0.30 polytools.py(5569): @public
0.30 polytools.py(5570): def monic(f, *gens, **args):
0.30 polytools.py(5599): @public
0.30 polytools.py(5600): def content(f, *gens, **args):
0.30 polytools.py(5624): @public
0.30 polytools.py(5625): def primitive(f, *gens, **args):
0.30 polytools.py(5670): @public
0.30 polytools.py(5671): def compose(f, g, *gens, **args):
0.30 polytools.py(5700): @public
0.30 polytools.py(5701): def decompose(f, *gens, **args):
0.30 polytools.py(5730): @public
0.30 polytools.py(5731): def sturm(f, *gens, **args):
0.30 polytools.py(5760): @public
0.30 polytools.py(5761): def gff_list(f, *gens, **args):
0.30 polytools.py(5807): @public
0.30 polytools.py(5808): def gff(f, *gens, **args):
0.30 polytools.py(5813): @public
0.30 polytools.py(5814): def sqf_norm(f, *gens, **args):
0.30 polytools.py(5847): @public
0.30 polytools.py(5848): def sqf_part(f, *gens, **args):
0.30 polytools.py(5877): def _sorted_factors(factors, method):
0.30 polytools.py(5893): def _factors_product(factors):
0.30 polytools.py(5898): def _symbolic_factor_list(expr, opt, method):
0.30 polytools.py(5956): def _symbolic_factor(expr, opt, method):
0.30 polytools.py(5971): def _generic_factor_list(expr, gens, args, method):
0.30 polytools.py(6015): def _generic_factor(expr, gens, args, method):
0.30 polytools.py(6024): def to_rational_coeffs(f):
0.30 polytools.py(6159): def _torational_factor_list(p, x):
0.30 polytools.py(6203): @public
0.30 polytools.py(6204): def sqf_list(f, *gens, **args):
0.30 polytools.py(6221): @public
0.30 polytools.py(6222): def sqf(f, *gens, **args):
0.30 polytools.py(6239): @public
0.30 polytools.py(6240): def factor_list(f, *gens, **args):
0.30 polytools.py(6257): @public
0.30 polytools.py(6258): def factor(f, *gens, **args):
0.30 polytools.py(6358): @public
0.30 polytools.py(6359): def intervals(F, all=False, eps=None, inf=None, sup=None, strict=False, fast=False, sqf=False):
0.30 polytools.py(6414): @public
0.30 polytools.py(6415): def refine_root(f, s, t, eps=None, steps=None, fast=False, check_sqf=False):
0.30 polytools.py(6438): @public
0.30 polytools.py(6439): def count_roots(f, inf=None, sup=None):
0.30 polytools.py(6466): @public
0.30 polytools.py(6467): def real_roots(f, multiple=True):
0.30 polytools.py(6490): @public
0.30 polytools.py(6491): def nroots(f, n=15, maxsteps=50, cleanup=True):
0.30 polytools.py(6516): @public
0.30 polytools.py(6517): def ground_roots(f, *gens, **args):
0.30 polytools.py(6541): @public
0.30 polytools.py(6542): def nth_power_roots_poly(f, n, *gens, **args):
0.30 polytools.py(6580): @public
0.30 polytools.py(6581): def cancel(f, *gens, **args):
0.30 polytools.py(6667): @public
0.30 polytools.py(6668): def reduced(f, G, *gens, **args):
0.30 polytools.py(6727): @public
0.30 polytools.py(6728): def groebner(F, *gens, **args):
0.30 polytools.py(6781): @public
0.30 polytools.py(6782): def is_zero_dimensional(F, *gens, **args):
0.30 polytools.py(6799): @public
0.30 polytools.py(6800): class GroebnerBasis(Basic):
0.30 polytools.py(6799): @public
0.30 polytools.py(6801):     """Represents a reduced Groebner basis. """
0.30 polytools.py(6803):     def __new__(cls, F, *gens, **args):
0.30 polytools.py(6822):     @classmethod
0.30 polytools.py(6823):     def _new(cls, basis, options):
0.30 polytools.py(6831):     @property
0.30 polytools.py(6832):     def args(self):
0.30 polytools.py(6836):     @property
0.30 polytools.py(6837):     def exprs(self):
0.30 polytools.py(6840):     @property
0.30 polytools.py(6841):     def polys(self):
0.30 polytools.py(6844):     @property
0.30 polytools.py(6845):     def gens(self):
0.30 polytools.py(6848):     @property
0.30 polytools.py(6849):     def domain(self):
0.30 polytools.py(6852):     @property
0.30 polytools.py(6853):     def order(self):
0.30 polytools.py(6856):     def __len__(self):
0.30 polytools.py(6859):     def __iter__(self):
0.30 polytools.py(6865):     def __getitem__(self, item):
0.30 polytools.py(6873):     def __hash__(self):
0.30 polytools.py(6876):     def __eq__(self, other):
0.30 polytools.py(6884):     def __ne__(self, other):
0.30 polytools.py(6887):     @property
0.30 polytools.py(6888):     def is_zero_dimensional(self):
0.30 polytools.py(6919):     def fglm(self, order):
0.30 polytools.py(6985):     def reduce(self, expr, auto=True):
0.30 polytools.py(7050):     def contains(self, poly):
0.30 polytools.py(7072): @public
0.30 polytools.py(7073): def poly(expr, *gens, **args):
============================= test process starts ==============================
executable:         /opt/miniconda3/envs/testbed/bin/python3  (3.9.23-final-0) [CPython]
architecture:       64-bit
cache:              no
ground types:       python 
numpy:              None
random seed:        23744514
hash randomization: on (PYTHONHASHSEED=1333393585)

sympy/polys/tests/test_coverup_sympy__sympy-18698.py[1] 
test_sqf_list_incorrect_multiplicity 0.58 polytools.py(6218):     return _generic_factor_list(f, gens, args, method='sqf')
0.58 polytools.py(5973):     options.allowed_flags(args, ['frac', 'polys'])
0.58 polytools.py(5974):     opt = options.build_options(gens, args)
0.58 polytools.py(5976):     expr = sympify(expr)
0.58 polytools.py(5978):     if isinstance(expr, (Expr, Poly)):
0.58 polytools.py(5979):         if isinstance(expr, Poly):
0.58 polytools.py(5982):             numer, denom = together(expr).as_numer_denom()
0.59 polytools.py(5984):         cp, fp = _symbolic_factor_list(numer, opt, method)
0.59 polytools.py(5900):     coeff, factors = S.One, []
0.59 polytools.py(5902):     args = [i._eval_factor() if hasattr(i, '_eval_factor') else i
0.59 polytools.py(5903):         for i in Mul.make_args(expr)]
0.59 polytools.py(5902):     args = [i._eval_factor() if hasattr(i, '_eval_factor') else i
0.59 polytools.py(5902):     args = [i._eval_factor() if hasattr(i, '_eval_factor') else i
0.59 polytools.py(5903):         for i in Mul.make_args(expr)]
0.59 polytools.py(5902):     args = [i._eval_factor() if hasattr(i, '_eval_factor') else i
0.59 polytools.py(5902):     args = [i._eval_factor() if hasattr(i, '_eval_factor') else i
0.59 polytools.py(5903):         for i in Mul.make_args(expr)]
0.59 polytools.py(5902):     args = [i._eval_factor() if hasattr(i, '_eval_factor') else i
0.59 polytools.py(5902):     args = [i._eval_factor() if hasattr(i, '_eval_factor') else i
0.59 polytools.py(5903):         for i in Mul.make_args(expr)]
0.59 polytools.py(5902):     args = [i._eval_factor() if hasattr(i, '_eval_factor') else i
0.59 polytools.py(5902):     args = [i._eval_factor() if hasattr(i, '_eval_factor') else i
0.59 polytools.py(5903):         for i in Mul.make_args(expr)]
0.59 polytools.py(5902):     args = [i._eval_factor() if hasattr(i, '_eval_factor') else i
0.59 polytools.py(5902):     args = [i._eval_factor() if hasattr(i, '_eval_factor') else i
0.59 polytools.py(5904):     for arg in args:
0.59 polytools.py(5905):         if arg.is_Number:
0.59 polytools.py(5908):         if arg.is_Mul:
0.59 polytools.py(5911):         if arg.is_Pow:
0.59 polytools.py(5912):             base, exp = arg.args
0.59 polytools.py(5913):             if base.is_Number and exp.is_Number:
0.59 polytools.py(5916):             if base.is_Number:
0.59 polytools.py(5922):         try:
0.59 polytools.py(5923):             poly, _ = _poly_from_expr(base, opt)
0.59 polytools.py(4258):     orig, expr = expr, sympify(expr)
0.59 polytools.py(4260):     if not isinstance(expr, Basic):
0.59 polytools.py(4262):     elif expr.is_Poly:
0.59 polytools.py(4272):     elif opt.expand:
0.59 polytools.py(4273):         expr = expr.expand()
0.59 polytools.py(4275):     rep, opt = _dict_from_expr(expr, opt)
0.59 polytools.py(4276):     if not opt.gens:
0.59 polytools.py(4279):     monoms, coeffs = list(zip(*list(rep.items())))
0.59 polytools.py(4280):     domain = opt.domain
0.59 polytools.py(4282):     if domain is None:
0.59 polytools.py(4283):         opt.domain, coeffs = construct_domain(coeffs, opt=opt)
0.59 polytools.py(4287):     rep = dict(list(zip(monoms, coeffs)))
0.59 polytools.py(4288):     poly = Poly._from_dict(rep, opt)
0.59 polytools.py(211):         gens = opt.gens
0.59 polytools.py(213):         if not gens:
0.59 polytools.py(217):         level = len(gens) - 1
0.59 polytools.py(218):         domain = opt.domain
0.59 polytools.py(220):         if domain is None:
0.59 polytools.py(223):             for monom, coeff in rep.items():
0.59 polytools.py(224):                 rep[monom] = domain.convert(coeff)
0.59 polytools.py(223):             for monom, coeff in rep.items():
0.59 polytools.py(224):                 rep[monom] = domain.convert(coeff)
0.59 polytools.py(223):             for monom, coeff in rep.items():
0.59 polytools.py(226):         return cls.new(DMP.from_dict(rep, level, domain), *gens)
0.59 polytools.py(163):         if not isinstance(rep, DMP):
0.59 polytools.py(166):         elif rep.lev != len(gens) - 1:
0.59 polytools.py(169):         expr = basic_from_dict(rep.to_sympy_dict(), *gens)
0.59 polytools.py(171):         obj = Basic.__new__(cls, expr, *gens)
0.59 polytools.py(172):         obj.rep = rep
0.59 polytools.py(174):         return obj
0.59 polytools.py(4290):     if opt.polys is None:
0.59 polytools.py(4291):         opt.polys = False
0.59 polytools.py(4293):     return poly, opt
0.59 polytools.py(5927):             func = getattr(poly, method + '_list')
0.59 polytools.py(5929):             _coeff, _factors = func()
0.59 polytools.py(3232):         if hasattr(f.rep, 'sqf_list'):
0.59 polytools.py(3233):             coeff, factors = f.rep.sqf_list(all)
0.59 polytools.py(3237):         return f.rep.dom.to_sympy(coeff), [(f.per(g), k) for g, k in factors]
0.59 polytools.py(3237):         return f.rep.dom.to_sympy(coeff), [(f.per(g), k) for g, k in factors]
0.59 polytools.py(477):         if gens is None:
0.59 polytools.py(478):             gens = f.gens
0.59 polytools.py(182):         return self.args[1:]
0.59 polytools.py(480):         if remove is not None:
0.59 polytools.py(486):         return f.__class__.new(rep, *gens)
0.59 polytools.py(163):         if not isinstance(rep, DMP):
0.59 polytools.py(166):         elif rep.lev != len(gens) - 1:
0.59 polytools.py(169):         expr = basic_from_dict(rep.to_sympy_dict(), *gens)
0.59 polytools.py(171):         obj = Basic.__new__(cls, expr, *gens)
0.59 polytools.py(172):         obj.rep = rep
0.59 polytools.py(174):         return obj
0.59 polytools.py(3237):         return f.rep.dom.to_sympy(coeff), [(f.per(g), k) for g, k in factors]
0.59 polytools.py(5930):             if _coeff is not S.One:
0.59 polytools.py(5938):             if exp is S.One:
0.59 polytools.py(5940):             elif exp.is_integer:
0.59 polytools.py(5941):                 factors.extend([(f, k*exp) for f, k in _factors])
0.59 polytools.py(5941):                 factors.extend([(f, k*exp) for f, k in _factors])
0.59 polytools.py(5941):                 factors.extend([(f, k*exp) for f, k in _factors])
0.59 polytools.py(5904):     for arg in args:
0.59 polytools.py(5905):         if arg.is_Number:
0.59 polytools.py(5908):         if arg.is_Mul:
0.59 polytools.py(5911):         if arg.is_Pow:
0.59 polytools.py(5912):             base, exp = arg.args
0.59 polytools.py(5913):             if base.is_Number and exp.is_Number:
0.59 polytools.py(5916):             if base.is_Number:
0.59 polytools.py(5922):         try:
0.59 polytools.py(5923):             poly, _ = _poly_from_expr(base, opt)
0.59 polytools.py(4258):     orig, expr = expr, sympify(expr)
0.59 polytools.py(4260):     if not isinstance(expr, Basic):
0.59 polytools.py(4262):     elif expr.is_Poly:
0.59 polytools.py(4272):     elif opt.expand:
0.59 polytools.py(4273):         expr = expr.expand()
0.59 polytools.py(4275):     rep, opt = _dict_from_expr(expr, opt)
0.59 polytools.py(4276):     if not opt.gens:
0.59 polytools.py(4279):     monoms, coeffs = list(zip(*list(rep.items())))
0.59 polytools.py(4280):     domain = opt.domain
0.59 polytools.py(4282):     if domain is None:
0.59 polytools.py(4283):         opt.domain, coeffs = construct_domain(coeffs, opt=opt)
0.59 polytools.py(4287):     rep = dict(list(zip(monoms, coeffs)))
0.59 polytools.py(4288):     poly = Poly._from_dict(rep, opt)
0.59 polytools.py(211):         gens = opt.gens
0.59 polytools.py(213):         if not gens:
0.59 polytools.py(217):         level = len(gens) - 1
0.59 polytools.py(218):         domain = opt.domain
0.59 polytools.py(220):         if domain is None:
0.59 polytools.py(223):             for monom, coeff in rep.items():
0.59 polytools.py(224):                 rep[monom] = domain.convert(coeff)
0.59 polytools.py(223):             for monom, coeff in rep.items():
0.59 polytools.py(224):                 rep[monom] = domain.convert(coeff)
0.59 polytools.py(223):             for monom, coeff in rep.items():
0.59 polytools.py(226):         return cls.new(DMP.from_dict(rep, level, domain), *gens)
0.59 polytools.py(163):         if not isinstance(rep, DMP):
0.59 polytools.py(166):         elif rep.lev != len(gens) - 1:
0.59 polytools.py(169):         expr = basic_from_dict(rep.to_sympy_dict(), *gens)
0.59 polytools.py(171):         obj = Basic.__new__(cls, expr, *gens)
0.59 polytools.py(172):         obj.rep = rep
0.59 polytools.py(174):         return obj
0.59 polytools.py(4290):     if opt.polys is None:
0.59 polytools.py(4291):         opt.polys = False
0.59 polytools.py(4293):     return poly, opt
0.59 polytools.py(5927):             func = getattr(poly, method + '_list')
0.59 polytools.py(5929):             _coeff, _factors = func()
0.59 polytools.py(3232):         if hasattr(f.rep, 'sqf_list'):
0.59 polytools.py(3233):             coeff, factors = f.rep.sqf_list(all)
0.59 polytools.py(3237):         return f.rep.dom.to_sympy(coeff), [(f.per(g), k) for g, k in factors]
0.59 polytools.py(3237):         return f.rep.dom.to_sympy(coeff), [(f.per(g), k) for g, k in factors]
0.59 polytools.py(477):         if gens is None:
0.59 polytools.py(478):             gens = f.gens
0.59 polytools.py(182):         return self.args[1:]
0.59 polytools.py(480):         if remove is not None:
0.59 polytools.py(486):         return f.__class__.new(rep, *gens)
0.59 polytools.py(163):         if not isinstance(rep, DMP):
0.59 polytools.py(166):         elif rep.lev != len(gens) - 1:
0.59 polytools.py(169):         expr = basic_from_dict(rep.to_sympy_dict(), *gens)
0.59 polytools.py(171):         obj = Basic.__new__(cls, expr, *gens)
0.59 polytools.py(172):         obj.rep = rep
0.59 polytools.py(174):         return obj
0.59 polytools.py(3237):         return f.rep.dom.to_sympy(coeff), [(f.per(g), k) for g, k in factors]
0.59 polytools.py(5930):             if _coeff is not S.One:
0.59 polytools.py(5938):             if exp is S.One:
0.59 polytools.py(5940):             elif exp.is_integer:
0.59 polytools.py(5941):                 factors.extend([(f, k*exp) for f, k in _factors])
0.59 polytools.py(5941):                 factors.extend([(f, k*exp) for f, k in _factors])
0.59 polytools.py(5941):                 factors.extend([(f, k*exp) for f, k in _factors])
0.59 polytools.py(5904):     for arg in args:
0.59 polytools.py(5905):         if arg.is_Number:
0.59 polytools.py(5908):         if arg.is_Mul:
0.59 polytools.py(5911):         if arg.is_Pow:
0.59 polytools.py(5912):             base, exp = arg.args
0.59 polytools.py(5913):             if base.is_Number and exp.is_Number:
0.59 polytools.py(5916):             if base.is_Number:
0.59 polytools.py(5922):         try:
0.59 polytools.py(5923):             poly, _ = _poly_from_expr(base, opt)
0.59 polytools.py(4258):     orig, expr = expr, sympify(expr)
0.59 polytools.py(4260):     if not isinstance(expr, Basic):
0.59 polytools.py(4262):     elif expr.is_Poly:
0.59 polytools.py(4272):     elif opt.expand:
0.59 polytools.py(4273):         expr = expr.expand()
0.59 polytools.py(4275):     rep, opt = _dict_from_expr(expr, opt)
0.59 polytools.py(4276):     if not opt.gens:
0.59 polytools.py(4279):     monoms, coeffs = list(zip(*list(rep.items())))
0.59 polytools.py(4280):     domain = opt.domain
0.59 polytools.py(4282):     if domain is None:
0.59 polytools.py(4283):         opt.domain, coeffs = construct_domain(coeffs, opt=opt)
0.59 polytools.py(4287):     rep = dict(list(zip(monoms, coeffs)))
0.59 polytools.py(4288):     poly = Poly._from_dict(rep, opt)
0.59 polytools.py(211):         gens = opt.gens
0.59 polytools.py(213):         if not gens:
0.59 polytools.py(217):         level = len(gens) - 1
0.59 polytools.py(218):         domain = opt.domain
0.59 polytools.py(220):         if domain is None:
0.59 polytools.py(223):             for monom, coeff in rep.items():
0.59 polytools.py(224):                 rep[monom] = domain.convert(coeff)
0.59 polytools.py(223):             for monom, coeff in rep.items():
0.59 polytools.py(224):                 rep[monom] = domain.convert(coeff)
0.59 polytools.py(223):             for monom, coeff in rep.items():
0.59 polytools.py(226):         return cls.new(DMP.from_dict(rep, level, domain), *gens)
0.59 polytools.py(163):         if not isinstance(rep, DMP):
0.59 polytools.py(166):         elif rep.lev != len(gens) - 1:
0.59 polytools.py(169):         expr = basic_from_dict(rep.to_sympy_dict(), *gens)
0.59 polytools.py(171):         obj = Basic.__new__(cls, expr, *gens)
0.59 polytools.py(172):         obj.rep = rep
0.59 polytools.py(174):         return obj
0.59 polytools.py(4290):     if opt.polys is None:
0.59 polytools.py(4291):         opt.polys = False
0.59 polytools.py(4293):     return poly, opt
0.59 polytools.py(5927):             func = getattr(poly, method + '_list')
0.59 polytools.py(5929):             _coeff, _factors = func()
0.59 polytools.py(3232):         if hasattr(f.rep, 'sqf_list'):
0.59 polytools.py(3233):             coeff, factors = f.rep.sqf_list(all)
0.59 polytools.py(3237):         return f.rep.dom.to_sympy(coeff), [(f.per(g), k) for g, k in factors]
0.59 polytools.py(3237):         return f.rep.dom.to_sympy(coeff), [(f.per(g), k) for g, k in factors]
0.59 polytools.py(477):         if gens is None:
0.59 polytools.py(478):             gens = f.gens
0.59 polytools.py(182):         return self.args[1:]
0.59 polytools.py(480):         if remove is not None:
0.59 polytools.py(486):         return f.__class__.new(rep, *gens)
0.59 polytools.py(163):         if not isinstance(rep, DMP):
0.59 polytools.py(166):         elif rep.lev != len(gens) - 1:
0.59 polytools.py(169):         expr = basic_from_dict(rep.to_sympy_dict(), *gens)
0.59 polytools.py(171):         obj = Basic.__new__(cls, expr, *gens)
0.59 polytools.py(172):         obj.rep = rep
0.59 polytools.py(174):         return obj
0.59 polytools.py(3237):         return f.rep.dom.to_sympy(coeff), [(f.per(g), k) for g, k in factors]
0.59 polytools.py(5930):             if _coeff is not S.One:
0.59 polytools.py(5938):             if exp is S.One:
0.59 polytools.py(5940):             elif exp.is_integer:
0.59 polytools.py(5941):                 factors.extend([(f, k*exp) for f, k in _factors])
0.59 polytools.py(5941):                 factors.extend([(f, k*exp) for f, k in _factors])
0.59 polytools.py(5941):                 factors.extend([(f, k*exp) for f, k in _factors])
0.59 polytools.py(5904):     for arg in args:
0.59 polytools.py(5905):         if arg.is_Number:
0.59 polytools.py(5908):         if arg.is_Mul:
0.59 polytools.py(5911):         if arg.is_Pow:
0.59 polytools.py(5920):             base, exp = arg, S.One
0.59 polytools.py(5922):         try:
0.59 polytools.py(5923):             poly, _ = _poly_from_expr(base, opt)
0.59 polytools.py(4258):     orig, expr = expr, sympify(expr)
0.59 polytools.py(4260):     if not isinstance(expr, Basic):
0.59 polytools.py(4262):     elif expr.is_Poly:
0.59 polytools.py(4272):     elif opt.expand:
0.59 polytools.py(4273):         expr = expr.expand()
0.59 polytools.py(4275):     rep, opt = _dict_from_expr(expr, opt)
0.59 polytools.py(4276):     if not opt.gens:
0.59 polytools.py(4279):     monoms, coeffs = list(zip(*list(rep.items())))
0.59 polytools.py(4280):     domain = opt.domain
0.59 polytools.py(4282):     if domain is None:
0.59 polytools.py(4283):         opt.domain, coeffs = construct_domain(coeffs, opt=opt)
0.59 polytools.py(4287):     rep = dict(list(zip(monoms, coeffs)))
0.59 polytools.py(4288):     poly = Poly._from_dict(rep, opt)
0.59 polytools.py(211):         gens = opt.gens
0.59 polytools.py(213):         if not gens:
0.59 polytools.py(217):         level = len(gens) - 1
0.59 polytools.py(218):         domain = opt.domain
0.59 polytools.py(220):         if domain is None:
0.59 polytools.py(223):             for monom, coeff in rep.items():
0.59 polytools.py(224):                 rep[monom] = domain.convert(coeff)
0.59 polytools.py(223):             for monom, coeff in rep.items():
0.59 polytools.py(224):                 rep[monom] = domain.convert(coeff)
0.59 polytools.py(223):             for monom, coeff in rep.items():
0.59 polytools.py(226):         return cls.new(DMP.from_dict(rep, level, domain), *gens)
0.59 polytools.py(163):         if not isinstance(rep, DMP):
0.59 polytools.py(166):         elif rep.lev != len(gens) - 1:
0.59 polytools.py(169):         expr = basic_from_dict(rep.to_sympy_dict(), *gens)
0.59 polytools.py(171):         obj = Basic.__new__(cls, expr, *gens)
0.59 polytools.py(172):         obj.rep = rep
0.59 polytools.py(174):         return obj
0.59 polytools.py(4290):     if opt.polys is None:
0.59 polytools.py(4291):         opt.polys = False
0.59 polytools.py(4293):     return poly, opt
0.59 polytools.py(5927):             func = getattr(poly, method + '_list')
0.59 polytools.py(5929):             _coeff, _factors = func()
0.59 polytools.py(3232):         if hasattr(f.rep, 'sqf_list'):
0.59 polytools.py(3233):             coeff, factors = f.rep.sqf_list(all)
0.59 polytools.py(3237):         return f.rep.dom.to_sympy(coeff), [(f.per(g), k) for g, k in factors]
0.59 polytools.py(3237):         return f.rep.dom.to_sympy(coeff), [(f.per(g), k) for g, k in factors]
0.59 polytools.py(477):         if gens is None:
0.59 polytools.py(478):             gens = f.gens
0.59 polytools.py(182):         return self.args[1:]
0.59 polytools.py(480):         if remove is not None:
0.59 polytools.py(486):         return f.__class__.new(rep, *gens)
0.59 polytools.py(163):         if not isinstance(rep, DMP):
0.59 polytools.py(166):         elif rep.lev != len(gens) - 1:
0.59 polytools.py(169):         expr = basic_from_dict(rep.to_sympy_dict(), *gens)
0.59 polytools.py(171):         obj = Basic.__new__(cls, expr, *gens)
0.59 polytools.py(172):         obj.rep = rep
0.59 polytools.py(174):         return obj
0.59 polytools.py(3237):         return f.rep.dom.to_sympy(coeff), [(f.per(g), k) for g, k in factors]
0.59 polytools.py(5930):             if _coeff is not S.One:
0.59 polytools.py(5938):             if exp is S.One:
0.59 polytools.py(5939):                 factors.extend(_factors)
0.59 polytools.py(5904):     for arg in args:
0.59 polytools.py(5953):     return coeff, factors
0.59 polytools.py(5985):         cq, fq = _symbolic_factor_list(denom, opt, method)
0.59 polytools.py(5900):     coeff, factors = S.One, []
0.59 polytools.py(5902):     args = [i._eval_factor() if hasattr(i, '_eval_factor') else i
0.59 polytools.py(5903):         for i in Mul.make_args(expr)]
0.59 polytools.py(5902):     args = [i._eval_factor() if hasattr(i, '_eval_factor') else i
0.59 polytools.py(5902):     args = [i._eval_factor() if hasattr(i, '_eval_factor') else i
0.59 polytools.py(5903):         for i in Mul.make_args(expr)]
0.59 polytools.py(5902):     args = [i._eval_factor() if hasattr(i, '_eval_factor') else i
0.59 polytools.py(5902):     args = [i._eval_factor() if hasattr(i, '_eval_factor') else i
0.59 polytools.py(5904):     for arg in args:
0.59 polytools.py(5905):         if arg.is_Number:
0.59 polytools.py(5906):             coeff *= arg
0.59 polytools.py(5907):             continue
0.59 polytools.py(5904):     for arg in args:
0.59 polytools.py(5953):     return coeff, factors
0.59 polytools.py(5987):         if fq and not opt.frac:
0.59 polytools.py(5990):         _opt = opt.clone(dict(expand=True))
0.59 polytools.py(5992):         for factors in (fp, fq):
0.59 polytools.py(5993):             for i, (f, k) in enumerate(factors):
0.59 polytools.py(5994):                 if not f.is_Poly:
0.59 polytools.py(5993):             for i, (f, k) in enumerate(factors):
0.59 polytools.py(5994):                 if not f.is_Poly:
0.59 polytools.py(5993):             for i, (f, k) in enumerate(factors):
0.59 polytools.py(5994):                 if not f.is_Poly:
0.59 polytools.py(5993):             for i, (f, k) in enumerate(factors):
0.59 polytools.py(5994):                 if not f.is_Poly:
0.59 polytools.py(5993):             for i, (f, k) in enumerate(factors):
0.59 polytools.py(5992):         for factors in (fp, fq):
0.59 polytools.py(5993):             for i, (f, k) in enumerate(factors):
0.59 polytools.py(5992):         for factors in (fp, fq):
0.59 polytools.py(5998):         fp = _sorted_factors(fp, method)
0.59 polytools.py(5879):     if method == 'sqf':
0.59 polytools.py(5880):         def key(obj):
0.59 polytools.py(5890):     return sorted(factors, key=key)
0.59 polytools.py(5881):             poly, exp = obj
0.59 polytools.py(5882):             rep = poly.rep.rep
0.59 polytools.py(5883):             return (exp, len(rep), len(poly.gens), rep)
0.59 polytools.py(182):         return self.args[1:]
0.59 polytools.py(5881):             poly, exp = obj
0.59 polytools.py(5882):             rep = poly.rep.rep
0.59 polytools.py(5883):             return (exp, len(rep), len(poly.gens), rep)
0.59 polytools.py(182):         return self.args[1:]
0.59 polytools.py(5881):             poly, exp = obj
0.59 polytools.py(5882):             rep = poly.rep.rep
0.59 polytools.py(5883):             return (exp, len(rep), len(poly.gens), rep)
0.59 polytools.py(182):         return self.args[1:]
0.59 polytools.py(5881):             poly, exp = obj
0.59 polytools.py(5882):             rep = poly.rep.rep
0.59 polytools.py(5883):             return (exp, len(rep), len(poly.gens), rep)
0.59 polytools.py(182):         return self.args[1:]
0.59 polytools.py(5999):         fq = _sorted_factors(fq, method)
0.59 polytools.py(5879):     if method == 'sqf':
0.59 polytools.py(5880):         def key(obj):
0.59 polytools.py(5890):     return sorted(factors, key=key)
0.59 polytools.py(6001):         if not opt.polys:
0.59 polytools.py(6002):             fp = [(f.as_expr(), k) for f, k in fp]
0.59 polytools.py(6002):             fp = [(f.as_expr(), k) for f, k in fp]
0.59 polytools.py(1022):         if not gens:
0.59 polytools.py(1023):             return f.expr
0.59 polytools.py(178):         return self.args[0]
0.59 polytools.py(6002):             fp = [(f.as_expr(), k) for f, k in fp]
0.59 polytools.py(1022):         if not gens:
0.59 polytools.py(1023):             return f.expr
0.59 polytools.py(178):         return self.args[0]
0.59 polytools.py(6002):             fp = [(f.as_expr(), k) for f, k in fp]
0.59 polytools.py(1022):         if not gens:
0.59 polytools.py(1023):             return f.expr
0.59 polytools.py(178):         return self.args[0]
0.59 polytools.py(6002):             fp = [(f.as_expr(), k) for f, k in fp]
0.59 polytools.py(1022):         if not gens:
0.59 polytools.py(1023):             return f.expr
0.59 polytools.py(178):         return self.args[0]
0.59 polytools.py(6002):             fp = [(f.as_expr(), k) for f, k in fp]
0.60 polytools.py(6003):             fq = [(f.as_expr(), k) for f, k in fq]
0.60 polytools.py(6003):             fq = [(f.as_expr(), k) for f, k in fq]
0.60 polytools.py(6005):         coeff = cp/cq
0.60 polytools.py(6007):         if not opt.frac:
0.60 polytools.py(6008):             return coeff, fp
F                                    [FAIL]


________________________________________________________________________________
 sympy/polys/tests/test_coverup_sympy__sympy-18698.py:test_sqf_list_incorrect_multiplicity 
Traceback (most recent call last):
  File "/testbed/sympy/polys/tests/test_coverup_sympy__sympy-18698.py", line 17, in test_sqf_list_incorrect_multiplicity
    assert result[1] == [(x**2 + 1, 1), (x - 1, 2), (x - 2, 3), (x - 3, 3)]
AssertionError

============= tests finished: 0 passed, 1 failed, in 0.14 seconds ==============
DO *NOT* COMMIT!
polytools.py(4250): def poly_from_expr(expr, *gens, **args):
0.60 polytools.py(4256): def _poly_from_expr(expr, opt):
0.60 polytools.py(4296): @public
0.60 polytools.py(4297): def parallel_poly_from_expr(exprs, *gens, **args):
0.60 polytools.py(4303): def _parallel_poly_from_expr(exprs, opt):
0.60 polytools.py(4398): def _update_args(args, key, value):
0.60 polytools.py(4408): @public
0.60 polytools.py(4409): def degree(f, gen=0):
0.60 polytools.py(4467): @public
0.60 polytools.py(4468): def total_degree(f, *gens):
0.60 polytools.py(4520): @public
0.60 polytools.py(4521): def degree_list(f, *gens, **args):
0.60 polytools.py(4547): @public
0.60 polytools.py(4548): def LC(f, *gens, **args):
0.60 polytools.py(4572): @public
0.60 polytools.py(4573): def LM(f, *gens, **args):
0.60 polytools.py(4598): @public
0.60 polytools.py(4599): def LT(f, *gens, **args):
0.60 polytools.py(4624): @public
0.60 polytools.py(4625): def pdiv(f, g, *gens, **args):
0.60 polytools.py(4654): @public
0.60 polytools.py(4655): def prem(f, g, *gens, **args):
0.60 polytools.py(4684): @public
0.60 polytools.py(4685): def pquo(f, g, *gens, **args):
0.60 polytools.py(4719): @public
0.60 polytools.py(4720): def pexquo(f, g, *gens, **args):
0.60 polytools.py(4754): @public
0.60 polytools.py(4755): def div(f, g, *gens, **args):
0.60 polytools.py(4786): @public
0.60 polytools.py(4787): def rem(f, g, *gens, **args):
0.60 polytools.py(4818): @public
0.60 polytools.py(4819): def quo(f, g, *gens, **args):
0.60 polytools.py(4850): @public
0.60 polytools.py(4851): def exquo(f, g, *gens, **args):
0.60 polytools.py(4885): @public
0.60 polytools.py(4886): def half_gcdex(f, g, *gens, **args):
0.60 polytools.py(4924): @public
0.60 polytools.py(4925): def gcdex(f, g, *gens, **args):
0.60 polytools.py(4963): @public
0.60 polytools.py(4964): def invert(f, g, *gens, **args):
0.60 polytools.py(5017): @public
0.60 polytools.py(5018): def subresultants(f, g, *gens, **args):
0.60 polytools.py(5047): @public
0.60 polytools.py(5048): def resultant(f, g, *gens, **args):
0.60 polytools.py(5085): @public
0.60 polytools.py(5086): def discriminant(f, *gens, **args):
0.60 polytools.py(5115): @public
0.60 polytools.py(5116): def cofactors(f, g, *gens, **args):
0.60 polytools.py(5156): @public
0.60 polytools.py(5157): def gcd_list(seq, *gens, **args):
0.60 polytools.py(5240): @public
0.60 polytools.py(5241): def gcd(f, g=None, *gens, **args):
0.60 polytools.py(5291): @public
0.60 polytools.py(5292): def lcm_list(seq, *gens, **args):
0.60 polytools.py(5369): @public
0.60 polytools.py(5370): def lcm(f, g=None, *gens, **args):
0.60 polytools.py(5420): @public
0.60 polytools.py(5421): def terms_gcd(f, *gens, **args):
0.60 polytools.py(5539): @public
0.60 polytools.py(5540): def trunc(f, p, *gens, **args):
0.60 polytools.py(5569): @public
0.60 polytools.py(5570): def monic(f, *gens, **args):
0.60 polytools.py(5599): @public
0.60 polytools.py(5600): def content(f, *gens, **args):
0.60 polytools.py(5624): @public
0.60 polytools.py(5625): def primitive(f, *gens, **args):
0.60 polytools.py(5670): @public
0.60 polytools.py(5671): def compose(f, g, *gens, **args):
0.60 polytools.py(5700): @public
0.60 polytools.py(5701): def decompose(f, *gens, **args):
0.60 polytools.py(5730): @public
0.60 polytools.py(5731): def sturm(f, *gens, **args):
0.60 polytools.py(5760): @public
0.60 polytools.py(5761): def gff_list(f, *gens, **args):
0.60 polytools.py(5807): @public
0.60 polytools.py(5808): def gff(f, *gens, **args):
0.60 polytools.py(5813): @public
0.60 polytools.py(5814): def sqf_norm(f, *gens, **args):
0.60 polytools.py(5847): @public
0.60 polytools.py(5848): def sqf_part(f, *gens, **args):
0.60 polytools.py(5877): def _sorted_factors(factors, method):
0.60 polytools.py(5893): def _factors_product(factors):
0.60 polytools.py(5898): def _symbolic_factor_list(expr, opt, method):
0.60 polytools.py(5956): def _symbolic_factor(expr, opt, method):
0.60 polytools.py(5971): def _generic_factor_list(expr, gens, args, method):
0.60 polytools.py(6015): def _generic_factor(expr, gens, args, method):
0.60 polytools.py(6024): def to_rational_coeffs(f):
0.60 polytools.py(6159): def _torational_factor_list(p, x):
0.60 polytools.py(6203): @public
0.60 polytools.py(6204): def sqf_list(f, *gens, **args):
0.60 polytools.py(6221): @public
0.60 polytools.py(6222): def sqf(f, *gens, **args):
0.60 polytools.py(6239): @public
0.60 polytools.py(6240): def factor_list(f, *gens, **args):
0.60 polytools.py(6257): @public
0.60 polytools.py(6258): def factor(f, *gens, **args):
0.60 polytools.py(6358): @public
0.60 polytools.py(6359): def intervals(F, all=False, eps=None, inf=None, sup=None, strict=False, fast=False, sqf=False):
0.60 polytools.py(6414): @public
0.60 polytools.py(6415): def refine_root(f, s, t, eps=None, steps=None, fast=False, check_sqf=False):
0.60 polytools.py(6438): @public
0.60 polytools.py(6439): def count_roots(f, inf=None, sup=None):
0.60 polytools.py(6466): @public
0.60 polytools.py(6467): def real_roots(f, multiple=True):
0.60 polytools.py(6490): @public
0.60 polytools.py(6491): def nroots(f, n=15, maxsteps=50, cleanup=True):
0.60 polytools.py(6516): @public
0.60 polytools.py(6517): def ground_roots(f, *gens, **args):
0.60 polytools.py(6541): @public
0.60 polytools.py(6542): def nth_power_roots_poly(f, n, *gens, **args):
0.60 polytools.py(6580): @public
0.60 polytools.py(6581): def cancel(f, *gens, **args):
0.60 polytools.py(6667): @public
0.60 polytools.py(6668): def reduced(f, G, *gens, **args):
0.60 polytools.py(6727): @public
0.60 polytools.py(6728): def groebner(F, *gens, **args):
0.60 polytools.py(6781): @public
0.60 polytools.py(6782): def is_zero_dimensional(F, *gens, **args):
0.60 polytools.py(6799): @public
0.60 polytools.py(6800): class GroebnerBasis(Basic):
0.60 polytools.py(6799): @public
0.60 polytools.py(6801):     """Represents a reduced Groebner basis. """
0.60 polytools.py(6803):     def __new__(cls, F, *gens, **args):
0.60 polytools.py(6822):     @classmethod
0.60 polytools.py(6823):     def _new(cls, basis, options):
0.60 polytools.py(6831):     @property
0.60 polytools.py(6832):     def args(self):
0.60 polytools.py(6836):     @property
0.60 polytools.py(6837):     def exprs(self):
0.60 polytools.py(6840):     @property
0.60 polytools.py(6841):     def polys(self):
0.60 polytools.py(6844):     @property
0.60 polytools.py(6845):     def gens(self):
0.60 polytools.py(6848):     @property
0.60 polytools.py(6849):     def domain(self):
0.60 polytools.py(6852):     @property
0.60 polytools.py(6853):     def order(self):
0.60 polytools.py(6856):     def __len__(self):
0.60 polytools.py(6859):     def __iter__(self):
0.60 polytools.py(6865):     def __getitem__(self, item):
0.60 polytools.py(6873):     def __hash__(self):
0.60 polytools.py(6876):     def __eq__(self, other):
0.60 polytools.py(6884):     def __ne__(self, other):
0.60 polytools.py(6887):     @property
0.60 polytools.py(6888):     def is_zero_dimensional(self):
0.60 polytools.py(6919):     def fglm(self, order):
0.60 polytools.py(6985):     def reduce(self, expr, auto=True):
0.60 polytools.py(7050):     def contains(self, poly):
0.60 polytools.py(7072): @public
0.60 polytools.py(7073): def poly(expr, *gens, **args):
+ cat coverage.cover
{"/testbed/sympy/polys/polytools.py": {"3": 1, "5": 1, "7": 1, "10": 1, "11": 1, "12": 1, "13": 1, "14": 1, "15": 1, "16": 1, "17": 1, "18": 1, "19": 1, "20": 1, "21": 1, "22": 1, "23": 1, "24": 1, "25": 1, "26": 1, "27": 1, "37": 1, "45": 1, "46": 1, "47": 1, "48": 1, "51": 1, "53": 1, "54": 1, "58": 1, "87": 2, "88": 1, "4155": 2, "4156": 1, "4249": 1, "4250": 1, "4256": 1, "4296": 1, "4297": 1, "4303": 1, "4398": 1, "4408": 1, "4409": 1, "4467": 1, "4468": 1, "4520": 1, "4521": 1, "4547": 1, "4548": 1, "4572": 1, "4573": 1, "4598": 1, "4599": 1, "4624": 1, "4625": 1, "4654": 1, "4655": 1, "4684": 1, "4685": 1, "4719": 1, "4720": 1, "4754": 1, "4755": 1, "4786": 1, "4787": 1, "4818": 1, "4819": 1, "4850": 1, "4851": 1, "4885": 1, "4886": 1, "4924": 1, "4925": 1, "4963": 1, "4964": 1, "5017": 1, "5018": 1, "5047": 1, "5048": 1, "5085": 1, "5086": 1, "5115": 1, "5116": 1, "5156": 1, "5157": 1, "5240": 1, "5241": 1, "5291": 1, "5292": 1, "5369": 1, "5370": 1, "5420": 1, "5421": 1, "5539": 1, "5540": 1, "5569": 1, "5570": 1, "5599": 1, "5600": 1, "5624": 1, "5625": 1, "5670": 1, "5671": 1, "5700": 1, "5701": 1, "5730": 1, "5731": 1, "5760": 1, "5761": 1, "5807": 1, "5808": 1, "5813": 1, "5814": 1, "5847": 1, "5848": 1, "5877": 1, "5893": 1, "5898": 1, "5956": 1, "5971": 1, "6015": 1, "6024": 1, "6159": 1, "6203": 1, "6204": 1, "6221": 1, "6222": 1, "6239": 1, "6240": 1, "6257": 1, "6258": 1, "6358": 1, "6359": 1, "6414": 1, "6415": 1, "6438": 1, "6439": 1, "6466": 1, "6467": 1, "6490": 1, "6491": 1, "6516": 1, "6517": 1, "6541": 1, "6542": 1, "6580": 1, "6581": 1, "6667": 1, "6668": 1, "6727": 1, "6728": 1, "6781": 1, "6782": 1, "6799": 2, "6800": 1, "7072": 1, "7073": 1, "59": 12, "60": 12, "83": 12, "61": 0, "62": 0, "63": 0, "64": 0, "65": 0, "66": 0, "67": 0, "68": 0, "69": 0, "70": 0, "71": 0, "72": 0, "73": 0, "74": 0, "75": 0, "76": 0, "77": 0, "78": 0, "80": 0, "82": 0, "134": 1, "136": 1, "137": 1, "138": 1, "140": 1, "160": 1, "161": 1, "176": 1, "177": 1, "180": 1, "181": 1, "184": 1, "185": 1, "190": 1, "191": 1, "196": 1, "197": 1, "202": 1, "203": 1, "208": 1, "209": 1, "228": 1, "229": 1, "250": 1, "251": 1, "273": 1, "274": 1, "279": 1, "282": 1, "283": 1, "313": 1, "314": 1, "343": 1, "344": 1, "360": 1, "361": 1, "365": 1, "366": 1, "370": 1, "371": 1, "375": 1, "376": 1, "380": 1, "408": 1, "459": 1, "488": 1, "493": 1, "497": 1, "514": 1, "535": 1, "548": 1, "571": 1, "606": 1, "610": 1, "636": 1, "672": 1, "706": 1, "727": 1, "748": 1, "769": 1, "793": 1, "809": 1, "831": 1, "851": 1, "871": 1, "887": 1, "907": 1, "923": 1, "960": 1, "976": 1, "995": 1, "1002": 1, "1040": 1, "1066": 1, "1087": 1, "1108": 1, "1145": 1, "1187": 1, "1208": 1, "1229": 1, "1250": 1, "1271": 1, "1295": 1, "1321": 1, "1342": 1, "1366": 1, "1397": 1, "1428": 1, "1459": 1, "1483": 1, "1509": 1, "1532": 1, "1571": 1, "1599": 1, "1630": 1, "1669": 1, "1706": 1, "1743": 1, "1785": 1, "1805": 1, "1832": 1, "1851": 1, "1872": 1, "1906": 1, "1931": 1, "1955": 1, "1976": 1, "1995": 1, "2032": 1, "2066": 1, "2078": 1, "2098": 1, "2114": 1, "2135": 1, "2152": 1, "2173": 1, "2194": 1, "2233": 1, "2272": 1, "2312": 1, "2350": 1, "2352": 1, "2427": 1, "2449": 1, "2480": 1, "2513": 1, "2544": 1, "2578": 1, "2603": 1, "2640": 1, "2661": 1, "2736": 1, "2811": 1, "2840": 1, "2863": 1, "2886": 1, "2909": 1, "2938": 1, "2959": 1, "2980": 1, "3003": 1, "3024": 1, "3045": 1, "3071": 1, "3100": 1, "3123": 1, "3158": 1, "3189": 1, "3210": 1, "3239": 1, "3272": 1, "3299": 1, "3326": 1, "3402": 1, "3439": 1, "3502": 1, "3531": 1, "3554": 1, "3579": 1, "3653": 1, "3680": 1, "3720": 1, "3757": 1, "3758": 1, "3776": 1, "3777": 1, "3795": 1, "3796": 1, "3814": 1, "3815": 1, "3833": 1, "3834": 1, "3852": 1, "3853": 1, "3873": 1, "3874": 1, "3892": 1, "3893": 1, "3911": 1, "3912": 1, "3930": 1, "3931": 1, "3954": 1, "3955": 1, "3973": 1, "3974": 1, "3996": 1, "3997": 1, "4019": 1, "4020": 1, "4043": 1, "4046": 1, "4049": 1, "4050": 1, "4053": 1, "4054": 1, "4057": 1, "4058": 1, "4061": 1, "4062": 1, "4065": 1, "4066": 1, "4069": 1, "4070": 1, "4073": 1, "4074": 1, "4080": 1, "4081": 1, "4084": 1, "4085": 1, "4088": 1, "4089": 1, "4092": 1, "4093": 1, "4096": 1, "4097": 1, "4100": 1, "4101": 1, "4104": 1, "4105": 1, "4108": 1, "4109": 1, "4112": 1, "4113": 1, "4115": 1, "4116": 1, "4133": 1, "4134": 1, "4137": 1, "4140": 1, "4142": 1, "4148": 1, "4151": 1, "142": 0, "144": 0, "145": 0, "147": 0, "148": 0, "149": 0, "151": 0, "153": 0, "155": 0, "156": 0, "158": 0, "163": 8, "164": 0, "165": 0, "166": 8, "167": 0, "169": 8, "171": 8, "172": 8, "174": 8, "178": 4, "182": 8, "187": 0, "188": 0, "193": 0, "194": 0, "199": 0, "200": 0, "205": 0, "206": 0, "211": 4, "213": 4, "214": 0, "215": 0, "217": 4, "218": 4, "220": 4, "221": 0, "223": 12, "224": 8, "226": 4, "231": 0, "233": 0, "234": 0, "235": 0, "236": 0, "237": 0, "238": 0, "240": 0, "241": 0, "243": 0, "244": 0, "246": 0, "248": 0, "253": 0, "254": 0, "256": 0, "257": 0, "258": 0, "260": 0, "261": 0, "262": 0, "264": 0, "266": 0, "267": 0, "268": 0, "269": 0, "271": 0, "276": 0, "277": 0, "280": 0, "303": 0, "304": 0, "305": 0, "306": 0, "307": 0, "308": 0, "309": 0, "311": 0, "332": 0, "334": 0, "335": 0, "336": 0, "337": 0, "338": 0, "339": 0, "341": 0, "358": 0, "363": 0, "368": 0, "373": 0, "378": 0, "405": 0, "406": 0, "409": 0, "411": 0, "412": 0, "413": 0, "414": 0, "415": 0, "417": 0, "418": 0, "420": 0, "422": 0, "423": 0, "424": 0, "426": 0, "427": 0, "429": 0, "431": 0, "433": 0, "434": 0, "435": 0, "437": 0, "438": 0, "440": 0, "442": 0, "444": 0, "446": 0, "448": 0, "457": 0, "449": 0, "450": 0, "452": 0, "453": 0, "455": 0, "477": 4, "478": 4, "480": 4, "481": 0, "483": 0, "484": 0, "486": 4, "490": 0, "491": 0, "495": 0, "511": 0, "512": 0, "528": 0, "530": 0, "531": 0, "533": 0, "537": 0, "538": 0, "539": 0, "541": 0, "542": 0, "543": 0, "544": 0, "546": 0, "562": 0, "563": 0, "565": 0, "566": 0, "567": 0, "569": 0, "586": 0, "587": 0, "588": 0, "590": 0, "591": 0, "593": 0, "594": 0, "596": 0, "597": 0, "599": 0, "600": 0, "601": 0, "602": 0, "604": 0, "608": 0, "624": 0, "626": 0, "627": 0, "628": 0, "629": 0, "630": 0, "632": 0, "634": 0, "655": 0, "656": 0, "658": 0, "660": 0, "662": 0, "664": 0, "666": 0, "668": 0, "670": 0, "688": 0, "690": 0, "691": 0, "692": 0, "693": 0, "694": 0, "695": 0, "697": 0, "699": 0, "700": 0, "701": 0, "702": 0, "704": 0, "720": 0, "721": 0, "723": 0, "725": 0, "741": 0, "742": 0, "744": 0, "746": 0, "762": 0, "763": 0, "765": 0, "767": 0, "789": 0, "790": 0, "791": 0, "795": 0, "796": 0, "798": 0, "800": 0, "802": 0, "803": 0, "805": 0, "807": 0, "829": 0, "849": 0, "869": 0, "885": 0, "905": 0, "921": 0, "941": 0, "943": 0, "944": 0, "946": 0, "947": 0, "949": 0, "951": 0, "952": 0, "953": 0, "955": 0, "956": 0, "958": 0, "974": 0, "990": 0, "991": 0, "993": 0, "997": 0, "998": 0, "1000": 0, "1022": 4, "1023": 4, "1025": 0, "1026": 0, "1027": 0, "1029": 0, "1030": 0, "1031": 0, "1032": 0, "1033": 0, "1034": 0, "1036": 0, "1038": 0, "1056": 0, "1057": 0, "1059": 0, "1060": 0, "1062": 0, "1063": 0, "1064": 0, "1080": 0, "1081": 0, "1083": 0, "1085": 0, "1101": 0, "1102": 0, "1104": 0, "1106": 0, "1126": 0, "1128": 0, "1129": 0, "1130": 0, "1131": 0, "1133": 0, "1134": 0, "1136": 0, "1138": 0, "1139": 0, "1141": 0, "1143": 0, "1163": 0, "1165": 0, "1166": 0, "1168": 0, "1170": 0, "1171": 0, "1172": 0, "1173": 0, "1175": 0, "1176": 0, "1178": 0, "1180": 0, "1181": 0, "1183": 0, "1185": 0, "1201": 0, "1202": 0, "1204": 0, "1206": 0, "1222": 0, "1223": 0, "1225": 0, "1227": 0, "1243": 0, "1244": 0, "1246": 0, "1248": 0, "1264": 0, "1265": 0, "1267": 0, "1269": 0, "1288": 0, "1289": 0, "1291": 0, "1293": 0, "1314": 0, "1315": 0, "1317": 0, "1319": 0, "1335": 0, "1336": 0, "1338": 0, "1340": 0, "1359": 0, "1360": 0, "1362": 0, "1364": 0, "1383": 0, "1385": 0, "1386": 0, "1388": 0, "1390": 0, "1391": 0, "1393": 0, "1395": 0, "1414": 0, "1416": 0, "1417": 0, "1419": 0, "1421": 0, "1422": 0, "1424": 0, "1426": 0, "1445": 0, "1447": 0, "1448": 0, "1450": 0, "1452": 0, "1453": 0, "1455": 0, "1457": 0, "1476": 0, "1477": 0, "1479": 0, "1481": 0, "1500": 0, "1502": 0, "1503": 0, "1505": 0, "1507": 0, "1523": 0, "1525": 0, "1526": 0, "1528": 0, "1530": 0, "1562": 0, "1564": 0, "1565": 0, "1567": 0, "1569": 0, "1590": 0, "1592": 0, "1593": 0, "1595": 0, "1597": 0, "1618": 0, "1620": 0, "1621": 0, "1622": 0, "1623": 0, "1624": 0, "1626": 0, "1628": 0, "1647": 0, "1648": 0, "1650": 0, "1651": 0, "1652": 0, "1654": 0, "1655": 0, "1657": 0, "1659": 0, "1660": 0, "1661": 0, "1662": 0, "1663": 0, "1665": 0, "1667": 0, "1686": 0, "1687": 0, "1689": 0, "1690": 0, "1691": 0, "1693": 0, "1694": 0, "1696": 0, "1698": 0, "1699": 0, "1700": 0, "1701": 0, "1702": 0, "1704": 0, "1723": 0, "1724": 0, "1726": 0, "1727": 0, "1728": 0, "1730": 0, "1731": 0, "1733": 0, "1735": 0, "1736": 0, "1737": 0, "1738": 0, "1739": 0, "1741": 0, "1762": 0, "1763": 0, "1765": 0, "1766": 0, "1767": 0, "1769": 0, "1770": 0, "1771": 0, "1772": 0, "1773": 0, "1775": 0, "1777": 0, "1778": 0, "1779": 0, "1780": 0, "1781": 0, "1783": 0, "1787": 0, "1788": 0, "1790": 0, "1791": 0, "1792": 0, "1794": 0, "1796": 0, "1797": 0, "1799": 0, "1800": 0, "1801": 0, "1802": 0, "1803": 0, "1825": 0, "1827": 0, "1828": 0, "1830": 0, "1846": 0, "1847": 0, "1849": 0, "1867": 0, "1868": 0, "1870": 0, "1894": 0, "1895": 0, "1896": 0, "1897": 0, "1898": 0, "1900": 0, "1901": 0, "1902": 0, "1903": 0, "1904": 0, "1926": 0, "1927": 0, "1929": 0, "1945": 0, "1946": 0, "1948": 0, "1949": 0, "1951": 0, "1953": 0, "1969": 0, "1970": 0, "1972": 0, "1974": 0, "1990": 0, "1991": 0, "1993": 0, "2030": 0, "2057": 0, "2058": 0, "2059": 0, "2060": 0, "2062": 0, "2064": 0, "2073": 0, "2074": 0, "2096": 0, "2112": 0, "2132": 0, "2133": 0, "2149": 0, "2150": 0, "2166": 0, "2167": 0, "2169": 0, "2171": 0, "2187": 0, "2188": 0, "2190": 0, "2192": 0, "2212": 0, "2214": 0, "2215": 0, "2217": 0, "2218": 0, "2219": 0, "2221": 0, "2222": 0, "2224": 0, "2226": 0, "2228": 0, "2229": 0, "2231": 0, "2254": 0, "2256": 0, "2258": 0, "2259": 0, "2261": 0, "2262": 0, "2264": 0, "2265": 0, "2267": 0, "2268": 0, "2270": 0, "2289": 0, "2291": 0, "2292": 0, "2294": 0, "2295": 0, "2296": 0, "2298": 0, "2300": 0, "2301": 0, "2302": 0, "2304": 0, "2306": 0, "2308": 0, "2310": 0, "2329": 0, "2330": 0, "2332": 0, "2333": 0, "2334": 0, "2336": 0, "2338": 0, "2339": 0, "2340": 0, "2342": 0, "2344": 0, "2346": 0, "2348": 0, "2383": 0, "2385": 0, "2386": 0, "2387": 0, "2389": 0, "2390": 0, "2392": 0, "2393": 0, "2394": 0, "2396": 0, "2397": 0, "2399": 0, "2400": 0, "2402": 0, "2404": 0, "2406": 0, "2408": 0, "2409": 0, "2411": 0, "2412": 0, "2413": 0, "2414": 0, "2415": 0, "2417": 0, "2418": 0, "2420": 0, "2421": 0, "2423": 0, "2425": 0, "2447": 0, "2468": 0, "2470": 0, "2471": 0, "2473": 0, "2474": 0, "2476": 0, "2478": 0, "2501": 0, "2503": 0, "2504": 0, "2506": 0, "2507": 0, "2509": 0, "2511": 0, "2532": 0, "2534": 0, "2535": 0, "2537": 0, "2538": 0, "2540": 0, "2542": 0, "2571": 0, "2572": 0, "2574": 0, "2576": 0, "2594": 0, "2596": 0, "2597": 0, "2599": 0, "2601": 0, "2626": 0, "2628": 0, "2629": 0, "2630": 0, "2632": 0, "2634": 0, "2636": 0, "2637": 0, "2638": 0, "2654": 0, "2655": 0, "2657": 0, "2659": 0, "2733": 0, "2734": 0, "2808": 0, "2809": 0, "2831": 0, "2833": 0, "2834": 0, "2836": 0, "2838": 0, "2854": 0, "2856": 0, "2857": 0, "2859": 0, "2861": 0, "2877": 0, "2879": 0, "2880": 0, "2882": 0, "2884": 0, "2900": 0, "2902": 0, "2903": 0, "2905": 0, "2907": 0, "2926": 0, "2928": 0, "2929": 0, "2931": 0, "2932": 0, "2934": 0, "2936": 0, "2952": 0, "2953": 0, "2955": 0, "2957": 0, "2973": 0, "2974": 0, "2976": 0, "2978": 0, "2994": 0, "2996": 0, "2997": 0, "2999": 0, "3001": 0, "3017": 0, "3018": 0, "3020": 0, "3022": 0, "3038": 0, "3039": 0, "3041": 0, "3043": 0, "3060": 0, "3061": 0, "3062": 0, "3064": 0, "3065": 0, "3067": 0, "3069": 0, "3088": 0, "3090": 0, "3091": 0, "3093": 0, "3094": 0, "3096": 0, "3098": 0, "3116": 0, "3117": 0, "3119": 0, "3121": 0, "3151": 0, "3152": 0, "3154": 0, "3156": 0, "3182": 0, "3183": 0, "3185": 0, "3187": 0, "3203": 0, "3204": 0, "3206": 0, "3208": 0, "3232": 4, "3233": 4, "3235": 0, "3237": 12, "3265": 0, "3266": 0, "3268": 0, "3270": 0, "3289": 0, "3290": 0, "3291": 0, "3292": 0, "3293": 0, "3295": 0, "3297": 0, "3316": 0, "3317": 0, "3318": 0, "3319": 0, "3320": 0, "3322": 0, "3324": 0, "3352": 0, "3353": 0, "3355": 0, "3356": 0, "3358": 0, "3359": 0, "3360": 0, "3361": 0, "3363": 0, "3364": 0, "3365": 0, "3367": 0, "3369": 0, "3370": 0, "3374": 0, "3375": 0, "3377": 0, "3382": 0, "3384": 0, "3386": 0, "3390": 0, "3391": 0, "3393": 0, "3398": 0, "3400": 0, "3371": 0, "3372": 0, "3378": 0, "3379": 0, "3380": 0, "3387": 0, "3388": 0, "3394": 0, "3395": 0, "3396": 0, "3416": 0, "3417": 0, "3419": 0, "3421": 0, "3422": 0, "3424": 0, "3425": 0, "3427": 0, "3428": 0, "3429": 0, "3430": 0, "3432": 0, "3433": 0, "3435": 0, "3437": 0, "3455": 0, "3457": 0, "3458": 0, "3460": 0, "3461": 0, "3463": 0, "3465": 0, "3466": 0, "3468": 0, "3470": 0, "3471": 0, "3473": 0, "3474": 0, "3476": 0, "3478": 0, "3479": 0, "3481": 0, "3483": 0, "3484": 0, "3485": 0, "3487": 0, "3489": 0, "3490": 0, "3492": 0, "3493": 0, "3495": 0, "3496": 0, "3498": 0, "3500": 0, "3529": 0, "3547": 0, "3549": 0, "3550": 0, "3552": 0, "3572": 0, "3574": 0, "3575": 0, "3577": 0, "3604": 0, "3605": 0, "3606": 0, "3607": 0, "3609": 0, "3610": 0, "3615": 0, "3616": 0, "3617": 0, "3618": 0, "3619": 0, "3620": 0, "3621": 0, "3623": 0, "3624": 0, "3625": 0, "3626": 0, "3627": 0, "3628": 0, "3629": 0, "3631": 0, "3632": 0, "3634": 0, "3637": 0, "3638": 0, "3642": 0, "3643": 0, "3644": 0, "3645": 0, "3646": 0, "3647": 0, "3649": 0, "3651": 0, "3667": 0, "3668": 0, "3669": 0, "3671": 0, "3673": 0, "3674": 0, "3675": 0, "3676": 0, "3678": 0, "3702": 0, "3703": 0, "3704": 0, "3706": 0, "3708": 0, "3709": 0, "3711": 0, "3713": 0, "3714": 0, "3716": 0, "3718": 0, "3737": 0, "3739": 0, "3740": 0, "3742": 0, "3744": 0, "3745": 0, "3746": 0, "3748": 0, "3750": 0, "3751": 0, "3753": 0, "3755": 0, "3774": 0, "3793": 0, "3812": 0, "3831": 0, "3850": 0, "3871": 0, "3890": 0, "3909": 0, "3928": 0, "3952": 0, "3971": 0, "3994": 0, "4017": 0, "4041": 0, "4044": 0, "4047": 0, "4051": 0, "4055": 0, "4059": 0, "4063": 0, "4067": 0, "4071": 0, "4075": 0, "4076": 0, "4078": 0, "4082": 0, "4086": 0, "4090": 0, "4094": 0, "4098": 0, "4102": 0, "4106": 0, "4110": 0, "4117": 0, "4119": 0, "4120": 0, "4121": 0, "4122": 0, "4123": 0, "4125": 0, "4126": 0, "4128": 0, "4129": 0, "4131": 0, "4135": 0, "4138": 0, "4143": 0, "4144": 0, "4146": 0, "4149": 0, "4152": 0, "4159": 1, "4163": 1, "4166": 1, "4167": 1, "4187": 1, "4188": 1, "4211": 1, "4214": 1, "4161": 0, "4164": 0, "4185": 0, "4189": 0, "4191": 0, "4192": 0, "4193": 0, "4194": 0, "4195": 0, "4197": 0, "4198": 0, "4200": 0, "4201": 0, "4202": 0, "4203": 0, "4204": 0, "4206": 0, "4207": 0, "4209": 0, "4212": 0, "4215": 0, "4217": 0, "4218": 0, "4219": 0, "4220": 0, "4221": 0, "4223": 0, "4224": 0, "4226": 0, "4227": 0, "4229": 0, "4230": 0, "4232": 0, "4234": 0, "4235": 0, "4237": 0, "4246": 0, "4238": 0, "4239": 0, "4241": 0, "4242": 0, "4244": 0, "4252": 0, "4253": 0, "4258": 4, "4260": 4, "4261": 0, "4262": 4, "4263": 0, "4265": 0, "4266": 0, "4268": 0, "4269": 0, "4271": 0, "4272": 4, "4273": 4, "4275": 4, "4276": 4, "4277": 0, "4279": 4, "4280": 4, "4282": 4, "4283": 4, "4285": 0, "4287": 4, "4288": 4, "4290": 4, "4291": 4, "4293": 4, "4299": 0, "4300": 0, "4305": 0, "4307": 0, "4308": 0, "4310": 0, "4311": 0, "4312": 0, "4314": 0, "4316": 0, "4317": 0, "4319": 0, "4320": 0, "4322": 0, "4324": 0, "4325": 0, "4327": 0, "4329": 0, "4330": 0, "4332": 0, "4333": 0, "4334": 0, "4336": 0, "4338": 0, "4339": 0, "4341": 0, "4343": 0, "4345": 0, "4346": 0, "4348": 0, "4350": 0, "4351": 0, "4353": 0, "4354": 0, "4355": 0, "4357": 0, "4358": 0, "4359": 0, "4361": 0, "4363": 0, "4364": 0, "4366": 0, "4367": 0, "4369": 0, "4370": 0, "4372": 0, "4374": 0, "4376": 0, "4377": 0, "4379": 0, "4381": 0, "4382": 0, "4383": 0, "4385": 0, "4387": 0, "4388": 0, "4389": 0, "4390": 0, "4392": 0, "4393": 0, "4395": 0, "4400": 0, "4402": 0, "4403": 0, "4405": 0, "4435": 0, "4436": 0, "4437": 0, "4438": 0, "4439": 0, "4441": 0, "4442": 0, "4443": 0, "4444": 0, "4446": 0, "4448": 0, "4449": 0, "4451": 0, "4452": 0, "4454": 0, "4455": 0, "4456": 0, "4457": 0, "4458": 0, "4462": 0, "4464": 0, "4507": 0, "4508": 0, "4509": 0, "4510": 0, "4511": 0, "4513": 0, "4514": 0, "4515": 0, "4517": 0, "4535": 0, "4537": 0, "4538": 0, "4539": 0, "4540": 0, "4542": 0, "4544": 0, "4562": 0, "4564": 0, "4565": 0, "4566": 0, "4567": 0, "4569": 0, "4587": 0, "4589": 0, "4590": 0, "4591": 0, "4592": 0, "4594": 0, "4595": 0, "4613": 0, "4615": 0, "4616": 0, "4617": 0, "4618": 0, "4620": 0, "4621": 0, "4639": 0, "4641": 0, "4642": 0, "4643": 0, "4644": 0, "4646": 0, "4648": 0, "4649": 0, "4651": 0, "4669": 0, "4671": 0, "4672": 0, "4673": 0, "4674": 0, "4676": 0, "4678": 0, "4679": 0, "4681": 0, "4701": 0, "4703": 0, "4704": 0, "4705": 0, "4706": 0, "4708": 0, "4709": 0, "4710": 0, "4711": 0, "4713": 0, "4714": 0, "4716": 0, "4739": 0, "4741": 0, "4742": 0, "4743": 0, "4744": 0, "4746": 0, "4748": 0, "4749": 0, "4751": 0, "4771": 0, "4773": 0, "4774": 0, "4775": 0, "4776": 0, "4778": 0, "4780": 0, "4781": 0, "4783": 0, "4803": 0, "4805": 0, "4806": 0, "4807": 0, "4808": 0, "4810": 0, "4812": 0, "4813": 0, "4815": 0, "4835": 0, "4837": 0, "4838": 0, "4839": 0, "4840": 0, "4842": 0, "4844": 0, "4845": 0, "4847": 0, "4870": 0, "4872": 0, "4873": 0, "4874": 0, "4875": 0, "4877": 0, "4879": 0, "4880": 0, "4882": 0, "4902": 0, "4904": 0, "4905": 0, "4906": 0, "4907": 0, "4909": 0, "4910": 0, "4911": 0, "4912": 0, "4914": 0, "4916": 0, "4918": 0, "4919": 0, "4921": 0, "4941": 0, "4943": 0, "4944": 0, "4945": 0, "4946": 0, "4948": 0, "4949": 0, "4950": 0, "4951": 0, "4953": 0, "4955": 0, "4957": 0, "4958": 0, "4960": 0, "4997": 0, "4999": 0, "5000": 0, "5001": 0, "5002": 0, "5004": 0, "5005": 0, "5006": 0, "5007": 0, "5009": 0, "5011": 0, "5012": 0, "5014": 0, "5032": 0, "5034": 0, "5035": 0, "5036": 0, "5037": 0, "5039": 0, "5041": 0, "5042": 0, "5044": 0, "5062": 0, "5063": 0, "5065": 0, "5066": 0, "5067": 0, "5068": 0, "5070": 0, "5071": 0, "5073": 0, "5075": 0, "5076": 0, "5077": 0, "5078": 0, "5080": 0, "5081": 0, "5082": 0, "5100": 0, "5102": 0, "5103": 0, "5104": 0, "5105": 0, "5107": 0, "5109": 0, "5110": 0, "5112": 0, "5134": 0, "5136": 0, "5137": 0, "5138": 0, "5139": 0, "5141": 0, "5142": 0, "5143": 0, "5144": 0, "5146": 0, "5148": 0, "5150": 0, "5151": 0, "5153": 0, "5171": 0, "5173": 0, "5192": 0, "5194": 0, "5195": 0, "5197": 0, "5199": 0, "5200": 0, "5203": 0, "5204": 0, "5205": 0, "5206": 0, "5207": 0, "5208": 0, "5209": 0, "5210": 0, "5212": 0, "5213": 0, "5215": 0, "5216": 0, "5218": 0, "5220": 0, "5221": 0, "5222": 0, "5224": 0, "5226": 0, "5228": 0, "5229": 0, "5231": 0, "5232": 0, "5234": 0, "5235": 0, "5237": 0, "5174": 0, "5175": 0, "5177": 0, "5178": 0, "5179": 0, "5180": 0, "5182": 0, "5183": 0, "5185": 0, "5186": 0, "5188": 0, "5190": 0, "5255": 0, "5256": 0, "5257": 0, "5259": 0, "5260": 0, "5261": 0, "5263": 0, "5265": 0, "5266": 0, "5269": 0, "5270": 0, "5271": 0, "5272": 0, "5273": 0, "5275": 0, "5276": 0, "5278": 0, "5279": 0, "5280": 0, "5281": 0, "5283": 0, "5285": 0, "5286": 0, "5288": 0, "5306": 0, "5308": 0, "5324": 0, "5326": 0, "5327": 0, "5329": 0, "5331": 0, "5332": 0, "5335": 0, "5336": 0, "5337": 0, "5338": 0, "5339": 0, "5340": 0, "5341": 0, "5342": 0, "5344": 0, "5345": 0, "5347": 0, "5348": 0, "5350": 0, "5352": 0, "5353": 0, "5354": 0, "5356": 0, "5358": 0, "5360": 0, "5361": 0, "5363": 0, "5364": 0, "5366": 0, "5309": 0, "5310": 0, "5312": 0, "5313": 0, "5314": 0, "5315": 0, "5317": 0, "5318": 0, "5320": 0, "5322": 0, "5384": 0, "5385": 0, "5386": 0, "5388": 0, "5389": 0, "5390": 0, "5392": 0, "5394": 0, "5395": 0, "5398": 0, "5399": 0, "5400": 0, "5401": 0, "5402": 0, "5404": 0, "5405": 0, "5407": 0, "5408": 0, "5409": 0, "5410": 0, "5412": 0, "5414": 0, "5415": 0, "5417": 0, "5486": 0, "5488": 0, "5490": 0, "5491": 0, "5492": 0, "5493": 0, "5495": 0, "5496": 0, "5498": 0, "5499": 0, "5500": 0, "5501": 0, "5502": 0, "5504": 0, "5505": 0, "5507": 0, "5508": 0, "5509": 0, "5510": 0, "5512": 0, "5514": 0, "5515": 0, "5516": 0, "5518": 0, "5520": 0, "5521": 0, "5523": 0, "5525": 0, "5526": 0, "5527": 0, "5528": 0, "5529": 0, "5531": 0, "5532": 0, "5535": 0, "5536": 0, "5554": 0, "5556": 0, "5557": 0, "5558": 0, "5559": 0, "5561": 0, "5563": 0, "5564": 0, "5566": 0, "5584": 0, "5586": 0, "5587": 0, "5588": 0, "5589": 0, "5591": 0, "5593": 0, "5594": 0, "5596": 0, "5614": 0, "5616": 0, "5617": 0, "5618": 0, "5619": 0, "5621": 0, "5656": 0, "5658": 0, "5659": 0, "5660": 0, "5661": 0, "5663": 0, "5664": 0, "5665": 0, "5667": 0, "5685": 0, "5687": 0, "5688": 0, "5689": 0, "5690": 0, "5692": 0, "5694": 0, "5695": 0, "5697": 0, "5715": 0, "5717": 0, "5718": 0, "5719": 0, "5720": 0, "5722": 0, "5724": 0, "5725": 0, "5727": 0, "5745": 0, "5747": 0, "5748": 0, "5749": 0, "5750": 0, "5752": 0, "5754": 0, "5755": 0, "5757": 0, "5792": 0, "5794": 0, "5795": 0, "5796": 0, "5797": 0, "5799": 0, "5801": 0, "5802": 0, "5804": 0, "5810": 0, "5832": 0, "5834": 0, "5835": 0, "5836": 0, "5837": 0, "5839": 0, "5841": 0, "5842": 0, "5844": 0, "5862": 0, "5864": 0, "5865": 0, "5866": 0, "5867": 0, "5869": 0, "5871": 0, "5872": 0, "5874": 0, "5879": 2, "5880": 2, "5885": 0, "5890": 2, "5881": 4, "5882": 4, "5883": 4, "5886": 0, "5887": 0, "5888": 0, "5895": 0, "5900": 2, "5902": 16, "5903": 7, "5904": 7, "5905": 5, "5906": 1, "5907": 1, "5908": 4, "5909": 0, "5910": 0, "5911": 4, "5912": 3, "5913": 3, "5914": 0, "5915": 0, "5916": 3, "5917": 0, "5918": 0, "5920": 1, "5922": 4, "5923": 4, "5924": 0, "5925": 0, "5927": 4, "5929": 4, "5930": 4, "5931": 0, "5932": 0, "5933": 0, "5934": 0, "5936": 0, "5938": 4, "5939": 1, "5940": 3, "5941": 9, "5943": 0, "5945": 0, "5946": 0, "5947": 0, "5949": 0, "5951": 0, "5953": 2, "5958": 0, "5959": 0, "5960": 0, "5961": 0, "5962": 0, "5963": 0, "5964": 0, "5965": 0, "5966": 0, "5968": 0, "5973": 1, "5974": 1, "5976": 1, "5978": 1, "5979": 1, "5980": 0, "5982": 1, "5984": 1, "5985": 1, "5987": 1, "5988": 0, "5990": 1, "5992": 3, "5993": 6, "5994": 4, "5995": 0, "5996": 0, "5998": 1, "5999": 1, "6001": 1, "6002": 6, "6003": 2, "6005": 1, "6007": 1, "6008": 1, "6010": 0, "6012": 0, "6017": 0, "6018": 0, "6019": 0, "6020": 0, "6021": 0, "6062": 0, "6064": 0, "6099": 0, "6127": 0, "6147": 0, "6148": 0, "6149": 0, "6150": 0, "6151": 0, "6153": 0, "6154": 0, "6155": 0, "6156": 0, "6072": 0, "6073": 0, "6074": 0, "6075": 0, "6076": 0, "6077": 0, "6078": 0, "6079": 0, "6080": 0, "6081": 0, "6082": 0, "6083": 0, "6084": 0, "6085": 0, "6086": 0, "6087": 0, "6089": 0, "6090": 0, "6091": 0, "6092": 0, "6093": 0, "6094": 0, "6095": 0, "6096": 0, "6097": 0, "6107": 0, "6108": 0, "6109": 0, "6110": 0, "6111": 0, "6112": 0, "6113": 0, "6114": 0, "6115": 0, "6116": 0, "6117": 0, "6118": 0, "6120": 0, "6121": 0, "6122": 0, "6123": 0, "6124": 0, "6125": 0, "6131": 0, "6132": 0, "6133": 0, "6134": 0, "6135": 0, "6136": 0, "6137": 0, "6139": 0, "6140": 0, "6141": 0, "6142": 0, "6143": 0, "6144": 0, "6145": 0, "6138": 0, "6181": 0, "6182": 0, "6183": 0, "6184": 0, "6185": 0, "6186": 0, "6187": 0, "6188": 0, "6189": 0, "6190": 0, "6191": 0, "6192": 0, "6193": 0, "6194": 0, "6196": 0, "6197": 0, "6198": 0, "6199": 0, "6200": 0, "6218": 1, "6236": 0, "6254": 0, "6325": 0, "6326": 0, "6327": 0, "6328": 0, "6337": 0, "6340": 0, "6341": 0, "6342": 0, "6343": 0, "6344": 0, "6345": 0, "6346": 0, "6348": 0, "6349": 0, "6350": 0, "6351": 0, "6352": 0, "6353": 0, "6355": 0, "6332": 0, "6333": 0, "6334": 0, "6335": 0, "6375": 0, "6376": 0, "6377": 0, "6378": 0, "6379": 0, "6381": 0, "6383": 0, "6385": 0, "6386": 0, "6388": 0, "6389": 0, "6391": 0, "6392": 0, "6394": 0, "6395": 0, "6397": 0, "6398": 0, "6399": 0, "6400": 0, "6402": 0, "6403": 0, "6405": 0, "6407": 0, "6408": 0, "6409": 0, "6411": 0, "6429": 0, "6430": 0, "6431": 0, "6432": 0, "6433": 0, "6435": 0, "6458": 0, "6459": 0, "6460": 0, "6461": 0, "6463": 0, "6481": 0, "6482": 0, "6483": 0, "6484": 0, "6485": 0, "6487": 0, "6507": 0, "6508": 0, "6509": 0, "6510": 0, "6511": 0, "6513": 0, "6531": 0, "6533": 0, "6534": 0, "6535": 0, "6536": 0, "6538": 0, "6565": 0, "6567": 0, "6568": 0, "6569": 0, "6570": 0, "6572": 0, "6574": 0, "6575": 0, "6577": 0, "6605": 0, "6606": 0, "6607": 0, "6609": 0, "6611": 0, "6612": 0, "6613": 0, "6614": 0, "6615": 0, "6617": 0, "6618": 0, "6619": 0, "6620": 0, "6622": 0, "6624": 0, "6625": 0, "6626": 0, "6627": 0, "6628": 0, "6630": 0, "6631": 0, "6632": 0, "6633": 0, "6635": 0, "6636": 0, "6638": 0, "6639": 0, "6640": 0, "6642": 0, "6643": 0, "6644": 0, "6645": 0, "6647": 0, "6648": 0, "6649": 0, "6650": 0, "6651": 0, "6652": 0, "6653": 0, "6654": 0, "6656": 0, "6658": 0, "6659": 0, "6661": 0, "6662": 0, "6664": 0, "6637": 0, "6687": 0, "6689": 0, "6690": 0, "6691": 0, "6692": 0, "6694": 0, "6695": 0, "6697": 0, "6698": 0, "6699": 0, "6701": 0, "6702": 0, "6704": 0, "6705": 0, "6706": 0, "6708": 0, "6710": 0, "6711": 0, "6713": 0, "6714": 0, "6715": 0, "6716": 0, "6717": 0, "6719": 0, "6721": 0, "6722": 0, "6724": 0, "6778": 0, "6796": 0, "6803": 1, "6822": 1, "6823": 1, "6831": 1, "6832": 1, "6836": 1, "6837": 1, "6840": 1, "6841": 1, "6844": 1, "6845": 1, "6848": 1, "6849": 1, "6852": 1, "6853": 1, "6856": 1, "6859": 1, "6865": 1, "6873": 1, "6876": 1, "6884": 1, "6887": 1, "6888": 1, "6919": 1, "6985": 1, "7050": 1, "6805": 0, "6807": 0, "6808": 0, "6809": 0, "6810": 0, "6812": 0, "6813": 0, "6815": 0, "6817": 0, "6818": 0, "6820": 0, "6824": 0, "6826": 0, "6827": 0, "6829": 0, "6833": 0, "6834": 0, "6838": 0, "6842": 0, "6846": 0, "6850": 0, "6854": 0, "6857": 0, "6860": 0, "6861": 0, "6863": 0, "6866": 0, "6867": 0, "6869": 0, "6871": 0, "6874": 0, "6877": 0, "6878": 0, "6879": 0, "6880": 0, "6882": 0, "6885": 0, "6902": 0, "6905": 0, "6906": 0, "6908": 0, "6909": 0, "6911": 0, "6912": 0, "6917": 0, "6903": 0, "6950": 0, "6952": 0, "6953": 0, "6955": 0, "6956": 0, "6958": 0, "6959": 0, "6961": 0, "6962": 0, "6964": 0, "6965": 0, "6966": 0, "6969": 0, "6970": 0, "6972": 0, "6973": 0, "6974": 0, "6976": 0, "6977": 0, "6979": 0, "6980": 0, "6981": 0, "6983": 0, "7013": 0, "7014": 0, "7016": 0, "7017": 0, "7019": 0, "7021": 0, "7022": 0, "7023": 0, "7025": 0, "7026": 0, "7028": 0, "7029": 0, "7030": 0, "7032": 0, "7034": 0, "7035": 0, "7037": 0, "7038": 0, "7039": 0, "7040": 0, "7041": 0, "7043": 0, "7045": 0, "7046": 0, "7048": 0, "7069": 0, "7087": 0, "7089": 0, "7141": 0, "7143": 0, "7144": 0, "7146": 0, "7147": 0, "7149": 0, "7151": 0, "7090": 0, "7092": 0, "7093": 0, "7095": 0, "7096": 0, "7097": 0, "7098": 0, "7099": 0, "7100": 0, "7101": 0, "7103": 0, "7105": 0, "7106": 0, "7108": 0, "7110": 0, "7111": 0, "7113": 0, "7114": 0, "7116": 0, "7117": 0, "7119": 0, "7121": 0, "7123": 0, "7124": 0, "7126": 0, "7128": 0, "7129": 0, "7131": 0, "7132": 0, "7134": 0, "7135": 0, "7137": 0, "7139": 0}}
{"/testbed/sympy/polys/polytools.py": {"3": 1, "5": 1, "7": 1, "10": 1, "11": 1, "12": 1, "13": 1, "14": 1, "15": 1, "16": 1, "17": 1, "18": 1, "19": 1, "20": 1, "21": 1, "22": 1, "23": 1, "24": 1, "25": 1, "26": 1, "27": 1, "37": 1, "45": 1, "46": 1, "47": 1, "48": 1, "51": 1, "53": 1, "54": 1, "58": 1, "87": 2, "88": 1, "4155": 2, "4156": 1, "4249": 1, "4250": 1, "4256": 1, "4296": 1, "4297": 1, "4303": 1, "4398": 1, "4408": 1, "4409": 1, "4467": 1, "4468": 1, "4520": 1, "4521": 1, "4547": 1, "4548": 1, "4572": 1, "4573": 1, "4598": 1, "4599": 1, "4624": 1, "4625": 1, "4654": 1, "4655": 1, "4684": 1, "4685": 1, "4719": 1, "4720": 1, "4754": 1, "4755": 1, "4786": 1, "4787": 1, "4818": 1, "4819": 1, "4850": 1, "4851": 1, "4885": 1, "4886": 1, "4924": 1, "4925": 1, "4963": 1, "4964": 1, "5017": 1, "5018": 1, "5047": 1, "5048": 1, "5085": 1, "5086": 1, "5115": 1, "5116": 1, "5156": 1, "5157": 1, "5240": 1, "5241": 1, "5291": 1, "5292": 1, "5369": 1, "5370": 1, "5420": 1, "5421": 1, "5539": 1, "5540": 1, "5569": 1, "5570": 1, "5599": 1, "5600": 1, "5624": 1, "5625": 1, "5670": 1, "5671": 1, "5700": 1, "5701": 1, "5730": 1, "5731": 1, "5760": 1, "5761": 1, "5807": 1, "5808": 1, "5813": 1, "5814": 1, "5847": 1, "5848": 1, "5877": 1, "5893": 1, "5898": 1, "5956": 1, "5971": 1, "6015": 1, "6024": 1, "6159": 1, "6203": 1, "6204": 1, "6221": 1, "6222": 1, "6239": 1, "6240": 1, "6257": 1, "6258": 1, "6358": 1, "6359": 1, "6414": 1, "6415": 1, "6438": 1, "6439": 1, "6466": 1, "6467": 1, "6490": 1, "6491": 1, "6516": 1, "6517": 1, "6541": 1, "6542": 1, "6580": 1, "6581": 1, "6667": 1, "6668": 1, "6727": 1, "6728": 1, "6781": 1, "6782": 1, "6799": 2, "6800": 1, "7072": 1, "7073": 1, "59": 12, "60": 12, "83": 12, "61": 0, "62": 0, "63": 0, "64": 0, "65": 0, "66": 0, "67": 0, "68": 0, "69": 0, "70": 0, "71": 0, "72": 0, "73": 0, "74": 0, "75": 0, "76": 0, "77": 0, "78": 0, "80": 0, "82": 0, "134": 1, "136": 1, "137": 1, "138": 1, "140": 1, "160": 1, "161": 1, "176": 1, "177": 1, "180": 1, "181": 1, "184": 1, "185": 1, "190": 1, "191": 1, "196": 1, "197": 1, "202": 1, "203": 1, "208": 1, "209": 1, "228": 1, "229": 1, "250": 1, "251": 1, "273": 1, "274": 1, "279": 1, "282": 1, "283": 1, "313": 1, "314": 1, "343": 1, "344": 1, "360": 1, "361": 1, "365": 1, "366": 1, "370": 1, "371": 1, "375": 1, "376": 1, "380": 1, "408": 1, "459": 1, "488": 1, "493": 1, "497": 1, "514": 1, "535": 1, "548": 1, "571": 1, "606": 1, "610": 1, "636": 1, "672": 1, "706": 1, "727": 1, "748": 1, "769": 1, "793": 1, "809": 1, "831": 1, "851": 1, "871": 1, "887": 1, "907": 1, "923": 1, "960": 1, "976": 1, "995": 1, "1002": 1, "1040": 1, "1066": 1, "1087": 1, "1108": 1, "1145": 1, "1187": 1, "1208": 1, "1229": 1, "1250": 1, "1271": 1, "1295": 1, "1321": 1, "1342": 1, "1366": 1, "1397": 1, "1428": 1, "1459": 1, "1483": 1, "1509": 1, "1532": 1, "1571": 1, "1599": 1, "1630": 1, "1669": 1, "1706": 1, "1743": 1, "1785": 1, "1805": 1, "1832": 1, "1851": 1, "1872": 1, "1906": 1, "1931": 1, "1955": 1, "1976": 1, "1995": 1, "2032": 1, "2066": 1, "2078": 1, "2098": 1, "2114": 1, "2135": 1, "2152": 1, "2173": 1, "2194": 1, "2233": 1, "2272": 1, "2312": 1, "2350": 1, "2352": 1, "2427": 1, "2449": 1, "2480": 1, "2513": 1, "2544": 1, "2578": 1, "2603": 1, "2640": 1, "2661": 1, "2736": 1, "2811": 1, "2840": 1, "2863": 1, "2886": 1, "2909": 1, "2938": 1, "2959": 1, "2980": 1, "3003": 1, "3024": 1, "3045": 1, "3071": 1, "3100": 1, "3123": 1, "3158": 1, "3189": 1, "3210": 1, "3239": 1, "3272": 1, "3299": 1, "3326": 1, "3402": 1, "3439": 1, "3502": 1, "3531": 1, "3554": 1, "3579": 1, "3653": 1, "3680": 1, "3720": 1, "3757": 1, "3758": 1, "3776": 1, "3777": 1, "3795": 1, "3796": 1, "3814": 1, "3815": 1, "3833": 1, "3834": 1, "3852": 1, "3853": 1, "3873": 1, "3874": 1, "3892": 1, "3893": 1, "3911": 1, "3912": 1, "3930": 1, "3931": 1, "3954": 1, "3955": 1, "3973": 1, "3974": 1, "3996": 1, "3997": 1, "4019": 1, "4020": 1, "4043": 1, "4046": 1, "4049": 1, "4050": 1, "4053": 1, "4054": 1, "4057": 1, "4058": 1, "4061": 1, "4062": 1, "4065": 1, "4066": 1, "4069": 1, "4070": 1, "4073": 1, "4074": 1, "4080": 1, "4081": 1, "4084": 1, "4085": 1, "4088": 1, "4089": 1, "4092": 1, "4093": 1, "4096": 1, "4097": 1, "4100": 1, "4101": 1, "4104": 1, "4105": 1, "4108": 1, "4109": 1, "4112": 1, "4113": 1, "4115": 1, "4116": 1, "4133": 1, "4134": 1, "4137": 1, "4140": 1, "4142": 1, "4148": 1, "4151": 1, "142": 0, "144": 0, "145": 0, "147": 0, "148": 0, "149": 0, "151": 0, "153": 0, "155": 0, "156": 0, "158": 0, "163": 0, "164": 0, "165": 0, "166": 0, "167": 0, "169": 0, "171": 0, "172": 0, "174": 0, "178": 0, "182": 0, "187": 0, "188": 0, "193": 0, "194": 0, "199": 0, "200": 0, "205": 0, "206": 0, "211": 0, "213": 0, "214": 0, "215": 0, "217": 0, "218": 0, "220": 0, "221": 0, "223": 0, "224": 0, "226": 0, "231": 0, "233": 0, "234": 0, "235": 0, "236": 0, "237": 0, "238": 0, "240": 0, "241": 0, "243": 0, "244": 0, "246": 0, "248": 0, "253": 0, "254": 0, "256": 0, "257": 0, "258": 0, "260": 0, "261": 0, "262": 0, "264": 0, "266": 0, "267": 0, "268": 0, "269": 0, "271": 0, "276": 0, "277": 0, "280": 0, "303": 0, "304": 0, "305": 0, "306": 0, "307": 0, "308": 0, "309": 0, "311": 0, "332": 0, "334": 0, "335": 0, "336": 0, "337": 0, "338": 0, "339": 0, "341": 0, "358": 0, "363": 0, "368": 0, "373": 0, "378": 0, "405": 0, "406": 0, "409": 0, "411": 0, "412": 0, "413": 0, "414": 0, "415": 0, "417": 0, "418": 0, "420": 0, "422": 0, "423": 0, "424": 0, "426": 0, "427": 0, "429": 0, "431": 0, "433": 0, "434": 0, "435": 0, "437": 0, "438": 0, "440": 0, "442": 0, "444": 0, "446": 0, "448": 0, "457": 0, "449": 0, "450": 0, "452": 0, "453": 0, "455": 0, "477": 0, "478": 0, "480": 0, "481": 0, "483": 0, "484": 0, "486": 0, "490": 0, "491": 0, "495": 0, "511": 0, "512": 0, "528": 0, "530": 0, "531": 0, "533": 0, "537": 0, "538": 0, "539": 0, "541": 0, "542": 0, "543": 0, "544": 0, "546": 0, "562": 0, "563": 0, "565": 0, "566": 0, "567": 0, "569": 0, "586": 0, "587": 0, "588": 0, "590": 0, "591": 0, "593": 0, "594": 0, "596": 0, "597": 0, "599": 0, "600": 0, "601": 0, "602": 0, "604": 0, "608": 0, "624": 0, "626": 0, "627": 0, "628": 0, "629": 0, "630": 0, "632": 0, "634": 0, "655": 0, "656": 0, "658": 0, "660": 0, "662": 0, "664": 0, "666": 0, "668": 0, "670": 0, "688": 0, "690": 0, "691": 0, "692": 0, "693": 0, "694": 0, "695": 0, "697": 0, "699": 0, "700": 0, "701": 0, "702": 0, "704": 0, "720": 0, "721": 0, "723": 0, "725": 0, "741": 0, "742": 0, "744": 0, "746": 0, "762": 0, "763": 0, "765": 0, "767": 0, "789": 0, "790": 0, "791": 0, "795": 0, "796": 0, "798": 0, "800": 0, "802": 0, "803": 0, "805": 0, "807": 0, "829": 0, "849": 0, "869": 0, "885": 0, "905": 0, "921": 0, "941": 0, "943": 0, "944": 0, "946": 0, "947": 0, "949": 0, "951": 0, "952": 0, "953": 0, "955": 0, "956": 0, "958": 0, "974": 0, "990": 0, "991": 0, "993": 0, "997": 0, "998": 0, "1000": 0, "1022": 0, "1023": 0, "1025": 0, "1026": 0, "1027": 0, "1029": 0, "1030": 0, "1031": 0, "1032": 0, "1033": 0, "1034": 0, "1036": 0, "1038": 0, "1056": 0, "1057": 0, "1059": 0, "1060": 0, "1062": 0, "1063": 0, "1064": 0, "1080": 0, "1081": 0, "1083": 0, "1085": 0, "1101": 0, "1102": 0, "1104": 0, "1106": 0, "1126": 0, "1128": 0, "1129": 0, "1130": 0, "1131": 0, "1133": 0, "1134": 0, "1136": 0, "1138": 0, "1139": 0, "1141": 0, "1143": 0, "1163": 0, "1165": 0, "1166": 0, "1168": 0, "1170": 0, "1171": 0, "1172": 0, "1173": 0, "1175": 0, "1176": 0, "1178": 0, "1180": 0, "1181": 0, "1183": 0, "1185": 0, "1201": 0, "1202": 0, "1204": 0, "1206": 0, "1222": 0, "1223": 0, "1225": 0, "1227": 0, "1243": 0, "1244": 0, "1246": 0, "1248": 0, "1264": 0, "1265": 0, "1267": 0, "1269": 0, "1288": 0, "1289": 0, "1291": 0, "1293": 0, "1314": 0, "1315": 0, "1317": 0, "1319": 0, "1335": 0, "1336": 0, "1338": 0, "1340": 0, "1359": 0, "1360": 0, "1362": 0, "1364": 0, "1383": 0, "1385": 0, "1386": 0, "1388": 0, "1390": 0, "1391": 0, "1393": 0, "1395": 0, "1414": 0, "1416": 0, "1417": 0, "1419": 0, "1421": 0, "1422": 0, "1424": 0, "1426": 0, "1445": 0, "1447": 0, "1448": 0, "1450": 0, "1452": 0, "1453": 0, "1455": 0, "1457": 0, "1476": 0, "1477": 0, "1479": 0, "1481": 0, "1500": 0, "1502": 0, "1503": 0, "1505": 0, "1507": 0, "1523": 0, "1525": 0, "1526": 0, "1528": 0, "1530": 0, "1562": 0, "1564": 0, "1565": 0, "1567": 0, "1569": 0, "1590": 0, "1592": 0, "1593": 0, "1595": 0, "1597": 0, "1618": 0, "1620": 0, "1621": 0, "1622": 0, "1623": 0, "1624": 0, "1626": 0, "1628": 0, "1647": 0, "1648": 0, "1650": 0, "1651": 0, "1652": 0, "1654": 0, "1655": 0, "1657": 0, "1659": 0, "1660": 0, "1661": 0, "1662": 0, "1663": 0, "1665": 0, "1667": 0, "1686": 0, "1687": 0, "1689": 0, "1690": 0, "1691": 0, "1693": 0, "1694": 0, "1696": 0, "1698": 0, "1699": 0, "1700": 0, "1701": 0, "1702": 0, "1704": 0, "1723": 0, "1724": 0, "1726": 0, "1727": 0, "1728": 0, "1730": 0, "1731": 0, "1733": 0, "1735": 0, "1736": 0, "1737": 0, "1738": 0, "1739": 0, "1741": 0, "1762": 0, "1763": 0, "1765": 0, "1766": 0, "1767": 0, "1769": 0, "1770": 0, "1771": 0, "1772": 0, "1773": 0, "1775": 0, "1777": 0, "1778": 0, "1779": 0, "1780": 0, "1781": 0, "1783": 0, "1787": 0, "1788": 0, "1790": 0, "1791": 0, "1792": 0, "1794": 0, "1796": 0, "1797": 0, "1799": 0, "1800": 0, "1801": 0, "1802": 0, "1803": 0, "1825": 0, "1827": 0, "1828": 0, "1830": 0, "1846": 0, "1847": 0, "1849": 0, "1867": 0, "1868": 0, "1870": 0, "1894": 0, "1895": 0, "1896": 0, "1897": 0, "1898": 0, "1900": 0, "1901": 0, "1902": 0, "1903": 0, "1904": 0, "1926": 0, "1927": 0, "1929": 0, "1945": 0, "1946": 0, "1948": 0, "1949": 0, "1951": 0, "1953": 0, "1969": 0, "1970": 0, "1972": 0, "1974": 0, "1990": 0, "1991": 0, "1993": 0, "2030": 0, "2057": 0, "2058": 0, "2059": 0, "2060": 0, "2062": 0, "2064": 0, "2073": 0, "2074": 0, "2096": 0, "2112": 0, "2132": 0, "2133": 0, "2149": 0, "2150": 0, "2166": 0, "2167": 0, "2169": 0, "2171": 0, "2187": 0, "2188": 0, "2190": 0, "2192": 0, "2212": 0, "2214": 0, "2215": 0, "2217": 0, "2218": 0, "2219": 0, "2221": 0, "2222": 0, "2224": 0, "2226": 0, "2228": 0, "2229": 0, "2231": 0, "2254": 0, "2256": 0, "2258": 0, "2259": 0, "2261": 0, "2262": 0, "2264": 0, "2265": 0, "2267": 0, "2268": 0, "2270": 0, "2289": 0, "2291": 0, "2292": 0, "2294": 0, "2295": 0, "2296": 0, "2298": 0, "2300": 0, "2301": 0, "2302": 0, "2304": 0, "2306": 0, "2308": 0, "2310": 0, "2329": 0, "2330": 0, "2332": 0, "2333": 0, "2334": 0, "2336": 0, "2338": 0, "2339": 0, "2340": 0, "2342": 0, "2344": 0, "2346": 0, "2348": 0, "2383": 0, "2385": 0, "2386": 0, "2387": 0, "2389": 0, "2390": 0, "2392": 0, "2393": 0, "2394": 0, "2396": 0, "2397": 0, "2399": 0, "2400": 0, "2402": 0, "2404": 0, "2406": 0, "2408": 0, "2409": 0, "2411": 0, "2412": 0, "2413": 0, "2414": 0, "2415": 0, "2417": 0, "2418": 0, "2420": 0, "2421": 0, "2423": 0, "2425": 0, "2447": 0, "2468": 0, "2470": 0, "2471": 0, "2473": 0, "2474": 0, "2476": 0, "2478": 0, "2501": 0, "2503": 0, "2504": 0, "2506": 0, "2507": 0, "2509": 0, "2511": 0, "2532": 0, "2534": 0, "2535": 0, "2537": 0, "2538": 0, "2540": 0, "2542": 0, "2571": 0, "2572": 0, "2574": 0, "2576": 0, "2594": 0, "2596": 0, "2597": 0, "2599": 0, "2601": 0, "2626": 0, "2628": 0, "2629": 0, "2630": 0, "2632": 0, "2634": 0, "2636": 0, "2637": 0, "2638": 0, "2654": 0, "2655": 0, "2657": 0, "2659": 0, "2733": 0, "2734": 0, "2808": 0, "2809": 0, "2831": 0, "2833": 0, "2834": 0, "2836": 0, "2838": 0, "2854": 0, "2856": 0, "2857": 0, "2859": 0, "2861": 0, "2877": 0, "2879": 0, "2880": 0, "2882": 0, "2884": 0, "2900": 0, "2902": 0, "2903": 0, "2905": 0, "2907": 0, "2926": 0, "2928": 0, "2929": 0, "2931": 0, "2932": 0, "2934": 0, "2936": 0, "2952": 0, "2953": 0, "2955": 0, "2957": 0, "2973": 0, "2974": 0, "2976": 0, "2978": 0, "2994": 0, "2996": 0, "2997": 0, "2999": 0, "3001": 0, "3017": 0, "3018": 0, "3020": 0, "3022": 0, "3038": 0, "3039": 0, "3041": 0, "3043": 0, "3060": 0, "3061": 0, "3062": 0, "3064": 0, "3065": 0, "3067": 0, "3069": 0, "3088": 0, "3090": 0, "3091": 0, "3093": 0, "3094": 0, "3096": 0, "3098": 0, "3116": 0, "3117": 0, "3119": 0, "3121": 0, "3151": 0, "3152": 0, "3154": 0, "3156": 0, "3182": 0, "3183": 0, "3185": 0, "3187": 0, "3203": 0, "3204": 0, "3206": 0, "3208": 0, "3232": 0, "3233": 0, "3235": 0, "3237": 0, "3265": 0, "3266": 0, "3268": 0, "3270": 0, "3289": 0, "3290": 0, "3291": 0, "3292": 0, "3293": 0, "3295": 0, "3297": 0, "3316": 0, "3317": 0, "3318": 0, "3319": 0, "3320": 0, "3322": 0, "3324": 0, "3352": 0, "3353": 0, "3355": 0, "3356": 0, "3358": 0, "3359": 0, "3360": 0, "3361": 0, "3363": 0, "3364": 0, "3365": 0, "3367": 0, "3369": 0, "3370": 0, "3374": 0, "3375": 0, "3377": 0, "3382": 0, "3384": 0, "3386": 0, "3390": 0, "3391": 0, "3393": 0, "3398": 0, "3400": 0, "3371": 0, "3372": 0, "3378": 0, "3379": 0, "3380": 0, "3387": 0, "3388": 0, "3394": 0, "3395": 0, "3396": 0, "3416": 0, "3417": 0, "3419": 0, "3421": 0, "3422": 0, "3424": 0, "3425": 0, "3427": 0, "3428": 0, "3429": 0, "3430": 0, "3432": 0, "3433": 0, "3435": 0, "3437": 0, "3455": 0, "3457": 0, "3458": 0, "3460": 0, "3461": 0, "3463": 0, "3465": 0, "3466": 0, "3468": 0, "3470": 0, "3471": 0, "3473": 0, "3474": 0, "3476": 0, "3478": 0, "3479": 0, "3481": 0, "3483": 0, "3484": 0, "3485": 0, "3487": 0, "3489": 0, "3490": 0, "3492": 0, "3493": 0, "3495": 0, "3496": 0, "3498": 0, "3500": 0, "3529": 0, "3547": 0, "3549": 0, "3550": 0, "3552": 0, "3572": 0, "3574": 0, "3575": 0, "3577": 0, "3604": 0, "3605": 0, "3606": 0, "3607": 0, "3609": 0, "3610": 0, "3615": 0, "3616": 0, "3617": 0, "3618": 0, "3619": 0, "3620": 0, "3621": 0, "3623": 0, "3624": 0, "3625": 0, "3626": 0, "3627": 0, "3628": 0, "3629": 0, "3631": 0, "3632": 0, "3634": 0, "3637": 0, "3638": 0, "3642": 0, "3643": 0, "3644": 0, "3645": 0, "3646": 0, "3647": 0, "3649": 0, "3651": 0, "3667": 0, "3668": 0, "3669": 0, "3671": 0, "3673": 0, "3674": 0, "3675": 0, "3676": 0, "3678": 0, "3702": 0, "3703": 0, "3704": 0, "3706": 0, "3708": 0, "3709": 0, "3711": 0, "3713": 0, "3714": 0, "3716": 0, "3718": 0, "3737": 0, "3739": 0, "3740": 0, "3742": 0, "3744": 0, "3745": 0, "3746": 0, "3748": 0, "3750": 0, "3751": 0, "3753": 0, "3755": 0, "3774": 0, "3793": 0, "3812": 0, "3831": 0, "3850": 0, "3871": 0, "3890": 0, "3909": 0, "3928": 0, "3952": 0, "3971": 0, "3994": 0, "4017": 0, "4041": 0, "4044": 0, "4047": 0, "4051": 0, "4055": 0, "4059": 0, "4063": 0, "4067": 0, "4071": 0, "4075": 0, "4076": 0, "4078": 0, "4082": 0, "4086": 0, "4090": 0, "4094": 0, "4098": 0, "4102": 0, "4106": 0, "4110": 0, "4117": 0, "4119": 0, "4120": 0, "4121": 0, "4122": 0, "4123": 0, "4125": 0, "4126": 0, "4128": 0, "4129": 0, "4131": 0, "4135": 0, "4138": 0, "4143": 0, "4144": 0, "4146": 0, "4149": 0, "4152": 0, "4159": 1, "4163": 1, "4166": 1, "4167": 1, "4187": 1, "4188": 1, "4211": 1, "4214": 1, "4161": 0, "4164": 0, "4185": 0, "4189": 0, "4191": 0, "4192": 0, "4193": 0, "4194": 0, "4195": 0, "4197": 0, "4198": 0, "4200": 0, "4201": 0, "4202": 0, "4203": 0, "4204": 0, "4206": 0, "4207": 0, "4209": 0, "4212": 0, "4215": 0, "4217": 0, "4218": 0, "4219": 0, "4220": 0, "4221": 0, "4223": 0, "4224": 0, "4226": 0, "4227": 0, "4229": 0, "4230": 0, "4232": 0, "4234": 0, "4235": 0, "4237": 0, "4246": 0, "4238": 0, "4239": 0, "4241": 0, "4242": 0, "4244": 0, "4252": 0, "4253": 0, "4258": 0, "4260": 0, "4261": 0, "4262": 0, "4263": 0, "4265": 0, "4266": 0, "4268": 0, "4269": 0, "4271": 0, "4272": 0, "4273": 0, "4275": 0, "4276": 0, "4277": 0, "4279": 0, "4280": 0, "4282": 0, "4283": 0, "4285": 0, "4287": 0, "4288": 0, "4290": 0, "4291": 0, "4293": 0, "4299": 0, "4300": 0, "4305": 0, "4307": 0, "4308": 0, "4310": 0, "4311": 0, "4312": 0, "4314": 0, "4316": 0, "4317": 0, "4319": 0, "4320": 0, "4322": 0, "4324": 0, "4325": 0, "4327": 0, "4329": 0, "4330": 0, "4332": 0, "4333": 0, "4334": 0, "4336": 0, "4338": 0, "4339": 0, "4341": 0, "4343": 0, "4345": 0, "4346": 0, "4348": 0, "4350": 0, "4351": 0, "4353": 0, "4354": 0, "4355": 0, "4357": 0, "4358": 0, "4359": 0, "4361": 0, "4363": 0, "4364": 0, "4366": 0, "4367": 0, "4369": 0, "4370": 0, "4372": 0, "4374": 0, "4376": 0, "4377": 0, "4379": 0, "4381": 0, "4382": 0, "4383": 0, "4385": 0, "4387": 0, "4388": 0, "4389": 0, "4390": 0, "4392": 0, "4393": 0, "4395": 0, "4400": 0, "4402": 0, "4403": 0, "4405": 0, "4435": 0, "4436": 0, "4437": 0, "4438": 0, "4439": 0, "4441": 0, "4442": 0, "4443": 0, "4444": 0, "4446": 0, "4448": 0, "4449": 0, "4451": 0, "4452": 0, "4454": 0, "4455": 0, "4456": 0, "4457": 0, "4458": 0, "4462": 0, "4464": 0, "4507": 0, "4508": 0, "4509": 0, "4510": 0, "4511": 0, "4513": 0, "4514": 0, "4515": 0, "4517": 0, "4535": 0, "4537": 0, "4538": 0, "4539": 0, "4540": 0, "4542": 0, "4544": 0, "4562": 0, "4564": 0, "4565": 0, "4566": 0, "4567": 0, "4569": 0, "4587": 0, "4589": 0, "4590": 0, "4591": 0, "4592": 0, "4594": 0, "4595": 0, "4613": 0, "4615": 0, "4616": 0, "4617": 0, "4618": 0, "4620": 0, "4621": 0, "4639": 0, "4641": 0, "4642": 0, "4643": 0, "4644": 0, "4646": 0, "4648": 0, "4649": 0, "4651": 0, "4669": 0, "4671": 0, "4672": 0, "4673": 0, "4674": 0, "4676": 0, "4678": 0, "4679": 0, "4681": 0, "4701": 0, "4703": 0, "4704": 0, "4705": 0, "4706": 0, "4708": 0, "4709": 0, "4710": 0, "4711": 0, "4713": 0, "4714": 0, "4716": 0, "4739": 0, "4741": 0, "4742": 0, "4743": 0, "4744": 0, "4746": 0, "4748": 0, "4749": 0, "4751": 0, "4771": 0, "4773": 0, "4774": 0, "4775": 0, "4776": 0, "4778": 0, "4780": 0, "4781": 0, "4783": 0, "4803": 0, "4805": 0, "4806": 0, "4807": 0, "4808": 0, "4810": 0, "4812": 0, "4813": 0, "4815": 0, "4835": 0, "4837": 0, "4838": 0, "4839": 0, "4840": 0, "4842": 0, "4844": 0, "4845": 0, "4847": 0, "4870": 0, "4872": 0, "4873": 0, "4874": 0, "4875": 0, "4877": 0, "4879": 0, "4880": 0, "4882": 0, "4902": 0, "4904": 0, "4905": 0, "4906": 0, "4907": 0, "4909": 0, "4910": 0, "4911": 0, "4912": 0, "4914": 0, "4916": 0, "4918": 0, "4919": 0, "4921": 0, "4941": 0, "4943": 0, "4944": 0, "4945": 0, "4946": 0, "4948": 0, "4949": 0, "4950": 0, "4951": 0, "4953": 0, "4955": 0, "4957": 0, "4958": 0, "4960": 0, "4997": 0, "4999": 0, "5000": 0, "5001": 0, "5002": 0, "5004": 0, "5005": 0, "5006": 0, "5007": 0, "5009": 0, "5011": 0, "5012": 0, "5014": 0, "5032": 0, "5034": 0, "5035": 0, "5036": 0, "5037": 0, "5039": 0, "5041": 0, "5042": 0, "5044": 0, "5062": 0, "5063": 0, "5065": 0, "5066": 0, "5067": 0, "5068": 0, "5070": 0, "5071": 0, "5073": 0, "5075": 0, "5076": 0, "5077": 0, "5078": 0, "5080": 0, "5081": 0, "5082": 0, "5100": 0, "5102": 0, "5103": 0, "5104": 0, "5105": 0, "5107": 0, "5109": 0, "5110": 0, "5112": 0, "5134": 0, "5136": 0, "5137": 0, "5138": 0, "5139": 0, "5141": 0, "5142": 0, "5143": 0, "5144": 0, "5146": 0, "5148": 0, "5150": 0, "5151": 0, "5153": 0, "5171": 0, "5173": 0, "5192": 0, "5194": 0, "5195": 0, "5197": 0, "5199": 0, "5200": 0, "5203": 0, "5204": 0, "5205": 0, "5206": 0, "5207": 0, "5208": 0, "5209": 0, "5210": 0, "5212": 0, "5213": 0, "5215": 0, "5216": 0, "5218": 0, "5220": 0, "5221": 0, "5222": 0, "5224": 0, "5226": 0, "5228": 0, "5229": 0, "5231": 0, "5232": 0, "5234": 0, "5235": 0, "5237": 0, "5174": 0, "5175": 0, "5177": 0, "5178": 0, "5179": 0, "5180": 0, "5182": 0, "5183": 0, "5185": 0, "5186": 0, "5188": 0, "5190": 0, "5255": 0, "5256": 0, "5257": 0, "5259": 0, "5260": 0, "5261": 0, "5263": 0, "5265": 0, "5266": 0, "5269": 0, "5270": 0, "5271": 0, "5272": 0, "5273": 0, "5275": 0, "5276": 0, "5278": 0, "5279": 0, "5280": 0, "5281": 0, "5283": 0, "5285": 0, "5286": 0, "5288": 0, "5306": 0, "5308": 0, "5324": 0, "5326": 0, "5327": 0, "5329": 0, "5331": 0, "5332": 0, "5335": 0, "5336": 0, "5337": 0, "5338": 0, "5339": 0, "5340": 0, "5341": 0, "5342": 0, "5344": 0, "5345": 0, "5347": 0, "5348": 0, "5350": 0, "5352": 0, "5353": 0, "5354": 0, "5356": 0, "5358": 0, "5360": 0, "5361": 0, "5363": 0, "5364": 0, "5366": 0, "5309": 0, "5310": 0, "5312": 0, "5313": 0, "5314": 0, "5315": 0, "5317": 0, "5318": 0, "5320": 0, "5322": 0, "5384": 0, "5385": 0, "5386": 0, "5388": 0, "5389": 0, "5390": 0, "5392": 0, "5394": 0, "5395": 0, "5398": 0, "5399": 0, "5400": 0, "5401": 0, "5402": 0, "5404": 0, "5405": 0, "5407": 0, "5408": 0, "5409": 0, "5410": 0, "5412": 0, "5414": 0, "5415": 0, "5417": 0, "5486": 0, "5488": 0, "5490": 0, "5491": 0, "5492": 0, "5493": 0, "5495": 0, "5496": 0, "5498": 0, "5499": 0, "5500": 0, "5501": 0, "5502": 0, "5504": 0, "5505": 0, "5507": 0, "5508": 0, "5509": 0, "5510": 0, "5512": 0, "5514": 0, "5515": 0, "5516": 0, "5518": 0, "5520": 0, "5521": 0, "5523": 0, "5525": 0, "5526": 0, "5527": 0, "5528": 0, "5529": 0, "5531": 0, "5532": 0, "5535": 0, "5536": 0, "5554": 0, "5556": 0, "5557": 0, "5558": 0, "5559": 0, "5561": 0, "5563": 0, "5564": 0, "5566": 0, "5584": 0, "5586": 0, "5587": 0, "5588": 0, "5589": 0, "5591": 0, "5593": 0, "5594": 0, "5596": 0, "5614": 0, "5616": 0, "5617": 0, "5618": 0, "5619": 0, "5621": 0, "5656": 0, "5658": 0, "5659": 0, "5660": 0, "5661": 0, "5663": 0, "5664": 0, "5665": 0, "5667": 0, "5685": 0, "5687": 0, "5688": 0, "5689": 0, "5690": 0, "5692": 0, "5694": 0, "5695": 0, "5697": 0, "5715": 0, "5717": 0, "5718": 0, "5719": 0, "5720": 0, "5722": 0, "5724": 0, "5725": 0, "5727": 0, "5745": 0, "5747": 0, "5748": 0, "5749": 0, "5750": 0, "5752": 0, "5754": 0, "5755": 0, "5757": 0, "5792": 0, "5794": 0, "5795": 0, "5796": 0, "5797": 0, "5799": 0, "5801": 0, "5802": 0, "5804": 0, "5810": 0, "5832": 0, "5834": 0, "5835": 0, "5836": 0, "5837": 0, "5839": 0, "5841": 0, "5842": 0, "5844": 0, "5862": 0, "5864": 0, "5865": 0, "5866": 0, "5867": 0, "5869": 0, "5871": 0, "5872": 0, "5874": 0, "5879": 0, "5880": 0, "5885": 0, "5890": 0, "5881": 0, "5882": 0, "5883": 0, "5886": 0, "5887": 0, "5888": 0, "5895": 0, "5900": 0, "5902": 0, "5903": 0, "5904": 0, "5905": 0, "5906": 0, "5907": 0, "5908": 0, "5909": 0, "5910": 0, "5911": 0, "5912": 0, "5913": 0, "5914": 0, "5915": 0, "5916": 0, "5917": 0, "5918": 0, "5920": 0, "5922": 0, "5923": 0, "5924": 0, "5925": 0, "5927": 0, "5929": 0, "5930": 0, "5931": 0, "5932": 0, "5933": 0, "5934": 0, "5936": 0, "5938": 0, "5939": 0, "5940": 0, "5941": 0, "5943": 0, "5945": 0, "5946": 0, "5947": 0, "5949": 0, "5951": 0, "5953": 0, "5958": 0, "5959": 0, "5960": 0, "5961": 0, "5962": 0, "5963": 0, "5964": 0, "5965": 0, "5966": 0, "5968": 0, "5973": 0, "5974": 0, "5976": 0, "5978": 0, "5979": 0, "5980": 0, "5982": 0, "5984": 0, "5985": 0, "5987": 0, "5988": 0, "5990": 0, "5992": 0, "5993": 0, "5994": 0, "5995": 0, "5996": 0, "5998": 0, "5999": 0, "6001": 0, "6002": 0, "6003": 0, "6005": 0, "6007": 0, "6008": 0, "6010": 0, "6012": 0, "6017": 0, "6018": 0, "6019": 0, "6020": 0, "6021": 0, "6062": 0, "6064": 0, "6099": 0, "6127": 0, "6147": 0, "6148": 0, "6149": 0, "6150": 0, "6151": 0, "6153": 0, "6154": 0, "6155": 0, "6156": 0, "6072": 0, "6073": 0, "6074": 0, "6075": 0, "6076": 0, "6077": 0, "6078": 0, "6079": 0, "6080": 0, "6081": 0, "6082": 0, "6083": 0, "6084": 0, "6085": 0, "6086": 0, "6087": 0, "6089": 0, "6090": 0, "6091": 0, "6092": 0, "6093": 0, "6094": 0, "6095": 0, "6096": 0, "6097": 0, "6107": 0, "6108": 0, "6109": 0, "6110": 0, "6111": 0, "6112": 0, "6113": 0, "6114": 0, "6115": 0, "6116": 0, "6117": 0, "6118": 0, "6120": 0, "6121": 0, "6122": 0, "6123": 0, "6124": 0, "6125": 0, "6131": 0, "6132": 0, "6133": 0, "6134": 0, "6135": 0, "6136": 0, "6137": 0, "6139": 0, "6140": 0, "6141": 0, "6142": 0, "6143": 0, "6144": 0, "6145": 0, "6138": 0, "6181": 0, "6182": 0, "6183": 0, "6184": 0, "6185": 0, "6186": 0, "6187": 0, "6188": 0, "6189": 0, "6190": 0, "6191": 0, "6192": 0, "6193": 0, "6194": 0, "6196": 0, "6197": 0, "6198": 0, "6199": 0, "6200": 0, "6218": 0, "6236": 0, "6254": 0, "6325": 0, "6326": 0, "6327": 0, "6328": 0, "6337": 0, "6340": 0, "6341": 0, "6342": 0, "6343": 0, "6344": 0, "6345": 0, "6346": 0, "6348": 0, "6349": 0, "6350": 0, "6351": 0, "6352": 0, "6353": 0, "6355": 0, "6332": 0, "6333": 0, "6334": 0, "6335": 0, "6375": 0, "6376": 0, "6377": 0, "6378": 0, "6379": 0, "6381": 0, "6383": 0, "6385": 0, "6386": 0, "6388": 0, "6389": 0, "6391": 0, "6392": 0, "6394": 0, "6395": 0, "6397": 0, "6398": 0, "6399": 0, "6400": 0, "6402": 0, "6403": 0, "6405": 0, "6407": 0, "6408": 0, "6409": 0, "6411": 0, "6429": 0, "6430": 0, "6431": 0, "6432": 0, "6433": 0, "6435": 0, "6458": 0, "6459": 0, "6460": 0, "6461": 0, "6463": 0, "6481": 0, "6482": 0, "6483": 0, "6484": 0, "6485": 0, "6487": 0, "6507": 0, "6508": 0, "6509": 0, "6510": 0, "6511": 0, "6513": 0, "6531": 0, "6533": 0, "6534": 0, "6535": 0, "6536": 0, "6538": 0, "6565": 0, "6567": 0, "6568": 0, "6569": 0, "6570": 0, "6572": 0, "6574": 0, "6575": 0, "6577": 0, "6605": 0, "6606": 0, "6607": 0, "6609": 0, "6611": 0, "6612": 0, "6613": 0, "6614": 0, "6615": 0, "6617": 0, "6618": 0, "6619": 0, "6620": 0, "6622": 0, "6624": 0, "6625": 0, "6626": 0, "6627": 0, "6628": 0, "6630": 0, "6631": 0, "6632": 0, "6633": 0, "6635": 0, "6636": 0, "6638": 0, "6639": 0, "6640": 0, "6642": 0, "6643": 0, "6644": 0, "6645": 0, "6647": 0, "6648": 0, "6649": 0, "6650": 0, "6651": 0, "6652": 0, "6653": 0, "6654": 0, "6656": 0, "6658": 0, "6659": 0, "6661": 0, "6662": 0, "6664": 0, "6637": 0, "6687": 0, "6689": 0, "6690": 0, "6691": 0, "6692": 0, "6694": 0, "6695": 0, "6697": 0, "6698": 0, "6699": 0, "6701": 0, "6702": 0, "6704": 0, "6705": 0, "6706": 0, "6708": 0, "6710": 0, "6711": 0, "6713": 0, "6714": 0, "6715": 0, "6716": 0, "6717": 0, "6719": 0, "6721": 0, "6722": 0, "6724": 0, "6778": 0, "6796": 0, "6803": 1, "6822": 1, "6823": 1, "6831": 1, "6832": 1, "6836": 1, "6837": 1, "6840": 1, "6841": 1, "6844": 1, "6845": 1, "6848": 1, "6849": 1, "6852": 1, "6853": 1, "6856": 1, "6859": 1, "6865": 1, "6873": 1, "6876": 1, "6884": 1, "6887": 1, "6888": 1, "6919": 1, "6985": 1, "7050": 1, "6805": 0, "6807": 0, "6808": 0, "6809": 0, "6810": 0, "6812": 0, "6813": 0, "6815": 0, "6817": 0, "6818": 0, "6820": 0, "6824": 0, "6826": 0, "6827": 0, "6829": 0, "6833": 0, "6834": 0, "6838": 0, "6842": 0, "6846": 0, "6850": 0, "6854": 0, "6857": 0, "6860": 0, "6861": 0, "6863": 0, "6866": 0, "6867": 0, "6869": 0, "6871": 0, "6874": 0, "6877": 0, "6878": 0, "6879": 0, "6880": 0, "6882": 0, "6885": 0, "6902": 0, "6905": 0, "6906": 0, "6908": 0, "6909": 0, "6911": 0, "6912": 0, "6917": 0, "6903": 0, "6950": 0, "6952": 0, "6953": 0, "6955": 0, "6956": 0, "6958": 0, "6959": 0, "6961": 0, "6962": 0, "6964": 0, "6965": 0, "6966": 0, "6969": 0, "6970": 0, "6972": 0, "6973": 0, "6974": 0, "6976": 0, "6977": 0, "6979": 0, "6980": 0, "6981": 0, "6983": 0, "7013": 0, "7014": 0, "7016": 0, "7017": 0, "7019": 0, "7021": 0, "7022": 0, "7023": 0, "7025": 0, "7026": 0, "7028": 0, "7029": 0, "7030": 0, "7032": 0, "7034": 0, "7035": 0, "7037": 0, "7038": 0, "7039": 0, "7040": 0, "7041": 0, "7043": 0, "7045": 0, "7046": 0, "7048": 0, "7069": 0, "7087": 0, "7089": 0, "7141": 0, "7143": 0, "7144": 0, "7146": 0, "7147": 0, "7149": 0, "7151": 0, "7090": 0, "7092": 0, "7093": 0, "7095": 0, "7096": 0, "7097": 0, "7098": 0, "7099": 0, "7100": 0, "7101": 0, "7103": 0, "7105": 0, "7106": 0, "7108": 0, "7110": 0, "7111": 0, "7113": 0, "7114": 0, "7116": 0, "7117": 0, "7119": 0, "7121": 0, "7123": 0, "7124": 0, "7126": 0, "7128": 0, "7129": 0, "7131": 0, "7132": 0, "7134": 0, "7135": 0, "7137": 0, "7139": 0}}
+ git checkout 3dff1b98a78f28c953ae2140b69356b8391e399c
Note: switching to '3dff1b98a78f28c953ae2140b69356b8391e399c'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at 3dff1b98a7 Merge pull request #18690 from mohitacecode/issue_18666_2
+ git apply /root/pre_state.patch
error: unrecognized input
