{"instance_id": "django__django-16801", "repo": "django/django", "version": "5.0", "environment_setup_commit": "4a72da71001f154ea60906a2f74898d32b7322a7", "patch_list": ["diff --git a/dev/null b/tests/test_coverup_django__django-16801.py\nnew file mode 100644\nindex e69de29..5981a07 100644\n--- /dev/null\n+++ b/tests/test_coverup_django__django-16801.py\n@@ -0,0 +1,27 @@\n+from django.test import SimpleTestCase\n+from django.db import models\n+from django.db.models.signals import post_init\n+\n+class ImageFieldPostInitSignalTest(SimpleTestCase):\n+    def setUp(self):\n+        # Dynamically create a model within a test app\n+        class TestModel(models.Model):\n+            image = models.ImageField()\n+\n+            class Meta:\n+                app_label = 'test_app'\n+\n+        self.TestModel = TestModel\n+\n+    def test_post_init_signal_unnecessary_connection(self):\n+        \"\"\"\n+        Test to check if the post_init signal is connected even when width_field and height_field are not set.\n+        This test should fail if the post_init signal is unnecessarily connected.\n+        \"\"\"\n+        # Check if the post_init signal is connected to the TestModel\n+        connected_receivers = post_init.receivers\n+        image_field_connected = any(\n+            receiver[1]() == self.TestModel._meta.get_field('image').update_dimension_fields for receiver in connected_receivers\n+        )\n+        # Assert that the post_init signal is not connected, which is the correct behavior\n+        self.assertFalse(image_field_connected, \"BUG: post_init signal should not be connected when width_field and height_field are not set.\")\n"], "arch": "x86_64", "base_commit": "3b62d8c83e3e48d2ed61cfa32a61c56d9e030293", "test_directives": ["test_coverup_django__django-16801"], "coverage_files": ["django/db/models/fields/files.py"], "env_name": "testbed", "run_id": "assertflip", "patch_id": "pred_pre__AssertFlip", "timeout": 1800, "rm_image": false, "force_rebuild": false, "exec_mode": "unit_test", "reproduction_script_name": null, "compute_coverage": true, "install": {"python": "3.11", "packages": "requirements.txt", "install": "python -m pip install -e ."}, "cache_level": "instance", "test_command": "python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/db/models/fields/files\\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-16801", "req_install_commands": ["conda create -n testbed python=3.11 -y", "cat <<'EOF_59812759871' > $HOME/requirements.txt\naiosmtpd\nasgiref >= 3.7.0\nargon2-cffi >= 19.2.0\nbcrypt\nblack\ndocutils\ngeoip2; python_version < '3.12'\njinja2 >= 2.11.0\nnumpy; python_version < '3.12'\nPillow >= 6.2.1; sys.platform != 'win32' or python_version < '3.12'\npylibmc; sys.platform != 'win32'\npymemcache >= 3.4.0\npywatchman; sys.platform != 'win32'\nPyYAML\nredis >= 3.4.0\nselenium >= 4.8.0\nsqlparse >= 0.3.1\ntblib >= 1.5.0\ntzdata\ncolorama; sys.platform == 'win32'\n\nEOF_59812759871", "conda activate testbed && python -m pip install -r $HOME/requirements.txt", "rm $HOME/requirements.txt"]}