+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD 6e9c5ee88fc948e05b4a7d9f82a8861ed2b0343d
+ sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen
+ locale-gen
Generating locales (this might take a while)...
  en_US.UTF-8... done
Generation complete.
+ export LANG=en_US.UTF-8
+ LANG=en_US.UTF-8
+ export LANGUAGE=en_US:en
+ LANGUAGE=en_US:en
+ export LC_ALL=en_US.UTF-8
+ LC_ALL=en_US.UTF-8
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
nothing to commit, working tree clean
+ git show
commit 6e9c5ee88fc948e05b4a7d9f82a8861ed2b0343d
Author: Adam Alton <adamalton@gmail.com>
Date:   Fri Aug 7 06:05:47 2020 +0000

    Removed unnecessary sentence in QuerySet docs.

diff --git a/docs/ref/models/querysets.txt b/docs/ref/models/querysets.txt
index adc070ec99..e5c0038528 100644
--- a/docs/ref/models/querysets.txt
+++ b/docs/ref/models/querysets.txt
@@ -151,8 +151,7 @@ Here's the formal declaration of a ``QuerySet``:
         The ``query`` parameter to :class:`QuerySet` exists so that specialized
         query subclasses can reconstruct internal query state. The value of the
         parameter is an opaque representation of that query state and is not
-        part of a public API. To put it another way: if you need to ask, you
-        don't need to use it.
+        part of a public API.
 
 .. currentmodule:: django.db.models.query.QuerySet
 
+ git diff 6e9c5ee88fc948e05b4a7d9f82a8861ed2b0343d
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
Requirement already satisfied: asgiref>=3.2.10 in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.2) (3.4.1)
Requirement already satisfied: pytz in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.2) (2025.2)
Requirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.2) (0.4.4)
Requirement already satisfied: typing-extensions in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from asgiref>=3.2.10->Django==3.2) (4.1.1)
Installing collected packages: Django
  Attempting uninstall: Django
    Found existing installation: Django 3.2
    Uninstalling Django-3.2:
      Successfully uninstalled Django-3.2
  Running setup.py develop for Django
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv
Successfully installed Django-3.2
+ git apply -v -
Checking patch tests/test_coverup_django__django-13279.py...
Applied patch tests/test_coverup_django__django-13279.py cleanly.
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/contrib/sessions/backends/base\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-13279
test_legacy_decode_with_sha1 (test_coverup_django__django-13279.SessionDecodeTest) ... FAIL

======================================================================
FAIL: test_legacy_decode_with_sha1 (test_coverup_django__django-13279.SessionDecodeTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "./tests/test_coverup_django__django-13279.py", line 23, in test_legacy_decode_with_sha1
    self.assertEqual(decoded_data, self.session_dict, "Decoded data should match the original session dictionary")
AssertionError: {} != {'key': 'value'}
- {}
+ {'key': 'value'} : Decoded data should match the original session dictionary

----------------------------------------------------------------------
Ran 1 test in 0.002s

FAILED (failures=1)
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(django/contrib/sessions/backends/base\\.py)']
Testing against Django installed in '/testbed/django'
0.65 base.py(1): import base64
0.65 base.py(2): import logging
0.65 base.py(3): import string
0.65 base.py(4): import warnings
0.65 base.py(5): from datetime import datetime, timedelta
0.65 base.py(7): from django.conf import settings
0.65 base.py(8): from django.contrib.sessions.exceptions import SuspiciousSession
0.65 base.py(9): from django.core import signing
0.65 base.py(10): from django.core.exceptions import SuspiciousOperation
0.65 base.py(11): from django.utils import timezone
0.65 base.py(12): from django.utils.crypto import (
0.65 base.py(15): from django.utils.deprecation import RemovedInDjango40Warning
0.65 base.py(16): from django.utils.module_loading import import_string
0.65 base.py(17): from django.utils.translation import LANGUAGE_SESSION_KEY
0.65 base.py(21): VALID_KEY_CHARS = string.ascii_lowercase + string.digits
0.65 base.py(24): class CreateError(Exception):
0.65 base.py(24): class CreateError(Exception):
0.65 base.py(28):     """
0.65 base.py(29):     pass
0.65 base.py(32): class UpdateError(Exception):
0.65 base.py(32): class UpdateError(Exception):
0.65 base.py(35):     """
0.65 base.py(36):     pass
0.65 base.py(39): class SessionBase:
0.65 base.py(39): class SessionBase:
0.65 base.py(42):     """
0.65 base.py(43):     TEST_COOKIE_NAME = 'testcookie'
0.65 base.py(44):     TEST_COOKIE_VALUE = 'worked'
0.65 base.py(46):     __not_given = object()
0.65 base.py(48):     def __init__(self, session_key=None):
0.65 base.py(54):     def __contains__(self, key):
0.65 base.py(57):     def __getitem__(self, key):
0.65 base.py(67):     def __setitem__(self, key, value):
0.65 base.py(71):     def __delitem__(self, key):
0.65 base.py(75):     @property
0.65 base.py(79):     def get(self, key, default=None):
0.65 base.py(82):     def pop(self, key, default=__not_given):
0.65 base.py(87):     def setdefault(self, key, value):
0.65 base.py(95):     def set_test_cookie(self):
0.65 base.py(98):     def test_cookie_worked(self):
0.65 base.py(101):     def delete_test_cookie(self):
0.65 base.py(104):     def _hash(self, value):
0.65 base.py(109):     def encode(self, session_dict):
0.65 base.py(116):     def decode(self, session_data):
0.65 base.py(124):     def _legacy_decode(self, session_data):
0.65 base.py(143):     def update(self, dict_):
0.65 base.py(147):     def has_key(self, key):
0.65 base.py(150):     def keys(self):
0.65 base.py(153):     def values(self):
0.65 base.py(156):     def items(self):
0.65 base.py(159):     def clear(self):
0.65 base.py(167):     def is_empty(self):
0.65 base.py(174):     def _get_new_session_key(self):
0.65 base.py(181):     def _get_or_create_session_key(self):
0.65 base.py(186):     def _validate_session_key(self, key):
0.65 base.py(193):     def _get_session_key(self):
0.65 base.py(196):     def _set_session_key(self, value):
0.65 base.py(205):     session_key = property(_get_session_key)
0.65 base.py(206):     _session_key = property(_get_session_key, _set_session_key)
0.65 base.py(208):     def _get_session(self, no_load=False):
0.65 base.py(223):     _session = property(_get_session)
0.65 base.py(225):     def get_session_cookie_age(self):
0.65 base.py(228):     def get_expiry_age(self, **kwargs):
0.65 base.py(253):     def get_expiry_date(self, **kwargs):
0.65 base.py(274):     def set_expiry(self, value):
0.65 base.py(300):     def get_expire_at_browser_close(self):
0.65 base.py(311):     def flush(self):
0.65 base.py(320):     def cycle_key(self):
0.65 base.py(333):     def exists(self, session_key):
0.65 base.py(339):     def create(self):
0.65 base.py(347):     def save(self, must_create=False):
0.65 base.py(355):     def delete(self, session_key=None):
0.65 base.py(362):     def load(self):
0.65 base.py(368):     @classmethod
Skipping setup of unused database(s): default, other.
System check identified no issues (0 silenced).
0.70 base.py(49):         self._session_key = session_key
0.70 base.py(200):         if self._validate_session_key(value):
0.70 base.py(191):         return key and len(key) >= 8
0.70 base.py(203):             self.__session_key = None
0.70 base.py(50):         self.accessed = False
0.70 base.py(51):         self.modified = False
0.70 base.py(52):         self.serializer = import_string(settings.SESSION_SERIALIZER)
0.70 base.py(111):         return signing.dumps(
0.70 base.py(112):             session_dict, salt=self.key_salt, serializer=self.serializer,
0.70 base.py(77):         return 'django.contrib.sessions.' + self.__class__.__qualname__
0.70 base.py(113):             compress=True,
0.70 base.py(117):         try:
0.70 base.py(118):             return signing.loads(session_data, salt=self.key_salt, serializer=self.serializer)
0.70 base.py(77):         return 'django.contrib.sessions.' + self.__class__.__qualname__
0.70 base.py(121):         except Exception:
0.70 base.py(122):             return self._legacy_decode(session_data)
0.70 base.py(126):         encoded_data = base64.b64decode(session_data.encode('ascii'))
+ cat coverage.cover
{"/testbed/django/contrib/sessions/backends/base.py": {"1": 1, "2": 1, "3": 1, "4": 1, "5": 1, "7": 1, "8": 1, "9": 1, "10": 1, "11": 1, "12": 1, "15": 1, "16": 1, "17": 1, "21": 1, "24": 2, "32": 2, "39": 2, "29": 1, "36": 1, "43": 1, "44": 1, "46": 1, "48": 1, "54": 1, "57": 1, "67": 1, "71": 1, "75": 1, "79": 1, "82": 1, "87": 1, "95": 1, "98": 1, "101": 1, "104": 1, "109": 1, "116": 1, "124": 1, "143": 1, "147": 1, "150": 1, "153": 1, "156": 1, "159": 1, "167": 1, "174": 1, "181": 1, "186": 1, "193": 1, "196": 1, "205": 1, "206": 1, "208": 1, "223": 1, "225": 1, "228": 1, "253": 1, "274": 1, "300": 1, "311": 1, "320": 1, "333": 1, "339": 1, "347": 1, "355": 1, "362": 1, "368": 1, "49": 1, "50": 1, "51": 1, "52": 1, "55": 0, "58": 0, "59": 0, "60": 0, "63": 0, "65": 0, "68": 0, "69": 0, "72": 0, "73": 0, "77": 2, "80": 0, "83": 0, "84": 0, "85": 0, "88": 0, "89": 0, "91": 0, "92": 0, "93": 0, "96": 0, "99": 0, "102": 0, "106": 0, "107": 0, "111": 1, "112": 1, "113": 1, "117": 1, "118": 1, "121": 1, "122": 1, "126": 1, "127": 0, "129": 0, "130": 0, "131": 0, "132": 0, "134": 0, "135": 0, "138": 0, "139": 0, "140": 0, "141": 0, "144": 0, "145": 0, "148": 0, "151": 0, "154": 0, "157": 0, "163": 0, "164": 0, "165": 0, "169": 0, "170": 0, "171": 0, "172": 0, "176": 0, "177": 0, "178": 0, "179": 0, "182": 0, "183": 0, "184": 0, "191": 1, "194": 0, "200": 1, "201": 0, "203": 1, "213": 0, "214": 0, "215": 0, "216": 0, "217": 0, "218": 0, "220": 0, "221": 0, "226": 0, "234": 0, "235": 0, "236": 0, "237": 0, "241": 0, "242": 0, "243": 0, "244": 0, "246": 0, "247": 0, "248": 0, "249": 0, "250": 0, "251": 0, "259": 0, "260": 0, "261": 0, "262": 0, "264": 0, "265": 0, "266": 0, "267": 0, "269": 0, "270": 0, "271": 0, "272": 0, "289": 0, "291": 0, "292": 0, "293": 0, "294": 0, "295": 0, "296": 0, "297": 0, "298": 0, "307": 0, "308": 0, "309": 0, "316": 0, "317": 0, "318": 0, "324": 0, "325": 0, "326": 0, "327": 0, "328": 0, "329": 0, "337": 0, "345": 0, "353": 0, "360": 0, "366": 0, "377": 0}}
+ git checkout 6e9c5ee88fc948e05b4a7d9f82a8861ed2b0343d
Note: switching to '6e9c5ee88fc948e05b4a7d9f82a8861ed2b0343d'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at 6e9c5ee88f Removed unnecessary sentence in QuerySet docs.
+ git apply /root/pre_state.patch
error: unrecognized input
