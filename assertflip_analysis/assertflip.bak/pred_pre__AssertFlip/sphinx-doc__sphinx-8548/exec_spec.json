{"instance_id": "sphinx-doc__sphinx-8548", "repo": "sphinx-doc/sphinx", "version": "3.4", "environment_setup_commit": "3f560cd67239f75840cc7a439ab54d8509c855f6", "patch_list": ["diff --git a/dev/null b/tests/test_coverup_sphinx-doc__sphinx-8548.py\nnew file mode 100644\nindex e69de29..fbae042 100644\n--- /dev/null\n+++ b/tests/test_coverup_sphinx-doc__sphinx-8548.py\n@@ -0,0 +1,41 @@\n+import pytest\n+from sphinx.ext.autodoc import Documenter, Options\n+from sphinx.ext.autodoc.importer import get_class_members\n+\n+class BaseClass:\n+    \"\"\"Base class with attributes.\"\"\"\n+    base_attr = \"I am a base attribute\"\n+    \"\"\"This is the base attribute docstring.\"\"\"\n+\n+class DerivedClass(BaseClass):\n+    \"\"\"Derived class inheriting from BaseClass.\"\"\"\n+    derived_attr = \"I am a derived attribute\"\n+    \"\"\"This is the derived attribute docstring.\"\"\"\n+\n+def test_autodoc_inherited_members_bug():\n+    # Mock the Documenter and Options\n+    class MockDocumenter(Documenter):\n+        objtype = 'class'\n+        def __init__(self, *args, **kwargs):\n+            self.options = Options(inherited_members=True)\n+            self.object = DerivedClass\n+            self.objpath = ['DerivedClass']\n+            self.analyzer = None\n+\n+    # Create a mock documenter instance\n+    documenter = MockDocumenter()\n+\n+    # Get the class members using the buggy function\n+    members = get_class_members(documenter.object, documenter.objpath, getattr, documenter.analyzer)\n+\n+    # Check if the base class attribute is present\n+    assert 'base_attr' in members\n+\n+    # Check if the docstring for the base class attribute is present\n+    assert members['base_attr'].docstring is not None  # Correct behavior: docstring should be present\n+\n+    # Check if the derived class attribute is present\n+    assert 'derived_attr' in members\n+\n+    # Check if the docstring for the derived class attribute is present\n+    assert members['derived_attr'].docstring is not None  # Correct behavior: docstring should be present\n"], "arch": "x86_64", "base_commit": "dd1615c59dc6fff633e27dbb3861f2d27e1fb976", "test_directives": ["tests/test_coverup_sphinx-doc__sphinx-8548.py"], "coverage_files": ["sphinx/ext/autodoc/__init__.py", "sphinx/ext/autodoc/importer.py"], "env_name": "testbed", "run_id": "assertflip", "patch_id": "pred_pre__AssertFlip", "timeout": 1800, "rm_image": false, "force_rebuild": false, "exec_mode": "unit_test", "reproduction_script_name": null, "compute_coverage": true, "install": {"python": "3.9", "pip_packages": ["tox==4.16.0", "tox-current-env==0.0.11"], "install": "python -m pip install -e .[test]", "pre_install": ["sed -i 's/pytest/pytest -rA/' tox.ini", "sed -i 's/Jinja2>=2.3/Jinja2<3.0/' setup.py", "sed -i 's/sphinxcontrib-applehelp/sphinxcontrib-applehelp<=1.0.7/' setup.py", "sed -i 's/sphinxcontrib-devhelp/sphinxcontrib-devhelp<=1.0.5/' setup.py", "sed -i 's/sphinxcontrib-qthelp/sphinxcontrib-qthelp<=1.0.6/' setup.py", "sed -i 's/alabaster>=0.7,<0.8/alabaster>=0.7,<0.7.12/' setup.py", "sed -i \"s/'packaging',/'packaging', 'markupsafe<=2.0.1',/\" setup.py", "sed -i 's/sphinxcontrib-htmlhelp/sphinxcontrib-htmlhelp<=2.0.4/' setup.py", "sed -i 's/sphinxcontrib-serializinghtml/sphinxcontrib-serializinghtml<=1.1.9/' setup.py"]}, "cache_level": "instance", "test_command": "python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(sphinx/ext/autodoc/__init__\\.py|sphinx/ext/autodoc/importer\\.py)' -m tox -epy39 -v -- tests/test_coverup_sphinx-doc__sphinx-8548.py", "req_install_commands": ["conda create -n testbed python=3.9  -y"]}