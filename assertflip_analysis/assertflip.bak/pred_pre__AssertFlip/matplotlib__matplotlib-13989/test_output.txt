+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD a3e2897bfaf9eaac1d6649da535c4e721c89fa69
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
nothing to commit, working tree clean
+ git show
commit a3e2897bfaf9eaac1d6649da535c4e721c89fa69
Merge: b840d3a302 2b0ca609ad
Author: Tim Hoffmann <2836374+timhoffm@users.noreply.github.com>
Date:   Thu Apr 18 19:07:53 2019 +0200

    Merge pull request #13981 from anntzer/testclean
    
    Test cleanups.

+ git diff a3e2897bfaf9eaac1d6649da535c4e721c89fa69
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Requirement already satisfied: cycler>=0.10 in /opt/miniconda3/envs/testbed/lib/python3.7/site-packages (from matplotlib==3.0.2+2266.ga3e2897bfa) (0.11.0)
Requirement already satisfied: kiwisolver>=1.0.1 in /opt/miniconda3/envs/testbed/lib/python3.7/site-packages (from matplotlib==3.0.2+2266.ga3e2897bfa) (1.4.5)
Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /opt/miniconda3/envs/testbed/lib/python3.7/site-packages (from matplotlib==3.0.2+2266.ga3e2897bfa) (3.1.4)
Requirement already satisfied: python-dateutil>=2.1 in /opt/miniconda3/envs/testbed/lib/python3.7/site-packages (from matplotlib==3.0.2+2266.ga3e2897bfa) (2.9.0.post0)
Requirement already satisfied: numpy>=1.11 in /opt/miniconda3/envs/testbed/lib/python3.7/site-packages (from matplotlib==3.0.2+2266.ga3e2897bfa) (1.21.6)
Requirement already satisfied: typing-extensions in /opt/miniconda3/envs/testbed/lib/python3.7/site-packages (from kiwisolver>=1.0.1->matplotlib==3.0.2+2266.ga3e2897bfa) (4.7.1)
Requirement already satisfied: six>=1.5 in /opt/miniconda3/envs/testbed/lib/python3.7/site-packages (from python-dateutil>=2.1->matplotlib==3.0.2+2266.ga3e2897bfa) (1.17.0)
Installing collected packages: matplotlib
  Attempting uninstall: matplotlib
    Found existing installation: matplotlib 3.0.2+2266.ga3e2897bfa
    Uninstalling matplotlib-3.0.2+2266.ga3e2897bfa:
      Successfully uninstalled matplotlib-3.0.2+2266.ga3e2897bfa
  Running setup.py develop for matplotlib
Successfully installed matplotlib-3.0.2+2266.ga3e2897bfa
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv
+ git apply -v -
<stdin>:14: trailing whitespace.
    
<stdin>:17: trailing whitespace.
    
<stdin>:20: trailing whitespace.
    
Checking patch lib/matplotlib/tests/test_coverup_matplotlib__matplotlib-13989.py...
Applied patch lib/matplotlib/tests/test_coverup_matplotlib__matplotlib-13989.py cleanly.
warning: 3 lines add whitespace errors.
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(lib/matplotlib/axes/_axes\.py)' -m pytest --no-header -rA -p no:cacheprovider lib/matplotlib/tests/test_coverup_matplotlib__matplotlib-13989.py
Matplotlib is not built with the correct FreeType version to run tests.  Set local_freetype=True in setup.cfg and rebuild. Expect many image comparison failures below. Expected freetype version 2.6.1. Found freetype version 2.11.1. Freetype build type is not local
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(lib/matplotlib/axes/_axes\\.py)']
============================= test session starts ==============================
collected 1 item

lib/matplotlib/tests/test_coverup_matplotlib__matplotlib-13989.py F      [100%]

=================================== FAILURES ===================================
_________________________ test_hist_density_range_bug __________________________

    def test_hist_density_range_bug():
        # Set a random seed for reproducibility
        np.random.seed(0)
    
        # Generate random data
        data = np.random.rand(10)
    
        # Create a histogram with density=True and range=(0, 1)
        _, bins, _ = plt.hist(data, bins='auto', range=(0, 1), density=True)
    
        # Assert that the first bin edge is 0 and the last bin edge is 1
>       assert bins[0] == 0, "The first bin edge should be 0."
E       AssertionError: The first bin edge should be 0.
E       assert 0.3834415188257777 == 0

lib/matplotlib/tests/test_coverup_matplotlib__matplotlib-13989.py:16: AssertionError
----------------------------- Captured stdout call -----------------------------
2.50 _axes.py(6588):         bin_range = range
2.50 _axes.py(6589):         from builtins import range
2.50 _axes.py(6591):         if np.isscalar(x):
2.50 _axes.py(6594):         if bins is None:
2.50 _axes.py(6598):         cbook._check_in_list(['bar', 'barstacked', 'step', 'stepfilled'],
2.50 _axes.py(6599):                              histtype=histtype)
2.50 _axes.py(6600):         cbook._check_in_list(['left', 'mid', 'right'], align=align)
2.50 _axes.py(6601):         cbook._check_in_list(['horizontal', 'vertical'],
2.50 _axes.py(6602):                              orientation=orientation)
2.50 _axes.py(6604):         if histtype == 'barstacked' and not stacked:
2.50 _axes.py(6607):         if density is not None and normed is not None:
2.50 _axes.py(6612):         if normed is not None:
2.50 _axes.py(6617):         input_empty = np.size(x) == 0
2.50 _axes.py(6619):         x = cbook._reshape_2D(x, 'x')
2.50 _axes.py(6620):         nx = len(x)  # number of datasets
2.50 _axes.py(6624):         self._process_unit_info(xdata=x[0], kwargs=kwargs)
2.50 _axes.py(6625):         x = [self.convert_xunits(xi) for xi in x]
2.50 _axes.py(6625):         x = [self.convert_xunits(xi) for xi in x]
2.50 _axes.py(6625):         x = [self.convert_xunits(xi) for xi in x]
2.50 _axes.py(6627):         if bin_range is not None:
2.50 _axes.py(6628):             bin_range = self.convert_xunits(bin_range)
2.50 _axes.py(6631):         if weights is not None:
2.50 _axes.py(6634):             w = [None] * nx
2.50 _axes.py(6636):         if len(w) != nx:
2.50 _axes.py(6639):         for xi, wi in zip(x, w):
2.50 _axes.py(6640):             if wi is not None and len(wi) != len(xi):
2.50 _axes.py(6639):         for xi, wi in zip(x, w):
2.50 _axes.py(6644):         if color is None:
2.50 _axes.py(6645):             color = [self._get_lines.get_next_color() for i in range(nx)]
2.50 _axes.py(6645):             color = [self._get_lines.get_next_color() for i in range(nx)]
2.50 _axes.py(6645):             color = [self._get_lines.get_next_color() for i in range(nx)]
2.50 _axes.py(6654):         hist_kwargs = dict()
2.50 _axes.py(6659):         if bin_range is None:
2.50 _axes.py(6676):         if not input_empty and len(x) > 1:
2.50 _axes.py(6685):             hist_kwargs['range'] = bin_range
2.50 _axes.py(6687):         density = bool(density) or bool(normed)
2.50 _axes.py(6688):         if density and not stacked:
2.50 _axes.py(6689):             hist_kwargs = dict(density=density)
2.50 _axes.py(6692):         tops = []
2.50 _axes.py(6693):         mlast = None
2.50 _axes.py(6695):         for i in range(nx):
2.50 _axes.py(6698):             m, bins = np.histogram(x[i], bins, weights=w[i], **hist_kwargs)
2.50 _axes.py(6699):             m = m.astype(float)  # causes problems later if it's an int
2.50 _axes.py(6700):             if mlast is None:
2.50 _axes.py(6701):                 mlast = np.zeros(len(bins)-1, m.dtype)
2.50 _axes.py(6702):             if stacked:
2.50 _axes.py(6705):             tops.append(m)
2.50 _axes.py(6695):         for i in range(nx):
2.50 _axes.py(6709):         if stacked and density:
2.50 _axes.py(6713):         if cumulative:
2.50 _axes.py(6723):         patches = []
2.50 _axes.py(6728):         _saved_autoscalex = self.get_autoscalex_on()
2.50 _axes.py(6729):         _saved_autoscaley = self.get_autoscaley_on()
2.50 _axes.py(6730):         self.set_autoscalex_on(False)
2.50 _axes.py(6731):         self.set_autoscaley_on(False)
2.50 _axes.py(6733):         if histtype.startswith('bar'):
2.50 _axes.py(6735):             totwidth = np.diff(bins)
2.50 _axes.py(6737):             if rwidth is not None:
2.50 _axes.py(6739):             elif (len(tops) > 1 and
2.50 _axes.py(6743):                 dr = 1.0
2.50 _axes.py(6745):             if histtype == 'bar' and not stacked:
2.50 _axes.py(6746):                 width = dr * totwidth / nx
2.50 _axes.py(6747):                 dw = width
2.50 _axes.py(6748):                 boffset = -0.5 * dr * totwidth * (1 - 1 / nx)
2.50 _axes.py(6753):             if align == 'mid':
2.50 _axes.py(6754):                 boffset += 0.5 * totwidth
2.50 _axes.py(6758):             if orientation == 'horizontal':
2.50 _axes.py(6762):                 _barfunc = self.bar
2.50 _axes.py(6763):                 bottom_kwarg = 'bottom'
2.50 _axes.py(6765):             for m, c in zip(tops, color):
2.50 _axes.py(6766):                 if bottom is None:
2.50 _axes.py(6767):                     bottom = np.zeros(len(m))
2.50 _axes.py(6768):                 if stacked:
2.50 _axes.py(6771):                     height = m
2.50 _axes.py(6772):                 patch = _barfunc(bins[:-1]+boffset, height, width,
2.50 _axes.py(6773):                                  align='center', log=log,
2.50 _axes.py(6774):                                  color=c, **{bottom_kwarg: bottom})
2.50 _axes.py(2283):         kwargs = cbook.normalize_kwargs(kwargs, mpatches.Patch)
2.50 _axes.py(2284):         color = kwargs.pop('color', None)
2.50 _axes.py(2285):         if color is None:
2.50 _axes.py(2287):         edgecolor = kwargs.pop('edgecolor', None)
2.50 _axes.py(2288):         linewidth = kwargs.pop('linewidth', None)
2.50 _axes.py(2292):         xerr = kwargs.pop('xerr', None)
2.50 _axes.py(2293):         yerr = kwargs.pop('yerr', None)
2.50 _axes.py(2294):         error_kw = kwargs.pop('error_kw', {})
2.50 _axes.py(2295):         ecolor = kwargs.pop('ecolor', 'k')
2.50 _axes.py(2296):         capsize = kwargs.pop('capsize', rcParams["errorbar.capsize"])
2.50 _axes.py(2297):         error_kw.setdefault('ecolor', ecolor)
2.50 _axes.py(2298):         error_kw.setdefault('capsize', capsize)
2.50 _axes.py(2300):         orientation = kwargs.pop('orientation', 'vertical')
2.50 _axes.py(2301):         log = kwargs.pop('log', False)
2.50 _axes.py(2302):         label = kwargs.pop('label', '')
2.50 _axes.py(2303):         tick_labels = kwargs.pop('tick_label', None)
2.50 _axes.py(2305):         adjust_ylim = False
2.50 _axes.py(2306):         adjust_xlim = False
2.50 _axes.py(2308):         y = bottom  # Matches barh call signature.
2.50 _axes.py(2309):         if orientation == 'vertical':
2.50 _axes.py(2310):             if bottom is None:
2.50 _axes.py(2321):         if orientation == 'vertical':
2.50 _axes.py(2322):             self._process_unit_info(xdata=x, ydata=height, kwargs=kwargs)
2.50 _axes.py(2323):             if log:
2.50 _axes.py(2334):         if self.xaxis is not None:
2.50 _axes.py(2335):             x0 = x
2.50 _axes.py(2336):             x = np.asarray(self.convert_xunits(x))
2.50 _axes.py(2337):             width = self._convert_dx(width, x0, x, self.convert_xunits)
2.50 _axes.py(2131):         assert type(xconv) is np.ndarray
2.50 _axes.py(2133):         if xconv.size == 0:
2.50 _axes.py(2137):         try:
2.50 _axes.py(2148):             try:
2.50 _axes.py(2149):                 x0 = x0[0]
2.50 _axes.py(2153):             try:
2.50 _axes.py(2154):                 x = xconv[0]
2.50 _axes.py(2158):             delist = False
2.50 _axes.py(2159):             if not np.iterable(dx):
2.50 _axes.py(2162):             dx = [convert(x0 + ddx) - x for ddx in dx]
2.50 _axes.py(2162):             dx = [convert(x0 + ddx) - x for ddx in dx]
2.50 _axes.py(2162):             dx = [convert(x0 + ddx) - x for ddx in dx]
2.50 _axes.py(2162):             dx = [convert(x0 + ddx) - x for ddx in dx]
2.50 _axes.py(2162):             dx = [convert(x0 + ddx) - x for ddx in dx]
2.50 _axes.py(2162):             dx = [convert(x0 + ddx) - x for ddx in dx]
2.50 _axes.py(2162):             dx = [convert(x0 + ddx) - x for ddx in dx]
2.50 _axes.py(2163):             if delist:
2.50 _axes.py(2169):         return dx
2.50 _axes.py(2338):             if xerr is not None:
2.50 _axes.py(2340):         if self.yaxis is not None:
2.50 _axes.py(2341):             y0 = y
2.50 _axes.py(2342):             y = np.asarray(self.convert_yunits(y))
2.50 _axes.py(2343):             height = self._convert_dx(height, y0, y, self.convert_yunits)
2.50 _axes.py(2131):         assert type(xconv) is np.ndarray
2.50 _axes.py(2133):         if xconv.size == 0:
2.50 _axes.py(2137):         try:
2.50 _axes.py(2148):             try:
2.50 _axes.py(2149):                 x0 = x0[0]
2.50 _axes.py(2153):             try:
2.50 _axes.py(2154):                 x = xconv[0]
2.50 _axes.py(2158):             delist = False
2.50 _axes.py(2159):             if not np.iterable(dx):
2.50 _axes.py(2162):             dx = [convert(x0 + ddx) - x for ddx in dx]
2.50 _axes.py(2162):             dx = [convert(x0 + ddx) - x for ddx in dx]
2.50 _axes.py(2162):             dx = [convert(x0 + ddx) - x for ddx in dx]
2.50 _axes.py(2162):             dx = [convert(x0 + ddx) - x for ddx in dx]
2.50 _axes.py(2162):             dx = [convert(x0 + ddx) - x for ddx in dx]
2.50 _axes.py(2162):             dx = [convert(x0 + ddx) - x for ddx in dx]
2.50 _axes.py(2162):             dx = [convert(x0 + ddx) - x for ddx in dx]
2.50 _axes.py(2163):             if delist:
2.50 _axes.py(2169):         return dx
2.50 _axes.py(2344):             if yerr is not None:
2.50 _axes.py(2347):         x, height, width, y, linewidth = np.broadcast_arrays(
2.50 _axes.py(2349):             np.atleast_1d(x), height, width, y, linewidth)
2.50 _axes.py(2352):         if orientation == 'vertical':
2.50 _axes.py(2353):             tick_label_axis = self.xaxis
2.50 _axes.py(2354):             tick_label_position = x
2.50 _axes.py(2359):         linewidth = itertools.cycle(np.atleast_1d(linewidth))
2.50 _axes.py(2360):         color = itertools.chain(itertools.cycle(mcolors.to_rgba_array(color)),
2.50 _axes.py(2362):                                 itertools.repeat('none'))
2.50 _axes.py(2363):         if edgecolor is None:
2.50 _axes.py(2364):             edgecolor = itertools.repeat(None)
2.50 _axes.py(2373):         if align == 'center':
2.50 _axes.py(2374):             if orientation == 'vertical':
2.50 _axes.py(2375):                 try:
2.50 _axes.py(2376):                     left = x - width / 2
2.50 _axes.py(2381):                 bottom = y
2.50 _axes.py(2396):         patches = []
2.50 _axes.py(2397):         args = zip(left, bottom, width, height, color, edgecolor, linewidth)
2.50 _axes.py(2398):         for l, b, w, h, c, e, lw in args:
2.50 _axes.py(2399):             r = mpatches.Rectangle(
2.50 _axes.py(2400):                 xy=(l, b), width=w, height=h,
2.50 _axes.py(2401):                 facecolor=c,
2.50 _axes.py(2402):                 edgecolor=e,
2.50 _axes.py(2403):                 linewidth=lw,
2.50 _axes.py(2404):                 label='_nolegend_',
2.50 _axes.py(2406):             r.update(kwargs)
2.50 _axes.py(2407):             r.get_path()._interpolation_steps = 100
2.50 _axes.py(2408):             if orientation == 'vertical':
2.50 _axes.py(2409):                 r.sticky_edges.y.append(b)
2.50 _axes.py(2412):             self.add_patch(r)
2.50 _axes.py(2413):             patches.append(r)
2.50 _axes.py(2398):         for l, b, w, h, c, e, lw in args:
2.50 _axes.py(2399):             r = mpatches.Rectangle(
2.50 _axes.py(2400):                 xy=(l, b), width=w, height=h,
2.50 _axes.py(2401):                 facecolor=c,
2.50 _axes.py(2402):                 edgecolor=e,
2.50 _axes.py(2403):                 linewidth=lw,
2.50 _axes.py(2404):                 label='_nolegend_',
2.50 _axes.py(2406):             r.update(kwargs)
2.50 _axes.py(2407):             r.get_path()._interpolation_steps = 100
2.50 _axes.py(2408):             if orientation == 'vertical':
2.50 _axes.py(2409):                 r.sticky_edges.y.append(b)
2.50 _axes.py(2412):             self.add_patch(r)
2.50 _axes.py(2413):             patches.append(r)
2.50 _axes.py(2398):         for l, b, w, h, c, e, lw in args:
2.50 _axes.py(2399):             r = mpatches.Rectangle(
2.50 _axes.py(2400):                 xy=(l, b), width=w, height=h,
2.50 _axes.py(2401):                 facecolor=c,
2.50 _axes.py(2402):                 edgecolor=e,
2.50 _axes.py(2403):                 linewidth=lw,
2.50 _axes.py(2404):                 label='_nolegend_',
2.50 _axes.py(2406):             r.update(kwargs)
2.50 _axes.py(2407):             r.get_path()._interpolation_steps = 100
2.50 _axes.py(2408):             if orientation == 'vertical':
2.50 _axes.py(2409):                 r.sticky_edges.y.append(b)
2.50 _axes.py(2412):             self.add_patch(r)
2.50 _axes.py(2413):             patches.append(r)
2.50 _axes.py(2398):         for l, b, w, h, c, e, lw in args:
2.50 _axes.py(2399):             r = mpatches.Rectangle(
2.50 _axes.py(2400):                 xy=(l, b), width=w, height=h,
2.50 _axes.py(2401):                 facecolor=c,
2.50 _axes.py(2402):                 edgecolor=e,
2.50 _axes.py(2403):                 linewidth=lw,
2.50 _axes.py(2404):                 label='_nolegend_',
2.50 _axes.py(2406):             r.update(kwargs)
2.50 _axes.py(2407):             r.get_path()._interpolation_steps = 100
2.50 _axes.py(2408):             if orientation == 'vertical':
2.50 _axes.py(2409):                 r.sticky_edges.y.append(b)
2.50 _axes.py(2412):             self.add_patch(r)
2.50 _axes.py(2413):             patches.append(r)
2.50 _axes.py(2398):         for l, b, w, h, c, e, lw in args:
2.50 _axes.py(2399):             r = mpatches.Rectangle(
2.50 _axes.py(2400):                 xy=(l, b), width=w, height=h,
2.50 _axes.py(2401):                 facecolor=c,
2.50 _axes.py(2402):                 edgecolor=e,
2.50 _axes.py(2403):                 linewidth=lw,
2.50 _axes.py(2404):                 label='_nolegend_',
2.50 _axes.py(2406):             r.update(kwargs)
2.50 _axes.py(2407):             r.get_path()._interpolation_steps = 100
2.50 _axes.py(2408):             if orientation == 'vertical':
2.50 _axes.py(2409):                 r.sticky_edges.y.append(b)
2.50 _axes.py(2412):             self.add_patch(r)
2.50 _axes.py(2413):             patches.append(r)
2.50 _axes.py(2398):         for l, b, w, h, c, e, lw in args:
2.50 _axes.py(2415):         if xerr is not None or yerr is not None:
2.50 _axes.py(2432):             errorbar = None
2.50 _axes.py(2434):         if adjust_xlim:
2.50 _axes.py(2442):         if adjust_ylim:
2.50 _axes.py(2449):         self.autoscale_view()
2.50 _axes.py(2451):         bar_container = BarContainer(patches, errorbar, label=label)
2.50 _axes.py(2452):         self.add_container(bar_container)
2.50 _axes.py(2454):         if tick_labels is not None:
2.50 _axes.py(2459):         return bar_container
2.50 _axes.py(6775):                 patches.append(patch)
2.50 _axes.py(6776):                 if stacked:
2.50 _axes.py(6778):                 boffset += dw
2.50 _axes.py(6765):             for m, c in zip(tops, color):
2.50 _axes.py(6872):         self.set_autoscalex_on(_saved_autoscalex)
2.50 _axes.py(6873):         self.set_autoscaley_on(_saved_autoscaley)
2.50 _axes.py(6874):         self.autoscale_view()
2.51 _axes.py(6876):         if label is None:
2.51 _axes.py(6877):             labels = [None]
2.51 _axes.py(6885):         for patch, lbl in itertools.zip_longest(patches, labels):
2.51 _axes.py(6886):             if patch:
2.51 _axes.py(6887):                 p = patch[0]
2.51 _axes.py(6888):                 p.update(kwargs)
2.51 _axes.py(6889):                 if lbl is not None:
2.51 _axes.py(6892):                 for p in patch[1:]:
2.51 _axes.py(6893):                     p.update(kwargs)
2.51 _axes.py(6894):                     p.set_label('_nolegend_')
2.51 _axes.py(6892):                 for p in patch[1:]:
2.51 _axes.py(6893):                     p.update(kwargs)
2.51 _axes.py(6894):                     p.set_label('_nolegend_')
2.51 _axes.py(6892):                 for p in patch[1:]:
2.51 _axes.py(6893):                     p.update(kwargs)
2.51 _axes.py(6894):                     p.set_label('_nolegend_')
2.51 _axes.py(6892):                 for p in patch[1:]:
2.51 _axes.py(6893):                     p.update(kwargs)
2.51 _axes.py(6894):                     p.set_label('_nolegend_')
2.51 _axes.py(6892):                 for p in patch[1:]:
2.51 _axes.py(6885):         for patch, lbl in itertools.zip_longest(patches, labels):
2.51 _axes.py(6896):         if nx == 1:
2.51 _axes.py(6897):             return tops[0], bins, cbook.silent_list('Patch', patches[0])
=============================== warnings summary ===============================
lib/matplotlib/__init__.py:195
lib/matplotlib/__init__.py:195
lib/matplotlib/__init__.py:195
lib/matplotlib/__init__.py:195
lib/matplotlib/__init__.py:195
  /testbed/lib/matplotlib/__init__.py:195: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    if LooseVersion(module.__version__) < minver:

../opt/miniconda3/envs/testbed/lib/python3.7/site-packages/setuptools/_distutils/version.py:346
../opt/miniconda3/envs/testbed/lib/python3.7/site-packages/setuptools/_distutils/version.py:346
../opt/miniconda3/envs/testbed/lib/python3.7/site-packages/setuptools/_distutils/version.py:346
../opt/miniconda3/envs/testbed/lib/python3.7/site-packages/setuptools/_distutils/version.py:346
../opt/miniconda3/envs/testbed/lib/python3.7/site-packages/setuptools/_distutils/version.py:346
lib/matplotlib/tests/test_coverup_matplotlib__matplotlib-13989.py::test_hist_density_range_bug
  /opt/miniconda3/envs/testbed/lib/python3.7/site-packages/setuptools/_distutils/version.py:346: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    other = LooseVersion(other)

lib/matplotlib/tests/test_coverup_matplotlib__matplotlib-13989.py::test_hist_density_range_bug
  /testbed/lib/matplotlib/__init__.py:321: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    version = LooseVersion(match.group(1))

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED lib/matplotlib/tests/test_coverup_matplotlib__matplotlib-13989.py::test_hist_density_range_bug
======================== 1 failed, 12 warnings in 1.94s ========================
+ cat coverage.cover
{"/testbed/lib/matplotlib/axes/_axes.py": {"1": 1, "2": 1, "3": 1, "4": 1, "5": 1, "6": 1, "7": 1, "9": 1, "10": 1, "12": 1, "13": 1, "14": 1, "15": 1, "16": 1, "17": 1, "18": 1, "19": 1, "20": 1, "21": 1, "22": 1, "23": 1, "24": 1, "25": 1, "26": 1, "27": 1, "28": 1, "29": 1, "30": 1, "31": 1, "32": 1, "33": 1, "34": 1, "35": 1, "36": 1, "37": 1, "39": 1, "40": 1, "41": 0, "43": 0, "63": 1, "66": 1, "97": 2, "45": 0, "46": 0, "48": 0, "52": 0, "54": 0, "56": 0, "57": 0, "58": 0, "60": 0, "79": 0, "80": 0, "81": 0, "83": 0, "90": 0, "84": 0, "85": 0, "86": 0, "87": 0, "88": 0, "118": 1, "119": 1, "123": 1, "150": 1, "216": 1, "223": 1, "249": 1, "256": 1, "283": 1, "299": 1, "410": 1, "413": 1, "480": 1, "481": 1, "482": 1, "586": 1, "629": 1, "630": 1, "669": 1, "702": 1, "703": 1, "789": 1, "797": 1, "800": 1, "801": 1, "870": 1, "871": 1, "939": 1, "940": 1, "995": 1, "1060": 1, "1061": 1, "1063": 1, "1136": 1, "1137": 1, "1139": 1, "1213": 1, "1214": 1, "1215": 1, "1216": 1, "1219": 1, "1433": 1, "1434": 1, "1672": 1, "1673": 1, "1674": 1, "1750": 1, "1805": 1, "1854": 1, "1902": 1, "1956": 1, "1957": 1, "1958": 1, "2052": 1, "2119": 1, "2171": 1, "2172": 1, "2173": 1, "2461": 1, "2462": 1, "2574": 1, "2575": 1, "2654": 1, "2655": 1, "2656": 1, "2840": 1, "2845": 1, "3076": 1, "3077": 1, "3078": 1, "3082": 1, "3467": 1, "3468": 1, "3476": 1, "3762": 1, "3768": 1, "4135": 1, "4291": 1, "4292": 1, "4293": 1, "4294": 1, "4297": 1, "4511": 1, "4512": 1, "4513": 1, "4514": 1, "4515": 1, "4516": 1, "4517": 1, "4945": 1, "4994": 1, "4998": 1, "5001": 1, "5011": 1, "5021": 1, "5024": 1, "5025": 1, "5040": 1, "5093": 1, "5094": 1, "5096": 1, "5274": 1, "5275": 1, "5277": 1, "5455": 1, "5456": 1, "5457": 1, "5461": 1, "5650": 1, "5651": 1, "5718": 1, "5719": 1, "5720": 1, "5721": 1, "5953": 1, "5954": 1, "5955": 1, "5956": 1, "6165": 1, "6166": 1, "6167": 1, "6168": 1, "6343": 1, "6349": 1, "6351": 1, "6357": 1, "6359": 1, "6361": 1, "6365": 1, "6369": 1, "6901": 1, "6902": 1, "6904": 1, "7011": 1, "7012": 1, "7015": 1, "7128": 1, "7129": 1, "7132": 1, "7234": 1, "7235": 1, "7237": 1, "7332": 1, "7333": 1, "7335": 1, "7409": 1, "7410": 1, "7412": 1, "7485": 1, "7486": 1, "7487": 1, "7488": 1, "7489": 1, "7550": 1, "7551": 1, "7556": 1, "7703": 1, "7705": 1, "7840": 1, "7893": 1, "7896": 1, "7988": 1, "8153": 1, "8156": 1, "8158": 1, "8159": 1, "8161": 1, "8162": 1, "8163": 1, "8164": 1, "121": 0, "142": 0, "143": 0, "144": 0, "145": 0, "146": 0, "147": 0, "148": 0, "192": 0, "193": 0, "194": 0, "196": 0, "197": 0, "198": 0, "199": 0, "200": 0, "202": 0, "203": 0, "204": 0, "205": 0, "206": 0, "207": 0, "208": 0, "209": 0, "210": 0, "211": 0, "212": 0, "213": 0, "214": 0, "220": 0, "221": 0, "245": 0, "246": 0, "247": 0, "253": 0, "254": 0, "279": 0, "280": 0, "281": 0, "295": 0, "296": 0, "297": 0, "400": 0, "401": 0, "402": 0, "403": 0, "404": 0, "405": 0, "406": 0, "407": 0, "408": 0, "411": 0, "461": 0, "462": 0, "463": 0, "466": 0, "467": 0, "469": 0, "470": 0, "474": 0, "476": 0, "478": 0, "544": 0, "546": 0, "547": 0, "548": 0, "550": 0, "551": 0, "552": 0, "553": 0, "554": 0, "556": 0, "558": 0, "559": 0, "560": 0, "561": 0, "562": 0, "563": 0, "564": 0, "565": 0, "566": 0, "567": 0, "568": 0, "569": 0, "571": 0, "572": 0, "573": 0, "574": 0, "575": 0, "576": 0, "577": 0, "578": 0, "579": 0, "580": 0, "581": 0, "582": 0, "584": 0, "621": 0, "622": 0, "623": 0, "624": 0, "625": 0, "627": 0, "660": 0, "661": 0, "662": 0, "663": 0, "664": 0, "666": 0, "693": 0, "694": 0, "695": 0, "696": 0, "697": 0, "699": 0, "759": 0, "760": 0, "763": 0, "764": 0, "765": 0, "766": 0, "767": 0, "768": 0, "778": 0, "779": 0, "780": 0, "782": 0, "783": 0, "785": 0, "786": 0, "787": 0, "791": 0, "792": 0, "793": 0, "794": 0, "795": 0, "796": 0, "852": 0, "853": 0, "854": 0, "856": 0, "860": 0, "861": 0, "862": 0, "864": 0, "865": 0, "866": 0, "867": 0, "868": 0, "921": 0, "922": 0, "923": 0, "925": 0, "929": 0, "930": 0, "931": 0, "933": 0, "934": 0, "935": 0, "936": 0, "937": 0, "979": 0, "982": 0, "985": 0, "986": 0, "988": 0, "989": 0, "990": 0, "991": 0, "992": 0, "993": 0, "1044": 0, "1047": 0, "1050": 0, "1051": 0, "1053": 0, "1054": 0, "1055": 0, "1056": 0, "1057": 0, "1058": 0, "1098": 0, "1099": 0, "1100": 0, "1101": 0, "1103": 0, "1104": 0, "1105": 0, "1106": 0, "1107": 0, "1108": 0, "1110": 0, "1112": 0, "1113": 0, "1114": 0, "1116": 0, "1117": 0, "1118": 0, "1119": 0, "1120": 0, "1121": 0, "1123": 0, "1124": 0, "1125": 0, "1126": 0, "1127": 0, "1129": 0, "1131": 0, "1132": 0, "1134": 0, "1174": 0, "1177": 0, "1178": 0, "1179": 0, "1181": 0, "1182": 0, "1183": 0, "1184": 0, "1185": 0, "1186": 0, "1188": 0, "1190": 0, "1191": 0, "1192": 0, "1194": 0, "1195": 0, "1196": 0, "1197": 0, "1198": 0, "1199": 0, "1201": 0, "1202": 0, "1203": 0, "1204": 0, "1205": 0, "1207": 0, "1208": 0, "1209": 0, "1211": 0, "1301": 0, "1302": 0, "1303": 0, "1306": 0, "1307": 0, "1308": 0, "1310": 0, "1311": 0, "1312": 0, "1313": 0, "1315": 0, "1317": 0, "1318": 0, "1322": 0, "1323": 0, "1324": 0, "1326": 0, "1327": 0, "1328": 0, "1329": 0, "1330": 0, "1331": 0, "1332": 0, "1333": 0, "1334": 0, "1335": 0, "1337": 0, "1338": 0, "1339": 0, "1341": 0, "1342": 0, "1343": 0, "1344": 0, "1345": 0, "1346": 0, "1347": 0, "1348": 0, "1349": 0, "1350": 0, "1351": 0, "1354": 0, "1355": 0, "1359": 0, "1361": 0, "1362": 0, "1363": 0, "1364": 0, "1365": 0, "1366": 0, "1367": 0, "1368": 0, "1369": 0, "1370": 0, "1371": 0, "1372": 0, "1373": 0, "1375": 0, "1376": 0, "1378": 0, "1379": 0, "1381": 0, "1382": 0, "1384": 0, "1385": 0, "1387": 0, "1388": 0, "1391": 0, "1392": 0, "1393": 0, "1394": 0, "1395": 0, "1396": 0, "1397": 0, "1398": 0, "1399": 0, "1400": 0, "1401": 0, "1402": 0, "1403": 0, "1404": 0, "1406": 0, "1408": 0, "1411": 0, "1412": 0, "1413": 0, "1414": 0, "1416": 0, "1417": 0, "1419": 0, "1420": 0, "1421": 0, "1423": 0, "1424": 0, "1425": 0, "1427": 0, "1409": 0, "1665": 0, "1666": 0, "1667": 0, "1668": 0, "1669": 0, "1670": 0, "1738": 0, "1739": 0, "1740": 0, "1741": 0, "1743": 0, "1745": 0, "1747": 0, "1793": 0, "1795": 0, "1798": 0, "1799": 0, "1801": 0, "1802": 0, "1794": 0, "1796": 0, "1846": 0, "1849": 0, "1850": 0, "1851": 0, "1847": 0, "1895": 0, "1897": 0, "1898": 0, "1900": 0, "1896": 0, "1954": 0, "2015": 0, "2016": 0, "2017": 0, "2019": 0, "2020": 0, "2022": 0, "2024": 0, "2025": 0, "2027": 0, "2028": 0, "2030": 0, "2031": 0, "2032": 0, "2034": 0, "2035": 0, "2037": 0, "2038": 0, "2040": 0, "2041": 0, "2043": 0, "2044": 0, "2045": 0, "2046": 0, "2047": 0, "2113": 0, "2114": 0, "2116": 0, "2117": 0, "2131": 2, "2133": 2, "2135": 0, "2137": 2, "2148": 2, "2149": 2, "2150": 0, "2151": 0, "2153": 2, "2154": 2, "2155": 0, "2156": 0, "2158": 2, "2159": 2, "2160": 0, "2161": 0, "2162": 14, "2163": 2, "2164": 0, "2165": 0, "2168": 0, "2169": 2, "2283": 1, "2284": 1, "2285": 1, "2286": 0, "2287": 1, "2288": 1, "2292": 1, "2293": 1, "2294": 1, "2295": 1, "2296": 1, "2297": 1, "2298": 1, "2300": 1, "2301": 1, "2302": 1, "2303": 1, "2305": 1, "2306": 1, "2308": 1, "2309": 1, "2310": 1, "2311": 0, "2312": 0, "2313": 0, "2315": 0, "2316": 0, "2317": 0, "2318": 0, "2319": 0, "2321": 1, "2322": 1, "2323": 1, "2324": 0, "2325": 0, "2326": 0, "2327": 0, "2328": 0, "2330": 0, "2334": 1, "2335": 1, "2336": 1, "2337": 1, "2338": 1, "2339": 0, "2340": 1, "2341": 1, "2342": 1, "2343": 1, "2344": 1, "2345": 0, "2347": 1, "2349": 1, "2352": 1, "2353": 1, "2354": 1, "2355": 0, "2356": 0, "2357": 0, "2359": 1, "2360": 1, "2362": 1, "2363": 1, "2364": 1, "2366": 0, "2367": 0, "2369": 0, "2373": 1, "2374": 1, "2375": 1, "2376": 1, "2377": 0, "2378": 0, "2380": 0, "2381": 1, "2382": 0, "2383": 0, "2384": 0, "2385": 0, "2386": 0, "2388": 0, "2389": 0, "2390": 0, "2391": 0, "2392": 0, "2394": 0, "2396": 1, "2397": 1, "2398": 6, "2399": 5, "2400": 5, "2401": 5, "2402": 5, "2403": 5, "2404": 5, "2406": 5, "2407": 5, "2408": 5, "2409": 5, "2410": 0, "2411": 0, "2412": 5, "2413": 5, "2415": 1, "2416": 0, "2418": 0, "2419": 0, "2421": 0, "2423": 0, "2424": 0, "2426": 0, "2428": 0, "2429": 0, "2430": 0, "2432": 1, "2434": 1, "2435": 0, "2436": 0, "2437": 0, "2438": 0, "2439": 0, "2440": 0, "2442": 1, "2443": 0, "2444": 0, "2445": 0, "2446": 0, "2447": 0, "2448": 0, "2449": 1, "2451": 1, "2452": 1, "2454": 1, "2455": 0, "2456": 0, "2457": 0, "2459": 1, "2569": 0, "2570": 0, "2571": 0, "2572": 0, "2625": 0, "2626": 0, "2628": 0, "2629": 0, "2630": 0, "2632": 0, "2633": 0, "2634": 0, "2635": 0, "2636": 0, "2637": 0, "2638": 0, "2639": 0, "2642": 0, "2643": 0, "2644": 0, "2646": 0, "2648": 0, "2649": 0, "2650": 0, "2652": 0, "2739": 0, "2740": 0, "2741": 0, "2743": 0, "2744": 0, "2747": 0, "2748": 0, "2750": 0, "2751": 0, "2752": 0, "2753": 0, "2754": 0, "2755": 0, "2758": 0, "2759": 0, "2761": 0, "2762": 0, "2763": 0, "2764": 0, "2765": 0, "2768": 0, "2770": 0, "2772": 0, "2773": 0, "2775": 0, "2776": 0, "2777": 0, "2778": 0, "2779": 0, "2782": 0, "2785": 0, "2787": 0, "2788": 0, "2790": 0, "2791": 0, "2792": 0, "2793": 0, "2795": 0, "2796": 0, "2797": 0, "2800": 0, "2802": 0, "2805": 0, "2806": 0, "2807": 0, "2808": 0, "2809": 0, "2810": 0, "2811": 0, "2812": 0, "2815": 0, "2816": 0, "2821": 0, "2822": 0, "2823": 0, "2824": 0, "2825": 0, "2826": 0, "2828": 0, "2829": 0, "2831": 0, "2832": 0, "2833": 0, "2835": 0, "2836": 0, "2837": 0, "2838": 0, "2942": 0, "2945": 0, "2946": 0, "2947": 0, "2948": 0, "2951": 0, "2953": 0, "2954": 0, "2955": 0, "2957": 0, "2958": 0, "2959": 0, "2960": 0, "2961": 0, "2962": 0, "2963": 0, "2964": 0, "2965": 0, "2966": 0, "2968": 0, "2970": 0, "2973": 0, "2974": 0, "2977": 0, "2978": 0, "2980": 0, "2983": 0, "2984": 0, "2985": 0, "2987": 0, "2988": 0, "2989": 0, "2991": 0, "2992": 0, "2993": 0, "2995": 0, "2996": 0, "2997": 0, "2998": 0, "2999": 0, "3000": 0, "3001": 0, "3003": 0, "3004": 0, "3005": 0, "3006": 0, "3007": 0, "3008": 0, "3009": 0, "3011": 0, "3015": 0, "3016": 0, "3017": 0, "3018": 0, "3020": 0, "3021": 0, "3022": 0, "3023": 0, "3024": 0, "3025": 0, "3026": 0, "3027": 0, "3028": 0, "3029": 0, "3030": 0, "3031": 0, "3032": 0, "3033": 0, "3034": 0, "3036": 0, "3038": 0, "3040": 0, "3041": 0, "3042": 0, "3043": 0, "3044": 0, "3045": 0, "3046": 0, "3048": 0, "3049": 0, "3051": 0, "3052": 0, "3053": 0, "3054": 0, "3056": 0, "3058": 0, "3059": 0, "3061": 0, "3062": 0, "3064": 0, "3065": 0, "3066": 0, "3067": 0, "3068": 0, "3069": 0, "3071": 0, "3072": 0, "3074": 0, "2971": 0, "3191": 0, "3194": 0, "3195": 0, "3197": 0, "3198": 0, "3199": 0, "3201": 0, "3203": 0, "3204": 0, "3206": 0, "3207": 0, "3209": 0, "3210": 0, "3211": 0, "3213": 0, "3215": 0, "3217": 0, "3218": 0, "3219": 0, "3220": 0, "3221": 0, "3223": 0, "3225": 0, "3226": 0, "3227": 0, "3228": 0, "3229": 0, "3230": 0, "3233": 0, "3234": 0, "3236": 0, "3237": 0, "3239": 0, "3240": 0, "3241": 0, "3243": 0, "3244": 0, "3245": 0, "3249": 0, "3250": 0, "3251": 0, "3252": 0, "3256": 0, "3257": 0, "3258": 0, "3259": 0, "3261": 0, "3262": 0, "3263": 0, "3264": 0, "3266": 0, "3267": 0, "3268": 0, "3271": 0, "3273": 0, "3274": 0, "3275": 0, "3276": 0, "3277": 0, "3278": 0, "3279": 0, "3280": 0, "3281": 0, "3282": 0, "3283": 0, "3284": 0, "3288": 0, "3290": 0, "3291": 0, "3292": 0, "3294": 0, "3295": 0, "3296": 0, "3297": 0, "3299": 0, "3300": 0, "3303": 0, "3304": 0, "3305": 0, "3306": 0, "3308": 0, "3310": 0, "3321": 0, "3357": 0, "3358": 0, "3361": 0, "3362": 0, "3363": 0, "3364": 0, "3365": 0, "3366": 0, "3367": 0, "3368": 0, "3369": 0, "3370": 0, "3372": 0, "3373": 0, "3374": 0, "3375": 0, "3376": 0, "3377": 0, "3378": 0, "3380": 0, "3381": 0, "3382": 0, "3383": 0, "3384": 0, "3385": 0, "3386": 0, "3387": 0, "3389": 0, "3390": 0, "3391": 0, "3392": 0, "3393": 0, "3394": 0, "3395": 0, "3397": 0, "3398": 0, "3399": 0, "3400": 0, "3401": 0, "3402": 0, "3403": 0, "3404": 0, "3406": 0, "3407": 0, "3410": 0, "3411": 0, "3412": 0, "3413": 0, "3414": 0, "3415": 0, "3416": 0, "3417": 0, "3418": 0, "3419": 0, "3421": 0, "3422": 0, "3423": 0, "3424": 0, "3425": 0, "3426": 0, "3427": 0, "3429": 0, "3430": 0, "3431": 0, "3432": 0, "3433": 0, "3434": 0, "3435": 0, "3436": 0, "3438": 0, "3439": 0, "3440": 0, "3441": 0, "3442": 0, "3443": 0, "3444": 0, "3446": 0, "3447": 0, "3448": 0, "3449": 0, "3450": 0, "3451": 0, "3452": 0, "3453": 0, "3454": 0, "3455": 0, "3457": 0, "3458": 0, "3459": 0, "3460": 0, "3461": 0, "3462": 0, "3463": 0, "3465": 0, "3212": 0, "3315": 0, "3316": 0, "3317": 0, "3318": 0, "3319": 0, "3327": 0, "3328": 0, "3329": 0, "3330": 0, "3331": 0, "3332": 0, "3335": 0, "3336": 0, "3337": 0, "3338": 0, "3339": 0, "3340": 0, "3341": 0, "3342": 0, "3343": 0, "3348": 0, "3349": 0, "3350": 0, "3351": 0, "3353": 0, "3354": 0, "3355": 0, "3651": 0, "3652": 0, "3653": 0, "3654": 0, "3656": 0, "3657": 0, "3658": 0, "3659": 0, "3660": 0, "3661": 0, "3662": 0, "3663": 0, "3664": 0, "3665": 0, "3666": 0, "3667": 0, "3668": 0, "3669": 0, "3670": 0, "3671": 0, "3672": 0, "3673": 0, "3675": 0, "3676": 0, "3677": 0, "3678": 0, "3679": 0, "3680": 0, "3681": 0, "3682": 0, "3683": 0, "3684": 0, "3685": 0, "3686": 0, "3688": 0, "3689": 0, "3690": 0, "3691": 0, "3698": 0, "3702": 0, "3704": 0, "3706": 0, "3711": 0, "3713": 0, "3714": 0, "3716": 0, "3720": 0, "3721": 0, "3722": 0, "3725": 0, "3726": 0, "3727": 0, "3728": 0, "3731": 0, "3732": 0, "3733": 0, "3735": 0, "3736": 0, "3737": 0, "3738": 0, "3740": 0, "3741": 0, "3742": 0, "3743": 0, "3746": 0, "3747": 0, "3748": 0, "3749": 0, "3751": 0, "3752": 0, "3753": 0, "3754": 0, "3755": 0, "3756": 0, "3757": 0, "3758": 0, "3759": 0, "3760": 0, "3911": 0, "3912": 0, "3913": 0, "3914": 0, "3915": 0, "3916": 0, "3919": 0, "3922": 0, "3923": 0, "3925": 0, "3927": 0, "3936": 0, "3937": 0, "3938": 0, "3939": 0, "3940": 0, "3941": 0, "3942": 0, "3943": 0, "3945": 0, "3946": 0, "3948": 0, "3949": 0, "3950": 0, "3951": 0, "3952": 0, "3953": 0, "3954": 0, "3956": 0, "3957": 0, "3959": 0, "3967": 0, "3975": 0, "3976": 0, "3979": 0, "3983": 0, "3989": 0, "3994": 0, "3995": 0, "3998": 0, "3999": 0, "4000": 0, "4001": 0, "4003": 0, "4004": 0, "4005": 0, "4008": 0, "4009": 0, "4010": 0, "4011": 0, "4012": 0, "4013": 0, "4015": 0, "4017": 0, "4020": 0, "4021": 0, "4022": 0, "4025": 0, "4026": 0, "4027": 0, "4028": 0, "4029": 0, "4032": 0, "4033": 0, "4034": 0, "4037": 0, "4038": 0, "4039": 0, "4040": 0, "4041": 0, "4042": 0, "4043": 0, "4044": 0, "4045": 0, "4049": 0, "4050": 0, "4051": 0, "4052": 0, "4055": 0, "4056": 0, "4057": 0, "4059": 0, "4062": 0, "4063": 0, "4065": 0, "4066": 0, "4070": 0, "4071": 0, "4072": 0, "4075": 0, "4078": 0, "4079": 0, "4080": 0, "4081": 0, "4082": 0, "4085": 0, "4086": 0, "4090": 0, "4092": 0, "4093": 0, "4095": 0, "4096": 0, "4099": 0, "4100": 0, "4101": 0, "4102": 0, "4103": 0, "4110": 0, "4111": 0, "4112": 0, "4113": 0, "4114": 0, "4116": 0, "4117": 0, "4118": 0, "4119": 0, "4120": 0, "4121": 0, "4122": 0, "4123": 0, "4124": 0, "4125": 0, "4126": 0, "4127": 0, "4129": 0, "4130": 0, "4132": 0, "4133": 0, "3928": 0, "3930": 0, "3931": 0, "3932": 0, "3933": 0, "3929": 0, "3961": 0, "3964": 0, "3965": 0, "3968": 0, "3969": 0, "3970": 0, "3971": 0, "3972": 0, "3977": 0, "3980": 0, "3984": 0, "3985": 0, "3986": 0, "3987": 0, "3990": 0, "3991": 0, "4190": 0, "4191": 0, "4193": 0, "4194": 0, "4195": 0, "4197": 0, "4199": 0, "4200": 0, "4204": 0, "4205": 0, "4206": 0, "4207": 0, "4208": 0, "4212": 0, "4213": 0, "4214": 0, "4215": 0, "4217": 0, "4218": 0, "4220": 0, "4221": 0, "4222": 0, "4223": 0, "4224": 0, "4231": 0, "4232": 0, "4234": 0, "4235": 0, "4236": 0, "4237": 0, "4238": 0, "4239": 0, "4240": 0, "4242": 0, "4243": 0, "4244": 0, "4245": 0, "4246": 0, "4248": 0, "4249": 0, "4250": 0, "4257": 0, "4258": 0, "4259": 0, "4261": 0, "4262": 0, "4263": 0, "4264": 0, "4265": 0, "4266": 0, "4269": 0, "4270": 0, "4271": 0, "4272": 0, "4273": 0, "4274": 0, "4277": 0, "4282": 0, "4283": 0, "4285": 0, "4288": 0, "4289": 0, "4413": 0, "4414": 0, "4415": 0, "4419": 0, "4420": 0, "4421": 0, "4422": 0, "4423": 0, "4425": 0, "4426": 0, "4427": 0, "4428": 0, "4431": 0, "4432": 0, "4433": 0, "4435": 0, "4436": 0, "4438": 0, "4441": 0, "4442": 0, "4444": 0, "4447": 0, "4448": 0, "4449": 0, "4450": 0, "4451": 0, "4454": 0, "4455": 0, "4457": 0, "4458": 0, "4460": 0, "4462": 0, "4463": 0, "4464": 0, "4465": 0, "4466": 0, "4468": 0, "4470": 0, "4471": 0, "4472": 0, "4473": 0, "4474": 0, "4475": 0, "4476": 0, "4477": 0, "4479": 0, "4480": 0, "4482": 0, "4483": 0, "4484": 0, "4485": 0, "4486": 0, "4487": 0, "4488": 0, "4490": 0, "4491": 0, "4493": 0, "4500": 0, "4501": 0, "4502": 0, "4503": 0, "4504": 0, "4506": 0, "4507": 0, "4509": 0, "4639": 0, "4641": 0, "4644": 0, "4645": 0, "4647": 0, "4648": 0, "4650": 0, "4651": 0, "4652": 0, "4653": 0, "4654": 0, "4656": 0, "4657": 0, "4658": 0, "4659": 0, "4661": 0, "4662": 0, "4663": 0, "4665": 0, "4666": 0, "4669": 0, "4670": 0, "4674": 0, "4675": 0, "4676": 0, "4677": 0, "4678": 0, "4680": 0, "4681": 0, "4682": 0, "4684": 0, "4685": 0, "4686": 0, "4687": 0, "4688": 0, "4689": 0, "4691": 0, "4692": 0, "4693": 0, "4694": 0, "4695": 0, "4697": 0, "4698": 0, "4699": 0, "4700": 0, "4701": 0, "4702": 0, "4703": 0, "4704": 0, "4705": 0, "4706": 0, "4707": 0, "4708": 0, "4709": 0, "4710": 0, "4711": 0, "4714": 0, "4715": 0, "4718": 0, "4719": 0, "4720": 0, "4721": 0, "4722": 0, "4723": 0, "4724": 0, "4725": 0, "4727": 0, "4728": 0, "4729": 0, "4730": 0, "4732": 0, "4733": 0, "4735": 0, "4736": 0, "4737": 0, "4738": 0, "4739": 0, "4741": 0, "4742": 0, "4743": 0, "4744": 0, "4745": 0, "4746": 0, "4748": 0, "4750": 0, "4751": 0, "4752": 0, "4754": 0, "4755": 0, "4756": 0, "4757": 0, "4758": 0, "4759": 0, "4760": 0, "4761": 0, "4762": 0, "4764": 0, "4765": 0, "4767": 0, "4768": 0, "4770": 0, "4771": 0, "4773": 0, "4774": 0, "4775": 0, "4776": 0, "4777": 0, "4778": 0, "4779": 0, "4780": 0, "4781": 0, "4782": 0, "4783": 0, "4784": 0, "4785": 0, "4786": 0, "4787": 0, "4788": 0, "4791": 0, "4792": 0, "4793": 0, "4794": 0, "4795": 0, "4796": 0, "4797": 0, "4801": 0, "4802": 0, "4803": 0, "4806": 0, "4807": 0, "4808": 0, "4810": 0, "4812": 0, "4813": 0, "4815": 0, "4816": 0, "4818": 0, "4822": 0, "4823": 0, "4824": 0, "4826": 0, "4827": 0, "4828": 0, "4829": 0, "4830": 0, "4831": 0, "4832": 0, "4834": 0, "4835": 0, "4836": 0, "4837": 0, "4838": 0, "4840": 0, "4841": 0, "4843": 0, "4845": 0, "4846": 0, "4847": 0, "4848": 0, "4849": 0, "4852": 0, "4853": 0, "4854": 0, "4856": 0, "4857": 0, "4859": 0, "4871": 0, "4873": 0, "4874": 0, "4875": 0, "4876": 0, "4877": 0, "4878": 0, "4879": 0, "4881": 0, "4883": 0, "4884": 0, "4886": 0, "4887": 0, "4888": 0, "4889": 0, "4890": 0, "4892": 0, "4893": 0, "4895": 0, "4897": 0, "4898": 0, "4899": 0, "4900": 0, "4901": 0, "4902": 0, "4904": 0, "4905": 0, "4906": 0, "4907": 0, "4908": 0, "4909": 0, "4910": 0, "4911": 0, "4913": 0, "4914": 0, "4915": 0, "4916": 0, "4917": 0, "4918": 0, "4920": 0, "4922": 0, "4924": 0, "4925": 0, "4926": 0, "4927": 0, "4928": 0, "4929": 0, "4930": 0, "4932": 0, "4933": 0, "4935": 0, "4941": 0, "4943": 0, "4860": 0, "4861": 0, "4862": 0, "4863": 0, "4864": 0, "4865": 0, "4867": 0, "4868": 0, "4869": 0, "4936": 0, "4937": 0, "4938": 0, "4939": 0, "4985": 0, "4986": 0, "4987": 0, "4988": 0, "4990": 0, "4991": 0, "4992": 0, "4995": 0, "4996": 0, "4997": 0, "5002": 0, "5003": 0, "5004": 0, "5005": 0, "5006": 0, "5007": 0, "5008": 0, "5014": 0, "5016": 0, "5018": 0, "5019": 0, "5020": 0, "5031": 0, "5033": 0, "5034": 0, "5035": 0, "5036": 0, "5084": 0, "5086": 0, "5087": 0, "5088": 0, "5089": 0, "5090": 0, "5091": 0, "5178": 0, "5179": 0, "5180": 0, "5182": 0, "5185": 0, "5186": 0, "5189": 0, "5190": 0, "5191": 0, "5193": 0, "5194": 0, "5195": 0, "5196": 0, "5198": 0, "5199": 0, "5200": 0, "5201": 0, "5203": 0, "5205": 0, "5206": 0, "5207": 0, "5208": 0, "5209": 0, "5210": 0, "5211": 0, "5212": 0, "5214": 0, "5215": 0, "5217": 0, "5218": 0, "5220": 0, "5221": 0, "5241": 0, "5242": 0, "5247": 0, "5248": 0, "5250": 0, "5251": 0, "5253": 0, "5254": 0, "5255": 0, "5256": 0, "5258": 0, "5260": 0, "5263": 0, "5264": 0, "5265": 0, "5266": 0, "5267": 0, "5268": 0, "5269": 0, "5270": 0, "5271": 0, "5272": 0, "5222": 0, "5223": 0, "5224": 0, "5225": 0, "5227": 0, "5228": 0, "5229": 0, "5230": 0, "5231": 0, "5233": 0, "5234": 0, "5235": 0, "5236": 0, "5237": 0, "5238": 0, "5239": 0, "5359": 0, "5360": 0, "5361": 0, "5363": 0, "5366": 0, "5367": 0, "5370": 0, "5371": 0, "5372": 0, "5374": 0, "5375": 0, "5376": 0, "5377": 0, "5379": 0, "5380": 0, "5381": 0, "5382": 0, "5384": 0, "5386": 0, "5387": 0, "5388": 0, "5389": 0, "5390": 0, "5391": 0, "5392": 0, "5393": 0, "5395": 0, "5396": 0, "5398": 0, "5399": 0, "5400": 0, "5401": 0, "5421": 0, "5422": 0, "5427": 0, "5428": 0, "5430": 0, "5431": 0, "5433": 0, "5434": 0, "5435": 0, "5436": 0, "5438": 0, "5440": 0, "5443": 0, "5444": 0, "5445": 0, "5446": 0, "5447": 0, "5448": 0, "5449": 0, "5450": 0, "5451": 0, "5452": 0, "5402": 0, "5403": 0, "5404": 0, "5405": 0, "5407": 0, "5408": 0, "5409": 0, "5410": 0, "5411": 0, "5413": 0, "5414": 0, "5415": 0, "5416": 0, "5417": 0, "5418": 0, "5419": 0, "5622": 0, "5623": 0, "5624": 0, "5625": 0, "5626": 0, "5627": 0, "5628": 0, "5629": 0, "5630": 0, "5632": 0, "5633": 0, "5634": 0, "5636": 0, "5637": 0, "5638": 0, "5640": 0, "5641": 0, "5645": 0, "5647": 0, "5648": 0, "5660": 0, "5661": 0, "5662": 0, "5663": 0, "5664": 0, "5666": 0, "5667": 0, "5668": 0, "5669": 0, "5671": 0, "5673": 0, "5674": 0, "5675": 0, "5676": 0, "5677": 0, "5678": 0, "5683": 0, "5684": 0, "5685": 0, "5686": 0, "5687": 0, "5689": 0, "5690": 0, "5692": 0, "5693": 0, "5694": 0, "5695": 0, "5696": 0, "5697": 0, "5698": 0, "5699": 0, "5700": 0, "5701": 0, "5702": 0, "5703": 0, "5704": 0, "5705": 0, "5706": 0, "5708": 0, "5710": 0, "5711": 0, "5713": 0, "5714": 0, "5715": 0, "5716": 0, "5856": 0, "5857": 0, "5860": 0, "5861": 0, "5862": 0, "5865": 0, "5866": 0, "5867": 0, "5869": 0, "5871": 0, "5873": 0, "5875": 0, "5876": 0, "5877": 0, "5878": 0, "5879": 0, "5880": 0, "5881": 0, "5882": 0, "5883": 0, "5884": 0, "5886": 0, "5887": 0, "5889": 0, "5891": 0, "5892": 0, "5893": 0, "5894": 0, "5896": 0, "5897": 0, "5898": 0, "5904": 0, "5905": 0, "5906": 0, "5907": 0, "5909": 0, "5911": 0, "5913": 0, "5914": 0, "5915": 0, "5916": 0, "5917": 0, "5918": 0, "5919": 0, "5920": 0, "5921": 0, "5922": 0, "5924": 0, "5925": 0, "5928": 0, "5929": 0, "5930": 0, "5931": 0, "5933": 0, "5934": 0, "5935": 0, "5936": 0, "5937": 0, "5938": 0, "5940": 0, "5942": 0, "5943": 0, "5944": 0, "5945": 0, "5946": 0, "5947": 0, "5948": 0, "5949": 0, "5950": 0, "5951": 0, "6112": 0, "6113": 0, "6115": 0, "6117": 0, "6118": 0, "6119": 0, "6120": 0, "6122": 0, "6123": 0, "6124": 0, "6127": 0, "6128": 0, "6129": 0, "6130": 0, "6131": 0, "6132": 0, "6133": 0, "6134": 0, "6135": 0, "6136": 0, "6137": 0, "6138": 0, "6139": 0, "6140": 0, "6142": 0, "6145": 0, "6146": 0, "6147": 0, "6148": 0, "6150": 0, "6151": 0, "6152": 0, "6154": 0, "6156": 0, "6157": 0, "6158": 0, "6159": 0, "6160": 0, "6161": 0, "6162": 0, "6163": 0, "6269": 0, "6270": 0, "6271": 0, "6273": 0, "6274": 0, "6275": 0, "6276": 0, "6277": 0, "6278": 0, "6279": 0, "6280": 0, "6281": 0, "6282": 0, "6283": 0, "6284": 0, "6285": 0, "6287": 0, "6288": 0, "6289": 0, "6290": 0, "6291": 0, "6293": 0, "6294": 0, "6295": 0, "6296": 0, "6297": 0, "6299": 0, "6301": 0, "6303": 0, "6305": 0, "6307": 0, "6308": 0, "6309": 0, "6310": 0, "6311": 0, "6312": 0, "6313": 0, "6314": 0, "6317": 0, "6318": 0, "6319": 0, "6320": 0, "6321": 0, "6322": 0, "6323": 0, "6324": 0, "6325": 0, "6326": 0, "6327": 0, "6328": 0, "6329": 0, "6330": 0, "6332": 0, "6333": 0, "6335": 0, "6337": 0, "6338": 0, "6339": 0, "6340": 0, "6341": 0, "6345": 0, "6346": 0, "6347": 0, "6348": 0, "6353": 0, "6354": 0, "6355": 0, "6356": 0, "6360": 0, "6588": 1, "6589": 1, "6591": 1, "6592": 0, "6594": 1, "6595": 0, "6598": 1, "6599": 1, "6600": 1, "6601": 1, "6602": 1, "6604": 1, "6605": 0, "6607": 1, "6608": 0, "6612": 1, "6613": 0, "6614": 0, "6617": 1, "6619": 1, "6620": 1, "6624": 1, "6625": 3, "6627": 1, "6628": 1, "6631": 1, "6632": 0, "6634": 1, "6636": 1, "6637": 0, "6639": 2, "6640": 1, "6641": 0, "6642": 0, "6644": 1, "6645": 3, "6647": 0, "6648": 0, "6650": 0, "6651": 0, "6652": 0, "6654": 1, "6659": 1, "6660": 0, "6661": 0, "6662": 0, "6663": 0, "6666": 0, "6667": 0, "6670": 0, "6671": 0, "6676": 1, "6677": 0, "6678": 0, "6680": 0, "6682": 0, "6683": 0, "6685": 1, "6687": 1, "6688": 1, "6689": 1, "6692": 1, "6693": 1, "6695": 2, "6698": 1, "6699": 1, "6700": 1, "6701": 1, "6702": 1, "6703": 0, "6704": 0, "6705": 1, "6709": 1, "6710": 0, "6711": 0, "6712": 0, "6713": 1, "6714": 0, "6715": 0, "6716": 0, "6718": 0, "6719": 0, "6721": 0, "6723": 1, "6728": 1, "6729": 1, "6730": 1, "6731": 1, "6733": 1, "6735": 1, "6737": 1, "6738": 0, "6739": 1, "6740": 0, "6741": 0, "6743": 1, "6745": 1, "6746": 1, "6747": 1, "6748": 1, "6749": 0, "6750": 0, "6751": 0, "6753": 1, "6754": 1, "6755": 0, "6756": 0, "6758": 1, "6759": 0, "6760": 0, "6762": 1, "6763": 1, "6765": 2, "6766": 1, "6767": 1, "6768": 1, "6769": 0, "6771": 1, "6772": 1, "6773": 1, "6774": 1, "6775": 1, "6776": 1, "6777": 0, "6778": 1, "6780": 0, "6782": 0, "6783": 0, "6785": 0, "6786": 0, "6788": 0, "6789": 0, "6791": 0, "6792": 0, "6794": 0, "6795": 0, "6796": 0, "6797": 0, "6799": 0, "6800": 0, "6803": 0, "6804": 0, "6805": 0, "6809": 0, "6810": 0, "6816": 0, "6818": 0, "6820": 0, "6822": 0, "6823": 0, "6824": 0, "6825": 0, "6829": 0, "6831": 0, "6832": 0, "6833": 0, "6835": 0, "6837": 0, "6839": 0, "6840": 0, "6841": 0, "6842": 0, "6843": 0, "6844": 0, "6845": 0, "6847": 0, "6848": 0, "6851": 0, "6855": 0, "6856": 0, "6857": 0, "6858": 0, "6859": 0, "6860": 0, "6861": 0, "6862": 0, "6863": 0, "6864": 0, "6865": 0, "6866": 0, "6867": 0, "6870": 0, "6872": 1, "6873": 1, "6874": 1, "6876": 1, "6877": 1, "6878": 0, "6879": 0, "6880": 0, "6881": 0, "6883": 0, "6885": 2, "6886": 1, "6887": 1, "6888": 1, "6889": 1, "6890": 0, "6892": 5, "6893": 4, "6894": 4, "6896": 1, "6897": 1, "6899": 0, "6997": 0, "6998": 0, "7000": 0, "7001": 0, "7002": 0, "7003": 0, "7005": 0, "7006": 0, "7007": 0, "7009": 0, "7097": 0, "7098": 0, "7100": 0, "7101": 0, "7102": 0, "7103": 0, "7105": 0, "7106": 0, "7108": 0, "7110": 0, "7111": 0, "7112": 0, "7113": 0, "7114": 0, "7115": 0, "7116": 0, "7117": 0, "7118": 0, "7119": 0, "7120": 0, "7121": 0, "7123": 0, "7124": 0, "7126": 0, "7208": 0, "7209": 0, "7211": 0, "7212": 0, "7213": 0, "7215": 0, "7217": 0, "7218": 0, "7219": 0, "7220": 0, "7221": 0, "7223": 0, "7224": 0, "7226": 0, "7227": 0, "7229": 0, "7230": 0, "7232": 0, "7307": 0, "7308": 0, "7310": 0, "7311": 0, "7313": 0, "7314": 0, "7315": 0, "7317": 0, "7318": 0, "7319": 0, "7320": 0, "7321": 0, "7322": 0, "7324": 0, "7326": 0, "7327": 0, "7328": 0, "7330": 0, "7396": 0, "7397": 0, "7399": 0, "7400": 0, "7401": 0, "7403": 0, "7404": 0, "7405": 0, "7407": 0, "7472": 0, "7473": 0, "7475": 0, "7476": 0, "7477": 0, "7479": 0, "7480": 0, "7481": 0, "7483": 0, "7538": 0, "7539": 0, "7540": 0, "7541": 0, "7543": 0, "7544": 0, "7545": 0, "7546": 0, "7548": 0, "7653": 0, "7654": 0, "7655": 0, "7656": 0, "7657": 0, "7658": 0, "7660": 0, "7661": 0, "7663": 0, "7664": 0, "7665": 0, "7667": 0, "7668": 0, "7669": 0, "7671": 0, "7672": 0, "7673": 0, "7674": 0, "7675": 0, "7676": 0, "7678": 0, "7679": 0, "7680": 0, "7681": 0, "7682": 0, "7684": 0, "7686": 0, "7688": 0, "7690": 0, "7692": 0, "7693": 0, "7694": 0, "7695": 0, "7696": 0, "7697": 0, "7698": 0, "7699": 0, "7701": 0, "7786": 0, "7787": 0, "7788": 0, "7789": 0, "7790": 0, "7792": 0, "7793": 0, "7794": 0, "7795": 0, "7796": 0, "7797": 0, "7798": 0, "7799": 0, "7801": 0, "7802": 0, "7803": 0, "7804": 0, "7805": 0, "7807": 0, "7808": 0, "7809": 0, "7811": 0, "7812": 0, "7813": 0, "7814": 0, "7815": 0, "7816": 0, "7817": 0, "7818": 0, "7819": 0, "7820": 0, "7821": 0, "7822": 0, "7823": 0, "7824": 0, "7825": 0, "7826": 0, "7827": 0, "7828": 0, "7829": 0, "7830": 0, "7831": 0, "7832": 0, "7833": 0, "7834": 0, "7835": 0, "7836": 0, "7837": 0, "7838": 0, "7876": 0, "7877": 0, "7878": 0, "7879": 0, "7880": 0, "7881": 0, "7882": 0, "7883": 0, "7884": 0, "7885": 0, "7886": 0, "7887": 0, "7888": 0, "7889": 0, "7890": 0, "7891": 0, "7975": 0, "7982": 0, "7983": 0, "7984": 0, "7985": 0, "7977": 0, "7978": 0, "7979": 0, "7980": 0, "8066": 0, "8067": 0, "8068": 0, "8069": 0, "8072": 0, "8074": 0, "8075": 0, "8079": 0, "8080": 0, "8081": 0, "8082": 0, "8085": 0, "8086": 0, "8087": 0, "8088": 0, "8091": 0, "8092": 0, "8095": 0, "8096": 0, "8097": 0, "8098": 0, "8100": 0, "8101": 0, "8102": 0, "8104": 0, "8105": 0, "8106": 0, "8108": 0, "8111": 0, "8112": 0, "8115": 0, "8116": 0, "8117": 0, "8118": 0, "8119": 0, "8120": 0, "8121": 0, "8122": 0, "8123": 0, "8124": 0, "8125": 0, "8126": 0, "8129": 0, "8130": 0, "8131": 0, "8134": 0, "8135": 0, "8136": 0, "8137": 0, "8138": 0, "8139": 0, "8140": 0, "8143": 0, "8144": 0, "8145": 0, "8146": 0, "8147": 0, "8149": 0}}
+ git checkout a3e2897bfaf9eaac1d6649da535c4e721c89fa69
Note: switching to 'a3e2897bfaf9eaac1d6649da535c4e721c89fa69'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at a3e2897bfa Merge pull request #13981 from anntzer/testclean
+ git apply /root/pre_state.patch
error: unrecognized input
