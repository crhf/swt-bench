+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD 9ed054279aeffd5b1d0642e2d24a8800389de29f
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   setup.py
	modified:   tox.ini

no changes added to commit (use "git add" and/or "git commit -a")
+ git show
commit 9ed054279aeffd5b1d0642e2d24a8800389de29f
Merge: a4a0b9783 6fb8d1c80
Author: Takeshi KOMIYA <i.tkomiya@gmail.com>
Date:   Sun Aug 29 23:54:31 2021 +0900

    Merge pull request #9549 from tk0miya/9524_SphinxTestApp_outdir
    
    Close #9524: test: SphinxTestApp can take ``builddir`` as an argument

+ git diff 9ed054279aeffd5b1d0642e2d24a8800389de29f
diff --git a/setup.py b/setup.py
index 4a1d5aeed..3faa58e79 100644
--- a/setup.py
+++ b/setup.py
@@ -15,22 +15,22 @@ if sys.version_info < (3, 6):
     sys.exit(1)
 
 install_requires = [
-    'sphinxcontrib-applehelp',
-    'sphinxcontrib-devhelp',
+    'sphinxcontrib-applehelp<=1.0.7',
+    'sphinxcontrib-devhelp<=1.0.5',
     'sphinxcontrib-jsmath',
-    'sphinxcontrib-htmlhelp>=2.0.0',
-    'sphinxcontrib-serializinghtml>=1.1.5',
-    'sphinxcontrib-qthelp',
-    'Jinja2>=2.3',
+    'sphinxcontrib-htmlhelp>=2.0.0,<=2.0.4',
+    'sphinxcontrib-serializinghtml>=1.1.5,<=1.1.9',
+    'sphinxcontrib-qthelp<=1.0.6',
+    'Jinja2<3.0',
     'Pygments>=2.0',
     'docutils>=0.14,<0.18',
     'snowballstemmer>=1.1',
     'babel>=1.3',
-    'alabaster>=0.7,<0.8',
+    'alabaster>=0.7,<0.7.12',
     'imagesize',
     'requests>=2.5.0',
     'setuptools',
-    'packaging',
+    'packaging', 'markupsafe<=2.0.1',
 ]
 
 extras_require = {
diff --git a/tox.ini b/tox.ini
index a363e187f..3b8bc12d0 100644
--- a/tox.ini
+++ b/tox.ini
@@ -27,7 +27,7 @@ setenv =
     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils,ignore::DeprecationWarning:pip._vendor.packaging.version
     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes
 commands=
-    python -X dev -m pytest --durations 25 {posargs}
+    python -X dev -m pytest -rA --durations 25 {posargs}
 
 [testenv:flake8]
 basepython = python3
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e '.[test]'
Obtaining file:///testbed
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Requirement already satisfied: sphinxcontrib-applehelp<=1.0.7 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==4.2.0.dev20250825) (1.0.4)
Requirement already satisfied: sphinxcontrib-devhelp<=1.0.5 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==4.2.0.dev20250825) (1.0.2)
Requirement already satisfied: sphinxcontrib-jsmath in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==4.2.0.dev20250825) (1.0.1)
Requirement already satisfied: sphinxcontrib-htmlhelp<=2.0.4,>=2.0.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==4.2.0.dev20250825) (2.0.1)
Requirement already satisfied: sphinxcontrib-serializinghtml<=1.1.9,>=1.1.5 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==4.2.0.dev20250825) (1.1.5)
Requirement already satisfied: sphinxcontrib-qthelp<=1.0.6 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==4.2.0.dev20250825) (1.0.3)
Requirement already satisfied: Jinja2<3.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==4.2.0.dev20250825) (2.11.3)
Requirement already satisfied: Pygments>=2.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==4.2.0.dev20250825) (2.19.2)
Requirement already satisfied: docutils<0.18,>=0.14 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==4.2.0.dev20250825) (0.17.1)
Requirement already satisfied: snowballstemmer>=1.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==4.2.0.dev20250825) (3.0.1)
Requirement already satisfied: babel>=1.3 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==4.2.0.dev20250825) (2.17.0)
Requirement already satisfied: alabaster<0.7.12,>=0.7 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==4.2.0.dev20250825) (0.7.11)
Requirement already satisfied: imagesize in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==4.2.0.dev20250825) (1.4.1)
Requirement already satisfied: requests>=2.5.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==4.2.0.dev20250825) (2.32.5)
Requirement already satisfied: setuptools in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==4.2.0.dev20250825) (78.1.1)
Requirement already satisfied: packaging in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==4.2.0.dev20250825) (25.0)
Requirement already satisfied: markupsafe<=2.0.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==4.2.0.dev20250825) (2.0.1)
Requirement already satisfied: pytest in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==4.2.0.dev20250825) (8.4.1)
Requirement already satisfied: pytest-cov in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==4.2.0.dev20250825) (6.2.1)
Requirement already satisfied: html5lib in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==4.2.0.dev20250825) (1.1)
Requirement already satisfied: cython in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==4.2.0.dev20250825) (3.1.3)
Requirement already satisfied: charset_normalizer<4,>=2 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from requests>=2.5.0->Sphinx==4.2.0.dev20250825) (3.4.3)
Requirement already satisfied: idna<4,>=2.5 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from requests>=2.5.0->Sphinx==4.2.0.dev20250825) (3.10)
Requirement already satisfied: urllib3<3,>=1.21.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from requests>=2.5.0->Sphinx==4.2.0.dev20250825) (2.5.0)
Requirement already satisfied: certifi>=2017.4.17 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from requests>=2.5.0->Sphinx==4.2.0.dev20250825) (2025.8.3)
Requirement already satisfied: six>=1.9 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from html5lib->Sphinx==4.2.0.dev20250825) (1.17.0)
Requirement already satisfied: webencodings in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from html5lib->Sphinx==4.2.0.dev20250825) (0.5.1)
Requirement already satisfied: exceptiongroup>=1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest->Sphinx==4.2.0.dev20250825) (1.3.0)
Requirement already satisfied: iniconfig>=1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest->Sphinx==4.2.0.dev20250825) (2.1.0)
Requirement already satisfied: pluggy<2,>=1.5 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest->Sphinx==4.2.0.dev20250825) (1.6.0)
Requirement already satisfied: tomli>=1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest->Sphinx==4.2.0.dev20250825) (2.2.1)
Requirement already satisfied: typing-extensions>=4.6.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from exceptiongroup>=1->pytest->Sphinx==4.2.0.dev20250825) (4.14.1)
Requirement already satisfied: coverage>=7.5 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from coverage[toml]>=7.5->pytest-cov->Sphinx==4.2.0.dev20250825) (7.10.5)
Installing collected packages: Sphinx
  Attempting uninstall: Sphinx
    Found existing installation: Sphinx 4.2.0.dev20250825
    Uninstalling Sphinx-4.2.0.dev20250825:
      Successfully uninstalled Sphinx-4.2.0.dev20250825
  DEPRECATION: Legacy editable install of Sphinx[test]==4.2.0.dev20250825 from file:///testbed (setup.py develop) is deprecated. pip 25.3 will enforce this behaviour change. A possible replacement is to add a pyproject.toml or enable --use-pep517, and use setuptools >= 64. If the resulting installation is not behaving as expected, try using --config-settings editable_mode=compat. Please consult the setuptools documentation for more information. Discussion can be found at https://github.com/pypa/pip/issues/11457
  Running setup.py develop for Sphinx
Successfully installed Sphinx
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git apply -v -
Checking patch tests/test_coverup_sphinx-doc__sphinx-9591.py...
Applied patch tests/test_coverup_sphinx-doc__sphinx-9591.py cleanly.
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(sphinx/domains/python\.py)' -m tox -epy39 -v -- tests/test_coverup_sphinx-doc__sphinx-9591.py
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(sphinx/domains/python\\.py)']
.pkg: find interpreter for spec PythonSpec(major=3, minor=9, free_threaded=False)
.pkg: proposed PythonInfo(spec=CPython3.9.23.final.0-64, exe=/opt/miniconda3/envs/testbed/bin/python3, platform=linux, version='3.9.23 (main, Jun  5 2025, 13:40:20) \n[GCC 11.2.0]', encoding_fs_io=utf-8-utf-8)
.pkg: find interpreter for spec PythonSpec(path=/opt/miniconda3/envs/testbed/bin/python3)
.pkg: proposed PythonInfo(spec=CPython3.9.23.final.0-64, exe=/opt/miniconda3/envs/testbed/bin/python3, platform=linux, version='3.9.23 (main, Jun  5 2025, 13:40:20) \n[GCC 11.2.0]', encoding_fs_io=utf-8-utf-8)
.pkg: find interpreter for spec PythonSpec(major=3, free_threaded=False)
.pkg: proposed PythonInfo(spec=CPython3.9.23.final.0-64, exe=/opt/miniconda3/envs/testbed/bin/python3, platform=linux, version='3.9.23 (main, Jun  5 2025, 13:40:20) \n[GCC 11.2.0]', encoding_fs_io=utf-8-utf-8)
.pkg: find interpreter for spec PythonSpec(major=3, free_threaded=False)
.pkg: proposed PythonInfo(spec=CPython3.9.23.final.0-64, exe=/opt/miniconda3/envs/testbed/bin/python3, platform=linux, version='3.9.23 (main, Jun  5 2025, 13:40:20) \n[GCC 11.2.0]', encoding_fs_io=utf-8-utf-8)
.pkg: find interpreter for spec PythonSpec(major=3, free_threaded=False)
.pkg: proposed PythonInfo(spec=CPython3.9.23.final.0-64, exe=/opt/miniconda3/envs/testbed/bin/python3, platform=linux, version='3.9.23 (main, Jun  5 2025, 13:40:20) \n[GCC 11.2.0]', encoding_fs_io=utf-8-utf-8)
.pkg: find interpreter for spec PythonSpec(major=3, free_threaded=False)
.pkg: proposed PythonInfo(spec=CPython3.9.23.final.0-64, exe=/opt/miniconda3/envs/testbed/bin/python3, platform=linux, version='3.9.23 (main, Jun  5 2025, 13:40:20) \n[GCC 11.2.0]', encoding_fs_io=utf-8-utf-8)
.pkg: find interpreter for spec PythonSpec(major=3, free_threaded=False)
.pkg: proposed PythonInfo(spec=CPython3.9.23.final.0-64, exe=/opt/miniconda3/envs/testbed/bin/python3, platform=linux, version='3.9.23 (main, Jun  5 2025, 13:40:20) \n[GCC 11.2.0]', encoding_fs_io=utf-8-utf-8)
.pkg: find interpreter for spec PythonSpec(major=3, minor=6, free_threaded=False)
.pkg: proposed PythonInfo(spec=CPython3.9.23.final.0-64, exe=/opt/miniconda3/envs/testbed/bin/python3, platform=linux, version='3.9.23 (main, Jun  5 2025, 13:40:20) \n[GCC 11.2.0]', encoding_fs_io=utf-8-utf-8)
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(sphinx/domains/python\\.py)']
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(sphinx/domains/python\\.py)']
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(sphinx/domains/python\\.py)']
.pkg: find interpreter for spec PythonSpec(major=3, minor=7, free_threaded=False)
.pkg: proposed PythonInfo(spec=CPython3.9.23.final.0-64, system=/opt/miniconda3/envs/testbed/bin/python3, exe=/bin/python3, platform=linux, version='3.9.23 (main, Jun  5 2025, 13:40:20) \n[GCC 11.2.0]', encoding_fs_io=utf-8-utf-8)
.pkg: find interpreter for spec PythonSpec(major=3, minor=8, free_threaded=False)
.pkg: proposed PythonInfo(spec=CPython3.9.23.final.0-64, system=/opt/miniconda3/envs/testbed/bin/python3, exe=/usr/bin/python3, platform=linux, version='3.9.23 (main, Jun  5 2025, 13:40:20) \n[GCC 11.2.0]', encoding_fs_io=utf-8-utf-8)
.pkg: find interpreter for spec PythonSpec(path=/opt/miniconda3/envs/testbed/bin/python3)
.pkg: proposed PythonInfo(spec=CPython3.9.23.final.0-64, exe=/opt/miniconda3/envs/testbed/bin/python3, platform=linux, version='3.9.23 (main, Jun  5 2025, 13:40:20) \n[GCC 11.2.0]', encoding_fs_io=utf-8-utf-8)
.pkg: find interpreter for spec PythonSpec(path=/opt/miniconda3/envs/testbed/bin/python3)
.pkg: proposed PythonInfo(spec=CPython3.9.23.final.0-64, exe=/opt/miniconda3/envs/testbed/bin/python3, platform=linux, version='3.9.23 (main, Jun  5 2025, 13:40:20) \n[GCC 11.2.0]', encoding_fs_io=utf-8-utf-8)
.pkg: find interpreter for spec PythonSpec(path=/opt/miniconda3/envs/testbed/bin/python3)
.pkg: proposed PythonInfo(spec=CPython3.9.23.final.0-64, exe=/opt/miniconda3/envs/testbed/bin/python3, platform=linux, version='3.9.23 (main, Jun  5 2025, 13:40:20) \n[GCC 11.2.0]', encoding_fs_io=utf-8-utf-8)
.pkg: find interpreter for spec PythonSpec(path=/opt/miniconda3/envs/testbed/bin/python3)
.pkg: proposed PythonInfo(spec=CPython3.9.23.final.0-64, exe=/opt/miniconda3/envs/testbed/bin/python3, platform=linux, version='3.9.23 (main, Jun  5 2025, 13:40:20) \n[GCC 11.2.0]', encoding_fs_io=utf-8-utf-8)
.pkg: find interpreter for spec PythonSpec(major=3, free_threaded=False)
.pkg: proposed PythonInfo(spec=CPython3.9.23.final.0-64, exe=/opt/miniconda3/envs/testbed/bin/python3, platform=linux, version='3.9.23 (main, Jun  5 2025, 13:40:20) \n[GCC 11.2.0]', encoding_fs_io=utf-8-utf-8)
.pkg: find interpreter for spec PythonSpec(major=3, free_threaded=False)
.pkg: proposed PythonInfo(spec=CPython3.9.23.final.0-64, exe=/opt/miniconda3/envs/testbed/bin/python3, platform=linux, version='3.9.23 (main, Jun  5 2025, 13:40:20) \n[GCC 11.2.0]', encoding_fs_io=utf-8-utf-8)
.pkg: find interpreter for spec PythonSpec(path=/opt/miniconda3/envs/testbed/bin/python3)
.pkg: proposed PythonInfo(spec=CPython3.9.23.final.0-64, exe=/opt/miniconda3/envs/testbed/bin/python3, platform=linux, version='3.9.23 (main, Jun  5 2025, 13:40:20) \n[GCC 11.2.0]', encoding_fs_io=utf-8-utf-8)
.pkg: find interpreter for spec PythonSpec(path=/opt/miniconda3/envs/testbed/bin/python3)
.pkg: proposed PythonInfo(spec=CPython3.9.23.final.0-64, exe=/opt/miniconda3/envs/testbed/bin/python3, platform=linux, version='3.9.23 (main, Jun  5 2025, 13:40:20) \n[GCC 11.2.0]', encoding_fs_io=utf-8-utf-8)
.pkg: find interpreter for spec PythonSpec(path=/opt/miniconda3/envs/testbed/bin/python3)
.pkg: proposed PythonInfo(spec=CPython3.9.23.final.0-64, exe=/opt/miniconda3/envs/testbed/bin/python3, platform=linux, version='3.9.23 (main, Jun  5 2025, 13:40:20) \n[GCC 11.2.0]', encoding_fs_io=utf-8-utf-8)
py39: create virtual environment via CPython3Posix(dest=/testbed/.tox/py39, clear=False, no_vcs_ignore=False, global=False)
py39: add seed packages via FromAppData(download=False, pip=bundle, setuptools=bundle, via=copy, app_data_dir=/root/.local/share/virtualenv)
py39: add activators for Bash, CShell, Fish, Nushell, PowerShell, Python
.pkg: create virtual environment via CPython3Posix(dest=/testbed/.tox/.pkg, clear=False, no_vcs_ignore=False, global=False)
.pkg: add seed packages via FromAppData(download=False, pip=bundle, setuptools=bundle, via=copy, app_data_dir=/root/.local/share/virtualenv)
.pkg: add activators for Bash, CShell, Fish, Nushell, PowerShell, Python
.pkg: install_requires> python -I -m pip install 'setuptools>=40.8.0'
.pkg: exit 0 (0.66 seconds) /testbed> python -I -m pip install 'setuptools>=40.8.0' pid=127
.pkg: _optional_hooks> python /opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pyproject_api/_backend.py True setuptools.build_meta __legacy__
.pkg: exit None (0.17 seconds) /testbed> python /opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pyproject_api/_backend.py True setuptools.build_meta __legacy__ pid=132
.pkg: get_requires_for_build_editable> python /opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pyproject_api/_backend.py True setuptools.build_meta __legacy__
.pkg: exit None (0.53 seconds) /testbed> python /opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pyproject_api/_backend.py True setuptools.build_meta __legacy__ pid=135
.pkg: build_editable> python /opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pyproject_api/_backend.py True setuptools.build_meta __legacy__
.pkg: exit None (0.69 seconds) /testbed> python /opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pyproject_api/_backend.py True setuptools.build_meta __legacy__ pid=139
py39: install_package_deps> python -I -m pip install 'Jinja2<3.0' 'Pygments>=2.0' 'alabaster<0.7.12,>=0.7' 'babel>=1.3' 'colorama>=0.3.5; sys_platform == "win32"' cython 'docutils<0.18,>=0.14' html5lib imagesize 'markupsafe<=2.0.1' packaging pytest pytest-cov 'requests>=2.5.0' setuptools 'snowballstemmer>=1.1' 'sphinxcontrib-applehelp<=1.0.7' 'sphinxcontrib-devhelp<=1.0.5' 'sphinxcontrib-htmlhelp<=2.0.4,>=2.0.0' sphinxcontrib-jsmath 'sphinxcontrib-qthelp<=1.0.6' 'sphinxcontrib-serializinghtml<=1.1.9,>=1.1.5' 'typed_ast; python_version < "3.8"'
py39: exit 0 (0.65 seconds) /testbed> python -I -m pip install 'Jinja2<3.0' 'Pygments>=2.0' 'alabaster<0.7.12,>=0.7' 'babel>=1.3' 'colorama>=0.3.5; sys_platform == "win32"' cython 'docutils<0.18,>=0.14' html5lib imagesize 'markupsafe<=2.0.1' packaging pytest pytest-cov 'requests>=2.5.0' setuptools 'snowballstemmer>=1.1' 'sphinxcontrib-applehelp<=1.0.7' 'sphinxcontrib-devhelp<=1.0.5' 'sphinxcontrib-htmlhelp<=2.0.4,>=2.0.0' sphinxcontrib-jsmath 'sphinxcontrib-qthelp<=1.0.6' 'sphinxcontrib-serializinghtml<=1.1.9,>=1.1.5' 'typed_ast; python_version < "3.8"' pid=143
py39: install_package> python -I -m pip install --force-reinstall --no-deps /testbed/.tox/.tmp/package/1/sphinx-4.2.0.dev20250825-0.editable-py3-none-any.whl
py39: exit 0 (0.69 seconds) /testbed> python -I -m pip install --force-reinstall --no-deps /testbed/.tox/.tmp/package/1/sphinx-4.2.0.dev20250825-0.editable-py3-none-any.whl pid=148
py39: commands[0]> python -X dev -m pytest -rA --durations 25 tests/test_coverup_sphinx-doc__sphinx-9591.py
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(sphinx/domains/python\\.py)']
[1m============================= test session starts ==============================[0m
platform linux -- Python 3.9.23, pytest-8.4.1, pluggy-1.6.0
cachedir: .tox/py39/.pytest_cache
libraries: Sphinx-4.2.0+/9ed054279, docutils-0.17.1
base tempdir: /tmp/pytest-of-root/pytest-0
rootdir: /testbed
configfile: setup.cfg
plugins: cov-6.2.1
collected 1 item

tests/test_coverup_sphinx-doc__sphinx-9591.py [31mF[0m[31m                          [100%][0m

=================================== FAILURES ===================================
[31m[1m________________ test_property_type_annotation_cross_reference _________________[0m

tmpdir = local('/tmp/pytest-of-root/pytest-0/test_property_type_annotation_0')

    [0m[94mdef[39;49;00m[90m [39;49;00m[92mtest_property_type_annotation_cross_reference[39;49;00m(tmpdir):[90m[39;49;00m
        [90m# Setup: Create a temporary Sphinx project with the necessary configuration[39;49;00m[90m[39;49;00m
        docs_dir = tmpdir.mkdir([33m"[39;49;00m[33mdocs[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        conf_py_content = [33m"""[39;49;00m[33m[39;49;00m
    [33mproject = [39;49;00m[33m'[39;49;00m[33msphinx-issue-9585[39;49;00m[33m'[39;49;00m[33m[39;49;00m
    [33mextensions = [[39;49;00m[33m'[39;49;00m[33msphinx.ext.autodoc[39;49;00m[33m'[39;49;00m[33m][39;49;00m[33m[39;49;00m
    [33mautodoc_typehints = [39;49;00m[33m'[39;49;00m[33mdescription[39;49;00m[33m'[39;49;00m[33m[39;49;00m
    [33mautodoc_type_aliases = [39;49;00m[33m{}[39;49;00m[33m[39;49;00m
    [33m"""[39;49;00m[90m[39;49;00m
        docs_dir.join([33m"[39;49;00m[33mconf.py[39;49;00m[33m"[39;49;00m).write(conf_py_content)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Create a Python module with the classes and properties[39;49;00m[90m[39;49;00m
        module_content = [33m"""[39;49;00m[33m[39;49;00m
    [33mfrom typing import Optional[39;49;00m[33m[39;49;00m
    [33m[39;49;00m
    [33mclass Point:[39;49;00m[33m[39;49;00m
    [33m    [39;49;00m[33m\"[39;49;00m[33m\"[39;49;00m[33m\"[39;49;00m[33m[39;49;00m
    [33m    A class representing a point.[39;49;00m[33m[39;49;00m
    [33m[39;49;00m
    [33m    Attributes:[39;49;00m[33m[39;49;00m
    [33m        x: Position X.[39;49;00m[33m[39;49;00m
    [33m        y: Position Y.[39;49;00m[33m[39;49;00m
    [33m    [39;49;00m[33m\"[39;49;00m[33m\"[39;49;00m[33m\"[39;49;00m[33m[39;49;00m
    [33m    x: int[39;49;00m[33m[39;49;00m
    [33m    y: int[39;49;00m[33m[39;49;00m
    [33m[39;49;00m
    [33mclass Square:[39;49;00m[33m[39;49;00m
    [33m    [39;49;00m[33m\"[39;49;00m[33m\"[39;49;00m[33m\"[39;49;00m[33mA class representing a square figure.[39;49;00m[33m\"[39;49;00m[33m\"[39;49;00m[33m\"[39;49;00m[33m[39;49;00m
    [33m    #: Square[39;49;00m[33m'[39;49;00m[33ms start position (top-left corner).[39;49;00m[33m[39;49;00m
    [33m    start: Point[39;49;00m[33m[39;49;00m
    [33m    #: Square width.[39;49;00m[33m[39;49;00m
    [33m    width: int[39;49;00m[33m[39;49;00m
    [33m    #: Square height.[39;49;00m[33m[39;49;00m
    [33m    height: int[39;49;00m[33m[39;49;00m
    [33m[39;49;00m
    [33m    @property[39;49;00m[33m[39;49;00m
    [33m    def end(self) -> Point:[39;49;00m[33m[39;49;00m
    [33m        [39;49;00m[33m\"[39;49;00m[33m\"[39;49;00m[33m\"[39;49;00m[33mSquare[39;49;00m[33m'[39;49;00m[33ms end position (bottom-right corner).[39;49;00m[33m\"[39;49;00m[33m\"[39;49;00m[33m\"[39;49;00m[33m[39;49;00m
    [33m        return Point(self.start.x + self.width, self.start.y + self.height)[39;49;00m[33m[39;49;00m
    [33m[39;49;00m
    [33mclass Rectangle:[39;49;00m[33m[39;49;00m
    [33m    [39;49;00m[33m\"[39;49;00m[33m\"[39;49;00m[33m\"[39;49;00m[33m[39;49;00m
    [33m    A class representing a square figure.[39;49;00m[33m[39;49;00m
    [33m[39;49;00m
    [33m    Attributes:[39;49;00m[33m[39;49;00m
    [33m        start: Rectangle[39;49;00m[33m'[39;49;00m[33ms start position (top-left corner).[39;49;00m[33m[39;49;00m
    [33m        width: Rectangle width.[39;49;00m[33m[39;49;00m
    [33m        height: Rectangle width.[39;49;00m[33m[39;49;00m
    [33m    [39;49;00m[33m\"[39;49;00m[33m\"[39;49;00m[33m\"[39;49;00m[33m[39;49;00m
    [33m    start: Point[39;49;00m[33m[39;49;00m
    [33m    width: int[39;49;00m[33m[39;49;00m
    [33m    height: int[39;49;00m[33m[39;49;00m
    [33m[39;49;00m
    [33m    @property[39;49;00m[33m[39;49;00m
    [33m    def end(self) -> Point:[39;49;00m[33m[39;49;00m
    [33m        [39;49;00m[33m\"[39;49;00m[33m\"[39;49;00m[33m\"[39;49;00m[33mRectangle[39;49;00m[33m'[39;49;00m[33ms end position (bottom-right corner).[39;49;00m[33m\"[39;49;00m[33m\"[39;49;00m[33m\"[39;49;00m[33m[39;49;00m
    [33m        return Point(self.start.x + self.width, self.start.y + self.height)[39;49;00m[33m[39;49;00m
    [33m"""[39;49;00m[90m[39;49;00m
        module_path = docs_dir.join([33m"[39;49;00m[33mmymodule.py[39;49;00m[33m"[39;49;00m)[90m[39;49;00m
        module_path.write(module_content)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Create index.rst file[39;49;00m[90m[39;49;00m
        index_rst_content = [33m"""[39;49;00m[33m[39;49;00m
    [33m.. automodule:: mymodule[39;49;00m[33m[39;49;00m
    [33m   :members:[39;49;00m[33m[39;49;00m
    [33m   :undoc-members:[39;49;00m[33m[39;49;00m
    [33m   :show-inheritance:[39;49;00m[33m[39;49;00m
    [33m"""[39;49;00m[90m[39;49;00m
        docs_dir.join([33m"[39;49;00m[33mindex.rst[39;49;00m[33m"[39;49;00m).write(index_rst_content)[90m[39;49;00m
    [90m[39;49;00m
        [90m# Add the module directory to sys.path to ensure it is importable[39;49;00m[90m[39;49;00m
        [94mimport[39;49;00m[90m [39;49;00m[04m[96msys[39;49;00m[90m[39;49;00m
        sys.path.insert([94m0[39;49;00m, [96mstr[39;49;00m(docs_dir))[90m[39;49;00m
    [90m[39;49;00m
        [90m# Create a Sphinx application[39;49;00m[90m[39;49;00m
        app = Sphinx([90m[39;49;00m
            srcdir=[96mstr[39;49;00m(docs_dir),[90m[39;49;00m
            confdir=[96mstr[39;49;00m(docs_dir),[90m[39;49;00m
            outdir=[96mstr[39;49;00m(docs_dir.join([33m"[39;49;00m[33m_build/html[39;49;00m[33m"[39;49;00m)),[90m[39;49;00m
            doctreedir=[96mstr[39;49;00m(tmpdir.join([33m"[39;49;00m[33m_build/doctrees[39;49;00m[33m"[39;49;00m)),[90m[39;49;00m
            buildername=[33m"[39;49;00m[33mhtml[39;49;00m[33m"[39;49;00m[90m[39;49;00m
        )[90m[39;49;00m
    [90m[39;49;00m
        [90m# Build the HTML documentation[39;49;00m[90m[39;49;00m
        app.build()[90m[39;49;00m
    [90m[39;49;00m
        [90m# Parse the generated HTML[39;49;00m[90m[39;49;00m
        index_html = docs_dir.join([33m"[39;49;00m[33m_build/html/index.html[39;49;00m[33m"[39;49;00m).read()[90m[39;49;00m
    [90m[39;49;00m
        [90m# Check for the presence of cross-references in the property's type annotations[39;49;00m[90m[39;49;00m
        [90m# The type annotation for the 'end' property should be cross-referenced[39;49;00m[90m[39;49;00m
>       [94massert[39;49;00m [33m"[39;49;00m[33mclass:`Point`[39;49;00m[33m"[39;49;00m [95min[39;49;00m index_html, [33m"[39;49;00m[33mThe type annotation for the [39;49;00m[33m'[39;49;00m[33mend[39;49;00m[33m'[39;49;00m[33m property should be cross-referenced.[39;49;00m[33m"[39;49;00m[90m[39;49;00m
[1m[31mE       AssertionError: The type annotation for the 'end' property should be cross-referenced.[0m
[1m[31mE       assert 'class:`Point`' in '\n<!DOCTYPE html>\n\n<html>\n  <head>\n    <meta charset="utf-8" />\n    <meta name="viewport" content="width=device-...ref="_sources/index.rst.txt"\n          rel="nofollow">Page source</a>\n    </div>\n\n    \n\n    \n  </body>\n</html>'[0m

[1m[31mtests/test_coverup_sphinx-doc__sphinx-9591.py[0m:96: AssertionError
----------------------------- Captured stdout call -----------------------------
[01mRunning Sphinx v4.2.0+/9ed054279[39;49;00m
0.78 python.py(1): """
0.78 python.py(11): import builtins
0.78 python.py(12): import inspect
0.78 python.py(13): import re
0.78 python.py(14): import sys
0.78 python.py(15): import typing
0.78 python.py(16): import warnings
0.78 python.py(17): from inspect import Parameter
0.78 python.py(18): from typing import Any, Dict, Iterable, Iterator, List, NamedTuple, Optional, Tuple, Type, cast
0.78 python.py(20): from docutils import nodes
0.78 python.py(21): from docutils.nodes import Element, Node
0.78 python.py(22): from docutils.parsers.rst import directives
0.78 python.py(23): from docutils.parsers.rst.states import Inliner
0.78 python.py(25): from sphinx import addnodes
0.78 python.py(26): from sphinx.addnodes import desc_signature, pending_xref, pending_xref_condition
0.78 python.py(27): from sphinx.application import Sphinx
0.78 python.py(28): from sphinx.builders import Builder
0.78 python.py(29): from sphinx.deprecation import RemovedInSphinx50Warning
0.78 python.py(30): from sphinx.directives import ObjectDescription
0.78 python.py(31): from sphinx.domains import Domain, Index, IndexEntry, ObjType
0.78 python.py(32): from sphinx.environment import BuildEnvironment
0.78 python.py(33): from sphinx.locale import _, __
0.78 python.py(34): from sphinx.pycode.ast import ast
0.78 python.py(35): from sphinx.pycode.ast import parse as ast_parse
0.78 python.py(36): from sphinx.roles import XRefRole
0.78 python.py(37): from sphinx.util import logging
0.78 python.py(38): from sphinx.util.docfields import Field, GroupedField, TypedField
0.78 python.py(39): from sphinx.util.docutils import SphinxDirective
0.78 python.py(40): from sphinx.util.inspect import signature_from_str
0.78 python.py(41): from sphinx.util.nodes import find_pending_xref_condition, make_id, make_refnode
0.78 python.py(42): from sphinx.util.typing import OptionSpec, TextlikeNode
0.78 python.py(44): logger = logging.getLogger(__name__)
0.78 python.py(48): py_sig_re = re.compile(
0.78 python.py(49):     r'''^ ([\w.]*\.)?            # class name(s)
0.78 python.py(54):           ''', re.VERBOSE)
0.78 python.py(48): py_sig_re = re.compile(
0.78 python.py(58):     'module':    _('module'),
0.78 python.py(59):     'keyword':   _('keyword'),
0.78 python.py(60):     'operator':  _('operator'),
0.78 python.py(61):     'object':    _('object'),
0.78 python.py(62):     'exception': _('exception'),
0.78 python.py(63):     'statement': _('statement'),
0.78 python.py(64):     'builtin':   _('built-in function'),
0.78 python.py(57): pairindextypes = {
0.78 python.py(68): class ObjectEntry(NamedTuple):
0.78 python.py(68): class ObjectEntry(NamedTuple):
0.78 python.py(69):     docname: str
0.78 python.py(70):     node_id: str
0.78 python.py(71):     objtype: str
0.78 python.py(72):     aliased: bool
0.78 python.py(75): class ModuleEntry(NamedTuple):
0.78 python.py(75): class ModuleEntry(NamedTuple):
0.78 python.py(76):     docname: str
0.78 python.py(77):     node_id: str
0.78 python.py(78):     synopsis: str
0.78 python.py(79):     platform: str
0.78 python.py(80):     deprecated: bool
0.79 python.py(83): def type_to_xref(text: str, env: BuildEnvironment = None) -> addnodes.pending_xref:
0.79 python.py(110): def _parse_annotation(annotation: str, env: BuildEnvironment = None) -> List[Node]:
0.79 python.py(189): def _parse_arglist(arglist: str, env: BuildEnvironment = None) -> addnodes.desc_parameterlist:
0.79 python.py(239): def _pseudo_parse_arglist(signode: desc_signature, arglist: str) -> None:
0.79 python.py(289): class PyXrefMixin:
0.79 python.py(289): class PyXrefMixin:
0.79 python.py(291):                   innernode: Type[TextlikeNode] = nodes.emphasis,
0.79 python.py(292):                   contnode: Node = None, env: BuildEnvironment = None,
0.79 python.py(293):                   inliner: Inliner = None, location: Node = None) -> Node:
0.79 python.py(290):     def make_xref(self, rolename: str, domain: str, target: str,
0.79 python.py(291):                   innernode: Type[TextlikeNode] = nodes.emphasis,
0.79 python.py(292):                   contnode: Node = None, env: BuildEnvironment = None,
0.79 python.py(293):                   inliner: Inliner = None, location: Node = None) -> Node:
0.79 python.py(290):     def make_xref(self, rolename: str, domain: str, target: str,
0.79 python.py(324):                    innernode: Type[TextlikeNode] = nodes.emphasis,
0.79 python.py(325):                    contnode: Node = None, env: BuildEnvironment = None,
0.79 python.py(326):                    inliner: Inliner = None, location: Node = None) -> List[Node]:
0.79 python.py(323):     def make_xrefs(self, rolename: str, domain: str, target: str,
0.79 python.py(324):                    innernode: Type[TextlikeNode] = nodes.emphasis,
0.79 python.py(325):                    contnode: Node = None, env: BuildEnvironment = None,
0.79 python.py(326):                    inliner: Inliner = None, location: Node = None) -> List[Node]:
0.79 python.py(323):     def make_xrefs(self, rolename: str, domain: str, target: str,
0.79 python.py(347): class PyField(PyXrefMixin, Field):
0.79 python.py(347): class PyField(PyXrefMixin, Field):
0.79 python.py(349):                   innernode: Type[TextlikeNode] = nodes.emphasis,
0.79 python.py(350):                   contnode: Node = None, env: BuildEnvironment = None,
0.79 python.py(351):                   inliner: Inliner = None, location: Node = None) -> Node:
0.79 python.py(348):     def make_xref(self, rolename: str, domain: str, target: str,
0.79 python.py(349):                   innernode: Type[TextlikeNode] = nodes.emphasis,
0.79 python.py(350):                   contnode: Node = None, env: BuildEnvironment = None,
0.79 python.py(351):                   inliner: Inliner = None, location: Node = None) -> Node:
0.79 python.py(348):     def make_xref(self, rolename: str, domain: str, target: str,
0.79 python.py(360): class PyGroupedField(PyXrefMixin, GroupedField):
0.79 python.py(360): class PyGroupedField(PyXrefMixin, GroupedField):
0.79 python.py(361):     pass
0.79 python.py(364): class PyTypedField(PyXrefMixin, TypedField):
0.79 python.py(364): class PyTypedField(PyXrefMixin, TypedField):
0.79 python.py(366):                   innernode: Type[TextlikeNode] = nodes.emphasis,
0.79 python.py(367):                   contnode: Node = None, env: BuildEnvironment = None,
0.79 python.py(368):                   inliner: Inliner = None, location: Node = None) -> Node:
0.79 python.py(365):     def make_xref(self, rolename: str, domain: str, target: str,
0.79 python.py(366):                   innernode: Type[TextlikeNode] = nodes.emphasis,
0.79 python.py(367):                   contnode: Node = None, env: BuildEnvironment = None,
0.79 python.py(368):                   inliner: Inliner = None, location: Node = None) -> Node:
0.79 python.py(365):     def make_xref(self, rolename: str, domain: str, target: str,
0.79 python.py(377): class PyObject(ObjectDescription[Tuple[str, str]]):
0.79 python.py(377): class PyObject(ObjectDescription[Tuple[str, str]]):
0.79 python.py(378):     """
0.79 python.py(385):         'noindex': directives.flag,
0.79 python.py(386):         'noindexentry': directives.flag,
0.79 python.py(387):         'module': directives.unchanged,
0.79 python.py(388):         'canonical': directives.unchanged,
0.79 python.py(389):         'annotation': directives.unchanged,
0.79 python.py(384):     option_spec: OptionSpec = {
0.79 python.py(393):         PyTypedField('parameter', label=_('Parameters'),
0.79 python.py(394):                      names=('param', 'parameter', 'arg', 'argument',
0.79 python.py(396):                      typerolename='class', typenames=('paramtype', 'type'),
0.79 python.py(397):                      can_collapse=True),
0.79 python.py(393):         PyTypedField('parameter', label=_('Parameters'),
0.79 python.py(398):         PyTypedField('variable', label=_('Variables'),
0.79 python.py(399):                      names=('var', 'ivar', 'cvar'),
0.79 python.py(400):                      typerolename='class', typenames=('vartype',),
0.79 python.py(401):                      can_collapse=True),
0.79 python.py(398):         PyTypedField('variable', label=_('Variables'),
0.79 python.py(402):         PyGroupedField('exceptions', label=_('Raises'), rolename='exc',
0.79 python.py(403):                        names=('raises', 'raise', 'exception', 'except'),
0.79 python.py(404):                        can_collapse=True),
0.79 python.py(402):         PyGroupedField('exceptions', label=_('Raises'), rolename='exc',
0.79 python.py(405):         Field('returnvalue', label=_('Returns'), has_arg=False,
0.79 python.py(406):               names=('returns', 'return')),
0.79 python.py(405):         Field('returnvalue', label=_('Returns'), has_arg=False,
0.79 python.py(407):         PyField('returntype', label=_('Return type'), has_arg=False,
0.79 python.py(408):                 names=('rtype',), bodyrolename='class'),
0.79 python.py(407):         PyField('returntype', label=_('Return type'), has_arg=False,
0.79 python.py(392):     doc_field_types = [
0.79 python.py(411):     allow_nesting = False
0.79 python.py(413):     def get_signature_prefix(self, sig: str) -> str:
0.79 python.py(419):     def needs_arglist(self) -> bool:
0.79 python.py(425):     def handle_signature(self, sig: str, signode: desc_signature) -> Tuple[str, str]:
0.79 python.py(506):     def get_index_text(self, modname: str, name: Tuple[str, str]) -> str:
0.79 python.py(510):     def add_target_and_index(self, name_cls: Tuple[str, str], sig: str,
0.79 python.py(511):                              signode: desc_signature) -> None:
0.79 python.py(510):     def add_target_and_index(self, name_cls: Tuple[str, str], sig: str,
0.79 python.py(537):     def before_content(self) -> None:
0.79 python.py(570):     def after_content(self) -> None:
0.79 python.py(596): class PyFunction(PyObject):
0.79 python.py(596): class PyFunction(PyObject):
0.79 python.py(597):     """Description of a function."""
0.79 python.py(599):     option_spec: OptionSpec = PyObject.option_spec.copy()
0.79 python.py(600):     option_spec.update({
0.79 python.py(601):         'async': directives.flag,
0.79 python.py(600):     option_spec.update({
0.79 python.py(604):     def get_signature_prefix(self, sig: str) -> str:
0.79 python.py(610):     def needs_arglist(self) -> bool:
0.79 python.py(613):     def add_target_and_index(self, name_cls: Tuple[str, str], sig: str,
0.79 python.py(614):                              signode: desc_signature) -> None:
0.79 python.py(613):     def add_target_and_index(self, name_cls: Tuple[str, str], sig: str,
0.79 python.py(628):     def get_index_text(self, modname: str, name_cls: Tuple[str, str]) -> str:
0.79 python.py(633): class PyDecoratorFunction(PyFunction):
0.79 python.py(633): class PyDecoratorFunction(PyFunction):
0.79 python.py(634):     """Description of a decorator."""
0.79 python.py(636):     def run(self) -> List[Node]:
0.79 python.py(641):     def handle_signature(self, sig: str, signode: desc_signature) -> Tuple[str, str]:
0.79 python.py(646):     def needs_arglist(self) -> bool:
0.79 python.py(650): class PyVariable(PyObject):
0.79 python.py(650): class PyVariable(PyObject):
0.79 python.py(651):     """Description of a variable."""
0.79 python.py(653):     option_spec: OptionSpec = PyObject.option_spec.copy()
0.79 python.py(654):     option_spec.update({
0.79 python.py(655):         'type': directives.unchanged,
0.79 python.py(656):         'value': directives.unchanged,
0.79 python.py(654):     option_spec.update({
0.79 python.py(659):     def handle_signature(self, sig: str, signode: desc_signature) -> Tuple[str, str]:
0.79 python.py(673):     def get_index_text(self, modname: str, name_cls: Tuple[str, str]) -> str:
0.79 python.py(681): class PyClasslike(PyObject):
0.79 python.py(681): class PyClasslike(PyObject):
0.79 python.py(682):     """
0.79 python.py(686):     option_spec: OptionSpec = PyObject.option_spec.copy()
0.79 python.py(687):     option_spec.update({
0.79 python.py(688):         'final': directives.flag,
0.79 python.py(687):     option_spec.update({
0.79 python.py(691):     allow_nesting = True
0.79 python.py(693):     def get_signature_prefix(self, sig: str) -> str:
0.79 python.py(699):     def get_index_text(self, modname: str, name_cls: Tuple[str, str]) -> str:
0.79 python.py(710): class PyMethod(PyObject):
0.79 python.py(710): class PyMethod(PyObject):
0.79 python.py(711):     """Description of a method."""
0.79 python.py(713):     option_spec: OptionSpec = PyObject.option_spec.copy()
0.79 python.py(714):     option_spec.update({
0.79 python.py(715):         'abstractmethod': directives.flag,
0.79 python.py(716):         'async': directives.flag,
0.79 python.py(717):         'classmethod': directives.flag,
0.79 python.py(718):         'final': directives.flag,
0.79 python.py(719):         'property': directives.flag,
0.79 python.py(720):         'staticmethod': directives.flag,
0.79 python.py(714):     option_spec.update({
0.79 python.py(723):     def needs_arglist(self) -> bool:
0.79 python.py(729):     def get_signature_prefix(self, sig: str) -> str:
0.79 python.py(749):     def get_index_text(self, modname: str, name_cls: Tuple[str, str]) -> str:
0.79 python.py(771): class PyClassMethod(PyMethod):
0.79 python.py(771): class PyClassMethod(PyMethod):
0.79 python.py(772):     """Description of a classmethod."""
0.79 python.py(774):     option_spec: OptionSpec = PyObject.option_spec.copy()
0.79 python.py(776):     def run(self) -> List[Node]:
0.79 python.py(783): class PyStaticMethod(PyMethod):
0.79 python.py(783): class PyStaticMethod(PyMethod):
0.79 python.py(784):     """Description of a staticmethod."""
0.79 python.py(786):     option_spec: OptionSpec = PyObject.option_spec.copy()
0.79 python.py(788):     def run(self) -> List[Node]:
0.79 python.py(795): class PyDecoratorMethod(PyMethod):
0.79 python.py(795): class PyDecoratorMethod(PyMethod):
0.79 python.py(796):     """Description of a decoratormethod."""
0.79 python.py(798):     def run(self) -> List[Node]:
0.79 python.py(802):     def handle_signature(self, sig: str, signode: desc_signature) -> Tuple[str, str]:
0.79 python.py(807):     def needs_arglist(self) -> bool:
0.79 python.py(811): class PyAttribute(PyObject):
0.79 python.py(811): class PyAttribute(PyObject):
0.79 python.py(812):     """Description of an attribute."""
0.79 python.py(814):     option_spec: OptionSpec = PyObject.option_spec.copy()
0.79 python.py(815):     option_spec.update({
0.79 python.py(816):         'type': directives.unchanged,
0.79 python.py(817):         'value': directives.unchanged,
0.79 python.py(815):     option_spec.update({
0.79 python.py(820):     def handle_signature(self, sig: str, signode: desc_signature) -> Tuple[str, str]:
0.79 python.py(834):     def get_index_text(self, modname: str, name_cls: Tuple[str, str]) -> str:
0.79 python.py(849): class PyProperty(PyObject):
0.79 python.py(849): class PyProperty(PyObject):
0.79 python.py(850):     """Description of an attribute."""
0.79 python.py(852):     option_spec = PyObject.option_spec.copy()
0.79 python.py(853):     option_spec.update({
0.79 python.py(854):         'abstractmethod': directives.flag,
0.79 python.py(855):         'classmethod': directives.flag,
0.79 python.py(856):         'type': directives.unchanged,
0.79 python.py(853):     option_spec.update({
0.79 python.py(859):     def handle_signature(self, sig: str, signode: desc_signature) -> Tuple[str, str]:
0.79 python.py(868):     def get_signature_prefix(self, sig: str) -> str:
0.79 python.py(878):     def get_index_text(self, modname: str, name_cls: Tuple[str, str]) -> str:
0.79 python.py(893): class PyDecoratorMixin:
0.79 python.py(893): class PyDecoratorMixin:
0.79 python.py(894):     """
0.79 python.py(897):     def handle_signature(self, sig: str, signode: desc_signature) -> Tuple[str, str]:
0.79 python.py(912):     def needs_arglist(self) -> bool:
0.79 python.py(916): class PyModule(SphinxDirective):
0.79 python.py(916): class PyModule(SphinxDirective):
0.79 python.py(917):     """
0.79 python.py(921):     has_content = False
0.79 python.py(922):     required_arguments = 1
0.79 python.py(923):     optional_arguments = 0
0.79 python.py(924):     final_argument_whitespace = False
0.79 python.py(926):         'platform': lambda x: x,
0.79 python.py(927):         'synopsis': lambda x: x,
0.79 python.py(928):         'noindex': directives.flag,
0.79 python.py(929):         'deprecated': directives.flag,
0.79 python.py(925):     option_spec: OptionSpec = {
0.79 python.py(932):     def run(self) -> List[Node]:
0.79 python.py(968):     def make_old_id(self, name: str) -> str:
0.79 python.py(979): class PyCurrentModule(SphinxDirective):
0.79 python.py(979): class PyCurrentModule(SphinxDirective):
0.79 python.py(980):     """
0.79 python.py(985):     has_content = False
0.79 python.py(986):     required_arguments = 1
0.79 python.py(987):     optional_arguments = 0
0.79 python.py(988):     final_argument_whitespace = False
0.79 python.py(989):     option_spec: OptionSpec = {}
0.79 python.py(991):     def run(self) -> List[Node]:
0.79 python.py(1000): class PyXRefRole(XRefRole):
0.79 python.py(1000): class PyXRefRole(XRefRole):
0.79 python.py(1001):     def process_link(self, env: BuildEnvironment, refnode: Element,
0.79 python.py(1002):                      has_explicit_title: bool, title: str, target: str) -> Tuple[str, str]:
0.79 python.py(1001):     def process_link(self, env: BuildEnvironment, refnode: Element,
0.79 python.py(1023): def filter_meta_fields(app: Sphinx, domain: str, objtype: str, content: Element) -> None:
0.79 python.py(1038): class PythonModuleIndex(Index):
0.79 python.py(1038): class PythonModuleIndex(Index):
0.79 python.py(1039):     """
0.79 python.py(1043):     name = 'modindex'
0.79 python.py(1044):     localname = _('Python Module Index')
0.79 python.py(1045):     shortname = _('modules')
0.79 python.py(1047):     def generate(self, docnames: Iterable[str] = None
0.79 python.py(1048):                  ) -> Tuple[List[Tuple[str, List[IndexEntry]]], bool]:
0.79 python.py(1047):     def generate(self, docnames: Iterable[str] = None
0.79 python.py(1110): class PythonDomain(Domain):
0.79 python.py(1110): class PythonDomain(Domain):
0.79 python.py(1111):     """Python language domain."""
0.79 python.py(1112):     name = 'py'
0.79 python.py(1113):     label = 'Python'
0.79 python.py(1115):         'function':     ObjType(_('function'),      'func', 'obj'),
0.79 python.py(1116):         'data':         ObjType(_('data'),          'data', 'obj'),
0.79 python.py(1117):         'class':        ObjType(_('class'),         'class', 'exc', 'obj'),
0.79 python.py(1118):         'exception':    ObjType(_('exception'),     'exc', 'class', 'obj'),
0.79 python.py(1119):         'method':       ObjType(_('method'),        'meth', 'obj'),
0.79 python.py(1120):         'classmethod':  ObjType(_('class method'),  'meth', 'obj'),
0.79 python.py(1121):         'staticmethod': ObjType(_('static method'), 'meth', 'obj'),
0.79 python.py(1122):         'attribute':    ObjType(_('attribute'),     'attr', 'obj'),
0.79 python.py(1123):         'property':     ObjType(_('property'),      'attr', '_prop', 'obj'),
0.79 python.py(1124):         'module':       ObjType(_('module'),        'mod', 'obj'),
0.79 python.py(1114):     object_types: Dict[str, ObjType] = {
0.79 python.py(1128):         'function':        PyFunction,
0.79 python.py(1129):         'data':            PyVariable,
0.79 python.py(1130):         'class':           PyClasslike,
0.79 python.py(1131):         'exception':       PyClasslike,
0.79 python.py(1132):         'method':          PyMethod,
0.79 python.py(1133):         'classmethod':     PyClassMethod,
0.79 python.py(1134):         'staticmethod':    PyStaticMethod,
0.79 python.py(1135):         'attribute':       PyAttribute,
0.79 python.py(1136):         'property':        PyProperty,
0.79 python.py(1137):         'module':          PyModule,
0.79 python.py(1138):         'currentmodule':   PyCurrentModule,
0.79 python.py(1139):         'decorator':       PyDecoratorFunction,
0.79 python.py(1140):         'decoratormethod': PyDecoratorMethod,
0.79 python.py(1127):     directives = {
0.79 python.py(1143):         'data':  PyXRefRole(),
0.79 python.py(1144):         'exc':   PyXRefRole(),
0.79 python.py(1145):         'func':  PyXRefRole(fix_parens=True),
0.79 python.py(1146):         'class': PyXRefRole(),
0.79 python.py(1147):         'const': PyXRefRole(),
0.79 python.py(1148):         'attr':  PyXRefRole(),
0.79 python.py(1149):         'meth':  PyXRefRole(fix_parens=True),
0.79 python.py(1150):         'mod':   PyXRefRole(),
0.79 python.py(1151):         'obj':   PyXRefRole(),
0.79 python.py(1142):     roles = {
0.79 python.py(1154):         'objects': {},  # fullname -> docname, objtype
0.79 python.py(1155):         'modules': {},  # modname -> docname, synopsis, platform, deprecated
0.79 python.py(1153):     initial_data: Dict[str, Dict[str, Tuple[Any]]] = {
0.79 python.py(1158):         PythonModuleIndex,
0.79 python.py(1157):     indices = [
0.79 python.py(1161):     @property
0.79 python.py(1162):     def objects(self) -> Dict[str, ObjectEntry]:
0.79 python.py(1165):     def note_object(self, name: str, objtype: str, node_id: str,
0.79 python.py(1166):                     aliased: bool = False, location: Any = None) -> None:
0.79 python.py(1165):     def note_object(self, name: str, objtype: str, node_id: str,
0.79 python.py(1186):     @property
0.79 python.py(1187):     def modules(self) -> Dict[str, ModuleEntry]:
0.79 python.py(1190):     def note_module(self, name: str, node_id: str, synopsis: str,
0.79 python.py(1191):                     platform: str, deprecated: bool) -> None:
0.79 python.py(1190):     def note_module(self, name: str, node_id: str, synopsis: str,
0.79 python.py(1199):     def clear_doc(self, docname: str) -> None:
0.79 python.py(1207):     def merge_domaindata(self, docnames: List[str], otherdata: Dict) -> None:
0.79 python.py(1216):     def find_obj(self, env: BuildEnvironment, modname: str, classname: str,
0.79 python.py(1217):                  name: str, type: str, searchmode: int = 0
0.79 python.py(1218):                  ) -> List[Tuple[str, ObjectEntry]]:
0.79 python.py(1216):     def find_obj(self, env: BuildEnvironment, modname: str, classname: str,
0.79 python.py(1272):     def resolve_xref(self, env: BuildEnvironment, fromdocname: str, builder: Builder,
0.79 python.py(1273):                      type: str, target: str, node: pending_xref, contnode: Element
0.79 python.py(1274):                      ) -> Optional[Element]:
0.79 python.py(1272):     def resolve_xref(self, env: BuildEnvironment, fromdocname: str, builder: Builder,
0.79 python.py(1319):     def resolve_any_xref(self, env: BuildEnvironment, fromdocname: str, builder: Builder,
0.79 python.py(1320):                          target: str, node: pending_xref, contnode: Element
0.79 python.py(1321):                          ) -> List[Tuple[str, Element]]:
0.79 python.py(1319):     def resolve_any_xref(self, env: BuildEnvironment, fromdocname: str, builder: Builder,
0.79 python.py(1347):     def _make_module_refnode(self, builder: Builder, fromdocname: str, name: str,
0.79 python.py(1348):                              contnode: Node) -> Element:
0.79 python.py(1347):     def _make_module_refnode(self, builder: Builder, fromdocname: str, name: str,
0.79 python.py(1361):     def get_objects(self) -> Iterator[Tuple[str, str, str, str, str, int]]:
0.79 python.py(1372):     def get_full_qualified_name(self, node: Element) -> Optional[str]:
0.79 python.py(1382): def builtin_resolver(app: Sphinx, env: BuildEnvironment,
0.79 python.py(1383):                      node: pending_xref, contnode: Element) -> Element:
0.79 python.py(1382): def builtin_resolver(app: Sphinx, env: BuildEnvironment,
0.79 python.py(1407): def setup(app: Sphinx) -> Dict[str, Any]:
1.14 python.py(1408):     app.setup_extension('sphinx.directives')
1.15 python.py(1410):     app.add_domain(PythonDomain)
1.15 python.py(1411):     app.add_config_value('python_use_unqualified_type_names', False, 'env')
1.15 python.py(1412):     app.connect('object-description-transform', filter_meta_fields)
1.15 python.py(1413):     app.connect('missing-reference', builtin_resolver, priority=900)
1.15 python.py(1416):         'version': 'builtin',
1.15 python.py(1417):         'env_version': 3,
1.15 python.py(1418):         'parallel_read_safe': True,
1.15 python.py(1419):         'parallel_write_safe': True,
1.15 python.py(1415):     return {
[01mmaking output directory... [39;49;00mdone
[01mbuilding [mo]: [39;49;00mtargets for 0 po files that are out of date
[01mbuilding [html]: [39;49;00mtargets for 1 source files that are out of date
[01mupdating environment: [39;49;00m[new config] 1 added, 0 changed, 0 removed
[01mreading sources... [39;49;00m[100%] [35mindex[39;49;00m                                                1.24 python.py(1200):         for fullname, obj in list(self.objects.items()):
1.24 python.py(1163):         return self.data.setdefault('objects', {})  # fullname -> ObjectEntry
1.24 python.py(1203):         for modname, mod in list(self.modules.items()):
1.24 python.py(1188):         return self.data.setdefault('modules', {})  # modname -> ModuleEntry
1.33 python.py(933):         domain = cast(PythonDomain, self.env.get_domain('py'))
1.33 python.py(935):         modname = self.arguments[0].strip()
1.33 python.py(936):         noindex = 'noindex' in self.options
1.33 python.py(937):         self.env.ref_context['py:module'] = modname
1.33 python.py(938):         ret: List[Node] = []
1.33 python.py(939):         if not noindex:
1.33 python.py(941):             node_id = make_id(self.env, self.state.document, 'module', modname)
1.33 python.py(942):             target = nodes.target('', '', ids=[node_id], ismod=True)
1.33 python.py(943):             self.set_source_info(target)
1.33 python.py(947):             old_node_id = self.make_old_id(modname)
1.33 python.py(976):         return 'module-%s' % name
1.33 python.py(948):             if node_id != old_node_id and old_node_id not in self.state.document.ids:
1.33 python.py(951):             self.state.document.note_explicit_target(target)
1.33 python.py(953):             domain.note_module(modname,
1.33 python.py(954):                                node_id,
1.33 python.py(955):                                self.options.get('synopsis', ''),
1.33 python.py(956):                                self.options.get('platform', ''),
1.33 python.py(957):                                'deprecated' in self.options)
1.33 python.py(953):             domain.note_module(modname,
1.33 python.py(1196):         self.modules[name] = ModuleEntry(self.env.docname, node_id,
1.33 python.py(1197):                                          synopsis, platform, deprecated)
1.33 python.py(1196):         self.modules[name] = ModuleEntry(self.env.docname, node_id,
1.33 python.py(1188):         return self.data.setdefault('modules', {})  # modname -> ModuleEntry
1.33 python.py(958):             domain.note_object(modname, 'module', node_id, location=target)
1.33 python.py(1171):         if name in self.objects:
1.33 python.py(1163):         return self.data.setdefault('objects', {})  # fullname -> ObjectEntry
1.33 python.py(1184):         self.objects[name] = ObjectEntry(self.env.docname, node_id, objtype, aliased)
1.33 python.py(1163):         return self.data.setdefault('objects', {})  # fullname -> ObjectEntry
1.33 python.py(962):             ret.append(target)
1.33 python.py(963):             indextext = '%s; %s' % (pairindextypes['module'], modname)
1.33 python.py(964):             inode = addnodes.index(entries=[('pair', indextext, node_id, '', None)])
1.33 python.py(965):             ret.append(inode)
1.33 python.py(966):         return ret
1.33 python.py(434):         m = py_sig_re.match(sig)
1.33 python.py(435):         if m is None:
1.33 python.py(437):         prefix, name, arglist, retann = m.groups()
1.33 python.py(440):         modname = self.options.get('module', self.env.ref_context.get('py:module'))
1.33 python.py(441):         classname = self.env.ref_context.get('py:class')
1.33 python.py(442):         if classname:
1.33 python.py(457):             add_module = True
1.33 python.py(458):             if prefix:
1.33 python.py(462):                 classname = ''
1.33 python.py(463):                 fullname = name
1.33 python.py(465):         signode['module'] = modname
1.33 python.py(466):         signode['class'] = classname
1.33 python.py(467):         signode['fullname'] = fullname
1.33 python.py(469):         sig_prefix = self.get_signature_prefix(sig)
1.33 python.py(694):         if 'final' in self.options:
1.33 python.py(697):             return '%s ' % self.objtype
1.33 python.py(470):         if sig_prefix:
1.33 python.py(471):             signode += addnodes.desc_annotation(sig_prefix, sig_prefix)
1.33 python.py(473):         if prefix:
1.33 python.py(475):         elif modname and add_module and self.env.config.add_module_names:
1.33 python.py(476):             nodetext = modname + '.'
1.33 python.py(477):             signode += addnodes.desc_addname(nodetext, nodetext)
1.33 python.py(479):         signode += addnodes.desc_name(name, name)
1.33 python.py(480):         if arglist:
1.33 python.py(492):             if self.needs_arglist():
1.33 python.py(423):         return False
1.33 python.py(496):         if retann:
1.33 python.py(500):         anno = self.options.get('annotation')
1.33 python.py(501):         if anno:
1.33 python.py(504):         return fullname, prefix
1.33 python.py(512):         modname = self.options.get('module', self.env.ref_context.get('py:module'))
1.33 python.py(513):         fullname = (modname + '.' if modname else '') + name_cls[0]
1.33 python.py(514):         node_id = make_id(self.env, self.state.document, '', fullname)
1.33 python.py(515):         signode['ids'].append(node_id)
1.33 python.py(519):         if node_id != fullname and fullname not in self.state.document.ids:
1.33 python.py(522):         self.state.document.note_explicit_target(signode)
1.33 python.py(524):         domain = cast(PythonDomain, self.env.get_domain('py'))
1.33 python.py(525):         domain.note_object(fullname, self.objtype, node_id, location=signode)
1.33 python.py(1171):         if name in self.objects:
1.33 python.py(1163):         return self.data.setdefault('objects', {})  # fullname -> ObjectEntry
1.33 python.py(1184):         self.objects[name] = ObjectEntry(self.env.docname, node_id, objtype, aliased)
1.33 python.py(1163):         return self.data.setdefault('objects', {})  # fullname -> ObjectEntry
1.33 python.py(527):         canonical_name = self.options.get('canonical')
1.33 python.py(528):         if canonical_name:
1.33 python.py(532):         if 'noindexentry' not in self.options:
1.33 python.py(533):             indextext = self.get_index_text(modname, name_cls)
1.33 python.py(700):         if self.objtype == 'class':
1.33 python.py(701):             if not modname:
1.33 python.py(703):             return _('%s (class in %s)') % (name_cls[0], modname)
1.33 python.py(534):             if indextext:
1.33 python.py(535):                 self.indexnode['entries'].append(('single', indextext, node_id, '', None))
1.33 python.py(549):         prefix = None
1.33 python.py(550):         if self.names:
1.33 python.py(555):             (fullname, name_prefix) = self.names[-1]
1.33 python.py(556):             if self.allow_nesting:
1.33 python.py(557):                 prefix = fullname
1.33 python.py(560):         if prefix:
1.33 python.py(561):             self.env.ref_context['py:class'] = prefix
1.33 python.py(562):             if self.allow_nesting:
1.33 python.py(563):                 classes = self.env.ref_context.setdefault('py:classes', [])
1.33 python.py(564):                 classes.append(prefix)
1.33 python.py(565):         if 'module' in self.options:
1.33 python.py(566):             modules = self.env.ref_context.setdefault('py:modules', [])
1.33 python.py(567):             modules.append(self.env.ref_context.get('py:module'))
1.33 python.py(568):             self.env.ref_context['py:module'] = self.options['module']
1.33 python.py(1003):         refnode['py:module'] = env.ref_context.get('py:module')
1.33 python.py(1004):         refnode['py:class'] = env.ref_context.get('py:class')
1.33 python.py(1005):         if not has_explicit_title:
1.33 python.py(1006):             title = title.lstrip('.')    # only has a meaning for the target
1.33 python.py(1007):             target = target.lstrip('~')  # only has a meaning for the title
1.33 python.py(1010):             if title[0:1] == '~':
1.33 python.py(1017):         if target[0:1] == '.':
1.33 python.py(1020):         return title, target
1.34 python.py(821):         fullname, prefix = super().handle_signature(sig, signode)
1.34 python.py(434):         m = py_sig_re.match(sig)
1.34 python.py(435):         if m is None:
1.34 python.py(437):         prefix, name, arglist, retann = m.groups()
1.34 python.py(440):         modname = self.options.get('module', self.env.ref_context.get('py:module'))
1.34 python.py(441):         classname = self.env.ref_context.get('py:class')
1.34 python.py(442):         if classname:
1.34 python.py(443):             add_module = False
1.34 python.py(444):             if prefix and (prefix == classname or
1.34 python.py(445):                            prefix.startswith(classname + ".")):
1.34 python.py(444):             if prefix and (prefix == classname or
1.34 python.py(446):                 fullname = prefix + name
1.34 python.py(448):                 prefix = prefix[len(classname):].lstrip('.')
1.34 python.py(465):         signode['module'] = modname
1.34 python.py(466):         signode['class'] = classname
1.34 python.py(467):         signode['fullname'] = fullname
1.34 python.py(469):         sig_prefix = self.get_signature_prefix(sig)
1.34 python.py(417):         return ''
1.34 python.py(470):         if sig_prefix:
1.34 python.py(473):         if prefix:
1.34 python.py(475):         elif modname and add_module and self.env.config.add_module_names:
1.34 python.py(479):         signode += addnodes.desc_name(name, name)
1.34 python.py(480):         if arglist:
1.34 python.py(492):             if self.needs_arglist():
1.34 python.py(423):         return False
1.34 python.py(496):         if retann:
1.34 python.py(500):         anno = self.options.get('annotation')
1.34 python.py(501):         if anno:
1.34 python.py(504):         return fullname, prefix
1.34 python.py(823):         typ = self.options.get('type')
1.34 python.py(824):         if typ:
1.34 python.py(825):             annotations = _parse_annotation(typ, self.env)
1.34 python.py(112):     def unparse(node: ast.AST) -> List[Node]:
1.34 python.py(174):     if env is None:
1.34 python.py(178):     try:
1.34 python.py(179):         tree = ast_parse(annotation)
1.34 python.py(180):         result = unparse(tree)
1.34 python.py(113):         if isinstance(node, ast.Attribute):
1.34 python.py(115):         elif isinstance(node, ast.BinOp):
1.34 python.py(120):         elif isinstance(node, ast.BitOr):
1.34 python.py(122):         elif isinstance(node, ast.Constant):  # type: ignore
1.34 python.py(127):         elif isinstance(node, ast.Expr):
1.34 python.py(129):         elif isinstance(node, ast.Index):
1.34 python.py(131):         elif isinstance(node, ast.List):
1.34 python.py(143):         elif isinstance(node, ast.Module):
1.34 python.py(144):             return sum((unparse(e) for e in node.body), [])
1.34 python.py(144):             return sum((unparse(e) for e in node.body), [])
1.34 python.py(113):         if isinstance(node, ast.Attribute):
1.34 python.py(115):         elif isinstance(node, ast.BinOp):
1.34 python.py(120):         elif isinstance(node, ast.BitOr):
1.34 python.py(122):         elif isinstance(node, ast.Constant):  # type: ignore
1.34 python.py(127):         elif isinstance(node, ast.Expr):
1.34 python.py(128):             return unparse(node.value)
1.34 python.py(113):         if isinstance(node, ast.Attribute):
1.34 python.py(115):         elif isinstance(node, ast.BinOp):
1.34 python.py(120):         elif isinstance(node, ast.BitOr):
1.34 python.py(122):         elif isinstance(node, ast.Constant):  # type: ignore
1.34 python.py(127):         elif isinstance(node, ast.Expr):
1.34 python.py(129):         elif isinstance(node, ast.Index):
1.34 python.py(131):         elif isinstance(node, ast.List):
1.34 python.py(143):         elif isinstance(node, ast.Module):
1.34 python.py(145):         elif isinstance(node, ast.Name):
1.34 python.py(146):             return [nodes.Text(node.id)]
1.34 python.py(144):             return sum((unparse(e) for e in node.body), [])
1.34 python.py(181):         for i, node in enumerate(result):
1.34 python.py(182):             if isinstance(node, nodes.Text) and node.strip():
1.34 python.py(183):                 result[i] = type_to_xref(str(node), env)
1.34 python.py(85):     if text == 'None':
1.34 python.py(88):         reftype = 'class'
1.34 python.py(90):     if env:
1.34 python.py(91):         kwargs = {'py:module': env.ref_context.get('py:module'),
1.34 python.py(92):                   'py:class': env.ref_context.get('py:class')}
1.34 python.py(91):         kwargs = {'py:module': env.ref_context.get('py:module'),
1.34 python.py(96):     if env.config.python_use_unqualified_type_names:
1.34 python.py(104):         contnodes = [nodes.Text(text)]
1.34 python.py(106):     return pending_xref('', *contnodes,
1.34 python.py(107):                         refdomain='py', reftype=reftype, reftarget=text, **kwargs)
1.34 python.py(106):     return pending_xref('', *contnodes,
1.34 python.py(107):                         refdomain='py', reftype=reftype, reftarget=text, **kwargs)
1.34 python.py(106):     return pending_xref('', *contnodes,
1.34 python.py(181):         for i, node in enumerate(result):
1.34 python.py(184):         return result
1.34 python.py(826):             signode += addnodes.desc_annotation(typ, '', nodes.Text(': '), *annotations)
1.34 python.py(828):         value = self.options.get('value')
1.34 python.py(829):         if value:
1.34 python.py(832):         return fullname, prefix
1.34 python.py(512):         modname = self.options.get('module', self.env.ref_context.get('py:module'))
1.34 python.py(513):         fullname = (modname + '.' if modname else '') + name_cls[0]
1.34 python.py(514):         node_id = make_id(self.env, self.state.document, '', fullname)
1.34 python.py(515):         signode['ids'].append(node_id)
1.34 python.py(519):         if node_id != fullname and fullname not in self.state.document.ids:
1.34 python.py(522):         self.state.document.note_explicit_target(signode)
1.34 python.py(524):         domain = cast(PythonDomain, self.env.get_domain('py'))
1.34 python.py(525):         domain.note_object(fullname, self.objtype, node_id, location=signode)
1.34 python.py(1171):         if name in self.objects:
1.34 python.py(1163):         return self.data.setdefault('objects', {})  # fullname -> ObjectEntry
1.34 python.py(1184):         self.objects[name] = ObjectEntry(self.env.docname, node_id, objtype, aliased)
1.34 python.py(1163):         return self.data.setdefault('objects', {})  # fullname -> ObjectEntry
1.34 python.py(527):         canonical_name = self.options.get('canonical')
1.34 python.py(528):         if canonical_name:
1.34 python.py(532):         if 'noindexentry' not in self.options:
1.34 python.py(533):             indextext = self.get_index_text(modname, name_cls)
1.34 python.py(835):         name, cls = name_cls
1.34 python.py(836):         try:
1.34 python.py(837):             clsname, attrname = name.rsplit('.', 1)
1.34 python.py(838):             if modname and self.env.config.add_module_names:
1.34 python.py(839):                 clsname = '.'.join([modname, clsname])
1.34 python.py(846):         return _('%s (%s attribute)') % (attrname, clsname)
1.34 python.py(534):             if indextext:
1.34 python.py(535):                 self.indexnode['entries'].append(('single', indextext, node_id, '', None))
1.34 python.py(549):         prefix = None
1.34 python.py(550):         if self.names:
1.34 python.py(555):             (fullname, name_prefix) = self.names[-1]
1.34 python.py(556):             if self.allow_nesting:
1.34 python.py(558):             elif name_prefix:
1.34 python.py(560):         if prefix:
1.34 python.py(565):         if 'module' in self.options:
1.34 python.py(566):             modules = self.env.ref_context.setdefault('py:modules', [])
1.34 python.py(567):             modules.append(self.env.ref_context.get('py:module'))
1.34 python.py(568):             self.env.ref_context['py:module'] = self.options['module']
1.34 python.py(1025):     if domain != 'py':
1.34 python.py(1028):     for node in content:
1.34 python.py(580):         classes = self.env.ref_context.setdefault('py:classes', [])
1.34 python.py(581):         if self.allow_nesting:
1.34 python.py(586):         self.env.ref_context['py:class'] = (classes[-1] if len(classes) > 0
1.34 python.py(586):         self.env.ref_context['py:class'] = (classes[-1] if len(classes) > 0
1.34 python.py(588):         if 'module' in self.options:
1.34 python.py(589):             modules = self.env.ref_context.setdefault('py:modules', [])
1.34 python.py(590):             if modules:
1.34 python.py(591):                 self.env.ref_context['py:module'] = modules.pop()
1.34 python.py(821):         fullname, prefix = super().handle_signature(sig, signode)
1.34 python.py(434):         m = py_sig_re.match(sig)
1.34 python.py(435):         if m is None:
1.34 python.py(437):         prefix, name, arglist, retann = m.groups()
1.34 python.py(440):         modname = self.options.get('module', self.env.ref_context.get('py:module'))
1.34 python.py(441):         classname = self.env.ref_context.get('py:class')
1.34 python.py(442):         if classname:
1.34 python.py(443):             add_module = False
1.34 python.py(444):             if prefix and (prefix == classname or
1.34 python.py(445):                            prefix.startswith(classname + ".")):
1.34 python.py(444):             if prefix and (prefix == classname or
1.34 python.py(446):                 fullname = prefix + name
1.34 python.py(448):                 prefix = prefix[len(classname):].lstrip('.')
1.34 python.py(465):         signode['module'] = modname
1.34 python.py(466):         signode['class'] = classname
1.34 python.py(467):         signode['fullname'] = fullname
1.34 python.py(469):         sig_prefix = self.get_signature_prefix(sig)
1.34 python.py(417):         return ''
1.34 python.py(470):         if sig_prefix:
1.34 python.py(473):         if prefix:
1.34 python.py(475):         elif modname and add_module and self.env.config.add_module_names:
1.34 python.py(479):         signode += addnodes.desc_name(name, name)
1.34 python.py(480):         if arglist:
1.34 python.py(492):             if self.needs_arglist():
1.34 python.py(423):         return False
1.34 python.py(496):         if retann:
1.34 python.py(500):         anno = self.options.get('annotation')
1.34 python.py(501):         if anno:
1.34 python.py(504):         return fullname, prefix
1.34 python.py(823):         typ = self.options.get('type')
1.34 python.py(824):         if typ:
1.34 python.py(825):             annotations = _parse_annotation(typ, self.env)
1.34 python.py(112):     def unparse(node: ast.AST) -> List[Node]:
1.34 python.py(174):     if env is None:
1.34 python.py(178):     try:
1.34 python.py(179):         tree = ast_parse(annotation)
1.34 python.py(180):         result = unparse(tree)
1.34 python.py(113):         if isinstance(node, ast.Attribute):
1.34 python.py(115):         elif isinstance(node, ast.BinOp):
1.34 python.py(120):         elif isinstance(node, ast.BitOr):
1.34 python.py(122):         elif isinstance(node, ast.Constant):  # type: ignore
1.34 python.py(127):         elif isinstance(node, ast.Expr):
1.34 python.py(129):         elif isinstance(node, ast.Index):
1.34 python.py(131):         elif isinstance(node, ast.List):
1.34 python.py(143):         elif isinstance(node, ast.Module):
1.34 python.py(144):             return sum((unparse(e) for e in node.body), [])
1.34 python.py(144):             return sum((unparse(e) for e in node.body), [])
1.34 python.py(113):         if isinstance(node, ast.Attribute):
1.34 python.py(115):         elif isinstance(node, ast.BinOp):
1.34 python.py(120):         elif isinstance(node, ast.BitOr):
1.34 python.py(122):         elif isinstance(node, ast.Constant):  # type: ignore
1.34 python.py(127):         elif isinstance(node, ast.Expr):
1.34 python.py(128):             return unparse(node.value)
1.34 python.py(113):         if isinstance(node, ast.Attribute):
1.34 python.py(115):         elif isinstance(node, ast.BinOp):
1.34 python.py(120):         elif isinstance(node, ast.BitOr):
1.34 python.py(122):         elif isinstance(node, ast.Constant):  # type: ignore
1.34 python.py(127):         elif isinstance(node, ast.Expr):
1.34 python.py(129):         elif isinstance(node, ast.Index):
1.34 python.py(131):         elif isinstance(node, ast.List):
1.34 python.py(143):         elif isinstance(node, ast.Module):
1.34 python.py(145):         elif isinstance(node, ast.Name):
1.34 python.py(146):             return [nodes.Text(node.id)]
1.34 python.py(144):             return sum((unparse(e) for e in node.body), [])
1.34 python.py(181):         for i, node in enumerate(result):
1.34 python.py(182):             if isinstance(node, nodes.Text) and node.strip():
1.34 python.py(183):                 result[i] = type_to_xref(str(node), env)
1.34 python.py(85):     if text == 'None':
1.34 python.py(88):         reftype = 'class'
1.34 python.py(90):     if env:
1.34 python.py(91):         kwargs = {'py:module': env.ref_context.get('py:module'),
1.34 python.py(92):                   'py:class': env.ref_context.get('py:class')}
1.34 python.py(91):         kwargs = {'py:module': env.ref_context.get('py:module'),
1.34 python.py(96):     if env.config.python_use_unqualified_type_names:
1.34 python.py(104):         contnodes = [nodes.Text(text)]
1.34 python.py(106):     return pending_xref('', *contnodes,
1.34 python.py(107):                         refdomain='py', reftype=reftype, reftarget=text, **kwargs)
1.34 python.py(106):     return pending_xref('', *contnodes,
1.34 python.py(107):                         refdomain='py', reftype=reftype, reftarget=text, **kwargs)
1.34 python.py(106):     return pending_xref('', *contnodes,
1.34 python.py(181):         for i, node in enumerate(result):
1.34 python.py(184):         return result
1.34 python.py(826):             signode += addnodes.desc_annotation(typ, '', nodes.Text(': '), *annotations)
1.34 python.py(828):         value = self.options.get('value')
1.34 python.py(829):         if value:
1.34 python.py(832):         return fullname, prefix
1.34 python.py(512):         modname = self.options.get('module', self.env.ref_context.get('py:module'))
1.34 python.py(513):         fullname = (modname + '.' if modname else '') + name_cls[0]
1.34 python.py(514):         node_id = make_id(self.env, self.state.document, '', fullname)
1.34 python.py(515):         signode['ids'].append(node_id)
1.34 python.py(519):         if node_id != fullname and fullname not in self.state.document.ids:
1.34 python.py(522):         self.state.document.note_explicit_target(signode)
1.34 python.py(524):         domain = cast(PythonDomain, self.env.get_domain('py'))
1.34 python.py(525):         domain.note_object(fullname, self.objtype, node_id, location=signode)
1.34 python.py(1171):         if name in self.objects:
1.34 python.py(1163):         return self.data.setdefault('objects', {})  # fullname -> ObjectEntry
1.34 python.py(1184):         self.objects[name] = ObjectEntry(self.env.docname, node_id, objtype, aliased)
1.34 python.py(1163):         return self.data.setdefault('objects', {})  # fullname -> ObjectEntry
1.34 python.py(527):         canonical_name = self.options.get('canonical')
1.34 python.py(528):         if canonical_name:
1.34 python.py(532):         if 'noindexentry' not in self.options:
1.34 python.py(533):             indextext = self.get_index_text(modname, name_cls)
1.34 python.py(835):         name, cls = name_cls
1.34 python.py(836):         try:
1.34 python.py(837):             clsname, attrname = name.rsplit('.', 1)
1.34 python.py(838):             if modname and self.env.config.add_module_names:
1.34 python.py(839):                 clsname = '.'.join([modname, clsname])
1.34 python.py(846):         return _('%s (%s attribute)') % (attrname, clsname)
1.34 python.py(534):             if indextext:
1.34 python.py(535):                 self.indexnode['entries'].append(('single', indextext, node_id, '', None))
1.34 python.py(549):         prefix = None
1.34 python.py(550):         if self.names:
1.34 python.py(555):             (fullname, name_prefix) = self.names[-1]
1.34 python.py(556):             if self.allow_nesting:
1.34 python.py(558):             elif name_prefix:
1.34 python.py(560):         if prefix:
1.34 python.py(565):         if 'module' in self.options:
1.34 python.py(566):             modules = self.env.ref_context.setdefault('py:modules', [])
1.34 python.py(567):             modules.append(self.env.ref_context.get('py:module'))
1.34 python.py(568):             self.env.ref_context['py:module'] = self.options['module']
1.34 python.py(1025):     if domain != 'py':
1.34 python.py(1028):     for node in content:
1.34 python.py(580):         classes = self.env.ref_context.setdefault('py:classes', [])
1.34 python.py(581):         if self.allow_nesting:
1.34 python.py(586):         self.env.ref_context['py:class'] = (classes[-1] if len(classes) > 0
1.34 python.py(586):         self.env.ref_context['py:class'] = (classes[-1] if len(classes) > 0
1.34 python.py(588):         if 'module' in self.options:
1.34 python.py(589):             modules = self.env.ref_context.setdefault('py:modules', [])
1.34 python.py(590):             if modules:
1.34 python.py(591):                 self.env.ref_context['py:module'] = modules.pop()
1.34 python.py(1025):     if domain != 'py':
1.34 python.py(1028):     for node in content:
1.34 python.py(1029):         if isinstance(node, nodes.field_list):
1.34 python.py(1028):     for node in content:
1.34 python.py(1029):         if isinstance(node, nodes.field_list):
1.34 python.py(1028):     for node in content:
1.34 python.py(1029):         if isinstance(node, nodes.field_list):
1.34 python.py(1028):     for node in content:
1.34 python.py(1029):         if isinstance(node, nodes.field_list):
1.34 python.py(1028):     for node in content:
1.34 python.py(1029):         if isinstance(node, nodes.field_list):
1.34 python.py(1028):     for node in content:
1.34 python.py(1029):         if isinstance(node, nodes.field_list):
1.34 python.py(1028):     for node in content:
1.34 python.py(1029):         if isinstance(node, nodes.field_list):
1.34 python.py(1028):     for node in content:
1.34 python.py(580):         classes = self.env.ref_context.setdefault('py:classes', [])
1.34 python.py(581):         if self.allow_nesting:
1.34 python.py(582):             try:
1.34 python.py(583):                 classes.pop()
1.34 python.py(586):         self.env.ref_context['py:class'] = (classes[-1] if len(classes) > 0
1.34 python.py(587):                                             else None)
1.34 python.py(586):         self.env.ref_context['py:class'] = (classes[-1] if len(classes) > 0
1.34 python.py(588):         if 'module' in self.options:
1.34 python.py(589):             modules = self.env.ref_context.setdefault('py:modules', [])
1.34 python.py(590):             if modules:
1.34 python.py(591):                 self.env.ref_context['py:module'] = modules.pop()
1.34 python.py(434):         m = py_sig_re.match(sig)
1.34 python.py(435):         if m is None:
1.34 python.py(437):         prefix, name, arglist, retann = m.groups()
1.34 python.py(440):         modname = self.options.get('module', self.env.ref_context.get('py:module'))
1.34 python.py(441):         classname = self.env.ref_context.get('py:class')
1.34 python.py(442):         if classname:
1.34 python.py(457):             add_module = True
1.34 python.py(458):             if prefix:
1.34 python.py(462):                 classname = ''
1.34 python.py(463):                 fullname = name
1.34 python.py(465):         signode['module'] = modname
1.34 python.py(466):         signode['class'] = classname
1.34 python.py(467):         signode['fullname'] = fullname
1.34 python.py(469):         sig_prefix = self.get_signature_prefix(sig)
1.34 python.py(694):         if 'final' in self.options:
1.34 python.py(697):             return '%s ' % self.objtype
1.34 python.py(470):         if sig_prefix:
1.34 python.py(471):             signode += addnodes.desc_annotation(sig_prefix, sig_prefix)
1.34 python.py(473):         if prefix:
1.34 python.py(475):         elif modname and add_module and self.env.config.add_module_names:
1.34 python.py(476):             nodetext = modname + '.'
1.34 python.py(477):             signode += addnodes.desc_addname(nodetext, nodetext)
1.34 python.py(479):         signode += addnodes.desc_name(name, name)
1.34 python.py(480):         if arglist:
1.34 python.py(492):             if self.needs_arglist():
1.34 python.py(423):         return False
1.34 python.py(496):         if retann:
1.34 python.py(500):         anno = self.options.get('annotation')
1.34 python.py(501):         if anno:
1.34 python.py(504):         return fullname, prefix
1.34 python.py(512):         modname = self.options.get('module', self.env.ref_context.get('py:module'))
1.34 python.py(513):         fullname = (modname + '.' if modname else '') + name_cls[0]
1.34 python.py(514):         node_id = make_id(self.env, self.state.document, '', fullname)
1.34 python.py(515):         signode['ids'].append(node_id)
1.34 python.py(519):         if node_id != fullname and fullname not in self.state.document.ids:
1.34 python.py(522):         self.state.document.note_explicit_target(signode)
1.34 python.py(524):         domain = cast(PythonDomain, self.env.get_domain('py'))
1.34 python.py(525):         domain.note_object(fullname, self.objtype, node_id, location=signode)
1.34 python.py(1171):         if name in self.objects:
1.34 python.py(1163):         return self.data.setdefault('objects', {})  # fullname -> ObjectEntry
1.34 python.py(1184):         self.objects[name] = ObjectEntry(self.env.docname, node_id, objtype, aliased)
1.34 python.py(1163):         return self.data.setdefault('objects', {})  # fullname -> ObjectEntry
1.34 python.py(527):         canonical_name = self.options.get('canonical')
1.34 python.py(528):         if canonical_name:
1.34 python.py(532):         if 'noindexentry' not in self.options:
1.34 python.py(533):             indextext = self.get_index_text(modname, name_cls)
1.34 python.py(700):         if self.objtype == 'class':
1.34 python.py(701):             if not modname:
1.34 python.py(703):             return _('%s (class in %s)') % (name_cls[0], modname)
1.34 python.py(534):             if indextext:
1.34 python.py(535):                 self.indexnode['entries'].append(('single', indextext, node_id, '', None))
1.34 python.py(549):         prefix = None
1.34 python.py(550):         if self.names:
1.34 python.py(555):             (fullname, name_prefix) = self.names[-1]
1.34 python.py(556):             if self.allow_nesting:
1.34 python.py(557):                 prefix = fullname
1.34 python.py(560):         if prefix:
1.34 python.py(561):             self.env.ref_context['py:class'] = prefix
1.34 python.py(562):             if self.allow_nesting:
1.34 python.py(563):                 classes = self.env.ref_context.setdefault('py:classes', [])
1.34 python.py(564):                 classes.append(prefix)
1.34 python.py(565):         if 'module' in self.options:
1.34 python.py(566):             modules = self.env.ref_context.setdefault('py:modules', [])
1.34 python.py(567):             modules.append(self.env.ref_context.get('py:module'))
1.34 python.py(568):             self.env.ref_context['py:module'] = self.options['module']
1.34 python.py(1003):         refnode['py:module'] = env.ref_context.get('py:module')
1.34 python.py(1004):         refnode['py:class'] = env.ref_context.get('py:class')
1.34 python.py(1005):         if not has_explicit_title:
1.34 python.py(1006):             title = title.lstrip('.')    # only has a meaning for the target
1.34 python.py(1007):             target = target.lstrip('~')  # only has a meaning for the title
1.34 python.py(1010):             if title[0:1] == '~':
1.34 python.py(1017):         if target[0:1] == '.':
1.34 python.py(1020):         return title, target
1.35 python.py(860):         fullname, prefix = super().handle_signature(sig, signode)
1.35 python.py(434):         m = py_sig_re.match(sig)
1.35 python.py(435):         if m is None:
1.35 python.py(437):         prefix, name, arglist, retann = m.groups()
1.35 python.py(440):         modname = self.options.get('module', self.env.ref_context.get('py:module'))
1.35 python.py(441):         classname = self.env.ref_context.get('py:class')
1.35 python.py(442):         if classname:
1.35 python.py(443):             add_module = False
1.35 python.py(444):             if prefix and (prefix == classname or
1.35 python.py(445):                            prefix.startswith(classname + ".")):
1.35 python.py(444):             if prefix and (prefix == classname or
1.35 python.py(446):                 fullname = prefix + name
1.35 python.py(448):                 prefix = prefix[len(classname):].lstrip('.')
1.35 python.py(465):         signode['module'] = modname
1.35 python.py(466):         signode['class'] = classname
1.35 python.py(467):         signode['fullname'] = fullname
1.35 python.py(469):         sig_prefix = self.get_signature_prefix(sig)
1.35 python.py(869):         prefix = []
1.35 python.py(870):         if 'abstractmethod' in self.options:
1.35 python.py(872):         if 'classmethod' in self.options:
1.35 python.py(875):         prefix.append('property')
1.35 python.py(876):         return ' '.join(prefix) + ' '
1.35 python.py(470):         if sig_prefix:
1.35 python.py(471):             signode += addnodes.desc_annotation(sig_prefix, sig_prefix)
1.35 python.py(473):         if prefix:
1.35 python.py(475):         elif modname and add_module and self.env.config.add_module_names:
1.35 python.py(479):         signode += addnodes.desc_name(name, name)
1.35 python.py(480):         if arglist:
1.35 python.py(492):             if self.needs_arglist():
1.35 python.py(423):         return False
1.35 python.py(496):         if retann:
1.35 python.py(500):         anno = self.options.get('annotation')
1.35 python.py(501):         if anno:
1.35 python.py(504):         return fullname, prefix
1.35 python.py(862):         typ = self.options.get('type')
1.35 python.py(863):         if typ:
1.35 python.py(864):             signode += addnodes.desc_annotation(typ, ': ' + typ)
1.35 python.py(866):         return fullname, prefix
1.35 python.py(512):         modname = self.options.get('module', self.env.ref_context.get('py:module'))
1.35 python.py(513):         fullname = (modname + '.' if modname else '') + name_cls[0]
1.35 python.py(514):         node_id = make_id(self.env, self.state.document, '', fullname)
1.35 python.py(515):         signode['ids'].append(node_id)
1.35 python.py(519):         if node_id != fullname and fullname not in self.state.document.ids:
1.35 python.py(522):         self.state.document.note_explicit_target(signode)
1.35 python.py(524):         domain = cast(PythonDomain, self.env.get_domain('py'))
1.35 python.py(525):         domain.note_object(fullname, self.objtype, node_id, location=signode)
1.35 python.py(1171):         if name in self.objects:
1.35 python.py(1163):         return self.data.setdefault('objects', {})  # fullname -> ObjectEntry
1.35 python.py(1184):         self.objects[name] = ObjectEntry(self.env.docname, node_id, objtype, aliased)
1.35 python.py(1163):         return self.data.setdefault('objects', {})  # fullname -> ObjectEntry
1.35 python.py(527):         canonical_name = self.options.get('canonical')
1.35 python.py(528):         if canonical_name:
1.35 python.py(532):         if 'noindexentry' not in self.options:
1.35 python.py(533):             indextext = self.get_index_text(modname, name_cls)
1.35 python.py(879):         name, cls = name_cls
1.35 python.py(880):         try:
1.35 python.py(881):             clsname, attrname = name.rsplit('.', 1)
1.35 python.py(882):             if modname and self.env.config.add_module_names:
1.35 python.py(883):                 clsname = '.'.join([modname, clsname])
1.35 python.py(890):         return _('%s (%s property)') % (attrname, clsname)
1.35 python.py(534):             if indextext:
1.35 python.py(535):                 self.indexnode['entries'].append(('single', indextext, node_id, '', None))
1.35 python.py(549):         prefix = None
1.35 python.py(550):         if self.names:
1.35 python.py(555):             (fullname, name_prefix) = self.names[-1]
1.35 python.py(556):             if self.allow_nesting:
1.35 python.py(558):             elif name_prefix:
1.35 python.py(560):         if prefix:
1.35 python.py(565):         if 'module' in self.options:
1.35 python.py(566):             modules = self.env.ref_context.setdefault('py:modules', [])
1.35 python.py(567):             modules.append(self.env.ref_context.get('py:module'))
1.35 python.py(568):             self.env.ref_context['py:module'] = self.options['module']
1.35 python.py(1025):     if domain != 'py':
1.35 python.py(1028):     for node in content:
1.35 python.py(1029):         if isinstance(node, nodes.field_list):
1.35 python.py(1028):     for node in content:
1.35 python.py(580):         classes = self.env.ref_context.setdefault('py:classes', [])
1.35 python.py(581):         if self.allow_nesting:
1.35 python.py(586):         self.env.ref_context['py:class'] = (classes[-1] if len(classes) > 0
1.35 python.py(586):         self.env.ref_context['py:class'] = (classes[-1] if len(classes) > 0
1.35 python.py(588):         if 'module' in self.options:
1.35 python.py(589):             modules = self.env.ref_context.setdefault('py:modules', [])
1.35 python.py(590):             if modules:
1.35 python.py(591):                 self.env.ref_context['py:module'] = modules.pop()
1.35 python.py(821):         fullname, prefix = super().handle_signature(sig, signode)
1.35 python.py(434):         m = py_sig_re.match(sig)
1.35 python.py(435):         if m is None:
1.35 python.py(437):         prefix, name, arglist, retann = m.groups()
1.35 python.py(440):         modname = self.options.get('module', self.env.ref_context.get('py:module'))
1.35 python.py(441):         classname = self.env.ref_context.get('py:class')
1.35 python.py(442):         if classname:
1.35 python.py(443):             add_module = False
1.35 python.py(444):             if prefix and (prefix == classname or
1.35 python.py(445):                            prefix.startswith(classname + ".")):
1.35 python.py(444):             if prefix and (prefix == classname or
1.35 python.py(446):                 fullname = prefix + name
1.35 python.py(448):                 prefix = prefix[len(classname):].lstrip('.')
1.35 python.py(465):         signode['module'] = modname
1.35 python.py(466):         signode['class'] = classname
1.35 python.py(467):         signode['fullname'] = fullname
1.35 python.py(469):         sig_prefix = self.get_signature_prefix(sig)
1.35 python.py(417):         return ''
1.35 python.py(470):         if sig_prefix:
1.35 python.py(473):         if prefix:
1.35 python.py(475):         elif modname and add_module and self.env.config.add_module_names:
1.35 python.py(479):         signode += addnodes.desc_name(name, name)
1.35 python.py(480):         if arglist:
1.35 python.py(492):             if self.needs_arglist():
1.35 python.py(423):         return False
1.35 python.py(496):         if retann:
1.35 python.py(500):         anno = self.options.get('annotation')
1.35 python.py(501):         if anno:
1.35 python.py(504):         return fullname, prefix
1.35 python.py(823):         typ = self.options.get('type')
1.35 python.py(824):         if typ:
1.35 python.py(825):             annotations = _parse_annotation(typ, self.env)
1.35 python.py(112):     def unparse(node: ast.AST) -> List[Node]:
1.35 python.py(174):     if env is None:
1.35 python.py(178):     try:
1.35 python.py(179):         tree = ast_parse(annotation)
1.35 python.py(180):         result = unparse(tree)
1.35 python.py(113):         if isinstance(node, ast.Attribute):
1.35 python.py(115):         elif isinstance(node, ast.BinOp):
1.35 python.py(120):         elif isinstance(node, ast.BitOr):
1.35 python.py(122):         elif isinstance(node, ast.Constant):  # type: ignore
1.35 python.py(127):         elif isinstance(node, ast.Expr):
1.35 python.py(129):         elif isinstance(node, ast.Index):
1.35 python.py(131):         elif isinstance(node, ast.List):
1.35 python.py(143):         elif isinstance(node, ast.Module):
1.35 python.py(144):             return sum((unparse(e) for e in node.body), [])
1.35 python.py(144):             return sum((unparse(e) for e in node.body), [])
1.35 python.py(113):         if isinstance(node, ast.Attribute):
1.35 python.py(115):         elif isinstance(node, ast.BinOp):
1.35 python.py(120):         elif isinstance(node, ast.BitOr):
1.35 python.py(122):         elif isinstance(node, ast.Constant):  # type: ignore
1.35 python.py(127):         elif isinstance(node, ast.Expr):
1.35 python.py(128):             return unparse(node.value)
1.35 python.py(113):         if isinstance(node, ast.Attribute):
1.35 python.py(115):         elif isinstance(node, ast.BinOp):
1.35 python.py(120):         elif isinstance(node, ast.BitOr):
1.35 python.py(122):         elif isinstance(node, ast.Constant):  # type: ignore
1.35 python.py(127):         elif isinstance(node, ast.Expr):
1.35 python.py(129):         elif isinstance(node, ast.Index):
1.35 python.py(131):         elif isinstance(node, ast.List):
1.35 python.py(143):         elif isinstance(node, ast.Module):
1.35 python.py(145):         elif isinstance(node, ast.Name):
1.35 python.py(146):             return [nodes.Text(node.id)]
1.35 python.py(144):             return sum((unparse(e) for e in node.body), [])
1.35 python.py(181):         for i, node in enumerate(result):
1.35 python.py(182):             if isinstance(node, nodes.Text) and node.strip():
1.35 python.py(183):                 result[i] = type_to_xref(str(node), env)
1.35 python.py(85):     if text == 'None':
1.35 python.py(88):         reftype = 'class'
1.35 python.py(90):     if env:
1.35 python.py(91):         kwargs = {'py:module': env.ref_context.get('py:module'),
1.35 python.py(92):                   'py:class': env.ref_context.get('py:class')}
1.35 python.py(91):         kwargs = {'py:module': env.ref_context.get('py:module'),
1.35 python.py(96):     if env.config.python_use_unqualified_type_names:
1.35 python.py(104):         contnodes = [nodes.Text(text)]
1.35 python.py(106):     return pending_xref('', *contnodes,
1.35 python.py(107):                         refdomain='py', reftype=reftype, reftarget=text, **kwargs)
1.35 python.py(106):     return pending_xref('', *contnodes,
1.35 python.py(107):                         refdomain='py', reftype=reftype, reftarget=text, **kwargs)
1.35 python.py(106):     return pending_xref('', *contnodes,
1.35 python.py(181):         for i, node in enumerate(result):
1.35 python.py(184):         return result
1.35 python.py(826):             signode += addnodes.desc_annotation(typ, '', nodes.Text(': '), *annotations)
1.35 python.py(828):         value = self.options.get('value')
1.35 python.py(829):         if value:
1.35 python.py(832):         return fullname, prefix
1.35 python.py(512):         modname = self.options.get('module', self.env.ref_context.get('py:module'))
1.35 python.py(513):         fullname = (modname + '.' if modname else '') + name_cls[0]
1.35 python.py(514):         node_id = make_id(self.env, self.state.document, '', fullname)
1.35 python.py(515):         signode['ids'].append(node_id)
1.35 python.py(519):         if node_id != fullname and fullname not in self.state.document.ids:
1.35 python.py(522):         self.state.document.note_explicit_target(signode)
1.35 python.py(524):         domain = cast(PythonDomain, self.env.get_domain('py'))
1.35 python.py(525):         domain.note_object(fullname, self.objtype, node_id, location=signode)
1.35 python.py(1171):         if name in self.objects:
1.35 python.py(1163):         return self.data.setdefault('objects', {})  # fullname -> ObjectEntry
1.35 python.py(1184):         self.objects[name] = ObjectEntry(self.env.docname, node_id, objtype, aliased)
1.35 python.py(1163):         return self.data.setdefault('objects', {})  # fullname -> ObjectEntry
1.35 python.py(527):         canonical_name = self.options.get('canonical')
1.35 python.py(528):         if canonical_name:
1.35 python.py(532):         if 'noindexentry' not in self.options:
1.35 python.py(533):             indextext = self.get_index_text(modname, name_cls)
1.35 python.py(835):         name, cls = name_cls
1.35 python.py(836):         try:
1.35 python.py(837):             clsname, attrname = name.rsplit('.', 1)
1.35 python.py(838):             if modname and self.env.config.add_module_names:
1.35 python.py(839):                 clsname = '.'.join([modname, clsname])
1.35 python.py(846):         return _('%s (%s attribute)') % (attrname, clsname)
1.35 python.py(534):             if indextext:
1.35 python.py(535):                 self.indexnode['entries'].append(('single', indextext, node_id, '', None))
1.35 python.py(549):         prefix = None
1.35 python.py(550):         if self.names:
1.35 python.py(555):             (fullname, name_prefix) = self.names[-1]
1.35 python.py(556):             if self.allow_nesting:
1.35 python.py(558):             elif name_prefix:
1.35 python.py(560):         if prefix:
1.35 python.py(565):         if 'module' in self.options:
1.35 python.py(566):             modules = self.env.ref_context.setdefault('py:modules', [])
1.35 python.py(567):             modules.append(self.env.ref_context.get('py:module'))
1.35 python.py(568):             self.env.ref_context['py:module'] = self.options['module']
1.35 python.py(1025):     if domain != 'py':
1.35 python.py(1028):     for node in content:
1.35 python.py(580):         classes = self.env.ref_context.setdefault('py:classes', [])
1.35 python.py(581):         if self.allow_nesting:
1.35 python.py(586):         self.env.ref_context['py:class'] = (classes[-1] if len(classes) > 0
1.35 python.py(586):         self.env.ref_context['py:class'] = (classes[-1] if len(classes) > 0
1.35 python.py(588):         if 'module' in self.options:
1.35 python.py(589):             modules = self.env.ref_context.setdefault('py:modules', [])
1.35 python.py(590):             if modules:
1.35 python.py(591):                 self.env.ref_context['py:module'] = modules.pop()
1.35 python.py(821):         fullname, prefix = super().handle_signature(sig, signode)
1.35 python.py(434):         m = py_sig_re.match(sig)
1.35 python.py(435):         if m is None:
1.35 python.py(437):         prefix, name, arglist, retann = m.groups()
1.35 python.py(440):         modname = self.options.get('module', self.env.ref_context.get('py:module'))
1.35 python.py(441):         classname = self.env.ref_context.get('py:class')
1.35 python.py(442):         if classname:
1.35 python.py(443):             add_module = False
1.35 python.py(444):             if prefix and (prefix == classname or
1.35 python.py(445):                            prefix.startswith(classname + ".")):
1.35 python.py(444):             if prefix and (prefix == classname or
1.35 python.py(446):                 fullname = prefix + name
1.35 python.py(448):                 prefix = prefix[len(classname):].lstrip('.')
1.35 python.py(465):         signode['module'] = modname
1.35 python.py(466):         signode['class'] = classname
1.35 python.py(467):         signode['fullname'] = fullname
1.35 python.py(469):         sig_prefix = self.get_signature_prefix(sig)
1.35 python.py(417):         return ''
1.35 python.py(470):         if sig_prefix:
1.35 python.py(473):         if prefix:
1.35 python.py(475):         elif modname and add_module and self.env.config.add_module_names:
1.35 python.py(479):         signode += addnodes.desc_name(name, name)
1.35 python.py(480):         if arglist:
1.35 python.py(492):             if self.needs_arglist():
1.35 python.py(423):         return False
1.35 python.py(496):         if retann:
1.35 python.py(500):         anno = self.options.get('annotation')
1.35 python.py(501):         if anno:
1.35 python.py(504):         return fullname, prefix
1.35 python.py(823):         typ = self.options.get('type')
1.35 python.py(824):         if typ:
1.35 python.py(825):             annotations = _parse_annotation(typ, self.env)
1.35 python.py(112):     def unparse(node: ast.AST) -> List[Node]:
1.35 python.py(174):     if env is None:
1.35 python.py(178):     try:
1.35 python.py(179):         tree = ast_parse(annotation)
1.35 python.py(180):         result = unparse(tree)
1.35 python.py(113):         if isinstance(node, ast.Attribute):
1.35 python.py(115):         elif isinstance(node, ast.BinOp):
1.35 python.py(120):         elif isinstance(node, ast.BitOr):
1.35 python.py(122):         elif isinstance(node, ast.Constant):  # type: ignore
1.35 python.py(127):         elif isinstance(node, ast.Expr):
1.35 python.py(129):         elif isinstance(node, ast.Index):
1.35 python.py(131):         elif isinstance(node, ast.List):
1.35 python.py(143):         elif isinstance(node, ast.Module):
1.35 python.py(144):             return sum((unparse(e) for e in node.body), [])
1.35 python.py(144):             return sum((unparse(e) for e in node.body), [])
1.35 python.py(113):         if isinstance(node, ast.Attribute):
1.35 python.py(115):         elif isinstance(node, ast.BinOp):
1.35 python.py(120):         elif isinstance(node, ast.BitOr):
1.35 python.py(122):         elif isinstance(node, ast.Constant):  # type: ignore
1.35 python.py(127):         elif isinstance(node, ast.Expr):
1.35 python.py(128):             return unparse(node.value)
1.35 python.py(113):         if isinstance(node, ast.Attribute):
1.35 python.py(114):             return [nodes.Text("%s.%s" % (unparse(node.value)[0], node.attr))]
1.35 python.py(113):         if isinstance(node, ast.Attribute):
1.35 python.py(115):         elif isinstance(node, ast.BinOp):
1.35 python.py(120):         elif isinstance(node, ast.BitOr):
1.35 python.py(122):         elif isinstance(node, ast.Constant):  # type: ignore
1.35 python.py(127):         elif isinstance(node, ast.Expr):
1.35 python.py(129):         elif isinstance(node, ast.Index):
1.35 python.py(131):         elif isinstance(node, ast.List):
1.35 python.py(143):         elif isinstance(node, ast.Module):
1.35 python.py(145):         elif isinstance(node, ast.Name):
1.35 python.py(146):             return [nodes.Text(node.id)]
1.35 python.py(144):             return sum((unparse(e) for e in node.body), [])
1.35 python.py(181):         for i, node in enumerate(result):
1.35 python.py(182):             if isinstance(node, nodes.Text) and node.strip():
1.35 python.py(183):                 result[i] = type_to_xref(str(node), env)
1.35 python.py(85):     if text == 'None':
1.35 python.py(88):         reftype = 'class'
1.35 python.py(90):     if env:
1.35 python.py(91):         kwargs = {'py:module': env.ref_context.get('py:module'),
1.35 python.py(92):                   'py:class': env.ref_context.get('py:class')}
1.35 python.py(91):         kwargs = {'py:module': env.ref_context.get('py:module'),
1.35 python.py(96):     if env.config.python_use_unqualified_type_names:
1.35 python.py(104):         contnodes = [nodes.Text(text)]
1.35 python.py(106):     return pending_xref('', *contnodes,
1.35 python.py(107):                         refdomain='py', reftype=reftype, reftarget=text, **kwargs)
1.35 python.py(106):     return pending_xref('', *contnodes,
1.35 python.py(107):                         refdomain='py', reftype=reftype, reftarget=text, **kwargs)
1.35 python.py(106):     return pending_xref('', *contnodes,
1.35 python.py(181):         for i, node in enumerate(result):
1.35 python.py(184):         return result
1.35 python.py(826):             signode += addnodes.desc_annotation(typ, '', nodes.Text(': '), *annotations)
1.35 python.py(828):         value = self.options.get('value')
1.35 python.py(829):         if value:
1.35 python.py(832):         return fullname, prefix
1.35 python.py(512):         modname = self.options.get('module', self.env.ref_context.get('py:module'))
1.35 python.py(513):         fullname = (modname + '.' if modname else '') + name_cls[0]
1.35 python.py(514):         node_id = make_id(self.env, self.state.document, '', fullname)
1.35 python.py(515):         signode['ids'].append(node_id)
1.35 python.py(519):         if node_id != fullname and fullname not in self.state.document.ids:
1.35 python.py(522):         self.state.document.note_explicit_target(signode)
1.35 python.py(524):         domain = cast(PythonDomain, self.env.get_domain('py'))
1.35 python.py(525):         domain.note_object(fullname, self.objtype, node_id, location=signode)
1.35 python.py(1171):         if name in self.objects:
1.35 python.py(1163):         return self.data.setdefault('objects', {})  # fullname -> ObjectEntry
1.35 python.py(1184):         self.objects[name] = ObjectEntry(self.env.docname, node_id, objtype, aliased)
1.35 python.py(1163):         return self.data.setdefault('objects', {})  # fullname -> ObjectEntry
1.35 python.py(527):         canonical_name = self.options.get('canonical')
1.35 python.py(528):         if canonical_name:
1.35 python.py(532):         if 'noindexentry' not in self.options:
1.35 python.py(533):             indextext = self.get_index_text(modname, name_cls)
1.35 python.py(835):         name, cls = name_cls
1.35 python.py(836):         try:
1.35 python.py(837):             clsname, attrname = name.rsplit('.', 1)
1.35 python.py(838):             if modname and self.env.config.add_module_names:
1.35 python.py(839):                 clsname = '.'.join([modname, clsname])
1.35 python.py(846):         return _('%s (%s attribute)') % (attrname, clsname)
1.35 python.py(534):             if indextext:
1.35 python.py(535):                 self.indexnode['entries'].append(('single', indextext, node_id, '', None))
1.35 python.py(549):         prefix = None
1.35 python.py(550):         if self.names:
1.35 python.py(555):             (fullname, name_prefix) = self.names[-1]
1.35 python.py(556):             if self.allow_nesting:
1.35 python.py(558):             elif name_prefix:
1.35 python.py(560):         if prefix:
1.35 python.py(565):         if 'module' in self.options:
1.35 python.py(566):             modules = self.env.ref_context.setdefault('py:modules', [])
1.35 python.py(567):             modules.append(self.env.ref_context.get('py:module'))
1.35 python.py(568):             self.env.ref_context['py:module'] = self.options['module']
1.35 python.py(1025):     if domain != 'py':
1.35 python.py(1028):     for node in content:
1.35 python.py(580):         classes = self.env.ref_context.setdefault('py:classes', [])
1.35 python.py(581):         if self.allow_nesting:
1.35 python.py(586):         self.env.ref_context['py:class'] = (classes[-1] if len(classes) > 0
1.35 python.py(586):         self.env.ref_context['py:class'] = (classes[-1] if len(classes) > 0
1.35 python.py(588):         if 'module' in self.options:
1.35 python.py(589):             modules = self.env.ref_context.setdefault('py:modules', [])
1.35 python.py(590):             if modules:
1.35 python.py(591):                 self.env.ref_context['py:module'] = modules.pop()
1.36 python.py(821):         fullname, prefix = super().handle_signature(sig, signode)
1.36 python.py(434):         m = py_sig_re.match(sig)
1.36 python.py(435):         if m is None:
1.36 python.py(437):         prefix, name, arglist, retann = m.groups()
1.36 python.py(440):         modname = self.options.get('module', self.env.ref_context.get('py:module'))
1.36 python.py(441):         classname = self.env.ref_context.get('py:class')
1.36 python.py(442):         if classname:
1.36 python.py(443):             add_module = False
1.36 python.py(444):             if prefix and (prefix == classname or
1.36 python.py(445):                            prefix.startswith(classname + ".")):
1.36 python.py(444):             if prefix and (prefix == classname or
1.36 python.py(446):                 fullname = prefix + name
1.36 python.py(448):                 prefix = prefix[len(classname):].lstrip('.')
1.36 python.py(465):         signode['module'] = modname
1.36 python.py(466):         signode['class'] = classname
1.36 python.py(467):         signode['fullname'] = fullname
1.36 python.py(469):         sig_prefix = self.get_signature_prefix(sig)
1.36 python.py(417):         return ''
1.36 python.py(470):         if sig_prefix:
1.36 python.py(473):         if prefix:
1.36 python.py(475):         elif modname and add_module and self.env.config.add_module_names:
1.36 python.py(479):         signode += addnodes.desc_name(name, name)
1.36 python.py(480):         if arglist:
1.36 python.py(492):             if self.needs_arglist():
1.36 python.py(423):         return False
1.36 python.py(496):         if retann:
1.36 python.py(500):         anno = self.options.get('annotation')
1.36 python.py(501):         if anno:
1.36 python.py(504):         return fullname, prefix
1.36 python.py(823):         typ = self.options.get('type')
1.36 python.py(824):         if typ:
1.36 python.py(825):             annotations = _parse_annotation(typ, self.env)
1.36 python.py(112):     def unparse(node: ast.AST) -> List[Node]:
1.36 python.py(174):     if env is None:
1.36 python.py(178):     try:
1.36 python.py(179):         tree = ast_parse(annotation)
1.36 python.py(180):         result = unparse(tree)
1.36 python.py(113):         if isinstance(node, ast.Attribute):
1.36 python.py(115):         elif isinstance(node, ast.BinOp):
1.36 python.py(120):         elif isinstance(node, ast.BitOr):
1.36 python.py(122):         elif isinstance(node, ast.Constant):  # type: ignore
1.36 python.py(127):         elif isinstance(node, ast.Expr):
1.36 python.py(129):         elif isinstance(node, ast.Index):
1.36 python.py(131):         elif isinstance(node, ast.List):
1.36 python.py(143):         elif isinstance(node, ast.Module):
1.36 python.py(144):             return sum((unparse(e) for e in node.body), [])
1.36 python.py(144):             return sum((unparse(e) for e in node.body), [])
1.36 python.py(113):         if isinstance(node, ast.Attribute):
1.36 python.py(115):         elif isinstance(node, ast.BinOp):
1.36 python.py(120):         elif isinstance(node, ast.BitOr):
1.36 python.py(122):         elif isinstance(node, ast.Constant):  # type: ignore
1.36 python.py(127):         elif isinstance(node, ast.Expr):
1.36 python.py(128):             return unparse(node.value)
1.36 python.py(113):         if isinstance(node, ast.Attribute):
1.36 python.py(115):         elif isinstance(node, ast.BinOp):
1.36 python.py(120):         elif isinstance(node, ast.BitOr):
1.36 python.py(122):         elif isinstance(node, ast.Constant):  # type: ignore
1.36 python.py(127):         elif isinstance(node, ast.Expr):
1.36 python.py(129):         elif isinstance(node, ast.Index):
1.36 python.py(131):         elif isinstance(node, ast.List):
1.36 python.py(143):         elif isinstance(node, ast.Module):
1.36 python.py(145):         elif isinstance(node, ast.Name):
1.36 python.py(146):             return [nodes.Text(node.id)]
1.36 python.py(144):             return sum((unparse(e) for e in node.body), [])
1.36 python.py(181):         for i, node in enumerate(result):
1.36 python.py(182):             if isinstance(node, nodes.Text) and node.strip():
1.36 python.py(183):                 result[i] = type_to_xref(str(node), env)
1.36 python.py(85):     if text == 'None':
1.36 python.py(88):         reftype = 'class'
1.36 python.py(90):     if env:
1.36 python.py(91):         kwargs = {'py:module': env.ref_context.get('py:module'),
1.36 python.py(92):                   'py:class': env.ref_context.get('py:class')}
1.36 python.py(91):         kwargs = {'py:module': env.ref_context.get('py:module'),
1.36 python.py(96):     if env.config.python_use_unqualified_type_names:
1.36 python.py(104):         contnodes = [nodes.Text(text)]
1.36 python.py(106):     return pending_xref('', *contnodes,
1.36 python.py(107):                         refdomain='py', reftype=reftype, reftarget=text, **kwargs)
1.36 python.py(106):     return pending_xref('', *contnodes,
1.36 python.py(107):                         refdomain='py', reftype=reftype, reftarget=text, **kwargs)
1.36 python.py(106):     return pending_xref('', *contnodes,
1.36 python.py(181):         for i, node in enumerate(result):
1.36 python.py(184):         return result
1.36 python.py(826):             signode += addnodes.desc_annotation(typ, '', nodes.Text(': '), *annotations)
1.36 python.py(828):         value = self.options.get('value')
1.36 python.py(829):         if value:
1.36 python.py(832):         return fullname, prefix
1.36 python.py(512):         modname = self.options.get('module', self.env.ref_context.get('py:module'))
1.36 python.py(513):         fullname = (modname + '.' if modname else '') + name_cls[0]
1.36 python.py(514):         node_id = make_id(self.env, self.state.document, '', fullname)
1.36 python.py(515):         signode['ids'].append(node_id)
1.36 python.py(519):         if node_id != fullname and fullname not in self.state.document.ids:
1.36 python.py(522):         self.state.document.note_explicit_target(signode)
1.36 python.py(524):         domain = cast(PythonDomain, self.env.get_domain('py'))
1.36 python.py(525):         domain.note_object(fullname, self.objtype, node_id, location=signode)
1.36 python.py(1171):         if name in self.objects:
1.36 python.py(1163):         return self.data.setdefault('objects', {})  # fullname -> ObjectEntry
1.36 python.py(1184):         self.objects[name] = ObjectEntry(self.env.docname, node_id, objtype, aliased)
1.36 python.py(1163):         return self.data.setdefault('objects', {})  # fullname -> ObjectEntry
1.36 python.py(527):         canonical_name = self.options.get('canonical')
1.36 python.py(528):         if canonical_name:
1.36 python.py(532):         if 'noindexentry' not in self.options:
1.36 python.py(533):             indextext = self.get_index_text(modname, name_cls)
1.36 python.py(835):         name, cls = name_cls
1.36 python.py(836):         try:
1.36 python.py(837):             clsname, attrname = name.rsplit('.', 1)
1.36 python.py(838):             if modname and self.env.config.add_module_names:
1.36 python.py(839):                 clsname = '.'.join([modname, clsname])
1.36 python.py(846):         return _('%s (%s attribute)') % (attrname, clsname)
1.36 python.py(534):             if indextext:
1.36 python.py(535):                 self.indexnode['entries'].append(('single', indextext, node_id, '', None))
1.36 python.py(549):         prefix = None
1.36 python.py(550):         if self.names:
1.36 python.py(555):             (fullname, name_prefix) = self.names[-1]
1.36 python.py(556):             if self.allow_nesting:
1.36 python.py(558):             elif name_prefix:
1.36 python.py(560):         if prefix:
1.36 python.py(565):         if 'module' in self.options:
1.36 python.py(566):             modules = self.env.ref_context.setdefault('py:modules', [])
1.36 python.py(567):             modules.append(self.env.ref_context.get('py:module'))
1.36 python.py(568):             self.env.ref_context['py:module'] = self.options['module']
1.36 python.py(1025):     if domain != 'py':
1.36 python.py(1028):     for node in content:
1.36 python.py(580):         classes = self.env.ref_context.setdefault('py:classes', [])
1.36 python.py(581):         if self.allow_nesting:
1.36 python.py(586):         self.env.ref_context['py:class'] = (classes[-1] if len(classes) > 0
1.36 python.py(586):         self.env.ref_context['py:class'] = (classes[-1] if len(classes) > 0
1.36 python.py(588):         if 'module' in self.options:
1.36 python.py(589):             modules = self.env.ref_context.setdefault('py:modules', [])
1.36 python.py(590):             if modules:
1.36 python.py(591):                 self.env.ref_context['py:module'] = modules.pop()
1.36 python.py(1025):     if domain != 'py':
1.36 python.py(1028):     for node in content:
1.36 python.py(1029):         if isinstance(node, nodes.field_list):
1.36 python.py(1028):     for node in content:
1.36 python.py(1029):         if isinstance(node, nodes.field_list):
1.36 python.py(1028):     for node in content:
1.36 python.py(1029):         if isinstance(node, nodes.field_list):
1.36 python.py(1028):     for node in content:
1.36 python.py(1029):         if isinstance(node, nodes.field_list):
1.36 python.py(1028):     for node in content:
1.36 python.py(1029):         if isinstance(node, nodes.field_list):
1.36 python.py(1028):     for node in content:
1.36 python.py(1029):         if isinstance(node, nodes.field_list):
1.36 python.py(1028):     for node in content:
1.36 python.py(1029):         if isinstance(node, nodes.field_list):
1.36 python.py(1028):     for node in content:
1.36 python.py(1029):         if isinstance(node, nodes.field_list):
1.36 python.py(1028):     for node in content:
1.36 python.py(1029):         if isinstance(node, nodes.field_list):
1.36 python.py(1028):     for node in content:
1.36 python.py(1029):         if isinstance(node, nodes.field_list):
1.36 python.py(1028):     for node in content:
1.36 python.py(1029):         if isinstance(node, nodes.field_list):
1.36 python.py(1028):     for node in content:
1.36 python.py(580):         classes = self.env.ref_context.setdefault('py:classes', [])
1.36 python.py(581):         if self.allow_nesting:
1.36 python.py(582):             try:
1.36 python.py(583):                 classes.pop()
1.36 python.py(586):         self.env.ref_context['py:class'] = (classes[-1] if len(classes) > 0
1.36 python.py(587):                                             else None)
1.36 python.py(586):         self.env.ref_context['py:class'] = (classes[-1] if len(classes) > 0
1.36 python.py(588):         if 'module' in self.options:
1.36 python.py(589):             modules = self.env.ref_context.setdefault('py:modules', [])
1.36 python.py(590):             if modules:
1.36 python.py(591):                 self.env.ref_context['py:module'] = modules.pop()
1.36 python.py(434):         m = py_sig_re.match(sig)
1.36 python.py(435):         if m is None:
1.36 python.py(437):         prefix, name, arglist, retann = m.groups()
1.36 python.py(440):         modname = self.options.get('module', self.env.ref_context.get('py:module'))
1.36 python.py(441):         classname = self.env.ref_context.get('py:class')
1.36 python.py(442):         if classname:
1.36 python.py(457):             add_module = True
1.36 python.py(458):             if prefix:
1.36 python.py(462):                 classname = ''
1.36 python.py(463):                 fullname = name
1.36 python.py(465):         signode['module'] = modname
1.36 python.py(466):         signode['class'] = classname
1.36 python.py(467):         signode['fullname'] = fullname
1.36 python.py(469):         sig_prefix = self.get_signature_prefix(sig)
1.36 python.py(694):         if 'final' in self.options:
1.36 python.py(697):             return '%s ' % self.objtype
1.36 python.py(470):         if sig_prefix:
1.36 python.py(471):             signode += addnodes.desc_annotation(sig_prefix, sig_prefix)
1.36 python.py(473):         if prefix:
1.36 python.py(475):         elif modname and add_module and self.env.config.add_module_names:
1.36 python.py(476):             nodetext = modname + '.'
1.36 python.py(477):             signode += addnodes.desc_addname(nodetext, nodetext)
1.36 python.py(479):         signode += addnodes.desc_name(name, name)
1.36 python.py(480):         if arglist:
1.36 python.py(492):             if self.needs_arglist():
1.36 python.py(423):         return False
1.36 python.py(496):         if retann:
1.36 python.py(500):         anno = self.options.get('annotation')
1.36 python.py(501):         if anno:
1.36 python.py(504):         return fullname, prefix
1.36 python.py(512):         modname = self.options.get('module', self.env.ref_context.get('py:module'))
1.36 python.py(513):         fullname = (modname + '.' if modname else '') + name_cls[0]
1.36 python.py(514):         node_id = make_id(self.env, self.state.document, '', fullname)
1.36 python.py(515):         signode['ids'].append(node_id)
1.36 python.py(519):         if node_id != fullname and fullname not in self.state.document.ids:
1.36 python.py(522):         self.state.document.note_explicit_target(signode)
1.36 python.py(524):         domain = cast(PythonDomain, self.env.get_domain('py'))
1.36 python.py(525):         domain.note_object(fullname, self.objtype, node_id, location=signode)
1.36 python.py(1171):         if name in self.objects:
1.36 python.py(1163):         return self.data.setdefault('objects', {})  # fullname -> ObjectEntry
1.36 python.py(1184):         self.objects[name] = ObjectEntry(self.env.docname, node_id, objtype, aliased)
1.36 python.py(1163):         return self.data.setdefault('objects', {})  # fullname -> ObjectEntry
1.36 python.py(527):         canonical_name = self.options.get('canonical')
1.36 python.py(528):         if canonical_name:
1.36 python.py(532):         if 'noindexentry' not in self.options:
1.36 python.py(533):             indextext = self.get_index_text(modname, name_cls)
1.36 python.py(700):         if self.objtype == 'class':
1.36 python.py(701):             if not modname:
1.36 python.py(703):             return _('%s (class in %s)') % (name_cls[0], modname)
1.36 python.py(534):             if indextext:
1.36 python.py(535):                 self.indexnode['entries'].append(('single', indextext, node_id, '', None))
1.36 python.py(549):         prefix = None
1.36 python.py(550):         if self.names:
1.36 python.py(555):             (fullname, name_prefix) = self.names[-1]
1.36 python.py(556):             if self.allow_nesting:
1.36 python.py(557):                 prefix = fullname
1.36 python.py(560):         if prefix:
1.36 python.py(561):             self.env.ref_context['py:class'] = prefix
1.36 python.py(562):             if self.allow_nesting:
1.36 python.py(563):                 classes = self.env.ref_context.setdefault('py:classes', [])
1.36 python.py(564):                 classes.append(prefix)
1.36 python.py(565):         if 'module' in self.options:
1.36 python.py(566):             modules = self.env.ref_context.setdefault('py:modules', [])
1.36 python.py(567):             modules.append(self.env.ref_context.get('py:module'))
1.36 python.py(568):             self.env.ref_context['py:module'] = self.options['module']
1.36 python.py(1003):         refnode['py:module'] = env.ref_context.get('py:module')
1.36 python.py(1004):         refnode['py:class'] = env.ref_context.get('py:class')
1.36 python.py(1005):         if not has_explicit_title:
1.36 python.py(1006):             title = title.lstrip('.')    # only has a meaning for the target
1.36 python.py(1007):             target = target.lstrip('~')  # only has a meaning for the title
1.36 python.py(1010):             if title[0:1] == '~':
1.36 python.py(1017):         if target[0:1] == '.':
1.36 python.py(1020):         return title, target
1.36 python.py(860):         fullname, prefix = super().handle_signature(sig, signode)
1.36 python.py(434):         m = py_sig_re.match(sig)
1.36 python.py(435):         if m is None:
1.36 python.py(437):         prefix, name, arglist, retann = m.groups()
1.36 python.py(440):         modname = self.options.get('module', self.env.ref_context.get('py:module'))
1.36 python.py(441):         classname = self.env.ref_context.get('py:class')
1.36 python.py(442):         if classname:
1.36 python.py(443):             add_module = False
1.36 python.py(444):             if prefix and (prefix == classname or
1.36 python.py(445):                            prefix.startswith(classname + ".")):
1.36 python.py(444):             if prefix and (prefix == classname or
1.36 python.py(446):                 fullname = prefix + name
1.36 python.py(448):                 prefix = prefix[len(classname):].lstrip('.')
1.36 python.py(465):         signode['module'] = modname
1.36 python.py(466):         signode['class'] = classname
1.36 python.py(467):         signode['fullname'] = fullname
1.36 python.py(469):         sig_prefix = self.get_signature_prefix(sig)
1.36 python.py(869):         prefix = []
1.36 python.py(870):         if 'abstractmethod' in self.options:
1.36 python.py(872):         if 'classmethod' in self.options:
1.36 python.py(875):         prefix.append('property')
1.36 python.py(876):         return ' '.join(prefix) + ' '
1.36 python.py(470):         if sig_prefix:
1.36 python.py(471):             signode += addnodes.desc_annotation(sig_prefix, sig_prefix)
1.36 python.py(473):         if prefix:
1.36 python.py(475):         elif modname and add_module and self.env.config.add_module_names:
1.36 python.py(479):         signode += addnodes.desc_name(name, name)
1.36 python.py(480):         if arglist:
1.36 python.py(492):             if self.needs_arglist():
1.36 python.py(423):         return False
1.36 python.py(496):         if retann:
1.36 python.py(500):         anno = self.options.get('annotation')
1.36 python.py(501):         if anno:
1.36 python.py(504):         return fullname, prefix
1.36 python.py(862):         typ = self.options.get('type')
1.36 python.py(863):         if typ:
1.36 python.py(864):             signode += addnodes.desc_annotation(typ, ': ' + typ)
1.36 python.py(866):         return fullname, prefix
1.36 python.py(512):         modname = self.options.get('module', self.env.ref_context.get('py:module'))
1.36 python.py(513):         fullname = (modname + '.' if modname else '') + name_cls[0]
1.36 python.py(514):         node_id = make_id(self.env, self.state.document, '', fullname)
1.36 python.py(515):         signode['ids'].append(node_id)
1.36 python.py(519):         if node_id != fullname and fullname not in self.state.document.ids:
1.36 python.py(522):         self.state.document.note_explicit_target(signode)
1.36 python.py(524):         domain = cast(PythonDomain, self.env.get_domain('py'))
1.36 python.py(525):         domain.note_object(fullname, self.objtype, node_id, location=signode)
1.36 python.py(1171):         if name in self.objects:
1.36 python.py(1163):         return self.data.setdefault('objects', {})  # fullname -> ObjectEntry
1.36 python.py(1184):         self.objects[name] = ObjectEntry(self.env.docname, node_id, objtype, aliased)
1.36 python.py(1163):         return self.data.setdefault('objects', {})  # fullname -> ObjectEntry
1.36 python.py(527):         canonical_name = self.options.get('canonical')
1.36 python.py(528):         if canonical_name:
1.36 python.py(532):         if 'noindexentry' not in self.options:
1.36 python.py(533):             indextext = self.get_index_text(modname, name_cls)
1.36 python.py(879):         name, cls = name_cls
1.36 python.py(880):         try:
1.36 python.py(881):             clsname, attrname = name.rsplit('.', 1)
1.36 python.py(882):             if modname and self.env.config.add_module_names:
1.36 python.py(883):                 clsname = '.'.join([modname, clsname])
1.36 python.py(890):         return _('%s (%s property)') % (attrname, clsname)
1.36 python.py(534):             if indextext:
1.36 python.py(535):                 self.indexnode['entries'].append(('single', indextext, node_id, '', None))
1.36 python.py(549):         prefix = None
1.36 python.py(550):         if self.names:
1.36 python.py(555):             (fullname, name_prefix) = self.names[-1]
1.36 python.py(556):             if self.allow_nesting:
1.36 python.py(558):             elif name_prefix:
1.36 python.py(560):         if prefix:
1.36 python.py(565):         if 'module' in self.options:
1.36 python.py(566):             modules = self.env.ref_context.setdefault('py:modules', [])
1.36 python.py(567):             modules.append(self.env.ref_context.get('py:module'))
1.36 python.py(568):             self.env.ref_context['py:module'] = self.options['module']
1.36 python.py(1025):     if domain != 'py':
1.36 python.py(1028):     for node in content:
1.36 python.py(1029):         if isinstance(node, nodes.field_list):
1.36 python.py(1028):     for node in content:
1.36 python.py(580):         classes = self.env.ref_context.setdefault('py:classes', [])
1.36 python.py(581):         if self.allow_nesting:
1.36 python.py(586):         self.env.ref_context['py:class'] = (classes[-1] if len(classes) > 0
1.36 python.py(586):         self.env.ref_context['py:class'] = (classes[-1] if len(classes) > 0
1.36 python.py(588):         if 'module' in self.options:
1.36 python.py(589):             modules = self.env.ref_context.setdefault('py:modules', [])
1.36 python.py(590):             if modules:
1.36 python.py(591):                 self.env.ref_context['py:module'] = modules.pop()
1.40 python.py(821):         fullname, prefix = super().handle_signature(sig, signode)
1.40 python.py(434):         m = py_sig_re.match(sig)
1.40 python.py(435):         if m is None:
1.40 python.py(437):         prefix, name, arglist, retann = m.groups()
1.40 python.py(440):         modname = self.options.get('module', self.env.ref_context.get('py:module'))
1.40 python.py(441):         classname = self.env.ref_context.get('py:class')
1.40 python.py(442):         if classname:
1.40 python.py(443):             add_module = False
1.40 python.py(444):             if prefix and (prefix == classname or
1.40 python.py(445):                            prefix.startswith(classname + ".")):
1.40 python.py(444):             if prefix and (prefix == classname or
1.40 python.py(446):                 fullname = prefix + name
1.40 python.py(448):                 prefix = prefix[len(classname):].lstrip('.')
1.40 python.py(465):         signode['module'] = modname
1.40 python.py(466):         signode['class'] = classname
1.40 python.py(467):         signode['fullname'] = fullname
1.40 python.py(469):         sig_prefix = self.get_signature_prefix(sig)
1.40 python.py(417):         return ''
1.40 python.py(470):         if sig_prefix:
1.40 python.py(473):         if prefix:
1.40 python.py(475):         elif modname and add_module and self.env.config.add_module_names:
1.40 python.py(479):         signode += addnodes.desc_name(name, name)
1.40 python.py(480):         if arglist:
1.40 python.py(492):             if self.needs_arglist():
1.40 python.py(423):         return False
1.40 python.py(496):         if retann:
1.40 python.py(500):         anno = self.options.get('annotation')
1.40 python.py(501):         if anno:
1.40 python.py(504):         return fullname, prefix
1.40 python.py(823):         typ = self.options.get('type')
1.40 python.py(824):         if typ:
1.40 python.py(825):             annotations = _parse_annotation(typ, self.env)
1.40 python.py(112):     def unparse(node: ast.AST) -> List[Node]:
1.40 python.py(174):     if env is None:
1.40 python.py(178):     try:
1.40 python.py(179):         tree = ast_parse(annotation)
1.40 python.py(180):         result = unparse(tree)
1.40 python.py(113):         if isinstance(node, ast.Attribute):
1.40 python.py(115):         elif isinstance(node, ast.BinOp):
1.40 python.py(120):         elif isinstance(node, ast.BitOr):
1.40 python.py(122):         elif isinstance(node, ast.Constant):  # type: ignore
1.40 python.py(127):         elif isinstance(node, ast.Expr):
1.40 python.py(129):         elif isinstance(node, ast.Index):
1.40 python.py(131):         elif isinstance(node, ast.List):
1.40 python.py(143):         elif isinstance(node, ast.Module):
1.40 python.py(144):             return sum((unparse(e) for e in node.body), [])
1.40 python.py(144):             return sum((unparse(e) for e in node.body), [])
1.40 python.py(113):         if isinstance(node, ast.Attribute):
1.40 python.py(115):         elif isinstance(node, ast.BinOp):
1.40 python.py(120):         elif isinstance(node, ast.BitOr):
1.40 python.py(122):         elif isinstance(node, ast.Constant):  # type: ignore
1.40 python.py(127):         elif isinstance(node, ast.Expr):
1.40 python.py(128):             return unparse(node.value)
1.40 python.py(113):         if isinstance(node, ast.Attribute):
1.40 python.py(115):         elif isinstance(node, ast.BinOp):
1.40 python.py(120):         elif isinstance(node, ast.BitOr):
1.40 python.py(122):         elif isinstance(node, ast.Constant):  # type: ignore
1.40 python.py(127):         elif isinstance(node, ast.Expr):
1.40 python.py(129):         elif isinstance(node, ast.Index):
1.40 python.py(131):         elif isinstance(node, ast.List):
1.40 python.py(143):         elif isinstance(node, ast.Module):
1.40 python.py(145):         elif isinstance(node, ast.Name):
1.40 python.py(146):             return [nodes.Text(node.id)]
1.40 python.py(144):             return sum((unparse(e) for e in node.body), [])
1.40 python.py(181):         for i, node in enumerate(result):
1.40 python.py(182):             if isinstance(node, nodes.Text) and node.strip():
1.40 python.py(183):                 result[i] = type_to_xref(str(node), env)
1.40 python.py(85):     if text == 'None':
1.40 python.py(88):         reftype = 'class'
1.40 python.py(90):     if env:
1.40 python.py(91):         kwargs = {'py:module': env.ref_context.get('py:module'),
1.40 python.py(92):                   'py:class': env.ref_context.get('py:class')}
1.40 python.py(91):         kwargs = {'py:module': env.ref_context.get('py:module'),
1.40 python.py(96):     if env.config.python_use_unqualified_type_names:
1.40 python.py(104):         contnodes = [nodes.Text(text)]
1.40 python.py(106):     return pending_xref('', *contnodes,
1.40 python.py(107):                         refdomain='py', reftype=reftype, reftarget=text, **kwargs)
1.40 python.py(106):     return pending_xref('', *contnodes,
1.40 python.py(107):                         refdomain='py', reftype=reftype, reftarget=text, **kwargs)
1.40 python.py(106):     return pending_xref('', *contnodes,
1.40 python.py(181):         for i, node in enumerate(result):
1.40 python.py(184):         return result
1.40 python.py(826):             signode += addnodes.desc_annotation(typ, '', nodes.Text(': '), *annotations)
1.40 python.py(828):         value = self.options.get('value')
1.40 python.py(829):         if value:
1.40 python.py(832):         return fullname, prefix
1.40 python.py(512):         modname = self.options.get('module', self.env.ref_context.get('py:module'))
1.40 python.py(513):         fullname = (modname + '.' if modname else '') + name_cls[0]
1.40 python.py(514):         node_id = make_id(self.env, self.state.document, '', fullname)
1.40 python.py(515):         signode['ids'].append(node_id)
1.40 python.py(519):         if node_id != fullname and fullname not in self.state.document.ids:
1.40 python.py(522):         self.state.document.note_explicit_target(signode)
1.40 python.py(524):         domain = cast(PythonDomain, self.env.get_domain('py'))
1.40 python.py(525):         domain.note_object(fullname, self.objtype, node_id, location=signode)
1.40 python.py(1171):         if name in self.objects:
1.40 python.py(1163):         return self.data.setdefault('objects', {})  # fullname -> ObjectEntry
1.40 python.py(1184):         self.objects[name] = ObjectEntry(self.env.docname, node_id, objtype, aliased)
1.40 python.py(1163):         return self.data.setdefault('objects', {})  # fullname -> ObjectEntry
1.40 python.py(527):         canonical_name = self.options.get('canonical')
1.40 python.py(528):         if canonical_name:
1.40 python.py(532):         if 'noindexentry' not in self.options:
1.40 python.py(533):             indextext = self.get_index_text(modname, name_cls)
1.40 python.py(835):         name, cls = name_cls
1.40 python.py(836):         try:
1.40 python.py(837):             clsname, attrname = name.rsplit('.', 1)
1.40 python.py(838):             if modname and self.env.config.add_module_names:
1.40 python.py(839):                 clsname = '.'.join([modname, clsname])
1.40 python.py(846):         return _('%s (%s attribute)') % (attrname, clsname)
1.40 python.py(534):             if indextext:
1.40 python.py(535):                 self.indexnode['entries'].append(('single', indextext, node_id, '', None))
1.40 python.py(549):         prefix = None
1.40 python.py(550):         if self.names:
1.40 python.py(555):             (fullname, name_prefix) = self.names[-1]
1.40 python.py(556):             if self.allow_nesting:
1.40 python.py(558):             elif name_prefix:
1.40 python.py(560):         if prefix:
1.40 python.py(565):         if 'module' in self.options:
1.40 python.py(566):             modules = self.env.ref_context.setdefault('py:modules', [])
1.40 python.py(567):             modules.append(self.env.ref_context.get('py:module'))
1.40 python.py(568):             self.env.ref_context['py:module'] = self.options['module']
1.40 python.py(1025):     if domain != 'py':
1.40 python.py(1028):     for node in content:
1.40 python.py(1029):         if isinstance(node, nodes.field_list):
1.40 python.py(1028):     for node in content:
1.40 python.py(580):         classes = self.env.ref_context.setdefault('py:classes', [])
1.40 python.py(581):         if self.allow_nesting:
1.40 python.py(586):         self.env.ref_context['py:class'] = (classes[-1] if len(classes) > 0
1.40 python.py(586):         self.env.ref_context['py:class'] = (classes[-1] if len(classes) > 0
1.40 python.py(588):         if 'module' in self.options:
1.40 python.py(589):             modules = self.env.ref_context.setdefault('py:modules', [])
1.40 python.py(590):             if modules:
1.40 python.py(591):                 self.env.ref_context['py:module'] = modules.pop()
1.40 python.py(821):         fullname, prefix = super().handle_signature(sig, signode)
1.40 python.py(434):         m = py_sig_re.match(sig)
1.40 python.py(435):         if m is None:
1.40 python.py(437):         prefix, name, arglist, retann = m.groups()
1.40 python.py(440):         modname = self.options.get('module', self.env.ref_context.get('py:module'))
1.40 python.py(441):         classname = self.env.ref_context.get('py:class')
1.40 python.py(442):         if classname:
1.40 python.py(443):             add_module = False
1.40 python.py(444):             if prefix and (prefix == classname or
1.40 python.py(445):                            prefix.startswith(classname + ".")):
1.40 python.py(444):             if prefix and (prefix == classname or
1.40 python.py(446):                 fullname = prefix + name
1.40 python.py(448):                 prefix = prefix[len(classname):].lstrip('.')
1.40 python.py(465):         signode['module'] = modname
1.40 python.py(466):         signode['class'] = classname
1.40 python.py(467):         signode['fullname'] = fullname
1.40 python.py(469):         sig_prefix = self.get_signature_prefix(sig)
1.40 python.py(417):         return ''
1.40 python.py(470):         if sig_prefix:
1.40 python.py(473):         if prefix:
1.40 python.py(475):         elif modname and add_module and self.env.config.add_module_names:
1.40 python.py(479):         signode += addnodes.desc_name(name, name)
1.40 python.py(480):         if arglist:
1.40 python.py(492):             if self.needs_arglist():
1.40 python.py(423):         return False
1.40 python.py(496):         if retann:
1.40 python.py(500):         anno = self.options.get('annotation')
1.40 python.py(501):         if anno:
1.40 python.py(504):         return fullname, prefix
1.40 python.py(823):         typ = self.options.get('type')
1.40 python.py(824):         if typ:
1.40 python.py(825):             annotations = _parse_annotation(typ, self.env)
1.40 python.py(112):     def unparse(node: ast.AST) -> List[Node]:
1.40 python.py(174):     if env is None:
1.40 python.py(178):     try:
1.40 python.py(179):         tree = ast_parse(annotation)
1.40 python.py(180):         result = unparse(tree)
1.40 python.py(113):         if isinstance(node, ast.Attribute):
1.40 python.py(115):         elif isinstance(node, ast.BinOp):
1.40 python.py(120):         elif isinstance(node, ast.BitOr):
1.40 python.py(122):         elif isinstance(node, ast.Constant):  # type: ignore
1.40 python.py(127):         elif isinstance(node, ast.Expr):
1.40 python.py(129):         elif isinstance(node, ast.Index):
1.40 python.py(131):         elif isinstance(node, ast.List):
1.40 python.py(143):         elif isinstance(node, ast.Module):
1.40 python.py(144):             return sum((unparse(e) for e in node.body), [])
1.40 python.py(144):             return sum((unparse(e) for e in node.body), [])
1.40 python.py(113):         if isinstance(node, ast.Attribute):
1.40 python.py(115):         elif isinstance(node, ast.BinOp):
1.40 python.py(120):         elif isinstance(node, ast.BitOr):
1.40 python.py(122):         elif isinstance(node, ast.Constant):  # type: ignore
1.40 python.py(127):         elif isinstance(node, ast.Expr):
1.40 python.py(128):             return unparse(node.value)
1.40 python.py(113):         if isinstance(node, ast.Attribute):
1.40 python.py(114):             return [nodes.Text("%s.%s" % (unparse(node.value)[0], node.attr))]
1.40 python.py(113):         if isinstance(node, ast.Attribute):
1.40 python.py(115):         elif isinstance(node, ast.BinOp):
1.40 python.py(120):         elif isinstance(node, ast.BitOr):
1.40 python.py(122):         elif isinstance(node, ast.Constant):  # type: ignore
1.40 python.py(127):         elif isinstance(node, ast.Expr):
1.40 python.py(129):         elif isinstance(node, ast.Index):
1.40 python.py(131):         elif isinstance(node, ast.List):
1.40 python.py(143):         elif isinstance(node, ast.Module):
1.40 python.py(145):         elif isinstance(node, ast.Name):
1.40 python.py(146):             return [nodes.Text(node.id)]
1.40 python.py(144):             return sum((unparse(e) for e in node.body), [])
1.40 python.py(181):         for i, node in enumerate(result):
1.40 python.py(182):             if isinstance(node, nodes.Text) and node.strip():
1.40 python.py(183):                 result[i] = type_to_xref(str(node), env)
1.40 python.py(85):     if text == 'None':
1.40 python.py(88):         reftype = 'class'
1.40 python.py(90):     if env:
1.40 python.py(91):         kwargs = {'py:module': env.ref_context.get('py:module'),
1.40 python.py(92):                   'py:class': env.ref_context.get('py:class')}
1.40 python.py(91):         kwargs = {'py:module': env.ref_context.get('py:module'),
1.40 python.py(96):     if env.config.python_use_unqualified_type_names:
1.40 python.py(104):         contnodes = [nodes.Text(text)]
1.40 python.py(106):     return pending_xref('', *contnodes,
1.40 python.py(107):                         refdomain='py', reftype=reftype, reftarget=text, **kwargs)
1.40 python.py(106):     return pending_xref('', *contnodes,
1.40 python.py(107):                         refdomain='py', reftype=reftype, reftarget=text, **kwargs)
1.40 python.py(106):     return pending_xref('', *contnodes,
1.40 python.py(181):         for i, node in enumerate(result):
1.40 python.py(184):         return result
1.40 python.py(826):             signode += addnodes.desc_annotation(typ, '', nodes.Text(': '), *annotations)
1.40 python.py(828):         value = self.options.get('value')
1.40 python.py(829):         if value:
1.40 python.py(832):         return fullname, prefix
1.40 python.py(512):         modname = self.options.get('module', self.env.ref_context.get('py:module'))
1.40 python.py(513):         fullname = (modname + '.' if modname else '') + name_cls[0]
1.40 python.py(514):         node_id = make_id(self.env, self.state.document, '', fullname)
1.40 python.py(515):         signode['ids'].append(node_id)
1.40 python.py(519):         if node_id != fullname and fullname not in self.state.document.ids:
1.40 python.py(522):         self.state.document.note_explicit_target(signode)
1.40 python.py(524):         domain = cast(PythonDomain, self.env.get_domain('py'))
1.40 python.py(525):         domain.note_object(fullname, self.objtype, node_id, location=signode)
1.40 python.py(1171):         if name in self.objects:
1.40 python.py(1163):         return self.data.setdefault('objects', {})  # fullname -> ObjectEntry
1.40 python.py(1184):         self.objects[name] = ObjectEntry(self.env.docname, node_id, objtype, aliased)
1.40 python.py(1163):         return self.data.setdefault('objects', {})  # fullname -> ObjectEntry
1.40 python.py(527):         canonical_name = self.options.get('canonical')
1.40 python.py(528):         if canonical_name:
1.40 python.py(532):         if 'noindexentry' not in self.options:
1.40 python.py(533):             indextext = self.get_index_text(modname, name_cls)
1.40 python.py(835):         name, cls = name_cls
1.40 python.py(836):         try:
1.40 python.py(837):             clsname, attrname = name.rsplit('.', 1)
1.40 python.py(838):             if modname and self.env.config.add_module_names:
1.40 python.py(839):                 clsname = '.'.join([modname, clsname])
1.40 python.py(846):         return _('%s (%s attribute)') % (attrname, clsname)
1.40 python.py(534):             if indextext:
1.40 python.py(535):                 self.indexnode['entries'].append(('single', indextext, node_id, '', None))
1.40 python.py(549):         prefix = None
1.40 python.py(550):         if self.names:
1.40 python.py(555):             (fullname, name_prefix) = self.names[-1]
1.40 python.py(556):             if self.allow_nesting:
1.40 python.py(558):             elif name_prefix:
1.40 python.py(560):         if prefix:
1.40 python.py(565):         if 'module' in self.options:
1.40 python.py(566):             modules = self.env.ref_context.setdefault('py:modules', [])
1.40 python.py(567):             modules.append(self.env.ref_context.get('py:module'))
1.40 python.py(568):             self.env.ref_context['py:module'] = self.options['module']
1.41 python.py(1025):     if domain != 'py':
1.41 python.py(1028):     for node in content:
1.41 python.py(1029):         if isinstance(node, nodes.field_list):
1.41 python.py(1028):     for node in content:
1.41 python.py(580):         classes = self.env.ref_context.setdefault('py:classes', [])
1.41 python.py(581):         if self.allow_nesting:
1.41 python.py(586):         self.env.ref_context['py:class'] = (classes[-1] if len(classes) > 0
1.41 python.py(586):         self.env.ref_context['py:class'] = (classes[-1] if len(classes) > 0
1.41 python.py(588):         if 'module' in self.options:
1.41 python.py(589):             modules = self.env.ref_context.setdefault('py:modules', [])
1.41 python.py(590):             if modules:
1.41 python.py(591):                 self.env.ref_context['py:module'] = modules.pop()
1.41 python.py(821):         fullname, prefix = super().handle_signature(sig, signode)
1.41 python.py(434):         m = py_sig_re.match(sig)
1.41 python.py(435):         if m is None:
1.41 python.py(437):         prefix, name, arglist, retann = m.groups()
1.41 python.py(440):         modname = self.options.get('module', self.env.ref_context.get('py:module'))
1.41 python.py(441):         classname = self.env.ref_context.get('py:class')
1.41 python.py(442):         if classname:
1.41 python.py(443):             add_module = False
1.41 python.py(444):             if prefix and (prefix == classname or
1.41 python.py(445):                            prefix.startswith(classname + ".")):
1.41 python.py(444):             if prefix and (prefix == classname or
1.41 python.py(446):                 fullname = prefix + name
1.41 python.py(448):                 prefix = prefix[len(classname):].lstrip('.')
1.41 python.py(465):         signode['module'] = modname
1.41 python.py(466):         signode['class'] = classname
1.41 python.py(467):         signode['fullname'] = fullname
1.41 python.py(469):         sig_prefix = self.get_signature_prefix(sig)
1.41 python.py(417):         return ''
1.41 python.py(470):         if sig_prefix:
1.41 python.py(473):         if prefix:
1.41 python.py(475):         elif modname and add_module and self.env.config.add_module_names:
1.41 python.py(479):         signode += addnodes.desc_name(name, name)
1.41 python.py(480):         if arglist:
1.41 python.py(492):             if self.needs_arglist():
1.41 python.py(423):         return False
1.41 python.py(496):         if retann:
1.41 python.py(500):         anno = self.options.get('annotation')
1.41 python.py(501):         if anno:
1.41 python.py(504):         return fullname, prefix
1.41 python.py(823):         typ = self.options.get('type')
1.41 python.py(824):         if typ:
1.41 python.py(825):             annotations = _parse_annotation(typ, self.env)
1.41 python.py(112):     def unparse(node: ast.AST) -> List[Node]:
1.41 python.py(174):     if env is None:
1.41 python.py(178):     try:
1.41 python.py(179):         tree = ast_parse(annotation)
1.41 python.py(180):         result = unparse(tree)
1.41 python.py(113):         if isinstance(node, ast.Attribute):
1.41 python.py(115):         elif isinstance(node, ast.BinOp):
1.41 python.py(120):         elif isinstance(node, ast.BitOr):
1.41 python.py(122):         elif isinstance(node, ast.Constant):  # type: ignore
1.41 python.py(127):         elif isinstance(node, ast.Expr):
1.41 python.py(129):         elif isinstance(node, ast.Index):
1.41 python.py(131):         elif isinstance(node, ast.List):
1.41 python.py(143):         elif isinstance(node, ast.Module):
1.41 python.py(144):             return sum((unparse(e) for e in node.body), [])
1.41 python.py(144):             return sum((unparse(e) for e in node.body), [])
1.41 python.py(113):         if isinstance(node, ast.Attribute):
1.41 python.py(115):         elif isinstance(node, ast.BinOp):
1.41 python.py(120):         elif isinstance(node, ast.BitOr):
1.41 python.py(122):         elif isinstance(node, ast.Constant):  # type: ignore
1.41 python.py(127):         elif isinstance(node, ast.Expr):
1.41 python.py(128):             return unparse(node.value)
1.41 python.py(113):         if isinstance(node, ast.Attribute):
1.41 python.py(115):         elif isinstance(node, ast.BinOp):
1.41 python.py(120):         elif isinstance(node, ast.BitOr):
1.41 python.py(122):         elif isinstance(node, ast.Constant):  # type: ignore
1.41 python.py(127):         elif isinstance(node, ast.Expr):
1.41 python.py(129):         elif isinstance(node, ast.Index):
1.41 python.py(131):         elif isinstance(node, ast.List):
1.41 python.py(143):         elif isinstance(node, ast.Module):
1.41 python.py(145):         elif isinstance(node, ast.Name):
1.41 python.py(146):             return [nodes.Text(node.id)]
1.41 python.py(144):             return sum((unparse(e) for e in node.body), [])
1.41 python.py(181):         for i, node in enumerate(result):
1.41 python.py(182):             if isinstance(node, nodes.Text) and node.strip():
1.41 python.py(183):                 result[i] = type_to_xref(str(node), env)
1.41 python.py(85):     if text == 'None':
1.41 python.py(88):         reftype = 'class'
1.41 python.py(90):     if env:
1.41 python.py(91):         kwargs = {'py:module': env.ref_context.get('py:module'),
1.41 python.py(92):                   'py:class': env.ref_context.get('py:class')}
1.41 python.py(91):         kwargs = {'py:module': env.ref_context.get('py:module'),
1.41 python.py(96):     if env.config.python_use_unqualified_type_names:
1.41 python.py(104):         contnodes = [nodes.Text(text)]
1.41 python.py(106):     return pending_xref('', *contnodes,
1.41 python.py(107):                         refdomain='py', reftype=reftype, reftarget=text, **kwargs)
1.41 python.py(106):     return pending_xref('', *contnodes,
1.41 python.py(107):                         refdomain='py', reftype=reftype, reftarget=text, **kwargs)
1.41 python.py(106):     return pending_xref('', *contnodes,
1.41 python.py(181):         for i, node in enumerate(result):
1.41 python.py(184):         return result
1.41 python.py(826):             signode += addnodes.desc_annotation(typ, '', nodes.Text(': '), *annotations)
1.41 python.py(828):         value = self.options.get('value')
1.41 python.py(829):         if value:
1.41 python.py(832):         return fullname, prefix
1.41 python.py(512):         modname = self.options.get('module', self.env.ref_context.get('py:module'))
1.41 python.py(513):         fullname = (modname + '.' if modname else '') + name_cls[0]
1.41 python.py(514):         node_id = make_id(self.env, self.state.document, '', fullname)
1.41 python.py(515):         signode['ids'].append(node_id)
1.41 python.py(519):         if node_id != fullname and fullname not in self.state.document.ids:
1.41 python.py(522):         self.state.document.note_explicit_target(signode)
1.41 python.py(524):         domain = cast(PythonDomain, self.env.get_domain('py'))
1.41 python.py(525):         domain.note_object(fullname, self.objtype, node_id, location=signode)
1.41 python.py(1171):         if name in self.objects:
1.41 python.py(1163):         return self.data.setdefault('objects', {})  # fullname -> ObjectEntry
1.41 python.py(1184):         self.objects[name] = ObjectEntry(self.env.docname, node_id, objtype, aliased)
1.41 python.py(1163):         return self.data.setdefault('objects', {})  # fullname -> ObjectEntry
1.41 python.py(527):         canonical_name = self.options.get('canonical')
1.41 python.py(528):         if canonical_name:
1.41 python.py(532):         if 'noindexentry' not in self.options:
1.41 python.py(533):             indextext = self.get_index_text(modname, name_cls)
1.41 python.py(835):         name, cls = name_cls
1.41 python.py(836):         try:
1.41 python.py(837):             clsname, attrname = name.rsplit('.', 1)
1.41 python.py(838):             if modname and self.env.config.add_module_names:
1.41 python.py(839):                 clsname = '.'.join([modname, clsname])
1.41 python.py(846):         return _('%s (%s attribute)') % (attrname, clsname)
1.41 python.py(534):             if indextext:
1.41 python.py(535):                 self.indexnode['entries'].append(('single', indextext, node_id, '', None))
1.41 python.py(549):         prefix = None
1.41 python.py(550):         if self.names:
1.41 python.py(555):             (fullname, name_prefix) = self.names[-1]
1.41 python.py(556):             if self.allow_nesting:
1.41 python.py(558):             elif name_prefix:
1.41 python.py(560):         if prefix:
1.41 python.py(565):         if 'module' in self.options:
1.41 python.py(566):             modules = self.env.ref_context.setdefault('py:modules', [])
1.41 python.py(567):             modules.append(self.env.ref_context.get('py:module'))
1.41 python.py(568):             self.env.ref_context['py:module'] = self.options['module']
1.41 python.py(1025):     if domain != 'py':
1.41 python.py(1028):     for node in content:
1.41 python.py(1029):         if isinstance(node, nodes.field_list):
1.41 python.py(1028):     for node in content:
1.41 python.py(580):         classes = self.env.ref_context.setdefault('py:classes', [])
1.41 python.py(581):         if self.allow_nesting:
1.41 python.py(586):         self.env.ref_context['py:class'] = (classes[-1] if len(classes) > 0
1.41 python.py(586):         self.env.ref_context['py:class'] = (classes[-1] if len(classes) > 0
1.41 python.py(588):         if 'module' in self.options:
1.41 python.py(589):             modules = self.env.ref_context.setdefault('py:modules', [])
1.41 python.py(590):             if modules:
1.41 python.py(591):                 self.env.ref_context['py:module'] = modules.pop()
1.41 python.py(1025):     if domain != 'py':
1.41 python.py(1028):     for node in content:
1.41 python.py(1029):         if isinstance(node, nodes.field_list):
1.41 python.py(1028):     for node in content:
1.41 python.py(1029):         if isinstance(node, nodes.field_list):
1.41 python.py(1028):     for node in content:
1.41 python.py(1029):         if isinstance(node, nodes.field_list):
1.41 python.py(1028):     for node in content:
1.41 python.py(1029):         if isinstance(node, nodes.field_list):
1.41 python.py(1028):     for node in content:
1.41 python.py(1029):         if isinstance(node, nodes.field_list):
1.41 python.py(1028):     for node in content:
1.41 python.py(1029):         if isinstance(node, nodes.field_list):
1.41 python.py(1028):     for node in content:
1.41 python.py(1029):         if isinstance(node, nodes.field_list):
1.41 python.py(1028):     for node in content:
1.41 python.py(1029):         if isinstance(node, nodes.field_list):
1.41 python.py(1028):     for node in content:
1.41 python.py(1029):         if isinstance(node, nodes.field_list):
1.41 python.py(1028):     for node in content:
1.41 python.py(1029):         if isinstance(node, nodes.field_list):
1.41 python.py(1028):     for node in content:
1.41 python.py(580):         classes = self.env.ref_context.setdefault('py:classes', [])
1.41 python.py(581):         if self.allow_nesting:
1.41 python.py(582):             try:
1.41 python.py(583):                 classes.pop()
1.41 python.py(586):         self.env.ref_context['py:class'] = (classes[-1] if len(classes) > 0
1.41 python.py(587):                                             else None)
1.41 python.py(586):         self.env.ref_context['py:class'] = (classes[-1] if len(classes) > 0
1.41 python.py(588):         if 'module' in self.options:
1.41 python.py(589):             modules = self.env.ref_context.setdefault('py:modules', [])
1.41 python.py(590):             if modules:
1.41 python.py(591):                 self.env.ref_context['py:module'] = modules.pop()

[01mlooking for now-outdated files... [39;49;00mnone found
[01mpickling environment... [39;49;00mdone
[01mchecking consistency... [39;49;00mdone
[01mpreparing documents... [39;49;00m1.44 python.py(1049):         content: Dict[str, List[IndexEntry]] = {}
1.44 python.py(1051):         ignores: List[str] = self.domain.env.config['modindex_common_prefix']
1.44 python.py(1052):         ignores = sorted(ignores, key=len, reverse=True)
1.44 python.py(1054):         modules = sorted(self.domain.data['modules'].items(),
1.44 python.py(1055):                          key=lambda x: x[0].lower())
1.44 python.py(1054):         modules = sorted(self.domain.data['modules'].items(),
1.44 python.py(1055):                          key=lambda x: x[0].lower())
1.44 python.py(1057):         prev_modname = ''
1.44 python.py(1058):         num_toplevels = 0
1.44 python.py(1059):         for modname, (docname, node_id, synopsis, platforms, deprecated) in modules:
1.44 python.py(1060):             if docnames and docname not in docnames:
1.44 python.py(1063):             for ignore in ignores:
1.44 python.py(1069):                 stripped = ''
1.44 python.py(1072):             if not modname:
1.44 python.py(1075):             entries = content.setdefault(modname[0].lower(), [])
1.44 python.py(1077):             package = modname.split('.')[0]
1.44 python.py(1078):             if package != modname:
1.44 python.py(1091):                 num_toplevels += 1
1.44 python.py(1092):                 subtype = 0
1.44 python.py(1094):             qualifier = _('Deprecated') if deprecated else ''
1.44 python.py(1095):             entries.append(IndexEntry(stripped + modname, subtype, docname,
1.44 python.py(1096):                                       node_id, platforms, qualifier, synopsis))
1.44 python.py(1095):             entries.append(IndexEntry(stripped + modname, subtype, docname,
1.44 python.py(1097):             prev_modname = modname
1.44 python.py(1059):         for modname, (docname, node_id, synopsis, platforms, deprecated) in modules:
1.44 python.py(1102):         collapse = len(modules) - num_toplevels < num_toplevels
1.44 python.py(1105):         sorted_content = sorted(content.items())
1.44 python.py(1107):         return sorted_content, collapse
done
[01mwriting output... [39;49;00m[100%] [32mindex[39;49;00m                                                 1.44 python.py(1275):         modname = node.get('py:module')
1.44 python.py(1276):         clsname = node.get('py:class')
1.44 python.py(1277):         searchmode = 1 if node.hasattr('refspecific') else 0
1.44 python.py(1278):         matches = self.find_obj(env, modname, clsname, target,
1.44 python.py(1279):                                 type, searchmode)
1.44 python.py(1278):         matches = self.find_obj(env, modname, clsname, target,
1.44 python.py(1223):         if name[-2:] == '()':
1.44 python.py(1226):         if not name:
1.44 python.py(1229):         matches: List[Tuple[str, ObjectEntry]] = []
1.44 python.py(1231):         newname = None
1.44 python.py(1232):         if searchmode == 1:
1.44 python.py(1256):             if name in self.objects:
1.44 python.py(1163):         return self.data.setdefault('objects', {})  # fullname -> ObjectEntry
1.44 python.py(1258):             elif type == 'mod':
1.44 python.py(1261):             elif classname and classname + '.' + name in self.objects:
1.44 python.py(1163):         return self.data.setdefault('objects', {})  # fullname -> ObjectEntry
1.44 python.py(1263):             elif modname and modname + '.' + name in self.objects:
1.44 python.py(1163):         return self.data.setdefault('objects', {})  # fullname -> ObjectEntry
1.44 python.py(1265):             elif modname and classname and \
1.44 python.py(1266):                     modname + '.' + classname + '.' + name in self.objects:
1.44 python.py(1163):         return self.data.setdefault('objects', {})  # fullname -> ObjectEntry
1.44 python.py(1265):             elif modname and classname and \
1.44 python.py(1268):         if newname is not None:
1.44 python.py(1270):         return matches
1.44 python.py(1281):         if not matches and type == 'attr':
1.44 python.py(1286):         if not matches and type == 'meth':
1.44 python.py(1294):         if not matches:
1.44 python.py(1295):             return None
1.44 python.py(1385):     def istyping(s: str) -> bool:
1.44 python.py(1391):     if node.get('refdomain') != 'py':
1.44 python.py(1393):     elif node.get('reftype') in ('class', 'obj') and node.get('reftarget') == 'None':
1.44 python.py(1395):     elif node.get('reftype') in ('class', 'exc'):
1.44 python.py(1396):         reftarget = node.get('reftarget')
1.44 python.py(1397):         if inspect.isclass(getattr(builtins, reftarget, None)):
1.44 python.py(1399):             return contnode
1.44 python.py(1275):         modname = node.get('py:module')
1.44 python.py(1276):         clsname = node.get('py:class')
1.44 python.py(1277):         searchmode = 1 if node.hasattr('refspecific') else 0
1.44 python.py(1278):         matches = self.find_obj(env, modname, clsname, target,
1.44 python.py(1279):                                 type, searchmode)
1.44 python.py(1278):         matches = self.find_obj(env, modname, clsname, target,
1.44 python.py(1223):         if name[-2:] == '()':
1.44 python.py(1226):         if not name:
1.44 python.py(1229):         matches: List[Tuple[str, ObjectEntry]] = []
1.44 python.py(1231):         newname = None
1.44 python.py(1232):         if searchmode == 1:
1.44 python.py(1256):             if name in self.objects:
1.44 python.py(1163):         return self.data.setdefault('objects', {})  # fullname -> ObjectEntry
1.44 python.py(1258):             elif type == 'mod':
1.44 python.py(1261):             elif classname and classname + '.' + name in self.objects:
1.44 python.py(1163):         return self.data.setdefault('objects', {})  # fullname -> ObjectEntry
1.44 python.py(1263):             elif modname and modname + '.' + name in self.objects:
1.44 python.py(1163):         return self.data.setdefault('objects', {})  # fullname -> ObjectEntry
1.44 python.py(1265):             elif modname and classname and \
1.44 python.py(1266):                     modname + '.' + classname + '.' + name in self.objects:
1.44 python.py(1163):         return self.data.setdefault('objects', {})  # fullname -> ObjectEntry
1.44 python.py(1265):             elif modname and classname and \
1.44 python.py(1268):         if newname is not None:
1.44 python.py(1270):         return matches
1.44 python.py(1281):         if not matches and type == 'attr':
1.44 python.py(1286):         if not matches and type == 'meth':
1.44 python.py(1294):         if not matches:
1.44 python.py(1295):             return None
1.44 python.py(1385):     def istyping(s: str) -> bool:
1.44 python.py(1391):     if node.get('refdomain') != 'py':
1.44 python.py(1393):     elif node.get('reftype') in ('class', 'obj') and node.get('reftarget') == 'None':
1.44 python.py(1395):     elif node.get('reftype') in ('class', 'exc'):
1.44 python.py(1396):         reftarget = node.get('reftarget')
1.44 python.py(1397):         if inspect.isclass(getattr(builtins, reftarget, None)):
1.44 python.py(1399):             return contnode
1.44 python.py(1275):         modname = node.get('py:module')
1.44 python.py(1276):         clsname = node.get('py:class')
1.44 python.py(1277):         searchmode = 1 if node.hasattr('refspecific') else 0
1.44 python.py(1278):         matches = self.find_obj(env, modname, clsname, target,
1.44 python.py(1279):                                 type, searchmode)
1.44 python.py(1278):         matches = self.find_obj(env, modname, clsname, target,
1.44 python.py(1223):         if name[-2:] == '()':
1.44 python.py(1226):         if not name:
1.44 python.py(1229):         matches: List[Tuple[str, ObjectEntry]] = []
1.44 python.py(1231):         newname = None
1.44 python.py(1232):         if searchmode == 1:
1.44 python.py(1256):             if name in self.objects:
1.44 python.py(1163):         return self.data.setdefault('objects', {})  # fullname -> ObjectEntry
1.44 python.py(1258):             elif type == 'mod':
1.44 python.py(1261):             elif classname and classname + '.' + name in self.objects:
1.44 python.py(1163):         return self.data.setdefault('objects', {})  # fullname -> ObjectEntry
1.44 python.py(1263):             elif modname and modname + '.' + name in self.objects:
1.44 python.py(1163):         return self.data.setdefault('objects', {})  # fullname -> ObjectEntry
1.44 python.py(1265):             elif modname and classname and \
1.44 python.py(1266):                     modname + '.' + classname + '.' + name in self.objects:
1.44 python.py(1163):         return self.data.setdefault('objects', {})  # fullname -> ObjectEntry
1.44 python.py(1265):             elif modname and classname and \
1.44 python.py(1268):         if newname is not None:
1.44 python.py(1270):         return matches
1.44 python.py(1281):         if not matches and type == 'attr':
1.44 python.py(1286):         if not matches and type == 'meth':
1.44 python.py(1294):         if not matches:
1.44 python.py(1295):             return None
1.44 python.py(1385):     def istyping(s: str) -> bool:
1.44 python.py(1391):     if node.get('refdomain') != 'py':
1.44 python.py(1393):     elif node.get('reftype') in ('class', 'obj') and node.get('reftarget') == 'None':
1.44 python.py(1395):     elif node.get('reftype') in ('class', 'exc'):
1.44 python.py(1396):         reftarget = node.get('reftarget')
1.44 python.py(1397):         if inspect.isclass(getattr(builtins, reftarget, None)):
1.44 python.py(1399):             return contnode
1.44 python.py(1275):         modname = node.get('py:module')
1.44 python.py(1276):         clsname = node.get('py:class')
1.44 python.py(1277):         searchmode = 1 if node.hasattr('refspecific') else 0
1.44 python.py(1278):         matches = self.find_obj(env, modname, clsname, target,
1.44 python.py(1279):                                 type, searchmode)
1.44 python.py(1278):         matches = self.find_obj(env, modname, clsname, target,
1.44 python.py(1223):         if name[-2:] == '()':
1.44 python.py(1226):         if not name:
1.44 python.py(1229):         matches: List[Tuple[str, ObjectEntry]] = []
1.44 python.py(1231):         newname = None
1.44 python.py(1232):         if searchmode == 1:
1.44 python.py(1256):             if name in self.objects:
1.44 python.py(1163):         return self.data.setdefault('objects', {})  # fullname -> ObjectEntry
1.44 python.py(1258):             elif type == 'mod':
1.44 python.py(1261):             elif classname and classname + '.' + name in self.objects:
1.44 python.py(1163):         return self.data.setdefault('objects', {})  # fullname -> ObjectEntry
1.44 python.py(1263):             elif modname and modname + '.' + name in self.objects:
1.44 python.py(1163):         return self.data.setdefault('objects', {})  # fullname -> ObjectEntry
1.44 python.py(1265):             elif modname and classname and \
1.44 python.py(1266):                     modname + '.' + classname + '.' + name in self.objects:
1.44 python.py(1163):         return self.data.setdefault('objects', {})  # fullname -> ObjectEntry
1.44 python.py(1265):             elif modname and classname and \
1.44 python.py(1268):         if newname is not None:
1.44 python.py(1270):         return matches
1.44 python.py(1281):         if not matches and type == 'attr':
1.44 python.py(1286):         if not matches and type == 'meth':
1.44 python.py(1294):         if not matches:
1.44 python.py(1295):             return None
1.44 python.py(1385):     def istyping(s: str) -> bool:
1.44 python.py(1391):     if node.get('refdomain') != 'py':
1.44 python.py(1393):     elif node.get('reftype') in ('class', 'obj') and node.get('reftarget') == 'None':
1.44 python.py(1395):     elif node.get('reftype') in ('class', 'exc'):
1.44 python.py(1396):         reftarget = node.get('reftarget')
1.44 python.py(1397):         if inspect.isclass(getattr(builtins, reftarget, None)):
1.44 python.py(1399):             return contnode
1.44 python.py(1275):         modname = node.get('py:module')
1.44 python.py(1276):         clsname = node.get('py:class')
1.44 python.py(1277):         searchmode = 1 if node.hasattr('refspecific') else 0
1.44 python.py(1278):         matches = self.find_obj(env, modname, clsname, target,
1.44 python.py(1279):                                 type, searchmode)
1.44 python.py(1278):         matches = self.find_obj(env, modname, clsname, target,
1.44 python.py(1223):         if name[-2:] == '()':
1.44 python.py(1226):         if not name:
1.44 python.py(1229):         matches: List[Tuple[str, ObjectEntry]] = []
1.44 python.py(1231):         newname = None
1.44 python.py(1232):         if searchmode == 1:
1.44 python.py(1256):             if name in self.objects:
1.44 python.py(1163):         return self.data.setdefault('objects', {})  # fullname -> ObjectEntry
1.44 python.py(1258):             elif type == 'mod':
1.44 python.py(1261):             elif classname and classname + '.' + name in self.objects:
1.44 python.py(1163):         return self.data.setdefault('objects', {})  # fullname -> ObjectEntry
1.44 python.py(1263):             elif modname and modname + '.' + name in self.objects:
1.44 python.py(1163):         return self.data.setdefault('objects', {})  # fullname -> ObjectEntry
1.44 python.py(1265):             elif modname and classname and \
1.44 python.py(1266):                     modname + '.' + classname + '.' + name in self.objects:
1.44 python.py(1163):         return self.data.setdefault('objects', {})  # fullname -> ObjectEntry
1.44 python.py(1265):             elif modname and classname and \
1.44 python.py(1268):         if newname is not None:
1.44 python.py(1270):         return matches
1.44 python.py(1281):         if not matches and type == 'attr':
1.44 python.py(1286):         if not matches and type == 'meth':
1.44 python.py(1294):         if not matches:
1.44 python.py(1295):             return None
1.44 python.py(1385):     def istyping(s: str) -> bool:
1.44 python.py(1391):     if node.get('refdomain') != 'py':
1.44 python.py(1393):     elif node.get('reftype') in ('class', 'obj') and node.get('reftarget') == 'None':
1.44 python.py(1395):     elif node.get('reftype') in ('class', 'exc'):
1.44 python.py(1396):         reftarget = node.get('reftarget')
1.44 python.py(1397):         if inspect.isclass(getattr(builtins, reftarget, None)):
1.44 python.py(1399):             return contnode
1.44 python.py(1275):         modname = node.get('py:module')
1.44 python.py(1276):         clsname = node.get('py:class')
1.44 python.py(1277):         searchmode = 1 if node.hasattr('refspecific') else 0
1.44 python.py(1278):         matches = self.find_obj(env, modname, clsname, target,
1.44 python.py(1279):                                 type, searchmode)
1.44 python.py(1278):         matches = self.find_obj(env, modname, clsname, target,
1.44 python.py(1223):         if name[-2:] == '()':
1.44 python.py(1226):         if not name:
1.44 python.py(1229):         matches: List[Tuple[str, ObjectEntry]] = []
1.44 python.py(1231):         newname = None
1.44 python.py(1232):         if searchmode == 1:
1.44 python.py(1256):             if name in self.objects:
1.44 python.py(1163):         return self.data.setdefault('objects', {})  # fullname -> ObjectEntry
1.44 python.py(1257):                 newname = name
1.44 python.py(1268):         if newname is not None:
1.44 python.py(1269):             matches.append((newname, self.objects[newname]))
1.44 python.py(1163):         return self.data.setdefault('objects', {})  # fullname -> ObjectEntry
1.44 python.py(1270):         return matches
1.44 python.py(1281):         if not matches and type == 'attr':
1.44 python.py(1286):         if not matches and type == 'meth':
1.44 python.py(1294):         if not matches:
1.44 python.py(1296):         elif len(matches) > 1:
1.44 python.py(1304):         name, obj = matches[0]
1.44 python.py(1306):         if obj[2] == 'module':
1.44 python.py(1310):             content = find_pending_xref_condition(node, 'resolved')
1.44 python.py(1311):             if content:
1.44 python.py(1315):                 children = [contnode]
1.44 python.py(1317):             return make_refnode(builder, fromdocname, obj[0], obj[1], children, name)
1.44 python.py(1275):         modname = node.get('py:module')
1.44 python.py(1276):         clsname = node.get('py:class')
1.44 python.py(1277):         searchmode = 1 if node.hasattr('refspecific') else 0
1.44 python.py(1278):         matches = self.find_obj(env, modname, clsname, target,
1.44 python.py(1279):                                 type, searchmode)
1.44 python.py(1278):         matches = self.find_obj(env, modname, clsname, target,
1.44 python.py(1223):         if name[-2:] == '()':
1.44 python.py(1226):         if not name:
1.44 python.py(1229):         matches: List[Tuple[str, ObjectEntry]] = []
1.44 python.py(1231):         newname = None
1.44 python.py(1232):         if searchmode == 1:
1.44 python.py(1256):             if name in self.objects:
1.44 python.py(1163):         return self.data.setdefault('objects', {})  # fullname -> ObjectEntry
1.44 python.py(1258):             elif type == 'mod':
1.44 python.py(1261):             elif classname and classname + '.' + name in self.objects:
1.44 python.py(1163):         return self.data.setdefault('objects', {})  # fullname -> ObjectEntry
1.44 python.py(1263):             elif modname and modname + '.' + name in self.objects:
1.44 python.py(1163):         return self.data.setdefault('objects', {})  # fullname -> ObjectEntry
1.44 python.py(1265):             elif modname and classname and \
1.44 python.py(1266):                     modname + '.' + classname + '.' + name in self.objects:
1.44 python.py(1163):         return self.data.setdefault('objects', {})  # fullname -> ObjectEntry
1.44 python.py(1265):             elif modname and classname and \
1.44 python.py(1268):         if newname is not None:
1.44 python.py(1270):         return matches
1.44 python.py(1281):         if not matches and type == 'attr':
1.44 python.py(1286):         if not matches and type == 'meth':
1.44 python.py(1294):         if not matches:
1.44 python.py(1295):             return None
1.44 python.py(1385):     def istyping(s: str) -> bool:
1.44 python.py(1391):     if node.get('refdomain') != 'py':
1.44 python.py(1393):     elif node.get('reftype') in ('class', 'obj') and node.get('reftarget') == 'None':
1.45 python.py(1395):     elif node.get('reftype') in ('class', 'exc'):
1.45 python.py(1396):         reftarget = node.get('reftarget')
1.45 python.py(1397):         if inspect.isclass(getattr(builtins, reftarget, None)):
1.45 python.py(1399):             return contnode
1.45 python.py(1275):         modname = node.get('py:module')
1.45 python.py(1276):         clsname = node.get('py:class')
1.45 python.py(1277):         searchmode = 1 if node.hasattr('refspecific') else 0
1.45 python.py(1278):         matches = self.find_obj(env, modname, clsname, target,
1.45 python.py(1279):                                 type, searchmode)
1.45 python.py(1278):         matches = self.find_obj(env, modname, clsname, target,
1.45 python.py(1223):         if name[-2:] == '()':
1.45 python.py(1226):         if not name:
1.45 python.py(1229):         matches: List[Tuple[str, ObjectEntry]] = []
1.45 python.py(1231):         newname = None
1.45 python.py(1232):         if searchmode == 1:
1.45 python.py(1256):             if name in self.objects:
1.45 python.py(1163):         return self.data.setdefault('objects', {})  # fullname -> ObjectEntry
1.45 python.py(1258):             elif type == 'mod':
1.45 python.py(1261):             elif classname and classname + '.' + name in self.objects:
1.45 python.py(1163):         return self.data.setdefault('objects', {})  # fullname -> ObjectEntry
1.45 python.py(1263):             elif modname and modname + '.' + name in self.objects:
1.45 python.py(1163):         return self.data.setdefault('objects', {})  # fullname -> ObjectEntry
1.45 python.py(1265):             elif modname and classname and \
1.45 python.py(1266):                     modname + '.' + classname + '.' + name in self.objects:
1.45 python.py(1163):         return self.data.setdefault('objects', {})  # fullname -> ObjectEntry
1.45 python.py(1265):             elif modname and classname and \
1.45 python.py(1268):         if newname is not None:
1.45 python.py(1270):         return matches
1.45 python.py(1281):         if not matches and type == 'attr':
1.45 python.py(1286):         if not matches and type == 'meth':
1.45 python.py(1294):         if not matches:
1.45 python.py(1295):             return None
1.45 python.py(1385):     def istyping(s: str) -> bool:
1.45 python.py(1391):     if node.get('refdomain') != 'py':
1.45 python.py(1393):     elif node.get('reftype') in ('class', 'obj') and node.get('reftarget') == 'None':
1.45 python.py(1395):     elif node.get('reftype') in ('class', 'exc'):
1.45 python.py(1396):         reftarget = node.get('reftarget')
1.45 python.py(1397):         if inspect.isclass(getattr(builtins, reftarget, None)):
1.45 python.py(1399):             return contnode
1.45 python.py(1275):         modname = node.get('py:module')
1.45 python.py(1276):         clsname = node.get('py:class')
1.45 python.py(1277):         searchmode = 1 if node.hasattr('refspecific') else 0
1.45 python.py(1278):         matches = self.find_obj(env, modname, clsname, target,
1.45 python.py(1279):                                 type, searchmode)
1.45 python.py(1278):         matches = self.find_obj(env, modname, clsname, target,
1.45 python.py(1223):         if name[-2:] == '()':
1.45 python.py(1226):         if not name:
1.45 python.py(1229):         matches: List[Tuple[str, ObjectEntry]] = []
1.45 python.py(1231):         newname = None
1.45 python.py(1232):         if searchmode == 1:
1.45 python.py(1256):             if name in self.objects:
1.45 python.py(1163):         return self.data.setdefault('objects', {})  # fullname -> ObjectEntry
1.45 python.py(1258):             elif type == 'mod':
1.45 python.py(1261):             elif classname and classname + '.' + name in self.objects:
1.45 python.py(1163):         return self.data.setdefault('objects', {})  # fullname -> ObjectEntry
1.45 python.py(1263):             elif modname and modname + '.' + name in self.objects:
1.45 python.py(1163):         return self.data.setdefault('objects', {})  # fullname -> ObjectEntry
1.45 python.py(1265):             elif modname and classname and \
1.45 python.py(1266):                     modname + '.' + classname + '.' + name in self.objects:
1.45 python.py(1163):         return self.data.setdefault('objects', {})  # fullname -> ObjectEntry
1.45 python.py(1265):             elif modname and classname and \
1.45 python.py(1268):         if newname is not None:
1.45 python.py(1270):         return matches
1.45 python.py(1281):         if not matches and type == 'attr':
1.45 python.py(1286):         if not matches and type == 'meth':
1.45 python.py(1294):         if not matches:
1.45 python.py(1295):             return None
1.45 python.py(1385):     def istyping(s: str) -> bool:
1.45 python.py(1391):     if node.get('refdomain') != 'py':
1.45 python.py(1393):     elif node.get('reftype') in ('class', 'obj') and node.get('reftarget') == 'None':
1.45 python.py(1395):     elif node.get('reftype') in ('class', 'exc'):
1.45 python.py(1396):         reftarget = node.get('reftarget')
1.45 python.py(1397):         if inspect.isclass(getattr(builtins, reftarget, None)):
1.45 python.py(1399):             return contnode
1.45 python.py(1275):         modname = node.get('py:module')
1.45 python.py(1276):         clsname = node.get('py:class')
1.45 python.py(1277):         searchmode = 1 if node.hasattr('refspecific') else 0
1.45 python.py(1278):         matches = self.find_obj(env, modname, clsname, target,
1.45 python.py(1279):                                 type, searchmode)
1.45 python.py(1278):         matches = self.find_obj(env, modname, clsname, target,
1.45 python.py(1223):         if name[-2:] == '()':
1.45 python.py(1226):         if not name:
1.45 python.py(1229):         matches: List[Tuple[str, ObjectEntry]] = []
1.45 python.py(1231):         newname = None
1.45 python.py(1232):         if searchmode == 1:
1.45 python.py(1256):             if name in self.objects:
1.45 python.py(1163):         return self.data.setdefault('objects', {})  # fullname -> ObjectEntry
1.45 python.py(1257):                 newname = name
1.45 python.py(1268):         if newname is not None:
1.45 python.py(1269):             matches.append((newname, self.objects[newname]))
1.45 python.py(1163):         return self.data.setdefault('objects', {})  # fullname -> ObjectEntry
1.45 python.py(1270):         return matches
1.45 python.py(1281):         if not matches and type == 'attr':
1.45 python.py(1286):         if not matches and type == 'meth':
1.45 python.py(1294):         if not matches:
1.45 python.py(1296):         elif len(matches) > 1:
1.45 python.py(1304):         name, obj = matches[0]
1.45 python.py(1306):         if obj[2] == 'module':
1.45 python.py(1310):             content = find_pending_xref_condition(node, 'resolved')
1.45 python.py(1311):             if content:
1.45 python.py(1315):                 children = [contnode]
1.45 python.py(1317):             return make_refnode(builder, fromdocname, obj[0], obj[1], children, name)
1.45 python.py(1275):         modname = node.get('py:module')
1.45 python.py(1276):         clsname = node.get('py:class')
1.45 python.py(1277):         searchmode = 1 if node.hasattr('refspecific') else 0
1.45 python.py(1278):         matches = self.find_obj(env, modname, clsname, target,
1.45 python.py(1279):                                 type, searchmode)
1.45 python.py(1278):         matches = self.find_obj(env, modname, clsname, target,
1.45 python.py(1223):         if name[-2:] == '()':
1.45 python.py(1226):         if not name:
1.45 python.py(1229):         matches: List[Tuple[str, ObjectEntry]] = []
1.45 python.py(1231):         newname = None
1.45 python.py(1232):         if searchmode == 1:
1.45 python.py(1256):             if name in self.objects:
1.45 python.py(1163):         return self.data.setdefault('objects', {})  # fullname -> ObjectEntry
1.45 python.py(1258):             elif type == 'mod':
1.45 python.py(1261):             elif classname and classname + '.' + name in self.objects:
1.45 python.py(1163):         return self.data.setdefault('objects', {})  # fullname -> ObjectEntry
1.45 python.py(1263):             elif modname and modname + '.' + name in self.objects:
1.45 python.py(1163):         return self.data.setdefault('objects', {})  # fullname -> ObjectEntry
1.45 python.py(1265):             elif modname and classname and \
1.45 python.py(1266):                     modname + '.' + classname + '.' + name in self.objects:
1.45 python.py(1163):         return self.data.setdefault('objects', {})  # fullname -> ObjectEntry
1.45 python.py(1265):             elif modname and classname and \
1.45 python.py(1268):         if newname is not None:
1.45 python.py(1270):         return matches
1.45 python.py(1281):         if not matches and type == 'attr':
1.45 python.py(1286):         if not matches and type == 'meth':
1.45 python.py(1294):         if not matches:
1.45 python.py(1295):             return None
1.45 python.py(1385):     def istyping(s: str) -> bool:
1.45 python.py(1391):     if node.get('refdomain') != 'py':
1.45 python.py(1393):     elif node.get('reftype') in ('class', 'obj') and node.get('reftarget') == 'None':
1.45 python.py(1395):     elif node.get('reftype') in ('class', 'exc'):
1.45 python.py(1396):         reftarget = node.get('reftarget')
1.45 python.py(1397):         if inspect.isclass(getattr(builtins, reftarget, None)):
1.45 python.py(1399):             return contnode

[01mgenerating indices... [39;49;00mgenindex py-modindex done
[01mwriting additional pages... [39;49;00msearch done
[01mcopying static files... [39;49;00mdone
[01mcopying extra files... [39;49;00mdone
[01mdumping search index in English (code: en)... [39;49;00m1.72 python.py(1362):         for modname, mod in self.modules.items():
1.72 python.py(1188):         return self.data.setdefault('modules', {})  # modname -> ModuleEntry
1.72 python.py(1363):             yield (modname, modname, 'module', mod.docname, mod.node_id, 0)
1.72 python.py(1362):         for modname, mod in self.modules.items():
1.72 python.py(1364):         for refname, obj in self.objects.items():
1.72 python.py(1163):         return self.data.setdefault('objects', {})  # fullname -> ObjectEntry
1.72 python.py(1365):             if obj.objtype != 'module':  # modules are already handled
1.72 python.py(1364):         for refname, obj in self.objects.items():
1.72 python.py(1365):             if obj.objtype != 'module':  # modules are already handled
1.72 python.py(1366):                 if obj.aliased:
1.72 python.py(1370):                     yield (refname, refname, obj.objtype, obj.docname, obj.node_id, 1)
1.72 python.py(1364):         for refname, obj in self.objects.items():
1.72 python.py(1365):             if obj.objtype != 'module':  # modules are already handled
1.72 python.py(1366):                 if obj.aliased:
1.72 python.py(1370):                     yield (refname, refname, obj.objtype, obj.docname, obj.node_id, 1)
1.72 python.py(1364):         for refname, obj in self.objects.items():
1.72 python.py(1365):             if obj.objtype != 'module':  # modules are already handled
1.72 python.py(1366):                 if obj.aliased:
1.72 python.py(1370):                     yield (refname, refname, obj.objtype, obj.docname, obj.node_id, 1)
1.72 python.py(1364):         for refname, obj in self.objects.items():
1.72 python.py(1365):             if obj.objtype != 'module':  # modules are already handled
1.72 python.py(1366):                 if obj.aliased:
1.72 python.py(1370):                     yield (refname, refname, obj.objtype, obj.docname, obj.node_id, 1)
1.72 python.py(1364):         for refname, obj in self.objects.items():
1.72 python.py(1365):             if obj.objtype != 'module':  # modules are already handled
1.72 python.py(1366):                 if obj.aliased:
1.72 python.py(1370):                     yield (refname, refname, obj.objtype, obj.docname, obj.node_id, 1)
1.72 python.py(1364):         for refname, obj in self.objects.items():
1.72 python.py(1365):             if obj.objtype != 'module':  # modules are already handled
1.72 python.py(1366):                 if obj.aliased:
1.72 python.py(1370):                     yield (refname, refname, obj.objtype, obj.docname, obj.node_id, 1)
1.72 python.py(1364):         for refname, obj in self.objects.items():
1.72 python.py(1365):             if obj.objtype != 'module':  # modules are already handled
1.72 python.py(1366):                 if obj.aliased:
1.72 python.py(1370):                     yield (refname, refname, obj.objtype, obj.docname, obj.node_id, 1)
1.72 python.py(1364):         for refname, obj in self.objects.items():
1.72 python.py(1365):             if obj.objtype != 'module':  # modules are already handled
1.72 python.py(1366):                 if obj.aliased:
1.72 python.py(1370):                     yield (refname, refname, obj.objtype, obj.docname, obj.node_id, 1)
1.72 python.py(1364):         for refname, obj in self.objects.items():
1.72 python.py(1365):             if obj.objtype != 'module':  # modules are already handled
1.72 python.py(1366):                 if obj.aliased:
1.72 python.py(1370):                     yield (refname, refname, obj.objtype, obj.docname, obj.node_id, 1)
1.72 python.py(1364):         for refname, obj in self.objects.items():
1.72 python.py(1365):             if obj.objtype != 'module':  # modules are already handled
1.72 python.py(1366):                 if obj.aliased:
1.72 python.py(1370):                     yield (refname, refname, obj.objtype, obj.docname, obj.node_id, 1)
1.72 python.py(1364):         for refname, obj in self.objects.items():
1.72 python.py(1365):             if obj.objtype != 'module':  # modules are already handled
1.72 python.py(1366):                 if obj.aliased:
1.72 python.py(1370):                     yield (refname, refname, obj.objtype, obj.docname, obj.node_id, 1)
1.72 python.py(1364):         for refname, obj in self.objects.items():
1.72 python.py(1365):             if obj.objtype != 'module':  # modules are already handled
1.72 python.py(1366):                 if obj.aliased:
1.72 python.py(1370):                     yield (refname, refname, obj.objtype, obj.docname, obj.node_id, 1)
1.72 python.py(1364):         for refname, obj in self.objects.items():
1.72 python.py(1365):             if obj.objtype != 'module':  # modules are already handled
1.72 python.py(1366):                 if obj.aliased:
1.72 python.py(1370):                     yield (refname, refname, obj.objtype, obj.docname, obj.node_id, 1)
1.72 python.py(1364):         for refname, obj in self.objects.items():
done
[01mdumping object inventory... [39;49;00m1.72 python.py(1362):         for modname, mod in self.modules.items():
1.72 python.py(1188):         return self.data.setdefault('modules', {})  # modname -> ModuleEntry
1.72 python.py(1363):             yield (modname, modname, 'module', mod.docname, mod.node_id, 0)
1.72 python.py(1362):         for modname, mod in self.modules.items():
1.72 python.py(1364):         for refname, obj in self.objects.items():
1.72 python.py(1163):         return self.data.setdefault('objects', {})  # fullname -> ObjectEntry
1.72 python.py(1365):             if obj.objtype != 'module':  # modules are already handled
1.72 python.py(1364):         for refname, obj in self.objects.items():
1.72 python.py(1365):             if obj.objtype != 'module':  # modules are already handled
1.72 python.py(1366):                 if obj.aliased:
1.72 python.py(1370):                     yield (refname, refname, obj.objtype, obj.docname, obj.node_id, 1)
1.72 python.py(1364):         for refname, obj in self.objects.items():
1.72 python.py(1365):             if obj.objtype != 'module':  # modules are already handled
1.72 python.py(1366):                 if obj.aliased:
1.72 python.py(1370):                     yield (refname, refname, obj.objtype, obj.docname, obj.node_id, 1)
1.72 python.py(1364):         for refname, obj in self.objects.items():
1.72 python.py(1365):             if obj.objtype != 'module':  # modules are already handled
1.72 python.py(1366):                 if obj.aliased:
1.72 python.py(1370):                     yield (refname, refname, obj.objtype, obj.docname, obj.node_id, 1)
1.72 python.py(1364):         for refname, obj in self.objects.items():
1.72 python.py(1365):             if obj.objtype != 'module':  # modules are already handled
1.72 python.py(1366):                 if obj.aliased:
1.72 python.py(1370):                     yield (refname, refname, obj.objtype, obj.docname, obj.node_id, 1)
1.72 python.py(1364):         for refname, obj in self.objects.items():
1.72 python.py(1365):             if obj.objtype != 'module':  # modules are already handled
1.72 python.py(1366):                 if obj.aliased:
1.72 python.py(1370):                     yield (refname, refname, obj.objtype, obj.docname, obj.node_id, 1)
1.72 python.py(1364):         for refname, obj in self.objects.items():
1.72 python.py(1365):             if obj.objtype != 'module':  # modules are already handled
1.72 python.py(1366):                 if obj.aliased:
1.72 python.py(1370):                     yield (refname, refname, obj.objtype, obj.docname, obj.node_id, 1)
1.72 python.py(1364):         for refname, obj in self.objects.items():
1.72 python.py(1365):             if obj.objtype != 'module':  # modules are already handled
1.72 python.py(1366):                 if obj.aliased:
1.72 python.py(1370):                     yield (refname, refname, obj.objtype, obj.docname, obj.node_id, 1)
1.72 python.py(1364):         for refname, obj in self.objects.items():
1.72 python.py(1365):             if obj.objtype != 'module':  # modules are already handled
1.72 python.py(1366):                 if obj.aliased:
1.72 python.py(1370):                     yield (refname, refname, obj.objtype, obj.docname, obj.node_id, 1)
1.72 python.py(1364):         for refname, obj in self.objects.items():
1.72 python.py(1365):             if obj.objtype != 'module':  # modules are already handled
1.72 python.py(1366):                 if obj.aliased:
1.72 python.py(1370):                     yield (refname, refname, obj.objtype, obj.docname, obj.node_id, 1)
1.72 python.py(1364):         for refname, obj in self.objects.items():
1.72 python.py(1365):             if obj.objtype != 'module':  # modules are already handled
1.72 python.py(1366):                 if obj.aliased:
1.72 python.py(1370):                     yield (refname, refname, obj.objtype, obj.docname, obj.node_id, 1)
1.72 python.py(1364):         for refname, obj in self.objects.items():
1.72 python.py(1365):             if obj.objtype != 'module':  # modules are already handled
1.72 python.py(1366):                 if obj.aliased:
1.72 python.py(1370):                     yield (refname, refname, obj.objtype, obj.docname, obj.node_id, 1)
1.72 python.py(1364):         for refname, obj in self.objects.items():
1.72 python.py(1365):             if obj.objtype != 'module':  # modules are already handled
1.72 python.py(1366):                 if obj.aliased:
1.72 python.py(1370):                     yield (refname, refname, obj.objtype, obj.docname, obj.node_id, 1)
1.72 python.py(1364):         for refname, obj in self.objects.items():
1.72 python.py(1365):             if obj.objtype != 'module':  # modules are already handled
1.72 python.py(1366):                 if obj.aliased:
1.72 python.py(1370):                     yield (refname, refname, obj.objtype, obj.docname, obj.node_id, 1)
1.72 python.py(1364):         for refname, obj in self.objects.items():
done
[01mbuild succeeded.[39;49;00m

The HTML pages are in ../tmp/pytest-of-root/pytest-0/test_property_type_annotation_0/docs/_build/html.
[33m=============================== warnings summary ===============================[0m
sphinx/util/docutils.py:44
  /testbed/sphinx/util/docutils.py:44: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    __version_info__ = tuple(LooseVersion(docutils.__version__).version)

sphinx/highlighting.py:67
  /testbed/sphinx/highlighting.py:67: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    if tuple(LooseVersion(pygmentsversion).version) <= (2, 7, 4):

sphinx/registry.py:24
  /testbed/sphinx/registry.py:24: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html
    from pkg_resources import iter_entry_points

../opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pkg_resources/__init__.py:3147
../opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pkg_resources/__init__.py:3147
../opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pkg_resources/__init__.py:3147
../opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pkg_resources/__init__.py:3147
  /opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pkg_resources/__init__.py:3147: DeprecationWarning: Deprecated call to `pkg_resources.declare_namespace('sphinxcontrib')`.
  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages
    declare_namespace(pkg)

tests/test_coverup_sphinx-doc__sphinx-9591.py::test_property_type_annotation_cross_reference
tests/test_coverup_sphinx-doc__sphinx-9591.py::test_property_type_annotation_cross_reference
tests/test_coverup_sphinx-doc__sphinx-9591.py::test_property_type_annotation_cross_reference
tests/test_coverup_sphinx-doc__sphinx-9591.py::test_property_type_annotation_cross_reference
  /opt/miniconda3/envs/testbed/lib/python3.9/site-packages/alabaster/layout.html:114: DeprecationWarning: 'soft_unicode' has been renamed to 'soft_str'. The old name will be removed in MarkupSafe 2.1.
    _gaq.push(['_setAllowLinker', true]);

tests/test_coverup_sphinx-doc__sphinx-9591.py::test_property_type_annotation_cross_reference
tests/test_coverup_sphinx-doc__sphinx-9591.py::test_property_type_annotation_cross_reference
tests/test_coverup_sphinx-doc__sphinx-9591.py::test_property_type_annotation_cross_reference
tests/test_coverup_sphinx-doc__sphinx-9591.py::test_property_type_annotation_cross_reference
  /opt/miniconda3/envs/testbed/lib/python3.9/site-packages/alabaster/about.html:70: DeprecationWarning: 'soft_unicode' has been renamed to 'soft_str'. The old name will be removed in MarkupSafe 2.1.

tests/test_coverup_sphinx-doc__sphinx-9591.py::test_property_type_annotation_cross_reference
tests/test_coverup_sphinx-doc__sphinx-9591.py::test_property_type_annotation_cross_reference
tests/test_coverup_sphinx-doc__sphinx-9591.py::test_property_type_annotation_cross_reference
tests/test_coverup_sphinx-doc__sphinx-9591.py::test_property_type_annotation_cross_reference
  /opt/miniconda3/envs/testbed/lib/python3.9/site-packages/alabaster/about.html:99: DeprecationWarning: 'soft_unicode' has been renamed to 'soft_str'. The old name will be removed in MarkupSafe 2.1.

tests/test_coverup_sphinx-doc__sphinx-9591.py::test_property_type_annotation_cross_reference
tests/test_coverup_sphinx-doc__sphinx-9591.py::test_property_type_annotation_cross_reference
tests/test_coverup_sphinx-doc__sphinx-9591.py::test_property_type_annotation_cross_reference
tests/test_coverup_sphinx-doc__sphinx-9591.py::test_property_type_annotation_cross_reference
  /opt/miniconda3/envs/testbed/lib/python3.9/site-packages/alabaster/layout.html:215: DeprecationWarning: 'soft_unicode' has been renamed to 'soft_str'. The old name will be removed in MarkupSafe 2.1.

tests/test_coverup_sphinx-doc__sphinx-9591.py::test_property_type_annotation_cross_reference
tests/test_coverup_sphinx-doc__sphinx-9591.py::test_property_type_annotation_cross_reference
tests/test_coverup_sphinx-doc__sphinx-9591.py::test_property_type_annotation_cross_reference
tests/test_coverup_sphinx-doc__sphinx-9591.py::test_property_type_annotation_cross_reference
  /opt/miniconda3/envs/testbed/lib/python3.9/site-packages/alabaster/layout.html:238: DeprecationWarning: 'soft_unicode' has been renamed to 'soft_str'. The old name will be removed in MarkupSafe 2.1.

tests/test_coverup_sphinx-doc__sphinx-9591.py::test_property_type_annotation_cross_reference
  <template>:33: DeprecationWarning: 'soft_unicode' has been renamed to 'soft_str'. The old name will be removed in MarkupSafe 2.1.

tests/test_coverup_sphinx-doc__sphinx-9591.py::test_property_type_annotation_cross_reference
  <template>:224: DeprecationWarning: 'soft_unicode' has been renamed to 'soft_str'. The old name will be removed in MarkupSafe 2.1.

tests/test_coverup_sphinx-doc__sphinx-9591.py::test_property_type_annotation_cross_reference
  <template>:386: DeprecationWarning: 'soft_unicode' has been renamed to 'soft_str'. The old name will be removed in MarkupSafe 2.1.

tests/test_coverup_sphinx-doc__sphinx-9591.py::test_property_type_annotation_cross_reference
  <template>:401: DeprecationWarning: 'soft_unicode' has been renamed to 'soft_str'. The old name will be removed in MarkupSafe 2.1.

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
============================= slowest 25 durations =============================
1.03s call     tests/test_coverup_sphinx-doc__sphinx-9591.py::test_property_type_annotation_cross_reference

(2 durations < 0.005s hidden.  Use -vv to show these durations.)
[36m[1m=========================== short test summary info ============================[0m
[31mFAILED[0m tests/test_coverup_sphinx-doc__sphinx-9591.py::[1mtest_property_type_annotation_cross_reference[0m - AssertionError: The type annotation for the 'end' property should be cross-...
[31m======================== [31m[1m1 failed[0m, [33m31 warnings[0m[31m in 1.35s[0m[31m ========================[0m
py39: exit 0 (2.38 seconds) /testbed> python -X dev -m pytest -rA --durations 25 tests/test_coverup_sphinx-doc__sphinx-9591.py pid=155
  py39: OK (6.47=setup[4.10]+cmd[2.38] seconds)
  congratulations :) (7.64 seconds)
+ cat coverage.cover
{"/testbed/sphinx/domains/python.py": {"11": 1, "12": 1, "13": 1, "14": 1, "15": 1, "16": 1, "17": 1, "18": 1, "20": 1, "21": 1, "22": 1, "23": 1, "25": 1, "26": 1, "27": 1, "28": 1, "29": 1, "30": 1, "31": 1, "32": 1, "33": 1, "34": 1, "35": 1, "36": 1, "37": 1, "38": 1, "39": 1, "40": 1, "41": 1, "42": 1, "44": 1, "48": 2, "49": 1, "54": 1, "58": 1, "59": 1, "60": 1, "61": 1, "62": 1, "63": 1, "64": 1, "57": 1, "68": 2, "75": 2, "83": 1, "110": 1, "189": 1, "239": 1, "289": 2, "347": 2, "360": 2, "364": 2, "377": 2, "596": 2, "633": 2, "650": 2, "681": 2, "710": 2, "771": 2, "783": 2, "795": 2, "811": 2, "849": 2, "893": 2, "916": 2, "979": 2, "1000": 2, "1023": 1, "1038": 2, "1110": 2, "1382": 2, "1383": 1, "1407": 1, "69": 1, "70": 1, "71": 1, "72": 1, "76": 1, "77": 1, "78": 1, "79": 1, "80": 1, "85": 8, "86": 0, "88": 8, "90": 8, "91": 16, "92": 8, "94": 0, "96": 8, "100": 0, "101": 0, "102": 0, "104": 8, "106": 24, "107": 16, "112": 8, "174": 8, "175": 0, "176": 0, "178": 8, "179": 8, "180": 8, "181": 16, "182": 8, "183": 8, "184": 8, "185": 0, "186": 0, "113": 26, "114": 2, "115": 24, "116": 0, "117": 0, "118": 0, "119": 0, "120": 24, "121": 0, "122": 24, "123": 0, "124": 0, "126": 0, "127": 24, "128": 8, "129": 16, "130": 0, "131": 16, "132": 0, "133": 0, "137": 0, "138": 0, "139": 0, "140": 0, "141": 0, "142": 0, "143": 16, "144": 24, "145": 8, "146": 8, "147": 0, "148": 0, "149": 0, "150": 0, "151": 0, "152": 0, "153": 0, "154": 0, "155": 0, "156": 0, "157": 0, "158": 0, "159": 0, "161": 0, "162": 0, "164": 0, "166": 0, "167": 0, "168": 0, "169": 0, "170": 0, "172": 0, "191": 0, "192": 0, "193": 0, "194": 0, "195": 0, "197": 0, "198": 0, "199": 0, "200": 0, "202": 0, "204": 0, "205": 0, "206": 0, "207": 0, "208": 0, "209": 0, "210": 0, "212": 0, "214": 0, "215": 0, "216": 0, "217": 0, "218": 0, "219": 0, "220": 0, "221": 0, "222": 0, "223": 0, "225": 0, "226": 0, "227": 0, "229": 0, "230": 0, "232": 0, "234": 0, "236": 0, "246": 0, "247": 0, "248": 0, "249": 0, "250": 0, "251": 0, "252": 0, "253": 0, "254": 0, "255": 0, "256": 0, "257": 0, "258": 0, "259": 0, "260": 0, "261": 0, "262": 0, "263": 0, "264": 0, "265": 0, "266": 0, "267": 0, "268": 0, "269": 0, "270": 0, "271": 0, "272": 0, "273": 0, "274": 0, "275": 0, "276": 0, "280": 0, "281": 0, "282": 0, "284": 0, "291": 2, "292": 2, "293": 2, "290": 2, "324": 2, "325": 2, "326": 2, "323": 2, "296": 0, "297": 0, "298": 0, "299": 0, "300": 0, "301": 0, "302": 0, "303": 0, "304": 0, "305": 0, "306": 0, "307": 0, "308": 0, "309": 0, "310": 0, "311": 0, "312": 0, "313": 0, "315": 0, "316": 0, "317": 0, "318": 0, "319": 0, "321": 0, "327": 0, "328": 0, "329": 0, "331": 0, "333": 0, "334": 0, "335": 0, "336": 0, "338": 0, "339": 0, "341": 0, "342": 0, "344": 0, "349": 2, "350": 2, "351": 2, "348": 2, "352": 0, "354": 0, "356": 0, "357": 0, "361": 1, "366": 2, "367": 2, "368": 2, "365": 2, "369": 0, "371": 0, "373": 0, "374": 0, "385": 1, "386": 1, "387": 1, "388": 1, "389": 1, "384": 1, "393": 2, "394": 1, "396": 1, "397": 1, "398": 2, "399": 1, "400": 1, "401": 1, "402": 2, "403": 1, "404": 1, "405": 2, "406": 1, "407": 2, "408": 1, "392": 1, "411": 1, "413": 1, "419": 1, "425": 1, "506": 1, "510": 2, "511": 1, "537": 1, "570": 1, "417": 8, "423": 13, "434": 13, "435": 13, "436": 0, "437": 13, "440": 13, "441": 13, "442": 13, "443": 10, "444": 20, "445": 10, "446": 10, "448": 10, "449": 0, "452": 0, "455": 0, "457": 3, "458": 3, "459": 0, "460": 0, "462": 3, "463": 3, "465": 13, "466": 13, "467": 13, "469": 13, "470": 13, "471": 5, "473": 13, "474": 0, "475": 13, "476": 3, "477": 3, "479": 13, "480": 13, "481": 0, "482": 0, "483": 0, "486": 0, "487": 0, "488": 0, "489": 0, "490": 0, "492": 13, "494": 0, "496": 13, "497": 0, "498": 0, "500": 13, "501": 13, "502": 0, "504": 13, "508": 0, "512": 13, "513": 13, "514": 13, "515": 13, "519": 13, "520": 0, "522": 13, "524": 13, "525": 13, "527": 13, "528": 13, "529": 0, "530": 0, "532": 13, "533": 13, "534": 13, "535": 13, "549": 13, "550": 13, "555": 13, "556": 13, "557": 3, "558": 10, "559": 0, "560": 13, "561": 3, "562": 3, "563": 3, "564": 3, "565": 13, "566": 13, "567": 13, "568": 13, "580": 13, "581": 13, "582": 3, "583": 3, "584": 0, "585": 0, "586": 26, "587": 3, "588": 13, "589": 13, "590": 13, "591": 13, "593": 0, "599": 1, "600": 2, "601": 1, "604": 1, "610": 1, "613": 2, "614": 1, "628": 1, "605": 0, "606": 0, "608": 0, "611": 0, "615": 0, "616": 0, "617": 0, "618": 0, "620": 0, "621": 0, "622": 0, "623": 0, "625": 0, "626": 0, "630": 0, "636": 1, "641": 1, "646": 1, "638": 0, "639": 0, "642": 0, "643": 0, "644": 0, "647": 0, "653": 1, "654": 2, "655": 1, "656": 1, "659": 1, "673": 1, "660": 0, "662": 0, "663": 0, "664": 0, "665": 0, "667": 0, "668": 0, "669": 0, "671": 0, "674": 0, "675": 0, "676": 0, "678": 0, "686": 1, "687": 2, "688": 1, "691": 1, "693": 1, "699": 1, "694": 3, "695": 0, "697": 3, "700": 3, "701": 3, "702": 0, "703": 3, "704": 0, "705": 0, "707": 0, "713": 1, "714": 2, "715": 1, "716": 1, "717": 1, "718": 1, "719": 1, "720": 1, "723": 1, "729": 1, "749": 1, "724": 0, "725": 0, "727": 0, "730": 0, "731": 0, "732": 0, "733": 0, "734": 0, "735": 0, "736": 0, "737": 0, "738": 0, "739": 0, "740": 0, "741": 0, "742": 0, "744": 0, "745": 0, "747": 0, "750": 0, "751": 0, "752": 0, "753": 0, "754": 0, "755": 0, "756": 0, "757": 0, "759": 0, "761": 0, "762": 0, "763": 0, "764": 0, "765": 0, "766": 0, "768": 0, "774": 1, "776": 1, "777": 0, "778": 0, "780": 0, "786": 1, "788": 1, "789": 0, "790": 0, "792": 0, "798": 1, "802": 1, "807": 1, "799": 0, "800": 0, "803": 0, "804": 0, "805": 0, "808": 0, "814": 1, "815": 2, "816": 1, "817": 1, "820": 1, "834": 1, "821": 8, "823": 8, "824": 8, "825": 8, "826": 8, "828": 8, "829": 8, "830": 0, "832": 8, "835": 8, "836": 8, "837": 8, "838": 8, "839": 8, "840": 0, "841": 0, "842": 0, "844": 0, "846": 8, "852": 1, "853": 2, "854": 1, "855": 1, "856": 1, "859": 1, "868": 1, "878": 1, "860": 2, "862": 2, "863": 2, "864": 2, "866": 2, "869": 2, "870": 2, "871": 0, "872": 2, "873": 0, "875": 2, "876": 2, "879": 2, "880": 2, "881": 2, "882": 2, "883": 2, "884": 0, "885": 0, "886": 0, "888": 0, "890": 2, "897": 1, "912": 1, "898": 0, "899": 0, "900": 0, "901": 0, "902": 0, "903": 0, "905": 0, "906": 0, "908": 0, "909": 0, "910": 0, "913": 0, "921": 1, "922": 1, "923": 1, "924": 1, "926": 1, "927": 1, "928": 1, "929": 1, "925": 1, "932": 1, "968": 1, "933": 1, "935": 1, "936": 1, "937": 1, "938": 1, "939": 1, "941": 1, "942": 1, "943": 1, "947": 1, "948": 1, "949": 0, "951": 1, "953": 2, "954": 1, "955": 1, "956": 1, "957": 1, "958": 1, "962": 1, "963": 1, "964": 1, "965": 1, "966": 1, "976": 1, "985": 1, "986": 1, "987": 1, "988": 1, "989": 1, "991": 1, "992": 0, "993": 0, "994": 0, "996": 0, "997": 0, "1001": 2, "1002": 1, "1003": 3, "1004": 3, "1005": 3, "1006": 3, "1007": 3, "1010": 3, "1011": 0, "1012": 0, "1013": 0, "1014": 0, "1017": 3, "1018": 0, "1019": 0, "1020": 3, "1025": 13, "1026": 0, "1028": 46, "1029": 33, "1030": 0, "1031": 0, "1032": 0, "1033": 0, "1034": 0, "1035": 0, "1043": 1, "1044": 1, "1045": 1, "1047": 2, "1048": 1, "1049": 1, "1051": 1, "1052": 1, "1054": 2, "1055": 2, "1057": 1, "1058": 1, "1059": 2, "1060": 1, "1061": 0, "1063": 1, "1064": 0, "1065": 0, "1066": 0, "1067": 0, "1069": 1, "1072": 1, "1073": 0, "1075": 1, "1077": 1, "1078": 1, "1080": 0, "1082": 0, "1083": 0, "1084": 0, "1085": 0, "1086": 0, "1088": 0, "1089": 0, "1091": 1, "1092": 1, "1094": 1, "1095": 2, "1096": 1, "1097": 1, "1102": 1, "1105": 1, "1107": 1, "1112": 1, "1113": 1, "1115": 1, "1116": 1, "1117": 1, "1118": 1, "1119": 1, "1120": 1, "1121": 1, "1122": 1, "1123": 1, "1124": 1, "1114": 1, "1128": 1, "1129": 1, "1130": 1, "1131": 1, "1132": 1, "1133": 1, "1134": 1, "1135": 1, "1136": 1, "1137": 1, "1138": 1, "1139": 1, "1140": 1, "1127": 1, "1143": 1, "1144": 1, "1145": 1, "1146": 1, "1147": 1, "1148": 1, "1149": 1, "1150": 1, "1151": 1, "1142": 1, "1154": 1, "1155": 1, "1153": 1, "1158": 1, "1157": 1, "1161": 1, "1162": 1, "1165": 2, "1166": 1, "1186": 1, "1187": 1, "1190": 2, "1191": 1, "1199": 1, "1207": 1, "1216": 2, "1217": 1, "1218": 1, "1272": 2, "1273": 1, "1274": 1, "1319": 2, "1320": 1, "1321": 1, "1347": 2, "1348": 1, "1361": 1, "1372": 1, "1163": 71, "1171": 14, "1172": 0, "1173": 0, "1175": 0, "1176": 0, "1178": 0, "1181": 0, "1183": 0, "1184": 14, "1188": 4, "1196": 2, "1197": 1, "1200": 1, "1201": 0, "1202": 0, "1203": 1, "1204": 0, "1205": 0, "1209": 0, "1210": 0, "1211": 0, "1212": 0, "1213": 0, "1214": 0, "1223": 11, "1224": 0, "1226": 11, "1227": 0, "1229": 11, "1231": 11, "1232": 11, "1233": 0, "1234": 0, "1236": 0, "1237": 0, "1238": 0, "1239": 0, "1240": 0, "1241": 0, "1242": 0, "1243": 0, "1244": 0, "1245": 0, "1246": 0, "1247": 0, "1250": 0, "1251": 0, "1256": 11, "1257": 2, "1258": 9, "1260": 0, "1261": 9, "1262": 0, "1263": 9, "1264": 0, "1265": 18, "1266": 9, "1267": 0, "1268": 11, "1269": 2, "1270": 11, "1252": 0, "1253": 0, "1275": 11, "1276": 11, "1277": 11, "1278": 22, "1279": 11, "1281": 11, "1285": 0, "1286": 11, "1292": 0, "1294": 11, "1295": 9, "1296": 2, "1297": 0, "1298": 0, "1299": 0, "1301": 0, "1302": 0, "1303": 0, "1304": 2, "1306": 2, "1307": 0, "1310": 2, "1311": 2, "1312": 0, "1315": 2, "1317": 2, "1322": 0, "1323": 0, "1324": 0, "1327": 0, "1328": 0, "1329": 0, "1330": 0, "1331": 0, "1332": 0, "1335": 0, "1336": 0, "1337": 0, "1340": 0, "1342": 0, "1343": 0, "1344": 0, "1345": 0, "1350": 0, "1351": 0, "1352": 0, "1353": 0, "1354": 0, "1355": 0, "1356": 0, "1357": 0, "1358": 0, "1359": 0, "1362": 4, "1363": 2, "1364": 30, "1365": 28, "1366": 26, "1368": 0, "1370": 26, "1373": 0, "1374": 0, "1375": 0, "1376": 0, "1377": 0, "1379": 0, "1385": 9, "1391": 9, "1392": 0, "1393": 9, "1394": 0, "1395": 9, "1396": 9, "1397": 9, "1399": 9, "1400": 0, "1402": 0, "1404": 0, "1386": 0, "1387": 0, "1389": 0, "1408": 1, "1410": 1, "1411": 1, "1412": 1, "1413": 1, "1416": 1, "1417": 1, "1418": 1, "1419": 1, "1415": 1}}
+ git checkout 9ed054279aeffd5b1d0642e2d24a8800389de29f
Note: switching to '9ed054279aeffd5b1d0642e2d24a8800389de29f'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at 9ed054279 Merge pull request #9549 from tk0miya/9524_SphinxTestApp_outdir
M	setup.py
M	tox.ini
+ git apply /root/pre_state.patch
error: unrecognized input
