diff --git a/dev/null b/tests/test_coverup_django__django-16819.py
new file mode 100644
index e69de29..9745fce 100644
--- /dev/null
+++ b/tests/test_coverup_django__django-16819.py
@@ -0,0 +1,37 @@
+from django.test import SimpleTestCase
+from django.db.migrations.optimizer import MigrationOptimizer
+from django.db.migrations.operations.models import AddIndex, RemoveIndex
+from django.db.migrations.state import ProjectState
+from django.db import models
+
+class MigrationOptimizerTest(SimpleTestCase):
+    def test_add_remove_index_not_optimized(self):
+        """
+        Test that AddIndex followed by RemoveIndex on the same model and index
+        are optimized away, ensuring the bug is fixed.
+        """
+        # Setup: Define a model and an index
+        class TestModel(models.Model):
+            field = models.IntegerField()
+
+            class Meta:
+                app_label = 'test_app'
+
+        index = models.Index(fields=['field'], name='test_index')
+
+        # Create AddIndex and RemoveIndex operations
+        add_index_op = AddIndex('TestModel', index)
+        remove_index_op = RemoveIndex('TestModel', 'test_index')
+
+        # List of operations to optimize
+        operations = [add_index_op, remove_index_op]
+
+        # Initialize the optimizer
+        optimizer = MigrationOptimizer()
+
+        # Optimize the operations
+        optimized_operations = optimizer.optimize(operations, 'test_app')
+
+        # Assert that both operations are not present, indicating the bug is fixed
+        self.assertNotIn(add_index_op, optimized_operations)
+        self.assertNotIn(remove_index_op, optimized_operations)
