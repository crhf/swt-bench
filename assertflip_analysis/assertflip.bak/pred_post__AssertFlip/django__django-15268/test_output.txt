+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD 0ab58c120939093fea90822f376e1866fc714d1f
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
nothing to commit, working tree clean
+ git show
commit 0ab58c120939093fea90822f376e1866fc714d1f
Author: Jacob Walls <jacobtylerwalls@gmail.com>
Date:   Fri Dec 31 10:30:48 2021 -0500

    Refs #29026 -- Allowed customizing InteractiveMigrationQuestioner's prompt destination.
    
    Previously, the questioner did not obey the value of stdout provided
    to the command.

diff --git a/django/core/management/commands/makemigrations.py b/django/core/management/commands/makemigrations.py
index 9077660467..4d26bfe278 100644
--- a/django/core/management/commands/makemigrations.py
+++ b/django/core/management/commands/makemigrations.py
@@ -144,7 +144,11 @@ class Command(BaseCommand):
             return self.handle_merge(loader, conflicts)
 
         if self.interactive:
-            questioner = InteractiveMigrationQuestioner(specified_apps=app_labels, dry_run=self.dry_run)
+            questioner = InteractiveMigrationQuestioner(
+                specified_apps=app_labels,
+                dry_run=self.dry_run,
+                prompt_output=self.stdout,
+            )
         else:
             questioner = NonInteractiveMigrationQuestioner(
                 specified_apps=app_labels,
@@ -250,7 +254,7 @@ class Command(BaseCommand):
         if it's safe; otherwise, advises on how to fix it.
         """
         if self.interactive:
-            questioner = InteractiveMigrationQuestioner()
+            questioner = InteractiveMigrationQuestioner(prompt_output=self.stdout)
         else:
             questioner = MigrationQuestioner(defaults={'ask_merge': True})
 
diff --git a/django/db/migrations/questioner.py b/django/db/migrations/questioner.py
index 17883ca76c..3460e2b3ab 100644
--- a/django/db/migrations/questioner.py
+++ b/django/db/migrations/questioner.py
@@ -4,6 +4,7 @@ import os
 import sys
 
 from django.apps import apps
+from django.core.management.base import OutputWrapper
 from django.db.models import NOT_PROVIDED
 from django.utils import timezone
 from django.utils.version import get_docs_version
@@ -87,20 +88,26 @@ class MigrationQuestioner:
 
 
 class InteractiveMigrationQuestioner(MigrationQuestioner):
+    def __init__(self, defaults=None, specified_apps=None, dry_run=None, prompt_output=None):
+        super().__init__(defaults=defaults, specified_apps=specified_apps, dry_run=dry_run)
+        self.prompt_output = prompt_output or OutputWrapper(sys.stdout)
 
     def _boolean_input(self, question, default=None):
-        result = input("%s " % question)
+        self.prompt_output.write(f'{question} ', ending='')
+        result = input()
         if not result and default is not None:
             return default
         while not result or result[0].lower() not in "yn":
-            result = input("Please answer yes or no: ")
+            self.prompt_output.write('Please answer yes or no: ', ending='')
+            result = input()
         return result[0].lower() == "y"
 
     def _choice_input(self, question, choices):
-        print(question)
+        self.prompt_output.write(f'{question}')
         for i, choice in enumerate(choices):
-            print(" %s) %s" % (i + 1, choice))
-        result = input("Select an option: ")
+            self.prompt_output.write(' %s) %s' % (i + 1, choice))
+        self.prompt_output.write('Select an option: ', ending='')
+        result = input()
         while True:
             try:
                 value = int(result)
@@ -109,7 +116,8 @@ class InteractiveMigrationQuestioner(MigrationQuestioner):
             else:
                 if 0 < value <= len(choices):
                     return value
-            result = input("Please select a valid option: ")
+            self.prompt_output.write('Please select a valid option: ', ending='')
+            result = input()
 
     def _ask_default(self, default=''):
         """
@@ -119,34 +127,35 @@ class InteractiveMigrationQuestioner(MigrationQuestioner):
         string) which will be shown to the user and used as the return value
         if the user doesn't provide any other input.
         """
-        print('Please enter the default value as valid Python.')
+        self.prompt_output.write('Please enter the default value as valid Python.')
         if default:
-            print(
+            self.prompt_output.write(
                 f"Accept the default '{default}' by pressing 'Enter' or "
                 f"provide another value."
             )
-        print(
+        self.prompt_output.write(
             'The datetime and django.utils.timezone modules are available, so '
             'it is possible to provide e.g. timezone.now as a value.'
         )
-        print("Type 'exit' to exit this prompt")
+        self.prompt_output.write("Type 'exit' to exit this prompt")
         while True:
             if default:
                 prompt = "[default: {}] >>> ".format(default)
             else:
                 prompt = ">>> "
-            code = input(prompt)
+            self.prompt_output.write(prompt, ending='')
+            code = input()
             if not code and default:
                 code = default
             if not code:
-                print("Please enter some code, or 'exit' (without quotes) to exit.")
+                self.prompt_output.write("Please enter some code, or 'exit' (without quotes) to exit.")
             elif code == "exit":
                 sys.exit(1)
             else:
                 try:
                     return eval(code, {}, {'datetime': datetime, 'timezone': timezone})
                 except (SyntaxError, NameError) as e:
-                    print("Invalid input: %s" % e)
+                    self.prompt_output.write('Invalid input: %s' % e)
 
     def ask_not_null_addition(self, field_name, model_name):
         """Adding a NOT NULL field to a model."""
diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py
index bf78b60a85..ef5db241d6 100644
--- a/tests/migrations/test_commands.py
+++ b/tests/migrations/test_commands.py
@@ -1304,7 +1304,15 @@ class MakeMigrationsTests(MigrationTestBase):
         # Monkeypatch interactive questioner to auto reject
         with mock.patch('builtins.input', mock.Mock(return_value='N')):
             with self.temporary_migration_module(module="migrations.test_migrations_conflict") as migration_dir:
-                call_command("makemigrations", "migrations", name="merge", merge=True, interactive=True, verbosity=0)
+                with captured_stdout():
+                    call_command(
+                        'makemigrations',
+                        'migrations',
+                        name='merge',
+                        merge=True,
+                        interactive=True,
+                        verbosity=0,
+                    )
                 merge_file = os.path.join(migration_dir, '0003_merge.py')
                 self.assertFalse(os.path.exists(merge_file))
 
@@ -1766,6 +1774,10 @@ class MakeMigrationsTests(MigrationTestBase):
                 '    - remove field silly_field from author\n'
                 '    - add field rating to author\n'
                 '    - create model book\n'
+                '\n'
+                'merging will only work if the operations printed above do not conflict\n'
+                'with each other (working on different fields or models)\n'
+                'should these migration branches be merged? [y/n] '
             )
 
     def test_makemigrations_with_custom_name(self):
@@ -1886,30 +1898,25 @@ class MakeMigrationsTests(MigrationTestBase):
             "It is impossible to add the field 'creation_date' with "
             "'auto_now_add=True' to entry without providing a default. This "
             "is because the database needs something to populate existing "
-            "rows.\n\n"
+            "rows.\n"
             " 1) Provide a one-off default now which will be set on all "
             "existing rows\n"
             " 2) Quit and manually define a default value in models.py."
         )
         # Monkeypatch interactive questioner to auto accept
-        with mock.patch('django.db.migrations.questioner.sys.stdout', new_callable=io.StringIO) as prompt_stdout:
-            out = io.StringIO()
-            with self.temporary_migration_module(module='migrations.test_auto_now_add'):
-                call_command('makemigrations', 'migrations', interactive=True, stdout=out)
-            output = out.getvalue()
-            prompt_output = prompt_stdout.getvalue()
-            self.assertIn(input_msg, prompt_output)
-            self.assertIn(
-                'Please enter the default value as valid Python.',
-                prompt_output,
-            )
-            self.assertIn(
-                "Accept the default 'timezone.now' by pressing 'Enter' or "
-                "provide another value.",
-                prompt_output,
-            )
-            self.assertIn("Type 'exit' to exit this prompt", prompt_output)
-            self.assertIn("Add field creation_date to entry", output)
+        prompt_stdout = io.StringIO()
+        with self.temporary_migration_module(module='migrations.test_auto_now_add'):
+            call_command('makemigrations', 'migrations', interactive=True, stdout=prompt_stdout)
+        prompt_output = prompt_stdout.getvalue()
+        self.assertIn(input_msg, prompt_output)
+        self.assertIn('Please enter the default value as valid Python.', prompt_output)
+        self.assertIn(
+            "Accept the default 'timezone.now' by pressing 'Enter' or provide "
+            "another value.",
+            prompt_output,
+        )
+        self.assertIn("Type 'exit' to exit this prompt", prompt_output)
+        self.assertIn("Add field creation_date to entry", prompt_output)
 
     @mock.patch('builtins.input', return_value='2')
     def test_makemigrations_auto_now_add_interactive_quit(self, mock_input):
@@ -1960,7 +1967,7 @@ class MakeMigrationsTests(MigrationTestBase):
         input_msg = (
             f'Callable default on unique field book.created will not generate '
             f'unique values upon migrating.\n'
-            f'Please choose how to proceed:\n\n'
+            f'Please choose how to proceed:\n'
             f' 1) Continue making this migration as the first step in writing '
             f'a manual migration to generate unique values described here: '
             f'https://docs.djangoproject.com/en/{version}/howto/'
diff --git a/tests/migrations/test_questioner.py b/tests/migrations/test_questioner.py
index c9690d0b99..472a3f248f 100644
--- a/tests/migrations/test_questioner.py
+++ b/tests/migrations/test_questioner.py
@@ -1,12 +1,14 @@
 import datetime
+from io import StringIO
 from unittest import mock
 
+from django.core.management.base import OutputWrapper
 from django.db.migrations.questioner import (
     InteractiveMigrationQuestioner, MigrationQuestioner,
 )
 from django.db.models import NOT_PROVIDED
 from django.test import SimpleTestCase
-from django.test.utils import captured_stdout, override_settings
+from django.test.utils import override_settings
 
 
 class QuestionerTests(SimpleTestCase):
@@ -24,65 +26,60 @@ class QuestionerTests(SimpleTestCase):
 
     @mock.patch('builtins.input', return_value='2')
     def test_ask_not_null_alteration_not_provided(self, mock):
-        questioner = InteractiveMigrationQuestioner()
-        with captured_stdout():
-            question = questioner.ask_not_null_alteration('field_name', 'model_name')
+        questioner = InteractiveMigrationQuestioner(prompt_output=OutputWrapper(StringIO()))
+        question = questioner.ask_not_null_alteration('field_name', 'model_name')
         self.assertEqual(question, NOT_PROVIDED)
 
 
 class QuestionerHelperMethodsTests(SimpleTestCase):
-    questioner = InteractiveMigrationQuestioner()
+    def setUp(self):
+        self.prompt = OutputWrapper(StringIO())
+        self.questioner = InteractiveMigrationQuestioner(prompt_output=self.prompt)
 
     @mock.patch('builtins.input', return_value='datetime.timedelta(days=1)')
     def test_questioner_default_timedelta(self, mock_input):
-        questioner = InteractiveMigrationQuestioner()
-        with captured_stdout():
-            value = questioner._ask_default()
+        value = self.questioner._ask_default()
         self.assertEqual(value, datetime.timedelta(days=1))
 
     @mock.patch('builtins.input', return_value='')
     def test_questioner_default_no_user_entry(self, mock_input):
-        with captured_stdout():
-            value = self.questioner._ask_default(default='datetime.timedelta(days=1)')
+        value = self.questioner._ask_default(default='datetime.timedelta(days=1)')
         self.assertEqual(value, datetime.timedelta(days=1))
 
     @mock.patch('builtins.input', side_effect=['', 'exit'])
     def test_questioner_no_default_no_user_entry(self, mock_input):
-        with captured_stdout() as stdout, self.assertRaises(SystemExit):
+        with self.assertRaises(SystemExit):
             self.questioner._ask_default()
         self.assertIn(
             "Please enter some code, or 'exit' (without quotes) to exit.",
-            stdout.getvalue(),
+            self.prompt.getvalue(),
         )
 
     @mock.patch('builtins.input', side_effect=['bad code', 'exit'])
     def test_questioner_no_default_bad_user_entry_code(self, mock_input):
-        with captured_stdout() as stdout, self.assertRaises(SystemExit):
+        with self.assertRaises(SystemExit):
             self.questioner._ask_default()
-        self.assertIn('Invalid input: ', stdout.getvalue())
+        self.assertIn('Invalid input: ', self.prompt.getvalue())
 
     @mock.patch('builtins.input', side_effect=['', 'n'])
     def test_questioner_no_default_no_user_entry_boolean(self, mock_input):
-        with captured_stdout():
-            value = self.questioner._boolean_input('Proceed?')
+        value = self.questioner._boolean_input('Proceed?')
         self.assertIs(value, False)
 
     @mock.patch('builtins.input', return_value='')
     def test_questioner_default_no_user_entry_boolean(self, mock_input):
-        with captured_stdout():
-            value = self.questioner._boolean_input('Proceed?', default=True)
+        value = self.questioner._boolean_input('Proceed?', default=True)
         self.assertIs(value, True)
 
     @mock.patch('builtins.input', side_effect=[10, 'garbage', 1])
     def test_questioner_bad_user_choice(self, mock_input):
         question = 'Make a choice:'
-        with captured_stdout() as stdout:
-            value = self.questioner._choice_input(question, choices='abc')
+        value = self.questioner._choice_input(question, choices='abc')
         expected_msg = (
             f'{question}\n'
             f' 1) a\n'
             f' 2) b\n'
             f' 3) c\n'
         )
-        self.assertIn(expected_msg, stdout.getvalue())
+        self.assertIn(expected_msg, self.prompt.getvalue())
         self.assertEqual(value, 1)
+ git diff 0ab58c120939093fea90822f376e1866fc714d1f
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Checking if build backend supports build_editable: started
  Checking if build backend supports build_editable: finished with status 'done'
  Getting requirements to build editable: started
  Getting requirements to build editable: finished with status 'done'
  Preparing editable metadata (pyproject.toml): started
  Preparing editable metadata (pyproject.toml): finished with status 'done'
Requirement already satisfied: asgiref>=3.4.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Django==4.1.dev20220103113051) (3.9.1)
Requirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Django==4.1.dev20220103113051) (0.5.3)
Requirement already satisfied: typing_extensions>=4 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from asgiref>=3.4.1->Django==4.1.dev20220103113051) (4.14.1)
Building wheels for collected packages: Django
  Building editable for Django (pyproject.toml): started
  Building editable for Django (pyproject.toml): finished with status 'done'
  Created wheel for Django: filename=django-4.1.dev20220103113051-0.editable-py3-none-any.whl size=26942 sha256=2c4904c26c2981bffe0c2ea014b523ad3f2f3d7f470d214a4fa819efb05fbf91
  Stored in directory: /tmp/pip-ephem-wheel-cache-0zsrfnrq/wheels/7d/66/67/70d1ee2124ccf21d601c352e25cdca10f611f7c8b3f9ffb9e4
Successfully built Django
Installing collected packages: Django
  Attempting uninstall: Django
    Found existing installation: Django 4.1.dev20220103113051
    Uninstalling Django-4.1.dev20220103113051:
      Successfully uninstalled Django-4.1.dev20220103113051
Successfully installed Django-4.1.dev20220103113051
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git apply -v -
Checking patch django/db/migrations/operations/models.py...
Applied patch django/db/migrations/operations/models.py cleanly.
+ git apply -v -
Checking patch tests/test_coverup_django__django-15268.py...
Applied patch tests/test_coverup_django__django-15268.py cleanly.
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/db/migrations/operations/models\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-15268
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(django/db/migrations/operations/models\\.py)']
Testing against Django installed in '/testbed/django'
0.50 models.py(1): from django.db import models
0.50 models.py(2): from django.db.migrations.operations.base import Operation
0.50 models.py(3): from django.db.migrations.state import ModelState
0.51 models.py(4): from django.db.migrations.utils import field_references, resolve_relation
0.51 models.py(5): from django.db.models.options import normalize_together
0.51 models.py(6): from django.utils.functional import cached_property
0.51 models.py(8): from .fields import (
0.51 models.py(13): def _check_for_duplicates(arg_name, objs):
0.51 models.py(23): class ModelOperation(Operation):
0.51 models.py(23): class ModelOperation(Operation):
0.51 models.py(24):     def __init__(self, name):
0.51 models.py(27):     @cached_property
0.51 models.py(28):     def name_lower(self):
0.51 models.py(31):     def references_model(self, name, app_label):
0.51 models.py(34):     def reduce(self, operation, app_label):
0.51 models.py(40):     def can_reduce_through(self, operation, app_label):
0.51 models.py(44): class CreateModel(ModelOperation):
0.51 models.py(44): class CreateModel(ModelOperation):
0.51 models.py(45):     """Create a model's table."""
0.51 models.py(47):     serialization_expand_args = ['fields', 'options', 'managers']
0.51 models.py(49):     def __init__(self, name, fields, options=None, bases=None, managers=None):
0.51 models.py(65):     def deconstruct(self):
0.51 models.py(82):     def state_forwards(self, app_label, state):
0.51 models.py(92):     def database_forwards(self, app_label, schema_editor, from_state, to_state):
0.51 models.py(97):     def database_backwards(self, app_label, schema_editor, from_state, to_state):
0.51 models.py(102):     def describe(self):
0.51 models.py(105):     @property
0.51 models.py(106):     def migration_name_fragment(self):
0.51 models.py(109):     def references_model(self, name, app_label):
0.51 models.py(127):     def reduce(self, operation, app_label):
0.51 models.py(253): class DeleteModel(ModelOperation):
0.51 models.py(253): class DeleteModel(ModelOperation):
0.51 models.py(254):     """Drop a model's table."""
0.51 models.py(256):     def deconstruct(self):
0.51 models.py(266):     def state_forwards(self, app_label, state):
0.51 models.py(269):     def database_forwards(self, app_label, schema_editor, from_state, to_state):
0.51 models.py(274):     def database_backwards(self, app_label, schema_editor, from_state, to_state):
0.51 models.py(279):     def references_model(self, name, app_label):
0.51 models.py(284):     def describe(self):
0.51 models.py(287):     @property
0.51 models.py(288):     def migration_name_fragment(self):
0.51 models.py(292): class RenameModel(ModelOperation):
0.51 models.py(292): class RenameModel(ModelOperation):
0.51 models.py(293):     """Rename a model."""
0.51 models.py(295):     def __init__(self, old_name, new_name):
0.51 models.py(300):     @cached_property
0.51 models.py(301):     def old_name_lower(self):
0.51 models.py(304):     @cached_property
0.51 models.py(305):     def new_name_lower(self):
0.51 models.py(308):     def deconstruct(self):
0.51 models.py(319):     def state_forwards(self, app_label, state):
0.51 models.py(322):     def database_forwards(self, app_label, schema_editor, from_state, to_state):
0.51 models.py(374):     def database_backwards(self, app_label, schema_editor, from_state, to_state):
0.51 models.py(383):     def references_model(self, name, app_label):
0.51 models.py(389):     def describe(self):
0.51 models.py(392):     @property
0.51 models.py(393):     def migration_name_fragment(self):
0.51 models.py(396):     def reduce(self, operation, app_label):
0.51 models.py(413): class ModelOptionOperation(ModelOperation):
0.51 models.py(413): class ModelOptionOperation(ModelOperation):
0.51 models.py(414):     def reduce(self, operation, app_label):
0.51 models.py(420): class AlterModelTable(ModelOptionOperation):
0.51 models.py(420): class AlterModelTable(ModelOptionOperation):
0.51 models.py(421):     """Rename a model's table."""
0.51 models.py(423):     def __init__(self, name, table):
0.51 models.py(427):     def deconstruct(self):
0.51 models.py(438):     def state_forwards(self, app_label, state):
0.51 models.py(441):     def database_forwards(self, app_label, schema_editor, from_state, to_state):
0.51 models.py(459):     def database_backwards(self, app_label, schema_editor, from_state, to_state):
0.51 models.py(462):     def describe(self):
0.51 models.py(468):     @property
0.51 models.py(469):     def migration_name_fragment(self):
0.51 models.py(473): class AlterTogetherOptionOperation(ModelOptionOperation):
0.51 models.py(473): class AlterTogetherOptionOperation(ModelOptionOperation):
0.51 models.py(474):     option_name = None
0.51 models.py(476):     def __init__(self, name, option_value):
0.51 models.py(482):     @cached_property
0.51 models.py(483):     def option_value(self):
0.51 models.py(486):     def deconstruct(self):
0.51 models.py(497):     def state_forwards(self, app_label, state):
0.51 models.py(504):     def database_forwards(self, app_label, schema_editor, from_state, to_state):
0.51 models.py(515):     def database_backwards(self, app_label, schema_editor, from_state, to_state):
0.51 models.py(518):     def references_field(self, model_name, name, app_label):
0.51 models.py(527):     def describe(self):
0.51 models.py(530):     @property
0.51 models.py(531):     def migration_name_fragment(self):
0.51 models.py(534):     def can_reduce_through(self, operation, app_label):
0.51 models.py(543): class AlterUniqueTogether(AlterTogetherOptionOperation):
0.51 models.py(543): class AlterUniqueTogether(AlterTogetherOptionOperation):
0.51 models.py(544):     """
0.51 models.py(548):     option_name = 'unique_together'
0.51 models.py(550):     def __init__(self, name, unique_together):
0.51 models.py(554): class AlterIndexTogether(AlterTogetherOptionOperation):
0.51 models.py(554): class AlterIndexTogether(AlterTogetherOptionOperation):
0.51 models.py(555):     """
0.51 models.py(559):     option_name = "index_together"
0.51 models.py(561):     def __init__(self, name, index_together):
0.51 models.py(565): class AlterOrderWithRespectTo(ModelOptionOperation):
0.51 models.py(565): class AlterOrderWithRespectTo(ModelOptionOperation):
0.51 models.py(566):     """Represent a change with the order_with_respect_to option."""
0.51 models.py(568):     option_name = 'order_with_respect_to'
0.51 models.py(570):     def __init__(self, name, order_with_respect_to):
0.51 models.py(574):     def deconstruct(self):
0.51 models.py(585):     def state_forwards(self, app_label, state):
0.51 models.py(592):     def database_forwards(self, app_label, schema_editor, from_state, to_state):
0.51 models.py(610):     def database_backwards(self, app_label, schema_editor, from_state, to_state):
0.51 models.py(613):     def references_field(self, model_name, name, app_label):
0.51 models.py(622):     def describe(self):
0.51 models.py(625):     @property
0.51 models.py(626):     def migration_name_fragment(self):
0.51 models.py(630): class AlterModelOptions(ModelOptionOperation):
0.51 models.py(630): class AlterModelOptions(ModelOptionOperation):
0.51 models.py(631):     """
0.51 models.py(638):     ALTER_OPTION_KEYS = [
0.51 models.py(652):     def __init__(self, name, options):
0.51 models.py(656):     def deconstruct(self):
0.51 models.py(667):     def state_forwards(self, app_label, state):
0.51 models.py(675):     def database_forwards(self, app_label, schema_editor, from_state, to_state):
0.51 models.py(678):     def database_backwards(self, app_label, schema_editor, from_state, to_state):
0.51 models.py(681):     def describe(self):
0.51 models.py(684):     @property
0.51 models.py(685):     def migration_name_fragment(self):
0.51 models.py(689): class AlterModelManagers(ModelOptionOperation):
0.51 models.py(689): class AlterModelManagers(ModelOptionOperation):
0.51 models.py(690):     """Alter the model's managers."""
0.51 test_optimize_redundant_operations (test_coverup_django__django-15268.MigrationOptimizerTest) ... ok

----------------------------------------------------------------------
Ran 1 test in 0.001s

OK
models.py(692):     serialization_expand_args = ['managers']
0.51 models.py(694):     def __init__(self, name, managers):
0.51 models.py(698):     def deconstruct(self):
0.51 models.py(705):     def state_forwards(self, app_label, state):
0.51 models.py(708):     def database_forwards(self, app_label, schema_editor, from_state, to_state):
0.51 models.py(711):     def database_backwards(self, app_label, schema_editor, from_state, to_state):
0.51 models.py(714):     def describe(self):
0.51 models.py(717):     @property
0.51 models.py(718):     def migration_name_fragment(self):
0.51 models.py(722): class IndexOperation(Operation):
0.51 models.py(722): class IndexOperation(Operation):
0.51 models.py(723):     option_name = 'indexes'
0.51 models.py(725):     @cached_property
0.51 models.py(726):     def model_name_lower(self):
0.51 models.py(730): class AddIndex(IndexOperation):
0.51 models.py(730): class AddIndex(IndexOperation):
0.51 models.py(731):     """Add an index on a model."""
0.51 models.py(733):     def __init__(self, model_name, index):
0.51 models.py(742):     def state_forwards(self, app_label, state):
0.51 models.py(745):     def database_forwards(self, app_label, schema_editor, from_state, to_state):
0.51 models.py(750):     def database_backwards(self, app_label, schema_editor, from_state, to_state):
0.51 models.py(755):     def deconstruct(self):
0.51 models.py(766):     def describe(self):
0.51 models.py(779):     @property
0.51 models.py(780):     def migration_name_fragment(self):
0.51 models.py(784): class RemoveIndex(IndexOperation):
0.51 models.py(784): class RemoveIndex(IndexOperation):
0.51 models.py(785):     """Remove an index from a model."""
0.51 models.py(787):     def __init__(self, model_name, name):
0.51 models.py(791):     def state_forwards(self, app_label, state):
0.51 models.py(794):     def database_forwards(self, app_label, schema_editor, from_state, to_state):
0.51 models.py(801):     def database_backwards(self, app_label, schema_editor, from_state, to_state):
0.51 models.py(808):     def deconstruct(self):
0.51 models.py(819):     def describe(self):
0.51 models.py(822):     @property
0.51 models.py(823):     def migration_name_fragment(self):
0.51 models.py(827): class AddConstraint(IndexOperation):
0.51 models.py(827): class AddConstraint(IndexOperation):
0.51 models.py(828):     option_name = 'constraints'
0.51 models.py(830):     def __init__(self, model_name, constraint):
0.51 models.py(834):     def state_forwards(self, app_label, state):
0.51 models.py(837):     def database_forwards(self, app_label, schema_editor, from_state, to_state):
0.51 models.py(842):     def database_backwards(self, app_label, schema_editor, from_state, to_state):
0.51 models.py(847):     def deconstruct(self):
0.51 models.py(853):     def describe(self):
0.51 models.py(856):     @property
0.51 models.py(857):     def migration_name_fragment(self):
0.51 models.py(861): class RemoveConstraint(IndexOperation):
0.51 models.py(861): class RemoveConstraint(IndexOperation):
0.51 models.py(862):     option_name = 'constraints'
0.51 models.py(864):     def __init__(self, model_name, name):
0.51 models.py(868):     def state_forwards(self, app_label, state):
0.51 models.py(871):     def database_forwards(self, app_label, schema_editor, from_state, to_state):
0.51 models.py(878):     def database_backwards(self, app_label, schema_editor, from_state, to_state):
0.51 models.py(885):     def deconstruct(self):
0.51 models.py(891):     def describe(self):
0.51 models.py(894):     @property
0.51 models.py(895):     def migration_name_fragment(self):
Found 1 test(s).
Skipping setup of unused database(s): default, other.
System check identified no issues (0 silenced).
0.66 models.py(551):         super().__init__(name, unique_together)
0.66 models.py(477):         if option_value:
0.66 models.py(479):         setattr(self, self.option_name, option_value)
0.66 models.py(480):         super().__init__(name)
0.66 models.py(25):         self.name = name
0.66 models.py(562):         super().__init__(name, index_together)
0.66 models.py(477):         if option_value:
0.66 models.py(479):         setattr(self, self.option_name, option_value)
0.66 models.py(480):         super().__init__(name)
0.66 models.py(25):         self.name = name
0.66 models.py(551):         super().__init__(name, unique_together)
0.66 models.py(477):         if option_value:
0.66 models.py(478):             option_value = set(normalize_together(option_value))
0.66 models.py(479):         setattr(self, self.option_name, option_value)
0.66 models.py(480):         super().__init__(name)
0.66 models.py(25):         self.name = name
0.66 models.py(562):         super().__init__(name, index_together)
0.66 models.py(477):         if option_value:
0.66 models.py(478):             option_value = set(normalize_together(option_value))
0.66 models.py(479):         setattr(self, self.option_name, option_value)
0.66 models.py(480):         super().__init__(name)
0.66 models.py(25):         self.name = name
0.66 models.py(415):         if isinstance(operation, (self.__class__, DeleteModel)) and self.name_lower == operation.name_lower:
0.66 models.py(417):         return super().reduce(operation, app_label)
0.66 models.py(36):             super().reduce(operation, app_label) or
0.66 models.py(37):             self.can_reduce_through(operation, app_label)
0.66 models.py(536):             super().can_reduce_through(operation, app_label) or (
0.66 models.py(41):         return not operation.references_model(self.name, app_label)
0.66 models.py(32):         return name.lower() == self.name_lower
0.66 models.py(29):         return self.name.lower()
0.66 models.py(537):                 isinstance(operation, AlterTogetherOptionOperation) and
0.66 models.py(538):                 type(operation) is not type(self)
0.66 models.py(535):         return (
0.66 models.py(35):         return (
0.66 models.py(415):         if isinstance(operation, (self.__class__, DeleteModel)) and self.name_lower == operation.name_lower:
0.66 models.py(29):         return self.name.lower()
0.66 models.py(29):         return self.name.lower()
0.66 models.py(416):             return [operation]
0.66 models.py(415):         if isinstance(operation, (self.__class__, DeleteModel)) and self.name_lower == operation.name_lower:
0.66 models.py(417):         return super().reduce(operation, app_label)
0.66 models.py(36):             super().reduce(operation, app_label) or
0.66 models.py(37):             self.can_reduce_through(operation, app_label)
0.66 models.py(536):             super().can_reduce_through(operation, app_label) or (
0.66 models.py(41):         return not operation.references_model(self.name, app_label)
0.66 models.py(32):         return name.lower() == self.name_lower
0.66 models.py(537):                 isinstance(operation, AlterTogetherOptionOperation) and
0.66 models.py(538):                 type(operation) is not type(self)
0.66 models.py(535):         return (
0.66 models.py(35):         return (
0.66 models.py(415):         if isinstance(operation, (self.__class__, DeleteModel)) and self.name_lower == operation.name_lower:
0.66 models.py(29):         return self.name.lower()
0.66 models.py(416):             return [operation]
0.66 models.py(415):         if isinstance(operation, (self.__class__, DeleteModel)) and self.name_lower == operation.name_lower:
0.66 models.py(417):         return super().reduce(operation, app_label)
0.66 models.py(36):             super().reduce(operation, app_label) or
0.66 models.py(37):             self.can_reduce_through(operation, app_label)
0.66 models.py(536):             super().can_reduce_through(operation, app_label) or (
0.66 models.py(41):         return not operation.references_model(self.name, app_label)
0.66 models.py(32):         return name.lower() == self.name_lower
0.66 models.py(537):                 isinstance(operation, AlterTogetherOptionOperation) and
0.66 models.py(538):                 type(operation) is not type(self)
0.66 models.py(535):         return (
0.66 models.py(35):         return (
+ cat coverage.cover
{"/testbed/django/db/migrations/operations/models.py": {"1": 1, "2": 1, "3": 1, "4": 1, "5": 1, "6": 1, "8": 1, "13": 1, "23": 2, "44": 2, "253": 2, "292": 2, "413": 2, "420": 2, "473": 2, "543": 2, "554": 2, "565": 2, "630": 2, "689": 2, "722": 2, "730": 2, "784": 2, "827": 2, "861": 2, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "20": 0, "24": 1, "27": 1, "28": 1, "31": 1, "34": 1, "40": 1, "25": 4, "29": 4, "32": 3, "36": 3, "37": 3, "35": 3, "41": 3, "47": 1, "49": 1, "65": 1, "82": 1, "92": 1, "97": 1, "102": 1, "105": 1, "106": 1, "109": 1, "127": 1, "50": 0, "51": 0, "52": 0, "53": 0, "54": 0, "57": 0, "58": 0, "61": 0, "63": 0, "59": 0, "60": 0, "67": 0, "68": 0, "66": 0, "70": 0, "71": 0, "72": 0, "73": 0, "74": 0, "75": 0, "77": 0, "78": 0, "79": 0, "76": 0, "83": 0, "84": 0, "85": 0, "86": 0, "87": 0, "88": 0, "89": 0, "93": 0, "94": 0, "95": 0, "98": 0, "99": 0, "100": 0, "103": 0, "107": 0, "110": 0, "111": 0, "112": 0, "115": 0, "116": 0, "117": 0, "118": 0, "119": 0, "122": 0, "123": 0, "124": 0, "125": 0, "128": 0, "129": 0, "130": 0, "131": 0, "132": 0, "134": 0, "135": 0, "136": 0, "137": 0, "138": 0, "139": 0, "133": 0, "142": 0, "143": 0, "144": 0, "145": 0, "146": 0, "148": 0, "149": 0, "150": 0, "151": 0, "152": 0, "153": 0, "147": 0, "156": 0, "158": 0, "159": 0, "160": 0, "161": 0, "162": 0, "163": 0, "157": 0, "166": 0, "168": 0, "169": 0, "170": 0, "171": 0, "172": 0, "173": 0, "167": 0, "176": 0, "177": 0, "179": 0, "180": 0, "181": 0, "182": 0, "183": 0, "184": 0, "178": 0, "187": 0, "189": 0, "190": 0, "191": 0, "193": 0, "195": 0, "196": 0, "197": 0, "188": 0, "200": 0, "201": 0, "202": 0, "203": 0, "204": 0, "205": 0, "206": 0, "208": 0, "209": 0, "210": 0, "211": 0, "212": 0, "214": 0, "215": 0, "216": 0, "218": 0, "221": 0, "222": 0, "223": 0, "213": 0, "226": 0, "227": 0, "228": 0, "229": 0, "230": 0, "231": 0, "233": 0, "235": 0, "236": 0, "237": 0, "239": 0, "240": 0, "241": 0, "243": 0, "245": 0, "246": 0, "247": 0, "238": 0, "250": 0, "192": 0, "219": 0, "217": 0, "232": 0, "242": 0, "256": 1, "266": 1, "269": 1, "274": 1, "279": 1, "284": 1, "287": 1, "288": 1, "258": 0, "257": 0, "261": 0, "262": 0, "263": 0, "260": 0, "267": 0, "270": 0, "271": 0, "272": 0, "275": 0, "276": 0, "277": 0, "282": 0, "285": 0, "289": 0, "295": 1, "300": 1, "301": 1, "304": 1, "305": 1, "308": 1, "319": 1, "322": 1, "374": 1, "383": 1, "389": 1, "392": 1, "393": 1, "396": 1, "296": 0, "297": 0, "298": 0, "302": 0, "306": 0, "310": 0, "311": 0, "309": 0, "314": 0, "315": 0, "316": 0, "313": 0, "320": 0, "323": 0, "324": 0, "325": 0, "326": 0, "327": 0, "329": 0, "330": 0, "332": 0, "334": 0, "335": 0, "336": 0, "337": 0, "339": 0, "341": 0, "342": 0, "340": 0, "344": 0, "345": 0, "346": 0, "347": 0, "348": 0, "349": 0, "350": 0, "353": 0, "354": 0, "356": 0, "357": 0, "359": 0, "360": 0, "361": 0, "362": 0, "363": 0, "364": 0, "368": 0, "369": 0, "370": 0, "371": 0, "375": 0, "376": 0, "378": 0, "380": 0, "381": 0, "385": 0, "386": 0, "384": 0, "390": 0, "394": 0, "397": 0, "398": 0, "400": 0, "401": 0, "402": 0, "399": 0, "408": 0, "409": 0, "407": 0, "414": 1, "415": 5, "416": 2, "417": 3, "423": 1, "427": 1, "438": 1, "441": 1, "459": 1, "462": 1, "468": 1, "469": 1, "424": 0, "425": 0, "429": 0, "430": 0, "428": 0, "433": 0, "434": 0, "435": 0, "432": 0, "439": 0, "442": 0, "443": 0, "444": 0, "445": 0, "446": 0, "447": 0, "448": 0, "451": 0, "452": 0, "453": 0, "454": 0, "455": 0, "456": 0, "460": 0, "463": 0, "464": 0, "465": 0, "470": 0, "474": 1, "476": 1, "482": 1, "483": 1, "486": 1, "497": 1, "504": 1, "515": 1, "518": 1, "527": 1, "530": 1, "531": 1, "534": 1, "477": 4, "478": 2, "479": 4, "480": 4, "484": 0, "488": 0, "489": 0, "487": 0, "492": 0, "493": 0, "494": 0, "491": 0, "498": 0, "499": 0, "500": 0, "501": 0, "505": 0, "506": 0, "507": 0, "508": 0, "509": 0, "510": 0, "511": 0, "512": 0, "516": 0, "520": 0, "522": 0, "523": 0, "519": 0, "528": 0, "532": 0, "536": 3, "537": 3, "538": 3, "535": 3, "548": 1, "550": 1, "551": 2, "559": 1, "561": 1, "562": 2, "568": 1, "570": 1, "574": 1, "585": 1, "592": 1, "610": 1, "613": 1, "622": 1, "625": 1, "626": 1, "571": 0, "572": 0, "576": 0, "577": 0, "575": 0, "580": 0, "581": 0, "582": 0, "579": 0, "586": 0, "587": 0, "588": 0, "589": 0, "593": 0, "594": 0, "595": 0, "597": 0, "598": 0, "601": 0, "602": 0, "603": 0, "604": 0, "605": 0, "606": 0, "607": 0, "611": 0, "615": 0, "617": 0, "618": 0, "614": 0, "623": 0, "627": 0, "638": 1, "652": 1, "656": 1, "667": 1, "675": 1, "678": 1, "681": 1, "684": 1, "685": 1, "653": 0, "654": 0, "658": 0, "659": 0, "657": 0, "662": 0, "663": 0, "664": 0, "661": 0, "668": 0, "669": 0, "670": 0, "671": 0, "672": 0, "676": 0, "679": 0, "682": 0, "686": 0, "692": 1, "694": 1, "698": 1, "705": 1, "708": 1, "711": 1, "714": 1, "717": 1, "718": 1, "695": 0, "696": 0, "700": 0, "701": 0, "702": 0, "699": 0, "706": 0, "709": 0, "712": 0, "715": 0, "719": 0, "723": 1, "725": 1, "726": 1, "727": 0, "733": 1, "742": 1, "745": 1, "750": 1, "755": 1, "766": 1, "779": 1, "780": 1, "734": 0, "735": 0, "736": 0, "737": 0, "738": 0, "740": 0, "743": 0, "746": 0, "747": 0, "748": 0, "751": 0, "752": 0, "753": 0, "757": 0, "758": 0, "756": 0, "761": 0, "762": 0, "763": 0, "760": 0, "767": 0, "768": 0, "769": 0, "770": 0, "771": 0, "773": 0, "774": 0, "775": 0, "776": 0, "781": 0, "787": 1, "791": 1, "794": 1, "801": 1, "808": 1, "819": 1, "822": 1, "823": 1, "788": 0, "789": 0, "792": 0, "795": 0, "796": 0, "797": 0, "798": 0, "799": 0, "802": 0, "803": 0, "804": 0, "805": 0, "806": 0, "810": 0, "811": 0, "809": 0, "814": 0, "815": 0, "816": 0, "813": 0, "820": 0, "824": 0, "828": 1, "830": 1, "834": 1, "837": 1, "842": 1, "847": 1, "853": 1, "856": 1, "857": 1, "831": 0, "832": 0, "835": 0, "838": 0, "839": 0, "840": 0, "843": 0, "844": 0, "845": 0, "848": 0, "849": 0, "850": 0, "854": 0, "858": 0, "862": 1, "864": 1, "868": 1, "871": 1, "878": 1, "885": 1, "891": 1, "894": 1, "895": 1, "865": 0, "866": 0, "869": 0, "872": 0, "873": 0, "874": 0, "875": 0, "876": 0, "879": 0, "880": 0, "881": 0, "882": 0, "883": 0, "886": 0, "887": 0, "888": 0, "892": 0, "896": 0}}
+ git checkout 0ab58c120939093fea90822f376e1866fc714d1f
M	django/db/migrations/operations/models.py
Note: switching to '0ab58c120939093fea90822f376e1866fc714d1f'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at 0ab58c1209 Refs #29026 -- Allowed customizing InteractiveMigrationQuestioner's prompt destination.
+ git apply /root/pre_state.patch
error: unrecognized input
