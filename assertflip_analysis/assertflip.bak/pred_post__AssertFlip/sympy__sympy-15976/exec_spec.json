{"instance_id": "sympy__sympy-15976", "repo": "sympy/sympy", "version": "1.4", "environment_setup_commit": "73b3f90093754c5ed1561bd885242330e3583004", "patch_list": ["diff --git a/sympy/printing/mathml.py b/sympy/printing/mathml.py\n--- a/sympy/printing/mathml.py\n+++ b/sympy/printing/mathml.py\n@@ -743,11 +743,6 @@ def _print_Sum(self, e):\n         return mrow\n \n     def _print_Symbol(self, sym, style='plain'):\n-        x = self.dom.createElement('mi')\n-\n-        if style == 'bold':\n-            x.setAttribute('mathvariant', 'bold')\n-\n         def join(items):\n             if len(items) > 1:\n                 mrow = self.dom.createElement('mrow')\n@@ -781,24 +776,24 @@ def translate(s):\n         mname.appendChild(self.dom.createTextNode(name))\n         if len(supers) == 0:\n             if len(subs) == 0:\n-                x.appendChild(self.dom.createTextNode(name))\n+                x = mname\n             else:\n-                msub = self.dom.createElement('msub')\n-                msub.appendChild(mname)\n-                msub.appendChild(join(subs))\n-                x.appendChild(msub)\n+                x = self.dom.createElement('msub')\n+                x.appendChild(mname)\n+                x.appendChild(join(subs))\n         else:\n             if len(subs) == 0:\n-                msup = self.dom.createElement('msup')\n-                msup.appendChild(mname)\n-                msup.appendChild(join(supers))\n-                x.appendChild(msup)\n+                x = self.dom.createElement('msup')\n+                x.appendChild(mname)\n+                x.appendChild(join(supers))\n             else:\n-                msubsup = self.dom.createElement('msubsup')\n-                msubsup.appendChild(mname)\n-                msubsup.appendChild(join(subs))\n-                msubsup.appendChild(join(supers))\n-                x.appendChild(msubsup)\n+                x = self.dom.createElement('msubsup')\n+                x.appendChild(mname)\n+                x.appendChild(join(subs))\n+                x.appendChild(join(supers))\n+        # Set bold font?\n+        if style == 'bold':\n+            x.setAttribute('mathvariant', 'bold')\n         return x\n \n     def _print_MatrixSymbol(self, sym):\n", "diff --git a/dev/null b/sympy/polys/tests/test_coverup_sympy__sympy-15976.py\nnew file mode 100644\nindex e69de29..eb6d7f7 100644\n--- /dev/null\n+++ b/sympy/polys/tests/test_coverup_sympy__sympy-15976.py\n@@ -0,0 +1,16 @@\n+from sympy import symbols\n+from sympy.printing.mathml import mathml\n+\n+def test_mathml_symbol_with_number():\n+    # Define symbols with names ending in numbers\n+    x2, y, z = symbols('x2 y z')\n+    \n+    # Create an expression using these symbols\n+    expr = x2 * z + x2**3\n+    \n+    # Convert the expression to MathML format\n+    mathml_output = mathml(expr, printer='presentation')\n+    \n+    # Check the MathML output to confirm the presence of the symbol 'x2'\n+    # The test should pass only when 'x2' is correctly visible in the MathML output\n+    assert '<mi>x2</mi>' in mathml_output\n"], "arch": "x86_64", "base_commit": "701441853569d370506514083b995d11f9a130bd", "test_directives": ["sympy/polys/tests/test_coverup_sympy__sympy-15976.py"], "coverage_files": ["sympy/printing/mathml.py"], "env_name": "testbed", "run_id": "assertflip", "patch_id": "pred_post__AssertFlip", "timeout": 1800, "rm_image": false, "force_rebuild": false, "exec_mode": "unit_test", "reproduction_script_name": null, "compute_coverage": true, "install": {"python": "3.9", "packages": "mpmath flake8", "pip_packages": ["mpmath==1.3.0", "flake8-comprehensions"], "install": "python -m pip install -e ."}, "cache_level": "instance", "test_command": "PYTHONWARNINGS='ignore::UserWarning,ignore::SyntaxWarning' python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(sympy/printing/mathml\\.py)' bin/test -C --verbose sympy/polys/tests/test_coverup_sympy__sympy-15976.p", "req_install_commands": ["conda create -n testbed python=3.9 mpmath flake8 -y"]}