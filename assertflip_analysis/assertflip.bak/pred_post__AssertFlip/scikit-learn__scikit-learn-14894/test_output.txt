+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD fdbaa58acbead5a254f2e6d597dc1ab3b947f4c6
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
nothing to commit, working tree clean
+ git show
commit fdbaa58acbead5a254f2e6d597dc1ab3b947f4c6
Author: Roman Yurchak <rth.yurchak@pm.me>
Date:   Mon Oct 7 17:35:01 2019 +0200

    TST Skip some doctests if pillow not installed (#15131)

diff --git a/build_tools/azure/install.sh b/build_tools/azure/install.sh
index 4c0622396a..b3a680d0a5 100755
--- a/build_tools/azure/install.sh
+++ b/build_tools/azure/install.sh
@@ -93,7 +93,7 @@ elif [[ "$DISTRIB" == "conda-pip-latest" ]]; then
     make_conda "python=$PYTHON_VERSION"
     python -m pip install numpy scipy joblib cython
     python -m pip install pytest==$PYTEST_VERSION pytest-cov pytest-xdist
-    python -m pip install pandas matplotlib pyamg pillow
+    python -m pip install pandas matplotlib pyamg
 fi
 
 if [[ "$COVERAGE" == "true" ]]; then
diff --git a/conftest.py b/conftest.py
index 73326d6d2e..0c0e21b69b 100644
--- a/conftest.py
+++ b/conftest.py
@@ -13,6 +13,7 @@ from _pytest.doctest import DoctestItem
 
 from sklearn import set_config
 from sklearn.utils import _IS_32BIT
+from sklearn.externals import _pilutil
 
 PYTEST_MIN_VERSION = '3.3.0'
 
@@ -68,6 +69,13 @@ def pytest_collection_modifyitems(config, items):
         for item in items:
             if isinstance(item, DoctestItem):
                 item.add_marker(skip_marker)
+    elif not _pilutil.pillow_installed:
+        skip_marker = pytest.mark.skip(reason="pillow (or PIL) not installed!")
+        for item in items:
+            if item.name in [
+                    "sklearn.feature_extraction.image.PatchExtractor",
+                    "sklearn.feature_extraction.image.extract_patches_2d"]:
+                item.add_marker(skip_marker)
 
 
 def pytest_configure(config):
+ git diff fdbaa58acbead5a254f2e6d597dc1ab3b947f4c6
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -v --no-use-pep517 --no-build-isolation -e .
Using pip 21.2.2 from /opt/miniconda3/envs/testbed/lib/python3.6/site-packages/pip (python 3.6)
Obtaining file:///testbed
    Running command python setup.py egg_info
    running egg_info
    creating /tmp/pip-pip-egg-info-7b3tormz/scikit_learn.egg-info
    writing /tmp/pip-pip-egg-info-7b3tormz/scikit_learn.egg-info/PKG-INFO
    writing dependency_links to /tmp/pip-pip-egg-info-7b3tormz/scikit_learn.egg-info/dependency_links.txt
    writing requirements to /tmp/pip-pip-egg-info-7b3tormz/scikit_learn.egg-info/requires.txt
    writing top-level names to /tmp/pip-pip-egg-info-7b3tormz/scikit_learn.egg-info/top_level.txt
    writing manifest file '/tmp/pip-pip-egg-info-7b3tormz/scikit_learn.egg-info/SOURCES.txt'
    reading manifest file '/tmp/pip-pip-egg-info-7b3tormz/scikit_learn.egg-info/SOURCES.txt'
    reading manifest template 'MANIFEST.in'
    adding license file 'COPYING'
    writing manifest file '/tmp/pip-pip-egg-info-7b3tormz/scikit_learn.egg-info/SOURCES.txt'
    Partial import of sklearn during the build process.
Requirement already satisfied: numpy>=1.11.0 in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from scikit-learn==0.22.dev0) (1.19.2)
Requirement already satisfied: scipy>=0.17.0 in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from scikit-learn==0.22.dev0) (1.5.2)
Requirement already satisfied: joblib>=0.11 in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from scikit-learn==0.22.dev0) (1.1.1)
Installing collected packages: scikit-learn
  Attempting uninstall: scikit-learn
    Found existing installation: scikit-learn 0.22.dev0
    Uninstalling scikit-learn-0.22.dev0:
      Removing file or directory /opt/miniconda3/envs/testbed/lib/python3.6/site-packages/scikit-learn.egg-link
      Removing pth entries from /opt/miniconda3/envs/testbed/lib/python3.6/site-packages/easy-install.pth:
      Removing entry: /testbed
      Successfully uninstalled scikit-learn-0.22.dev0
  Running setup.py develop for scikit-learn
    Running command /opt/miniconda3/envs/testbed/bin/python -c 'import io, os, sys, setuptools, tokenize; sys.argv[0] = '"'"'/testbed/setup.py'"'"'; __file__='"'"'/testbed/setup.py'"'"';f = getattr(tokenize, '"'"'open'"'"', open)(__file__) if os.path.exists(__file__) else io.StringIO('"'"'from setuptools import setup; setup()'"'"');code = f.read().replace('"'"'\r\n'"'"', '"'"'\n'"'"');f.close();exec(compile(code, __file__, '"'"'exec'"'"'))' develop --no-deps
    C compiler: gcc -pthread -B /opt/miniconda3/envs/testbed/compiler_compat -Wl,--sysroot=/ -Wsign-compare -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -fPIC

    compile options: '-c'
    extra options: '-fopenmp'
    gcc: test_openmp.c
    gcc -pthread -B /opt/miniconda3/envs/testbed/compiler_compat -Wl,--sysroot=/ objects/test_openmp.o -o test_openmp -fopenmp
    running develop
    running build_scripts
    running egg_info
    running build_src
    build_src
    building library "libsvm-skl" sources
    building extension "sklearn.__check_build._check_build" sources
    building extension "sklearn.preprocessing._csr_polynomial_expansion" sources
    building extension "sklearn.cluster._dbscan_inner" sources
    building extension "sklearn.cluster._hierarchical" sources
    building extension "sklearn.cluster._k_means_elkan" sources
    building extension "sklearn.cluster._k_means" sources
    building extension "sklearn.datasets._svmlight_format" sources
    building extension "sklearn.decomposition._online_lda" sources
    building extension "sklearn.decomposition.cdnmf_fast" sources
    building extension "sklearn.ensemble._gradient_boosting" sources
    building extension "sklearn.ensemble._hist_gradient_boosting._gradient_boosting" sources
    building extension "sklearn.ensemble._hist_gradient_boosting.histogram" sources
    building extension "sklearn.ensemble._hist_gradient_boosting.splitting" sources
    building extension "sklearn.ensemble._hist_gradient_boosting._binning" sources
    building extension "sklearn.ensemble._hist_gradient_boosting._predictor" sources
    building extension "sklearn.ensemble._hist_gradient_boosting._loss" sources
    building extension "sklearn.ensemble._hist_gradient_boosting.common" sources
    building extension "sklearn.ensemble._hist_gradient_boosting.utils" sources
    building extension "sklearn.feature_extraction._hashing" sources
    building extension "sklearn.manifold._utils" sources
    building extension "sklearn.manifold._barnes_hut_tsne" sources
    building extension "sklearn.metrics.cluster.expected_mutual_info_fast" sources
    building extension "sklearn.metrics.pairwise_fast" sources
    building extension "sklearn.neighbors.ball_tree" sources
    building extension "sklearn.neighbors.kd_tree" sources
    building extension "sklearn.neighbors.dist_metrics" sources
    building extension "sklearn.neighbors.typedefs" sources
    building extension "sklearn.neighbors.quad_tree" sources
    building extension "sklearn.tree._tree" sources
    building extension "sklearn.tree._splitter" sources
    building extension "sklearn.tree._criterion" sources
    building extension "sklearn.tree._utils" sources
    building extension "sklearn.utils.sparsefuncs_fast" sources
    building extension "sklearn.utils._cython_blas" sources
    building extension "sklearn.utils.arrayfuncs" sources
    building extension "sklearn.utils.murmurhash" sources
    building extension "sklearn.utils.graph_shortest_path" sources
    building extension "sklearn.utils.fast_dict" sources
    building extension "sklearn.utils.seq_dataset" sources
    building extension "sklearn.utils.weight_vector" sources
    building extension "sklearn.utils._random" sources
    building extension "sklearn.utils._logistic_sigmoid" sources
    building extension "sklearn.svm.libsvm" sources
    building extension "sklearn.svm.liblinear" sources
    building extension "sklearn.svm.libsvm_sparse" sources
    building extension "sklearn.linear_model.cd_fast" sources
    building extension "sklearn.linear_model.sgd_fast" sources
    building extension "sklearn.linear_model.sag_fast" sources
    building extension "sklearn._isotonic" sources
    building data_files sources
    build_src: building npy-pkg config files
    writing scikit_learn.egg-info/PKG-INFO
    writing dependency_links to scikit_learn.egg-info/dependency_links.txt
    writing requirements to scikit_learn.egg-info/requires.txt
    writing top-level names to scikit_learn.egg-info/top_level.txt
    reading manifest file 'scikit_learn.egg-info/SOURCES.txt'
    reading manifest template 'MANIFEST.in'
    adding license file 'COPYING'
    writing manifest file 'scikit_learn.egg-info/SOURCES.txt'
    running build_ext
    customize UnixCCompiler
    customize UnixCCompiler using build_clib
    customize UnixCCompiler
    customize UnixCCompiler using build_ext_subclass
    customize UnixCCompiler
    customize UnixCCompiler using build_ext_subclass
    Creating /opt/miniconda3/envs/testbed/lib/python3.6/site-packages/scikit-learn.egg-link (link to .)
    Adding scikit-learn 0.22.dev0 to easy-install.pth file

    Installed /testbed
    Partial import of sklearn during the build process.
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv
Successfully installed scikit-learn-0.22.dev0
+ git apply -v -
Checking patch sklearn/svm/base.py...
Applied patch sklearn/svm/base.py cleanly.
+ git apply -v -
<stdin>:19: trailing whitespace.
    
<stdin>:22: trailing whitespace.
    
<stdin>:27: trailing whitespace.
    
Checking patch sklearn/tests/test_coverup_scikit-learn__scikit-learn-14894.py...
Applied patch sklearn/tests/test_coverup_scikit-learn__scikit-learn-14894.py cleanly.
warning: 3 lines add whitespace errors.
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(sklearn/svm/base\.py)' -m pytest --no-header -rA -p no:cacheprovider sklearn/tests/test_coverup_scikit-learn__scikit-learn-14894.py
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(sklearn/svm/base\\.py)']
============================= test session starts ==============================
collected 1 item

sklearn/tests/test_coverup_scikit-learn__scikit-learn-14894.py .         [100%]

==================================== PASSES ====================================
____________________ test_zero_division_error_in_sparse_fit ____________________
----------------------------- Captured stdout call -----------------------------
1.00 base.py(76):         if self._impl not in LIBSVM_IMPL:  # pragma: no cover
1.00 base.py(80):         if gamma == 0:
1.00 base.py(85):         self.kernel = kernel
1.00 base.py(86):         self.degree = degree
1.00 base.py(87):         self.gamma = gamma
1.00 base.py(88):         self.coef0 = coef0
1.00 base.py(89):         self.tol = tol
1.00 base.py(90):         self.C = C
1.00 base.py(91):         self.nu = nu
1.00 base.py(92):         self.epsilon = epsilon
1.00 base.py(93):         self.shrinking = shrinking
1.00 base.py(94):         self.probability = probability
1.00 base.py(95):         self.cache_size = cache_size
1.00 base.py(96):         self.class_weight = class_weight
1.00 base.py(97):         self.verbose = verbose
1.00 base.py(98):         self.max_iter = max_iter
1.00 base.py(99):         self.random_state = random_state
1.00 base.py(138):         rnd = check_random_state(self.random_state)
1.00 base.py(140):         sparse = sp.isspmatrix(X)
1.00 base.py(141):         if sparse and self.kernel == "precomputed":
1.00 base.py(143):         self._sparse = sparse and not callable(self.kernel)
1.00 base.py(145):         X, y = check_X_y(X, y, dtype=np.float64,
1.00 base.py(146):                          order='C', accept_sparse='csr',
1.00 base.py(147):                          accept_large_sparse=False)
1.00 base.py(148):         y = self._validate_targets(y)
1.00 base.py(221):         self.class_weight_ = np.empty(0)
1.00 base.py(222):         return column_or_1d(y, warn=True).astype(np.float64, copy=False)
1.00 base.py(150):         sample_weight = np.asarray([]
1.00 base.py(151):                                    if sample_weight is None
1.00 base.py(153):         solver_type = LIBSVM_IMPL.index(self._impl)
1.00 base.py(156):         if solver_type != 2 and X.shape[0] != y.shape[0]:
1.00 base.py(161):         if self.kernel == "precomputed" and X.shape[0] != X.shape[1]:
1.00 base.py(166):         if sample_weight.shape[0] > 0 and sample_weight.shape[0] != X.shape[0]:
1.00 base.py(173):         if isinstance(self.gamma, str):
1.00 base.py(187):             self._gamma = self.gamma
1.00 base.py(189):         kernel = self.kernel
1.00 base.py(190):         if callable(kernel):
1.00 base.py(193):         fit = self._sparse_fit if self._sparse else self._dense_fit
1.00 base.py(194):         if self.verbose:  # pragma: no cover
1.00 base.py(197):         seed = rnd.randint(np.iinfo('i').max)
1.00 base.py(198):         fit(X, y, sample_weight, solver_type, kernel, random_seed=seed)
1.00 base.py(263):         X.data = np.asarray(X.data, dtype=np.float64, order='C')
1.00 base.py(264):         X.sort_indices()
1.00 base.py(266):         kernel_type = self._sparse_kernels.index(kernel)
1.00 base.py(268):         libsvm_sparse.set_verbosity_wrap(self.verbose)
1.00 base.py(273):             libsvm_sparse.libsvm_sparse_train(
1.00 base.py(274):                 X.shape[1], X.data, X.indices, X.indptr, y, solver_type,
1.00 base.py(275):                 kernel_type, self.degree, self._gamma, self.coef0, self.tol,
1.00 base.py(276):                 self.C, self.class_weight_,
1.00 base.py(277):                 sample_weight, self.nu, self.cache_size, self.epsilon,
1.00 base.py(278):                 int(self.shrinking), int(self.probability), self.max_iter,
1.00 base.py(279):                 random_seed)
1.00 base.py(281):         self._warn_from_fit_status()
1.00 base.py(225):         assert self.fit_status_ in (0, 1)
1.00 base.py(226):         if self.fit_status_ == 1:
1.00 base.py(283):         if hasattr(self, "classes_"):
1.00 base.py(286):             n_class = 1
1.00 base.py(287):         n_SV = self.support_vectors_.shape[0]
1.00 base.py(289):         dual_coef_indices = np.tile(np.arange(n_SV), n_class)
1.00 base.py(290):         if not n_SV:
1.00 base.py(291):             self.dual_coef_ = sp.csr_matrix([])
1.00 base.py(201):         self.shape_fit_ = X.shape
1.00 base.py(206):         self._intercept_ = self.intercept_.copy()
1.00 base.py(207):         self._dual_coef_ = self.dual_coef_
1.00 base.py(208):         if self._impl in ['c_svc', 'nu_svc'] and len(self.classes_) == 2:
1.00 base.py(212):         return self
=========================== short test summary info ============================
PASSED sklearn/tests/test_coverup_scikit-learn__scikit-learn-14894.py::test_zero_division_error_in_sparse_fit
============================== 1 passed in 0.12s ===============================
+ cat coverage.cover
{"/testbed/sklearn/svm/base.py": {"1": 1, "2": 1, "3": 1, "4": 1, "6": 1, "7": 1, "8": 1, "9": 1, "10": 1, "11": 1, "12": 1, "13": 1, "14": 1, "15": 1, "16": 1, "17": 1, "18": 1, "19": 1, "22": 1, "25": 1, "58": 2, "506": 2, "735": 1, "799": 1, "34": 0, "38": 0, "39": 0, "40": 0, "42": 0, "43": 0, "45": 0, "48": 0, "50": 0, "53": 0, "54": 0, "55": 0, "69": 1, "71": 1, "101": 1, "106": 1, "214": 1, "224": 1, "232": 1, "261": 1, "299": 1, "318": 1, "340": 1, "363": 1, "374": 1, "404": 1, "420": 1, "442": 1, "469": 1, "487": 1, "490": 1, "76": 1, "77": 0, "78": 0, "80": 1, "81": 0, "83": 0, "85": 1, "86": 1, "87": 1, "88": 1, "89": 1, "90": 1, "91": 1, "92": 1, "93": 1, "94": 1, "95": 1, "96": 1, "97": 1, "98": 1, "99": 1, "104": 0, "138": 1, "140": 1, "141": 1, "142": 0, "143": 1, "145": 1, "146": 1, "147": 1, "148": 1, "150": 1, "151": 1, "152": 0, "153": 1, "156": 1, "157": 0, "158": 0, "159": 0, "161": 1, "162": 0, "164": 0, "166": 1, "167": 0, "171": 0, "173": 1, "174": 0, "177": 0, "178": 0, "179": 0, "180": 0, "182": 0, "183": 0, "184": 0, "187": 1, "189": 1, "190": 1, "191": 0, "193": 1, "194": 1, "195": 0, "197": 1, "198": 1, "201": 1, "206": 1, "207": 1, "208": 1, "209": 0, "210": 0, "212": 1, "221": 1, "222": 1, "225": 1, "226": 1, "227": 0, "230": 0, "234": 0, "237": 0, "238": 0, "240": 0, "241": 0, "243": 0, "249": 0, "250": 0, "251": 0, "252": 0, "253": 0, "254": 0, "255": 0, "256": 0, "257": 0, "259": 0, "263": 1, "264": 1, "266": 1, "268": 1, "273": 1, "274": 1, "275": 1, "276": 1, "277": 1, "278": 1, "279": 1, "281": 1, "283": 1, "284": 0, "286": 1, "287": 1, "289": 1, "290": 1, "291": 1, "293": 0, "294": 0, "295": 0, "296": 0, "297": 0, "314": 0, "315": 0, "316": 0, "319": 0, "320": 0, "321": 0, "323": 0, "324": 0, "325": 0, "326": 0, "327": 0, "329": 0, "331": 0, "333": 0, "334": 0, "335": 0, "336": 0, "337": 0, "338": 0, "342": 0, "343": 0, "344": 0, "346": 0, "348": 0, "350": 0, "351": 0, "352": 0, "353": 0, "354": 0, "355": 0, "356": 0, "357": 0, "358": 0, "359": 0, "360": 0, "361": 0, "365": 0, "368": 0, "369": 0, "370": 0, "371": 0, "372": 0, "389": 0, "390": 0, "392": 0, "393": 0, "395": 0, "399": 0, "400": 0, "402": 0, "405": 0, "406": 0, "408": 0, "409": 0, "410": 0, "412": 0, "413": 0, "414": 0, "415": 0, "416": 0, "417": 0, "418": 0, "421": 0, "423": 0, "424": 0, "425": 0, "427": 0, "429": 0, "430": 0, "431": 0, "432": 0, "433": 0, "434": 0, "435": 0, "436": 0, "437": 0, "438": 0, "439": 0, "440": 0, "443": 0, "445": 0, "446": 0, "447": 0, "448": 0, "449": 0, "450": 0, "452": 0, "453": 0, "454": 0, "455": 0, "456": 0, "458": 0, "459": 0, "460": 0, "462": 0, "463": 0, "464": 0, "466": 0, "467": 0, "471": 0, "472": 0, "475": 0, "479": 0, "481": 0, "484": 0, "485": 0, "488": 0, "492": 0, "493": 0, "494": 0, "495": 0, "497": 0, "498": 0, "499": 0, "503": 0, "508": 1, "522": 1, "536": 1, "567": 1, "600": 1, "608": 1, "638": 1, "647": 1, "677": 1, "680": 1, "697": 1, "719": 1, "513": 0, "514": 0, "515": 0, "516": 0, "517": 0, "518": 0, "519": 0, "520": 0, "523": 0, "524": 0, "525": 0, "526": 0, "527": 0, "528": 0, "529": 0, "530": 0, "532": 0, "534": 0, "562": 0, "563": 0, "564": 0, "565": 0, "583": 0, "584": 0, "585": 0, "588": 0, "589": 0, "590": 0, "591": 0, "593": 0, "594": 0, "601": 0, "602": 0, "604": 0, "605": 0, "635": 0, "636": 0, "639": 0, "640": 0, "641": 0, "644": 0, "645": 0, "674": 0, "675": 0, "678": 0, "681": 0, "683": 0, "684": 0, "685": 0, "687": 0, "688": 0, "689": 0, "690": 0, "691": 0, "692": 0, "693": 0, "695": 0, "698": 0, "700": 0, "701": 0, "702": 0, "704": 0, "706": 0, "707": 0, "708": 0, "709": 0, "710": 0, "711": 0, "712": 0, "713": 0, "714": 0, "715": 0, "716": 0, "717": 0, "720": 0, "722": 0, "725": 0, "726": 0, "727": 0, "728": 0, "730": 0, "732": 0, "753": 0, "754": 0, "756": 0, "758": 0, "759": 0, "761": 0, "763": 0, "764": 0, "767": 0, "768": 0, "769": 0, "770": 0, "771": 0, "773": 0, "774": 0, "775": 0, "777": 0, "778": 0, "779": 0, "781": 0, "783": 0, "784": 0, "785": 0, "787": 0, "789": 0, "790": 0, "792": 0, "891": 0, "892": 0, "893": 0, "894": 0, "895": 0, "896": 0, "898": 0, "900": 0, "902": 0, "903": 0, "904": 0, "905": 0, "906": 0, "907": 0, "910": 0, "911": 0, "912": 0, "913": 0, "915": 0, "917": 0, "919": 0, "920": 0, "921": 0, "924": 0, "925": 0, "928": 0, "929": 0, "931": 0, "932": 0, "934": 0, "935": 0, "936": 0, "937": 0, "938": 0, "943": 0, "944": 0, "945": 0, "946": 0, "948": 0, "949": 0, "950": 0, "952": 0, "953": 0, "955": 0}}
+ git checkout fdbaa58acbead5a254f2e6d597dc1ab3b947f4c6
M	sklearn/svm/base.py
Note: switching to 'fdbaa58acbead5a254f2e6d597dc1ab3b947f4c6'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at fdbaa58acb TST Skip some doctests if pillow not installed (#15131)
+ git apply /root/pre_state.patch
error: unrecognized input
