+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD f5e965947af2410ded92cfad987aaf45262ea434
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch master
nothing to commit, working tree clean
+ git show
commit f5e965947af2410ded92cfad987aaf45262ea434
Merge: 5b8ea7b1e7 1f88a07f34
Author: Oscar Benjamin <oscar.j.benjamin@gmail.com>
Date:   Wed Sep 25 10:51:12 2019 +0100

    Merge pull request #17495 from oscargus/Sreplace
    
    Change S(0) to S.Zero etc

+ git diff f5e965947af2410ded92cfad987aaf45262ea434
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Requirement already satisfied: mpmath>=0.19 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from sympy==1.5.dev0) (1.3.0)
Installing collected packages: sympy
  Attempting uninstall: sympy
    Found existing installation: sympy 1.5.dev0
    Uninstalling sympy-1.5.dev0:
      Successfully uninstalled sympy-1.5.dev0
  DEPRECATION: Legacy editable install of sympy==1.5.dev0 from file:///testbed (setup.py develop) is deprecated. pip 25.3 will enforce this behaviour change. A possible replacement is to add a pyproject.toml or enable --use-pep517, and use setuptools >= 64. If the resulting installation is not behaving as expected, try using --config-settings editable_mode=compat. Please consult the setuptools documentation for more information. Discussion can be found at https://github.com/pypa/pip/issues/11457
  Running setup.py develop for sympy
Successfully installed sympy
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git apply -v -
Checking patch sympy/geometry/point.py...
Applied patch sympy/geometry/point.py cleanly.
+ git apply -v -
<stdin>:13: trailing whitespace.
    
<stdin>:16: trailing whitespace.
    
<stdin>:20: trailing whitespace.
    
Checking patch sympy/polys/tests/test_coverup_sympy__sympy-17655.py...
Applied patch sympy/polys/tests/test_coverup_sympy__sympy-17655.py cleanly.
warning: 3 lines add whitespace errors.
+ PYTHONWARNINGS=ignore::UserWarning,ignore::SyntaxWarning
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(sympy/geometry/point\.py)' bin/test -C --verbose sympy/polys/tests/test_coverup_sympy__sympy-17655.p
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(sympy/geometry/point\\.py)']
0.62 point.py(1): """Geometrical Points.
0.62 point.py(20): from __future__ import division, print_function
0.62 point.py(22): import warnings
0.62 point.py(24): from sympy.core import S, sympify, Expr
0.62 point.py(25): from sympy.core.compatibility import is_sequence
0.62 point.py(26): from sympy.core.containers import Tuple
0.62 point.py(27): from sympy.simplify import nsimplify, simplify
0.62 point.py(28): from sympy.geometry.exceptions import GeometryError
0.62 point.py(29): from sympy.functions.elementary.miscellaneous import sqrt
0.62 point.py(30): from sympy.functions.elementary.complexes import im
0.62 point.py(31): from sympy.matrices import Matrix
0.62 point.py(32): from sympy.core.numbers import Float
0.62 point.py(33): from sympy.core.evaluate import global_evaluate
0.62 point.py(34): from sympy.core.add import Add
0.62 point.py(35): from sympy.utilities.iterables import uniq
0.62 point.py(36): from sympy.utilities.misc import filldedent, func_name, Undecidable
0.62 point.py(38): from .entity import GeometryEntity
0.64 point.py(41): class Point(GeometryEntity):
0.64 point.py(41): class Point(GeometryEntity):
0.64 point.py(42):     """A point in a n-dimensional Euclidean space.
0.64 point.py(106):     is_Point = True
0.64 point.py(108):     def __new__(cls, *args, **kwargs):
0.64 point.py(180):     def __abs__(self):
0.64 point.py(185):     def __add__(self, other):
0.64 point.py(224):     def __contains__(self, item):
0.64 point.py(227):     def __div__(self, divisor):
0.64 point.py(233):     def __eq__(self, other):
0.64 point.py(238):     def __getitem__(self, key):
0.64 point.py(241):     def __hash__(self):
0.64 point.py(244):     def __iter__(self):
0.64 point.py(247):     def __len__(self):
0.64 point.py(250):     def __mul__(self, factor):
0.64 point.py(281):     def __rmul__(self, factor):
0.64 point.py(285):     def __neg__(self):
0.64 point.py(290):     def __sub__(self, other):
0.64 point.py(295):     @classmethod
0.64 point.py(296):     def _normalize_dimension(cls, *points, **kwargs):
0.64 point.py(313):     @staticmethod
0.64 point.py(314):     def affine_rank(*args):
0.64 point.py(335):     @property
0.64 point.py(336):     def ambient_dimension(self):
0.64 point.py(340):     @classmethod
0.64 point.py(341):     def are_coplanar(cls, *points):
0.64 point.py(386):     def distance(self, other):
0.64 point.py(438):     def dot(self, p):
0.64 point.py(444):     def equals(self, other):
0.64 point.py(451):     def evalf(self, prec=None, **options):
0.64 point.py(482):     def intersection(self, other):
0.64 point.py(523):     def is_collinear(self, *args):
0.64 point.py(561):     def is_concyclic(self, *args):
0.64 point.py(617):     @property
0.64 point.py(618):     def is_nonzero(self):
0.64 point.py(626):     def is_scalar_multiple(self, p):
0.64 point.py(645):     @property
0.64 point.py(646):     def is_zero(self):
0.64 point.py(656):     @property
0.64 point.py(657):     def length(self):
0.64 point.py(671):     def midpoint(self, p):
0.64 point.py(701):     @property
0.64 point.py(702):     def origin(self):
0.64 point.py(707):     @property
0.64 point.py(708):     def orthogonal_direction(self):
0.64 point.py(733):     @staticmethod
0.64 point.py(734):     def project(a, b):
0.64 point.py(772):     def taxicab_distance(self, p):
0.64 point.py(805):     def canberra_distance(self, p):
0.64 point.py(851):     @property
0.64 point.py(852):     def unit(self):
0.64 point.py(857):     n = evalf
0.64 point.py(859):     __truediv__ = __div__
0.64 point.py(861): class Point2D(Point):
0.64 point.py(861): class Point2D(Point):
0.64 point.py(862):     """A point in a 2-dimensional Euclidean space.
0.64 point.py(911):     _ambient_dimension = 2
0.64 point.py(913):     def __new__(cls, *args, **kwargs):
0.64 point.py(919):     def __contains__(self, item):
0.64 point.py(922):     @property
0.64 point.py(923):     def bounds(self):
0.64 point.py(931):     def rotate(self, angle, pt=None):
0.64 point.py(965):     def scale(self, x=1, y=1, pt=None):
0.64 point.py(992):     def transform(self, matrix):
0.64 point.py(1009):     def translate(self, x=0, y=0):
0.64 point.py(1032):     @property
0.64 point.py(1033):     def x(self):
0.64 point.py(1047):     @property
0.64 point.py(1048):     def y(self):
0.64 point.py(1062): class Point3D(Point):
0.64 point.py(1062): class Point3D(Point):
0.64 point.py(1063):     """A point in a 3-dimensional Euclidean space.
0.64 point.py(1107):     _ambient_dimension = 3
0.64 point.py(1109):     def __new__(cls, *args, **kwargs):
0.64 point.py(1115):     def __contains__(self, item):
0.64 point.py(1118):     @staticmethod
0.64 point.py(1119):     def are_collinear(*points):
0.64 point.py(1154):     def direction_cosine(self, point):
0.64 point.py(1181):     def direction_ratio(self, point):
0.64 point.py(1205):     def intersection(self, other):
0.64 point.py(1243):     def scale(self, x=1, y=1, z=1, pt=None):
0.64 point.py(1270):     def transform(self, matrix):
0.64 point.py(1289):     def translate(self, x=0, y=0, z=0):
0.64 point.py(1312):     @property
0.64 point.py(1313):     def x(self):
0.64 point.py(1327):     @property
0.64 point.py(1328):     def y(self):
0.64 point.py(1342):     @property
0.64 point.py(1343):     def z(self):
============================= test process starts ==============================
executable:         /opt/miniconda3/envs/testbed/bin/python3  (3.9.23-final-0) [CPython]
architecture:       64-bit
cache:              no
ground types:       python 
numpy:              None
random seed:        4915927
hash randomization: on (PYTHONHASHSEED=2220996869)

sympy/polys/tests/test_coverup_sympy__sympy-17655.py[1] 
test_point_multiplication_order 0.68 point.py(109):         evaluate = kwargs.get('evaluate', global_evaluate[0])
0.68 point.py(110):         on_morph = kwargs.get('on_morph', 'ignore')
0.68 point.py(113):         coords = args[0] if len(args) == 1 else args
0.68 point.py(116):         if isinstance(coords, Point):
0.68 point.py(123):         if not is_sequence(coords):
0.68 point.py(129):         if len(coords) == 0 and kwargs.get('dim', None):
0.68 point.py(132):         coords = Tuple(*coords)
0.68 point.py(133):         dim = kwargs.get('dim', len(coords))
0.68 point.py(135):         if len(coords) < 2:
0.68 point.py(139):         if len(coords) != dim:
0.68 point.py(152):         if any(coords[dim:]):
0.68 point.py(154):         if any(a.is_number and im(a) for a in coords):
0.68 point.py(154):         if any(a.is_number and im(a) for a in coords):
0.68 point.py(154):         if any(a.is_number and im(a) for a in coords):
0.68 point.py(154):         if any(a.is_number and im(a) for a in coords):
0.68 point.py(156):         if not all(isinstance(a, Expr) for a in coords):
0.68 point.py(156):         if not all(isinstance(a, Expr) for a in coords):
0.68 point.py(156):         if not all(isinstance(a, Expr) for a in coords):
0.68 point.py(156):         if not all(isinstance(a, Expr) for a in coords):
0.68 point.py(160):         coords = coords[:dim] + (S.Zero,)*(dim - len(coords))
0.68 point.py(164):         if evaluate:
0.68 point.py(165):             coords = coords.xreplace(dict(
0.68 point.py(166):                 [(f, simplify(nsimplify(f, rational=True)))
0.68 point.py(167):                  for f in coords.atoms(Float)]))
0.68 point.py(166):                 [(f, simplify(nsimplify(f, rational=True)))
0.68 point.py(166):                 [(f, simplify(nsimplify(f, rational=True)))
0.68 point.py(165):             coords = coords.xreplace(dict(
0.68 point.py(170):         if len(coords) == 2:
0.68 point.py(171):             kwargs['_nocheck'] = True
0.68 point.py(172):             return Point2D(*coords, **kwargs)
0.68 point.py(914):         if not kwargs.pop('_nocheck', False):
0.68 point.py(917):         return GeometryEntity.__new__(cls, *args)
0.68 point.py(109):         evaluate = kwargs.get('evaluate', global_evaluate[0])
0.68 point.py(110):         on_morph = kwargs.get('on_morph', 'ignore')
0.68 point.py(113):         coords = args[0] if len(args) == 1 else args
0.68 point.py(116):         if isinstance(coords, Point):
0.68 point.py(123):         if not is_sequence(coords):
0.68 point.py(129):         if len(coords) == 0 and kwargs.get('dim', None):
0.68 point.py(132):         coords = Tuple(*coords)
0.68 point.py(133):         dim = kwargs.get('dim', len(coords))
0.68 point.py(135):         if len(coords) < 2:
0.68 point.py(139):         if len(coords) != dim:
0.68 point.py(152):         if any(coords[dim:]):
0.68 point.py(154):         if any(a.is_number and im(a) for a in coords):
0.68 point.py(154):         if any(a.is_number and im(a) for a in coords):
0.68 point.py(154):         if any(a.is_number and im(a) for a in coords):
0.68 point.py(154):         if any(a.is_number and im(a) for a in coords):
0.68 point.py(156):         if not all(isinstance(a, Expr) for a in coords):
0.68 point.py(156):         if not all(isinstance(a, Expr) for a in coords):
0.68 point.py(156):         if not all(isinstance(a, Expr) for a in coords):
0.68 point.py(156):         if not all(isinstance(a, Expr) for a in coords):
0.68 point.py(160):         coords = coords[:dim] + (S.Zero,)*(dim - len(coords))
0.68 point.py(164):         if evaluate:
0.68 point.py(165):             coords = coords.xreplace(dict(
0.68 point.py(166):                 [(f, simplify(nsimplify(f, rational=True)))
0.68 point.py(167):                  for f in coords.atoms(Float)]))
0.68 point.py(166):                 [(f, simplify(nsimplify(f, rational=True)))
0.68 point.py(166):                 [(f, simplify(nsimplify(f, rational=True)))
0.68 point.py(165):             coords = coords.xreplace(dict(
0.68 point.py(170):         if len(coords) == 2:
0.68 point.py(171):             kwargs['_nocheck'] = True
0.68 point.py(172):             return Point2D(*coords, **kwargs)
0.68 point.py(914):         if not kwargs.pop('_nocheck', False):
0.68 point.py(917):         return GeometryEntity.__new__(cls, *args)
0.68 point.py(277):         factor = sympify(factor)
0.68 point.py(278):         coords = [simplify(x*factor) for x in self.args]
0.68 point.py(278):         coords = [simplify(x*factor) for x in self.args]
0.68 point.py(278):         coords = [simplify(x*factor) for x in self.args]
0.68 point.py(278):         coords = [simplify(x*factor) for x in self.args]
0.68 point.py(279):         return Point(coords, evaluate=False)
0.68 point.py(109):         evaluate = kwargs.get('evaluate', global_evaluate[0])
0.68 point.py(110):         on_morph = kwargs.get('on_morph', 'ignore')
0.68 point.py(113):         coords = args[0] if len(args) == 1 else args
0.68 point.py(116):         if isinstance(coords, Point):
0.68 point.py(123):         if not is_sequence(coords):
0.68 point.py(129):         if len(coords) == 0 and kwargs.get('dim', None):
0.68 point.py(132):         coords = Tuple(*coords)
0.68 point.py(133):         dim = kwargs.get('dim', len(coords))
0.68 point.py(135):         if len(coords) < 2:
0.68 point.py(139):         if len(coords) != dim:
0.68 point.py(152):         if any(coords[dim:]):
0.68 point.py(154):         if any(a.is_number and im(a) for a in coords):
0.68 point.py(154):         if any(a.is_number and im(a) for a in coords):
0.68 point.py(154):         if any(a.is_number and im(a) for a in coords):
0.68 point.py(154):         if any(a.is_number and im(a) for a in coords):
0.68 point.py(156):         if not all(isinstance(a, Expr) for a in coords):
0.68 point.py(156):         if not all(isinstance(a, Expr) for a in coords):
0.68 point.py(156):         if not all(isinstance(a, Expr) for a in coords):
0.68 point.py(156):         if not all(isinstance(a, Expr) for a in coords):
0.68 point.py(160):         coords = coords[:dim] + (S.Zero,)*(dim - len(coords))
0.68 point.py(164):         if evaluate:
0.68 point.py(170):         if len(coords) == 2:
0.68 point.py(171):             kwargs['_nocheck'] = True
0.68 point.py(172):             return Point2D(*coords, **kwargs)
0.68 point.py(914):         if not kwargs.pop('_nocheck', False):
0.68 point.py(917):         return GeometryEntity.__new__(cls, *args)
0.68 point.py(216):         try:
0.68 point.py(217):             s, o = Point._normalize_dimension(self, Point(other, evaluate=False))
0.68 point.py(109):         evaluate = kwargs.get('evaluate', global_evaluate[0])
0.68 point.py(110):         on_morph = kwargs.get('on_morph', 'ignore')
0.68 point.py(113):         coords = args[0] if len(args) == 1 else args
0.68 point.py(116):         if isinstance(coords, Point):
0.68 point.py(119):             evaluate = False
0.68 point.py(120):             if len(coords) == kwargs.get('dim', len(coords)):
0.68 point.py(248):         return len(self.args)
0.68 point.py(248):         return len(self.args)
0.68 point.py(121):                 return coords
0.68 point.py(301):         dim = getattr(cls, '_ambient_dimension', None)
0.68 point.py(303):         dim = kwargs.get('dim', dim)
0.68 point.py(305):         if dim is None:
0.68 point.py(306):             dim = max(i.ambient_dimension for i in points)
0.68 point.py(306):             dim = max(i.ambient_dimension for i in points)
0.68 point.py(338):         return getattr(self, '_ambient_dimension', len(self))
0.68 point.py(248):         return len(self.args)
0.68 point.py(306):             dim = max(i.ambient_dimension for i in points)
0.68 point.py(338):         return getattr(self, '_ambient_dimension', len(self))
0.68 point.py(248):         return len(self.args)
0.68 point.py(306):             dim = max(i.ambient_dimension for i in points)
0.68 point.py(307):         if all(i.ambient_dimension == dim for i in points):
0.68 point.py(307):         if all(i.ambient_dimension == dim for i in points):
0.68 point.py(338):         return getattr(self, '_ambient_dimension', len(self))
0.68 point.py(248):         return len(self.args)
0.68 point.py(307):         if all(i.ambient_dimension == dim for i in points):
0.68 point.py(338):         return getattr(self, '_ambient_dimension', len(self))
0.68 point.py(248):         return len(self.args)
0.68 point.py(307):         if all(i.ambient_dimension == dim for i in points):
0.68 point.py(308):             return list(points)
0.68 point.py(221):         coords = [simplify(a + b) for a, b in zip(s, o)]
0.68 point.py(245):         return self.args.__iter__()
0.68 point.py(245):         return self.args.__iter__()
0.68 point.py(221):         coords = [simplify(a + b) for a, b in zip(s, o)]
0.68 point.py(221):         coords = [simplify(a + b) for a, b in zip(s, o)]
0.68 point.py(221):         coords = [simplify(a + b) for a, b in zip(s, o)]
0.68 point.py(222):         return Point(coords, evaluate=False)
0.68 point.py(109):         evaluate = kwargs.get('evaluate', global_evaluate[0])
0.68 point.py(110):         on_morph = kwargs.get('on_morph', 'ignore')
0.68 point.py(113):         coords = args[0] if len(args) == 1 else args
0.68 point.py(116):         if isinstance(coords, Point):
0.68 point.py(123):         if not is_sequence(coords):
0.68 point.py(129):         if len(coords) == 0 and kwargs.get('dim', None):
0.68 point.py(132):         coords = Tuple(*coords)
0.68 point.py(133):         dim = kwargs.get('dim', len(coords))
0.68 point.py(135):         if len(coords) < 2:
0.68 point.py(139):         if len(coords) != dim:
0.68 point.py(152):         if any(coords[dim:]):
0.68 point.py(154):         if any(a.is_number and im(a) for a in coords):
0.68 point.py(154):         if any(a.is_number and im(a) for a in coords):
0.68 point.py(154):         if any(a.is_number and im(a) for a in coords):
0.68 point.py(154):         if any(a.is_number and im(a) for a in coords):
0.68 point.py(156):         if not all(isinstance(a, Expr) for a in coords):
0.68 point.py(156):         if not all(isinstance(a, Expr) for a in coords):
0.68 point.py(156):         if not all(isinstance(a, Expr) for a in coords):
0.68 point.py(156):         if not all(isinstance(a, Expr) for a in coords):
0.68 point.py(160):         coords = coords[:dim] + (S.Zero,)*(dim - len(coords))
0.68 point.py(164):         if evaluate:
0.68 point.py(170):         if len(coords) == 2:
0.68 point.py(171):             kwargs['_nocheck'] = True
0.68 point.py(172):             return Point2D(*coords, **kwargs)
0.68 point.py(914):         if not kwargs.pop('_nocheck', False):
0.68 point.py(917):         return GeometryEntity.__new__(cls, *args)
0.68 point.py(109):         evaluate = kwargs.get('evaluate', global_evaluate[0])
0.68 point.py(110):         on_morph = kwargs.get('on_morph', 'ignore')
0.68 point.py(113):         coords = args[0] if len(args) == 1 else args
0.68 point.py(116):         if isinstance(coords, Point):
0.68 point.py(123):         if not is_sequence(coords):
0.68 point.py(129):         if len(coords) == 0 and kwargs.get('dim', None):
0.68 point.py(132):         coords = Tuple(*coords)
0.68 point.py(133):         dim = kwargs.get('dim', len(coords))
0.68 point.py(135):         if len(coords) < 2:
0.68 point.py(139):         if len(coords) != dim:
0.68 point.py(152):         if any(coords[dim:]):
0.68 point.py(154):         if any(a.is_number and im(a) for a in coords):
0.68 point.py(154):         if any(a.is_number and im(a) for a in coords):
0.68 point.py(154):         if any(a.is_number and im(a) for a in coords):
0.68 point.py(154):         if any(a.is_number and im(a) for a in coords):
0.68 point.py(156):         if not all(isinstance(a, Expr) for a in coords):
0.68 point.py(156):         if not all(isinstance(a, Expr) for a in coords):
0.68 point.py(156):         if not all(isinstance(a, Expr) for a in coords):
0.68 point.py(156):         if not all(isinstance(a, Expr) for a in coords):
0.68 point.py(160):         coords = coords[:dim] + (S.Zero,)*(dim - len(coords))
0.68 point.py(164):         if evaluate:
0.68 point.py(165):             coords = coords.xreplace(dict(
0.68 point.py(166):                 [(f, simplify(nsimplify(f, rational=True)))
0.68 point.py(167):                  for f in coords.atoms(Float)]))
0.68 point.py(166):                 [(f, simplify(nsimplify(f, rational=True)))
0.68 point.py(166):                 [(f, simplify(nsimplify(f, rational=True)))
0.68 point.py(165):             coords = coords.xreplace(dict(
0.68 point.py(170):         if len(coords) == 2:
0.68 point.py(171):             kwargs['_nocheck'] = True
0.68 point.py(172):             return Point2D(*coords, **kwargs)
0.68 point.py(914):         if not kwargs.pop('_nocheck', False):
0.68 point.py(917):         return GeometryEntity.__new__(cls, *args)
0.68 point.py(234):         if not isinstance(other, Point) or len(self.args) != len(other.args):
0.68 point.py(236):         return self.args == other.args
0.68 point.py(216):         try:
0.68 point.py(217):             s, o = Point._normalize_dimension(self, Point(other, evaluate=False))
0.68 point.py(109):         evaluate = kwargs.get('evaluate', global_evaluate[0])
0.68 point.py(110):         on_morph = kwargs.get('on_morph', 'ignore')
0.68 point.py(113):         coords = args[0] if len(args) == 1 else args
0.68 point.py(116):         if isinstance(coords, Point):
0.68 point.py(123):         if not is_sequence(coords):
0.68 point.py(124):             raise TypeError(filldedent('''
0.68 point.py(126):                                        .format(func_name(coords))))
0.68 point.py(124):             raise TypeError(filldedent('''
0.68 point.py(218):         except TypeError:
0.68 point.py(219):             raise GeometryError("Don't know how to add {} and a Point object".format(other))
E                                         [FAIL]


________________________________________________________________________________
 sympy/polys/tests/test_coverup_sympy__sympy-17655.py:test_point_multiplication_order 
Traceback (most recent call last):
  File "/testbed/sympy/geometry/point.py", line 217, in __add__
    s, o = Point._normalize_dimension(self, Point(other, evaluate=False))
  File "/testbed/sympy/geometry/point.py", line 124, in __new__
    raise TypeError(filldedent('''
TypeError: 
Expecting sequence of coordinates, not `Mul`

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/testbed/sympy/polys/tests/test_coverup_sympy__sympy-17655.py", line 16, in test_point_multiplication_order
    result2 = point1 + factor * point2
  File "/testbed/sympy/geometry/point.py", line 219, in __add__
    raise GeometryError("Don't know how to add {} and a Point object".format(other))
sympy.geometry.exceptions.GeometryError: Don't know how to add 2.0*Point2D(1, 1) and a Point object

=========== tests finished: 0 passed, 1 exceptions, in 0.01 seconds ============
DO *NOT* COMMIT!
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(sympy/geometry/point\\.py)']
1.20 point.py(1): """Geometrical Points.
1.20 point.py(20): from __future__ import division, print_function
1.20 point.py(22): import warnings
1.20 point.py(24): from sympy.core import S, sympify, Expr
1.20 point.py(25): from sympy.core.compatibility import is_sequence
1.20 point.py(26): from sympy.core.containers import Tuple
1.20 point.py(27): from sympy.simplify import nsimplify, simplify
1.20 point.py(28): from sympy.geometry.exceptions import GeometryError
1.20 point.py(29): from sympy.functions.elementary.miscellaneous import sqrt
1.20 point.py(30): from sympy.functions.elementary.complexes import im
1.20 point.py(31): from sympy.matrices import Matrix
1.20 point.py(32): from sympy.core.numbers import Float
1.20 point.py(33): from sympy.core.evaluate import global_evaluate
1.20 point.py(34): from sympy.core.add import Add
1.20 point.py(35): from sympy.utilities.iterables import uniq
1.20 point.py(36): from sympy.utilities.misc import filldedent, func_name, Undecidable
1.20 point.py(38): from .entity import GeometryEntity
1.23 point.py(41): class Point(GeometryEntity):
1.23 point.py(41): class Point(GeometryEntity):
1.23 point.py(42):     """A point in a n-dimensional Euclidean space.
1.23 point.py(106):     is_Point = True
1.23 point.py(108):     def __new__(cls, *args, **kwargs):
1.23 point.py(180):     def __abs__(self):
1.23 point.py(185):     def __add__(self, other):
1.23 point.py(224):     def __contains__(self, item):
1.23 point.py(227):     def __div__(self, divisor):
1.23 point.py(233):     def __eq__(self, other):
1.23 point.py(238):     def __getitem__(self, key):
1.23 point.py(241):     def __hash__(self):
1.23 point.py(244):     def __iter__(self):
1.23 point.py(247):     def __len__(self):
1.23 point.py(250):     def __mul__(self, factor):
1.23 point.py(281):     def __rmul__(self, factor):
1.23 point.py(285):     def __neg__(self):
1.23 point.py(290):     def __sub__(self, other):
1.23 point.py(295):     @classmethod
1.23 point.py(296):     def _normalize_dimension(cls, *points, **kwargs):
1.23 point.py(313):     @staticmethod
1.23 point.py(314):     def affine_rank(*args):
1.23 point.py(335):     @property
1.23 point.py(336):     def ambient_dimension(self):
1.23 point.py(340):     @classmethod
1.23 point.py(341):     def are_coplanar(cls, *points):
1.23 point.py(386):     def distance(self, other):
1.23 point.py(438):     def dot(self, p):
1.23 point.py(444):     def equals(self, other):
1.23 point.py(451):     def evalf(self, prec=None, **options):
1.23 point.py(482):     def intersection(self, other):
1.23 point.py(523):     def is_collinear(self, *args):
1.23 point.py(561):     def is_concyclic(self, *args):
1.23 point.py(617):     @property
1.23 point.py(618):     def is_nonzero(self):
1.23 point.py(626):     def is_scalar_multiple(self, p):
1.23 point.py(645):     @property
1.23 point.py(646):     def is_zero(self):
1.23 point.py(656):     @property
1.23 point.py(657):     def length(self):
1.23 point.py(671):     def midpoint(self, p):
1.23 point.py(701):     @property
1.23 point.py(702):     def origin(self):
1.23 point.py(707):     @property
1.23 point.py(708):     def orthogonal_direction(self):
1.23 point.py(733):     @staticmethod
1.23 point.py(734):     def project(a, b):
1.23 point.py(772):     def taxicab_distance(self, p):
1.23 point.py(805):     def canberra_distance(self, p):
1.23 point.py(851):     @property
1.23 point.py(852):     def unit(self):
1.23 point.py(857):     n = evalf
1.23 point.py(859):     __truediv__ = __div__
1.23 point.py(861): class Point2D(Point):
1.23 point.py(861): class Point2D(Point):
1.23 point.py(862):     """A point in a 2-dimensional Euclidean space.
1.23 point.py(911):     _ambient_dimension = 2
1.23 point.py(913):     def __new__(cls, *args, **kwargs):
1.23 point.py(919):     def __contains__(self, item):
1.23 point.py(922):     @property
1.23 point.py(923):     def bounds(self):
1.23 point.py(931):     def rotate(self, angle, pt=None):
1.23 point.py(965):     def scale(self, x=1, y=1, pt=None):
1.23 point.py(992):     def transform(self, matrix):
1.23 point.py(1009):     def translate(self, x=0, y=0):
1.23 point.py(1032):     @property
1.23 point.py(1033):     def x(self):
1.23 point.py(1047):     @property
1.23 point.py(1048):     def y(self):
1.23 point.py(1062): class Point3D(Point):
1.23 point.py(1062): class Point3D(Point):
1.23 point.py(1063):     """A point in a 3-dimensional Euclidean space.
1.23 point.py(1107):     _ambient_dimension = 3
1.23 point.py(1109):     def __new__(cls, *args, **kwargs):
1.23 point.py(1115):     def __contains__(self, item):
1.23 point.py(1118):     @staticmethod
1.23 point.py(1119):     def are_collinear(*points):
1.23 point.py(1154):     def direction_cosine(self, point):
1.23 point.py(1181):     def direction_ratio(self, point):
1.23 point.py(1205):     def intersection(self, other):
1.23 point.py(1243):     def scale(self, x=1, y=1, z=1, pt=None):
1.23 point.py(1270):     def transform(self, matrix):
1.23 point.py(1289):     def translate(self, x=0, y=0, z=0):
1.23 point.py(1312):     @property
1.23 point.py(1313):     def x(self):
1.23 point.py(1327):     @property
1.23 point.py(1328):     def y(self):
1.23 point.py(1342):     @property
1.23 point.py(1343):     def z(self):
+ cat coverage.cover
{"/testbed/sympy/geometry/point.py": {"20": 1, "22": 1, "24": 1, "25": 1, "26": 1, "27": 1, "28": 1, "29": 1, "30": 1, "31": 1, "32": 1, "33": 1, "34": 1, "35": 1, "36": 1, "38": 1, "41": 2, "861": 2, "1062": 2, "106": 1, "108": 1, "180": 1, "185": 1, "224": 1, "227": 1, "233": 1, "238": 1, "241": 1, "244": 1, "247": 1, "250": 1, "281": 1, "285": 1, "290": 1, "295": 1, "296": 1, "313": 1, "314": 1, "335": 1, "336": 1, "340": 1, "341": 1, "386": 1, "438": 1, "444": 1, "451": 1, "482": 1, "523": 1, "561": 1, "617": 1, "618": 1, "626": 1, "645": 1, "646": 1, "656": 1, "657": 1, "671": 1, "701": 1, "702": 1, "707": 1, "708": 1, "733": 1, "734": 1, "772": 1, "805": 1, "851": 1, "852": 1, "857": 1, "859": 1, "109": 7, "110": 7, "113": 7, "116": 7, "119": 1, "120": 1, "121": 1, "123": 6, "124": 2, "126": 1, "129": 5, "130": 0, "132": 5, "133": 5, "135": 5, "136": 0, "139": 5, "140": 0, "141": 0, "142": 0, "143": 0, "144": 0, "145": 0, "146": 0, "147": 0, "149": 0, "152": 5, "153": 0, "154": 20, "155": 0, "156": 20, "157": 0, "160": 5, "164": 5, "165": 6, "166": 9, "167": 3, "170": 5, "171": 5, "172": 5, "173": 0, "174": 0, "175": 0, "178": 0, "182": 0, "183": 0, "216": 2, "217": 2, "218": 1, "219": 1, "221": 4, "222": 1, "225": 0, "229": 0, "230": 0, "231": 0, "234": 1, "235": 0, "236": 1, "239": 0, "242": 0, "245": 2, "248": 6, "277": 1, "278": 4, "279": 1, "283": 0, "287": 0, "288": 0, "293": 0, "301": 1, "303": 1, "305": 1, "306": 4, "307": 4, "308": 1, "309": 0, "310": 0, "311": 0, "322": 0, "323": 0, "326": 0, "327": 0, "328": 0, "330": 0, "332": 0, "333": 0, "338": 4, "376": 0, "377": 0, "379": 0, "381": 0, "382": 0, "383": 0, "384": 0, "425": 0, "426": 0, "427": 0, "428": 0, "429": 0, "430": 0, "431": 0, "432": 0, "433": 0, "434": 0, "435": 0, "436": 0, "440": 0, "441": 0, "442": 0, "447": 0, "448": 0, "449": 0, "479": 0, "480": 0, "512": 0, "513": 0, "514": 0, "515": 0, "516": 0, "517": 0, "518": 0, "519": 0, "520": 0, "521": 0, "556": 0, "557": 0, "558": 0, "559": 0, "599": 0, "600": 0, "601": 0, "602": 0, "603": 0, "604": 0, "605": 0, "611": 0, "612": 0, "613": 0, "614": 0, "615": 0, "621": 0, "622": 0, "623": 0, "624": 0, "630": 0, "632": 0, "633": 0, "634": 0, "635": 0, "636": 0, "637": 0, "638": 0, "642": 0, "643": 0, "649": 0, "650": 0, "651": 0, "652": 0, "653": 0, "654": 0, "669": 0, "698": 0, "699": 0, "705": 0, "723": 0, "725": 0, "726": 0, "727": 0, "728": 0, "731": 0, "767": 0, "768": 0, "769": 0, "770": 0, "802": 0, "803": 0, "846": 0, "847": 0, "848": 0, "849": 0, "855": 0, "911": 1, "913": 1, "919": 1, "922": 1, "923": 1, "931": 1, "965": 1, "992": 1, "1009": 1, "1032": 1, "1033": 1, "1047": 1, "1048": 1, "914": 5, "915": 0, "916": 0, "917": 5, "920": 0, "929": 0, "950": 0, "952": 0, "953": 0, "955": 0, "956": 0, "957": 0, "958": 0, "959": 0, "960": 0, "961": 0, "962": 0, "963": 0, "987": 0, "988": 0, "989": 0, "990": 0, "1002": 0, "1003": 0, "1005": 0, "1006": 0, "1007": 0, "1030": 0, "1045": 0, "1060": 0, "1107": 1, "1109": 1, "1115": 1, "1118": 1, "1119": 1, "1154": 1, "1181": 1, "1205": 1, "1243": 1, "1270": 1, "1289": 1, "1312": 1, "1313": 1, "1327": 1, "1328": 1, "1342": 1, "1343": 1, "1110": 0, "1111": 0, "1112": 0, "1113": 0, "1116": 0, "1152": 0, "1176": 0, "1177": 0, "1178": 0, "1179": 0, "1203": 0, "1235": 0, "1236": 0, "1237": 0, "1238": 0, "1239": 0, "1240": 0, "1241": 0, "1265": 0, "1266": 0, "1267": 0, "1268": 0, "1280": 0, "1281": 0, "1283": 0, "1284": 0, "1285": 0, "1286": 0, "1287": 0, "1310": 0, "1325": 0, "1340": 0, "1355": 0}}
{"/testbed/sympy/geometry/point.py": {"20": 1, "22": 1, "24": 1, "25": 1, "26": 1, "27": 1, "28": 1, "29": 1, "30": 1, "31": 1, "32": 1, "33": 1, "34": 1, "35": 1, "36": 1, "38": 1, "41": 2, "861": 2, "1062": 2, "106": 1, "108": 1, "180": 1, "185": 1, "224": 1, "227": 1, "233": 1, "238": 1, "241": 1, "244": 1, "247": 1, "250": 1, "281": 1, "285": 1, "290": 1, "295": 1, "296": 1, "313": 1, "314": 1, "335": 1, "336": 1, "340": 1, "341": 1, "386": 1, "438": 1, "444": 1, "451": 1, "482": 1, "523": 1, "561": 1, "617": 1, "618": 1, "626": 1, "645": 1, "646": 1, "656": 1, "657": 1, "671": 1, "701": 1, "702": 1, "707": 1, "708": 1, "733": 1, "734": 1, "772": 1, "805": 1, "851": 1, "852": 1, "857": 1, "859": 1, "109": 0, "110": 0, "113": 0, "116": 0, "119": 0, "120": 0, "121": 0, "123": 0, "124": 0, "126": 0, "129": 0, "130": 0, "132": 0, "133": 0, "135": 0, "136": 0, "139": 0, "140": 0, "141": 0, "142": 0, "143": 0, "144": 0, "145": 0, "146": 0, "147": 0, "149": 0, "152": 0, "153": 0, "154": 0, "155": 0, "156": 0, "157": 0, "160": 0, "164": 0, "165": 0, "166": 0, "167": 0, "170": 0, "171": 0, "172": 0, "173": 0, "174": 0, "175": 0, "178": 0, "182": 0, "183": 0, "216": 0, "217": 0, "218": 0, "219": 0, "221": 0, "222": 0, "225": 0, "229": 0, "230": 0, "231": 0, "234": 0, "235": 0, "236": 0, "239": 0, "242": 0, "245": 0, "248": 0, "277": 0, "278": 0, "279": 0, "283": 0, "287": 0, "288": 0, "293": 0, "301": 0, "303": 0, "305": 0, "306": 0, "307": 0, "308": 0, "309": 0, "310": 0, "311": 0, "322": 0, "323": 0, "326": 0, "327": 0, "328": 0, "330": 0, "332": 0, "333": 0, "338": 0, "376": 0, "377": 0, "379": 0, "381": 0, "382": 0, "383": 0, "384": 0, "425": 0, "426": 0, "427": 0, "428": 0, "429": 0, "430": 0, "431": 0, "432": 0, "433": 0, "434": 0, "435": 0, "436": 0, "440": 0, "441": 0, "442": 0, "447": 0, "448": 0, "449": 0, "479": 0, "480": 0, "512": 0, "513": 0, "514": 0, "515": 0, "516": 0, "517": 0, "518": 0, "519": 0, "520": 0, "521": 0, "556": 0, "557": 0, "558": 0, "559": 0, "599": 0, "600": 0, "601": 0, "602": 0, "603": 0, "604": 0, "605": 0, "611": 0, "612": 0, "613": 0, "614": 0, "615": 0, "621": 0, "622": 0, "623": 0, "624": 0, "630": 0, "632": 0, "633": 0, "634": 0, "635": 0, "636": 0, "637": 0, "638": 0, "642": 0, "643": 0, "649": 0, "650": 0, "651": 0, "652": 0, "653": 0, "654": 0, "669": 0, "698": 0, "699": 0, "705": 0, "723": 0, "725": 0, "726": 0, "727": 0, "728": 0, "731": 0, "767": 0, "768": 0, "769": 0, "770": 0, "802": 0, "803": 0, "846": 0, "847": 0, "848": 0, "849": 0, "855": 0, "911": 1, "913": 1, "919": 1, "922": 1, "923": 1, "931": 1, "965": 1, "992": 1, "1009": 1, "1032": 1, "1033": 1, "1047": 1, "1048": 1, "914": 0, "915": 0, "916": 0, "917": 0, "920": 0, "929": 0, "950": 0, "952": 0, "953": 0, "955": 0, "956": 0, "957": 0, "958": 0, "959": 0, "960": 0, "961": 0, "962": 0, "963": 0, "987": 0, "988": 0, "989": 0, "990": 0, "1002": 0, "1003": 0, "1005": 0, "1006": 0, "1007": 0, "1030": 0, "1045": 0, "1060": 0, "1107": 1, "1109": 1, "1115": 1, "1118": 1, "1119": 1, "1154": 1, "1181": 1, "1205": 1, "1243": 1, "1270": 1, "1289": 1, "1312": 1, "1313": 1, "1327": 1, "1328": 1, "1342": 1, "1343": 1, "1110": 0, "1111": 0, "1112": 0, "1113": 0, "1116": 0, "1152": 0, "1176": 0, "1177": 0, "1178": 0, "1179": 0, "1203": 0, "1235": 0, "1236": 0, "1237": 0, "1238": 0, "1239": 0, "1240": 0, "1241": 0, "1265": 0, "1266": 0, "1267": 0, "1268": 0, "1280": 0, "1281": 0, "1283": 0, "1284": 0, "1285": 0, "1286": 0, "1287": 0, "1310": 0, "1325": 0, "1340": 0, "1355": 0}}
+ git checkout f5e965947af2410ded92cfad987aaf45262ea434
Note: switching to 'f5e965947af2410ded92cfad987aaf45262ea434'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at f5e965947a Merge pull request #17495 from oscargus/Sreplace
M	sympy/geometry/point.py
+ git apply /root/pre_state.patch
error: unrecognized input
