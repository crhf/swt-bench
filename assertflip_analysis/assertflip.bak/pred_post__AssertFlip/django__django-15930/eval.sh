#!/bin/bash
set -uxo pipefail
source /opt/miniconda3/bin/activate
conda activate testbed
cd /testbed
git diff HEAD 63884829acd207404f2a5c3cc1d6b4cd0a822b70 >> /root/pre_state.patch
git config --global --add safe.directory /testbed
cd /testbed
git status
git show
git diff 63884829acd207404f2a5c3cc1d6b4cd0a822b70
source /opt/miniconda3/bin/activate
conda activate testbed
python -m pip install -e .
git apply -v - <<'EOF_114329324912'
diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -1299,6 +1299,11 @@ def as_sql(self, compiler, connection, template=None, **extra_context):
         template_params = extra_context
         sql_params = []
         condition_sql, condition_params = compiler.compile(self.condition)
+        # Filters that match everything are handled as empty strings in the
+        # WHERE clause, but in a CASE WHEN expression they must use a predicate
+        # that's always True.
+        if condition_sql == "":
+            condition_sql, condition_params = compiler.compile(Value(True))
         template_params["condition"] = condition_sql
         sql_params.extend(condition_params)
         result_sql, result_params = compiler.compile(self.result)

EOF_114329324912
git apply -v - <<'EOF_114329324912'
diff --git a/dev/null b/tests/test_coverup_django__django-15930.py
new file mode 100644
index e69de29..c5c1b97 100644
--- /dev/null
+++ b/tests/test_coverup_django__django-15930.py
@@ -0,0 +1,26 @@
+from django.test import TestCase
+from django.db.models import Q, Value, BooleanField, Case, When
+from django.contrib.auth.models import User
+from django.db import connection
+
+class CaseExpressionTest(TestCase):
+    def test_case_with_negated_empty_q(self):
+        """
+        Test Case expression with a negated Q object checking for an empty list.
+        This should expose the bug where the SQL is malformed.
+        """
+        # Attempt to annotate using a Case expression with ~Q(pk__in=[])
+        queryset = User.objects.annotate(
+            _a=Case(
+                When(~Q(pk__in=[]), then=Value(True)),
+                default=Value(False),
+                output_field=BooleanField(),
+            )
+        ).order_by("-_a").values("pk")
+
+        # Capture the SQL generated by the query
+        sql = str(queryset.query)
+
+        # Assert that the SQL is correctly formed
+        # The test should fail by confirming the absence of the bug
+        self.assertNotIn("WHEN  THEN", sql)

EOF_114329324912
python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/db/models/expressions\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-15930
cat coverage.cover
git checkout 63884829acd207404f2a5c3cc1d6b4cd0a822b70
git apply /root/pre_state.patch
