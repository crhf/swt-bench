+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD 2f13c476abe4ba787b6cb71131818341911f43cc
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
nothing to commit, working tree clean
+ git show
commit 2f13c476abe4ba787b6cb71131818341911f43cc
Author: Nick Pope <nick.pope@flightdataservices.com>
Date:   Wed Mar 24 22:29:33 2021 +0000

    Fixed #31487 -- Added precision argument to Round().

diff --git a/django/db/backends/sqlite3/features.py b/django/db/backends/sqlite3/features.py
index 3348256c74..ddae4c8efa 100644
--- a/django/db/backends/sqlite3/features.py
+++ b/django/db/backends/sqlite3/features.py
@@ -65,6 +65,12 @@ class DatabaseFeatures(BaseDatabaseFeatures):
             "SQLite doesn't have a constraint.": {
                 'model_fields.test_integerfield.PositiveIntegerFieldTests.test_negative_values',
             },
+            "SQLite doesn't support negative precision for ROUND().": {
+                'db_functions.math.test_round.RoundTests.test_null_with_negative_precision',
+                'db_functions.math.test_round.RoundTests.test_decimal_with_negative_precision',
+                'db_functions.math.test_round.RoundTests.test_float_with_negative_precision',
+                'db_functions.math.test_round.RoundTests.test_integer_with_negative_precision',
+            },
         }
         if Database.sqlite_version_info < (3, 27):
             skips.update({
diff --git a/django/db/models/functions/math.py b/django/db/models/functions/math.py
index 15915f4b7c..f939885263 100644
--- a/django/db/models/functions/math.py
+++ b/django/db/models/functions/math.py
@@ -1,6 +1,6 @@
 import math
 
-from django.db.models.expressions import Func
+from django.db.models.expressions import Func, Value
 from django.db.models.fields import FloatField, IntegerField
 from django.db.models.functions import Cast
 from django.db.models.functions.mixins import (
@@ -158,9 +158,23 @@ class Random(NumericOutputFieldMixin, Func):
         return []
 
 
-class Round(Transform):
+class Round(FixDecimalInputMixin, Transform):
     function = 'ROUND'
     lookup_name = 'round'
+    arity = None  # Override Transform's arity=1 to enable passing precision.
+
+    def __init__(self, expression, precision=0, **extra):
+        super().__init__(expression, precision, **extra)
+
+    def as_sqlite(self, compiler, connection, **extra_context):
+        precision = self.get_source_expressions()[1]
+        if isinstance(precision, Value) and precision.value < 0:
+            raise ValueError('SQLite does not support negative precision.')
+        return super().as_sqlite(compiler, connection, **extra_context)
+
+    def _resolve_output_field(self):
+        source = self.get_source_expressions()[0]
+        return source.output_field
 
 
 class Sign(Transform):
diff --git a/docs/ref/models/database-functions.txt b/docs/ref/models/database-functions.txt
index b63b4cff4a..ac0c5ea4ec 100644
--- a/docs/ref/models/database-functions.txt
+++ b/docs/ref/models/database-functions.txt
@@ -1147,18 +1147,19 @@ Returns a random value in the range ``0.0 â‰¤ x < 1.0``.
 ``Round``
 ---------
 
-.. class:: Round(expression, **extra)
+.. class:: Round(expression, precision=0, **extra)
 
-Rounds a numeric field or expression to the nearest integer. Whether half
+Rounds a numeric field or expression to ``precision`` (must be an integer)
+decimal places. By default, it rounds to the nearest integer. Whether half
 values are rounded up or down depends on the database.
 
 Usage example::
 
     >>> from django.db.models.functions import Round
-    >>> Vector.objects.create(x=5.4, y=-2.3)
-    >>> vector = Vector.objects.annotate(x_r=Round('x'), y_r=Round('y')).get()
+    >>> Vector.objects.create(x=5.4, y=-2.37)
+    >>> vector = Vector.objects.annotate(x_r=Round('x'), y_r=Round('y', precision=1)).get()
     >>> vector.x_r, vector.y_r
-    (5.0, -2.0)
+    (5.0, -2.4)
 
 It can also be registered as a transform. For example::
 
@@ -1168,6 +1169,10 @@ It can also be registered as a transform. For example::
     >>> # Get vectors whose round() is less than 20
     >>> vectors = Vector.objects.filter(x__round__lt=20, y__round__lt=20)
 
+.. versionchanged:: 4.0
+
+    The ``precision`` argument was added.
+
 ``Sign``
 --------
 
diff --git a/docs/releases/4.0.txt b/docs/releases/4.0.txt
index f47b2fb5a0..d84e029ccd 100644
--- a/docs/releases/4.0.txt
+++ b/docs/releases/4.0.txt
@@ -222,6 +222,10 @@ Models
   whether the queryset contains the given object. This tries to perform the
   query in the simplest and fastest way possible.
 
+* The new ``precision`` argument of the
+  :class:`Round() <django.db.models.functions.Round>` database function allows
+  specifying the number of decimal places after rounding.
+
 Requests and Responses
 ~~~~~~~~~~~~~~~~~~~~~~
 
diff --git a/tests/db_functions/math/test_round.py b/tests/db_functions/math/test_round.py
index 50345d4b5c..320d37fe4e 100644
--- a/tests/db_functions/math/test_round.py
+++ b/tests/db_functions/math/test_round.py
@@ -1,7 +1,9 @@
+import unittest
 from decimal import Decimal
 
+from django.db import connection
 from django.db.models import DecimalField
-from django.db.models.functions import Round
+from django.db.models.functions import Pi, Round
 from django.test import TestCase
 from django.test.utils import register_lookup
 
@@ -15,6 +17,16 @@ class RoundTests(TestCase):
         obj = IntegerModel.objects.annotate(null_round=Round('normal')).first()
         self.assertIsNone(obj.null_round)
 
+    def test_null_with_precision(self):
+        IntegerModel.objects.create()
+        obj = IntegerModel.objects.annotate(null_round=Round('normal', 5)).first()
+        self.assertIsNone(obj.null_round)
+
+    def test_null_with_negative_precision(self):
+        IntegerModel.objects.create()
+        obj = IntegerModel.objects.annotate(null_round=Round('normal', -1)).first()
+        self.assertIsNone(obj.null_round)
+
     def test_decimal(self):
         DecimalModel.objects.create(n1=Decimal('-12.9'), n2=Decimal('0.6'))
         obj = DecimalModel.objects.annotate(n1_round=Round('n1'), n2_round=Round('n2')).first()
@@ -23,6 +35,23 @@ class RoundTests(TestCase):
         self.assertAlmostEqual(obj.n1_round, obj.n1, places=0)
         self.assertAlmostEqual(obj.n2_round, obj.n2, places=0)
 
+    def test_decimal_with_precision(self):
+        DecimalModel.objects.create(n1=Decimal('-5.75'), n2=Pi())
+        obj = DecimalModel.objects.annotate(
+            n1_round=Round('n1', 1),
+            n2_round=Round('n2', 5),
+        ).first()
+        self.assertIsInstance(obj.n1_round, Decimal)
+        self.assertIsInstance(obj.n2_round, Decimal)
+        self.assertAlmostEqual(obj.n1_round, obj.n1, places=1)
+        self.assertAlmostEqual(obj.n2_round, obj.n2, places=5)
+
+    def test_decimal_with_negative_precision(self):
+        DecimalModel.objects.create(n1=Decimal('365.25'))
+        obj = DecimalModel.objects.annotate(n1_round=Round('n1', -1)).first()
+        self.assertIsInstance(obj.n1_round, Decimal)
+        self.assertEqual(obj.n1_round, 370)
+
     def test_float(self):
         FloatModel.objects.create(f1=-27.55, f2=0.55)
         obj = FloatModel.objects.annotate(f1_round=Round('f1'), f2_round=Round('f2')).first()
@@ -31,6 +60,23 @@ class RoundTests(TestCase):
         self.assertAlmostEqual(obj.f1_round, obj.f1, places=0)
         self.assertAlmostEqual(obj.f2_round, obj.f2, places=0)
 
+    def test_float_with_precision(self):
+        FloatModel.objects.create(f1=-5.75, f2=Pi())
+        obj = FloatModel.objects.annotate(
+            f1_round=Round('f1', 1),
+            f2_round=Round('f2', 5),
+        ).first()
+        self.assertIsInstance(obj.f1_round, float)
+        self.assertIsInstance(obj.f2_round, float)
+        self.assertAlmostEqual(obj.f1_round, obj.f1, places=1)
+        self.assertAlmostEqual(obj.f2_round, obj.f2, places=5)
+
+    def test_float_with_negative_precision(self):
+        FloatModel.objects.create(f1=365.25)
+        obj = FloatModel.objects.annotate(f1_round=Round('f1', -1)).first()
+        self.assertIsInstance(obj.f1_round, float)
+        self.assertEqual(obj.f1_round, 370)
+
     def test_integer(self):
         IntegerModel.objects.create(small=-20, normal=15, big=-1)
         obj = IntegerModel.objects.annotate(
@@ -45,9 +91,39 @@ class RoundTests(TestCase):
         self.assertAlmostEqual(obj.normal_round, obj.normal, places=0)
         self.assertAlmostEqual(obj.big_round, obj.big, places=0)
 
+    def test_integer_with_precision(self):
+        IntegerModel.objects.create(small=-5, normal=3, big=-100)
+        obj = IntegerModel.objects.annotate(
+            small_round=Round('small', 1),
+            normal_round=Round('normal', 5),
+            big_round=Round('big', 2),
+        ).first()
+        self.assertIsInstance(obj.small_round, int)
+        self.assertIsInstance(obj.normal_round, int)
+        self.assertIsInstance(obj.big_round, int)
+        self.assertAlmostEqual(obj.small_round, obj.small, places=1)
+        self.assertAlmostEqual(obj.normal_round, obj.normal, places=5)
+        self.assertAlmostEqual(obj.big_round, obj.big, places=2)
+
+    def test_integer_with_negative_precision(self):
+        IntegerModel.objects.create(normal=365)
+        obj = IntegerModel.objects.annotate(normal_round=Round('normal', -1)).first()
+        self.assertIsInstance(obj.normal_round, int)
+        self.assertEqual(obj.normal_round, 370)
+
     def test_transform(self):
         with register_lookup(DecimalField, Round):
             DecimalModel.objects.create(n1=Decimal('2.0'), n2=Decimal('0'))
             DecimalModel.objects.create(n1=Decimal('-1.0'), n2=Decimal('0'))
             obj = DecimalModel.objects.filter(n1__round__gt=0).get()
             self.assertEqual(obj.n1, Decimal('2.0'))
+
+    @unittest.skipUnless(
+        connection.vendor == 'sqlite',
+        "SQLite doesn't support negative precision.",
+    )
+    def test_unsupported_negative_precision(self):
+        FloatModel.objects.create(f1=123.45)
+        msg = 'SQLite does not support negative precision.'
+        with self.assertRaisesMessage(ValueError, msg):
+            FloatModel.objects.annotate(value=Round('f1', -1)).first()
diff --git a/tests/db_functions/migrations/0002_create_test_models.py b/tests/db_functions/migrations/0002_create_test_models.py
index aa3e247bd5..3699d67a6f 100644
--- a/tests/db_functions/migrations/0002_create_test_models.py
+++ b/tests/db_functions/migrations/0002_create_test_models.py
@@ -56,7 +56,7 @@ class Migration(migrations.Migration):
             name='DecimalModel',
             fields=[
                 ('n1', models.DecimalField(decimal_places=2, max_digits=6)),
-                ('n2', models.DecimalField(decimal_places=2, max_digits=6)),
+                ('n2', models.DecimalField(decimal_places=7, max_digits=9, null=True, blank=True)),
             ],
         ),
         migrations.CreateModel(
diff --git a/tests/db_functions/models.py b/tests/db_functions/models.py
index 97584326aa..5c3379b44a 100644
--- a/tests/db_functions/models.py
+++ b/tests/db_functions/models.py
@@ -42,7 +42,7 @@ class DTModel(models.Model):
 
 class DecimalModel(models.Model):
     n1 = models.DecimalField(decimal_places=2, max_digits=6)
-    n2 = models.DecimalField(decimal_places=2, max_digits=6)
+    n2 = models.DecimalField(decimal_places=7, max_digits=9, null=True, blank=True)
 
 
 class IntegerModel(models.Model):
+ git diff 2f13c476abe4ba787b6cb71131818341911f43cc
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Checking if build backend supports build_editable: started
  Checking if build backend supports build_editable: finished with status 'done'
  Getting requirements to build editable: started
  Getting requirements to build editable: finished with status 'done'
  Preparing editable metadata (pyproject.toml): started
  Preparing editable metadata (pyproject.toml): finished with status 'done'
Requirement already satisfied: asgiref>=3.2.10 in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from Django==4.0) (3.8.1)
Requirement already satisfied: pytz in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from Django==4.0) (2025.2)
Requirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from Django==4.0) (0.5.3)
Requirement already satisfied: typing-extensions>=4 in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from asgiref>=3.2.10->Django==4.0) (4.13.2)
Building wheels for collected packages: Django
  Building editable for Django (pyproject.toml): started
  Building editable for Django (pyproject.toml): finished with status 'done'
  Created wheel for Django: filename=django-4.0-0.editable-py3-none-any.whl size=25610 sha256=c32bf9483484cabad9487b27351edd752e4b9072e25a794397ac41d0387dadb4
  Stored in directory: /tmp/pip-ephem-wheel-cache-jbbae7h_/wheels/b2/50/f1/218f2e9962a80d01a4b1297698978f9fb3b60056aa24343f24
Successfully built Django
Installing collected packages: Django
  Attempting uninstall: Django
    Found existing installation: Django 4.0
    Uninstalling Django-4.0:
      Successfully uninstalled Django-4.0
Successfully installed Django-4.0
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable.It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git apply -v -
Checking patch django/urls/resolvers.py...
Applied patch django/urls/resolvers.py cleanly.
+ git apply -v -
Checking patch tests/test_coverup_django__django-14155.py...
Applied patch tests/test_coverup_django__django-14155.py cleanly.
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/urls/resolvers\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-14155
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(django/urls/resolvers\\.py)']
0.42 resolvers.py(1): """
0.42 resolvers.py(8): import functools
0.42 resolvers.py(9): import inspect
0.42 resolvers.py(10): import re
0.42 resolvers.py(11): import string
0.42 resolvers.py(12): from importlib import import_module
0.42 resolvers.py(13): from urllib.parse import quote
0.42 resolvers.py(15): from asgiref.local import Local
0.42 resolvers.py(17): from django.conf import settings
0.42 resolvers.py(18): from django.core.checks import Error, Warning
0.42 resolvers.py(19): from django.core.checks.urls import check_resolver
0.42 resolvers.py(20): from django.core.exceptions import ImproperlyConfigured, ViewDoesNotExist
0.42 resolvers.py(21): from django.utils.datastructures import MultiValueDict
0.42 resolvers.py(22): from django.utils.functional import cached_property
0.42 resolvers.py(23): from django.utils.http import RFC3986_SUBDELIMS, escape_leading_slashes
0.42 resolvers.py(24): from django.utils.regex_helper import _lazy_re_compile, normalize
0.42 resolvers.py(25): from django.utils.translation import get_language
0.42 resolvers.py(27): from .converters import get_converter
0.42 resolvers.py(28): from .exceptions import NoReverseMatch, Resolver404
0.42 resolvers.py(29): from .utils import get_callable
0.42 resolvers.py(32): class ResolverMatch:
0.42 resolvers.py(32): class ResolverMatch:
0.42 resolvers.py(33):     def __init__(self, func, args, kwargs, url_name=None, app_names=None, namespaces=None, route=None, tried=None):
0.42 resolvers.py(58):     def __getitem__(self, index):
0.42 resolvers.py(61):     def __repr__(self):
0.42 resolvers.py(75): def get_resolver(urlconf=None):
0.42 resolvers.py(81): @functools.lru_cache(maxsize=None)
0.42 resolvers.py(82): def _get_cached_resolver(urlconf=None):
0.42 resolvers.py(86): @functools.lru_cache(maxsize=None)
0.42 resolvers.py(87): def get_ns_resolver(ns_pattern, resolver, converters):
0.42 resolvers.py(97): class LocaleRegexDescriptor:
0.42 resolvers.py(97): class LocaleRegexDescriptor:
0.42 resolvers.py(98):     def __init__(self, attr):
0.42 resolvers.py(101):     def __get__(self, instance, cls=None):
0.42 resolvers.py(120): class CheckURLMixin:
0.42 resolvers.py(120): class CheckURLMixin:
0.42 resolvers.py(121):     def describe(self):
0.42 resolvers.py(130):     def _check_pattern_startswith_slash(self):
0.42 resolvers.py(153): class RegexPattern(CheckURLMixin):
0.42 resolvers.py(153): class RegexPattern(CheckURLMixin):
0.42 resolvers.py(154):     regex = LocaleRegexDescriptor('_regex')
0.42 resolvers.py(99):         self.attr = attr
0.42 resolvers.py(156):     def __init__(self, regex, name=None, is_endpoint=False):
0.42 resolvers.py(163):     def match(self, path):
0.42 resolvers.py(175):     def check(self):
0.42 resolvers.py(182):     def _check_include_trailing_dollar(self):
0.42 resolvers.py(194):     def _compile(self, regex):
0.42 resolvers.py(203):     def __str__(self):
0.42 resolvers.py(207): _PATH_PARAMETER_COMPONENT_RE = _lazy_re_compile(
0.42 resolvers.py(208):     r'<(?:(?P<converter>[^>:]+):)?(?P<parameter>[^>]+)>'
0.42 resolvers.py(207): _PATH_PARAMETER_COMPONENT_RE = _lazy_re_compile(
0.42 resolvers.py(212): def _route_to_regex(route, is_endpoint=False):
0.42 resolvers.py(258): class RoutePattern(CheckURLMixin):
0.42 resolvers.py(258): class RoutePattern(CheckURLMixin):
0.42 resolvers.py(259):     regex = LocaleRegexDescriptor('_route')
0.42 resolvers.py(99):         self.attr = attr
0.42 resolvers.py(261):     def __init__(self, route, name=None, is_endpoint=False):
0.42 resolvers.py(268):     def match(self, path):
0.42 resolvers.py(282):     def check(self):
0.42 resolvers.py(294):     def _compile(self, route):
0.42 resolvers.py(297):     def __str__(self):
0.42 resolvers.py(301): class LocalePrefixPattern:
0.42 resolvers.py(301): class LocalePrefixPattern:
0.42 resolvers.py(302):     def __init__(self, prefix_default_language=True):
0.42 resolvers.py(306):     @property
0.42 resolvers.py(307):     def regex(self):
0.42 resolvers.py(311):     @property
0.42 resolvers.py(312):     def language_prefix(self):
0.42 resolvers.py(319):     def match(self, path):
0.42 resolvers.py(325):     def check(self):
0.42 resolvers.py(328):     def describe(self):
0.42 resolvers.py(331):     def __str__(self):
0.42 resolvers.py(335): class URLPattern:
0.42 resolvers.py(335): class URLPattern:
0.42 resolvers.py(336):     def __init__(self, pattern, callback, default_args=None, name=None):
0.42 resolvers.py(342):     def __repr__(self):
0.42 resolvers.py(345):     def check(self):
0.42 resolvers.py(350):     def _check_pattern_name(self):
0.42 resolvers.py(364):     def resolve(self, path):
0.42 resolvers.py(372):     @cached_property
0.42 resolvers.py(373):     def lookup_str(self):
0.42 resolvers.py(386): class URLResolver:
0.42 resolvers.py(386): class URLResolver:
0.42 resolvers.py(387):     def __init__(self, pattern, urlconf_name, default_kwargs=None, app_name=None, namespace=None):
0.42 resolvers.py(406):     def __repr__(self):
0.42 resolvers.py(417):     def check(self):
0.42 resolvers.py(424):     def _check_custom_error_handlers(self):
0.42 resolvers.py(454):     def _populate(self):
0.42 resolvers.py(515):     @property
0.42 resolvers.py(516):     def reverse_dict(self):
0.42 resolvers.py(522):     @property
0.42 resolvers.py(523):     def namespace_dict(self):
0.42 resolvers.py(529):     @property
0.42 resolvers.py(530):     def app_dict(self):
0.42 resolvers.py(536):     @staticmethod
0.42 resolvers.py(537):     def _extend_tried(tried, pattern, sub_tried=None):
0.42 resolvers.py(543):     @staticmethod
0.42 resolvers.py(544):     def _join_route(route1, route2):
0.42 resolvers.py(552):     def _is_callback(self, name):
0.42 resolvers.py(557):     def resolve(self, path):
0.42 resolvers.py(595):     @cached_property
0.42 resolvers.py(596):     def urlconf_module(self):
0.42 resolvers.py(602):     @cached_property
0.42 resolvers.py(603):     def url_patterns(self):
0.42 resolvers.py(617):     def resolve_error_handler(self, view_type):
0.42 resolvers.py(626):     def reverse(self, lookup_view, *args, **kwargs):
0.42 resolvers.py(629):     def _reverse_with_prefix(self, lookup_view, _prefix, *args, **kwargs):
Testing against Django installed in '/testbed/django'
Skipping setup of unused database(s): default, other.
0.67 resolvers.py(76):     if urlconf is None:
0.67 resolvers.py(77):         urlconf = settings.ROOT_URLCONF
0.67 resolvers.py(78):     return _get_cached_resolver(urlconf)
0.67 resolvers.py(83):     return URLResolver(RegexPattern(r'^/'), urlconf)
0.67 resolvers.py(157):         self._regex = regex
0.67 resolvers.py(158):         self._regex_dict = {}
0.67 resolvers.py(159):         self._is_endpoint = is_endpoint
0.67 resolvers.py(160):         self.name = name
0.67 resolvers.py(161):         self.converters = {}
0.67 resolvers.py(388):         self.pattern = pattern
0.67 resolvers.py(392):         self.urlconf_name = urlconf_name
0.67 resolvers.py(393):         self.callback = None
0.67 resolvers.py(394):         self.default_kwargs = default_kwargs or {}
0.67 resolvers.py(395):         self.namespace = namespace
0.67 resolvers.py(396):         self.app_name = app_name
0.67 resolvers.py(397):         self._reverse_dict = {}
0.67 resolvers.py(398):         self._namespace_dict = {}
0.67 resolvers.py(399):         self._app_dict = {}
0.67 resolvers.py(402):         self._callback_strs = set()
0.67 resolvers.py(403):         self._populated = False
0.67 resolvers.py(404):         self._local = Local()
0.67 resolvers.py(418):         messages = []
0.67 resolvers.py(419):         for pattern in self.url_patterns:
0.67 resolvers.py(605):         patterns = getattr(self.urlconf_module, "urlpatterns", self.urlconf_module)
0.67 resolvers.py(597):         if isinstance(self.urlconf_name, str):
0.67 resolvers.py(598):             return import_module(self.urlconf_name)
0.67 resolvers.py(606):         try:
0.67 resolvers.py(607):             iter(patterns)
0.67 resolvers.py(615):         return patterns
0.67 resolvers.py(421):         messages.extend(self._check_custom_error_handlers())
0.67 resolvers.py(425):         messages = []
0.67 resolvers.py(428):         for status_code, num_parameters in [(400, 2), (403, 2), (404, 2), (500, 1)]:
0.67 resolvers.py(429):             try:
0.67 resolvers.py(430):                 handler = self.resolve_error_handler(status_code)
0.67 resolvers.py(618):         callback = getattr(self.urlconf_module, 'handler%s' % view_type, None)
0.67 resolvers.py(619):         if not callback:
0.67 resolvers.py(622):             from django.conf import urls
0.68 resolvers.py(623):             callback = getattr(urls, 'handler%s' % view_type)
0.68 resolvers.py(624):         return get_callable(callback)
0.68 resolvers.py(438):             signature = inspect.signature(handler)
0.68 resolvers.py(439):             args = [None] * num_parameters
0.68 resolvers.py(440):             try:
0.68 resolvers.py(441):                 signature.bind(*args)
0.68 resolvers.py(428):         for status_code, num_parameters in [(400, 2), (403, 2), (404, 2), (500, 1)]:
0.68 resolvers.py(429):             try:
0.68 resolvers.py(430):                 handler = self.resolve_error_handler(status_code)
0.68 resolvers.py(618):         callback = getattr(self.urlconf_module, 'handler%s' % view_type, None)
0.68 resolvers.py(619):         if not callback:
0.68 resolvers.py(622):             from django.conf import urls
0.68 resolvers.py(623):             callback = getattr(urls, 'handler%s' % view_type)
0.68 resolvers.py(624):         return get_callable(callback)
0.68 resolvers.py(438):             signature = inspect.signature(handler)
0.68 resolvers.py(439):             args = [None] * num_parameters
0.68 resolvers.py(440):             try:
0.68 resolvers.py(441):                 signature.bind(*args)
0.68 resolvers.py(428):         for status_code, num_parameters in [(400, 2), (403, 2), (404, 2), (500, 1)]:
0.68 resolvers.py(429):             try:
0.68 resolvers.py(430):                 handler = self.resolve_error_handler(status_code)
0.68 resolvers.py(618):         callback = getattr(self.urlconf_module, 'handler%s' % view_type, None)
0.68 resolvers.py(619):         if not callback:
0.68 resolvers.py(622):             from django.conf import urls
0.68 resolvers.py(623):             callback = getattr(urls, 'handler%s' % view_type)
0.68 resolvers.py(624):         return get_callable(callback)
0.68 resolvers.py(438):             signature = inspect.signature(handler)
0.68 resolvers.py(439):             args = [None] * num_parameters
0.68 resolvers.py(440):             try:
0.68 resolvers.py(441):                 signature.bind(*args)
0.68 resolvers.py(428):         for status_code, num_parameters in [(400, 2), (403, 2), (404, 2), (500, 1)]:
0.68 resolvers.py(429):             try:
0.68 resolvers.py(430):                 handler = self.resolve_error_handler(status_code)
0.68 resolvers.py(618):         callback = getattr(self.urlconf_module, 'handler%s' % view_type, None)
0.68 resolvers.py(619):         if not callback:
0.68 resolvers.py(622):             from django.conf import urls
0.68 resolvers.py(623):             callback = getattr(urls, 'handler%s' % view_type)
0.68 resolvers.py(624):         return get_callable(callback)
0.68 resolvers.py(438):             signature = inspect.signature(handler)
0.68 resolvers.py(439):             args = [None] * num_parameters
0.68 resolvers.py(440):             try:
0.68 resolvers.py(441):                 signature.bind(*args)
0.68 resolvers.py(428):         for status_code, num_parameters in [(400, 2), (403, 2), (404, 2), (500, 1)]:
0.68 resolvers.py(452):         return messages
0.68 resolvers.py(422):         return messages or self.pattern.check()
0.68 resolvers.py(176):         warnings = []
0.68 resolvers.py(177):         warnings.extend(self._check_pattern_startswith_slash())
0.68 resolvers.py(134):         regex_pattern = self.regex.pattern
0.68 resolvers.py(105):         if instance is None:
0.68 resolvers.py(110):         pattern = getattr(instance, self.attr)
0.68 resolvers.py(111):         if isinstance(pattern, str):
0.68 resolvers.py(112):             instance.__dict__['regex'] = instance._compile(pattern)
0.68 resolvers.py(196):         try:
0.68 resolvers.py(197):             return re.compile(regex)
0.68 resolvers.py(113):             return instance.__dict__['regex']
0.68 resolvers.py(135):         if not settings.APPEND_SLASH:
0.68 resolvers.py(139):         if regex_pattern.startswith(('/', '^/', '^\\/')) and not regex_pattern.endswith('/'):
0.68 resolvers.py(150):             return []
0.68 resolvers.py(178):         if not self._is_endpoint:
0.68 resolvers.py(179):             warnings.extend(self._check_include_trailing_dollar())
0.68 resolvers.py(183):         regex_pattern = self.regex.pattern
0.68 resolvers.py(184):         if regex_pattern.endswith('$') and not regex_pattern.endswith(r'\$'):
0.68 resolvers.py(192):             return []
0.68 resolvers.py(180):         return warnings
0.68 resolvers.py(76):     if urlconf is None:
0.68 resolvers.py(77):         urlconf = settings.ROOT_URLCONF
0.68 resolvers.py(78):     return _get_cached_resolver(urlconf)
System check identified no issues (0 silenced).
test_repr_with_partial_function (test_coverup_django__django-14155.ResolverMatchReprTest) ... ok

----------------------------------------------------------------------
Ran 1 test in 0.000s

OK
0.71 resolvers.py(34):         self.func = func
0.71 resolvers.py(35):         self.args = args
0.71 resolvers.py(36):         self.kwargs = kwargs
0.71 resolvers.py(37):         self.url_name = url_name
0.71 resolvers.py(38):         self.route = route
0.71 resolvers.py(39):         self.tried = tried
0.71 resolvers.py(43):         self.app_names = [x for x in app_names if x] if app_names else []
0.71 resolvers.py(44):         self.app_name = ':'.join(self.app_names)
0.71 resolvers.py(45):         self.namespaces = [x for x in namespaces if x] if namespaces else []
0.71 resolvers.py(46):         self.namespace = ':'.join(self.namespaces)
0.71 resolvers.py(48):         if not hasattr(func, '__name__'):
0.71 resolvers.py(50):             self._func_path = func.__class__.__module__ + '.' + func.__class__.__name__
0.71 resolvers.py(55):         view_path = url_name or self._func_path
0.71 resolvers.py(56):         self.view_name = ':'.join(self.namespaces + [view_path])
0.71 resolvers.py(62):         if isinstance(self.func, functools.partial):
0.71 resolvers.py(63):             func = repr(self.func)
0.71 resolvers.py(67):             'ResolverMatch(func=%s, args=%r, kwargs=%r, url_name=%r, '
0.71 resolvers.py(69):                 func, self.args, self.kwargs, self.url_name,
0.71 resolvers.py(70):                 self.app_names, self.namespaces, self.route,
0.71 resolvers.py(68):             'app_names=%r, namespaces=%r, route=%r)' % (
0.71 resolvers.py(67):             'ResolverMatch(func=%s, args=%r, kwargs=%r, url_name=%r, '
0.71 resolvers.py(66):         return (
+ cat coverage.cover
{"/testbed/django/urls/resolvers.py": {"8": 1, "9": 1, "10": 1, "11": 1, "12": 1, "13": 1, "15": 1, "17": 1, "18": 1, "19": 1, "20": 1, "21": 1, "22": 1, "23": 1, "24": 1, "25": 1, "27": 1, "28": 1, "29": 1, "32": 2, "75": 1, "81": 1, "82": 1, "86": 1, "87": 1, "97": 2, "120": 2, "153": 2, "207": 2, "208": 1, "212": 1, "258": 2, "301": 2, "335": 2, "386": 2, "33": 1, "58": 1, "61": 1, "34": 1, "35": 1, "36": 1, "37": 1, "38": 1, "39": 1, "43": 1, "44": 1, "45": 1, "46": 1, "48": 1, "50": 1, "53": 0, "55": 1, "56": 1, "59": 0, "62": 1, "63": 1, "65": 0, "67": 2, "69": 1, "70": 1, "68": 1, "66": 1, "76": 2, "77": 2, "78": 2, "83": 1, "91": 0, "92": 0, "93": 0, "94": 0, "98": 1, "101": 1, "99": 2, "105": 1, "106": 0, "110": 1, "111": 1, "112": 1, "113": 1, "114": 0, "115": 0, "116": 0, "117": 0, "121": 1, "130": 1, "125": 0, "126": 0, "127": 0, "128": 0, "134": 1, "135": 1, "138": 0, "139": 1, "140": 0, "141": 0, "144": 0, "146": 0, "148": 0, "150": 1, "154": 1, "156": 1, "163": 1, "175": 1, "182": 1, "194": 1, "203": 1, "157": 1, "158": 1, "159": 1, "160": 1, "161": 1, "164": 0, "165": 0, "169": 0, "170": 0, "171": 0, "172": 0, "173": 0, "176": 1, "177": 1, "178": 1, "179": 1, "180": 1, "183": 1, "184": 1, "185": 0, "186": 0, "188": 0, "189": 0, "192": 1, "196": 1, "197": 1, "198": 0, "199": 0, "200": 0, "201": 0, "204": 0, "219": 0, "220": 0, "221": 0, "223": 0, "224": 0, "225": 0, "226": 0, "227": 0, "228": 0, "229": 0, "230": 0, "232": 0, "233": 0, "234": 0, "235": 0, "236": 0, "237": 0, "238": 0, "240": 0, "241": 0, "243": 0, "244": 0, "245": 0, "246": 0, "247": 0, "248": 0, "249": 0, "250": 0, "251": 0, "252": 0, "253": 0, "254": 0, "255": 0, "259": 1, "261": 1, "268": 1, "282": 1, "294": 1, "297": 1, "262": 0, "263": 0, "264": 0, "265": 0, "266": 0, "269": 0, "270": 0, "272": 0, "273": 0, "274": 0, "275": 0, "276": 0, "277": 0, "278": 0, "279": 0, "280": 0, "283": 0, "284": 0, "285": 0, "286": 0, "287": 0, "289": 0, "290": 0, "292": 0, "295": 0, "298": 0, "302": 1, "306": 1, "307": 1, "311": 1, "312": 1, "319": 1, "325": 1, "328": 1, "331": 1, "303": 0, "304": 0, "309": 0, "313": 0, "314": 0, "315": 0, "317": 0, "320": 0, "321": 0, "322": 0, "323": 0, "326": 0, "329": 0, "332": 0, "336": 1, "342": 1, "345": 1, "350": 1, "364": 1, "372": 1, "373": 1, "337": 0, "338": 0, "339": 0, "340": 0, "343": 0, "346": 0, "347": 0, "348": 0, "354": 0, "355": 0, "356": 0, "357": 0, "358": 0, "360": 0, "362": 0, "365": 0, "366": 0, "367": 0, "369": 0, "370": 0, "378": 0, "379": 0, "380": 0, "381": 0, "382": 0, "383": 0, "387": 1, "406": 1, "417": 1, "424": 1, "454": 1, "515": 1, "516": 1, "522": 1, "523": 1, "529": 1, "530": 1, "536": 1, "537": 1, "543": 1, "544": 1, "552": 1, "557": 1, "595": 1, "596": 1, "602": 1, "603": 1, "617": 1, "626": 1, "629": 1, "388": 1, "392": 1, "393": 1, "394": 1, "395": 1, "396": 1, "397": 1, "398": 1, "399": 1, "402": 1, "403": 1, "404": 1, "407": 0, "409": 0, "411": 0, "412": 0, "413": 0, "414": 0, "418": 1, "419": 1, "420": 0, "421": 1, "422": 1, "425": 1, "428": 5, "429": 4, "430": 4, "431": 0, "432": 0, "434": 0, "433": 0, "435": 0, "436": 0, "437": 0, "438": 4, "439": 4, "440": 4, "441": 4, "442": 0, "444": 0, "443": 0, "447": 0, "448": 0, "449": 0, "451": 0, "452": 1, "459": 0, "460": 0, "461": 0, "462": 0, "463": 0, "464": 0, "465": 0, "466": 0, "467": 0, "468": 0, "469": 0, "470": 0, "471": 0, "472": 0, "473": 0, "474": 0, "475": 0, "476": 0, "478": 0, "479": 0, "480": 0, "481": 0, "484": 0, "485": 0, "486": 0, "487": 0, "489": 0, "490": 0, "491": 0, "492": 0, "493": 0, "495": 0, "496": 0, "497": 0, "498": 0, "494": 0, "501": 0, "502": 0, "503": 0, "504": 0, "505": 0, "506": 0, "507": 0, "508": 0, "509": 0, "510": 0, "511": 0, "513": 0, "517": 0, "518": 0, "519": 0, "520": 0, "524": 0, "525": 0, "526": 0, "527": 0, "531": 0, "532": 0, "533": 0, "534": 0, "538": 0, "539": 0, "541": 0, "546": 0, "547": 0, "548": 0, "549": 0, "550": 0, "553": 0, "554": 0, "555": 0, "558": 0, "559": 0, "560": 0, "561": 0, "562": 0, "563": 0, "564": 0, "565": 0, "566": 0, "567": 0, "569": 0, "571": 0, "573": 0, "576": 0, "577": 0, "578": 0, "579": 0, "580": 0, "581": 0, "582": 0, "583": 0, "584": 0, "585": 0, "586": 0, "587": 0, "588": 0, "589": 0, "591": 0, "592": 0, "593": 0, "597": 1, "598": 1, "600": 0, "605": 1, "606": 1, "607": 1, "608": 0, "610": 0, "609": 0, "614": 0, "615": 1, "618": 4, "619": 4, "622": 4, "623": 4, "624": 4, "627": 0, "630": 0, "631": 0, "633": 0, "634": 0, "636": 0, "638": 0, "639": 0, "640": 0, "641": 0, "642": 0, "643": 0, "645": 0, "646": 0, "647": 0, "648": 0, "649": 0, "651": 0, "652": 0, "653": 0, "654": 0, "655": 0, "656": 0, "657": 0, "658": 0, "659": 0, "661": 0, "662": 0, "663": 0, "669": 0, "670": 0, "672": 0, "674": 0, "677": 0, "678": 0, "679": 0, "680": 0, "682": 0, "684": 0, "685": 0, "686": 0, "687": 0, "688": 0, "689": 0, "691": 0, "693": 0, "694": 0, "692": 0, "698": 0, "699": 0, "697": 0, "701": 0}}
+ git checkout 2f13c476abe4ba787b6cb71131818341911f43cc
Note: switching to '2f13c476abe4ba787b6cb71131818341911f43cc'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at 2f13c476ab Fixed #31487 -- Added precision argument to Round().
M	django/urls/resolvers.py
+ git apply /root/pre_state.patch
error: unrecognized input
