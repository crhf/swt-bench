+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD 360290c4c401e386db60723ddb0109ed499c9f6e
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch master
nothing to commit, working tree clean
+ git show
commit 360290c4c401e386db60723ddb0109ed499c9f6e
Merge: 98a20f6a84 c09acba60f
Author: Chris Smith <smichr@gmail.com>
Date:   Thu Sep 15 12:21:23 2016 -0500

    Merge pull request #11603 from ralphsol/patch-1
    
    Updated primetest.py

+ git diff 360290c4c401e386db60723ddb0109ed499c9f6e
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Requirement already satisfied: mpmath>=0.19 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from sympy==1.0.1.dev0) (1.3.0)
Installing collected packages: sympy
  Attempting uninstall: sympy
    Found existing installation: sympy 1.0.1.dev0
    Uninstalling sympy-1.0.1.dev0:
      Successfully uninstalled sympy-1.0.1.dev0
  DEPRECATION: Legacy editable install of sympy==1.0.1.dev0 from file:///testbed (setup.py develop) is deprecated. pip 25.3 will enforce this behaviour change. A possible replacement is to add a pyproject.toml or enable --use-pep517, and use setuptools >= 64. If the resulting installation is not behaving as expected, try using --config-settings editable_mode=compat. Please consult the setuptools documentation for more information. Discussion can be found at https://github.com/pypa/pip/issues/11457
  Running setup.py develop for sympy
Successfully installed sympy
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git apply -v -
Checking patch sympy/geometry/point.py...
Applied patch sympy/geometry/point.py cleanly.
+ git apply -v -
<stdin>:13: trailing whitespace.
    
<stdin>:16: trailing whitespace.
    
Checking patch sympy/polys/tests/test_coverup_sympy__sympy-11618.py...
Applied patch sympy/polys/tests/test_coverup_sympy__sympy-11618.py cleanly.
warning: 2 lines add whitespace errors.
+ PYTHONWARNINGS=ignore::UserWarning,ignore::SyntaxWarning
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(sympy/geometry/point\.py)' bin/test -C --verbose sympy/polys/tests/test_coverup_sympy__sympy-11618.p
/testbed/sympy/core/basic.py:3: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
  from collections import Mapping
/testbed/sympy/plotting/plot.py:28: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
  from collections import Callable
/testbed/sympy/core/basic.py:3: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
  from collections import Mapping
/testbed/sympy/plotting/plot.py:28: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
  from collections import Callable
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(sympy/geometry/point\\.py)']
0.32 point.py(1): """Geometrical Points.
0.32 point.py(11): from __future__ import division, print_function
0.32 point.py(13): from sympy.core import S, sympify
0.32 point.py(14): from sympy.core.compatibility import iterable
0.32 point.py(15): from sympy.core.containers import Tuple
0.32 point.py(16): from sympy.simplify import nsimplify, simplify
0.32 point.py(17): from sympy.geometry.exceptions import GeometryError
0.32 point.py(18): from sympy.functions.elementary.miscellaneous import sqrt
0.32 point.py(19): from sympy.functions.elementary.complexes import im
0.32 point.py(20): from sympy.matrices import Matrix
0.32 point.py(21): from sympy.core.numbers import Float
0.32 point.py(22): from sympy.core.evaluate import global_evaluate
0.32 point.py(23): from sympy.core.add import Add
0.32 point.py(25): from .entity import GeometryEntity
0.32 point.py(28): class Point(GeometryEntity):
0.32 point.py(28): class Point(GeometryEntity):
0.32 point.py(29):     """A point in a n-dimensional Euclidean space.
0.32 point.py(78):     def __new__(cls, *args, **kwargs):
0.32 point.py(106):     is_Point = True
0.32 point.py(108):     def __contains__(self, item):
0.32 point.py(111):     def is_concyclic(*args):
0.32 point.py(120):     def is_collinear(*args):
0.32 point.py(193):     def is_scalar_multiple(p1, p2):
0.32 point.py(204):     @property
0.32 point.py(205):     def length(self):
0.32 point.py(219):     @property
0.32 point.py(220):     def origin(self):
0.32 point.py(225):     @property
0.32 point.py(226):     def is_zero(self):
0.32 point.py(230):     @property
0.32 point.py(231):     def ambient_dimension(self):
0.32 point.py(237):     def distance(self, p):
0.32 point.py(286):     def taxicab_distance(self, p):
0.32 point.py(319):     def midpoint(self, p):
0.32 point.py(348):     def evalf(self, prec=None, **options):
0.32 point.py(379):     n = evalf
0.32 point.py(381):     def intersection(self, o):
0.32 point.py(420):     def dot(self, p2):
0.32 point.py(425):     def equals(self, other):
0.32 point.py(432):     def __len__(self):
0.32 point.py(435):     def __iter__(self):
0.32 point.py(438):     def __eq__(self, other):
0.32 point.py(443):     def __hash__(self):
0.32 point.py(446):     def __getitem__(self, key):
0.32 point.py(449):     def __add__(self, other):
0.32 point.py(465):     def __sub__(self, other):
0.32 point.py(470):     def __mul__(self, factor):
0.32 point.py(475):     def __div__(self, divisor):
0.32 point.py(480):     __truediv__ = __div__
0.32 point.py(482):     def __neg__(self):
0.32 point.py(486):     def __abs__(self):
0.32 point.py(491): class Point2D(Point):
0.32 point.py(491): class Point2D(Point):
0.32 point.py(492):     """A point in a 2-dimensional Euclidean space.
0.32 point.py(540):     def __new__(cls, *args, **kwargs):
0.32 point.py(564):     def __contains__(self, item):
0.32 point.py(567):     @property
0.32 point.py(568):     def x(self):
0.32 point.py(582):     @property
0.32 point.py(583):     def y(self):
0.32 point.py(597):     @property
0.32 point.py(598):     def bounds(self):
0.32 point.py(606):     def is_concyclic(*points):
0.32 point.py(673):     def rotate(self, angle, pt=None):
0.32 point.py(707):     def scale(self, x=1, y=1, pt=None):
0.32 point.py(734):     def translate(self, x=0, y=0):
0.32 point.py(757):     def transform(self, matrix):
0.32 point.py(779): class Point3D(Point):
0.32 point.py(779): class Point3D(Point):
0.32 point.py(780):     """A point in a 3-dimensional Euclidean space.
0.32 point.py(828):     def __new__(cls, *args, **kwargs):
0.32 point.py(849):     def __contains__(self, item):
0.32 point.py(852):     @property
0.32 point.py(853):     def x(self):
0.32 point.py(867):     @property
0.32 point.py(868):     def y(self):
0.32 point.py(882):     @property
0.32 point.py(883):     def z(self):
0.32 point.py(897):     def direction_ratio(self, point):
0.32 point.py(921):     def direction_cosine(self, point):
0.32 point.py(948):     @staticmethod
0.32 point.py(949):     def are_collinear(*points):
0.32 point.py(984):     @staticmethod
0.32 point.py(985):     def are_coplanar(*points):
0.32 point.py(1033):     def intersection(self, o):
0.32 point.py(1070):     def scale(self, x=1, y=1, z=1, pt=None):
0.32 point.py(1097):     def translate(self, x=0, y=0, z=0):
0.32 point.py(1120):     def transform(self, matrix):
============================= test process starts ==============================
executable:         /opt/miniconda3/envs/testbed/bin/python3  (3.9.23-final-0) [CPython]
architecture:       64-bit
cache:              no
ground types:       python 
random seed:        20543758
hash randomization: on (PYTHONHASHSEED=3110091654)

sympy/polys/tests/test_coverup_sympy__sympy-11618.py[1] 
test_distance_ignores_third_dimension 0.36 point.py(79):         evaluate = kwargs.get('evaluate', global_evaluate[0])
0.36 point.py(81):         if iterable(args[0]):
0.36 point.py(89):         coords = Tuple(*args)
0.36 point.py(90):         if any(a.is_number and im(a) for a in coords):
0.36 point.py(90):         if any(a.is_number and im(a) for a in coords):
0.36 point.py(90):         if any(a.is_number and im(a) for a in coords):
0.36 point.py(90):         if any(a.is_number and im(a) for a in coords):
0.36 point.py(95):         if evaluate:
0.36 point.py(96):             coords = coords.xreplace(dict(
0.36 point.py(97):                 [(f, simplify(nsimplify(f, rational=True)))
0.36 point.py(98):                 for f in coords.atoms(Float)]))
0.36 point.py(97):                 [(f, simplify(nsimplify(f, rational=True)))
0.36 point.py(97):                 [(f, simplify(nsimplify(f, rational=True)))
0.36 point.py(96):             coords = coords.xreplace(dict(
0.36 point.py(99):         if len(coords) == 2:
0.36 point.py(100):             return Point2D(coords, **kwargs)
0.36 point.py(541):         eval = kwargs.get('evaluate', global_evaluate[0])
0.36 point.py(542):         check = True
0.36 point.py(543):         if isinstance(args[0], Point2D):
0.36 point.py(549):             if iterable(args[0]):
0.36 point.py(550):                 args = args[0]
0.36 point.py(551):             if len(args) != 2:
0.36 point.py(554):         coords = Tuple(*args)
0.36 point.py(555):         if check:
0.36 point.py(556):             if any(a.is_number and im(a) for a in coords):
0.36 point.py(556):             if any(a.is_number and im(a) for a in coords):
0.36 point.py(556):             if any(a.is_number and im(a) for a in coords):
0.36 point.py(556):             if any(a.is_number and im(a) for a in coords):
0.36 point.py(558):         if eval:
0.36 point.py(559):             coords = coords.xreplace(dict(
0.36 point.py(560):                 [(f, simplify(nsimplify(f, rational=True)))
0.36 point.py(561):                 for f in coords.atoms(Float)]))
0.36 point.py(560):                 [(f, simplify(nsimplify(f, rational=True)))
0.36 point.py(560):                 [(f, simplify(nsimplify(f, rational=True)))
0.36 point.py(559):             coords = coords.xreplace(dict(
0.36 point.py(562):         return GeometryEntity.__new__(cls, *coords)
0.36 point.py(79):         evaluate = kwargs.get('evaluate', global_evaluate[0])
0.36 point.py(81):         if iterable(args[0]):
0.36 point.py(89):         coords = Tuple(*args)
0.36 point.py(90):         if any(a.is_number and im(a) for a in coords):
0.36 point.py(90):         if any(a.is_number and im(a) for a in coords):
0.36 point.py(90):         if any(a.is_number and im(a) for a in coords):
0.36 point.py(90):         if any(a.is_number and im(a) for a in coords):
0.36 point.py(90):         if any(a.is_number and im(a) for a in coords):
0.36 point.py(95):         if evaluate:
0.36 point.py(96):             coords = coords.xreplace(dict(
0.36 point.py(97):                 [(f, simplify(nsimplify(f, rational=True)))
0.36 point.py(98):                 for f in coords.atoms(Float)]))
0.36 point.py(97):                 [(f, simplify(nsimplify(f, rational=True)))
0.36 point.py(97):                 [(f, simplify(nsimplify(f, rational=True)))
0.36 point.py(96):             coords = coords.xreplace(dict(
0.36 point.py(99):         if len(coords) == 2:
0.36 point.py(101):         if len(coords) == 3:
0.36 point.py(102):             return Point3D(coords, **kwargs)
0.36 point.py(829):         eval = kwargs.get('evaluate', global_evaluate[0])
0.36 point.py(830):         if isinstance(args[0], (Point, Point3D)):
0.36 point.py(835):             if iterable(args[0]):
0.36 point.py(836):                 args = args[0]
0.36 point.py(837):             if len(args) not in (2, 3):
0.36 point.py(840):         coords = Tuple(*args)
0.36 point.py(841):         if len(coords) == 2:
0.36 point.py(843):         if eval:
0.36 point.py(844):             coords = coords.xreplace(dict(
0.36 point.py(845):                 [(f, simplify(nsimplify(f, rational=True)))
0.36 point.py(846):                 for f in coords.atoms(Float)]))
0.36 point.py(845):                 [(f, simplify(nsimplify(f, rational=True)))
0.36 point.py(845):                 [(f, simplify(nsimplify(f, rational=True)))
0.36 point.py(844):             coords = coords.xreplace(dict(
0.36 point.py(847):         return GeometryEntity.__new__(cls, *coords)
0.36 point.py(269):         if type(p) is not type(self):
0.36 point.py(270):             if len(p) == len(self):
0.36 point.py(433):         return len(self.args)
0.36 point.py(433):         return len(self.args)
0.36 point.py(274):                 p1 = [0] * max(len(p), len(self))
0.36 point.py(433):         return len(self.args)
0.36 point.py(433):         return len(self.args)
0.36 point.py(275):                 p2 = p.args if len(p.args) > len(self.args) else self.args
0.36 point.py(277):                 for i in range(min(len(p), len(self))):
0.36 point.py(433):         return len(self.args)
0.36 point.py(433):         return len(self.args)
0.36 point.py(278):                     p1[i] = p.args[i] if len(p) < len(self) else self.args[i]
0.36 point.py(433):         return len(self.args)
0.36 point.py(433):         return len(self.args)
0.36 point.py(277):                 for i in range(min(len(p), len(self))):
0.36 point.py(278):                     p1[i] = p.args[i] if len(p) < len(self) else self.args[i]
0.36 point.py(433):         return len(self.args)
0.36 point.py(433):         return len(self.args)
0.36 point.py(277):                 for i in range(min(len(p), len(self))):
0.36 point.py(280):                 return sqrt(sum([(a - b)**2 for a, b in zip(
0.36 point.py(281):                     p1, p2)]))
0.36 point.py(280):                 return sqrt(sum([(a - b)**2 for a, b in zip(
0.36 point.py(280):                 return sqrt(sum([(a - b)**2 for a, b in zip(
0.36 point.py(280):                 return sqrt(sum([(a - b)**2 for a, b in zip(
0.36 point.py(280):                 return sqrt(sum([(a - b)**2 for a, b in zip(
0.36 point.py(280):                 return sqrt(sum([(a - b)**2 for a, b in zip(
F                                   [FAIL]


________________________________________________________________________________
 sympy/polys/tests/test_coverup_sympy__sympy-11618.py:test_distance_ignores_third_dimension 
  File "/testbed/sympy/polys/tests/test_coverup_sympy__sympy-11618.py", line 12, in test_distance_ignores_third_dimension
    assert distance == (5**0.5)
AssertionError

============= tests finished: 0 passed, 1 failed, in 0.01 seconds ==============
DO *NOT* COMMIT!
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(sympy/geometry/point\\.py)']
0.83 point.py(1): """Geometrical Points.
0.83 point.py(11): from __future__ import division, print_function
0.83 point.py(13): from sympy.core import S, sympify
0.83 point.py(14): from sympy.core.compatibility import iterable
0.83 point.py(15): from sympy.core.containers import Tuple
0.83 point.py(16): from sympy.simplify import nsimplify, simplify
0.83 point.py(17): from sympy.geometry.exceptions import GeometryError
0.83 point.py(18): from sympy.functions.elementary.miscellaneous import sqrt
0.83 point.py(19): from sympy.functions.elementary.complexes import im
0.83 point.py(20): from sympy.matrices import Matrix
0.83 point.py(21): from sympy.core.numbers import Float
0.83 point.py(22): from sympy.core.evaluate import global_evaluate
0.83 point.py(23): from sympy.core.add import Add
0.83 point.py(25): from .entity import GeometryEntity
0.84 point.py(28): class Point(GeometryEntity):
0.84 point.py(28): class Point(GeometryEntity):
0.84 point.py(29):     """A point in a n-dimensional Euclidean space.
0.84 point.py(78):     def __new__(cls, *args, **kwargs):
0.84 point.py(106):     is_Point = True
0.84 point.py(108):     def __contains__(self, item):
0.84 point.py(111):     def is_concyclic(*args):
0.84 point.py(120):     def is_collinear(*args):
0.84 point.py(193):     def is_scalar_multiple(p1, p2):
0.84 point.py(204):     @property
0.84 point.py(205):     def length(self):
0.84 point.py(219):     @property
0.84 point.py(220):     def origin(self):
0.84 point.py(225):     @property
0.84 point.py(226):     def is_zero(self):
0.84 point.py(230):     @property
0.84 point.py(231):     def ambient_dimension(self):
0.84 point.py(237):     def distance(self, p):
0.84 point.py(286):     def taxicab_distance(self, p):
0.84 point.py(319):     def midpoint(self, p):
0.84 point.py(348):     def evalf(self, prec=None, **options):
0.84 point.py(379):     n = evalf
0.84 point.py(381):     def intersection(self, o):
0.84 point.py(420):     def dot(self, p2):
0.84 point.py(425):     def equals(self, other):
0.84 point.py(432):     def __len__(self):
0.84 point.py(435):     def __iter__(self):
0.84 point.py(438):     def __eq__(self, other):
0.84 point.py(443):     def __hash__(self):
0.84 point.py(446):     def __getitem__(self, key):
0.84 point.py(449):     def __add__(self, other):
0.84 point.py(465):     def __sub__(self, other):
0.84 point.py(470):     def __mul__(self, factor):
0.84 point.py(475):     def __div__(self, divisor):
0.84 point.py(480):     __truediv__ = __div__
0.84 point.py(482):     def __neg__(self):
0.84 point.py(486):     def __abs__(self):
0.84 point.py(491): class Point2D(Point):
0.84 point.py(491): class Point2D(Point):
0.84 point.py(492):     """A point in a 2-dimensional Euclidean space.
0.84 point.py(540):     def __new__(cls, *args, **kwargs):
0.84 point.py(564):     def __contains__(self, item):
0.84 point.py(567):     @property
0.84 point.py(568):     def x(self):
0.84 point.py(582):     @property
0.84 point.py(583):     def y(self):
0.84 point.py(597):     @property
0.84 point.py(598):     def bounds(self):
0.84 point.py(606):     def is_concyclic(*points):
0.84 point.py(673):     def rotate(self, angle, pt=None):
0.84 point.py(707):     def scale(self, x=1, y=1, pt=None):
0.84 point.py(734):     def translate(self, x=0, y=0):
0.84 point.py(757):     def transform(self, matrix):
0.84 point.py(779): class Point3D(Point):
0.84 point.py(779): class Point3D(Point):
0.84 point.py(780):     """A point in a 3-dimensional Euclidean space.
0.84 point.py(828):     def __new__(cls, *args, **kwargs):
0.84 point.py(849):     def __contains__(self, item):
0.84 point.py(852):     @property
0.84 point.py(853):     def x(self):
0.84 point.py(867):     @property
0.84 point.py(868):     def y(self):
0.84 point.py(882):     @property
0.84 point.py(883):     def z(self):
0.84 point.py(897):     def direction_ratio(self, point):
0.84 point.py(921):     def direction_cosine(self, point):
0.84 point.py(948):     @staticmethod
0.84 point.py(949):     def are_collinear(*points):
0.84 point.py(984):     @staticmethod
0.84 point.py(985):     def are_coplanar(*points):
0.84 point.py(1033):     def intersection(self, o):
0.84 point.py(1070):     def scale(self, x=1, y=1, z=1, pt=None):
0.84 point.py(1097):     def translate(self, x=0, y=0, z=0):
0.84 point.py(1120):     def transform(self, matrix):
+ cat coverage.cover
{"/testbed/sympy/geometry/point.py": {"11": 1, "13": 1, "14": 1, "15": 1, "16": 1, "17": 1, "18": 1, "19": 1, "20": 1, "21": 1, "22": 1, "23": 1, "25": 1, "28": 2, "491": 2, "779": 2, "78": 1, "106": 1, "108": 1, "111": 1, "120": 1, "193": 1, "204": 1, "205": 1, "219": 1, "220": 1, "225": 1, "226": 1, "230": 1, "231": 1, "237": 1, "286": 1, "319": 1, "348": 1, "379": 1, "381": 1, "420": 1, "425": 1, "432": 1, "435": 1, "438": 1, "443": 1, "446": 1, "449": 1, "465": 1, "470": 1, "475": 1, "480": 1, "482": 1, "486": 1, "79": 2, "81": 2, "82": 0, "83": 0, "84": 0, "89": 2, "90": 9, "91": 0, "95": 2, "96": 4, "97": 6, "98": 2, "99": 2, "100": 1, "101": 1, "102": 1, "104": 0, "109": 0, "114": 0, "115": 0, "116": 0, "118": 0, "177": 0, "178": 0, "179": 0, "181": 0, "182": 0, "183": 0, "184": 0, "187": 0, "188": 0, "189": 0, "190": 0, "191": 0, "199": 0, "202": 0, "217": 0, "223": 0, "228": 0, "235": 0, "269": 1, "270": 1, "271": 0, "272": 0, "274": 1, "275": 1, "277": 3, "278": 2, "280": 6, "281": 1, "283": 0, "284": 0, "316": 0, "317": 0, "346": 0, "376": 0, "377": 0, "411": 0, "412": 0, "413": 0, "414": 0, "415": 0, "416": 0, "418": 0, "422": 0, "423": 0, "428": 0, "429": 0, "430": 0, "433": 10, "436": 0, "439": 0, "440": 0, "441": 0, "444": 0, "447": 0, "459": 0, "460": 0, "462": 0, "463": 0, "468": 0, "472": 0, "473": 0, "477": 0, "478": 0, "484": 0, "488": 0, "489": 0, "540": 1, "564": 1, "567": 1, "568": 1, "582": 1, "583": 1, "597": 1, "598": 1, "606": 1, "673": 1, "707": 1, "734": 1, "757": 1, "541": 1, "542": 1, "543": 1, "544": 0, "545": 0, "546": 0, "547": 0, "549": 1, "550": 1, "551": 1, "552": 0, "553": 0, "554": 1, "555": 1, "556": 4, "557": 0, "558": 1, "559": 2, "560": 3, "561": 1, "562": 1, "565": 0, "580": 0, "595": 0, "604": 0, "653": 0, "654": 0, "655": 0, "656": 0, "657": 0, "658": 0, "659": 0, "661": 0, "662": 0, "663": 0, "664": 0, "665": 0, "666": 0, "667": 0, "668": 0, "671": 0, "692": 0, "694": 0, "695": 0, "697": 0, "698": 0, "699": 0, "700": 0, "701": 0, "702": 0, "703": 0, "704": 0, "705": 0, "729": 0, "730": 0, "731": 0, "732": 0, "755": 0, "767": 0, "768": 0, "769": 0, "770": 0, "772": 0, "773": 0, "774": 0, "776": 0, "777": 0, "828": 1, "849": 1, "852": 1, "853": 1, "867": 1, "868": 1, "882": 1, "883": 1, "897": 1, "921": 1, "948": 1, "949": 1, "984": 1, "985": 1, "1033": 1, "1070": 1, "1097": 1, "1120": 1, "829": 1, "830": 1, "831": 0, "832": 0, "833": 0, "835": 1, "836": 1, "837": 1, "838": 0, "839": 0, "840": 1, "841": 1, "842": 0, "843": 1, "844": 2, "845": 3, "846": 1, "847": 1, "850": 0, "865": 0, "880": 0, "895": 0, "919": 0, "943": 0, "944": 0, "945": 0, "946": 0, "982": 0, "1018": 0, "1019": 0, "1020": 0, "1021": 0, "1022": 0, "1023": 0, "1024": 0, "1025": 0, "1026": 0, "1027": 0, "1028": 0, "1029": 0, "1030": 0, "1031": 0, "1063": 0, "1064": 0, "1065": 0, "1066": 0, "1068": 0, "1092": 0, "1093": 0, "1094": 0, "1095": 0, "1118": 0, "1130": 0, "1131": 0, "1132": 0, "1133": 0, "1135": 0, "1136": 0, "1137": 0, "1139": 0, "1140": 0, "1141": 0, "1142": 0}}
{"/testbed/sympy/geometry/point.py": {"11": 1, "13": 1, "14": 1, "15": 1, "16": 1, "17": 1, "18": 1, "19": 1, "20": 1, "21": 1, "22": 1, "23": 1, "25": 1, "28": 2, "491": 2, "779": 2, "78": 1, "106": 1, "108": 1, "111": 1, "120": 1, "193": 1, "204": 1, "205": 1, "219": 1, "220": 1, "225": 1, "226": 1, "230": 1, "231": 1, "237": 1, "286": 1, "319": 1, "348": 1, "379": 1, "381": 1, "420": 1, "425": 1, "432": 1, "435": 1, "438": 1, "443": 1, "446": 1, "449": 1, "465": 1, "470": 1, "475": 1, "480": 1, "482": 1, "486": 1, "79": 0, "81": 0, "82": 0, "83": 0, "84": 0, "89": 0, "90": 0, "91": 0, "95": 0, "96": 0, "97": 0, "98": 0, "99": 0, "100": 0, "101": 0, "102": 0, "104": 0, "109": 0, "114": 0, "115": 0, "116": 0, "118": 0, "177": 0, "178": 0, "179": 0, "181": 0, "182": 0, "183": 0, "184": 0, "187": 0, "188": 0, "189": 0, "190": 0, "191": 0, "199": 0, "202": 0, "217": 0, "223": 0, "228": 0, "235": 0, "269": 0, "270": 0, "271": 0, "272": 0, "274": 0, "275": 0, "277": 0, "278": 0, "280": 0, "281": 0, "283": 0, "284": 0, "316": 0, "317": 0, "346": 0, "376": 0, "377": 0, "411": 0, "412": 0, "413": 0, "414": 0, "415": 0, "416": 0, "418": 0, "422": 0, "423": 0, "428": 0, "429": 0, "430": 0, "433": 0, "436": 0, "439": 0, "440": 0, "441": 0, "444": 0, "447": 0, "459": 0, "460": 0, "462": 0, "463": 0, "468": 0, "472": 0, "473": 0, "477": 0, "478": 0, "484": 0, "488": 0, "489": 0, "540": 1, "564": 1, "567": 1, "568": 1, "582": 1, "583": 1, "597": 1, "598": 1, "606": 1, "673": 1, "707": 1, "734": 1, "757": 1, "541": 0, "542": 0, "543": 0, "544": 0, "545": 0, "546": 0, "547": 0, "549": 0, "550": 0, "551": 0, "552": 0, "553": 0, "554": 0, "555": 0, "556": 0, "557": 0, "558": 0, "559": 0, "560": 0, "561": 0, "562": 0, "565": 0, "580": 0, "595": 0, "604": 0, "653": 0, "654": 0, "655": 0, "656": 0, "657": 0, "658": 0, "659": 0, "661": 0, "662": 0, "663": 0, "664": 0, "665": 0, "666": 0, "667": 0, "668": 0, "671": 0, "692": 0, "694": 0, "695": 0, "697": 0, "698": 0, "699": 0, "700": 0, "701": 0, "702": 0, "703": 0, "704": 0, "705": 0, "729": 0, "730": 0, "731": 0, "732": 0, "755": 0, "767": 0, "768": 0, "769": 0, "770": 0, "772": 0, "773": 0, "774": 0, "776": 0, "777": 0, "828": 1, "849": 1, "852": 1, "853": 1, "867": 1, "868": 1, "882": 1, "883": 1, "897": 1, "921": 1, "948": 1, "949": 1, "984": 1, "985": 1, "1033": 1, "1070": 1, "1097": 1, "1120": 1, "829": 0, "830": 0, "831": 0, "832": 0, "833": 0, "835": 0, "836": 0, "837": 0, "838": 0, "839": 0, "840": 0, "841": 0, "842": 0, "843": 0, "844": 0, "845": 0, "846": 0, "847": 0, "850": 0, "865": 0, "880": 0, "895": 0, "919": 0, "943": 0, "944": 0, "945": 0, "946": 0, "982": 0, "1018": 0, "1019": 0, "1020": 0, "1021": 0, "1022": 0, "1023": 0, "1024": 0, "1025": 0, "1026": 0, "1027": 0, "1028": 0, "1029": 0, "1030": 0, "1031": 0, "1063": 0, "1064": 0, "1065": 0, "1066": 0, "1068": 0, "1092": 0, "1093": 0, "1094": 0, "1095": 0, "1118": 0, "1130": 0, "1131": 0, "1132": 0, "1133": 0, "1135": 0, "1136": 0, "1137": 0, "1139": 0, "1140": 0, "1141": 0, "1142": 0}}
+ git checkout 360290c4c401e386db60723ddb0109ed499c9f6e
Note: switching to '360290c4c401e386db60723ddb0109ed499c9f6e'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at 360290c4c4 Merge pull request #11603 from ralphsol/patch-1
M	sympy/geometry/point.py
+ git apply /root/pre_state.patch
error: unrecognized input
