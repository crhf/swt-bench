+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD e11d3fed782146eebbffdc9ced0364b223b84b6c
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch master
nothing to commit, working tree clean
+ git show
commit e11d3fed782146eebbffdc9ced0364b223b84b6c
Merge: 2d529cea19 3dd68a2910
Author: Oscar Benjamin <oscar.j.benjamin@gmail.com>
Date:   Mon Jan 18 00:22:31 2021 +0000

    Merge pull request #20531 from BhaskarJoshi-01/master
    
    solved "summation introduces spurious symbols"

+ git diff e11d3fed782146eebbffdc9ced0364b223b84b6c
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Requirement already satisfied: mpmath>=0.19 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from sympy==1.8.dev0) (1.3.0)
Installing collected packages: sympy
  Attempting uninstall: sympy
    Found existing installation: sympy 1.8.dev0
    Uninstalling sympy-1.8.dev0:
      Successfully uninstalled sympy-1.8.dev0
  Running setup.py develop for sympy
  DEPRECATION: Legacy editable install of sympy==1.8.dev0 from file:///testbed (setup.py develop) is deprecated. pip 25.3 will enforce this behaviour change. A possible replacement is to add a pyproject.toml or enable --use-pep517, and use setuptools >= 64. If the resulting installation is not behaving as expected, try using --config-settings editable_mode=compat. Please consult the setuptools documentation for more information. Discussion can be found at https://github.com/pypa/pip/issues/11457
Successfully installed sympy
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git apply -v -
Checking patch sympy/core/numbers.py...
Applied patch sympy/core/numbers.py cleanly.
+ git apply -v -
<stdin>:14: trailing whitespace.
    
Checking patch sympy/polys/tests/test_coverup_sympy__sympy-20801.py...
<stdin>:17: new blank line at EOF.
+
Applied patch sympy/polys/tests/test_coverup_sympy__sympy-20801.py cleanly.
warning: 2 lines add whitespace errors.
+ PYTHONWARNINGS=ignore::UserWarning,ignore::SyntaxWarning
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(sympy/core/numbers\.py)' bin/test -C --verbose sympy/polys/tests/test_coverup_sympy__sympy-20801.p
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(sympy/core/numbers\\.py)']
0.32 numbers.py(1): import numbers
0.32 numbers.py(2): import decimal
0.32 numbers.py(3): import fractions
0.33 numbers.py(4): import math
0.33 numbers.py(5): import re as regex
0.33 numbers.py(6): import sys
0.33 numbers.py(8): from .containers import Tuple
0.33 numbers.py(9): from .sympify import (SympifyError, converter, sympify, _convert_numpy_types, _sympify,
0.33 numbers.py(11): from .singleton import S, Singleton
0.33 numbers.py(12): from .expr import Expr, AtomicExpr
0.33 numbers.py(13): from .evalf import pure_complex
0.33 numbers.py(14): from .decorators import _sympifyit
0.33 numbers.py(15): from .cache import cacheit, clear_cache
0.33 numbers.py(16): from .logic import fuzzy_not
0.33 numbers.py(17): from sympy.core.compatibility import (as_int, HAS_GMPY, SYMPY_INTS,
0.33 numbers.py(19): from sympy.core.cache import lru_cache
0.33 numbers.py(20): from .kind import NumberKind
0.33 numbers.py(21): from sympy.multipledispatch import dispatch
0.33 numbers.py(22): import mpmath
0.33 numbers.py(23): import mpmath.libmp as mlib
0.33 numbers.py(24): from mpmath.libmp import bitcount
0.33 numbers.py(25): from mpmath.libmp.backend import MPZ
0.33 numbers.py(26): from mpmath.libmp import mpf_pow, mpf_pi, mpf_e, phi_fixed
0.33 numbers.py(27): from mpmath.ctx_mp import mpnumeric
0.33 numbers.py(28): from mpmath.libmp.libmpf import (
0.33 numbers.py(32): from sympy.utilities.misc import debug, filldedent
0.33 numbers.py(33): from .parameters import global_parameters
0.33 numbers.py(35): from sympy.utilities.exceptions import SymPyDeprecationWarning
0.33 numbers.py(37): rnd = mlib.round_nearest
0.33 numbers.py(39): _LOG2 = math.log(2)
0.33 numbers.py(42): def comp(z1, z2, tol=None):
0.33 numbers.py(151): def mpf_norm(mpf, prec):
0.33 numbers.py(181): _errdict = {"divide": False}
0.33 numbers.py(184): def seterr(divide=False):
0.33 numbers.py(196): def _as_integer_ratio(p):
0.33 numbers.py(207): def _decimal_to_Rational_prec(dec):
0.33 numbers.py(222): _floatpat = regex.compile(r"[-+]?((\d*\.\d+)|(\d+\.?))")
0.33 numbers.py(223): def _literal_float(f):
0.33 numbers.py(231): @lru_cache(1024)
0.33 numbers.py(232): def igcd(*args):
0.33 numbers.py(267): igcd2 = math.gcd
0.33 numbers.py(270): def igcd_lehmer(a, b):
0.33 numbers.py(416): def ilcm(*args):
0.33 numbers.py(442): def igcdex(a, b):
0.33 numbers.py(488): def mod_inverse(a, m):
0.33 numbers.py(554): class Number(AtomicExpr):
0.33 numbers.py(554): class Number(AtomicExpr):
0.33 numbers.py(555):     """Represents atomic numbers in SymPy.
0.33 numbers.py(582):     is_commutative = True
0.33 numbers.py(583):     is_number = True
0.33 numbers.py(584):     is_Number = True
0.33 numbers.py(586):     __slots__ = ()
0.33 numbers.py(589):     _prec = -1
0.33 numbers.py(591):     kind = NumberKind
0.33 numbers.py(593):     def __new__(cls, *obj):
0.33 numbers.py(623):     def invert(self, other, *gens, **args):
0.33 numbers.py(629):     def __divmod__(self, other):
0.33 numbers.py(655):     def __rdivmod__(self, other):
0.33 numbers.py(662):     def _as_mpf_val(self, prec):
0.33 numbers.py(667):     def _eval_evalf(self, prec):
0.33 numbers.py(670):     def _as_mpf_op(self, prec):
0.33 numbers.py(674):     def __float__(self):
0.33 numbers.py(677):     def floor(self):
0.33 numbers.py(681):     def ceiling(self):
0.33 numbers.py(685):     def __floor__(self):
0.33 numbers.py(688):     def __ceil__(self):
0.33 numbers.py(691):     def _eval_conjugate(self):
0.33 numbers.py(694):     def _eval_order(self, *symbols):
0.33 numbers.py(699):     def _eval_subs(self, old, new):
0.33 numbers.py(704):     def _eval_is_finite(self):
0.33 numbers.py(707):     @classmethod
0.33 numbers.py(708):     def class_key(cls):
0.33 numbers.py(711):     @cacheit
0.33 numbers.py(712):     def sort_key(self, order=None):
0.33 numbers.py(715):     @_sympifyit('other', NotImplemented)
0.33 numbers.py(716):     def __add__(self, other):
0.33 numbers.py(726):     @_sympifyit('other', NotImplemented)
0.33 numbers.py(727):     def __sub__(self, other):
0.33 numbers.py(737):     @_sympifyit('other', NotImplemented)
0.33 numbers.py(738):     def __mul__(self, other):
0.33 numbers.py(760):     @_sympifyit('other', NotImplemented)
0.33 numbers.py(761):     def __truediv__(self, other):
0.33 numbers.py(769):     def __eq__(self, other):
0.33 numbers.py(773):     def __ne__(self, other):
0.33 numbers.py(777):     def __lt__(self, other):
0.33 numbers.py(785):     def __le__(self, other):
0.33 numbers.py(793):     def __gt__(self, other):
0.33 numbers.py(800):     def __ge__(self, other):
0.33 numbers.py(807):     def __hash__(self):
0.33 numbers.py(810):     def is_constant(self, *wrt, **flags):
0.33 numbers.py(813):     def as_coeff_mul(self, *deps, rational=True, **kwargs):
0.33 numbers.py(821):     def as_coeff_add(self, *deps):
0.33 numbers.py(827):     def as_coeff_Mul(self, rational=False):
0.33 numbers.py(833):     def as_coeff_Add(self, rational=False):
0.33 numbers.py(839):     def gcd(self, other):
0.33 numbers.py(844):     def lcm(self, other):
0.33 numbers.py(849):     def cofactors(self, other):
0.33 numbers.py(855): class Float(Number):
0.33 numbers.py(855): class Float(Number):
0.33 numbers.py(856):     """Represent a floating-point number of arbitrary precision.
0.33 numbers.py(1018):     __slots__ = ('_mpf_', '_prec')
0.33 numbers.py(1022):     is_rational = None
0.33 numbers.py(1023):     is_irrational = None
0.33 numbers.py(1024):     is_number = True
0.33 numbers.py(1026):     is_real = True
0.33 numbers.py(1027):     is_extended_real = True
0.33 numbers.py(1029):     is_Float = True
0.33 numbers.py(1031):     def __new__(cls, num, dps=None, prec=None, precision=None):
0.33 numbers.py(1191):     @classmethod
0.33 numbers.py(1192):     def _new(cls, _mpf_, _prec, zero=True):
0.33 numbers.py(1209):     def __getnewargs__(self):
0.33 numbers.py(1212):     def __getstate__(self):
0.33 numbers.py(1215):     def _hashable_content(self):
0.33 numbers.py(1218):     def floor(self):
0.33 numbers.py(1222):     def ceiling(self):
0.33 numbers.py(1226):     def __floor__(self):
0.33 numbers.py(1229):     def __ceil__(self):
0.33 numbers.py(1232):     @property
0.33 numbers.py(1233):     def num(self):
0.33 numbers.py(1236):     def _as_mpf_val(self, prec):
0.33 numbers.py(1242):     def _as_mpf_op(self, prec):
0.33 numbers.py(1245):     def _eval_is_finite(self):
0.33 numbers.py(1250):     def _eval_is_infinite(self):
0.33 numbers.py(1255):     def _eval_is_integer(self):
0.33 numbers.py(1258):     def _eval_is_negative(self):
0.33 numbers.py(1263):     def _eval_is_positive(self):
0.33 numbers.py(1268):     def _eval_is_extended_negative(self):
0.33 numbers.py(1275):     def _eval_is_extended_positive(self):
0.33 numbers.py(1282):     def _eval_is_zero(self):
0.33 numbers.py(1285):     def __bool__(self):
0.33 numbers.py(1288):     def __neg__(self):
0.33 numbers.py(1291):     @_sympifyit('other', NotImplemented)
0.33 numbers.py(1292):     def __add__(self, other):
0.33 numbers.py(1298):     @_sympifyit('other', NotImplemented)
0.33 numbers.py(1299):     def __sub__(self, other):
0.33 numbers.py(1305):     @_sympifyit('other', NotImplemented)
0.33 numbers.py(1306):     def __mul__(self, other):
0.33 numbers.py(1312):     @_sympifyit('other', NotImplemented)
0.33 numbers.py(1313):     def __truediv__(self, other):
0.33 numbers.py(1319):     @_sympifyit('other', NotImplemented)
0.33 numbers.py(1320):     def __mod__(self, other):
0.33 numbers.py(1334):     @_sympifyit('other', NotImplemented)
0.33 numbers.py(1335):     def __rmod__(self, other):
0.33 numbers.py(1343):     def _eval_power(self, expt):
0.33 numbers.py(1375):     def __abs__(self):
0.33 numbers.py(1378):     def __int__(self):
0.33 numbers.py(1383):     def __eq__(self, other):
0.33 numbers.py(1413):     def __ne__(self, other):
0.33 numbers.py(1416):     def _Frel(self, other, op):
0.33 numbers.py(1446):     def __gt__(self, other):
0.33 numbers.py(1454):     def __ge__(self, other):
0.33 numbers.py(1462):     def __lt__(self, other):
0.33 numbers.py(1470):     def __le__(self, other):
0.33 numbers.py(1478):     def __hash__(self):
0.33 numbers.py(1481):     def epsilon_eq(self, other, epsilon="1e-15"):
0.33 numbers.py(1484):     def _sage_(self):
0.33 numbers.py(1488):     def __format__(self, format_spec):
0.33 numbers.py(1493): converter[float] = converter[decimal.Decimal] = Float
0.33 numbers.py(1496): RealNumber = Float
0.33 numbers.py(1499): class Rational(Number):
0.33 numbers.py(1499): class Rational(Number):
0.33 numbers.py(1500):     """Represents rational numbers (p/q) of any size.
0.33 numbers.py(1582):     is_real = True
0.33 numbers.py(1583):     is_integer = False
0.33 numbers.py(1584):     is_rational = True
0.33 numbers.py(1585):     is_number = True
0.33 numbers.py(1587):     __slots__ = ('p', 'q')
0.33 numbers.py(1589):     is_Rational = True
0.33 numbers.py(1591):     @cacheit
0.33 numbers.py(1592):     def __new__(cls, p, q=None, gcd=None):
0.33 numbers.py(1666):     def limit_denominator(self, max_denominator=1000000):
0.33 numbers.py(1682):     def __getnewargs__(self):
0.33 numbers.py(1685):     def _hashable_content(self):
0.33 numbers.py(1688):     def _eval_is_positive(self):
0.33 numbers.py(1691):     def _eval_is_zero(self):
0.33 numbers.py(1694):     def __neg__(self):
0.33 numbers.py(1697):     @_sympifyit('other', NotImplemented)
0.33 numbers.py(1698):     def __add__(self, other):
0.33 numbers.py(1710):     __radd__ = __add__
0.33 numbers.py(1712):     @_sympifyit('other', NotImplemented)
0.33 numbers.py(1713):     def __sub__(self, other):
0.33 numbers.py(1724):     @_sympifyit('other', NotImplemented)
0.33 numbers.py(1725):     def __rsub__(self, other):
0.33 numbers.py(1736):     @_sympifyit('other', NotImplemented)
0.33 numbers.py(1737):     def __mul__(self, other):
0.33 numbers.py(1748):     __rmul__ = __mul__
0.33 numbers.py(1750):     @_sympifyit('other', NotImplemented)
0.33 numbers.py(1751):     def __truediv__(self, other):
0.33 numbers.py(1765):     @_sympifyit('other', NotImplemented)
0.33 numbers.py(1766):     def __rtruediv__(self, other):
0.33 numbers.py(1778):     @_sympifyit('other', NotImplemented)
0.33 numbers.py(1779):     def __mod__(self, other):
0.33 numbers.py(1791):     @_sympifyit('other', NotImplemented)
0.33 numbers.py(1792):     def __rmod__(self, other):
0.33 numbers.py(1797):     def _eval_power(self, expt):
0.33 numbers.py(1835):     def _as_mpf_val(self, prec):
0.33 numbers.py(1838):     def _mpmath_(self, prec, rnd):
0.33 numbers.py(1841):     def __abs__(self):
0.33 numbers.py(1844):     def __int__(self):
0.33 numbers.py(1850):     def floor(self):
0.33 numbers.py(1853):     def ceiling(self):
0.33 numbers.py(1856):     def __floor__(self):
0.33 numbers.py(1859):     def __ceil__(self):
0.33 numbers.py(1862):     def __eq__(self, other):
0.33 numbers.py(1908):     def __ne__(self, other):
0.33 numbers.py(1911):     def _Rrel(self, other, attr):
0.33 numbers.py(1932):     def __gt__(self, other):
0.33 numbers.py(1940):     def __ge__(self, other):
0.33 numbers.py(1948):     def __lt__(self, other):
0.33 numbers.py(1956):     def __le__(self, other):
0.33 numbers.py(1964):     def __hash__(self):
0.33 numbers.py(1967):     def factors(self, limit=None, use_trial=True, use_rho=False,
0.33 numbers.py(1979):     def numerator(self):
0.33 numbers.py(1982):     def denominator(self):
0.33 numbers.py(1985):     @_sympifyit('other', NotImplemented)
0.33 numbers.py(1986):     def gcd(self, other):
0.33 numbers.py(1995):     @_sympifyit('other', NotImplemented)
0.33 numbers.py(1996):     def lcm(self, other):
0.33 numbers.py(2003):     def as_numer_denom(self):
0.33 numbers.py(2006):     def _sage_(self):
0.33 numbers.py(2010):     def as_content_primitive(self, radical=False, clear=True):
0.33 numbers.py(2030):     def as_coeff_Mul(self, rational=False):
0.33 numbers.py(2034):     def as_coeff_Add(self, rational=False):
0.33 numbers.py(2039): class Integer(Rational):
0.33 numbers.py(2039): class Integer(Rational):
0.33 numbers.py(2040):     """Represents integer numbers of any size.
0.33 numbers.py(2066):     q = 1
0.33 numbers.py(2067):     is_integer = True
0.33 numbers.py(2068):     is_number = True
0.33 numbers.py(2070):     is_Integer = True
0.33 numbers.py(2072):     __slots__ = ('p',)
0.33 numbers.py(2074):     def _as_mpf_val(self, prec):
0.33 numbers.py(2077):     def _mpmath_(self, prec, rnd):
0.33 numbers.py(2080):     @cacheit
0.33 numbers.py(2081):     def __new__(cls, i):
0.33 numbers.py(2107):     def __getnewargs__(self):
0.33 numbers.py(2111):     def __int__(self):
0.33 numbers.py(2114):     def floor(self):
0.33 numbers.py(2117):     def ceiling(self):
0.33 numbers.py(2120):     def __floor__(self):
0.33 numbers.py(2123):     def __ceil__(self):
0.33 numbers.py(2126):     def __neg__(self):
0.33 numbers.py(2129):     def __abs__(self):
0.33 numbers.py(2135):     def __divmod__(self, other):
0.33 numbers.py(2142):     def __rdivmod__(self, other):
0.33 numbers.py(2157):     def __add__(self, other):
0.33 numbers.py(2169):     def __radd__(self, other):
0.33 numbers.py(2178):     def __sub__(self, other):
0.33 numbers.py(2189):     def __rsub__(self, other):
0.33 numbers.py(2198):     def __mul__(self, other):
0.33 numbers.py(2209):     def __rmul__(self, other):
0.33 numbers.py(2218):     def __mod__(self, other):
0.33 numbers.py(2227):     def __rmod__(self, other):
0.33 numbers.py(2236):     def __eq__(self, other):
0.33 numbers.py(2243):     def __ne__(self, other):
0.33 numbers.py(2246):     def __gt__(self, other):
0.33 numbers.py(2255):     def __lt__(self, other):
0.33 numbers.py(2264):     def __ge__(self, other):
0.33 numbers.py(2273):     def __le__(self, other):
0.33 numbers.py(2282):     def __hash__(self):
0.33 numbers.py(2285):     def __index__(self):
0.33 numbers.py(2290):     def _eval_is_odd(self):
0.33 numbers.py(2293):     def _eval_power(self, expt):
0.33 numbers.py(2401):     def _eval_is_prime(self):
0.33 numbers.py(2406):     def _eval_is_composite(self):
0.33 numbers.py(2412):     def as_numer_denom(self):
0.33 numbers.py(2415):     @_sympifyit('other', NotImplemented)
0.33 numbers.py(2416):     def __floordiv__(self, other):
0.33 numbers.py(2423):     def __rfloordiv__(self, other):
0.33 numbers.py(2427): converter[int] = Integer
0.33 numbers.py(2430): class AlgebraicNumber(Expr):
0.33 numbers.py(2430): class AlgebraicNumber(Expr):
0.33 numbers.py(2431):     """Class for representing algebraic numbers in SymPy. """
0.33 numbers.py(2433):     __slots__ = ('rep', 'root', 'alias', 'minpoly')
0.33 numbers.py(2435):     is_AlgebraicNumber = True
0.33 numbers.py(2436):     is_algebraic = True
0.33 numbers.py(2437):     is_number = True
0.33 numbers.py(2440):     kind = NumberKind
0.33 numbers.py(2445):     free_symbols = set()
0.33 numbers.py(2447):     def __new__(cls, expr, coeffs=None, alias=None, **args):
0.33 numbers.py(2500):     def __hash__(self):
0.33 numbers.py(2503):     def _eval_evalf(self, prec):
0.33 numbers.py(2506):     @property
0.33 numbers.py(2507):     def is_aliased(self):
0.33 numbers.py(2511):     def as_poly(self, x=None):
0.33 numbers.py(2522):     def as_expr(self, x=None):
0.33 numbers.py(2526):     def coeffs(self):
0.33 numbers.py(2530):     def native_coeffs(self):
0.33 numbers.py(2534):     def to_algebraic_integer(self):
0.33 numbers.py(2550):     def _eval_simplify(self, **kwargs):
0.33 numbers.py(2561): class RationalConstant(Rational):
0.33 numbers.py(2561): class RationalConstant(Rational):
0.33 numbers.py(2562):     """
0.33 numbers.py(2568):     __slots__ = ()
0.33 numbers.py(2570):     def __new__(cls):
0.33 numbers.py(2574): class IntegerConstant(Integer):
0.33 numbers.py(2574): class IntegerConstant(Integer):
0.33 numbers.py(2575):     __slots__ = ()
0.33 numbers.py(2577):     def __new__(cls):
0.33 numbers.py(2581): class Zero(IntegerConstant, metaclass=Singleton):
0.33 numbers.py(2581): class Zero(IntegerConstant, metaclass=Singleton):
0.33 numbers.py(2582):     """The number zero.
0.33 numbers.py(2601):     p = 0
0.33 numbers.py(2602):     q = 1
0.33 numbers.py(2603):     is_positive = False
0.33 numbers.py(2604):     is_negative = False
0.33 numbers.py(2605):     is_zero = True
0.33 numbers.py(2606):     is_number = True
0.33 numbers.py(2607):     is_comparable = True
0.33 numbers.py(2609):     __slots__ = ()
0.33 numbers.py(2611):     def __getnewargs__(self):
0.33 numbers.py(2614):     @staticmethod
0.33 numbers.py(2615):     def __abs__():
0.33 numbers.py(2618):     @staticmethod
0.33 numbers.py(2619):     def __neg__():
0.33 numbers.py(2622):     def _eval_power(self, expt):
0.33 numbers.py(2638):     def _eval_order(self, *symbols):
0.33 numbers.py(2642):     def __bool__(self):
0.33 numbers.py(2645):     def as_coeff_Mul(self, rational=False):  # XXX this routine should be deleted
0.33 numbers.py(2650): class One(IntegerConstant, metaclass=Singleton):
0.33 numbers.py(2650): class One(IntegerConstant, metaclass=Singleton):
0.33 numbers.py(2651):     """The number one.
0.33 numbers.py(2667):     is_number = True
0.33 numbers.py(2669):     p = 1
0.33 numbers.py(2670):     q = 1
0.33 numbers.py(2672):     __slots__ = ()
0.33 numbers.py(2674):     def __getnewargs__(self):
0.33 numbers.py(2677):     @staticmethod
0.33 numbers.py(2678):     def __abs__():
0.33 numbers.py(2681):     @staticmethod
0.33 numbers.py(2682):     def __neg__():
0.33 numbers.py(2685):     def _eval_power(self, expt):
0.33 numbers.py(2688):     def _eval_order(self, *symbols):
0.33 numbers.py(2691):     @staticmethod
0.33 numbers.py(2692):     def factors(limit=None, use_trial=True, use_rho=False, use_pm1=False,
0.33 numbers.py(2700): class NegativeOne(IntegerConstant, metaclass=Singleton):
0.33 numbers.py(2700): class NegativeOne(IntegerConstant, metaclass=Singleton):
0.33 numbers.py(2701):     """The number negative one.
0.33 numbers.py(2723):     is_number = True
0.33 numbers.py(2725):     p = -1
0.33 numbers.py(2726):     q = 1
0.33 numbers.py(2728):     __slots__ = ()
0.33 numbers.py(2730):     def __getnewargs__(self):
0.33 numbers.py(2733):     @staticmethod
0.33 numbers.py(2734):     def __abs__():
0.33 numbers.py(2737):     @staticmethod
0.33 numbers.py(2738):     def __neg__():
0.33 numbers.py(2741):     def _eval_power(self, expt):
0.33 numbers.py(2764): class Half(RationalConstant, metaclass=Singleton):
0.33 numbers.py(2764): class Half(RationalConstant, metaclass=Singleton):
0.33 numbers.py(2765):     """The rational number 1/2.
0.33 numbers.py(2781):     is_number = True
0.33 numbers.py(2783):     p = 1
0.33 numbers.py(2784):     q = 2
0.33 numbers.py(2786):     __slots__ = ()
0.33 numbers.py(2788):     def __getnewargs__(self):
0.33 numbers.py(2791):     @staticmethod
0.33 numbers.py(2792):     def __abs__():
0.33 numbers.py(2796): class Infinity(Number, metaclass=Singleton):
0.33 numbers.py(2796): class Infinity(Number, metaclass=Singleton):
0.33 numbers.py(2797):     r"""Positive infinite quantity.
0.33 numbers.py(2837):     is_commutative = True
0.33 numbers.py(2838):     is_number = True
0.33 numbers.py(2839):     is_complex = False
0.33 numbers.py(2840):     is_extended_real = True
0.33 numbers.py(2841):     is_infinite = True
0.33 numbers.py(2842):     is_comparable = True
0.33 numbers.py(2843):     is_extended_positive = True
0.33 numbers.py(2844):     is_prime = False
0.33 numbers.py(2846):     __slots__ = ()
0.33 numbers.py(2848):     def __new__(cls):
0.33 numbers.py(2851):     def _latex(self, printer):
0.33 numbers.py(2854):     def _eval_subs(self, old, new):
0.33 numbers.py(2858):     def _eval_evalf(self, prec=None):
0.33 numbers.py(2861):     def evalf(self, prec=None, **options):
0.33 numbers.py(2864):     @_sympifyit('other', NotImplemented)
0.33 numbers.py(2865):     def __add__(self, other):
0.33 numbers.py(2871):     __radd__ = __add__
0.33 numbers.py(2873):     @_sympifyit('other', NotImplemented)
0.33 numbers.py(2874):     def __sub__(self, other):
0.33 numbers.py(2881):     @_sympifyit('other', NotImplemented)
0.33 numbers.py(2882):     def __rsub__(self, other):
0.33 numbers.py(2885):     @_sympifyit('other', NotImplemented)
0.33 numbers.py(2886):     def __mul__(self, other):
0.33 numbers.py(2894):     __rmul__ = __mul__
0.33 numbers.py(2896):     @_sympifyit('other', NotImplemented)
0.33 numbers.py(2897):     def __truediv__(self, other):
0.33 numbers.py(2908):     def __abs__(self):
0.33 numbers.py(2911):     def __neg__(self):
0.33 numbers.py(2914):     def _eval_power(self, expt):
0.33 numbers.py(2953):     def _as_mpf_val(self, prec):
0.33 numbers.py(2956):     def _sage_(self):
0.33 numbers.py(2960):     def __hash__(self):
0.33 numbers.py(2963):     def __eq__(self, other):
0.33 numbers.py(2966):     def __ne__(self, other):
0.33 numbers.py(2969):     __gt__ = Expr.__gt__
0.33 numbers.py(2970):     __ge__ = Expr.__ge__
0.33 numbers.py(2971):     __lt__ = Expr.__lt__
0.33 numbers.py(2972):     __le__ = Expr.__le__
0.33 numbers.py(2974):     @_sympifyit('other', NotImplemented)
0.33 numbers.py(2975):     def __mod__(self, other):
0.33 numbers.py(2980):     __rmod__ = __mod__
0.33 numbers.py(2982):     def floor(self):
0.33 numbers.py(2985):     def ceiling(self):
0.33 numbers.py(2988): oo = S.Infinity
0.33 numbers.py(2849):         return AtomicExpr.__new__(cls)
0.33 numbers.py(2991): class NegativeInfinity(Number, metaclass=Singleton):
0.33 numbers.py(2991): class NegativeInfinity(Number, metaclass=Singleton):
0.33 numbers.py(2992):     """Negative infinite quantity.
0.33 numbers.py(3003):     is_extended_real = True
0.33 numbers.py(3004):     is_complex = False
0.33 numbers.py(3005):     is_commutative = True
0.33 numbers.py(3006):     is_infinite = True
0.33 numbers.py(3007):     is_comparable = True
0.33 numbers.py(3008):     is_extended_negative = True
0.33 numbers.py(3009):     is_number = True
0.33 numbers.py(3010):     is_prime = False
0.33 numbers.py(3012):     __slots__ = ()
0.33 numbers.py(3014):     def __new__(cls):
0.33 numbers.py(3017):     def _latex(self, printer):
0.33 numbers.py(3020):     def _eval_subs(self, old, new):
0.33 numbers.py(3024):     def _eval_evalf(self, prec=None):
0.33 numbers.py(3027):     def evalf(self, prec=None, **options):
0.33 numbers.py(3030):     @_sympifyit('other', NotImplemented)
0.33 numbers.py(3031):     def __add__(self, other):
0.33 numbers.py(3037):     __radd__ = __add__
0.33 numbers.py(3039):     @_sympifyit('other', NotImplemented)
0.33 numbers.py(3040):     def __sub__(self, other):
0.33 numbers.py(3047):     @_sympifyit('other', NotImplemented)
0.33 numbers.py(3048):     def __rsub__(self, other):
0.33 numbers.py(3051):     @_sympifyit('other', NotImplemented)
0.33 numbers.py(3052):     def __mul__(self, other):
0.33 numbers.py(3060):     __rmul__ = __mul__
0.33 numbers.py(3062):     @_sympifyit('other', NotImplemented)
0.33 numbers.py(3063):     def __truediv__(self, other):
0.33 numbers.py(3074):     def __abs__(self):
0.33 numbers.py(3077):     def __neg__(self):
0.33 numbers.py(3080):     def _eval_power(self, expt):
0.33 numbers.py(3116):     def _as_mpf_val(self, prec):
0.33 numbers.py(3119):     def _sage_(self):
0.33 numbers.py(3123):     def __hash__(self):
0.33 numbers.py(3126):     def __eq__(self, other):
0.33 numbers.py(3129):     def __ne__(self, other):
0.33 numbers.py(3132):     __gt__ = Expr.__gt__
0.33 numbers.py(3133):     __ge__ = Expr.__ge__
0.33 numbers.py(3134):     __lt__ = Expr.__lt__
0.33 numbers.py(3135):     __le__ = Expr.__le__
0.33 numbers.py(3137):     @_sympifyit('other', NotImplemented)
0.33 numbers.py(3138):     def __mod__(self, other):
0.33 numbers.py(3143):     __rmod__ = __mod__
0.33 numbers.py(3145):     def floor(self):
0.33 numbers.py(3148):     def ceiling(self):
0.33 numbers.py(3151):     def as_powers_dict(self):
0.33 numbers.py(3155): class NaN(Number, metaclass=Singleton):
0.33 numbers.py(3155): class NaN(Number, metaclass=Singleton):
0.33 numbers.py(3156):     """
0.33 numbers.py(3203):     is_commutative = True
0.33 numbers.py(3204):     is_extended_real = None
0.33 numbers.py(3205):     is_real = None
0.33 numbers.py(3206):     is_rational = None
0.33 numbers.py(3207):     is_algebraic = None
0.33 numbers.py(3208):     is_transcendental = None
0.33 numbers.py(3209):     is_integer = None
0.33 numbers.py(3210):     is_comparable = False
0.33 numbers.py(3211):     is_finite = None
0.33 numbers.py(3212):     is_zero = None
0.33 numbers.py(3213):     is_prime = None
0.33 numbers.py(3214):     is_positive = None
0.33 numbers.py(3215):     is_negative = None
0.33 numbers.py(3216):     is_number = True
0.33 numbers.py(3218):     __slots__ = ()
0.33 numbers.py(3220):     def __new__(cls):
0.33 numbers.py(3223):     def _latex(self, printer):
0.33 numbers.py(3226):     def __neg__(self):
0.33 numbers.py(3229):     @_sympifyit('other', NotImplemented)
0.33 numbers.py(3230):     def __add__(self, other):
0.33 numbers.py(3233):     @_sympifyit('other', NotImplemented)
0.33 numbers.py(3234):     def __sub__(self, other):
0.33 numbers.py(3237):     @_sympifyit('other', NotImplemented)
0.33 numbers.py(3238):     def __mul__(self, other):
0.33 numbers.py(3241):     @_sympifyit('other', NotImplemented)
0.33 numbers.py(3242):     def __truediv__(self, other):
0.33 numbers.py(3245):     def floor(self):
0.33 numbers.py(3248):     def ceiling(self):
0.33 numbers.py(3251):     def _as_mpf_val(self, prec):
0.33 numbers.py(3254):     def _sage_(self):
0.33 numbers.py(3258):     def __hash__(self):
0.33 numbers.py(3261):     def __eq__(self, other):
0.33 numbers.py(3265):     def __ne__(self, other):
0.33 numbers.py(3269):     __gt__ = Expr.__gt__
0.33 numbers.py(3270):     __ge__ = Expr.__ge__
0.33 numbers.py(3271):     __lt__ = Expr.__lt__
0.33 numbers.py(3272):     __le__ = Expr.__le__
0.33 numbers.py(3274): nan = S.NaN
0.33 numbers.py(3221):         return AtomicExpr.__new__(cls)
0.33 numbers.py(3276): @dispatch(NaN, Expr) # type:ignore
0.33 numbers.py(3277): def _eval_is_eq(a, b): # noqa:F811
0.33 numbers.py(3280): class ComplexInfinity(AtomicExpr, metaclass=Singleton):
0.33 numbers.py(3280): class ComplexInfinity(AtomicExpr, metaclass=Singleton):
0.33 numbers.py(3281):     r"""Complex infinity.
0.33 numbers.py(3312):     is_commutative = True
0.33 numbers.py(3313):     is_infinite = True
0.33 numbers.py(3314):     is_number = True
0.33 numbers.py(3315):     is_prime = False
0.33 numbers.py(3316):     is_complex = False
0.33 numbers.py(3317):     is_extended_real = False
0.33 numbers.py(3319):     kind = NumberKind
0.33 numbers.py(3321):     __slots__ = ()
0.33 numbers.py(3323):     def __new__(cls):
0.33 numbers.py(3326):     def _latex(self, printer):
0.33 numbers.py(3329):     @staticmethod
0.33 numbers.py(3330):     def __abs__():
0.33 numbers.py(3333):     def floor(self):
0.33 numbers.py(3336):     def ceiling(self):
0.33 numbers.py(3339):     @staticmethod
0.33 numbers.py(3340):     def __neg__():
0.33 numbers.py(3343):     def _eval_power(self, expt):
0.33 numbers.py(3356):     def _sage_(self):
0.33 numbers.py(3361): zoo = S.ComplexInfinity
0.33 numbers.py(3324):         return AtomicExpr.__new__(cls)
0.33 numbers.py(3364): class NumberSymbol(AtomicExpr):
0.33 numbers.py(3364): class NumberSymbol(AtomicExpr):
0.33 numbers.py(3366):     is_commutative = True
0.33 numbers.py(3367):     is_finite = True
0.33 numbers.py(3368):     is_number = True
0.33 numbers.py(3370):     __slots__ = ()
0.33 numbers.py(3372):     is_NumberSymbol = True
0.33 numbers.py(3374):     kind = NumberKind
0.33 numbers.py(3376):     def __new__(cls):
0.33 numbers.py(3379):     def approximation(self, number_cls):
0.33 numbers.py(3385):     def _eval_evalf(self, prec):
0.33 numbers.py(3388):     def __eq__(self, other):
0.33 numbers.py(3400):     def __ne__(self, other):
0.33 numbers.py(3403):     def __le__(self, other):
0.33 numbers.py(3408):     def __ge__(self, other):
0.33 numbers.py(3413):     def __int__(self):
0.33 numbers.py(3417):     def __hash__(self):
0.33 numbers.py(3420): class Exp1(NumberSymbol, metaclass=Singleton):
0.33 numbers.py(3420): class Exp1(NumberSymbol, metaclass=Singleton):
0.33 numbers.py(3421):     r"""The `e` constant.
0.33 numbers.py(3448):     is_real = True
0.33 numbers.py(3449):     is_positive = True
0.33 numbers.py(3450):     is_negative = False  # XXX Forces is_negative/is_nonnegative
0.33 numbers.py(3451):     is_irrational = True
0.33 numbers.py(3452):     is_number = True
0.33 numbers.py(3453):     is_algebraic = False
0.33 numbers.py(3454):     is_transcendental = True
0.33 numbers.py(3456):     __slots__ = ()
0.33 numbers.py(3458):     def _latex(self, printer):
0.33 numbers.py(3461):     @staticmethod
0.33 numbers.py(3462):     def __abs__():
0.33 numbers.py(3465):     def __int__(self):
0.33 numbers.py(3468):     def _as_mpf_val(self, prec):
0.33 numbers.py(3471):     def approximation_interval(self, number_cls):
0.33 numbers.py(3477):     def _eval_power(self, expt):
0.33 numbers.py(3481):     def _eval_rewrite_as_sin(self, **kwargs):
0.33 numbers.py(3486):     def _eval_rewrite_as_cos(self, **kwargs):
0.33 numbers.py(3491):     def _sage_(self):
0.33 numbers.py(3494): E = S.Exp1
0.33 numbers.py(3377):         return AtomicExpr.__new__(cls)
0.33 numbers.py(3497): class Pi(NumberSymbol, metaclass=Singleton):
0.33 numbers.py(3497): class Pi(NumberSymbol, metaclass=Singleton):
0.33 numbers.py(3498):     r"""The `\pi` constant.
0.33 numbers.py(3533):     is_real = True
0.33 numbers.py(3534):     is_positive = True
0.33 numbers.py(3535):     is_negative = False
0.33 numbers.py(3536):     is_irrational = True
0.33 numbers.py(3537):     is_number = True
0.33 numbers.py(3538):     is_algebraic = False
0.33 numbers.py(3539):     is_transcendental = True
0.33 numbers.py(3541):     __slots__ = ()
0.33 numbers.py(3543):     def _latex(self, printer):
0.33 numbers.py(3546):     @staticmethod
0.33 numbers.py(3547):     def __abs__():
0.33 numbers.py(3550):     def __int__(self):
0.33 numbers.py(3553):     def _as_mpf_val(self, prec):
0.33 numbers.py(3556):     def approximation_interval(self, number_cls):
0.33 numbers.py(3562):     def _sage_(self):
0.33 numbers.py(3565): pi = S.Pi
0.33 numbers.py(3377):         return AtomicExpr.__new__(cls)
0.33 numbers.py(3568): class GoldenRatio(NumberSymbol, metaclass=Singleton):
0.33 numbers.py(3568): class GoldenRatio(NumberSymbol, metaclass=Singleton):
0.33 numbers.py(3569):     r"""The golden ratio, `\phi`.
0.33 numbers.py(3597):     is_real = True
0.33 numbers.py(3598):     is_positive = True
0.33 numbers.py(3599):     is_negative = False
0.33 numbers.py(3600):     is_irrational = True
0.33 numbers.py(3601):     is_number = True
0.33 numbers.py(3602):     is_algebraic = True
0.33 numbers.py(3603):     is_transcendental = False
0.33 numbers.py(3605):     __slots__ = ()
0.33 numbers.py(3607):     def _latex(self, printer):
0.33 numbers.py(3610):     def __int__(self):
0.33 numbers.py(3613):     def _as_mpf_val(self, prec):
0.33 numbers.py(3618):     def _eval_expand_func(self, **hints):
0.33 numbers.py(3622):     def approximation_interval(self, number_cls):
0.33 numbers.py(3628):     def _sage_(self):
0.33 numbers.py(3632):     _eval_rewrite_as_sqrt = _eval_expand_func
0.33 numbers.py(3635): class TribonacciConstant(NumberSymbol, metaclass=Singleton):
0.33 numbers.py(3635): class TribonacciConstant(NumberSymbol, metaclass=Singleton):
0.33 numbers.py(3636):     r"""The tribonacci constant.
0.33 numbers.py(3672):     is_real = True
0.33 numbers.py(3673):     is_positive = True
0.33 numbers.py(3674):     is_negative = False
0.33 numbers.py(3675):     is_irrational = True
0.33 numbers.py(3676):     is_number = True
0.33 numbers.py(3677):     is_algebraic = True
0.33 numbers.py(3678):     is_transcendental = False
0.33 numbers.py(3680):     __slots__ = ()
0.33 numbers.py(3682):     def _latex(self, printer):
0.33 numbers.py(3685):     def __int__(self):
0.33 numbers.py(3688):     def _eval_evalf(self, prec):
0.33 numbers.py(3692):     def _eval_expand_func(self, **hints):
0.33 numbers.py(3696):     def approximation_interval(self, number_cls):
0.33 numbers.py(3702):     _eval_rewrite_as_sqrt = _eval_expand_func
0.33 numbers.py(3705): class EulerGamma(NumberSymbol, metaclass=Singleton):
0.33 numbers.py(3705): class EulerGamma(NumberSymbol, metaclass=Singleton):
0.33 numbers.py(3706):     r"""The Euler-Mascheroni constant.
0.33 numbers.py(3737):     is_real = True
0.33 numbers.py(3738):     is_positive = True
0.33 numbers.py(3739):     is_negative = False
0.33 numbers.py(3740):     is_irrational = None
0.33 numbers.py(3741):     is_number = True
0.33 numbers.py(3743):     __slots__ = ()
0.33 numbers.py(3745):     def _latex(self, printer):
0.33 numbers.py(3748):     def __int__(self):
0.33 numbers.py(3751):     def _as_mpf_val(self, prec):
0.33 numbers.py(3757):     def approximation_interval(self, number_cls):
0.33 numbers.py(3763):     def _sage_(self):
0.33 numbers.py(3768): class Catalan(NumberSymbol, metaclass=Singleton):
0.33 numbers.py(3768): class Catalan(NumberSymbol, metaclass=Singleton):
0.33 numbers.py(3769):     r"""Catalan's constant.
0.33 numbers.py(3796):     is_real = True
0.33 numbers.py(3797):     is_positive = True
0.33 numbers.py(3798):     is_negative = False
0.33 numbers.py(3799):     is_irrational = None
0.33 numbers.py(3800):     is_number = True
0.33 numbers.py(3802):     __slots__ = ()
0.33 numbers.py(3804):     def __int__(self):
0.33 numbers.py(3807):     def _as_mpf_val(self, prec):
0.33 numbers.py(3813):     def approximation_interval(self, number_cls):
0.33 numbers.py(3819):     def _eval_rewrite_as_Sum(self, k_sym=None, symbols=None):
0.33 numbers.py(3826):     def _sage_(self):
0.33 numbers.py(3831): class ImaginaryUnit(AtomicExpr, metaclass=Singleton):
0.33 numbers.py(3831): class ImaginaryUnit(AtomicExpr, metaclass=Singleton):
0.33 numbers.py(3832):     r"""The imaginary unit, `i = \sqrt{-1}`.
0.33 numbers.py(3854):     is_commutative = True
0.33 numbers.py(3855):     is_imaginary = True
0.33 numbers.py(3856):     is_finite = True
0.33 numbers.py(3857):     is_number = True
0.33 numbers.py(3858):     is_algebraic = True
0.33 numbers.py(3859):     is_transcendental = False
0.33 numbers.py(3861):     kind = NumberKind
0.33 numbers.py(3863):     __slots__ = ()
0.33 numbers.py(3865):     def _latex(self, printer):
0.33 numbers.py(3868):     @staticmethod
0.33 numbers.py(3869):     def __abs__():
0.33 numbers.py(3872):     def _eval_evalf(self, prec):
0.33 numbers.py(3875):     def _eval_conjugate(self):
0.33 numbers.py(3878):     def _eval_power(self, expt):
0.33 numbers.py(3902):     def as_base_exp(self):
0.33 numbers.py(3905):     def _sage_(self):
0.33 numbers.py(3909):     @property
0.33 numbers.py(3910):     def _mpc_(self):
0.33 numbers.py(3913): I = S.ImaginaryUnit
0.33 numbers.py(3915): @dispatch(Tuple, Number) # type:ignore
0.33 numbers.py(3916): def _eval_is_eq(self, other): # noqa: F811
0.33 numbers.py(3919): def sympify_fractions(f):
0.33 numbers.py(3922): converter[fractions.Fraction] = sympify_fractions
0.33 numbers.py(3924): if HAS_GMPY:
0.33 numbers.py(3938): def sympify_mpmath_mpq(x):
0.33 numbers.py(3942): converter[type(mpmath.rational.mpq(1, 2))] = sympify_mpmath_mpq
0.33 numbers.py(3945): def sympify_mpmath(x):
0.33 numbers.py(3948): converter[mpnumeric] = sympify_mpmath
0.33 numbers.py(3951): def sympify_complex(a):
0.33 numbers.py(3955): converter[complex] = sympify_complex
0.33 numbers.py(3957): from .power import Pow, integer_nthroot
0.37 numbers.py(3958): from .mul import Mul
0.37 numbers.py(3959): Mul.identity = One()
0.37 numbers.py(2578):         return AtomicExpr.__new__(cls)
0.37 numbers.py(3960): from .add import Add
0.37 numbers.py(3961): Add.identity = Zero()
0.37 numbers.py(2578):         return AtomicExpr.__new__(cls)
0.37 numbers.py(3963): def _register_classes():
0.37 numbers.py(3969): _register_classes()
0.37 numbers.py(3964):     numbers.Number.register(Number)
0.37 numbers.py(3965):     numbers.Real.register(Float)
0.37 numbers.py(3966):     numbers.Rational.register(Rational)
0.37 numbers.py(3967):     numbers.Rational.register(Integer)
0.38 numbers.py(3377):         return AtomicExpr.__new__(cls)
0.38 numbers.py(3377):         return AtomicExpr.__new__(cls)
0.38 numbers.py(3377):         return AtomicExpr.__new__(cls)
0.38 numbers.py(3377):         return AtomicExpr.__new__(cls)
0.42 numbers.py(3015):         return AtomicExpr.__new__(cls)
0.42 numbers.py(675):         return mlib.to_float(self._as_mpf_val(53))
0.42 numbers.py(2954):         return mlib.finf
0.42 numbers.py(675):         return mlib.to_float(self._as_mpf_val(53))
0.42 numbers.py(3117):         return mlib.fninf
0.50 numbers.py(2875):         if isinstance(other, Number) and global_parameters.evaluate:
0.50 numbers.py(2876):             if other is S.Infinity or other is S.NaN:
0.50 numbers.py(2878):             return self
0.50 numbers.py(2875):         if isinstance(other, Number) and global_parameters.evaluate:
0.50 numbers.py(2876):             if other is S.Infinity or other is S.NaN:
0.50 numbers.py(2878):             return self
0.50 numbers.py(2862):         return self._eval_evalf(prec)
0.50 numbers.py(2859):         return Float('inf')
0.50 numbers.py(1032):         if prec is not None:
0.50 numbers.py(1040):         del prec  # avoid using this deprecated kwarg
0.50 numbers.py(1042):         if dps is not None and precision is not None:
0.50 numbers.py(1046):         if isinstance(num, str):
0.50 numbers.py(1048):             num = num.replace(' ', '').lower()
0.50 numbers.py(1052):             if '_' in num:
0.50 numbers.py(1062):             if num.startswith('.') and len(num) > 1:
0.50 numbers.py(1064):             elif num.startswith('-.') and len(num) > 2:
0.50 numbers.py(1066):             elif num in ('inf', '+inf'):
0.50 numbers.py(1067):                 return S.Infinity
0.50 numbers.py(675):         return mlib.to_float(self._as_mpf_val(53))
0.50 numbers.py(2954):         return mlib.finf
0.50 numbers.py(2875):         if isinstance(other, Number) and global_parameters.evaluate:
0.50 numbers.py(2876):             if other is S.Infinity or other is S.NaN:
0.50 numbers.py(2878):             return self
0.50 numbers.py(2964):         return other is S.Infinity or other == float('inf')
0.50 numbers.py(3127):         return other is S.NegativeInfinity or other == float('-inf')
0.50 numbers.py(2964):         return other is S.Infinity or other == float('inf')
0.50 numbers.py(3127):         return other is S.NegativeInfinity or other == float('-inf')
0.50 numbers.py(3127):         return other is S.NegativeInfinity or other == float('-inf')
0.50 numbers.py(2964):         return other is S.Infinity or other == float('inf')
0.50 numbers.py(2964):         return other is S.Infinity or other == float('inf')
0.50 numbers.py(3127):         return other is S.NegativeInfinity or other == float('-inf')
0.52 numbers.py(3418):         return super().__hash__()
0.52 numbers.py(3418):         return super().__hash__()
0.52 numbers.py(3418):         return super().__hash__()
0.52 numbers.py(3418):         return super().__hash__()
0.52 numbers.py(3418):         return super().__hash__()
0.57 numbers.py(2082):         if isinstance(i, str):
0.57 numbers.py(2090):         try:
0.57 numbers.py(2091):             ival = int(i)
0.57 numbers.py(2097):         if ival == 1:
0.57 numbers.py(2098):             return S.One
0.57 numbers.py(713):         return self.class_key(), (0, ()), (), self
0.57 numbers.py(709):         return 1, 0, 'Number'
0.57 numbers.py(2283):         return hash(self.p)
0.57 numbers.py(2283):         return hash(self.p)
0.57 numbers.py(2082):         if isinstance(i, str):
0.57 numbers.py(2090):         try:
0.57 numbers.py(2091):             ival = int(i)
0.57 numbers.py(2097):         if ival == 1:
0.57 numbers.py(2099):         if ival == -1:
0.57 numbers.py(2101):         if ival == 0:
0.57 numbers.py(2103):         obj = Expr.__new__(cls)
0.57 numbers.py(2104):         obj.p = ival
0.57 numbers.py(2105):         return obj
0.57 numbers.py(713):         return self.class_key(), (0, ()), (), self
0.57 numbers.py(709):         return 1, 0, 'Number'
0.57 numbers.py(2283):         return hash(self.p)
0.57 numbers.py(2283):         return hash(self.p)
0.57 numbers.py(2237):         if isinstance(other, int):
0.57 numbers.py(2239):         elif isinstance(other, Integer):
0.57 numbers.py(2240):             return (self.p == other.p)
0.57 numbers.py(2247):         try:
0.57 numbers.py(2248):             other = _sympify(other)
0.57 numbers.py(2251):         if other.is_Integer:
0.57 numbers.py(2252):             return _sympify(self.p > other.p)
0.57 numbers.py(2283):         return hash(self.p)
0.57 numbers.py(2283):         return hash(self.p)
0.57 numbers.py(2283):         return hash(self.p)
0.57 numbers.py(2283):         return hash(self.p)
0.57 numbers.py(2283):         return hash(self.p)
0.57 numbers.py(2283):         return hash(self.p)
0.57 numbers.py(2082):         if isinstance(i, str):
0.57 numbers.py(2090):         try:
0.57 numbers.py(2091):             ival = int(i)
0.57 numbers.py(2097):         if ival == 1:
0.57 numbers.py(2098):             return S.One
0.57 numbers.py(713):         return self.class_key(), (0, ()), (), self
0.57 numbers.py(709):         return 1, 0, 'Number'
0.57 numbers.py(2283):         return hash(self.p)
0.57 numbers.py(2283):         return hash(self.p)
0.57 numbers.py(2082):         if isinstance(i, str):
0.57 numbers.py(2090):         try:
0.57 numbers.py(2091):             ival = int(i)
0.57 numbers.py(2097):         if ival == 1:
0.57 numbers.py(2099):         if ival == -1:
0.57 numbers.py(2101):         if ival == 0:
0.57 numbers.py(2103):         obj = Expr.__new__(cls)
0.57 numbers.py(2104):         obj.p = ival
0.57 numbers.py(2105):         return obj
0.57 numbers.py(713):         return self.class_key(), (0, ()), (), self
0.57 numbers.py(709):         return 1, 0, 'Number'
0.57 numbers.py(2283):         return hash(self.p)
0.57 numbers.py(2283):         return hash(self.p)
0.57 numbers.py(2237):         if isinstance(other, int):
0.57 numbers.py(2239):         elif isinstance(other, Integer):
0.57 numbers.py(2240):             return (self.p == other.p)
0.57 numbers.py(2247):         try:
0.57 numbers.py(2248):             other = _sympify(other)
0.57 numbers.py(2251):         if other.is_Integer:
0.57 numbers.py(2252):             return _sympify(self.p > other.p)
0.57 numbers.py(2283):         return hash(self.p)
0.57 numbers.py(2283):         return hash(self.p)
0.57 numbers.py(2283):         return hash(self.p)
0.57 numbers.py(2283):         return hash(self.p)
0.57 numbers.py(2283):         return hash(self.p)
0.57 numbers.py(2283):         return hash(self.p)
0.60 numbers.py(2082):         if isinstance(i, str):
0.60 numbers.py(2090):         try:
0.60 numbers.py(2091):             ival = int(i)
0.60 numbers.py(2097):         if ival == 1:
0.60 numbers.py(2099):         if ival == -1:
0.60 numbers.py(2101):         if ival == 0:
0.60 numbers.py(2102):             return S.Zero
0.60 numbers.py(2082):         if isinstance(i, str):
0.60 numbers.py(2090):         try:
0.60 numbers.py(2091):             ival = int(i)
0.60 numbers.py(2097):         if ival == 1:
0.60 numbers.py(2098):             return S.One
0.60 numbers.py(3263):         return other is S.NaN
0.60 numbers.py(2964):         return other is S.Infinity or other == float('inf')
0.60 numbers.py(3127):         return other is S.NegativeInfinity or other == float('-inf')
0.60 numbers.py(2082):         if isinstance(i, str):
0.60 numbers.py(2090):         try:
0.60 numbers.py(2091):             ival = int(i)
0.60 numbers.py(2097):         if ival == 1:
0.60 numbers.py(2099):         if ival == -1:
0.60 numbers.py(2101):         if ival == 0:
0.60 numbers.py(2102):             return S.Zero
0.60 numbers.py(3263):         return other is S.NaN
0.60 numbers.py(2964):         return other is S.Infinity or other == float('inf')
0.60 numbers.py(3127):         return other is S.NegativeInfinity or other == float('-inf')
0.60 numbers.py(2082):         if isinstance(i, str):
0.60 numbers.py(2090):         try:
0.60 numbers.py(2091):             ival = int(i)
0.60 numbers.py(2097):         if ival == 1:
0.60 numbers.py(2099):         if ival == -1:
0.60 numbers.py(2101):         if ival == 0:
0.60 numbers.py(2102):             return S.Zero
0.60 numbers.py(3263):         return other is S.NaN
0.60 numbers.py(2964):         return other is S.Infinity or other == float('inf')
0.60 numbers.py(3127):         return other is S.NegativeInfinity or other == float('-inf')
0.60 numbers.py(2082):         if isinstance(i, str):
0.60 numbers.py(2090):         try:
0.60 numbers.py(2091):             ival = int(i)
0.60 numbers.py(2097):         if ival == 1:
0.60 numbers.py(2098):             return S.One
0.60 numbers.py(3263):         return other is S.NaN
0.60 numbers.py(2964):         return other is S.Infinity or other == float('inf')
0.60 numbers.py(3127):         return other is S.NegativeInfinity or other == float('-inf')
0.60 numbers.py(2082):         if isinstance(i, str):
0.60 numbers.py(2090):         try:
0.60 numbers.py(2091):             ival = int(i)
0.60 numbers.py(2097):         if ival == 1:
0.60 numbers.py(2099):         if ival == -1:
0.60 numbers.py(2101):         if ival == 0:
0.60 numbers.py(2102):             return S.Zero
0.60 numbers.py(3263):         return other is S.NaN
0.60 numbers.py(2964):         return other is S.Infinity or other == float('inf')
0.60 numbers.py(3127):         return other is S.NegativeInfinity or other == float('-inf')
0.60 numbers.py(2082):         if isinstance(i, str):
0.60 numbers.py(2090):         try:
0.60 numbers.py(2091):             ival = int(i)
0.60 numbers.py(2097):         if ival == 1:
0.60 numbers.py(2099):         if ival == -1:
0.60 numbers.py(2101):         if ival == 0:
0.60 numbers.py(2102):             return S.Zero
0.60 numbers.py(3263):         return other is S.NaN
0.60 numbers.py(2964):         return other is S.Infinity or other == float('inf')
0.60 numbers.py(3127):         return other is S.NegativeInfinity or other == float('-inf')
0.60 numbers.py(2082):         if isinstance(i, str):
0.60 numbers.py(2090):         try:
0.60 numbers.py(2091):             ival = int(i)
0.60 numbers.py(2097):         if ival == 1:
0.60 numbers.py(2098):             return S.One
0.60 numbers.py(3263):         return other is S.NaN
0.60 numbers.py(2964):         return other is S.Infinity or other == float('inf')
0.60 numbers.py(3127):         return other is S.NegativeInfinity or other == float('-inf')
0.60 numbers.py(2082):         if isinstance(i, str):
0.60 numbers.py(2090):         try:
0.60 numbers.py(2091):             ival = int(i)
0.60 numbers.py(2097):         if ival == 1:
0.60 numbers.py(2099):         if ival == -1:
0.60 numbers.py(2100):             return S.NegativeOne
0.60 numbers.py(2578):         return AtomicExpr.__new__(cls)
0.60 numbers.py(3263):         return other is S.NaN
0.60 numbers.py(2964):         return other is S.Infinity or other == float('inf')
0.60 numbers.py(3127):         return other is S.NegativeInfinity or other == float('-inf')
0.60 numbers.py(2082):         if isinstance(i, str):
0.60 numbers.py(2090):         try:
0.60 numbers.py(2091):             ival = int(i)
0.60 numbers.py(2097):         if ival == 1:
0.60 numbers.py(2099):         if ival == -1:
0.60 numbers.py(2101):         if ival == 0:
0.60 numbers.py(2102):             return S.Zero
0.60 numbers.py(3263):         return other is S.NaN
0.60 numbers.py(2964):         return other is S.Infinity or other == float('inf')
0.60 numbers.py(3127):         return other is S.NegativeInfinity or other == float('-inf')
0.60 numbers.py(2082):         if isinstance(i, str):
0.60 numbers.py(2090):         try:
0.60 numbers.py(2091):             ival = int(i)
0.60 numbers.py(2097):         if ival == 1:
0.60 numbers.py(2099):         if ival == -1:
0.60 numbers.py(2101):         if ival == 0:
0.60 numbers.py(2102):             return S.Zero
0.60 numbers.py(3263):         return other is S.NaN
0.60 numbers.py(2964):         return other is S.Infinity or other == float('inf')
0.60 numbers.py(3127):         return other is S.NegativeInfinity or other == float('-inf')
0.60 numbers.py(2082):         if isinstance(i, str):
0.60 numbers.py(2090):         try:
0.60 numbers.py(2091):             ival = int(i)
0.60 numbers.py(2097):         if ival == 1:
0.60 numbers.py(2099):         if ival == -1:
0.60 numbers.py(2100):             return S.NegativeOne
0.60 numbers.py(3263):         return other is S.NaN
0.60 numbers.py(2964):         return other is S.Infinity or other == float('inf')
0.60 numbers.py(3127):         return other is S.NegativeInfinity or other == float('-inf')
0.60 numbers.py(2082):         if isinstance(i, str):
0.60 numbers.py(2090):         try:
0.60 numbers.py(2091):             ival = int(i)
0.60 numbers.py(2097):         if ival == 1:
0.60 numbers.py(2099):         if ival == -1:
0.60 numbers.py(2101):         if ival == 0:
0.60 numbers.py(2102):             return S.Zero
0.60 numbers.py(3263):         return other is S.NaN
0.60 numbers.py(2964):         return other is S.Infinity or other == float('inf')
0.60 numbers.py(3127):         return other is S.NegativeInfinity or other == float('-inf')
0.60 numbers.py(2082):         if isinstance(i, str):
0.60 numbers.py(2090):         try:
0.60 numbers.py(2091):             ival = int(i)
0.60 numbers.py(2097):         if ival == 1:
0.60 numbers.py(2099):         if ival == -1:
0.60 numbers.py(2101):         if ival == 0:
0.60 numbers.py(2102):             return S.Zero
0.60 numbers.py(3263):         return other is S.NaN
0.60 numbers.py(2964):         return other is S.Infinity or other == float('inf')
0.60 numbers.py(3127):         return other is S.NegativeInfinity or other == float('-inf')
0.60 numbers.py(2082):         if isinstance(i, str):
0.60 numbers.py(2090):         try:
0.60 numbers.py(2091):             ival = int(i)
0.60 numbers.py(2097):         if ival == 1:
0.60 numbers.py(2098):             return S.One
0.60 numbers.py(3263):         return other is S.NaN
0.60 numbers.py(2964):         return other is S.Infinity or other == float('inf')
0.60 numbers.py(3127):         return other is S.NegativeInfinity or other == float('-inf')
0.60 numbers.py(2082):         if isinstance(i, str):
0.60 numbers.py(2090):         try:
0.60 numbers.py(2091):             ival = int(i)
0.60 numbers.py(2097):         if ival == 1:
0.60 numbers.py(2099):         if ival == -1:
0.60 numbers.py(2101):         if ival == 0:
0.60 numbers.py(2102):             return S.Zero
0.63 numbers.py(2082):         if isinstance(i, str):
0.63 numbers.py(2090):         try:
0.63 numbers.py(2091):             ival = int(i)
0.63 numbers.py(2097):         if ival == 1:
0.63 numbers.py(2098):             return S.One
0.63 numbers.py(713):         return self.class_key(), (0, ()), (), self
0.63 numbers.py(709):         return 1, 0, 'Number'
0.63 numbers.py(2283):         return hash(self.p)
0.63 numbers.py(2283):         return hash(self.p)
0.63 numbers.py(2082):         if isinstance(i, str):
0.63 numbers.py(2090):         try:
0.63 numbers.py(2091):             ival = int(i)
0.63 numbers.py(2097):         if ival == 1:
0.63 numbers.py(2099):         if ival == -1:
0.63 numbers.py(2101):         if ival == 0:
0.63 numbers.py(2103):         obj = Expr.__new__(cls)
0.63 numbers.py(2104):         obj.p = ival
0.63 numbers.py(2105):         return obj
0.63 numbers.py(713):         return self.class_key(), (0, ()), (), self
0.63 numbers.py(709):         return 1, 0, 'Number'
0.63 numbers.py(2283):         return hash(self.p)
0.63 numbers.py(2283):         return hash(self.p)
0.63 numbers.py(2237):         if isinstance(other, int):
0.63 numbers.py(2239):         elif isinstance(other, Integer):
0.63 numbers.py(2240):             return (self.p == other.p)
0.63 numbers.py(2247):         try:
0.63 numbers.py(2248):             other = _sympify(other)
0.63 numbers.py(2251):         if other.is_Integer:
0.63 numbers.py(2252):             return _sympify(self.p > other.p)
0.63 numbers.py(2283):         return hash(self.p)
0.63 numbers.py(2283):         return hash(self.p)
0.63 numbers.py(2283):         return hash(self.p)
0.63 numbers.py(2283):         return hash(self.p)
0.63 numbers.py(2283):         return hash(self.p)
0.63 numbers.py(2283):         return hash(self.p)
0.63 numbers.py(2082):         if isinstance(i, str):
0.63 numbers.py(2090):         try:
0.63 numbers.py(2091):             ival = int(i)
0.63 numbers.py(2097):         if ival == 1:
0.63 numbers.py(2099):         if ival == -1:
0.63 numbers.py(2100):             return S.NegativeOne
0.63 numbers.py(2082):         if isinstance(i, str):
0.63 numbers.py(2090):         try:
0.63 numbers.py(2091):             ival = int(i)
0.63 numbers.py(2097):         if ival == 1:
0.63 numbers.py(2098):             return S.One
0.63 numbers.py(713):         return self.class_key(), (0, ()), (), self
0.63 numbers.py(709):         return 1, 0, 'Number'
0.63 numbers.py(2283):         return hash(self.p)
0.63 numbers.py(2283):         return hash(self.p)
0.63 numbers.py(2082):         if isinstance(i, str):
0.63 numbers.py(2090):         try:
0.63 numbers.py(2091):             ival = int(i)
0.63 numbers.py(2097):         if ival == 1:
0.63 numbers.py(2099):         if ival == -1:
0.63 numbers.py(2101):         if ival == 0:
0.63 numbers.py(2103):         obj = Expr.__new__(cls)
0.63 numbers.py(2104):         obj.p = ival
0.63 numbers.py(2105):         return obj
0.63 numbers.py(713):         return self.class_key(), (0, ()), (), self
0.63 numbers.py(709):         return 1, 0, 'Number'
0.63 numbers.py(2283):         return hash(self.p)
0.63 numbers.py(2283):         return hash(self.p)
0.63 numbers.py(2237):         if isinstance(other, int):
0.63 numbers.py(2239):         elif isinstance(other, Integer):
0.63 numbers.py(2240):             return (self.p == other.p)
0.63 numbers.py(2247):         try:
0.63 numbers.py(2248):             other = _sympify(other)
0.63 numbers.py(2251):         if other.is_Integer:
0.63 numbers.py(2252):             return _sympify(self.p > other.p)
0.63 numbers.py(2283):         return hash(self.p)
0.63 numbers.py(2283):         return hash(self.p)
0.63 numbers.py(2283):         return hash(self.p)
0.63 numbers.py(2283):         return hash(self.p)
0.63 numbers.py(2283):         return hash(self.p)
0.63 numbers.py(2283):         return hash(self.p)
0.67 numbers.py(2082):         if isinstance(i, str):
0.67 numbers.py(2090):         try:
0.67 numbers.py(2091):             ival = int(i)
0.67 numbers.py(2097):         if ival == 1:
0.67 numbers.py(2098):             return S.One
0.67 numbers.py(713):         return self.class_key(), (0, ()), (), self
0.67 numbers.py(709):         return 1, 0, 'Number'
0.67 numbers.py(2283):         return hash(self.p)
0.67 numbers.py(2283):         return hash(self.p)
0.67 numbers.py(2082):         if isinstance(i, str):
0.67 numbers.py(2090):         try:
0.67 numbers.py(2091):             ival = int(i)
0.67 numbers.py(2097):         if ival == 1:
0.67 numbers.py(2099):         if ival == -1:
0.67 numbers.py(2101):         if ival == 0:
0.67 numbers.py(2103):         obj = Expr.__new__(cls)
0.67 numbers.py(2104):         obj.p = ival
0.67 numbers.py(2105):         return obj
0.67 numbers.py(713):         return self.class_key(), (0, ()), (), self
0.67 numbers.py(709):         return 1, 0, 'Number'
0.67 numbers.py(2283):         return hash(self.p)
0.67 numbers.py(2283):         return hash(self.p)
0.67 numbers.py(2237):         if isinstance(other, int):
0.67 numbers.py(2239):         elif isinstance(other, Integer):
0.67 numbers.py(2240):             return (self.p == other.p)
0.67 numbers.py(2247):         try:
0.67 numbers.py(2248):             other = _sympify(other)
0.67 numbers.py(2251):         if other.is_Integer:
0.67 numbers.py(2252):             return _sympify(self.p > other.p)
0.67 numbers.py(2283):         return hash(self.p)
0.67 numbers.py(2283):         return hash(self.p)
0.67 numbers.py(2283):         return hash(self.p)
0.67 numbers.py(2283):         return hash(self.p)
0.67 numbers.py(2283):         return hash(self.p)
0.67 numbers.py(2283):         return hash(self.p)
0.67 numbers.py(2082):         if isinstance(i, str):
0.67 numbers.py(2090):         try:
0.67 numbers.py(2091):             ival = int(i)
0.67 numbers.py(2097):         if ival == 1:
0.67 numbers.py(2099):         if ival == -1:
0.67 numbers.py(2101):         if ival == 0:
0.67 numbers.py(2103):         obj = Expr.__new__(cls)
0.67 numbers.py(2104):         obj.p = ival
0.67 numbers.py(2105):         return obj
0.67 numbers.py(2237):         if isinstance(other, int):
0.67 numbers.py(2238):             return (self.p == other)
0.67 numbers.py(2237):         if isinstance(other, int):
0.67 numbers.py(2239):         elif isinstance(other, Integer):
0.67 numbers.py(2241):         return Rational.__eq__(self, other)
0.67 numbers.py(1863):         from sympy.core.power import integer_log
0.67 numbers.py(1864):         try:
0.67 numbers.py(1865):             other = _sympify(other)
0.67 numbers.py(1868):         if not isinstance(other, Number):
0.67 numbers.py(1872):         if not self:
0.67 numbers.py(1874):         if other.is_NumberSymbol:
0.67 numbers.py(1878):         if other.is_Rational:
0.67 numbers.py(1882):         if other.is_Float:
0.67 numbers.py(1906):         return False
0.67 numbers.py(2082):         if isinstance(i, str):
0.67 numbers.py(2090):         try:
0.67 numbers.py(2091):             ival = int(i)
0.67 numbers.py(2097):         if ival == 1:
0.67 numbers.py(2098):             return S.One
0.67 numbers.py(713):         return self.class_key(), (0, ()), (), self
0.67 numbers.py(709):         return 1, 0, 'Number'
0.67 numbers.py(2283):         return hash(self.p)
0.67 numbers.py(2283):         return hash(self.p)
0.67 numbers.py(2082):         if isinstance(i, str):
0.67 numbers.py(2090):         try:
0.67 numbers.py(2091):             ival = int(i)
0.67 numbers.py(2097):         if ival == 1:
0.67 numbers.py(2099):         if ival == -1:
0.67 numbers.py(2101):         if ival == 0:
0.67 numbers.py(2103):         obj = Expr.__new__(cls)
0.67 numbers.py(2104):         obj.p = ival
0.67 numbers.py(2105):         return obj
0.67 numbers.py(713):         return self.class_key(), (0, ()), (), self
0.67 numbers.py(709):         return 1, 0, 'Number'
0.67 numbers.py(2283):         return hash(self.p)
0.67 numbers.py(2283):         return hash(self.p)
0.67 numbers.py(2237):         if isinstance(other, int):
0.67 numbers.py(2239):         elif isinstance(other, Integer):
0.67 numbers.py(2240):             return (self.p == other.p)
0.67 numbers.py(2247):         try:
0.67 numbers.py(2248):             other = _sympify(other)
0.67 numbers.py(2251):         if other.is_Integer:
0.67 numbers.py(2252):             return _sympify(self.p > other.p)
0.67 numbers.py(2283):         return hash(self.p)
0.67 numbers.py(2283):         return hash(self.p)
0.67 numbers.py(2283):         return hash(self.p)
0.67 numbers.py(2283):         return hash(self.p)
0.67 numbers.py(2283):         return hash(self.p)
0.67 numbers.py(2283):         return hash(self.p)
0.67 numbers.py(1593):         if q is None:
0.67 numbers.py(1631):             p = Rational(p)
0.67 numbers.py(1593):         if q is None:
0.67 numbers.py(1594):             if isinstance(p, Rational):
0.67 numbers.py(1597):             if isinstance(p, SYMPY_INTS):
0.67 numbers.py(1598):                 pass
0.67 numbers.py(1628):             q = 1
0.67 numbers.py(1629):             gcd = 1
0.67 numbers.py(1634):         if isinstance(q, Rational):
0.67 numbers.py(1637):         if isinstance(p, Rational):
0.67 numbers.py(1642):         if q == 0:
0.67 numbers.py(1649):         if q < 0:
0.67 numbers.py(1652):         if not gcd:
0.67 numbers.py(1654):         if gcd > 1:
0.67 numbers.py(1657):         if q == 1:
0.67 numbers.py(1658):             return Integer(p)
0.67 numbers.py(2082):         if isinstance(i, str):
0.67 numbers.py(2090):         try:
0.67 numbers.py(2091):             ival = int(i)
0.67 numbers.py(2097):         if ival == 1:
0.67 numbers.py(2098):             return S.One
0.67 numbers.py(1632):             q = Rational(q)
0.67 numbers.py(1593):         if q is None:
0.67 numbers.py(1594):             if isinstance(p, Rational):
0.67 numbers.py(1597):             if isinstance(p, SYMPY_INTS):
0.67 numbers.py(1598):                 pass
0.67 numbers.py(1628):             q = 1
0.67 numbers.py(1629):             gcd = 1
0.67 numbers.py(1634):         if isinstance(q, Rational):
0.67 numbers.py(1637):         if isinstance(p, Rational):
0.67 numbers.py(1642):         if q == 0:
0.67 numbers.py(1649):         if q < 0:
0.67 numbers.py(1652):         if not gcd:
0.67 numbers.py(1654):         if gcd > 1:
0.67 numbers.py(1657):         if q == 1:
0.67 numbers.py(1658):             return Integer(p)
0.67 numbers.py(2082):         if isinstance(i, str):
0.67 numbers.py(2090):         try:
0.67 numbers.py(2091):             ival = int(i)
0.67 numbers.py(2097):         if ival == 1:
0.67 numbers.py(2099):         if ival == -1:
0.67 numbers.py(2101):         if ival == 0:
0.67 numbers.py(2103):         obj = Expr.__new__(cls)
0.67 numbers.py(2104):         obj.p = ival
0.67 numbers.py(2105):         return obj
0.67 numbers.py(1634):         if isinstance(q, Rational):
0.67 numbers.py(1635):             p *= q.q
0.67 numbers.py(2199):         if global_parameters.evaluate:
0.67 numbers.py(2200):             if isinstance(other, int):
0.67 numbers.py(2201):                 return Integer(self.p*other)
0.67 numbers.py(2082):         if isinstance(i, str):
0.67 numbers.py(2090):         try:
0.67 numbers.py(2091):             ival = int(i)
0.67 numbers.py(2097):         if ival == 1:
0.67 numbers.py(2098):             return S.One
0.67 numbers.py(1636):             q = q.p
0.67 numbers.py(1637):         if isinstance(p, Rational):
0.67 numbers.py(1638):             q *= p.q
0.67 numbers.py(1639):             p = p.p
0.67 numbers.py(1642):         if q == 0:
0.67 numbers.py(1649):         if q < 0:
0.67 numbers.py(1652):         if not gcd:
0.67 numbers.py(1653):             gcd = igcd(abs(p), q)
0.67 numbers.py(251):     if len(args) < 2:
0.67 numbers.py(254):     args_temp = [abs(as_int(i)) for i in args]
0.67 numbers.py(254):     args_temp = [abs(as_int(i)) for i in args]
0.67 numbers.py(254):     args_temp = [abs(as_int(i)) for i in args]
0.67 numbers.py(254):     args_temp = [abs(as_int(i)) for i in args]
0.67 numbers.py(255):     if 1 in args_temp:
0.67 numbers.py(256):         return 1
0.67 numbers.py(1654):         if gcd > 1:
0.67 numbers.py(1657):         if q == 1:
0.67 numbers.py(1659):         if p == 1 and q == 2:
0.67 numbers.py(1661):         obj = Expr.__new__(cls)
0.67 numbers.py(1662):         obj.p = p
0.67 numbers.py(1663):         obj.q = q
0.67 numbers.py(1664):         return obj
0.67 numbers.py(1593):         if q is None:
0.67 numbers.py(1631):             p = Rational(p)
0.67 numbers.py(1593):         if q is None:
0.67 numbers.py(1594):             if isinstance(p, Rational):
0.67 numbers.py(1597):             if isinstance(p, SYMPY_INTS):
0.67 numbers.py(1598):                 pass
0.67 numbers.py(1628):             q = 1
0.67 numbers.py(1629):             gcd = 1
0.67 numbers.py(1634):         if isinstance(q, Rational):
0.67 numbers.py(1637):         if isinstance(p, Rational):
0.67 numbers.py(1642):         if q == 0:
0.67 numbers.py(1649):         if q < 0:
0.67 numbers.py(1652):         if not gcd:
0.67 numbers.py(1654):         if gcd > 1:
0.67 numbers.py(1657):         if q == 1:
0.67 numbers.py(1658):             return Integer(p)
0.67 numbers.py(2082):         if isinstance(i, str):
0.67 numbers.py(2090):         try:
0.67 numbers.py(2091):             ival = int(i)
0.67 numbers.py(2097):         if ival == 1:
0.67 numbers.py(2099):         if ival == -1:
0.67 numbers.py(2100):             return S.NegativeOne
0.67 numbers.py(1632):             q = Rational(q)
0.67 numbers.py(1593):         if q is None:
0.67 numbers.py(1594):             if isinstance(p, Rational):
0.67 numbers.py(1597):             if isinstance(p, SYMPY_INTS):
0.67 numbers.py(1598):                 pass
0.67 numbers.py(1628):             q = 1
0.67 numbers.py(1629):             gcd = 1
0.67 numbers.py(1634):         if isinstance(q, Rational):
0.67 numbers.py(1637):         if isinstance(p, Rational):
0.67 numbers.py(1642):         if q == 0:
0.67 numbers.py(1649):         if q < 0:
0.67 numbers.py(1652):         if not gcd:
0.67 numbers.py(1654):         if gcd > 1:
0.67 numbers.py(1657):         if q == 1:
0.67 numbers.py(1658):             return Integer(p)
0.67 numbers.py(2082):         if isinstance(i, str):
0.67 numbers.py(2090):         try:
0.67 numbers.py(2091):             ival = int(i)
0.67 numbers.py(2097):         if ival == 1:
0.67 numbers.py(2099):         if ival == -1:
0.67 numbers.py(2101):         if ival == 0:
0.67 numbers.py(2103):         obj = Expr.__new__(cls)
0.67 numbers.py(2104):         obj.p = ival
0.67 numbers.py(2105):         return obj
0.67 numbers.py(1634):         if isinstance(q, Rational):
0.67 numbers.py(1635):             p *= q.q
0.67 numbers.py(2199):         if global_parameters.evaluate:
0.67 numbers.py(2200):             if isinstance(other, int):
0.67 numbers.py(2201):                 return Integer(self.p*other)
0.67 numbers.py(2082):         if isinstance(i, str):
0.67 numbers.py(2090):         try:
0.67 numbers.py(2091):             ival = int(i)
0.67 numbers.py(2097):         if ival == 1:
0.67 numbers.py(2099):         if ival == -1:
0.67 numbers.py(2100):             return S.NegativeOne
0.67 numbers.py(1636):             q = q.p
0.67 numbers.py(1637):         if isinstance(p, Rational):
0.67 numbers.py(1638):             q *= p.q
0.67 numbers.py(1639):             p = p.p
0.67 numbers.py(1642):         if q == 0:
0.67 numbers.py(1649):         if q < 0:
0.67 numbers.py(1652):         if not gcd:
0.67 numbers.py(1653):             gcd = igcd(abs(p), q)
0.67 numbers.py(251):     if len(args) < 2:
0.67 numbers.py(254):     args_temp = [abs(as_int(i)) for i in args]
0.67 numbers.py(254):     args_temp = [abs(as_int(i)) for i in args]
0.67 numbers.py(254):     args_temp = [abs(as_int(i)) for i in args]
0.67 numbers.py(254):     args_temp = [abs(as_int(i)) for i in args]
0.67 numbers.py(255):     if 1 in args_temp:
0.67 numbers.py(256):         return 1
0.67 numbers.py(1654):         if gcd > 1:
0.67 numbers.py(1657):         if q == 1:
0.67 numbers.py(1659):         if p == 1 and q == 2:
0.67 numbers.py(1661):         obj = Expr.__new__(cls)
0.67 numbers.py(1662):         obj.p = p
0.67 numbers.py(1663):         obj.q = q
0.67 numbers.py(1664):         return obj
0.67 numbers.py(2082):         if isinstance(i, str):
0.67 numbers.py(2090):         try:
0.67 numbers.py(2091):             ival = int(i)
0.67 numbers.py(2097):         if ival == 1:
0.67 numbers.py(2098):             return S.One
0.67 numbers.py(713):         return self.class_key(), (0, ()), (), self
0.67 numbers.py(709):         return 1, 0, 'Number'
0.67 numbers.py(2283):         return hash(self.p)
0.67 numbers.py(2283):         return hash(self.p)
0.67 numbers.py(2082):         if isinstance(i, str):
0.67 numbers.py(2090):         try:
0.67 numbers.py(2091):             ival = int(i)
0.67 numbers.py(2097):         if ival == 1:
0.67 numbers.py(2099):         if ival == -1:
0.67 numbers.py(2101):         if ival == 0:
0.67 numbers.py(2103):         obj = Expr.__new__(cls)
0.67 numbers.py(2104):         obj.p = ival
0.67 numbers.py(2105):         return obj
0.67 numbers.py(713):         return self.class_key(), (0, ()), (), self
0.67 numbers.py(709):         return 1, 0, 'Number'
0.67 numbers.py(2283):         return hash(self.p)
0.67 numbers.py(2283):         return hash(self.p)
0.67 numbers.py(2237):         if isinstance(other, int):
0.67 numbers.py(2239):         elif isinstance(other, Integer):
0.67 numbers.py(2240):             return (self.p == other.p)
0.67 numbers.py(2247):         try:
0.67 numbers.py(2248):             other = _sympify(other)
0.67 numbers.py(2251):         if other.is_Integer:
0.67 numbers.py(2252):             return _sympify(self.p > other.p)
0.67 numbers.py(2283):         return hash(self.p)
0.67 numbers.py(2283):         return hash(self.p)
0.67 numbers.py(2283):         return hash(self.p)
0.67 numbers.py(2283):         return hash(self.p)
0.67 numbers.py(2283):         return hash(self.p)
0.67 numbers.py(2283):         return hash(self.p)
0.67 numbers.py(2082):         if isinstance(i, str):
0.67 numbers.py(2090):         try:
0.67 numbers.py(2091):             ival = int(i)
0.67 numbers.py(2097):         if ival == 1:
0.67 numbers.py(2098):             return S.One
0.67 numbers.py(713):         return self.class_key(), (0, ()), (), self
0.67 numbers.py(709):         return 1, 0, 'Number'
0.67 numbers.py(2283):         return hash(self.p)
0.67 numbers.py(2283):         return hash(self.p)
0.67 numbers.py(2082):         if isinstance(i, str):
0.67 numbers.py(2090):         try:
0.67 numbers.py(2091):             ival = int(i)
0.67 numbers.py(2097):         if ival == 1:
0.67 numbers.py(2099):         if ival == -1:
0.67 numbers.py(2101):         if ival == 0:
0.67 numbers.py(2103):         obj = Expr.__new__(cls)
0.67 numbers.py(2104):         obj.p = ival
0.67 numbers.py(2105):         return obj
0.67 numbers.py(713):         return self.class_key(), (0, ()), (), self
0.67 numbers.py(709):         return 1, 0, 'Number'
0.67 numbers.py(2283):         return hash(self.p)
0.67 numbers.py(2283):         return hash(self.p)
0.67 numbers.py(2082):         if isinstance(i, str):
0.67 numbers.py(2090):         try:
0.67 numbers.py(2091):             ival = int(i)
0.67 numbers.py(2097):         if ival == 1:
0.67 numbers.py(2099):         if ival == -1:
0.67 numbers.py(2101):         if ival == 0:
0.67 numbers.py(2103):         obj = Expr.__new__(cls)
0.67 numbers.py(2104):         obj.p = ival
0.67 numbers.py(2105):         return obj
0.67 numbers.py(713):         return self.class_key(), (0, ()), (), self
0.67 numbers.py(709):         return 1, 0, 'Number'
0.67 numbers.py(2283):         return hash(self.p)
0.67 numbers.py(2283):         return hash(self.p)
0.67 numbers.py(2237):         if isinstance(other, int):
0.67 numbers.py(2239):         elif isinstance(other, Integer):
0.67 numbers.py(2240):             return (self.p == other.p)
0.67 numbers.py(2247):         try:
0.67 numbers.py(2248):             other = _sympify(other)
0.67 numbers.py(2251):         if other.is_Integer:
0.67 numbers.py(2252):             return _sympify(self.p > other.p)
0.67 numbers.py(2237):         if isinstance(other, int):
0.67 numbers.py(2239):         elif isinstance(other, Integer):
0.67 numbers.py(2240):             return (self.p == other.p)
0.67 numbers.py(2256):         try:
0.67 numbers.py(2257):             other = _sympify(other)
0.67 numbers.py(2260):         if other.is_Integer:
0.67 numbers.py(2261):             return _sympify(self.p < other.p)
0.67 numbers.py(2283):         return hash(self.p)
0.67 numbers.py(2283):         return hash(self.p)
0.67 numbers.py(2283):         return hash(self.p)
0.67 numbers.py(2283):         return hash(self.p)
0.67 numbers.py(2283):         return hash(self.p)
0.67 numbers.py(2283):         return hash(self.p)
0.67 numbers.py(2283):         return hash(self.p)
0.67 numbers.py(2283):         return hash(self.p)
0.67 numbers.py(2283):         return hash(self.p)
0.67 numbers.py(2082):         if isinstance(i, str):
0.67 numbers.py(2090):         try:
0.67 numbers.py(2091):             ival = int(i)
0.67 numbers.py(2097):         if ival == 1:
0.67 numbers.py(2098):             return S.One
0.67 numbers.py(713):         return self.class_key(), (0, ()), (), self
0.67 numbers.py(709):         return 1, 0, 'Number'
0.67 numbers.py(2283):         return hash(self.p)
0.67 numbers.py(2283):         return hash(self.p)
0.67 numbers.py(2082):         if isinstance(i, str):
0.67 numbers.py(2090):         try:
0.67 numbers.py(2091):             ival = int(i)
0.67 numbers.py(2097):         if ival == 1:
0.67 numbers.py(2099):         if ival == -1:
0.67 numbers.py(2101):         if ival == 0:
0.67 numbers.py(2103):         obj = Expr.__new__(cls)
0.67 numbers.py(2104):         obj.p = ival
0.67 numbers.py(2105):         return obj
0.67 numbers.py(713):         return self.class_key(), (0, ()), (), self
0.67 numbers.py(709):         return 1, 0, 'Number'
0.67 numbers.py(2283):         return hash(self.p)
0.67 numbers.py(2283):         return hash(self.p)
0.67 numbers.py(2237):         if isinstance(other, int):
0.67 numbers.py(2239):         elif isinstance(other, Integer):
0.67 numbers.py(2240):             return (self.p == other.p)
0.67 numbers.py(2247):         try:
0.67 numbers.py(2248):             other = _sympify(other)
0.67 numbers.py(2251):         if other.is_Integer:
0.67 numbers.py(2252):             return _sympify(self.p > other.p)
0.67 numbers.py(2283):         return hash(self.p)
0.67 numbers.py(2283):         return hash(self.p)
0.67 numbers.py(2283):         return hash(self.p)
0.67 numbers.py(2283):         return hash(self.p)
0.67 numbers.py(2283):         return hash(self.p)
0.67 numbers.py(2283):         return hash(self.p)
0.67 numbers.py(2082):         if isinstance(i, str):
0.67 numbers.py(2090):         try:
0.67 numbers.py(2091):             ival = int(i)
0.67 numbers.py(2097):         if ival == 1:
0.67 numbers.py(2098):             return S.One
0.67 numbers.py(713):         return self.class_key(), (0, ()), (), self
0.67 numbers.py(709):         return 1, 0, 'Number'
0.67 numbers.py(2283):         return hash(self.p)
0.67 numbers.py(2283):         return hash(self.p)
0.67 numbers.py(2082):         if isinstance(i, str):
0.67 numbers.py(2090):         try:
0.67 numbers.py(2091):             ival = int(i)
0.67 numbers.py(2097):         if ival == 1:
0.67 numbers.py(2099):         if ival == -1:
0.67 numbers.py(2101):         if ival == 0:
0.67 numbers.py(2103):         obj = Expr.__new__(cls)
0.67 numbers.py(2104):         obj.p = ival
0.67 numbers.py(2105):         return obj
0.67 numbers.py(713):         return self.class_key(), (0, ()), (), self
0.67 numbers.py(709):         return 1, 0, 'Number'
0.67 numbers.py(2283):         return hash(self.p)
0.67 numbers.py(2283):         return hash(self.p)
0.67 numbers.py(2237):         if isinstance(other, int):
0.67 numbers.py(2239):         elif isinstance(other, Integer):
0.67 numbers.py(2240):             return (self.p == other.p)
0.67 numbers.py(2247):         try:
0.67 numbers.py(2248):             other = _sympify(other)
0.67 numbers.py(2251):         if other.is_Integer:
0.67 numbers.py(2252):             return _sympify(self.p > other.p)
0.67 numbers.py(2283):         return hash(self.p)
0.67 numbers.py(2283):         return hash(self.p)
0.67 numbers.py(2283):         return hash(self.p)
0.67 numbers.py(2283):         return hash(self.p)
0.67 numbers.py(2283):         return hash(self.p)
0.67 numbers.py(2283):         return hash(self.p)
0.70 numbers.py(2683):         return S.NegativeOne
0.70 numbers.py(2082):         if isinstance(i, str):
0.70 numbers.py(2090):         try:
0.70 numbers.py(2091):             ival = int(i)
0.70 numbers.py(2097):         if ival == 1:
0.70 numbers.py(2098):             return S.One
0.70 numbers.py(713):         return self.class_key(), (0, ()), (), self
0.70 numbers.py(709):         return 1, 0, 'Number'
0.70 numbers.py(2283):         return hash(self.p)
0.70 numbers.py(2283):         return hash(self.p)
0.70 numbers.py(2082):         if isinstance(i, str):
0.70 numbers.py(2090):         try:
0.70 numbers.py(2091):             ival = int(i)
0.70 numbers.py(2097):         if ival == 1:
0.70 numbers.py(2099):         if ival == -1:
0.70 numbers.py(2101):         if ival == 0:
0.70 numbers.py(2103):         obj = Expr.__new__(cls)
0.70 numbers.py(2104):         obj.p = ival
0.70 numbers.py(2105):         return obj
0.70 numbers.py(713):         return self.class_key(), (0, ()), (), self
0.70 numbers.py(709):         return 1, 0, 'Number'
0.70 numbers.py(2283):         return hash(self.p)
0.70 numbers.py(2283):         return hash(self.p)
0.70 numbers.py(2237):         if isinstance(other, int):
0.70 numbers.py(2239):         elif isinstance(other, Integer):
0.70 numbers.py(2240):             return (self.p == other.p)
0.70 numbers.py(2247):         try:
0.70 numbers.py(2248):             other = _sympify(other)
0.70 numbers.py(2251):         if other.is_Integer:
0.70 numbers.py(2252):             return _sympify(self.p > other.p)
0.70 numbers.py(2283):         return hash(self.p)
0.70 numbers.py(2283):         return hash(self.p)
0.70 numbers.py(2283):         return hash(self.p)
0.70 numbers.py(2283):         return hash(self.p)
0.70 numbers.py(2283):         return hash(self.p)
0.70 numbers.py(2283):         return hash(self.p)
0.70 numbers.py(2082):         if isinstance(i, str):
0.70 numbers.py(2090):         try:
0.70 numbers.py(2091):             ival = int(i)
0.70 numbers.py(2097):         if ival == 1:
0.70 numbers.py(2098):             return S.One
0.70 numbers.py(713):         return self.class_key(), (0, ()), (), self
0.70 numbers.py(709):         return 1, 0, 'Number'
0.70 numbers.py(2283):         return hash(self.p)
0.70 numbers.py(2283):         return hash(self.p)
0.70 numbers.py(2082):         if isinstance(i, str):
0.70 numbers.py(2090):         try:
0.70 numbers.py(2091):             ival = int(i)
0.70 numbers.py(2097):         if ival == 1:
0.70 numbers.py(2099):         if ival == -1:
0.70 numbers.py(2101):         if ival == 0:
0.70 numbers.py(2103):         obj = Expr.__new__(cls)
0.70 numbers.py(2104):         obj.p = ival
0.70 numbers.py(2105):         return obj
0.70 numbers.py(713):         return self.class_key(), (0, ()), (), self
0.70 numbers.py(709):         return 1, 0, 'Number'
0.70 numbers.py(2283):         return hash(self.p)
0.70 numbers.py(2283):         return hash(self.p)
0.70 numbers.py(2237):         if isinstance(other, int):
0.70 numbers.py(2239):         elif isinstance(other, Integer):
0.70 numbers.py(2240):             return (self.p == other.p)
0.70 numbers.py(2247):         try:
0.70 numbers.py(2248):             other = _sympify(other)
0.70 numbers.py(2251):         if other.is_Integer:
0.70 numbers.py(2252):             return _sympify(self.p > other.p)
0.70 numbers.py(2283):         return hash(self.p)
0.70 numbers.py(2283):         return hash(self.p)
0.70 numbers.py(2283):         return hash(self.p)
0.70 numbers.py(2283):         return hash(self.p)
0.70 numbers.py(2283):         return hash(self.p)
0.70 numbers.py(2283):         return hash(self.p)
0.71 numbers.py(2082):         if isinstance(i, str):
0.71 numbers.py(2090):         try:
0.71 numbers.py(2091):             ival = int(i)
0.71 numbers.py(2097):         if ival == 1:
0.71 numbers.py(2099):         if ival == -1:
0.71 numbers.py(2101):         if ival == 0:
0.71 numbers.py(2103):         obj = Expr.__new__(cls)
0.71 numbers.py(2104):         obj.p = ival
0.71 numbers.py(2105):         return obj
0.71 numbers.py(713):         return self.class_key(), (0, ()), (), self
0.71 numbers.py(709):         return 1, 0, 'Number'
0.71 numbers.py(2283):         return hash(self.p)
0.71 numbers.py(2283):         return hash(self.p)
0.71 numbers.py(2082):         if isinstance(i, str):
0.71 numbers.py(2090):         try:
0.71 numbers.py(2091):             ival = int(i)
0.71 numbers.py(2097):         if ival == 1:
0.71 numbers.py(2099):         if ival == -1:
0.71 numbers.py(2101):         if ival == 0:
0.71 numbers.py(2103):         obj = Expr.__new__(cls)
0.71 numbers.py(2104):         obj.p = ival
0.71 numbers.py(2105):         return obj
0.71 numbers.py(713):         return self.class_key(), (0, ()), (), self
0.71 numbers.py(709):         return 1, 0, 'Number'
0.71 numbers.py(2283):         return hash(self.p)
0.71 numbers.py(2283):         return hash(self.p)
0.71 numbers.py(2237):         if isinstance(other, int):
0.71 numbers.py(2239):         elif isinstance(other, Integer):
0.71 numbers.py(2240):             return (self.p == other.p)
0.71 numbers.py(2256):         try:
0.71 numbers.py(2257):             other = _sympify(other)
0.71 numbers.py(2260):         if other.is_Integer:
0.71 numbers.py(2261):             return _sympify(self.p < other.p)
0.71 numbers.py(2283):         return hash(self.p)
0.71 numbers.py(2283):         return hash(self.p)
0.71 numbers.py(2283):         return hash(self.p)
0.71 numbers.py(2283):         return hash(self.p)
0.71 numbers.py(2283):         return hash(self.p)
0.71 numbers.py(2283):         return hash(self.p)
0.71 numbers.py(2082):         if isinstance(i, str):
0.71 numbers.py(2090):         try:
0.71 numbers.py(2091):             ival = int(i)
0.71 numbers.py(2097):         if ival == 1:
0.71 ['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(sympy/core/numbers\\.py)']
0.25 numbers.py(1): import numbers
0.25 numbers.py(2): import decimal
0.25 numbers.py(3): import fractions
0.25 numbers.py(4): import math
0.25 numbers.py(5): import re as regex
0.25 numbers.py(6): import sys
0.25 numbers.py(8): from .containers import Tuple
0.25 numbers.py(9): from .sympify import (SympifyError, converter, sympify, _convert_numpy_types, _sympify,
0.25 numbers.py(11): from .singleton import S, Singleton
0.25 numbers.py(12): from .expr import Expr, AtomicExpr
0.25 numbers.py(13): from .evalf import pure_complex
0.25 numbers.py(14): from .decorators import _sympifyit
0.25 numbers.py(15): from .cache import cacheit, clear_cache
0.25 numbers.py(16): from .logic import fuzzy_not
0.25 numbers.py(17): from sympy.core.compatibility import (as_int, HAS_GMPY, SYMPY_INTS,
0.25 numbers.py(19): from sympy.core.cache import lru_cache
0.25 numbers.py(20): from .kind import NumberKind
0.25 numbers.py(21): from sympy.multipledispatch import dispatch
0.25 numbers.py(22): import mpmath
0.25 numbers.py(23): import mpmath.libmp as mlib
0.25 numbers.py(24): from mpmath.libmp import bitcount
0.25 numbers.py(25): from mpmath.libmp.backend import MPZ
0.25 numbers.py(26): from mpmath.libmp import mpf_pow, mpf_pi, mpf_e, phi_fixed
0.25 numbers.py(27): from mpmath.ctx_mp import mpnumeric
0.25 numbers.py(28): from mpmath.libmp.libmpf import (
0.25 numbers.py(32): from sympy.utilities.misc import debug, filldedent
0.25 numbers.py(33): from .parameters import global_parameters
0.25 numbers.py(35): from sympy.utilities.exceptions import SymPyDeprecationWarning
0.25 numbers.py(37): rnd = mlib.round_nearest
0.25 numbers.py(39): _LOG2 = math.log(2)
0.25 numbers.py(42): def comp(z1, z2, tol=None):
0.25 numbers.py(151): def mpf_norm(mpf, prec):
0.25 numbers.py(181): _errdict = {"divide": False}
0.25 numbers.py(184): def seterr(divide=False):
0.25 numbers.py(196): def _as_integer_ratio(p):
0.25 numbers.py(207): def _decimal_to_Rational_prec(dec):
0.25 numbers.py(222): _floatpat = regex.compile(r"[-+]?((\d*\.\d+)|(\d+\.?))")
0.25 numbers.py(223): def _literal_float(f):
0.25 numbers.py(231): @lru_cache(1024)
0.25 numbers.py(232): def igcd(*args):
0.25 numbers.py(267): igcd2 = math.gcd
0.25 numbers.py(270): def igcd_lehmer(a, b):
0.25 numbers.py(416): def ilcm(*args):
0.25 numbers.py(442): def igcdex(a, b):
0.25 numbers.py(488): def mod_inverse(a, m):
0.25 numbers.py(554): class Number(AtomicExpr):
0.25 numbers.py(554): class Number(AtomicExpr):
0.25 numbers.py(555):     """Represents atomic numbers in SymPy.
0.25 numbers.py(582):     is_commutative = True
0.25 numbers.py(583):     is_number = True
0.25 numbers.py(584):     is_Number = True
0.25 numbers.py(586):     __slots__ = ()
0.25 numbers.py(589):     _prec = -1
0.25 numbers.py(591):     kind = NumberKind
0.25 numbers.py(593):     def __new__(cls, *obj):
0.25 numbers.py(623):     def invert(self, other, *gens, **args):
0.25 numbers.py(629):     def __divmod__(self, other):
0.25 numbers.py(655):     def __rdivmod__(self, other):
0.25 numbers.py(662):     def _as_mpf_val(self, prec):
0.25 numbers.py(667):     def _eval_evalf(self, prec):
0.25 numbers.py(670):     def _as_mpf_op(self, prec):
0.25 numbers.py(674):     def __float__(self):
0.25 numbers.py(677):     def floor(self):
0.25 numbers.py(681):     def ceiling(self):
0.25 numbers.py(685):     def __floor__(self):
0.25 numbers.py(688):     def __ceil__(self):
0.25 numbers.py(691):     def _eval_conjugate(self):
0.25 numbers.py(694):     def _eval_order(self, *symbols):
0.25 numbers.py(699):     def _eval_subs(self, old, new):
0.25 numbers.py(704):     def _eval_is_finite(self):
0.25 numbers.py(707):     @classmethod
0.25 numbers.py(708):     def class_key(cls):
0.25 numbers.py(711):     @cacheit
0.25 numbers.py(712):     def sort_key(self, order=None):
0.25 numbers.py(715):     @_sympifyit('other', NotImplemented)
0.25 numbers.py(716):     def __add__(self, other):
0.25 numbers.py(726):     @_sympifyit('other', NotImplemented)
0.25 numbers.py(727):     def __sub__(self, other):
0.25 numbers.py(737):     @_sympifyit('other', NotImplemented)
0.25 numbers.py(738):     def __mul__(self, other):
0.25 numbers.py(760):     @_sympifyit('other', NotImplemented)
0.25 numbers.py(761):     def __truediv__(self, other):
0.25 numbers.py(769):     def __eq__(self, other):
0.25 numbers.py(773):     def __ne__(self, other):
0.25 numbers.py(777):     def __lt__(self, other):
0.25 numbers.py(785):     def __le__(self, other):
0.25 numbers.py(793):     def __gt__(self, other):
0.25 numbers.py(800):     def __ge__(self, other):
0.25 numbers.py(807):     def __hash__(self):
0.25 numbers.py(810):     def is_constant(self, *wrt, **flags):
0.25 numbers.py(813):     def as_coeff_mul(self, *deps, rational=True, **kwargs):
0.25 numbers.py(821):     def as_coeff_add(self, *deps):
0.25 numbers.py(827):     def as_coeff_Mul(self, rational=False):
0.25 numbers.py(833):     def as_coeff_Add(self, rational=False):
0.25 numbers.py(839):     def gcd(self, other):
0.25 numbers.py(844):     def lcm(self, other):
0.25 numbers.py(849):     def cofactors(self, other):
0.25 numbers.py(855): class Float(Number):
0.25 numbers.py(855): class Float(Number):
0.25 numbers.py(856):     """Represent a floating-point number of arbitrary precision.
0.25 numbers.py(1018):     __slots__ = ('_mpf_', '_prec')
0.25 numbers.py(1022):     is_rational = None
0.25 numbers.py(1023):     is_irrational = None
0.25 numbers.py(1024):     is_number = True
0.25 numbers.py(1026):     is_real = True
0.25 numbers.py(1027):     is_extended_real = True
0.25 numbers.py(1029):     is_Float = True
0.25 numbers.py(1031):     def __new__(cls, num, dps=None, prec=None, precision=None):
0.25 numbers.py(1191):     @classmethod
0.25 numbers.py(1192):     def _new(cls, _mpf_, _prec, zero=True):
0.25 numbers.py(1209):     def __getnewargs__(self):
0.25 numbers.py(1212):     def __getstate__(self):
0.25 numbers.py(1215):     def _hashable_content(self):
0.25 numbers.py(1218):     def floor(self):
0.25 numbers.py(1222):     def ceiling(self):
0.25 numbers.py(1226):     def __floor__(self):
0.25 numbers.py(1229):     def __ceil__(self):
0.25 numbers.py(1232):     @property
0.25 numbers.py(1233):     def num(self):
0.25 numbers.py(1236):     def _as_mpf_val(self, prec):
0.25 numbers.py(1242):     def _as_mpf_op(self, prec):
0.25 numbers.py(1245):     def _eval_is_finite(self):
0.25 numbers.py(1250):     def _eval_is_infinite(self):
0.25 numbers.py(1255):     def _eval_is_integer(self):
0.25 numbers.py(1258):     def _eval_is_negative(self):
0.25 numbers.py(1263):     def _eval_is_positive(self):
0.25 numbers.py(1268):     def _eval_is_extended_negative(self):
0.25 numbers.py(1275):     def _eval_is_extended_positive(self):
0.25 numbers.py(1282):     def _eval_is_zero(self):
0.25 numbers.py(1285):     def __bool__(self):
0.25 numbers.py(1288):     def __neg__(self):
0.25 numbers.py(1291):     @_sympifyit('other', NotImplemented)
0.25 numbers.py(1292):     def __add__(self, other):
0.25 numbers.py(1298):     @_sympifyit('other', NotImplemented)
0.25 numbers.py(1299):     def __sub__(self, other):
0.25 numbers.py(1305):     @_sympifyit('other', NotImplemented)
0.25 numbers.py(1306):     def __mul__(self, other):
0.25 numbers.py(1312):     @_sympifyit('other', NotImplemented)
0.25 numbers.py(1313):     def __truediv__(self, other):
0.25 numbers.py(1319):     @_sympifyit('other', NotImplemented)
0.25 numbers.py(1320):     def __mod__(self, other):
0.25 numbers.py(1334):     @_sympifyit('other', NotImplemented)
0.25 numbers.py(1335):     def __rmod__(self, other):
0.25 numbers.py(1343):     def _eval_power(self, expt):
0.25 numbers.py(1375):     def __abs__(self):
0.25 numbers.py(1378):     def __int__(self):
0.25 numbers.py(1383):     def __eq__(self, other):
0.25 numbers.py(1413):     def __ne__(self, other):
0.25 numbers.py(1416):     def _Frel(self, other, op):
0.25 numbers.py(1446):     def __gt__(self, other):
0.25 numbers.py(1454):     def __ge__(self, other):
0.25 numbers.py(1462):     def __lt__(self, other):
0.25 numbers.py(1470):     def __le__(self, other):
0.25 numbers.py(1478):     def __hash__(self):
0.25 numbers.py(1481):     def epsilon_eq(self, other, epsilon="1e-15"):
0.25 numbers.py(1484):     def _sage_(self):
0.26 numbers.py(1488):     def __format__(self, format_spec):
0.26 numbers.py(1493): converter[float] = converter[decimal.Decimal] = Float
0.26 numbers.py(1496): RealNumber = Float
0.26 numbers.py(1499): class Rational(Number):
0.26 numbers.py(1499): class Rational(Number):
0.26 numbers.py(1500):     """Represents rational numbers (p/q) of any size.
0.26 numbers.py(1582):     is_real = True
0.26 numbers.py(1583):     is_integer = False
0.26 numbers.py(1584):     is_rational = True
0.26 numbers.py(1585):     is_number = True
0.26 numbers.py(1587):     __slots__ = ('p', 'q')
0.26 numbers.py(1589):     is_Rational = True
0.26 numbers.py(1591):     @cacheit
0.26 numbers.py(1592):     def __new__(cls, p, q=None, gcd=None):
0.26 numbers.py(1666):     def limit_denominator(self, max_denominator=1000000):
0.26 numbers.py(1682):     def __getnewargs__(self):
0.26 numbers.py(1685):     def _hashable_content(self):
0.26 numbers.py(1688):     def _eval_is_positive(self):
0.26 numbers.py(1691):     def _eval_is_zero(self):
0.26 numbers.py(1694):     def __neg__(self):
0.26 numbers.py(1697):     @_sympifyit('other', NotImplemented)
0.26 numbers.py(1698):     def __add__(self, other):
0.26 numbers.py(1710):     __radd__ = __add__
0.26 numbers.py(1712):     @_sympifyit('other', NotImplemented)
0.26 numbers.py(1713):     def __sub__(self, other):
0.26 numbers.py(1724):     @_sympifyit('other', NotImplemented)
0.26 numbers.py(1725):     def __rsub__(self, other):
0.26 numbers.py(1736):     @_sympifyit('other', NotImplemented)
0.26 numbers.py(1737):     def __mul__(self, other):
0.26 numbers.py(1748):     __rmul__ = __mul__
0.26 numbers.py(1750):     @_sympifyit('other', NotImplemented)
0.26 numbers.py(1751):     def __truediv__(self, other):
0.26 numbers.py(1765):     @_sympifyit('other', NotImplemented)
0.26 numbers.py(1766):     def __rtruediv__(self, other):
0.26 numbers.py(1778):     @_sympifyit('other', NotImplemented)
0.26 numbers.py(1779):     def __mod__(self, other):
0.26 numbers.py(1791):     @_sympifyit('other', NotImplemented)
0.26 numbers.py(1792):     def __rmod__(self, other):
0.26 numbers.py(1797):     def _eval_power(self, expt):
0.26 numbers.py(1835):     def _as_mpf_val(self, prec):
0.26 numbers.py(1838):     def _mpmath_(self, prec, rnd):
0.26 numbers.py(1841):     def __abs__(self):
0.26 numbers.py(1844):     def __int__(self):
0.26 numbers.py(1850):     def floor(self):
0.26 numbers.py(1853):     def ceiling(self):
0.26 numbers.py(1856):     def __floor__(self):
0.26 numbers.py(1859):     def __ceil__(self):
0.26 numbers.py(1862):     def __eq__(self, other):
0.26 numbers.py(1908):     def __ne__(self, other):
0.26 numbers.py(1911):     def _Rrel(self, other, attr):
0.26 numbers.py(1932):     def __gt__(self, other):
0.26 numbers.py(1940):     def __ge__(self, other):
0.26 numbers.py(1948):     def __lt__(self, other):
0.26 numbers.py(1956):     def __le__(self, other):
0.26 numbers.py(1964):     def __hash__(self):
0.26 numbers.py(1967):     def factors(self, limit=None, use_trial=True, use_rho=False,
0.26 numbers.py(1979):     def numerator(self):
0.26 numbers.py(1982):     def denominator(self):
0.26 numbers.py(1985):     @_sympifyit('other', NotImplemented)
0.26 numbers.py(1986):     def gcd(self, other):
0.26 numbers.py(1995):     @_sympifyit('other', NotImplemented)
0.26 numbers.py(1996):     def lcm(self, other):
0.26 numbers.py(2003):     def as_numer_denom(self):
0.26 numbers.py(2006):     def _sage_(self):
0.26 numbers.py(2010):     def as_content_primitive(self, radical=False, clear=True):
0.26 numbers.py(2030):     def as_coeff_Mul(self, rational=False):
0.26 numbers.py(2034):     def as_coeff_Add(self, rational=False):
0.26 numbers.py(2039): class Integer(Rational):
0.26 numbers.py(2039): class Integer(Rational):
0.26 numbers.py(2040):     """Represents integer numbers of any size.
0.26 numbers.py(2066):     q = 1
0.26 numbers.py(2067):     is_integer = True
0.26 numbers.py(2068):     is_number = True
0.26 numbers.py(2070):     is_Integer = True
0.26 numbers.py(2072):     __slots__ = ('p',)
0.26 numbers.py(2074):     def _as_mpf_val(self, prec):
0.26 numbers.py(2077):     def _mpmath_(self, prec, rnd):
0.26 numbers.py(2080):     @cacheit
0.26 numbers.py(2081):     def __new__(cls, i):
0.26 numbers.py(2107):     def __getnewargs__(self):
0.26 numbers.py(2111):     def __int__(self):
0.26 numbers.py(2114):     def floor(self):
0.26 numbers.py(2117):     def ceiling(self):
0.26 numbers.py(2120):     def __floor__(self):
0.26 numbers.py(2123):     def __ceil__(self):
0.26 numbers.py(2126):     def __neg__(self):
0.26 numbers.py(2129):     def __abs__(self):
0.26 numbers.py(2135):     def __divmod__(self, other):
0.26 numbers.py(2142):     def __rdivmod__(self, other):
0.26 numbers.py(2157):     def __add__(self, other):
0.26 numbers.py(2169):     def __radd__(self, other):
0.26 numbers.py(2178):     def __sub__(self, other):
0.26 numbers.py(2189):     def __rsub__(self, other):
0.26 numbers.py(2198):     def __mul__(self, other):
0.26 numbers.py(2209):     def __rmul__(self, other):
0.26 numbers.py(2218):     def __mod__(self, other):
0.26 numbers.py(2227):     def __rmod__(self, other):
0.26 numbers.py(2236):     def __eq__(self, other):
0.26 numbers.py(2243):     def __ne__(self, other):
0.26 numbers.py(2246):     def __gt__(self, other):
0.26 numbers.py(2255):     def __lt__(self, other):
0.26 numbers.py(2264):     def __ge__(self, other):
0.26 numbers.py(2273):     def __le__(self, other):
0.26 numbers.py(2282):     def __hash__(self):
0.26 numbers.py(2285):     def __index__(self):
0.26 numbers.py(2290):     def _eval_is_odd(self):
0.26 numbers.py(2293):     def _eval_power(self, expt):
0.26 numbers.py(2401):     def _eval_is_prime(self):
0.26 numbers.py(2406):     def _eval_is_composite(self):
0.26 numbers.py(2412):     def as_numer_denom(self):
0.26 numbers.py(2415):     @_sympifyit('other', NotImplemented)
0.26 numbers.py(2416):     def __floordiv__(self, other):
0.26 numbers.py(2423):     def __rfloordiv__(self, other):
0.26 numbers.py(2427): converter[int] = Integer
0.26 numbers.py(2430): class AlgebraicNumber(Expr):
0.26 numbers.py(2430): class AlgebraicNumber(Expr):
0.26 numbers.py(2431):     """Class for representing algebraic numbers in SymPy. """
0.26 numbers.py(2433):     __slots__ = ('rep', 'root', 'alias', 'minpoly')
0.26 numbers.py(2435):     is_AlgebraicNumber = True
0.26 numbers.py(2436):     is_algebraic = True
0.26 numbers.py(2437):     is_number = True
0.26 numbers.py(2440):     kind = NumberKind
0.26 numbers.py(2445):     free_symbols = set()
0.26 numbers.py(2447):     def __new__(cls, expr, coeffs=None, alias=None, **args):
0.26 numbers.py(2500):     def __hash__(self):
0.26 numbers.py(2503):     def _eval_evalf(self, prec):
0.26 numbers.py(2506):     @property
0.26 numbers.py(2507):     def is_aliased(self):
0.26 numbers.py(2511):     def as_poly(self, x=None):
0.26 numbers.py(2522):     def as_expr(self, x=None):
0.26 numbers.py(2526):     def coeffs(self):
0.26 numbers.py(2530):     def native_coeffs(self):
0.26 numbers.py(2534):     def to_algebraic_integer(self):
0.26 numbers.py(2550):     def _eval_simplify(self, **kwargs):
0.26 numbers.py(2561): class RationalConstant(Rational):
0.26 numbers.py(2561): class RationalConstant(Rational):
0.26 numbers.py(2562):     """
0.26 numbers.py(2568):     __slots__ = ()
0.26 numbers.py(2570):     def __new__(cls):
0.26 numbers.py(2574): class IntegerConstant(Integer):
0.26 numbers.py(2574): class IntegerConstant(Integer):
0.26 numbers.py(2575):     __slots__ = ()
0.26 numbers.py(2577):     def __new__(cls):
0.26 numbers.py(2581): class Zero(IntegerConstant, metaclass=Singleton):
0.26 numbers.py(2581): class Zero(IntegerConstant, metaclass=Singleton):
0.26 numbers.py(2582):     """The number zero.
0.26 numbers.py(2601):     p = 0
0.26 numbers.py(2602):     q = 1
0.26 numbers.py(2603):     is_positive = False
0.26 numbers.py(2604):     is_negative = False
0.26 numbers.py(2605):     is_zero = True
0.26 numbers.py(2606):     is_number = True
0.26 numbers.py(2607):     is_comparable = True
0.26 numbers.py(2609):     __slots__ = ()
0.26 numbers.py(2611):     def __getnewargs__(self):
0.26 numbers.py(2614):     @staticmethod
0.26 numbers.py(2615):     def __abs__():
0.26 numbers.py(2618):     @staticmethod
0.26 numbers.py(2619):     def __neg__():
0.26 numbers.py(2622):     def _eval_power(self, expt):
0.26 numbers.py(2638):     def _eval_order(self, *symbols):
0.26 numbers.py(2642):     def __bool__(self):
0.26 numbers.py(2645):     def as_coeff_Mul(self, rational=False):  # XXX this routine should be deleted
0.26 numbers.py(2650): class One(IntegerConstant, metaclass=Singleton):
0.26 numbers.py(2650): class One(IntegerConstant, metaclass=Singleton):
0.26 numbers.py(2651):     """The number one.
0.26 numbers.py(2667):     is_number = True
0.26 numbers.py(2669):     p = 1
0.26 numbers.py(2670):     q = 1
0.26 numbers.py(2672):     __slots__ = ()
0.26 numbers.py(2674):     def __getnewargs__(self):
0.26 numbers.py(2677):     @staticmethod
0.26 numbers.py(2678):     def __abs__():
0.26 numbers.py(2681):     @staticmethod
0.26 numbers.py(2682):     def __neg__():
0.26 numbers.py(2685):     def _eval_power(self, expt):
0.26 numbers.py(2688):     def _eval_order(self, *symbols):
0.26 numbers.py(2691):     @staticmethod
0.26 numbers.py(2692):     def factors(limit=None, use_trial=True, use_rho=False, use_pm1=False,
0.26 numbers.py(2700): class NegativeOne(IntegerConstant, metaclass=Singleton):
0.26 numbers.py(2700): class NegativeOne(IntegerConstant, metaclass=Singleton):
0.26 numbers.py(2701):     """The number negative one.
0.26 numbers.py(2723):     is_number = True
0.26 numbers.py(2725):     p = -1
0.26 numbers.py(2726):     q = 1
0.26 numbers.py(2728):     __slots__ = ()
0.26 numbers.py(2730):     def __getnewargs__(self):
0.26 numbers.py(2733):     @staticmethod
0.26 numbers.py(2734):     def __abs__():
0.26 numbers.py(2737):     @staticmethod
0.26 numbers.py(2738):     def __neg__():
0.26 numbers.py(2741):     def _eval_power(self, expt):
0.26 numbers.py(2764): class Half(RationalConstant, metaclass=Singleton):
0.26 numbers.py(2764): class Half(RationalConstant, metaclass=Singleton):
0.26 numbers.py(2765):     """The rational number 1/2.
0.26 numbers.py(2781):     is_number = True
0.26 numbers.py(2783):     p = 1
0.26 numbers.py(2784):     q = 2
0.26 numbers.py(2786):     __slots__ = ()
0.26 numbers.py(2788):     def __getnewargs__(self):
0.26 numbers.py(2791):     @staticmethod
0.26 numbers.py(2792):     def __abs__():
0.26 numbers.py(2796): class Infinity(Number, metaclass=Singleton):
0.26 numbers.py(2796): class Infinity(Number, metaclass=Singleton):
0.26 numbers.py(2797):     r"""Positive infinite quantity.
0.26 numbers.py(2837):     is_commutative = True
0.26 numbers.py(2838):     is_number = True
0.26 numbers.py(2839):     is_complex = False
0.26 numbers.py(2840):     is_extended_real = True
0.26 numbers.py(2841):     is_infinite = True
0.26 numbers.py(2842):     is_comparable = True
0.26 numbers.py(2843):     is_extended_positive = True
0.26 numbers.py(2844):     is_prime = False
0.26 numbers.py(2846):     __slots__ = ()
0.26 numbers.py(2848):     def __new__(cls):
0.26 numbers.py(2851):     def _latex(self, printer):
0.26 numbers.py(2854):     def _eval_subs(self, old, new):
0.26 numbers.py(2858):     def _eval_evalf(self, prec=None):
0.26 numbers.py(2861):     def evalf(self, prec=None, **options):
0.26 numbers.py(2864):     @_sympifyit('other', NotImplemented)
0.26 numbers.py(2865):     def __add__(self, other):
0.26 numbers.py(2871):     __radd__ = __add__
0.26 numbers.py(2873):     @_sympifyit('other', NotImplemented)
0.26 numbers.py(2874):     def __sub__(self, other):
0.26 numbers.py(2881):     @_sympifyit('other', NotImplemented)
0.26 numbers.py(2882):     def __rsub__(self, other):
0.26 numbers.py(2885):     @_sympifyit('other', NotImplemented)
0.26 numbers.py(2886):     def __mul__(self, other):
0.26 numbers.py(2894):     __rmul__ = __mul__
0.26 numbers.py(2896):     @_sympifyit('other', NotImplemented)
0.26 numbers.py(2897):     def __truediv__(self, other):
0.26 numbers.py(2908):     def __abs__(self):
0.26 numbers.py(2911):     def __neg__(self):
0.26 numbers.py(2914):     def _eval_power(self, expt):
0.26 numbers.py(2953):     def _as_mpf_val(self, prec):
0.26 numbers.py(2956):     def _sage_(self):
0.26 numbers.py(2960):     def __hash__(self):
0.26 numbers.py(2963):     def __eq__(self, other):
0.26 numbers.py(2966):     def __ne__(self, other):
0.26 numbers.py(2969):     __gt__ = Expr.__gt__
0.26 numbers.py(2970):     __ge__ = Expr.__ge__
0.26 numbers.py(2971):     __lt__ = Expr.__lt__
0.26 numbers.py(2972):     __le__ = Expr.__le__
0.26 numbers.py(2974):     @_sympifyit('other', NotImplemented)
0.26 numbers.py(2975):     def __mod__(self, other):
0.26 numbers.py(2980):     __rmod__ = __mod__
0.26 numbers.py(2982):     def floor(self):
0.26 numbers.py(2985):     def ceiling(self):
0.26 numbers.py(2988): oo = S.Infinity
0.26 numbers.py(2849):         return AtomicExpr.__new__(cls)
0.26 numbers.py(2991): class NegativeInfinity(Number, metaclass=Singleton):
0.26 numbers.py(2991): class NegativeInfinity(Number, metaclass=Singleton):
0.26 numbers.py(2992):     """Negative infinite quantity.
0.26 numbers.py(3003):     is_extended_real = True
0.26 numbers.py(3004):     is_complex = False
0.26 numbers.py(3005):     is_commutative = True
0.26 numbers.py(3006):     is_infinite = True
0.26 numbers.py(3007):     is_comparable = True
0.26 numbers.py(3008):     is_extended_negative = True
0.26 numbers.py(3009):     is_number = True
0.26 numbers.py(3010):     is_prime = False
0.26 numbers.py(3012):     __slots__ = ()
0.26 numbers.py(3014):     def __new__(cls):
0.26 numbers.py(3017):     def _latex(self, printer):
0.26 numbers.py(3020):     def _eval_subs(self, old, new):
0.26 numbers.py(3024):     def _eval_evalf(self, prec=None):
0.26 numbers.py(3027):     def evalf(self, prec=None, **options):
0.26 numbers.py(3030):     @_sympifyit('other', NotImplemented)
0.26 numbers.py(3031):     def __add__(self, other):
0.26 numbers.py(3037):     __radd__ = __add__
0.26 numbers.py(3039):     @_sympifyit('other', NotImplemented)
0.26 numbers.py(3040):     def __sub__(self, other):
0.26 numbers.py(3047):     @_sympifyit('other', NotImplemented)
0.26 numbers.py(3048):     def __rsub__(self, other):
0.26 numbers.py(3051):     @_sympifyit('other', NotImplemented)
0.26 numbers.py(3052):     def __mul__(self, other):
0.26 numbers.py(3060):     __rmul__ = __mul__
0.26 numbers.py(3062):     @_sympifyit('other', NotImplemented)
0.26 numbers.py(3063):     def __truediv__(self, other):
0.26 numbers.py(3074):     def __abs__(self):
0.26 numbers.py(3077):     def __neg__(self):
0.26 numbers.py(3080):     def _eval_power(self, expt):
0.26 numbers.py(3116):     def _as_mpf_val(self, prec):
0.26 numbers.py(3119):     def _sage_(self):
0.26 numbers.py(3123):     def __hash__(self):
0.26 numbers.py(3126):     def __eq__(self, other):
0.26 numbers.py(3129):     def __ne__(self, other):
0.26 numbers.py(3132):     __gt__ = Expr.__gt__
0.26 numbers.py(3133):     __ge__ = Expr.__ge__
0.26 numbers.py(3134):     __lt__ = Expr.__lt__
0.26 numbers.py(3135):     __le__ = Expr.__le__
0.26 numbers.py(3137):     @_sympifyit('other', NotImplemented)
0.26 numbers.py(3138):     def __mod__(self, other):
0.26 numbers.py(3143):     __rmod__ = __mod__
0.26 numbers.py(3145):     def floor(self):
0.26 numbers.py(3148):     def ceiling(self):
0.26 numbers.py(3151):     def as_powers_dict(self):
0.26 numbers.py(3155): class NaN(Number, metaclass=Singleton):
0.26 numbers.py(3155): class NaN(Number, metaclass=Singleton):
0.26 numbers.py(3156):     """
0.26 numbers.py(3203):     is_commutative = True
0.26 numbers.py(3204):     is_extended_real = None
0.26 numbers.py(3205):     is_real = None
0.26 numbers.py(3206):     is_rational = None
0.26 numbers.py(3207):     is_algebraic = None
0.26 numbers.py(3208):     is_transcendental = None
0.26 numbers.py(3209):     is_integer = None
0.26 numbers.py(3210):     is_comparable = False
0.26 numbers.py(3211):     is_finite = None
0.26 numbers.py(3212):     is_zero = None
0.26 numbers.py(3213):     is_prime = None
0.26 numbers.py(3214):     is_positive = None
0.26 numbers.py(3215):     is_negative = None
0.26 numbers.py(3216):     is_number = True
0.26 numbers.py(3218):     __slots__ = ()
0.26 numbers.py(3220):     def __new__(cls):
0.26 numbers.py(3223):     def _latex(self, printer):
0.26 numbers.py(3226):     def __neg__(self):
0.26 numbers.py(3229):     @_sympifyit('other', NotImplemented)
0.26 numbers.py(3230):     def __add__(self, other):
0.26 numbers.py(3233):     @_sympifyit('other', NotImplemented)
0.26 numbers.py(3234):     def __sub__(self, other):
0.26 numbers.py(3237):     @_sympifyit('other', NotImplemented)
0.26 numbers.py(3238):     def __mul__(self, other):
0.26 numbers.py(3241):     @_sympifyit('other', NotImplemented)
0.26 numbers.py(3242):     def __truediv__(self, other):
0.26 numbers.py(3245):     def floor(self):
0.26 numbers.py(3248):     def ceiling(self):
0.26 numbers.py(3251):     def _as_mpf_val(self, prec):
0.26 numbers.py(3254):     def _sage_(self):
0.26 numbers.py(3258):     def __hash__(self):
0.26 numbers.py(3261):     def __eq__(self, other):
0.26 numbers.py(3265):     def __ne__(self, other):
0.26 numbers.py(3269):     __gt__ = Expr.__gt__
0.26 numbers.py(3270):     __ge__ = Expr.__ge__
0.26 numbers.py(3271):     __lt__ = Expr.__lt__
0.26 numbers.py(3272):     __le__ = Expr.__le__
0.26 numbers.py(3274): nan = S.NaN
0.26 numbers.py(3221):         return AtomicExpr.__new__(cls)
0.26 numbers.py(3276): @dispatch(NaN, Expr) # type:ignore
0.26 numbers.py(3277): def _eval_is_eq(a, b): # noqa:F811
0.26 numbers.py(3280): class ComplexInfinity(AtomicExpr, metaclass=Singleton):
0.26 numbers.py(3280): class ComplexInfinity(AtomicExpr, metaclass=Singleton):
0.26 numbers.py(3281):     r"""Complex infinity.
0.26 numbers.py(3312):     is_commutative = True
0.26 numbers.py(3313):     is_infinite = True
0.26 numbers.py(3314):     is_number = True
0.26 numbers.py(3315):     is_prime = False
0.26 numbers.py(3316):     is_complex = False
0.26 numbers.py(3317):     is_extended_real = False
0.26 numbers.py(3319):     kind = NumberKind
0.26 numbers.py(3321):     __slots__ = ()
0.26 numbers.py(3323):     def __new__(cls):
0.26 numbers.py(3326):     def _latex(self, printer):
0.26 numbers.py(3329):     @staticmethod
0.26 numbers.py(3330):     def __abs__():
0.26 numbers.py(3333):     def floor(self):
0.26 numbers.py(3336):     def ceiling(self):
0.26 numbers.py(3339):     @staticmethod
0.26 numbers.py(3340):     def __neg__():
0.26 numbers.py(3343):     def _eval_power(self, expt):
0.26 numbers.py(3356):     def _sage_(self):
0.26 numbers.py(3361): zoo = S.ComplexInfinity
0.26 numbers.py(3324):         return AtomicExpr.__new__(cls)
0.26 numbers.py(3364): class NumberSymbol(AtomicExpr):
0.26 numbers.py(3364): class NumberSymbol(AtomicExpr):
0.26 numbers.py(3366):     is_commutative = True
0.26 numbers.py(3367):     is_finite = True
0.26 numbers.py(3368):     is_number = True
0.26 numbers.py(3370):     __slots__ = ()
0.26 numbers.py(3372):     is_NumberSymbol = True
0.26 numbers.py(3374):     kind = NumberKind
0.26 numbers.py(3376):     def __new__(cls):
0.26 numbers.py(3379):     def approximation(self, number_cls):
0.26 numbers.py(3385):     def _eval_evalf(self, prec):
0.26 numbers.py(3388):     def __eq__(self, other):
0.26 numbers.py(3400):     def __ne__(self, other):
0.26 numbers.py(3403):     def __le__(self, other):
0.26 numbers.py(3408):     def __ge__(self, other):
0.26 numbers.py(3413):     def __int__(self):
0.26 numbers.py(3417):     def __hash__(self):
0.26 numbers.py(3420): class Exp1(NumberSymbol, metaclass=Singleton):
0.26 numbers.py(3420): class Exp1(NumberSymbol, metaclass=Singleton):
0.26 numbers.py(3421):     r"""The `e` constant.
0.26 numbers.py(3448):     is_real = True
0.26 numbers.py(3449):     is_positive = True
0.26 numbers.py(3450):     is_negative = False  # XXX Forces is_negative/is_nonnegative
0.26 numbers.py(3451):     is_irrational = True
0.26 numbers.py(3452):     is_number = True
0.26 numbers.py(3453):     is_algebraic = False
0.26 numbers.py(3454):     is_transcendental = True
0.26 numbers.py(3456):     __slots__ = ()
0.26 numbers.py(3458):     def _latex(self, printer):
0.26 numbers.py(3461):     @staticmethod
0.26 numbers.py(3462):     def __abs__():
0.26 numbers.py(3465):     def __int__(self):
0.26 numbers.py(3468):     def _as_mpf_val(self, prec):
0.26 numbers.py(3471):     def approximation_interval(self, number_cls):
0.26 numbers.py(3477):     def _eval_power(self, expt):
0.26 numbers.py(3481):     def _eval_rewrite_as_sin(self, **kwargs):
0.26 numbers.py(3486):     def _eval_rewrite_as_cos(self, **kwargs):
0.26 numbers.py(3491):     def _sage_(self):
0.26 numbers.py(3494): E = S.Exp1
0.26 numbers.py(3377):         return AtomicExpr.__new__(cls)
0.26 numbers.py(3497): class Pi(NumberSymbol, metaclass=Singleton):
0.26 numbers.py(3497): class Pi(NumberSymbol, metaclass=Singleton):
0.26 numbers.py(3498):     r"""The `\pi` constant.
0.26 numbers.py(3533):     is_real = True
0.26 numbers.py(3534):     is_positive = True
0.26 numbers.py(3535):     is_negative = False
0.26 numbers.py(3536):     is_irrational = True
0.26 numbers.py(3537):     is_number = True
0.26 numbers.py(3538):     is_algebraic = False
0.26 numbers.py(3539):     is_transcendental = True
0.26 numbers.py(3541):     __slots__ = ()
0.26 numbers.py(3543):     def _latex(self, printer):
0.26 numbers.py(3546):     @staticmethod
0.26 numbers.py(3547):     def __abs__():
0.26 numbers.py(3550):     def __int__(self):
0.26 numbers.py(3553):     def _as_mpf_val(self, prec):
0.26 numbers.py(3556):     def approximation_interval(self, number_cls):
0.26 numbers.py(3562):     def _sage_(self):
0.26 numbers.py(3565): pi = S.Pi
0.26 numbers.py(3377):         return AtomicExpr.__new__(cls)
0.26 numbers.py(3568): class GoldenRatio(NumberSymbol, metaclass=Singleton):
0.26 numbers.py(3568): class GoldenRatio(NumberSymbol, metaclass=Singleton):
0.26 numbers.py(3569):     r"""The golden ratio, `\phi`.
0.26 numbers.py(3597):     is_real = True
0.26 numbers.py(3598):     is_positive = True
0.26 numbers.py(3599):     is_negative = False
0.26 numbers.py(3600):     is_irrational = True
0.26 numbers.py(3601):     is_number = True
0.26 numbers.py(3602):     is_algebraic = True
0.26 numbers.py(3603):     is_transcendental = False
0.26 numbers.py(3605):     __slots__ = ()
0.26 numbers.py(3607):     def _latex(self, printer):
0.26 numbers.py(3610):     def __int__(self):
0.26 numbers.py(3613):     def _as_mpf_val(self, prec):
0.26 numbers.py(3618):     def _eval_expand_func(self, **hints):
0.26 numbers.py(3622):     def approximation_interval(self, number_cls):
0.26 numbers.py(3628):     def _sage_(self):
0.26 numbers.py(3632):     _eval_rewrite_as_sqrt = _eval_expand_func
0.26 numbers.py(3635): class TribonacciConstant(NumberSymbol, metaclass=Singleton):
0.26 numbers.py(3635): class TribonacciConstant(NumberSymbol, metaclass=Singleton):
0.26 numbers.py(3636):     r"""The tribonacci constant.
0.26 numbers.py(3672):     is_real = True
0.26 numbers.py(3673):     is_positive = True
0.26 numbers.py(3674):     is_negative = False
0.26 numbers.py(3675):     is_irrational = True
0.26 numbers.py(3676):     is_number = True
0.26 numbers.py(3677):     is_algebraic = True
0.26 numbers.py(3678):     is_transcendental = False
0.26 numbers.py(3680):     __slots__ = ()
0.26 numbers.py(3682):     def _latex(self, printer):
0.26 numbers.py(3685):     def __int__(self):
0.26 numbers.py(3688):     def _eval_evalf(self, prec):
0.26 numbers.py(3692):     def _eval_expand_func(self, **hints):
0.26 numbers.py(3696):     def approximation_interval(self, number_cls):
0.26 numbers.py(3702):     _eval_rewrite_as_sqrt = _eval_expand_func
0.26 numbers.py(3705): class EulerGamma(NumberSymbol, metaclass=Singleton):
0.26 numbers.py(3705): class EulerGamma(NumberSymbol, metaclass=Singleton):
0.26 numbers.py(3706):     r"""The Euler-Mascheroni constant.
0.26 numbers.py(3737):     is_real = True
0.26 numbers.py(3738):     is_positive = True
0.26 numbers.py(3739):     is_negative = False
0.26 numbers.py(3740):     is_irrational = None
0.26 numbers.py(3741):     is_number = True
0.26 numbers.py(3743):     __slots__ = ()
0.26 numbers.py(3745):     def _latex(self, printer):
0.26 numbers.py(3748):     def __int__(self):
0.26 numbers.py(3751):     def _as_mpf_val(self, prec):
0.26 numbers.py(3757):     def approximation_interval(self, number_cls):
0.26 numbers.py(3763):     def _sage_(self):
0.26 numbers.py(3768): class Catalan(NumberSymbol, metaclass=Singleton):
0.26 numbers.py(3768): class Catalan(NumberSymbol, metaclass=Singleton):
0.26 numbers.py(3769):     r"""Catalan's constant.
0.26 numbers.py(3796):     is_real = True
0.26 numbers.py(3797):     is_positive = True
0.26 numbers.py(3798):     is_negative = False
0.26 numbers.py(3799):     is_irrational = None
0.26 numbers.py(3800):     is_number = True
0.26 numbers.py(3802):     __slots__ = ()
0.26 numbers.py(3804):     def __int__(self):
0.26 numbers.py(3807):     def _as_mpf_val(self, prec):
0.26 numbers.py(3813):     def approximation_interval(self, number_cls):
0.26 numbers.py(3819):     def _eval_rewrite_as_Sum(self, k_sym=None, symbols=None):
0.26 numbers.py(3826):     def _sage_(self):
0.26 numbers.py(3831): class ImaginaryUnit(AtomicExpr, metaclass=Singleton):
0.26 numbers.py(3831): class ImaginaryUnit(AtomicExpr, metaclass=Singleton):
0.26 numbers.py(3832):     r"""The imaginary unit, `i = \sqrt{-1}`.
0.26 numbers.py(3854):     is_commutative = True
0.26 numbers.py(3855):     is_imaginary = True
0.26 numbers.py(3856):     is_finite = True
0.26 numbers.py(3857):     is_number = True
0.26 numbers.py(3858):     is_algebraic = True
0.26 numbers.py(3859):     is_transcendental = False
0.26 numbers.py(3861):     kind = NumberKind
0.26 numbers.py(3863):     __slots__ = ()
0.26 numbers.py(3865):     def _latex(self, printer):
0.26 numbers.py(3868):     @staticmethod
0.26 numbers.py(3869):     def __abs__():
0.26 numbers.py(3872):     def _eval_evalf(self, prec):
0.26 numbers.py(3875):     def _eval_conjugate(self):
0.26 numbers.py(3878):     def _eval_power(self, expt):
0.26 numbers.py(3902):     def as_base_exp(self):
0.26 numbers.py(3905):     def _sage_(self):
0.26 numbers.py(3909):     @property
0.26 numbers.py(3910):     def _mpc_(self):
0.26 numbers.py(3913): I = S.ImaginaryUnit
0.26 numbers.py(3915): @dispatch(Tuple, Number) # type:ignore
0.26 numbers.py(3916): def _eval_is_eq(self, other): # noqa: F811
0.26 numbers.py(3919): def sympify_fractions(f):
0.26 numbers.py(3922): converter[fractions.Fraction] = sympify_fractions
0.26 numbers.py(3924): if HAS_GMPY:
0.26 numbers.py(3938): def sympify_mpmath_mpq(x):
0.26 numbers.py(3942): converter[type(mpmath.rational.mpq(1, 2))] = sympify_mpmath_mpq
0.26 numbers.py(3945): def sympify_mpmath(x):
0.26 numbers.py(3948): converter[mpnumeric] = sympify_mpmath
0.26 numbers.py(3951): def sympify_complex(a):
0.26 numbers.py(3955): converter[complex] = sympify_complex
0.26 numbers.py(3957): from .power import Pow, integer_nthroot
0.27 numbers.py(3958): from .mul import Mul
0.27 numbers.py(3959): Mul.identity = One()
0.27 numbers.py(2578):         return AtomicExpr.__new__(cls)
0.27 numbers.py(3960): from .add import Add
0.27 numbers.py(3961): Add.identity = Zero()
0.27 numbers.py(2578):         return AtomicExpr.__new__(cls)
0.27 numbers.py(3963): def _register_classes():
0.27 numbers.py(3969): _register_classes()
0.27 numbers.py(3964):     numbers.Number.register(Number)
0.27 numbers.py(3965):     numbers.Real.register(Float)
0.27 numbers.py(3966):     numbers.Rational.register(Rational)
0.27 numbers.py(3967):     numbers.Rational.register(Integer)
0.27 numbers.py(3377):         return AtomicExpr.__new__(cls)
0.27 numbers.py(3377):         return AtomicExpr.__new__(cls)
0.27 numbers.py(3377):         return AtomicExpr.__new__(cls)
0.27 numbers.py(3377):         return AtomicExpr.__new__(cls)
0.28 numbers.py(3015):         return AtomicExpr.__new__(cls)
0.28 numbers.py(675):         return mlib.to_float(self._as_mpf_val(53))
0.28 numbers.py(2954):         return mlib.finf
0.28 numbers.py(675):         return mlib.to_float(self._as_mpf_val(53))
0.28 numbers.py(3117):         return mlib.fninf
0.30 numbers.py(2875):         if isinstance(other, Number) and global_parameters.evaluate:
0.30 numbers.py(2876):             if other is S.Infinity or other is S.NaN:
0.30 numbers.py(2878):             return self
0.30 numbers.py(2875):         if isinstance(other, Number) and global_parameters.evaluate:
0.30 numbers.py(2876):             if other is S.Infinity or other is S.NaN:
0.30 numbers.py(2878):             return self
0.30 numbers.py(2862):         return self._eval_evalf(prec)
0.30 numbers.py(2859):         return Float('inf')
0.30 numbers.py(1032):         if prec is not None:
0.30 numbers.py(1040):         del prec  # avoid using this deprecated kwarg
0.30 numbers.py(1042):         if dps is not None and precision is not None:
0.30 numbers.py(1046):         if isinstance(num, str):
0.30 numbers.py(1048):             num = num.replace(' ', '').lower()
0.30 numbers.py(1052):             if '_' in num:
0.30 numbers.py(1062):             if num.startswith('.') and len(num) > 1:
0.30 numbers.py(1064):             elif num.startswith('-.') and len(num) > 2:
0.30 numbers.py(1066):             elif num in ('inf', '+inf'):
0.30 numbers.py(1067):                 return S.Infinity
0.30 numbers.py(675):         return mlib.to_float(self._as_mpf_val(53))
0.30 numbers.py(2954):         return mlib.finf
0.30 numbers.py(2875):         if isinstance(other, Number) and global_parameters.evaluate:
0.30 numbers.py(2876):             if other is S.Infinity or other is S.NaN:
0.30 numbers.py(2878):             return self
0.30 numbers.py(2964):         return other is S.Infinity or other == float('inf')
0.30 numbers.py(3127):         return other is S.NegativeInfinity or other == float('-inf')
0.30 numbers.py(2964):         return other is S.Infinity or other == float('inf')
0.30 numbers.py(3127):         return other is S.NegativeInfinity or other == float('-inf')
0.30 numbers.py(3127):         return other is S.NegativeInfinity or other == float('-inf')
0.30 numbers.py(2964):         return other is S.Infinity or other == float('inf')
0.30 numbers.py(2964):         return other is S.Infinity or other == float('inf')
0.30 numbers.py(3127):         return other is S.NegativeInfinity or other == float('-inf')
0.30 numbers.py(3418):         return super().__hash__()
0.30 numbers.py(3418):         return super().__hash__()
0.30 numbers.py(3418):         return super().__hash__()
0.30 numbers.py(3418):         return super().__hash__()
0.30 numbers.py(3418):         return super().__hash__()
0.31 numbers.py(2082):         if isinstance(i, str):
0.31 numbers.py(2090):         try:
0.31 numbers.py(2091):             ival = int(i)
0.31 numbers.py(2097):         if ival == 1:
0.31 numbers.py(2098):             return S.One
0.31 numbers.py(713):         return self.class_key(), (0, ()), (), self
0.31 numbers.py(709):         return 1, 0, 'Number'
0.31 numbers.py(2283):         return hash(self.p)
0.31 numbers.py(2283):         return hash(self.p)
0.31 numbers.py(2082):         if isinstance(i, str):
0.31 numbers.py(2090):         try:
0.31 numbers.py(2091):             ival = int(i)
0.31 numbers.py(2097):         if ival == 1:
0.31 numbers.py(2099):         if ival == -1:
0.31 numbers.py(2101):         if ival == 0:
0.31 numbers.py(2103):         obj = Expr.__new__(cls)
0.31 numbers.py(2104):         obj.p = ival
0.31 numbers.py(2105):         return obj
0.31 numbers.py(713):         return self.class_key(), (0, ()), (), self
0.31 numbers.py(709):         return 1, 0, 'Number'
0.31 numbers.py(2283):         return hash(self.p)
0.31 numbers.py(2283):         return hash(self.p)
0.31 numbers.py(2237):         if isinstance(other, int):
0.31 numbers.py(2239):         elif isinstance(other, Integer):
0.31 numbers.py(2240):             return (self.p == other.p)
0.31 numbers.py(2247):         try:
0.31 numbers.py(2248):             other = _sympify(other)
0.31 numbers.py(2251):         if other.is_Integer:
0.31 numbers.py(2252):             return _sympify(self.p > other.p)
0.31 numbers.py(2283):         return hash(self.p)
0.31 numbers.py(2283):         return hash(self.p)
0.31 numbers.py(2283):         return hash(self.p)
0.31 numbers.py(2283):         return hash(self.p)
0.31 numbers.py(2283):         return hash(self.p)
0.31 numbers.py(2283):         return hash(self.p)
0.31 numbers.py(2082):         if isinstance(i, str):
0.31 numbers.py(2090):         try:
0.31 numbers.py(2091):             ival = int(i)
0.31 numbers.py(2097):         if ival == 1:
0.31 numbers.py(2098):             return S.One
0.31 numbers.py(713):         return self.class_key(), (0, ()), (), self
0.31 numbers.py(709):         return 1, 0, 'Number'
0.31 numbers.py(2283):         return hash(self.p)
0.31 numbers.py(2283):         return hash(self.p)
0.31 numbers.py(2082):         if isinstance(i, str):
0.31 numbers.py(2090):         try:
0.31 numbers.py(2091):             ival = int(i)
0.31 numbers.py(2097):         if ival == 1:
0.31 numbers.py(2099):         if ival == -1:
0.31 numbers.py(2101):         if ival == 0:
0.31 numbers.py(2103):         obj = Expr.__new__(cls)
0.31 numbers.py(2104):         obj.p = ival
0.31 numbers.py(2105):         return obj
0.31 numbers.py(713):         return self.class_key(), (0, ()), (), self
0.31 numbers.py(709):         return 1, 0, 'Number'
0.31 numbers.py(2283):         return hash(self.p)
0.31 numbers.py(2283):         return hash(self.p)
0.31 numbers.py(2237):         if isinstance(other, int):
0.31 numbers.py(2239):         elif isinstance(other, Integer):
0.31 numbers.py(2240):             return (self.p == other.p)
0.31 numbers.py(2247):         try:
0.31 numbers.py(2248):             other = _sympify(other)
0.31 numbers.py(2251):         if other.is_Integer:
0.31 numbers.py(2252):             return _sympify(self.p > other.p)
0.31 numbers.py(2283):         return hash(self.p)
0.31 numbers.py(2283):         return hash(self.p)
0.31 numbers.py(2283):         return hash(self.p)
0.31 numbers.py(2283):         return hash(self.p)
0.31 numbers.py(2283):         return hash(self.p)
0.31 numbers.py(2283):         return hash(self.p)
0.32 numbers.py(2082):         if isinstance(i, str):
0.32 numbers.py(2090):         try:
0.32 numbers.py(2091):             ival = int(i)
0.32 numbers.py(2097):         if ival == 1:
0.32 numbers.py(2099):         if ival == -1:
0.32 numbers.py(2101):         if ival == 0:
0.32 numbers.py(2102):             return S.Zero
0.32 numbers.py(2082):         if isinstance(i, str):
0.32 numbers.py(2090):         try:
0.32 numbers.py(2091):             ival = int(i)
0.32 numbers.py(2097):         if ival == 1:
0.32 numbers.py(2098):             return S.One
0.32 numbers.py(3263):         return other is S.NaN
0.32 numbers.py(2964):         return other is S.Infinity or other == float('inf')
0.32 numbers.py(3127):         return other is S.NegativeInfinity or other == float('-inf')
0.32 numbers.py(2082):         if isinstance(i, str):
0.32 numbers.py(2090):         try:
0.32 numbers.py(2091):             ival = int(i)
0.32 numbers.py(2097):         if ival == 1:
0.32 numbers.py(2099):         if ival == -1:
0.32 numbers.py(2101):         if ival == 0:
0.32 numbers.py(2102):             return S.Zero
0.32 numbers.py(3263):         return other is S.NaN
0.32 numbers.py(2964):         return other is S.Infinity or other == float('inf')
0.32 numbers.py(3127):         return other is S.NegativeInfinity or other == float('-inf')
0.32 numbers.py(2082):         if isinstance(i, str):
0.32 numbers.py(2090):         try:
0.32 numbers.py(2091):             ival = int(i)
0.32 numbers.py(2097):         if ival == 1:
0.32 numbers.py(2099):         if ival == -1:
0.32 numbers.py(2101):         if ival == 0:
0.32 numbers.py(2102):             return S.Zero
0.32 numbers.py(3263):         return other is S.NaN
0.32 numbers.py(2964):         return other is S.Infinity or other == float('inf')
0.32 numbers.py(3127):         return other is S.NegativeInfinity or other == float('-inf')
0.32 numbers.py(2082):         if isinstance(i, str):
0.32 numbers.py(2090):         try:
0.32 numbers.py(2091):             ival = int(i)
0.32 numbers.py(2097):         if ival == 1:
0.32 numbers.py(2098):             return S.One
0.32 numbers.py(3263):         return other is S.NaN
0.32 numbers.py(2964):         return other is S.Infinity or other == float('inf')
0.32 numbers.py(3127):         return other is S.NegativeInfinity or other == float('-inf')
0.32 numbers.py(2082):         if isinstance(i, str):
0.32 numbers.py(2090):         try:
0.32 numbers.py(2091):             ival = int(i)
0.32 numbers.py(2097):         if ival == 1:
0.32 numbers.py(2099):         if ival == -1:
0.32 numbers.py(2101):         if ival == 0:
0.32 numbers.py(2102):             return S.Zero
0.32 numbers.py(3263):         return other is S.NaN
0.32 numbers.py(2964):         return other is S.Infinity or other == float('inf')
0.32 numbers.py(3127):         return other is S.NegativeInfinity or other == float('-inf')
0.32 numbers.py(2082):         if isinstance(i, str):
0.32 numbers.py(2090):         try:
0.32 numbers.py(2091):             ival = int(i)
0.32 numbers.py(2097):         if ival == 1:
0.32 numbers.py(2099):         if ival == -1:
0.32 numbers.py(2101):         if ival == 0:
0.32 numbers.py(2102):             return S.Zero
0.32 numbers.py(3263):         return other is S.NaN
0.32 numbers.py(2964):         return other is S.Infinity or other == float('inf')
0.32 numbers.py(3127):         return other is S.NegativeInfinity or other == float('-inf')
0.32 numbers.py(2082):         if isinstance(i, str):
0.32 numbers.py(2090):         try:
0.32 numbers.py(2091):             ival = int(i)
0.32 numbers.py(2097):         if ival == 1:
0.32 numbers.py(2098):             return S.One
0.32 numbers.py(3263):         return other is S.NaN
0.32 numbers.py(2964):         return other is S.Infinity or other == float('inf')
0.32 numbers.py(3127):         return other is S.NegativeInfinity or other == float('-inf')
0.32 numbers.py(2082):         if isinstance(i, str):
0.32 numbers.py(2090):         try:
0.32 numbers.py(2091):             ival = int(i)
0.32 numbers.py(2097):         if ival == 1:
0.32 numbers.py(2099):         if ival == -1:
0.32 numbers.py(2100):             return S.NegativeOne
0.32 numbers.py(2578):         return AtomicExpr.__new__(cls)
0.32 numbers.py(3263):         return other is S.NaN
0.32 numbers.py(2964):         return other is S.Infinity or other == float('inf')
0.32 numbers.py(3127):         return other is S.NegativeInfinity or other == float('-inf')
0.32 numbers.py(2082):         if isinstance(i, str):
0.32 numbers.py(2090):         try:
0.32 numbers.py(2091):             ival = int(i)
0.32 numbers.py(2097):         if ival == 1:
0.32 numbers.py(2099):         if ival == -1:
0.32 numbers.py(2101):         if ival == 0:
0.32 numbers.py(2102):             return S.Zero
0.32 numbers.py(3263):         return other is S.NaN
0.32 numbers.py(2964):         return other is S.Infinity or other == float('inf')
0.32 numbers.py(3127):         return other is S.NegativeInfinity or other == float('-inf')
0.32 numbers.py(2082):         if isinstance(i, str):
0.32 numbers.py(2090):         try:
0.32 numbers.py(2091):             ival = int(i)
0.32 numbers.py(2097):         if ival == 1:
0.32 numbers.py(2099):         if ival == -1:
0.32 numbers.py(2101):         if ival == 0:
0.32 numbers.py(2102):             return S.Zero
0.32 numbers.py(3263):         return other is S.NaN
0.32 numbers.py(2964):         return other is S.Infinity or other == float('inf')
0.32 numbers.py(3127):         return other is S.NegativeInfinity or other == float('-inf')
0.32 numbers.py(2082):         if isinstance(i, str):
0.32 numbers.py(2090):         try:
0.32 numbers.py(2091):             ival = int(i)
0.32 numbers.py(2097):         if ival == 1:
0.32 numbers.py(2099):         if ival == -1:
0.32 numbers.py(2100):             return S.NegativeOne
0.32 numbers.py(3263):         return other is S.NaN
0.32 numbers.py(2964):         return other is S.Infinity or other == float('inf')
0.32 numbers.py(3127):         return other is S.NegativeInfinity or other == float('-inf')
0.32 numbers.py(2082):         if isinstance(i, str):
0.32 numbers.py(2090):         try:
0.32 numbers.py(2091):             ival = int(i)
0.32 numbers.py(2097):         if ival == 1:
0.32 numbers.py(2099):         if ival == -1:
0.32 numbers.py(2101):         if ival == 0:
0.32 numbers.py(2102):             return S.Zero
0.32 numbers.py(3263):         return other is S.NaN
0.32 numbers.py(2964):         return other is S.Infinity or other == float('inf')
0.32 numbers.py(3127):         return other is S.NegativeInfinity or other == float('-inf')
0.32 numbers.py(2082):         if isinstance(i, str):
0.32 numbers.py(2090):         try:
0.32 numbers.py(2091):             ival = int(i)
0.32 numbers.py(2097):         if ival == 1:
0.32 numbers.py(2099):         if ival == -1:
0.32 numbers.py(2101):         if ival == 0:
0.32 numbers.py(2102):             return S.Zero
0.32 numbers.py(3263):         return other is S.NaN
0.32 numbers.py(2964):         return other is S.Infinity or other == float('inf')
0.32 numbers.py(3127):         return other is S.NegativeInfinity or other == float('-inf')
0.32 numbers.py(2082):         if isinstance(i, str):
0.32 numbers.py(2090):         try:
0.32 numbers.py(2091):             ival = int(i)
0.32 numbers.py(2097):         if ival == 1:
0.32 numbers.py(2098):             return S.One
0.32 numbers.py(3263):         return other is S.NaN
0.32 numbers.py(2964):         return other is S.Infinity or other == float('inf')
0.32 numbers.py(3127):         return other is S.NegativeInfinity or other == float('-inf')
0.32 numbers.py(2082):         if isinstance(i, str):
0.32 numbers.py(2090):         try:
0.32 numbers.py(2091):             ival = int(i)
0.32 numbers.py(2097):         if ival == 1:
0.32 numbers.py(2099):         if ival == -1:
0.32 numbers.py(2101):         if ival == 0:
0.32 numbers.py(2102):             return S.Zero
0.33 numbers.py(2082):         if isinstance(i, str):
0.33 numbers.py(2090):         try:
0.33 numbers.py(2091):             ival = int(i)
0.33 numbers.py(2097):         if ival == 1:
0.33 numbers.py(2098):             return S.One
0.33 numbers.py(713):         return self.class_key(), (0, ()), (), self
0.33 numbers.py(709):         return 1, 0, 'Number'
0.33 numbers.py(2283):         return hash(self.p)
0.33 numbers.py(2283):         return hash(self.p)
0.33 numbers.py(2082):         if isinstance(i, str):
0.33 numbers.py(2090):         try:
0.33 numbers.py(2091):             ival = int(i)
0.33 numbers.py(2097):         if ival == 1:
0.33 numbers.py(2099):         if ival == -1:
0.33 numbers.py(2101):         if ival == 0:
0.33 numbers.py(2103):         obj = Expr.__new__(cls)
0.33 numbers.py(2104):         obj.p = ival
0.33 numbers.py(2105):         return obj
0.33 numbers.py(713):         return self.class_key(), (0, ()), (), self
0.33 numbers.py(709):         return 1, 0, 'Number'
0.33 numbers.py(2283):         return hash(self.p)
0.33 numbers.py(2283):         return hash(self.p)
0.33 numbers.py(2237):         if isinstance(other, int):
0.33 numbers.py(2239):         elif isinstance(other, Integer):
0.33 numbers.py(2240):             return (self.p == other.p)
0.33 numbers.py(2247):         try:
0.33 numbers.py(2248):             other = _sympify(other)
0.33 numbers.py(2251):         if other.is_Integer:
0.33 numbers.py(2252):             return _sympify(self.p > other.p)
0.33 numbers.py(2283):         return hash(self.p)
0.33 numbers.py(2283):         return hash(self.p)
0.33 numbers.py(2283):         return hash(self.p)
0.33 numbers.py(2283):         return hash(self.p)
0.33 numbers.py(2283):         return hash(self.p)
0.33 numbers.py(2283):         return hash(self.p)
0.33 numbers.py(2082):         if isinstance(i, str):
0.33 numbers.py(2090):         try:
0.33 numbers.py(2091):             ival = int(i)
0.33 numbers.py(2097):         if ival == 1:
0.33 numbers.py(2099):         if ival == -1:
0.33 numbers.py(2100):             return S.NegativeOne
0.33 numbers.py(2082):         if isinstance(i, str):
0.33 numbers.py(2090):         try:
0.33 numbers.py(2091):             ival = int(i)
0.33 numbers.py(2097):         if ival == 1:
0.33 numbers.py(2098):             return S.One
0.33 numbers.py(713):         return self.class_key(), (0, ()), (), self
0.33 numbers.py(709):         return 1, 0, 'Number'
0.33 numbers.py(2283):         return hash(self.p)
0.33 numbers.py(2283):         return hash(self.p)
0.33 numbers.py(2082):         if isinstance(i, str):
0.33 numbers.py(2090):         try:
0.33 numbers.py(2091):             ival = int(i)
0.33 numbers.py(2097):         if ival == 1:
0.33 numbers.py(2099):         if ival == -1:
0.33 numbers.py(2101):         if ival == 0:
0.33 numbers.py(2103):         obj = Expr.__new__(cls)
0.33 numbers.py(2104):         obj.p = ival
0.33 numbers.py(2105):         return obj
0.33 numbers.py(713):         return self.class_key(), (0, ()), (), self
0.33 numbers.py(709):         return 1, 0, 'Number'
0.33 numbers.py(2283):         return hash(self.p)
0.33 numbers.py(2283):         return hash(self.p)
0.33 numbers.py(2237):         if isinstance(other, int):
0.33 numbers.py(2239):         elif isinstance(other, Integer):
0.33 numbers.py(2240):             return (self.p == other.p)
0.33 numbers.py(2247):         try:
0.33 numbers.py(2248):             other = _sympify(other)
0.33 numbers.py(2251):         if other.is_Integer:
0.33 numbers.py(2252):             return _sympify(self.p > other.p)
0.33 numbers.py(2283):         return hash(self.p)
0.33 numbers.py(2283):         return hash(self.p)
0.33 numbers.py(2283):         return hash(self.p)
0.33 numbers.py(2283):         return hash(self.p)
0.33 numbers.py(2283):         return hash(self.p)
0.33 numbers.py(2283):         return hash(self.p)
0.34 numbers.py(2082):         if isinstance(i, str):
0.34 numbers.py(2090):         try:
0.34 numbers.py(2091):             ival = int(i)
0.34 numbers.py(2097):         if ival == 1:
0.34 numbers.py(2098):             return S.One
0.34 numbers.py(713):         return self.class_key(), (0, ()), (), self
0.34 numbers.py(709):         return 1, 0, 'Number'
0.34 numbers.py(2283):         return hash(self.p)
0.34 numbers.py(2283):         return hash(self.p)
0.34 numbers.py(2082):         if isinstance(i, str):
0.34 numbers.py(2090):         try:
0.34 numbers.py(2091):             ival = int(i)
0.34 numbers.py(2097):         if ival == 1:
0.34 numbers.py(2099):         if ival == -1:
0.34 numbers.py(2101):         if ival == 0:
0.34 numbers.py(2103):         obj = Expr.__new__(cls)
0.34 numbers.py(2104):         obj.p = ival
0.34 numbers.py(2105):         return obj
0.34 numbers.py(713):         return self.class_key(), (0, ()), (), self
0.34 numbers.py(709):         return 1, 0, 'Number'
0.34 numbers.py(2283):         return hash(self.p)
0.34 numbers.py(2283):         return hash(self.p)
0.34 numbers.py(2237):         if isinstance(other, int):
0.34 numbers.py(2239):         elif isinstance(other, Integer):
0.34 numbers.py(2240):             return (self.p == other.p)
0.34 numbers.py(2247):         try:
0.34 numbers.py(2248):             other = _sympify(other)
0.34 numbers.py(2251):         if other.is_Integer:
0.34 numbers.py(2252):             return _sympify(self.p > other.p)
0.34 numbers.py(2283):         return hash(self.p)
0.34 numbers.py(2283):         return hash(self.p)
0.34 numbers.py(2283):         return hash(self.p)
0.34 numbers.py(2283):         return hash(self.p)
0.34 numbers.py(2283):         return hash(self.p)
0.34 numbers.py(2283):         return hash(self.p)
0.34 numbers.py(2082):         if isinstance(i, str):
0.34 numbers.py(2090):         try:
0.34 numbers.py(2091):             ival = int(i)
0.34 numbers.py(2097):         if ival == 1:
0.34 numbers.py(2099):         if ival == -1:
0.34 numbers.py(2101):         if ival == 0:
0.34 numbers.py(2103):         obj = Expr.__new__(cls)
0.34 numbers.py(2104):         obj.p = ival
0.34 numbers.py(2105):         return obj
0.34 numbers.py(2237):         if isinstance(other, int):
0.34 numbers.py(2238):             return (self.p == other)
0.34 numbers.py(2237):         if isinstance(other, int):
0.34 numbers.py(2239):         elif isinstance(other, Integer):
0.34 numbers.py(2241):         return Rational.__eq__(self, other)
0.34 numbers.py(1863):         from sympy.core.power import integer_log
0.34 numbers.py(1864):         try:
0.34 numbers.py(1865):             other = _sympify(other)
0.34 numbers.py(1868):         if not isinstance(other, Number):
0.34 numbers.py(1872):         if not self:
0.34 numbers.py(1874):         if other.is_NumberSymbol:
0.34 numbers.py(1878):         if other.is_Rational:
0.34 numbers.py(1882):         if other.is_Float:
0.34 numbers.py(1906):         return False
0.34 numbers.py(2082):         if isinstance(i, str):
0.34 numbers.py(2090):         try:
0.34 numbers.py(2091):             ival = int(i)
0.34 numbers.py(2097):         if ival == 1:
0.34 numbers.py(2098):             return S.One
0.34 numbers.py(713):         return self.class_key(), (0, ()), (), self
0.34 numbers.py(709):         return 1, 0, 'Number'
0.34 numbers.py(2283):         return hash(self.p)
0.34 numbers.py(2283):         return hash(self.p)
0.34 numbers.py(2082):         if isinstance(i, str):
0.34 numbers.py(2090):         try:
0.34 numbers.py(2091):             ival = int(i)
0.34 numbers.py(2097):         if ival == 1:
0.34 numbers.py(2099):         if ival == -1:
0.34 numbers.py(2101):         if ival == 0:
0.34 numbers.py(2103):         obj = Expr.__new__(cls)
0.34 numbers.py(2104):         obj.p = ival
0.34 numbers.py(2105):         return obj
0.34 numbers.py(713):         return self.class_key(), (0, ()), (), self
0.34 numbers.py(709):         return 1, 0, 'Number'
0.34 numbers.py(2283):         return hash(self.p)
0.34 numbers.py(2283):         return hash(self.p)
0.34 numbers.py(2237):         if isinstance(other, int):
0.34 numbers.py(2239):         elif isinstance(other, Integer):
0.34 numbers.py(2240):             return (self.p == other.p)
0.34 numbers.py(2247):         try:
0.34 numbers.py(2248):             other = _sympify(other)
0.34 numbers.py(2251):         if other.is_Integer:
0.34 numbers.py(2252):             return _sympify(self.p > other.p)
0.34 numbers.py(2283):         return hash(self.p)
0.34 numbers.py(2283):         return hash(self.p)
0.34 numbers.py(2283):         return hash(self.p)
0.34 numbers.py(2283):         return hash(self.p)
0.34 numbers.py(2283):         return hash(self.p)
0.34 numbers.py(2283):         return hash(self.p)
0.34 numbers.py(1593):         if q is None:
0.34 numbers.py(1631):             p = Rational(p)
0.34 numbers.py(1593):         if q is None:
0.34 numbers.py(1594):             if isinstance(p, Rational):
0.34 numbers.py(1597):             if isinstance(p, SYMPY_INTS):
0.34 numbers.py(1598):                 pass
0.34 numbers.py(1628):             q = 1
0.34 numbers.py(1629):             gcd = 1
0.34 numbers.py(1634):         if isinstance(q, Rational):
0.34 numbers.py(1637):         if isinstance(p, Rational):
0.34 numbers.py(1642):         if q == 0:
0.34 numbers.py(1649):         if q < 0:
0.34 numbers.py(1652):         if not gcd:
0.34 numbers.py(1654):         if gcd > 1:
0.34 numbers.py(1657):         if q == 1:
0.34 numbers.py(1658):             return Integer(p)
0.34 numbers.py(2082):         if isinstance(i, str):
0.34 numbers.py(2090):         try:
0.34 numbers.py(2091):             ival = int(i)
0.34 numbers.py(2097):         if ival == 1:
0.34 numbers.py(2098):             return S.One
0.34 numbers.py(1632):             q = Rational(q)
0.34 numbers.py(1593):         if q is None:
0.34 numbers.py(1594):             if isinstance(p, Rational):
0.34 numbers.py(1597):             if isinstance(p, SYMPY_INTS):
0.34 numbers.py(1598):                 pass
0.34 numbers.py(1628):             q = 1
0.34 numbers.py(1629):             gcd = 1
0.34 numbers.py(1634):         if isinstance(q, Rational):
0.34 numbers.py(1637):         if isinstance(p, Rational):
0.34 numbers.py(1642):         if q == 0:
0.34 numbers.py(1649):         if q < 0:
0.34 numbers.py(1652):         if not gcd:
0.34 numbers.py(1654):         if gcd > 1:
0.34 numbers.py(1657):         if q == 1:
0.34 numbers.py(1658):             return Integer(p)
0.34 numbers.py(2082):         if isinstance(i, str):
0.34 numbers.py(2090):         try:
0.34 numbers.py(2091):             ival = int(i)
0.34 numbers.py(2097):         if ival == 1:
0.34 numbers.py(2099):         if ival == -1:
0.34 numbers.py(2101):         if ival == 0:
0.34 numbers.py(2103):         obj = Expr.__new__(cls)
0.34 numbers.py(2104):         obj.p = ival
0.34 numbers.py(2105):         return obj
0.34 numbers.py(1634):         if isinstance(q, Rational):
0.34 numbers.py(1635):             p *= q.q
0.34 numbers.py(2199):         if global_parameters.evaluate:
0.34 numbers.py(2200):             if isinstance(other, int):
0.34 numbers.py(2201):                 return Integer(self.p*other)
0.34 numbers.py(2082):         if isinstance(i, str):
0.34 numbers.py(2090):         try:
0.34 numbers.py(2091):             ival = int(i)
0.34 numbers.py(2097):         if ival == 1:
0.34 numbers.py(2098):             return S.One
0.34 numbers.py(1636):             q = q.p
0.34 numbers.py(1637):         if isinstance(p, Rational):
0.34 numbers.py(1638):             q *= p.q
0.34 numbers.py(1639):             p = p.p
0.34 numbers.py(1642):         if q == 0:
0.34 numbers.py(1649):         if q < 0:
0.34 numbers.py(1652):         if not gcd:
0.34 numbers.py(1653):             gcd = igcd(abs(p), q)
0.34 numbers.py(251):     if len(args) < 2:
0.34 numbers.py(254):     args_temp = [abs(as_int(i)) for i in args]
0.34 numbers.py(254):     args_temp = [abs(as_int(i)) for i in args]
0.34 numbers.py(254):     args_temp = [abs(as_int(i)) for i in args]
0.34 numbers.py(254):     args_temp = [abs(as_int(i)) for i in args]
0.34 numbers.py(255):     if 1 in args_temp:
0.34 numbers.py(256):         return 1
0.34 numbers.py(1654):         if gcd > 1:
0.34 numbers.py(1657):         if q == 1:
0.34 numbers.py(1659):         if p == 1 and q == 2:
0.34 numbers.py(1661):         obj = Expr.__new__(cls)
0.34 numbers.py(1662):         obj.p = p
0.34 numbers.py(1663):         obj.q = q
0.34 numbers.py(1664):         return obj
0.34 numbers.py(1593):         if q is None:
0.34 numbers.py(1631):             p = Rational(p)
0.34 numbers.py(1593):         if q is None:
0.34 numbers.py(1594):             if isinstance(p, Rational):
0.34 numbers.py(1597):             if isinstance(p, SYMPY_INTS):
0.34 numbers.py(1598):                 pass
0.34 numbers.py(1628):             q = 1
0.34 numbers.py(1629):             gcd = 1
0.34 numbers.py(1634):         if isinstance(q, Rational):
0.34 numbers.py(1637):         if isinstance(p, Rational):
0.34 numbers.py(1642):         if q == 0:
0.34 numbers.py(1649):         if q < 0:
0.34 numbers.py(1652):         if not gcd:
0.34 numbers.py(1654):         if gcd > 1:
0.34 numbers.py(1657):         if q == 1:
0.34 numbers.py(1658):             return Integer(p)
0.34 numbers.py(2082):         if isinstance(i, str):
0.34 numbers.py(2090):         try:
0.34 numbers.py(2091):             ival = int(i)
0.34 numbers.py(2097):         if ival == 1:
0.34 numbers.py(2099):         if ival == -1:
0.34 numbers.py(2100):             return S.NegativeOne
0.34 numbers.py(1632):             q = Rational(q)
0.34 numbers.py(1593):         if q is None:
0.34 numbers.py(1594):             if isinstance(p, Rational):
0.34 numbers.py(1597):             if isinstance(p, SYMPY_INTS):
0.34 numbers.py(1598):                 pass
0.34 numbers.py(1628):             q = 1
0.34 numbers.py(1629):             gcd = 1
0.34 numbers.py(1634):         if isinstance(q, Rational):
0.34 numbers.py(1637):         if isinstance(p, Rational):
0.34 numbers.py(1642):         if q == 0:
0.34 numbers.py(1649):         if q < 0:
0.34 numbers.py(1652):         if not gcd:
0.34 numbers.py(1654):         if gcd > 1:
0.34 numbers.py(1657):         if q == 1:
0.34 numbers.py(1658):             return Integer(p)
0.34 numbers.py(2082):         if isinstance(i, str):
0.34 numbers.py(2090):         try:
0.34 numbers.py(2091):             ival = int(i)
0.34 numbers.py(2097):         if ival == 1:
0.34 numbers.py(2099):         if ival == -1:
0.34 numbers.py(2101):         if ival == 0:
0.34 numbers.py(2103):         obj = Expr.__new__(cls)
0.34 numbers.py(2104):         obj.p = ival
0.34 numbers.py(2105):         return obj
0.34 numbers.py(1634):         if isinstance(q, Rational):
0.34 numbers.py(1635):             p *= q.q
0.34 numbers.py(2199):         if global_parameters.evaluate:
0.34 numbers.py(2200):             if isinstance(other, int):
0.34 numbers.py(2201):                 return Integer(self.p*other)
0.34 numbers.py(2082):         if isinstance(i, str):
0.34 numbers.py(2090):         try:
0.34 numbers.py(2091):             ival = int(i)
0.34 numbers.py(2097):         if ival == 1:
0.34 numbers.py(2099):         if ival == -1:
0.34 numbers.py(2100):             return S.NegativeOne
0.34 numbers.py(1636):             q = q.p
0.34 numbers.py(1637):         if isinstance(p, Rational):
0.34 numbers.py(1638):             q *= p.q
0.34 numbers.py(1639):             p = p.p
0.34 numbers.py(1642):         if q == 0:
0.34 numbers.py(1649):         if q < 0:
0.34 numbers.py(1652):         if not gcd:
0.34 numbers.py(1653):             gcd = igcd(abs(p), q)
0.34 numbers.py(251):     if len(args) < 2:
0.34 numbers.py(254):     args_temp = [abs(as_int(i)) for i in args]
0.34 numbers.py(254):     args_temp = [abs(as_int(i)) for i in args]
0.34 numbers.py(254):     args_temp = [abs(as_int(i)) for i in args]
0.34 numbers.py(254):     args_temp = [abs(as_int(i)) for i in args]
0.34 numbers.py(255):     if 1 in args_temp:
0.34 numbers.py(256):         return 1
0.34 numbers.py(1654):         if gcd > 1:
0.34 numbers.py(1657):         if q == 1:
0.34 numbers.py(1659):         if p == 1 and q == 2:
0.34 numbers.py(1661):         obj = Expr.__new__(cls)
0.34 numbers.py(1662):         obj.p = p
0.34 numbers.py(1663):         obj.q = q
0.34 numbers.py(1664):         return obj
0.34 numbers.py(2082):         if isinstance(i, str):
0.34 numbers.py(2090):         try:
0.34 numbers.py(2091):             ival = int(i)
0.34 numbers.py(2097):         if ival == 1:
0.34 numbers.py(2098):             return S.One
0.34 numbers.py(713):         return self.class_key(), (0, ()), (), self
0.34 numbers.py(709):         return 1, 0, 'Number'
0.34 numbers.py(2283):         return hash(self.p)
0.34 numbers.py(2283):         return hash(self.p)
0.34 numbers.py(2082):         if isinstance(i, str):
0.34 numbers.py(2090):         try:
0.34 numbers.py(2091):             ival = int(i)
0.34 numbers.py(2097):         if ival == 1:
0.34 numbers.py(2099):         if ival == -1:
0.34 numbers.py(2101):         if ival == 0:
0.34 numbers.py(2103):         obj = Expr.__new__(cls)
0.34 numbers.py(2104):         obj.p = ival
0.34 numbers.py(2105):         return obj
0.34 numbers.py(713):         return self.class_key(), (0, ()), (), self
0.34 numbers.py(709):         return 1, 0, 'Number'
0.34 numbers.py(2283):         return hash(self.p)
0.34 numbers.py(2283):         return hash(self.p)
0.34 numbers.py(2237):         if isinstance(other, int):
0.34 numbers.py(2239):         elif isinstance(other, Integer):
0.34 numbers.py(2240):             return (self.p == other.p)
0.34 numbers.py(2247):         try:
0.34 numbers.py(2248):             other = _sympify(other)
0.34 numbers.py(2251):         if other.is_Integer:
0.34 numbers.py(2252):             return _sympify(self.p > other.p)
0.34 numbers.py(2283):         return hash(self.p)
0.34 numbers.py(2283):         return hash(self.p)
0.34 numbers.py(2283):         return hash(self.p)
0.34 numbers.py(2283):         return hash(self.p)
0.34 numbers.py(2283):         return hash(self.p)
0.34 numbers.py(2283):         return hash(self.p)
0.34 numbers.py(2082):         if isinstance(i, str):
0.34 numbers.py(2090):         try:
0.34 numbers.py(2091):             ival = int(i)
0.34 numbers.py(2097):         if ival == 1:
0.34 numbers.py(2098):             return S.One
0.34 numbers.py(713):         return self.class_key(), (0, ()), (), self
0.34 numbers.py(709):         return 1, 0, 'Number'
0.34 numbers.py(2283):         return hash(self.p)
0.34 numbers.py(2283):         return hash(self.p)
0.34 numbers.py(2082):         if isinstance(i, str):
0.34 numbers.py(2090):         try:
0.34 numbers.py(2091):             ival = int(i)
0.34 numbers.py(2097):         if ival == 1:
0.34 numbers.py(2099):         if ival == -1:
0.34 numbers.py(2101):         if ival == 0:
0.34 numbers.py(2103):         obj = Expr.__new__(cls)
0.34 numbers.py(2104):         obj.p = ival
0.34 numbers.py(2105):         return obj
0.34 numbers.py(713):         return self.class_key(), (0, ()), (), self
0.34 numbers.py(709):         return 1, 0, 'Number'
0.34 numbers.py(2283):         return hash(self.p)
0.34 numbers.py(2283):         return hash(self.p)
0.34 numbers.py(2082):         if isinstance(i, str):
0.34 numbers.py(2090):         try:
0.34 numbers.py(2091):             ival = int(i)
0.34 numbers.py(2097):         if ival == 1:
0.34 numbers.py(2099):         if ival == -1:
0.34 numbers.py(2101):         if ival == 0:
0.34 numbers.py(2103):         obj = Expr.__new__(cls)
0.34 numbers.py(2104):         obj.p = ival
0.34 numbers.py(2105):         return obj
0.34 numbers.py(713):         return self.class_key(), (0, ()), (), self
0.34 numbers.py(709):         return 1, 0, 'Number'
0.34 numbers.py(2283):         return hash(self.p)
0.34 numbers.py(2283):         return hash(self.p)
0.34 numbers.py(2237):         if isinstance(other, int):
0.34 numbers.py(2239):         elif isinstance(other, Integer):
0.34 numbers.py(2240):             return (self.p == other.p)
0.34 numbers.py(2247):         try:
0.34 numbers.py(2248):             other = _sympify(other)
0.34 numbers.py(2251):         if other.is_Integer:
0.34 numbers.py(2252):             return _sympify(self.p > other.p)
0.34 numbers.py(2237):         if isinstance(other, int):
0.34 numbers.py(2239):         elif isinstance(other, Integer):
0.34 numbers.py(2240):             return (self.p == other.p)
0.34 numbers.py(2256):         try:
0.34 numbers.py(2257):             other = _sympify(other)
0.34 numbers.py(2260):         if other.is_Integer:
0.34 numbers.py(2261):             return _sympify(self.p < other.p)
0.34 numbers.py(2283):         return hash(self.p)
0.34 numbers.py(2283):         return hash(self.p)
0.34 numbers.py(2283):         return hash(self.p)
0.34 numbers.py(2283):         return hash(self.p)
0.34 numbers.py(2283):         return hash(self.p)
0.34 numbers.py(2283):         return hash(self.p)
0.34 numbers.py(2283):         return hash(self.p)
0.34 numbers.py(2283):         return hash(self.p)
0.34 numbers.py(2283):         return hash(self.p)
0.34 numbers.py(2082):         if isinstance(i, str):
0.34 numbers.py(2090):         try:
0.34 numbers.py(2091):             ival = int(i)
0.34 numbers.py(2097):         if ival == 1:
0.34 numbers.py(2098):             return S.One
0.34 numbers.py(713):         return self.class_key(), (0, ()), (), self
0.34 numbers.py(709):         return 1, 0, 'Number'
0.34 numbers.py(2283):         return hash(self.p)
0.34 numbers.py(2283):         return hash(self.p)
0.34 numbers.py(2082):         if isinstance(i, str):
0.34 numbers.py(2090):         try:
0.34 numbers.py(2091):             ival = int(i)
0.34 numbers.py(2097):         if ival == 1:
0.34 numbers.py(2099):         if ival == -1:
0.34 numbers.py(2101):         if ival == 0:
0.34 numbers.py(2103):         obj = Expr.__new__(cls)
0.34 numbers.py(2104):         obj.p = ival
0.34 numbers.py(2105):         return obj
0.34 numbers.py(713):         return self.class_key(), (0, ()), (), self
0.34 numbers.py(709):         return 1, 0, 'Number'
0.34 numbers.py(2283):         return hash(self.p)
0.34 numbers.py(2283):         return hash(self.p)
0.34 numbers.py(2237):         if isinstance(other, int):
0.34 numbers.py(2239):         elif isinstance(other, Integer):
0.34 numbers.py(2240):             return (self.p == other.p)
0.34 numbers.py(2247):         try:
0.34 numbers.py(2248):             other = _sympify(other)
0.34 numbers.py(2251):         if other.is_Integer:
0.34 numbers.py(2252):             return _sympify(self.p > other.p)
0.34 numbers.py(2283):         return hash(self.p)
0.34 numbers.py(2283):         return hash(self.p)
0.34 numbers.py(2283):         return hash(self.p)
0.34 numbers.py(2283):         return hash(self.p)
0.34 numbers.py(2283):         return hash(self.p)
0.34 numbers.py(2283):         return hash(self.p)
0.35 numbers.py(2082):         if isinstance(i, str):
0.35 numbers.py(2090):         try:
0.35 numbers.py(2091):             ival = int(i)
0.35 numbers.py(2097):         if ival == 1:
0.35 numbers.py(2098):             return S.One
0.35 numbers.py(713):         return self.class_key(), (0, ()), (), self
0.35 numbers.py(709):         return 1, 0, 'Number'
0.35 numbers.py(2283):         return hash(self.p)
0.35 numbers.py(2283):         return hash(self.p)
0.35 numbers.py(2082):         if isinstance(i, str):
0.35 numbers.py(2090):         try:
0.35 numbers.py(2091):             ival = int(i)
0.35 numbers.py(2097):         if ival == 1:
0.35 numbers.py(2099):         if ival == -1:
0.35 numbers.py(2101):         if ival == 0:
0.35 numbers.py(2103):         obj = Expr.__new__(cls)
0.35 numbers.py(2104):         obj.p = ival
0.35 numbers.py(2105):         return obj
0.35 numbers.py(713):         return self.class_key(), (0, ()), (), self
0.35 numbers.py(709):         return 1, 0, 'Number'
0.35 numbers.py(2283):         return hash(self.p)
0.35 numbers.py(2283):         return hash(self.p)
0.35 numbers.py(2237):         if isinstance(other, int):
0.35 numbers.py(2239):         elif isinstance(other, Integer):
0.35 numbers.py(2240):             return (self.p == other.p)
0.35 numbers.py(2247):         try:
0.35 numbers.py(2248):             other = _sympify(other)
0.35 numbers.py(2251):         if other.is_Integer:
0.35 numbers.py(2252):             return _sympify(self.p > other.p)
0.35 numbers.py(2283):         return hash(self.p)
0.35 numbers.py(2283):         return hash(self.p)
0.35 numbers.py(2283):         return hash(self.p)
0.35 numbers.py(2283):         return hash(self.p)
0.35 numbers.py(2283):         return hash(self.p)
0.35 numbers.py(2283):         return hash(self.p)
0.35 numbers.py(2683):         return S.NegativeOne
0.36 numbers.py(2082):         if isinstance(i, str):
0.36 numbers.py(2090):         try:
0.36 numbers.py(2091):             ival = int(i)
0.36 numbers.py(2097):         if ival == 1:
0.36 numbers.py(2098):             return S.One
0.36 numbers.py(713):         return self.class_key(), (0, ()), (), self
0.36 numbers.py(709):         return 1, 0, 'Number'
0.36 numbers.py(2283):         return hash(self.p)
0.36 numbers.py(2283):         return hash(self.p)
0.36 numbers.py(2082):         if isinstance(i, str):
0.36 numbers.py(2090):         try:
0.36 numbers.py(2091):             ival = int(i)
0.36 numbers.py(2097):         if ival == 1:
0.36 numbers.py(2099):         if ival == -1:
0.36 numbers.py(2101):         if ival == 0:
0.36 numbers.py(2103):         obj = Expr.__new__(cls)
0.36 numbers.py(2104):         obj.p = ival
0.36 numbers.py(2105):         return obj
0.36 numbers.py(713):         return self.class_key(), (0, ()), (), self
0.36 numbers.py(709):         return 1, 0, 'Number'
0.36 numbers.py(2283):         return hash(self.p)
0.36 numbers.py(2283):         return hash(self.p)
0.36 numbers.py(2237):         if isinstance(other, int):
0.36 numbers.py(2239):         elif isinstance(other, Integer):
0.36 numbers.py(2240):             return (self.p == other.p)
0.36 numbers.py(2247):         try:
0.36 numbers.py(2248):             other = _sympify(other)
0.36 numbers.py(2251):         if other.is_Integer:
0.36 numbers.py(2252):             return _sympify(self.p > other.p)
0.36 numbers.py(2283):         return hash(self.p)
0.36 numbers.py(2283):         return hash(self.p)
0.36 numbers.py(2283):         return hash(self.p)
0.36 numbers.py(2283):         return hash(self.p)
0.36 numbers.py(2283):         return hash(self.p)
0.36 numbers.py(2283):         return hash(self.p)
0.36 numbers.py(2082):         if isinstance(i, str):
0.36 numbers.py(2090):         try:
0.36 numbers.py(2091):             ival = int(i)
0.36 numbers.py(2097):         if ival == 1:
0.36 numbers.py(2098):             return S.One
0.36 numbers.py(713):         return self.class_key(), (0, ()), (), self
0.36 numbers.py(709):         return 1, 0, 'Number'
0.36 numbers.py(2283):         return hash(self.p)
0.36 numbers.py(2283):         return hash(self.p)
0.36 numbers.py(2082):         if isinstance(i, str):
0.36 numbers.py(2090):         try:
0.36 numbers.py(2091):             ival = int(i)
0.36 numbers.py(2097):         if ival == 1:
0.36 numbers.py(2099):         if ival == -1:
0.36 numbers.py(2101):         if ival == 0:
0.36 numbers.py(2103):         obj = Expr.__new__(cls)
0.36 numbers.py(2104):         obj.p = ival
0.36 numbers.py(2105):         return obj
0.36 numbers.py(713):         return self.class_key(), (0, ()), (), self
0.36 numbers.py(709):         return 1, 0, 'Number'
0.36 numbers.py(2283):         return hash(self.p)
0.36 numbers.py(2283):         return hash(self.p)
0.36 numbers.py(2237):         if isinstance(other, int):
0.36 numbers.py(2239):         elif isinstance(other, Integer):
0.36 numbers.py(2240):             return (self.p == other.p)
0.36 numbers.py(2247):         try:
0.36 numbers.py(2248):             other = _sympify(other)
0.36 numbers.py(2251):         if other.is_Integer:
0.36 numbers.py(2252):             return _sympify(self.p > other.p)
0.36 numbers.py(2283):         return hash(self.p)
0.36 numbers.py(2283):         return hash(self.p)
0.36 numbers.py(2283):         return hash(self.p)
0.36 numbers.py(2283):         return hash(self.p)
0.36 numbers.py(2283):         return hash(self.p)
0.36 numbers.py(2283):         return hash(self.p)
0.36 numbers.py(2082):         if isinstance(i, str):
0.36 numbers.py(2090):         try:
0.36 numbers.py(2091):             ival = int(i)
0.36 numbers.py(2097):         if ival == 1:
0.36 numbers.py(2099):         if ival == -1:
0.36 numbers.py(2101):         if ival == 0:
0.36 numbers.py(2103):         obj = Expr.__new__(cls)
0.36 numbers.py(2104):         obj.p = ival
0.36 numbers.py(2105):         return obj
0.36 numbers.py(713):         return self.class_key(), (0, ()), (), self
0.36 numbers.py(709):         return 1, 0, 'Number'
0.36 numbers.py(2283):         return hash(self.p)
0.36 numbers.py(2283):         return hash(self.p)
0.36 numbers.py(2082):         if isinstance(i, str):
0.36 numbers.py(2090):         try:
0.36 numbers.py(2091):             ival = int(i)
0.36 numbers.py(2097):         if ival == 1:
0.36 numbers.py(2099):         if ival == -1:
0.36 numbers.py(2101):         if ival == 0:
0.36 numbers.py(2103):         obj = Expr.__new__(cls)
0.36 numbers.py(2104):         obj.p = ival
0.36 numbers.py(2105):         return obj
0.36 numbers.py(713):         return self.class_key(), (0, ()), (), self
0.36 numbers.py(709):         return 1, 0, 'Number'
0.36 numbers.py(2283):         return hash(self.p)
0.36 numbers.py(2283):         return hash(self.p)
0.36 numbers.py(2237):         if isinstance(other, int):
0.36 numbers.py(2239):         elif isinstance(other, Integer):
0.36 numbers.py(2240):             return (self.p == other.p)
0.36 numbers.py(2256):         try:
0.36 numbers.py(2257):             other = _sympify(other)
0.36 numbers.py(2260):         if other.is_Integer:
0.36 numbers.py(2261):             return _sympify(self.p < other.p)
0.36 numbers.py(2283):         return hash(self.p)
0.36 numbers.py(2283):         return hash(self.p)
0.36 numbers.py(2283):         return hash(self.p)
0.36 numbers.py(2283):         return hash(self.p)
0.36 numbers.py(2283):         return hash(self.p)
0.36 numbers.py(2283):         return hash(self.p)
0.36 numbers.py(2082):         if isinstance(i, str):
0.36 numbers.py(2090):         try:
0.36 numbers.py(2091):             ival = int(i)
0.36 numbers.py(2097):         if ival == 1:
0.36 numbers.py(2098):             return S.One
0.36 numbers.py(713):         return self.class_key(), (0, ()), (), self
0.36 numbers.py(709):         return 1, 0, 'Number'
0.36 numbers.py(2283):         return hash(self.p)
0.36 numbers.py(2283):         return hash(self.p)
0.36 numbers.py(2082):         if isinstance(i, str):
0.36 numbers.py(2090):         try:
0.36 numbers.py(2091):             ival = int(i)
0.36 numbers.py(2097):         if ival == 1:
0.36 numbers.py(2099):         if ival == -1:
0.36 numbers.py(2101):         if ival == 0:
0.36 numbers.py(2103):         obj = Expr.__new__(cls)
0.36 numbers.py(2104):         obj.p = ival
0.36 numbers.py(2105):         return obj
0.36 numbers.py(713):         return self.class_key(), (0, ()), (), self
0.36 numbers.py(709):         return 1, 0, 'Number'
0.36 numbers.py(2283):         return hash(self.p)
0.36 numbers.py(2283):         return hash(self.p)
0.36 numbers.py(2237):         if isinstance(other, int):
0.36 numbers.py(2239):         elif isinstance(other, Integer):
0.36 numbers.py(2240):             return (self.p == other.p)
0.36 numbers.py(2247):         try:
0.36 numbers.py(2248):             other = _sympify(other)
0.36 numbers.py(2251):         if other.is_Integer:
0.36 numbers.py(2252):             return _sympify(self.p > other.p)
0.36 numbers.py(2283):         return hash(self.p)
0.36 numbers.py(2283):         return hash(self.p)
0.36 numbers.py(2283):         return hash(self.p)
0.36 numbers.py(2283):         return hash(self.p)
0.36 numbers.py(2283):         return hash(self.p)
0.36 numbers.py(2283):         return hash(self.p)
0.36 numbers.py(2082):         if isinstance(i, str):
0.36 numbers.py(2090):         try:
0.36 numbers.py(2091):             ival = int(i)
0.36 numbers.py(2097):         if ival == 1:
0.36 numbers.py(2098):             return S.One
0.36 numbers.py(713):         return self.class_key(), (0, ()), (), self
0.36 numbers.py(709):         return 1, 0, 'Number'
0.36 numbers.py(2283):         return hash(self.p)
0.36 numbers.py(2283):         return hash(self.p)
0.36 numbers.py(2082):         if isinstance(i, str):
0.36 numbers.py(2090):         try:
0.36 numbers.py(2091):             ival = int(i)
0.36 numbers.py(2097):         if ival == 1:
0.36 numbers.py(2099):         if ival == -1:
0.36 numbers.py(2101):         if ival == 0:
0.36 numbers.py(2103):         obj = Expr.__new__(cls)
0.36 numbers.py(2104):         obj.p = ival
0.36 numbers.py(2105):         return obj
0.36 numbers.py(713):         return self.class_key(), (0, ()), (), self
0.36 numbers.py(709):         return 1, 0, 'Number'
0.36 numbers.py(2283):         return hash(self.p)
0.36 numbers.py(2283):         return hash(self.p)
0.36 numbers.py(2237):         if isinstance(other, int):
0.36 numbers.py(2239):         elif isinstance(other, Integer):
0.36 numbers.py(2240):             return (self.p == other.p)
0.36 numbers.py(2247):         try:
0.36 numbers.py(2248):             other = _sympify(other)
0.36 numbers.py(2251):         if other.is_Integer:
0.36 numbers.py(2252):             return _sympify(self.p > other.p)
0.36 numbers.py(2283):         return hash(self.p)
0.36 numbers.py(2283):         return hash(self.p)
0.36 numbers.py(2283):         return hash(self.p)
0.36 numbers.py(2283):         return hash(self.p)
0.36 numbers.py(2283):         return hash(self.p)
0.36 numbers.py(2283):         return hash(self.p)
0.36 numbers.py(2683):         return S.NegativeOne
0.36 numbers.py(2683):         return S.NegativeOne
0.36 numbers.py(2683):         return S.NegativeOne
0.37 numbers.py(2082):         if isinstance(i, str):
0.37 numbers.py(2090):         try:
0.37 numbers.py(2091):             ival = int(i)
0.37 numbers.py(2097):         if ival == 1:
0.37 numbers.py(2098):             return S.One
0.37 numbers.py(713):         return self.class_key(), (0, ()), (), self
0.37 numbers.py(709):         return 1, 0, 'Number'
0.37 numbers.py(2283):         return hash(self.p)
0.37 numbers.py(2283):         return hash(self.p)
0.37 numbers.py(2082):         if isinstance(i, str):
0.37 numbers.py(2090):         try:
0.37 numbers.py(2091):             ival = int(i)
0.37 numbers.py(2097):         if ival == 1:
0.37 numbers.py(2099):         if ival == -1:
0.37 numbers.py(2101):         if ival == 0:
0.37 numbers.py(2103):         obj = Expr.__new__(cls)
0.37 numbers.py(2104):         obj.p = ival
0.37 numbers.py(2105):         return obj
0.37 numbers.py(713):         return self.class_key(), (0, ()), (), self
0.37 numbers.py(709):         return 1, 0, 'Number'
0.37 numbers.py(2283):         return hash(self.p)
0.37 numbers.py(2283):         return hash(self.p)
0.37 numbers.py(2237):         if isinstance(other, int):
0.37 numbers.py(2239):         elif isinstance(other, Integer):
0.37 numbers.py(2240):             return (self.p == other.p)
0.37 numbers.py(2247):         try:
0.37 numbers.py(2248):             other = _sympify(other)
0.37 numbers.py(2251):         if other.is_Integer:
0.37 numbers.py(2252):             return _sympify(self.p > other.p)
0.37 numbers.py(2283):         return hash(self.p)
0.37 numbers.py(2283):         return hash(self.p)
0.37 numbers.py(2283):         return hash(self.p)
0.37 numbers.py(2283):         return hash(self.p)
0.37 numbers.py(2283):         return hash(self.p)
0.37 numbers.py(2283):         return hash(self.p)
0.37 numbers.py(2082):         if isinstance(i, str):
0.37 numbers.py(2090):         try:
0.37 numbers.py(2091):             ival = int(i)
0.37 numbers.py(2097):         if ival == 1:
0.37 numbers.py(2099):         if ival == -1:
0.37 numbers.py(2101):         if ival == 0:
0.37 numbers.py(2103):         obj = Expr.__new__(cls)
0.37 numbers.py(2104):         obj.p = ival
0.37 numbers.py(2105):         return obj
0.37 numbers.py(713):         return self.class_key(), (0, ()), (), self
0.37 numbers.py(709):         return 1, 0, 'Number'
0.37 numbers.py(2283):         return hash(self.p)
0.37 numbers.py(2283):         return hash(self.p)
0.37 numbers.py(2082):         if isinstance(i, str):
0.37 numbers.py(2090):         try:
0.37 numbers.py(2091):             ival = int(i)
0.37 numbers.py(2097):         if ival == 1:
0.37 numbers.py(2099):         if ival == -1:
0.37 numbers.py(2101):         if ival == 0:
0.37 numbers.py(2103):         obj = Expr.__new__(cls)
0.37 numbers.py(2104):         obj.p = ival
0.37 numbers.py(2105):         return obj
0.37 numbers.py(713):         return self.class_key(), (0, ()), (), self
0.37 numbers.py(709):         return 1, 0, 'Number'
0.37 numbers.py(2283):         return hash(self.p)
0.37 numbers.py(2283):         return hash(self.p)
0.37 numbers.py(2237):         if isinstance(other, int):
0.37 numbers.py(2239):         elif isinstance(other, Integer):
0.37 numbers.py(2240):             return (self.p == other.p)
0.37 numbers.py(2256):         try:
0.37 numbers.py(2257):             other = _sympify(other)
0.37 numbers.py(2260):         if other.is_Integer:
0.37 numbers.py(2261):             return _sympify(self.p < other.p)
0.37 numbers.py(2283):         return hash(self.p)
0.37 numbers.py(2283):         return hash(self.p)
0.37 numbers.py(2283):         return hash(self.p)
0.37 numbers.py(2283):         return hash(self.p)
0.37 numbers.py(2283):         return hash(self.p)
0.37 numbers.py(2283):         return hash(self.p)
============================= test process starts ==============================
executable:         /opt/miniconda3/envs/testbed/bin/python3  (3.9.23-final-0) [CPython]
architecture:       64-bit
cache:              no
ground types:       python 
numpy:              None
random seed:        21566529
hash randomization: on (PYTHONHASHSEED=731451713)

/testbed/sympy/utilities/pytest.py:3: SymPyDeprecationWarning: 

Import sympy.utilities.pytest has been deprecated since SymPy 1.6. Use
Import from sympy.testing.pytest instead. See
https://github.com/sympy/sympy/issues/18095 for more info.

  SymPyDeprecationWarning(
sympy/polys/tests/test_coverup_sympy__sympy-20801.py[1] 
test_S_zero_float_equals_S_false_inconsistency 0.51 numbers.py(1032):         if prec is not None:
0.51 numbers.py(1040):         del prec  # avoid using this deprecated kwarg
0.51 numbers.py(1042):         if dps is not None and precision is not None:
0.51 numbers.py(1046):         if isinstance(num, str):
0.51 numbers.py(1070):         elif isinstance(num, float) and num == 0:
0.51 numbers.py(1071):             num = '0'
0.51 numbers.py(1094):         if dps is None and precision is None:
0.51 numbers.py(1095):             dps = 15
0.51 numbers.py(1096):             if isinstance(num, Float):
0.51 numbers.py(1098):             if isinstance(num, str) and _literal_float(num):
0.51 numbers.py(225):     return bool(_floatpat.match(f))
0.51 numbers.py(1099):                 try:
0.51 numbers.py(1100):                     Num = decimal.Decimal(num)
0.51 numbers.py(1104):                     isint = '.' not in num
0.51 numbers.py(1105):                     num, dps = _decimal_to_Rational_prec(Num)
0.51 numbers.py(209):     if not dec.is_finite():
0.51 numbers.py(211):     s, d, e = dec.as_tuple()
0.51 numbers.py(212):     prec = len(d)
0.51 numbers.py(213):     if e >= 0:  # it's an integer
0.51 numbers.py(214):         rv = Integer(int(dec))
0.51 numbers.py(2082):         if isinstance(i, str):
0.51 numbers.py(2090):         try:
0.51 numbers.py(2091):             ival = int(i)
0.51 numbers.py(2097):         if ival == 1:
0.51 numbers.py(2099):         if ival == -1:
0.51 numbers.py(2101):         if ival == 0:
0.51 numbers.py(2102):             return S.Zero
0.51 numbers.py(219):     return rv, prec
0.51 numbers.py(1106):                     if num.is_Integer and isint:
0.51 numbers.py(1107):                         dps = max(dps, len(str(num).lstrip('-')))
0.51 numbers.py(1108):                     dps = max(15, dps)
0.51 numbers.py(1109):                     precision = mlib.libmpf.dps_to_prec(dps)
0.51 numbers.py(1135):         if precision is None or precision == '':
0.51 numbers.py(1138):         precision = int(precision)
0.51 numbers.py(1140):         if isinstance(num, float):
0.51 numbers.py(1142):         elif isinstance(num, str):
0.51 numbers.py(1144):         elif isinstance(num, decimal.Decimal):
0.51 numbers.py(1155):         elif isinstance(num, tuple) and len(num) in (3, 4):
0.51 numbers.py(1184):             try:
0.51 numbers.py(1185):                 _mpf_ = num._as_mpf_val(precision)
0.51 numbers.py(2075):         return mlib.from_int(self.p, prec, rnd)
0.51 numbers.py(1189):         return cls._new(_mpf_, precision, zero=False)
0.51 numbers.py(1194):         if zero and _mpf_ == fzero:
0.51 numbers.py(1196):         elif _mpf_ == _mpf_nan:
0.51 numbers.py(1198):         elif _mpf_ == _mpf_inf:
0.51 numbers.py(1200):         elif _mpf_ == _mpf_ninf:
0.51 numbers.py(1203):         obj = Expr.__new__(cls)
0.51 numbers.py(1204):         obj._mpf_ = mpf_norm(_mpf_, _prec)
0.51 numbers.py(163):     sign, man, expt, bc = mpf
0.51 numbers.py(164):     if not man:
0.51 numbers.py(168):         if not bc:
0.51 numbers.py(169):             return fzero
0.51 numbers.py(1205):         obj._prec = _prec
0.51 numbers.py(1206):         return obj
0.51 numbers.py(1384):         from sympy.logic.boolalg import Boolean
0.51 numbers.py(1385):         try:
0.51 numbers.py(1386):             other = _sympify(other)
0.51 numbers.py(1389):         if isinstance(other, Boolean):
0.51 numbers.py(1390):             return False
0.51 numbers.py(1032):         if prec is not None:
0.51 numbers.py(1040):         del prec  # avoid using this deprecated kwarg
0.51 numbers.py(1042):         if dps is not None and precision is not None:
0.51 numbers.py(1046):         if isinstance(num, str):
0.51 numbers.py(1070):         elif isinstance(num, float) and num == 0:
0.51 numbers.py(1071):             num = '0'
0.51 numbers.py(1094):         if dps is None and precision is None:
0.51 numbers.py(1095):             dps = 15
0.51 numbers.py(1096):             if isinstance(num, Float):
0.51 numbers.py(1098):             if isinstance(num, str) and _literal_float(num):
0.51 numbers.py(225):     return bool(_floatpat.match(f))
0.51 numbers.py(1099):                 try:
0.51 numbers.py(1100):                     Num = decimal.Decimal(num)
0.51 numbers.py(1104):                     isint = '.' not in num
0.51 numbers.py(1105):                     num, dps = _decimal_to_Rational_prec(Num)
0.51 numbers.py(209):     if not dec.is_finite():
0.51 numbers.py(211):     s, d, e = dec.as_tuple()
0.51 numbers.py(212):     prec = len(d)
0.51 numbers.py(213):     if e >= 0:  # it's an integer
0.51 numbers.py(214):         rv = Integer(int(dec))
0.51 numbers.py(2082):         if isinstance(i, str):
0.51 numbers.py(2090):         try:
0.51 numbers.py(2091):             ival = int(i)
0.51 numbers.py(2097):         if ival == 1:
0.51 numbers.py(2099):         if ival == -1:
0.51 numbers.py(2101):         if ival == 0:
0.51 numbers.py(2102):             return S.Zero
0.51 numbers.py(219):     return rv, prec
0.51 numbers.py(1106):                     if num.is_Integer and isint:
0.51 numbers.py(1107):                         dps = max(dps, len(str(num).lstrip('-')))
0.51 numbers.py(1108):                     dps = max(15, dps)
0.51 numbers.py(1109):                     precision = mlib.libmpf.dps_to_prec(dps)
0.51 numbers.py(1135):         if precision is None or precision == '':
0.51 numbers.py(1138):         precision = int(precision)
0.51 numbers.py(1140):         if isinstance(num, float):
0.51 numbers.py(1142):         elif isinstance(num, str):
0.51 numbers.py(1144):         elif isinstance(num, decimal.Decimal):
0.51 numbers.py(1155):         elif isinstance(num, tuple) and len(num) in (3, 4):
0.51 numbers.py(1184):             try:
0.51 numbers.py(1185):                 _mpf_ = num._as_mpf_val(precision)
0.51 numbers.py(2075):         return mlib.from_int(self.p, prec, rnd)
0.51 numbers.py(1189):         return cls._new(_mpf_, precision, zero=False)
0.51 numbers.py(1194):         if zero and _mpf_ == fzero:
0.51 numbers.py(1196):         elif _mpf_ == _mpf_nan:
0.51 numbers.py(1198):         elif _mpf_ == _mpf_inf:
0.51 numbers.py(1200):         elif _mpf_ == _mpf_ninf:
0.51 numbers.py(1203):         obj = Expr.__new__(cls)
0.51 numbers.py(1204):         obj._mpf_ = mpf_norm(_mpf_, _prec)
0.51 numbers.py(163):     sign, man, expt, bc = mpf
0.51 numbers.py(164):     if not man:
0.51 numbers.py(168):         if not bc:
0.51 numbers.py(169):             return fzero
0.51 numbers.py(1205):         obj._prec = _prec
0.51 numbers.py(1206):         return obj
ok                           [OK]


================== tests finished: 1 passed, in 0.01 seconds ===================
numbers.py(2098):             return S.One
0.71 numbers.py(713):         return self.class_key(), (0, ()), (), self
0.71 numbers.py(709):         return 1, 0, 'Number'
0.71 numbers.py(2283):         return hash(self.p)
0.71 numbers.py(2283):         return hash(self.p)
0.71 numbers.py(2082):         if isinstance(i, str):
0.71 numbers.py(2090):         try:
0.71 numbers.py(2091):             ival = int(i)
0.71 numbers.py(2097):         if ival == 1:
0.71 numbers.py(2099):         if ival == -1:
0.71 numbers.py(2101):         if ival == 0:
0.71 numbers.py(2103):         obj = Expr.__new__(cls)
0.71 numbers.py(2104):         obj.p = ival
0.71 numbers.py(2105):         return obj
0.71 numbers.py(713):         return self.class_key(), (0, ()), (), self
0.71 numbers.py(709):         return 1, 0, 'Number'
0.71 numbers.py(2283):         return hash(self.p)
0.71 numbers.py(2283):         return hash(self.p)
0.71 numbers.py(2237):         if isinstance(other, int):
0.71 numbers.py(2239):         elif isinstance(other, Integer):
0.71 numbers.py(2240):             return (self.p == other.p)
0.71 numbers.py(2247):         try:
0.71 numbers.py(2248):             other = _sympify(other)
0.71 numbers.py(2251):         if other.is_Integer:
0.71 numbers.py(2252):             return _sympify(self.p > other.p)
0.71 numbers.py(2283):         return hash(self.p)
0.71 numbers.py(2283):         return hash(self.p)
0.71 numbers.py(2283):         return hash(self.p)
0.71 numbers.py(2283):         return hash(self.p)
0.71 numbers.py(2283):         return hash(self.p)
0.71 numbers.py(2283):         return hash(self.p)
0.71 numbers.py(2082):         if isinstance(i, str):
0.71 numbers.py(2090):         try:
0.71 numbers.py(2091):             ival = int(i)
0.71 numbers.py(2097):         if ival == 1:
0.71 numbers.py(2098):             return S.One
0.71 numbers.py(713):         return self.class_key(), (0, ()), (), self
0.71 numbers.py(709):         return 1, 0, 'Number'
0.71 numbers.py(2283):         return hash(self.p)
0.71 numbers.py(2283):         return hash(self.p)
0.71 numbers.py(2082):         if isinstance(i, str):
0.71 numbers.py(2090):         try:
0.71 numbers.py(2091):             ival = int(i)
0.71 numbers.py(2097):         if ival == 1:
0.71 numbers.py(2099):         if ival == -1:
0.71 numbers.py(2101):         if ival == 0:
0.71 numbers.py(2103):         obj = Expr.__new__(cls)
0.71 numbers.py(2104):         obj.p = ival
0.71 numbers.py(2105):         return obj
0.71 numbers.py(713):         return self.class_key(), (0, ()), (), self
0.71 numbers.py(709):         return 1, 0, 'Number'
0.71 numbers.py(2283):         return hash(self.p)
0.71 numbers.py(2283):         return hash(self.p)
0.71 numbers.py(2237):         if isinstance(other, int):
0.71 numbers.py(2239):         elif isinstance(other, Integer):
0.71 numbers.py(2240):             return (self.p == other.p)
0.71 numbers.py(2247):         try:
0.71 numbers.py(2248):             other = _sympify(other)
0.71 numbers.py(2251):         if other.is_Integer:
0.71 numbers.py(2252):             return _sympify(self.p > other.p)
0.71 numbers.py(2283):         return hash(self.p)
0.71 numbers.py(2283):         return hash(self.p)
0.71 numbers.py(2283):         return hash(self.p)
0.71 numbers.py(2283):         return hash(self.p)
0.71 numbers.py(2283):         return hash(self.p)
0.71 numbers.py(2283):         return hash(self.p)
0.72 numbers.py(2683):         return S.NegativeOne
0.72 numbers.py(2683):         return S.NegativeOne
0.72 numbers.py(2683):         return S.NegativeOne
0.73 numbers.py(2082):         if isinstance(i, str):
0.73 numbers.py(2090):         try:
0.73 numbers.py(2091):             ival = int(i)
0.73 numbers.py(2097):         if ival == 1:
0.73 numbers.py(2098):             return S.One
0.73 numbers.py(713):         return self.class_key(), (0, ()), (), self
0.73 numbers.py(709):         return 1, 0, 'Number'
0.73 numbers.py(2283):         return hash(self.p)
0.73 numbers.py(2283):         return hash(self.p)
0.73 numbers.py(2082):         if isinstance(i, str):
0.73 numbers.py(2090):         try:
0.73 numbers.py(2091):             ival = int(i)
0.73 numbers.py(2097):         if ival == 1:
0.73 numbers.py(2099):         if ival == -1:
0.73 numbers.py(2101):         if ival == 0:
0.73 numbers.py(2103):         obj = Expr.__new__(cls)
0.73 numbers.py(2104):         obj.p = ival
0.73 numbers.py(2105):         return obj
0.73 numbers.py(713):         return self.class_key(), (0, ()), (), self
0.73 numbers.py(709):         return 1, 0, 'Number'
0.73 numbers.py(2283):         return hash(self.p)
0.73 numbers.py(2283):         return hash(self.p)
0.73 numbers.py(2237):         if isinstance(other, int):
0.73 numbers.py(2239):         elif isinstance(other, Integer):
0.73 numbers.py(2240):             return (self.p == other.p)
0.73 numbers.py(2247):         try:
0.73 numbers.py(2248):             other = _sympify(other)
0.73 numbers.py(2251):         if other.is_Integer:
0.73 numbers.py(2252):             return _sympify(self.p > other.p)
0.73 numbers.py(2283):         return hash(self.p)
0.73 numbers.py(2283):         return hash(self.p)
0.73 numbers.py(2283):         return hash(self.p)
0.73 numbers.py(2283):         return hash(self.p)
0.73 numbers.py(2283):         return hash(self.p)
0.73 numbers.py(2283):         return hash(self.p)
0.73 numbers.py(2082):         if isinstance(i, str):
0.73 numbers.py(2090):         try:
0.73 numbers.py(2091):             ival = int(i)
0.73 numbers.py(2097):         if ival == 1:
0.73 numbers.py(2099):         if ival == -1:
0.73 numbers.py(2101):         if ival == 0:
0.73 numbers.py(2103):         obj = Expr.__new__(cls)
0.73 numbers.py(2104):         obj.p = ival
0.73 numbers.py(2105):         return obj
0.73 numbers.py(713):         return self.class_key(), (0, ()), (), self
0.73 numbers.py(709):         return 1, 0, 'Number'
0.73 numbers.py(2283):         return hash(self.p)
0.73 numbers.py(2283):         return hash(self.p)
0.73 numbers.py(2082):         if isinstance(i, str):
0.73 numbers.py(2090):         try:
0.73 numbers.py(2091):             ival = int(i)
0.73 numbers.py(2097):         if ival == 1:
0.73 numbers.py(2099):         if ival == -1:
0.73 numbers.py(2101):         if ival == 0:
0.73 numbers.py(2103):         obj = Expr.__new__(cls)
0.73 numbers.py(2104):         obj.p = ival
0.73 numbers.py(2105):         return obj
0.73 numbers.py(713):         return self.class_key(), (0, ()), (), self
0.73 numbers.py(709):         return 1, 0, 'Number'
0.73 numbers.py(2283):         return hash(self.p)
0.73 numbers.py(2283):         return hash(self.p)
0.73 numbers.py(2237):         if isinstance(other, int):
0.73 numbers.py(2239):         elif isinstance(other, Integer):
0.73 numbers.py(2240):             return (self.p == other.p)
0.73 numbers.py(2256):         try:
0.73 numbers.py(2257):             other = _sympify(other)
0.73 numbers.py(2260):         if other.is_Integer:
0.73 numbers.py(2261):             return _sympify(self.p < other.p)
0.73 numbers.py(2283):         return hash(self.p)
0.73 numbers.py(2283):         return hash(self.p)
0.73 numbers.py(2283):         return hash(self.p)
0.73 numbers.py(2283):         return hash(self.p)
0.73 numbers.py(2283):         return hash(self.p)
0.73 numbers.py(2283):         return hash(self.p)
+ cat coverage.cover
{"/testbed/sympy/core/numbers.py": {"1": 1, "2": 1, "3": 1, "4": 1, "5": 1, "6": 1, "8": 1, "9": 1, "11": 1, "12": 1, "13": 1, "14": 1, "15": 1, "16": 1, "17": 1, "19": 1, "20": 1, "21": 1, "22": 1, "23": 1, "24": 1, "25": 1, "26": 1, "27": 1, "28": 1, "32": 1, "33": 1, "35": 1, "37": 1, "39": 1, "42": 1, "151": 1, "181": 1, "184": 1, "196": 1, "207": 1, "222": 1, "223": 1, "231": 1, "232": 1, "267": 1, "270": 1, "416": 1, "442": 1, "488": 1, "554": 2, "855": 2, "1493": 1, "1496": 1, "1499": 2, "2039": 2, "2427": 1, "2430": 2, "2561": 2, "2574": 2, "2581": 2, "2650": 2, "2700": 2, "2764": 2, "2796": 2, "2988": 1, "2991": 2, "3155": 2, "3274": 1, "3276": 1, "3277": 1, "3280": 2, "3361": 1, "3364": 2, "3420": 2, "3494": 1, "3497": 2, "3565": 1, "3568": 2, "3635": 2, "3705": 2, "3768": 2, "3831": 2, "3913": 1, "3915": 1, "3916": 1, "3919": 1, "3922": 1, "3924": 1, "3925": 0, "3931": 0, "3934": 0, "3935": 0, "3938": 1, "3942": 1, "3945": 1, "3948": 1, "3951": 1, "3955": 1, "3957": 1, "3958": 1, "3959": 1, "3960": 1, "3961": 1, "3963": 1, "3969": 1, "103": 0, "104": 0, "105": 0, "106": 0, "107": 0, "108": 0, "109": 0, "110": 0, "111": 0, "112": 0, "113": 0, "114": 0, "115": 0, "116": 0, "117": 0, "118": 0, "119": 0, "120": 0, "121": 0, "123": 0, "125": 0, "126": 0, "127": 0, "128": 0, "129": 0, "130": 0, "131": 0, "133": 0, "134": 0, "135": 0, "136": 0, "137": 0, "138": 0, "139": 0, "140": 0, "141": 0, "142": 0, "143": 0, "144": 0, "145": 0, "146": 0, "148": 0, "163": 2, "164": 2, "168": 2, "169": 2, "173": 0, "176": 0, "177": 0, "178": 0, "191": 0, "192": 0, "193": 0, "197": 0, "198": 0, "199": 0, "200": 0, "202": 0, "203": 0, "204": 0, "209": 2, "210": 0, "211": 2, "212": 2, "213": 2, "214": 2, "216": 0, "217": 0, "218": 0, "219": 2, "225": 2, "251": 2, "252": 0, "253": 0, "254": 8, "255": 2, "256": 2, "257": 0, "258": 0, "259": 0, "260": 0, "261": 0, "262": 0, "263": 0, "264": 0, "314": 0, "315": 0, "316": 0, "323": 0, "325": 0, "328": 0, "329": 0, "336": 0, "365": 0, "366": 0, "367": 0, "372": 0, "373": 0, "374": 0, "377": 0, "378": 0, "386": 0, "387": 0, "388": 0, "389": 0, "390": 0, "391": 0, "393": 0, "394": 0, "399": 0, "403": 0, "404": 0, "407": 0, "410": 0, "411": 0, "413": 0, "431": 0, "432": 0, "433": 0, "434": 0, "435": 0, "436": 0, "437": 0, "438": 0, "439": 0, "461": 0, "462": 0, "464": 0, "465": 0, "466": 0, "467": 0, "469": 0, "470": 0, "472": 0, "474": 0, "475": 0, "477": 0, "479": 0, "481": 0, "482": 0, "483": 0, "485": 0, "528": 0, "529": 0, "530": 0, "531": 0, "532": 0, "533": 0, "534": 0, "535": 0, "536": 0, "537": 0, "538": 0, "544": 0, "545": 0, "546": 0, "547": 0, "548": 0, "549": 0, "550": 0, "551": 0, "582": 1, "583": 1, "584": 1, "586": 1, "589": 1, "591": 1, "593": 1, "623": 1, "629": 1, "655": 1, "662": 1, "667": 1, "670": 1, "674": 1, "677": 1, "681": 1, "685": 1, "688": 1, "691": 1, "694": 1, "699": 1, "704": 1, "707": 1, "708": 1, "711": 1, "712": 1, "715": 1, "716": 1, "726": 1, "727": 1, "737": 1, "738": 1, "760": 1, "761": 1, "769": 1, "773": 1, "777": 1, "785": 1, "793": 1, "800": 1, "807": 1, "810": 1, "813": 1, "821": 1, "827": 1, "833": 1, "839": 1, "844": 1, "849": 1, "594": 0, "595": 0, "597": 0, "598": 0, "599": 0, "600": 0, "601": 0, "602": 0, "603": 0, "604": 0, "605": 0, "606": 0, "607": 0, "608": 0, "609": 0, "610": 0, "611": 0, "612": 0, "613": 0, "614": 0, "615": 0, "616": 0, "617": 0, "619": 0, "620": 0, "621": 0, "624": 0, "625": 0, "626": 0, "627": 0, "630": 0, "631": 0, "633": 0, "634": 0, "635": 0, "636": 0, "637": 0, "638": 0, "639": 0, "640": 0, "641": 0, "642": 0, "643": 0, "644": 0, "646": 0, "647": 0, "648": 0, "649": 0, "651": 0, "652": 0, "653": 0, "656": 0, "657": 0, "658": 0, "659": 0, "660": 0, "664": 0, "665": 0, "668": 0, "671": 0, "672": 0, "675": 3, "678": 0, "679": 0, "682": 0, "683": 0, "686": 0, "689": 0, "692": 0, "695": 0, "697": 0, "700": 0, "701": 0, "702": 0, "705": 0, "709": 35, "713": 35, "717": 0, "718": 0, "719": 0, "720": 0, "721": 0, "722": 0, "723": 0, "724": 0, "728": 0, "729": 0, "730": 0, "731": 0, "732": 0, "733": 0, "734": 0, "735": 0, "739": 0, "740": 0, "741": 0, "742": 0, "743": 0, "744": 0, "745": 0, "746": 0, "748": 0, "749": 0, "750": 0, "751": 0, "752": 0, "753": 0, "755": 0, "756": 0, "757": 0, "758": 0, "762": 0, "763": 0, "764": 0, "765": 0, "766": 0, "767": 0, "770": 0, "771": 0, "774": 0, "775": 0, "778": 0, "779": 0, "780": 0, "781": 0, "782": 0, "783": 0, "786": 0, "787": 0, "788": 0, "789": 0, "790": 0, "791": 0, "794": 0, "795": 0, "796": 0, "797": 0, "798": 0, "801": 0, "802": 0, "803": 0, "804": 0, "805": 0, "808": 0, "811": 0, "815": 0, "816": 0, "817": 0, "818": 0, "819": 0, "823": 0, "824": 0, "825": 0, "829": 0, "830": 0, "831": 0, "835": 0, "836": 0, "837": 0, "841": 0, "842": 0, "846": 0, "847": 0, "851": 0, "852": 0, "1018": 1, "1022": 1, "1023": 1, "1024": 1, "1026": 1, "1027": 1, "1029": 1, "1031": 1, "1191": 1, "1192": 1, "1209": 1, "1212": 1, "1215": 1, "1218": 1, "1222": 1, "1226": 1, "1229": 1, "1232": 1, "1233": 1, "1236": 1, "1242": 1, "1245": 1, "1250": 1, "1255": 1, "1258": 1, "1263": 1, "1268": 1, "1275": 1, "1282": 1, "1285": 1, "1288": 1, "1291": 1, "1292": 1, "1298": 1, "1299": 1, "1305": 1, "1306": 1, "1312": 1, "1313": 1, "1319": 1, "1320": 1, "1334": 1, "1335": 1, "1343": 1, "1375": 1, "1378": 1, "1383": 1, "1413": 1, "1416": 1, "1446": 1, "1454": 1, "1462": 1, "1470": 1, "1478": 1, "1481": 1, "1484": 1, "1488": 1, "1032": 3, "1033": 0, "1034": 0, "1035": 0, "1037": 0, "1038": 0, "1039": 0, "1040": 3, "1042": 3, "1043": 0, "1046": 3, "1048": 1, "1052": 1, "1053": 0, "1054": 0, "1055": 0, "1056": 0, "1057": 0, "1058": 0, "1060": 0, "1061": 0, "1062": 1, "1063": 0, "1064": 1, "1065": 0, "1066": 1, "1067": 1, "1068": 0, "1069": 0, "1070": 2, "1071": 2, "1072": 0, "1073": 0, "1074": 0, "1075": 0, "1076": 0, "1077": 0, "1078": 0, "1079": 0, "1080": 0, "1081": 0, "1082": 0, "1083": 0, "1084": 0, "1085": 0, "1086": 0, "1087": 0, "1088": 0, "1089": 0, "1090": 0, "1091": 0, "1092": 0, "1094": 2, "1095": 2, "1096": 2, "1097": 0, "1098": 2, "1099": 2, "1100": 2, "1101": 0, "1102": 0, "1104": 2, "1105": 2, "1106": 2, "1107": 2, "1108": 2, "1109": 2, "1110": 0, "1111": 0, "1112": 0, "1114": 0, "1115": 0, "1116": 0, "1117": 0, "1118": 0, "1119": 0, "1121": 0, "1122": 0, "1123": 0, "1124": 0, "1125": 0, "1126": 0, "1127": 0, "1128": 0, "1135": 2, "1136": 0, "1138": 2, "1140": 2, "1141": 0, "1142": 2, "1143": 0, "1144": 2, "1145": 0, "1146": 0, "1147": 0, "1148": 0, "1149": 0, "1150": 0, "1151": 0, "1152": 0, "1154": 0, "1155": 2, "1156": 0, "1159": 0, "1163": 0, "1164": 0, "1165": 0, "1166": 0, "1168": 0, "1170": 0, "1172": 0, "1173": 0, "1174": 0, "1175": 0, "1177": 0, "1180": 0, "1181": 0, "1182": 0, "1184": 2, "1185": 2, "1186": 0, "1187": 0, "1189": 2, "1194": 2, "1195": 0, "1196": 2, "1197": 0, "1198": 2, "1199": 0, "1200": 2, "1201": 0, "1203": 2, "1204": 2, "1205": 2, "1206": 2, "1210": 0, "1213": 0, "1216": 0, "1219": 0, "1220": 0, "1223": 0, "1224": 0, "1227": 0, "1230": 0, "1234": 0, "1237": 0, "1238": 0, "1239": 0, "1240": 0, "1243": 0, "1246": 0, "1247": 0, "1248": 0, "1251": 0, "1252": 0, "1253": 0, "1256": 0, "1259": 0, "1260": 0, "1261": 0, "1264": 0, "1265": 0, "1266": 0, "1269": 0, "1270": 0, "1271": 0, "1272": 0, "1273": 0, "1276": 0, "1277": 0, "1278": 0, "1279": 0, "1280": 0, "1283": 0, "1286": 0, "1289": 0, "1293": 0, "1294": 0, "1295": 0, "1296": 0, "1300": 0, "1301": 0, "1302": 0, "1303": 0, "1307": 0, "1308": 0, "1309": 0, "1310": 0, "1314": 0, "1315": 0, "1316": 0, "1317": 0, "1321": 0, "1323": 0, "1324": 0, "1325": 0, "1326": 0, "1327": 0, "1328": 0, "1329": 0, "1330": 0, "1331": 0, "1332": 0, "1336": 0, "1337": 0, "1338": 0, "1339": 0, "1340": 0, "1341": 0, "1350": 0, "1351": 0, "1352": 0, "1353": 0, "1354": 0, "1355": 0, "1356": 0, "1357": 0, "1358": 0, "1359": 0, "1360": 0, "1361": 0, "1362": 0, "1363": 0, "1364": 0, "1365": 0, "1366": 0, "1367": 0, "1368": 0, "1369": 0, "1370": 0, "1371": 0, "1372": 0, "1373": 0, "1376": 0, "1379": 0, "1380": 0, "1381": 0, "1384": 1, "1385": 1, "1386": 1, "1387": 0, "1388": 0, "1389": 1, "1390": 1, "1391": 0, "1392": 0, "1393": 0, "1394": 0, "1395": 0, "1398": 0, "1399": 0, "1400": 0, "1401": 0, "1407": 0, "1408": 0, "1409": 0, "1410": 0, "1411": 0, "1414": 0, "1417": 0, "1418": 0, "1419": 0, "1420": 0, "1421": 0, "1422": 0, "1432": 0, "1433": 0, "1434": 0, "1435": 0, "1436": 0, "1437": 0, "1438": 0, "1439": 0, "1440": 0, "1441": 0, "1442": 0, "1443": 0, "1444": 0, "1447": 0, "1448": 0, "1449": 0, "1450": 0, "1451": 0, "1452": 0, "1455": 0, "1456": 0, "1457": 0, "1458": 0, "1459": 0, "1460": 0, "1463": 0, "1464": 0, "1465": 0, "1466": 0, "1467": 0, "1468": 0, "1471": 0, "1472": 0, "1473": 0, "1474": 0, "1475": 0, "1476": 0, "1479": 0, "1482": 0, "1485": 0, "1486": 0, "1489": 0, "1582": 1, "1583": 1, "1584": 1, "1585": 1, "1587": 1, "1589": 1, "1591": 1, "1592": 1, "1666": 1, "1682": 1, "1685": 1, "1688": 1, "1691": 1, "1694": 1, "1697": 1, "1698": 1, "1710": 1, "1712": 1, "1713": 1, "1724": 1, "1725": 1, "1736": 1, "1737": 1, "1748": 1, "1750": 1, "1751": 1, "1765": 1, "1766": 1, "1778": 1, "1779": 1, "1791": 1, "1792": 1, "1797": 1, "1835": 1, "1838": 1, "1841": 1, "1844": 1, "1850": 1, "1853": 1, "1856": 1, "1859": 1, "1862": 1, "1908": 1, "1911": 1, "1932": 1, "1940": 1, "1948": 1, "1956": 1, "1964": 1, "1967": 1, "1979": 1, "1982": 1, "1985": 1, "1986": 1, "1995": 1, "1996": 1, "2003": 1, "2006": 1, "2010": 1, "2030": 1, "2034": 1, "1593": 6, "1594": 4, "1595": 0, "1597": 4, "1598": 4, "1600": 0, "1601": 0, "1603": 0, "1604": 0, "1605": 0, "1606": 0, "1607": 0, "1609": 0, "1610": 0, "1611": 0, "1612": 0, "1613": 0, "1614": 0, "1615": 0, "1616": 0, "1617": 0, "1618": 0, "1619": 0, "1620": 0, "1621": 0, "1623": 0, "1625": 0, "1626": 0, "1628": 4, "1629": 4, "1631": 2, "1632": 2, "1634": 6, "1635": 2, "1636": 2, "1637": 6, "1638": 2, "1639": 2, "1642": 6, "1643": 0, "1644": 0, "1645": 0, "1647": 0, "1648": 0, "1649": 6, "1650": 0, "1651": 0, "1652": 6, "1653": 2, "1654": 6, "1655": 0, "1656": 0, "1657": 6, "1658": 4, "1659": 2, "1660": 0, "1661": 2, "1662": 2, "1663": 2, "1664": 2, "1679": 0, "1680": 0, "1683": 0, "1686": 0, "1689": 0, "1692": 0, "1695": 0, "1699": 0, "1700": 0, "1701": 0, "1702": 0, "1704": 0, "1705": 0, "1706": 0, "1708": 0, "1709": 0, "1714": 0, "1715": 0, "1716": 0, "1717": 0, "1718": 0, "1719": 0, "1720": 0, "1722": 0, "1723": 0, "1726": 0, "1727": 0, "1728": 0, "1729": 0, "1730": 0, "1731": 0, "1732": 0, "1734": 0, "1735": 0, "1738": 0, "1739": 0, "1740": 0, "1741": 0, "1742": 0, "1743": 0, "1744": 0, "1746": 0, "1747": 0, "1752": 0, "1753": 0, "1754": 0, "1755": 0, "1757": 0, "1758": 0, "1759": 0, "1760": 0, "1761": 0, "1763": 0, "1764": 0, "1767": 0, "1768": 0, "1769": 0, "1770": 0, "1771": 0, "1772": 0, "1773": 0, "1775": 0, "1776": 0, "1780": 0, "1781": 0, "1782": 0, "1783": 0, "1784": 0, "1786": 0, "1787": 0, "1788": 0, "1789": 0, "1793": 0, "1794": 0, "1795": 0, "1798": 0, "1799": 0, "1800": 0, "1801": 0, "1803": 0, "1804": 0, "1805": 0, "1806": 0, "1807": 0, "1809": 0, "1810": 0, "1811": 0, "1813": 0, "1814": 0, "1816": 0, "1817": 0, "1818": 0, "1820": 0, "1821": 0, "1822": 0, "1824": 0, "1826": 0, "1827": 0, "1828": 0, "1830": 0, "1831": 0, "1833": 0, "1836": 0, "1839": 0, "1842": 0, "1845": 0, "1846": 0, "1847": 0, "1848": 0, "1851": 0, "1854": 0, "1857": 0, "1860": 0, "1863": 1, "1864": 1, "1865": 1, "1866": 0, "1867": 0, "1868": 1, "1871": 0, "1872": 1, "1873": 0, "1874": 1, "1875": 0, "1876": 0, "1877": 0, "1878": 1, "1881": 0, "1882": 1, "1885": 0, "1886": 0, "1887": 0, "1888": 0, "1889": 0, "1890": 0, "1892": 0, "1893": 0, "1894": 0, "1895": 0, "1897": 0, "1898": 0, "1900": 0, "1901": 0, "1903": 0, "1904": 0, "1905": 0, "1906": 1, "1909": 0, "1913": 0, "1914": 0, "1915": 0, "1916": 0, "1917": 0, "1918": 0, "1919": 0, "1920": 0, "1921": 0, "1922": 0, "1923": 0, "1924": 0, "1925": 0, "1926": 0, "1927": 0, "1928": 0, "1929": 0, "1930": 0, "1933": 0, "1934": 0, "1935": 0, "1936": 0, "1937": 0, "1938": 0, "1941": 0, "1942": 0, "1943": 0, "1944": 0, "1945": 0, "1946": 0, "1949": 0, "1950": 0, "1951": 0, "1952": 0, "1953": 0, "1954": 0, "1957": 0, "1958": 0, "1959": 0, "1960": 0, "1961": 0, "1962": 0, "1965": 0, "1973": 0, "1975": 0, "1976": 0, "1977": 0, "1980": 0, "1983": 0, "1987": 0, "1988": 0, "1989": 0, "1990": 0, "1991": 0, "1992": 0, "1993": 0, "1997": 0, "1998": 0, "1999": 0, "2000": 0, "2001": 0, "2004": 0, "2007": 0, "2008": 0, "2024": 0, "2025": 0, "2026": 0, "2027": 0, "2028": 0, "2032": 0, "2036": 0, "2066": 1, "2067": 1, "2068": 1, "2070": 1, "2072": 1, "2074": 1, "2077": 1, "2080": 1, "2081": 1, "2107": 1, "2111": 1, "2114": 1, "2117": 1, "2120": 1, "2123": 1, "2126": 1, "2129": 1, "2135": 1, "2142": 1, "2157": 1, "2169": 1, "2178": 1, "2189": 1, "2198": 1, "2209": 1, "2218": 1, "2227": 1, "2236": 1, "2243": 1, "2246": 1, "2255": 1, "2264": 1, "2273": 1, "2282": 1, "2285": 1, "2290": 1, "2293": 1, "2401": 1, "2406": 1, "2412": 1, "2415": 1, "2416": 1, "2423": 1, "2075": 2, "2078": 0, "2082": 61, "2083": 0, "2090": 61, "2091": 61, "2092": 0, "2093": 0, "2094": 0, "2097": 61, "2098": 21, "2099": 40, "2100": 5, "2101": 35, "2102": 12, "2103": 23, "2104": 23, "2105": 23, "2108": 0, "2112": 0, "2115": 0, "2118": 0, "2121": 0, "2124": 0, "2127": 0, "2130": 0, "2131": 0, "2133": 0, "2136": 0, "2137": 0, "2138": 0, "2140": 0, "2143": 0, "2144": 0, "2145": 0, "2147": 0, "2148": 0, "2149": 0, "2150": 0, "2151": 0, "2152": 0, "2153": 0, "2154": 0, "2158": 0, "2159": 0, "2160": 0, "2161": 0, "2162": 0, "2163": 0, "2164": 0, "2165": 0, "2167": 0, "2170": 0, "2171": 0, "2172": 0, "2173": 0, "2174": 0, "2175": 0, "2176": 0, "2179": 0, "2180": 0, "2181": 0, "2182": 0, "2183": 0, "2184": 0, "2185": 0, "2186": 0, "2187": 0, "2190": 0, "2191": 0, "2192": 0, "2193": 0, "2194": 0, "2195": 0, "2196": 0, "2199": 2, "2200": 2, "2201": 2, "2202": 0, "2203": 0, "2204": 0, "2205": 0, "2206": 0, "2207": 0, "2210": 0, "2211": 0, "2212": 0, "2213": 0, "2214": 0, "2215": 0, "2216": 0, "2219": 0, "2220": 0, "2221": 0, "2222": 0, "2223": 0, "2224": 0, "2225": 0, "2228": 0, "2229": 0, "2230": 0, "2231": 0, "2232": 0, "2233": 0, "2234": 0, "2237": 20, "2238": 1, "2239": 19, "2240": 18, "2241": 1, "2244": 0, "2247": 15, "2248": 15, "2249": 0, "2250": 0, "2251": 15, "2252": 15, "2253": 0, "2256": 3, "2257": 3, "2258": 0, "2259": 0, "2260": 3, "2261": 3, "2262": 0, "2265": 0, "2266": 0, "2267": 0, "2268": 0, "2269": 0, "2270": 0, "2271": 0, "2274": 0, "2275": 0, "2276": 0, "2277": 0, "2278": 0, "2279": 0, "2280": 0, "2283": 175, "2286": 0, "2291": 0, "2314": 0, "2316": 0, "2317": 0, "2318": 0, "2320": 0, "2321": 0, "2322": 0, "2323": 0, "2326": 0, "2327": 0, "2328": 0, "2330": 0, "2331": 0, "2332": 0, "2333": 0, "2335": 0, "2336": 0, "2338": 0, "2339": 0, "2340": 0, "2342": 0, "2344": 0, "2345": 0, "2347": 0, "2348": 0, "2349": 0, "2350": 0, "2356": 0, "2357": 0, "2358": 0, "2359": 0, "2361": 0, "2364": 0, "2365": 0, "2366": 0, "2367": 0, "2368": 0, "2369": 0, "2370": 0, "2372": 0, "2373": 0, "2374": 0, "2375": 0, "2378": 0, "2379": 0, "2380": 0, "2382": 0, "2384": 0, "2385": 0, "2386": 0, "2388": 0, "2389": 0, "2390": 0, "2391": 0, "2392": 0, "2393": 0, "2394": 0, "2396": 0, "2397": 0, "2398": 0, "2399": 0, "2402": 0, "2404": 0, "2407": 0, "2408": 0, "2410": 0, "2413": 0, "2417": 0, "2418": 0, "2419": 0, "2420": 0, "2421": 0, "2424": 0, "2433": 1, "2435": 1, "2436": 1, "2437": 1, "2440": 1, "2445": 1, "2447": 1, "2500": 1, "2503": 1, "2506": 1, "2507": 1, "2511": 1, "2522": 1, "2526": 1, "2530": 1, "2534": 1, "2550": 1, "2449": 0, "2450": 0, "2451": 0, "2452": 0, "2454": 0, "2456": 0, "2457": 0, "2459": 0, "2460": 0, "2461": 0, "2462": 0, "2464": 0, "2465": 0, "2467": 0, "2469": 0, "2470": 0, "2471": 0, "2472": 0, "2474": 0, "2475": 0, "2477": 0, "2478": 0, "2481": 0, "2482": 0, "2484": 0, "2486": 0, "2487": 0, "2488": 0, "2489": 0, "2491": 0, "2493": 0, "2494": 0, "2495": 0, "2496": 0, "2498": 0, "2501": 0, "2504": 0, "2509": 0, "2513": 0, "2514": 0, "2515": 0, "2517": 0, "2518": 0, "2520": 0, "2524": 0, "2528": 0, "2532": 0, "2536": 0, "2537": 0, "2539": 0, "2540": 0, "2542": 0, "2543": 0, "2545": 0, "2546": 0, "2548": 0, "2551": 0, "2552": 0, "2553": 0, "2554": 0, "2556": 0, "2557": 0, "2558": 0, "2568": 1, "2570": 1, "2571": 0, "2575": 1, "2577": 1, "2578": 3, "2601": 1, "2602": 1, "2603": 1, "2604": 1, "2605": 1, "2606": 1, "2607": 1, "2609": 1, "2611": 1, "2614": 1, "2615": 1, "2618": 1, "2619": 1, "2622": 1, "2638": 1, "2642": 1, "2645": 1, "2612": 0, "2616": 0, "2620": 0, "2623": 0, "2624": 0, "2625": 0, "2626": 0, "2627": 0, "2628": 0, "2632": 0, "2633": 0, "2634": 0, "2635": 0, "2636": 0, "2640": 0, "2643": 0, "2647": 0, "2667": 1, "2669": 1, "2670": 1, "2672": 1, "2674": 1, "2677": 1, "2678": 1, "2681": 1, "2682": 1, "2685": 1, "2688": 1, "2691": 1, "2692": 1, "2675": 0, "2679": 0, "2683": 4, "2686": 0, "2689": 0, "2694": 0, "2695": 0, "2697": 0, "2723": 1, "2725": 1, "2726": 1, "2728": 1, "2730": 1, "2733": 1, "2734": 1, "2737": 1, "2738": 1, "2741": 1, "2731": 0, "2735": 0, "2739": 0, "2742": 0, "2743": 0, "2744": 0, "2745": 0, "2746": 0, "2747": 0, "2748": 0, "2749": 0, "2750": 0, "2751": 0, "2752": 0, "2753": 0, "2754": 0, "2755": 0, "2756": 0, "2757": 0, "2758": 0, "2759": 0, "2760": 0, "2761": 0, "2781": 1, "2783": 1, "2784": 1, "2786": 1, "2788": 1, "2791": 1, "2792": 1, "2789": 0, "2793": 0, "2837": 1, "2838": 1, "2839": 1, "2840": 1, "2841": 1, "2842": 1, "2843": 1, "2844": 1, "2846": 1, "2848": 1, "2851": 1, "2854": 1, "2858": 1, "2861": 1, "2864": 1, "2865": 1, "2871": 1, "2873": 1, "2874": 1, "2881": 1, "2882": 1, "2885": 1, "2886": 1, "2894": 1, "2896": 1, "2897": 1, "2908": 1, "2911": 1, "2914": 1, "2953": 1, "2956": 1, "2960": 1, "2963": 1, "2966": 1, "2969": 1, "2970": 1, "2971": 1, "2972": 1, "2974": 1, "2975": 1, "2980": 1, "2982": 1, "2985": 1, "2849": 1, "2852": 0, "2855": 0, "2856": 0, "2859": 1, "2862": 1, "2866": 0, "2867": 0, "2868": 0, "2869": 0, "2870": 0, "2875": 3, "2876": 3, "2877": 0, "2878": 3, "2879": 0, "2883": 0, "2887": 0, "2888": 0, "2889": 0, "2890": 0, "2891": 0, "2892": 0, "2893": 0, "2898": 0, "2899": 0, "2900": 0, "2901": 0, "2902": 0, "2903": 0, "2904": 0, "2905": 0, "2906": 0, "2909": 0, "2912": 0, "2932": 0, "2934": 0, "2935": 0, "2936": 0, "2937": 0, "2938": 0, "2939": 0, "2940": 0, "2941": 0, "2942": 0, "2943": 0, "2944": 0, "2945": 0, "2946": 0, "2947": 0, "2948": 0, "2949": 0, "2951": 0, "2954": 2, "2957": 0, "2958": 0, "2961": 0, "2964": 18, "2967": 0, "2976": 0, "2977": 0, "2978": 0, "2983": 0, "2986": 0, "3003": 1, "3004": 1, "3005": 1, "3006": 1, "3007": 1, "3008": 1, "3009": 1, "3010": 1, "3012": 1, "3014": 1, "3017": 1, "3020": 1, "3024": 1, "3027": 1, "3030": 1, "3031": 1, "3037": 1, "3039": 1, "3040": 1, "3047": 1, "3048": 1, "3051": 1, "3052": 1, "3060": 1, "3062": 1, "3063": 1, "3074": 1, "3077": 1, "3080": 1, "3116": 1, "3119": 1, "3123": 1, "3126": 1, "3129": 1, "3132": 1, "3133": 1, "3134": 1, "3135": 1, "3137": 1, "3138": 1, "3143": 1, "3145": 1, "3148": 1, "3151": 1, "3015": 1, "3018": 0, "3021": 0, "3022": 0, "3025": 0, "3028": 0, "3032": 0, "3033": 0, "3034": 0, "3035": 0, "3036": 0, "3041": 0, "3042": 0, "3043": 0, "3044": 0, "3045": 0, "3049": 0, "3053": 0, "3054": 0, "3055": 0, "3056": 0, "3057": 0, "3058": 0, "3059": 0, "3064": 0, "3065": 0, "3066": 0, "3067": 0, "3068": 0, "3069": 0, "3070": 0, "3071": 0, "3072": 0, "3075": 0, "3078": 0, "3102": 0, "3103": 0, "3104": 0, "3105": 0, "3106": 0, "3108": 0, "3109": 0, "3110": 0, "3112": 0, "3114": 0, "3117": 1, "3120": 0, "3121": 0, "3124": 0, "3127": 18, "3130": 0, "3139": 0, "3140": 0, "3141": 0, "3146": 0, "3149": 0, "3152": 0, "3203": 1, "3204": 1, "3205": 1, "3206": 1, "3207": 1, "3208": 1, "3209": 1, "3210": 1, "3211": 1, "3212": 1, "3213": 1, "3214": 1, "3215": 1, "3216": 1, "3218": 1, "3220": 1, "3223": 1, "3226": 1, "3229": 1, "3230": 1, "3233": 1, "3234": 1, "3237": 1, "3238": 1, "3241": 1, "3242": 1, "3245": 1, "3248": 1, "3251": 1, "3254": 1, "3258": 1, "3261": 1, "3265": 1, "3269": 1, "3270": 1, "3271": 1, "3272": 1, "3221": 1, "3224": 0, "3227": 0, "3231": 0, "3235": 0, "3239": 0, "3243": 0, "3246": 0, "3249": 0, "3252": 0, "3255": 0, "3256": 0, "3259": 0, "3263": 14, "3266": 0, "3278": 0, "3312": 1, "3313": 1, "3314": 1, "3315": 1, "3316": 1, "3317": 1, "3319": 1, "3321": 1, "3323": 1, "3326": 1, "3329": 1, "3330": 1, "3333": 1, "3336": 1, "3339": 1, "3340": 1, "3343": 1, "3356": 1, "3324": 1, "3327": 0, "3331": 0, "3334": 0, "3337": 0, "3341": 0, "3344": 0, "3345": 0, "3347": 0, "3348": 0, "3349": 0, "3351": 0, "3352": 0, "3354": 0, "3357": 0, "3358": 0, "3366": 1, "3367": 1, "3368": 1, "3370": 1, "3372": 1, "3374": 1, "3376": 1, "3379": 1, "3385": 1, "3388": 1, "3400": 1, "3403": 1, "3408": 1, "3413": 1, "3417": 1, "3377": 6, "3386": 0, "3389": 0, "3390": 0, "3391": 0, "3392": 0, "3393": 0, "3394": 0, "3395": 0, "3396": 0, "3398": 0, "3401": 0, "3404": 0, "3405": 0, "3406": 0, "3409": 0, "3410": 0, "3411": 0, "3415": 0, "3418": 5, "3448": 1, "3449": 1, "3450": 1, "3451": 1, "3452": 1, "3453": 1, "3454": 1, "3456": 1, "3458": 1, "3461": 1, "3462": 1, "3465": 1, "3468": 1, "3471": 1, "3477": 1, "3481": 1, "3486": 1, "3491": 1, "3459": 0, "3463": 0, "3466": 0, "3469": 0, "3472": 0, "3473": 0, "3474": 0, "3475": 0, "3478": 0, "3479": 0, "3482": 0, "3483": 0, "3484": 0, "3487": 0, "3488": 0, "3489": 0, "3492": 0, "3493": 0, "3533": 1, "3534": 1, "3535": 1, "3536": 1, "3537": 1, "3538": 1, "3539": 1, "3541": 1, "3543": 1, "3546": 1, "3547": 1, "3550": 1, "3553": 1, "3556": 1, "3562": 1, "3544": 0, "3548": 0, "3551": 0, "3554": 0, "3557": 0, "3558": 0, "3559": 0, "3560": 0, "3563": 0, "3564": 0, "3597": 1, "3598": 1, "3599": 1, "3600": 1, "3601": 1, "3602": 1, "3603": 1, "3605": 1, "3607": 1, "3610": 1, "3613": 1, "3618": 1, "3622": 1, "3628": 1, "3632": 1, "3608": 0, "3611": 0, "3615": 0, "3616": 0, "3619": 0, "3620": 0, "3623": 0, "3624": 0, "3625": 0, "3626": 0, "3629": 0, "3630": 0, "3672": 1, "3673": 1, "3674": 1, "3675": 1, "3676": 1, "3677": 1, "3678": 1, "3680": 1, "3682": 1, "3685": 1, "3688": 1, "3692": 1, "3696": 1, "3702": 1, "3683": 0, "3686": 0, "3689": 0, "3690": 0, "3693": 0, "3694": 0, "3697": 0, "3698": 0, "3699": 0, "3700": 0, "3737": 1, "3738": 1, "3739": 1, "3740": 1, "3741": 1, "3743": 1, "3745": 1, "3748": 1, "3751": 1, "3757": 1, "3763": 1, "3746": 0, "3749": 0, "3753": 0, "3754": 0, "3755": 0, "3758": 0, "3759": 0, "3760": 0, "3761": 0, "3764": 0, "3765": 0, "3796": 1, "3797": 1, "3798": 1, "3799": 1, "3800": 1, "3802": 1, "3804": 1, "3807": 1, "3813": 1, "3819": 1, "3826": 1, "3805": 0, "3809": 0, "3810": 0, "3811": 0, "3814": 0, "3815": 0, "3816": 0, "3817": 0, "3820": 0, "3821": 0, "3822": 0, "3823": 0, "3824": 0, "3827": 0, "3828": 0, "3854": 1, "3855": 1, "3856": 1, "3857": 1, "3858": 1, "3859": 1, "3861": 1, "3863": 1, "3865": 1, "3868": 1, "3869": 1, "3872": 1, "3875": 1, "3878": 1, "3902": 1, "3905": 1, "3909": 1, "3910": 1, "3866": 0, "3870": 0, "3873": 0, "3876": 0, "3890": 0, "3891": 0, "3892": 0, "3893": 0, "3894": 0, "3895": 0, "3896": 0, "3897": 0, "3898": 0, "3899": 0, "3900": 0, "3903": 0, "3906": 0, "3907": 0, "3911": 0, "3917": 0, "3920": 0, "3926": 0, "3932": 0, "3939": 0, "3940": 0, "3946": 0, "3952": 0, "3953": 0, "3964": 1, "3965": 1, "3966": 1, "3967": 1}}
{"/testbed/sympy/core/numbers.py": {"1": 1, "2": 1, "3": 1, "4": 1, "5": 1, "6": 1, "8": 1, "9": 1, "11": 1, "12": 1, "13": 1, "14": 1, "15": 1, "16": 1, "17": 1, "19": 1, "20": 1, "21": 1, "22": 1, "23": 1, "24": 1, "25": 1, "26": 1, "27": 1, "28": 1, "32": 1, "33": 1, "35": 1, "37": 1, "39": 1, "42": 1, "151": 1, "181": 1, "184": 1, "196": 1, "207": 1, "222": 1, "223": 1, "231": 1, "232": 1, "267": 1, "270": 1, "416": 1, "442": 1, "488": 1, "554": 2, "855": 2, "1493": 1, "1496": 1, "1499": 2, "2039": 2, "2427": 1, "2430": 2, "2561": 2, "2574": 2, "2581": 2, "2650": 2, "2700": 2, "2764": 2, "2796": 2, "2988": 1, "2991": 2, "3155": 2, "3274": 1, "3276": 1, "3277": 1, "3280": 2, "3361": 1, "3364": 2, "3420": 2, "3494": 1, "3497": 2, "3565": 1, "3568": 2, "3635": 2, "3705": 2, "3768": 2, "3831": 2, "3913": 1, "3915": 1, "3916": 1, "3919": 1, "3922": 1, "3924": 1, "3925": 0, "3931": 0, "3934": 0, "3935": 0, "3938": 1, "3942": 1, "3945": 1, "3948": 1, "3951": 1, "3955": 1, "3957": 1, "3958": 1, "3959": 1, "3960": 1, "3961": 1, "3963": 1, "3969": 1, "103": 0, "104": 0, "105": 0, "106": 0, "107": 0, "108": 0, "109": 0, "110": 0, "111": 0, "112": 0, "113": 0, "114": 0, "115": 0, "116": 0, "117": 0, "118": 0, "119": 0, "120": 0, "121": 0, "123": 0, "125": 0, "126": 0, "127": 0, "128": 0, "129": 0, "130": 0, "131": 0, "133": 0, "134": 0, "135": 0, "136": 0, "137": 0, "138": 0, "139": 0, "140": 0, "141": 0, "142": 0, "143": 0, "144": 0, "145": 0, "146": 0, "148": 0, "163": 0, "164": 0, "168": 0, "169": 0, "173": 0, "176": 0, "177": 0, "178": 0, "191": 0, "192": 0, "193": 0, "197": 0, "198": 0, "199": 0, "200": 0, "202": 0, "203": 0, "204": 0, "209": 0, "210": 0, "211": 0, "212": 0, "213": 0, "214": 0, "216": 0, "217": 0, "218": 0, "219": 0, "225": 0, "251": 2, "252": 0, "253": 0, "254": 8, "255": 2, "256": 2, "257": 0, "258": 0, "259": 0, "260": 0, "261": 0, "262": 0, "263": 0, "264": 0, "314": 0, "315": 0, "316": 0, "323": 0, "325": 0, "328": 0, "329": 0, "336": 0, "365": 0, "366": 0, "367": 0, "372": 0, "373": 0, "374": 0, "377": 0, "378": 0, "386": 0, "387": 0, "388": 0, "389": 0, "390": 0, "391": 0, "393": 0, "394": 0, "399": 0, "403": 0, "404": 0, "407": 0, "410": 0, "411": 0, "413": 0, "431": 0, "432": 0, "433": 0, "434": 0, "435": 0, "436": 0, "437": 0, "438": 0, "439": 0, "461": 0, "462": 0, "464": 0, "465": 0, "466": 0, "467": 0, "469": 0, "470": 0, "472": 0, "474": 0, "475": 0, "477": 0, "479": 0, "481": 0, "482": 0, "483": 0, "485": 0, "528": 0, "529": 0, "530": 0, "531": 0, "532": 0, "533": 0, "534": 0, "535": 0, "536": 0, "537": 0, "538": 0, "544": 0, "545": 0, "546": 0, "547": 0, "548": 0, "549": 0, "550": 0, "551": 0, "582": 1, "583": 1, "584": 1, "586": 1, "589": 1, "591": 1, "593": 1, "623": 1, "629": 1, "655": 1, "662": 1, "667": 1, "670": 1, "674": 1, "677": 1, "681": 1, "685": 1, "688": 1, "691": 1, "694": 1, "699": 1, "704": 1, "707": 1, "708": 1, "711": 1, "712": 1, "715": 1, "716": 1, "726": 1, "727": 1, "737": 1, "738": 1, "760": 1, "761": 1, "769": 1, "773": 1, "777": 1, "785": 1, "793": 1, "800": 1, "807": 1, "810": 1, "813": 1, "821": 1, "827": 1, "833": 1, "839": 1, "844": 1, "849": 1, "594": 0, "595": 0, "597": 0, "598": 0, "599": 0, "600": 0, "601": 0, "602": 0, "603": 0, "604": 0, "605": 0, "606": 0, "607": 0, "608": 0, "609": 0, "610": 0, "611": 0, "612": 0, "613": 0, "614": 0, "615": 0, "616": 0, "617": 0, "619": 0, "620": 0, "621": 0, "624": 0, "625": 0, "626": 0, "627": 0, "630": 0, "631": 0, "633": 0, "634": 0, "635": 0, "636": 0, "637": 0, "638": 0, "639": 0, "640": 0, "641": 0, "642": 0, "643": 0, "644": 0, "646": 0, "647": 0, "648": 0, "649": 0, "651": 0, "652": 0, "653": 0, "656": 0, "657": 0, "658": 0, "659": 0, "660": 0, "664": 0, "665": 0, "668": 0, "671": 0, "672": 0, "675": 3, "678": 0, "679": 0, "682": 0, "683": 0, "686": 0, "689": 0, "692": 0, "695": 0, "697": 0, "700": 0, "701": 0, "702": 0, "705": 0, "709": 35, "713": 35, "717": 0, "718": 0, "719": 0, "720": 0, "721": 0, "722": 0, "723": 0, "724": 0, "728": 0, "729": 0, "730": 0, "731": 0, "732": 0, "733": 0, "734": 0, "735": 0, "739": 0, "740": 0, "741": 0, "742": 0, "743": 0, "744": 0, "745": 0, "746": 0, "748": 0, "749": 0, "750": 0, "751": 0, "752": 0, "753": 0, "755": 0, "756": 0, "757": 0, "758": 0, "762": 0, "763": 0, "764": 0, "765": 0, "766": 0, "767": 0, "770": 0, "771": 0, "774": 0, "775": 0, "778": 0, "779": 0, "780": 0, "781": 0, "782": 0, "783": 0, "786": 0, "787": 0, "788": 0, "789": 0, "790": 0, "791": 0, "794": 0, "795": 0, "796": 0, "797": 0, "798": 0, "801": 0, "802": 0, "803": 0, "804": 0, "805": 0, "808": 0, "811": 0, "815": 0, "816": 0, "817": 0, "818": 0, "819": 0, "823": 0, "824": 0, "825": 0, "829": 0, "830": 0, "831": 0, "835": 0, "836": 0, "837": 0, "841": 0, "842": 0, "846": 0, "847": 0, "851": 0, "852": 0, "1018": 1, "1022": 1, "1023": 1, "1024": 1, "1026": 1, "1027": 1, "1029": 1, "1031": 1, "1191": 1, "1192": 1, "1209": 1, "1212": 1, "1215": 1, "1218": 1, "1222": 1, "1226": 1, "1229": 1, "1232": 1, "1233": 1, "1236": 1, "1242": 1, "1245": 1, "1250": 1, "1255": 1, "1258": 1, "1263": 1, "1268": 1, "1275": 1, "1282": 1, "1285": 1, "1288": 1, "1291": 1, "1292": 1, "1298": 1, "1299": 1, "1305": 1, "1306": 1, "1312": 1, "1313": 1, "1319": 1, "1320": 1, "1334": 1, "1335": 1, "1343": 1, "1375": 1, "1378": 1, "1383": 1, "1413": 1, "1416": 1, "1446": 1, "1454": 1, "1462": 1, "1470": 1, "1478": 1, "1481": 1, "1484": 1, "1488": 1, "1032": 1, "1033": 0, "1034": 0, "1035": 0, "1037": 0, "1038": 0, "1039": 0, "1040": 1, "1042": 1, "1043": 0, "1046": 1, "1048": 1, "1052": 1, "1053": 0, "1054": 0, "1055": 0, "1056": 0, "1057": 0, "1058": 0, "1060": 0, "1061": 0, "1062": 1, "1063": 0, "1064": 1, "1065": 0, "1066": 1, "1067": 1, "1068": 0, "1069": 0, "1070": 0, "1071": 0, "1072": 0, "1073": 0, "1074": 0, "1075": 0, "1076": 0, "1077": 0, "1078": 0, "1079": 0, "1080": 0, "1081": 0, "1082": 0, "1083": 0, "1084": 0, "1085": 0, "1086": 0, "1087": 0, "1088": 0, "1089": 0, "1090": 0, "1091": 0, "1092": 0, "1094": 0, "1095": 0, "1096": 0, "1097": 0, "1098": 0, "1099": 0, "1100": 0, "1101": 0, "1102": 0, "1104": 0, "1105": 0, "1106": 0, "1107": 0, "1108": 0, "1109": 0, "1110": 0, "1111": 0, "1112": 0, "1114": 0, "1115": 0, "1116": 0, "1117": 0, "1118": 0, "1119": 0, "1121": 0, "1122": 0, "1123": 0, "1124": 0, "1125": 0, "1126": 0, "1127": 0, "1128": 0, "1135": 0, "1136": 0, "1138": 0, "1140": 0, "1141": 0, "1142": 0, "1143": 0, "1144": 0, "1145": 0, "1146": 0, "1147": 0, "1148": 0, "1149": 0, "1150": 0, "1151": 0, "1152": 0, "1154": 0, "1155": 0, "1156": 0, "1159": 0, "1163": 0, "1164": 0, "1165": 0, "1166": 0, "1168": 0, "1170": 0, "1172": 0, "1173": 0, "1174": 0, "1175": 0, "1177": 0, "1180": 0, "1181": 0, "1182": 0, "1184": 0, "1185": 0, "1186": 0, "1187": 0, "1189": 0, "1194": 0, "1195": 0, "1196": 0, "1197": 0, "1198": 0, "1199": 0, "1200": 0, "1201": 0, "1203": 0, "1204": 0, "1205": 0, "1206": 0, "1210": 0, "1213": 0, "1216": 0, "1219": 0, "1220": 0, "1223": 0, "1224": 0, "1227": 0, "1230": 0, "1234": 0, "1237": 0, "1238": 0, "1239": 0, "1240": 0, "1243": 0, "1246": 0, "1247": 0, "1248": 0, "1251": 0, "1252": 0, "1253": 0, "1256": 0, "1259": 0, "1260": 0, "1261": 0, "1264": 0, "1265": 0, "1266": 0, "1269": 0, "1270": 0, "1271": 0, "1272": 0, "1273": 0, "1276": 0, "1277": 0, "1278": 0, "1279": 0, "1280": 0, "1283": 0, "1286": 0, "1289": 0, "1293": 0, "1294": 0, "1295": 0, "1296": 0, "1300": 0, "1301": 0, "1302": 0, "1303": 0, "1307": 0, "1308": 0, "1309": 0, "1310": 0, "1314": 0, "1315": 0, "1316": 0, "1317": 0, "1321": 0, "1323": 0, "1324": 0, "1325": 0, "1326": 0, "1327": 0, "1328": 0, "1329": 0, "1330": 0, "1331": 0, "1332": 0, "1336": 0, "1337": 0, "1338": 0, "1339": 0, "1340": 0, "1341": 0, "1350": 0, "1351": 0, "1352": 0, "1353": 0, "1354": 0, "1355": 0, "1356": 0, "1357": 0, "1358": 0, "1359": 0, "1360": 0, "1361": 0, "1362": 0, "1363": 0, "1364": 0, "1365": 0, "1366": 0, "1367": 0, "1368": 0, "1369": 0, "1370": 0, "1371": 0, "1372": 0, "1373": 0, "1376": 0, "1379": 0, "1380": 0, "1381": 0, "1384": 0, "1385": 0, "1386": 0, "1387": 0, "1388": 0, "1389": 0, "1390": 0, "1391": 0, "1392": 0, "1393": 0, "1394": 0, "1395": 0, "1398": 0, "1399": 0, "1400": 0, "1401": 0, "1407": 0, "1408": 0, "1409": 0, "1410": 0, "1411": 0, "1414": 0, "1417": 0, "1418": 0, "1419": 0, "1420": 0, "1421": 0, "1422": 0, "1432": 0, "1433": 0, "1434": 0, "1435": 0, "1436": 0, "1437": 0, "1438": 0, "1439": 0, "1440": 0, "1441": 0, "1442": 0, "1443": 0, "1444": 0, "1447": 0, "1448": 0, "1449": 0, "1450": 0, "1451": 0, "1452": 0, "1455": 0, "1456": 0, "1457": 0, "1458": 0, "1459": 0, "1460": 0, "1463": 0, "1464": 0, "1465": 0, "1466": 0, "1467": 0, "1468": 0, "1471": 0, "1472": 0, "1473": 0, "1474": 0, "1475": 0, "1476": 0, "1479": 0, "1482": 0, "1485": 0, "1486": 0, "1489": 0, "1582": 1, "1583": 1, "1584": 1, "1585": 1, "1587": 1, "1589": 1, "1591": 1, "1592": 1, "1666": 1, "1682": 1, "1685": 1, "1688": 1, "1691": 1, "1694": 1, "1697": 1, "1698": 1, "1710": 1, "1712": 1, "1713": 1, "1724": 1, "1725": 1, "1736": 1, "1737": 1, "1748": 1, "1750": 1, "1751": 1, "1765": 1, "1766": 1, "1778": 1, "1779": 1, "1791": 1, "1792": 1, "1797": 1, "1835": 1, "1838": 1, "1841": 1, "1844": 1, "1850": 1, "1853": 1, "1856": 1, "1859": 1, "1862": 1, "1908": 1, "1911": 1, "1932": 1, "1940": 1, "1948": 1, "1956": 1, "1964": 1, "1967": 1, "1979": 1, "1982": 1, "1985": 1, "1986": 1, "1995": 1, "1996": 1, "2003": 1, "2006": 1, "2010": 1, "2030": 1, "2034": 1, "1593": 6, "1594": 4, "1595": 0, "1597": 4, "1598": 4, "1600": 0, "1601": 0, "1603": 0, "1604": 0, "1605": 0, "1606": 0, "1607": 0, "1609": 0, "1610": 0, "1611": 0, "1612": 0, "1613": 0, "1614": 0, "1615": 0, "1616": 0, "1617": 0, "1618": 0, "1619": 0, "1620": 0, "1621": 0, "1623": 0, "1625": 0, "1626": 0, "1628": 4, "1629": 4, "1631": 2, "1632": 2, "1634": 6, "1635": 2, "1636": 2, "1637": 6, "1638": 2, "1639": 2, "1642": 6, "1643": 0, "1644": 0, "1645": 0, "1647": 0, "1648": 0, "1649": 6, "1650": 0, "1651": 0, "1652": 6, "1653": 2, "1654": 6, "1655": 0, "1656": 0, "1657": 6, "1658": 4, "1659": 2, "1660": 0, "1661": 2, "1662": 2, "1663": 2, "1664": 2, "1679": 0, "1680": 0, "1683": 0, "1686": 0, "1689": 0, "1692": 0, "1695": 0, "1699": 0, "1700": 0, "1701": 0, "1702": 0, "1704": 0, "1705": 0, "1706": 0, "1708": 0, "1709": 0, "1714": 0, "1715": 0, "1716": 0, "1717": 0, "1718": 0, "1719": 0, "1720": 0, "1722": 0, "1723": 0, "1726": 0, "1727": 0, "1728": 0, "1729": 0, "1730": 0, "1731": 0, "1732": 0, "1734": 0, "1735": 0, "1738": 0, "1739": 0, "1740": 0, "1741": 0, "1742": 0, "1743": 0, "1744": 0, "1746": 0, "1747": 0, "1752": 0, "1753": 0, "1754": 0, "1755": 0, "1757": 0, "1758": 0, "1759": 0, "1760": 0, "1761": 0, "1763": 0, "1764": 0, "1767": 0, "1768": 0, "1769": 0, "1770": 0, "1771": 0, "1772": 0, "1773": 0, "1775": 0, "1776": 0, "1780": 0, "1781": 0, "1782": 0, "1783": 0, "1784": 0, "1786": 0, "1787": 0, "1788": 0, "1789": 0, "1793": 0, "1794": 0, "1795": 0, "1798": 0, "1799": 0, "1800": 0, "1801": 0, "1803": 0, "1804": 0, "1805": 0, "1806": 0, "1807": 0, "1809": 0, "1810": 0, "1811": 0, "1813": 0, "1814": 0, "1816": 0, "1817": 0, "1818": 0, "1820": 0, "1821": 0, "1822": 0, "1824": 0, "1826": 0, "1827": 0, "1828": 0, "1830": 0, "1831": 0, "1833": 0, "1836": 0, "1839": 0, "1842": 0, "1845": 0, "1846": 0, "1847": 0, "1848": 0, "1851": 0, "1854": 0, "1857": 0, "1860": 0, "1863": 1, "1864": 1, "1865": 1, "1866": 0, "1867": 0, "1868": 1, "1871": 0, "1872": 1, "1873": 0, "1874": 1, "1875": 0, "1876": 0, "1877": 0, "1878": 1, "1881": 0, "1882": 1, "1885": 0, "1886": 0, "1887": 0, "1888": 0, "1889": 0, "1890": 0, "1892": 0, "1893": 0, "1894": 0, "1895": 0, "1897": 0, "1898": 0, "1900": 0, "1901": 0, "1903": 0, "1904": 0, "1905": 0, "1906": 1, "1909": 0, "1913": 0, "1914": 0, "1915": 0, "1916": 0, "1917": 0, "1918": 0, "1919": 0, "1920": 0, "1921": 0, "1922": 0, "1923": 0, "1924": 0, "1925": 0, "1926": 0, "1927": 0, "1928": 0, "1929": 0, "1930": 0, "1933": 0, "1934": 0, "1935": 0, "1936": 0, "1937": 0, "1938": 0, "1941": 0, "1942": 0, "1943": 0, "1944": 0, "1945": 0, "1946": 0, "1949": 0, "1950": 0, "1951": 0, "1952": 0, "1953": 0, "1954": 0, "1957": 0, "1958": 0, "1959": 0, "1960": 0, "1961": 0, "1962": 0, "1965": 0, "1973": 0, "1975": 0, "1976": 0, "1977": 0, "1980": 0, "1983": 0, "1987": 0, "1988": 0, "1989": 0, "1990": 0, "1991": 0, "1992": 0, "1993": 0, "1997": 0, "1998": 0, "1999": 0, "2000": 0, "2001": 0, "2004": 0, "2007": 0, "2008": 0, "2024": 0, "2025": 0, "2026": 0, "2027": 0, "2028": 0, "2032": 0, "2036": 0, "2066": 1, "2067": 1, "2068": 1, "2070": 1, "2072": 1, "2074": 1, "2077": 1, "2080": 1, "2081": 1, "2107": 1, "2111": 1, "2114": 1, "2117": 1, "2120": 1, "2123": 1, "2126": 1, "2129": 1, "2135": 1, "2142": 1, "2157": 1, "2169": 1, "2178": 1, "2189": 1, "2198": 1, "2209": 1, "2218": 1, "2227": 1, "2236": 1, "2243": 1, "2246": 1, "2255": 1, "2264": 1, "2273": 1, "2282": 1, "2285": 1, "2290": 1, "2293": 1, "2401": 1, "2406": 1, "2412": 1, "2415": 1, "2416": 1, "2423": 1, "2075": 0, "2078": 0, "2082": 59, "2083": 0, "2090": 59, "2091": 59, "2092": 0, "2093": 0, "2094": 0, "2097": 59, "2098": 21, "2099": 38, "2100": 5, "2101": 33, "2102": 10, "2103": 23, "2104": 23, "2105": 23, "2108": 0, "2112": 0, "2115": 0, "2118": 0, "2121": 0, "2124": 0, "2127": 0, "2130": 0, "2131": 0, "2133": 0, "2136": 0, "2137": 0, "2138": 0, "2140": 0, "2143": 0, "2144": 0, "2145": 0, "2147": 0, "2148": 0, "2149": 0, "2150": 0, "2151": 0, "2152": 0, "2153": 0, "2154": 0, "2158": 0, "2159": 0, "2160": 0, "2161": 0, "2162": 0, "2163": 0, "2164": 0, "2165": 0, "2167": 0, "2170": 0, "2171": 0, "2172": 0, "2173": 0, "2174": 0, "2175": 0, "2176": 0, "2179": 0, "2180": 0, "2181": 0, "2182": 0, "2183": 0, "2184": 0, "2185": 0, "2186": 0, "2187": 0, "2190": 0, "2191": 0, "2192": 0, "2193": 0, "2194": 0, "2195": 0, "2196": 0, "2199": 2, "2200": 2, "2201": 2, "2202": 0, "2203": 0, "2204": 0, "2205": 0, "2206": 0, "2207": 0, "2210": 0, "2211": 0, "2212": 0, "2213": 0, "2214": 0, "2215": 0, "2216": 0, "2219": 0, "2220": 0, "2221": 0, "2222": 0, "2223": 0, "2224": 0, "2225": 0, "2228": 0, "2229": 0, "2230": 0, "2231": 0, "2232": 0, "2233": 0, "2234": 0, "2237": 20, "2238": 1, "2239": 19, "2240": 18, "2241": 1, "2244": 0, "2247": 15, "2248": 15, "2249": 0, "2250": 0, "2251": 15, "2252": 15, "2253": 0, "2256": 3, "2257": 3, "2258": 0, "2259": 0, "2260": 3, "2261": 3, "2262": 0, "2265": 0, "2266": 0, "2267": 0, "2268": 0, "2269": 0, "2270": 0, "2271": 0, "2274": 0, "2275": 0, "2276": 0, "2277": 0, "2278": 0, "2279": 0, "2280": 0, "2283": 175, "2286": 0, "2291": 0, "2314": 0, "2316": 0, "2317": 0, "2318": 0, "2320": 0, "2321": 0, "2322": 0, "2323": 0, "2326": 0, "2327": 0, "2328": 0, "2330": 0, "2331": 0, "2332": 0, "2333": 0, "2335": 0, "2336": 0, "2338": 0, "2339": 0, "2340": 0, "2342": 0, "2344": 0, "2345": 0, "2347": 0, "2348": 0, "2349": 0, "2350": 0, "2356": 0, "2357": 0, "2358": 0, "2359": 0, "2361": 0, "2364": 0, "2365": 0, "2366": 0, "2367": 0, "2368": 0, "2369": 0, "2370": 0, "2372": 0, "2373": 0, "2374": 0, "2375": 0, "2378": 0, "2379": 0, "2380": 0, "2382": 0, "2384": 0, "2385": 0, "2386": 0, "2388": 0, "2389": 0, "2390": 0, "2391": 0, "2392": 0, "2393": 0, "2394": 0, "2396": 0, "2397": 0, "2398": 0, "2399": 0, "2402": 0, "2404": 0, "2407": 0, "2408": 0, "2410": 0, "2413": 0, "2417": 0, "2418": 0, "2419": 0, "2420": 0, "2421": 0, "2424": 0, "2433": 1, "2435": 1, "2436": 1, "2437": 1, "2440": 1, "2445": 1, "2447": 1, "2500": 1, "2503": 1, "2506": 1, "2507": 1, "2511": 1, "2522": 1, "2526": 1, "2530": 1, "2534": 1, "2550": 1, "2449": 0, "2450": 0, "2451": 0, "2452": 0, "2454": 0, "2456": 0, "2457": 0, "2459": 0, "2460": 0, "2461": 0, "2462": 0, "2464": 0, "2465": 0, "2467": 0, "2469": 0, "2470": 0, "2471": 0, "2472": 0, "2474": 0, "2475": 0, "2477": 0, "2478": 0, "2481": 0, "2482": 0, "2484": 0, "2486": 0, "2487": 0, "2488": 0, "2489": 0, "2491": 0, "2493": 0, "2494": 0, "2495": 0, "2496": 0, "2498": 0, "2501": 0, "2504": 0, "2509": 0, "2513": 0, "2514": 0, "2515": 0, "2517": 0, "2518": 0, "2520": 0, "2524": 0, "2528": 0, "2532": 0, "2536": 0, "2537": 0, "2539": 0, "2540": 0, "2542": 0, "2543": 0, "2545": 0, "2546": 0, "2548": 0, "2551": 0, "2552": 0, "2553": 0, "2554": 0, "2556": 0, "2557": 0, "2558": 0, "2568": 1, "2570": 1, "2571": 0, "2575": 1, "2577": 1, "2578": 3, "2601": 1, "2602": 1, "2603": 1, "2604": 1, "2605": 1, "2606": 1, "2607": 1, "2609": 1, "2611": 1, "2614": 1, "2615": 1, "2618": 1, "2619": 1, "2622": 1, "2638": 1, "2642": 1, "2645": 1, "2612": 0, "2616": 0, "2620": 0, "2623": 0, "2624": 0, "2625": 0, "2626": 0, "2627": 0, "2628": 0, "2632": 0, "2633": 0, "2634": 0, "2635": 0, "2636": 0, "2640": 0, "2643": 0, "2647": 0, "2667": 1, "2669": 1, "2670": 1, "2672": 1, "2674": 1, "2677": 1, "2678": 1, "2681": 1, "2682": 1, "2685": 1, "2688": 1, "2691": 1, "2692": 1, "2675": 0, "2679": 0, "2683": 4, "2686": 0, "2689": 0, "2694": 0, "2695": 0, "2697": 0, "2723": 1, "2725": 1, "2726": 1, "2728": 1, "2730": 1, "2733": 1, "2734": 1, "2737": 1, "2738": 1, "2741": 1, "2731": 0, "2735": 0, "2739": 0, "2742": 0, "2743": 0, "2744": 0, "2745": 0, "2746": 0, "2747": 0, "2748": 0, "2749": 0, "2750": 0, "2751": 0, "2752": 0, "2753": 0, "2754": 0, "2755": 0, "2756": 0, "2757": 0, "2758": 0, "2759": 0, "2760": 0, "2761": 0, "2781": 1, "2783": 1, "2784": 1, "2786": 1, "2788": 1, "2791": 1, "2792": 1, "2789": 0, "2793": 0, "2837": 1, "2838": 1, "2839": 1, "2840": 1, "2841": 1, "2842": 1, "2843": 1, "2844": 1, "2846": 1, "2848": 1, "2851": 1, "2854": 1, "2858": 1, "2861": 1, "2864": 1, "2865": 1, "2871": 1, "2873": 1, "2874": 1, "2881": 1, "2882": 1, "2885": 1, "2886": 1, "2894": 1, "2896": 1, "2897": 1, "2908": 1, "2911": 1, "2914": 1, "2953": 1, "2956": 1, "2960": 1, "2963": 1, "2966": 1, "2969": 1, "2970": 1, "2971": 1, "2972": 1, "2974": 1, "2975": 1, "2980": 1, "2982": 1, "2985": 1, "2849": 1, "2852": 0, "2855": 0, "2856": 0, "2859": 1, "2862": 1, "2866": 0, "2867": 0, "2868": 0, "2869": 0, "2870": 0, "2875": 3, "2876": 3, "2877": 0, "2878": 3, "2879": 0, "2883": 0, "2887": 0, "2888": 0, "2889": 0, "2890": 0, "2891": 0, "2892": 0, "2893": 0, "2898": 0, "2899": 0, "2900": 0, "2901": 0, "2902": 0, "2903": 0, "2904": 0, "2905": 0, "2906": 0, "2909": 0, "2912": 0, "2932": 0, "2934": 0, "2935": 0, "2936": 0, "2937": 0, "2938": 0, "2939": 0, "2940": 0, "2941": 0, "2942": 0, "2943": 0, "2944": 0, "2945": 0, "2946": 0, "2947": 0, "2948": 0, "2949": 0, "2951": 0, "2954": 2, "2957": 0, "2958": 0, "2961": 0, "2964": 18, "2967": 0, "2976": 0, "2977": 0, "2978": 0, "2983": 0, "2986": 0, "3003": 1, "3004": 1, "3005": 1, "3006": 1, "3007": 1, "3008": 1, "3009": 1, "3010": 1, "3012": 1, "3014": 1, "3017": 1, "3020": 1, "3024": 1, "3027": 1, "3030": 1, "3031": 1, "3037": 1, "3039": 1, "3040": 1, "3047": 1, "3048": 1, "3051": 1, "3052": 1, "3060": 1, "3062": 1, "3063": 1, "3074": 1, "3077": 1, "3080": 1, "3116": 1, "3119": 1, "3123": 1, "3126": 1, "3129": 1, "3132": 1, "3133": 1, "3134": 1, "3135": 1, "3137": 1, "3138": 1, "3143": 1, "3145": 1, "3148": 1, "3151": 1, "3015": 1, "3018": 0, "3021": 0, "3022": 0, "3025": 0, "3028": 0, "3032": 0, "3033": 0, "3034": 0, "3035": 0, "3036": 0, "3041": 0, "3042": 0, "3043": 0, "3044": 0, "3045": 0, "3049": 0, "3053": 0, "3054": 0, "3055": 0, "3056": 0, "3057": 0, "3058": 0, "3059": 0, "3064": 0, "3065": 0, "3066": 0, "3067": 0, "3068": 0, "3069": 0, "3070": 0, "3071": 0, "3072": 0, "3075": 0, "3078": 0, "3102": 0, "3103": 0, "3104": 0, "3105": 0, "3106": 0, "3108": 0, "3109": 0, "3110": 0, "3112": 0, "3114": 0, "3117": 1, "3120": 0, "3121": 0, "3124": 0, "3127": 18, "3130": 0, "3139": 0, "3140": 0, "3141": 0, "3146": 0, "3149": 0, "3152": 0, "3203": 1, "3204": 1, "3205": 1, "3206": 1, "3207": 1, "3208": 1, "3209": 1, "3210": 1, "3211": 1, "3212": 1, "3213": 1, "3214": 1, "3215": 1, "3216": 1, "3218": 1, "3220": 1, "3223": 1, "3226": 1, "3229": 1, "3230": 1, "3233": 1, "3234": 1, "3237": 1, "3238": 1, "3241": 1, "3242": 1, "3245": 1, "3248": 1, "3251": 1, "3254": 1, "3258": 1, "3261": 1, "3265": 1, "3269": 1, "3270": 1, "3271": 1, "3272": 1, "3221": 1, "3224": 0, "3227": 0, "3231": 0, "3235": 0, "3239": 0, "3243": 0, "3246": 0, "3249": 0, "3252": 0, "3255": 0, "3256": 0, "3259": 0, "3263": 14, "3266": 0, "3278": 0, "3312": 1, "3313": 1, "3314": 1, "3315": 1, "3316": 1, "3317": 1, "3319": 1, "3321": 1, "3323": 1, "3326": 1, "3329": 1, "3330": 1, "3333": 1, "3336": 1, "3339": 1, "3340": 1, "3343": 1, "3356": 1, "3324": 1, "3327": 0, "3331": 0, "3334": 0, "3337": 0, "3341": 0, "3344": 0, "3345": 0, "3347": 0, "3348": 0, "3349": 0, "3351": 0, "3352": 0, "3354": 0, "3357": 0, "3358": 0, "3366": 1, "3367": 1, "3368": 1, "3370": 1, "3372": 1, "3374": 1, "3376": 1, "3379": 1, "3385": 1, "3388": 1, "3400": 1, "3403": 1, "3408": 1, "3413": 1, "3417": 1, "3377": 6, "3386": 0, "3389": 0, "3390": 0, "3391": 0, "3392": 0, "3393": 0, "3394": 0, "3395": 0, "3396": 0, "3398": 0, "3401": 0, "3404": 0, "3405": 0, "3406": 0, "3409": 0, "3410": 0, "3411": 0, "3415": 0, "3418": 5, "3448": 1, "3449": 1, "3450": 1, "3451": 1, "3452": 1, "3453": 1, "3454": 1, "3456": 1, "3458": 1, "3461": 1, "3462": 1, "3465": 1, "3468": 1, "3471": 1, "3477": 1, "3481": 1, "3486": 1, "3491": 1, "3459": 0, "3463": 0, "3466": 0, "3469": 0, "3472": 0, "3473": 0, "3474": 0, "3475": 0, "3478": 0, "3479": 0, "3482": 0, "3483": 0, "3484": 0, "3487": 0, "3488": 0, "3489": 0, "3492": 0, "3493": 0, "3533": 1, "3534": 1, "3535": 1, "3536": 1, "3537": 1, "3538": 1, "3539": 1, "3541": 1, "3543": 1, "3546": 1, "3547": 1, "3550": 1, "3553": 1, "3556": 1, "3562": 1, "3544": 0, "3548": 0, "3551": 0, "3554": 0, "3557": 0, "3558": 0, "3559": 0, "3560": 0, "3563": 0, "3564": 0, "3597": 1, "3598": 1, "3599": 1, "3600": 1, "3601": 1, "3602": 1, "3603": 1, "3605": 1, "3607": 1, "3610": 1, "3613": 1, "3618": 1, "3622": 1, "3628": 1, "3632": 1, "3608": 0, "3611": 0, "3615": 0, "3616": 0, "3619": 0, "3620": 0, "3623": 0, "3624": 0, "3625": 0, "3626": 0, "3629": 0, "3630": 0, "3672": 1, "3673": 1, "3674": 1, "3675": 1, "3676": 1, "3677": 1, "3678": 1, "3680": 1, "3682": 1, "3685": 1, "3688": 1, "3692": 1, "3696": 1, "3702": 1, "3683": 0, "3686": 0, "3689": 0, "3690": 0, "3693": 0, "3694": 0, "3697": 0, "3698": 0, "3699": 0, "3700": 0, "3737": 1, "3738": 1, "3739": 1, "3740": 1, "3741": 1, "3743": 1, "3745": 1, "3748": 1, "3751": 1, "3757": 1, "3763": 1, "3746": 0, "3749": 0, "3753": 0, "3754": 0, "3755": 0, "3758": 0, "3759": 0, "3760": 0, "3761": 0, "3764": 0, "3765": 0, "3796": 1, "3797": 1, "3798": 1, "3799": 1, "3800": 1, "3802": 1, "3804": 1, "3807": 1, "3813": 1, "3819": 1, "3826": 1, "3805": 0, "3809": 0, "3810": 0, "3811": 0, "3814": 0, "3815": 0, "3816": 0, "3817": 0, "3820": 0, "3821": 0, "3822": 0, "3823": 0, "3824": 0, "3827": 0, "3828": 0, "3854": 1, "3855": 1, "3856": 1, "3857": 1, "3858": 1, "3859": 1, "3861": 1, "3863": 1, "3865": 1, "3868": 1, "3869": 1, "3872": 1, "3875": 1, "3878": 1, "3902": 1, "3905": 1, "3909": 1, "3910": 1, "3866": 0, "3870": 0, "3873": 0, "3876": 0, "3890": 0, "3891": 0, "3892": 0, "3893": 0, "3894": 0, "3895": 0, "3896": 0, "3897": 0, "3898": 0, "3899": 0, "3900": 0, "3903": 0, "3906": 0, "3907": 0, "3911": 0, "3917": 0, "3920": 0, "3926": 0, "3932": 0, "3939": 0, "3940": 0, "3946": 0, "3952": 0, "3953": 0, "3964": 1, "3965": 1, "3966": 1, "3967": 1}}
+ git checkout e11d3fed782146eebbffdc9ced0364b223b84b6c
Note: switching to 'e11d3fed782146eebbffdc9ced0364b223b84b6c'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at e11d3fed78 Merge pull request #20531 from BhaskarJoshi-01/master
M	sympy/core/numbers.py
+ git apply /root/pre_state.patch
error: unrecognized input
