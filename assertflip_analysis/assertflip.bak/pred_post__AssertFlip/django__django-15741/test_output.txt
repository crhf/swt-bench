+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD 8c0886b068ba4e224dd78104b93c9638b860b398
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
nothing to commit, working tree clean
+ git show
commit 8c0886b068ba4e224dd78104b93c9638b860b398
Author: Marcelo Galigniana <marcelogaligniana@gmail.com>
Date:   Mon May 2 00:20:00 2022 -0300

    Fixed #22078 -- Fixed crash of Feed with decorated methods.

diff --git a/django/contrib/syndication/views.py b/django/contrib/syndication/views.py
index a9d1bff5cf..2378a14874 100644
--- a/django/contrib/syndication/views.py
+++ b/django/contrib/syndication/views.py
@@ -1,3 +1,5 @@
+from inspect import getattr_static, unwrap
+
 from django.contrib.sites.shortcuts import get_current_site
 from django.core.exceptions import ImproperlyConfigured, ObjectDoesNotExist
 from django.http import Http404, HttpResponse
@@ -82,10 +84,21 @@ class Feed:
             # Check co_argcount rather than try/excepting the function and
             # catching the TypeError, because something inside the function
             # may raise the TypeError. This technique is more accurate.
+            func = unwrap(attr)
             try:
-                code = attr.__code__
+                code = func.__code__
             except AttributeError:
-                code = attr.__call__.__code__
+                func = unwrap(attr.__call__)
+                code = func.__code__
+            # If function doesn't have arguments and it is not a static method,
+            # it was decorated without using @functools.wraps.
+            if not code.co_argcount and not isinstance(
+                getattr_static(self, func.__name__, None), staticmethod
+            ):
+                raise ImproperlyConfigured(
+                    f"Feed method {attname!r} decorated by {func.__name__!r} needs to "
+                    f"use @functools.wraps."
+                )
             if code.co_argcount == 2:  # one argument is 'self'
                 return attr(obj)
             else:
diff --git a/tests/syndication_tests/feeds.py b/tests/syndication_tests/feeds.py
index 223a0b0bb1..a35dc29e20 100644
--- a/tests/syndication_tests/feeds.py
+++ b/tests/syndication_tests/feeds.py
@@ -1,3 +1,5 @@
+from functools import wraps
+
 from django.contrib.syndication import views
 from django.utils import feedgenerator
 from django.utils.timezone import get_fixed_timezone
@@ -5,6 +7,23 @@ from django.utils.timezone import get_fixed_timezone
 from .models import Article, Entry
 
 
+def wraps_decorator(f):
+    @wraps(f)
+    def wrapper(*args, **kwargs):
+        value = f(*args, **kwargs)
+        return f"{value} -- decorated by @wraps."
+
+    return wrapper
+
+
+def common_decorator(f):
+    def wrapper(*args, **kwargs):
+        value = f(*args, **kwargs)
+        return f"{value} -- common decorated."
+
+    return wrapper
+
+
 class TestRss2Feed(views.Feed):
     title = "My blog"
     description = "A more thorough description of my blog."
@@ -47,11 +66,45 @@ class TestRss2FeedWithCallableObject(TestRss2Feed):
     ttl = TimeToLive()
 
 
-class TestRss2FeedWithStaticMethod(TestRss2Feed):
+class TestRss2FeedWithDecoratedMethod(TestRss2Feed):
+    class TimeToLive:
+        @wraps_decorator
+        def __call__(self):
+            return 800
+
+    @staticmethod
+    @wraps_decorator
+    def feed_copyright():
+        return "Copyright (c) 2022, John Doe"
+
+    ttl = TimeToLive()
+
     @staticmethod
     def categories():
         return ("javascript", "vue")
 
+    @wraps_decorator
+    def title(self):
+        return "Overridden title"
+
+    @wraps_decorator
+    def item_title(self, item):
+        return f"Overridden item title: {item.title}"
+
+    @wraps_decorator
+    def description(self, obj):
+        return "Overridden description"
+
+    @wraps_decorator
+    def item_description(self):
+        return "Overridden item description"
+
+
+class TestRss2FeedWithWrongDecoratedMethod(TestRss2Feed):
+    @common_decorator
+    def item_description(self, item):
+        return f"Overridden item description: {item.title}"
+
 
 class TestRss2FeedWithGuidIsPermaLinkTrue(TestRss2Feed):
     def item_guid_is_permalink(self, item):
diff --git a/tests/syndication_tests/tests.py b/tests/syndication_tests/tests.py
index 6aaf80c1a9..a68ed879db 100644
--- a/tests/syndication_tests/tests.py
+++ b/tests/syndication_tests/tests.py
@@ -202,11 +202,38 @@ class SyndicationFeedTest(FeedTestCase):
         chan = doc.getElementsByTagName("rss")[0].getElementsByTagName("channel")[0]
         self.assertChildNodeContent(chan, {"ttl": "700"})
 
-    def test_rss2_feed_with_static_methods(self):
-        response = self.client.get("/syndication/rss2/with-static-methods/")
+    def test_rss2_feed_with_decorated_methods(self):
+        response = self.client.get("/syndication/rss2/with-decorated-methods/")
         doc = minidom.parseString(response.content)
         chan = doc.getElementsByTagName("rss")[0].getElementsByTagName("channel")[0]
         self.assertCategories(chan, ["javascript", "vue"])
+        self.assertChildNodeContent(
+            chan,
+            {
+                "title": "Overridden title -- decorated by @wraps.",
+                "description": "Overridden description -- decorated by @wraps.",
+                "ttl": "800 -- decorated by @wraps.",
+                "copyright": "Copyright (c) 2022, John Doe -- decorated by @wraps.",
+            },
+        )
+        items = chan.getElementsByTagName("item")
+        self.assertChildNodeContent(
+            items[0],
+            {
+                "title": (
+                    f"Overridden item title: {self.e1.title} -- decorated by @wraps."
+                ),
+                "description": "Overridden item description -- decorated by @wraps.",
+            },
+        )
+
+    def test_rss2_feed_with_wrong_decorated_methods(self):
+        msg = (
+            "Feed method 'item_description' decorated by 'wrapper' needs to use "
+            "@functools.wraps."
+        )
+        with self.assertRaisesMessage(ImproperlyConfigured, msg):
+            self.client.get("/syndication/rss2/with-wrong-decorated-methods/")
 
     def test_rss2_feed_guid_permalink_false(self):
         """
diff --git a/tests/syndication_tests/urls.py b/tests/syndication_tests/urls.py
index 5d2b23bf0a..50f673373e 100644
--- a/tests/syndication_tests/urls.py
+++ b/tests/syndication_tests/urls.py
@@ -7,7 +7,14 @@ urlpatterns = [
     path(
         "syndication/rss2/with-callable-object/", feeds.TestRss2FeedWithCallableObject()
     ),
-    path("syndication/rss2/with-static-methods/", feeds.TestRss2FeedWithStaticMethod()),
+    path(
+        "syndication/rss2/with-decorated-methods/",
+        feeds.TestRss2FeedWithDecoratedMethod(),
+    ),
+    path(
+        "syndication/rss2/with-wrong-decorated-methods/",
+        feeds.TestRss2FeedWithWrongDecoratedMethod(),
+    ),
     path("syndication/rss2/articles/<int:entry_id>/", feeds.TestGetObjectFeed()),
     path(
         "syndication/rss2/guid_ispermalink_true/",
+ git diff 8c0886b068ba4e224dd78104b93c9638b860b398
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Checking if build backend supports build_editable: started
  Checking if build backend supports build_editable: finished with status 'done'
  Getting requirements to build editable: started
  Getting requirements to build editable: finished with status 'done'
  Preparing editable metadata (pyproject.toml): started
  Preparing editable metadata (pyproject.toml): finished with status 'done'
Requirement already satisfied: asgiref>=3.4.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Django==4.2.dev20220526083951) (3.9.1)
Requirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Django==4.2.dev20220526083951) (0.5.3)
Requirement already satisfied: typing_extensions>=4 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from asgiref>=3.4.1->Django==4.2.dev20220526083951) (4.14.1)
Building wheels for collected packages: Django
  Building editable for Django (pyproject.toml): started
  Building editable for Django (pyproject.toml): finished with status 'done'
  Created wheel for Django: filename=django-4.2.dev20220526083951-0.editable-py3-none-any.whl size=27092 sha256=c25580eaabdc766c1bb98d14348c234f10027c1f563e5a4948fbba6ca1e9efc7
  Stored in directory: /tmp/pip-ephem-wheel-cache-txkp7avc/wheels/7d/66/67/70d1ee2124ccf21d601c352e25cdca10f611f7c8b3f9ffb9e4
Successfully built Django
Installing collected packages: Django
  Attempting uninstall: Django
    Found existing installation: Django 4.2.dev20220526083951
    Uninstalling Django-4.2.dev20220526083951:
      Successfully uninstalled Django-4.2.dev20220526083951
Successfully installed Django-4.2.dev20220526083951
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git apply -v -
Checking patch django/utils/formats.py...
Applied patch django/utils/formats.py cleanly.
+ git apply -v -
Checking patch tests/test_coverup_django__django-15741.py...
Applied patch tests/test_coverup_django__django-15741.py cleanly.
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/utils/formats\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-15741
test_date_filter_with_lazy_string (test_coverup_django__django-15741.DateFilterLazyStringTest) ... ok

----------------------------------------------------------------------
Ran 1 test in 0.003s

OK
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(django/utils/formats\\.py)']
0.18 formats.py(1): import datetime
0.18 formats.py(2): import decimal
0.18 formats.py(3): import functools
0.18 formats.py(4): import re
0.18 formats.py(5): import unicodedata
0.18 formats.py(6): from importlib import import_module
0.18 formats.py(8): from django.conf import settings
0.18 formats.py(9): from django.utils import dateformat, numberformat
0.19 formats.py(10): from django.utils.functional import lazy
0.19 formats.py(11): from django.utils.translation import check_for_language, get_language, to_locale
0.19 formats.py(16): _format_cache = {}
0.19 formats.py(17): _format_modules_cache = {}
0.19 formats.py(20):     "DATE_INPUT_FORMATS": ["%Y-%m-%d"],
0.19 formats.py(21):     "TIME_INPUT_FORMATS": ["%H:%M:%S", "%H:%M:%S.%f", "%H:%M"],
0.19 formats.py(22):     "DATETIME_INPUT_FORMATS": [
0.19 formats.py(19): ISO_INPUT_FORMATS = {
0.19 formats.py(31): FORMAT_SETTINGS = frozenset(
0.19 formats.py(32):     [
0.19 formats.py(31): FORMAT_SETTINGS = frozenset(
0.19 formats.py(51): def reset_format_cache():
0.19 formats.py(62): def iter_format_modules(lang, format_module_path=None):
0.19 formats.py(89): def get_format_modules(lang=None):
0.19 formats.py(100): def get_format(format_type, lang=None, use_l10n=None):
0.19 formats.py(147): get_format_lazy = lazy(get_format, str, list, tuple)
0.19 formats.py(150): def date_format(value, format=None, use_l10n=None):
0.19 formats.py(163): def time_format(value, format=None, use_l10n=None):
0.19 formats.py(175): def number_format(value, decimal_pos=None, use_l10n=None, force_grouping=False):
0.19 formats.py(199): def localize(value, use_l10n=None):
0.19 formats.py(224): def localize_input(value, default=None):
0.19 formats.py(249): @functools.lru_cache
0.19 formats.py(250): def sanitize_strftime_format(fmt):
0.19 formats.py(282): def sanitize_separators(value):
Testing against Django installed in '/testbed/django'
Found 1 test(s).
Skipping setup of unused database(s): default, other.
System check identified no issues (0 silenced).
0.62 formats.py(158):     return dateformat.format(
0.62 formats.py(159):         value, get_format(format or "DATE_FORMAT", use_l10n=use_l10n)
0.62 formats.py(109):     if use_l10n is None:
0.62 formats.py(110):         try:
0.62 formats.py(111):             use_l10n = settings._USE_L10N_INTERNAL
0.62 formats.py(114):     if use_l10n and lang is None:
0.62 formats.py(115):         lang = get_language()
0.62 formats.py(116):     format_type = str(format_type)  # format_type may be lazy.
0.62 formats.py(117):     cache_key = (format_type, lang)
0.62 formats.py(118):     try:
0.62 formats.py(119):         return _format_cache[cache_key]
0.62 formats.py(120):     except KeyError:
0.62 formats.py(121):         pass
0.62 formats.py(126):     val = None
0.62 formats.py(127):     if use_l10n:
0.62 formats.py(128):         for module in get_format_modules(lang):
0.62 formats.py(91):     if lang is None:
0.62 formats.py(93):     if lang not in _format_modules_cache:
0.62 formats.py(94):         _format_modules_cache[lang] = list(
0.62 formats.py(95):             iter_format_modules(lang, settings.FORMAT_MODULE_PATH)
0.62 formats.py(94):         _format_modules_cache[lang] = list(
0.62 formats.py(64):     if not check_for_language(lang):
0.62 formats.py(67):     if format_module_path is None:
0.62 formats.py(68):         format_module_path = settings.FORMAT_MODULE_PATH
0.62 formats.py(70):     format_locations = []
0.62 formats.py(71):     if format_module_path:
0.62 formats.py(76):     format_locations.append("django.conf.locale.%s")
0.62 formats.py(77):     locale = to_locale(lang)
0.62 formats.py(78):     locales = [locale]
0.62 formats.py(79):     if "_" in locale:
0.62 formats.py(81):     for location in format_locations:
0.62 formats.py(82):         for loc in locales:
0.62 formats.py(83):             try:
0.62 formats.py(84):                 yield import_module("%s.formats" % (location % loc))
0.62 formats.py(82):         for loc in locales:
0.62 formats.py(81):     for location in format_locations:
0.62 formats.py(97):     return _format_modules_cache[lang]
0.62 formats.py(129):             val = getattr(module, format_type, None)
0.62 formats.py(130):             if val is not None:
0.62 formats.py(128):         for module in get_format_modules(lang):
0.62 formats.py(132):     if val is None:
0.62 formats.py(133):         if format_type not in FORMAT_SETTINGS:
0.62 formats.py(134):             return format_type
0.62 formats.py(158):     return dateformat.format(
+ cat coverage.cover
{"/testbed/django/utils/formats.py": {"1": 1, "2": 1, "3": 1, "4": 1, "5": 1, "6": 1, "8": 1, "9": 1, "10": 1, "11": 1, "16": 1, "17": 1, "20": 1, "21": 1, "22": 1, "19": 1, "31": 2, "32": 1, "51": 1, "62": 1, "89": 1, "100": 1, "147": 1, "150": 1, "163": 1, "175": 1, "199": 1, "224": 1, "249": 1, "250": 1, "282": 1, "58": 0, "59": 0, "64": 1, "65": 0, "67": 1, "68": 1, "70": 1, "71": 1, "72": 0, "73": 0, "74": 0, "75": 0, "76": 1, "77": 1, "78": 1, "79": 1, "80": 0, "81": 2, "82": 2, "83": 1, "84": 1, "85": 0, "86": 0, "91": 1, "92": 0, "93": 1, "94": 2, "95": 1, "97": 1, "109": 1, "110": 1, "111": 1, "112": 0, "113": 0, "114": 1, "115": 1, "116": 1, "117": 1, "118": 1, "119": 1, "120": 1, "121": 1, "126": 1, "127": 1, "128": 2, "129": 1, "130": 1, "131": 0, "132": 1, "133": 1, "134": 1, "135": 0, "136": 0, "139": 0, "140": 0, "141": 0, "142": 0, "143": 0, "144": 0, "158": 2, "159": 1, "170": 0, "171": 0, "182": 0, "183": 0, "184": 0, "185": 0, "186": 0, "187": 0, "188": 0, "189": 0, "190": 0, "191": 0, "192": 0, "193": 0, "194": 0, "195": 0, "207": 0, "208": 0, "209": 0, "210": 0, "211": 0, "212": 0, "213": 0, "214": 0, "215": 0, "216": 0, "217": 0, "218": 0, "219": 0, "220": 0, "221": 0, "229": 0, "230": 0, "231": 0, "232": 0, "233": 0, "234": 0, "235": 0, "236": 0, "237": 0, "238": 0, "239": 0, "240": 0, "241": 0, "242": 0, "243": 0, "244": 0, "245": 0, "246": 0, "272": 0, "273": 0, "274": 0, "275": 0, "276": 0, "277": 0, "278": 0, "287": 0, "288": 0, "289": 0, "290": 0, "291": 0, "292": 0, "293": 0, "294": 0, "296": 0, "295": 0, "297": 0, "298": 0, "302": 0, "305": 0, "306": 0, "304": 0, "308": 0, "309": 0, "310": 0, "311": 0}}
+ git checkout 8c0886b068ba4e224dd78104b93c9638b860b398
Note: switching to '8c0886b068ba4e224dd78104b93c9638b860b398'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at 8c0886b068 Fixed #22078 -- Fixed crash of Feed with decorated methods.
M	django/utils/formats.py
+ git apply /root/pre_state.patch
error: unrecognized input
