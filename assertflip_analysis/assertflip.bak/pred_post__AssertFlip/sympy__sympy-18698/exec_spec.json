{"instance_id": "sympy__sympy-18698", "repo": "sympy/sympy", "version": "1.6", "environment_setup_commit": "28b41c73c12b70d6ad9f6e45109a80649c4456da", "patch_list": ["diff --git a/sympy/polys/polytools.py b/sympy/polys/polytools.py\n--- a/sympy/polys/polytools.py\n+++ b/sympy/polys/polytools.py\n@@ -2,7 +2,8 @@\n \n from __future__ import print_function, division\n \n-from functools import wraps\n+from functools import wraps, reduce\n+from operator import mul\n \n from sympy.core import (\n     S, Basic, Expr, I, Integer, Add, Mul, Dummy, Tuple\n@@ -5905,10 +5906,7 @@ def _symbolic_factor_list(expr, opt, method):\n         if arg.is_Number:\n             coeff *= arg\n             continue\n-        if arg.is_Mul:\n-            args.extend(arg.args)\n-            continue\n-        if arg.is_Pow:\n+        elif arg.is_Pow:\n             base, exp = arg.args\n             if base.is_Number and exp.is_Number:\n                 coeff *= arg\n@@ -5949,6 +5947,9 @@ def _symbolic_factor_list(expr, opt, method):\n                         other.append((f, k))\n \n                 factors.append((_factors_product(other), exp))\n+    if method == 'sqf':\n+        factors = [(reduce(mul, (f for f, _ in factors if _ == k)), k)\n+                   for k in set(i for _, i in factors)]\n \n     return coeff, factors\n \n", "diff --git a/dev/null b/sympy/polys/tests/test_coverup_sympy__sympy-18698.py\nnew file mode 100644\nindex e69de29..54ce687 100644\n--- /dev/null\n+++ b/sympy/polys/tests/test_coverup_sympy__sympy-18698.py\n@@ -0,0 +1,17 @@\n+from sympy.testing.pytest import raises\n+from sympy import sqf_list\n+from sympy.abc import x\n+\n+def test_sqf_list_incorrect_multiplicity():\n+    # Test case from the issue ticket\n+    result = sqf_list((x**2 + 1) * (x - 1)**2 * (x - 2)**3 * (x - 3)**3)\n+    \n+    # Assert that the output is a tuple\n+    assert isinstance(result, tuple)\n+    \n+    # Assert that the first element is the correct coefficient\n+    assert result[0] == 1\n+    \n+    # Assert that the list of factors contains the expected factors with their correct multiplicities\n+    # The expected correct behavior is one factor of multiplicity 3\n+    assert result[1] == [(x**2 + 1, 1), (x - 1, 2), (x - 2, 3), (x - 3, 3)]\n"], "arch": "x86_64", "base_commit": "3dff1b98a78f28c953ae2140b69356b8391e399c", "test_directives": ["sympy/polys/tests/test_coverup_sympy__sympy-18698.py"], "coverage_files": ["sympy/polys/polytools.py"], "env_name": "testbed", "run_id": "assertflip", "patch_id": "pred_post__AssertFlip", "timeout": 1800, "rm_image": false, "force_rebuild": false, "exec_mode": "unit_test", "reproduction_script_name": null, "compute_coverage": true, "install": {"python": "3.9", "packages": "mpmath flake8", "pip_packages": ["mpmath==1.3.0", "flake8-comprehensions"], "install": "python -m pip install -e ."}, "cache_level": "instance", "test_command": "PYTHONWARNINGS='ignore::UserWarning,ignore::SyntaxWarning' python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(sympy/polys/polytools\\.py)' bin/test -C --verbose sympy/polys/tests/test_coverup_sympy__sympy-18698.p", "req_install_commands": ["conda create -n testbed python=3.9 mpmath flake8 -y"]}