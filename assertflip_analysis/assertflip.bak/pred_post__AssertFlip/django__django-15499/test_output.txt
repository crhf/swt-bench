+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD d90e34c61b27fba2527834806639eebbcfab9631
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
nothing to commit, working tree clean
+ git show
commit d90e34c61b27fba2527834806639eebbcfab9631
Author: Adrian Torres <atorresj@redhat.com>
Date:   Fri Mar 4 11:04:07 2022 +0100

    Fixed #33561 -- Allowed synchronization of user attributes in RemoteUserBackend.

diff --git a/AUTHORS b/AUTHORS
index 9f2475def7..1f96c6700c 100644
--- a/AUTHORS
+++ b/AUTHORS
@@ -23,6 +23,7 @@ answer newbie questions, and generally made Django that much better:
     Adiyat Mubarak <adiyatmubarak@gmail.com>
     Adnan Umer <u.adnan@outlook.com>
     Adrian Holovaty <adrian@holovaty.com>
+    Adrian Torres <atorresj@redhat.com>
     Adrien Lemaire <lemaire.adrien@gmail.com>
     Afonso Fern√°ndez Nogueira <fonzzo.django@gmail.com>
     AgarFu <heaven@croasanaso.sytes.net>
diff --git a/django/contrib/auth/backends.py b/django/contrib/auth/backends.py
index 7cf405713d..1e12efac38 100644
--- a/django/contrib/auth/backends.py
+++ b/django/contrib/auth/backends.py
@@ -1,6 +1,10 @@
+import warnings
+
 from django.contrib.auth import get_user_model
 from django.contrib.auth.models import Permission
 from django.db.models import Exists, OuterRef, Q
+from django.utils.deprecation import RemovedInDjango50Warning
+from django.utils.inspect import func_supports_parameter
 
 UserModel = get_user_model()
 
@@ -192,6 +196,7 @@ class RemoteUserBackend(ModelBackend):
         """
         if not remote_user:
             return
+        created = False
         user = None
         username = self.clean_username(remote_user)
 
@@ -202,13 +207,24 @@ class RemoteUserBackend(ModelBackend):
             user, created = UserModel._default_manager.get_or_create(
                 **{UserModel.USERNAME_FIELD: username}
             )
-            if created:
-                user = self.configure_user(request, user)
         else:
             try:
                 user = UserModel._default_manager.get_by_natural_key(username)
             except UserModel.DoesNotExist:
                 pass
+
+        # RemovedInDjango50Warning: When the deprecation ends, replace with:
+        #   user = self.configure_user(request, user, created=created)
+        if func_supports_parameter(self.configure_user, "created"):
+            user = self.configure_user(request, user, created=created)
+        else:
+            warnings.warn(
+                f"`created=True` must be added to the signature of "
+                f"{self.__class__.__qualname__}.configure_user().",
+                category=RemovedInDjango50Warning,
+            )
+            if created:
+                user = self.configure_user(request, user)
         return user if self.user_can_authenticate(user) else None
 
     def clean_username(self, username):
@@ -220,9 +236,9 @@ class RemoteUserBackend(ModelBackend):
         """
         return username
 
-    def configure_user(self, request, user):
+    def configure_user(self, request, user, created=True):
         """
-        Configure a user after creation and return the updated user.
+        Configure a user and return the updated user.
 
         By default, return the user unmodified.
         """
diff --git a/docs/internals/deprecation.txt b/docs/internals/deprecation.txt
index 11f69b1844..2c85eafc85 100644
--- a/docs/internals/deprecation.txt
+++ b/docs/internals/deprecation.txt
@@ -87,6 +87,9 @@ details on these changes.
 
 * Passing unsaved model instances to related filters will no longer be allowed.
 
+* ``created=True`` will be required in the signature of
+  ``RemoteUserBackend.configure_user()`` subclasses.
+
 .. _deprecation-removed-in-4.1:
 
 4.1
diff --git a/docs/ref/contrib/auth.txt b/docs/ref/contrib/auth.txt
index 40c3c84e75..abcf3905c9 100644
--- a/docs/ref/contrib/auth.txt
+++ b/docs/ref/contrib/auth.txt
@@ -649,17 +649,27 @@ The following backends are available in :mod:`django.contrib.auth.backends`:
         information) prior to using it to get or create a user object. Returns
         the cleaned username.
 
-    .. method:: configure_user(request, user)
+    .. method:: configure_user(request, user, created=True)
 
-        Configures a newly created user.  This method is called immediately
-        after a new user is created, and can be used to perform custom setup
-        actions, such as setting the user's groups based on attributes in an
-        LDAP directory. Returns the user object.
+        Configures the user on each authentication attempt. This method is
+        called immediately after fetching or creating the user being
+        authenticated, and can be used to perform custom setup actions, such as
+        setting the user's groups based on attributes in an LDAP directory.
+        Returns the user object.
+
+        The setup can be performed either once when the user is created
+        (``created`` is ``True``) or on existing users (``created`` is
+        ``False``) as a way of synchronizing attributes between the remote and
+        the local systems.
 
         ``request`` is an :class:`~django.http.HttpRequest` and may be ``None``
         if it wasn't provided to :func:`~django.contrib.auth.authenticate`
         (which passes it on to the backend).
 
+        .. versionchanged:: 4.1
+
+            The ``created`` argument was added.
+
     .. method:: user_can_authenticate()
 
         Returns whether the user is allowed to authenticate. This method
diff --git a/docs/releases/4.1.txt b/docs/releases/4.1.txt
index 72c1c15c7a..9dff4784cb 100644
--- a/docs/releases/4.1.txt
+++ b/docs/releases/4.1.txt
@@ -74,6 +74,9 @@ Minor features
 * The default iteration count for the PBKDF2 password hasher is increased from
   320,000 to 390,000.
 
+* The :meth:`.RemoteUserBackend.configure_user` method now allows synchronizing
+  user attributes with attributes in a remote system such as an LDAP directory.
+
 :mod:`django.contrib.contenttypes`
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
@@ -493,6 +496,10 @@ Miscellaneous
 * Passing unsaved model instances to related filters is deprecated. In Django
   5.0, the exception will be raised.
 
+* ``created=True`` is added to the signature of
+  :meth:`.RemoteUserBackend.configure_user`. Support  for ``RemoteUserBackend``
+  subclasses that do not accept this argument is deprecated.
+
 Features removed in 4.1
 =======================
 
diff --git a/tests/auth_tests/test_remote_user.py b/tests/auth_tests/test_remote_user.py
index bd974cb1d5..8fb1b972b5 100644
--- a/tests/auth_tests/test_remote_user.py
+++ b/tests/auth_tests/test_remote_user.py
@@ -6,8 +6,15 @@ from django.contrib.auth.backends import RemoteUserBackend
 from django.contrib.auth.middleware import RemoteUserMiddleware
 from django.contrib.auth.models import User
 from django.middleware.csrf import _get_new_csrf_string, _mask_cipher_secret
-from django.test import Client, TestCase, modify_settings, override_settings
+from django.test import (
+    Client,
+    TestCase,
+    ignore_warnings,
+    modify_settings,
+    override_settings,
+)
 from django.utils import timezone
+from django.utils.deprecation import RemovedInDjango50Warning
 
 
 @override_settings(ROOT_URLCONF="auth_tests.urls")
@@ -215,11 +222,14 @@ class CustomRemoteUserBackend(RemoteUserBackend):
         """
         return username.split("@")[0]
 
-    def configure_user(self, request, user):
+    def configure_user(self, request, user, created=True):
         """
         Sets user's email address using the email specified in an HTTP header.
+        Sets user's last name for existing users.
         """
         user.email = request.META.get(RemoteUserTest.email_header, "")
+        if not created:
+            user.last_name = user.username
         user.save()
         return user
 
@@ -242,8 +252,12 @@ class RemoteUserCustomTest(RemoteUserTest):
         should not have been configured with an email address.
         """
         super().test_known_user()
-        self.assertEqual(User.objects.get(username="knownuser").email, "")
-        self.assertEqual(User.objects.get(username="knownuser2").email, "")
+        knownuser = User.objects.get(username="knownuser")
+        knownuser2 = User.objects.get(username="knownuser2")
+        self.assertEqual(knownuser.email, "")
+        self.assertEqual(knownuser2.email, "")
+        self.assertEqual(knownuser.last_name, "knownuser")
+        self.assertEqual(knownuser2.last_name, "knownuser2")
 
     def test_unknown_user(self):
         """
@@ -260,11 +274,40 @@ class RemoteUserCustomTest(RemoteUserTest):
         )
         self.assertEqual(response.context["user"].username, "newuser")
         self.assertEqual(response.context["user"].email, "user@example.com")
+        self.assertEqual(response.context["user"].last_name, "")
         self.assertEqual(User.objects.count(), num_users + 1)
         newuser = User.objects.get(username="newuser")
         self.assertEqual(newuser.email, "user@example.com")
 
 
+# RemovedInDjango50Warning.
+class CustomRemoteUserNoCreatedArgumentBackend(CustomRemoteUserBackend):
+    def configure_user(self, request, user):
+        return super().configure_user(request, user)
+
+
+@ignore_warnings(category=RemovedInDjango50Warning)
+class RemoteUserCustomNoCreatedArgumentTest(RemoteUserTest):
+    backend = "auth_tests.test_remote_user.CustomRemoteUserNoCreatedArgumentBackend"
+
+
+@override_settings(ROOT_URLCONF="auth_tests.urls")
+@modify_settings(
+    AUTHENTICATION_BACKENDS={
+        "append": "auth_tests.test_remote_user.CustomRemoteUserNoCreatedArgumentBackend"
+    },
+    MIDDLEWARE={"append": "django.contrib.auth.middleware.RemoteUserMiddleware"},
+)
+class RemoteUserCustomNoCreatedArgumentDeprecationTest(TestCase):
+    def test_known_user_sync(self):
+        msg = (
+            "`created=True` must be added to the signature of "
+            "CustomRemoteUserNoCreatedArgumentBackend.configure_user()."
+        )
+        with self.assertWarnsMessage(RemovedInDjango50Warning, msg):
+            self.client.get("/remote_user/", **{RemoteUserTest.header: "newuser"})
+
+
 class CustomHeaderMiddleware(RemoteUserMiddleware):
     """
     Middleware that overrides custom HTTP auth user header.
+ git diff d90e34c61b27fba2527834806639eebbcfab9631
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Checking if build backend supports build_editable: started
  Checking if build backend supports build_editable: finished with status 'done'
  Getting requirements to build editable: started
  Getting requirements to build editable: finished with status 'done'
  Preparing editable metadata (pyproject.toml): started
  Preparing editable metadata (pyproject.toml): finished with status 'done'
Requirement already satisfied: asgiref>=3.4.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Django==4.1.dev20220310115719) (3.9.1)
Requirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Django==4.1.dev20220310115719) (0.5.3)
Requirement already satisfied: typing_extensions>=4 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from asgiref>=3.4.1->Django==4.1.dev20220310115719) (4.14.1)
Building wheels for collected packages: Django
  Building editable for Django (pyproject.toml): started
  Building editable for Django (pyproject.toml): finished with status 'done'
  Created wheel for Django: filename=django-4.1.dev20220310115719-0.editable-py3-none-any.whl size=27001 sha256=6458feff3ef0cc8bbc7fd4b0568a5243b1ab45c8959ec26e1f5ec776d108c6c8
  Stored in directory: /tmp/pip-ephem-wheel-cache-48bin4yl/wheels/7d/66/67/70d1ee2124ccf21d601c352e25cdca10f611f7c8b3f9ffb9e4
Successfully built Django
Installing collected packages: Django
  Attempting uninstall: Django
    Found existing installation: Django 4.1.dev20220310115719
    Uninstalling Django-4.1.dev20220310115719:
      Successfully uninstalled Django-4.1.dev20220310115719
Successfully installed Django-4.1.dev20220310115719
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git apply -v -
Checking patch django/db/migrations/operations/models.py...
Applied patch django/db/migrations/operations/models.py cleanly.
+ git apply -v -
Checking patch tests/test_coverup_django__django-15499.py...
Applied patch tests/test_coverup_django__django-15499.py cleanly.
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/db/migrations/operations/models\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-15499
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(django/db/migrations/operations/models\\.py)']
Testing against Django installed in '/testbed/django'
0.55 models.py(1): from django.db import models
0.55 models.py(2): from django.db.migrations.operations.base import Operation
0.55 models.py(3): from django.db.migrations.state import ModelState
0.56 models.py(4): from django.db.migrations.utils import field_references, resolve_relation
0.56 models.py(5): from django.db.models.options import normalize_together
0.56 models.py(6): from django.utils.functional import cached_property
0.56 models.py(8): from .fields import AddField, AlterField, FieldOperation, RemoveField, RenameField
0.56 models.py(11): def _check_for_duplicates(arg_name, objs):
0.56 models.py(21): class ModelOperation(Operation):
0.56 models.py(21): class ModelOperation(Operation):
0.56 models.py(22):     def __init__(self, name):
0.56 models.py(25):     @cached_property
0.56 models.py(26):     def name_lower(self):
0.56 models.py(29):     def references_model(self, name, app_label):
0.56 models.py(32):     def reduce(self, operation, app_label):
0.56 models.py(37):     def can_reduce_through(self, operation, app_label):
0.56 models.py(41): class CreateModel(ModelOperation):
0.56 models.py(41): class CreateModel(ModelOperation):
0.56 models.py(42):     """Create a model's table."""
0.56 models.py(44):     serialization_expand_args = ["fields", "options", "managers"]
0.56 models.py(46):     def __init__(self, name, fields, options=None, bases=None, managers=None):
0.56 models.py(68):     def deconstruct(self):
0.56 models.py(81):     def state_forwards(self, app_label, state):
0.56 models.py(93):     def database_forwards(self, app_label, schema_editor, from_state, to_state):
0.56 models.py(98):     def database_backwards(self, app_label, schema_editor, from_state, to_state):
0.56 models.py(103):     def describe(self):
0.56 models.py(109):     @property
0.56 models.py(110):     def migration_name_fragment(self):
0.56 models.py(113):     def references_model(self, name, app_label):
0.56 models.py(136):     def reduce(self, operation, app_label):
0.56 models.py(309): class DeleteModel(ModelOperation):
0.56 models.py(309): class DeleteModel(ModelOperation):
0.56 models.py(310):     """Drop a model's table."""
0.56 models.py(312):     def deconstruct(self):
0.56 models.py(318):     def state_forwards(self, app_label, state):
0.56 models.py(321):     def database_forwards(self, app_label, schema_editor, from_state, to_state):
0.56 models.py(326):     def database_backwards(self, app_label, schema_editor, from_state, to_state):
0.56 models.py(331):     def references_model(self, name, app_label):
0.56 models.py(336):     def describe(self):
0.56 models.py(339):     @property
0.56 models.py(340):     def migration_name_fragment(self):
0.56 models.py(344): class RenameModel(ModelOperation):
0.56 models.py(344): class RenameModel(ModelOperation):
0.56 models.py(345):     """Rename a model."""
0.56 models.py(347):     def __init__(self, old_name, new_name):
0.56 models.py(352):     @cached_property
0.56 models.py(353):     def old_name_lower(self):
0.56 models.py(356):     @cached_property
0.56 models.py(357):     def new_name_lower(self):
0.56 models.py(360):     def deconstruct(self):
0.56 models.py(367):     def state_forwards(self, app_label, state):
0.56 models.py(370):     def database_forwards(self, app_label, schema_editor, from_state, to_state):
0.56 models.py(427):     def database_backwards(self, app_label, schema_editor, from_state, to_state):
0.56 models.py(442):     def references_model(self, name, app_label):
0.56 models.py(447):     def describe(self):
0.56 models.py(450):     @property
0.56 models.py(451):     def migration_name_fragment(self):
0.56 models.py(454):     def reduce(self, operation, app_label):
0.56 models.py(472): class ModelOptionOperation(ModelOperation):
0.56 models.py(472): class ModelOptionOperation(ModelOperation):
0.56 models.py(473):     def reduce(self, operation, app_label):
0.56 models.py(482): class AlterModelTable(ModelOptionOperation):
0.56 models.py(482): class AlterModelTable(ModelOptionOperation):
0.56 models.py(483):     """Rename a model's table."""
0.56 models.py(485):     def __init__(self, name, table):
0.56 models.py(489):     def deconstruct(self):
0.56 models.py(496):     def state_forwards(self, app_label, state):
0.56 models.py(499):     def database_forwards(self, app_label, schema_editor, from_state, to_state):
0.56 models.py(519):     def database_backwards(self, app_label, schema_editor, from_state, to_state):
0.56 models.py(522):     def describe(self):
0.56 models.py(528):     @property
0.56 models.py(529):     def migration_name_fragment(self):
0.56 models.py(533): class AlterTogetherOptionOperation(ModelOptionOperation):
0.56 models.py(533): class AlterTogetherOptionOperation(ModelOptionOperation):
0.56 models.py(534):     option_name = None
0.56 models.py(536):     def __init__(self, name, option_value):
0.56 models.py(542):     @cached_property
0.56 models.py(543):     def option_value(self):
0.56 models.py(546):     def deconstruct(self):
0.56 models.py(553):     def state_forwards(self, app_label, state):
0.56 models.py(560):     def database_forwards(self, app_label, schema_editor, from_state, to_state):
0.56 models.py(571):     def database_backwards(self, app_label, schema_editor, from_state, to_state):
0.56 models.py(574):     def references_field(self, model_name, name, app_label):
0.56 models.py(580):     def describe(self):
0.56 models.py(587):     @property
0.56 models.py(588):     def migration_name_fragment(self):
0.56 models.py(591):     def can_reduce_through(self, operation, app_label):
0.56 models.py(598): class AlterUniqueTogether(AlterTogetherOptionOperation):
0.56 models.py(598): class AlterUniqueTogether(AlterTogetherOptionOperation):
0.56 models.py(599):     """
0.56 models.py(604):     option_name = "unique_together"
0.56 models.py(606):     def __init__(self, name, unique_together):
0.56 models.py(610): class AlterIndexTogether(AlterTogetherOptionOperation):
0.56 models.py(610): class AlterIndexTogether(AlterTogetherOptionOperation):
0.56 models.py(611):     """
0.56 models.py(616):     option_name = "index_together"
0.56 models.py(618):     def __init__(self, name, index_together):
0.56 models.py(622): class AlterOrderWithRespectTo(ModelOptionOperation):
0.56 models.py(622): class AlterOrderWithRespectTo(ModelOptionOperation):
0.56 models.py(623):     """Represent a change with the order_with_respect_to option."""
0.56 models.py(625):     option_name = "order_with_respect_to"
0.56 models.py(627):     def __init__(self, name, order_with_respect_to):
0.56 models.py(631):     def deconstruct(self):
0.56 models.py(638):     def state_forwards(self, app_label, state):
0.56 models.py(645):     def database_forwards(self, app_label, schema_editor, from_state, to_state):
0.56 models.py(671):     def database_backwards(self, app_label, schema_editor, from_state, to_state):
0.56 models.py(674):     def references_field(self, model_name, name, app_label):
0.56 models.py(679):     def describe(self):
0.56 models.py(685):     @property
0.56 models.py(686):     def migration_name_fragment(self):
0.56 models.py(690): class AlterModelOptions(ModelOptionOperation):
0.56 models.py(690): class AlterModelOptions(ModelOptionOperation):
0.56 models.py(691):     """
0.56 models.py(698):     ALTER_OPTION_KEYS = [
0.56 models.py(712):     def __init__(self, name, options):
0.56 models.py(716):     def deconstruct(self):
0.56 models.py(723):     def state_forwards(self, app_label, state):
0.56 models.py(731):     def database_forwards(self, app_label, schema_editor, from_state, to_state):
0.56 models.py(734):     def database_backwards(self, app_label, schema_editor, from_state, to_state):
0.56 models.py(737):     def describe(self):
0.56 models.py(740):     @property
0.56 models.py(741):     def migration_name_fragment(self):
0.56 models.py(745): class AlterModelManagers(ModelOptionOperation):
0.56 models.py(745): class AlterModelManagers(ModelOptionOperation):
0.56 test_create_model_and_alter_model_managers_not_optimized (test_coverup_django__django-15499.MigrationOptimizationTest)
Test that CreateModel followed by AlterModelManagers is optimized ... models.py(746):     """Alter the model's managers."""
0.56 models.py(748):     serialization_expand_args = ["managers"]
0.56 models.py(750):     def __init__(self, name, managers):
0.56 models.py(754):     def deconstruct(self):
0.56 models.py(757):     def state_forwards(self, app_label, state):
0.56 models.py(760):     def database_forwards(self, app_label, schema_editor, from_state, to_state):
0.56 models.py(763):     def database_backwards(self, app_label, schema_editor, from_state, to_state):
0.56 models.py(766):     def describe(self):
0.56 models.py(769):     @property
0.56 models.py(770):     def migration_name_fragment(self):
0.56 models.py(774): class IndexOperation(Operation):
0.56 models.py(774): class IndexOperation(Operation):
0.56 models.py(775):     option_name = "indexes"
0.56 models.py(777):     @cached_property
0.56 models.py(778):     def model_name_lower(self):
0.56 models.py(782): class AddIndex(IndexOperation):
0.56 models.py(782): class AddIndex(IndexOperation):
0.56 models.py(783):     """Add an index on a model."""
0.56 models.py(785):     def __init__(self, model_name, index):
0.56 models.py(794):     def state_forwards(self, app_label, state):
0.56 models.py(797):     def database_forwards(self, app_label, schema_editor, from_state, to_state):
0.56 models.py(802):     def database_backwards(self, app_label, schema_editor, from_state, to_state):
0.56 models.py(807):     def deconstruct(self):
0.56 models.py(818):     def describe(self):
0.56 models.py(831):     @property
0.56 models.py(832):     def migration_name_fragment(self):
0.56 models.py(836): class RemoveIndex(IndexOperation):
0.56 models.py(836): class RemoveIndex(IndexOperation):
0.56 models.py(837):     """Remove an index from a model."""
0.56 models.py(839):     def __init__(self, model_name, name):
0.56 models.py(843):     def state_forwards(self, app_label, state):
0.56 models.py(846):     def database_forwards(self, app_label, schema_editor, from_state, to_state):
0.56 models.py(853):     def database_backwards(self, app_label, schema_editor, from_state, to_state):
0.56 models.py(860):     def deconstruct(self):
0.56 models.py(871):     def describe(self):
0.56 models.py(874):     @property
0.56 models.py(875):     def migration_name_fragment(self):
0.56 models.py(879): class AddConstraint(IndexOperation):
0.56 models.py(879): class AddConstraint(IndexOperation):
0.56 models.py(880):     option_name = "constraints"
0.56 models.py(882):     def __init__(self, model_name, constraint):
0.56 models.py(886):     def state_forwards(self, app_label, state):
0.56 models.py(889):     def database_forwards(self, app_label, schema_editor, from_state, to_state):
0.56 models.py(894):     def database_backwards(self, app_label, schema_editor, from_state, to_state):
0.56 models.py(899):     def deconstruct(self):
0.56 models.py(909):     def describe(self):
0.56 models.py(915):     @property
0.56 models.py(916):     def migration_name_fragment(self):
0.56 models.py(920): class RemoveConstraint(IndexOperation):
0.56 models.py(920): class RemoveConstraint(IndexOperation):
0.56 models.py(921):     option_name = "constraints"
0.56 models.py(923):     def __init__(self, model_name, name):
0.56 models.py(927):     def state_forwards(self, app_label, state):
0.56 models.py(930):     def database_forwards(self, app_label, schema_editor, from_state, to_state):
0.56 models.py(937):     def database_backwards(self, app_label, schema_editor, from_state, to_state):
0.56 models.py(944):     def deconstruct(self):
0.56 models.py(954):     def describe(self):
0.56 models.py(957):     @property
0.56 models.py(958):     def migration_name_fragment(self):
Found 1 test(s).
Skipping setup of unused database(s): default, other.
System check identified no issues (0 silenced).
0.75 models.py(47):         self.fields = fields
0.75 models.py(48):         self.options = options or {}
0.75 models.py(49):         self.bases = bases or (models.Model,)
0.75 models.py(50):         self.managers = managers or []
0.75 models.py(51):         super().__init__(name)
0.75 models.py(23):         self.name = name
0.75 models.py(54):         _check_for_duplicates("fields", (name for name, _ in self.fields))
0.75 models.py(12):     used_vals = set()
0.75 models.py(13):     for val in objs:
0.75 models.py(54):         _check_for_duplicates("fields", (name for name, _ in self.fields))
0.75 models.py(14):         if val in used_vals:
0.75 models.py(18):         used_vals.add(val)
0.75 models.py(13):     for val in objs:
0.75 models.py(54):         _check_for_duplicates("fields", (name for name, _ in self.fields))
0.75 models.py(55):         _check_for_duplicates(
0.75 models.py(56):             "bases",
0.75 models.py(57):             (
0.75 models.py(63):                 for base in self.bases
0.75 models.py(57):             (
0.75 models.py(55):         _check_for_duplicates(
0.75 models.py(12):     used_vals = set()
0.75 models.py(13):     for val in objs:
0.75 models.py(57):             (
0.75 models.py(63):                 for base in self.bases
0.75 models.py(59):                 if hasattr(base, "_meta")
0.75 models.py(58):                 base._meta.label_lower
0.75 models.py(61):                 if isinstance(base, str)
0.75 models.py(60):                 else base.lower()
0.75 models.py(62):                 else base
0.75 models.py(14):         if val in used_vals:
0.75 models.py(18):         used_vals.add(val)
0.75 models.py(13):     for val in objs:
0.75 models.py(57):             (
0.75 models.py(66):         _check_for_duplicates("managers", (name for name, _ in self.managers))
0.75 models.py(12):     used_vals = set()
0.75 models.py(13):     for val in objs:
0.75 models.py(66):         _check_for_duplicates("managers", (name for name, _ in self.managers))
0.75 models.py(751):         self.managers = managers
0.75 models.py(752):         super().__init__(name)
0.75 models.py(23):         self.name = name
0.75 models.py(138):             isinstance(operation, DeleteModel)
0.75 models.py(137):         if (
0.75 models.py(144):             isinstance(operation, RenameModel)
0.75 models.py(143):         elif (
0.75 models.py(157):             isinstance(operation, AlterModelOptions)
0.75 models.py(156):         elif (
0.75 models.py(174):             isinstance(operation, AlterModelManagers)
0.75 models.py(173):         elif (
0.75 models.py(175):             and self.name_lower == operation.name_lower
0.75 models.py(27):         return self.name.lower()
0.75 models.py(27):         return self.name.lower()
0.75 models.py(173):         elif (
0.75 models.py(178):                 CreateModel(
0.75 models.py(179):                     self.name,
0.75 models.py(180):                     fields=self.fields,
0.75 models.py(181):                     options=self.options,
0.75 models.py(182):                     bases=self.bases,
0.75 models.py(183):                     managers=operation.managers,
0.75 models.py(178):                 CreateModel(
0.75 models.py(47):         self.fields = fields
0.75 models.py(48):         self.options = options or {}
0.75 models.py(49):         self.bases = bases or (models.Model,)
0.75 models.py(50):         self.managers = managers or []
0.75 models.py(51):         super().__init__(name)
0.75 models.py(23):         self.name = name
0.75 models.py(54):         _check_for_duplicates("fields", (name for name, _ in self.fields))
0.75 models.py(12):     used_vals = set()
0.75 models.py(13):     for val in objs:
0.75 models.py(54):         _check_for_duplicates("fields", (name for name, _ in self.fields))
0.75 models.py(14):         if val in used_vals:
0.75 models.py(18):         used_vals.add(val)
0.75 models.py(13):     for val in objs:
0.75 models.py(54):         _check_for_duplicates("fields", (name for name, _ in self.fields))
0.75 models.py(55):         _check_for_duplicates(
0.75 models.py(56):             "bases",
0.75 models.py(57):             (
0.75 models.py(63):                 for base in self.bases
0.75 models.py(57):             (
0.75 models.py(55):         _check_for_duplicates(
0.75 models.py(12):     used_vals = set()
0.75 ok

----------------------------------------------------------------------
Ran 1 test in 0.001s

OK
models.py(13):     for val in objs:
0.75 models.py(57):             (
0.75 models.py(63):                 for base in self.bases
0.75 models.py(59):                 if hasattr(base, "_meta")
0.75 models.py(58):                 base._meta.label_lower
0.75 models.py(61):                 if isinstance(base, str)
0.75 models.py(60):                 else base.lower()
0.75 models.py(62):                 else base
0.75 models.py(14):         if val in used_vals:
0.75 models.py(18):         used_vals.add(val)
0.75 models.py(13):     for val in objs:
0.75 models.py(57):             (
0.75 models.py(66):         _check_for_duplicates("managers", (name for name, _ in self.managers))
0.75 models.py(12):     used_vals = set()
0.75 models.py(13):     for val in objs:
0.75 models.py(66):         _check_for_duplicates("managers", (name for name, _ in self.managers))
0.75 models.py(14):         if val in used_vals:
0.75 models.py(18):         used_vals.add(val)
0.75 models.py(13):     for val in objs:
0.75 models.py(66):         _check_for_duplicates("managers", (name for name, _ in self.managers))
0.75 models.py(177):             return [
+ cat coverage.cover
{"/testbed/django/db/migrations/operations/models.py": {"1": 1, "2": 1, "3": 1, "4": 1, "5": 1, "6": 1, "8": 1, "11": 1, "21": 2, "41": 2, "309": 2, "344": 2, "472": 2, "482": 2, "533": 2, "598": 2, "610": 2, "622": 2, "690": 2, "745": 2, "774": 2, "782": 2, "836": 2, "879": 2, "920": 2, "12": 6, "13": 11, "14": 5, "15": 0, "16": 0, "18": 5, "22": 1, "25": 1, "26": 1, "29": 1, "32": 1, "37": 1, "23": 3, "27": 2, "30": 0, "33": 0, "34": 0, "38": 0, "44": 1, "46": 1, "68": 1, "81": 1, "93": 1, "98": 1, "103": 1, "109": 1, "110": 1, "113": 1, "136": 1, "47": 2, "48": 2, "49": 2, "50": 2, "51": 2, "54": 6, "55": 4, "56": 2, "57": 8, "63": 4, "66": 5, "59": 2, "58": 2, "61": 2, "60": 2, "62": 2, "70": 0, "71": 0, "69": 0, "73": 0, "74": 0, "75": 0, "76": 0, "77": 0, "78": 0, "79": 0, "82": 0, "83": 0, "84": 0, "85": 0, "86": 0, "87": 0, "88": 0, "89": 0, "94": 0, "95": 0, "96": 0, "99": 0, "100": 0, "101": 0, "104": 0, "105": 0, "106": 0, "111": 0, "114": 0, "115": 0, "116": 0, "119": 0, "120": 0, "122": 0, "121": 0, "123": 0, "124": 0, "126": 0, "129": 0, "130": 0, "131": 0, "133": 0, "134": 0, "138": 1, "137": 1, "139": 0, "140": 0, "142": 0, "144": 1, "143": 1, "145": 0, "148": 0, "149": 0, "150": 0, "151": 0, "152": 0, "153": 0, "147": 0, "157": 1, "156": 1, "158": 0, "160": 0, "161": 0, "162": 0, "163": 0, "165": 0, "166": 0, "167": 0, "168": 0, "169": 0, "170": 0, "164": 0, "174": 1, "173": 2, "175": 1, "178": 2, "179": 1, "180": 1, "181": 1, "182": 1, "183": 1, "177": 1, "187": 0, "186": 0, "188": 0, "191": 0, "192": 0, "193": 0, "194": 0, "195": 0, "196": 0, "198": 0, "199": 0, "190": 0, "203": 0, "202": 0, "204": 0, "207": 0, "208": 0, "209": 0, "210": 0, "211": 0, "212": 0, "214": 0, "215": 0, "206": 0, "219": 0, "218": 0, "220": 0, "222": 0, "224": 0, "225": 0, "226": 0, "227": 0, "228": 0, "229": 0, "223": 0, "232": 0, "234": 0, "235": 0, "236": 0, "238": 0, "240": 0, "241": 0, "242": 0, "233": 0, "245": 0, "246": 0, "247": 0, "248": 0, "249": 0, "250": 0, "251": 0, "252": 0, "253": 0, "257": 0, "261": 0, "262": 0, "263": 0, "264": 0, "265": 0, "267": 0, "268": 0, "269": 0, "271": 0, "274": 0, "275": 0, "276": 0, "266": 0, "279": 0, "280": 0, "281": 0, "282": 0, "283": 0, "284": 0, "289": 0, "291": 0, "292": 0, "293": 0, "295": 0, "296": 0, "297": 0, "299": 0, "301": 0, "302": 0, "303": 0, "294": 0, "306": 0, "237": 0, "254": 0, "255": 0, "272": 0, "270": 0, "285": 0, "287": 0, "286": 0, "298": 0, "312": 1, "318": 1, "321": 1, "326": 1, "331": 1, "336": 1, "339": 1, "340": 1, "314": 0, "313": 0, "316": 0, "319": 0, "322": 0, "323": 0, "324": 0, "327": 0, "328": 0, "329": 0, "334": 0, "337": 0, "341": 0, "347": 1, "352": 1, "353": 1, "356": 1, "357": 1, "360": 1, "367": 1, "370": 1, "427": 1, "442": 1, "447": 1, "450": 1, "451": 1, "454": 1, "348": 0, "349": 0, "350": 0, "354": 0, "358": 0, "362": 0, "363": 0, "361": 0, "365": 0, "368": 0, "371": 0, "372": 0, "373": 0, "374": 0, "375": 0, "377": 0, "378": 0, "380": 0, "382": 0, "383": 0, "384": 0, "385": 0, "387": 0, "389": 0, "390": 0, "388": 0, "392": 0, "393": 0, "395": 0, "396": 0, "397": 0, "398": 0, "401": 0, "402": 0, "404": 0, "407": 0, "406": 0, "408": 0, "410": 0, "412": 0, "413": 0, "414": 0, "415": 0, "416": 0, "417": 0, "421": 0, "422": 0, "423": 0, "424": 0, "429": 0, "430": 0, "428": 0, "432": 0, "434": 0, "437": 0, "438": 0, "436": 0, "440": 0, "444": 0, "443": 0, "448": 0, "452": 0, "456": 0, "455": 0, "457": 0, "460": 0, "461": 0, "462": 0, "459": 0, "467": 0, "468": 0, "469": 0, "473": 1, "475": 0, "474": 0, "476": 0, "478": 0, "479": 0, "485": 1, "489": 1, "496": 1, "499": 1, "519": 1, "522": 1, "528": 1, "529": 1, "486": 0, "487": 0, "491": 0, "492": 0, "490": 0, "494": 0, "497": 0, "500": 0, "501": 0, "502": 0, "503": 0, "504": 0, "505": 0, "506": 0, "509": 0, "510": 0, "512": 0, "513": 0, "514": 0, "515": 0, "516": 0, "520": 0, "523": 0, "524": 0, "525": 0, "530": 0, "534": 1, "536": 1, "542": 1, "543": 1, "546": 1, "553": 1, "560": 1, "571": 1, "574": 1, "580": 1, "587": 1, "588": 1, "591": 1, "537": 0, "538": 0, "539": 0, "540": 0, "544": 0, "548": 0, "549": 0, "547": 0, "551": 0, "554": 0, "555": 0, "556": 0, "557": 0, "561": 0, "562": 0, "563": 0, "564": 0, "565": 0, "566": 0, "567": 0, "568": 0, "572": 0, "575": 0, "576": 0, "577": 0, "581": 0, "582": 0, "583": 0, "584": 0, "589": 0, "592": 0, "593": 0, "594": 0, "604": 1, "606": 1, "607": 0, "616": 1, "618": 1, "619": 0, "625": 1, "627": 1, "631": 1, "638": 1, "645": 1, "671": 1, "674": 1, "679": 1, "685": 1, "686": 1, "628": 0, "629": 0, "633": 0, "634": 0, "632": 0, "636": 0, "639": 0, "640": 0, "641": 0, "642": 0, "646": 0, "647": 0, "648": 0, "651": 0, "650": 0, "652": 0, "654": 0, "655": 0, "660": 0, "659": 0, "661": 0, "663": 0, "664": 0, "665": 0, "666": 0, "667": 0, "668": 0, "672": 0, "675": 0, "676": 0, "680": 0, "681": 0, "682": 0, "687": 0, "698": 1, "712": 1, "716": 1, "723": 1, "731": 1, "734": 1, "737": 1, "740": 1, "741": 1, "713": 0, "714": 0, "718": 0, "719": 0, "717": 0, "721": 0, "724": 0, "725": 0, "726": 0, "727": 0, "728": 0, "732": 0, "735": 0, "738": 0, "742": 0, "748": 1, "750": 1, "754": 1, "757": 1, "760": 1, "763": 1, "766": 1, "769": 1, "770": 1, "751": 1, "752": 1, "755": 0, "758": 0, "761": 0, "764": 0, "767": 0, "771": 0, "775": 1, "777": 1, "778": 1, "779": 0, "785": 1, "794": 1, "797": 1, "802": 1, "807": 1, "818": 1, "831": 1, "832": 1, "786": 0, "787": 0, "788": 0, "789": 0, "790": 0, "792": 0, "795": 0, "798": 0, "799": 0, "800": 0, "803": 0, "804": 0, "805": 0, "809": 0, "810": 0, "808": 0, "813": 0, "814": 0, "815": 0, "812": 0, "819": 0, "820": 0, "821": 0, "822": 0, "823": 0, "825": 0, "826": 0, "827": 0, "828": 0, "833": 0, "839": 1, "843": 1, "846": 1, "853": 1, "860": 1, "871": 1, "874": 1, "875": 1, "840": 0, "841": 0, "844": 0, "847": 0, "848": 0, "849": 0, "850": 0, "851": 0, "854": 0, "855": 0, "856": 0, "857": 0, "858": 0, "862": 0, "863": 0, "861": 0, "866": 0, "867": 0, "868": 0, "865": 0, "872": 0, "876": 0, "880": 1, "882": 1, "886": 1, "889": 1, "894": 1, "899": 1, "909": 1, "915": 1, "916": 1, "883": 0, "884": 0, "887": 0, "890": 0, "891": 0, "892": 0, "895": 0, "896": 0, "897": 0, "901": 0, "902": 0, "904": 0, "905": 0, "903": 0, "900": 0, "910": 0, "911": 0, "912": 0, "917": 0, "921": 1, "923": 1, "927": 1, "930": 1, "937": 1, "944": 1, "954": 1, "957": 1, "958": 1, "924": 0, "925": 0, "928": 0, "931": 0, "932": 0, "933": 0, "934": 0, "935": 0, "938": 0, "939": 0, "940": 0, "941": 0, "942": 0, "946": 0, "947": 0, "949": 0, "950": 0, "948": 0, "945": 0, "955": 0, "959": 0}}
+ git checkout d90e34c61b27fba2527834806639eebbcfab9631
Note: switching to 'd90e34c61b27fba2527834806639eebbcfab9631'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at d90e34c61b Fixed #33561 -- Allowed synchronization of user attributes in RemoteUserBackend.
M	django/db/migrations/operations/models.py
+ git apply /root/pre_state.patch
error: unrecognized input
