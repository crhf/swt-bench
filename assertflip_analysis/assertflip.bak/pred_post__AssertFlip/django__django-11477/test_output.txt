+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD e28671187903e6aca2428374fdd504fca3032aee
+ sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen
+ locale-gen
Generating locales (this might take a while)...
  en_US.UTF-8... done
Generation complete.
+ export LANG=en_US.UTF-8
+ LANG=en_US.UTF-8
+ export LANGUAGE=en_US:en
+ LANGUAGE=en_US:en
+ export LC_ALL=en_US.UTF-8
+ LC_ALL=en_US.UTF-8
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
nothing to commit, working tree clean
+ git show
commit e28671187903e6aca2428374fdd504fca3032aee
Author: Tom Forbes <tom@tomforb.es>
Date:   Mon Jun 24 08:48:59 2019 +0100

    Simplified handling of non-existent paths in autoreloader with Path.resolve(strict=True).

diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py
index 9a3b10bf20..d33ee9096d 100644
--- a/django/utils/autoreload.py
+++ b/django/utils/autoreload.py
@@ -136,11 +136,13 @@ def iter_modules_and_files(modules, extra_files):
         if not filename:
             continue
         path = pathlib.Path(filename)
-        if not path.exists():
+        try:
+            resolved_path = path.resolve(strict=True).absolute()
+        except FileNotFoundError:
             # The module could have been removed, don't fail loudly if this
             # is the case.
             continue
-        results.add(path.resolve().absolute())
+        results.add(resolved_path)
     return frozenset(results)
 
 
@@ -182,14 +184,15 @@ def sys_path_directories():
     """
     for path in sys.path:
         path = Path(path)
-        if not path.exists():
+        try:
+            resolved_path = path.resolve(strict=True).absolute()
+        except FileNotFoundError:
             continue
-        path = path.resolve().absolute()
         # If the path is a file (like a zip file), watch the parent directory.
-        if path.is_file():
-            yield path.parent
+        if resolved_path.is_file():
+            yield resolved_path.parent
         else:
-            yield path
+            yield resolved_path
 
 
 def get_child_arguments():
+ git diff e28671187903e6aca2428374fdd504fca3032aee
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
Requirement already satisfied: pytz in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.0.dev20190624074859) (2025.2)
Requirement already satisfied: sqlparse in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.0.dev20190624074859) (0.4.4)
Requirement already satisfied: asgiref in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.0.dev20190624074859) (3.4.1)
Requirement already satisfied: typing-extensions in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from asgiref->Django==3.0.dev20190624074859) (4.1.1)
Installing collected packages: Django
  Attempting uninstall: Django
    Found existing installation: Django 3.0.dev20190624074859
    Uninstalling Django-3.0.dev20190624074859:
      Successfully uninstalled Django-3.0.dev20190624074859
  Running setup.py develop for Django
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv
Successfully installed Django-3.0.dev20190624074859
+ git apply -v -
Checking patch django/urls/resolvers.py...
Applied patch django/urls/resolvers.py cleanly.
+ git apply -v -
<stdin>:27: trailing whitespace.
        
Checking patch tests/test_coverup_django__django-11477.py...
<stdin>:30: new blank line at EOF.
+
Applied patch tests/test_coverup_django__django-11477.py cleanly.
warning: 2 lines add whitespace errors.
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/urls/resolvers\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-11477
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(django/urls/resolvers\\.py)']
0.37 resolvers.py(7): """
0.37 resolvers.py(8): import functools
0.37 resolvers.py(9): import inspect
0.37 resolvers.py(10): import re
0.37 resolvers.py(11): from importlib import import_module
0.37 resolvers.py(12): from urllib.parse import quote
0.37 resolvers.py(14): from asgiref.local import Local
0.37 resolvers.py(16): from django.conf import settings
0.37 resolvers.py(17): from django.core.checks import Error, Warning
0.37 resolvers.py(18): from django.core.checks.urls import check_resolver
0.37 resolvers.py(19): from django.core.exceptions import ImproperlyConfigured, ViewDoesNotExist
0.37 resolvers.py(20): from django.utils.datastructures import MultiValueDict
0.37 resolvers.py(21): from django.utils.functional import cached_property
0.37 resolvers.py(22): from django.utils.http import RFC3986_SUBDELIMS, escape_leading_slashes
0.37 resolvers.py(23): from django.utils.regex_helper import normalize
0.37 resolvers.py(24): from django.utils.translation import get_language
0.37 resolvers.py(26): from .converters import get_converter
0.37 resolvers.py(27): from .exceptions import NoReverseMatch, Resolver404
0.37 resolvers.py(28): from .utils import get_callable
0.37 resolvers.py(31): class ResolverMatch:
0.37 resolvers.py(31): class ResolverMatch:
0.37 resolvers.py(32):     def __init__(self, func, args, kwargs, url_name=None, app_names=None, namespaces=None, route=None):
0.37 resolvers.py(56):     def __getitem__(self, index):
0.37 resolvers.py(59):     def __repr__(self):
0.37 resolvers.py(66): @functools.lru_cache(maxsize=None)
0.37 resolvers.py(67): def get_resolver(urlconf=None):
0.37 resolvers.py(73): @functools.lru_cache(maxsize=None)
0.37 resolvers.py(84): class LocaleRegexDescriptor:
0.37 resolvers.py(84): class LocaleRegexDescriptor:
0.37 resolvers.py(85):     def __init__(self, attr):
0.37 resolvers.py(88):     def __get__(self, instance, cls=None):
0.37 resolvers.py(107): class CheckURLMixin:
0.37 resolvers.py(107): class CheckURLMixin:
0.37 resolvers.py(108):     def describe(self):
0.37 resolvers.py(117):     def _check_pattern_startswith_slash(self):
0.37 resolvers.py(140): class RegexPattern(CheckURLMixin):
0.37 resolvers.py(140): class RegexPattern(CheckURLMixin):
0.37 resolvers.py(141):     regex = LocaleRegexDescriptor('_regex')
0.37 resolvers.py(86):         self.attr = attr
0.37 resolvers.py(143):     def __init__(self, regex, name=None, is_endpoint=False):
0.37 resolvers.py(150):     def match(self, path):
0.37 resolvers.py(161):     def check(self):
0.37 resolvers.py(168):     def _check_include_trailing_dollar(self):
0.37 resolvers.py(180):     def _compile(self, regex):
0.37 resolvers.py(189):     def __str__(self):
0.37 resolvers.py(193): _PATH_PARAMETER_COMPONENT_RE = re.compile(
0.37 resolvers.py(194):     r'<(?:(?P<converter>[^>:]+):)?(?P<parameter>\w+)>'
0.37 resolvers.py(198): def _route_to_regex(route, is_endpoint=False):
0.37 resolvers.py(238): class RoutePattern(CheckURLMixin):
0.37 resolvers.py(238): class RoutePattern(CheckURLMixin):
0.37 resolvers.py(239):     regex = LocaleRegexDescriptor('_route')
0.37 resolvers.py(86):         self.attr = attr
0.37 resolvers.py(241):     def __init__(self, route, name=None, is_endpoint=False):
0.37 resolvers.py(248):     def match(self, path):
0.37 resolvers.py(262):     def check(self):
0.37 resolvers.py(274):     def _compile(self, route):
0.37 resolvers.py(277):     def __str__(self):
0.37 resolvers.py(281): class LocalePrefixPattern:
0.37 resolvers.py(281): class LocalePrefixPattern:
0.37 resolvers.py(282):     def __init__(self, prefix_default_language=True):
0.37 resolvers.py(286):     @property
0.37 resolvers.py(291):     @property
0.37 resolvers.py(299):     def match(self, path):
0.37 resolvers.py(305):     def check(self):
0.37 resolvers.py(308):     def describe(self):
0.37 resolvers.py(311):     def __str__(self):
0.37 resolvers.py(315): class URLPattern:
0.37 resolvers.py(315): class URLPattern:
0.37 resolvers.py(316):     def __init__(self, pattern, callback, default_args=None, name=None):
0.37 resolvers.py(322):     def __repr__(self):
0.37 resolvers.py(325):     def check(self):
0.37 resolvers.py(330):     def _check_pattern_name(self):
0.37 resolvers.py(344):     def resolve(self, path):
0.37 resolvers.py(352):     @cached_property
0.37 resolvers.py(366): class URLResolver:
0.37 resolvers.py(366): class URLResolver:
0.37 resolvers.py(367):     def __init__(self, pattern, urlconf_name, default_kwargs=None, app_name=None, namespace=None):
0.37 resolvers.py(386):     def __repr__(self):
0.37 resolvers.py(397):     def check(self):
0.37 resolvers.py(404):     def _check_custom_error_handlers(self):
0.37 resolvers.py(434):     def _populate(self):
0.37 resolvers.py(495):     @property
0.37 resolvers.py(502):     @property
0.37 resolvers.py(509):     @property
0.37 resolvers.py(516):     @staticmethod
0.37 resolvers.py(525):     def _is_callback(self, name):
0.37 resolvers.py(530):     def resolve(self, path):
0.37 resolvers.py(570):     @cached_property
0.37 resolvers.py(577):     @cached_property
0.37 resolvers.py(592):     def resolve_error_handler(self, view_type):
0.37 resolvers.py(601):     def reverse(self, lookup_view, *args, **kwargs):
0.37 resolvers.py(604):     def _reverse_with_prefix(self, lookup_view, _prefix, *args, **kwargs):
Testing against Django installed in '/testbed/django'
Skipping setup of unused database(s): default, other.
0.67 resolvers.py(68):     if urlconf is None:
0.67 resolvers.py(69):         urlconf = settings.ROOT_URLCONF
0.67 resolvers.py(70):     return URLResolver(RegexPattern(r'^/'), urlconf)
0.67 resolvers.py(144):         self._regex = regex
0.67 resolvers.py(145):         self._regex_dict = {}
0.67 resolvers.py(146):         self._is_endpoint = is_endpoint
0.67 resolvers.py(147):         self.name = name
0.67 resolvers.py(148):         self.converters = {}
0.67 resolvers.py(368):         self.pattern = pattern
0.67 resolvers.py(372):         self.urlconf_name = urlconf_name
0.67 resolvers.py(373):         self.callback = None
0.67 resolvers.py(374):         self.default_kwargs = default_kwargs or {}
0.67 resolvers.py(375):         self.namespace = namespace
0.67 resolvers.py(376):         self.app_name = app_name
0.67 resolvers.py(377):         self._reverse_dict = {}
0.67 resolvers.py(378):         self._namespace_dict = {}
0.67 resolvers.py(379):         self._app_dict = {}
0.67 resolvers.py(382):         self._callback_strs = set()
0.67 resolvers.py(383):         self._populated = False
0.67 resolvers.py(384):         self._local = Local()
0.67 resolvers.py(580):         patterns = getattr(self.urlconf_module, "urlpatterns", self.urlconf_module)
0.67 resolvers.py(572):         if isinstance(self.urlconf_name, str):
0.67 resolvers.py(573):             return import_module(self.urlconf_name)
0.67 resolvers.py(581):         try:
0.67 resolvers.py(582):             iter(patterns)
0.67 resolvers.py(590):         return patterns
0.67 resolvers.py(398):         messages = []
0.67 resolvers.py(399):         for pattern in self.url_patterns:
0.67 resolvers.py(401):         messages.extend(self._check_custom_error_handlers())
0.67 resolvers.py(405):         messages = []
0.67 resolvers.py(408):         for status_code, num_parameters in [(400, 2), (403, 2), (404, 2), (500, 1)]:
0.67 resolvers.py(409):             try:
0.67 resolvers.py(410):                 handler, param_dict = self.resolve_error_handler(status_code)
0.67 resolvers.py(593):         callback = getattr(self.urlconf_module, 'handler%s' % view_type, None)
0.67 resolvers.py(594):         if not callback:
0.67 resolvers.py(597):             from django.conf import urls
0.68 resolvers.py(598):             callback = getattr(urls, 'handler%s' % view_type)
0.68 resolvers.py(599):         return get_callable(callback), {}
0.68 resolvers.py(418):             signature = inspect.signature(handler)
0.68 resolvers.py(419):             args = [None] * num_parameters
0.68 resolvers.py(420):             try:
0.68 resolvers.py(421):                 signature.bind(*args)
test_translate_url_with_missing_optional_param (test_coverup_django__django-11477.TranslateUrlBugTest) ... 0.68 resolvers.py(408):         for status_code, num_parameters in [(400, 2), (403, 2), (404, 2), (500, 1)]:
0.68 resolvers.py(409):             try:
0.68 resolvers.py(410):                 handler, param_dict = self.resolve_error_handler(status_code)
0.68 resolvers.py(593):         callback = getattr(self.urlconf_module, 'handler%s' % view_type, None)
0.68 resolvers.py(594):         if not callback:
0.68 resolvers.py(597):             from django.conf import urls
0.68 resolvers.py(598):             callback = getattr(urls, 'handler%s' % view_type)
0.68 resolvers.py(599):         return get_callable(callback), {}
0.68 resolvers.py(418):             signature = inspect.signature(handler)
0.68 resolvers.py(419):             args = [None] * num_parameters
0.68 resolvers.py(420):             try:
0.68 resolvers.py(421):                 signature.bind(*args)
0.68 resolvers.py(408):         for status_code, num_parameters in [(400, 2), (403, 2), (404, 2), (500, 1)]:
0.68 resolvers.py(409):             try:
0.68 resolvers.py(410):                 handler, param_dict = self.resolve_error_handler(status_code)
0.68 resolvers.py(593):         callback = getattr(self.urlconf_module, 'handler%s' % view_type, None)
0.68 resolvers.py(594):         if not callback:
0.68 resolvers.py(597):             from django.conf import urls
0.68 resolvers.py(598):             callback = getattr(urls, 'handler%s' % view_type)
0.68 resolvers.py(599):         return get_callable(callback), {}
0.68 resolvers.py(418):             signature = inspect.signature(handler)
0.68 resolvers.py(419):             args = [None] * num_parameters
0.68 resolvers.py(420):             try:
0.68 resolvers.py(421):                 signature.bind(*args)
0.68 resolvers.py(408):         for status_code, num_parameters in [(400, 2), (403, 2), (404, 2), (500, 1)]:
0.68 resolvers.py(409):             try:
0.68 resolvers.py(410):                 handler, param_dict = self.resolve_error_handler(status_code)
0.68 resolvers.py(593):         callback = getattr(self.urlconf_module, 'handler%s' % view_type, None)
0.68 resolvers.py(594):         if not callback:
0.68 resolvers.py(597):             from django.conf import urls
0.68 resolvers.py(598):             callback = getattr(urls, 'handler%s' % view_type)
0.68 resolvers.py(599):         return get_callable(callback), {}
0.68 resolvers.py(418):             signature = inspect.signature(handler)
0.68 resolvers.py(419):             args = [None] * num_parameters
0.68 resolvers.py(420):             try:
0.68 resolvers.py(421):                 signature.bind(*args)
0.68 resolvers.py(408):         for status_code, num_parameters in [(400, 2), (403, 2), (404, 2), (500, 1)]:
0.68 resolvers.py(432):         return messages
0.68 resolvers.py(402):         return messages or self.pattern.check()
0.68 resolvers.py(162):         warnings = []
0.68 resolvers.py(163):         warnings.extend(self._check_pattern_startswith_slash())
0.68 resolvers.py(121):         regex_pattern = self.regex.pattern
0.68 resolvers.py(92):         if instance is None:
0.68 resolvers.py(97):         pattern = getattr(instance, self.attr)
0.68 resolvers.py(98):         if isinstance(pattern, str):
0.68 resolvers.py(99):             instance.__dict__['regex'] = instance._compile(pattern)
0.68 resolvers.py(182):         try:
0.68 resolvers.py(183):             return re.compile(regex)
0.68 resolvers.py(100):             return instance.__dict__['regex']
0.68 resolvers.py(122):         if not settings.APPEND_SLASH:
0.68 resolvers.py(126):         if regex_pattern.startswith(('/', '^/', '^\\/')) and not regex_pattern.endswith('/'):
0.68 resolvers.py(137):             return []
0.68 resolvers.py(164):         if not self._is_endpoint:
0.68 resolvers.py(165):             warnings.extend(self._check_include_trailing_dollar())
0.68 resolvers.py(169):         regex_pattern = self.regex.pattern
0.68 resolvers.py(170):         if regex_pattern.endswith('$') and not regex_pattern.endswith(r'\$'):
0.68 resolvers.py(178):             return []
0.68 resolvers.py(166):         return warnings
System check identified no issues (0 silenced).
0.71 resolvers.py(144):         self._regex = regex
0.71 resolvers.py(145):         self._regex_dict = {}
0.71 resolvers.py(146):         self._is_endpoint = is_endpoint
0.71 resolvers.py(147):         self.name = name
0.71 resolvers.py(148):         self.converters = {}
0.71 resolvers.py(317):         self.pattern = pattern
0.71 resolvers.py(318):         self.callback = callback  # the view
0.71 resolvers.py(319):         self.default_args = default_args or {}
0.71 resolvers.py(320):         self.name = name
0.71 resolvers.py(68):     if urlconf is None:
0.71 resolvers.py(69):         urlconf = settings.ROOT_URLCONF
0.71 resolvers.py(70):     return URLResolver(RegexPattern(r'^/'), urlconf)
0.71 resolvers.py(144):         self._regex = regex
0.71 resolvers.py(145):         self._regex_dict = {}
0.71 resolvers.py(146):         self._is_endpoint = is_endpoint
0.71 resolvers.py(147):         self.name = name
0.71 resolvers.py(148):         self.converters = {}
0.71 resolvers.py(368):         self.pattern = pattern
0.71 resolvers.py(372):         self.urlconf_name = urlconf_name
0.71 resolvers.py(373):         self.callback = None
0.71 resolvers.py(374):         self.default_kwargs = default_kwargs or {}
0.71 resolvers.py(375):         self.namespace = namespace
0.71 resolvers.py(376):         self.app_name = app_name
0.71 resolvers.py(377):         self._reverse_dict = {}
0.71 resolvers.py(378):         self._namespace_dict = {}
0.71 resolvers.py(379):         self._app_dict = {}
0.71 resolvers.py(382):         self._callback_strs = set()
0.71 resolvers.py(383):         self._populated = False
0.71 resolvers.py(384):         self._local = Local()
0.71 resolvers.py(605):         if args and kwargs:
0.71 resolvers.py(608):         if not self._populated:
0.71 resolvers.py(609):             self._populate()
0.71 resolvers.py(439):         if getattr(self._local, 'populating', False):
0.71 resolvers.py(441):         try:
0.71 resolvers.py(442):             self._local.populating = True
0.71 resolvers.py(443):             lookups = MultiValueDict()
0.71 resolvers.py(444):             namespaces = {}
0.71 resolvers.py(445):             apps = {}
0.71 resolvers.py(446):             language_code = get_language()
0.71 resolvers.py(447):             for url_pattern in reversed(self.url_patterns):
0.71 resolvers.py(580):         patterns = getattr(self.urlconf_module, "urlpatterns", self.urlconf_module)
0.71 resolvers.py(572):         if isinstance(self.urlconf_name, str):
0.71 resolvers.py(575):             return self.urlconf_name
0.71 resolvers.py(581):         try:
0.71 resolvers.py(582):             iter(patterns)
0.71 resolvers.py(590):         return patterns
0.71 resolvers.py(448):                 p_pattern = url_pattern.pattern.regex.pattern
0.71 resolvers.py(92):         if instance is None:
0.71 resolvers.py(97):         pattern = getattr(instance, self.attr)
0.71 resolvers.py(98):         if isinstance(pattern, str):
0.71 resolvers.py(99):             instance.__dict__['regex'] = instance._compile(pattern)
0.71 resolvers.py(182):         try:
0.71 resolvers.py(183):             return re.compile(regex)
0.71 resolvers.py(100):             return instance.__dict__['regex']
0.71 resolvers.py(449):                 if p_pattern.startswith('^'):
0.71 resolvers.py(450):                     p_pattern = p_pattern[1:]
0.71 resolvers.py(451):                 if isinstance(url_pattern, URLPattern):
0.71 resolvers.py(452):                     self._callback_strs.add(url_pattern.lookup_str)
0.71 resolvers.py(358):         callback = self.callback
0.71 resolvers.py(359):         if isinstance(callback, functools.partial):
0.71 resolvers.py(361):         if not hasattr(callback, '__name__'):
0.71 resolvers.py(363):         return callback.__module__ + "." + callback.__qualname__
0.71 resolvers.py(453):                     bits = normalize(url_pattern.pattern.regex.pattern)
0.71 resolvers.py(454):                     lookups.appendlist(
0.71 resolvers.py(455):                         url_pattern.callback,
FAIL

======================================================================
FAIL: test_translate_url_with_missing_optional_param (test_coverup_django__django-11477.TranslateUrlBugTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "./tests/test_coverup_django__django-11477.py", line 23, in test_translate_url_with_missing_optional_param
    self.assertEqual(url, '/path/')  # Expecting '/path/' and should pass when the bug is fixed
AssertionError: '/path//' != '/path/'
- /path//
?       -
+ /path/


----------------------------------------------------------------------
Ran 1 test in 0.002s

FAILED (failures=1)
0.71 resolvers.py(456):                         (bits, p_pattern, url_pattern.default_args, url_pattern.pattern.converters)
0.71 resolvers.py(458):                     if url_pattern.name is not None:
0.71 resolvers.py(459):                         lookups.appendlist(
0.71 resolvers.py(460):                             url_pattern.name,
0.71 resolvers.py(461):                             (bits, p_pattern, url_pattern.default_args, url_pattern.pattern.converters)
0.71 resolvers.py(447):             for url_pattern in reversed(self.url_patterns):
0.71 resolvers.py(488):             self._namespace_dict[language_code] = namespaces
0.71 resolvers.py(489):             self._app_dict[language_code] = apps
0.71 resolvers.py(490):             self._reverse_dict[language_code] = lookups
0.71 resolvers.py(491):             self._populated = True
0.71 resolvers.py(493):             self._local.populating = False
0.71 resolvers.py(611):         possibilities = self.reverse_dict.getlist(lookup_view)
0.71 resolvers.py(497):         language_code = get_language()
0.71 resolvers.py(498):         if language_code not in self._reverse_dict:
0.71 resolvers.py(500):         return self._reverse_dict[language_code]
0.71 resolvers.py(613):         for possibility, pattern, defaults, converters in possibilities:
0.71 resolvers.py(614):             for result, params in possibility:
0.71 resolvers.py(615):                 if args:
0.71 resolvers.py(620):                     if set(kwargs).symmetric_difference(params).difference(defaults):
0.71 resolvers.py(622):                     if any(kwargs.get(k, v) != v for k, v in defaults.items()):
0.71 resolvers.py(622):                     if any(kwargs.get(k, v) != v for k, v in defaults.items()):
0.71 resolvers.py(624):                     candidate_subs = kwargs
0.71 resolvers.py(626):                 text_candidate_subs = {}
0.71 resolvers.py(627):                 for k, v in candidate_subs.items():
0.71 resolvers.py(637):                 candidate_pat = _prefix.replace('%', '%%') + result
0.71 resolvers.py(638):                 if re.search('^%s%s' % (re.escape(_prefix), pattern), candidate_pat % text_candidate_subs):
0.71 resolvers.py(640):                     url = quote(candidate_pat % text_candidate_subs, safe=RFC3986_SUBDELIMS + '/~:@')
0.71 resolvers.py(642):                     return escape_leading_slashes(url)
+ cat coverage.cover
{"/testbed/django/urls/resolvers.py": {"8": 1, "9": 1, "10": 1, "11": 1, "12": 1, "14": 1, "16": 1, "17": 1, "18": 1, "19": 1, "20": 1, "21": 1, "22": 1, "23": 1, "24": 1, "26": 1, "27": 1, "28": 1, "31": 2, "66": 1, "67": 1, "73": 1, "84": 2, "107": 2, "140": 2, "193": 1, "194": 1, "198": 1, "238": 2, "281": 2, "315": 2, "366": 2, "32": 1, "56": 1, "59": 1, "33": 0, "34": 0, "35": 0, "36": 0, "37": 0, "41": 0, "42": 0, "43": 0, "44": 0, "46": 0, "48": 0, "51": 0, "53": 0, "54": 0, "57": 0, "60": 0, "61": 0, "62": 0, "68": 2, "69": 2, "70": 2, "78": 0, "79": 0, "80": 0, "81": 0, "85": 1, "88": 1, "86": 2, "92": 2, "93": 0, "97": 2, "98": 2, "99": 2, "100": 2, "101": 0, "102": 0, "103": 0, "104": 0, "108": 1, "117": 1, "112": 0, "113": 0, "114": 0, "115": 0, "121": 1, "122": 1, "125": 0, "126": 1, "127": 0, "128": 0, "131": 0, "133": 0, "135": 0, "137": 1, "141": 1, "143": 1, "150": 1, "161": 1, "168": 1, "180": 1, "189": 1, "144": 3, "145": 3, "146": 3, "147": 3, "148": 3, "151": 0, "152": 0, "156": 0, "157": 0, "158": 0, "159": 0, "162": 1, "163": 1, "164": 1, "165": 1, "166": 1, "169": 1, "170": 1, "171": 0, "172": 0, "174": 0, "175": 0, "178": 1, "182": 2, "183": 2, "184": 0, "185": 0, "186": 0, "190": 0, "205": 0, "206": 0, "207": 0, "208": 0, "209": 0, "210": 0, "211": 0, "212": 0, "213": 0, "214": 0, "215": 0, "216": 0, "217": 0, "218": 0, "219": 0, "221": 0, "222": 0, "224": 0, "225": 0, "226": 0, "227": 0, "228": 0, "229": 0, "231": 0, "232": 0, "233": 0, "234": 0, "235": 0, "239": 1, "241": 1, "248": 1, "262": 1, "274": 1, "277": 1, "242": 0, "243": 0, "244": 0, "245": 0, "246": 0, "249": 0, "250": 0, "252": 0, "253": 0, "254": 0, "255": 0, "256": 0, "257": 0, "258": 0, "259": 0, "260": 0, "263": 0, "264": 0, "265": 0, "266": 0, "267": 0, "269": 0, "270": 0, "272": 0, "275": 0, "278": 0, "282": 1, "286": 1, "291": 1, "299": 1, "305": 1, "308": 1, "311": 1, "283": 0, "284": 0, "289": 0, "293": 0, "294": 0, "295": 0, "297": 0, "300": 0, "301": 0, "302": 0, "303": 0, "306": 0, "309": 0, "312": 0, "316": 1, "322": 1, "325": 1, "330": 1, "344": 1, "352": 1, "317": 1, "318": 1, "319": 1, "320": 1, "323": 0, "326": 0, "327": 0, "328": 0, "334": 0, "335": 0, "336": 0, "337": 0, "338": 0, "340": 0, "342": 0, "345": 0, "346": 0, "347": 0, "349": 0, "350": 0, "358": 1, "359": 1, "360": 0, "361": 1, "362": 0, "363": 1, "367": 1, "386": 1, "397": 1, "404": 1, "434": 1, "495": 1, "502": 1, "509": 1, "516": 1, "525": 1, "530": 1, "570": 1, "577": 1, "592": 1, "601": 1, "604": 1, "368": 2, "372": 2, "373": 2, "374": 2, "375": 2, "376": 2, "377": 2, "378": 2, "379": 2, "382": 2, "383": 2, "384": 2, "387": 0, "389": 0, "391": 0, "392": 0, "393": 0, "394": 0, "398": 1, "399": 1, "400": 0, "401": 1, "402": 1, "405": 1, "408": 5, "409": 4, "410": 4, "411": 0, "412": 0, "414": 0, "415": 0, "416": 0, "417": 0, "418": 4, "419": 4, "420": 4, "421": 4, "422": 0, "424": 0, "427": 0, "428": 0, "429": 0, "431": 0, "432": 1, "439": 1, "440": 0, "441": 1, "442": 1, "443": 1, "444": 1, "445": 1, "446": 1, "447": 2, "448": 1, "449": 1, "450": 1, "451": 1, "452": 1, "453": 1, "454": 1, "455": 1, "456": 1, "458": 1, "459": 1, "460": 1, "461": 1, "464": 0, "465": 0, "466": 0, "467": 0, "469": 0, "470": 0, "471": 0, "472": 0, "473": 0, "475": 0, "476": 0, "477": 0, "478": 0, "481": 0, "482": 0, "483": 0, "484": 0, "485": 0, "486": 0, "487": 0, "488": 1, "489": 1, "490": 1, "491": 1, "493": 1, "497": 1, "498": 1, "499": 0, "500": 1, "504": 0, "505": 0, "506": 0, "507": 0, "511": 0, "512": 0, "513": 0, "514": 0, "519": 0, "520": 0, "521": 0, "522": 0, "523": 0, "526": 0, "527": 0, "528": 0, "531": 0, "532": 0, "533": 0, "534": 0, "535": 0, "536": 0, "537": 0, "538": 0, "539": 0, "540": 0, "541": 0, "542": 0, "544": 0, "546": 0, "548": 0, "550": 0, "553": 0, "554": 0, "555": 0, "556": 0, "557": 0, "558": 0, "559": 0, "560": 0, "561": 0, "562": 0, "563": 0, "564": 0, "566": 0, "567": 0, "568": 0, "572": 2, "573": 1, "575": 1, "580": 2, "581": 2, "582": 2, "583": 0, "585": 0, "589": 0, "590": 2, "593": 4, "594": 4, "597": 4, "598": 4, "599": 4, "602": 0, "605": 1, "606": 0, "608": 1, "609": 1, "611": 1, "613": 1, "614": 1, "615": 1, "616": 0, "617": 0, "618": 0, "620": 1, "621": 0, "622": 2, "623": 0, "624": 1, "626": 1, "627": 1, "628": 0, "629": 0, "631": 0, "637": 1, "638": 1, "640": 1, "642": 1, "645": 0, "646": 0, "647": 0, "648": 0, "650": 0, "652": 0, "653": 0, "654": 0, "655": 0, "656": 0, "657": 0, "659": 0, "661": 0, "662": 0, "666": 0, "667": 0, "669": 0}}
+ git checkout e28671187903e6aca2428374fdd504fca3032aee
Note: switching to 'e28671187903e6aca2428374fdd504fca3032aee'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at e286711879 Simplified handling of non-existent paths in autoreloader with Path.resolve(strict=True).
M	django/urls/resolvers.py
+ git apply /root/pre_state.patch
error: unrecognized input
