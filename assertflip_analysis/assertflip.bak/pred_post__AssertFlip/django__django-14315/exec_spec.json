{"instance_id": "django__django-14315", "repo": "django/django", "version": "4.0", "environment_setup_commit": "475cffd1d64c690cdad16ede4d5e81985738ceb4", "patch_list": ["diff --git a/django/db/backends/base/client.py b/django/db/backends/base/client.py\n--- a/django/db/backends/base/client.py\n+++ b/django/db/backends/base/client.py\n@@ -21,6 +21,5 @@ def settings_to_cmd_args_env(cls, settings_dict, parameters):\n \n     def runshell(self, parameters):\n         args, env = self.settings_to_cmd_args_env(self.connection.settings_dict, parameters)\n-        if env:\n-            env = {**os.environ, **env}\n+        env = {**os.environ, **env} if env else None\n         subprocess.run(args, env=env, check=True)\ndiff --git a/django/db/backends/postgresql/client.py b/django/db/backends/postgresql/client.py\n--- a/django/db/backends/postgresql/client.py\n+++ b/django/db/backends/postgresql/client.py\n@@ -51,7 +51,7 @@ def settings_to_cmd_args_env(cls, settings_dict, parameters):\n             env['PGSSLKEY'] = str(sslkey)\n         if passfile:\n             env['PGPASSFILE'] = str(passfile)\n-        return args, env\n+        return args, (env or None)\n \n     def runshell(self, parameters):\n         sigint_handler = signal.getsignal(signal.SIGINT)\n", "diff --git a/dev/null b/tests/test_coverup_django__django-14315.py\nnew file mode 100644\nindex e69de29..62f90e2 100644\n--- /dev/null\n+++ b/tests/test_coverup_django__django-14315.py\n@@ -0,0 +1,39 @@\n+from django.test import SimpleTestCase\n+from unittest.mock import patch, MagicMock\n+import os\n+from django.db.backends.postgresql.client import DatabaseClient\n+\n+class DatabaseClientRunshellTest(SimpleTestCase):\n+    def test_runshell_env_bug(self):\n+        # Mock os.environ to simulate environment variables\n+        mock_environ = {'PGHOST': 'localhost', 'PGPORT': '5432'}\n+        \n+        with patch.dict(os.environ, mock_environ, clear=True):\n+            # Prepare settings dictionary\n+            settings_dict = {\n+                'NAME': 'test_db',\n+                'USER': 'test_user',\n+                'PASSWORD': None,  # Set PASSWORD to None to trigger the bug\n+                'HOST': 'localhost',\n+                'PORT': '5432',\n+                'OPTIONS': {}\n+            }\n+            parameters = []\n+\n+            # Call settings_to_cmd_args_env\n+            args, env = DatabaseClient.settings_to_cmd_args_env(settings_dict, parameters)\n+\n+            # Verify that env should not be empty, which is the correct behavior\n+            self.assertIsNone(env, \"env should be None to use os.environ\")\n+\n+            # Mock the subprocess call to capture the environment\n+            with patch('subprocess.run') as mock_run:\n+                # Mock connection object\n+                mock_connection = MagicMock()\n+                mock_connection.settings_dict = settings_dict\n+                client = DatabaseClient(connection=mock_connection)\n+                client.runshell(parameters)\n+\n+                # Check that the subprocess environment includes the mocked os.environ values\n+                called_env = mock_run.call_args[1]['env']\n+                self.assertEqual(called_env, mock_environ, \"subprocess env should include the mocked os.environ values\")\n"], "arch": "x86_64", "base_commit": "187118203197801c6cb72dc8b06b714b23b6dd3d", "test_directives": ["test_coverup_django__django-14315"], "coverage_files": ["django/db/backends/postgresql/client.py", "django/db/backends/base/client.py"], "env_name": "testbed", "run_id": "assertflip", "patch_id": "pred_post__AssertFlip", "timeout": 1800, "rm_image": false, "force_rebuild": false, "exec_mode": "unit_test", "reproduction_script_name": null, "compute_coverage": true, "install": {"python": "3.8", "packages": "requirements.txt", "install": "python -m pip install -e ."}, "cache_level": "instance", "test_command": "python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/db/backends/postgresql/client\\.py|django/db/backends/base/client\\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-14315", "req_install_commands": ["conda create -n testbed python=3.8 -y", "cat <<'EOF_59812759871' > $HOME/requirements.txt\nasgiref >= 3.3.2\nargon2-cffi >= 16.1.0\nbackports.zoneinfo; python_version < '3.9'\nbcrypt\ndocutils\ngeoip2\njinja2 >= 2.9.2\nnumpy\nPillow >= 6.2.0\npylibmc; sys.platform != 'win32'\npymemcache >= 3.4.0\npython-memcached >= 1.59\npytz\npywatchman; sys.platform != 'win32'\nPyYAML\nredis >= 3.0.0\nselenium\nsqlparse >= 0.2.2\ntblib >= 1.5.0\ntzdata\ncolorama; sys.platform == 'win32'\n\nEOF_59812759871", "conda activate testbed && python -m pip install -r $HOME/requirements.txt", "rm $HOME/requirements.txt"]}