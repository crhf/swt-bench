{"instance_id": "django__django-13343", "repo": "django/django", "version": "3.2", "environment_setup_commit": "65dfb06a1ab56c238cc80f5e1c31f61210c4577d", "patch_list": ["diff --git a/django/db/models/fields/files.py b/django/db/models/fields/files.py\n--- a/django/db/models/fields/files.py\n+++ b/django/db/models/fields/files.py\n@@ -229,6 +229,8 @@ def __init__(self, verbose_name=None, name=None, upload_to='', storage=None, **k\n \n         self.storage = storage or default_storage\n         if callable(self.storage):\n+            # Hold a reference to the callable for deconstruct().\n+            self._storage_callable = self.storage\n             self.storage = self.storage()\n             if not isinstance(self.storage, Storage):\n                 raise TypeError(\n@@ -279,7 +281,7 @@ def deconstruct(self):\n             del kwargs[\"max_length\"]\n         kwargs['upload_to'] = self.upload_to\n         if self.storage is not default_storage:\n-            kwargs['storage'] = self.storage\n+            kwargs['storage'] = getattr(self, '_storage_callable', self.storage)\n         return name, path, args, kwargs\n \n     def get_internal_type(self):\n", "diff --git a/dev/null b/tests/test_coverup_django__django-13343.py\nnew file mode 100644\nindex e69de29..7041392 100644\n--- /dev/null\n+++ b/tests/test_coverup_django__django-13343.py\n@@ -0,0 +1,22 @@\n+from django.test import SimpleTestCase\n+from django.core.files.storage import Storage\n+from django.db.models import FileField\n+\n+class MockStorage(Storage):\n+    pass\n+\n+def mock_storage_callable():\n+    return MockStorage()\n+\n+class FileFieldDeconstructTests(SimpleTestCase):\n+    def test_filefield_with_callable_storage_deconstructs_correctly(self):\n+        \"\"\"\n+        Test that a FileField with a callable storage deconstructs correctly\n+        by preserving the callable instead of evaluating it.\n+        \"\"\"\n+        field = FileField(storage=mock_storage_callable)\n+        name, path, args, kwargs = field.deconstruct()\n+\n+        # The storage should be the callable itself, not the evaluated result\n+        self.assertIs(kwargs['storage'], mock_storage_callable)\n+        self.assertNotIsInstance(kwargs['storage'], MockStorage)\n"], "arch": "x86_64", "base_commit": "ece18207cbb64dd89014e279ac636a6c9829828e", "test_directives": ["test_coverup_django__django-13343"], "coverage_files": ["django/db/models/fields/files.py"], "env_name": "testbed", "run_id": "assertflip", "patch_id": "pred_post__AssertFlip", "timeout": 1800, "rm_image": false, "force_rebuild": false, "exec_mode": "unit_test", "reproduction_script_name": null, "compute_coverage": true, "install": {"python": "3.6", "packages": "requirements.txt", "install": "python -m pip install -e .", "eval_commands": ["sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen && locale-gen", "export LANG=en_US.UTF-8", "export LANGUAGE=en_US:en", "export LC_ALL=en_US.UTF-8"]}, "cache_level": "instance", "test_command": "python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/db/models/fields/files\\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-13343", "req_install_commands": ["conda create -n testbed python=3.6 -y", "cat <<'EOF_59812759871' > $HOME/requirements.txt\nasgiref >= 3.3.2\nargon2-cffi >= 16.1.0\nbackports.zoneinfo; python_version < '3.9'\nbcrypt\ndocutils\ngeoip2\njinja2 >= 2.9.2\nnumpy\nPillow >= 6.2.0\npylibmc; sys.platform != 'win32'\npymemcache >= 3.4.0\npython-memcached >= 1.59\npytz\npywatchman; sys.platform != 'win32'\nPyYAML\nselenium\nsqlparse >= 0.2.2\ntblib >= 1.5.0\ntzdata\ncolorama; sys.platform == 'win32'\n\nEOF_59812759871", "conda activate testbed && python -m pip install -r $HOME/requirements.txt", "rm $HOME/requirements.txt"]}