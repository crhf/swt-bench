diff --git a/dev/null b/tests/test_coverup_django__django-13820.py
new file mode 100644
index e69de29..a9dbdfe 100644
--- /dev/null
+++ b/tests/test_coverup_django__django-13820.py
@@ -0,0 +1,35 @@
+from django.test import SimpleTestCase
+from unittest.mock import patch, MagicMock
+from django.apps import apps
+from django.db.migrations.loader import MigrationLoader
+
+class MigrationLoaderTest(SimpleTestCase):
+    @patch('django.apps.apps.get_app_configs')
+    @patch('django.db.migrations.loader.import_module')
+    @patch('django.apps.apps.get_app_config')
+    def test_load_disk_with_missing_file_attribute(self, mock_get_app_config, mock_import_module, mock_get_app_configs):
+        # Mock app config and module
+        mock_app_config = MagicMock()
+        mock_app_config.label = 'test_app'
+        mock_app_config.name = 'test_app'
+
+        mock_module = MagicMock()
+        mock_module.__file__ = None  # Simulate missing __file__ attribute
+        mock_module.__path__ = ['mock/path']  # Simulate valid __path__ attribute
+
+        # Set return values for the mocks
+        mock_get_app_configs.return_value = [mock_app_config]
+        mock_import_module.return_value = mock_module
+        mock_get_app_config.return_value = mock_app_config
+        
+        # Initialize MigrationLoader with mock settings
+        loader = MigrationLoader(None, ignore_no_migrations=True)
+        
+        # Call load_disk method
+        loader.load_disk()
+        
+        # Assert that the app is not incorrectly added to unmigrated_apps
+        self.assertNotIn('test_app', loader.unmigrated_apps)
+
+        # Assert that the app is correctly in migrated_apps
+        self.assertIn('test_app', loader.migrated_apps)
