+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD 84400d2e9db7c51fee4e9bb04c028f665b8e7624
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
nothing to commit, working tree clean
+ git show
commit 84400d2e9db7c51fee4e9bb04c028f665b8e7624
Author: Ties Jan Hefting <hello@tiesjan.com>
Date:   Wed Jul 7 22:50:30 2021 +0200

    Fixed #32905 -- Added CSS class for non-form errors of formsets.

diff --git a/AUTHORS b/AUTHORS
index 4e4dbc00fd..72a87ce7b7 100644
--- a/AUTHORS
+++ b/AUTHORS
@@ -906,6 +906,7 @@ answer newbie questions, and generally made Django that much better:
     Thomas Stromberg <tstromberg@google.com>
     Thomas Tanner <tanner@gmx.net>
     tibimicu@gmx.net
+    Ties Jan Hefting <hello@tiesjan.com>
     Tim Allen <tim@pyphilly.org>
     Tim Givois <tim.givois.mendez@gmail.com>
     Tim Graham <timograham@gmail.com>
diff --git a/django/forms/formsets.py b/django/forms/formsets.py
index a89c35599f..b8e0d62fd9 100644
--- a/django/forms/formsets.py
+++ b/django/forms/formsets.py
@@ -333,7 +333,7 @@ class BaseFormSet:
         self._non_form_errors.
         """
         self._errors = []
-        self._non_form_errors = self.error_class()
+        self._non_form_errors = self.error_class(error_class='nonform')
         empty_forms_count = 0
 
         if not self.is_bound:  # Stop further processing.
@@ -380,7 +380,10 @@ class BaseFormSet:
             # Give self.clean() a chance to do cross-form validation.
             self.clean()
         except ValidationError as e:
-            self._non_form_errors = self.error_class(e.error_list)
+            self._non_form_errors = self.error_class(
+                e.error_list,
+                error_class='nonform'
+            )
 
     def clean(self):
         """
diff --git a/docs/releases/4.0.txt b/docs/releases/4.0.txt
index f0742db7bd..ee3922c9b6 100644
--- a/docs/releases/4.0.txt
+++ b/docs/releases/4.0.txt
@@ -218,6 +218,10 @@ Forms
   error message. This allows custom error messages to use the ``%(value)s``
   placeholder.
 
+* :class:`~django.forms.formsets.BaseFormSet` now renders non-form errors with
+  an additional class of ``nonform`` to help distinguish them from
+  form-specific errors.
+
 Generic Views
 ~~~~~~~~~~~~~
 
diff --git a/docs/topics/forms/formsets.txt b/docs/topics/forms/formsets.txt
index 1f2c7c3fad..0281b6a4d6 100644
--- a/docs/topics/forms/formsets.txt
+++ b/docs/topics/forms/formsets.txt
@@ -365,6 +365,20 @@ The formset ``clean`` method is called after all the ``Form.clean`` methods
 have been called. The errors will be found using the ``non_form_errors()``
 method on the formset.
 
+Non-form errors will be rendered with an additional class of ``nonform`` to
+help distinguish them from form-specific errors. For example,
+``{{ formset.non_form_errors }}`` would look like:
+
+.. code-block:: html+django
+
+    <ul class="errorlist nonform">
+        <li>Articles in a set must have distinct titles.</li>
+    </ul>
+
+.. versionchanged:: 4.0
+
+    The additional ``nonform`` class was added.
+
 Validating the number of forms in a formset
 ===========================================
 
diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py
index 880ba0b85f..b277476296 100644
--- a/tests/admin_views/tests.py
+++ b/tests/admin_views/tests.py
@@ -3348,7 +3348,10 @@ class AdminViewListEditable(TestCase):
         response = self.client.post(reverse('admin:admin_views_person_changelist'), data)
         non_form_errors = response.context['cl'].formset.non_form_errors()
         self.assertIsInstance(non_form_errors, ErrorList)
-        self.assertEqual(str(non_form_errors), str(ErrorList(["Grace is not a Zombie"])))
+        self.assertEqual(
+            str(non_form_errors),
+            str(ErrorList(['Grace is not a Zombie'], error_class='nonform')),
+        )
 
     def test_list_editable_ordering(self):
         collector = Collector.objects.create(id=1, name="Frederick Clegg")
diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py
index 889560aa74..5afb816f7f 100644
--- a/tests/forms_tests/tests/test_formsets.py
+++ b/tests/forms_tests/tests/test_formsets.py
@@ -337,6 +337,10 @@ class FormsFormsetTestCase(SimpleTestCase):
         formset = ChoiceFormSet(data, auto_id=False, prefix='choices')
         self.assertFalse(formset.is_valid())
         self.assertEqual(formset.non_form_errors(), ['Please submit at most 1 form.'])
+        self.assertEqual(
+            str(formset.non_form_errors()),
+            '<ul class="errorlist nonform"><li>Please submit at most 1 form.</li></ul>',
+        )
 
     def test_formset_validate_min_flag(self):
         """
@@ -359,6 +363,11 @@ class FormsFormsetTestCase(SimpleTestCase):
         formset = ChoiceFormSet(data, auto_id=False, prefix='choices')
         self.assertFalse(formset.is_valid())
         self.assertEqual(formset.non_form_errors(), ['Please submit at least 3 forms.'])
+        self.assertEqual(
+            str(formset.non_form_errors()),
+            '<ul class="errorlist nonform"><li>'
+            'Please submit at least 3 forms.</li></ul>',
+        )
 
     def test_formset_validate_min_unchanged_forms(self):
         """
@@ -983,6 +992,11 @@ class FormsFormsetTestCase(SimpleTestCase):
         formset = FavoriteDrinksFormSet(data, prefix='drinks')
         self.assertFalse(formset.is_valid())
         self.assertEqual(formset.non_form_errors(), ['You may only specify a drink once.'])
+        self.assertEqual(
+            str(formset.non_form_errors()),
+            '<ul class="errorlist nonform"><li>'
+            'You may only specify a drink once.</li></ul>',
+        )
 
     def test_formset_iteration(self):
         """Formset instances are iterable."""
+ git diff 84400d2e9db7c51fee4e9bb04c028f665b8e7624
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Checking if build backend supports build_editable: started
  Checking if build backend supports build_editable: finished with status 'done'
  Getting requirements to build editable: started
  Getting requirements to build editable: finished with status 'done'
  Preparing editable metadata (pyproject.toml): started
  Preparing editable metadata (pyproject.toml): finished with status 'done'
Requirement already satisfied: asgiref>=3.3.2 in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from Django==4.0.dev20210715050039) (3.8.1)
Requirement already satisfied: pytz in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from Django==4.0.dev20210715050039) (2025.2)
Requirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from Django==4.0.dev20210715050039) (0.5.3)
Requirement already satisfied: typing-extensions>=4 in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from asgiref>=3.3.2->Django==4.0.dev20210715050039) (4.13.2)
Building wheels for collected packages: Django
  Building editable for Django (pyproject.toml): started
  Building editable for Django (pyproject.toml): finished with status 'done'
  Created wheel for Django: filename=django-4.0.dev20210715050039-0.editable-py3-none-any.whl size=26234 sha256=37da2324857eff3bd6d55fce45371a757dc7293921fa982b4cdcd73496ba3d6f
  Stored in directory: /tmp/pip-ephem-wheel-cache-dyzdz6by/wheels/b2/50/f1/218f2e9962a80d01a4b1297698978f9fb3b60056aa24343f24
Successfully built Django
Installing collected packages: Django
  Attempting uninstall: Django
    Found existing installation: Django 4.0.dev20210715050039
    Uninstalling Django-4.0.dev20210715050039:
      Successfully uninstalled Django-4.0.dev20210715050039
Successfully installed Django-4.0.dev20210715050039
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable.It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git apply -v -
Checking patch django/forms/boundfield.py...
Checking patch django/forms/forms.py...
Applied patch django/forms/boundfield.py cleanly.
Applied patch django/forms/forms.py cleanly.
+ git apply -v -
Checking patch tests/test_coverup_django__django-14631.py...
Applied patch tests/test_coverup_django__django-14631.py cleanly.
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/forms/boundfield\.py|django/forms/forms\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-14631
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(django/forms/boundfield\\.py|django/forms/forms\\.py)']
0.17 boundfield.py(1): import datetime
0.17 boundfield.py(2): import re
0.17 boundfield.py(4): from django.core.exceptions import ValidationError
0.17 boundfield.py(5): from django.forms.utils import flatatt, pretty_name
0.18 boundfield.py(6): from django.forms.widgets import Textarea, TextInput
0.20 boundfield.py(7): from django.utils.functional import cached_property
0.20 boundfield.py(8): from django.utils.html import conditional_escape, format_html, html_safe
0.20 boundfield.py(9): from django.utils.safestring import mark_safe
0.20 boundfield.py(10): from django.utils.translation import gettext_lazy as _
0.20 boundfield.py(12): __all__ = ('BoundField',)
0.20 boundfield.py(15): @html_safe
0.20 boundfield.py(16): class BoundField:
0.20 boundfield.py(15): @html_safe
0.20 boundfield.py(17):     "A Field plus data"
0.20 boundfield.py(18):     def __init__(self, form, field, name):
0.20 boundfield.py(31):     def __str__(self):
0.20 boundfield.py(37):     @cached_property
0.20 boundfield.py(38):     def subwidgets(self):
0.20 boundfield.py(54):     def __bool__(self):
0.20 boundfield.py(58):     def __iter__(self):
0.20 boundfield.py(61):     def __len__(self):
0.20 boundfield.py(64):     def __getitem__(self, idx):
0.20 boundfield.py(74):     @property
0.20 boundfield.py(75):     def errors(self):
0.20 boundfield.py(81):     def as_widget(self, widget=None, attrs=None, only_initial=False):
0.20 boundfield.py(101):     def as_text(self, attrs=None, **kwargs):
0.20 boundfield.py(107):     def as_textarea(self, attrs=None, **kwargs):
0.20 boundfield.py(111):     def as_hidden(self, attrs=None, **kwargs):
0.20 boundfield.py(117):     @property
0.20 boundfield.py(118):     def data(self):
0.20 boundfield.py(124):     def value(self):
0.20 boundfield.py(134):     def _has_changed(self):
0.20 boundfield.py(150):     def label_tag(self, contents=None, attrs=None, label_suffix=None):
0.20 boundfield.py(187):     def css_classes(self, extra_classes=None):
0.20 boundfield.py(200):     @property
0.20 boundfield.py(201):     def is_hidden(self):
0.20 boundfield.py(205):     @property
0.20 boundfield.py(206):     def auto_id(self):
0.20 boundfield.py(218):     @property
0.20 boundfield.py(219):     def id_for_label(self):
0.20 boundfield.py(229):     @cached_property
0.20 boundfield.py(230):     def initial(self):
0.20 boundfield.py(239):     def build_widget_attrs(self, attrs, widget=None):
0.20 boundfield.py(248):     @property
0.20 boundfield.py(249):     def widget_type(self):
0.20 boundfield.py(253): @html_safe
0.20 boundfield.py(254): class BoundWidget:
0.20 boundfield.py(253): @html_safe
0.20 boundfield.py(255):     """
0.20 boundfield.py(267):     def __init__(self, parent_widget, data, renderer):
0.20 boundfield.py(272):     def __str__(self):
0.20 boundfield.py(275):     def tag(self, wrap_label=False):
0.20 boundfield.py(279):     @property
0.20 boundfield.py(280):     def template_name(self):
0.20 boundfield.py(285):     @property
0.20 boundfield.py(286):     def id_for_label(self):
0.20 boundfield.py(289):     @property
0.20 boundfield.py(290):     def choice_label(self):
0.22 forms.py(1): """
0.22 forms.py(5): import copy
0.22 forms.py(7): from django.core.exceptions import NON_FIELD_ERRORS, ValidationError
0.22 forms.py(8): from django.forms.fields import Field, FileField
0.22 forms.py(9): from django.forms.utils import ErrorDict, ErrorList
0.22 forms.py(10): from django.forms.widgets import Media, MediaDefiningClass
0.22 forms.py(11): from django.utils.datastructures import MultiValueDict
0.22 forms.py(12): from django.utils.functional import cached_property
0.22 forms.py(13): from django.utils.html import conditional_escape, html_safe
0.22 forms.py(14): from django.utils.safestring import mark_safe
0.22 forms.py(15): from django.utils.translation import gettext as _
0.22 forms.py(17): from .renderers import get_default_renderer
0.22 forms.py(19): __all__ = ('BaseForm', 'Form')
0.22 forms.py(22): class DeclarativeFieldsMetaclass(MediaDefiningClass):
0.22 forms.py(22): class DeclarativeFieldsMetaclass(MediaDefiningClass):
0.22 forms.py(23):     """Collect Fields declared on the base classes."""
0.22 forms.py(24):     def __new__(mcs, name, bases, attrs):
0.22 forms.py(51): @html_safe
0.22 forms.py(52): class BaseForm:
0.22 forms.py(51): @html_safe
0.22 forms.py(53):     """
0.22 forms.py(59):     default_renderer = None
0.22 forms.py(60):     field_order = None
0.22 forms.py(61):     prefix = None
0.22 forms.py(62):     use_required_attribute = True
0.22 forms.py(64):     def __init__(self, data=None, files=None, auto_id='id_%s', prefix=None,
0.22 forms.py(65):                  initial=None, error_class=ErrorList, label_suffix=None,
0.22 forms.py(66):                  empty_permitted=False, field_order=None, use_required_attribute=None, renderer=None):
0.22 forms.py(64):     def __init__(self, data=None, files=None, auto_id='id_%s', prefix=None,
0.22 forms.py(109):     def order_fields(self, field_order):
0.22 forms.py(131):     def __str__(self):
0.22 forms.py(134):     def __repr__(self):
0.22 forms.py(146):     def _bound_items(self):
0.22 forms.py(151):     def __iter__(self):
0.22 forms.py(156):     def __getitem__(self, name):
0.22 forms.py(176):     @property
0.22 forms.py(177):     def errors(self):
0.22 forms.py(183):     def is_valid(self):
0.22 forms.py(187):     def add_prefix(self, field_name):
0.22 forms.py(196):     def add_initial_prefix(self, field_name):
0.22 forms.py(200):     def _widget_data_value(self, widget, html_name):
0.22 forms.py(206):     def _html_output(self, normal_row, error_row, row_ender, help_text_html, errors_on_separate_row):
0.22 forms.py(284):     def as_table(self):
0.22 forms.py(294):     def as_ul(self):
0.22 forms.py(304):     def as_p(self):
0.22 forms.py(314):     def non_field_errors(self):
0.22 forms.py(322):     def add_error(self, field, error):
0.22 forms.py(369):     def has_error(self, field, code=None):
0.22 forms.py(375):     def full_clean(self):
0.22 forms.py(392):     def _clean_fields(self):
0.22 forms.py(408):     def _clean_form(self):
0.22 forms.py(417):     def _post_clean(self):
0.22 forms.py(424):     def clean(self):
0.22 forms.py(433):     def has_changed(self):
0.22 forms.py(437):     @cached_property
0.22 forms.py(438):     def changed_data(self):
0.22 forms.py(441):     @property
0.22 forms.py(442):     def media(self):
0.22 forms.py(449):     def is_multipart(self):
0.22 forms.py(456):     def hidden_fields(self):
0.22 forms.py(463):     def visible_fields(self):
0.22 forms.py(470):     def get_initial_for_field(self, field, field_name):
0.22 forms.py(481): class Form(BaseForm, metaclass=DeclarativeFieldsMetaclass):
0.22 forms.py(481): class Form(BaseForm, metaclass=DeclarativeFieldsMetaclass):
0.22 forms.py(482):     "A collection of Fields, plus their associated data."
0.22 forms.py(26):         attrs['declared_fields'] = {
0.22 forms.py(27):             key: attrs.pop(key) for key, value in list(attrs.items())
0.22 forms.py(26):         attrs['declared_fields'] = {
0.22 forms.py(26):         attrs['declared_fields'] = {
0.22 forms.py(27):             key: attrs.pop(key) for key, value in list(attrs.items())
0.22 forms.py(28):             if isinstance(value, Field)
0.22 forms.py(26):         attrs['declared_fields'] = {
0.22 forms.py(27):             key: attrs.pop(key) for key, value in list(attrs.items())
0.22 forms.py(28):             if isinstance(value, Field)
0.22 forms.py(26):         attrs['declared_fields'] = {
0.22 forms.py(27):             key: attrs.pop(key) for key, value in list(attrs.items())
0.22 forms.py(28):             if isinstance(value, Field)
0.22 forms.py(26):         attrs['declared_fields'] = {
0.22 forms.py(31):         new_class = super().__new__(mcs, name, bases, attrs)
0.22 forms.py(34):         declared_fields = {}
0.22 forms.py(35):         for base in reversed(new_class.__mro__):
0.22 forms.py(37):             if hasattr(base, 'declared_fields'):
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(35):         for base in reversed(new_class.__mro__):
0.22 forms.py(37):             if hasattr(base, 'declared_fields'):
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(35):         for base in reversed(new_class.__mro__):
0.22 forms.py(37):             if hasattr(base, 'declared_fields'):
0.22 forms.py(38):                 declared_fields.update(base.declared_fields)
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(35):         for base in reversed(new_class.__mro__):
0.22 forms.py(45):         new_class.base_fields = declared_fields
0.22 forms.py(46):         new_class.declared_fields = declared_fields
0.22 forms.py(48):         return new_class
0.22 forms.py(26):         attrs['declared_fields'] = {
0.22 forms.py(27):             key: attrs.pop(key) for key, value in list(attrs.items())
0.22 forms.py(26):         attrs['declared_fields'] = {
0.22 forms.py(26):         attrs['declared_fields'] = {
0.22 forms.py(27):             key: attrs.pop(key) for key, value in list(attrs.items())
0.22 forms.py(28):             if isinstance(value, Field)
0.22 forms.py(26):         attrs['declared_fields'] = {
0.22 forms.py(27):             key: attrs.pop(key) for key, value in list(attrs.items())
0.22 forms.py(28):             if isinstance(value, Field)
0.22 forms.py(26):         attrs['declared_fields'] = {
0.22 forms.py(27):             key: attrs.pop(key) for key, value in list(attrs.items())
0.22 forms.py(28):             if isinstance(value, Field)
0.22 forms.py(26):         attrs['declared_fields'] = {
0.22 forms.py(27):             key: attrs.pop(key) for key, value in list(attrs.items())
0.22 forms.py(28):             if isinstance(value, Field)
0.22 forms.py(26):         attrs['declared_fields'] = {
0.22 forms.py(27):             key: attrs.pop(key) for key, value in list(attrs.items())
0.22 forms.py(28):             if isinstance(value, Field)
0.22 forms.py(26):         attrs['declared_fields'] = {
0.22 forms.py(27):             key: attrs.pop(key) for key, value in list(attrs.items())
0.22 forms.py(28):             if isinstance(value, Field)
0.22 forms.py(26):         attrs['declared_fields'] = {
0.22 forms.py(31):         new_class = super().__new__(mcs, name, bases, attrs)
0.22 forms.py(34):         declared_fields = {}
0.22 forms.py(35):         for base in reversed(new_class.__mro__):
0.22 forms.py(37):             if hasattr(base, 'declared_fields'):
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(35):         for base in reversed(new_class.__mro__):
0.22 forms.py(37):             if hasattr(base, 'declared_fields'):
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(35):         for base in reversed(new_class.__mro__):
0.22 forms.py(37):             if hasattr(base, 'declared_fields'):
0.22 forms.py(38):                 declared_fields.update(base.declared_fields)
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(35):         for base in reversed(new_class.__mro__):
0.22 forms.py(37):             if hasattr(base, 'declared_fields'):
0.22 forms.py(38):                 declared_fields.update(base.declared_fields)
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(42):                 if value is None and attr in declared_fields:
0.22 forms.py(41):             for attr, value in base.__dict__.items():
0.22 forms.py(35):         for base in reversed(new_class.__mro__):
0.22 forms.py(45):         new_class.base_fields = declared_fields
0.22 forms.py(46):         new_class.declared_fields = declared_fields
0.22 forms.py(48):         return new_class
0.23 forms.py(26):         attrs['declared_fields'] = {
0.23 forms.py(27):             key: attrs.pop(key) for key, value in list(attrs.items())
0.23 forms.py(26):         attrs['declared_fields'] = {
0.23 forms.py(26):         attrs['declared_fields'] = {
0.23 forms.py(27):             key: attrs.pop(key) for key, value in list(attrs.items())
0.23 forms.py(28):             if isinstance(value, Field)
0.23 forms.py(26):         attrs['declared_fields'] = {
0.23 forms.py(27):             key: attrs.pop(key) for key, value in list(attrs.items())
0.23 forms.py(28):             if isinstance(value, Field)
0.23 forms.py(26):         attrs['declared_fields'] = {
0.23 forms.py(31):         new_class = super().__new__(mcs, name, bases, attrs)
0.23 forms.py(34):         declared_fields = {}
0.23 forms.py(35):         for base in reversed(new_class.__mro__):
0.23 forms.py(37):             if hasattr(base, 'declared_fields'):
0.23 forms.py(41):             for attr, value in base.__dict__.items():
0.23 forms.py(42):                 if value is None and attr in declared_fields:
0.23 forms.py(41):             for attr, value in base.__dict__.items():
0.23 forms.py(42):                 if value is None and attr in declared_fields:
0.23 forms.py(41):             for attr, value in base.__dict__.items():
0.23 forms.py(42):                 if value is None and attr in declared_fields:
0.23 forms.py(41):             for attr, value in base.__dict__.items():
0.23 forms.py(42):                 if value is None and attr in declared_fields:
0.23 forms.py(41):             for attr, value in base.__dict__.items():
0.23 forms.py(42):                 if value is None and attr in declared_fields:
0.23 forms.py(41):             for attr, value in base.__dict__.items():
0.23 forms.py(42):                 if value is None and attr in declared_fields:
0.23 forms.py(41):             for attr, value in base.__dict__.items():
0.23 forms.py(42):                 if value is None and attr in declared_fields:
0.23 forms.py(41):             for attr, value in base.__dict__.items():
0.23 forms.py(42):                 if value is None and attr in declared_fields:
0.23 forms.py(41):             for attr, value in base.__dict__.items():
0.23 forms.py(42):                 if value is None and attr in declared_fields:
0.23 forms.py(41):             for attr, value in base.__dict__.items():
0.23 forms.py(42):                 if value is None and attr in declared_fields:
0.23 forms.py(41):             for attr, value in base.__dict__.items():
0.23 forms.py(42):                 if value is None and attr in declared_fields:
0.23 forms.py(41):             for attr, value in base.__dict__.items():
0.23 forms.py(42):                 if value is None and attr in declared_fields:
0.23 forms.py(41):             for attr, value in base.__dict__.items():
0.23 forms.py(42):                 if value is None and attr in declared_fields:
0.23 forms.py(41):             for attr, value in base.__dict__.items():
0.23 forms.py(42):                 if value is None and attr in declared_fields:
0.23 forms.py(41):             for attr, value in base.__dict__.items():
0.23 forms.py(42):                 if value is None and attr in declared_fields:
0.23 forms.py(41):             for attr, value in base.__dict__.items():
0.23 forms.py(42):                 if value is None and attr in declared_fields:
0.23 forms.py(41):             for attr, value in base.__dict__.items():
0.23 forms.py(42):                 if value is None and attr in declared_fields:
0.23 forms.py(41):             for attr, value in base.__dict__.items():
0.23 forms.py(42):                 if value is None and attr in declared_fields:
0.23 forms.py(41):             for attr, value in base.__dict__.items():
0.23 forms.py(42):                 if value is None and attr in declared_fields:
0.23 forms.py(41):             for attr, value in base.__dict__.items():
0.23 forms.py(42):                 if value is None and attr in declared_fields:
0.23 forms.py(41):             for attr, value in base.__dict__.items():
0.23 forms.py(42):                 if value is None and attr in declared_fields:
0.23 forms.py(41):             for attr, value in base.__dict__.items():
0.23 forms.py(42):                 if value is None and attr in declared_fields:
0.23 forms.py(41):             for attr, value in base.__dict__.items():
0.23 forms.py(42):                 if value is None and attr in declared_fields:
0.23 forms.py(41):             for attr, value in base.__dict__.items():
0.23 forms.py(35):         for base in reversed(new_class.__mro__):
0.23 forms.py(37):             if hasattr(base, 'declared_fields'):
0.23 forms.py(41):             for attr, value in base.__dict__.items():
0.23 forms.py(42):                 if value is None and attr in declared_fields:
0.23 forms.py(41):             for attr, value in base.__dict__.items():
0.23 forms.py(42):                 if value is None and attr in declared_fields:
0.23 forms.py(41):             for attr, value in base.__dict__.items():
0.23 forms.py(42):                 if value is None and attr in declared_fields:
0.23 forms.py(41):             for attr, value in base.__dict__.items():
0.23 forms.py(42):                 if value is None and attr in declared_fields:
0.23 forms.py(41):             for attr, value in base.__dict__.items():
0.23 forms.py(42):                 if value is None and attr in declared_fields:
0.23 forms.py(41):             for attr, value in base.__dict__.items():
0.23 forms.py(42):                 if value is None and attr in declared_fields:
0.23 forms.py(41):             for attr, value in base.__dict__.items():
0.23 forms.py(42):                 if value is None and attr in declared_fields:
0.23 forms.py(41):             for attr, value in base.__dict__.items():
0.23 forms.py(42):                 if value is None and attr in declared_fields:
0.23 forms.py(41):             for attr, value in base.__dict__.items():
0.23 forms.py(42):                 if value is None and attr in declared_fields:
0.23 forms.py(41):             for attr, value in base.__dict__.items():
0.23 forms.py(42):                 if value is None and attr in declared_fields:
0.23 forms.py(41):             for attr, value in base.__dict__.items():
0.23 forms.py(42):                 if value is None and attr in declared_fields:
0.23 forms.py(41):             for attr, value in base.__dict__.items():
0.23 forms.py(42):                 if value is None and attr in declared_fields:
0.23 forms.py(41):             for attr, value in base.__dict__.items():
0.23 forms.py(42):                 if value is None and attr in declared_fields:
0.23 forms.py(41):             for attr, value in base.__dict__.items():
0.23 forms.py(42):                 if value is None and attr in declared_fields:
0.23 forms.py(41):             for attr, value in base.__dict__.items():
0.23 forms.py(42):                 if value is None and attr in declared_fields:
0.23 forms.py(41):             for attr, value in base.__dict__.items():
0.23 forms.py(42):                 if value is None and attr in declared_fields:
0.23 forms.py(41):             for attr, value in base.__dict__.items():
0.23 forms.py(42):                 if value is None and attr in declared_fields:
0.23 forms.py(41):             for attr, value in base.__dict__.items():
0.23 forms.py(42):                 if value is None and attr in declared_fields:
0.23 forms.py(41):             for attr, value in base.__dict__.items():
0.23 forms.py(42):                 if value is None and attr in declared_fields:
0.23 forms.py(41):             for attr, value in base.__dict__.items():
0.23 forms.py(42):                 if value is None and attr in declared_fields:
0.23 forms.py(41):             for attr, value in base.__dict__.items():
0.23 forms.py(42):                 if value is None and attr in declared_fields:
0.23 forms.py(41):             for attr, value in base.__dict__.items():
0.23 forms.py(42):                 if value is None and attr in declared_fields:
0.23 forms.py(41):             for attr, value in base.__dict__.items():
0.23 forms.py(42):                 if value is None and attr in declared_fields:
0.23 forms.py(41):             for attr, value in base.__dict__.items():
0.23 forms.py(42):                 if value is None and attr in declared_fields:
0.23 forms.py(41):             for attr, value in base.__dict__.items():
0.23 forms.py(42):                 if value is None and attr in declared_fields:
0.23 forms.py(41):             for attr, value in base.__dict__.items():
0.23 forms.py(42):                 if value is None and attr in declared_fields:
0.23 forms.py(41):             for attr, value in base.__dict__.items():
0.23 forms.py(42):                 if value is None and attr in declared_fields:
0.23 forms.py(41):             for attr, value in base.__dict__.items():
0.23 forms.py(42):                 if value is None and attr in declared_fields:
0.23 forms.py(41):             for attr, value in base.__dict__.items():
0.23 forms.py(42):                 if value is None and attr in declared_fields:
0.23 forms.py(41):             for attr, value in base.__dict__.items():
0.23 forms.py(42):                 if value is None and attr in declared_fields:
0.23 forms.py(41):             for attr, value in base.__dict__.items():
0.23 forms.py(42):                 if value is None and attr in declared_fields:
0.23 forms.py(41):             for attr, value in base.__dict__.items():
0.23 forms.py(42):                 if value is None and attr in declared_fields:
0.23 forms.py(41):             for attr, value in base.__dict__.items():
0.23 forms.py(42):                 if value is None and attr in declared_fields:
0.23 forms.py(41):             for attr, value in base.__dict__.items():
0.23 forms.py(42):                 if value is None and attr in declared_fields:
0.23 forms.py(41):             for attr, value in base.__dict__.items():
0.23 forms.py(42):                 if value is None and attr in declared_fields:
0.23 forms.py(41):             for attr, value in base.__dict__.items():
0.23 forms.py(42):                 if value is None and attr in declared_fields:
0.23 forms.py(41):             for attr, value in base.__dict__.items():
0.23 forms.py(42):                 if value is None and attr in declared_fields:
0.23 forms.py(41):             for attr, value in base.__dict__.items():
0.23 forms.py(42):                 if value is None and attr in declared_fields:
0.23 forms.py(41):             for attr, value in base.__dict__.items():
0.23 forms.py(42):                 if value is None and attr in declared_fields:
0.23 forms.py(41):             for attr, value in base.__dict__.items():
0.23 forms.py(42):                 if value is None and attr in declared_fields:
0.23 forms.py(41):             for attr, value in base.__dict__.items():
0.23 forms.py(35):         for base in reversed(new_class.__mro__):
0.23 forms.py(37):             if hasattr(base, 'declared_fields'):
0.23 forms.py(41):             for attr, value in base.__dict__.items():
0.23 forms.py(42):                 if value is None and attr in declared_fields:
0.23 forms.py(41):             for attr, value in base.__dict__.items():
0.23 forms.py(42):                 if value is None and attr in declared_fields:
0.23 forms.py(41):             for attr, value in base.__dict__.items():
0.23 forms.py(42):                 if value is None and attr in declared_fields:
0.23 forms.py(41):             for attr, value in base.__dict__.items():
0.23 forms.py(42):                 if value is None and attr in declared_fields:
0.23 forms.py(41):             for attr, value in base.__dict__.items():
0.23 forms.py(42):                 if value is None and attr in declared_fields:
0.23 forms.py(41):             for attr, value in base.__dict__.items():
0.23 forms.py(42):                 if value is None and attr in declared_fields:
0.23 forms.py(41):             for attr, value in base.__dict__.items():
0.23 forms.py(42):                 if value is None and attr in declared_fields:
0.23 forms.py(41):             for attr, value in base.__dict__.items():
0.23 forms.py(42):                 if value is None and attr in declared_fields:
0.23 forms.py(41):             for attr, value in base.__dict__.items():
0.23 forms.py(42):                 if value is None and attr in declared_fields:
0.23 forms.py(41):             for attr, value in base.__dict__.items():
0.23 forms.py(42):                 if value is None and attr in declared_fields:
0.23 forms.py(41):             for attr, value in base.__dict__.items():
0.23 forms.py(35):         for base in reversed(new_class.__mro__):
0.23 forms.py(37):             if hasattr(base, 'declared_fields'):
0.23 forms.py(38):                 declared_fields.update(base.declared_fields)
0.23 forms.py(41):             for attr, value in base.__dict__.items():
0.23 forms.py(42):                 if value is None and attr in declared_fields:
0.23 forms.py(41):             for attr, value in base.__dict__.items():
0.23 forms.py(42):                 if value is None and attr in declared_fields:
0.23 forms.py(41):             for attr, value in base.__dict__.items():
0.23 forms.py(42):                 if value is None and attr in declared_fields:
0.23 forms.py(41):             for attr, value in base.__dict__.items():
0.23 forms.py(42):                 if value is None and attr in declared_fields:
0.23 forms.py(41):             for attr, value in base.__dict__.items():
0.23 forms.py(35):         for base in reversed(new_class.__mro__):
0.23 forms.py(45):         new_class.base_fields = declared_fields
0.23 forms.py(46):         new_class.declared_fields = declared_fields
0.23 forms.py(48):         return new_class
Testing against Django installed in '/testbed/django'
0.49 forms.py(26):         attrs['declared_fields'] = {
0.49 forms.py(27):             key: attrs.pop(key) for key, value in list(attrs.items())
0.49 forms.py(26):         attrs['declared_fields'] = {
0.49 forms.py(26):         attrs['declared_fields'] = {
0.49 forms.py(27):             key: attrs.pop(key) for key, value in list(attrs.items())
0.49 forms.py(28):             if isinstance(value, Field)
0.49 forms.py(26):         attrs['declared_fields'] = {
0.49 forms.py(27):             key: attrs.pop(key) for key, value in list(attrs.items())
0.49 forms.py(28):             if isinstance(value, Field)
0.49 forms.py(26):         attrs['declared_fields'] = {
0.49 forms.py(27):             key: attrs.pop(key) for key, value in list(attrs.items())
0.49 forms.py(28):             if isinstance(value, Field)
0.49 forms.py(27):             key: attrs.pop(key) for key, value in list(attrs.items())
0.49 forms.py(26):         attrs['declared_fields'] = {
0.49 forms.py(27):             key: attrs.pop(key) for key, value in list(attrs.items())
0.49 forms.py(28):             if isinstance(value, Field)
0.49 forms.py(27):             key: attrs.pop(key) for key, value in list(attrs.items())
0.49 forms.py(26):         attrs['declared_fields'] = {
0.49 forms.py(31):         new_class = super().__new__(mcs, name, bases, attrs)
0.49 forms.py(34):         declared_fields = {}
0.49 forms.py(35):         for base in reversed(new_class.__mro__):
0.49 forms.py(37):             if hasattr(base, 'declared_fields'):
0.49 forms.py(41):             for attr, value in base.__dict__.items():
0.49 forms.py(42):                 if value is None and attr in declared_fields:
0.49 forms.py(41):             for attr, value in base.__dict__.items():
0.49 forms.py(42):                 if value is None and attr in declared_fields:
0.49 forms.py(41):             for attr, value in base.__dict__.items():
0.49 forms.py(42):                 if value is None and attr in declared_fields:
0.49 forms.py(41):             for attr, value in base.__dict__.items():
0.49 forms.py(42):                 if value is None and attr in declared_fields:
0.49 forms.py(41):             for attr, value in base.__dict__.items():
0.49 forms.py(42):                 if value is None and attr in declared_fields:
0.49 forms.py(41):             for attr, value in base.__dict__.items():
0.49 forms.py(42):                 if value is None and attr in declared_fields:
0.49 forms.py(41):             for attr, value in base.__dict__.items():
0.49 forms.py(42):                 if value is None and attr in declared_fields:
0.49 forms.py(41):             for attr, value in base.__dict__.items():
0.49 forms.py(42):                 if value is None and attr in declared_fields:
0.49 forms.py(41):             for attr, value in base.__dict__.items():
0.49 forms.py(42):                 if value is None and attr in declared_fields:
0.49 forms.py(41):             for attr, value in base.__dict__.items():
0.49 forms.py(42):                 if value is None and attr in declared_fields:
0.49 forms.py(41):             for attr, value in base.__dict__.items():
0.49 forms.py(42):                 if value is None and attr in declared_fields:
0.49 forms.py(41):             for attr, value in base.__dict__.items():
0.49 forms.py(42):                 if value is None and attr in declared_fields:
0.49 forms.py(41):             for attr, value in base.__dict__.items():
0.49 forms.py(42):                 if value is None and attr in declared_fields:
0.49 forms.py(41):             for attr, value in base.__dict__.items():
0.49 forms.py(42):                 if value is None and attr in declared_fields:
0.49 forms.py(41):             for attr, value in base.__dict__.items():
0.49 forms.py(42):                 if value is None and attr in declared_fields:
0.49 forms.py(41):             for attr, value in base.__dict__.items():
0.49 forms.py(42):                 if value is None and attr in declared_fields:
0.49 forms.py(41):             for attr, value in base.__dict__.items():
0.49 forms.py(42):                 if value is None and attr in declared_fields:
0.49 forms.py(41):             for attr, value in base.__dict__.items():
0.49 forms.py(42):                 if value is None and attr in declared_fields:
0.49 forms.py(41):             for attr, value in base.__dict__.items():
0.49 forms.py(42):                 if value is None and attr in declared_fields:
0.49 forms.py(41):             for attr, value in base.__dict__.items():
0.49 forms.py(42):                 if value is None and attr in declared_fields:
0.49 forms.py(41):             for attr, value in base.__dict__.items():
0.49 forms.py(42):                 if value is None and attr in declared_fields:
0.49 forms.py(41):             for attr, value in base.__dict__.items():
0.49 forms.py(42):                 if value is None and attr in declared_fields:
0.49 forms.py(41):             for attr, value in base.__dict__.items():
0.49 forms.py(42):                 if value is None and attr in declared_fields:
0.49 forms.py(41):             for attr, value in base.__dict__.items():
0.49 forms.py(35):         for base in reversed(new_class.__mro__):
0.49 forms.py(37):             if hasattr(base, 'declared_fields'):
0.49 forms.py(41):             for attr, value in base.__dict__.items():
0.49 forms.py(42):                 if value is None and attr in declared_fields:
0.49 forms.py(41):             for attr, value in base.__dict__.items():
0.49 forms.py(42):                 if value is None and attr in declared_fields:
0.49 forms.py(41):             for attr, value in base.__dict__.items():
0.49 forms.py(42):                 if value is None and attr in declared_fields:
0.49 forms.py(41):             for attr, value in base.__dict__.items():
0.49 forms.py(42):                 if value is None and attr in declared_fields:
0.49 forms.py(41):             for attr, value in base.__dict__.items():
0.49 forms.py(42):                 if value is None and attr in declared_fields:
0.49 forms.py(41):             for attr, value in base.__dict__.items():
0.49 forms.py(42):                 if value is None and attr in declared_fields:
0.49 forms.py(41):             for attr, value in base.__dict__.items():
0.49 forms.py(42):                 if value is None and attr in declared_fields:
0.49 forms.py(41):             for attr, value in base.__dict__.items():
0.49 forms.py(42):                 if value is None and attr in declared_fields:
0.49 forms.py(41):             for attr, value in base.__dict__.items():
0.49 forms.py(42):                 if value is None and attr in declared_fields:
0.49 forms.py(41):             for attr, value in base.__dict__.items():
0.49 forms.py(42):                 if value is None and attr in declared_fields:
0.49 forms.py(41):             for attr, value in base.__dict__.items():
0.49 forms.py(42):                 if value is None and attr in declared_fields:
0.49 forms.py(41):             for attr, value in base.__dict__.items():
0.49 forms.py(42):                 if value is None and attr in declared_fields:
0.49 forms.py(41):             for attr, value in base.__dict__.items():
0.49 forms.py(42):                 if value is None and attr in declared_fields:
0.49 forms.py(41):             for attr, value in base.__dict__.items():
0.49 forms.py(42):                 if value is None and attr in declared_fields:
0.49 forms.py(41):             for attr, value in base.__dict__.items():
0.49 forms.py(42):                 if value is None and attr in declared_fields:
0.49 forms.py(41):             for attr, value in base.__dict__.items():
0.49 forms.py(42):                 if value is None and attr in declared_fields:
0.49 forms.py(41):             for attr, value in base.__dict__.items():
0.49 forms.py(42):                 if value is None and attr in declared_fields:
0.49 forms.py(41):             for attr, value in base.__dict__.items():
0.49 forms.py(42):                 if value is None and attr in declared_fields:
0.49 forms.py(41):             for attr, value in base.__dict__.items():
0.49 forms.py(42):                 if value is None and attr in declared_fields:
0.49 forms.py(41):             for attr, value in base.__dict__.items():
0.49 forms.py(42):                 if value is None and attr in declared_fields:
0.49 forms.py(41):             for attr, value in base.__dict__.items():
0.49 forms.py(42):                 if value is None and attr in declared_fields:
0.49 forms.py(41):             for attr, value in base.__dict__.items():
0.49 forms.py(42):                 if value is None and attr in declared_fields:
0.49 forms.py(41):             for attr, value in base.__dict__.items():
0.49 forms.py(42):                 if value is None and attr in declared_fields:
0.49 forms.py(41):             for attr, value in base.__dict__.items():
0.49 forms.py(42):                 if value is None and attr in declared_fields:
0.49 forms.py(41):             for attr, value in base.__dict__.items():
0.49 forms.py(42):                 if value is None and attr in declared_fields:
0.49 forms.py(41):             for attr, value in base.__dict__.items():
0.49 forms.py(42):                 if value is None and attr in declared_fields:
0.49 forms.py(41):             for attr, value in base.__dict__.items():
0.49 forms.py(42):                 if value is None and attr in declared_fields:
0.49 forms.py(41):             for attr, value in base.__dict__.items():
0.49 forms.py(42):                 if value is None and attr in declared_fields:
0.49 forms.py(41):             for attr, value in base.__dict__.items():
0.49 forms.py(42):                 if value is None and attr in declared_fields:
0.49 forms.py(41):             for attr, value in base.__dict__.items():
0.49 forms.py(42):                 if value is None and attr in declared_fields:
0.49 forms.py(41):             for attr, value in base.__dict__.items():
0.49 forms.py(42):                 if value is None and attr in declared_fields:
0.49 forms.py(41):             for attr, value in base.__dict__.items():
0.49 forms.py(42):                 if value is None and attr in declared_fields:
0.49 forms.py(41):             for attr, value in base.__dict__.items():
0.49 forms.py(42):                 if value is None and attr in declared_fields:
0.49 forms.py(41):             for attr, value in base.__dict__.items():
0.49 forms.py(42):                 if value is None and attr in declared_fields:
0.49 forms.py(41):             for attr, value in base.__dict__.items():
0.49 forms.py(42):                 if value is None and attr in declared_fields:
0.49 forms.py(41):             for attr, value in base.__dict__.items():
0.49 forms.py(42):                 if value is None and attr in declared_fields:
0.49 forms.py(41):             for attr, value in base.__dict__.items():
0.49 forms.py(42):                 if value is None and attr in declared_fields:
0.49 forms.py(41):             for attr, value in base.__dict__.items():
0.49 forms.py(42):                 if value is None and attr in declared_fields:
0.49 forms.py(41):             for attr, value in base.__dict__.items():
0.49 forms.py(42):                 if value is None and attr in declared_fields:
0.49 forms.py(41):             for attr, value in base.__dict__.items():
0.49 forms.py(42):                 if value is None and attr in declared_fields:
0.49 forms.py(41):             for attr, value in base.__dict__.items():
0.49 forms.py(35):         for base in reversed(new_class.__mro__):
0.49 forms.py(37):             if hasattr(base, 'declared_fields'):
0.49 forms.py(38):                 declared_fields.update(base.declared_fields)
0.49 forms.py(41):             for attr, value in base.__dict__.items():
0.49 forms.py(42):                 if value is None and attr in declared_fields:
0.49 forms.py(41):             for attr, value in base.__dict__.items():
0.49 forms.py(42):                 if value is None and attr in declared_fields:
0.49 forms.py(41):             for attr, value in base.__dict__.items():
0.49 forms.py(42):                 if value is None and attr in declared_fields:
0.49 forms.py(41):             for attr, value in base.__dict__.items():
0.49 forms.py(42):                 if value is None and attr in declared_fields:
0.49 forms.py(41):             for attr, value in base.__dict__.items():
0.49 forms.py(42):                 if value is None and attr in declared_fields:
0.49 forms.py(41):             for attr, value in base.__dict__.items():
0.49 forms.py(35):         for base in reversed(new_class.__mro__):
0.49 forms.py(37):             if hasattr(base, 'declared_fields'):
0.49 forms.py(38):                 declared_fields.update(base.declared_fields)
0.49 forms.py(41):             for attr, value in base.__dict__.items():
0.49 forms.py(42):                 if value is None and attr in declared_fields:
0.49 forms.py(41):             for attr, value in base.__dict__.items():
0.49 forms.py(42):                 if value is None and attr in declared_fields:
0.49 forms.py(41):             for attr, value in base.__dict__.items():
0.49 forms.py(42):                 if value is None and attr in declared_fields:
0.49 forms.py(41):             for attr, value in base.__dict__.items():
0.49 forms.py(42):                 if value is None and attr in declared_fields:
0.49 forms.py(41):             for attr, value in base.__dict__.items():
0.49 forms.py(35):         for base in reversed(new_class.__mro__):
0.49 forms.py(45):         new_class.base_fields = declared_fields
0.49 forms.py(46):         new_class.declared_fields = declared_fields
0.49 forms.py(48):         return new_class
0.57 forms.py(26):         attrs['declared_fields'] = {
0.57 forms.py(27):             key: attrs.pop(key) for key, value in list(attrs.items())
0.57 forms.py(26):         attrs['declared_fields'] = {
0.57 forms.py(26):         attrs['declared_fields'] = {
0.57 forms.py(27):             key: attrs.pop(key) for key, value in list(attrs.items())
0.57 forms.py(28):             if isinstance(value, Field)
0.57 forms.py(26):         attrs['declared_fields'] = {
0.57 forms.py(27):             key: attrs.pop(key) for key, value in list(attrs.items())
0.57 forms.py(28):             if isinstance(value, Field)
0.57 forms.py(26):         attrs['declared_fields'] = {
0.57 forms.py(27):             key: attrs.pop(key) for key, value in list(attrs.items())
0.57 forms.py(28):             if isinstance(value, Field)
0.57 forms.py(27):             key: attrs.pop(key) for key, value in list(attrs.items())
0.57 forms.py(26):         attrs['declared_fields'] = {
0.57 forms.py(27):             key: attrs.pop(key) for key, value in list(attrs.items())
0.57 forms.py(28):             if isinstance(value, Field)
0.57 forms.py(27):             key: attrs.pop(key) for key, value in list(attrs.items())
0.57 forms.py(26):         attrs['declared_fields'] = {
0.57 forms.py(31):         new_class = super().__new__(mcs, name, bases, attrs)
0.57 forms.py(34):         declared_fields = {}
0.57 forms.py(35):         for base in reversed(new_class.__mro__):
0.57 forms.py(37):             if hasattr(base, 'declared_fields'):
0.57 forms.py(41):             for attr, value in base.__dict__.items():
0.57 forms.py(42):                 if value is None and attr in declared_fields:
0.57 forms.py(41):             for attr, value in base.__dict__.items():
0.57 forms.py(42):                 if value is None and attr in declared_fields:
0.57 forms.py(41):             for attr, value in base.__dict__.items():
0.57 forms.py(42):                 if value is None and attr in declared_fields:
0.57 forms.py(41):             for attr, value in base.__dict__.items():
0.57 forms.py(42):                 if value is None and attr in declared_fields:
0.57 forms.py(41):             for attr, value in base.__dict__.items():
0.57 forms.py(42):                 if value is None and attr in declared_fields:
0.57 forms.py(41):             for attr, value in base.__dict__.items():
0.57 forms.py(42):                 if value is None and attr in declared_fields:
0.57 forms.py(41):             for attr, value in base.__dict__.items():
0.57 forms.py(42):                 if value is None and attr in declared_fields:
0.57 forms.py(41):             for attr, value in base.__dict__.items():
0.57 forms.py(42):                 if value is None and attr in declared_fields:
0.57 forms.py(41):             for attr, value in base.__dict__.items():
0.57 forms.py(42):                 if value is None and attr in declared_fields:
0.57 forms.py(41):             for attr, value in base.__dict__.items():
0.57 forms.py(42):                 if value is None and attr in declared_fields:
0.57 forms.py(41):             for attr, value in base.__dict__.items():
0.57 forms.py(42):                 if value is None and attr in declared_fields:
0.57 forms.py(41):             for attr, value in base.__dict__.items():
0.57 forms.py(42):                 if value is None and attr in declared_fields:
0.57 forms.py(41):             for attr, value in base.__dict__.items():
0.57 forms.py(42):                 if value is None and attr in declared_fields:
0.57 forms.py(41):             for attr, value in base.__dict__.items():
0.57 forms.py(42):                 if value is None and attr in declared_fields:
0.57 forms.py(41):             for attr, value in base.__dict__.items():
0.57 forms.py(42):                 if value is None and attr in declared_fields:
0.57 forms.py(41):             for attr, value in base.__dict__.items():
0.57 forms.py(42):                 if value is None and attr in declared_fields:
0.57 forms.py(41):             for attr, value in base.__dict__.items():
0.57 forms.py(42):                 if value is None and attr in declared_fields:
0.57 forms.py(41):             for attr, value in base.__dict__.items():
0.57 forms.py(42):                 if value is None and attr in declared_fields:
0.57 forms.py(41):             for attr, value in base.__dict__.items():
0.57 forms.py(42):                 if value is None and attr in declared_fields:
0.57 forms.py(41):             for attr, value in base.__dict__.items():
0.57 forms.py(42):                 if value is None and attr in declared_fields:
0.57 forms.py(41):             for attr, value in base.__dict__.items():
0.57 forms.py(42):                 if value is None and attr in declared_fields:
0.57 forms.py(41):             for attr, value in base.__dict__.items():
0.57 forms.py(42):                 if value is None and attr in declared_fields:
0.57 forms.py(41):             for attr, value in base.__dict__.items():
0.57 forms.py(42):                 if value is None and attr in declared_fields:
0.57 forms.py(41):             for attr, value in base.__dict__.items():
0.57 forms.py(35):         for base in reversed(new_class.__mro__):
0.57 forms.py(37):             if hasattr(base, 'declared_fields'):
0.57 forms.py(41):             for attr, value in base.__dict__.items():
0.57 forms.py(42):                 if value is None and attr in declared_fields:
0.57 forms.py(41):             for attr, value in base.__dict__.items():
0.57 forms.py(42):                 if value is None and attr in declared_fields:
0.57 forms.py(41):             for attr, value in base.__dict__.items():
0.57 forms.py(42):                 if value is None and attr in declared_fields:
0.57 forms.py(41):             for attr, value in base.__dict__.items():
0.57 forms.py(42):                 if value is None and attr in declared_fields:
0.57 forms.py(41):             for attr, value in base.__dict__.items():
0.57 forms.py(42):                 if value is None and attr in declared_fields:
0.57 forms.py(41):             for attr, value in base.__dict__.items():
0.57 forms.py(42):                 if value is None and attr in declared_fields:
0.57 forms.py(41):             for attr, value in base.__dict__.items():
0.57 forms.py(42):                 if value is None and attr in declared_fields:
0.57 forms.py(41):             for attr, value in base.__dict__.items():
0.57 forms.py(42):                 if value is None and attr in declared_fields:
0.57 forms.py(41):             for attr, value in base.__dict__.items():
0.57 forms.py(42):                 if value is None and attr in declared_fields:
0.57 forms.py(41):             for attr, value in base.__dict__.items():
0.57 forms.py(42):                 if value is None and attr in declared_fields:
0.57 forms.py(41):             for attr, value in base.__dict__.items():
0.57 forms.py(42):                 if value is None and attr in declared_fields:
0.57 forms.py(41):             for attr, value in base.__dict__.items():
0.57 forms.py(42):                 if value is None and attr in declared_fields:
0.57 forms.py(41):             for attr, value in base.__dict__.items():
0.57 forms.py(42):                 if value is None and attr in declared_fields:
0.57 forms.py(41):             for attr, value in base.__dict__.items():
0.57 forms.py(42):                 if value is None and attr in declared_fields:
0.57 forms.py(41):             for attr, value in base.__dict__.items():
0.57 forms.py(42):                 if value is None and attr in declared_fields:
0.57 forms.py(41):             for attr, value in base.__dict__.items():
0.57 forms.py(42):                 if value is None and attr in declared_fields:
0.57 forms.py(41):             for attr, value in base.__dict__.items():
0.57 forms.py(42):                 if value is None and attr in declared_fields:
0.57 forms.py(41):             for attr, value in base.__dict__.items():
0.57 forms.py(42):                 if value is None and attr in declared_fields:
0.57 forms.py(41):             for attr, value in base.__dict__.items():
0.57 forms.py(42):                 if value is None and attr in declared_fields:
0.57 forms.py(41):             for attr, value in base.__dict__.items():
0.57 forms.py(42):                 if value is None and attr in declared_fields:
0.57 forms.py(41):             for attr, value in base.__dict__.items():
0.57 forms.py(42):                 if value is None and attr in declared_fields:
0.57 forms.py(41):             for attr, value in base.__dict__.items():
0.57 forms.py(42):                 if value is None and attr in declared_fields:
0.57 forms.py(41):             for attr, value in base.__dict__.items():
0.57 forms.py(42):                 if value is None and attr in declared_fields:
0.57 forms.py(41):             for attr, value in base.__dict__.items():
0.57 forms.py(42):                 if value is None and attr in declared_fields:
0.57 forms.py(41):             for attr, value in base.__dict__.items():
0.57 forms.py(42):                 if value is None and attr in declared_fields:
0.57 forms.py(41):             for attr, value in base.__dict__.items():
0.57 forms.py(42):                 if value is None and attr in declared_fields:
0.57 forms.py(41):             for attr, value in base.__dict__.items():
0.57 forms.py(42):                 if value is None and attr in declared_fields:
0.57 forms.py(41):             for attr, value in base.__dict__.items():
0.57 forms.py(42):                 if value is None and attr in declared_fields:
0.57 forms.py(41):             for attr, value in base.__dict__.items():
0.57 forms.py(42):                 if value is None and attr in declared_fields:
0.57 forms.py(41):             for attr, value in base.__dict__.items():
0.57 forms.py(42):                 if value is None and attr in declared_fields:
0.57 forms.py(41):             for attr, value in base.__dict__.items():
0.57 forms.py(42):                 if value is None and attr in declared_fields:
0.57 forms.py(41):             for attr, value in base.__dict__.items():
0.57 forms.py(42):                 if value is None and attr in declared_fields:
0.57 forms.py(41):             for attr, value in base.__dict__.items():
0.57 forms.py(42):                 if value is None and attr in declared_fields:
0.57 forms.py(41):             for attr, value in base.__dict__.items():
0.57 forms.py(42):                 if value is None and attr in declared_fields:
0.57 forms.py(41):             for attr, value in base.__dict__.items():
0.57 forms.py(42):                 if value is None and attr in declared_fields:
0.57 forms.py(41):             for attr, value in base.__dict__.items():
0.57 forms.py(42):                 if value is None and attr in declared_fields:
0.57 forms.py(41):             for attr, value in base.__dict__.items():
0.57 forms.py(42):                 if value is None and attr in declared_fields:
0.57 forms.py(41):             for attr, value in base.__dict__.items():
0.57 forms.py(42):                 if value is None and attr in declared_fields:
0.57 forms.py(41):             for attr, value in base.__dict__.items():
0.57 forms.py(42):                 if value is None and attr in declared_fields:
0.57 forms.py(41):             for attr, value in base.__dict__.items():
0.57 forms.py(42):                 if value is None and attr in declared_fields:
0.57 forms.py(41):             for attr, value in base.__dict__.items():
0.57 forms.py(35):         for base in reversed(new_class.__mro__):
0.57 forms.py(37):             if hasattr(base, 'declared_fields'):
0.57 forms.py(38):                 declared_fields.update(base.declared_fields)
0.57 forms.py(41):             for attr, value in base.__dict__.items():
0.57 forms.py(42):                 if value is None and attr in declared_fields:
0.57 forms.py(41):             for attr, value in base.__dict__.items():
0.57 forms.py(42):                 if value is None and attr in declared_fields:
0.57 forms.py(41):             for attr, value in base.__dict__.items():
0.57 forms.py(42):                 if value is None and attr in declared_fields:
0.57 forms.py(41):             for attr, value in base.__dict__.items():
0.57 forms.py(42):                 if value is None and attr in declared_fields:
0.57 forms.py(41):             for attr, value in base.__dict__.items():
0.57 forms.py(42):                 if value is None and attr in declared_fields:
0.57 forms.py(41):             for attr, value in base.__dict__.items():
0.57 forms.py(35):         for base in reversed(new_class.__mro__):
0.57 forms.py(37):             if hasattr(base, 'declared_fields'):
0.57 forms.py(38):                 declared_fields.update(base.declared_fields)
0.57 forms.py(41):             for attr, value in base.__dict__.items():
0.57 forms.py(42):                 if value is None and attr in declared_fields:
0.57 forms.py(41):             for attr, value in base.__dict__.items():
0.57 forms.py(42):                 if value is None and attr in declared_fields:
0.57 forms.py(41):             for attr, value in base.__dict__.items():
0.57 forms.py(42):                 if value is None and attr in declared_fields:
0.57 forms.py(41):             for attr, value in base.__dict__.items():
0.57 forms.py(42):                 if value is None and attr in declared_fields:
0.57 forms.py(41):             for attr, value in base.__dict__.items():
0.57 forms.py(35):         for base in reversed(new_class.__mro__):
0.57 forms.py(45):         new_class.base_fields = declared_fields
0.57 forms.py(46):         new_class.declared_fields = declared_fields
0.57 forms.py(48):         return new_class
Found 1 test(s).
Skipping setup of unused database(s): default, other.
0.59 forms.py(26):         attrs['declared_fields'] = {
0.59 forms.py(27):             key: attrs.pop(key) for key, value in list(attrs.items())
0.59 forms.py(26):         attrs['declared_fields'] = {
0.59 forms.py(26):         attrs['declared_fields'] = {
0.59 forms.py(27):             key: attrs.pop(key) for key, value in list(attrs.items())
0.59 forms.py(28):             if isinstance(value, Field)
0.59 forms.py(26):         attrs['declared_fields'] = {
0.59 forms.py(27):             key: attrs.pop(key) for key, value in list(attrs.items())
0.59 forms.py(28):             if isinstance(value, Field)
0.59 forms.py(26):         attrs['declared_fields'] = {
0.59 forms.py(27):             key: attrs.pop(key) for key, value in list(attrs.items())
0.59 forms.py(28):             if isinstance(value, Field)
0.59 forms.py(26):         attrs['declared_fields'] = {
0.59 forms.py(27):             key: attrs.pop(key) for key, value in list(attrs.items())
0.59 forms.py(28):             if isinstance(value, Field)
0.59 forms.py(26):         attrs['declared_fields'] = {
0.59 forms.py(31):         new_class = super().__new__(mcs, name, bases, attrs)
0.59 forms.py(34):         declared_fields = {}
0.59 forms.py(35):         for base in reversed(new_class.__mro__):
0.59 forms.py(37):             if hasattr(base, 'declared_fields'):
0.59 forms.py(41):             for attr, value in base.__dict__.items():
0.59 forms.py(42):                 if value is None and attr in declared_fields:
0.59 forms.py(41):             for attr, value in base.__dict__.items():
0.59 forms.py(42):                 if value is None and attr in declared_fields:
0.59 forms.py(41):             for attr, value in base.__dict__.items():
0.59 forms.py(42):                 if value is None and attr in declared_fields:
0.59 forms.py(41):             for attr, value in base.__dict__.items():
0.59 forms.py(42):                 if value is None and attr in declared_fields:
0.59 forms.py(41):             for attr, value in base.__dict__.items():
0.59 forms.py(42):                 if value is None and attr in declared_fields:
0.59 forms.py(41):             for attr, value in base.__dict__.items():
0.59 forms.py(42):                 if value is None and attr in declared_fields:
0.59 forms.py(41):             for attr, value in base.__dict__.items():
0.59 forms.py(42):                 if value is None and attr in declared_fields:
0.59 forms.py(41):             for attr, value in base.__dict__.items():
0.59 forms.py(42):                 if value is None and attr in declared_fields:
0.59 forms.py(41):             for attr, value in base.__dict__.items():
0.59 forms.py(42):                 if value is None and attr in declared_fields:
0.59 forms.py(41):             for attr, value in base.__dict__.items():
0.59 forms.py(42):                 if value is None and attr in declared_fields:
0.59 forms.py(41):             for attr, value in base.__dict__.items():
0.59 forms.py(42):                 if value is None and attr in declared_fields:
0.59 forms.py(41):             for attr, value in base.__dict__.items():
0.59 forms.py(42):                 if value is None and attr in declared_fields:
0.59 forms.py(41):             for attr, value in base.__dict__.items():
0.59 forms.py(42):                 if value is None and attr in declared_fields:
0.59 forms.py(41):             for attr, value in base.__dict__.items():
0.59 forms.py(42):                 if value is None and attr in declared_fields:
0.59 forms.py(41):             for attr, value in base.__dict__.items():
0.59 forms.py(42):                 if value is None and attr in declared_fields:
0.59 forms.py(41):             for attr, value in base.__dict__.items():
0.59 forms.py(42):                 if value is None and attr in declared_fields:
0.59 forms.py(41):             for attr, value in base.__dict__.items():
0.59 forms.py(42):                 if value is None and attr in declared_fields:
0.59 forms.py(41):             for attr, value in base.__dict__.items():
0.59 forms.py(42):                 if value is None and attr in declared_fields:
0.59 forms.py(41):             for attr, value in base.__dict__.items():
0.59 forms.py(42):                 if value is None and attr in declared_fields:
0.59 forms.py(41):             for attr, value in base.__dict__.items():
0.59 forms.py(42):                 if value is None and attr in declared_fields:
0.59 forms.py(41):             for attr, value in base.__dict__.items():
0.59 forms.py(42):                 if value is None and attr in declared_fields:
0.59 forms.py(41):             for attr, value in base.__dict__.items():
0.59 forms.py(42):                 if value is None and attr in declared_fields:
0.59 forms.py(41):             for attr, value in base.__dict__.items():
0.59 forms.py(42):                 if value is None and attr in declared_fields:
0.59 forms.py(41):             for attr, value in base.__dict__.items():
0.59 forms.py(35):         for base in reversed(new_class.__mro__):
0.59 forms.py(37):             if hasattr(base, 'declared_fields'):
0.59 forms.py(41):             for attr, value in base.__dict__.items():
0.59 forms.py(42):                 if value is None and attr in declared_fields:
0.59 forms.py(41):             for attr, value in base.__dict__.items():
0.59 forms.py(42):                 if value is None and attr in declared_fields:
0.59 forms.py(41):             for attr, value in base.__dict__.items():
0.59 forms.py(42):                 if value is None and attr in declared_fields:
0.59 forms.py(41):             for attr, value in base.__dict__.items():
0.59 forms.py(42):                 if value is None and attr in declared_fields:
0.59 forms.py(41):             for attr, value in base.__dict__.items():
0.59 forms.py(42):                 if value is None and attr in declared_fields:
0.59 forms.py(41):             for attr, value in base.__dict__.items():
0.59 forms.py(42):                 if value is None and attr in declared_fields:
0.59 forms.py(41):             for attr, value in base.__dict__.items():
0.59 forms.py(42):                 if value is None and attr in declared_fields:
0.59 forms.py(41):             for attr, value in base.__dict__.items():
0.59 forms.py(42):                 if value is None and attr in declared_fields:
0.59 forms.py(41):             for attr, value in base.__dict__.items():
0.59 forms.py(42):                 if value is None and attr in declared_fields:
0.59 forms.py(41):             for attr, value in base.__dict__.items():
0.59 forms.py(42):                 if value is None and attr in declared_fields:
0.59 test_clean_fields_vs_changed_data (test_coverup_django__django-14631.BaseFormTest) ... forms.py(41):             for attr, value in base.__dict__.items():
0.59 forms.py(42):                 if value is None and attr in declared_fields:
0.59 forms.py(41):             for attr, value in base.__dict__.items():
0.59 forms.py(42):                 if value is None and attr in declared_fields:
0.59 forms.py(41):             for attr, value in base.__dict__.items():
0.59 forms.py(42):                 if value is None and attr in declared_fields:
0.59 forms.py(41):             for attr, value in base.__dict__.items():
0.59 forms.py(42):                 if value is None and attr in declared_fields:
0.59 forms.py(41):             for attr, value in base.__dict__.items():
0.59 forms.py(42):                 if value is None and attr in declared_fields:
0.59 forms.py(41):             for attr, value in base.__dict__.items():
0.59 forms.py(42):                 if value is None and attr in declared_fields:
0.59 forms.py(41):             for attr, value in base.__dict__.items():
0.59 forms.py(42):                 if value is None and attr in declared_fields:
0.59 forms.py(41):             for attr, value in base.__dict__.items():
0.59 forms.py(42):                 if value is None and attr in declared_fields:
0.59 forms.py(41):             for attr, value in base.__dict__.items():
0.59 forms.py(42):                 if value is None and attr in declared_fields:
0.59 forms.py(41):             for attr, value in base.__dict__.items():
0.59 forms.py(42):                 if value is None and attr in declared_fields:
0.59 forms.py(41):             for attr, value in base.__dict__.items():
0.59 forms.py(42):                 if value is None and attr in declared_fields:
0.59 forms.py(41):             for attr, value in base.__dict__.items():
0.59 forms.py(42):                 if value is None and attr in declared_fields:
0.59 forms.py(41):             for attr, value in base.__dict__.items():
0.59 forms.py(42):                 if value is None and attr in declared_fields:
0.59 forms.py(41):             for attr, value in base.__dict__.items():
0.59 forms.py(42):                 if value is None and attr in declared_fields:
0.59 forms.py(41):             for attr, value in base.__dict__.items():
0.59 forms.py(42):                 if value is None and attr in declared_fields:
0.59 forms.py(41):             for attr, value in base.__dict__.items():
0.59 forms.py(42):                 if value is None and attr in declared_fields:
0.59 forms.py(41):             for attr, value in base.__dict__.items():
0.59 forms.py(42):                 if value is None and attr in declared_fields:
0.59 forms.py(41):             for attr, value in base.__dict__.items():
0.59 forms.py(42):                 if value is None and attr in declared_fields:
0.59 forms.py(41):             for attr, value in base.__dict__.items():
0.59 forms.py(42):                 if value is None and attr in declared_fields:
0.59 forms.py(41):             for attr, value in base.__dict__.items():
0.59 forms.py(42):                 if value is None and attr in declared_fields:
0.59 forms.py(41):             for attr, value in base.__dict__.items():
0.59 forms.py(42):                 if value is None and attr in declared_fields:
0.59 forms.py(41):             for attr, value in base.__dict__.items():
0.59 forms.py(42):                 if value is None and attr in declared_fields:
0.59 forms.py(41):             for attr, value in base.__dict__.items():
0.59 forms.py(42):                 if value is None and attr in declared_fields:
0.59 forms.py(41):             for attr, value in base.__dict__.items():
0.59 forms.py(42):                 if value is None and attr in declared_fields:
0.59 forms.py(41):             for attr, value in base.__dict__.items():
0.59 forms.py(42):                 if value is None and attr in declared_fields:
0.59 forms.py(41):             for attr, value in base.__dict__.items():
0.59 forms.py(42):                 if value is None and attr in declared_fields:
0.59 forms.py(41):             for attr, value in base.__dict__.items():
0.59 forms.py(42):                 if value is None and attr in declared_fields:
0.59 forms.py(41):             for attr, value in base.__dict__.items():
0.59 forms.py(42):                 if value is None and attr in declared_fields:
0.59 forms.py(41):             for attr, value in base.__dict__.items():
0.59 forms.py(42):                 if value is None and attr in declared_fields:
0.59 forms.py(41):             for attr, value in base.__dict__.items():
0.59 forms.py(42):                 if value is None and attr in declared_fields:
0.59 forms.py(41):             for attr, value in base.__dict__.items():
0.59 forms.py(35):         for base in reversed(new_class.__mro__):
0.59 forms.py(37):             if hasattr(base, 'declared_fields'):
0.59 forms.py(38):                 declared_fields.update(base.declared_fields)
0.59 forms.py(41):             for attr, value in base.__dict__.items():
0.59 forms.py(42):                 if value is None and attr in declared_fields:
0.59 forms.py(41):             for attr, value in base.__dict__.items():
0.59 forms.py(42):                 if value is None and attr in declared_fields:
0.59 forms.py(41):             for attr, value in base.__dict__.items():
0.59 forms.py(42):                 if value is None and attr in declared_fields:
0.59 forms.py(41):             for attr, value in base.__dict__.items():
0.59 forms.py(42):                 if value is None and attr in declared_fields:
0.59 forms.py(41):             for attr, value in base.__dict__.items():
0.59 forms.py(42):                 if value is None and attr in declared_fields:
0.59 forms.py(41):             for attr, value in base.__dict__.items():
0.59 forms.py(35):         for base in reversed(new_class.__mro__):
0.59 forms.py(37):             if hasattr(base, 'declared_fields'):
0.59 forms.py(38):                 declared_fields.update(base.declared_fields)
0.59 forms.py(41):             for attr, value in base.__dict__.items():
0.59 forms.py(42):                 if value is None and attr in declared_fields:
0.59 forms.py(41):             for attr, value in base.__dict__.items():
0.59 forms.py(42):                 if value is None and attr in declared_fields:
0.59 forms.py(41):             for attr, value in base.__dict__.items():
0.59 forms.py(42):                 if value is None and attr in declared_fields:
0.59 forms.py(41):             for attr, value in base.__dict__.items():
0.59 forms.py(42):                 if value is None and attr in declared_fields:
0.59 forms.py(41):             for attr, value in base.__dict__.items():
0.59 forms.py(42):                 if value is None and attr in declared_fields:
0.59 forms.py(41):             for attr, value in base.__dict__.items():
0.59 forms.py(35):         for base in reversed(new_class.__mro__):
0.59 forms.py(45):         new_class.base_fields = declared_fields
0.59 forms.py(46):         new_class.declared_fields = declared_fields
0.59 forms.py(48):         return new_class
System check identified no issues (0 silenced).
0.61 forms.py(67):         self.is_bound = data is not None or files is not None
0.61 forms.py(68):         self.data = MultiValueDict() if data is None else data
0.61 forms.py(69):         self.files = MultiValueDict() if files is None else files
0.61 forms.py(70):         self.auto_id = auto_id
0.61 forms.py(71):         if prefix is not None:
0.61 forms.py(73):         self.initial = initial or {}
0.61 forms.py(74):         self.error_class = error_class
0.61 forms.py(76):         self.label_suffix = label_suffix if label_suffix is not None else _(':')
0.61 forms.py(77):         self.empty_permitted = empty_permitted
0.61 forms.py(78):         self._errors = None  # Stores the errors after clean() has been called.
0.61 forms.py(85):         self.fields = copy.deepcopy(self.base_fields)
0.61 forms.py(86):         self._bound_fields_cache = {}
0.61 forms.py(87):         self.order_fields(self.field_order if field_order is None else field_order)
0.61 forms.py(120):         if field_order is None:
0.61 forms.py(121):             return
0.61 forms.py(89):         if use_required_attribute is not None:
0.61 forms.py(92):         if self.empty_permitted and self.use_required_attribute:
0.61 forms.py(100):         if renderer is None:
0.61 forms.py(101):             if self.default_renderer is None:
0.61 forms.py(102):                 renderer = get_default_renderer()
0.61 forms.py(107):         self.renderer = renderer
0.61 forms.py(379):         self._errors = ErrorDict()
0.61 forms.py(380):         if not self.is_bound:  # Stop further processing.
0.61 forms.py(382):         self.cleaned_data = {}
0.61 forms.py(385):         if self.empty_permitted and not self.has_changed():
0.61 forms.py(388):         self._clean_fields()
0.61 forms.py(393):         for name, bf in self._bound_items():
0.61 forms.py(148):         for name in self.fields:
0.61 forms.py(149):             yield name, self[name]
0.61 forms.py(158):         try:
0.61 forms.py(159):             return self._bound_fields_cache[name]
0.61 forms.py(160):         except KeyError:
0.61 forms.py(161):             pass
0.61 forms.py(162):         try:
0.61 forms.py(163):             field = self.fields[name]
0.61 forms.py(172):         bound_field = field.get_bound_field(self, name)
0.61 boundfield.py(19):         self.form = form
0.61 boundfield.py(20):         self.field = field
0.61 boundfield.py(21):         self.name = name
0.61 boundfield.py(22):         self.html_name = form.add_prefix(name)
0.61 forms.py(194):         return '%s-%s' % (self.prefix, field_name) if self.prefix else field_name
0.61 boundfield.py(23):         self.html_initial_name = form.add_initial_prefix(name)
0.61 forms.py(198):         return 'initial-%s' % self.add_prefix(field_name)
0.61 forms.py(194):         return '%s-%s' % (self.prefix, field_name) if self.prefix else field_name
0.61 boundfield.py(24):         self.html_initial_id = form.add_initial_prefix(self.auto_id)
0.61 boundfield.py(211):         auto_id = self.form.auto_id  # Boolean or string
0.61 boundfield.py(212):         if auto_id and '%s' in str(auto_id):
0.61 boundfield.py(213):             return auto_id % self.html_name
0.61 forms.py(198):         return 'initial-%s' % self.add_prefix(field_name)
0.61 forms.py(194):         return '%s-%s' % (self.prefix, field_name) if self.prefix else field_name
0.61 boundfield.py(25):         if self.field.label is None:
0.61 boundfield.py(26):             self.label = pretty_name(name)
0.61 boundfield.py(29):         self.help_text = field.help_text or ''
0.61 forms.py(173):         self._bound_fields_cache[name] = bound_field
0.61 forms.py(174):         return bound_field
0.61 forms.py(394):             field = bf.field
0.61 forms.py(395):             value = bf.initial if field.disabled else bf.data
0.61 boundfield.py(122):         return self.form._widget_data_value(self.field.widget, self.html_name)
0.61 forms.py(204):         return widget.value_from_datadict(self.data, self.files, html_name)
0.61 forms.py(396):             try:
0.61 forms.py(397):                 if isinstance(field, FileField):
0.61 forms.py(400):                     value = field.clean(value)
0.61 forms.py(401):                 self.cleaned_data[name] = value
0.61 forms.py(402):                 if hasattr(self, 'clean_%s' % name):
0.61 forms.py(393):         for name, bf in self._bound_items():
0.61 forms.py(148):         for name in self.fields:
0.61 forms.py(149):             yield name, self[name]
0.61 forms.py(158):         try:
0.61 forms.py(159):             return self._bound_fields_cache[name]
0.61 forms.py(160):         except KeyError:
0.61 forms.py(161):             pass
0.61 forms.py(162):         try:
0.61 forms.py(163):             field = self.fields[name]
0.61 forms.py(172):         bound_field = field.get_bound_field(self, name)
0.61 boundfield.py(19):         self.form = form
0.61 boundfield.py(20):         self.field = field
0.61 boundfield.py(21):         self.name = name
0.61 boundfield.py(22):         self.html_name = form.add_prefix(name)
0.61 forms.py(194):         return '%s-%s' % (self.prefix, field_name) if self.prefix else field_name
0.61 boundfield.py(23):         self.html_initial_name = form.add_initial_prefix(name)
0.61 forms.py(198):         return 'initial-%s' % self.add_prefix(field_name)
0.61 forms.py(194):         return '%s-%s' % (self.prefix, field_name) if self.prefix else field_name
0.61 boundfield.py(24):         self.html_initial_id = form.add_initial_prefix(self.auto_id)
0.61 boundfield.py(211):         auto_id = self.form.auto_id  # Boolean or string
0.61 boundfield.py(212):         if auto_id and '%s' in str(auto_id):
0.61 boundfield.py(213):             return auto_id % self.html_name
0.61 forms.py(198):         return 'initial-%s' % self.add_prefix(field_name)
0.61 forms.py(194):         return '%s-%s' % (self.prefix, field_name) if self.prefix else field_name
0.61 boundfield.py(25):         if self.field.label is None:
0.61 boundfield.py(26):             self.label = pretty_name(name)
0.61 boundfield.py(29):         self.help_text = field.help_text or ''
0.61 forms.py(173):         self._bound_fields_cache[name] = bound_field
0.61 forms.py(174):         return bound_field
0.61 forms.py(394):             field = bf.field
0.61 forms.py(395):             value = bf.initial if field.disabled else bf.data
0.61 boundfield.py(231):         data = self.form.get_initial_for_field(self.field, self.name)
0.61 forms.py(475):         value = self.initial.get(field_name, field.initial)
0.61 forms.py(476):         if callable(value):
0.61 forms.py(478):         return value
0.61 boundfield.py(234):         if (isinstance(data, (datetime.datetime, datetime.time)) and
0.61 boundfield.py(237):         return data
0.61 forms.py(396):             try:
0.61 forms.py(397):                 if isinstance(field, FileField):
0.61 forms.py(400):                     value = field.clean(value)
0.61 forms.py(401):                 self.cleaned_data[name] = value
0.61 forms.py(402):                 if hasattr(self, 'clean_%s' % name):
0.61 forms.py(393):         for name, bf in self._bound_items():
0.61 forms.py(148):         for name in self.fields:
0.61 forms.py(389):         self._clean_form()
0.61 forms.py(409):         try:
0.61 forms.py(410):             cleaned_data = self.clean()
0.61 forms.py(431):         return self.cleaned_data
0.61 forms.py(414):             if cleaned_data is not None:
0.61 forms.py(415):                 self.cleaned_data = cleaned_data
0.61 forms.py(390):         self._post_clean()
0.61 forms.py(422):         pass
0.61 forms.py(439):         return [name for name, bf in self._bound_items() if bf._has_changed()]
0.61 forms.py(439):         return [name for name, bf in self._bound_items() if bf._has_changed()]
0.61 forms.py(148):         for name in self.fields:
0.61 forms.py(149):             yield name, self[name]
0.61 forms.py(158):         try:
0.61 forms.py(159):             return self._bound_fields_cache[name]
0.61 boundfield.py(135):         field = self.field
0.61 boundfield.py(136):         if field.show_hidden_initial:
0.61 boundfield.py(147):             initial_value = self.initial
0.61 boundfield.py(231):         data = self.form.get_initial_for_field(self.field, self.name)
0.61 forms.py(475):         value = self.initial.get(field_name, field.initial)
0.61 forms.py(476):         if callable(value):
0.61 forms.py(478):         return value
0.61 boundfield.py(234):         if (isinstance(data, (datetime.datetime, datetime.time)) and
0.61 boundfield.py(237):         return data
0.61 boundfield.py(148):         return field.has_changed(initial_value, self.data)
0.61 boundfield.py(122):         return self.form._widget_data_value(self.field.widget, self.html_name)
0.61 forms.py(204):         return widget.value_from_datadict(self.data, self.files, html_name)
0.61 forms.py(439):         return [name for name, bf in self._bound_items() if bf._has_changed()]
0.61 forms.py(148):         for name in self.fields:
0.61 forms.py(149):             yield name, self[name]
0.61 forms.py(158):         try:
0.61 forms.py(159):             return self._bound_fields_cache[name]
0.61 FAIL

======================================================================
FAIL: test_clean_fields_vs_changed_data (test_coverup_django__django-14631.BaseFormTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/./tests/test_coverup_django__django-14631.py", line 26, in test_clean_fields_vs_changed_data
    self.assertNotEqual(cleaned_data_age, form['age'].initial)
AssertionError: 'Initial Age' == 'Initial Age'

----------------------------------------------------------------------
Ran 1 test in 0.001s

FAILED (failures=1)
boundfield.py(135):         field = self.field
0.61 boundfield.py(136):         if field.show_hidden_initial:
0.61 boundfield.py(147):             initial_value = self.initial
0.61 boundfield.py(148):         return field.has_changed(initial_value, self.data)
0.61 boundfield.py(122):         return self.form._widget_data_value(self.field.widget, self.html_name)
0.61 forms.py(204):         return widget.value_from_datadict(self.data, self.files, html_name)
0.61 forms.py(439):         return [name for name, bf in self._bound_items() if bf._has_changed()]
0.61 forms.py(148):         for name in self.fields:
0.61 forms.py(158):         try:
0.61 forms.py(159):             return self._bound_fields_cache[name]
+ cat coverage.cover
{"/testbed/django/forms/boundfield.py": {"1": 1, "2": 1, "4": 1, "5": 1, "6": 1, "7": 1, "8": 1, "9": 1, "10": 1, "12": 1, "15": 2, "16": 1, "253": 2, "254": 1, "18": 1, "31": 1, "37": 1, "38": 1, "54": 1, "58": 1, "61": 1, "64": 1, "74": 1, "75": 1, "81": 1, "101": 1, "107": 1, "111": 1, "117": 1, "118": 1, "124": 1, "134": 1, "150": 1, "187": 1, "200": 1, "201": 1, "205": 1, "206": 1, "218": 1, "219": 1, "229": 1, "230": 1, "239": 1, "248": 1, "249": 1, "19": 2, "20": 2, "21": 2, "22": 2, "23": 2, "24": 2, "25": 2, "26": 2, "28": 0, "29": 2, "33": 0, "34": 0, "35": 0, "46": 0, "47": 0, "48": 0, "49": 0, "51": 0, "50": 0, "56": 0, "59": 0, "62": 0, "67": 0, "68": 0, "69": 0, "70": 0, "72": 0, "79": 0, "87": 0, "88": 0, "89": 0, "90": 0, "91": 0, "92": 0, "93": 0, "94": 0, "95": 0, "96": 0, "97": 0, "98": 0, "105": 0, "109": 0, "115": 0, "122": 3, "129": 0, "130": 0, "131": 0, "132": 0, "135": 2, "136": 2, "137": 0, "138": 0, "139": 0, "141": 0, "142": 0, "143": 0, "145": 0, "147": 2, "148": 2, "160": 0, "161": 0, "162": 0, "163": 0, "167": 0, "168": 0, "169": 0, "170": 0, "171": 0, "172": 0, "173": 0, "174": 0, "175": 0, "176": 0, "177": 0, "178": 0, "180": 0, "181": 0, "182": 0, "184": 0, "185": 0, "191": 0, "192": 0, "193": 0, "194": 0, "195": 0, "196": 0, "197": 0, "198": 0, "203": 0, "211": 2, "212": 2, "213": 2, "214": 0, "215": 0, "216": 0, "225": 0, "226": 0, "227": 0, "231": 2, "234": 2, "235": 0, "236": 0, "237": 2, "240": 0, "241": 0, "242": 0, "243": 0, "244": 0, "245": 0, "246": 0, "250": 0, "267": 1, "272": 1, "275": 1, "279": 1, "280": 1, "285": 1, "286": 1, "289": 1, "290": 1, "268": 0, "269": 0, "270": 0, "273": 0, "276": 0, "277": 0, "281": 0, "282": 0, "283": 0, "287": 0, "291": 0}}
{"/testbed/django/forms/forms.py": {"5": 1, "7": 1, "8": 1, "9": 1, "10": 1, "11": 1, "12": 1, "13": 1, "14": 1, "15": 1, "17": 1, "19": 1, "22": 2, "51": 2, "52": 1, "481": 2, "24": 1, "26": 41, "27": 33, "31": 6, "34": 6, "35": 29, "37": 23, "38": 10, "41": 458, "42": 435, "43": 0, "45": 6, "46": 6, "48": 6, "28": 23, "59": 1, "60": 1, "61": 1, "62": 1, "64": 2, "65": 1, "66": 1, "109": 1, "131": 1, "134": 1, "146": 1, "151": 1, "156": 1, "176": 1, "177": 1, "183": 1, "187": 1, "196": 1, "200": 1, "206": 1, "284": 1, "294": 1, "304": 1, "314": 1, "322": 1, "369": 1, "375": 1, "392": 1, "408": 1, "417": 1, "424": 1, "433": 1, "437": 1, "438": 1, "441": 1, "442": 1, "449": 1, "456": 1, "463": 1, "470": 1, "67": 1, "68": 1, "69": 1, "70": 1, "71": 1, "72": 0, "73": 1, "74": 1, "76": 1, "77": 1, "78": 1, "85": 1, "86": 1, "87": 1, "89": 1, "90": 0, "92": 1, "93": 0, "94": 0, "100": 1, "101": 1, "102": 1, "104": 0, "105": 0, "106": 0, "107": 1, "120": 1, "121": 1, "122": 0, "123": 0, "124": 0, "125": 0, "126": 0, "127": 0, "128": 0, "129": 0, "132": 0, "135": 0, "136": 0, "138": 0, "139": 0, "140": 0, "141": 0, "142": 0, "143": 0, "148": 6, "149": 4, "153": 0, "154": 0, "158": 5, "159": 5, "160": 2, "161": 2, "162": 2, "163": 2, "164": 0, "165": 0, "166": 0, "167": 0, "168": 0, "169": 0, "172": 2, "173": 2, "174": 2, "179": 0, "180": 0, "181": 0, "185": 0, "194": 6, "198": 4, "204": 3, "209": 0, "210": 0, "212": 0, "213": 0, "214": 0, "215": 0, "216": 0, "217": 0, "218": 0, "219": 0, "220": 0, "221": 0, "225": 0, "226": 0, "227": 0, "229": 0, "230": 0, "232": 0, "233": 0, "234": 0, "236": 0, "238": 0, "239": 0, "241": 0, "243": 0, "244": 0, "245": 0, "246": 0, "247": 0, "248": 0, "249": 0, "250": 0, "253": 0, "254": 0, "256": 0, "257": 0, "258": 0, "259": 0, "262": 0, "267": 0, "268": 0, "269": 0, "270": 0, "271": 0, "272": 0, "273": 0, "274": 0, "276": 0, "277": 0, "281": 0, "282": 0, "286": 0, "287": 0, "288": 0, "289": 0, "290": 0, "291": 0, "296": 0, "297": 0, "298": 0, "299": 0, "300": 0, "301": 0, "306": 0, "307": 0, "308": 0, "309": 0, "310": 0, "311": 0, "320": 0, "340": 0, "343": 0, "345": 0, "346": 0, "347": 0, "348": 0, "352": 0, "354": 0, "356": 0, "357": 0, "358": 0, "359": 0, "360": 0, "361": 0, "362": 0, "364": 0, "365": 0, "366": 0, "367": 0, "370": 0, "371": 0, "372": 0, "379": 1, "380": 1, "381": 0, "382": 1, "385": 1, "386": 0, "388": 1, "389": 1, "390": 1, "393": 3, "394": 2, "395": 2, "396": 2, "397": 2, "398": 0, "400": 2, "401": 2, "402": 2, "403": 0, "404": 0, "405": 0, "406": 0, "409": 1, "410": 1, "411": 0, "412": 0, "414": 1, "415": 1, "422": 1, "431": 1, "435": 0, "439": 4, "444": 0, "445": 0, "446": 0, "447": 0, "454": 0, "461": 0, "468": 0, "475": 2, "476": 2, "477": 0, "478": 2}}
+ git checkout 84400d2e9db7c51fee4e9bb04c028f665b8e7624
Note: switching to '84400d2e9db7c51fee4e9bb04c028f665b8e7624'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at 84400d2e9d Fixed #32905 -- Added CSS class for non-form errors of formsets.
M	django/forms/boundfield.py
M	django/forms/forms.py
+ git apply /root/pre_state.patch
error: unrecognized input
