diff --git a/dev/null b/tests/test_coverup_django__django-11740.py
new file mode 100644
index e69de29..e3a0073 100644
--- /dev/null
+++ b/tests/test_coverup_django__django-11740.py
@@ -0,0 +1,50 @@
+import uuid
+from django.test import TestCase
+from django.db import models
+from django.db.migrations.state import ProjectState
+from django.db.migrations.autodetector import MigrationAutodetector
+from django.db.migrations.state import ModelState
+from django.apps import apps
+
+class MigrationTest(TestCase):
+    def setUp(self):
+        # Initial state with UUIDField
+        self.from_state = ProjectState()
+        self.from_state.add_model(ModelState(
+            app_label='testapp1',
+            name='App1',
+            fields=[
+                ('id', models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),
+                ('text', models.CharField(max_length=100)),
+                ('another_app', models.UUIDField(null=True, blank=True)),
+            ],
+        ))
+        self.from_state.add_model(ModelState(
+            app_label='testapp2',
+            name='App2',
+            fields=[
+                ('id', models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),
+                ('text', models.CharField(max_length=100)),
+            ],
+        ))
+
+        # New state with ForeignKey
+        self.to_state = self.from_state.clone()
+        self.to_state.models['testapp1', 'app1'].fields[2] = (
+            'another_app',
+            models.ForeignKey('testapp2.App2', null=True, blank=True, on_delete=models.SET_NULL)
+        )
+
+    def test_uuid_to_fk_migration_dependency(self):
+        autodetector = MigrationAutodetector(self.from_state, self.to_state)
+        changes = autodetector._detect_changes()
+
+        # Check if the migration for testapp1 includes a dependency on testapp2
+        app1_migrations = changes.get('testapp1', [])
+        has_dependency = any(
+            'dependencies' in migration.__dict__ and ('testapp2', 'app2', None, True) in migration.__dict__['dependencies']
+            for migration in app1_migrations
+        )
+
+        # Assert that the migration includes a dependency on testapp2
+        self.assertTrue(has_dependency)
