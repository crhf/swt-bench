{"instance_id": "sympy__sympy-21847", "repo": "sympy/sympy", "version": "1.9", "environment_setup_commit": "f9a6f50ec0c74d935c50a6e9c9b2cb0469570d91", "patch_list": ["diff --git a/sympy/polys/monomials.py b/sympy/polys/monomials.py\n--- a/sympy/polys/monomials.py\n+++ b/sympy/polys/monomials.py\n@@ -127,7 +127,7 @@ def itermonomials(variables, max_degrees, min_degrees=None):\n                 for variable in item:\n                     if variable != 1:\n                         powers[variable] += 1\n-                if max(powers.values()) >= min_degree:\n+                if sum(powers.values()) >= min_degree:\n                     monomials_list_comm.append(Mul(*item))\n             yield from set(monomials_list_comm)\n         else:\n@@ -139,7 +139,7 @@ def itermonomials(variables, max_degrees, min_degrees=None):\n                 for variable in item:\n                     if variable != 1:\n                         powers[variable] += 1\n-                if max(powers.values()) >= min_degree:\n+                if sum(powers.values()) >= min_degree:\n                     monomials_list_non_comm.append(Mul(*item))\n             yield from set(monomials_list_non_comm)\n     else:\n", "diff --git a/dev/null b/sympy/polys/tests/test_coverup_sympy__sympy-21847.py\nnew file mode 100644\nindex e69de29..744023b 100644\n--- /dev/null\n+++ b/sympy/polys/tests/test_coverup_sympy__sympy-21847.py\n@@ -0,0 +1,22 @@\n+from sympy import symbols\n+from sympy.polys.monomials import itermonomials\n+from sympy.polys.orderings import monomial_key\n+\n+def test_itermonomials_min_degrees_bug():\n+    # Define symbolic variables\n+    x1, x2, x3 = symbols('x1 x2 x3')\n+    states = [x1, x2, x3]\n+    max_degrees = 3\n+    min_degrees = 3\n+\n+    # Generate monomials with specified min and max degrees\n+    monomials = sorted(itermonomials(states, max_degrees, min_degrees=min_degrees), \n+                       key=monomial_key('grlex', states))\n+\n+    # Expected monomials should include combinations like x1*x2**2, x2*x3**2, etc.\n+    expected_monomials = {x1**3, x2**3, x3**3, x1*x2**2, x1*x3**2, x2*x1**2, x2*x3**2, x3*x1**2, x3*x2**2, x1*x2*x3}\n+\n+    # Assert that the result includes all expected monomials\n+    assert set(monomials) == expected_monomials, f\"BUG: Incorrect monomials generated: {set(monomials)}\"\n+\n+# This test will fail if the bug is present, as it checks for the presence of all expected monomials.\n"], "arch": "x86_64", "base_commit": "d9b18c518d64d0ebe8e35a98c2fb519938b9b151", "test_directives": ["sympy/polys/tests/test_coverup_sympy__sympy-21847.py"], "coverage_files": ["sympy/polys/monomials.py"], "env_name": "testbed", "run_id": "assertflip", "patch_id": "pred_post__AssertFlip", "timeout": 1800, "rm_image": false, "force_rebuild": false, "exec_mode": "unit_test", "reproduction_script_name": null, "compute_coverage": true, "install": {"python": "3.9", "packages": "mpmath flake8", "pip_packages": ["mpmath==1.3.0", "flake8-comprehensions"], "install": "python -m pip install -e ."}, "cache_level": "instance", "test_command": "PYTHONWARNINGS='ignore::UserWarning,ignore::SyntaxWarning' python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(sympy/polys/monomials\\.py)' bin/test -C --verbose sympy/polys/tests/test_coverup_sympy__sympy-21847.p", "req_install_commands": ["conda create -n testbed python=3.9 mpmath flake8 -y"]}