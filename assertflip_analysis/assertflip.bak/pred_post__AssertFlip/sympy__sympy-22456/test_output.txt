+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD a3475b3f9ac662cd425157dd3bdb93ad7111c090
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch master
nothing to commit, working tree clean
+ git show
commit a3475b3f9ac662cd425157dd3bdb93ad7111c090
Merge: 7ade01165f f4a486823a
Author: Oscar Benjamin <oscar.j.benjamin@gmail.com>
Date:   Sun Nov 14 18:24:59 2021 +0000

    Merge pull request #22492 from oscargus/importcleanup_concrete_integrals
    
    Reordered imports and moved to top level

+ git diff a3475b3f9ac662cd425157dd3bdb93ad7111c090
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Requirement already satisfied: mpmath>=0.19 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from sympy==1.10.dev0) (1.3.0)
Installing collected packages: sympy
  Attempting uninstall: sympy
    Found existing installation: sympy 1.10.dev0
    Uninstalling sympy-1.10.dev0:
      Successfully uninstalled sympy-1.10.dev0
  DEPRECATION: Legacy editable install of sympy==1.10.dev0 from file:///testbed (setup.py develop) is deprecated. pip 25.3 will enforce this behaviour change. A possible replacement is to add a pyproject.toml or enable --use-pep517, and use setuptools >= 64. If the resulting installation is not behaving as expected, try using --config-settings editable_mode=compat. Please consult the setuptools documentation for more information. Discussion can be found at https://github.com/pypa/pip/issues/11457
  Running setup.py develop for sympy
Successfully installed sympy
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git apply -v -
Checking patch sympy/codegen/ast.py...
Applied patch sympy/codegen/ast.py cleanly.
+ git apply -v -
Checking patch sympy/polys/tests/test_coverup_sympy__sympy-22456.py...
Applied patch sympy/polys/tests/test_coverup_sympy__sympy-22456.py cleanly.
+ PYTHONWARNINGS=ignore::UserWarning,ignore::SyntaxWarning
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(sympy/codegen/ast\.py)' bin/test -C --verbose sympy/polys/tests/test_coverup_sympy__sympy-22456.p
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(sympy/codegen/ast\\.py)']
============================= test process starts ==============================
executable:         /opt/miniconda3/envs/testbed/bin/python3  (3.9.23-final-0) [CPython]
architecture:       64-bit
cache:              no
ground types:       python 
numpy:              None
random seed:        19152423
hash randomization: on (PYTHONHASHSEED=2120557104)

0.36 ast.py(1): """
0.36 ast.py(129): from typing import Any, Dict as tDict, List
0.36 ast.py(131): from collections import defaultdict
0.36 ast.py(133): from sympy.core.relational import (Ge, Gt, Le, Lt)
0.36 ast.py(134): from sympy.core import Symbol, Tuple, Dummy
0.36 ast.py(135): from sympy.core.basic import Basic
0.36 ast.py(136): from sympy.core.expr import Expr, Atom
0.36 ast.py(137): from sympy.core.numbers import Float, Integer, oo
0.36 ast.py(138): from sympy.core.sympify import _sympify, sympify, SympifyError
0.36 ast.py(139): from sympy.utilities.iterables import (iterable, topological_sort,
0.36 ast.py(143): def _mk_Tuple(args):
0.36 ast.py(163): class CodegenAST(Basic):
0.36 ast.py(163): class CodegenAST(Basic):
0.36 ast.py(164):     pass
0.36 ast.py(167): class Token(CodegenAST):
0.36 ast.py(167): class Token(CodegenAST):
0.36 ast.py(168):     """ Base class for the AST types.
0.36 ast.py(185):     __slots__ = ()
0.36 ast.py(186):     defaults = {}  # type: tDict[str, Any]
0.36 ast.py(187):     not_in_args = []  # type: List[str]
0.36 ast.py(188):     indented_args = ['body']
0.36 ast.py(190):     @property
0.36 ast.py(191):     def is_Atom(self):
0.36 ast.py(194):     @classmethod
0.36 ast.py(195):     def _get_constructor(cls, attr):
0.36 ast.py(199):     @classmethod
0.36 ast.py(200):     def _construct(cls, attr, arg):
0.36 ast.py(211):     def __new__(cls, *args, **kwargs):
0.36 ast.py(257):     def __eq__(self, other):
0.36 ast.py(265):     def _hashable_content(self):
0.36 ast.py(268):     def __hash__(self):
0.36 ast.py(271):     def _joiner(self, k, indent_level):
0.36 ast.py(274):     def _indented(self, printer, k, v, *args, **kwargs):
0.36 ast.py(291):     def _sympyrepr(self, printer, *args, joiner=', ', **kwargs):
0.36 ast.py(314):     _sympystr = _sympyrepr
0.36 ast.py(316):     def __repr__(self):  # sympy.core.Basic.__repr__ uses sstr
0.36 ast.py(320):     def kwargs(self, exclude=(), apply=None):
0.36 ast.py(338): class BreakToken(Token):
0.36 ast.py(338): class BreakToken(Token):
0.36 ast.py(339):     """ Represents 'break' in C/Python ('exit' in Fortran).
0.36 ast.py(354): break_ = BreakToken()
0.36 ast.py(213):         if len(args) == 1 and not kwargs and isinstance(args[0], cls):
0.36 ast.py(216):         if len(args) > len(cls.__slots__):
0.36 ast.py(219):         attrvals = []
0.36 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.36 ast.py(229):         for attrname in cls.__slots__[len(args):]:
0.36 ast.py(241):         if kwargs:
0.36 ast.py(245):         basic_args = [
0.36 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.36 ast.py(245):         basic_args = [
0.36 ast.py(245):         basic_args = [
0.36 ast.py(249):         obj = CodegenAST.__new__(cls, *basic_args)
0.36 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.36 ast.py(255):         return obj
0.36 ast.py(357): class ContinueToken(Token):
0.36 ast.py(357): class ContinueToken(Token):
0.36 ast.py(358):     """ Represents 'continue' in C/Python ('cycle' in Fortran)
0.36 ast.py(373): continue_ = ContinueToken()
0.36 ast.py(213):         if len(args) == 1 and not kwargs and isinstance(args[0], cls):
0.36 ast.py(216):         if len(args) > len(cls.__slots__):
0.36 ast.py(219):         attrvals = []
0.36 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.36 ast.py(229):         for attrname in cls.__slots__[len(args):]:
0.36 ast.py(241):         if kwargs:
0.36 ast.py(245):         basic_args = [
0.36 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.36 ast.py(245):         basic_args = [
0.36 ast.py(245):         basic_args = [
0.36 ast.py(249):         obj = CodegenAST.__new__(cls, *basic_args)
0.36 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.36 ast.py(255):         return obj
0.36 ast.py(375): class NoneToken(Token):
0.36 ast.py(375): class NoneToken(Token):
0.36 ast.py(376):     """ The AST equivalence of Python's NoneType
0.36 ast.py(389):     def __eq__(self, other):
0.36 ast.py(392):     def _hashable_content(self):
0.36 ast.py(395):     def __hash__(self):
0.36 ast.py(399): none = NoneToken()
0.36 ast.py(213):         if len(args) == 1 and not kwargs and isinstance(args[0], cls):
0.36 ast.py(216):         if len(args) > len(cls.__slots__):
0.36 ast.py(219):         attrvals = []
0.36 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.36 ast.py(229):         for attrname in cls.__slots__[len(args):]:
0.36 ast.py(241):         if kwargs:
0.36 ast.py(245):         basic_args = [
0.36 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.36 ast.py(245):         basic_args = [
0.36 ast.py(245):         basic_args = [
0.36 ast.py(249):         obj = CodegenAST.__new__(cls, *basic_args)
0.36 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.36 ast.py(255):         return obj
0.36 ast.py(402): class AssignmentBase(CodegenAST):
0.36 ast.py(402): class AssignmentBase(CodegenAST):
0.36 ast.py(403):     """ Abstract base class for Assignment and AugmentedAssignment.
0.36 ast.py(412):     def __new__(cls, lhs, rhs):
0.36 ast.py(420):     @property
0.36 ast.py(421):     def lhs(self):
0.36 ast.py(424):     @property
0.36 ast.py(425):     def rhs(self):
0.36 ast.py(428):     @classmethod
0.36 ast.py(429):     def _check_args(cls, lhs, rhs):
0.36 ast.py(459): class Assignment(AssignmentBase):
0.36 ast.py(459): class Assignment(AssignmentBase):
0.36 ast.py(460):     """
0.36 ast.py(496):     op = ':='
0.36 ast.py(499): class AugmentedAssignment(AssignmentBase):
0.36 ast.py(499): class AugmentedAssignment(AssignmentBase):
0.36 ast.py(500):     """
0.36 ast.py(510):     binop = None  # type: str
0.36 ast.py(512):     @property
0.36 ast.py(513):     def op(self):
0.36 ast.py(517): class AddAugmentedAssignment(AugmentedAssignment):
0.36 ast.py(517): class AddAugmentedAssignment(AugmentedAssignment):
0.36 ast.py(518):     binop = '+'
0.36 ast.py(521): class SubAugmentedAssignment(AugmentedAssignment):
0.36 ast.py(521): class SubAugmentedAssignment(AugmentedAssignment):
0.36 ast.py(522):     binop = '-'
0.36 ast.py(525): class MulAugmentedAssignment(AugmentedAssignment):
0.36 ast.py(525): class MulAugmentedAssignment(AugmentedAssignment):
0.36 ast.py(526):     binop = '*'
0.36 ast.py(529): class DivAugmentedAssignment(AugmentedAssignment):
0.36 ast.py(529): class DivAugmentedAssignment(AugmentedAssignment):
0.36 ast.py(530):     binop = '/'
0.36 ast.py(533): class ModAugmentedAssignment(AugmentedAssignment):
0.36 ast.py(533): class ModAugmentedAssignment(AugmentedAssignment):
0.36 ast.py(534):     binop = '%'
0.36 ast.py(538): augassign_classes = {
0.36 ast.py(540):         AddAugmentedAssignment, SubAugmentedAssignment, MulAugmentedAssignment,
0.36 ast.py(541):         DivAugmentedAssignment, ModAugmentedAssignment
0.36 ast.py(539):     cls.binop: cls for cls in [
0.36 ast.py(538): augassign_classes = {
0.36 ast.py(538): augassign_classes = {
0.36 ast.py(539):     cls.binop: cls for cls in [
0.36 ast.py(538): augassign_classes = {
0.36 ast.py(539):     cls.binop: cls for cls in [
0.36 ast.py(538): augassign_classes = {
0.36 ast.py(539):     cls.binop: cls for cls in [
0.36 ast.py(538): augassign_classes = {
0.36 ast.py(539):     cls.binop: cls for cls in [
0.36 ast.py(538): augassign_classes = {
0.36 ast.py(539):     cls.binop: cls for cls in [
0.36 ast.py(538): augassign_classes = {
0.36 ast.py(546): def aug_assign(lhs, op, rhs):
0.36 ast.py(589): class CodeBlock(CodegenAST):
0.36 ast.py(589): class CodeBlock(CodegenAST):
0.36 ast.py(590):     """
0.36 ast.py(630):     def __new__(cls, *args):
0.36 ast.py(645):     def __iter__(self):
0.36 ast.py(648):     def _sympyrepr(self, printer, *args, **kwargs):
0.36 ast.py(655):     _sympystr = _sympyrepr
0.36 ast.py(657):     @property
0.36 ast.py(658):     def free_symbols(self):
0.36 ast.py(661):     @classmethod
0.36 ast.py(662):     def topological_sort(cls, assignments):
0.36 ast.py(745):     def cse(self, symbols=None, optimizations=None, postprocess=None,
0.36 ast.py(809): class For(Token):
0.36 ast.py(809): class For(Token):
0.36 ast.py(810):     """Represents a 'for-loop' in the code.
0.36 ast.py(852):     __slots__ = ('target', 'iterable', 'body')
0.36 ast.py(853):     _construct_target = staticmethod(_sympify)
0.36 ast.py(855):     @classmethod
0.36 ast.py(856):     def _construct_body(cls, itr):
0.36 ast.py(862):     @classmethod
0.36 ast.py(863):     def _construct_iterable(cls, itr):
0.36 ast.py(871): class String(Atom, Token):
0.36 ast.py(871): class String(Atom, Token):
0.36 ast.py(872):     """ SymPy object representing a string.
0.36 ast.py(896):     __slots__ = ('text',)
0.36 ast.py(897):     not_in_args = ['text']
0.36 ast.py(898):     is_Atom = True
0.36 ast.py(900):     @classmethod
0.36 ast.py(901):     def _construct_text(cls, text):
0.36 ast.py(906):     def _sympystr(self, printer, *args, **kwargs):
0.36 ast.py(909):     def kwargs(self, exclude = (), apply = None):
0.36 ast.py(913):     @property
0.36 ast.py(914):     def func(self):
0.37 ast.py(917): class QuotedString(String):
0.37 ast.py(917): class QuotedString(String):
0.37 ast.py(918):     """ Represents a string which should be printed with quotes. """
0.37 ast.py(920): class Comment(String):
0.37 ast.py(920): class Comment(String):
0.37 ast.py(921):     """ Represents a comment. """
0.37 ast.py(923): class Node(Token):
0.37 ast.py(923): class Node(Token):
0.37 ast.py(924):     """ Subclass of Token, carrying the attribute 'attrs' (Tuple)
0.37 ast.py(944):     __slots__ = ('attrs',)
0.37 ast.py(946):     defaults = {'attrs': Tuple()}  # type: tDict[str, Any]
0.37 ast.py(948):     _construct_attrs = staticmethod(_mk_Tuple)
0.37 ast.py(950):     def attr_params(self, looking_for):
0.37 ast.py(957): class Type(Token):
0.37 ast.py(957): class Type(Token):
0.37 ast.py(958):     """ Represents a type.
0.37 ast.py(1012):     __slots__ = ('name',)
0.37 ast.py(1014):     _construct_name = String
0.37 ast.py(1016):     def _sympystr(self, printer, *args, **kwargs):
0.37 ast.py(1019):     @classmethod
0.37 ast.py(1020):     def from_expr(cls, expr):
0.37 ast.py(1062):     def _check(self, value):
0.37 ast.py(1065):     def cast_check(self, value, rtol=None, atol=0, precision_targets=None):
0.37 ast.py(1133): class IntBaseType(Type):
0.37 ast.py(1133): class IntBaseType(Type):
0.37 ast.py(1134):     """ Integer base type, contains no size information. """
0.37 ast.py(1135):     __slots__ = ('name',)
0.37 ast.py(1136):     cast_nocheck = lambda self, i: Integer(int(i))
0.37 ast.py(1139): class _SizedIntType(IntBaseType):
0.37 ast.py(1139): class _SizedIntType(IntBaseType):
0.37 ast.py(1140):     __slots__ = ('name', 'nbits',)
0.37 ast.py(1142):     _construct_nbits = Integer
0.37 ast.py(1144):     def _check(self, value):
0.37 ast.py(1151): class SignedIntType(_SizedIntType):
0.37 ast.py(1151): class SignedIntType(_SizedIntType):
0.37 ast.py(1152):     """ Represents a signed integer type. """
0.37 ast.py(1153):     @property
0.37 ast.py(1154):     def min(self):
0.37 ast.py(1157):     @property
0.37 ast.py(1158):     def max(self):
0.37 ast.py(1162): class UnsignedIntType(_SizedIntType):
0.37 ast.py(1162): class UnsignedIntType(_SizedIntType):
0.37 ast.py(1163):     """ Represents an unsigned integer type. """
0.37 ast.py(1164):     @property
0.37 ast.py(1165):     def min(self):
0.37 ast.py(1168):     @property
0.37 ast.py(1169):     def max(self):
0.37 ast.py(1172): two = Integer(2)
0.37 ast.py(1174): class FloatBaseType(Type):
0.37 ast.py(1174): class FloatBaseType(Type):
0.37 ast.py(1175):     """ Represents a floating point number type. """
0.37 ast.py(1176):     cast_nocheck = Float
0.37 ast.py(1178): class FloatType(FloatBaseType):
0.37 ast.py(1178): class FloatType(FloatBaseType):
0.37 ast.py(1179):     """ Represents a floating point type with fixed bit width.
0.37 ast.py(1219):     __slots__ = ('name', 'nbits', 'nmant', 'nexp',)
0.37 ast.py(1221):     _construct_nbits = _construct_nmant = _construct_nexp = Integer
0.37 ast.py(1224):     @property
0.37 ast.py(1225):     def max_exponent(self):
0.37 ast.py(1230):     @property
0.37 ast.py(1231):     def min_exponent(self):
0.37 ast.py(1236):     @property
0.37 ast.py(1237):     def max(self):
0.37 ast.py(1241):     @property
0.37 ast.py(1242):     def tiny(self):
0.37 ast.py(1250):     @property
0.37 ast.py(1251):     def eps(self):
0.37 ast.py(1255):     @property
0.37 ast.py(1256):     def dig(self):
0.37 ast.py(1265):     @property
0.37 ast.py(1266):     def decimal_dig(self):
0.37 ast.py(1280):     def cast_nocheck(self, value):
0.37 ast.py(1288):     def _check(self, value):
0.37 ast.py(1296): class ComplexBaseType(FloatBaseType):
0.37 ast.py(1296): class ComplexBaseType(FloatBaseType):
0.37 ast.py(1298):     def cast_nocheck(self, value):
0.37 ast.py(1306):     def _check(self, value):
0.37 ast.py(1312): class ComplexType(ComplexBaseType, FloatType):
0.37 ast.py(1312): class ComplexType(ComplexBaseType, FloatType):
0.37 ast.py(1313):     """ Represents a complex floating point number. """
0.37 ast.py(1317): intc = IntBaseType('intc')
0.37 ast.py(213):         if len(args) == 1 and not kwargs and isinstance(args[0], cls):
0.37 ast.py(216):         if len(args) > len(cls.__slots__):
0.37 ast.py(219):         attrvals = []
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(223):             if attrname in kwargs:
0.37 ast.py(226):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(213):         if len(args) == 1 and not kwargs and isinstance(args[0], cls):
0.37 ast.py(216):         if len(args) > len(cls.__slots__):
0.37 ast.py(219):         attrvals = []
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(223):             if attrname in kwargs:
0.37 ast.py(226):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(902):         if not isinstance(text, str):
0.37 ast.py(904):         return text
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(229):         for attrname in cls.__slots__[len(args):]:
0.37 ast.py(241):         if kwargs:
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(245):         basic_args = [
0.37 ast.py(249):         obj = CodegenAST.__new__(cls, *basic_args)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(255):         return obj
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(229):         for attrname in cls.__slots__[len(args):]:
0.37 ast.py(241):         if kwargs:
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(249):         obj = CodegenAST.__new__(cls, *basic_args)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(255):         return obj
0.37 ast.py(1318): intp = IntBaseType('intp')
0.37 ast.py(213):         if len(args) == 1 and not kwargs and isinstance(args[0], cls):
0.37 ast.py(216):         if len(args) > len(cls.__slots__):
0.37 ast.py(219):         attrvals = []
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(223):             if attrname in kwargs:
0.37 ast.py(226):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(213):         if len(args) == 1 and not kwargs and isinstance(args[0], cls):
0.37 ast.py(216):         if len(args) > len(cls.__slots__):
0.37 ast.py(219):         attrvals = []
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(223):             if attrname in kwargs:
0.37 ast.py(226):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(902):         if not isinstance(text, str):
0.37 ast.py(904):         return text
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(229):         for attrname in cls.__slots__[len(args):]:
0.37 ast.py(241):         if kwargs:
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(245):         basic_args = [
0.37 ast.py(249):         obj = CodegenAST.__new__(cls, *basic_args)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(255):         return obj
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(229):         for attrname in cls.__slots__[len(args):]:
0.37 ast.py(241):         if kwargs:
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(249):         obj = CodegenAST.__new__(cls, *basic_args)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(255):         return obj
0.37 ast.py(1319): int8 = SignedIntType('int8', 8)
0.37 ast.py(213):         if len(args) == 1 and not kwargs and isinstance(args[0], cls):
0.37 ast.py(216):         if len(args) > len(cls.__slots__):
0.37 ast.py(219):         attrvals = []
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(223):             if attrname in kwargs:
0.37 ast.py(226):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(213):         if len(args) == 1 and not kwargs and isinstance(args[0], cls):
0.37 ast.py(216):         if len(args) > len(cls.__slots__):
0.37 ast.py(219):         attrvals = []
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(223):             if attrname in kwargs:
0.37 ast.py(226):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(902):         if not isinstance(text, str):
0.37 ast.py(904):         return text
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(229):         for attrname in cls.__slots__[len(args):]:
0.37 ast.py(241):         if kwargs:
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(245):         basic_args = [
0.37 ast.py(249):         obj = CodegenAST.__new__(cls, *basic_args)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(255):         return obj
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(223):             if attrname in kwargs:
0.37 ast.py(226):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(229):         for attrname in cls.__slots__[len(args):]:
0.37 ast.py(241):         if kwargs:
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(249):         obj = CodegenAST.__new__(cls, *basic_args)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(255):         return obj
0.37 ast.py(1320): int16 = SignedIntType('int16', 16)
0.37 ast.py(213):         if len(args) == 1 and not kwargs and isinstance(args[0], cls):
0.37 ast.py(216):         if len(args) > len(cls.__slots__):
0.37 ast.py(219):         attrvals = []
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(223):             if attrname in kwargs:
0.37 ast.py(226):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(213):         if len(args) == 1 and not kwargs and isinstance(args[0], cls):
0.37 ast.py(216):         if len(args) > len(cls.__slots__):
0.37 ast.py(219):         attrvals = []
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(223):             if attrname in kwargs:
0.37 ast.py(226):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(902):         if not isinstance(text, str):
0.37 ast.py(904):         return text
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(229):         for attrname in cls.__slots__[len(args):]:
0.37 ast.py(241):         if kwargs:
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(245):         basic_args = [
0.37 ast.py(249):         obj = CodegenAST.__new__(cls, *basic_args)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(255):         return obj
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(223):             if attrname in kwargs:
0.37 ast.py(226):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(229):         for attrname in cls.__slots__[len(args):]:
0.37 ast.py(241):         if kwargs:
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(249):         obj = CodegenAST.__new__(cls, *basic_args)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(255):         return obj
0.37 ast.py(1321): int32 = SignedIntType('int32', 32)
0.37 ast.py(213):         if len(args) == 1 and not kwargs and isinstance(args[0], cls):
0.37 ast.py(216):         if len(args) > len(cls.__slots__):
0.37 ast.py(219):         attrvals = []
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(223):             if attrname in kwargs:
0.37 ast.py(226):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(213):         if len(args) == 1 and not kwargs and isinstance(args[0], cls):
0.37 ast.py(216):         if len(args) > len(cls.__slots__):
0.37 ast.py(219):         attrvals = []
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(223):             if attrname in kwargs:
0.37 ast.py(226):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(902):         if not isinstance(text, str):
0.37 ast.py(904):         return text
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(229):         for attrname in cls.__slots__[len(args):]:
0.37 ast.py(241):         if kwargs:
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(245):         basic_args = [
0.37 ast.py(249):         obj = CodegenAST.__new__(cls, *basic_args)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(255):         return obj
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(223):             if attrname in kwargs:
0.37 ast.py(226):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(229):         for attrname in cls.__slots__[len(args):]:
0.37 ast.py(241):         if kwargs:
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(249):         obj = CodegenAST.__new__(cls, *basic_args)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(255):         return obj
0.37 ast.py(1322): int64 = SignedIntType('int64', 64)
0.37 ast.py(213):         if len(args) == 1 and not kwargs and isinstance(args[0], cls):
0.37 ast.py(216):         if len(args) > len(cls.__slots__):
0.37 ast.py(219):         attrvals = []
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(223):             if attrname in kwargs:
0.37 ast.py(226):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(213):         if len(args) == 1 and not kwargs and isinstance(args[0], cls):
0.37 ast.py(216):         if len(args) > len(cls.__slots__):
0.37 ast.py(219):         attrvals = []
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(223):             if attrname in kwargs:
0.37 ast.py(226):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(902):         if not isinstance(text, str):
0.37 ast.py(904):         return text
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(229):         for attrname in cls.__slots__[len(args):]:
0.37 ast.py(241):         if kwargs:
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(245):         basic_args = [
0.37 ast.py(249):         obj = CodegenAST.__new__(cls, *basic_args)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(255):         return obj
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(223):             if attrname in kwargs:
0.37 ast.py(226):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(229):         for attrname in cls.__slots__[len(args):]:
0.37 ast.py(241):         if kwargs:
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(249):         obj = CodegenAST.__new__(cls, *basic_args)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(255):         return obj
0.37 ast.py(1323): uint8 = UnsignedIntType('uint8', 8)
0.37 ast.py(213):         if len(args) == 1 and not kwargs and isinstance(args[0], cls):
0.37 ast.py(216):         if len(args) > len(cls.__slots__):
0.37 ast.py(219):         attrvals = []
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(223):             if attrname in kwargs:
0.37 ast.py(226):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(213):         if len(args) == 1 and not kwargs and isinstance(args[0], cls):
0.37 ast.py(216):         if len(args) > len(cls.__slots__):
0.37 ast.py(219):         attrvals = []
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(223):             if attrname in kwargs:
0.37 ast.py(226):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(902):         if not isinstance(text, str):
0.37 ast.py(904):         return text
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(229):         for attrname in cls.__slots__[len(args):]:
0.37 ast.py(241):         if kwargs:
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(245):         basic_args = [
0.37 ast.py(249):         obj = CodegenAST.__new__(cls, *basic_args)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(255):         return obj
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(223):             if attrname in kwargs:
0.37 ast.py(226):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(229):         for attrname in cls.__slots__[len(args):]:
0.37 ast.py(241):         if kwargs:
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(249):         obj = CodegenAST.__new__(cls, *basic_args)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(255):         return obj
0.37 ast.py(1324): uint16 = UnsignedIntType('uint16', 16)
0.37 ast.py(213):         if len(args) == 1 and not kwargs and isinstance(args[0], cls):
0.37 ast.py(216):         if len(args) > len(cls.__slots__):
0.37 ast.py(219):         attrvals = []
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(223):             if attrname in kwargs:
0.37 ast.py(226):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(213):         if len(args) == 1 and not kwargs and isinstance(args[0], cls):
0.37 ast.py(216):         if len(args) > len(cls.__slots__):
0.37 ast.py(219):         attrvals = []
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(223):             if attrname in kwargs:
0.37 ast.py(226):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(902):         if not isinstance(text, str):
0.37 ast.py(904):         return text
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(229):         for attrname in cls.__slots__[len(args):]:
0.37 ast.py(241):         if kwargs:
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(245):         basic_args = [
0.37 ast.py(249):         obj = CodegenAST.__new__(cls, *basic_args)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(255):         return obj
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(223):             if attrname in kwargs:
0.37 ast.py(226):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(229):         for attrname in cls.__slots__[len(args):]:
0.37 ast.py(241):         if kwargs:
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(249):         obj = CodegenAST.__new__(cls, *basic_args)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(255):         return obj
0.37 ast.py(1325): uint32 = UnsignedIntType('uint32', 32)
0.37 ast.py(213):         if len(args) == 1 and not kwargs and isinstance(args[0], cls):
0.37 ast.py(216):         if len(args) > len(cls.__slots__):
0.37 ast.py(219):         attrvals = []
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(223):             if attrname in kwargs:
0.37 ast.py(226):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(213):         if len(args) == 1 and not kwargs and isinstance(args[0], cls):
0.37 ast.py(216):         if len(args) > len(cls.__slots__):
0.37 ast.py(219):         attrvals = []
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(223):             if attrname in kwargs:
0.37 ast.py(226):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(902):         if not isinstance(text, str):
0.37 ast.py(904):         return text
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(229):         for attrname in cls.__slots__[len(args):]:
0.37 ast.py(241):         if kwargs:
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(245):         basic_args = [
0.37 ast.py(249):         obj = CodegenAST.__new__(cls, *basic_args)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(255):         return obj
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(223):             if attrname in kwargs:
0.37 ast.py(226):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(229):         for attrname in cls.__slots__[len(args):]:
0.37 ast.py(241):         if kwargs:
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(249):         obj = CodegenAST.__new__(cls, *basic_args)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(255):         return obj
0.37 ast.py(1326): uint64 = UnsignedIntType('uint64', 64)
0.37 ast.py(213):         if len(args) == 1 and not kwargs and isinstance(args[0], cls):
0.37 ast.py(216):         if len(args) > len(cls.__slots__):
0.37 ast.py(219):         attrvals = []
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(223):             if attrname in kwargs:
0.37 ast.py(226):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(213):         if len(args) == 1 and not kwargs and isinstance(args[0], cls):
0.37 ast.py(216):         if len(args) > len(cls.__slots__):
0.37 ast.py(219):         attrvals = []
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(223):             if attrname in kwargs:
0.37 ast.py(226):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(902):         if not isinstance(text, str):
0.37 ast.py(904):         return text
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(229):         for attrname in cls.__slots__[len(args):]:
0.37 ast.py(241):         if kwargs:
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(245):         basic_args = [
0.37 ast.py(249):         obj = CodegenAST.__new__(cls, *basic_args)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(255):         return obj
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(223):             if attrname in kwargs:
0.37 ast.py(226):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(229):         for attrname in cls.__slots__[len(args):]:
0.37 ast.py(241):         if kwargs:
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(249):         obj = CodegenAST.__new__(cls, *basic_args)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(255):         return obj
0.37 ast.py(1327): float16 = FloatType('float16', 16, nexp=5, nmant=10)  # IEEE 754 binary16, Half precision
0.37 ast.py(213):         if len(args) == 1 and not kwargs and isinstance(args[0], cls):
0.37 ast.py(216):         if len(args) > len(cls.__slots__):
0.37 ast.py(219):         attrvals = []
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(223):             if attrname in kwargs:
0.37 ast.py(226):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(213):         if len(args) == 1 and not kwargs and isinstance(args[0], cls):
0.37 ast.py(216):         if len(args) > len(cls.__slots__):
0.37 ast.py(219):         attrvals = []
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(223):             if attrname in kwargs:
0.37 ast.py(226):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(902):         if not isinstance(text, str):
0.37 ast.py(904):         return text
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(229):         for attrname in cls.__slots__[len(args):]:
0.37 ast.py(241):         if kwargs:
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(245):         basic_args = [
0.37 ast.py(249):         obj = CodegenAST.__new__(cls, *basic_args)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(255):         return obj
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(223):             if attrname in kwargs:
0.37 ast.py(226):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(229):         for attrname in cls.__slots__[len(args):]:
0.37 ast.py(230):             if attrname in kwargs:
0.37 ast.py(231):                 argval = kwargs.pop(attrname)
0.37 ast.py(239):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(229):         for attrname in cls.__slots__[len(args):]:
0.37 ast.py(230):             if attrname in kwargs:
0.37 ast.py(231):                 argval = kwargs.pop(attrname)
0.37 ast.py(239):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(229):         for attrname in cls.__slots__[len(args):]:
0.37 ast.py(241):         if kwargs:
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(249):         obj = CodegenAST.__new__(cls, *basic_args)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(255):         return obj
0.37 ast.py(1328): float32 = FloatType('float32', 32, nexp=8, nmant=23)  # IEEE 754 binary32, Single precision
0.37 ast.py(213):         if len(args) == 1 and not kwargs and isinstance(args[0], cls):
0.37 ast.py(216):         if len(args) > len(cls.__slots__):
0.37 ast.py(219):         attrvals = []
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(223):             if attrname in kwargs:
0.37 ast.py(226):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(213):         if len(args) == 1 and not kwargs and isinstance(args[0], cls):
0.37 ast.py(216):         if len(args) > len(cls.__slots__):
0.37 ast.py(219):         attrvals = []
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(223):             if attrname in kwargs:
0.37 ast.py(226):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(902):         if not isinstance(text, str):
0.37 ast.py(904):         return text
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(229):         for attrname in cls.__slots__[len(args):]:
0.37 ast.py(241):         if kwargs:
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(245):         basic_args = [
0.37 ast.py(249):         obj = CodegenAST.__new__(cls, *basic_args)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(255):         return obj
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(223):             if attrname in kwargs:
0.37 ast.py(226):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(229):         for attrname in cls.__slots__[len(args):]:
0.37 ast.py(230):             if attrname in kwargs:
0.37 ast.py(231):                 argval = kwargs.pop(attrname)
0.37 ast.py(239):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(229):         for attrname in cls.__slots__[len(args):]:
0.37 ast.py(230):             if attrname in kwargs:
0.37 ast.py(231):                 argval = kwargs.pop(attrname)
0.37 ast.py(239):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(229):         for attrname in cls.__slots__[len(args):]:
0.37 ast.py(241):         if kwargs:
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(249):         obj = CodegenAST.__new__(cls, *basic_args)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(255):         return obj
0.37 ast.py(1329): float64 = FloatType('float64', 64, nexp=11, nmant=52)  # IEEE 754 binary64, Double precision
0.37 ast.py(213):         if len(args) == 1 and not kwargs and isinstance(args[0], cls):
0.37 ast.py(216):         if len(args) > len(cls.__slots__):
0.37 ast.py(219):         attrvals = []
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(223):             if attrname in kwargs:
0.37 ast.py(226):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(213):         if len(args) == 1 and not kwargs and isinstance(args[0], cls):
0.37 ast.py(216):         if len(args) > len(cls.__slots__):
0.37 ast.py(219):         attrvals = []
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(223):             if attrname in kwargs:
0.37 ast.py(226):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(902):         if not isinstance(text, str):
0.37 ast.py(904):         return text
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(229):         for attrname in cls.__slots__[len(args):]:
0.37 ast.py(241):         if kwargs:
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(245):         basic_args = [
0.37 ast.py(249):         obj = CodegenAST.__new__(cls, *basic_args)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(255):         return obj
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(223):             if attrname in kwargs:
0.37 ast.py(226):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(229):         for attrname in cls.__slots__[len(args):]:
0.37 ast.py(230):             if attrname in kwargs:
0.37 ast.py(231):                 argval = kwargs.pop(attrname)
0.37 ast.py(239):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(229):         for attrname in cls.__slots__[len(args):]:
0.37 ast.py(230):             if attrname in kwargs:
0.37 ast.py(231):                 argval = kwargs.pop(attrname)
0.37 ast.py(239):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(229):         for attrname in cls.__slots__[len(args):]:
0.37 ast.py(241):         if kwargs:
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(249):         obj = CodegenAST.__new__(cls, *basic_args)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(255):         return obj
0.37 ast.py(1330): float80 = FloatType('float80', 80, nexp=15, nmant=63)  # x86 extended precision (1 integer part bit), "long double"
0.37 ast.py(213):         if len(args) == 1 and not kwargs and isinstance(args[0], cls):
0.37 ast.py(216):         if len(args) > len(cls.__slots__):
0.37 ast.py(219):         attrvals = []
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(223):             if attrname in kwargs:
0.37 ast.py(226):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(213):         if len(args) == 1 and not kwargs and isinstance(args[0], cls):
0.37 ast.py(216):         if len(args) > len(cls.__slots__):
0.37 ast.py(219):         attrvals = []
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(223):             if attrname in kwargs:
0.37 ast.py(226):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(902):         if not isinstance(text, str):
0.37 ast.py(904):         return text
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(229):         for attrname in cls.__slots__[len(args):]:
0.37 ast.py(241):         if kwargs:
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(245):         basic_args = [
0.37 ast.py(249):         obj = CodegenAST.__new__(cls, *basic_args)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(255):         return obj
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(223):             if attrname in kwargs:
0.37 ast.py(226):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(229):         for attrname in cls.__slots__[len(args):]:
0.37 ast.py(230):             if attrname in kwargs:
0.37 ast.py(231):                 argval = kwargs.pop(attrname)
0.37 ast.py(239):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(229):         for attrname in cls.__slots__[len(args):]:
0.37 ast.py(230):             if attrname in kwargs:
0.37 ast.py(231):                 argval = kwargs.pop(attrname)
0.37 ast.py(239):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(229):         for attrname in cls.__slots__[len(args):]:
0.37 ast.py(241):         if kwargs:
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(249):         obj = CodegenAST.__new__(cls, *basic_args)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(255):         return obj
0.37 ast.py(1331): float128 = FloatType('float128', 128, nexp=15, nmant=112)  # IEEE 754 binary128, Quadruple precision
0.37 ast.py(213):         if len(args) == 1 and not kwargs and isinstance(args[0], cls):
0.37 ast.py(216):         if len(args) > len(cls.__slots__):
0.37 ast.py(219):         attrvals = []
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(223):             if attrname in kwargs:
0.37 ast.py(226):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(213):         if len(args) == 1 and not kwargs and isinstance(args[0], cls):
0.37 ast.py(216):         if len(args) > len(cls.__slots__):
0.37 ast.py(219):         attrvals = []
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(223):             if attrname in kwargs:
0.37 ast.py(226):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(902):         if not isinstance(text, str):
0.37 ast.py(904):         return text
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(229):         for attrname in cls.__slots__[len(args):]:
0.37 ast.py(241):         if kwargs:
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(245):         basic_args = [
0.37 ast.py(249):         obj = CodegenAST.__new__(cls, *basic_args)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(255):         return obj
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(223):             if attrname in kwargs:
0.37 ast.py(226):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(229):         for attrname in cls.__slots__[len(args):]:
0.37 ast.py(230):             if attrname in kwargs:
0.37 ast.py(231):                 argval = kwargs.pop(attrname)
0.37 ast.py(239):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(229):         for attrname in cls.__slots__[len(args):]:
0.37 ast.py(230):             if attrname in kwargs:
0.37 ast.py(231):                 argval = kwargs.pop(attrname)
0.37 ast.py(239):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(229):         for attrname in cls.__slots__[len(args):]:
0.37 ast.py(241):         if kwargs:
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(249):         obj = CodegenAST.__new__(cls, *basic_args)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(255):         return obj
0.37 ast.py(1332): float256 = FloatType('float256', 256, nexp=19, nmant=236)  # IEEE 754 binary256, Octuple precision
0.37 ast.py(213):         if len(args) == 1 and not kwargs and isinstance(args[0], cls):
0.37 ast.py(216):         if len(args) > len(cls.__slots__):
0.37 ast.py(219):         attrvals = []
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(223):             if attrname in kwargs:
0.37 ast.py(226):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(213):         if len(args) == 1 and not kwargs and isinstance(args[0], cls):
0.37 ast.py(216):         if len(args) > len(cls.__slots__):
0.37 ast.py(219):         attrvals = []
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(223):             if attrname in kwargs:
0.37 ast.py(226):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(902):         if not isinstance(text, str):
0.37 ast.py(904):         return text
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(229):         for attrname in cls.__slots__[len(args):]:
0.37 ast.py(241):         if kwargs:
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(245):         basic_args = [
0.37 ast.py(249):         obj = CodegenAST.__new__(cls, *basic_args)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(255):         return obj
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(223):             if attrname in kwargs:
0.37 ast.py(226):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(229):         for attrname in cls.__slots__[len(args):]:
0.37 ast.py(230):             if attrname in kwargs:
0.37 ast.py(231):                 argval = kwargs.pop(attrname)
0.37 ast.py(239):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(229):         for attrname in cls.__slots__[len(args):]:
0.37 ast.py(230):             if attrname in kwargs:
0.37 ast.py(231):                 argval = kwargs.pop(attrname)
0.37 ast.py(239):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(229):         for attrname in cls.__slots__[len(args):]:
0.37 ast.py(241):         if kwargs:
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(249):         obj = CodegenAST.__new__(cls, *basic_args)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(255):         return obj
0.37 ast.py(1334): complex64 = ComplexType('complex64', nbits=64, **float32.kwargs(exclude=('name', 'nbits')))
0.37 ast.py(332):         kwargs = {k: getattr(self, k) for k in self.__slots__ if k not in exclude}
0.37 ast.py(332):         kwargs = {k: getattr(self, k) for k in self.__slots__ if k not in exclude}
0.37 ast.py(332):         kwargs = {k: getattr(self, k) for k in self.__slots__ if k not in exclude}
0.37 ast.py(332):         kwargs = {k: getattr(self, k) for k in self.__slots__ if k not in exclude}
0.37 ast.py(332):         kwargs = {k: getattr(self, k) for k in self.__slots__ if k not in exclude}
0.37 ast.py(332):         kwargs = {k: getattr(self, k) for k in self.__slots__ if k not in exclude}
0.37 ast.py(333):         if apply is not None:
0.37 ast.py(336):             return kwargs
0.37 ast.py(213):         if len(args) == 1 and not kwargs and isinstance(args[0], cls):
0.37 ast.py(216):         if len(args) > len(cls.__slots__):
0.37 ast.py(219):         attrvals = []
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(223):             if attrname in kwargs:
0.37 ast.py(226):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(213):         if len(args) == 1 and not kwargs and isinstance(args[0], cls):
0.37 ast.py(216):         if len(args) > len(cls.__slots__):
0.37 ast.py(219):         attrvals = []
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(223):             if attrname in kwargs:
0.37 ast.py(226):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(902):         if not isinstance(text, str):
0.37 ast.py(904):         return text
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(229):         for attrname in cls.__slots__[len(args):]:
0.37 ast.py(241):         if kwargs:
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(245):         basic_args = [
0.37 ast.py(249):         obj = CodegenAST.__new__(cls, *basic_args)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(255):         return obj
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(229):         for attrname in cls.__slots__[len(args):]:
0.37 ast.py(230):             if attrname in kwargs:
0.37 ast.py(231):                 argval = kwargs.pop(attrname)
0.37 ast.py(239):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(229):         for attrname in cls.__slots__[len(args):]:
0.37 ast.py(230):             if attrname in kwargs:
0.37 ast.py(231):                 argval = kwargs.pop(attrname)
0.37 ast.py(239):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(229):         for attrname in cls.__slots__[len(args):]:
0.37 ast.py(230):             if attrname in kwargs:
0.37 ast.py(231):                 argval = kwargs.pop(attrname)
0.37 ast.py(239):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(229):         for attrname in cls.__slots__[len(args):]:
0.37 ast.py(241):         if kwargs:
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(249):         obj = CodegenAST.__new__(cls, *basic_args)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(255):         return obj
0.37 ast.py(1335): complex128 = ComplexType('complex128', nbits=128, **float64.kwargs(exclude=('name', 'nbits')))
0.37 ast.py(332):         kwargs = {k: getattr(self, k) for k in self.__slots__ if k not in exclude}
0.37 ast.py(332):         kwargs = {k: getattr(self, k) for k in self.__slots__ if k not in exclude}
0.37 ast.py(332):         kwargs = {k: getattr(self, k) for k in self.__slots__ if k not in exclude}
0.37 ast.py(332):         kwargs = {k: getattr(self, k) for k in self.__slots__ if k not in exclude}
0.37 ast.py(332):         kwargs = {k: getattr(self, k) for k in self.__slots__ if k not in exclude}
0.37 ast.py(332):         kwargs = {k: getattr(self, k) for k in self.__slots__ if k not in exclude}
0.37 ast.py(333):         if apply is not None:
0.37 ast.py(336):             return kwargs
0.37 ast.py(213):         if len(args) == 1 and not kwargs and isinstance(args[0], cls):
0.37 ast.py(216):         if len(args) > len(cls.__slots__):
0.37 ast.py(219):         attrvals = []
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(223):             if attrname in kwargs:
0.37 ast.py(226):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(213):         if len(args) == 1 and not kwargs and isinstance(args[0], cls):
0.37 ast.py(216):         if len(args) > len(cls.__slots__):
0.37 ast.py(219):         attrvals = []
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(223):             if attrname in kwargs:
0.37 ast.py(226):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(902):         if not isinstance(text, str):
0.37 ast.py(904):         return text
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(229):         for attrname in cls.__slots__[len(args):]:
0.37 ast.py(241):         if kwargs:
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(245):         basic_args = [
0.37 ast.py(249):         obj = CodegenAST.__new__(cls, *basic_args)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(255):         return obj
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(229):         for attrname in cls.__slots__[len(args):]:
0.37 ast.py(230):             if attrname in kwargs:
0.37 ast.py(231):                 argval = kwargs.pop(attrname)
0.37 ast.py(239):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(229):         for attrname in cls.__slots__[len(args):]:
0.37 ast.py(230):             if attrname in kwargs:
0.37 ast.py(231):                 argval = kwargs.pop(attrname)
0.37 ast.py(239):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(229):         for attrname in cls.__slots__[len(args):]:
0.37 ast.py(230):             if attrname in kwargs:
0.37 ast.py(231):                 argval = kwargs.pop(attrname)
0.37 ast.py(239):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(229):         for attrname in cls.__slots__[len(args):]:
0.37 ast.py(241):         if kwargs:
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(249):         obj = CodegenAST.__new__(cls, *basic_args)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(255):         return obj
0.37 ast.py(1338): untyped = Type('untyped')
0.37 ast.py(213):         if len(args) == 1 and not kwargs and isinstance(args[0], cls):
0.37 ast.py(216):         if len(args) > len(cls.__slots__):
0.37 ast.py(219):         attrvals = []
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(223):             if attrname in kwargs:
0.37 ast.py(226):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(213):         if len(args) == 1 and not kwargs and isinstance(args[0], cls):
0.37 ast.py(216):         if len(args) > len(cls.__slots__):
0.37 ast.py(219):         attrvals = []
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(223):             if attrname in kwargs:
0.37 ast.py(226):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(902):         if not isinstance(text, str):
0.37 ast.py(904):         return text
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(229):         for attrname in cls.__slots__[len(args):]:
0.37 ast.py(241):         if kwargs:
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(245):         basic_args = [
0.37 ast.py(249):         obj = CodegenAST.__new__(cls, *basic_args)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(255):         return obj
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(229):         for attrname in cls.__slots__[len(args):]:
0.37 ast.py(241):         if kwargs:
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(249):         obj = CodegenAST.__new__(cls, *basic_args)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(255):         return obj
0.37 ast.py(1339): real = FloatBaseType('real')
0.37 ast.py(213):         if len(args) == 1 and not kwargs and isinstance(args[0], cls):
0.37 ast.py(216):         if len(args) > len(cls.__slots__):
0.37 ast.py(219):         attrvals = []
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(223):             if attrname in kwargs:
0.37 ast.py(226):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(213):         if len(args) == 1 and not kwargs and isinstance(args[0], cls):
0.37 ast.py(216):         if len(args) > len(cls.__slots__):
0.37 ast.py(219):         attrvals = []
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(223):             if attrname in kwargs:
0.37 ast.py(226):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(902):         if not isinstance(text, str):
0.37 ast.py(904):         return text
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(229):         for attrname in cls.__slots__[len(args):]:
0.37 ast.py(241):         if kwargs:
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(245):         basic_args = [
0.37 ast.py(249):         obj = CodegenAST.__new__(cls, *basic_args)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(255):         return obj
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(229):         for attrname in cls.__slots__[len(args):]:
0.37 ast.py(241):         if kwargs:
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(249):         obj = CodegenAST.__new__(cls, *basic_args)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(255):         return obj
0.37 ast.py(1340): integer = IntBaseType('integer')
0.37 ast.py(213):         if len(args) == 1 and not kwargs and isinstance(args[0], cls):
0.37 ast.py(216):         if len(args) > len(cls.__slots__):
0.37 ast.py(219):         attrvals = []
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(223):             if attrname in kwargs:
0.37 ast.py(226):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(213):         if len(args) == 1 and not kwargs and isinstance(args[0], cls):
0.37 ast.py(216):         if len(args) > len(cls.__slots__):
0.37 ast.py(219):         attrvals = []
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(223):             if attrname in kwargs:
0.37 ast.py(226):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(902):         if not isinstance(text, str):
0.37 ast.py(904):         return text
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(229):         for attrname in cls.__slots__[len(args):]:
0.37 ast.py(241):         if kwargs:
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(245):         basic_args = [
0.37 ast.py(249):         obj = CodegenAST.__new__(cls, *basic_args)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(255):         return obj
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(229):         for attrname in cls.__slots__[len(args):]:
0.37 ast.py(241):         if kwargs:
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(249):         obj = CodegenAST.__new__(cls, *basic_args)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(255):         return obj
0.37 ast.py(1341): complex_ = ComplexBaseType('complex')
0.37 ast.py(213):         if len(args) == 1 and not kwargs and isinstance(args[0], cls):
0.37 ast.py(216):         if len(args) > len(cls.__slots__):
0.37 ast.py(219):         attrvals = []
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(223):             if attrname in kwargs:
0.37 ast.py(226):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(213):         if len(args) == 1 and not kwargs and isinstance(args[0], cls):
0.37 ast.py(216):         if len(args) > len(cls.__slots__):
0.37 ast.py(219):         attrvals = []
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(223):             if attrname in kwargs:
0.37 ast.py(226):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(902):         if not isinstance(text, str):
0.37 ast.py(904):         return text
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(229):         for attrname in cls.__slots__[len(args):]:
0.37 ast.py(241):         if kwargs:
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(245):         basic_args = [
0.37 ast.py(249):         obj = CodegenAST.__new__(cls, *basic_args)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(255):         return obj
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(229):         for attrname in cls.__slots__[len(args):]:
0.37 ast.py(241):         if kwargs:
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(249):         obj = CodegenAST.__new__(cls, *basic_args)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(255):         return obj
0.37 ast.py(1342): bool_ = Type('bool')
0.37 ast.py(213):         if len(args) == 1 and not kwargs and isinstance(args[0], cls):
0.37 ast.py(216):         if len(args) > len(cls.__slots__):
0.37 ast.py(219):         attrvals = []
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(223):             if attrname in kwargs:
0.37 ast.py(226):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(213):         if len(args) == 1 and not kwargs and isinstance(args[0], cls):
0.37 ast.py(216):         if len(args) > len(cls.__slots__):
0.37 ast.py(219):         attrvals = []
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(223):             if attrname in kwargs:
0.37 ast.py(226):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(902):         if not isinstance(text, str):
0.37 ast.py(904):         return text
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(229):         for attrname in cls.__slots__[len(args):]:
0.37 ast.py(241):         if kwargs:
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(245):         basic_args = [
0.37 ast.py(249):         obj = CodegenAST.__new__(cls, *basic_args)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(255):         return obj
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(229):         for attrname in cls.__slots__[len(args):]:
0.37 ast.py(241):         if kwargs:
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(249):         obj = CodegenAST.__new__(cls, *basic_args)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(255):         return obj
0.37 ast.py(1345): class Attribute(Token):
0.37 ast.py(1345): class Attribute(Token):
0.37 ast.py(1346):     """ Attribute (possibly parametrized)
0.37 ast.py(1372):     __slots__ = ('name', 'parameters')
0.37 ast.py(1373):     defaults = {'parameters': Tuple()}
0.37 ast.py(1375):     _construct_name = String
0.37 ast.py(1376):     _construct_parameters = staticmethod(_mk_Tuple)
0.37 ast.py(1378):     def _sympystr(self, printer, *args, **kwargs):
0.37 ast.py(1385): value_const = Attribute('value_const')
0.37 ast.py(213):         if len(args) == 1 and not kwargs and isinstance(args[0], cls):
0.37 ast.py(216):         if len(args) > len(cls.__slots__):
0.37 ast.py(219):         attrvals = []
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(223):             if attrname in kwargs:
0.37 ast.py(226):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(213):         if len(args) == 1 and not kwargs and isinstance(args[0], cls):
0.37 ast.py(216):         if len(args) > len(cls.__slots__):
0.37 ast.py(219):         attrvals = []
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(223):             if attrname in kwargs:
0.37 ast.py(226):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(902):         if not isinstance(text, str):
0.37 ast.py(904):         return text
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(229):         for attrname in cls.__slots__[len(args):]:
0.37 ast.py(241):         if kwargs:
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(245):         basic_args = [
0.37 ast.py(249):         obj = CodegenAST.__new__(cls, *basic_args)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(255):         return obj
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(229):         for attrname in cls.__slots__[len(args):]:
0.37 ast.py(230):             if attrname in kwargs:
0.37 ast.py(233):             elif attrname in cls.defaults:
0.37 ast.py(234):                 argval = cls.defaults[attrname]
0.37 ast.py(239):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(159):     args = [String(arg) if isinstance(arg, str) else arg for arg in args]
0.37 ast.py(159):     args = [String(arg) if isinstance(arg, str) else arg for arg in args]
0.37 ast.py(160):     return Tuple(*args)
0.37 ast.py(229):         for attrname in cls.__slots__[len(args):]:
0.37 ast.py(241):         if kwargs:
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(249):         obj = CodegenAST.__new__(cls, *basic_args)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(255):         return obj
0.37 ast.py(1386): pointer_const = Attribute('pointer_const')
0.37 ast.py(213):         if len(args) == 1 and not kwargs and isinstance(args[0], cls):
0.37 ast.py(216):         if len(args) > len(cls.__slots__):
0.37 ast.py(219):         attrvals = []
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(223):             if attrname in kwargs:
0.37 ast.py(226):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(213):         if len(args) == 1 and not kwargs and isinstance(args[0], cls):
0.37 ast.py(216):         if len(args) > len(cls.__slots__):
0.37 ast.py(219):         attrvals = []
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(223):             if attrname in kwargs:
0.37 ast.py(226):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(902):         if not isinstance(text, str):
0.37 ast.py(904):         return text
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(229):         for attrname in cls.__slots__[len(args):]:
0.37 ast.py(241):         if kwargs:
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(245):         basic_args = [
0.37 ast.py(249):         obj = CodegenAST.__new__(cls, *basic_args)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(255):         return obj
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(229):         for attrname in cls.__slots__[len(args):]:
0.37 ast.py(230):             if attrname in kwargs:
0.37 ast.py(233):             elif attrname in cls.defaults:
0.37 ast.py(234):                 argval = cls.defaults[attrname]
0.37 ast.py(239):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(159):     args = [String(arg) if isinstance(arg, str) else arg for arg in args]
0.37 ast.py(159):     args = [String(arg) if isinstance(arg, str) else arg for arg in args]
0.37 ast.py(160):     return Tuple(*args)
0.37 ast.py(229):         for attrname in cls.__slots__[len(args):]:
0.37 ast.py(241):         if kwargs:
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(249):         obj = CodegenAST.__new__(cls, *basic_args)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(255):         return obj
0.37 ast.py(1389): class Variable(Node):
0.37 ast.py(1389): class Variable(Node):
0.37 ast.py(1390):     """ Represents a variable.
0.37 ast.py(1439):     __slots__ = ('symbol', 'type', 'value') + Node.__slots__
0.37 ast.py(1441):     defaults = Node.defaults.copy()
0.37 ast.py(1442):     defaults.update({'type': untyped, 'value': none})
0.37 ast.py(1444):     _construct_symbol = staticmethod(sympify)
0.37 ast.py(1445):     _construct_value = staticmethod(sympify)
0.37 ast.py(1447):     @classmethod
0.37 ast.py(1448):     def deduced(cls, symbol, value=None, attrs=Tuple(), cast_check=True):
0.37 ast.py(1492):     def as_Declaration(self, **kwargs):
0.37 ast.py(1524):     def _relation(self, rhs, op):
0.37 ast.py(1531):     __lt__ = lambda self, other: self._relation(other, Lt)
0.37 ast.py(1532):     __le__ = lambda self, other: self._relation(other, Le)
0.37 ast.py(1533):     __ge__ = lambda self, other: self._relation(other, Ge)
0.37 ast.py(1534):     __gt__ = lambda self, other: self._relation(other, Gt)
0.37 ast.py(1536): class Pointer(Variable):
0.37 ast.py(1536): class Pointer(Variable):
0.37 ast.py(1537):     """ Represents a pointer. See ``Variable``.
0.37 ast.py(1553):     def __getitem__(self, key):
0.37 ast.py(1560): class Element(Token):
0.37 ast.py(1560): class Element(Token):
0.37 ast.py(1561):     """ Element in (a possibly N-dimensional) array.
0.37 ast.py(1579):     __slots__ = ('symbol', 'indices', 'strides', 'offset')
0.37 ast.py(1580):     defaults = {'strides': none, 'offset': none}
0.37 ast.py(1581):     _construct_symbol = staticmethod(sympify)
0.37 ast.py(1582):     _construct_indices = staticmethod(lambda arg: Tuple(*arg))
0.37 ast.py(1583):     _construct_strides = staticmethod(lambda arg: Tuple(*arg))
0.37 ast.py(1584):     _construct_offset = staticmethod(sympify)
0.37 ast.py(1587): class Declaration(Token):
0.37 ast.py(1587): class Declaration(Token):
0.37 ast.py(1588):     """ Represents a variable declaration
0.37 ast.py(1610):     __slots__ = ('variable',)
0.37 ast.py(1611):     _construct_variable = Variable
0.37 ast.py(1614): class While(Token):
0.37 ast.py(1614): class While(Token):
0.37 ast.py(1615):     """ Represents a 'for-loop' in the code.
0.37 ast.py(1641):     __slots__ = ('condition', 'body')
0.37 ast.py(1642):     _construct_condition = staticmethod(lambda cond: _sympify(cond))
0.37 ast.py(1644):     @classmethod
0.37 ast.py(1645):     def _construct_body(cls, itr):
0.37 ast.py(1652): class Scope(Token):
0.37 ast.py(1652): class Scope(Token):
0.37 ast.py(1653):     """ Represents a scope in the code.
0.37 ast.py(1662):     __slots__ = ('body',)
0.37 ast.py(1664):     @classmethod
0.37 ast.py(1665):     def _construct_body(cls, itr):
0.37 ast.py(1672): class Stream(Token):
0.37 ast.py(1672): class Stream(Token):
0.37 ast.py(1673):     """ Represents a stream.
0.37 ast.py(1695):     __slots__ = ('name',)
0.37 ast.py(1696):     _construct_name = String
0.37 ast.py(1698): stdout = Stream('stdout')
0.37 ast.py(213):         if len(args) == 1 and not kwargs and isinstance(args[0], cls):
0.37 ast.py(216):         if len(args) > len(cls.__slots__):
0.37 ast.py(219):         attrvals = []
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(223):             if attrname in kwargs:
0.37 ast.py(226):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(213):         if len(args) == 1 and not kwargs and isinstance(args[0], cls):
0.37 ast.py(216):         if len(args) > len(cls.__slots__):
0.37 ast.py(219):         attrvals = []
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(223):             if attrname in kwargs:
0.37 ast.py(226):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(902):         if not isinstance(text, str):
0.37 ast.py(904):         return text
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(229):         for attrname in cls.__slots__[len(args):]:
0.37 ast.py(241):         if kwargs:
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(245):         basic_args = [
0.37 ast.py(249):         obj = CodegenAST.__new__(cls, *basic_args)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(255):         return obj
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(229):         for attrname in cls.__slots__[len(args):]:
0.37 ast.py(241):         if kwargs:
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(249):         obj = CodegenAST.__new__(cls, *basic_args)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(255):         return obj
0.37 ast.py(1699): stderr = Stream('stderr')
0.37 ast.py(213):         if len(args) == 1 and not kwargs and isinstance(args[0], cls):
0.37 ast.py(216):         if len(args) > len(cls.__slots__):
0.37 ast.py(219):         attrvals = []
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(223):             if attrname in kwargs:
0.37 ast.py(226):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(213):         if len(args) == 1 and not kwargs and isinstance(args[0], cls):
0.37 ast.py(216):         if len(args) > len(cls.__slots__):
0.37 ast.py(219):         attrvals = []
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(223):             if attrname in kwargs:
0.37 ast.py(226):             attrvals.append(cls._construct(attrname, argval))
0.37 ast.py(203):         if arg == None:
0.37 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.37 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.37 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.37 ast.py(902):         if not isinstance(text, str):
0.37 ast.py(904):         return text
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(229):         for attrname in cls.__slots__[len(args):]:
0.37 ast.py(241):         if kwargs:
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(245):         basic_args = [
0.37 ast.py(249):         obj = CodegenAST.__new__(cls, *basic_args)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(255):         return obj
0.37 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.37 ast.py(229):         for attrname in cls.__slots__[len(args):]:
0.37 ast.py(241):         if kwargs:
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(245):         basic_args = [
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(247):             if attr not in cls.not_in_args
0.37 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.37 ast.py(245):         basic_args = [
0.37 ast.py(249):         obj = CodegenAST.__new__(cls, *basic_args)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(253):             setattr(obj, attr, arg)
0.37 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.37 ast.py(255):         return obj
0.37 ast.py(1702): class Print(Token):
0.37 ast.py(1702): class Print(Token):
0.37 ast.py(1703):     """ Represents print command in the code.
0.37 ast.py(1721):     __slots__ = ('print_args', 'format_string', 'file')
0.37 ast.py(1722):     defaults = {'format_string': none, 'file': none}
0.37 ast.py(1724):     _construct_print_args = staticmethod(_mk_Tuple)
0.37 ast.py(1725):     _construct_format_string = QuotedString
0.37 ast.py(1726):     _construct_file = Stream
0.37 ast.py(1729): class FunctionPrototype(Node):
0.37 ast.py(1729): class FunctionPrototype(Node):
0.37 ast.py(1730):     """ Represents a function prototype
0.37 ast.py(1755):     __slots__ = ('return_type', 'name', 'parameters', 'attrs')
0.37 ast.py(1757):     _construct_return_type = Type
0.37 ast.py(1758):     _construct_name = String
0.37 ast.py(1760):     @staticmethod
0.37 ast.py(1761):     def _construct_parameters(args):
0.37 ast.py(1771):     @classmethod
0.37 ast.py(1772):     def from_FunctionDefinition(cls, func_def):
0.37 ast.py(1778): class FunctionDefinition(FunctionPrototype):
0.37 ast.py(1778): class FunctionDefinition(FunctionPrototype):
0.37 ast.py(1779):     """ Represents a function definition in the code.
0.37 ast.py(1808):     __slots__ = FunctionPrototype.__slots__[:-1] + ('body', 'attrs')
0.37 ast.py(1810):     @classmethod
0.37 ast.py(1811):     def _construct_body(cls, itr):
0.37 ast.py(1817):     @classmethod
0.37 ast.py(1818):     def from_FunctionPrototype(cls, func_proto, body):
0.37 ast.py(1824): class Return(Token):
0.37 ast.py(1824): class Return(Token):
0.37 ast.py(1825):     """ Represents a return command in the code.
0.37 ast.py(1843):     __slots__ = ('return',)
0.37 ast.py(1844):     _construct_return=staticmethod(_sympify)
0.37 ast.py(1847): class FunctionCall(Token, Expr):
0.37 ast.py(1847): class FunctionCall(Token, Expr):
0.37 ast.py(1848):     """ Represents a call to a function in the code.
0.37 ast.py(1866):     __slots__ = ('name', 'function_args')
0.37 ast.py(1868):     _construct_name = String
0.37 ast.py(1869):     _construct_function_args = staticmethod(lambda args: Tuple(*args))
sympy/polys/tests/test_coverup_sympy__sympy-22456.py[1] 
test_string_argument_invariance_bug 0.38 ast.py(213):         if len(args) == 1 and not kwargs and isinstance(args[0], cls):
0.38 ast.py(216):         if len(args) > len(cls.__slots__):
0.38 ast.py(219):         attrvals = []
0.38 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.38 ast.py(223):             if attrname in kwargs:
0.38 ast.py(226):             attrvals.append(cls._construct(attrname, argval))
0.38 ast.py(203):         if arg == None:
0.38 ast.py(206):             if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances
0.38 ast.py(209):                 return cls._get_constructor(attr)(arg)
0.38 ast.py(197):         return getattr(cls, '_construct_%s' % attr, lambda x: x)
0.38 ast.py(902):         if not isinstance(text, str):
0.38 ast.py(904):         return text
0.38 ast.py(222):         for attrname, argval in zip(cls.__slots__, args):
0.38 ast.py(229):         for attrname in cls.__slots__[len(args):]:
0.38 ast.py(241):         if kwargs:
0.38 ast.py(245):         basic_args = [
0.38 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.38 ast.py(245):         basic_args = [
0.38 ast.py(245):         basic_args = [
0.38 ast.py(246):             val for attr, val in zip(cls.__slots__, attrvals)
0.38 ast.py(247):             if attr not in cls.not_in_args
0.38 ast.py(245):         basic_args = [
0.38 ast.py(249):         obj = CodegenAST.__new__(cls, *basic_args)
0.38 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.38 ast.py(253):             setattr(obj, attr, arg)
0.38 ast.py(252):         for attr, arg in zip(cls.__slots__, attrvals):
0.38 ast.py(255):         return obj
0.38 ast.py(915):         return lambda: self
0.38 ast.py(915):         return lambda: self
0.38 ast.py(258):         if not isinstance(other, self.__class__):
0.38 ast.py(260):         for attr in self.__slots__:
0.38 ast.py(261):             if getattr(self, attr) != getattr(other, attr):
0.38 ast.py(260):         for attr in self.__slots__:
0.38 ast.py(263):         return True
ok                                      [OK]


================== tests finished: 1 passed, in 0.03 seconds ===================
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(sympy/codegen/ast\\.py)']
+ cat coverage.cover
{"/testbed/sympy/codegen/ast.py": {"129": 1, "131": 1, "133": 1, "134": 1, "135": 1, "136": 1, "137": 1, "138": 1, "139": 1, "143": 1, "163": 2, "167": 2, "338": 2, "354": 1, "357": 2, "373": 1, "375": 2, "399": 1, "402": 2, "459": 2, "499": 2, "517": 2, "521": 2, "525": 2, "529": 2, "533": 2, "538": 8, "540": 1, "541": 1, "539": 6, "546": 1, "589": 2, "809": 2, "871": 2, "917": 2, "920": 2, "923": 2, "957": 2, "1133": 2, "1139": 2, "1151": 2, "1162": 2, "1172": 1, "1174": 2, "1178": 2, "1296": 2, "1312": 2, "1317": 1, "1318": 1, "1319": 1, "1320": 1, "1321": 1, "1322": 1, "1323": 1, "1324": 1, "1325": 1, "1326": 1, "1327": 1, "1328": 1, "1329": 1, "1330": 1, "1331": 1, "1332": 1, "1334": 1, "1335": 1, "1338": 1, "1339": 1, "1340": 1, "1341": 1, "1342": 1, "1345": 2, "1385": 1, "1386": 1, "1389": 2, "1536": 2, "1560": 2, "1587": 2, "1614": 2, "1652": 2, "1672": 2, "1698": 1, "1699": 1, "1702": 2, "1729": 2, "1778": 2, "1824": 2, "1847": 2, "159": 4, "160": 2, "164": 1, "185": 1, "186": 1, "187": 1, "188": 1, "190": 1, "191": 1, "194": 1, "195": 1, "199": 1, "200": 1, "211": 1, "257": 1, "265": 1, "268": 1, "271": 1, "274": 1, "291": 1, "314": 1, "316": 1, "320": 1, "192": 0, "197": 89, "203": 89, "204": 0, "206": 89, "207": 0, "209": 89, "213": 58, "214": 0, "216": 58, "217": 0, "219": 58, "222": 127, "223": 69, "224": 0, "226": 69, "229": 78, "230": 20, "231": 18, "233": 2, "234": 2, "237": 0, "239": 20, "241": 58, "242": 0, "245": 263, "246": 208, "249": 58, "252": 147, "253": 89, "255": 58, "247": 89, "258": 1, "259": 0, "260": 2, "261": 1, "262": 0, "263": 1, "266": 0, "269": 0, "272": 0, "275": 0, "276": 0, "282": 0, "283": 0, "284": 0, "285": 0, "287": 0, "289": 0, "277": 0, "278": 0, "280": 0, "292": 0, "293": 0, "294": 0, "295": 0, "297": 0, "299": 0, "300": 0, "301": 0, "304": 0, "305": 0, "307": 0, "308": 0, "309": 0, "310": 0, "312": 0, "317": 0, "318": 0, "332": 12, "333": 2, "334": 0, "336": 2, "389": 1, "392": 1, "395": 1, "390": 0, "393": 0, "396": 0, "412": 1, "420": 1, "421": 1, "424": 1, "425": 1, "428": 1, "429": 1, "413": 0, "414": 0, "416": 0, "418": 0, "422": 0, "426": 0, "434": 0, "436": 0, "439": 0, "440": 0, "441": 0, "446": 0, "447": 0, "450": 0, "451": 0, "452": 0, "453": 0, "454": 0, "455": 0, "456": 0, "496": 1, "510": 1, "512": 1, "513": 1, "514": 0, "518": 1, "522": 1, "526": 1, "530": 1, "534": 1, "584": 0, "585": 0, "586": 0, "630": 1, "645": 1, "648": 1, "655": 1, "657": 1, "658": 1, "661": 1, "662": 1, "745": 1, "631": 0, "632": 0, "633": 0, "634": 0, "635": 0, "636": 0, "637": 0, "639": 0, "641": 0, "642": 0, "643": 0, "646": 0, "649": 0, "650": 0, "651": 0, "652": 0, "653": 0, "659": 0, "698": 0, "700": 0, "702": 0, "703": 0, "723": 0, "727": 0, "728": 0, "729": 0, "730": 0, "733": 0, "734": 0, "735": 0, "736": 0, "737": 0, "738": 0, "740": 0, "743": 0, "778": 0, "781": 0, "783": 0, "785": 0, "786": 0, "788": 0, "789": 0, "790": 0, "791": 0, "794": 0, "795": 0, "796": 0, "797": 0, "799": 0, "800": 0, "801": 0, "803": 0, "804": 0, "805": 0, "806": 0, "852": 1, "853": 1, "855": 1, "856": 1, "862": 1, "863": 1, "857": 0, "858": 0, "860": 0, "864": 0, "865": 0, "866": 0, "867": 0, "868": 0, "896": 1, "897": 1, "898": 1, "900": 1, "901": 1, "906": 1, "909": 1, "913": 1, "914": 1, "902": 28, "903": 0, "904": 28, "907": 0, "910": 0, "915": 2, "944": 1, "946": 1, "948": 1, "950": 1, "952": 0, "953": 0, "954": 0, "1012": 1, "1014": 1, "1016": 1, "1019": 1, "1020": 1, "1062": 1, "1065": 1, "1017": 0, "1049": 0, "1050": 0, "1051": 0, "1052": 0, "1053": 0, "1054": 0, "1055": 0, "1056": 0, "1057": 0, "1058": 0, "1060": 0, "1063": 0, "1112": 0, "1114": 0, "1115": 0, "1117": 0, "1118": 0, "1120": 0, "1123": 0, "1124": 0, "1126": 0, "1127": 0, "1128": 0, "1130": 0, "1121": 0, "1135": 1, "1136": 1, "1140": 1, "1142": 1, "1144": 1, "1145": 0, "1146": 0, "1147": 0, "1148": 0, "1153": 1, "1154": 1, "1157": 1, "1158": 1, "1155": 0, "1159": 0, "1164": 1, "1165": 1, "1168": 1, "1169": 1, "1166": 0, "1170": 0, "1176": 1, "1219": 1, "1221": 1, "1224": 1, "1225": 1, "1230": 1, "1231": 1, "1236": 1, "1237": 1, "1241": 1, "1242": 1, "1250": 1, "1251": 1, "1255": 1, "1256": 1, "1265": 1, "1266": 1, "1280": 1, "1288": 1, "1228": 0, "1234": 0, "1239": 0, "1247": 0, "1253": 0, "1262": 0, "1263": 0, "1277": 0, "1278": 0, "1282": 0, "1283": 0, "1284": 0, "1285": 0, "1286": 0, "1289": 0, "1290": 0, "1291": 0, "1292": 0, "1293": 0, "1294": 0, "1298": 1, "1306": 1, "1300": 0, "1302": 0, "1303": 0, "1301": 0, "1307": 0, "1308": 0, "1309": 0, "1372": 1, "1373": 1, "1375": 1, "1376": 1, "1378": 1, "1379": 0, "1380": 0, "1381": 0, "1382": 0, "1383": 0, "1439": 1, "1441": 1, "1442": 1, "1444": 1, "1445": 1, "1447": 1, "1448": 1, "1492": 1, "1524": 1, "1531": 1, "1532": 1, "1533": 1, "1534": 1, "1480": 0, "1481": 0, "1483": 0, "1484": 0, "1485": 0, "1486": 0, "1488": 0, "1489": 0, "1490": 0, "1520": 0, "1521": 0, "1522": 0, "1525": 0, "1526": 0, "1527": 0, "1528": 0, "1529": 0, "1553": 1, "1554": 0, "1555": 0, "1556": 0, "1557": 0, "1579": 1, "1580": 1, "1581": 1, "1582": 1, "1583": 1, "1584": 1, "1610": 1, "1611": 1, "1641": 1, "1642": 1, "1644": 1, "1645": 1, "1646": 0, "1647": 0, "1649": 0, "1662": 1, "1664": 1, "1665": 1, "1666": 0, "1667": 0, "1669": 0, "1695": 1, "1696": 1, "1721": 1, "1722": 1, "1724": 1, "1725": 1, "1726": 1, "1755": 1, "1757": 1, "1758": 1, "1760": 1, "1761": 1, "1771": 1, "1772": 1, "1762": 0, "1769": 0, "1763": 0, "1764": 0, "1765": 0, "1766": 0, "1768": 0, "1773": 0, "1774": 0, "1775": 0, "1808": 1, "1810": 1, "1811": 1, "1817": 1, "1818": 1, "1812": 0, "1813": 0, "1815": 0, "1819": 0, "1820": 0, "1821": 0, "1843": 1, "1844": 1, "1866": 1, "1868": 1, "1869": 1}}
+ git checkout a3475b3f9ac662cd425157dd3bdb93ad7111c090
Note: switching to 'a3475b3f9ac662cd425157dd3bdb93ad7111c090'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at a3475b3f9a Merge pull request #22492 from oscargus/importcleanup_concrete_integrals
M	sympy/codegen/ast.py
+ git apply /root/pre_state.patch
error: unrecognized input
