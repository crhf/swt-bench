{"instance_id": "scikit-learn__scikit-learn-13124", "repo": "scikit-learn/scikit-learn", "version": "0.21", "environment_setup_commit": "7813f7efb5b2012412888b69e73d76f2df2b50b6", "patch_list": ["diff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py\n--- a/sklearn/model_selection/_split.py\n+++ b/sklearn/model_selection/_split.py\n@@ -576,8 +576,7 @@ class StratifiedKFold(_BaseKFold):\n             ``n_splits`` default value will change from 3 to 5 in v0.22.\n \n     shuffle : boolean, optional\n-        Whether to shuffle each stratification of the data before splitting\n-        into batches.\n+        Whether to shuffle each class's samples before splitting into batches.\n \n     random_state : int, RandomState instance or None, optional, default=None\n         If int, random_state is the seed used by the random number generator;\n@@ -620,7 +619,7 @@ def __init__(self, n_splits='warn', shuffle=False, random_state=None):\n         super().__init__(n_splits, shuffle, random_state)\n \n     def _make_test_folds(self, X, y=None):\n-        rng = self.random_state\n+        rng = check_random_state(self.random_state)\n         y = np.asarray(y)\n         type_of_target_y = type_of_target(y)\n         allowed_target_types = ('binary', 'multiclass')\n", "diff --git a/dev/null b/sklearn/tests/test_coverup_scikit-learn__scikit-learn-13124.py\nnew file mode 100644\nindex e69de29..c309741 100644\n--- /dev/null\n+++ b/sklearn/tests/test_coverup_scikit-learn__scikit-learn-13124.py\n@@ -0,0 +1,23 @@\n+import numpy as np\n+from sklearn.model_selection import StratifiedKFold\n+import pytest\n+\n+def test_stratified_kfold_shuffle_bug():\n+    # Setup\n+    RANDOM_SEED = 1\n+    samples_per_class = 10\n+    X = np.linspace(0, samples_per_class * 2 - 1, samples_per_class * 2)\n+    y = np.concatenate((np.ones(samples_per_class), np.zeros(samples_per_class)), axis=0)\n+\n+    # Initialize StratifiedKFold with shuffle=True and a fixed random_state\n+    k_fold = StratifiedKFold(n_splits=10, shuffle=True, random_state=RANDOM_SEED)\n+    test_indices = [sorted(test_idx) for _, test_idx in k_fold.split(X, y)]\n+\n+    # Check if the content of batches changes when shuffle=True\n+    # This assertion will fail if the bug is present, as the content should change\n+    # due to shuffling, but it doesn't.\n+    for i in range(len(test_indices) - 1):\n+        assert test_indices[i] == test_indices[i + 1], \\\n+            \"The content of batches should change when shuffle=True, but it doesn't.\"\n+\n+# Note: The test is expected to fail if the bug is present, as the content of batches will remain unchanged.\n"], "arch": "x86_64", "base_commit": "9f0b959a8c9195d1b6e203f08b698e052b426ca9", "test_directives": ["sklearn/tests/test_coverup_scikit-learn__scikit-learn-13124.py"], "coverage_files": ["sklearn/model_selection/_split.py"], "env_name": "testbed", "run_id": "assertflip", "patch_id": "pred_post__AssertFlip", "timeout": 1800, "rm_image": false, "force_rebuild": false, "exec_mode": "unit_test", "reproduction_script_name": null, "compute_coverage": true, "install": {"python": "3.6", "packages": "numpy scipy cython pytest pandas matplotlib", "install": "python -m pip install -v --no-use-pep517 --no-build-isolation -e .", "pip_packages": ["cython", "numpy==1.19.2", "setuptools", "scipy==1.5.2"]}, "cache_level": "instance", "test_command": "python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(sklearn/model_selection/_split\\.py)' -m pytest --no-header -rA  -p no:cacheprovider sklearn/tests/test_coverup_scikit-learn__scikit-learn-13124.py", "req_install_commands": ["conda create -n testbed python=3.6 numpy scipy cython pytest pandas matplotlib -y"]}