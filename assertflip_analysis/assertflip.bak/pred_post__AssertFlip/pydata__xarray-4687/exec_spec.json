{"instance_id": "pydata__xarray-4687", "repo": "pydata/xarray", "version": "0.12", "environment_setup_commit": "1c198a191127c601d091213c4b3292a8bb3054e1", "patch_list": ["diff --git a/xarray/core/computation.py b/xarray/core/computation.py\n--- a/xarray/core/computation.py\n+++ b/xarray/core/computation.py\n@@ -1727,7 +1727,7 @@ def dot(*arrays, dims=None, **kwargs):\n     return result.transpose(*all_dims, missing_dims=\"ignore\")\n \n \n-def where(cond, x, y):\n+def where(cond, x, y, keep_attrs=None):\n     \"\"\"Return elements from `x` or `y` depending on `cond`.\n \n     Performs xarray-like broadcasting across input arguments.\n@@ -1743,6 +1743,8 @@ def where(cond, x, y):\n         values to choose from where `cond` is True\n     y : scalar, array, Variable, DataArray or Dataset\n         values to choose from where `cond` is False\n+    keep_attrs : bool or str or callable, optional\n+        How to treat attrs. If True, keep the attrs of `x`.\n \n     Returns\n     -------\n@@ -1808,6 +1810,14 @@ def where(cond, x, y):\n     Dataset.where, DataArray.where :\n         equivalent methods\n     \"\"\"\n+    if keep_attrs is None:\n+        keep_attrs = _get_keep_attrs(default=False)\n+\n+    if keep_attrs is True:\n+        # keep the attributes of x, the second parameter, by default to\n+        # be consistent with the `where` method of `DataArray` and `Dataset`\n+        keep_attrs = lambda attrs, context: attrs[1]\n+\n     # alignment for three arguments is complicated, so don't support it yet\n     return apply_ufunc(\n         duck_array_ops.where,\n@@ -1817,6 +1827,7 @@ def where(cond, x, y):\n         join=\"exact\",\n         dataset_join=\"exact\",\n         dask=\"allowed\",\n+        keep_attrs=keep_attrs,\n     )\n \n \n", "diff --git a/dev/null b/xarray/tests/test_coverup_pydata__xarray-4687.py\nnew file mode 100644\nindex e69de29..1ba3fcc 100644\n--- /dev/null\n+++ b/xarray/tests/test_coverup_pydata__xarray-4687.py\n@@ -0,0 +1,18 @@\n+import numpy as np\n+import xarray as xr\n+import pytest\n+\n+def test_xr_where_preserves_attributes():\n+    # Create a DataArray with attributes and a specific dtype\n+    data = xr.DataArray(np.ones([10, 10], dtype=np.int8))\n+    data.attrs[\"attr_1\"] = \"test1\"\n+    data.attrs[\"attr_2\"] = \"test2\"\n+    \n+    # Apply xr.where with a condition\n+    result = xr.where(data == 1, 5, 0)\n+    \n+    # Check if the attributes are preserved\n+    assert result.attrs == data.attrs, \"Attributes should be preserved\"\n+    \n+    # Check if the dtype is preserved\n+    assert result.dtype == data.dtype, \"Dtype should be preserved\"\n"], "arch": "x86_64", "base_commit": "d3b6aa6d8b997df115a53c001d00222a0f92f63a", "test_directives": ["xarray/tests/test_coverup_pydata__xarray-4687.py"], "coverage_files": ["xarray/core/computation.py"], "env_name": "testbed", "run_id": "assertflip", "patch_id": "pred_post__AssertFlip", "timeout": 1800, "rm_image": false, "force_rebuild": false, "exec_mode": "unit_test", "reproduction_script_name": null, "compute_coverage": true, "install": {"python": "3.10", "packages": "environment.yml", "install": "python -m pip install -e .", "pip_packages": ["numpy==1.23.0", "packaging==23.1", "pandas==1.5.3", "pytest==7.4.0", "python-dateutil==2.8.2", "pytz==2023.3", "six==1.16.0", "scipy==1.11.1", "setuptools==68.0.0", "dask==2022.8.1"], "no_use_env": true}, "cache_level": "instance", "test_command": "python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(xarray/core/computation\\.py)' -m pytest --no-header -rA  -p no:cacheprovider xarray/tests/test_coverup_pydata__xarray-4687.py", "req_install_commands": ["cat <<'EOF_59812759871' > environment.yml\nname: testbed\nchannels:\n  - conda-forge\n  - nodefaults\ndependencies:\n  - aiobotocore\n  - boto3\n  - bottleneck\n  - cartopy\n  - cdms2\n  - cfgrib\n  - cftime\n  - dask\n  - distributed\n  - h5netcdf\n  - h5py\n  - hdf5\n  - hypothesis\n  - iris\n  - lxml    # Optional dep of pydap\n  - matplotlib-base\n  - nc-time-axis\n  - netcdf4\n  - numba\n  - numexpr\n  - numpy\n  - pandas\n  - pint\n  - pip\n  - pooch\n  - pre-commit\n  - pseudonetcdf\n  - pydap\n  # - pynio: not compatible with netCDF4>1.5.3; only tested in py37-bare-minimum\n  - pytest\n  - pytest-cov\n  - pytest-env\n  - pytest-xdist\n  - rasterio\n  - scipy\n  - seaborn\n  - setuptools\n  - sparse\n  - toolz\n  - zarr\n  - pip:\n    - numbagg\n\nEOF_59812759871", "conda create -c conda-forge -n testbed python=3.10 -y", "conda env update -f environment.yml", "rm environment.yml"]}