+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD d01709aae21de9cd2565b9c52f32732ea28a2d98
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
nothing to commit, working tree clean
+ git show
commit d01709aae21de9cd2565b9c52f32732ea28a2d98
Author: Johan Schiff <johan@radkompaniet.se>
Date:   Tue Jun 9 11:23:31 2020 +0200

    Fixed #24141 -- Added QuerySet.contains().

diff --git a/django/db/models/query.py b/django/db/models/query.py
index 02c1b31435..ca72b23aea 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -808,6 +808,27 @@ class QuerySet:
             return self.query.has_results(using=self.db)
         return bool(self._result_cache)
 
+    def contains(self, obj):
+        """Return True if the queryset contains an object."""
+        self._not_support_combined_queries('contains')
+        if self._fields is not None:
+            raise TypeError(
+                'Cannot call QuerySet.contains() after .values() or '
+                '.values_list().'
+            )
+        try:
+            if obj._meta.concrete_model != self.model._meta.concrete_model:
+                return False
+        except AttributeError:
+            raise TypeError("'obj' must be a model instance.")
+        if obj.pk is None:
+            raise ValueError(
+                'QuerySet.contains() cannot be used on unsaved objects.'
+            )
+        if self._result_cache is not None:
+            return obj in self._result_cache
+        return self.filter(pk=obj.pk).exists()
+
     def _prefetch_related_objects(self):
         # This method can only be called once the result cache has been filled.
         prefetch_related_objects(self._result_cache, *self._prefetch_related_lookups)
diff --git a/docs/ref/models/querysets.txt b/docs/ref/models/querysets.txt
index 97bdfcd992..68f964faf5 100644
--- a/docs/ref/models/querysets.txt
+++ b/docs/ref/models/querysets.txt
@@ -2516,24 +2516,11 @@ if not. This tries to perform the query in the simplest and fastest way
 possible, but it *does* execute nearly the same query as a normal
 :class:`.QuerySet` query.
 
-:meth:`~.QuerySet.exists` is useful for searches relating to both
-object membership in a :class:`.QuerySet` and to the existence of any objects in
-a :class:`.QuerySet`, particularly in the context of a large :class:`.QuerySet`.
+:meth:`~.QuerySet.exists` is useful for searches relating to the existence of
+any objects in a :class:`.QuerySet`, particularly in the context of a large
+:class:`.QuerySet`.
 
-The most efficient method of finding whether a model with a unique field
-(e.g. ``primary_key``) is a member of a :class:`.QuerySet` is::
-
-    entry = Entry.objects.get(pk=123)
-    if some_queryset.filter(pk=entry.pk).exists():
-        print("Entry contained in queryset")
-
-Which will be faster than the following which requires evaluating and iterating
-through the entire queryset::
-
-    if entry in some_queryset:
-       print("Entry contained in QuerySet")
-
-And to find whether a queryset contains any items::
+To find whether a queryset contains any items::
 
     if some_queryset.exists():
         print("There is at least one object in some_queryset")
@@ -2552,6 +2539,35 @@ more overall work (one query for the existence check plus an extra one to later
 retrieve the results) than using ``bool(some_queryset)``, which retrieves the
 results and then checks if any were returned.
 
+``contains()``
+~~~~~~~~~~~~~~
+
+.. method:: contains(obj)
+
+.. versionadded:: 4.0
+
+Returns ``True`` if the :class:`.QuerySet` contains ``obj``, and ``False`` if
+not. This tries to perform the query in the simplest and fastest way possible.
+
+:meth:`contains` is useful for checking an object membership in a
+:class:`.QuerySet`, particularly in the context of a large :class:`.QuerySet`.
+
+To check whether a queryset contains a specific item::
+
+    if some_queryset.contains(obj):
+        print('Entry contained in queryset')
+
+This will be faster than the following which requires evaluating and iterating
+through the entire queryset::
+
+    if obj in some_queryset:
+        print('Entry contained in queryset')
+
+Like :meth:`exists`, if ``some_queryset`` has not yet been evaluated, but you
+know that it will be at some point, then using ``some_queryset.contains(obj)``
+will make an additional database query, generally resulting in slower overall
+performance.
+
 ``update()``
 ~~~~~~~~~~~~
 
diff --git a/docs/releases/4.0.txt b/docs/releases/4.0.txt
index 7fca85f8f9..27f19043a9 100644
--- a/docs/releases/4.0.txt
+++ b/docs/releases/4.0.txt
@@ -216,7 +216,9 @@ Migrations
 Models
 ~~~~~~
 
-* ...
+* New :meth:`QuerySet.contains(obj) <.QuerySet.contains>` method returns
+  whether the queryset contains the given object. This tries to perform the
+  query in the simplest and fastest way possible.
 
 Requests and Responses
 ~~~~~~~~~~~~~~~~~~~~~~
diff --git a/docs/topics/db/optimization.txt b/docs/topics/db/optimization.txt
index 69eb58212a..180cd60a46 100644
--- a/docs/topics/db/optimization.txt
+++ b/docs/topics/db/optimization.txt
@@ -240,6 +240,12 @@ row in the results, even if it ends up only using a few columns. The
 lot of text data or for fields that might take a lot of processing to convert
 back to Python. As always, profile first, then optimize.
 
+Use ``QuerySet.contains(obj)``
+------------------------------
+
+...if you only want to find out if ``obj`` is in the queryset, rather than
+``if obj in queryset``.
+
 Use ``QuerySet.count()``
 ------------------------
 
diff --git a/tests/basic/tests.py b/tests/basic/tests.py
index c99fc7e723..8b40f9c33c 100644
--- a/tests/basic/tests.py
+++ b/tests/basic/tests.py
@@ -602,6 +602,7 @@ class ManagerTest(SimpleTestCase):
         'only',
         'using',
         'exists',
+        'contains',
         'explain',
         '_insert',
         '_update',
diff --git a/tests/queries/test_contains.py b/tests/queries/test_contains.py
new file mode 100644
index 0000000000..a58dbe180f
--- /dev/null
+++ b/tests/queries/test_contains.py
@@ -0,0 +1,62 @@
+from django.test import TestCase
+
+from .models import DumbCategory, NamedCategory, ProxyCategory
+
+
+class ContainsTests(TestCase):
+    @classmethod
+    def setUpTestData(cls):
+        cls.category = DumbCategory.objects.create()
+        cls.proxy_category = ProxyCategory.objects.create()
+
+    def test_unsaved_obj(self):
+        msg = 'QuerySet.contains() cannot be used on unsaved objects.'
+        with self.assertRaisesMessage(ValueError, msg):
+            DumbCategory.objects.contains(DumbCategory())
+
+    def test_obj_type(self):
+        msg = "'obj' must be a model instance."
+        with self.assertRaisesMessage(TypeError, msg):
+            DumbCategory.objects.contains(object())
+
+    def test_values(self):
+        msg = 'Cannot call QuerySet.contains() after .values() or .values_list().'
+        with self.assertRaisesMessage(TypeError, msg):
+            DumbCategory.objects.values_list('pk').contains(self.category)
+        with self.assertRaisesMessage(TypeError, msg):
+            DumbCategory.objects.values('pk').contains(self.category)
+
+    def test_basic(self):
+        with self.assertNumQueries(1):
+            self.assertIs(DumbCategory.objects.contains(self.category), True)
+        # QuerySet.contains() doesn't evaluate a queryset.
+        with self.assertNumQueries(1):
+            self.assertIs(DumbCategory.objects.contains(self.category), True)
+
+    def test_evaluated_queryset(self):
+        qs = DumbCategory.objects.all()
+        proxy_qs = ProxyCategory.objects.all()
+        # Evaluate querysets.
+        list(qs)
+        list(proxy_qs)
+        with self.assertNumQueries(0):
+            self.assertIs(qs.contains(self.category), True)
+            self.assertIs(qs.contains(self.proxy_category), True)
+            self.assertIs(proxy_qs.contains(self.category), True)
+            self.assertIs(proxy_qs.contains(self.proxy_category), True)
+
+    def test_proxy_model(self):
+        with self.assertNumQueries(1):
+            self.assertIs(DumbCategory.objects.contains(self.proxy_category), True)
+        with self.assertNumQueries(1):
+            self.assertIs(ProxyCategory.objects.contains(self.category), True)
+
+    def test_wrong_model(self):
+        qs = DumbCategory.objects.all()
+        named_category = NamedCategory(name='category')
+        with self.assertNumQueries(0):
+            self.assertIs(qs.contains(named_category), False)
+        # Evaluate the queryset.
+        list(qs)
+        with self.assertNumQueries(0):
+            self.assertIs(qs.contains(named_category), False)
diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py
index 81c7b2e3a3..3b8204645d 100644
--- a/tests/queries/test_qs_combinators.py
+++ b/tests/queries/test_qs_combinators.py
@@ -404,6 +404,12 @@ class QuerySetSetOperationTests(TestCase):
                         msg % (operation, combinator),
                     ):
                         getattr(getattr(qs, combinator)(qs), operation)()
+            with self.assertRaisesMessage(
+                NotSupportedError,
+                msg % ('contains', combinator),
+            ):
+                obj = Number.objects.first()
+                getattr(qs, combinator)(qs).contains(obj)
 
     def test_get_with_filters_unsupported_on_combined_qs(self):
         qs = Number.objects.all()
+ git diff d01709aae21de9cd2565b9c52f32732ea28a2d98
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Checking if build backend supports build_editable: started
  Checking if build backend supports build_editable: finished with status 'done'
  Getting requirements to build editable: started
  Getting requirements to build editable: finished with status 'done'
  Preparing editable metadata (pyproject.toml): started
  Preparing editable metadata (pyproject.toml): finished with status 'done'
Requirement already satisfied: asgiref>=3.2.10 in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from Django==4.0) (3.8.1)
Requirement already satisfied: pytz in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from Django==4.0) (2025.2)
Requirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from Django==4.0) (0.5.3)
Requirement already satisfied: typing-extensions>=4 in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from asgiref>=3.2.10->Django==4.0) (4.13.2)
Building wheels for collected packages: Django
  Building editable for Django (pyproject.toml): started
  Building editable for Django (pyproject.toml): finished with status 'done'
  Created wheel for Django: filename=django-4.0-0.editable-py3-none-any.whl size=25592 sha256=3aa4d25f98e93d01624f8a7a3e2b6100b8a31e3a5ce26180fc8788a7c4d86f60
  Stored in directory: /tmp/pip-ephem-wheel-cache-1nqty33m/wheels/b2/50/f1/218f2e9962a80d01a4b1297698978f9fb3b60056aa24343f24
Successfully built Django
Installing collected packages: Django
  Attempting uninstall: Django
    Found existing installation: Django 4.0
    Uninstalling Django-4.0:
      Successfully uninstalled Django-4.0
Successfully installed Django-4.0
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable.It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git apply -v -
Checking patch django/utils/datastructures.py...
Applied patch django/utils/datastructures.py cleanly.
+ git apply -v -
<stdin>:17: trailing whitespace.
        
Checking patch tests/test_coverup_django__django-14089.py...
Applied patch tests/test_coverup_django__django-14089.py cleanly.
warning: 1 line adds whitespace errors.
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/utils/datastructures\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-14089
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(django/utils/datastructures\\.py)']
0.24 datastructures.py(1): import copy
0.24 datastructures.py(2): from collections.abc import Mapping
0.24 datastructures.py(5): class OrderedSet:
0.24 datastructures.py(5): class OrderedSet:
0.24 datastructures.py(6):     """
0.24 datastructures.py(10):     def __init__(self, iterable=None):
0.24 datastructures.py(13):     def add(self, item):
0.24 datastructures.py(16):     def remove(self, item):
0.24 datastructures.py(19):     def discard(self, item):
0.24 datastructures.py(25):     def __iter__(self):
0.24 datastructures.py(28):     def __reversed__(self):
0.24 datastructures.py(31):     def __contains__(self, item):
0.24 datastructures.py(34):     def __bool__(self):
0.24 datastructures.py(37):     def __len__(self):
0.24 datastructures.py(41): class MultiValueDictKeyError(KeyError):
0.24 datastructures.py(41): class MultiValueDictKeyError(KeyError):
0.24 datastructures.py(42):     pass
0.24 datastructures.py(45): class MultiValueDict(dict):
0.24 datastructures.py(45): class MultiValueDict(dict):
0.24 datastructures.py(46):     """
0.24 datastructures.py(67):     def __init__(self, key_to_list_mapping=()):
0.24 datastructures.py(70):     def __repr__(self):
0.24 datastructures.py(73):     def __getitem__(self, key):
0.24 datastructures.py(87):     def __setitem__(self, key, value):
0.24 datastructures.py(90):     def __copy__(self):
0.24 datastructures.py(96):     def __deepcopy__(self, memo):
0.24 datastructures.py(104):     def __getstate__(self):
0.24 datastructures.py(107):     def __setstate__(self, obj_dict):
0.24 datastructures.py(113):     def get(self, key, default=None):
0.24 datastructures.py(126):     def _getlist(self, key, default=None, force_list=False):
0.24 datastructures.py(144):     def getlist(self, key, default=None):
0.24 datastructures.py(151):     def setlist(self, key, list_):
0.24 datastructures.py(154):     def setdefault(self, key, default=None):
0.24 datastructures.py(161):     def setlistdefault(self, key, default_list=None):
0.24 datastructures.py(170):     def appendlist(self, key, value):
0.24 datastructures.py(174):     def items(self):
0.24 datastructures.py(182):     def lists(self):
0.24 datastructures.py(186):     def values(self):
0.24 datastructures.py(191):     def copy(self):
0.24 datastructures.py(195):     def update(self, *args, **kwargs):
0.24 datastructures.py(212):     def dict(self):
0.24 datastructures.py(217): class ImmutableList(tuple):
0.24 datastructures.py(217): class ImmutableList(tuple):
0.24 datastructures.py(218):     """
0.24 datastructures.py(230):     def __new__(cls, *args, warning='ImmutableList object is immutable.', **kwargs):
0.24 datastructures.py(235):     def complain(self, *args, **kwargs):
0.24 datastructures.py(239):     __delitem__ = complain
0.24 datastructures.py(240):     __delslice__ = complain
0.24 datastructures.py(241):     __iadd__ = complain
0.24 datastructures.py(242):     __imul__ = complain
0.24 datastructures.py(243):     __setitem__ = complain
0.24 datastructures.py(244):     __setslice__ = complain
0.24 datastructures.py(245):     append = complain
0.24 datastructures.py(246):     extend = complain
0.24 datastructures.py(247):     insert = complain
0.24 datastructures.py(248):     pop = complain
0.24 datastructures.py(249):     remove = complain
0.24 datastructures.py(250):     sort = complain
0.24 datastructures.py(251):     reverse = complain
0.24 datastructures.py(254): class DictWrapper(dict):
0.24 datastructures.py(254): class DictWrapper(dict):
0.24 datastructures.py(255):     """
0.24 datastructures.py(263):     def __init__(self, data, func, prefix):
0.24 datastructures.py(268):     def __getitem__(self, key):
0.24 datastructures.py(283): def _destruct_iterable_mapping_values(data):
0.24 datastructures.py(295): class CaseInsensitiveMapping(Mapping):
0.24 datastructures.py(295): class CaseInsensitiveMapping(Mapping):
0.24 datastructures.py(296):     """
0.24 datastructures.py(313):     def __init__(self, data):
0.24 datastructures.py(318):     def __getitem__(self, key):
0.24 datastructures.py(321):     def __len__(self):
0.24 datastructures.py(324):     def __eq__(self, other):
0.24 datastructures.py(331):     def __iter__(self):
0.24 datastructures.py(334):     def __repr__(self):
0.24 datastructures.py(337):     def copy(self):
Testing against Django installed in '/testbed/django'
0.64 datastructures.py(231):         self = tuple.__new__(cls, *args, **kwargs)
0.64 datastructures.py(232):         self.warning = warning
0.64 datastructures.py(233):         return self
0.64 datastructures.py(231):         self = tuple.__new__(cls, *args, **kwargs)
0.64 datastructures.py(232):         self.warning = warning
0.64 datastructures.py(233):         return self
0.64 datastructures.py(231):         self = tuple.__new__(cls, *args, **kwargs)
0.64 datastructures.py(232):         self.warning = warning
0.64 datastructures.py(233):         return self
0.68 datastructures.py(231):         self = tuple.__new__(cls, *args, **kwargs)
0.68 datastructures.py(232):         self.warning = warning
0.68 datastructures.py(233):         return self
0.69 datastructures.py(231):         self = tuple.__new__(cls, *args, **kwargs)
0.69 datastructures.py(232):         self.warning = warning
0.69 datastructures.py(233):         return self
0.69 datastructures.py(231):         self = tuple.__new__(cls, *args, **kwargs)
0.69 datastructures.py(232):         self.warning = warning
0.69 datastructures.py(233):         return self
0.69 datastructures.py(231):         self = tuple.__new__(cls, *args, **kwargs)
0.69 datastructures.py(232):         self.warning = warning
0.69 datastructures.py(233):         return self
0.69 datastructures.py(231):         self = tuple.__new__(cls, *args, **kwargs)
0.69 datastructures.py(232):         self.warning = warning
0.69 datastructures.py(233):         return self
0.69 datastructures.py(231):         self = tuple.__new__(cls, *args, **kwargs)
0.69 datastructures.py(232):         self.warning = warning
0.69 datastructures.py(233):         return self
0.69 datastructures.py(231):         self = tuple.__new__(cls, *args, **kwargs)
0.69 datastructures.py(232):         self.warning = warning
0.69 datastructures.py(233):         return self
0.69 datastructures.py(231):         self = tuple.__new__(cls, *args, **kwargs)
0.69 datastructures.py(232):         self.warning = warning
0.69 datastructures.py(233):         return self
0.69 datastructures.py(231):         self = tuple.__new__(cls, *args, **kwargs)
0.69 datastructures.py(232):         self.warning = warning
0.69 datastructures.py(233):         return self
0.69 datastructures.py(231):         self = tuple.__new__(cls, *args, **kwargs)
0.69 datastructures.py(232):         self.warning = warning
0.69 datastructures.py(233):         return self
0.69 datastructures.py(231):         self = tuple.__new__(cls, *args, **kwargs)
0.69 datastructures.py(232):         self.warning = warning
0.69 datastructures.py(233):         return self
0.69 datastructures.py(231):         self = tuple.__new__(cls, *args, **kwargs)
0.69 datastructures.py(232):         self.warning = warning
0.69 datastructures.py(233):         return self
0.69 datastructures.py(231):         self = tuple.__new__(cls, *args, **kwargs)
0.69 datastructures.py(232):         self.warning = warning
0.69 datastructures.py(233):         return self
0.69 datastructures.py(231):         self = tuple.__new__(cls, *args, **kwargs)
0.69 datastructures.py(232):         self.warning = warning
0.69 datastructures.py(233):         return self
0.69 datastructures.py(231):         self = tuple.__new__(cls, *args, **kwargs)
0.69 datastructures.py(232):         self.warning = warning
0.69 datastructures.py(233):         return self
0.69 datastructures.py(231):         self = tuple.__new__(cls, *args, **kwargs)
0.69 datastructures.py(232):         self.warning = warning
0.69 datastructures.py(233):         return self
0.69 datastructures.py(231):         self = tuple.__new__(cls, *args, **kwargs)
0.69 datastructures.py(232):         self.warning = warning
0.69 datastructures.py(233):         return self
0.69 datastructures.py(231):         self = tuple.__new__(cls, *args, **kwargs)
0.69 datastructures.py(232):         self.warning = warning
0.69 datastructures.py(233):         return self
0.69 datastructures.py(231):         self = tuple.__new__(cls, *args, **kwargs)
0.69 datastructures.py(232):         self.warning = warning
0.69 datastructures.py(233):         return self
0.70 datastructures.py(11):         self.dict = dict.fromkeys(iterable or ())
0.70 datastructures.py(11):         self.dict = dict.fromkeys(iterable or ())
0.70 datastructures.py(11):         self.dict = dict.fromkeys(iterable or ())
0.70 datastructures.py(14):         self.dict[item] = None
0.70 datastructures.py(26):         return iter(self.dict)
0.70 datastructures.py(26):         return iter(self.dict)
0.70 datastructures.py(26):         return iter(self.dict)
Skipping setup of unused database(s): default, other.
0.71 datastructures.py(231):         self = tuple.__new__(cls, *args, **kwargs)
0.71 datastructures.py(232):         self.warning = warning
0.71 datastructures.py(233):         return self
0.71 datastructures.py(231):         self = tuple.__new__(cls, *args, **kwargs)
0.71 datastructures.py(232):         self.warning = warning
0.71 datastructures.py(233):         return self
0.71 datastructures.py(231):         self = tuple.__new__(cls, *args, **kwargs)
0.71 datastructures.py(232):         self.warning = warning
0.71 datastructures.py(233):         return self
0.73 datastructures.py(11):         self.dict = dict.fromkeys(iterable or ())
0.73 datastructures.py(38):         return len(self.dict)
0.73 datastructures.py(26):         return iter(self.dict)
0.73 datastructures.py(38):         return len(self.dict)
0.73 datastructures.py(11):         self.dict = dict.fromkeys(iterable or ())
0.73 datastructures.py(38):         return len(self.dict)
0.73 datastructures.py(26):         return iter(self.dict)
0.73 datastructures.py(38):         return len(self.dict)
0.73 datastructures.py(231):         self = tuple.__new__(cls, *args, **kwargs)
0.73 datastructures.py(232):         self.warning = warning
0.73 datastructures.py(233):         return self
0.73 datastructures.py(231):         self = tuple.__new__(cls, *args, **kwargs)
0.73 datastructures.py(232):         self.warning = warning
0.73 datastructures.py(233):         return self
0.73 datastructures.py(231):         self = tuple.__new__(cls, *args, **kwargs)
0.73 datastructures.py(232):         self.warning = warning
0.73 datastructures.py(233):         return self
0.73 datastructures.py(231):         self = tuple.__new__(cls, *args, **kwargs)
0.73 datastructures.py(232):         self.warning = warning
0.73 datastructures.py(233):         return self
0.73 datastructures.py(231):         self = tuple.__new__(cls, *args, **kwargs)
0.73 datastructures.py(232):         self.warning = warning
0.73 datastructures.py(233):         return self
0.73 datastructures.py(231):         self = tuple.__new__(cls, *args, **kwargs)
0.73 datastructures.py(232):         self.warning = warning
0.73 datastructures.py(233):         return self
0.73 datastructures.py(231):         self = tuple.__new__(cls, *args, **kwargs)
0.73 datastructures.py(232):         self.warning = warning
0.73 datastructures.py(233):         return self
0.73 datastructures.py(231):         self = tuple.__new__(cls, *args, **kwargs)
0.73 datastructures.py(232):         self.warning = warning
0.73 datastructures.py(233):         return self
0.73 datastructures.py(231):         self = tuple.__new__(cls, *args, **kwargs)
0.73 datastructures.py(232):         self.warning = warning
0.73 datastructures.py(233):         return self
0.73 datastructures.py(231):         self = tuple.__new__(cls, *args, **kwargs)
0.73 datastructures.py(232):         self.warning = warning
0.73 datastructures.py(233):         return self
0.73 datastructures.py(231):         self = tuple.__new__(cls, *args, **kwargs)
0.73 datastructures.py(232):         self.warning = warning
0.73 datastructures.py(233):         return self
0.73 datastructures.py(231):         self = tuple.__new__(cls, *args, **kwargs)
0.73 datastructures.py(232):         self.warning = warning
0.73 datastructures.py(233):         return self
0.73 datastructures.py(231):         self = tuple.__new__(cls, *args, **kwargs)
0.73 datastructures.py(232):         self.warning = warning
0.73 datastructures.py(233):         return self
0.73 datastructures.py(231):         self = tuple.__new__(cls, *args, **kwargs)
0.73 datastructures.py(232):         self.warning = warning
0.73 datastructures.py(233):         return self
0.73 datastructures.py(231):         self = tuple.__new__(cls, *args, **kwargs)
0.73 datastructures.py(232):         self.warning = warning
0.73 datastructures.py(233):         return self
0.73 datastructures.py(11):         self.dict = dict.fromkeys(iterable or ())
0.73 datastructures.py(38):         return len(self.dict)
0.73 datastructures.py(26):         return iter(self.dict)
0.73 datastructures.py(38):         return len(self.dict)
0.73 datastructures.py(11):         self.dict = dict.fromkeys(iterable or ())
0.73 datastructures.py(38):         return len(self.dict)
0.73 datastructures.py(26):         return iter(self.dict)
0.73 datastructures.py(38):         return len(self.dict)
0.73 datastructures.py(231):         self = tuple.__new__(cls, *args, **kwargs)
0.73 datastructures.py(232):         self.warning = warning
0.73 datastructures.py(233):         return self
0.73 datastructures.py(231):         self = tuple.__new__(cls, *args, **kwargs)
0.73 datastructures.py(232):         self.warning = warning
0.73 datastructures.py(233):         return self
0.73 datastructures.py(231):         self = tuple.__new__(cls, *args, **kwargs)
0.73 datastructures.py(232):         self.warning = warning
0.73 datastructures.py(233):         return self
0.73 datastructures.py(231):         self = tuple.__new__(cls, *args, **kwargs)
0.73 datastructures.py(232):         self.warning = warning
0.73 datastructures.py(233):         return self
0.73 datastructures.py(231):         self = tuple.__new__(cls, *args, **kwargs)
0.73 datastructures.py(232):         self.warning = warning
0.73 datastructures.py(233):         return self
0.73 datastructures.py(231):         self = tuple.__new__(cls, *args, **kwargs)
0.73 datastructures.py(232):         self.warning = warning
0.73 datastructures.py(233):         return self
0.73 datastructures.py(231):         self = tuple.__new__(cls, *args, **kwargs)
0.73 datastructures.py(232):         self.warning = warning
0.73 datastructures.py(233):         return self
0.73 datastructures.py(11):         self.dict = dict.fromkeys(iterable or ())
0.73 datastructures.py(38):         return len(self.dict)
0.73 datastructures.py(26):         return iter(self.dict)
0.73 datastructures.py(38):         return len(self.dict)
0.73 datastructures.py(11):         self.dict = dict.fromkeys(iterable or ())
0.73 datastructures.py(38):         return len(self.dict)
0.73 datastructures.py(26):         return iter(self.dict)
0.73 datastructures.py(38):         return len(self.dict)
0.73 datastructures.py(231):         self = tuple.__new__(cls, *args, **kwargs)
0.73 datastructures.py(232):         self.warning = warning
0.73 datastructures.py(233):         return self
0.74 datastructures.py(231):         self = tuple.__new__(cls, *args, **kwargs)
0.74 datastructures.py(232):         self.warning = warning
0.74 datastructures.py(233):         return self
0.74 datastructures.py(231):         self = tuple.__new__(cls, *args, **kwargs)
0.74 datastructures.py(232):         self.warning = warning
0.74 datastructures.py(233):         return self
0.74 datastructures.py(231):         self = tuple.__new__(cls, *args, **kwargs)
0.74 datastructures.py(232):         self.warning = warning
0.74 datastructures.py(233):         return self
0.74 datastructures.py(231):         self = tuple.__new__(cls, *args, **kwargs)
0.74 datastructures.py(232):         self.warning = warning
0.74 test_reversed_ordered_set_raises_type_error (test_coverup_django__django-14089.OrderedSetReversedTests)
Test that calling reversed() on an OrderedSet does not raise a TypeError. ... ok

----------------------------------------------------------------------
Ran 1 test in 0.000s

OK
datastructures.py(233):         return self
0.74 datastructures.py(231):         self = tuple.__new__(cls, *args, **kwargs)
0.74 datastructures.py(232):         self.warning = warning
0.74 datastructures.py(233):         return self
0.74 datastructures.py(231):         self = tuple.__new__(cls, *args, **kwargs)
0.74 datastructures.py(232):         self.warning = warning
0.74 datastructures.py(233):         return self
0.74 datastructures.py(231):         self = tuple.__new__(cls, *args, **kwargs)
0.74 datastructures.py(232):         self.warning = warning
0.74 datastructures.py(233):         return self
0.74 datastructures.py(231):         self = tuple.__new__(cls, *args, **kwargs)
0.74 datastructures.py(232):         self.warning = warning
0.74 datastructures.py(233):         return self
0.74 datastructures.py(11):         self.dict = dict.fromkeys(iterable or ())
0.74 datastructures.py(38):         return len(self.dict)
0.74 datastructures.py(26):         return iter(self.dict)
0.74 datastructures.py(38):         return len(self.dict)
0.74 datastructures.py(11):         self.dict = dict.fromkeys(iterable or ())
0.74 datastructures.py(38):         return len(self.dict)
0.74 datastructures.py(26):         return iter(self.dict)
0.74 datastructures.py(38):         return len(self.dict)
0.74 datastructures.py(11):         self.dict = dict.fromkeys(iterable or ())
0.74 datastructures.py(38):         return len(self.dict)
0.74 datastructures.py(26):         return iter(self.dict)
0.74 datastructures.py(38):         return len(self.dict)
0.74 datastructures.py(11):         self.dict = dict.fromkeys(iterable or ())
0.74 datastructures.py(38):         return len(self.dict)
0.74 datastructures.py(26):         return iter(self.dict)
0.74 datastructures.py(38):         return len(self.dict)
0.74 datastructures.py(231):         self = tuple.__new__(cls, *args, **kwargs)
0.74 datastructures.py(232):         self.warning = warning
0.74 datastructures.py(233):         return self
0.74 datastructures.py(231):         self = tuple.__new__(cls, *args, **kwargs)
0.74 datastructures.py(232):         self.warning = warning
0.74 datastructures.py(233):         return self
0.74 datastructures.py(11):         self.dict = dict.fromkeys(iterable or ())
0.74 datastructures.py(38):         return len(self.dict)
0.74 datastructures.py(26):         return iter(self.dict)
0.74 datastructures.py(38):         return len(self.dict)
0.74 datastructures.py(11):         self.dict = dict.fromkeys(iterable or ())
0.74 datastructures.py(38):         return len(self.dict)
0.74 datastructures.py(26):         return iter(self.dict)
0.74 datastructures.py(38):         return len(self.dict)
0.74 datastructures.py(231):         self = tuple.__new__(cls, *args, **kwargs)
0.74 datastructures.py(232):         self.warning = warning
0.74 datastructures.py(233):         return self
0.74 datastructures.py(231):         self = tuple.__new__(cls, *args, **kwargs)
0.74 datastructures.py(232):         self.warning = warning
0.74 datastructures.py(233):         return self
0.74 datastructures.py(231):         self = tuple.__new__(cls, *args, **kwargs)
0.74 datastructures.py(232):         self.warning = warning
0.74 datastructures.py(233):         return self
0.74 datastructures.py(231):         self = tuple.__new__(cls, *args, **kwargs)
0.74 datastructures.py(232):         self.warning = warning
0.74 datastructures.py(233):         return self
0.74 datastructures.py(231):         self = tuple.__new__(cls, *args, **kwargs)
0.74 datastructures.py(232):         self.warning = warning
0.74 datastructures.py(233):         return self
0.74 datastructures.py(11):         self.dict = dict.fromkeys(iterable or ())
0.74 datastructures.py(38):         return len(self.dict)
0.74 datastructures.py(26):         return iter(self.dict)
0.74 datastructures.py(38):         return len(self.dict)
0.74 datastructures.py(11):         self.dict = dict.fromkeys(iterable or ())
0.74 datastructures.py(38):         return len(self.dict)
0.74 datastructures.py(26):         return iter(self.dict)
0.74 datastructures.py(38):         return len(self.dict)
0.74 datastructures.py(231):         self = tuple.__new__(cls, *args, **kwargs)
0.74 datastructures.py(232):         self.warning = warning
0.74 datastructures.py(233):         return self
0.74 datastructures.py(231):         self = tuple.__new__(cls, *args, **kwargs)
0.74 datastructures.py(232):         self.warning = warning
0.74 datastructures.py(233):         return self
System check identified no issues (0 silenced).
0.75 datastructures.py(11):         self.dict = dict.fromkeys(iterable or ())
0.75 datastructures.py(29):         return reversed(self.dict)
+ cat coverage.cover
{"/testbed/django/utils/datastructures.py": {"1": 1, "2": 1, "5": 2, "41": 2, "45": 2, "217": 2, "254": 2, "283": 1, "295": 2, "10": 1, "13": 1, "16": 1, "19": 1, "25": 1, "28": 1, "31": 1, "34": 1, "37": 1, "11": 18, "14": 1, "17": 0, "20": 0, "21": 0, "22": 0, "23": 0, "26": 17, "29": 1, "32": 0, "35": 0, "38": 28, "42": 1, "67": 1, "70": 1, "73": 1, "87": 1, "90": 1, "96": 1, "104": 1, "107": 1, "113": 1, "126": 1, "144": 1, "151": 1, "154": 1, "161": 1, "170": 1, "174": 1, "182": 1, "186": 1, "191": 1, "195": 1, "212": 1, "68": 0, "71": 0, "78": 0, "79": 0, "80": 0, "81": 0, "82": 0, "83": 0, "84": 0, "85": 0, "88": 0, "91": 0, "93": 0, "92": 0, "97": 0, "98": 0, "99": 0, "100": 0, "101": 0, "102": 0, "105": 0, "108": 0, "109": 0, "110": 0, "111": 0, "118": 0, "119": 0, "120": 0, "121": 0, "122": 0, "123": 0, "124": 0, "133": 0, "134": 0, "135": 0, "136": 0, "137": 0, "138": 0, "140": 0, "141": 0, "142": 0, "149": 0, "152": 0, "155": 0, "156": 0, "159": 0, "162": 0, "163": 0, "164": 0, "165": 0, "168": 0, "172": 0, "179": 0, "180": 0, "184": 0, "188": 0, "189": 0, "193": 0, "197": 0, "198": 0, "199": 0, "200": 0, "201": 0, "202": 0, "203": 0, "205": 0, "206": 0, "207": 0, "208": 0, "209": 0, "210": 0, "214": 0, "230": 1, "235": 1, "239": 1, "240": 1, "241": 1, "242": 1, "243": 1, "244": 1, "245": 1, "246": 1, "247": 1, "248": 1, "249": 1, "250": 1, "251": 1, "231": 65, "232": 65, "233": 65, "236": 0, "263": 1, "268": 1, "264": 0, "265": 0, "266": 0, "274": 0, "275": 0, "276": 0, "277": 0, "278": 0, "279": 0, "280": 0, "284": 0, "285": 0, "286": 0, "287": 0, "288": 0, "290": 0, "291": 0, "292": 0, "313": 1, "318": 1, "321": 1, "324": 1, "331": 1, "334": 1, "337": 1, "314": 0, "315": 0, "316": 0, "319": 0, "322": 0, "325": 0, "326": 0, "327": 0, "328": 0, "332": 0, "335": 0, "338": 0}}
+ git checkout d01709aae21de9cd2565b9c52f32732ea28a2d98
M	django/utils/datastructures.py
Note: switching to 'd01709aae21de9cd2565b9c52f32732ea28a2d98'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at d01709aae2 Fixed #24141 -- Added QuerySet.contains().
+ git apply /root/pre_state.patch
error: unrecognized input
