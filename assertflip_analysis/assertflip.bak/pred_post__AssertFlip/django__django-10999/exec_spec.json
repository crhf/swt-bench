{"instance_id": "django__django-10999", "repo": "django/django", "version": "3.0", "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27", "patch_list": ["diff --git a/django/utils/dateparse.py b/django/utils/dateparse.py\n--- a/django/utils/dateparse.py\n+++ b/django/utils/dateparse.py\n@@ -29,9 +29,10 @@\n standard_duration_re = re.compile(\n     r'^'\n     r'(?:(?P<days>-?\\d+) (days?, )?)?'\n-    r'((?:(?P<hours>-?\\d+):)(?=\\d+:\\d+))?'\n-    r'(?:(?P<minutes>-?\\d+):)?'\n-    r'(?P<seconds>-?\\d+)'\n+    r'(?P<sign>-?)'\n+    r'((?:(?P<hours>\\d+):)(?=\\d+:\\d+))?'\n+    r'(?:(?P<minutes>\\d+):)?'\n+    r'(?P<seconds>\\d+)'\n     r'(?:\\.(?P<microseconds>\\d{1,6})\\d{0,6})?'\n     r'$'\n )\n", "diff --git a/dev/null b/tests/test_coverup_django__django-10999.py\nnew file mode 100644\nindex e69de29..0a81828 100644\n--- /dev/null\n+++ b/tests/test_coverup_django__django-10999.py\n@@ -0,0 +1,31 @@\n+from django.test import SimpleTestCase\n+from django.utils.dateparse import parse_duration\n+import datetime\n+\n+class ParseDurationBugTest(SimpleTestCase):\n+    def test_negative_duration_bug(self):\n+        \"\"\"\n+        Test parse_duration with a negative duration string.\n+        The function should correctly parse the duration once the bug is fixed.\n+        \"\"\"\n+        result = parse_duration(\"-1:00:00\")\n+        # The expected result should be a negative timedelta.\n+        self.assertEqual(result, datetime.timedelta(hours=-1))  # The function should return correct timedelta\n+\n+    def test_negative_minutes_bug(self):\n+        \"\"\"\n+        Test parse_duration with a negative minutes string.\n+        The function should correctly parse the duration once the bug is fixed.\n+        \"\"\"\n+        result = parse_duration(\"0:-30:00\")\n+        # The expected result should be a negative timedelta.\n+        self.assertEqual(result, datetime.timedelta(minutes=-30))  # The function should return correct timedelta\n+\n+    def test_negative_seconds_bug(self):\n+        \"\"\"\n+        Test parse_duration with a negative seconds string.\n+        The function should correctly parse the duration once the bug is fixed.\n+        \"\"\"\n+        result = parse_duration(\"0:00:-30\")\n+        # The expected result should be a negative timedelta.\n+        self.assertEqual(result, datetime.timedelta(seconds=-30))  # The function should return correct timedelta\n"], "arch": "x86_64", "base_commit": "36300ef336e3f130a0dadc1143163ff3d23dc843", "test_directives": ["test_coverup_django__django-10999"], "coverage_files": ["django/utils/dateparse.py"], "env_name": "testbed", "run_id": "assertflip", "patch_id": "pred_post__AssertFlip", "timeout": 1800, "rm_image": false, "force_rebuild": false, "exec_mode": "unit_test", "reproduction_script_name": null, "compute_coverage": true, "install": {"python": "3.6", "packages": "requirements.txt", "install": "python -m pip install -e .", "eval_commands": ["sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen && locale-gen", "export LANG=en_US.UTF-8", "export LANGUAGE=en_US:en", "export LC_ALL=en_US.UTF-8"]}, "cache_level": "instance", "test_command": "python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/utils/dateparse\\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-10999", "req_install_commands": ["conda create -n testbed python=3.6 -y", "cat <<'EOF_59812759871' > $HOME/requirements.txt\nasgiref ~= 3.2\nargon2-cffi >= 16.1.0\nbcrypt\ndocutils\ngeoip2\njinja2 >= 2.9.2\nnumpy\nPillow != 5.4.0\npylibmc; sys.platform != 'win32'\npython-memcached >= 1.59\npytz\npywatchman; sys.platform != 'win32'\nPyYAML\nselenium\nsqlparse >= 0.2.2\ntblib >= 1.5.0\n\nEOF_59812759871", "conda activate testbed && python -m pip install -r $HOME/requirements.txt", "rm $HOME/requirements.txt"]}