+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD 5a8e8f80bb82a867eab7e4d9d099f21d0a976d22
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
nothing to commit, working tree clean
+ git show
commit 5a8e8f80bb82a867eab7e4d9d099f21d0a976d22
Author: Michael Lissner <mlissner@michaeljaylissner.com>
Date:   Tue May 25 09:31:26 2021 -0700

    Fixed #32772 -- Made database cache count size once per set.

diff --git a/AUTHORS b/AUTHORS
index d9318c618f..cdb43476cb 100644
--- a/AUTHORS
+++ b/AUTHORS
@@ -641,6 +641,7 @@ answer newbie questions, and generally made Django that much better:
     Michael S. Brown <michael@msbrown.net>
     Michael Hall <mhall1@ualberta.ca>
     Michael Josephson <http://www.sdjournal.com/>
+    Michael Lissner <mike@free.law>
     Michael Manfre <mmanfre@gmail.com>
     michael.mcewan@gmail.com
     Michael Placentra II <someone@michaelplacentra2.net>
diff --git a/django/core/cache/backends/db.py b/django/core/cache/backends/db.py
index d62083a0f6..b84885f1ef 100644
--- a/django/core/cache/backends/db.py
+++ b/django/core/cache/backends/db.py
@@ -128,7 +128,7 @@ class DatabaseCache(BaseDatabaseCache):
                 exp = datetime.fromtimestamp(timeout, tz=tz)
             exp = exp.replace(microsecond=0)
             if num > self._max_entries:
-                self._cull(db, cursor, now)
+                self._cull(db, cursor, now, num)
             pickled = pickle.dumps(value, self.pickle_protocol)
             # The DB column is expecting a string, so make sure the value is a
             # string, not bytes. Refs #19274.
@@ -247,7 +247,7 @@ class DatabaseCache(BaseDatabaseCache):
             )
             return cursor.fetchone() is not None
 
-    def _cull(self, db, cursor, now):
+    def _cull(self, db, cursor, now, num):
         if self._cull_frequency == 0:
             self.clear()
         else:
@@ -255,10 +255,10 @@ class DatabaseCache(BaseDatabaseCache):
             table = connection.ops.quote_name(self._table)
             cursor.execute("DELETE FROM %s WHERE expires < %%s" % table,
                            [connection.ops.adapt_datetimefield_value(now)])
-            cursor.execute("SELECT COUNT(*) FROM %s" % table)
-            num = cursor.fetchone()[0]
-            if num > self._max_entries:
-                cull_num = num // self._cull_frequency
+            deleted_count = cursor.rowcount
+            remaining_num = num - deleted_count
+            if remaining_num > self._max_entries:
+                cull_num = remaining_num // self._cull_frequency
                 cursor.execute(
                     connection.ops.cache_key_culling_sql() % table,
                     [cull_num])
diff --git a/tests/cache/tests.py b/tests/cache/tests.py
index 65a8f12fc7..783055182d 100644
--- a/tests/cache/tests.py
+++ b/tests/cache/tests.py
@@ -40,6 +40,7 @@ from django.test import (
     ignore_warnings, override_settings,
 )
 from django.test.signals import setting_changed
+from django.test.utils import CaptureQueriesContext
 from django.utils import timezone, translation
 from django.utils.cache import (
     get_cache_key, learn_cache_key, patch_cache_control, patch_vary_headers,
@@ -1117,6 +1118,18 @@ class DBCacheTests(BaseCacheTests, TransactionTestCase):
         with self.assertNumQueries(1):
             cache.delete_many(['a', 'b', 'c'])
 
+    def test_cull_count_queries(self):
+        old_max_entries = cache._max_entries
+        # Force _cull to delete on first cached record.
+        cache._max_entries = -1
+        with CaptureQueriesContext(connection) as captured_queries:
+            try:
+                cache.set('force_cull', 'value', 1000)
+            finally:
+                cache._max_entries = old_max_entries
+        num_count_queries = sum('COUNT' in query['sql'] for query in captured_queries)
+        self.assertEqual(num_count_queries, 1)
+
     def test_delete_cursor_rowcount(self):
         """
         The rowcount attribute should not be checked on a closed cursor.
+ git diff 5a8e8f80bb82a867eab7e4d9d099f21d0a976d22
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Checking if build backend supports build_editable: started
  Checking if build backend supports build_editable: finished with status 'done'
  Getting requirements to build editable: started
  Getting requirements to build editable: finished with status 'done'
  Preparing editable metadata (pyproject.toml): started
  Preparing editable metadata (pyproject.toml): finished with status 'done'
Requirement already satisfied: asgiref>=3.3.2 in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from Django==4.0.dev20210526092111) (3.8.1)
Requirement already satisfied: pytz in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from Django==4.0.dev20210526092111) (2025.2)
Requirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from Django==4.0.dev20210526092111) (0.5.3)
Requirement already satisfied: typing-extensions>=4 in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from asgiref>=3.3.2->Django==4.0.dev20210526092111) (4.13.2)
Building wheels for collected packages: Django
  Building editable for Django (pyproject.toml): started
  Building editable for Django (pyproject.toml): finished with status 'done'
  Created wheel for Django: filename=django-4.0.dev20210526092111-0.editable-py3-none-any.whl size=26126 sha256=cf613fd60408d24c78c0d444d84220d3635881ab2b9e71129b9090c09f5d6b1d
  Stored in directory: /tmp/pip-ephem-wheel-cache-5nekbhs9/wheels/b2/50/f1/218f2e9962a80d01a4b1297698978f9fb3b60056aa24343f24
Successfully built Django
Installing collected packages: Django
  Attempting uninstall: Django
    Found existing installation: Django 4.0.dev20210526092111
    Uninstalling Django-4.0.dev20210526092111:
      Successfully uninstalled Django-4.0.dev20210526092111
Successfully installed Django-4.0.dev20210526092111
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable.It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git apply -v -
Checking patch django/utils/autoreload.py...
Applied patch django/utils/autoreload.py cleanly.
+ git apply -v -
Checking patch tests/test_coverup_django__django-14311.py...
Applied patch tests/test_coverup_django__django-14311.py cleanly.
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/utils/autoreload\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-14311
test_autoreloader_incorrectly_truncates_module_path (test_coverup_django__django-14311.AutoreloaderModulePathTests)
Test that the autoreloader correctly handles the module path when using `-m` option. ... FAIL

======================================================================
FAIL: test_autoreloader_incorrectly_truncates_module_path (test_coverup_django__django-14311.AutoreloaderModulePathTests)
Test that the autoreloader correctly handles the module path when using `-m` option.
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/./tests/test_coverup_django__django-14311.py", line 28, in test_autoreloader_incorrectly_truncates_module_path
    self.assertNotIn('foo.bar.baz', args)
AssertionError: 'foo.bar.baz' unexpectedly found in ['/opt/miniconda3/envs/testbed/bin/python3', '-m', 'foo.bar.baz']

----------------------------------------------------------------------
Ran 1 test in 0.001s

FAILED (failures=1)
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(django/utils/autoreload\\.py)']
0.10 autoreload.py(1): import functools
0.10 autoreload.py(2): import itertools
0.10 autoreload.py(3): import logging
0.10 autoreload.py(4): import os
0.10 autoreload.py(5): import signal
0.10 autoreload.py(6): import subprocess
0.10 autoreload.py(7): import sys
0.10 autoreload.py(8): import threading
0.10 autoreload.py(9): import time
0.10 autoreload.py(10): import traceback
0.10 autoreload.py(11): import weakref
0.10 autoreload.py(12): from collections import defaultdict
0.10 autoreload.py(13): from pathlib import Path
0.10 autoreload.py(14): from types import ModuleType
0.10 autoreload.py(15): from zipimport import zipimporter
0.10 autoreload.py(17): import django
0.10 autoreload.py(18): from django.apps import apps
0.10 autoreload.py(19): from django.core.signals import request_finished
0.10 autoreload.py(20): from django.dispatch import Signal
0.10 autoreload.py(21): from django.utils.functional import cached_property
0.10 autoreload.py(22): from django.utils.version import get_version_tuple
0.10 autoreload.py(24): autoreload_started = Signal()
0.10 autoreload.py(25): file_changed = Signal()
0.10 autoreload.py(27): DJANGO_AUTORELOAD_ENV = 'RUN_MAIN'
0.10 autoreload.py(29): logger = logging.getLogger('django.utils.autoreload')
0.10 autoreload.py(34): _error_files = []
0.10 autoreload.py(35): _exception = None
0.10 autoreload.py(37): try:
0.10 autoreload.py(38):     import termios
0.10 autoreload.py(43): try:
0.10 autoreload.py(44):     import pywatchman
0.10 autoreload.py(49): def is_django_module(module):
0.10 autoreload.py(54): def is_django_path(path):
0.10 autoreload.py(59): def check_errors(fn):
0.10 autoreload.py(84): def raise_last_exception():
0.10 autoreload.py(90): def ensure_echo_on():
0.10 autoreload.py(109): def iter_all_python_module_files():
0.10 autoreload.py(119): @functools.lru_cache(maxsize=1)
0.10 autoreload.py(120): def iter_modules_and_files(modules, extra_files):
0.10 autoreload.py(165): @functools.lru_cache(maxsize=1)
0.10 autoreload.py(166): def common_roots(paths):
0.10 autoreload.py(196): def sys_path_directories():
0.10 autoreload.py(213): def get_child_arguments():
0.10 autoreload.py(251): def trigger_reload(filename):
0.10 autoreload.py(256): def restart_with_reloader():
0.10 autoreload.py(265): class BaseReloader:
0.10 autoreload.py(265): class BaseReloader:
0.10 autoreload.py(266):     def __init__(self):
0.10 autoreload.py(271):     def watch_dir(self, path, glob):
0.10 autoreload.py(285):     def watched_files(self, include_globs=True):
0.10 autoreload.py(297):     def wait_for_apps_ready(self, app_reg, django_main_thread):
0.10 autoreload.py(315):     def run(self, django_main_thread):
0.10 autoreload.py(332):     def run_loop(self):
0.10 autoreload.py(341):     def tick(self):
0.10 autoreload.py(351):     @classmethod
0.10 autoreload.py(352):     def check_availability(cls):
0.10 autoreload.py(355):     def notify_file_changed(self, path):
0.10 autoreload.py(362):     @property
0.10 autoreload.py(363):     def should_stop(self):
0.10 autoreload.py(366):     def stop(self):
0.10 autoreload.py(370): class StatReloader(BaseReloader):
0.10 autoreload.py(370): class StatReloader(BaseReloader):
0.10 autoreload.py(371):     SLEEP_TIME = 1  # Check for changes once per second.
0.10 autoreload.py(373):     def tick(self):
0.10 autoreload.py(389):     def snapshot_files(self):
0.10 autoreload.py(403):     @classmethod
0.10 autoreload.py(404):     def check_availability(cls):
0.10 autoreload.py(408): class WatchmanUnavailable(RuntimeError):
0.10 autoreload.py(408): class WatchmanUnavailable(RuntimeError):
0.10 autoreload.py(409):     pass
0.10 autoreload.py(412): class WatchmanReloader(BaseReloader):
0.10 autoreload.py(412): class WatchmanReloader(BaseReloader):
0.10 autoreload.py(413):     def __init__(self):
0.10 autoreload.py(419):     @cached_property
0.10 autoreload.py(420):     def client(self):
0.10 autoreload.py(423):     def _watch_root(self, root):
0.10 autoreload.py(444):     @functools.lru_cache()
0.10 autoreload.py(445):     def _get_clock(self, root):
0.10 autoreload.py(448):     def _subscribe(self, directory, name, expression):
0.10 autoreload.py(468):     def _subscribe_dir(self, directory, filenames):
0.10 autoreload.py(482):     def _watch_glob(self, directory, patterns):
0.10 autoreload.py(505):     def watched_roots(self, watched_files):
0.10 autoreload.py(511):     def _update_watches(self):
0.10 autoreload.py(527):     def update_watches(self):
0.10 autoreload.py(535):     def _check_subscription(self, sub):
0.10 autoreload.py(550):     def request_processed(self, **kwargs):
0.10 autoreload.py(554):     def tick(self):
0.10 autoreload.py(575):     def stop(self):
0.10 autoreload.py(579):     def check_server_status(self, inner_ex=None):
0.10 autoreload.py(587):     @classmethod
0.10 autoreload.py(588):     def check_availability(cls):
0.10 autoreload.py(605): def get_reloader():
0.10 autoreload.py(614): def start_django(reloader, main_func, *args, **kwargs):
0.10 autoreload.py(633): def run_with_reloader(main_func, *args, **kwargs):
Testing against Django installed in '/testbed/django'
Found 1 tests.
Skipping setup of unused database(s): default, other.
System check identified no issues (0 silenced).
0.64 autoreload.py(219):     import __main__
0.64 autoreload.py(220):     py_script = Path(sys.argv[0])
0.64 autoreload.py(222):     args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions]
0.64 autoreload.py(222):     args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions]
0.64 autoreload.py(226):     if getattr(__main__, '__spec__', None) is not None:
0.64 autoreload.py(234):     elif not py_script.exists():
0.64 autoreload.py(247):         args += sys.argv
0.64 autoreload.py(248):     return args
+ cat coverage.cover
{"/testbed/django/utils/autoreload.py": {"1": 1, "2": 1, "3": 1, "4": 1, "5": 1, "6": 1, "7": 1, "8": 1, "9": 1, "10": 1, "11": 1, "12": 1, "13": 1, "14": 1, "15": 1, "17": 1, "18": 1, "19": 1, "20": 1, "21": 1, "22": 1, "24": 1, "25": 1, "27": 1, "29": 1, "34": 1, "35": 1, "37": 1, "38": 1, "39": 0, "40": 0, "43": 1, "44": 1, "45": 0, "46": 0, "49": 1, "54": 1, "59": 1, "84": 1, "90": 1, "109": 1, "119": 1, "120": 1, "165": 1, "166": 1, "196": 1, "213": 1, "251": 1, "256": 1, "265": 2, "370": 2, "408": 2, "412": 2, "605": 1, "614": 1, "633": 1, "51": 0, "56": 0, "60": 0, "61": 0, "81": 0, "63": 0, "64": 0, "65": 0, "66": 0, "68": 0, "70": 0, "72": 0, "74": 0, "76": 0, "77": 0, "79": 0, "86": 0, "87": 0, "95": 0, "96": 0, "97": 0, "98": 0, "99": 0, "100": 0, "101": 0, "103": 0, "104": 0, "105": 0, "106": 0, "114": 0, "115": 0, "116": 0, "122": 0, "123": 0, "127": 0, "128": 0, "129": 0, "134": 0, "135": 0, "136": 0, "137": 0, "138": 0, "139": 0, "142": 0, "143": 0, "144": 0, "146": 0, "147": 0, "148": 0, "149": 0, "150": 0, "151": 0, "152": 0, "155": 0, "156": 0, "158": 0, "159": 0, "160": 0, "161": 0, "162": 0, "176": 0, "177": 0, "178": 0, "179": 0, "181": 0, "182": 0, "184": 0, "187": 0, "193": 0, "188": 0, "189": 0, "190": 0, "191": 0, "201": 0, "202": 0, "203": 0, "204": 0, "205": 0, "207": 0, "208": 0, "210": 0, "219": 1, "220": 1, "222": 2, "226": 1, "227": 0, "228": 0, "229": 0, "231": 0, "232": 0, "233": 0, "234": 1, "237": 0, "238": 0, "240": 0, "241": 0, "242": 0, "244": 0, "245": 0, "247": 1, "248": 1, "252": 0, "253": 0, "257": 0, "258": 0, "260": 0, "261": 0, "262": 0, "266": 1, "271": 1, "285": 1, "297": 1, "315": 1, "332": 1, "341": 1, "351": 1, "352": 1, "355": 1, "362": 1, "363": 1, "366": 1, "267": 0, "268": 0, "269": 0, "272": 0, "273": 0, "274": 0, "275": 0, "276": 0, "277": 0, "278": 0, "279": 0, "281": 0, "282": 0, "283": 0, "290": 0, "291": 0, "292": 0, "293": 0, "294": 0, "295": 0, "308": 0, "309": 0, "310": 0, "312": 0, "313": 0, "316": 0, "317": 0, "318": 0, "322": 0, "323": 0, "324": 0, "327": 0, "328": 0, "329": 0, "330": 0, "333": 0, "334": 0, "335": 0, "336": 0, "337": 0, "338": 0, "339": 0, "349": 0, "353": 0, "356": 0, "357": 0, "358": 0, "359": 0, "364": 0, "367": 0, "371": 1, "373": 1, "389": 1, "403": 1, "404": 1, "374": 0, "376": 0, "377": 0, "378": 0, "379": 0, "380": 0, "381": 0, "382": 0, "383": 0, "384": 0, "386": 0, "387": 0, "391": 0, "392": 0, "393": 0, "394": 0, "395": 0, "396": 0, "397": 0, "399": 0, "400": 0, "401": 0, "405": 0, "409": 1, "413": 1, "419": 1, "420": 1, "423": 1, "444": 1, "445": 1, "448": 1, "468": 1, "482": 1, "505": 1, "511": 1, "527": 1, "535": 1, "550": 1, "554": 1, "575": 1, "579": 1, "587": 1, "588": 1, "414": 0, "415": 0, "416": 0, "417": 0, "421": 0, "433": 0, "434": 0, "435": 0, "436": 0, "437": 0, "438": 0, "439": 0, "440": 0, "441": 0, "442": 0, "446": 0, "449": 0, "453": 0, "454": 0, "455": 0, "452": 0, "458": 0, "459": 0, "460": 0, "461": 0, "457": 0, "463": 0, "464": 0, "465": 0, "466": 0, "469": 0, "470": 0, "471": 0, "472": 0, "473": 0, "474": 0, "475": 0, "476": 0, "478": 0, "479": 0, "480": 0, "491": 0, "492": 0, "493": 0, "494": 0, "495": 0, "496": 0, "497": 0, "498": 0, "500": 0, "501": 0, "502": 0, "503": 0, "506": 0, "507": 0, "508": 0, "509": 0, "512": 0, "513": 0, "514": 0, "515": 0, "517": 0, "518": 0, "519": 0, "520": 0, "522": 0, "523": 0, "525": 0, "528": 0, "529": 0, "530": 0, "532": 0, "533": 0, "536": 0, "537": 0, "538": 0, "539": 0, "540": 0, "545": 0, "546": 0, "547": 0, "548": 0, "551": 0, "552": 0, "555": 0, "556": 0, "558": 0, "559": 0, "560": 0, "561": 0, "562": 0, "563": 0, "564": 0, "565": 0, "566": 0, "567": 0, "569": 0, "570": 0, "571": 0, "573": 0, "576": 0, "577": 0, "581": 0, "582": 0, "583": 0, "584": 0, "585": 0, "589": 0, "590": 0, "591": 0, "592": 0, "593": 0, "594": 0, "596": 0, "597": 0, "600": 0, "601": 0, "602": 0, "607": 0, "608": 0, "609": 0, "610": 0, "611": 0, "615": 0, "617": 0, "618": 0, "619": 0, "620": 0, "622": 0, "623": 0, "624": 0, "625": 0, "628": 0, "629": 0, "630": 0, "634": 0, "635": 0, "636": 0, "637": 0, "638": 0, "639": 0, "641": 0, "642": 0, "643": 0, "644": 0}}
+ git checkout 5a8e8f80bb82a867eab7e4d9d099f21d0a976d22
Note: switching to '5a8e8f80bb82a867eab7e4d9d099f21d0a976d22'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at 5a8e8f80bb Fixed #32772 -- Made database cache count size once per set.
M	django/utils/autoreload.py
+ git apply /root/pre_state.patch
error: unrecognized input
