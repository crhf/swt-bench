+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD 73c5b7f4b11a81e971f7d1bb18072e06a87060f4
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
nothing to commit, working tree clean
+ git show
commit 73c5b7f4b11a81e971f7d1bb18072e06a87060f4
Merge: 23102a7d8 8f2f51be6
Author: Bruno Oliveira <nicoddemus@gmail.com>
Date:   Wed Sep 11 22:14:31 2019 -0300

    Clarify docs by showing tox.ini considered before setup.cfg (#5839)
    
    Clarify docs by showing tox.ini considered before setup.cfg

+ git diff 73c5b7f4b11a81e971f7d1bb18072e06a87060f4
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Checking if build backend supports build_editable: started
  Checking if build backend supports build_editable: finished with status 'done'
  Getting requirements to build editable: started
  Getting requirements to build editable: finished with status 'done'
  Preparing editable metadata (pyproject.toml): started
  Preparing editable metadata (pyproject.toml): finished with status 'done'
Requirement already satisfied: py>=1.5.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest==5.1.3.dev14+g73c5b7f4b) (1.11.0)
Requirement already satisfied: packaging in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest==5.1.3.dev14+g73c5b7f4b) (23.1)
Requirement already satisfied: attrs>=17.4.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest==5.1.3.dev14+g73c5b7f4b) (23.1.0)
Requirement already satisfied: more-itertools>=4.0.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest==5.1.3.dev14+g73c5b7f4b) (10.1.0)
Requirement already satisfied: atomicwrites>=1.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest==5.1.3.dev14+g73c5b7f4b) (1.4.1)
Requirement already satisfied: pluggy<1.0,>=0.12 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest==5.1.3.dev14+g73c5b7f4b) (0.13.1)
Requirement already satisfied: wcwidth in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest==5.1.3.dev14+g73c5b7f4b) (0.2.6)
Building wheels for collected packages: pytest
  Building editable for pytest (pyproject.toml): started
  Building editable for pytest (pyproject.toml): finished with status 'done'
  Created wheel for pytest: filename=pytest-5.1.3.dev14+g73c5b7f4b-0.editable-py3-none-any.whl size=4806 sha256=a80a28f21b232db5d126f31bbad5a319e5a9e5f7e342dfc8f01041ce29fcf757
  Stored in directory: /tmp/pip-ephem-wheel-cache-par_djbx/wheels/7d/66/67/70d1ee2124ccf21d601c352e25cdca10f611f7c8b3f9ffb9e4
Successfully built pytest
Installing collected packages: pytest
  Attempting uninstall: pytest
    Found existing installation: pytest 5.1.3.dev14+g73c5b7f4b
    Uninstalling pytest-5.1.3.dev14+g73c5b7f4b:
      Successfully uninstalled pytest-5.1.3.dev14+g73c5b7f4b
Successfully installed pytest-5.1.3.dev14+g73c5b7f4b
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git apply -v -
Checking patch src/_pytest/config/__init__.py...
Checking patch src/_pytest/pathlib.py...
Applied patch src/_pytest/config/__init__.py cleanly.
Applied patch src/_pytest/pathlib.py cleanly.
+ git apply -v -
Checking patch testing/test_coverup_pytest-dev__pytest-5840.py...
Applied patch testing/test_coverup_pytest-dev__pytest-5840.py cleanly.
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(src/_pytest/config/__init__\.py|src/_pytest/pathlib\.py)' -m pytest -rA testing/test_coverup_pytest-dev__pytest-5840.py
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(src/_pytest/config/__init__\\.py|src/_pytest/pathlib\\.py)']
0.07 pathlib.py(1): import atexit
0.07 pathlib.py(2): import fnmatch
0.07 pathlib.py(3): import itertools
0.07 pathlib.py(4): import operator
0.07 pathlib.py(5): import os
0.07 pathlib.py(6): import shutil
0.07 pathlib.py(7): import sys
0.07 pathlib.py(8): import uuid
0.07 pathlib.py(9): import warnings
0.07 pathlib.py(10): from functools import partial
0.07 pathlib.py(11): from os.path import expanduser
0.07 pathlib.py(12): from os.path import expandvars
0.07 pathlib.py(13): from os.path import isabs
0.07 pathlib.py(14): from os.path import sep
0.07 pathlib.py(15): from posixpath import sep as posix_sep
0.07 pathlib.py(17): from _pytest.warning_types import PytestWarning
0.07 pathlib.py(19): if sys.version_info[:2] >= (3, 6):
0.07 pathlib.py(20):     from pathlib import Path, PurePath
0.07 pathlib.py(24): __all__ = ["Path", "PurePath"]
0.07 pathlib.py(27): LOCK_TIMEOUT = 60 * 60 * 3
0.07 pathlib.py(29): get_lock_path = operator.methodcaller("joinpath", ".lock")
0.07 pathlib.py(32): def ensure_reset_dir(path):
0.07 pathlib.py(41): def on_rm_rf_error(func, path: str, exc, *, start_path):
0.07 pathlib.py(78): def rm_rf(path: Path):
0.07 pathlib.py(86): def find_prefixed(root, prefix):
0.07 pathlib.py(94): def extract_suffixes(iter, prefix):
0.07 pathlib.py(105): def find_suffixes(root, prefix):
0.07 pathlib.py(111): def parse_num(maybe_num):
0.07 pathlib.py(119): def _force_symlink(root, target, link_to):
0.07 pathlib.py(139): def make_numbered_dir(root, prefix):
0.07 pathlib.py(160): def create_cleanup_lock(p):
0.07 pathlib.py(177): def register_cleanup_lock_removal(lock_path, register=atexit.register):
0.07 pathlib.py(194): def maybe_delete_a_numbered_dir(path):
0.07 pathlib.py(220): def ensure_deletable(path, consider_lock_dead_if_created_before):
0.07 pathlib.py(239): def try_cleanup(path, consider_lock_dead_if_created_before):
0.07 pathlib.py(245): def cleanup_candidates(root, prefix, keep):
0.07 pathlib.py(257): def cleanup_numbered_dir(root, prefix, keep, consider_lock_dead_if_created_before):
0.07 pathlib.py(265): def make_numbered_dir_with_cleanup(root, prefix, keep, lock_timeout):
0.07 pathlib.py(288): def resolve_from_str(input, root):
0.07 pathlib.py(299): def fnmatch_ex(pattern, path):
0.07 pathlib.py(334): def parts(s):
0.07 __init__.py(1): """ command line options, ini-file and conftest.py processing. """
0.07 __init__.py(2): import argparse
0.07 __init__.py(3): import copy
0.07 __init__.py(4): import inspect
0.07 __init__.py(5): import os
0.07 __init__.py(6): import shlex
0.07 __init__.py(7): import sys
0.07 __init__.py(8): import types
0.07 __init__.py(9): import warnings
0.07 __init__.py(10): from functools import lru_cache
0.07 __init__.py(11): from pathlib import Path
0.07 __init__.py(13): import attr
0.07 __init__.py(14): import py
0.07 __init__.py(15): from packaging.version import Version
0.07 __init__.py(16): from pluggy import HookimplMarker
0.07 __init__.py(17): from pluggy import HookspecMarker
0.07 __init__.py(18): from pluggy import PluginManager
0.07 __init__.py(20): import _pytest._code
0.07 __init__.py(21): import _pytest.assertion
0.07 __init__.py(22): import _pytest.deprecated
0.07 __init__.py(23): import _pytest.hookspec  # the extension point definitions
0.07 __init__.py(24): from .exceptions import PrintHelp
0.07 __init__.py(25): from .exceptions import UsageError
0.07 __init__.py(26): from .findpaths import determine_setup
0.08 __init__.py(27): from .findpaths import exists
0.08 __init__.py(28): from _pytest._code import ExceptionInfo
0.08 __init__.py(29): from _pytest._code import filter_traceback
0.08 __init__.py(30): from _pytest.compat import importlib_metadata
0.08 __init__.py(31): from _pytest.outcomes import fail
0.08 __init__.py(32): from _pytest.outcomes import Skipped
0.08 __init__.py(33): from _pytest.warning_types import PytestConfigWarning
0.08 __init__.py(35): hookimpl = HookimplMarker("pytest")
0.08 __init__.py(36): hookspec = HookspecMarker("pytest")
0.08 __init__.py(39): class ConftestImportFailure(Exception):
0.08 __init__.py(39): class ConftestImportFailure(Exception):
0.08 __init__.py(40):     def __init__(self, path, excinfo):
0.08 __init__.py(46): def main(args=None, plugins=None):
0.08 __init__.py(87): class cmdline:  # compatibility namespace
0.08 __init__.py(87): class cmdline:  # compatibility namespace
0.08 __init__.py(88):     main = staticmethod(main)
0.08 __init__.py(91): def filename_arg(path, optname):
0.08 __init__.py(102): def directory_arg(path, optname):
0.08 __init__.py(114): essential_plugins = (  # fmt: off
0.08 __init__.py(122): default_plugins = essential_plugins + (
0.08 __init__.py(149): builtin_plugins = set(default_plugins)
0.08 __init__.py(150): builtin_plugins.add("pytester")
0.08 __init__.py(153): def get_config(args=None, plugins=None):
0.08 __init__.py(172): def get_plugin_manager():
0.08 __init__.py(184): def _prepareconfig(args=None, plugins=None):
0.08 __init__.py(215): def _fail_on_non_top_pytest_plugins(conftestpath, confcutdir):
0.08 __init__.py(228): class PytestPluginManager(PluginManager):
0.08 __init__.py(228): class PytestPluginManager(PluginManager):
0.08 __init__.py(229):     """
0.08 __init__.py(238):     def __init__(self):
0.08 __init__.py(266):     def parse_hookimpl_opts(self, plugin, name):
0.08 __init__.py(295):     def parse_hookspec_opts(self, module_or_class, name):
0.08 __init__.py(312):     def register(self, plugin, name=None):
0.08 __init__.py(333):     def getplugin(self, name):
0.08 __init__.py(337):     def hasplugin(self, name):
0.08 __init__.py(341):     def pytest_configure(self, config):
0.08 __init__.py(359):     def _set_initial_conftests(self, namespace):
0.08 __init__.py(390):     def _try_load_conftest(self, anchor):
0.08 __init__.py(398):     @lru_cache(maxsize=128)
0.08 __init__.py(399):     def _getconftestmodules(self, path):
0.08 __init__.py(422):     def _rget_with_confmod(self, name, path):
0.08 __init__.py(431):     def _importconftest(self, conftestpath):
0.08 __init__.py(472):     def consider_preparse(self, args):
0.08 __init__.py(491):     def consider_pluginarg(self, arg):
0.08 __init__.py(516):     def consider_conftest(self, conftestmodule):
0.08 __init__.py(519):     def consider_env(self):
0.08 __init__.py(522):     def consider_module(self, mod):
0.08 __init__.py(525):     def _import_plugin_specs(self, spec):
0.08 __init__.py(530):     def import_plugin(self, modname, consider_entry_points=False):
0.08 __init__.py(578): def _get_plugin_specs_as_list(specs):
0.08 __init__.py(598): def _ensure_removed_sysmodule(modname):
0.08 __init__.py(605): class Notset:
0.08 __init__.py(605): class Notset:
0.08 __init__.py(606):     def __repr__(self):
0.08 __init__.py(610): notset = Notset()
0.08 __init__.py(613): def _iter_rewritable_modules(package_files):
0.08 __init__.py(625): class Config:
0.08 __init__.py(625): class Config:
0.08 __init__.py(626):     """
0.08 __init__.py(645):     @attr.s(frozen=True)
0.08 __init__.py(646):     class InvocationParams:
0.08 __init__.py(645):     @attr.s(frozen=True)
0.08 __init__.py(647):         """Holds parameters passed during ``pytest.main()``
0.08 __init__.py(657):         args = attr.ib()
0.08 __init__.py(658):         plugins = attr.ib()
0.08 __init__.py(659):         dir = attr.ib()
0.08 <attrs generated init _pytest.config.Config.InvocationParams>(1): def __init__(self, args, plugins, dir):
0.08 __init__.py(661):     def __init__(self, pluginmanager, *, invocation_params=None):
0.08 __init__.py(688):     @property
0.08 __init__.py(689):     def invocation_dir(self):
0.08 __init__.py(693):     def add_cleanup(self, func):
0.08 __init__.py(698):     def _do_configure(self):
0.08 __init__.py(705):     def _ensure_unconfigure(self):
0.08 __init__.py(714):     def get_terminal_writer(self):
0.08 __init__.py(717):     def pytest_cmdline_parse(self, pluginmanager, args):
0.08 __init__.py(741):     def notify_exception(self, excinfo, option=None):
0.08 __init__.py(755):     def cwd_relative_nodeid(self, nodeid):
0.08 __init__.py(762):     @classmethod
0.08 __init__.py(763):     def fromdictargs(cls, option_dict, args):
0.08 __init__.py(772):     def _processopt(self, opt):
0.08 __init__.py(780):     @hookimpl(trylast=True)
0.08 __init__.py(781):     def pytest_load_initial_conftests(self, early_config):
0.08 __init__.py(784):     def _initini(self, args):
0.08 __init__.py(801):     def _consider_importhook(self, args):
0.08 __init__.py(819):     def _mark_plugins_for_rewrite(self, hook):
0.08 __init__.py(841):     def _validate_args(self, args, via):
0.08 __init__.py(853):     def _preparse(self, args, addopts=True):
0.08 __init__.py(902):     def _checkversion(self):
0.08 __init__.py(918):     def parse(self, args, addopts=True):
0.08 __init__.py(944):     def addinivalue_line(self, name, line):
0.08 __init__.py(952):     def getini(self, name):
0.08 __init__.py(963):     def _getini(self, name):
0.08 __init__.py(994):     def _getconftest_pathlist(self, name, path):
0.08 __init__.py(1008):     def _get_override_ini_value(self, name):
0.08 __init__.py(1023):     def getoption(self, name, default=notset, skip=False):
0.08 __init__.py(1047):     def getvalue(self, name, path=None):
0.08 __init__.py(1051):     def getvalueorskip(self, name, path=None):
0.08 __init__.py(1056): def _assertion_supported():
0.08 __init__.py(1065): def _warn_about_missing_assertion(mode):
0.08 __init__.py(1083): def setns(obj, dic):
0.08 __init__.py(1105): def create_terminal_writer(config, *args, **kwargs):
0.08 __init__.py(1118): def _strtobool(val):
0.13 __init__.py(54):     from _pytest.main import ExitCode
0.13 __init__.py(56):     try:
0.13 __init__.py(57):         try:
0.13 __init__.py(58):             config = _prepareconfig(args, plugins)
0.13 __init__.py(185):     warning = None
0.13 __init__.py(186):     if args is None:
0.13 __init__.py(187):         args = sys.argv[1:]
0.13 __init__.py(194):     config = get_config(args, plugins)
0.13 __init__.py(155):     pluginmanager = PytestPluginManager()
0.13 __init__.py(239):         super().__init__("pytest")
0.13 __init__.py(240):         self._conftest_plugins = set()
0.13 __init__.py(243):         self._dirpath2confmods = {}
0.13 __init__.py(244):         self._conftestpath2mod = {}
0.13 __init__.py(245):         self._confcutdir = None
0.13 __init__.py(246):         self._noconftest = False
0.13 __init__.py(247):         self._duplicatepaths = set()
0.13 __init__.py(249):         self.add_hookspecs(_pytest.hookspec)
0.13 __init__.py(296):         opts = super().parse_hookspec_opts(module_or_class, name)
0.13 __init__.py(297):         if opts is None:
0.13 __init__.py(298):             method = getattr(module_or_class, name)
0.13 __init__.py(300):             if name.startswith("pytest_"):
0.13 __init__.py(310):         return opts
0.13 __init__.py(296):         opts = super().parse_hookspec_opts(module_or_class, name)
0.13 __init__.py(297):         if opts is None:
0.13 __init__.py(298):             method = getattr(module_or_class, name)
0.13 __init__.py(300):             if name.startswith("pytest_"):
0.13 __init__.py(310):         return opts
0.13 __init__.py(296):         opts = super().parse_hookspec_opts(module_or_class, name)
0.13 __init__.py(297):         if opts is None:
0.13 __init__.py(298):             method = getattr(module_or_class, name)
0.13 __init__.py(300):             if name.startswith("pytest_"):
0.13 __init__.py(310):         return opts
0.13 __init__.py(296):         opts = super().parse_hookspec_opts(module_or_class, name)
0.13 __init__.py(297):         if opts is None:
0.13 __init__.py(298):             method = getattr(module_or_class, name)
0.13 __init__.py(300):             if name.startswith("pytest_"):
0.13 __init__.py(310):         return opts
0.13 __init__.py(296):         opts = super().parse_hookspec_opts(module_or_class, name)
0.13 __init__.py(297):         if opts is None:
0.13 __init__.py(298):             method = getattr(module_or_class, name)
0.13 __init__.py(300):             if name.startswith("pytest_"):
0.13 __init__.py(310):         return opts
0.13 __init__.py(296):         opts = super().parse_hookspec_opts(module_or_class, name)
0.13 __init__.py(297):         if opts is None:
0.13 __init__.py(298):             method = getattr(module_or_class, name)
0.13 __init__.py(300):             if name.startswith("pytest_"):
0.13 __init__.py(310):         return opts
0.13 __init__.py(296):         opts = super().parse_hookspec_opts(module_or_class, name)
0.13 __init__.py(297):         if opts is None:
0.13 __init__.py(298):             method = getattr(module_or_class, name)
0.13 __init__.py(300):             if name.startswith("pytest_"):
0.13 __init__.py(310):         return opts
0.13 __init__.py(296):         opts = super().parse_hookspec_opts(module_or_class, name)
0.13 __init__.py(297):         if opts is None:
0.13 __init__.py(298):             method = getattr(module_or_class, name)
0.13 __init__.py(300):             if name.startswith("pytest_"):
0.13 __init__.py(310):         return opts
0.13 __init__.py(296):         opts = super().parse_hookspec_opts(module_or_class, name)
0.13 __init__.py(297):         if opts is None:
0.13 __init__.py(298):             method = getattr(module_or_class, name)
0.13 __init__.py(300):             if name.startswith("pytest_"):
0.13 __init__.py(310):         return opts
0.13 __init__.py(296):         opts = super().parse_hookspec_opts(module_or_class, name)
0.13 __init__.py(297):         if opts is None:
0.13 __init__.py(298):             method = getattr(module_or_class, name)
0.13 __init__.py(300):             if name.startswith("pytest_"):
0.13 __init__.py(310):         return opts
0.13 __init__.py(296):         opts = super().parse_hookspec_opts(module_or_class, name)
0.13 __init__.py(297):         if opts is None:
0.13 __init__.py(310):         return opts
0.13 __init__.py(296):         opts = super().parse_hookspec_opts(module_or_class, name)
0.13 __init__.py(297):         if opts is None:
0.13 __init__.py(310):         return opts
0.13 __init__.py(296):         opts = super().parse_hookspec_opts(module_or_class, name)
0.13 __init__.py(297):         if opts is None:
0.13 __init__.py(298):             method = getattr(module_or_class, name)
0.13 __init__.py(300):             if name.startswith("pytest_"):
0.13 __init__.py(303):                 known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.13 __init__.py(303):                 known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.13 __init__.py(305):                     "firstresult": hasattr(method, "firstresult")
0.13 __init__.py(306):                     or "firstresult" in known_marks,
0.13 __init__.py(307):                     "historic": hasattr(method, "historic")
0.13 __init__.py(308):                     or "historic" in known_marks,
0.13 __init__.py(304):                 opts = {
0.13 __init__.py(310):         return opts
0.13 __init__.py(296):         opts = super().parse_hookspec_opts(module_or_class, name)
0.13 __init__.py(297):         if opts is None:
0.13 __init__.py(298):             method = getattr(module_or_class, name)
0.13 __init__.py(300):             if name.startswith("pytest_"):
0.13 __init__.py(303):                 known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.13 __init__.py(303):                 known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.13 __init__.py(305):                     "firstresult": hasattr(method, "firstresult")
0.13 __init__.py(306):                     or "firstresult" in known_marks,
0.13 __init__.py(307):                     "historic": hasattr(method, "historic")
0.13 __init__.py(308):                     or "historic" in known_marks,
0.13 __init__.py(304):                 opts = {
0.13 __init__.py(310):         return opts
0.13 __init__.py(296):         opts = super().parse_hookspec_opts(module_or_class, name)
0.13 __init__.py(297):         if opts is None:
0.13 __init__.py(310):         return opts
0.13 __init__.py(296):         opts = super().parse_hookspec_opts(module_or_class, name)
0.13 __init__.py(297):         if opts is None:
0.13 __init__.py(310):         return opts
0.13 __init__.py(296):         opts = super().parse_hookspec_opts(module_or_class, name)
0.13 __init__.py(297):         if opts is None:
0.13 __init__.py(298):             method = getattr(module_or_class, name)
0.13 __init__.py(300):             if name.startswith("pytest_"):
0.13 __init__.py(303):                 known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.13 __init__.py(303):                 known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.13 __init__.py(305):                     "firstresult": hasattr(method, "firstresult")
0.13 __init__.py(306):                     or "firstresult" in known_marks,
0.13 __init__.py(307):                     "historic": hasattr(method, "historic")
0.13 __init__.py(308):                     or "historic" in known_marks,
0.13 __init__.py(304):                 opts = {
0.13 __init__.py(310):         return opts
0.13 __init__.py(296):         opts = super().parse_hookspec_opts(module_or_class, name)
0.13 __init__.py(297):         if opts is None:
0.13 __init__.py(310):         return opts
0.13 __init__.py(296):         opts = super().parse_hookspec_opts(module_or_class, name)
0.13 __init__.py(297):         if opts is None:
0.13 __init__.py(298):             method = getattr(module_or_class, name)
0.13 __init__.py(300):             if name.startswith("pytest_"):
0.13 __init__.py(303):                 known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.13 __init__.py(303):                 known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.13 __init__.py(305):                     "firstresult": hasattr(method, "firstresult")
0.13 __init__.py(306):                     or "firstresult" in known_marks,
0.13 __init__.py(307):                     "historic": hasattr(method, "historic")
0.13 __init__.py(308):                     or "historic" in known_marks,
0.13 __init__.py(304):                 opts = {
0.13 __init__.py(310):         return opts
0.13 __init__.py(296):         opts = super().parse_hookspec_opts(module_or_class, name)
0.13 __init__.py(297):         if opts is None:
0.13 __init__.py(310):         return opts
0.13 __init__.py(296):         opts = super().parse_hookspec_opts(module_or_class, name)
0.13 __init__.py(297):         if opts is None:
0.13 __init__.py(298):             method = getattr(module_or_class, name)
0.13 __init__.py(300):             if name.startswith("pytest_"):
0.13 __init__.py(303):                 known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.13 __init__.py(303):                 known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.13 __init__.py(305):                     "firstresult": hasattr(method, "firstresult")
0.13 __init__.py(306):                     or "firstresult" in known_marks,
0.13 __init__.py(307):                     "historic": hasattr(method, "historic")
0.13 __init__.py(308):                     or "historic" in known_marks,
0.13 __init__.py(304):                 opts = {
0.13 __init__.py(310):         return opts
0.13 __init__.py(296):         opts = super().parse_hookspec_opts(module_or_class, name)
0.13 __init__.py(297):         if opts is None:
0.13 __init__.py(298):             method = getattr(module_or_class, name)
0.13 __init__.py(300):             if name.startswith("pytest_"):
0.13 __init__.py(303):                 known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.13 __init__.py(303):                 known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.13 __init__.py(305):                     "firstresult": hasattr(method, "firstresult")
0.13 __init__.py(306):                     or "firstresult" in known_marks,
0.13 __init__.py(307):                     "historic": hasattr(method, "historic")
0.13 __init__.py(308):                     or "historic" in known_marks,
0.13 __init__.py(304):                 opts = {
0.13 __init__.py(310):         return opts
0.13 __init__.py(296):         opts = super().parse_hookspec_opts(module_or_class, name)
0.13 __init__.py(297):         if opts is None:
0.13 __init__.py(298):             method = getattr(module_or_class, name)
0.13 __init__.py(300):             if name.startswith("pytest_"):
0.13 __init__.py(303):                 known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.13 __init__.py(303):                 known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.13 __init__.py(305):                     "firstresult": hasattr(method, "firstresult")
0.13 __init__.py(306):                     or "firstresult" in known_marks,
0.13 __init__.py(307):                     "historic": hasattr(method, "historic")
0.13 __init__.py(308):                     or "historic" in known_marks,
0.13 __init__.py(304):                 opts = {
0.13 __init__.py(310):         return opts
0.13 __init__.py(296):         opts = super().parse_hookspec_opts(module_or_class, name)
0.13 __init__.py(297):         if opts is None:
0.13 __init__.py(298):             method = getattr(module_or_class, name)
0.13 __init__.py(300):             if name.startswith("pytest_"):
0.13 __init__.py(303):                 known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.13 __init__.py(303):                 known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.13 __init__.py(305):                     "firstresult": hasattr(method, "firstresult")
0.13 __init__.py(306):                     or "firstresult" in known_marks,
0.13 __init__.py(307):                     "historic": hasattr(method, "historic")
0.13 __init__.py(308):                     or "historic" in known_marks,
0.13 __init__.py(304):                 opts = {
0.13 __init__.py(310):         return opts
0.13 __init__.py(296):         opts = super().parse_hookspec_opts(module_or_class, name)
0.13 __init__.py(297):         if opts is None:
0.13 __init__.py(310):         return opts
0.13 __init__.py(296):         opts = super().parse_hookspec_opts(module_or_class, name)
0.13 __init__.py(297):         if opts is None:
0.13 __init__.py(298):             method = getattr(module_or_class, name)
0.13 __init__.py(300):             if name.startswith("pytest_"):
0.13 __init__.py(303):                 known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.13 __init__.py(303):                 known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.13 __init__.py(305):                     "firstresult": hasattr(method, "firstresult")
0.13 __init__.py(306):                     or "firstresult" in known_marks,
0.13 __init__.py(307):                     "historic": hasattr(method, "historic")
0.13 __init__.py(308):                     or "historic" in known_marks,
0.13 __init__.py(304):                 opts = {
0.13 __init__.py(310):         return opts
0.13 __init__.py(296):         opts = super().parse_hookspec_opts(module_or_class, name)
0.13 __init__.py(297):         if opts is None:
0.13 __init__.py(310):         return opts
0.13 __init__.py(296):         opts = super().parse_hookspec_opts(module_or_class, name)
0.13 __init__.py(297):         if opts is None:
0.13 __init__.py(298):             method = getattr(module_or_class, name)
0.13 __init__.py(300):             if name.startswith("pytest_"):
0.13 __init__.py(303):                 known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.13 __init__.py(303):                 known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.13 __init__.py(305):                     "firstresult": hasattr(method, "firstresult")
0.13 __init__.py(306):                     or "firstresult" in known_marks,
0.13 __init__.py(307):                     "historic": hasattr(method, "historic")
0.13 __init__.py(308):                     or "historic" in known_marks,
0.13 __init__.py(304):                 opts = {
0.13 __init__.py(310):         return opts
0.13 __init__.py(296):         opts = super().parse_hookspec_opts(module_or_class, name)
0.13 __init__.py(297):         if opts is None:
0.13 __init__.py(298):             method = getattr(module_or_class, name)
0.13 __init__.py(300):             if name.startswith("pytest_"):
0.13 __init__.py(303):                 known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.13 __init__.py(303):                 known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.13 __init__.py(305):                     "firstresult": hasattr(method, "firstresult")
0.13 __init__.py(306):                     or "firstresult" in known_marks,
0.13 __init__.py(307):                     "historic": hasattr(method, "historic")
0.13 __init__.py(308):                     or "historic" in known_marks,
0.13 __init__.py(304):                 opts = {
0.13 __init__.py(310):         return opts
0.13 __init__.py(296):         opts = super().parse_hookspec_opts(module_or_class, name)
0.13 __init__.py(297):         if opts is None:
0.13 __init__.py(298):             method = getattr(module_or_class, name)
0.13 __init__.py(300):             if name.startswith("pytest_"):
0.13 __init__.py(303):                 known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.13 __init__.py(303):                 known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.13 __init__.py(305):                     "firstresult": hasattr(method, "firstresult")
0.13 __init__.py(306):                     or "firstresult" in known_marks,
0.13 __init__.py(307):                     "historic": hasattr(method, "historic")
0.13 __init__.py(308):                     or "historic" in known_marks,
0.13 __init__.py(304):                 opts = {
0.13 __init__.py(310):         return opts
0.13 __init__.py(296):         opts = super().parse_hookspec_opts(module_or_class, name)
0.13 __init__.py(297):         if opts is None:
0.13 __init__.py(310):         return opts
0.13 __init__.py(296):         opts = super().parse_hookspec_opts(module_or_class, name)
0.13 __init__.py(297):         if opts is None:
0.13 __init__.py(298):             method = getattr(module_or_class, name)
0.13 __init__.py(300):             if name.startswith("pytest_"):
0.13 __init__.py(303):                 known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.13 __init__.py(303):                 known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.13 __init__.py(305):                     "firstresult": hasattr(method, "firstresult")
0.13 __init__.py(306):                     or "firstresult" in known_marks,
0.13 __init__.py(307):                     "historic": hasattr(method, "historic")
0.13 __init__.py(308):                     or "historic" in known_marks,
0.13 __init__.py(304):                 opts = {
0.13 __init__.py(310):         return opts
0.13 __init__.py(296):         opts = super().parse_hookspec_opts(module_or_class, name)
0.13 __init__.py(297):         if opts is None:
0.13 __init__.py(310):         return opts
0.13 __init__.py(296):         opts = super().parse_hookspec_opts(module_or_class, name)
0.13 __init__.py(297):         if opts is None:
0.13 __init__.py(298):             method = getattr(module_or_class, name)
0.13 __init__.py(300):             if name.startswith("pytest_"):
0.13 __init__.py(303):                 known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.13 __init__.py(303):                 known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.13 __init__.py(305):                     "firstresult": hasattr(method, "firstresult")
0.13 __init__.py(306):                     or "firstresult" in known_marks,
0.13 __init__.py(307):                     "historic": hasattr(method, "historic")
0.13 __init__.py(308):                     or "historic" in known_marks,
0.13 __init__.py(304):                 opts = {
0.13 __init__.py(310):         return opts
0.13 __init__.py(296):         opts = super().parse_hookspec_opts(module_or_class, name)
0.13 __init__.py(297):         if opts is None:
0.13 __init__.py(298):             method = getattr(module_or_class, name)
0.13 __init__.py(300):             if name.startswith("pytest_"):
0.13 __init__.py(303):                 known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.13 __init__.py(303):                 known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.13 __init__.py(305):                     "firstresult": hasattr(method, "firstresult")
0.13 __init__.py(306):                     or "firstresult" in known_marks,
0.13 __init__.py(307):                     "historic": hasattr(method, "historic")
0.13 __init__.py(308):                     or "historic" in known_marks,
0.13 __init__.py(304):                 opts = {
0.13 __init__.py(310):         return opts
0.13 __init__.py(296):         opts = super().parse_hookspec_opts(module_or_class, name)
0.13 __init__.py(297):         if opts is None:
0.13 __init__.py(298):             method = getattr(module_or_class, name)
0.13 __init__.py(300):             if name.startswith("pytest_"):
0.13 __init__.py(303):                 known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.13 __init__.py(303):                 known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.13 __init__.py(305):                     "firstresult": hasattr(method, "firstresult")
0.13 __init__.py(306):                     or "firstresult" in known_marks,
0.13 __init__.py(307):                     "historic": hasattr(method, "historic")
0.13 __init__.py(308):                     or "historic" in known_marks,
0.13 __init__.py(304):                 opts = {
0.13 __init__.py(310):         return opts
0.13 __init__.py(296):         opts = super().parse_hookspec_opts(module_or_class, name)
0.13 __init__.py(297):         if opts is None:
0.13 __init__.py(298):             method = getattr(module_or_class, name)
0.13 __init__.py(300):             if name.startswith("pytest_"):
0.13 __init__.py(303):                 known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.13 __init__.py(303):                 known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.13 __init__.py(305):                     "firstresult": hasattr(method, "firstresult")
0.13 __init__.py(306):                     or "firstresult" in known_marks,
0.13 __init__.py(307):                     "historic": hasattr(method, "historic")
0.13 __init__.py(308):                     or "historic" in known_marks,
0.13 __init__.py(304):                 opts = {
0.13 __init__.py(310):         return opts
0.13 __init__.py(296):         opts = super().parse_hookspec_opts(module_or_class, name)
0.13 __init__.py(297):         if opts is None:
0.13 __init__.py(298):             method = getattr(module_or_class, name)
0.13 __init__.py(300):             if name.startswith("pytest_"):
0.13 __init__.py(303):                 known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.13 __init__.py(303):                 known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.13 __init__.py(305):                     "firstresult": hasattr(method, "firstresult")
0.13 __init__.py(306):                     or "firstresult" in known_marks,
0.13 __init__.py(307):                     "historic": hasattr(method, "historic")
0.13 __init__.py(308):                     or "historic" in known_marks,
0.13 __init__.py(304):                 opts = {
0.13 __init__.py(310):         return opts
0.13 __init__.py(296):         opts = super().parse_hookspec_opts(module_or_class, name)
0.13 __init__.py(297):         if opts is None:
0.13 __init__.py(298):             method = getattr(module_or_class, name)
0.13 __init__.py(300):             if name.startswith("pytest_"):
0.13 __init__.py(303):                 known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.13 __init__.py(303):                 known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.13 __init__.py(305):                     "firstresult": hasattr(method, "firstresult")
0.13 __init__.py(306):                     or "firstresult" in known_marks,
0.13 __init__.py(307):                     "historic": hasattr(method, "historic")
0.13 __init__.py(308):                     or "historic" in known_marks,
0.13 __init__.py(304):                 opts = {
0.13 __init__.py(310):         return opts
0.13 __init__.py(296):         opts = super().parse_hookspec_opts(module_or_class, name)
0.13 __init__.py(297):         if opts is None:
0.13 __init__.py(310):         return opts
0.13 __init__.py(296):         opts = super().parse_hookspec_opts(module_or_class, name)
0.13 __init__.py(297):         if opts is None:
0.13 __init__.py(310):         return opts
0.13 __init__.py(296):         opts = super().parse_hookspec_opts(module_or_class, name)
0.13 __init__.py(297):         if opts is None:
0.13 __init__.py(310):         return opts
0.13 __init__.py(296):         opts = super().parse_hookspec_opts(module_or_class, name)
0.13 __init__.py(297):         if opts is None:
0.13 __init__.py(310):         return opts
0.13 __init__.py(296):         opts = super().parse_hookspec_opts(module_or_class, name)
0.13 __init__.py(297):         if opts is None:
0.13 __init__.py(310):         return opts
0.13 __init__.py(296):         opts = super().parse_hookspec_opts(module_or_class, name)
0.13 __init__.py(297):         if opts is None:
0.13 __init__.py(310):         return opts
0.13 __init__.py(296):         opts = super().parse_hookspec_opts(module_or_class, name)
0.13 __init__.py(297):         if opts is None:
0.13 __init__.py(298):             method = getattr(module_or_class, name)
0.13 __init__.py(300):             if name.startswith("pytest_"):
0.13 __init__.py(303):                 known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.13 __init__.py(303):                 known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.13 __init__.py(305):                     "firstresult": hasattr(method, "firstresult")
0.13 __init__.py(306):                     or "firstresult" in known_marks,
0.13 __init__.py(307):                     "historic": hasattr(method, "historic")
0.13 __init__.py(308):                     or "historic" in known_marks,
0.13 __init__.py(304):                 opts = {
0.13 __init__.py(310):         return opts
0.13 __init__.py(296):         opts = super().parse_hookspec_opts(module_or_class, name)
0.13 __init__.py(297):         if opts is None:
0.13 __init__.py(310):         return opts
0.13 __init__.py(296):         opts = super().parse_hookspec_opts(module_or_class, name)
0.13 __init__.py(297):         if opts is None:
0.13 __init__.py(298):             method = getattr(module_or_class, name)
0.13 __init__.py(300):             if name.startswith("pytest_"):
0.13 __init__.py(303):                 known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.13 __init__.py(303):                 known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.13 __init__.py(305):                     "firstresult": hasattr(method, "firstresult")
0.13 __init__.py(306):                     or "firstresult" in known_marks,
0.13 __init__.py(307):                     "historic": hasattr(method, "historic")
0.13 __init__.py(308):                     or "historic" in known_marks,
0.13 __init__.py(304):                 opts = {
0.13 __init__.py(310):         return opts
0.13 __init__.py(296):         opts = super().parse_hookspec_opts(module_or_class, name)
0.13 __init__.py(297):         if opts is None:
0.13 __init__.py(310):         return opts
0.13 __init__.py(296):         opts = super().parse_hookspec_opts(module_or_class, name)
0.13 __init__.py(297):         if opts is None:
0.13 __init__.py(310):         return opts
0.13 __init__.py(296):         opts = super().parse_hookspec_opts(module_or_class, name)
0.13 __init__.py(297):         if opts is None:
0.13 __init__.py(298):             method = getattr(module_or_class, name)
0.13 __init__.py(300):             if name.startswith("pytest_"):
0.13 __init__.py(303):                 known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.13 __init__.py(303):                 known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.13 __init__.py(305):                     "firstresult": hasattr(method, "firstresult")
0.13 __init__.py(306):                     or "firstresult" in known_marks,
0.13 __init__.py(307):                     "historic": hasattr(method, "historic")
0.13 __init__.py(308):                     or "historic" in known_marks,
0.13 __init__.py(304):                 opts = {
0.13 __init__.py(310):         return opts
0.13 __init__.py(296):         opts = super().parse_hookspec_opts(module_or_class, name)
0.13 __init__.py(297):         if opts is None:
0.13 __init__.py(298):             method = getattr(module_or_class, name)
0.13 __init__.py(300):             if name.startswith("pytest_"):
0.13 __init__.py(303):                 known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.13 __init__.py(303):                 known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.13 __init__.py(305):                     "firstresult": hasattr(method, "firstresult")
0.13 __init__.py(306):                     or "firstresult" in known_marks,
0.13 __init__.py(307):                     "historic": hasattr(method, "historic")
0.13 __init__.py(308):                     or "historic" in known_marks,
0.13 __init__.py(304):                 opts = {
0.13 __init__.py(310):         return opts
0.13 __init__.py(296):         opts = super().parse_hookspec_opts(module_or_class, name)
0.13 __init__.py(297):         if opts is None:
0.13 __init__.py(298):             method = getattr(module_or_class, name)
0.13 __init__.py(300):             if name.startswith("pytest_"):
0.13 __init__.py(303):                 known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.13 __init__.py(303):                 known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.13 __init__.py(305):                     "firstresult": hasattr(method, "firstresult")
0.13 __init__.py(306):                     or "firstresult" in known_marks,
0.13 __init__.py(307):                     "historic": hasattr(method, "historic")
0.13 __init__.py(308):                     or "historic" in known_marks,
0.13 __init__.py(304):                 opts = {
0.13 __init__.py(310):         return opts
0.13 __init__.py(296):         opts = super().parse_hookspec_opts(module_or_class, name)
0.13 __init__.py(297):         if opts is None:
0.13 __init__.py(298):             method = getattr(module_or_class, name)
0.13 __init__.py(300):             if name.startswith("pytest_"):
0.13 __init__.py(303):                 known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.13 __init__.py(303):                 known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.13 __init__.py(305):                     "firstresult": hasattr(method, "firstresult")
0.13 __init__.py(306):                     or "firstresult" in known_marks,
0.13 __init__.py(307):                     "historic": hasattr(method, "historic")
0.13 __init__.py(308):                     or "historic" in known_marks,
0.13 __init__.py(304):                 opts = {
0.13 __init__.py(310):         return opts
0.13 __init__.py(296):         opts = super().parse_hookspec_opts(module_or_class, name)
0.13 __init__.py(297):         if opts is None:
0.13 __init__.py(310):         return opts
0.14 __init__.py(296):         opts = super().parse_hookspec_opts(module_or_class, name)
0.14 __init__.py(297):         if opts is None:
0.14 __init__.py(310):         return opts
0.14 __init__.py(296):         opts = super().parse_hookspec_opts(module_or_class, name)
0.14 __init__.py(297):         if opts is None:
0.14 __init__.py(298):             method = getattr(module_or_class, name)
0.14 __init__.py(300):             if name.startswith("pytest_"):
0.14 __init__.py(303):                 known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.14 __init__.py(303):                 known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.14 __init__.py(305):                     "firstresult": hasattr(method, "firstresult")
0.14 __init__.py(306):                     or "firstresult" in known_marks,
0.14 __init__.py(307):                     "historic": hasattr(method, "historic")
0.14 __init__.py(308):                     or "historic" in known_marks,
0.14 __init__.py(304):                 opts = {
0.14 __init__.py(310):         return opts
0.14 __init__.py(296):         opts = super().parse_hookspec_opts(module_or_class, name)
0.14 __init__.py(297):         if opts is None:
0.14 __init__.py(298):             method = getattr(module_or_class, name)
0.14 __init__.py(300):             if name.startswith("pytest_"):
0.14 __init__.py(303):                 known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.14 __init__.py(303):                 known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.14 __init__.py(305):                     "firstresult": hasattr(method, "firstresult")
0.14 __init__.py(306):                     or "firstresult" in known_marks,
0.14 __init__.py(307):                     "historic": hasattr(method, "historic")
0.14 __init__.py(308):                     or "historic" in known_marks,
0.14 __init__.py(304):                 opts = {
0.14 __init__.py(310):         return opts
0.14 __init__.py(296):         opts = super().parse_hookspec_opts(module_or_class, name)
0.14 __init__.py(297):         if opts is None:
0.14 __init__.py(310):         return opts
0.14 __init__.py(296):         opts = super().parse_hookspec_opts(module_or_class, name)
0.14 __init__.py(297):         if opts is None:
0.14 __init__.py(298):             method = getattr(module_or_class, name)
0.14 __init__.py(300):             if name.startswith("pytest_"):
0.14 __init__.py(303):                 known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.14 __init__.py(303):                 known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.14 __init__.py(305):                     "firstresult": hasattr(method, "firstresult")
0.14 __init__.py(306):                     or "firstresult" in known_marks,
0.14 __init__.py(307):                     "historic": hasattr(method, "historic")
0.14 __init__.py(308):                     or "historic" in known_marks,
0.14 __init__.py(304):                 opts = {
0.14 __init__.py(310):         return opts
0.14 __init__.py(296):         opts = super().parse_hookspec_opts(module_or_class, name)
0.14 __init__.py(297):         if opts is None:
0.14 __init__.py(298):             method = getattr(module_or_class, name)
0.14 __init__.py(300):             if name.startswith("pytest_"):
0.14 __init__.py(303):                 known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.14 __init__.py(303):                 known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.14 __init__.py(305):                     "firstresult": hasattr(method, "firstresult")
0.14 __init__.py(306):                     or "firstresult" in known_marks,
0.14 __init__.py(307):                     "historic": hasattr(method, "historic")
0.14 __init__.py(308):                     or "historic" in known_marks,
0.14 __init__.py(304):                 opts = {
0.14 __init__.py(310):         return opts
0.14 __init__.py(296):         opts = super().parse_hookspec_opts(module_or_class, name)
0.14 __init__.py(297):         if opts is None:
0.14 __init__.py(298):             method = getattr(module_or_class, name)
0.14 __init__.py(300):             if name.startswith("pytest_"):
0.14 __init__.py(303):                 known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.14 __init__.py(303):                 known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.14 __init__.py(305):                     "firstresult": hasattr(method, "firstresult")
0.14 __init__.py(306):                     or "firstresult" in known_marks,
0.14 __init__.py(307):                     "historic": hasattr(method, "historic")
0.14 __init__.py(308):                     or "historic" in known_marks,
0.14 __init__.py(304):                 opts = {
0.14 __init__.py(310):         return opts
0.14 __init__.py(296):         opts = super().parse_hookspec_opts(module_or_class, name)
0.14 __init__.py(297):         if opts is None:
0.14 __init__.py(298):             method = getattr(module_or_class, name)
0.14 __init__.py(300):             if name.startswith("pytest_"):
0.14 __init__.py(303):                 known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.14 __init__.py(303):                 known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.14 __init__.py(305):                     "firstresult": hasattr(method, "firstresult")
0.14 __init__.py(306):                     or "firstresult" in known_marks,
0.14 __init__.py(307):                     "historic": hasattr(method, "historic")
0.14 __init__.py(308):                     or "historic" in known_marks,
0.14 __init__.py(304):                 opts = {
0.14 __init__.py(310):         return opts
0.14 __init__.py(296):         opts = super().parse_hookspec_opts(module_or_class, name)
0.14 __init__.py(297):         if opts is None:
0.14 __init__.py(310):         return opts
0.14 __init__.py(250):         self.register(self)
0.14 __init__.py(313):         if name in _pytest.deprecated.DEPRECATED_EXTERNAL_PLUGINS:
0.14 __init__.py(323):         ret = super().register(plugin, name)
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(273):         if name == "pytest_plugins":
0.14 __init__.py(276):         method = getattr(plugin, name)
0.14 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.14 __init__.py(280):         if not inspect.isroutine(method):
0.14 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.14 __init__.py(285):             opts = {}
0.14 __init__.py(286):         if opts is not None:
0.14 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.14 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(293):         return opts
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(324):         if ret:
0.14 __init__.py(325):             self.hook.pytest_plugin_registered.call_historic(
0.14 __init__.py(326):                 kwargs=dict(plugin=plugin, manager=self)
0.14 __init__.py(325):             self.hook.pytest_plugin_registered.call_historic(
0.14 __init__.py(329):             if isinstance(plugin, types.ModuleType):
0.14 __init__.py(331):         return ret
0.14 __init__.py(251):         if os.environ.get("PYTEST_DEBUG"):
0.14 __init__.py(262):         self.rewrite_hook = _pytest.assertion.DummyRewriteHook()
0.14 __init__.py(264):         self._configured = False
0.14 __init__.py(156):     config = Config(
0.14 __init__.py(157):         pluginmanager,
0.14 __init__.py(158):         invocation_params=Config.InvocationParams(
0.14 __init__.py(159):             args=args, plugins=plugins, dir=Path().resolve()
0.14 __init__.py(158):         invocation_params=Config.InvocationParams(
0.14 <attrs generated init _pytest.config.Config.InvocationParams>(2):     _setattr = _cached_setattr_get(self)
0.14 <attrs generated init _pytest.config.Config.InvocationParams>(3):     _inst_dict = self.__dict__
0.14 <attrs generated init _pytest.config.Config.InvocationParams>(4):     _inst_dict['args'] = args
0.14 <attrs generated init _pytest.config.Config.InvocationParams>(5):     _inst_dict['plugins'] = plugins
0.14 <attrs generated init _pytest.config.Config.InvocationParams>(6):     _inst_dict['dir'] = dir
0.14 __init__.py(156):     config = Config(
0.14 __init__.py(662):         from .argparsing import Parser, FILE_OR_DIR
0.14 __init__.py(664):         if invocation_params is None:
0.14 __init__.py(669):         self.option = argparse.Namespace()
0.14 __init__.py(670):         self.invocation_params = invocation_params
0.14 __init__.py(672):         _a = FILE_OR_DIR
0.14 __init__.py(673):         self._parser = Parser(
0.14 __init__.py(674):             usage="%(prog)s [options] [{}] [{}] [...]".format(_a, _a),
0.14 __init__.py(675):             processopt=self._processopt,
0.14 __init__.py(673):         self._parser = Parser(
0.14 __init__.py(677):         self.pluginmanager = pluginmanager
0.14 __init__.py(678):         self.trace = self.pluginmanager.trace.root.get("config")
0.14 __init__.py(679):         self.hook = self.pluginmanager.hook
0.14 __init__.py(680):         self._inicache = {}
0.14 __init__.py(681):         self._override_ini = ()
0.14 __init__.py(682):         self._opt2dest = {}
0.14 __init__.py(683):         self._cleanup = []
0.14 __init__.py(684):         self.pluginmanager.register(self, "pytestconfig")
0.14 __init__.py(313):         if name in _pytest.deprecated.DEPRECATED_EXTERNAL_PLUGINS:
0.14 __init__.py(323):         ret = super().register(plugin, name)
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(273):         if name == "pytest_plugins":
0.14 __init__.py(276):         method = getattr(plugin, name)
0.14 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.14 __init__.py(280):         if not inspect.isroutine(method):
0.14 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.14 __init__.py(285):             opts = {}
0.14 __init__.py(286):         if opts is not None:
0.14 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.14 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(293):         return opts
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(273):         if name == "pytest_plugins":
0.14 __init__.py(276):         method = getattr(plugin, name)
0.14 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.14 __init__.py(280):         if not inspect.isroutine(method):
0.14 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.14 __init__.py(286):         if opts is not None:
0.14 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.14 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(293):         return opts
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(324):         if ret:
0.14 __init__.py(325):             self.hook.pytest_plugin_registered.call_historic(
0.14 __init__.py(326):                 kwargs=dict(plugin=plugin, manager=self)
0.14 __init__.py(325):             self.hook.pytest_plugin_registered.call_historic(
0.14 __init__.py(329):             if isinstance(plugin, types.ModuleType):
0.14 __init__.py(331):         return ret
0.14 __init__.py(685):         self._configured = False
0.14 __init__.py(686):         self.hook.pytest_addoption.call_historic(kwargs=dict(parser=self._parser))
0.14 __init__.py(163):     if args is not None:
0.14 __init__.py(165):         pluginmanager.consider_preparse(args)
0.14 __init__.py(473):         i = 0
0.14 __init__.py(474):         n = len(args)
0.14 __init__.py(475):         while i < n:
0.14 __init__.py(476):             opt = args[i]
0.14 __init__.py(477):             i += 1
0.14 __init__.py(478):             if isinstance(opt, str):
0.14 __init__.py(479):                 if opt == "-p":
0.14 __init__.py(485):                 elif opt.startswith("-p"):
0.14 __init__.py(475):         while i < n:
0.14 __init__.py(476):             opt = args[i]
0.14 __init__.py(477):             i += 1
0.14 __init__.py(478):             if isinstance(opt, str):
0.14 __init__.py(479):                 if opt == "-p":
0.14 __init__.py(485):                 elif opt.startswith("-p"):
0.14 __init__.py(475):         while i < n:
0.14 __init__.py(167):     for spec in default_plugins:
0.14 __init__.py(168):         pluginmanager.import_plugin(spec)
0.14 __init__.py(539):         assert isinstance(modname, str), (
0.14 __init__.py(542):         modname = str(modname)
0.14 __init__.py(543):         if self.is_blocked(modname) or self.get_plugin(modname) is not None:
0.14 __init__.py(546):         importspec = "_pytest." + modname if modname in builtin_plugins else modname
0.14 __init__.py(547):         self.rewrite_hook.mark_rewrite(importspec)
0.14 __init__.py(549):         if consider_entry_points:
0.14 __init__.py(554):         try:
0.14 __init__.py(555):             __import__(importspec)
0.14 __init__.py(574):             mod = sys.modules[importspec]
0.14 __init__.py(575):             self.register(mod, modname)
0.14 __init__.py(313):         if name in _pytest.deprecated.DEPRECATED_EXTERNAL_PLUGINS:
0.14 __init__.py(323):         ret = super().register(plugin, name)
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(273):         if name == "pytest_plugins":
0.14 __init__.py(276):         method = getattr(plugin, name)
0.14 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.14 __init__.py(280):         if not inspect.isroutine(method):
0.14 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.14 __init__.py(285):             opts = {}
0.14 __init__.py(286):         if opts is not None:
0.14 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.14 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(293):         return opts
0.14 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.14 __init__.py(774):             self._opt2dest[name] = opt.dest
0.14 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.14 __init__.py(776):         if hasattr(opt, "default") and opt.dest:
0.14 __init__.py(777):             if not hasattr(self.option, opt.dest):
0.14 __init__.py(778):                 setattr(self.option, opt.dest, opt.default)
0.14 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.14 __init__.py(774):             self._opt2dest[name] = opt.dest
0.14 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.14 __init__.py(776):         if hasattr(opt, "default") and opt.dest:
0.14 __init__.py(777):             if not hasattr(self.option, opt.dest):
0.14 __init__.py(778):                 setattr(self.option, opt.dest, opt.default)
0.14 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.14 __init__.py(774):             self._opt2dest[name] = opt.dest
0.14 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.14 __init__.py(776):         if hasattr(opt, "default") and opt.dest:
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(273):         if name == "pytest_plugins":
0.14 __init__.py(276):         method = getattr(plugin, name)
0.14 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.14 __init__.py(280):         if not inspect.isroutine(method):
0.14 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.14 __init__.py(285):             opts = {}
0.14 __init__.py(286):         if opts is not None:
0.14 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.14 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(293):         return opts
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(273):         if name == "pytest_plugins":
0.14 __init__.py(276):         method = getattr(plugin, name)
0.14 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.14 __init__.py(280):         if not inspect.isroutine(method):
0.14 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.14 __init__.py(285):             opts = {}
0.14 __init__.py(286):         if opts is not None:
0.14 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.14 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(293):         return opts
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(273):         if name == "pytest_plugins":
0.14 __init__.py(276):         method = getattr(plugin, name)
0.14 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.14 __init__.py(280):         if not inspect.isroutine(method):
0.14 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.14 __init__.py(285):             opts = {}
0.14 __init__.py(286):         if opts is not None:
0.14 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.14 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(293):         return opts
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(273):         if name == "pytest_plugins":
0.14 __init__.py(276):         method = getattr(plugin, name)
0.14 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.14 __init__.py(280):         if not inspect.isroutine(method):
0.14 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.14 __init__.py(285):             opts = {}
0.14 __init__.py(286):         if opts is not None:
0.14 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.14 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(293):         return opts
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(324):         if ret:
0.14 __init__.py(325):             self.hook.pytest_plugin_registered.call_historic(
0.14 __init__.py(326):                 kwargs=dict(plugin=plugin, manager=self)
0.14 __init__.py(325):             self.hook.pytest_plugin_registered.call_historic(
0.14 __init__.py(329):             if isinstance(plugin, types.ModuleType):
0.14 __init__.py(330):                 self.consider_module(plugin)
0.14 __init__.py(523):         self._import_plugin_specs(getattr(mod, "pytest_plugins", []))
0.14 __init__.py(526):         plugins = _get_plugin_specs_as_list(spec)
0.14 __init__.py(586):     if specs is not None and not isinstance(specs, types.ModuleType):
0.14 __init__.py(587):         if isinstance(specs, str):
0.14 __init__.py(589):         if not isinstance(specs, (list, tuple)):
0.14 __init__.py(594):         return list(specs)
0.14 __init__.py(527):         for import_spec in plugins:
0.14 __init__.py(331):         return ret
0.14 __init__.py(167):     for spec in default_plugins:
0.14 __init__.py(168):         pluginmanager.import_plugin(spec)
0.14 __init__.py(539):         assert isinstance(modname, str), (
0.14 __init__.py(542):         modname = str(modname)
0.14 __init__.py(543):         if self.is_blocked(modname) or self.get_plugin(modname) is not None:
0.14 __init__.py(546):         importspec = "_pytest." + modname if modname in builtin_plugins else modname
0.14 __init__.py(547):         self.rewrite_hook.mark_rewrite(importspec)
0.14 __init__.py(549):         if consider_entry_points:
0.14 __init__.py(554):         try:
0.14 __init__.py(555):             __import__(importspec)
0.14 __init__.py(574):             mod = sys.modules[importspec]
0.14 __init__.py(575):             self.register(mod, modname)
0.14 __init__.py(313):         if name in _pytest.deprecated.DEPRECATED_EXTERNAL_PLUGINS:
0.14 __init__.py(323):         ret = super().register(plugin, name)
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(273):         if name == "pytest_plugins":
0.14 __init__.py(276):         method = getattr(plugin, name)
0.14 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.14 __init__.py(280):         if not inspect.isroutine(method):
0.14 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.14 __init__.py(285):             opts = {}
0.14 __init__.py(286):         if opts is not None:
0.14 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.14 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(293):         return opts
0.14 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.14 __init__.py(774):             self._opt2dest[name] = opt.dest
0.14 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.14 __init__.py(774):             self._opt2dest[name] = opt.dest
0.14 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.14 __init__.py(776):         if hasattr(opt, "default") and opt.dest:
0.14 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.14 __init__.py(774):             self._opt2dest[name] = opt.dest
0.14 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.14 __init__.py(776):         if hasattr(opt, "default") and opt.dest:
0.14 __init__.py(777):             if not hasattr(self.option, opt.dest):
0.14 __init__.py(778):                 setattr(self.option, opt.dest, opt.default)
0.14 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.14 __init__.py(774):             self._opt2dest[name] = opt.dest
0.14 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.14 __init__.py(774):             self._opt2dest[name] = opt.dest
0.14 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.14 __init__.py(776):         if hasattr(opt, "default") and opt.dest:
0.14 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.14 __init__.py(774):             self._opt2dest[name] = opt.dest
0.14 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.14 __init__.py(776):         if hasattr(opt, "default") and opt.dest:
0.14 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.14 __init__.py(774):             self._opt2dest[name] = opt.dest
0.14 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.14 __init__.py(776):         if hasattr(opt, "default") and opt.dest:
0.14 __init__.py(777):             if not hasattr(self.option, opt.dest):
0.14 __init__.py(778):                 setattr(self.option, opt.dest, opt.default)
0.14 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.14 __init__.py(774):             self._opt2dest[name] = opt.dest
0.14 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.14 __init__.py(776):         if hasattr(opt, "default") and opt.dest:
0.14 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.14 __init__.py(774):             self._opt2dest[name] = opt.dest
0.14 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.14 __init__.py(774):             self._opt2dest[name] = opt.dest
0.14 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.14 __init__.py(776):         if hasattr(opt, "default") and opt.dest:
0.14 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.14 __init__.py(774):             self._opt2dest[name] = opt.dest
0.14 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.14 __init__.py(776):         if hasattr(opt, "default") and opt.dest:
0.14 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.14 __init__.py(774):             self._opt2dest[name] = opt.dest
0.14 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.14 __init__.py(776):         if hasattr(opt, "default") and opt.dest:
0.14 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.14 __init__.py(774):             self._opt2dest[name] = opt.dest
0.14 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.14 __init__.py(776):         if hasattr(opt, "default") and opt.dest:
0.14 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.14 __init__.py(774):             self._opt2dest[name] = opt.dest
0.14 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.14 __init__.py(776):         if hasattr(opt, "default") and opt.dest:
0.14 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.14 __init__.py(774):             self._opt2dest[name] = opt.dest
0.14 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.14 __init__.py(776):         if hasattr(opt, "default") and opt.dest:
0.14 __init__.py(777):             if not hasattr(self.option, opt.dest):
0.14 __init__.py(778):                 setattr(self.option, opt.dest, opt.default)
0.14 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.14 __init__.py(774):             self._opt2dest[name] = opt.dest
0.14 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.14 __init__.py(776):         if hasattr(opt, "default") and opt.dest:
0.14 __init__.py(777):             if not hasattr(self.option, opt.dest):
0.14 __init__.py(778):                 setattr(self.option, opt.dest, opt.default)
0.14 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.14 __init__.py(774):             self._opt2dest[name] = opt.dest
0.14 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.14 __init__.py(774):             self._opt2dest[name] = opt.dest
0.14 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.14 __init__.py(776):         if hasattr(opt, "default") and opt.dest:
0.14 __init__.py(777):             if not hasattr(self.option, opt.dest):
0.14 __init__.py(778):                 setattr(self.option, opt.dest, opt.default)
0.14 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.14 __init__.py(774):             self._opt2dest[name] = opt.dest
0.14 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.14 __init__.py(776):         if hasattr(opt, "default") and opt.dest:
0.14 __init__.py(777):             if not hasattr(self.option, opt.dest):
0.14 __init__.py(778):                 setattr(self.option, opt.dest, opt.default)
0.14 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.14 __init__.py(774):             self._opt2dest[name] = opt.dest
0.14 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.14 __init__.py(776):         if hasattr(opt, "default") and opt.dest:
0.14 __init__.py(777):             if not hasattr(self.option, opt.dest):
0.14 __init__.py(778):                 setattr(self.option, opt.dest, opt.default)
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(273):         if name == "pytest_plugins":
0.14 __init__.py(276):         method = getattr(plugin, name)
0.14 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.14 __init__.py(280):         if not inspect.isroutine(method):
0.14 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.14 __init__.py(285):             opts = {}
0.14 __init__.py(286):         if opts is not None:
0.14 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.14 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(293):         return opts
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(273):         if name == "pytest_plugins":
0.14 __init__.py(276):         method = getattr(plugin, name)
0.14 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.14 __init__.py(280):         if not inspect.isroutine(method):
0.14 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.14 __init__.py(285):             opts = {}
0.14 __init__.py(286):         if opts is not None:
0.14 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.14 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(293):         return opts
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(273):         if name == "pytest_plugins":
0.14 __init__.py(276):         method = getattr(plugin, name)
0.14 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.14 __init__.py(280):         if not inspect.isroutine(method):
0.14 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.14 __init__.py(285):             opts = {}
0.14 __init__.py(286):         if opts is not None:
0.14 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.14 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(293):         return opts
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(273):         if name == "pytest_plugins":
0.14 __init__.py(276):         method = getattr(plugin, name)
0.14 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.14 __init__.py(280):         if not inspect.isroutine(method):
0.14 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.14 __init__.py(285):             opts = {}
0.14 __init__.py(286):         if opts is not None:
0.14 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.14 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(293):         return opts
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(273):         if name == "pytest_plugins":
0.14 __init__.py(276):         method = getattr(plugin, name)
0.14 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.14 __init__.py(280):         if not inspect.isroutine(method):
0.14 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.14 __init__.py(285):             opts = {}
0.14 __init__.py(286):         if opts is not None:
0.14 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.14 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(293):         return opts
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(324):         if ret:
0.14 __init__.py(325):             self.hook.pytest_plugin_registered.call_historic(
0.14 __init__.py(326):                 kwargs=dict(plugin=plugin, manager=self)
0.14 __init__.py(325):             self.hook.pytest_plugin_registered.call_historic(
0.14 __init__.py(329):             if isinstance(plugin, types.ModuleType):
0.14 __init__.py(330):                 self.consider_module(plugin)
0.14 __init__.py(523):         self._import_plugin_specs(getattr(mod, "pytest_plugins", []))
0.14 __init__.py(526):         plugins = _get_plugin_specs_as_list(spec)
0.14 __init__.py(586):     if specs is not None and not isinstance(specs, types.ModuleType):
0.14 __init__.py(587):         if isinstance(specs, str):
0.14 __init__.py(589):         if not isinstance(specs, (list, tuple)):
0.14 __init__.py(594):         return list(specs)
0.14 __init__.py(527):         for import_spec in plugins:
0.14 __init__.py(331):         return ret
0.14 __init__.py(167):     for spec in default_plugins:
0.14 __init__.py(168):         pluginmanager.import_plugin(spec)
0.14 __init__.py(539):         assert isinstance(modname, str), (
0.14 __init__.py(542):         modname = str(modname)
0.14 __init__.py(543):         if self.is_blocked(modname) or self.get_plugin(modname) is not None:
0.14 __init__.py(546):         importspec = "_pytest." + modname if modname in builtin_plugins else modname
0.14 __init__.py(547):         self.rewrite_hook.mark_rewrite(importspec)
0.14 __init__.py(549):         if consider_entry_points:
0.14 __init__.py(554):         try:
0.14 __init__.py(555):             __import__(importspec)
0.14 __init__.py(574):             mod = sys.modules[importspec]
0.14 __init__.py(575):             self.register(mod, modname)
0.14 __init__.py(313):         if name in _pytest.deprecated.DEPRECATED_EXTERNAL_PLUGINS:
0.14 __init__.py(323):         ret = super().register(plugin, name)
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(273):         if name == "pytest_plugins":
0.14 __init__.py(276):         method = getattr(plugin, name)
0.14 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.14 __init__.py(280):         if not inspect.isroutine(method):
0.14 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.14 __init__.py(285):             opts = {}
0.14 __init__.py(286):         if opts is not None:
0.14 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.14 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(293):         return opts
0.14 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.14 __init__.py(774):             self._opt2dest[name] = opt.dest
0.14 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.14 __init__.py(776):         if hasattr(opt, "default") and opt.dest:
0.14 __init__.py(777):             if not hasattr(self.option, opt.dest):
0.14 __init__.py(778):                 setattr(self.option, opt.dest, opt.default)
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(273):         if name == "pytest_plugins":
0.14 __init__.py(276):         method = getattr(plugin, name)
0.14 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.14 __init__.py(280):         if not inspect.isroutine(method):
0.14 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.14 __init__.py(285):             opts = {}
0.14 __init__.py(286):         if opts is not None:
0.14 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.14 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(293):         return opts
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(273):         if name == "pytest_plugins":
0.14 __init__.py(276):         method = getattr(plugin, name)
0.14 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.14 __init__.py(280):         if not inspect.isroutine(method):
0.14 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.14 __init__.py(285):             opts = {}
0.14 __init__.py(286):         if opts is not None:
0.14 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.14 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(293):         return opts
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(273):         if name == "pytest_plugins":
0.14 __init__.py(276):         method = getattr(plugin, name)
0.14 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.14 __init__.py(280):         if not inspect.isroutine(method):
0.14 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.14 __init__.py(285):             opts = {}
0.14 __init__.py(286):         if opts is not None:
0.14 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.14 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(293):         return opts
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(273):         if name == "pytest_plugins":
0.14 __init__.py(276):         method = getattr(plugin, name)
0.14 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.14 __init__.py(280):         if not inspect.isroutine(method):
0.14 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.14 __init__.py(285):             opts = {}
0.14 __init__.py(286):         if opts is not None:
0.14 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.14 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(293):         return opts
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(273):         if name == "pytest_plugins":
0.14 __init__.py(276):         method = getattr(plugin, name)
0.14 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.14 __init__.py(280):         if not inspect.isroutine(method):
0.14 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.14 __init__.py(285):             opts = {}
0.14 __init__.py(286):         if opts is not None:
0.14 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.14 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(293):         return opts
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(273):         if name == "pytest_plugins":
0.14 __init__.py(276):         method = getattr(plugin, name)
0.14 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.14 __init__.py(280):         if not inspect.isroutine(method):
0.14 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.14 __init__.py(285):             opts = {}
0.14 __init__.py(286):         if opts is not None:
0.14 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.14 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(293):         return opts
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(273):         if name == "pytest_plugins":
0.14 __init__.py(276):         method = getattr(plugin, name)
0.14 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.14 __init__.py(280):         if not inspect.isroutine(method):
0.14 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.14 __init__.py(285):             opts = {}
0.14 __init__.py(286):         if opts is not None:
0.14 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.14 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(293):         return opts
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(273):         if name == "pytest_plugins":
0.14 __init__.py(276):         method = getattr(plugin, name)
0.14 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.14 __init__.py(280):         if not inspect.isroutine(method):
0.14 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.14 __init__.py(285):             opts = {}
0.14 __init__.py(286):         if opts is not None:
0.14 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.14 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(293):         return opts
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(273):         if name == "pytest_plugins":
0.14 __init__.py(276):         method = getattr(plugin, name)
0.14 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.14 __init__.py(280):         if not inspect.isroutine(method):
0.14 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.14 __init__.py(285):             opts = {}
0.14 __init__.py(286):         if opts is not None:
0.14 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.14 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(293):         return opts
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(273):         if name == "pytest_plugins":
0.14 __init__.py(276):         method = getattr(plugin, name)
0.14 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.14 __init__.py(280):         if not inspect.isroutine(method):
0.14 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.14 __init__.py(285):             opts = {}
0.14 __init__.py(286):         if opts is not None:
0.14 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.14 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(293):         return opts
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(324):         if ret:
0.14 __init__.py(325):             self.hook.pytest_plugin_registered.call_historic(
0.14 __init__.py(326):                 kwargs=dict(plugin=plugin, manager=self)
0.14 __init__.py(325):             self.hook.pytest_plugin_registered.call_historic(
0.14 __init__.py(329):             if isinstance(plugin, types.ModuleType):
0.14 __init__.py(330):                 self.consider_module(plugin)
0.14 __init__.py(523):         self._import_plugin_specs(getattr(mod, "pytest_plugins", []))
0.14 __init__.py(526):         plugins = _get_plugin_specs_as_list(spec)
0.14 __init__.py(586):     if specs is not None and not isinstance(specs, types.ModuleType):
0.14 __init__.py(587):         if isinstance(specs, str):
0.14 __init__.py(589):         if not isinstance(specs, (list, tuple)):
0.14 __init__.py(594):         return list(specs)
0.14 __init__.py(527):         for import_spec in plugins:
0.14 __init__.py(331):         return ret
0.14 __init__.py(167):     for spec in default_plugins:
0.14 __init__.py(168):         pluginmanager.import_plugin(spec)
0.14 __init__.py(539):         assert isinstance(modname, str), (
0.14 __init__.py(542):         modname = str(modname)
0.14 __init__.py(543):         if self.is_blocked(modname) or self.get_plugin(modname) is not None:
0.14 __init__.py(546):         importspec = "_pytest." + modname if modname in builtin_plugins else modname
0.14 __init__.py(547):         self.rewrite_hook.mark_rewrite(importspec)
0.14 __init__.py(549):         if consider_entry_points:
0.14 __init__.py(554):         try:
0.14 __init__.py(555):             __import__(importspec)
0.14 __init__.py(574):             mod = sys.modules[importspec]
0.14 __init__.py(575):             self.register(mod, modname)
0.14 __init__.py(313):         if name in _pytest.deprecated.DEPRECATED_EXTERNAL_PLUGINS:
0.14 __init__.py(323):         ret = super().register(plugin, name)
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(273):         if name == "pytest_plugins":
0.14 __init__.py(276):         method = getattr(plugin, name)
0.14 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.14 __init__.py(280):         if not inspect.isroutine(method):
0.14 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.14 __init__.py(285):             opts = {}
0.14 __init__.py(286):         if opts is not None:
0.14 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.14 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(293):         return opts
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(273):         if name == "pytest_plugins":
0.14 __init__.py(276):         method = getattr(plugin, name)
0.14 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.14 __init__.py(280):         if not inspect.isroutine(method):
0.14 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.14 __init__.py(285):             opts = {}
0.14 __init__.py(286):         if opts is not None:
0.14 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.14 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(293):         return opts
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(273):         if name == "pytest_plugins":
0.14 __init__.py(276):         method = getattr(plugin, name)
0.14 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.14 __init__.py(280):         if not inspect.isroutine(method):
0.14 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.14 __init__.py(285):             opts = {}
0.14 __init__.py(286):         if opts is not None:
0.14 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.14 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(293):         return opts
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(324):         if ret:
0.14 __init__.py(325):             self.hook.pytest_plugin_registered.call_historic(
0.14 __init__.py(326):                 kwargs=dict(plugin=plugin, manager=self)
0.14 __init__.py(325):             self.hook.pytest_plugin_registered.call_historic(
0.14 __init__.py(329):             if isinstance(plugin, types.ModuleType):
0.14 __init__.py(330):                 self.consider_module(plugin)
0.14 __init__.py(523):         self._import_plugin_specs(getattr(mod, "pytest_plugins", []))
0.14 __init__.py(526):         plugins = _get_plugin_specs_as_list(spec)
0.14 __init__.py(586):     if specs is not None and not isinstance(specs, types.ModuleType):
0.14 __init__.py(587):         if isinstance(specs, str):
0.14 __init__.py(589):         if not isinstance(specs, (list, tuple)):
0.14 __init__.py(594):         return list(specs)
0.14 __init__.py(527):         for import_spec in plugins:
0.14 __init__.py(331):         return ret
0.14 __init__.py(167):     for spec in default_plugins:
0.14 __init__.py(168):         pluginmanager.import_plugin(spec)
0.14 __init__.py(539):         assert isinstance(modname, str), (
0.14 __init__.py(542):         modname = str(modname)
0.14 __init__.py(543):         if self.is_blocked(modname) or self.get_plugin(modname) is not None:
0.14 __init__.py(546):         importspec = "_pytest." + modname if modname in builtin_plugins else modname
0.14 __init__.py(547):         self.rewrite_hook.mark_rewrite(importspec)
0.14 __init__.py(549):         if consider_entry_points:
0.14 __init__.py(554):         try:
0.14 __init__.py(555):             __import__(importspec)
0.14 __init__.py(574):             mod = sys.modules[importspec]
0.14 __init__.py(575):             self.register(mod, modname)
0.14 __init__.py(313):         if name in _pytest.deprecated.DEPRECATED_EXTERNAL_PLUGINS:
0.14 __init__.py(323):         ret = super().register(plugin, name)
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(271):             return
0.14 __init__.py(270):         if not name.startswith("pytest_"):
0.14 __init__.py(273):         if name == "pytest_plugins":
0.14 __init__.py(276):         method = getattr(plugin, name)
0.14 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.14 __init__.py(280):         if not inspect.isroutine(method):
0.14 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.14 __init__.py(285):             opts = {}
0.14 __init__.py(286):         if opts is not None:
0.14 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.14 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.14 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.14 __init__.py(293):         return opts
0.14 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.14 __init__.py(774):             self._opt2dest[name] = opt.dest
0.14 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.14 __init__.py(776):         if hasattr(opt, "default") and opt.dest:
0.14 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.14 __init__.py(774):             self._opt2dest[name] = opt.dest
0.14 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.14 __init__.py(774):             self._opt2dest[name] = opt.dest
0.14 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.14 __init__.py(776):         if hasattr(opt, "default") and opt.dest:
0.14 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.14 __init__.py(774):             self._opt2dest[name] = opt.dest
0.14 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.14 __init__.py(776):         if hasattr(opt, "default") and opt.dest:
0.14 __init__.py(777):             if not hasattr(self.option, opt.dest):
0.14 __init__.py(778):                 setattr(self.option, opt.dest, opt.default)
0.14 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.14 __init__.py(774):             self._opt2dest[name] = opt.dest
0.14 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.14 __init__.py(774):             self._opt2dest[name] = opt.dest
0.14 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.14 __init__.py(776):         if hasattr(opt, "default") and opt.dest:
0.14 __init__.py(777):             if not hasattr(self.option, opt.dest):
0.14 __init__.py(778):                 setattr(self.option, opt.dest, opt.default)
0.14 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.14 __init__.py(774):             self._opt2dest[name] = opt.dest
0.14 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.14 __init__.py(776):         if hasattr(opt, "default") and opt.dest:
0.14 __init__.py(777):             if not hasattr(self.option, opt.dest):
0.14 __init__.py(778):                 setattr(self.option, opt.dest, opt.default)
0.15 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.15 __init__.py(774):             self._opt2dest[name] = opt.dest
0.15 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.15 __init__.py(774):             self._opt2dest[name] = opt.dest
0.15 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.15 __init__.py(776):         if hasattr(opt, "default") and opt.dest:
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(273):         if name == "pytest_plugins":
0.15 __init__.py(276):         method = getattr(plugin, name)
0.15 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.15 __init__.py(280):         if not inspect.isroutine(method):
0.15 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.15 __init__.py(285):             opts = {}
0.15 __init__.py(286):         if opts is not None:
0.15 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.15 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(293):         return opts
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(273):         if name == "pytest_plugins":
0.15 __init__.py(276):         method = getattr(plugin, name)
0.15 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.15 __init__.py(280):         if not inspect.isroutine(method):
0.15 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.15 __init__.py(286):         if opts is not None:
0.15 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.15 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(293):         return opts
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(273):         if name == "pytest_plugins":
0.15 __init__.py(276):         method = getattr(plugin, name)
0.15 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.15 __init__.py(280):         if not inspect.isroutine(method):
0.15 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.15 __init__.py(285):             opts = {}
0.15 __init__.py(286):         if opts is not None:
0.15 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.15 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(293):         return opts
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(324):         if ret:
0.15 __init__.py(325):             self.hook.pytest_plugin_registered.call_historic(
0.15 __init__.py(326):                 kwargs=dict(plugin=plugin, manager=self)
0.15 __init__.py(325):             self.hook.pytest_plugin_registered.call_historic(
0.15 __init__.py(329):             if isinstance(plugin, types.ModuleType):
0.15 __init__.py(330):                 self.consider_module(plugin)
0.15 __init__.py(523):         self._import_plugin_specs(getattr(mod, "pytest_plugins", []))
0.15 __init__.py(526):         plugins = _get_plugin_specs_as_list(spec)
0.15 __init__.py(586):     if specs is not None and not isinstance(specs, types.ModuleType):
0.15 __init__.py(587):         if isinstance(specs, str):
0.15 __init__.py(589):         if not isinstance(specs, (list, tuple)):
0.15 __init__.py(594):         return list(specs)
0.15 __init__.py(527):         for import_spec in plugins:
0.15 __init__.py(331):         return ret
0.15 __init__.py(167):     for spec in default_plugins:
0.15 __init__.py(168):         pluginmanager.import_plugin(spec)
0.15 __init__.py(539):         assert isinstance(modname, str), (
0.15 __init__.py(542):         modname = str(modname)
0.15 __init__.py(543):         if self.is_blocked(modname) or self.get_plugin(modname) is not None:
0.15 __init__.py(546):         importspec = "_pytest." + modname if modname in builtin_plugins else modname
0.15 __init__.py(547):         self.rewrite_hook.mark_rewrite(importspec)
0.15 __init__.py(549):         if consider_entry_points:
0.15 __init__.py(554):         try:
0.15 __init__.py(555):             __import__(importspec)
0.15 __init__.py(574):             mod = sys.modules[importspec]
0.15 __init__.py(575):             self.register(mod, modname)
0.15 __init__.py(313):         if name in _pytest.deprecated.DEPRECATED_EXTERNAL_PLUGINS:
0.15 __init__.py(323):         ret = super().register(plugin, name)
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(273):         if name == "pytest_plugins":
0.15 __init__.py(276):         method = getattr(plugin, name)
0.15 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.15 __init__.py(280):         if not inspect.isroutine(method):
0.15 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.15 __init__.py(285):             opts = {}
0.15 __init__.py(286):         if opts is not None:
0.15 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.15 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(293):         return opts
0.15 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.15 __init__.py(774):             self._opt2dest[name] = opt.dest
0.15 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.15 __init__.py(774):             self._opt2dest[name] = opt.dest
0.15 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.15 __init__.py(776):         if hasattr(opt, "default") and opt.dest:
0.15 __init__.py(777):             if not hasattr(self.option, opt.dest):
0.15 __init__.py(778):                 setattr(self.option, opt.dest, opt.default)
0.15 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.15 __init__.py(774):             self._opt2dest[name] = opt.dest
0.15 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.15 __init__.py(776):         if hasattr(opt, "default") and opt.dest:
0.15 __init__.py(777):             if not hasattr(self.option, opt.dest):
0.15 __init__.py(778):                 setattr(self.option, opt.dest, opt.default)
0.15 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.15 __init__.py(774):             self._opt2dest[name] = opt.dest
0.15 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.15 __init__.py(776):         if hasattr(opt, "default") and opt.dest:
0.15 __init__.py(777):             if not hasattr(self.option, opt.dest):
0.15 __init__.py(778):                 setattr(self.option, opt.dest, opt.default)
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(273):         if name == "pytest_plugins":
0.15 __init__.py(276):         method = getattr(plugin, name)
0.15 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.15 __init__.py(280):         if not inspect.isroutine(method):
0.15 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.15 __init__.py(285):             opts = {}
0.15 __init__.py(286):         if opts is not None:
0.15 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.15 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(293):         return opts
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(273):         if name == "pytest_plugins":
0.15 __init__.py(276):         method = getattr(plugin, name)
0.15 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.15 __init__.py(280):         if not inspect.isroutine(method):
0.15 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.15 __init__.py(285):             opts = {}
0.15 __init__.py(286):         if opts is not None:
0.15 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.15 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(293):         return opts
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(273):         if name == "pytest_plugins":
0.15 __init__.py(276):         method = getattr(plugin, name)
0.15 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.15 __init__.py(280):         if not inspect.isroutine(method):
0.15 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.15 __init__.py(285):             opts = {}
0.15 __init__.py(286):         if opts is not None:
0.15 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.15 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(293):         return opts
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(273):         if name == "pytest_plugins":
0.15 __init__.py(276):         method = getattr(plugin, name)
0.15 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.15 __init__.py(280):         if not inspect.isroutine(method):
0.15 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.15 __init__.py(285):             opts = {}
0.15 __init__.py(286):         if opts is not None:
0.15 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.15 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(293):         return opts
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(273):         if name == "pytest_plugins":
0.15 __init__.py(276):         method = getattr(plugin, name)
0.15 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.15 __init__.py(280):         if not inspect.isroutine(method):
0.15 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.15 __init__.py(285):             opts = {}
0.15 __init__.py(286):         if opts is not None:
0.15 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.15 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(293):         return opts
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(273):         if name == "pytest_plugins":
0.15 __init__.py(276):         method = getattr(plugin, name)
0.15 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.15 __init__.py(280):         if not inspect.isroutine(method):
0.15 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.15 __init__.py(286):         if opts is not None:
0.15 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.15 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(293):         return opts
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(273):         if name == "pytest_plugins":
0.15 __init__.py(276):         method = getattr(plugin, name)
0.15 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.15 __init__.py(280):         if not inspect.isroutine(method):
0.15 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.15 __init__.py(285):             opts = {}
0.15 __init__.py(286):         if opts is not None:
0.15 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.15 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(293):         return opts
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(273):         if name == "pytest_plugins":
0.15 __init__.py(276):         method = getattr(plugin, name)
0.15 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.15 __init__.py(280):         if not inspect.isroutine(method):
0.15 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.15 __init__.py(286):         if opts is not None:
0.15 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.15 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(293):         return opts
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(324):         if ret:
0.15 __init__.py(325):             self.hook.pytest_plugin_registered.call_historic(
0.15 __init__.py(326):                 kwargs=dict(plugin=plugin, manager=self)
0.15 __init__.py(325):             self.hook.pytest_plugin_registered.call_historic(
0.15 __init__.py(329):             if isinstance(plugin, types.ModuleType):
0.15 __init__.py(330):                 self.consider_module(plugin)
0.15 __init__.py(523):         self._import_plugin_specs(getattr(mod, "pytest_plugins", []))
0.15 __init__.py(526):         plugins = _get_plugin_specs_as_list(spec)
0.15 __init__.py(586):     if specs is not None and not isinstance(specs, types.ModuleType):
0.15 __init__.py(587):         if isinstance(specs, str):
0.15 __init__.py(589):         if not isinstance(specs, (list, tuple)):
0.15 __init__.py(594):         return list(specs)
0.15 __init__.py(527):         for import_spec in plugins:
0.15 __init__.py(331):         return ret
0.15 __init__.py(167):     for spec in default_plugins:
0.15 __init__.py(168):         pluginmanager.import_plugin(spec)
0.15 __init__.py(539):         assert isinstance(modname, str), (
0.15 __init__.py(542):         modname = str(modname)
0.15 __init__.py(543):         if self.is_blocked(modname) or self.get_plugin(modname) is not None:
0.15 __init__.py(546):         importspec = "_pytest." + modname if modname in builtin_plugins else modname
0.15 __init__.py(547):         self.rewrite_hook.mark_rewrite(importspec)
0.15 __init__.py(549):         if consider_entry_points:
0.15 __init__.py(554):         try:
0.15 __init__.py(555):             __import__(importspec)
0.15 __init__.py(574):             mod = sys.modules[importspec]
0.15 __init__.py(575):             self.register(mod, modname)
0.15 __init__.py(313):         if name in _pytest.deprecated.DEPRECATED_EXTERNAL_PLUGINS:
0.15 __init__.py(323):         ret = super().register(plugin, name)
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(273):         if name == "pytest_plugins":
0.15 __init__.py(276):         method = getattr(plugin, name)
0.15 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.15 __init__.py(280):         if not inspect.isroutine(method):
0.15 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.15 __init__.py(285):             opts = {}
0.15 __init__.py(286):         if opts is not None:
0.15 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.15 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(293):         return opts
0.15 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.15 __init__.py(774):             self._opt2dest[name] = opt.dest
0.15 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.15 __init__.py(774):             self._opt2dest[name] = opt.dest
0.15 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.15 __init__.py(776):         if hasattr(opt, "default") and opt.dest:
0.15 __init__.py(777):             if not hasattr(self.option, opt.dest):
0.15 __init__.py(778):                 setattr(self.option, opt.dest, opt.default)
0.15 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.15 __init__.py(774):             self._opt2dest[name] = opt.dest
0.15 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.15 __init__.py(774):             self._opt2dest[name] = opt.dest
0.15 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.15 __init__.py(776):         if hasattr(opt, "default") and opt.dest:
0.15 __init__.py(777):             if not hasattr(self.option, opt.dest):
0.15 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.15 __init__.py(774):             self._opt2dest[name] = opt.dest
0.15 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.15 __init__.py(776):         if hasattr(opt, "default") and opt.dest:
0.15 __init__.py(777):             if not hasattr(self.option, opt.dest):
0.15 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.15 __init__.py(774):             self._opt2dest[name] = opt.dest
0.15 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.15 __init__.py(776):         if hasattr(opt, "default") and opt.dest:
0.15 __init__.py(777):             if not hasattr(self.option, opt.dest):
0.15 __init__.py(778):                 setattr(self.option, opt.dest, opt.default)
0.15 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.15 __init__.py(774):             self._opt2dest[name] = opt.dest
0.15 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.15 __init__.py(774):             self._opt2dest[name] = opt.dest
0.15 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.15 __init__.py(776):         if hasattr(opt, "default") and opt.dest:
0.15 __init__.py(777):             if not hasattr(self.option, opt.dest):
0.15 __init__.py(778):                 setattr(self.option, opt.dest, opt.default)
0.15 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.15 __init__.py(774):             self._opt2dest[name] = opt.dest
0.15 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.15 __init__.py(774):             self._opt2dest[name] = opt.dest
0.15 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.15 __init__.py(776):         if hasattr(opt, "default") and opt.dest:
0.15 __init__.py(777):             if not hasattr(self.option, opt.dest):
0.15 __init__.py(778):                 setattr(self.option, opt.dest, opt.default)
0.15 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.15 __init__.py(774):             self._opt2dest[name] = opt.dest
0.15 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.15 __init__.py(776):         if hasattr(opt, "default") and opt.dest:
0.15 __init__.py(777):             if not hasattr(self.option, opt.dest):
0.15 __init__.py(778):                 setattr(self.option, opt.dest, opt.default)
0.15 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.15 __init__.py(774):             self._opt2dest[name] = opt.dest
0.15 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.15 __init__.py(776):         if hasattr(opt, "default") and opt.dest:
0.15 __init__.py(777):             if not hasattr(self.option, opt.dest):
0.15 __init__.py(778):                 setattr(self.option, opt.dest, opt.default)
0.15 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.15 __init__.py(774):             self._opt2dest[name] = opt.dest
0.15 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.15 __init__.py(774):             self._opt2dest[name] = opt.dest
0.15 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.15 __init__.py(776):         if hasattr(opt, "default") and opt.dest:
0.15 __init__.py(777):             if not hasattr(self.option, opt.dest):
0.15 __init__.py(778):                 setattr(self.option, opt.dest, opt.default)
0.15 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.15 __init__.py(774):             self._opt2dest[name] = opt.dest
0.15 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.15 __init__.py(776):         if hasattr(opt, "default") and opt.dest:
0.15 __init__.py(777):             if not hasattr(self.option, opt.dest):
0.15 __init__.py(778):                 setattr(self.option, opt.dest, opt.default)
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(273):         if name == "pytest_plugins":
0.15 __init__.py(276):         method = getattr(plugin, name)
0.15 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.15 __init__.py(280):         if not inspect.isroutine(method):
0.15 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.15 __init__.py(285):             opts = {}
0.15 __init__.py(286):         if opts is not None:
0.15 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.15 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(293):         return opts
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(273):         if name == "pytest_plugins":
0.15 __init__.py(276):         method = getattr(plugin, name)
0.15 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.15 __init__.py(280):         if not inspect.isroutine(method):
0.15 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.15 __init__.py(286):         if opts is not None:
0.15 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.15 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(293):         return opts
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(324):         if ret:
0.15 __init__.py(325):             self.hook.pytest_plugin_registered.call_historic(
0.15 __init__.py(326):                 kwargs=dict(plugin=plugin, manager=self)
0.15 __init__.py(325):             self.hook.pytest_plugin_registered.call_historic(
0.15 __init__.py(329):             if isinstance(plugin, types.ModuleType):
0.15 __init__.py(330):                 self.consider_module(plugin)
0.15 __init__.py(523):         self._import_plugin_specs(getattr(mod, "pytest_plugins", []))
0.15 __init__.py(526):         plugins = _get_plugin_specs_as_list(spec)
0.15 __init__.py(586):     if specs is not None and not isinstance(specs, types.ModuleType):
0.15 __init__.py(587):         if isinstance(specs, str):
0.15 __init__.py(589):         if not isinstance(specs, (list, tuple)):
0.15 __init__.py(594):         return list(specs)
0.15 __init__.py(527):         for import_spec in plugins:
0.15 __init__.py(331):         return ret
0.15 __init__.py(167):     for spec in default_plugins:
0.15 __init__.py(168):         pluginmanager.import_plugin(spec)
0.15 __init__.py(539):         assert isinstance(modname, str), (
0.15 __init__.py(542):         modname = str(modname)
0.15 __init__.py(543):         if self.is_blocked(modname) or self.get_plugin(modname) is not None:
0.15 __init__.py(546):         importspec = "_pytest." + modname if modname in builtin_plugins else modname
0.15 __init__.py(547):         self.rewrite_hook.mark_rewrite(importspec)
0.15 __init__.py(549):         if consider_entry_points:
0.15 __init__.py(554):         try:
0.15 __init__.py(555):             __import__(importspec)
0.15 __init__.py(574):             mod = sys.modules[importspec]
0.15 __init__.py(575):             self.register(mod, modname)
0.15 __init__.py(313):         if name in _pytest.deprecated.DEPRECATED_EXTERNAL_PLUGINS:
0.15 __init__.py(323):         ret = super().register(plugin, name)
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(273):         if name == "pytest_plugins":
0.15 __init__.py(276):         method = getattr(plugin, name)
0.15 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.15 __init__.py(280):         if not inspect.isroutine(method):
0.15 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.15 __init__.py(285):             opts = {}
0.15 __init__.py(286):         if opts is not None:
0.15 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.15 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(293):         return opts
0.15 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.15 __init__.py(774):             self._opt2dest[name] = opt.dest
0.15 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.15 __init__.py(776):         if hasattr(opt, "default") and opt.dest:
0.15 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.15 __init__.py(774):             self._opt2dest[name] = opt.dest
0.15 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.15 __init__.py(776):         if hasattr(opt, "default") and opt.dest:
0.15 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.15 __init__.py(774):             self._opt2dest[name] = opt.dest
0.15 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.15 __init__.py(776):         if hasattr(opt, "default") and opt.dest:
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(273):         if name == "pytest_plugins":
0.15 __init__.py(276):         method = getattr(plugin, name)
0.15 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.15 __init__.py(280):         if not inspect.isroutine(method):
0.15 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.15 __init__.py(285):             opts = {}
0.15 __init__.py(286):         if opts is not None:
0.15 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.15 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.15 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.15 __init__.py(293):         return opts
0.15 __init__.py(270):         if not name.startswith("pytest_"):
0.15 __init__.py(271):             return
0.15 __init__.py(324):         if ret:
0.15 __init__.py(325):             self.hook.pytest_plugin_registered.call_historic(
0.15 __init__.py(326):                 kwargs=dict(plugin=plugin, manager=self)
0.15 __init__.py(325):             self.hook.pytest_plugin_registered.call_historic(
0.15 __init__.py(329):             if isinstance(plugin, types.ModuleType):
0.15 __init__.py(330):                 self.consider_module(plugin)
0.15 __init__.py(523):         self._import_plugin_specs(getattr(mod, "pytest_plugins", []))
0.15 __init__.py(526):         plugins = _get_plugin_specs_as_list(spec)
0.15 __init__.py(586):     if specs is not None and not isinstance(specs, types.ModuleType):
0.15 __init__.py(587):         if isinstance(specs, str):
0.15 __init__.py(589):         if not isinstance(specs, (list, tuple)):
0.15 __init__.py(594):         return list(specs)
0.15 __init__.py(527):         for import_spec in plugins:
0.15 __init__.py(331):         return ret
0.15 __init__.py(167):     for spec in default_plugins:
0.15 __init__.py(168):         pluginmanager.import_plugin(spec)
0.15 __init__.py(539):         assert isinstance(modname, str), (
0.15 __init__.py(542):         modname = str(modname)
0.15 __init__.py(543):         if self.is_blocked(modname) or self.get_plugin(modname) is not None:
0.15 __init__.py(546):         importspec = "_pytest." + modname if modname in builtin_plugins else modname
0.15 __init__.py(547):         self.rewrite_hook.mark_rewrite(importspec)
0.15 __init__.py(549):         if consider_entry_points:
0.15 __init__.py(554):         try:
0.15 __init__.py(555):             __import__(importspec)
0.16 __init__.py(574):             mod = sys.modules[importspec]
0.16 __init__.py(575):             self.register(mod, modname)
0.16 __init__.py(313):         if name in _pytest.deprecated.DEPRECATED_EXTERNAL_PLUGINS:
0.16 __init__.py(323):         ret = super().register(plugin, name)
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(271):             return
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(271):             return
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(271):             return
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(271):             return
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(271):             return
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(271):             return
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(271):             return
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(271):             return
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(271):             return
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(271):             return
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(271):             return
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(271):             return
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(271):             return
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(271):             return
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(271):             return
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(271):             return
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(271):             return
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(271):             return
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(271):             return
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(271):             return
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(271):             return
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(273):         if name == "pytest_plugins":
0.16 __init__.py(276):         method = getattr(plugin, name)
0.16 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.16 __init__.py(280):         if not inspect.isroutine(method):
0.16 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.16 __init__.py(285):             opts = {}
0.16 __init__.py(286):         if opts is not None:
0.16 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.16 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.16 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.16 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.16 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.16 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.16 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.16 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.16 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.16 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.16 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.16 __init__.py(293):         return opts
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(273):         if name == "pytest_plugins":
0.16 __init__.py(276):         method = getattr(plugin, name)
0.16 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.16 __init__.py(280):         if not inspect.isroutine(method):
0.16 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.16 __init__.py(286):         if opts is not None:
0.16 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.16 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.16 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.16 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.16 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.16 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.16 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.16 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.16 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.16 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.16 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.16 __init__.py(293):         return opts
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(273):         if name == "pytest_plugins":
0.16 __init__.py(276):         method = getattr(plugin, name)
0.16 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.16 __init__.py(280):         if not inspect.isroutine(method):
0.16 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.16 __init__.py(286):         if opts is not None:
0.16 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.16 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.16 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.16 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.16 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.16 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.16 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.16 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.16 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.16 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.16 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.16 __init__.py(293):         return opts
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(271):             return
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(271):             return
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(271):             return
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(271):             return
0.16 __init__.py(324):         if ret:
0.16 __init__.py(325):             self.hook.pytest_plugin_registered.call_historic(
0.16 __init__.py(326):                 kwargs=dict(plugin=plugin, manager=self)
0.16 __init__.py(325):             self.hook.pytest_plugin_registered.call_historic(
0.16 __init__.py(329):             if isinstance(plugin, types.ModuleType):
0.16 __init__.py(330):                 self.consider_module(plugin)
0.16 __init__.py(523):         self._import_plugin_specs(getattr(mod, "pytest_plugins", []))
0.16 __init__.py(526):         plugins = _get_plugin_specs_as_list(spec)
0.16 __init__.py(586):     if specs is not None and not isinstance(specs, types.ModuleType):
0.16 __init__.py(587):         if isinstance(specs, str):
0.16 __init__.py(589):         if not isinstance(specs, (list, tuple)):
0.16 __init__.py(594):         return list(specs)
0.16 __init__.py(527):         for import_spec in plugins:
0.16 __init__.py(331):         return ret
0.16 __init__.py(167):     for spec in default_plugins:
0.16 __init__.py(168):         pluginmanager.import_plugin(spec)
0.16 __init__.py(539):         assert isinstance(modname, str), (
0.16 __init__.py(542):         modname = str(modname)
0.16 __init__.py(543):         if self.is_blocked(modname) or self.get_plugin(modname) is not None:
0.16 __init__.py(546):         importspec = "_pytest." + modname if modname in builtin_plugins else modname
0.16 __init__.py(547):         self.rewrite_hook.mark_rewrite(importspec)
0.16 __init__.py(549):         if consider_entry_points:
0.16 __init__.py(554):         try:
0.16 __init__.py(555):             __import__(importspec)
0.16 __init__.py(574):             mod = sys.modules[importspec]
0.16 __init__.py(575):             self.register(mod, modname)
0.16 __init__.py(313):         if name in _pytest.deprecated.DEPRECATED_EXTERNAL_PLUGINS:
0.16 __init__.py(323):         ret = super().register(plugin, name)
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(271):             return
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(271):             return
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(271):             return
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(271):             return
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(271):             return
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(271):             return
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(271):             return
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(271):             return
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(271):             return
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(271):             return
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(271):             return
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(271):             return
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(271):             return
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(271):             return
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(271):             return
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(271):             return
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(271):             return
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(271):             return
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(271):             return
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(271):             return
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(271):             return
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(271):             return
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(271):             return
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(271):             return
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(271):             return
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(271):             return
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(271):             return
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(271):             return
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(271):             return
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(271):             return
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(271):             return
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(271):             return
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(271):             return
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(271):             return
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(271):             return
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(271):             return
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(271):             return
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(271):             return
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(273):         if name == "pytest_plugins":
0.16 __init__.py(276):         method = getattr(plugin, name)
0.16 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.16 __init__.py(280):         if not inspect.isroutine(method):
0.16 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.16 __init__.py(285):             opts = {}
0.16 __init__.py(286):         if opts is not None:
0.16 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.16 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.16 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.16 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.16 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.16 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.16 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.16 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.16 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.16 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.16 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.16 __init__.py(293):         return opts
0.16 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.16 __init__.py(774):             self._opt2dest[name] = opt.dest
0.16 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.16 __init__.py(776):         if hasattr(opt, "default") and opt.dest:
0.16 __init__.py(777):             if not hasattr(self.option, opt.dest):
0.16 __init__.py(778):                 setattr(self.option, opt.dest, opt.default)
0.16 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.16 __init__.py(774):             self._opt2dest[name] = opt.dest
0.16 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.16 __init__.py(776):         if hasattr(opt, "default") and opt.dest:
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(273):         if name == "pytest_plugins":
0.16 __init__.py(276):         method = getattr(plugin, name)
0.16 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.16 __init__.py(280):         if not inspect.isroutine(method):
0.16 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.16 __init__.py(286):         if opts is not None:
0.16 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.16 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.16 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.16 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.16 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.16 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.16 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.16 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.16 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.16 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.16 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.16 __init__.py(293):         return opts
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(271):             return
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(271):             return
0.16 __init__.py(324):         if ret:
0.16 __init__.py(325):             self.hook.pytest_plugin_registered.call_historic(
0.16 __init__.py(326):                 kwargs=dict(plugin=plugin, manager=self)
0.16 __init__.py(325):             self.hook.pytest_plugin_registered.call_historic(
0.16 __init__.py(329):             if isinstance(plugin, types.ModuleType):
0.16 __init__.py(330):                 self.consider_module(plugin)
0.16 __init__.py(523):         self._import_plugin_specs(getattr(mod, "pytest_plugins", []))
0.16 __init__.py(526):         plugins = _get_plugin_specs_as_list(spec)
0.16 __init__.py(586):     if specs is not None and not isinstance(specs, types.ModuleType):
0.16 __init__.py(587):         if isinstance(specs, str):
0.16 __init__.py(589):         if not isinstance(specs, (list, tuple)):
0.16 __init__.py(594):         return list(specs)
0.16 __init__.py(527):         for import_spec in plugins:
0.16 __init__.py(331):         return ret
0.16 __init__.py(167):     for spec in default_plugins:
0.16 __init__.py(168):         pluginmanager.import_plugin(spec)
0.16 __init__.py(539):         assert isinstance(modname, str), (
0.16 __init__.py(542):         modname = str(modname)
0.16 __init__.py(543):         if self.is_blocked(modname) or self.get_plugin(modname) is not None:
0.16 __init__.py(546):         importspec = "_pytest." + modname if modname in builtin_plugins else modname
0.16 __init__.py(547):         self.rewrite_hook.mark_rewrite(importspec)
0.16 __init__.py(549):         if consider_entry_points:
0.16 __init__.py(554):         try:
0.16 __init__.py(555):             __import__(importspec)
0.16 __init__.py(574):             mod = sys.modules[importspec]
0.16 __init__.py(575):             self.register(mod, modname)
0.16 __init__.py(313):         if name in _pytest.deprecated.DEPRECATED_EXTERNAL_PLUGINS:
0.16 __init__.py(323):         ret = super().register(plugin, name)
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(271):             return
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(271):             return
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(271):             return
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(271):             return
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(271):             return
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(271):             return
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(271):             return
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(271):             return
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(271):             return
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(271):             return
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(271):             return
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(271):             return
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(271):             return
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(273):         if name == "pytest_plugins":
0.16 __init__.py(276):         method = getattr(plugin, name)
0.16 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.16 __init__.py(280):         if not inspect.isroutine(method):
0.16 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.16 __init__.py(285):             opts = {}
0.16 __init__.py(286):         if opts is not None:
0.16 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.16 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.16 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.16 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.16 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.16 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.16 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.16 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.16 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.16 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.16 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.16 __init__.py(293):         return opts
0.16 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.16 __init__.py(774):             self._opt2dest[name] = opt.dest
0.16 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.16 __init__.py(776):         if hasattr(opt, "default") and opt.dest:
0.16 __init__.py(777):             if not hasattr(self.option, opt.dest):
0.16 __init__.py(778):                 setattr(self.option, opt.dest, opt.default)
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(273):         if name == "pytest_plugins":
0.16 __init__.py(276):         method = getattr(plugin, name)
0.16 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.16 __init__.py(280):         if not inspect.isroutine(method):
0.16 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.16 __init__.py(285):             opts = {}
0.16 __init__.py(286):         if opts is not None:
0.16 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.16 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.16 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.16 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.16 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.16 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.16 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.16 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.16 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.16 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.16 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.16 __init__.py(293):         return opts
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(273):         if name == "pytest_plugins":
0.16 __init__.py(276):         method = getattr(plugin, name)
0.16 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.16 __init__.py(280):         if not inspect.isroutine(method):
0.16 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.16 __init__.py(286):         if opts is not None:
0.16 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.16 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.16 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.16 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.16 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.16 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.16 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.16 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.16 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.16 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.16 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.16 __init__.py(293):         return opts
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(273):         if name == "pytest_plugins":
0.16 __init__.py(276):         method = getattr(plugin, name)
0.16 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.16 __init__.py(280):         if not inspect.isroutine(method):
0.16 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.16 __init__.py(285):             opts = {}
0.16 __init__.py(286):         if opts is not None:
0.16 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.16 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.16 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.16 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.16 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.16 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.16 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.16 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.16 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.16 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.16 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.16 __init__.py(293):         return opts
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(273):         if name == "pytest_plugins":
0.16 __init__.py(276):         method = getattr(plugin, name)
0.16 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.16 __init__.py(280):         if not inspect.isroutine(method):
0.16 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.16 __init__.py(286):         if opts is not None:
0.16 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.16 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.16 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.16 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.16 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.16 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.16 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.16 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.16 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.16 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.16 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.16 __init__.py(293):         return opts
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(273):         if name == "pytest_plugins":
0.16 __init__.py(276):         method = getattr(plugin, name)
0.16 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.16 __init__.py(280):         if not inspect.isroutine(method):
0.16 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.16 __init__.py(286):         if opts is not None:
0.16 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.16 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.16 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.16 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.16 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.16 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.16 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.16 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.16 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.16 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.16 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.16 __init__.py(293):         return opts
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(271):             return
0.16 __init__.py(270):         if not name.startswith("pytest_"):
0.16 __init__.py(271):             return
0.16 __init__.py(324):         if ret:
0.16 __init__.py(325):             self.hook.pytest_plugin_registered.call_historic(
0.16 __init__.py(326):                 kwargs=dict(plugin=plugin, manager=self)
0.16 __init__.py(325):             self.hook.pytest_plugin_registered.call_historic(
0.16 __init__.py(329):             if isinstance(plugin, types.ModuleType):
0.16 __init__.py(330):                 self.consider_module(plugin)
0.16 __init__.py(523):         self._import_plugin_specs(getattr(mod, "pytest_plugins", []))
0.16 __init__.py(526):         plugins = _get_plugin_specs_as_list(spec)
0.16 __init__.py(586):     if specs is not None and not isinstance(specs, types.ModuleType):
0.16 __init__.py(587):         if isinstance(specs, str):
0.16 __init__.py(589):         if not isinstance(specs, (list, tuple)):
0.16 __init__.py(594):         return list(specs)
0.16 __init__.py(527):         for import_spec in plugins:
0.16 __init__.py(331):         return ret
0.16 __init__.py(167):     for spec in default_plugins:
0.16 __init__.py(168):         pluginmanager.import_plugin(spec)
0.16 __init__.py(539):         assert isinstance(modname, str), (
0.16 __init__.py(542):         modname = str(modname)
0.16 __init__.py(543):         if self.is_blocked(modname) or self.get_plugin(modname) is not None:
0.16 __init__.py(546):         importspec = "_pytest." + modname if modname in builtin_plugins else modname
0.16 __init__.py(547):         self.rewrite_hook.mark_rewrite(importspec)
0.16 __init__.py(549):         if consider_entry_points:
0.16 __init__.py(554):         try:
0.16 __init__.py(555):             __import__(importspec)
0.17 __init__.py(574):             mod = sys.modules[importspec]
0.17 __init__.py(575):             self.register(mod, modname)
0.17 __init__.py(313):         if name in _pytest.deprecated.DEPRECATED_EXTERNAL_PLUGINS:
0.17 __init__.py(323):         ret = super().register(plugin, name)
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(273):         if name == "pytest_plugins":
0.17 __init__.py(276):         method = getattr(plugin, name)
0.17 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.17 __init__.py(280):         if not inspect.isroutine(method):
0.17 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.17 __init__.py(285):             opts = {}
0.17 __init__.py(286):         if opts is not None:
0.17 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.17 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.17 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.17 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.17 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.17 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.17 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.17 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.17 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.17 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.17 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.17 __init__.py(293):         return opts
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(324):         if ret:
0.17 __init__.py(325):             self.hook.pytest_plugin_registered.call_historic(
0.17 __init__.py(326):                 kwargs=dict(plugin=plugin, manager=self)
0.17 __init__.py(325):             self.hook.pytest_plugin_registered.call_historic(
0.17 __init__.py(329):             if isinstance(plugin, types.ModuleType):
0.17 __init__.py(330):                 self.consider_module(plugin)
0.17 __init__.py(523):         self._import_plugin_specs(getattr(mod, "pytest_plugins", []))
0.17 __init__.py(526):         plugins = _get_plugin_specs_as_list(spec)
0.17 __init__.py(586):     if specs is not None and not isinstance(specs, types.ModuleType):
0.17 __init__.py(587):         if isinstance(specs, str):
0.17 __init__.py(589):         if not isinstance(specs, (list, tuple)):
0.17 __init__.py(594):         return list(specs)
0.17 __init__.py(527):         for import_spec in plugins:
0.17 __init__.py(331):         return ret
0.17 __init__.py(167):     for spec in default_plugins:
0.17 __init__.py(168):         pluginmanager.import_plugin(spec)
0.17 __init__.py(539):         assert isinstance(modname, str), (
0.17 __init__.py(542):         modname = str(modname)
0.17 __init__.py(543):         if self.is_blocked(modname) or self.get_plugin(modname) is not None:
0.17 __init__.py(546):         importspec = "_pytest." + modname if modname in builtin_plugins else modname
0.17 __init__.py(547):         self.rewrite_hook.mark_rewrite(importspec)
0.17 __init__.py(549):         if consider_entry_points:
0.17 __init__.py(554):         try:
0.17 __init__.py(555):             __import__(importspec)
0.17 __init__.py(574):             mod = sys.modules[importspec]
0.17 __init__.py(575):             self.register(mod, modname)
0.17 __init__.py(313):         if name in _pytest.deprecated.DEPRECATED_EXTERNAL_PLUGINS:
0.17 __init__.py(323):         ret = super().register(plugin, name)
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(324):         if ret:
0.17 __init__.py(325):             self.hook.pytest_plugin_registered.call_historic(
0.17 __init__.py(326):                 kwargs=dict(plugin=plugin, manager=self)
0.17 __init__.py(325):             self.hook.pytest_plugin_registered.call_historic(
0.17 __init__.py(329):             if isinstance(plugin, types.ModuleType):
0.17 __init__.py(330):                 self.consider_module(plugin)
0.17 __init__.py(523):         self._import_plugin_specs(getattr(mod, "pytest_plugins", []))
0.17 __init__.py(526):         plugins = _get_plugin_specs_as_list(spec)
0.17 __init__.py(586):     if specs is not None and not isinstance(specs, types.ModuleType):
0.17 __init__.py(587):         if isinstance(specs, str):
0.17 __init__.py(589):         if not isinstance(specs, (list, tuple)):
0.17 __init__.py(594):         return list(specs)
0.17 __init__.py(527):         for import_spec in plugins:
0.17 __init__.py(331):         return ret
0.17 __init__.py(167):     for spec in default_plugins:
0.17 __init__.py(168):         pluginmanager.import_plugin(spec)
0.17 __init__.py(539):         assert isinstance(modname, str), (
0.17 __init__.py(542):         modname = str(modname)
0.17 __init__.py(543):         if self.is_blocked(modname) or self.get_plugin(modname) is not None:
0.17 __init__.py(546):         importspec = "_pytest." + modname if modname in builtin_plugins else modname
0.17 __init__.py(547):         self.rewrite_hook.mark_rewrite(importspec)
0.17 __init__.py(549):         if consider_entry_points:
0.17 __init__.py(554):         try:
0.17 __init__.py(555):             __import__(importspec)
0.17 __init__.py(574):             mod = sys.modules[importspec]
0.17 __init__.py(575):             self.register(mod, modname)
0.17 __init__.py(313):         if name in _pytest.deprecated.DEPRECATED_EXTERNAL_PLUGINS:
0.17 __init__.py(323):         ret = super().register(plugin, name)
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(324):         if ret:
0.17 __init__.py(325):             self.hook.pytest_plugin_registered.call_historic(
0.17 __init__.py(326):                 kwargs=dict(plugin=plugin, manager=self)
0.17 __init__.py(325):             self.hook.pytest_plugin_registered.call_historic(
0.17 __init__.py(329):             if isinstance(plugin, types.ModuleType):
0.17 __init__.py(330):                 self.consider_module(plugin)
0.17 __init__.py(523):         self._import_plugin_specs(getattr(mod, "pytest_plugins", []))
0.17 __init__.py(526):         plugins = _get_plugin_specs_as_list(spec)
0.17 __init__.py(586):     if specs is not None and not isinstance(specs, types.ModuleType):
0.17 __init__.py(587):         if isinstance(specs, str):
0.17 __init__.py(589):         if not isinstance(specs, (list, tuple)):
0.17 __init__.py(594):         return list(specs)
0.17 __init__.py(527):         for import_spec in plugins:
0.17 __init__.py(331):         return ret
0.17 __init__.py(167):     for spec in default_plugins:
0.17 __init__.py(168):         pluginmanager.import_plugin(spec)
0.17 __init__.py(539):         assert isinstance(modname, str), (
0.17 __init__.py(542):         modname = str(modname)
0.17 __init__.py(543):         if self.is_blocked(modname) or self.get_plugin(modname) is not None:
0.17 __init__.py(546):         importspec = "_pytest." + modname if modname in builtin_plugins else modname
0.17 __init__.py(547):         self.rewrite_hook.mark_rewrite(importspec)
0.17 __init__.py(549):         if consider_entry_points:
0.17 __init__.py(554):         try:
0.17 __init__.py(555):             __import__(importspec)
0.17 __init__.py(574):             mod = sys.modules[importspec]
0.17 __init__.py(575):             self.register(mod, modname)
0.17 __init__.py(313):         if name in _pytest.deprecated.DEPRECATED_EXTERNAL_PLUGINS:
0.17 __init__.py(323):         ret = super().register(plugin, name)
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(273):         if name == "pytest_plugins":
0.17 __init__.py(276):         method = getattr(plugin, name)
0.17 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.17 __init__.py(280):         if not inspect.isroutine(method):
0.17 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.17 __init__.py(285):             opts = {}
0.17 __init__.py(286):         if opts is not None:
0.17 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.17 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.17 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.17 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.17 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.17 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.17 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.17 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.17 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.17 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.17 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.17 __init__.py(293):         return opts
0.17 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.17 __init__.py(774):             self._opt2dest[name] = opt.dest
0.17 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.17 __init__.py(776):         if hasattr(opt, "default") and opt.dest:
0.17 __init__.py(777):             if not hasattr(self.option, opt.dest):
0.17 __init__.py(778):                 setattr(self.option, opt.dest, opt.default)
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(273):         if name == "pytest_plugins":
0.17 __init__.py(276):         method = getattr(plugin, name)
0.17 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.17 __init__.py(280):         if not inspect.isroutine(method):
0.17 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.17 __init__.py(286):         if opts is not None:
0.17 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.17 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.17 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.17 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.17 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.17 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.17 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.17 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.17 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.17 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.17 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.17 __init__.py(293):         return opts
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(273):         if name == "pytest_plugins":
0.17 __init__.py(276):         method = getattr(plugin, name)
0.17 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.17 __init__.py(280):         if not inspect.isroutine(method):
0.17 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.17 __init__.py(285):             opts = {}
0.17 __init__.py(286):         if opts is not None:
0.17 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.17 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.17 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.17 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.17 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.17 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.17 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.17 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.17 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.17 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.17 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.17 __init__.py(293):         return opts
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(273):         if name == "pytest_plugins":
0.17 __init__.py(276):         method = getattr(plugin, name)
0.17 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.17 __init__.py(280):         if not inspect.isroutine(method):
0.17 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.17 __init__.py(285):             opts = {}
0.17 __init__.py(286):         if opts is not None:
0.17 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.17 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.17 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.17 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.17 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.17 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.17 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.17 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.17 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.17 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.17 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.17 __init__.py(293):         return opts
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(324):         if ret:
0.17 __init__.py(325):             self.hook.pytest_plugin_registered.call_historic(
0.17 __init__.py(326):                 kwargs=dict(plugin=plugin, manager=self)
0.17 __init__.py(325):             self.hook.pytest_plugin_registered.call_historic(
0.17 __init__.py(329):             if isinstance(plugin, types.ModuleType):
0.17 __init__.py(330):                 self.consider_module(plugin)
0.17 __init__.py(523):         self._import_plugin_specs(getattr(mod, "pytest_plugins", []))
0.17 __init__.py(526):         plugins = _get_plugin_specs_as_list(spec)
0.17 __init__.py(586):     if specs is not None and not isinstance(specs, types.ModuleType):
0.17 __init__.py(587):         if isinstance(specs, str):
0.17 __init__.py(589):         if not isinstance(specs, (list, tuple)):
0.17 __init__.py(594):         return list(specs)
0.17 __init__.py(527):         for import_spec in plugins:
0.17 __init__.py(331):         return ret
0.17 __init__.py(167):     for spec in default_plugins:
0.17 __init__.py(168):         pluginmanager.import_plugin(spec)
0.17 __init__.py(539):         assert isinstance(modname, str), (
0.17 __init__.py(542):         modname = str(modname)
0.17 __init__.py(543):         if self.is_blocked(modname) or self.get_plugin(modname) is not None:
0.17 __init__.py(546):         importspec = "_pytest." + modname if modname in builtin_plugins else modname
0.17 __init__.py(547):         self.rewrite_hook.mark_rewrite(importspec)
0.17 __init__.py(549):         if consider_entry_points:
0.17 __init__.py(554):         try:
0.17 __init__.py(555):             __import__(importspec)
0.17 __init__.py(574):             mod = sys.modules[importspec]
0.17 __init__.py(575):             self.register(mod, modname)
0.17 __init__.py(313):         if name in _pytest.deprecated.DEPRECATED_EXTERNAL_PLUGINS:
0.17 __init__.py(323):         ret = super().register(plugin, name)
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(273):         if name == "pytest_plugins":
0.17 __init__.py(276):         method = getattr(plugin, name)
0.17 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.17 __init__.py(280):         if not inspect.isroutine(method):
0.17 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.17 __init__.py(286):         if opts is not None:
0.17 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.17 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.17 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.17 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.17 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.17 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.17 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.17 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.17 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.17 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.17 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.17 __init__.py(293):         return opts
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(324):         if ret:
0.17 __init__.py(325):             self.hook.pytest_plugin_registered.call_historic(
0.17 __init__.py(326):                 kwargs=dict(plugin=plugin, manager=self)
0.17 __init__.py(325):             self.hook.pytest_plugin_registered.call_historic(
0.17 __init__.py(329):             if isinstance(plugin, types.ModuleType):
0.17 __init__.py(330):                 self.consider_module(plugin)
0.17 __init__.py(523):         self._import_plugin_specs(getattr(mod, "pytest_plugins", []))
0.17 __init__.py(526):         plugins = _get_plugin_specs_as_list(spec)
0.17 __init__.py(586):     if specs is not None and not isinstance(specs, types.ModuleType):
0.17 __init__.py(587):         if isinstance(specs, str):
0.17 __init__.py(589):         if not isinstance(specs, (list, tuple)):
0.17 __init__.py(594):         return list(specs)
0.17 __init__.py(527):         for import_spec in plugins:
0.17 __init__.py(331):         return ret
0.17 __init__.py(167):     for spec in default_plugins:
0.17 __init__.py(168):         pluginmanager.import_plugin(spec)
0.17 __init__.py(539):         assert isinstance(modname, str), (
0.17 __init__.py(542):         modname = str(modname)
0.17 __init__.py(543):         if self.is_blocked(modname) or self.get_plugin(modname) is not None:
0.17 __init__.py(546):         importspec = "_pytest." + modname if modname in builtin_plugins else modname
0.17 __init__.py(547):         self.rewrite_hook.mark_rewrite(importspec)
0.17 __init__.py(549):         if consider_entry_points:
0.17 __init__.py(554):         try:
0.17 __init__.py(555):             __import__(importspec)
0.17 __init__.py(574):             mod = sys.modules[importspec]
0.17 __init__.py(575):             self.register(mod, modname)
0.17 __init__.py(313):         if name in _pytest.deprecated.DEPRECATED_EXTERNAL_PLUGINS:
0.17 __init__.py(323):         ret = super().register(plugin, name)
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(273):         if name == "pytest_plugins":
0.17 __init__.py(276):         method = getattr(plugin, name)
0.17 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.17 __init__.py(280):         if not inspect.isroutine(method):
0.17 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.17 __init__.py(285):             opts = {}
0.17 __init__.py(286):         if opts is not None:
0.17 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.17 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.17 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.17 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.17 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.17 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.17 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.17 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.17 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.17 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.17 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.17 __init__.py(293):         return opts
0.17 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.17 __init__.py(774):             self._opt2dest[name] = opt.dest
0.17 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.17 __init__.py(776):         if hasattr(opt, "default") and opt.dest:
0.17 __init__.py(777):             if not hasattr(self.option, opt.dest):
0.17 __init__.py(778):                 setattr(self.option, opt.dest, opt.default)
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(273):         if name == "pytest_plugins":
0.17 __init__.py(276):         method = getattr(plugin, name)
0.17 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.17 __init__.py(280):         if not inspect.isroutine(method):
0.17 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.17 __init__.py(285):             opts = {}
0.17 __init__.py(286):         if opts is not None:
0.17 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.17 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.17 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.17 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.17 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.17 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.17 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.17 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.17 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.17 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.17 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.17 __init__.py(293):         return opts
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(273):         if name == "pytest_plugins":
0.17 __init__.py(276):         method = getattr(plugin, name)
0.17 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.17 __init__.py(280):         if not inspect.isroutine(method):
0.17 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.17 __init__.py(285):             opts = {}
0.17 __init__.py(286):         if opts is not None:
0.17 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.17 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.17 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.17 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.17 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.17 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.17 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.17 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.17 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.17 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.17 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.17 __init__.py(293):         return opts
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(273):         if name == "pytest_plugins":
0.17 __init__.py(276):         method = getattr(plugin, name)
0.17 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.17 __init__.py(280):         if not inspect.isroutine(method):
0.17 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.17 __init__.py(285):             opts = {}
0.17 __init__.py(286):         if opts is not None:
0.17 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.17 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.17 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.17 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.17 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.17 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.17 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.17 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.17 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.17 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.17 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.17 __init__.py(293):         return opts
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(273):         if name == "pytest_plugins":
0.17 __init__.py(276):         method = getattr(plugin, name)
0.17 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.17 __init__.py(280):         if not inspect.isroutine(method):
0.17 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.17 __init__.py(285):             opts = {}
0.17 __init__.py(286):         if opts is not None:
0.17 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.17 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.17 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.17 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.17 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.17 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.17 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.17 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.17 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.17 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.17 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.17 __init__.py(293):         return opts
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(273):         if name == "pytest_plugins":
0.17 __init__.py(276):         method = getattr(plugin, name)
0.17 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.17 __init__.py(280):         if not inspect.isroutine(method):
0.17 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.17 __init__.py(285):             opts = {}
0.17 __init__.py(286):         if opts is not None:
0.17 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.17 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.17 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.17 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.17 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.17 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.17 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.17 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.17 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.17 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.17 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.17 __init__.py(293):         return opts
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(270):         if not name.startswith("pytest_"):
0.17 __init__.py(271):             return
0.17 __init__.py(324):         if ret:
0.17 __init__.py(325):             self.hook.pytest_plugin_registered.call_historic(
0.17 __init__.py(326):                 kwargs=dict(plugin=plugin, manager=self)
0.17 __init__.py(325):             self.hook.pytest_plugin_registered.call_historic(
0.17 __init__.py(329):             if isinstance(plugin, types.ModuleType):
0.17 __init__.py(330):                 self.consider_module(plugin)
0.17 __init__.py(523):         self._import_plugin_specs(getattr(mod, "pytest_plugins", []))
0.17 __init__.py(526):         plugins = _get_plugin_specs_as_list(spec)
0.17 __init__.py(586):     if specs is not None and not isinstance(specs, types.ModuleType):
0.17 __init__.py(587):         if isinstance(specs, str):
0.17 __init__.py(589):         if not isinstance(specs, (list, tuple)):
0.17 __init__.py(594):         return list(specs)
0.17 __init__.py(527):         for import_spec in plugins:
0.17 __init__.py(331):         return ret
0.17 __init__.py(167):     for spec in default_plugins:
0.17 __init__.py(168):         pluginmanager.import_plugin(spec)
0.17 __init__.py(539):         assert isinstance(modname, str), (
0.17 __init__.py(542):         modname = str(modname)
0.17 __init__.py(543):         if self.is_blocked(modname) or self.get_plugin(modname) is not None:
0.17 __init__.py(546):         importspec = "_pytest." + modname if modname in builtin_plugins else modname
0.17 __init__.py(547):         self.rewrite_hook.mark_rewrite(importspec)
0.17 __init__.py(549):         if consider_entry_points:
0.17 __init__.py(554):         try:
0.17 __init__.py(555):             __import__(importspec)
0.19 __init__.py(574):             mod = sys.modules[importspec]
0.19 __init__.py(575):             self.register(mod, modname)
0.19 __init__.py(313):         if name in _pytest.deprecated.DEPRECATED_EXTERNAL_PLUGINS:
0.19 __init__.py(323):         ret = super().register(plugin, name)
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(273):         if name == "pytest_plugins":
0.19 __init__.py(276):         method = getattr(plugin, name)
0.19 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.19 __init__.py(280):         if not inspect.isroutine(method):
0.19 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.19 __init__.py(285):             opts = {}
0.19 __init__.py(286):         if opts is not None:
0.19 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.19 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.19 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.19 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.19 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.19 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.19 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.19 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.19 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.19 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.19 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.19 __init__.py(293):         return opts
0.19 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.19 __init__.py(774):             self._opt2dest[name] = opt.dest
0.19 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.19 __init__.py(774):             self._opt2dest[name] = opt.dest
0.19 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.19 __init__.py(776):         if hasattr(opt, "default") and opt.dest:
0.19 __init__.py(777):             if not hasattr(self.option, opt.dest):
0.19 __init__.py(778):                 setattr(self.option, opt.dest, opt.default)
0.19 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.19 __init__.py(774):             self._opt2dest[name] = opt.dest
0.19 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.19 __init__.py(774):             self._opt2dest[name] = opt.dest
0.19 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.19 __init__.py(776):         if hasattr(opt, "default") and opt.dest:
0.19 __init__.py(777):             if not hasattr(self.option, opt.dest):
0.19 __init__.py(778):                 setattr(self.option, opt.dest, opt.default)
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(273):         if name == "pytest_plugins":
0.19 __init__.py(276):         method = getattr(plugin, name)
0.19 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.19 __init__.py(280):         if not inspect.isroutine(method):
0.19 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.19 __init__.py(285):             opts = {}
0.19 __init__.py(286):         if opts is not None:
0.19 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.19 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.19 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.19 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.19 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.19 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.19 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.19 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.19 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.19 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.19 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.19 __init__.py(293):         return opts
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(273):         if name == "pytest_plugins":
0.19 __init__.py(276):         method = getattr(plugin, name)
0.19 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.19 __init__.py(280):         if not inspect.isroutine(method):
0.19 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.19 __init__.py(285):             opts = {}
0.19 __init__.py(286):         if opts is not None:
0.19 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.19 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.19 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.19 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.19 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.19 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.19 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.19 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.19 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.19 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.19 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.19 __init__.py(293):         return opts
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(324):         if ret:
0.19 __init__.py(325):             self.hook.pytest_plugin_registered.call_historic(
0.19 __init__.py(326):                 kwargs=dict(plugin=plugin, manager=self)
0.19 __init__.py(325):             self.hook.pytest_plugin_registered.call_historic(
0.19 __init__.py(329):             if isinstance(plugin, types.ModuleType):
0.19 __init__.py(330):                 self.consider_module(plugin)
0.19 __init__.py(523):         self._import_plugin_specs(getattr(mod, "pytest_plugins", []))
0.19 __init__.py(526):         plugins = _get_plugin_specs_as_list(spec)
0.19 __init__.py(586):     if specs is not None and not isinstance(specs, types.ModuleType):
0.19 __init__.py(587):         if isinstance(specs, str):
0.19 __init__.py(589):         if not isinstance(specs, (list, tuple)):
0.19 __init__.py(594):         return list(specs)
0.19 __init__.py(527):         for import_spec in plugins:
0.19 __init__.py(331):         return ret
0.19 __init__.py(167):     for spec in default_plugins:
0.19 __init__.py(168):         pluginmanager.import_plugin(spec)
0.19 __init__.py(539):         assert isinstance(modname, str), (
0.19 __init__.py(542):         modname = str(modname)
0.19 __init__.py(543):         if self.is_blocked(modname) or self.get_plugin(modname) is not None:
0.19 __init__.py(546):         importspec = "_pytest." + modname if modname in builtin_plugins else modname
0.19 __init__.py(547):         self.rewrite_hook.mark_rewrite(importspec)
0.19 __init__.py(549):         if consider_entry_points:
0.19 __init__.py(554):         try:
0.19 __init__.py(555):             __import__(importspec)
0.19 __init__.py(574):             mod = sys.modules[importspec]
0.19 __init__.py(575):             self.register(mod, modname)
0.19 __init__.py(313):         if name in _pytest.deprecated.DEPRECATED_EXTERNAL_PLUGINS:
0.19 __init__.py(323):         ret = super().register(plugin, name)
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(273):         if name == "pytest_plugins":
0.19 __init__.py(276):         method = getattr(plugin, name)
0.19 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.19 __init__.py(280):         if not inspect.isroutine(method):
0.19 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.19 __init__.py(285):             opts = {}
0.19 __init__.py(286):         if opts is not None:
0.19 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.19 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.19 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.19 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.19 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.19 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.19 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.19 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.19 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.19 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.19 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.19 __init__.py(293):         return opts
0.19 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.19 __init__.py(774):             self._opt2dest[name] = opt.dest
0.19 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.19 __init__.py(774):             self._opt2dest[name] = opt.dest
0.19 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.19 __init__.py(776):         if hasattr(opt, "default") and opt.dest:
0.19 __init__.py(777):             if not hasattr(self.option, opt.dest):
0.19 __init__.py(778):                 setattr(self.option, opt.dest, opt.default)
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(273):         if name == "pytest_plugins":
0.19 __init__.py(276):         method = getattr(plugin, name)
0.19 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.19 __init__.py(280):         if not inspect.isroutine(method):
0.19 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.19 __init__.py(285):             opts = {}
0.19 __init__.py(286):         if opts is not None:
0.19 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.19 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.19 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.19 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.19 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.19 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.19 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.19 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.19 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.19 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.19 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.19 __init__.py(293):         return opts
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(273):         if name == "pytest_plugins":
0.19 __init__.py(276):         method = getattr(plugin, name)
0.19 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.19 __init__.py(280):         if not inspect.isroutine(method):
0.19 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.19 __init__.py(285):             opts = {}
0.19 __init__.py(286):         if opts is not None:
0.19 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.19 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.19 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.19 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.19 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.19 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.19 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.19 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.19 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.19 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.19 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.19 __init__.py(293):         return opts
0.19 __init__.py(324):         if ret:
0.19 __init__.py(325):             self.hook.pytest_plugin_registered.call_historic(
0.19 __init__.py(326):                 kwargs=dict(plugin=plugin, manager=self)
0.19 __init__.py(325):             self.hook.pytest_plugin_registered.call_historic(
0.19 __init__.py(329):             if isinstance(plugin, types.ModuleType):
0.19 __init__.py(330):                 self.consider_module(plugin)
0.19 __init__.py(523):         self._import_plugin_specs(getattr(mod, "pytest_plugins", []))
0.19 __init__.py(526):         plugins = _get_plugin_specs_as_list(spec)
0.19 __init__.py(586):     if specs is not None and not isinstance(specs, types.ModuleType):
0.19 __init__.py(587):         if isinstance(specs, str):
0.19 __init__.py(589):         if not isinstance(specs, (list, tuple)):
0.19 __init__.py(594):         return list(specs)
0.19 __init__.py(527):         for import_spec in plugins:
0.19 __init__.py(331):         return ret
0.19 __init__.py(167):     for spec in default_plugins:
0.19 __init__.py(168):         pluginmanager.import_plugin(spec)
0.19 __init__.py(539):         assert isinstance(modname, str), (
0.19 __init__.py(542):         modname = str(modname)
0.19 __init__.py(543):         if self.is_blocked(modname) or self.get_plugin(modname) is not None:
0.19 __init__.py(546):         importspec = "_pytest." + modname if modname in builtin_plugins else modname
0.19 __init__.py(547):         self.rewrite_hook.mark_rewrite(importspec)
0.19 __init__.py(549):         if consider_entry_points:
0.19 __init__.py(554):         try:
0.19 __init__.py(555):             __import__(importspec)
0.19 __init__.py(574):             mod = sys.modules[importspec]
0.19 __init__.py(575):             self.register(mod, modname)
0.19 __init__.py(313):         if name in _pytest.deprecated.DEPRECATED_EXTERNAL_PLUGINS:
0.19 __init__.py(323):         ret = super().register(plugin, name)
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(273):         if name == "pytest_plugins":
0.19 __init__.py(276):         method = getattr(plugin, name)
0.19 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.19 __init__.py(280):         if not inspect.isroutine(method):
0.19 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.19 __init__.py(285):             opts = {}
0.19 __init__.py(286):         if opts is not None:
0.19 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.19 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.19 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.19 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.19 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.19 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.19 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.19 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.19 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.19 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.19 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.19 __init__.py(293):         return opts
0.19 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.19 __init__.py(774):             self._opt2dest[name] = opt.dest
0.19 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.19 __init__.py(776):         if hasattr(opt, "default") and opt.dest:
0.19 __init__.py(777):             if not hasattr(self.option, opt.dest):
0.19 __init__.py(778):                 setattr(self.option, opt.dest, opt.default)
0.19 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.19 __init__.py(774):             self._opt2dest[name] = opt.dest
0.19 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.19 __init__.py(776):         if hasattr(opt, "default") and opt.dest:
0.19 __init__.py(777):             if not hasattr(self.option, opt.dest):
0.19 __init__.py(778):                 setattr(self.option, opt.dest, opt.default)
0.19 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.19 __init__.py(774):             self._opt2dest[name] = opt.dest
0.19 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.19 __init__.py(776):         if hasattr(opt, "default") and opt.dest:
0.19 __init__.py(777):             if not hasattr(self.option, opt.dest):
0.19 __init__.py(778):                 setattr(self.option, opt.dest, opt.default)
0.19 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.19 __init__.py(774):             self._opt2dest[name] = opt.dest
0.19 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.19 __init__.py(776):         if hasattr(opt, "default") and opt.dest:
0.19 __init__.py(777):             if not hasattr(self.option, opt.dest):
0.19 __init__.py(778):                 setattr(self.option, opt.dest, opt.default)
0.19 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.19 __init__.py(774):             self._opt2dest[name] = opt.dest
0.19 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.19 __init__.py(776):         if hasattr(opt, "default") and opt.dest:
0.19 __init__.py(777):             if not hasattr(self.option, opt.dest):
0.19 __init__.py(778):                 setattr(self.option, opt.dest, opt.default)
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(273):         if name == "pytest_plugins":
0.19 __init__.py(276):         method = getattr(plugin, name)
0.19 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.19 __init__.py(280):         if not inspect.isroutine(method):
0.19 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.19 __init__.py(285):             opts = {}
0.19 __init__.py(286):         if opts is not None:
0.19 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.19 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.19 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.19 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.19 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.19 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.19 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.19 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.19 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.19 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.19 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.19 __init__.py(293):         return opts
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(270):         if not name.startswith("pytest_"):
0.19 __init__.py(271):             return
0.19 __init__.py(324):         if ret:
0.19 __init__.py(325):             self.hook.pytest_plugin_registered.call_historic(
0.19 __init__.py(326):                 kwargs=dict(plugin=plugin, manager=self)
0.19 __init__.py(325):             self.hook.pytest_plugin_registered.call_historic(
0.19 __init__.py(329):             if isinstance(plugin, types.ModuleType):
0.19 __init__.py(330):                 self.consider_module(plugin)
0.19 __init__.py(523):         self._import_plugin_specs(getattr(mod, "pytest_plugins", []))
0.19 __init__.py(526):         plugins = _get_plugin_specs_as_list(spec)
0.19 __init__.py(586):     if specs is not None and not isinstance(specs, types.ModuleType):
0.19 __init__.py(587):         if isinstance(specs, str):
0.19 __init__.py(589):         if not isinstance(specs, (list, tuple)):
0.19 __init__.py(594):         return list(specs)
0.19 __init__.py(527):         for import_spec in plugins:
0.19 __init__.py(331):         return ret
0.19 __init__.py(167):     for spec in default_plugins:
0.19 __init__.py(168):         pluginmanager.import_plugin(spec)
0.19 __init__.py(539):         assert isinstance(modname, str), (
0.19 __init__.py(542):         modname = str(modname)
0.19 __init__.py(543):         if self.is_blocked(modname) or self.get_plugin(modname) is not None:
0.19 __init__.py(546):         importspec = "_pytest." + modname if modname in builtin_plugins else modname
0.19 __init__.py(547):         self.rewrite_hook.mark_rewrite(importspec)
0.19 __init__.py(549):         if consider_entry_points:
0.19 __init__.py(554):         try:
0.19 __init__.py(555):             __import__(importspec)
0.20 __init__.py(574):             mod = sys.modules[importspec]
0.20 __init__.py(575):             self.register(mod, modname)
0.20 __init__.py(313):         if name in _pytest.deprecated.DEPRECATED_EXTERNAL_PLUGINS:
0.20 __init__.py(323):         ret = super().register(plugin, name)
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(271):             return
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(271):             return
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(271):             return
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(271):             return
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(271):             return
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(271):             return
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(271):             return
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(271):             return
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(271):             return
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(271):             return
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(271):             return
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(271):             return
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(271):             return
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(271):             return
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(271):             return
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(271):             return
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(271):             return
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(271):             return
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(271):             return
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(271):             return
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(271):             return
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(271):             return
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(273):         if name == "pytest_plugins":
0.20 __init__.py(276):         method = getattr(plugin, name)
0.20 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.20 __init__.py(280):         if not inspect.isroutine(method):
0.20 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.20 __init__.py(285):             opts = {}
0.20 __init__.py(286):         if opts is not None:
0.20 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.20 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(293):         return opts
0.20 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.20 __init__.py(774):             self._opt2dest[name] = opt.dest
0.20 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.20 __init__.py(774):             self._opt2dest[name] = opt.dest
0.20 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.20 __init__.py(776):         if hasattr(opt, "default") and opt.dest:
0.20 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.20 __init__.py(774):             self._opt2dest[name] = opt.dest
0.20 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.20 __init__.py(774):             self._opt2dest[name] = opt.dest
0.20 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.20 __init__.py(776):         if hasattr(opt, "default") and opt.dest:
0.20 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.20 __init__.py(774):             self._opt2dest[name] = opt.dest
0.20 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.20 __init__.py(774):             self._opt2dest[name] = opt.dest
0.20 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.20 __init__.py(776):         if hasattr(opt, "default") and opt.dest:
0.20 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.20 __init__.py(774):             self._opt2dest[name] = opt.dest
0.20 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.20 __init__.py(776):         if hasattr(opt, "default") and opt.dest:
0.20 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.20 __init__.py(774):             self._opt2dest[name] = opt.dest
0.20 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.20 __init__.py(776):         if hasattr(opt, "default") and opt.dest:
0.20 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.20 __init__.py(774):             self._opt2dest[name] = opt.dest
0.20 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.20 __init__.py(774):             self._opt2dest[name] = opt.dest
0.20 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.20 __init__.py(776):         if hasattr(opt, "default") and opt.dest:
0.20 __init__.py(777):             if not hasattr(self.option, opt.dest):
0.20 __init__.py(778):                 setattr(self.option, opt.dest, opt.default)
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(273):         if name == "pytest_plugins":
0.20 __init__.py(276):         method = getattr(plugin, name)
0.20 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.20 __init__.py(280):         if not inspect.isroutine(method):
0.20 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.20 __init__.py(285):             opts = {}
0.20 __init__.py(286):         if opts is not None:
0.20 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.20 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(293):         return opts
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(273):         if name == "pytest_plugins":
0.20 __init__.py(276):         method = getattr(plugin, name)
0.20 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.20 __init__.py(280):         if not inspect.isroutine(method):
0.20 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.20 __init__.py(286):         if opts is not None:
0.20 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.20 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(293):         return opts
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(273):         if name == "pytest_plugins":
0.20 __init__.py(276):         method = getattr(plugin, name)
0.20 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.20 __init__.py(280):         if not inspect.isroutine(method):
0.20 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.20 __init__.py(285):             opts = {}
0.20 __init__.py(286):         if opts is not None:
0.20 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.20 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(293):         return opts
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(271):             return
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(271):             return
0.20 __init__.py(324):         if ret:
0.20 __init__.py(325):             self.hook.pytest_plugin_registered.call_historic(
0.20 __init__.py(326):                 kwargs=dict(plugin=plugin, manager=self)
0.20 __init__.py(325):             self.hook.pytest_plugin_registered.call_historic(
0.20 __init__.py(329):             if isinstance(plugin, types.ModuleType):
0.20 __init__.py(330):                 self.consider_module(plugin)
0.20 __init__.py(523):         self._import_plugin_specs(getattr(mod, "pytest_plugins", []))
0.20 __init__.py(526):         plugins = _get_plugin_specs_as_list(spec)
0.20 __init__.py(586):     if specs is not None and not isinstance(specs, types.ModuleType):
0.20 __init__.py(587):         if isinstance(specs, str):
0.20 __init__.py(589):         if not isinstance(specs, (list, tuple)):
0.20 __init__.py(594):         return list(specs)
0.20 __init__.py(527):         for import_spec in plugins:
0.20 __init__.py(331):         return ret
0.20 __init__.py(167):     for spec in default_plugins:
0.20 __init__.py(168):         pluginmanager.import_plugin(spec)
0.20 __init__.py(539):         assert isinstance(modname, str), (
0.20 __init__.py(542):         modname = str(modname)
0.20 __init__.py(543):         if self.is_blocked(modname) or self.get_plugin(modname) is not None:
0.20 __init__.py(546):         importspec = "_pytest." + modname if modname in builtin_plugins else modname
0.20 __init__.py(547):         self.rewrite_hook.mark_rewrite(importspec)
0.20 __init__.py(549):         if consider_entry_points:
0.20 __init__.py(554):         try:
0.20 __init__.py(555):             __import__(importspec)
0.20 __init__.py(574):             mod = sys.modules[importspec]
0.20 __init__.py(575):             self.register(mod, modname)
0.20 __init__.py(313):         if name in _pytest.deprecated.DEPRECATED_EXTERNAL_PLUGINS:
0.20 __init__.py(323):         ret = super().register(plugin, name)
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(271):             return
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(271):             return
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(271):             return
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(271):             return
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(271):             return
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(271):             return
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(271):             return
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(271):             return
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(271):             return
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(271):             return
0.20 __init__.py(324):         if ret:
0.20 __init__.py(325):             self.hook.pytest_plugin_registered.call_historic(
0.20 __init__.py(326):                 kwargs=dict(plugin=plugin, manager=self)
0.20 __init__.py(325):             self.hook.pytest_plugin_registered.call_historic(
0.20 __init__.py(329):             if isinstance(plugin, types.ModuleType):
0.20 __init__.py(330):                 self.consider_module(plugin)
0.20 __init__.py(523):         self._import_plugin_specs(getattr(mod, "pytest_plugins", []))
0.20 __init__.py(526):         plugins = _get_plugin_specs_as_list(spec)
0.20 __init__.py(586):     if specs is not None and not isinstance(specs, types.ModuleType):
0.20 __init__.py(587):         if isinstance(specs, str):
0.20 __init__.py(589):         if not isinstance(specs, (list, tuple)):
0.20 __init__.py(594):         return list(specs)
0.20 __init__.py(527):         for import_spec in plugins:
0.20 __init__.py(331):         return ret
0.20 __init__.py(167):     for spec in default_plugins:
0.20 __init__.py(168):         pluginmanager.import_plugin(spec)
0.20 __init__.py(539):         assert isinstance(modname, str), (
0.20 __init__.py(542):         modname = str(modname)
0.20 __init__.py(543):         if self.is_blocked(modname) or self.get_plugin(modname) is not None:
0.20 __init__.py(546):         importspec = "_pytest." + modname if modname in builtin_plugins else modname
0.20 __init__.py(547):         self.rewrite_hook.mark_rewrite(importspec)
0.20 __init__.py(549):         if consider_entry_points:
0.20 __init__.py(554):         try:
0.20 __init__.py(555):             __import__(importspec)
0.20 __init__.py(574):             mod = sys.modules[importspec]
0.20 __init__.py(575):             self.register(mod, modname)
0.20 __init__.py(313):         if name in _pytest.deprecated.DEPRECATED_EXTERNAL_PLUGINS:
0.20 __init__.py(323):         ret = super().register(plugin, name)
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(271):             return
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(271):             return
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(271):             return
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(271):             return
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(271):             return
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(271):             return
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(271):             return
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(271):             return
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(271):             return
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(271):             return
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(273):         if name == "pytest_plugins":
0.20 __init__.py(276):         method = getattr(plugin, name)
0.20 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.20 __init__.py(280):         if not inspect.isroutine(method):
0.20 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.20 __init__.py(285):             opts = {}
0.20 __init__.py(286):         if opts is not None:
0.20 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.20 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(293):         return opts
0.20 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.20 __init__.py(774):             self._opt2dest[name] = opt.dest
0.20 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.20 __init__.py(774):             self._opt2dest[name] = opt.dest
0.20 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.20 __init__.py(776):         if hasattr(opt, "default") and opt.dest:
0.20 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.20 __init__.py(774):             self._opt2dest[name] = opt.dest
0.20 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.20 __init__.py(774):             self._opt2dest[name] = opt.dest
0.20 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.20 __init__.py(776):         if hasattr(opt, "default") and opt.dest:
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(273):         if name == "pytest_plugins":
0.20 __init__.py(276):         method = getattr(plugin, name)
0.20 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.20 __init__.py(280):         if not inspect.isroutine(method):
0.20 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.20 __init__.py(286):         if opts is not None:
0.20 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.20 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(293):         return opts
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(273):         if name == "pytest_plugins":
0.20 __init__.py(276):         method = getattr(plugin, name)
0.20 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.20 __init__.py(280):         if not inspect.isroutine(method):
0.20 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.20 __init__.py(285):             opts = {}
0.20 __init__.py(286):         if opts is not None:
0.20 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.20 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(293):         return opts
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(273):         if name == "pytest_plugins":
0.20 __init__.py(276):         method = getattr(plugin, name)
0.20 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.20 __init__.py(280):         if not inspect.isroutine(method):
0.20 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.20 __init__.py(286):         if opts is not None:
0.20 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.20 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(293):         return opts
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(271):             return
0.20 __init__.py(324):         if ret:
0.20 __init__.py(325):             self.hook.pytest_plugin_registered.call_historic(
0.20 __init__.py(326):                 kwargs=dict(plugin=plugin, manager=self)
0.20 __init__.py(325):             self.hook.pytest_plugin_registered.call_historic(
0.20 __init__.py(329):             if isinstance(plugin, types.ModuleType):
0.20 __init__.py(330):                 self.consider_module(plugin)
0.20 __init__.py(523):         self._import_plugin_specs(getattr(mod, "pytest_plugins", []))
0.20 __init__.py(526):         plugins = _get_plugin_specs_as_list(spec)
0.20 __init__.py(586):     if specs is not None and not isinstance(specs, types.ModuleType):
0.20 __init__.py(587):         if isinstance(specs, str):
0.20 __init__.py(589):         if not isinstance(specs, (list, tuple)):
0.20 __init__.py(594):         return list(specs)
0.20 __init__.py(527):         for import_spec in plugins:
0.20 __init__.py(331):         return ret
0.20 __init__.py(167):     for spec in default_plugins:
0.20 __init__.py(168):         pluginmanager.import_plugin(spec)
0.20 __init__.py(539):         assert isinstance(modname, str), (
0.20 __init__.py(542):         modname = str(modname)
0.20 __init__.py(543):         if self.is_blocked(modname) or self.get_plugin(modname) is not None:
0.20 __init__.py(546):         importspec = "_pytest." + modname if modname in builtin_plugins else modname
0.20 __init__.py(547):         self.rewrite_hook.mark_rewrite(importspec)
0.20 __init__.py(549):         if consider_entry_points:
0.20 __init__.py(554):         try:
0.20 __init__.py(555):             __import__(importspec)
0.20 __init__.py(574):             mod = sys.modules[importspec]
0.20 __init__.py(575):             self.register(mod, modname)
0.20 __init__.py(313):         if name in _pytest.deprecated.DEPRECATED_EXTERNAL_PLUGINS:
0.20 __init__.py(323):         ret = super().register(plugin, name)
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(271):             return
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(271):             return
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(271):             return
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(271):             return
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(271):             return
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(271):             return
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(271):             return
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(271):             return
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(271):             return
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(273):         if name == "pytest_plugins":
0.20 __init__.py(276):         method = getattr(plugin, name)
0.20 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.20 __init__.py(280):         if not inspect.isroutine(method):
0.20 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.20 __init__.py(285):             opts = {}
0.20 __init__.py(286):         if opts is not None:
0.20 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.20 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(293):         return opts
0.20 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.20 __init__.py(774):             self._opt2dest[name] = opt.dest
0.20 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.20 __init__.py(774):             self._opt2dest[name] = opt.dest
0.20 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.20 __init__.py(776):         if hasattr(opt, "default") and opt.dest:
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(273):         if name == "pytest_plugins":
0.20 __init__.py(276):         method = getattr(plugin, name)
0.20 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.20 __init__.py(280):         if not inspect.isroutine(method):
0.20 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.20 __init__.py(286):         if opts is not None:
0.20 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.20 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(293):         return opts
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(273):         if name == "pytest_plugins":
0.20 __init__.py(276):         method = getattr(plugin, name)
0.20 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.20 __init__.py(280):         if not inspect.isroutine(method):
0.20 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.20 __init__.py(286):         if opts is not None:
0.20 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.20 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(293):         return opts
0.20 __init__.py(324):         if ret:
0.20 __init__.py(325):             self.hook.pytest_plugin_registered.call_historic(
0.20 __init__.py(326):                 kwargs=dict(plugin=plugin, manager=self)
0.20 __init__.py(325):             self.hook.pytest_plugin_registered.call_historic(
0.20 __init__.py(329):             if isinstance(plugin, types.ModuleType):
0.20 __init__.py(330):                 self.consider_module(plugin)
0.20 __init__.py(523):         self._import_plugin_specs(getattr(mod, "pytest_plugins", []))
0.20 __init__.py(526):         plugins = _get_plugin_specs_as_list(spec)
0.20 __init__.py(586):     if specs is not None and not isinstance(specs, types.ModuleType):
0.20 __init__.py(587):         if isinstance(specs, str):
0.20 __init__.py(589):         if not isinstance(specs, (list, tuple)):
0.20 __init__.py(594):         return list(specs)
0.20 __init__.py(527):         for import_spec in plugins:
0.20 __init__.py(331):         return ret
0.20 __init__.py(167):     for spec in default_plugins:
0.20 __init__.py(168):         pluginmanager.import_plugin(spec)
0.20 __init__.py(539):         assert isinstance(modname, str), (
0.20 __init__.py(542):         modname = str(modname)
0.20 __init__.py(543):         if self.is_blocked(modname) or self.get_plugin(modname) is not None:
0.20 __init__.py(546):         importspec = "_pytest." + modname if modname in builtin_plugins else modname
0.20 __init__.py(547):         self.rewrite_hook.mark_rewrite(importspec)
0.20 __init__.py(549):         if consider_entry_points:
0.20 __init__.py(554):         try:
0.20 __init__.py(555):             __import__(importspec)
0.20 __init__.py(574):             mod = sys.modules[importspec]
0.20 __init__.py(575):             self.register(mod, modname)
0.20 __init__.py(313):         if name in _pytest.deprecated.DEPRECATED_EXTERNAL_PLUGINS:
0.20 __init__.py(323):         ret = super().register(plugin, name)
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(271):             return
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(271):             return
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(271):             return
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(271):             return
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(271):             return
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(271):             return
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(271):             return
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(271):             return
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(271):             return
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(271):             return
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(273):         if name == "pytest_plugins":
0.20 __init__.py(276):         method = getattr(plugin, name)
0.20 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.20 __init__.py(280):         if not inspect.isroutine(method):
0.20 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.20 __init__.py(285):             opts = {}
0.20 __init__.py(286):         if opts is not None:
0.20 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.20 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(293):         return opts
0.20 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.20 __init__.py(774):             self._opt2dest[name] = opt.dest
0.20 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.20 __init__.py(774):             self._opt2dest[name] = opt.dest
0.20 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.20 __init__.py(776):         if hasattr(opt, "default") and opt.dest:
0.20 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.20 __init__.py(774):             self._opt2dest[name] = opt.dest
0.20 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.20 __init__.py(776):         if hasattr(opt, "default") and opt.dest:
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(273):         if name == "pytest_plugins":
0.20 __init__.py(276):         method = getattr(plugin, name)
0.20 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.20 __init__.py(280):         if not inspect.isroutine(method):
0.20 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.20 __init__.py(286):         if opts is not None:
0.20 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.20 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(293):         return opts
0.20 __init__.py(324):         if ret:
0.20 __init__.py(325):             self.hook.pytest_plugin_registered.call_historic(
0.20 __init__.py(326):                 kwargs=dict(plugin=plugin, manager=self)
0.20 __init__.py(325):             self.hook.pytest_plugin_registered.call_historic(
0.20 __init__.py(329):             if isinstance(plugin, types.ModuleType):
0.20 __init__.py(330):                 self.consider_module(plugin)
0.20 __init__.py(523):         self._import_plugin_specs(getattr(mod, "pytest_plugins", []))
0.20 __init__.py(526):         plugins = _get_plugin_specs_as_list(spec)
0.20 __init__.py(586):     if specs is not None and not isinstance(specs, types.ModuleType):
0.20 __init__.py(587):         if isinstance(specs, str):
0.20 __init__.py(589):         if not isinstance(specs, (list, tuple)):
0.20 __init__.py(594):         return list(specs)
0.20 __init__.py(527):         for import_spec in plugins:
0.20 __init__.py(331):         return ret
0.20 __init__.py(167):     for spec in default_plugins:
0.20 __init__.py(168):         pluginmanager.import_plugin(spec)
0.20 __init__.py(539):         assert isinstance(modname, str), (
0.20 __init__.py(542):         modname = str(modname)
0.20 __init__.py(543):         if self.is_blocked(modname) or self.get_plugin(modname) is not None:
0.20 __init__.py(546):         importspec = "_pytest." + modname if modname in builtin_plugins else modname
0.20 __init__.py(547):         self.rewrite_hook.mark_rewrite(importspec)
0.20 __init__.py(549):         if consider_entry_points:
0.20 __init__.py(554):         try:
0.20 __init__.py(555):             __import__(importspec)
0.20 __init__.py(574):             mod = sys.modules[importspec]
0.20 __init__.py(575):             self.register(mod, modname)
0.20 __init__.py(313):         if name in _pytest.deprecated.DEPRECATED_EXTERNAL_PLUGINS:
0.20 __init__.py(323):         ret = super().register(plugin, name)
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(271):             return
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(271):             return
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(271):             return
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(271):             return
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(271):             return
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(271):             return
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(271):             return
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(271):             return
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(271):             return
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(271):             return
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(271):             return
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(271):             return
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(271):             return
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(273):         if name == "pytest_plugins":
0.20 __init__.py(276):         method = getattr(plugin, name)
0.20 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.20 __init__.py(280):         if not inspect.isroutine(method):
0.20 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.20 __init__.py(285):             opts = {}
0.20 __init__.py(286):         if opts is not None:
0.20 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.20 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(293):         return opts
0.20 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.20 __init__.py(774):             self._opt2dest[name] = opt.dest
0.20 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.20 __init__.py(774):             self._opt2dest[name] = opt.dest
0.20 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.20 __init__.py(776):         if hasattr(opt, "default") and opt.dest:
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(273):         if name == "pytest_plugins":
0.20 __init__.py(276):         method = getattr(plugin, name)
0.20 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.20 __init__.py(280):         if not inspect.isroutine(method):
0.20 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.20 __init__.py(286):         if opts is not None:
0.20 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.20 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(293):         return opts
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(273):         if name == "pytest_plugins":
0.20 __init__.py(276):         method = getattr(plugin, name)
0.20 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.20 __init__.py(280):         if not inspect.isroutine(method):
0.20 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.20 __init__.py(285):             opts = {}
0.20 __init__.py(286):         if opts is not None:
0.20 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.20 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(293):         return opts
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(273):         if name == "pytest_plugins":
0.20 __init__.py(276):         method = getattr(plugin, name)
0.20 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.20 __init__.py(280):         if not inspect.isroutine(method):
0.20 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.20 __init__.py(286):         if opts is not None:
0.20 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.20 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(293):         return opts
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(273):         if name == "pytest_plugins":
0.20 __init__.py(276):         method = getattr(plugin, name)
0.20 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.20 __init__.py(280):         if not inspect.isroutine(method):
0.20 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.20 __init__.py(286):         if opts is not None:
0.20 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.20 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.20 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.20 __init__.py(293):         return opts
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(271):             return
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(271):             return
0.20 __init__.py(270):         if not name.startswith("pytest_"):
0.20 __init__.py(271):             return
0.20 __init__.py(324):         if ret:
0.20 __init__.py(325):             self.hook.pytest_plugin_registered.call_historic(
0.20 __init__.py(326):                 kwargs=dict(plugin=plugin, manager=self)
0.20 __init__.py(325):             self.hook.pytest_plugin_registered.call_historic(
0.20 __init__.py(329):             if isinstance(plugin, types.ModuleType):
0.20 __init__.py(330):                 self.consider_module(plugin)
0.20 __init__.py(523):         self._import_plugin_specs(getattr(mod, "pytest_plugins", []))
0.20 __init__.py(526):         plugins = _get_plugin_specs_as_list(spec)
0.20 __init__.py(586):     if specs is not None and not isinstance(specs, types.ModuleType):
0.20 __init__.py(587):         if isinstance(specs, str):
0.20 __init__.py(589):         if not isinstance(specs, (list, tuple)):
0.20 __init__.py(594):         return list(specs)
0.20 __init__.py(527):         for import_spec in plugins:
0.20 __init__.py(331):         return ret
0.20 __init__.py(167):     for spec in default_plugins:
0.20 __init__.py(168):         pluginmanager.import_plugin(spec)
0.20 __init__.py(539):         assert isinstance(modname, str), (
0.20 __init__.py(542):         modname = str(modname)
0.20 __init__.py(543):         if self.is_blocked(modname) or self.get_plugin(modname) is not None:
0.20 __init__.py(546):         importspec = "_pytest." + modname if modname in builtin_plugins else modname
0.20 __init__.py(547):         self.rewrite_hook.mark_rewrite(importspec)
0.20 __init__.py(549):         if consider_entry_points:
0.20 __init__.py(554):         try:
0.20 __init__.py(555):             __import__(importspec)
0.21 __init__.py(574):             mod = sys.modules[importspec]
0.21 __init__.py(575):             self.register(mod, modname)
0.21 __init__.py(313):         if name in _pytest.deprecated.DEPRECATED_EXTERNAL_PLUGINS:
0.21 __init__.py(323):         ret = super().register(plugin, name)
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(271):             return
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(271):             return
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(271):             return
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(271):             return
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(271):             return
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(271):             return
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(271):             return
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(271):             return
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(271):             return
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(271):             return
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(271):             return
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(271):             return
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(271):             return
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(271):             return
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(271):             return
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(271):             return
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(271):             return
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(271):             return
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(271):             return
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(271):             return
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(271):             return
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(271):             return
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(271):             return
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(271):             return
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(271):             return
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(271):             return
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(271):             return
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(271):             return
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(271):             return
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(273):         if name == "pytest_plugins":
0.21 __init__.py(276):         method = getattr(plugin, name)
0.21 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.21 __init__.py(280):         if not inspect.isroutine(method):
0.21 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.21 __init__.py(285):             opts = {}
0.21 __init__.py(286):         if opts is not None:
0.21 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.21 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.21 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.21 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.21 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.21 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.21 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.21 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.21 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.21 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.21 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.21 __init__.py(293):         return opts
0.21 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.21 __init__.py(774):             self._opt2dest[name] = opt.dest
0.21 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.21 __init__.py(776):         if hasattr(opt, "default") and opt.dest:
0.21 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.21 __init__.py(774):             self._opt2dest[name] = opt.dest
0.21 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.21 __init__.py(776):         if hasattr(opt, "default") and opt.dest:
0.21 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.21 __init__.py(774):             self._opt2dest[name] = opt.dest
0.21 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.21 __init__.py(776):         if hasattr(opt, "default") and opt.dest:
0.21 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.21 __init__.py(774):             self._opt2dest[name] = opt.dest
0.21 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.21 __init__.py(776):         if hasattr(opt, "default") and opt.dest:
0.21 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.21 __init__.py(774):             self._opt2dest[name] = opt.dest
0.21 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.21 __init__.py(776):         if hasattr(opt, "default") and opt.dest:
0.21 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.21 __init__.py(774):             self._opt2dest[name] = opt.dest
0.21 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.21 __init__.py(776):         if hasattr(opt, "default") and opt.dest:
0.21 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.21 __init__.py(774):             self._opt2dest[name] = opt.dest
0.21 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.21 __init__.py(776):         if hasattr(opt, "default") and opt.dest:
0.21 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.21 __init__.py(774):             self._opt2dest[name] = opt.dest
0.21 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.21 __init__.py(776):         if hasattr(opt, "default") and opt.dest:
0.21 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.21 __init__.py(774):             self._opt2dest[name] = opt.dest
0.21 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.21 __init__.py(776):         if hasattr(opt, "default") and opt.dest:
0.21 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.21 __init__.py(774):             self._opt2dest[name] = opt.dest
0.21 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.21 __init__.py(776):         if hasattr(opt, "default") and opt.dest:
0.21 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.21 __init__.py(774):             self._opt2dest[name] = opt.dest
0.21 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.21 __init__.py(776):         if hasattr(opt, "default") and opt.dest:
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(273):         if name == "pytest_plugins":
0.21 __init__.py(276):         method = getattr(plugin, name)
0.21 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.21 __init__.py(280):         if not inspect.isroutine(method):
0.21 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.21 __init__.py(286):         if opts is not None:
0.21 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.21 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.21 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.21 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.21 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.21 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.21 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.21 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.21 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.21 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.21 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.21 __init__.py(293):         return opts
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(271):             return
0.21 __init__.py(324):         if ret:
0.21 __init__.py(325):             self.hook.pytest_plugin_registered.call_historic(
0.21 __init__.py(326):                 kwargs=dict(plugin=plugin, manager=self)
0.21 __init__.py(325):             self.hook.pytest_plugin_registered.call_historic(
0.21 __init__.py(329):             if isinstance(plugin, types.ModuleType):
0.21 __init__.py(330):                 self.consider_module(plugin)
0.21 __init__.py(523):         self._import_plugin_specs(getattr(mod, "pytest_plugins", []))
0.21 __init__.py(526):         plugins = _get_plugin_specs_as_list(spec)
0.21 __init__.py(586):     if specs is not None and not isinstance(specs, types.ModuleType):
0.21 __init__.py(587):         if isinstance(specs, str):
0.21 __init__.py(589):         if not isinstance(specs, (list, tuple)):
0.21 __init__.py(594):         return list(specs)
0.21 __init__.py(527):         for import_spec in plugins:
0.21 __init__.py(331):         return ret
0.21 __init__.py(167):     for spec in default_plugins:
0.21 __init__.py(168):         pluginmanager.import_plugin(spec)
0.21 __init__.py(539):         assert isinstance(modname, str), (
0.21 __init__.py(542):         modname = str(modname)
0.21 __init__.py(543):         if self.is_blocked(modname) or self.get_plugin(modname) is not None:
0.21 __init__.py(546):         importspec = "_pytest." + modname if modname in builtin_plugins else modname
0.21 __init__.py(547):         self.rewrite_hook.mark_rewrite(importspec)
0.21 __init__.py(549):         if consider_entry_points:
0.21 __init__.py(554):         try:
0.21 __init__.py(555):             __import__(importspec)
0.21 __init__.py(574):             mod = sys.modules[importspec]
0.21 __init__.py(575):             self.register(mod, modname)
0.21 __init__.py(313):         if name in _pytest.deprecated.DEPRECATED_EXTERNAL_PLUGINS:
0.21 __init__.py(323):         ret = super().register(plugin, name)
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(271):             return
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(271):             return
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(271):             return
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(271):             return
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(271):             return
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(271):             return
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(271):             return
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(271):             return
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(271):             return
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(271):             return
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(271):             return
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(271):             return
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(271):             return
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(271):             return
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(271):             return
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(271):             return
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(271):             return
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(271):             return
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(271):             return
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(271):             return
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(271):             return
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(271):             return
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(271):             return
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(271):             return
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(271):             return
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(271):             return
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(271):             return
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(271):             return
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(271):             return
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(271):             return
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(273):         if name == "pytest_plugins":
0.21 __init__.py(276):         method = getattr(plugin, name)
0.21 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.21 __init__.py(280):         if not inspect.isroutine(method):
0.21 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.21 __init__.py(285):             opts = {}
0.21 __init__.py(286):         if opts is not None:
0.21 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.21 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.21 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.21 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.21 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.21 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.21 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.21 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.21 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.21 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.21 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.21 __init__.py(293):         return opts
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(273):         if name == "pytest_plugins":
0.21 __init__.py(276):         method = getattr(plugin, name)
0.21 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.21 __init__.py(280):         if not inspect.isroutine(method):
0.21 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.21 __init__.py(285):             opts = {}
0.21 __init__.py(286):         if opts is not None:
0.21 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.21 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.21 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.21 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.21 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.21 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.21 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.21 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.21 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.21 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.21 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.21 __init__.py(293):         return opts
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(271):             return
0.21 __init__.py(324):         if ret:
0.21 __init__.py(325):             self.hook.pytest_plugin_registered.call_historic(
0.21 __init__.py(326):                 kwargs=dict(plugin=plugin, manager=self)
0.21 __init__.py(325):             self.hook.pytest_plugin_registered.call_historic(
0.21 __init__.py(329):             if isinstance(plugin, types.ModuleType):
0.21 __init__.py(330):                 self.consider_module(plugin)
0.21 __init__.py(523):         self._import_plugin_specs(getattr(mod, "pytest_plugins", []))
0.21 __init__.py(526):         plugins = _get_plugin_specs_as_list(spec)
0.21 __init__.py(586):     if specs is not None and not isinstance(specs, types.ModuleType):
0.21 __init__.py(587):         if isinstance(specs, str):
0.21 __init__.py(589):         if not isinstance(specs, (list, tuple)):
0.21 __init__.py(594):         return list(specs)
0.21 __init__.py(527):         for import_spec in plugins:
0.21 __init__.py(331):         return ret
0.21 __init__.py(167):     for spec in default_plugins:
0.21 __init__.py(168):         pluginmanager.import_plugin(spec)
0.21 __init__.py(539):         assert isinstance(modname, str), (
0.21 __init__.py(542):         modname = str(modname)
0.21 __init__.py(543):         if self.is_blocked(modname) or self.get_plugin(modname) is not None:
0.21 __init__.py(546):         importspec = "_pytest." + modname if modname in builtin_plugins else modname
0.21 __init__.py(547):         self.rewrite_hook.mark_rewrite(importspec)
0.21 __init__.py(549):         if consider_entry_points:
0.21 __init__.py(554):         try:
0.21 __init__.py(555):             __import__(importspec)
0.21 __init__.py(574):             mod = sys.modules[importspec]
0.21 __init__.py(575):             self.register(mod, modname)
0.21 __init__.py(313):         if name in _pytest.deprecated.DEPRECATED_EXTERNAL_PLUGINS:
0.21 __init__.py(323):         ret = super().register(plugin, name)
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(271):             return
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(271):             return
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(271):             return
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(271):             return
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(271):             return
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(271):             return
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(271):             return
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(271):             return
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(271):             return
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(271):             return
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(271):             return
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(271):             return
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(273):         if name == "pytest_plugins":
0.21 __init__.py(276):         method = getattr(plugin, name)
0.21 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.21 __init__.py(280):         if not inspect.isroutine(method):
0.21 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.21 __init__.py(285):             opts = {}
0.21 __init__.py(286):         if opts is not None:
0.21 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.21 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.21 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.21 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.21 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.21 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.21 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.21 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.21 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.21 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.21 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.21 __init__.py(293):         return opts
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(273):         if name == "pytest_plugins":
0.21 __init__.py(276):         method = getattr(plugin, name)
0.21 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.21 __init__.py(280):         if not inspect.isroutine(method):
0.21 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.21 __init__.py(285):             opts = {}
0.21 __init__.py(286):         if opts is not None:
0.21 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.21 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.21 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.21 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.21 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.21 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.21 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.21 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.21 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.21 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.21 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.21 __init__.py(293):         return opts
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(273):         if name == "pytest_plugins":
0.21 __init__.py(276):         method = getattr(plugin, name)
0.21 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.21 __init__.py(280):         if not inspect.isroutine(method):
0.21 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.21 __init__.py(286):         if opts is not None:
0.21 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.21 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.21 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.21 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.21 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.21 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.21 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.21 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.21 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.21 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.21 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.21 __init__.py(293):         return opts
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(273):         if name == "pytest_plugins":
0.21 __init__.py(276):         method = getattr(plugin, name)
0.21 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.21 __init__.py(280):         if not inspect.isroutine(method):
0.21 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.21 __init__.py(286):         if opts is not None:
0.21 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.21 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.21 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.21 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.21 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.21 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.21 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.21 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.21 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.21 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.21 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.21 __init__.py(293):         return opts
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(273):         if name == "pytest_plugins":
0.21 __init__.py(276):         method = getattr(plugin, name)
0.21 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.21 __init__.py(280):         if not inspect.isroutine(method):
0.21 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.21 __init__.py(286):         if opts is not None:
0.21 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.21 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.21 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.21 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.21 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.21 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.21 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.21 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.21 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.21 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.21 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.21 __init__.py(293):         return opts
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(273):         if name == "pytest_plugins":
0.21 __init__.py(276):         method = getattr(plugin, name)
0.21 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.21 __init__.py(280):         if not inspect.isroutine(method):
0.21 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.21 __init__.py(285):             opts = {}
0.21 __init__.py(286):         if opts is not None:
0.21 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.21 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.21 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.21 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.21 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.21 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.21 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.21 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.21 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.21 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.21 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.21 __init__.py(293):         return opts
0.21 __init__.py(270):         if not name.startswith("pytest_"):
0.21 __init__.py(271):             return
0.21 __init__.py(324):         if ret:
0.21 __init__.py(325):             self.hook.pytest_plugin_registered.call_historic(
0.21 __init__.py(326):                 kwargs=dict(plugin=plugin, manager=self)
0.21 __init__.py(325):             self.hook.pytest_plugin_registered.call_historic(
0.21 __init__.py(329):             if isinstance(plugin, types.ModuleType):
0.21 __init__.py(330):                 self.consider_module(plugin)
0.21 __init__.py(523):         self._import_plugin_specs(getattr(mod, "pytest_plugins", []))
0.21 __init__.py(526):         plugins = _get_plugin_specs_as_list(spec)
0.21 __init__.py(586):     if specs is not None and not isinstance(specs, types.ModuleType):
0.21 __init__.py(587):         if isinstance(specs, str):
0.21 __init__.py(589):         if not isinstance(specs, (list, tuple)):
0.21 __init__.py(594):         return list(specs)
0.21 __init__.py(527):         for import_spec in plugins:
0.21 __init__.py(331):         return ret
0.21 __init__.py(167):     for spec in default_plugins:
0.21 __init__.py(169):     return config
0.21 __init__.py(195):     pluginmanager = config.pluginmanager
0.21 __init__.py(196):     try:
0.21 __init__.py(197):         if plugins:
0.21 __init__.py(203):         if warning:
0.21 __init__.py(207):         return pluginmanager.hook.pytest_cmdline_parse(
0.21 __init__.py(208):             pluginmanager=pluginmanager, args=args
0.21 __init__.py(207):         return pluginmanager.hook.pytest_cmdline_parse(
0.21 __init__.py(718):         try:
0.21 __init__.py(719):             self.parse(args)
0.21 __init__.py(920):         assert not hasattr(
0.21 __init__.py(921):             self, "args"
0.21 __init__.py(920):         assert not hasattr(
0.21 __init__.py(923):         assert self.invocation_params.args == args
0.21 __init__.py(924):         self.hook.pytest_addhooks.call_historic(
0.21 __init__.py(925):             kwargs=dict(pluginmanager=self.pluginmanager)
0.21 __init__.py(924):         self.hook.pytest_addhooks.call_historic(
0.21 __init__.py(927):         self._preparse(args, addopts=addopts)
0.21 __init__.py(854):         if addopts:
0.21 __init__.py(855):             env_addopts = os.environ.get("PYTEST_ADDOPTS", "")
0.21 __init__.py(856):             if len(env_addopts):
0.21 __init__.py(861):         self._initini(args)
0.21 __init__.py(785):         ns, unknown_args = self._parser.parse_known_and_unknown_args(
0.21 __init__.py(786):             args, namespace=copy.copy(self.option)
0.21 __init__.py(785):         ns, unknown_args = self._parser.parse_known_and_unknown_args(
0.21 __init__.py(788):         r = determine_setup(
0.21 __init__.py(789):             ns.inifilename,
0.21 __init__.py(790):             ns.file_or_dir + unknown_args,
0.21 __init__.py(791):             rootdir_cmd_arg=ns.rootdir or None,
0.21 __init__.py(792):             config=self,
0.21 __init__.py(788):         r = determine_setup(
0.21 __init__.py(794):         self.rootdir, self.inifile, self.inicfg = r
0.21 __init__.py(795):         self._parser.extra_info["rootdir"] = self.rootdir
0.21 __init__.py(796):         self._parser.extra_info["inifile"] = self.inifile
0.21 __init__.py(797):         self._parser.addini("addopts", "extra command line options", "args")
0.21 __init__.py(798):         self._parser.addini("minversion", "minimally required pytest version")
0.21 __init__.py(799):         self._override_ini = ns.override_ini or ()
0.21 __init__.py(862):         if addopts:
0.21 __init__.py(864):                 self._validate_args(self.getini("addopts"), "via addopts config") + args
0.21 __init__.py(957):         try:
0.21 __init__.py(958):             return self._inicache[name]
0.22 __init__.py(959):         except KeyError:
0.22 __init__.py(960):             self._inicache[name] = val = self._getini(name)
0.22 __init__.py(964):         try:
0.22 __init__.py(965):             description, type, default = self._parser._inidict[name]
0.22 __init__.py(968):         value = self._get_override_ini_value(name)
0.22 __init__.py(1009):         value = None
0.22 __init__.py(1013):         for ini_config in self._override_ini:
0.22 __init__.py(1021):         return value
0.22 __init__.py(969):         if value is None:
0.22 __init__.py(970):             try:
0.22 __init__.py(971):                 value = self.inicfg[name]
0.22 __init__.py(978):         if type == "pathlist":
0.22 __init__.py(984):         elif type == "args":
0.22 __init__.py(985):             return shlex.split(value)
0.22 __init__.py(961):             return val
0.22 __init__.py(843):         self._parser._config_source_hint = via
0.22 __init__.py(844):         try:
0.22 __init__.py(845):             self._parser.parse_known_and_unknown_args(
0.22 __init__.py(846):                 args, namespace=copy.copy(self.option)
0.22 __init__.py(845):             self._parser.parse_known_and_unknown_args(
0.22 __init__.py(849):             del self._parser._config_source_hint
0.22 __init__.py(851):         return args
0.22 __init__.py(863):             args[:] = (
0.22 __init__.py(867):         self._checkversion()
0.22 __init__.py(903):         import pytest
0.22 __init__.py(905):         minver = self.inicfg.get("minversion", None)
0.22 __init__.py(906):         if minver:
0.22 __init__.py(907):             if Version(minver) > Version(pytest.__version__):
0.22 __init__.py(868):         self._consider_importhook(args)
0.22 __init__.py(808):         ns, unknown_args = self._parser.parse_known_and_unknown_args(args)
0.22 __init__.py(809):         mode = getattr(ns, "assertmode", "plain")
0.22 __init__.py(810):         if mode == "rewrite":
0.22 __init__.py(811):             try:
0.22 __init__.py(812):                 hook = _pytest.assertion.install_importhook(self)
0.22 __init__.py(957):         try:
0.22 __init__.py(958):             return self._inicache[name]
0.22 __init__.py(959):         except KeyError:
0.22 __init__.py(960):             self._inicache[name] = val = self._getini(name)
0.22 __init__.py(964):         try:
0.22 __init__.py(965):             description, type, default = self._parser._inidict[name]
0.22 __init__.py(968):         value = self._get_override_ini_value(name)
0.22 __init__.py(1009):         value = None
0.22 __init__.py(1013):         for ini_config in self._override_ini:
0.22 __init__.py(1021):         return value
0.22 __init__.py(969):         if value is None:
0.22 __init__.py(970):             try:
0.22 __init__.py(971):                 value = self.inicfg[name]
0.22 __init__.py(978):         if type == "pathlist":
0.22 __init__.py(984):         elif type == "args":
0.22 __init__.py(985):             return shlex.split(value)
0.22 __init__.py(961):             return val
0.22 __init__.py(696):         self._cleanup.append(func)
0.22 __init__.py(816):                 self._mark_plugins_for_rewrite(hook)
0.22 __init__.py(825):         self.pluginmanager.rewrite_hook = hook
0.22 __init__.py(827):         if os.environ.get("PYTEST_DISABLE_PLUGIN_AUTOLOAD"):
0.22 __init__.py(831):         package_files = (
0.22 __init__.py(833):             for dist in importlib_metadata.distributions()
0.22 __init__.py(831):         package_files = (
0.22 __init__.py(838):         for name in _iter_rewritable_modules(package_files):
0.22 __init__.py(614):     for fn in package_files:
0.22 __init__.py(831):         package_files = (
0.22 __init__.py(833):             for dist in importlib_metadata.distributions()
0.22 __init__.py(834):             if any(ep.group == "pytest11" for ep in dist.entry_points)
0.22 __init__.py(834):             if any(ep.group == "pytest11" for ep in dist.entry_points)
0.22 __init__.py(831):         package_files = (
0.22 __init__.py(833):             for dist in importlib_metadata.distributions()
0.22 __init__.py(834):             if any(ep.group == "pytest11" for ep in dist.entry_points)
0.22 __init__.py(834):             if any(ep.group == "pytest11" for ep in dist.entry_points)
0.22 __init__.py(834):             if any(ep.group == "pytest11" for ep in dist.entry_points)
0.22 __init__.py(834):             if any(ep.group == "pytest11" for ep in dist.entry_points)
0.22 __init__.py(831):         package_files = (
0.22 __init__.py(833):             for dist in importlib_metadata.distributions()
0.22 __init__.py(834):             if any(ep.group == "pytest11" for ep in dist.entry_points)
0.22 __init__.py(834):             if any(ep.group == "pytest11" for ep in dist.entry_points)
0.22 __init__.py(831):         package_files = (
0.22 __init__.py(833):             for dist in importlib_metadata.distributions()
0.22 __init__.py(834):             if any(ep.group == "pytest11" for ep in dist.entry_points)
0.22 __init__.py(834):             if any(ep.group == "pytest11" for ep in dist.entry_points)
0.22 __init__.py(831):         package_files = (
0.22 __init__.py(833):             for dist in importlib_metadata.distributions()
0.22 __init__.py(834):             if any(ep.group == "pytest11" for ep in dist.entry_points)
0.22 __init__.py(834):             if any(ep.group == "pytest11" for ep in dist.entry_points)
0.22 __init__.py(831):         package_files = (
0.22 __init__.py(833):             for dist in importlib_metadata.distributions()
0.22 __init__.py(834):             if any(ep.group == "pytest11" for ep in dist.entry_points)
0.22 __init__.py(834):             if any(ep.group == "pytest11" for ep in dist.entry_points)
0.22 __init__.py(831):         package_files = (
0.22 __init__.py(833):             for dist in importlib_metadata.distributions()
0.22 __init__.py(834):             if any(ep.group == "pytest11" for ep in dist.entry_points)
0.22 __init__.py(834):             if any(ep.group == "pytest11" for ep in dist.entry_points)
0.22 __init__.py(834):             if any(ep.group == "pytest11" for ep in dist.entry_points)
0.22 __init__.py(834):             if any(ep.group == "pytest11" for ep in dist.entry_points)
0.22 __init__.py(831):         package_files = (
0.22 __init__.py(833):             for dist in importlib_metadata.distributions()
0.22 __init__.py(834):             if any(ep.group == "pytest11" for ep in dist.entry_points)
0.22 __init__.py(834):             if any(ep.group == "pytest11" for ep in dist.entry_points)
0.22 __init__.py(831):         package_files = (
0.22 __init__.py(833):             for dist in importlib_metadata.distributions()
0.22 __init__.py(834):             if any(ep.group == "pytest11" for ep in dist.entry_points)
0.22 __init__.py(834):             if any(ep.group == "pytest11" for ep in dist.entry_points)
0.22 __init__.py(834):             if any(ep.group == "pytest11" for ep in dist.entry_points)
0.22 __init__.py(834):             if any(ep.group == "pytest11" for ep in dist.entry_points)
0.22 __init__.py(834):             if any(ep.group == "pytest11" for ep in dist.entry_points)
0.22 __init__.py(834):             if any(ep.group == "pytest11" for ep in dist.entry_points)
0.22 __init__.py(834):             if any(ep.group == "pytest11" for ep in dist.entry_points)
0.22 __init__.py(834):             if any(ep.group == "pytest11" for ep in dist.entry_points)
0.22 __init__.py(834):             if any(ep.group == "pytest11" for ep in dist.entry_points)
0.22 __init__.py(834):             if any(ep.group == "pytest11" for ep in dist.entry_points)
0.22 __init__.py(834):             if any(ep.group == "pytest11" for ep in dist.entry_points)
0.22 __init__.py(834):             if any(ep.group == "pytest11" for ep in dist.entry_points)
0.22 __init__.py(834):             if any(ep.group == "pytest11" for ep in dist.entry_points)
0.22 __init__.py(834):             if any(ep.group == "pytest11" for ep in dist.entry_points)
0.22 __init__.py(834):             if any(ep.group == "pytest11" for ep in dist.entry_points)
0.22 __init__.py(834):             if any(ep.group == "pytest11" for ep in dist.entry_points)
0.22 __init__.py(834):             if any(ep.group == "pytest11" for ep in dist.entry_points)
0.22 __init__.py(834):             if any(ep.group == "pytest11" for ep in dist.entry_points)
0.22 __init__.py(834):             if any(ep.group == "pytest11" for ep in dist.entry_points)
0.22 __init__.py(834):             if any(ep.group == "pytest11" for ep in dist.entry_points)
0.22 __init__.py(834):             if any(ep.group == "pytest11" for ep in dist.entry_points)
0.22 __init__.py(834):             if any(ep.group == "pytest11" for ep in dist.entry_points)
0.22 __init__.py(834):             if any(ep.group == "pytest11" for ep in dist.entry_points)
0.22 __init__.py(834):             if any(ep.group == "pytest11" for ep in dist.entry_points)
0.22 __init__.py(834):             if any(ep.group == "pytest11" for ep in dist.entry_points)
0.22 __init__.py(834):             if any(ep.group == "pytest11" for ep in dist.entry_points)
0.22 __init__.py(834):             if any(ep.group == "pytest11" for ep in dist.entry_points)
0.22 __init__.py(834):             if any(ep.group == "pytest11" for ep in dist.entry_points)
0.22 __init__.py(834):             if any(ep.group == "pytest11" for ep in dist.entry_points)
0.22 __init__.py(834):             if any(ep.group == "pytest11" for ep in dist.entry_points)
0.22 __init__.py(834):             if any(ep.group == "pytest11" for ep in dist.entry_points)
0.22 __init__.py(834):             if any(ep.group == "pytest11" for ep in dist.entry_points)
0.22 __init__.py(834):             if any(ep.group == "pytest11" for ep in dist.entry_points)
0.22 __init__.py(834):             if any(ep.group == "pytest11" for ep in dist.entry_points)
0.22 __init__.py(834):             if any(ep.group == "pytest11" for ep in dist.entry_points)
0.22 __init__.py(834):             if any(ep.group == "pytest11" for ep in dist.entry_points)
0.22 __init__.py(834):             if any(ep.group == "pytest11" for ep in dist.entry_points)
0.22 __init__.py(834):             if any(ep.group == "pytest11" for ep in dist.entry_points)
0.22 __init__.py(834):             if any(ep.group == "pytest11" for ep in dist.entry_points)
0.22 __init__.py(834):             if any(ep.group == "pytest11" for ep in dist.entry_points)
0.22 __init__.py(834):             if any(ep.group == "pytest11" for ep in dist.entry_points)
0.22 __init__.py(834):             if any(ep.group == "pytest11" for ep in dist.entry_points)
0.22 __init__.py(834):             if any(ep.group == "pytest11" for ep in dist.entry_points)
0.22 __init__.py(834):             if any(ep.group == "pytest11" for ep in dist.entry_points)
0.22 __init__.py(834):             if any(ep.group == "pytest11" for ep in dist.entry_points)
0.22 __init__.py(834):             if any(ep.group == "pytest11" for ep in dist.entry_points)
0.22 __init__.py(831):         package_files = (
0.22 __init__.py(833):             for dist in importlib_metadata.distributions()
0.22 __init__.py(834):             if any(ep.group == "pytest11" for ep in dist.entry_points)
0.22 __init__.py(834):             if any(ep.group == "pytest11" for ep in dist.entry_points)
0.22 __init__.py(831):         package_files = (
0.22 __init__.py(833):             for dist in importlib_metadata.distributions()
0.22 __init__.py(834):             if any(ep.group == "pytest11" for ep in dist.entry_points)
0.22 __init__.py(834):             if any(ep.group == "pytest11" for ep in dist.entry_points)
0.22 __init__.py(834):             if any(ep.group == "pytest11" for ep in dist.entry_points)
0.22 __init__.py(834):             if any(ep.group == "pytest11" for ep in dist.entry_points)
0.22 __init__.py(831):         package_files = (
0.22 __init__.py(817):         _warn_about_missing_assertion(mode)
0.22 __init__.py(1066):     if not _assertion_supported():
0.22 __init__.py(1057):     try:
0.22 __init__.py(1058):         assert False
0.22 __init__.py(1059):     except AssertionError:
0.22 __init__.py(1060):         return True
0.22 __init__.py(869):         self.pluginmanager.consider_preparse(args)
0.22 __init__.py(473):         i = 0
0.22 __init__.py(474):         n = len(args)
0.22 __init__.py(475):         while i < n:
0.22 __init__.py(476):             opt = args[i]
0.22 __init__.py(477):             i += 1
0.22 __init__.py(478):             if isinstance(opt, str):
0.22 __init__.py(479):                 if opt == "-p":
0.22 __init__.py(485):                 elif opt.startswith("-p"):
0.22 __init__.py(475):         while i < n:
0.22 __init__.py(476):             opt = args[i]
0.22 __init__.py(477):             i += 1
0.22 __init__.py(478):             if isinstance(opt, str):
0.22 __init__.py(479):                 if opt == "-p":
0.22 __init__.py(480):                     try:
0.22 __init__.py(481):                         parg = args[i]
0.22 __init__.py(484):                     i += 1
0.22 __init__.py(489):                 self.consider_pluginarg(parg)
0.22 __init__.py(492):         if arg.startswith("no:"):
0.22 __init__.py(506):             name = arg
0.22 __init__.py(509):             if self._name2plugin.get(name, -1) is None:
0.22 __init__.py(511):             if not name.startswith("pytest_"):
0.22 __init__.py(512):                 if self._name2plugin.get("pytest_" + name, -1) is None:
0.22 __init__.py(514):             self.import_plugin(arg, consider_entry_points=True)
0.22 __init__.py(539):         assert isinstance(modname, str), (
0.22 __init__.py(542):         modname = str(modname)
0.22 __init__.py(543):         if self.is_blocked(modname) or self.get_plugin(modname) is not None:
0.22 __init__.py(546):         importspec = "_pytest." + modname if modname in builtin_plugins else modname
0.22 __init__.py(547):         self.rewrite_hook.mark_rewrite(importspec)
0.22 __init__.py(549):         if consider_entry_points:
0.22 __init__.py(550):             loaded = self.load_setuptools_entrypoints("pytest11", name=modname)
0.23 __init__.py(551):             if loaded:
0.23 __init__.py(554):         try:
0.23 __init__.py(555):             __import__(importspec)
0.23 pathlib.py(316):     path = PurePath(path)
0.23 pathlib.py(317):     iswin32 = sys.platform.startswith("win")
0.23 pathlib.py(319):     if iswin32 and sep not in pattern and posix_sep in pattern:
0.23 pathlib.py(325):     if sep not in pattern:
0.23 pathlib.py(326):         name = path.name
0.23 pathlib.py(331):     return fnmatch.fnmatch(name, pattern)
0.23 pathlib.py(316):     path = PurePath(path)
0.23 pathlib.py(317):     iswin32 = sys.platform.startswith("win")
0.23 pathlib.py(319):     if iswin32 and sep not in pattern and posix_sep in pattern:
0.23 pathlib.py(325):     if sep not in pattern:
0.23 pathlib.py(326):         name = path.name
0.23 pathlib.py(331):     return fnmatch.fnmatch(name, pattern)
0.23 pathlib.py(316):     path = PurePath(path)
0.23 pathlib.py(317):     iswin32 = sys.platform.startswith("win")
0.23 pathlib.py(319):     if iswin32 and sep not in pattern and posix_sep in pattern:
0.23 pathlib.py(325):     if sep not in pattern:
0.23 pathlib.py(326):         name = path.name
0.23 pathlib.py(331):     return fnmatch.fnmatch(name, pattern)
0.23 pathlib.py(316):     path = PurePath(path)
0.23 pathlib.py(317):     iswin32 = sys.platform.startswith("win")
0.23 pathlib.py(319):     if iswin32 and sep not in pattern and posix_sep in pattern:
0.23 pathlib.py(325):     if sep not in pattern:
0.23 pathlib.py(326):         name = path.name
0.23 pathlib.py(331):     return fnmatch.fnmatch(name, pattern)
0.23 pathlib.py(316):     path = PurePath(path)
0.23 pathlib.py(317):     iswin32 = sys.platform.startswith("win")
0.23 pathlib.py(319):     if iswin32 and sep not in pattern and posix_sep in pattern:
0.23 pathlib.py(325):     if sep not in pattern:
0.23 pathlib.py(328):         name = str(path)
0.23 pathlib.py(329):         if path.is_absolute() and not os.path.isabs(pattern):
0.23 pathlib.py(330):             pattern = "*{}{}".format(os.sep, pattern)
0.23 pathlib.py(331):     return fnmatch.fnmatch(name, pattern)
0.24 __init__.py(957):         try:
0.24 __init__.py(958):             return self._inicache[name]
0.24 __init__.py(959):         except KeyError:
0.24 __init__.py(960):             self._inicache[name] = val = self._getini(name)
0.24 __init__.py(964):         try:
0.24 __init__.py(965):             description, type, default = self._parser._inidict[name]
0.24 __init__.py(968):         value = self._get_override_ini_value(name)
0.24 __init__.py(1009):         value = None
0.24 __init__.py(1013):         for ini_config in self._override_ini:
0.24 __init__.py(1021):         return value
0.24 __init__.py(969):         if value is None:
0.24 __init__.py(970):             try:
0.24 __init__.py(971):                 value = self.inicfg[name]
0.24 __init__.py(972):             except KeyError:
0.24 __init__.py(973):                 if default is not None:
0.24 __init__.py(974):                     return default
0.24 __init__.py(961):             return val
0.26 __init__.py(574):             mod = sys.modules[importspec]
0.26 __init__.py(575):             self.register(mod, modname)
0.26 __init__.py(313):         if name in _pytest.deprecated.DEPRECATED_EXTERNAL_PLUGINS:
0.26 __init__.py(323):         ret = super().register(plugin, name)
0.26 __init__.py(270):         if not name.startswith("pytest_"):
0.26 __init__.py(271):             return
0.26 __init__.py(270):         if not name.startswith("pytest_"):
0.26 __init__.py(271):             return
0.26 __init__.py(270):         if not name.startswith("pytest_"):
0.26 __init__.py(271):             return
0.26 __init__.py(270):         if not name.startswith("pytest_"):
0.26 __init__.py(271):             return
0.26 __init__.py(270):         if not name.startswith("pytest_"):
0.26 __init__.py(271):             return
0.26 __init__.py(270):         if not name.startswith("pytest_"):
0.26 __init__.py(271):             return
0.26 __init__.py(270):         if not name.startswith("pytest_"):
0.26 __init__.py(271):             return
0.26 __init__.py(270):         if not name.startswith("pytest_"):
0.26 __init__.py(271):             return
0.26 __init__.py(270):         if not name.startswith("pytest_"):
0.26 __init__.py(271):             return
0.26 __init__.py(270):         if not name.startswith("pytest_"):
0.26 __init__.py(271):             return
0.26 __init__.py(270):         if not name.startswith("pytest_"):
0.26 __init__.py(271):             return
0.26 __init__.py(270):         if not name.startswith("pytest_"):
0.26 __init__.py(271):             return
0.26 __init__.py(270):         if not name.startswith("pytest_"):
0.26 __init__.py(271):             return
0.26 __init__.py(270):         if not name.startswith("pytest_"):
0.26 __init__.py(271):             return
0.26 __init__.py(270):         if not name.startswith("pytest_"):
0.26 __init__.py(271):             return
0.26 __init__.py(270):         if not name.startswith("pytest_"):
0.26 __init__.py(271):             return
0.26 __init__.py(270):         if not name.startswith("pytest_"):
0.26 __init__.py(271):             return
0.26 __init__.py(270):         if not name.startswith("pytest_"):
0.26 __init__.py(271):             return
0.26 __init__.py(270):         if not name.startswith("pytest_"):
0.26 __init__.py(271):             return
0.26 __init__.py(270):         if not name.startswith("pytest_"):
0.26 __init__.py(271):             return
0.26 __init__.py(270):         if not name.startswith("pytest_"):
0.26 __init__.py(271):             return
0.26 __init__.py(270):         if not name.startswith("pytest_"):
0.26 __init__.py(271):             return
0.26 __init__.py(270):         if not name.startswith("pytest_"):
0.26 __init__.py(271):             return
0.26 __init__.py(270):         if not name.startswith("pytest_"):
0.26 __init__.py(271):             return
0.26 __init__.py(270):         if not name.startswith("pytest_"):
0.26 __init__.py(271):             return
0.26 __init__.py(270):         if not name.startswith("pytest_"):
0.26 __init__.py(271):             return
0.26 __init__.py(270):         if not name.startswith("pytest_"):
0.26 __init__.py(271):             return
0.26 __init__.py(270):         if not name.startswith("pytest_"):
0.26 __init__.py(271):             return
0.26 __init__.py(270):         if not name.startswith("pytest_"):
0.26 __init__.py(271):             return
0.26 __init__.py(270):         if not name.startswith("pytest_"):
0.26 __init__.py(271):             return
0.26 __init__.py(270):         if not name.startswith("pytest_"):
0.26 __init__.py(271):             return
0.26 __init__.py(270):         if not name.startswith("pytest_"):
0.26 __init__.py(271):             return
0.26 __init__.py(270):         if not name.startswith("pytest_"):
0.26 __init__.py(271):             return
0.26 __init__.py(270):         if not name.startswith("pytest_"):
0.26 __init__.py(271):             return
0.26 __init__.py(270):         if not name.startswith("pytest_"):
0.26 __init__.py(271):             return
0.26 __init__.py(270):         if not name.startswith("pytest_"):
0.26 __init__.py(271):             return
0.26 __init__.py(270):         if not name.startswith("pytest_"):
0.26 __init__.py(271):             return
0.26 __init__.py(270):         if not name.startswith("pytest_"):
0.26 __init__.py(271):             return
0.26 __init__.py(270):         if not name.startswith("pytest_"):
0.26 __init__.py(271):             return
0.26 __init__.py(270):         if not name.startswith("pytest_"):
0.26 __init__.py(271):             return
0.26 __init__.py(270):         if not name.startswith("pytest_"):
0.26 __init__.py(271):             return
0.26 __init__.py(270):         if not name.startswith("pytest_"):
0.26 __init__.py(271):             return
0.26 __init__.py(270):         if not name.startswith("pytest_"):
0.26 __init__.py(271):             return
0.26 __init__.py(270):         if not name.startswith("pytest_"):
0.26 __init__.py(271):             return
0.26 __init__.py(270):         if not name.startswith("pytest_"):
0.26 __init__.py(271):             return
0.26 __init__.py(270):         if not name.startswith("pytest_"):
0.26 __init__.py(273):         if name == "pytest_plugins":
0.26 __init__.py(276):         method = getattr(plugin, name)
0.26 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.26 __init__.py(280):         if not inspect.isroutine(method):
0.26 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.26 __init__.py(285):             opts = {}
0.26 __init__.py(286):         if opts is not None:
0.26 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.26 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.26 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.26 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.26 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.26 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.26 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.26 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.26 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.26 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.26 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.26 __init__.py(293):         return opts
0.26 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.26 __init__.py(774):             self._opt2dest[name] = opt.dest
0.26 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.26 __init__.py(776):         if hasattr(opt, "default") and opt.dest:
0.26 __init__.py(777):             if not hasattr(self.option, opt.dest):
0.26 __init__.py(778):                 setattr(self.option, opt.dest, opt.default)
0.26 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.26 __init__.py(774):             self._opt2dest[name] = opt.dest
0.26 __init__.py(773):         for name in opt._short_opts + opt._long_opts:
0.26 __init__.py(776):         if hasattr(opt, "default") and opt.dest:
0.26 __init__.py(777):             if not hasattr(self.option, opt.dest):
0.26 __init__.py(778):                 setattr(self.option, opt.dest, opt.default)
0.26 __init__.py(270):         if not name.startswith("pytest_"):
0.26 __init__.py(273):         if name == "pytest_plugins":
0.26 __init__.py(276):         method = getattr(plugin, name)
0.26 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.26 __init__.py(280):         if not inspect.isroutine(method):
0.26 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.26 __init__.py(285):             opts = {}
0.26 __init__.py(286):         if opts is not None:
0.26 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.26 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.26 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.26 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.26 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.26 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.26 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.26 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.26 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.26 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.26 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.26 __init__.py(293):         return opts
0.26 __init__.py(270):         if not name.startswith("pytest_"):
0.26 __init__.py(271):             return
0.26 __init__.py(270):         if not name.startswith("pytest_"):
0.26 __init__.py(271):             return
0.26 __init__.py(270):         if not name.startswith("pytest_"):
0.26 __init__.py(271):             return
0.26 __init__.py(270):         if not name.startswith("pytest_"):
0.26 __init__.py(271):             return
0.26 __init__.py(270):         if not name.startswith("pytest_"):
0.26 __init__.py(271):             return
0.26 __init__.py(270):         if not name.startswith("pytest_"):
0.26 __init__.py(271):             return
0.26 __init__.py(270):         if not name.startswith("pytest_"):
0.26 __init__.py(271):             return
0.26 __init__.py(270):         if not name.startswith("pytest_"):
0.26 __init__.py(271):             return
0.26 __init__.py(270):         if not name.startswith("pytest_"):
0.26 __init__.py(271):             return
0.26 __init__.py(324):         if ret:
0.26 __init__.py(325):             self.hook.pytest_plugin_registered.call_historic(
0.26 __init__.py(326):                 kwargs=dict(plugin=plugin, manager=self)
0.26 __init__.py(325):             self.hook.pytest_plugin_registered.call_historic(
0.26 __init__.py(329):             if isinstance(plugin, types.ModuleType):
0.26 __init__.py(330):                 self.consider_module(plugin)
0.26 __init__.py(523):         self._import_plugin_specs(getattr(mod, "pytest_plugins", []))
0.26 __init__.py(526):         plugins = _get_plugin_specs_as_list(spec)
0.26 __init__.py(586):     if specs is not None and not isinstance(specs, types.ModuleType):
0.26 __init__.py(587):         if isinstance(specs, str):
0.26 __init__.py(589):         if not isinstance(specs, (list, tuple)):
0.26 __init__.py(594):         return list(specs)
0.26 __init__.py(527):         for import_spec in plugins:
0.26 __init__.py(331):         return ret
0.26 __init__.py(475):         while i < n:
0.26 __init__.py(476):             opt = args[i]
0.26 __init__.py(477):             i += 1
0.26 __init__.py(478):             if isinstance(opt, str):
0.26 __init__.py(479):                 if opt == "-p":
0.26 __init__.py(485):                 elif opt.startswith("-p"):
0.26 __init__.py(475):         while i < n:
0.26 __init__.py(476):             opt = args[i]
0.26 __init__.py(477):             i += 1
0.26 __init__.py(478):             if isinstance(opt, str):
0.26 __init__.py(479):                 if opt == "-p":
0.26 __init__.py(485):                 elif opt.startswith("-p"):
0.26 __init__.py(475):         while i < n:
0.26 __init__.py(476):             opt = args[i]
0.26 __init__.py(477):             i += 1
0.26 __init__.py(478):             if isinstance(opt, str):
0.26 __init__.py(479):                 if opt == "-p":
0.26 __init__.py(485):                 elif opt.startswith("-p"):
0.26 __init__.py(475):         while i < n:
0.26 __init__.py(870):         if not os.environ.get("PYTEST_DISABLE_PLUGIN_AUTOLOAD"):
0.26 __init__.py(873):             self.pluginmanager.load_setuptools_entrypoints("pytest11")
0.26 __init__.py(874):         self.pluginmanager.consider_env()
0.26 __init__.py(520):         self._import_plugin_specs(os.environ.get("PYTEST_PLUGINS"))
0.26 __init__.py(526):         plugins = _get_plugin_specs_as_list(spec)
0.26 __init__.py(586):     if specs is not None and not isinstance(specs, types.ModuleType):
0.26 __init__.py(595):     return []
0.26 __init__.py(527):         for import_spec in plugins:
0.26 __init__.py(875):         self.known_args_namespace = ns = self._parser.parse_known_args(
0.26 __init__.py(876):             args, namespace=copy.copy(self.option)
0.26 __init__.py(875):         self.known_args_namespace = ns = self._parser.parse_known_args(
0.27 __init__.py(878):         if self.known_args_namespace.confcutdir is None and self.inifile:
0.27 __init__.py(879):             confcutdir = py.path.local(self.inifile).dirname
0.27 __init__.py(880):             self.known_args_namespace.confcutdir = confcutdir
0.27 __init__.py(881):         try:
0.27 __init__.py(882):             self.hook.pytest_load_initial_conftests(
0.27 __init__.py(883):                 early_config=self, args=args, parser=self._parser
0.27 __init__.py(882):             self.hook.pytest_load_initial_conftests(
0.27 __init__.py(313):         if name in _pytest.deprecated.DEPRECATED_EXTERNAL_PLUGINS:
0.27 __init__.py(323):         ret = super().register(plugin, name)
0.27 __init__.py(270):         if not name.startswith("pytest_"):
0.27 __init__.py(271):             return
0.27 __init__.py(270):         if not name.startswith("pytest_"):
0.27 __init__.py(271):             return
0.27 __init__.py(270):         if not name.startswith("pytest_"):
0.27 __init__.py(271):             return
0.27 __init__.py(270):         if not name.startswith("pytest_"):
0.27 __init__.py(271):             return
0.27 __init__.py(270):         if not name.startswith("pytest_"):
0.27 __init__.py(271):             return
0.27 __init__.py(270):         if not name.startswith("pytest_"):
0.27 __init__.py(271):             return
0.27 __init__.py(270):         if not name.startswith("pytest_"):
0.27 __init__.py(271):             return
0.27 __init__.py(270):         if not name.startswith("pytest_"):
0.27 __init__.py(271):             return
0.27 __init__.py(270):         if not name.startswith("pytest_"):
0.27 __init__.py(271):             return
0.27 __init__.py(270):         if not name.startswith("pytest_"):
0.27 __init__.py(271):             return
0.27 __init__.py(270):         if not name.startswith("pytest_"):
0.27 __init__.py(271):             return
0.27 __init__.py(270):         if not name.startswith("pytest_"):
0.27 __init__.py(271):             return
0.27 __init__.py(270):         if not name.startswith("pytest_"):
0.27 __init__.py(271):             return
0.27 __init__.py(270):         if not name.startswith("pytest_"):
0.27 __init__.py(271):             return
0.27 __init__.py(270):         if not name.startswith("pytest_"):
0.27 __init__.py(271):             return
0.27 __init__.py(270):         if not name.startswith("pytest_"):
0.27 __init__.py(271):             return
0.27 __init__.py(270):         if not name.startswith("pytest_"):
0.27 __init__.py(271):             return
0.27 __init__.py(270):         if not name.startswith("pytest_"):
0.27 __init__.py(271):             return
0.27 __init__.py(270):         if not name.startswith("pytest_"):
0.27 __init__.py(271):             return
0.27 __init__.py(270):         if not name.startswith("pytest_"):
0.27 __init__.py(271):             return
0.27 __init__.py(270):         if not name.startswith("pytest_"):
0.27 __init__.py(271):             return
0.27 __init__.py(270):         if not name.startswith("pytest_"):
0.27 __init__.py(271):             return
0.27 __init__.py(270):         if not name.startswith("pytest_"):
0.27 __init__.py(271):             return
0.27 __init__.py(270):         if not name.startswith("pytest_"):
0.27 __init__.py(271):             return
0.27 __init__.py(270):         if not name.startswith("pytest_"):
0.27 __init__.py(271):             return
0.27 __init__.py(270):         if not name.startswith("pytest_"):
0.27 __init__.py(271):             return
0.27 __init__.py(270):         if not name.startswith("pytest_"):
0.27 __init__.py(271):             return
0.27 __init__.py(270):         if not name.startswith("pytest_"):
0.27 __init__.py(271):             return
0.27 __init__.py(270):         if not name.startswith("pytest_"):
0.27 __init__.py(271):             return
0.27 __init__.py(270):         if not name.startswith("pytest_"):
0.27 __init__.py(271):             return
0.27 __init__.py(270):         if not name.startswith("pytest_"):
0.27 __init__.py(271):             return
0.27 __init__.py(270):         if not name.startswith("pytest_"):
0.27 __init__.py(271):             return
0.27 __init__.py(270):         if not name.startswith("pytest_"):
0.27 __init__.py(271):             return
0.27 __init__.py(270):         if not name.startswith("pytest_"):
0.27 __init__.py(271):             return
0.27 __init__.py(270):         if not name.startswith("pytest_"):
0.27 __init__.py(271):             return
0.27 __init__.py(270):         if not name.startswith("pytest_"):
0.27 __init__.py(271):             return
0.27 __init__.py(270):         if not name.startswith("pytest_"):
0.27 __init__.py(273):         if name == "pytest_plugins":
0.27 __init__.py(276):         method = getattr(plugin, name)
0.27 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.27 __init__.py(280):         if not inspect.isroutine(method):
0.27 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.27 __init__.py(286):         if opts is not None:
0.27 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.27 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.27 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.27 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.27 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.27 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.27 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.27 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.27 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.27 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.27 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.27 __init__.py(293):         return opts
0.27 __init__.py(270):         if not name.startswith("pytest_"):
0.27 __init__.py(273):         if name == "pytest_plugins":
0.27 __init__.py(276):         method = getattr(plugin, name)
0.27 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.27 __init__.py(280):         if not inspect.isroutine(method):
0.27 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.27 __init__.py(286):         if opts is not None:
0.27 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.27 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.27 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.27 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.27 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.27 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.27 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.27 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.27 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.27 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.27 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.27 __init__.py(293):         return opts
0.27 __init__.py(270):         if not name.startswith("pytest_"):
0.27 __init__.py(273):         if name == "pytest_plugins":
0.27 __init__.py(276):         method = getattr(plugin, name)
0.27 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.27 __init__.py(280):         if not inspect.isroutine(method):
0.27 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.27 __init__.py(286):         if opts is not None:
0.27 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.27 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.27 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.27 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.27 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.27 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.27 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.27 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.27 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.27 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.27 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.27 __init__.py(293):         return opts
0.27 __init__.py(270):         if not name.startswith("pytest_"):
0.27 __init__.py(273):         if name == "pytest_plugins":
0.27 __init__.py(276):         method = getattr(plugin, name)
0.27 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.27 __init__.py(280):         if not inspect.isroutine(method):
0.27 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.27 __init__.py(286):         if opts is not None:
0.27 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.27 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.27 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.27 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.27 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.27 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.27 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.27 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.27 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.27 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.27 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.27 __init__.py(293):         return opts
0.27 __init__.py(270):         if not name.startswith("pytest_"):
0.27 __init__.py(273):         if name == "pytest_plugins":
0.27 __init__.py(276):         method = getattr(plugin, name)
0.27 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.27 __init__.py(280):         if not inspect.isroutine(method):
0.27 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.27 __init__.py(286):         if opts is not None:
0.27 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.27 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.27 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.27 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.27 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.27 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.27 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.27 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.27 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.27 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.27 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.27 __init__.py(293):         return opts
0.27 __init__.py(270):         if not name.startswith("pytest_"):
0.27 __init__.py(273):         if name == "pytest_plugins":
0.27 __init__.py(276):         method = getattr(plugin, name)
0.27 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.27 __init__.py(280):         if not inspect.isroutine(method):
0.27 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.27 __init__.py(286):         if opts is not None:
0.27 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.27 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.27 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.27 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.27 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.27 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.27 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.27 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.27 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.27 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.27 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.27 __init__.py(293):         return opts
0.27 __init__.py(270):         if not name.startswith("pytest_"):
0.27 __init__.py(273):         if name == "pytest_plugins":
0.27 __init__.py(276):         method = getattr(plugin, name)
0.27 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.27 __init__.py(280):         if not inspect.isroutine(method):
0.27 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.27 __init__.py(286):         if opts is not None:
0.27 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.27 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.27 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.27 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.27 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.27 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.27 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.27 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.27 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.27 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.27 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.27 __init__.py(293):         return opts
0.27 __init__.py(270):         if not name.startswith("pytest_"):
0.27 __init__.py(271):             return
0.27 __init__.py(270):         if not name.startswith("pytest_"):
0.27 __init__.py(271):             return
0.27 __init__.py(270):         if not name.startswith("pytest_"):
0.27 __init__.py(271):             return
0.27 __init__.py(270):         if not name.startswith("pytest_"):
0.27 __init__.py(271):             return
0.27 __init__.py(270):         if not name.startswith("pytest_"):
0.27 __init__.py(271):             return
0.27 __init__.py(270):         if not name.startswith("pytest_"):
0.27 __init__.py(271):             return
0.27 __init__.py(270):         if not name.startswith("pytest_"):
0.27 __init__.py(271):             return
0.27 __init__.py(270):         if not name.startswith("pytest_"):
0.27 __init__.py(271):             return
0.27 __init__.py(270):         if not name.startswith("pytest_"):
0.27 __init__.py(271):             return
0.27 __init__.py(324):         if ret:
0.27 __init__.py(325):             self.hook.pytest_plugin_registered.call_historic(
0.27 __init__.py(326):                 kwargs=dict(plugin=plugin, manager=self)
0.27 __init__.py(325):             self.hook.pytest_plugin_registered.call_historic(
0.27 __init__.py(329):             if isinstance(plugin, types.ModuleType):
0.27 __init__.py(331):         return ret
0.27 __init__.py(696):         self._cleanup.append(func)
0.27 __init__.py(929):         self.hook.pytest_cmdline_preparse(config=self, args=args)
0.27 __init__.py(930):         self._parser.after_preparse = True
0.27 __init__.py(931):         try:
0.27 __init__.py(932):             args = self._parser.parse_setoption(
0.27 __init__.py(933):                 args, self.option, namespace=self.option
0.27 __init__.py(932):             args = self._parser.parse_setoption(
0.27 __init__.py(935):             if not args:
0.27 __init__.py(940):             self.args = args
0.27 __init__.py(739):         return self
0.27 __init__.py(76):             try:
0.27 __init__.py(77):                 return config.hook.pytest_cmdline_main(config=config)
0.27 __init__.py(957):         try:
0.27 __init__.py(958):             return self._inicache[name]
0.27 __init__.py(959):         except KeyError:
0.27 __init__.py(960):             self._inicache[name] = val = self._getini(name)
0.27 __init__.py(964):         try:
0.27 __init__.py(965):             description, type, default = self._parser._inidict[name]
0.27 __init__.py(968):         value = self._get_override_ini_value(name)
0.27 __init__.py(1009):         value = None
0.27 __init__.py(1013):         for ini_config in self._override_ini:
0.27 __init__.py(1021):         return value
0.27 __init__.py(969):         if value is None:
0.27 __init__.py(970):             try:
0.27 __init__.py(971):                 value = self.inicfg[name]
0.27 __init__.py(978):         if type == "pathlist":
0.27 __init__.py(984):         elif type == "args":
0.27 __init__.py(985):             return shlex.split(value)
0.27 __init__.py(961):             return val
0.27 __init__.py(691):         return py.path.local(str(self.invocation_params.dir))
0.27 __init__.py(313):         if name in _pytest.deprecated.DEPRECATED_EXTERNAL_PLUGINS:
0.27 __init__.py(323):         ret = super().register(plugin, name)
0.27 __init__.py(270):         if not name.startswith("pytest_"):
0.27 __init__.py(271):             return
0.27 __init__.py(270):         if not name.startswith("pytest_"):
0.27 __init__.py(271):             return
0.27 __init__.py(270):         if not name.startswith("pytest_"):
0.27 __init__.py(271):             return
0.27 __init__.py(270):         if not name.startswith("pytest_"):
0.27 __init__.py(271):             return
0.27 __init__.py(270):         if not name.startswith("pytest_"):
0.27 __init__.py(271):             return
0.27 __init__.py(270):         if not name.startswith("pytest_"):
0.27 __init__.py(271):             return
0.27 __init__.py(270):         if not name.startswith("pytest_"):
0.27 __init__.py(271):             return
0.27 __init__.py(270):         if not name.startswith("pytest_"):
0.27 __init__.py(271):             return
0.27 __init__.py(270):         if not name.startswith("pytest_"):
0.27 __init__.py(271):             return
0.27 __init__.py(270):         if not name.startswith("pytest_"):
0.27 __init__.py(271):             return
0.27 __init__.py(270):         if not name.startswith("pytest_"):
0.27 __init__.py(271):             return
0.27 __init__.py(270):         if not name.startswith("pytest_"):
0.27 __init__.py(271):             return
0.27 __init__.py(270):         if not name.startswith("pytest_"):
0.27 __init__.py(271):             return
0.27 __init__.py(270):         if not name.startswith("pytest_"):
0.27 __init__.py(271):             return
0.27 __init__.py(270):         if not name.startswith("pytest_"):
0.27 __init__.py(271):             return
0.27 __init__.py(270):         if not name.startswith("pytest_"):
0.27 __init__.py(271):             return
0.27 __init__.py(270):         if not name.startswith("pytest_"):
0.27 __init__.py(271):             return
0.27 __init__.py(270):         if not name.startswith("pytest_"):
0.27 __init__.py(271):             return
0.27 __init__.py(270):         if not name.startswith("pytest_"):
0.27 __init__.py(271):             return
0.27 __init__.py(270):         if not name.startswith("pytest_"):
0.27 __init__.py(271):             return
0.27 __init__.py(270):         if not name.startswith("pytest_"):
0.27 __init__.py(271):             return
0.27 __init__.py(270):         if not name.startswith("pytest_"):
0.27 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(273):         if name == "pytest_plugins":
0.28 __init__.py(276):         method = getattr(plugin, name)
0.28 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.28 __init__.py(280):         if not inspect.isroutine(method):
0.28 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.28 __init__.py(286):         if opts is not None:
0.28 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.28 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(293):         return opts
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(273):         if name == "pytest_plugins":
0.28 __init__.py(276):         method = getattr(plugin, name)
0.28 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.28 __init__.py(280):         if not inspect.isroutine(method):
0.28 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.28 __init__.py(286):         if opts is not None:
0.28 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.28 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(293):         return opts
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(273):         if name == "pytest_plugins":
0.28 __init__.py(276):         method = getattr(plugin, name)
0.28 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.28 __init__.py(280):         if not inspect.isroutine(method):
0.28 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.28 __init__.py(286):         if opts is not None:
0.28 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.28 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(293):         return opts
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(324):         if ret:
0.28 __init__.py(325):             self.hook.pytest_plugin_registered.call_historic(
0.28 __init__.py(326):                 kwargs=dict(plugin=plugin, manager=self)
0.28 __init__.py(325):             self.hook.pytest_plugin_registered.call_historic(
0.28 __init__.py(329):             if isinstance(plugin, types.ModuleType):
0.28 __init__.py(331):         return ret
0.28 __init__.py(699):         assert not self._configured
0.28 __init__.py(700):         self._configured = True
0.28 __init__.py(701):         with warnings.catch_warnings():
0.28 __init__.py(702):             warnings.simplefilter("default")
0.28 __init__.py(703):             self.hook.pytest_configure.call_historic(kwargs=dict(config=self))
0.28 __init__.py(957):         try:
0.28 __init__.py(958):             return self._inicache[name]
0.28 __init__.py(959):         except KeyError:
0.28 __init__.py(960):             self._inicache[name] = val = self._getini(name)
0.28 __init__.py(964):         try:
0.28 __init__.py(965):             description, type, default = self._parser._inidict[name]
0.28 __init__.py(968):         value = self._get_override_ini_value(name)
0.28 __init__.py(1009):         value = None
0.28 __init__.py(1013):         for ini_config in self._override_ini:
0.28 __init__.py(1021):         return value
0.28 __init__.py(969):         if value is None:
0.28 __init__.py(970):             try:
0.28 __init__.py(971):                 value = self.inicfg[name]
0.28 __init__.py(972):             except KeyError:
0.28 __init__.py(973):                 if default is not None:
0.28 __init__.py(974):                     return default
0.28 __init__.py(961):             return val
0.28 pathlib.py(289):     assert not isinstance(input, Path), "would break on py2"
0.28 pathlib.py(290):     root = Path(root)
0.28 pathlib.py(291):     input = expanduser(input)
0.28 pathlib.py(292):     input = expandvars(input)
0.28 pathlib.py(293):     if isabs(input):
0.28 pathlib.py(296):         return root.joinpath(input)
0.28 __init__.py(1032):         name = self._opt2dest.get(name, name)
0.28 __init__.py(1033):         try:
0.28 __init__.py(1034):             val = getattr(self.option, name)
0.28 __init__.py(1035):             if val is None and skip:
0.28 __init__.py(1037):             return val
0.28 __init__.py(1032):         name = self._opt2dest.get(name, name)
0.28 __init__.py(1033):         try:
0.28 __init__.py(1034):             val = getattr(self.option, name)
0.28 __init__.py(1035):             if val is None and skip:
0.28 __init__.py(1037):             return val
0.28 __init__.py(1032):         name = self._opt2dest.get(name, name)
0.28 __init__.py(1033):         try:
0.28 __init__.py(1034):             val = getattr(self.option, name)
0.28 __init__.py(1035):             if val is None and skip:
0.28 __init__.py(1037):             return val
0.28 __init__.py(313):         if name in _pytest.deprecated.DEPRECATED_EXTERNAL_PLUGINS:
0.28 __init__.py(323):         ret = super().register(plugin, name)
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(273):         if name == "pytest_plugins":
0.28 __init__.py(276):         method = getattr(plugin, name)
0.28 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.28 __init__.py(280):         if not inspect.isroutine(method):
0.28 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.28 __init__.py(285):             opts = {}
0.28 __init__.py(286):         if opts is not None:
0.28 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.28 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(293):         return opts
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(273):         if name == "pytest_plugins":
0.28 __init__.py(276):         method = getattr(plugin, name)
0.28 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.28 __init__.py(280):         if not inspect.isroutine(method):
0.28 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.28 __init__.py(285):             opts = {}
0.28 __init__.py(286):         if opts is not None:
0.28 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.28 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(293):         return opts
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(273):         if name == "pytest_plugins":
0.28 __init__.py(276):         method = getattr(plugin, name)
0.28 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.28 __init__.py(280):         if not inspect.isroutine(method):
0.28 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.28 __init__.py(285):             opts = {}
0.28 __init__.py(286):         if opts is not None:
0.28 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.28 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(293):         return opts
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(273):         if name == "pytest_plugins":
0.28 __init__.py(276):         method = getattr(plugin, name)
0.28 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.28 __init__.py(280):         if not inspect.isroutine(method):
0.28 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.28 __init__.py(285):             opts = {}
0.28 __init__.py(286):         if opts is not None:
0.28 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.28 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(293):         return opts
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(273):         if name == "pytest_plugins":
0.28 __init__.py(276):         method = getattr(plugin, name)
0.28 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.28 __init__.py(280):         if not inspect.isroutine(method):
0.28 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.28 __init__.py(285):             opts = {}
0.28 __init__.py(286):         if opts is not None:
0.28 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.28 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(293):         return opts
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(273):         if name == "pytest_plugins":
0.28 __init__.py(276):         method = getattr(plugin, name)
0.28 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.28 __init__.py(280):         if not inspect.isroutine(method):
0.28 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.28 __init__.py(285):             opts = {}
0.28 __init__.py(286):         if opts is not None:
0.28 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.28 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(293):         return opts
0.28 __init__.py(324):         if ret:
0.28 __init__.py(325):             self.hook.pytest_plugin_registered.call_historic(
0.28 __init__.py(326):                 kwargs=dict(plugin=plugin, manager=self)
0.28 __init__.py(325):             self.hook.pytest_plugin_registered.call_historic(
0.28 __init__.py(329):             if isinstance(plugin, types.ModuleType):
0.28 __init__.py(331):         return ret
0.28 __init__.py(313):         if name in _pytest.deprecated.DEPRECATED_EXTERNAL_PLUGINS:
0.28 __init__.py(323):         ret = super().register(plugin, name)
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(273):         if name == "pytest_plugins":
0.28 __init__.py(276):         method = getattr(plugin, name)
0.28 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.28 __init__.py(280):         if not inspect.isroutine(method):
0.28 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.28 __init__.py(285):             opts = {}
0.28 __init__.py(286):         if opts is not None:
0.28 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.28 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(293):         return opts
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(273):         if name == "pytest_plugins":
0.28 __init__.py(276):         method = getattr(plugin, name)
0.28 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.28 __init__.py(280):         if not inspect.isroutine(method):
0.28 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.28 __init__.py(285):             opts = {}
0.28 __init__.py(286):         if opts is not None:
0.28 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.28 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(293):         return opts
0.28 __init__.py(324):         if ret:
0.28 __init__.py(325):             self.hook.pytest_plugin_registered.call_historic(
0.28 __init__.py(326):                 kwargs=dict(plugin=plugin, manager=self)
0.28 __init__.py(325):             self.hook.pytest_plugin_registered.call_historic(
0.28 __init__.py(329):             if isinstance(plugin, types.ModuleType):
0.28 __init__.py(331):         return ret
0.28 __init__.py(1049):         return self.getoption(name)
0.28 __init__.py(1032):         name = self._opt2dest.get(name, name)
0.28 __init__.py(1033):         try:
0.28 __init__.py(1034):             val = getattr(self.option, name)
0.28 __init__.py(1035):             if val is None and skip:
0.28 __init__.py(1037):             return val
0.28 __init__.py(948):         x = self.getini(name)
0.28 __init__.py(957):         try:
0.28 __init__.py(958):             return self._inicache[name]
0.28 __init__.py(959):         except KeyError:
0.28 __init__.py(960):             self._inicache[name] = val = self._getini(name)
0.28 __init__.py(964):         try:
0.28 __init__.py(965):             description, type, default = self._parser._inidict[name]
0.28 __init__.py(968):         value = self._get_override_ini_value(name)
0.28 __init__.py(1009):         value = None
0.28 __init__.py(1013):         for ini_config in self._override_ini:
0.28 __init__.py(1021):         return value
0.28 __init__.py(969):         if value is None:
0.28 __init__.py(970):             try:
0.28 __init__.py(971):                 value = self.inicfg[name]
0.28 __init__.py(978):         if type == "pathlist":
0.28 __init__.py(984):         elif type == "args":
0.28 __init__.py(986):         elif type == "linelist":
0.28 __init__.py(987):             return [t for t in map(lambda x: x.strip(), value.split("\n")) if t]
0.28 __init__.py(987):             return [t for t in map(lambda x: x.strip(), value.split("\n")) if t]
0.28 __init__.py(987):             return [t for t in map(lambda x: x.strip(), value.split("\n")) if t]
0.28 __init__.py(987):             return [t for t in map(lambda x: x.strip(), value.split("\n")) if t]
0.28 __init__.py(987):             return [t for t in map(lambda x: x.strip(), value.split("\n")) if t]
0.28 __init__.py(987):             return [t for t in map(lambda x: x.strip(), value.split("\n")) if t]
0.28 __init__.py(987):             return [t for t in map(lambda x: x.strip(), value.split("\n")) if t]
0.28 __init__.py(987):             return [t for t in map(lambda x: x.strip(), value.split("\n")) if t]
0.28 __init__.py(987):             return [t for t in map(lambda x: x.strip(), value.split("\n")) if t]
0.28 __init__.py(987):             return [t for t in map(lambda x: x.strip(), value.split("\n")) if t]
0.28 __init__.py(987):             return [t for t in map(lambda x: x.strip(), value.split("\n")) if t]
0.28 __init__.py(987):             return [t for t in map(lambda x: x.strip(), value.split("\n")) if t]
0.28 __init__.py(961):             return val
0.28 __init__.py(949):         assert isinstance(x, list)
0.28 __init__.py(950):         x.append(line)  # modifies the cached list inline
0.28 pathlib.py(316):     path = PurePath(path)
0.28 pathlib.py(317):     iswin32 = sys.platform.startswith("win")
0.28 pathlib.py(319):     if iswin32 and sep not in pattern and posix_sep in pattern:
0.28 pathlib.py(325):     if sep not in pattern:
0.28 pathlib.py(326):         name = path.name
0.28 pathlib.py(331):     return fnmatch.fnmatch(name, pattern)
0.28 pathlib.py(316):     path = PurePath(path)
0.28 pathlib.py(317):     iswin32 = sys.platform.startswith("win")
0.28 pathlib.py(319):     if iswin32 and sep not in pattern and posix_sep in pattern:
0.28 pathlib.py(325):     if sep not in pattern:
0.28 pathlib.py(326):         name = path.name
0.28 pathlib.py(331):     return fnmatch.fnmatch(name, pattern)
0.28 __init__.py(948):         x = self.getini(name)
0.28 __init__.py(957):         try:
0.28 __init__.py(958):             return self._inicache[name]
0.28 __init__.py(949):         assert isinstance(x, list)
0.28 __init__.py(950):         x.append(line)  # modifies the cached list inline
0.28 __init__.py(1049):         return self.getoption(name)
0.28 __init__.py(1032):         name = self._opt2dest.get(name, name)
0.28 __init__.py(1033):         try:
0.28 __init__.py(1034):             val = getattr(self.option, name)
0.28 __init__.py(1035):             if val is None and skip:
0.28 __init__.py(1037):             return val
0.28 __init__.py(313):         if name in _pytest.deprecated.DEPRECATED_EXTERNAL_PLUGINS:
0.28 __init__.py(323):         ret = super().register(plugin, name)
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(273):         if name == "pytest_plugins":
0.28 __init__.py(276):         method = getattr(plugin, name)
0.28 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.28 __init__.py(280):         if not inspect.isroutine(method):
0.28 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.28 __init__.py(285):             opts = {}
0.28 __init__.py(286):         if opts is not None:
0.28 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.28 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(293):         return opts
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(273):         if name == "pytest_plugins":
0.28 __init__.py(276):         method = getattr(plugin, name)
0.28 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.28 __init__.py(280):         if not inspect.isroutine(method):
0.28 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.28 __init__.py(285):             opts = {}
0.28 __init__.py(286):         if opts is not None:
0.28 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.28 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(293):         return opts
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(273):         if name == "pytest_plugins":
0.28 __init__.py(276):         method = getattr(plugin, name)
0.28 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.28 __init__.py(280):         if not inspect.isroutine(method):
0.28 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.28 __init__.py(285):             opts = {}
0.28 __init__.py(286):         if opts is not None:
0.28 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.28 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(293):         return opts
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(273):         if name == "pytest_plugins":
0.28 __init__.py(276):         method = getattr(plugin, name)
0.28 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.28 __init__.py(280):         if not inspect.isroutine(method):
0.28 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.28 __init__.py(285):             opts = {}
0.28 __init__.py(286):         if opts is not None:
0.28 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.28 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(293):         return opts
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(273):         if name == "pytest_plugins":
0.28 __init__.py(276):         method = getattr(plugin, name)
0.28 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.28 __init__.py(280):         if not inspect.isroutine(method):
0.28 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.28 __init__.py(285):             opts = {}
0.28 __init__.py(286):         if opts is not None:
0.28 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.28 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(293):         return opts
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(324):         if ret:
0.28 __init__.py(325):             self.hook.pytest_plugin_registered.call_historic(
0.28 __init__.py(326):                 kwargs=dict(plugin=plugin, manager=self)
0.28 __init__.py(325):             self.hook.pytest_plugin_registered.call_historic(
0.28 __init__.py(329):             if isinstance(plugin, types.ModuleType):
0.28 __init__.py(331):         return ret
0.28 __init__.py(948):         x = self.getini(name)
0.28 __init__.py(957):         try:
0.28 __init__.py(958):             return self._inicache[name]
0.28 __init__.py(949):         assert isinstance(x, list)
0.28 __init__.py(950):         x.append(line)  # modifies the cached list inline
0.28 __init__.py(948):         x = self.getini(name)
0.28 __init__.py(957):         try:
0.28 __init__.py(958):             return self._inicache[name]
0.28 __init__.py(949):         assert isinstance(x, list)
0.28 __init__.py(950):         x.append(line)  # modifies the cached list inline
0.28 __init__.py(948):         x = self.getini(name)
0.28 __init__.py(957):         try:
0.28 __init__.py(958):             return self._inicache[name]
0.28 __init__.py(949):         assert isinstance(x, list)
0.28 __init__.py(950):         x.append(line)  # modifies the cached list inline
0.28 __init__.py(1049):         return self.getoption(name)
0.28 __init__.py(1032):         name = self._opt2dest.get(name, name)
0.28 __init__.py(1033):         try:
0.28 __init__.py(1034):             val = getattr(self.option, name)
0.28 __init__.py(1035):             if val is None and skip:
0.28 __init__.py(1037):             return val
0.28 __init__.py(1049):         return self.getoption(name)
0.28 __init__.py(1032):         name = self._opt2dest.get(name, name)
0.28 __init__.py(1033):         try:
0.28 __init__.py(1034):             val = getattr(self.option, name)
0.28 __init__.py(1035):             if val is None and skip:
0.28 __init__.py(1037):             return val
0.28 __init__.py(691):         return py.path.local(str(self.invocation_params.dir))
0.28 __init__.py(1110):     tw = py.io.TerminalWriter(*args, **kwargs)
0.28 pathlib.py(316):     path = PurePath(path)
0.28 pathlib.py(317):     iswin32 = sys.platform.startswith("win")
0.28 pathlib.py(319):     if iswin32 and sep not in pattern and posix_sep in pattern:
0.28 pathlib.py(325):     if sep not in pattern:
0.28 pathlib.py(326):         name = path.name
0.28 pathlib.py(331):     return fnmatch.fnmatch(name, pattern)
0.28 pathlib.py(316):     path = PurePath(path)
0.28 pathlib.py(317):     iswin32 = sys.platform.startswith("win")
0.28 pathlib.py(319):     if iswin32 and sep not in pattern and posix_sep in pattern:
0.28 pathlib.py(325):     if sep not in pattern:
0.28 pathlib.py(326):         name = path.name
0.28 pathlib.py(331):     return fnmatch.fnmatch(name, pattern)
0.28 pathlib.py(316):     path = PurePath(path)
0.28 pathlib.py(317):     iswin32 = sys.platform.startswith("win")
0.28 pathlib.py(319):     if iswin32 and sep not in pattern and posix_sep in pattern:
0.28 pathlib.py(325):     if sep not in pattern:
0.28 pathlib.py(326):         name = path.name
0.28 pathlib.py(331):     return fnmatch.fnmatch(name, pattern)
0.28 pathlib.py(316):     path = PurePath(path)
0.28 pathlib.py(317):     iswin32 = sys.platform.startswith("win")
0.28 pathlib.py(319):     if iswin32 and sep not in pattern and posix_sep in pattern:
0.28 pathlib.py(325):     if sep not in pattern:
0.28 pathlib.py(326):         name = path.name
0.28 pathlib.py(331):     return fnmatch.fnmatch(name, pattern)
0.28 pathlib.py(316):     path = PurePath(path)
0.28 pathlib.py(317):     iswin32 = sys.platform.startswith("win")
0.28 pathlib.py(319):     if iswin32 and sep not in pattern and posix_sep in pattern:
0.28 pathlib.py(325):     if sep not in pattern:
0.28 pathlib.py(328):         name = str(path)
0.28 pathlib.py(329):         if path.is_absolute() and not os.path.isabs(pattern):
0.28 pathlib.py(330):             pattern = "*{}{}".format(os.sep, pattern)
0.28 pathlib.py(331):     return fnmatch.fnmatch(name, pattern)
0.28 pathlib.py(316):     path = PurePath(path)
0.28 pathlib.py(317):     iswin32 = sys.platform.startswith("win")
0.28 pathlib.py(319):     if iswin32 and sep not in pattern and posix_sep in pattern:
0.28 pathlib.py(325):     if sep not in pattern:
0.28 pathlib.py(326):         name = path.name
0.28 pathlib.py(331):     return fnmatch.fnmatch(name, pattern)
0.28 pathlib.py(316):     path = PurePath(path)
0.28 pathlib.py(317):     iswin32 = sys.platform.startswith("win")
0.28 pathlib.py(319):     if iswin32 and sep not in pattern and posix_sep in pattern:
0.28 pathlib.py(325):     if sep not in pattern:
0.28 pathlib.py(326):         name = path.name
0.28 pathlib.py(331):     return fnmatch.fnmatch(name, pattern)
0.28 pathlib.py(316):     path = PurePath(path)
0.28 pathlib.py(317):     iswin32 = sys.platform.startswith("win")
0.28 pathlib.py(319):     if iswin32 and sep not in pattern and posix_sep in pattern:
0.28 pathlib.py(325):     if sep not in pattern:
0.28 pathlib.py(326):         name = path.name
0.28 pathlib.py(331):     return fnmatch.fnmatch(name, pattern)
0.28 pathlib.py(316):     path = PurePath(path)
0.28 pathlib.py(317):     iswin32 = sys.platform.startswith("win")
0.28 pathlib.py(319):     if iswin32 and sep not in pattern and posix_sep in pattern:
0.28 pathlib.py(325):     if sep not in pattern:
0.28 pathlib.py(326):         name = path.name
0.28 pathlib.py(331):     return fnmatch.fnmatch(name, pattern)
0.28 pathlib.py(316):     path = PurePath(path)
0.28 pathlib.py(317):     iswin32 = sys.platform.startswith("win")
0.28 pathlib.py(319):     if iswin32 and sep not in pattern and posix_sep in pattern:
0.28 pathlib.py(325):     if sep not in pattern:
0.28 pathlib.py(328):         name = str(path)
0.28 pathlib.py(329):         if path.is_absolute() and not os.path.isabs(pattern):
0.28 pathlib.py(330):             pattern = "*{}{}".format(os.sep, pattern)
0.28 pathlib.py(331):     return fnmatch.fnmatch(name, pattern)
0.28 pathlib.py(316):     path = PurePath(path)
0.28 pathlib.py(317):     iswin32 = sys.platform.startswith("win")
0.28 pathlib.py(319):     if iswin32 and sep not in pattern and posix_sep in pattern:
0.28 pathlib.py(325):     if sep not in pattern:
0.28 pathlib.py(326):         name = path.name
0.28 pathlib.py(331):     return fnmatch.fnmatch(name, pattern)
0.28 pathlib.py(316):     path = PurePath(path)
0.28 pathlib.py(317):     iswin32 = sys.platform.startswith("win")
0.28 pathlib.py(319):     if iswin32 and sep not in pattern and posix_sep in pattern:
0.28 pathlib.py(325):     if sep not in pattern:
0.28 pathlib.py(326):         name = path.name
0.28 pathlib.py(331):     return fnmatch.fnmatch(name, pattern)
0.28 pathlib.py(316):     path = PurePath(path)
0.28 pathlib.py(317):     iswin32 = sys.platform.startswith("win")
0.28 pathlib.py(319):     if iswin32 and sep not in pattern and posix_sep in pattern:
0.28 pathlib.py(325):     if sep not in pattern:
0.28 pathlib.py(326):         name = path.name
0.28 pathlib.py(331):     return fnmatch.fnmatch(name, pattern)
0.28 pathlib.py(316):     path = PurePath(path)
0.28 pathlib.py(317):     iswin32 = sys.platform.startswith("win")
0.28 pathlib.py(319):     if iswin32 and sep not in pattern and posix_sep in pattern:
0.28 pathlib.py(325):     if sep not in pattern:
0.28 pathlib.py(326):         name = path.name
0.28 pathlib.py(331):     return fnmatch.fnmatch(name, pattern)
0.28 pathlib.py(316):     path = PurePath(path)
0.28 pathlib.py(317):     iswin32 = sys.platform.startswith("win")
0.28 pathlib.py(319):     if iswin32 and sep not in pattern and posix_sep in pattern:
0.28 pathlib.py(325):     if sep not in pattern:
0.28 pathlib.py(326):         name = path.name
0.28 pathlib.py(331):     return fnmatch.fnmatch(name, pattern)
0.28 pathlib.py(316):     path = PurePath(path)
0.28 pathlib.py(317):     iswin32 = sys.platform.startswith("win")
0.28 pathlib.py(319):     if iswin32 and sep not in pattern and posix_sep in pattern:
0.28 pathlib.py(325):     if sep not in pattern:
0.28 pathlib.py(326):         name = path.name
0.28 pathlib.py(331):     return fnmatch.fnmatch(name, pattern)
0.28 pathlib.py(316):     path = PurePath(path)
0.28 pathlib.py(317):     iswin32 = sys.platform.startswith("win")
0.28 pathlib.py(319):     if iswin32 and sep not in pattern and posix_sep in pattern:
0.28 pathlib.py(325):     if sep not in pattern:
0.28 pathlib.py(328):         name = str(path)
0.28 pathlib.py(329):         if path.is_absolute() and not os.path.isabs(pattern):
0.28 pathlib.py(330):             pattern = "*{}{}".format(os.sep, pattern)
0.28 pathlib.py(331):     return fnmatch.fnmatch(name, pattern)
0.28 __init__.py(1111):     if config.option.color == "yes":
0.28 __init__.py(1113):     if config.option.color == "no":
0.28 __init__.py(1115):     return tw
0.28 __init__.py(1032):         name = self._opt2dest.get(name, name)
0.28 __init__.py(1033):         try:
0.28 __init__.py(1034):             val = getattr(self.option, name)
0.28 __init__.py(1035):             if val is None and skip:
0.28 __init__.py(1037):             return val
0.28 __init__.py(1032):         name = self._opt2dest.get(name, name)
0.28 __init__.py(1033):         try:
0.28 __init__.py(1034):             val = getattr(self.option, name)
0.28 __init__.py(1035):             if val is None and skip:
0.28 __init__.py(1037):             return val
0.28 __init__.py(957):         try:
0.28 __init__.py(958):             return self._inicache[name]
0.28 __init__.py(959):         except KeyError:
0.28 __init__.py(960):             self._inicache[name] = val = self._getini(name)
0.28 __init__.py(964):         try:
0.28 __init__.py(965):             description, type, default = self._parser._inidict[name]
0.28 __init__.py(968):         value = self._get_override_ini_value(name)
0.28 __init__.py(1009):         value = None
0.28 __init__.py(1013):         for ini_config in self._override_ini:
0.28 __init__.py(1021):         return value
0.28 __init__.py(969):         if value is None:
0.28 __init__.py(970):             try:
0.28 __init__.py(971):                 value = self.inicfg[name]
0.28 __init__.py(972):             except KeyError:
0.28 __init__.py(973):                 if default is not None:
0.28 __init__.py(974):                     return default
0.28 __init__.py(961):             return val
0.28 __init__.py(313):         if name in _pytest.deprecated.DEPRECATED_EXTERNAL_PLUGINS:
0.28 __init__.py(323):         ret = super().register(plugin, name)
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(273):         if name == "pytest_plugins":
0.28 __init__.py(276):         method = getattr(plugin, name)
0.28 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.28 __init__.py(280):         if not inspect.isroutine(method):
0.28 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.28 __init__.py(285):             opts = {}
0.28 __init__.py(286):         if opts is not None:
0.28 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.28 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(293):         return opts
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(273):         if name == "pytest_plugins":
0.28 __init__.py(276):         method = getattr(plugin, name)
0.28 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.28 __init__.py(280):         if not inspect.isroutine(method):
0.28 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.28 __init__.py(285):             opts = {}
0.28 __init__.py(286):         if opts is not None:
0.28 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.28 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(293):         return opts
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(273):         if name == "pytest_plugins":
0.28 __init__.py(276):         method = getattr(plugin, name)
0.28 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.28 __init__.py(280):         if not inspect.isroutine(method):
0.28 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.28 __init__.py(285):             opts = {}
0.28 __init__.py(286):         if opts is not None:
0.28 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.28 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(293):         return opts
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(273):         if name == "pytest_plugins":
0.28 __init__.py(276):         method = getattr(plugin, name)
0.28 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.28 __init__.py(280):         if not inspect.isroutine(method):
0.28 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.28 __init__.py(285):             opts = {}
0.28 __init__.py(286):         if opts is not None:
0.28 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.28 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(293):         return opts
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(273):         if name == "pytest_plugins":
0.28 __init__.py(276):         method = getattr(plugin, name)
0.28 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.28 __init__.py(280):         if not inspect.isroutine(method):
0.28 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.28 __init__.py(285):             opts = {}
0.28 __init__.py(286):         if opts is not None:
0.28 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.28 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(293):         return opts
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(273):         if name == "pytest_plugins":
0.28 __init__.py(276):         method = getattr(plugin, name)
0.28 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.28 __init__.py(280):         if not inspect.isroutine(method):
0.28 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.28 __init__.py(285):             opts = {}
0.28 __init__.py(286):         if opts is not None:
0.28 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.28 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(293):         return opts
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(273):         if name == "pytest_plugins":
0.28 __init__.py(276):         method = getattr(plugin, name)
0.28 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.28 __init__.py(280):         if not inspect.isroutine(method):
0.28 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.28 __init__.py(285):             opts = {}
0.28 __init__.py(286):         if opts is not None:
0.28 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.28 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(293):         return opts
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(273):         if name == "pytest_plugins":
0.28 __init__.py(276):         method = getattr(plugin, name)
0.28 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.28 __init__.py(280):         if not inspect.isroutine(method):
0.28 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.28 __init__.py(285):             opts = {}
0.28 __init__.py(286):         if opts is not None:
0.28 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.28 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(293):         return opts
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(273):         if name == "pytest_plugins":
0.28 __init__.py(276):         method = getattr(plugin, name)
0.28 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.28 __init__.py(280):         if not inspect.isroutine(method):
0.28 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.28 __init__.py(285):             opts = {}
0.28 __init__.py(286):         if opts is not None:
0.28 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.28 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(293):         return opts
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(273):         if name == "pytest_plugins":
0.28 __init__.py(276):         method = getattr(plugin, name)
0.28 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.28 __init__.py(280):         if not inspect.isroutine(method):
0.28 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.28 __init__.py(285):             opts = {}
0.28 __init__.py(286):         if opts is not None:
0.28 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.28 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(293):         return opts
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(273):         if name == "pytest_plugins":
0.28 __init__.py(276):         method = getattr(plugin, name)
0.28 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.28 __init__.py(280):         if not inspect.isroutine(method):
0.28 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.28 __init__.py(285):             opts = {}
0.28 __init__.py(286):         if opts is not None:
0.28 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.28 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(293):         return opts
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(273):         if name == "pytest_plugins":
0.28 __init__.py(276):         method = getattr(plugin, name)
0.28 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.28 __init__.py(280):         if not inspect.isroutine(method):
0.28 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.28 __init__.py(286):         if opts is not None:
0.28 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.28 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(293):         return opts
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(273):         if name == "pytest_plugins":
0.28 __init__.py(276):         method = getattr(plugin, name)
0.28 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.28 __init__.py(280):         if not inspect.isroutine(method):
0.28 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.28 __init__.py(286):         if opts is not None:
0.28 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.28 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(293):         return opts
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(273):         if name == "pytest_plugins":
0.28 __init__.py(276):         method = getattr(plugin, name)
0.28 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.28 __init__.py(280):         if not inspect.isroutine(method):
0.28 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.28 __init__.py(286):         if opts is not None:
0.28 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.28 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(293):         return opts
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(273):         if name == "pytest_plugins":
0.28 __init__.py(276):         method = getattr(plugin, name)
0.28 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.28 __init__.py(280):         if not inspect.isroutine(method):
0.28 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.28 __init__.py(285):             opts = {}
0.28 __init__.py(286):         if opts is not None:
0.28 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.28 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(293):         return opts
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(273):         if name == "pytest_plugins":
0.28 __init__.py(276):         method = getattr(plugin, name)
0.28 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.28 __init__.py(280):         if not inspect.isroutine(method):
0.28 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.28 __init__.py(285):             opts = {}
0.28 __init__.py(286):         if opts is not None:
0.28 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.28 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.28 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.28 __init__.py(293):         return opts
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(324):         if ret:
0.28 __init__.py(325):             self.hook.pytest_plugin_registered.call_historic(
0.28 __init__.py(326):                 kwargs=dict(plugin=plugin, manager=self)
0.28 __init__.py(325):             self.hook.pytest_plugin_registered.call_historic(
0.28 __init__.py(329):             if isinstance(plugin, types.ModuleType):
0.28 __init__.py(331):         return ret
0.28 __init__.py(948):         x = self.getini(name)
0.28 __init__.py(957):         try:
0.28 __init__.py(958):             return self._inicache[name]
0.28 __init__.py(949):         assert isinstance(x, list)
0.28 __init__.py(950):         x.append(line)  # modifies the cached list inline
0.28 __init__.py(948):         x = self.getini(name)
0.28 __init__.py(957):         try:
0.28 __init__.py(958):             return self._inicache[name]
0.28 __init__.py(949):         assert isinstance(x, list)
0.28 __init__.py(950):         x.append(line)  # modifies the cached list inline
0.28 __init__.py(957):         try:
0.28 __init__.py(958):             return self._inicache[name]
0.28 __init__.py(959):         except KeyError:
0.28 __init__.py(960):             self._inicache[name] = val = self._getini(name)
0.28 __init__.py(964):         try:
0.28 __init__.py(965):             description, type, default = self._parser._inidict[name]
0.28 __init__.py(968):         value = self._get_override_ini_value(name)
0.28 __init__.py(1009):         value = None
0.28 __init__.py(1013):         for ini_config in self._override_ini:
0.28 __init__.py(1021):         return value
0.28 __init__.py(969):         if value is None:
0.28 __init__.py(970):             try:
0.28 __init__.py(971):                 value = self.inicfg[name]
0.28 __init__.py(972):             except KeyError:
0.28 __init__.py(973):                 if default is not None:
0.28 __init__.py(975):                 if type is None:
0.28 __init__.py(976):                     return ""
0.28 __init__.py(961):             return val
0.28 __init__.py(344):         config.addinivalue_line(
0.28 __init__.py(345):             "markers",
0.28 __init__.py(346):             "tryfirst: mark a hook implementation function such that the "
0.28 __init__.py(344):         config.addinivalue_line(
0.28 __init__.py(948):         x = self.getini(name)
0.28 __init__.py(957):         try:
0.28 __init__.py(958):             return self._inicache[name]
0.28 __init__.py(949):         assert isinstance(x, list)
0.28 __init__.py(950):         x.append(line)  # modifies the cached list inline
0.28 __init__.py(349):         config.addinivalue_line(
0.28 __init__.py(350):             "markers",
0.28 __init__.py(351):             "trylast: mark a hook implementation function such that the "
0.28 __init__.py(349):         config.addinivalue_line(
0.28 __init__.py(948):         x = self.getini(name)
0.28 __init__.py(957):         try:
0.28 __init__.py(958):             return self._inicache[name]
0.28 __init__.py(949):         assert isinstance(x, list)
0.28 __init__.py(950):         x.append(line)  # modifies the cached list inline
0.28 __init__.py(354):         self._configured = True
0.28 __init__.py(1032):         name = self._opt2dest.get(name, name)
0.28 __init__.py(1033):         try:
0.28 __init__.py(1034):             val = getattr(self.option, name)
0.28 __init__.py(1035):             if val is None and skip:
0.28 __init__.py(1037):             return val
0.28 __init__.py(957):         try:
0.28 __init__.py(958):             return self._inicache[name]
0.28 __init__.py(959):         except KeyError:
0.28 __init__.py(960):             self._inicache[name] = val = self._getini(name)
0.28 __init__.py(964):         try:
0.28 __init__.py(965):             description, type, default = self._parser._inidict[name]
0.28 __init__.py(968):         value = self._get_override_ini_value(name)
0.28 __init__.py(1009):         value = None
0.28 __init__.py(1013):         for ini_config in self._override_ini:
0.28 __init__.py(1021):         return value
0.28 __init__.py(969):         if value is None:
0.28 __init__.py(970):             try:
0.28 __init__.py(971):                 value = self.inicfg[name]
0.28 __init__.py(972):             except KeyError:
0.28 __init__.py(973):                 if default is not None:
0.28 __init__.py(974):                     return default
0.28 __init__.py(961):             return val
0.28 __init__.py(1032):         name = self._opt2dest.get(name, name)
0.28 __init__.py(1033):         try:
0.28 __init__.py(1034):             val = getattr(self.option, name)
0.28 __init__.py(1035):             if val is None and skip:
0.28 __init__.py(1037):             return val
0.28 __init__.py(957):         try:
0.28 __init__.py(958):             return self._inicache[name]
0.28 __init__.py(959):         except KeyError:
0.28 __init__.py(960):             self._inicache[name] = val = self._getini(name)
0.28 __init__.py(964):         try:
0.28 __init__.py(965):             description, type, default = self._parser._inidict[name]
0.28 __init__.py(968):         value = self._get_override_ini_value(name)
0.28 __init__.py(1009):         value = None
0.28 __init__.py(1013):         for ini_config in self._override_ini:
0.28 __init__.py(1021):         return value
0.28 __init__.py(969):         if value is None:
0.28 __init__.py(970):             try:
0.28 __init__.py(971):                 value = self.inicfg[name]
0.28 __init__.py(972):             except KeyError:
0.28 __init__.py(973):                 if default is not None:
0.28 __init__.py(974):                     return default
0.28 __init__.py(961):             return val
0.28 __init__.py(1032):         name = self._opt2dest.get(name, name)
0.28 __init__.py(1033):         try:
0.28 __init__.py(1034):             val = getattr(self.option, name)
0.28 __init__.py(1035):             if val is None and skip:
0.28 __init__.py(1037):             return val
0.28 __init__.py(957):         try:
0.28 __init__.py(958):             return self._inicache[name]
0.28 __init__.py(959):         except KeyError:
0.28 __init__.py(960):             self._inicache[name] = val = self._getini(name)
0.28 __init__.py(964):         try:
0.28 __init__.py(965):             description, type, default = self._parser._inidict[name]
0.28 __init__.py(968):         value = self._get_override_ini_value(name)
0.28 __init__.py(1009):         value = None
0.28 __init__.py(1013):         for ini_config in self._override_ini:
0.28 __init__.py(1021):         return value
0.28 __init__.py(969):         if value is None:
0.28 __init__.py(970):             try:
0.28 __init__.py(971):                 value = self.inicfg[name]
0.28 __init__.py(972):             except KeyError:
0.28 __init__.py(973):                 if default is not None:
0.28 __init__.py(974):                     return default
0.28 __init__.py(961):             return val
0.28 __init__.py(1110):     tw = py.io.TerminalWriter(*args, **kwargs)
0.28 __init__.py(1111):     if config.option.color == "yes":
0.28 __init__.py(1113):     if config.option.color == "no":
0.28 __init__.py(1115):     return tw
0.28 __init__.py(1032):         name = self._opt2dest.get(name, name)
0.28 __init__.py(1033):         try:
0.28 __init__.py(1034):             val = getattr(self.option, name)
0.28 __init__.py(1035):             if val is None and skip:
0.28 __init__.py(1037):             return val
0.28 __init__.py(957):         try:
0.28 __init__.py(958):             return self._inicache[name]
0.28 __init__.py(959):         except KeyError:
0.28 __init__.py(960):             self._inicache[name] = val = self._getini(name)
0.28 __init__.py(964):         try:
0.28 __init__.py(965):             description, type, default = self._parser._inidict[name]
0.28 __init__.py(968):         value = self._get_override_ini_value(name)
0.28 __init__.py(1009):         value = None
0.28 __init__.py(1013):         for ini_config in self._override_ini:
0.28 __init__.py(1021):         return value
0.28 __init__.py(969):         if value is None:
0.28 __init__.py(970):             try:
0.28 __init__.py(971):                 value = self.inicfg[name]
0.28 __init__.py(972):             except KeyError:
0.28 __init__.py(973):                 if default is not None:
0.28 __init__.py(975):                 if type is None:
0.28 __init__.py(976):                     return ""
0.28 __init__.py(961):             return val
0.28 __init__.py(1032):         name = self._opt2dest.get(name, name)
0.28 __init__.py(1033):         try:
0.28 __init__.py(1034):             val = getattr(self.option, name)
0.28 __init__.py(1035):             if val is None and skip:
0.28 __init__.py(1037):             return val
0.28 __init__.py(957):         try:
0.28 __init__.py(958):             return self._inicache[name]
0.28 __init__.py(959):         except KeyError:
0.28 __init__.py(960):             self._inicache[name] = val = self._getini(name)
0.28 __init__.py(964):         try:
0.28 __init__.py(965):             description, type, default = self._parser._inidict[name]
0.28 __init__.py(968):         value = self._get_override_ini_value(name)
0.28 __init__.py(1009):         value = None
0.28 __init__.py(1013):         for ini_config in self._override_ini:
0.28 __init__.py(1021):         return value
0.28 __init__.py(969):         if value is None:
0.28 __init__.py(970):             try:
0.28 __init__.py(971):                 value = self.inicfg[name]
0.28 __init__.py(972):             except KeyError:
0.28 __init__.py(973):                 if default is not None:
0.28 __init__.py(975):                 if type is None:
0.28 __init__.py(976):                     return ""
0.28 __init__.py(961):             return val
0.28 __init__.py(1032):         name = self._opt2dest.get(name, name)
0.28 __init__.py(1033):         try:
0.28 __init__.py(1034):             val = getattr(self.option, name)
0.28 __init__.py(1035):             if val is None and skip:
0.28 __init__.py(1037):             return val
0.28 __init__.py(957):         try:
0.28 __init__.py(958):             return self._inicache[name]
0.28 __init__.py(959):         except KeyError:
0.28 __init__.py(960):             self._inicache[name] = val = self._getini(name)
0.28 __init__.py(964):         try:
0.28 __init__.py(965):             description, type, default = self._parser._inidict[name]
0.28 __init__.py(968):         value = self._get_override_ini_value(name)
0.28 __init__.py(1009):         value = None
0.28 __init__.py(1013):         for ini_config in self._override_ini:
0.28 __init__.py(1021):         return value
0.28 __init__.py(969):         if value is None:
0.28 __init__.py(970):             try:
0.28 __init__.py(971):                 value = self.inicfg[name]
0.28 __init__.py(972):             except KeyError:
0.28 __init__.py(973):                 if default is not None:
0.28 __init__.py(974):                     return default
0.28 __init__.py(961):             return val
0.28 __init__.py(1032):         name = self._opt2dest.get(name, name)
0.28 __init__.py(1033):         try:
0.28 __init__.py(1034):             val = getattr(self.option, name)
0.28 __init__.py(1035):             if val is None and skip:
0.28 __init__.py(1037):             return val
0.28 __init__.py(957):         try:
0.28 __init__.py(958):             return self._inicache[name]
0.28 __init__.py(959):         except KeyError:
0.28 __init__.py(960):             self._inicache[name] = val = self._getini(name)
0.28 __init__.py(964):         try:
0.28 __init__.py(965):             description, type, default = self._parser._inidict[name]
0.28 __init__.py(968):         value = self._get_override_ini_value(name)
0.28 __init__.py(1009):         value = None
0.28 __init__.py(1013):         for ini_config in self._override_ini:
0.28 __init__.py(1021):         return value
0.28 __init__.py(969):         if value is None:
0.28 __init__.py(970):             try:
0.28 __init__.py(971):                 value = self.inicfg[name]
0.28 __init__.py(972):             except KeyError:
0.28 __init__.py(973):                 if default is not None:
0.28 __init__.py(974):                     return default
0.28 __init__.py(961):             return val
0.28 __init__.py(1032):         name = self._opt2dest.get(name, name)
0.28 __init__.py(1033):         try:
0.28 __init__.py(1034):             val = getattr(self.option, name)
0.28 __init__.py(1035):             if val is None and skip:
0.28 __init__.py(1037):             return val
0.28 __init__.py(957):         try:
0.28 __init__.py(958):             return self._inicache[name]
0.28 __init__.py(959):         except KeyError:
0.28 __init__.py(960):             self._inicache[name] = val = self._getini(name)
0.28 __init__.py(964):         try:
0.28 __init__.py(965):             description, type, default = self._parser._inidict[name]
0.28 __init__.py(968):         value = self._get_override_ini_value(name)
0.28 __init__.py(1009):         value = None
0.28 __init__.py(1013):         for ini_config in self._override_ini:
0.28 __init__.py(1021):         return value
0.28 __init__.py(969):         if value is None:
0.28 __init__.py(970):             try:
0.28 __init__.py(971):                 value = self.inicfg[name]
0.28 __init__.py(972):             except KeyError:
0.28 __init__.py(973):                 if default is not None:
0.28 __init__.py(975):                 if type is None:
0.28 __init__.py(976):                     return ""
0.28 __init__.py(961):             return val
0.28 __init__.py(1032):         name = self._opt2dest.get(name, name)
0.28 __init__.py(1033):         try:
0.28 __init__.py(1034):             val = getattr(self.option, name)
0.28 __init__.py(1035):             if val is None and skip:
0.28 __init__.py(1037):             return val
0.28 __init__.py(957):         try:
0.28 __init__.py(958):             return self._inicache[name]
0.28 __init__.py(959):         except KeyError:
0.28 __init__.py(960):             self._inicache[name] = val = self._getini(name)
0.28 __init__.py(964):         try:
0.28 __init__.py(965):             description, type, default = self._parser._inidict[name]
0.28 __init__.py(968):         value = self._get_override_ini_value(name)
0.28 __init__.py(1009):         value = None
0.28 __init__.py(1013):         for ini_config in self._override_ini:
0.28 __init__.py(1021):         return value
0.28 __init__.py(969):         if value is None:
0.28 __init__.py(970):             try:
0.28 __init__.py(971):                 value = self.inicfg[name]
0.28 __init__.py(972):             except KeyError:
0.28 __init__.py(973):                 if default is not None:
0.28 __init__.py(974):                     return default
0.28 __init__.py(961):             return val
0.28 __init__.py(313):         if name in _pytest.deprecated.DEPRECATED_EXTERNAL_PLUGINS:
0.28 __init__.py(323):         ret = super().register(plugin, name)
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.28 __init__.py(271):             return
0.28 __init__.py(270):         if not name.startswith("pytest_"):
0.29 __init__.py(271):             return
0.29 __init__.py(270):         if not name.startswith("pytest_"):
0.29 __init__.py(271):             return
0.29 __init__.py(270):         if not name.startswith("pytest_"):
0.29 __init__.py(271):             return
0.29 __init__.py(270):         if not name.startswith("pytest_"):
0.29 __init__.py(271):             return
0.29 __init__.py(270):         if not name.startswith("pytest_"):
0.29 __init__.py(271):             return
0.29 __init__.py(270):         if not name.startswith("pytest_"):
0.29 __init__.py(271):             return
0.29 __init__.py(270):         if not name.startswith("pytest_"):
0.29 __init__.py(271):             return
0.29 __init__.py(270):         if not name.startswith("pytest_"):
0.29 __init__.py(271):             return
0.29 __init__.py(270):         if not name.startswith("pytest_"):
0.29 __init__.py(271):             return
0.29 __init__.py(270):         if not name.startswith("pytest_"):
0.29 __init__.py(271):             return
0.29 __init__.py(270):         if not name.startswith("pytest_"):
0.29 __init__.py(271):             return
0.29 __init__.py(270):         if not name.startswith("pytest_"):
0.29 __init__.py(273):         if name == "pytest_plugins":
0.29 __init__.py(276):         method = getattr(plugin, name)
0.29 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.29 __init__.py(280):         if not inspect.isroutine(method):
0.29 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.29 __init__.py(286):         if opts is not None:
0.29 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.29 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.29 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.29 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.29 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.29 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.29 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.29 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.29 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.29 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.29 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.29 __init__.py(293):         return opts
0.29 __init__.py(270):         if not name.startswith("pytest_"):
0.29 __init__.py(273):         if name == "pytest_plugins":
0.29 __init__.py(276):         method = getattr(plugin, name)
0.29 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.29 __init__.py(280):         if not inspect.isroutine(method):
0.29 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.29 __init__.py(286):         if opts is not None:
0.29 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.29 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.29 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.29 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.29 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.29 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.29 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.29 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.29 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.29 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.29 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.29 __init__.py(293):         return opts
0.29 __init__.py(270):         if not name.startswith("pytest_"):
0.29 __init__.py(273):         if name == "pytest_plugins":
0.29 __init__.py(276):         method = getattr(plugin, name)
0.29 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.29 __init__.py(280):         if not inspect.isroutine(method):
0.29 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.29 __init__.py(286):         if opts is not None:
0.29 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.29 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.29 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.29 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.29 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.29 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.29 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.29 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.29 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.29 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.29 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.29 __init__.py(293):         return opts
0.29 __init__.py(270):         if not name.startswith("pytest_"):
0.29 __init__.py(273):         if name == "pytest_plugins":
0.29 __init__.py(276):         method = getattr(plugin, name)
0.29 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.29 __init__.py(280):         if not inspect.isroutine(method):
0.29 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.29 __init__.py(286):         if opts is not None:
0.29 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.29 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.29 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.29 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.29 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.29 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.29 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.29 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.29 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.29 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.29 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.29 __init__.py(293):         return opts
0.29 __init__.py(270):         if not name.startswith("pytest_"):
0.29 __init__.py(273):         if name == "pytest_plugins":
0.29 __init__.py(276):         method = getattr(plugin, name)
0.29 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.29 __init__.py(280):         if not inspect.isroutine(method):
0.29 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.29 __init__.py(286):         if opts is not None:
0.29 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.29 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.29 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.29 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.29 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.29 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.29 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.29 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.29 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.29 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.29 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.29 __init__.py(293):         return opts
0.29 __init__.py(270):         if not name.startswith("pytest_"):
0.29 __init__.py(273):         if name == "pytest_plugins":
0.29 __init__.py(276):         method = getattr(plugin, name)
0.29 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.29 __init__.py(280):         if not inspect.isroutine(method):
0.29 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.29 __init__.py(286):         if opts is not None:
0.29 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.29 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.29 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.29 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.29 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.29 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.29 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.29 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.29 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.29 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.29 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.29 __init__.py(293):         return opts
0.29 __init__.py(270):         if not name.startswith("pytest_"):
0.29 __init__.py(273):         if name == "pytest_plugins":
0.29 __init__.py(276):         method = getattr(plugin, name)
0.29 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.29 __init__.py(280):         if not inspect.isroutine(method):
0.29 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.29 __init__.py(286):         if opts is not None:
0.29 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.29 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.29 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.29 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.29 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.29 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.29 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.29 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.29 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.29 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.29 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.29 __init__.py(293):         return opts
0.29 __init__.py(270):         if not name.startswith("pytest_"):
0.29 __init__.py(273):         if name == "pytest_plugins":
0.29 __init__.py(276):         method = getattr(plugin, name)
0.29 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.29 __init__.py(280):         if not inspect.isroutine(method):
0.29 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.29 __init__.py(286):         if opts is not None:
0.29 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.29 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.29 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.29 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.29 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.29 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.29 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.29 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.29 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.29 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.29 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.29 __init__.py(293):         return opts
0.29 __init__.py(270):         if not name.startswith("pytest_"):
0.29 __init__.py(273):         if name == "pytest_plugins":
0.29 __init__.py(276):         method = getattr(plugin, name)
0.29 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.29 __init__.py(280):         if not inspect.isroutine(method):
0.29 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.29 __init__.py(286):         if opts is not None:
0.29 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.29 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.29 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.29 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.29 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.29 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.29 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.29 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.29 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.29 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.29 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.29 __init__.py(293):         return opts
0.29 __init__.py(270):         if not name.startswith("pytest_"):
0.29 __init__.py(273):         if name == "pytest_plugins":
0.29 __init__.py(276):         method = getattr(plugin, name)
0.29 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.29 __init__.py(280):         if not inspect.isroutine(method):
0.29 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.29 __init__.py(286):         if opts is not None:
0.29 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.29 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.29 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.29 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.29 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.29 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.29 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.29 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.29 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.29 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.29 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.29 __init__.py(293):         return opts
0.29 __init__.py(270):         if not name.startswith("pytest_"):
0.29 __init__.py(271):             return
0.29 __init__.py(324):         if ret:
0.29 __init__.py(325):             self.hook.pytest_plugin_registered.call_historic(
0.29 __init__.py(326):                 kwargs=dict(plugin=plugin, manager=self)
0.29 __init__.py(325):             self.hook.pytest_plugin_registered.call_historic(
0.29 __init__.py(329):             if isinstance(plugin, types.ModuleType):
0.29 __init__.py(331):         return ret
0.29 __init__.py(957):         try:
0.29 __init__.py(958):             return self._inicache[name]
0.29 __init__.py(959):         except KeyError:
0.29 __init__.py(960):             self._inicache[name] = val = self._getini(name)
0.29 __init__.py(964):         try:
0.29 __init__.py(965):             description, type, default = self._parser._inidict[name]
0.29 __init__.py(968):         value = self._get_override_ini_value(name)
0.29 __init__.py(1009):         value = None
0.29 __init__.py(1013):         for ini_config in self._override_ini:
0.29 __init__.py(1021):         return value
0.29 __init__.py(969):         if value is None:
0.29 __init__.py(970):             try:
0.29 __init__.py(971):                 value = self.inicfg[name]
0.29 __init__.py(972):             except KeyError:
0.29 __init__.py(973):                 if default is not None:
0.29 __init__.py(974):                     return default
0.29 __init__.py(961):             return val
0.29 __init__.py(313):         if name in _pytest.deprecated.DEPRECATED_EXTERNAL_PLUGINS:
0.29 __init__.py(323):         ret = super().register(plugin, name)
0.29 __init__.py(270):         if not name.startswith("pytest_"):
0.29 __init__.py(271):             return
0.29 __init__.py(270):         if not name.startswith("pytest_"):
0.29 __init__.py(271):             return
0.29 __init__.py(270):         if not name.startswith("pytest_"):
0.29 __init__.py(271):             return
0.29 __init__.py(270):         if not name.startswith("pytest_"):
0.29 __init__.py(271):             return
0.29 __init__.py(270):         if not name.startswith("pytest_"):
0.29 __init__.py(271):             return
0.29 __init__.py(270):         if not name.startswith("pytest_"):
0.29 __init__.py(271):             return
0.29 __init__.py(270):         if not name.startswith("pytest_"):
0.29 __init__.py(271):             return
0.29 __init__.py(270):         if not name.startswith("pytest_"):
0.29 __init__.py(271):             return
0.29 __init__.py(270):         if not name.startswith("pytest_"):
0.29 __init__.py(271):             return
0.29 __init__.py(270):         if not name.startswith("pytest_"):
0.29 __init__.py(271):             return
0.29 __init__.py(270):         if not name.startswith("pytest_"):
0.29 __init__.py(271):             return
0.29 __init__.py(270):         if not name.startswith("pytest_"):
0.29 __init__.py(271):             return
0.29 __init__.py(270):         if not name.startswith("pytest_"):
0.29 __init__.py(271):             return
0.29 __init__.py(270):         if not name.startswith("pytest_"):
0.29 __init__.py(271):             return
0.29 __init__.py(270):         if not name.startswith("pytest_"):
0.29 __init__.py(271):             return
0.29 __init__.py(270):         if not name.startswith("pytest_"):
0.29 __init__.py(271):             return
0.29 __init__.py(270):         if not name.startswith("pytest_"):
0.29 __init__.py(271):             return
0.29 __init__.py(270):         if not name.startswith("pytest_"):
0.29 __init__.py(271):             return
0.29 __init__.py(270):         if not name.startswith("pytest_"):
0.29 __init__.py(271):             return
0.29 __init__.py(270):         if not name.startswith("pytest_"):
0.29 __init__.py(271):             return
0.29 __init__.py(270):         if not name.startswith("pytest_"):
0.29 __init__.py(271):             return
0.29 __init__.py(270):         if not name.startswith("pytest_"):
0.29 __init__.py(271):             return
0.29 __init__.py(270):         if not name.startswith("pytest_"):
0.29 __init__.py(271):             return
0.29 __init__.py(270):         if not name.startswith("pytest_"):
0.29 __init__.py(271):             return
0.29 __init__.py(270):         if not name.startswith("pytest_"):
0.29 __init__.py(271):             return
0.29 __init__.py(270):         if not name.startswith("pytest_"):
0.29 __init__.py(271):             return
0.29 __init__.py(270):         if not name.startswith("pytest_"):
0.29 __init__.py(271):             return
0.29 __init__.py(270):         if not name.startswith("pytest_"):
0.29 __init__.py(271):             return
0.29 __init__.py(270):         if not name.startswith("pytest_"):
0.29 __init__.py(271):             return
0.29 __init__.py(270):         if not name.startswith("pytest_"):
0.29 __init__.py(271):             return
0.29 __init__.py(270):         if not name.startswith("pytest_"):
0.29 __init__.py(271):             return
0.29 __init__.py(270):         if not name.startswith("pytest_"):
0.29 __init__.py(271):             return
0.29 __init__.py(270):         if not name.startswith("pytest_"):
0.29 __init__.py(271):             return
0.29 __init__.py(270):         if not name.startswith("pytest_"):
0.29 __init__.py(271):             return
0.29 __init__.py(270):         if not name.startswith("pytest_"):
0.29 __init__.py(271):             return
0.29 __init__.py(270):         if not name.startswith("pytest_"):
0.29 __init__.py(271):             return
0.29 __init__.py(270):         if not name.startswith("pytest_"):
0.29 __init__.py(271):             return
0.29 __init__.py(270):         if not name.startswith("pytest_"):
0.29 __init__.py(271):             return
0.29 __init__.py(270):         if not name.startswith("pytest_"):
0.29 __init__.py(271):             return
0.29 __init__.py(270):         if not name.startswith("pytest_"):
0.29 __init__.py(271):             return
0.29 __init__.py(270):         if not name.startswith("pytest_"):
0.29 __init__.py(273):         if name == "pytest_plugins":
0.29 __init__.py(276):         method = getattr(plugin, name)
0.29 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.29 __init__.py(280):         if not inspect.isroutine(method):
0.29 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.29 __init__.py(285):             opts = {}
0.29 __init__.py(286):         if opts is not None:
0.29 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.29 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.29 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.29 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.29 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.29 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.29 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.29 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.29 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.29 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.29 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.29 __init__.py(293):         return opts
0.29 __init__.py(270):         if not name.startswith("pytest_"):
0.29 __init__.py(273):         if name == "pytest_plugins":
0.29 __init__.py(276):         method = getattr(plugin, name)
0.29 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.29 __init__.py(280):         if not inspect.isroutine(method):
0.29 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.29 __init__.py(285):             opts = {}
0.29 __init__.py(286):         if opts is not None:
0.29 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.29 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.29 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.29 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.29 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.29 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.29 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.29 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.29 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.29 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.29 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.29 __init__.py(293):         return opts
0.29 __init__.py(270):         if not name.startswith("pytest_"):
0.29 __init__.py(273):         if name == "pytest_plugins":
0.29 __init__.py(276):         method = getattr(plugin, name)
0.29 __init__.py(277):         opts = super().parse_hookimpl_opts(plugin, name)
0.29 __init__.py(280):         if not inspect.isroutine(method):
0.29 __init__.py(284):         if opts is None and name.startswith("pytest_"):
0.29 __init__.py(285):             opts = {}
0.29 __init__.py(286):         if opts is not None:
0.29 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.29 __init__.py(289):             known_marks = {m.name for m in getattr(method, "pytestmark", [])}
0.29 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.29 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.29 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.29 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.29 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.29 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.29 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.29 __init__.py(292):                 opts.setdefault(name, hasattr(method, name) or name in known_marks)
0.29 __init__.py(291):             for name in ("tryfirst", "trylast", "optionalhook", "hookwrapper"):
0.29 __init__.py(293):         return opts
0.29 __init__.py(691):         return py.path.local(str(self.invocation_params.dir))
0.29 __init__.py(400):         if self._noconftest:
0.29 __init__.py(403):         if path.isfile():
0.29 __init__.py(406):             directory = path
0.29 __init__.py(411):         clist = []
0.29 __init__.py(412):         for parent in directory.realpath().parts():
0.29 __init__.py(413):             if self._confcutdir and self._confcutdir.relto(parent):
0.29 __init__.py(414):                 continue
0.29 __init__.py(412):         for parent in directory.realpath().parts():
0.29 __init__.py(413):             if self._confcutdir and self._confcutdir.relto(parent):
0.29 __init__.py(415):             conftestpath = parent.join("conftest.py")
0.29 __init__.py(416):             if conftestpath.isfile():
0.29 __init__.py(412):         for parent in directory.realpath().parts():
0.29 __init__.py(419):         self._dirpath2confmods[directory] = clist
0.29 __init__.py(420):         return clist
0.29 __init__.py(270):         if not name.startswith("pytest_"):
0.29 __init__.py(271):             return
0.29 __init__.py(324):         if ret:
0.29 __init__.py(325):             self.hook.pytest_plugin_registered.call_historic(
0.29 __init__.py(326):                 kwargs=dict(plugin=plugin, manager=self)
0.29 __init__.py(325):             self.hook.pytest_plugin_registered.call_historic(
0.29 __init__.py(329):             if isinstance(plugin, types.ModuleType):
0.29 __init__.py(331):         return ret
============================= test session starts ==============================
platform linux -- Python 3.9.23, pytest-5.1.3.dev14+g73c5b7f4b, py-1.11.0, pluggy-0.13.1
0.29 __init__.py(957):         try:
0.29 __init__.py(958):             return self._inicache[name]
0.29 __init__.py(959):         except KeyError:
0.29 __init__.py(960):             self._inicache[name] = val = self._getini(name)
0.29 __init__.py(964):         try:
0.29 __init__.py(965):             description, type, default = self._parser._inidict[name]
0.29 __init__.py(968):         value = self._get_override_ini_value(name)
0.29 __init__.py(1009):         value = None
0.29 __init__.py(1013):         for ini_config in self._override_ini:
0.29 __init__.py(1021):         return value
0.29 __init__.py(969):         if value is None:
0.29 __init__.py(970):             try:
0.29 __init__.py(971):                 value = self.inicfg[name]
0.29 __init__.py(978):         if type == "pathlist":
0.29 __init__.py(984):         elif type == "args":
0.29 __init__.py(985):             return shlex.split(value)
0.29 __init__.py(961):             return val
0.29 __init__.py(957):         try:
0.29 __init__.py(958):             return self._inicache[name]
rootdir: /testbed, inifile: tox.ini
0.29 __init__.py(1032):         name = self._opt2dest.get(name, name)
0.29 __init__.py(1033):         try:
0.29 __init__.py(1034):             val = getattr(self.option, name)
0.29 __init__.py(1035):             if val is None and skip:
0.29 __init__.py(1037):             return val
0.29 __init__.py(957):         try:
0.29 __init__.py(958):             return self._inicache[name]
0.29 __init__.py(959):         except KeyError:
0.29 __init__.py(960):             self._inicache[name] = val = self._getini(name)
0.29 __init__.py(964):         try:
0.29 __init__.py(965):             description, type, default = self._parser._inidict[name]
0.29 __init__.py(968):         value = self._get_override_ini_value(name)
0.29 __init__.py(1009):         value = None
0.29 __init__.py(1013):         for ini_config in self._override_ini:
0.29 __init__.py(1021):         return value
0.29 __init__.py(969):         if value is None:
0.29 __init__.py(970):             try:
0.29 __init__.py(971):                 value = self.inicfg[name]
0.29 __init__.py(978):         if type == "pathlist":
0.29 __init__.py(984):         elif type == "args":
0.29 __init__.py(986):         elif type == "linelist":
0.29 __init__.py(987):             return [t for t in map(lambda x: x.strip(), value.split("\n")) if t]
0.29 __init__.py(987):             return [t for t in map(lambda x: x.strip(), value.split("\n")) if t]
0.29 __init__.py(987):             return [t for t in map(lambda x: x.strip(), value.split("\n")) if t]
0.29 __init__.py(987):             return [t for t in map(lambda x: x.strip(), value.split("\n")) if t]
0.29 __init__.py(987):             return [t for t in map(lambda x: x.strip(), value.split("\n")) if t]
0.29 __init__.py(987):             return [t for t in map(lambda x: x.strip(), value.split("\n")) if t]
0.29 __init__.py(987):             return [t for t in map(lambda x: x.strip(), value.split("\n")) if t]
0.29 __init__.py(987):             return [t for t in map(lambda x: x.strip(), value.split("\n")) if t]
0.29 __init__.py(987):             return [t for t in map(lambda x: x.strip(), value.split("\n")) if t]
0.29 __init__.py(987):             return [t for t in map(lambda x: x.strip(), value.split("\n")) if t]
0.29 __init__.py(987):             return [t for t in map(lambda x: x.strip(), value.split("\n")) if t]
0.29 __init__.py(987):             return [t for t in map(lambda x: x.strip(), value.split("\n")) if t]
0.29 __init__.py(987):             return [t for t in map(lambda x: x.strip(), value.split("\n")) if t]
0.29 __init__.py(987):             return [t for t in map(lambda x: x.strip(), value.split("\n")) if t]
0.29 __init__.py(987):             return [t for t in map(lambda x: x.strip(), value.split("\n")) if t]
0.29 __init__.py(987):             return [t for t in map(lambda x: x.strip(), value.split("\n")) if t]
0.29 __init__.py(987):             return [t for t in map(lambda x: x.strip(), value.split("\n")) if t]
0.29 __init__.py(987):             return [t for t in map(lambda x: x.strip(), value.split("\n")) if t]
0.29 __init__.py(987):             return [t for t in map(lambda x: x.strip(), value.split("\n")) if t]
0.29 __init__.py(987):             return [t for t in map(lambda x: x.strip(), value.split("\n")) if t]
0.29 __init__.py(961):             return val
0.30 __init__.py(691):         return py.path.local(str(self.invocation_params.dir))
0.30 __init__.py(691):         return py.path.local(str(self.invocation_params.dir))
0.30 __init__.py(1032):         name = self._opt2dest.get(name, name)
0.30 __init__.py(1033):         try:
0.30 __init__.py(1034):             val = getattr(self.option, name)
0.30 __init__.py(1035):             if val is None and skip:
0.30 __init__.py(1037):             return val
0.35 __init__.py(1032):         name = self._opt2dest.get(name, name)
0.35 __init__.py(1033):         try:
0.35 __init__.py(1034):             val = getattr(self.option, name)
0.35 __init__.py(1035):             if val is None and skip:
0.35 __init__.py(1037):             return val
collected 1 item
0.35 __init__.py(1032):         name = self._opt2dest.get(name, name)
0.35 __init__.py(1033):         try:
0.35 __init__.py(1034):             val = getattr(self.option, name)
0.35 __init__.py(1035):             if val is None and skip:
0.35 __init__.py(1037):             return val
0.35 __init__.py(1032):         name = self._opt2dest.get(name, name)
0.35 __init__.py(1033):         try:
0.35 __init__.py(1034):             val = getattr(self.option, name)
0.35 __init__.py(1035):             if val is None and skip:
0.35 __init__.py(1037):             return val
0.35 __init__.py(1032):         name = self._opt2dest.get(name, name)
0.35 __init__.py(1033):         try:
0.35 __init__.py(1034):             val = getattr(self.option, name)
0.35 __init__.py(1035):             if val is None and skip:
0.35 __init__.py(1037):             return val
0.35 __init__.py(957):         try:
0.35 __init__.py(958):             return self._inicache[name]
0.35 __init__.py(1032):         name = self._opt2dest.get(name, name)
0.35 __init__.py(1033):         try:
0.35 __init__.py(1034):             val = getattr(self.option, name)
0.35 __init__.py(1035):             if val is None and skip:
0.35 __init__.py(1037):             return val
0.35 __init__.py(957):         try:
0.35 __init__.py(958):             return self._inicache[name]
0.35 __init__.py(957):         try:
0.35 __init__.py(958):             return self._inicache[name]
0.35 __init__.py(959):         except KeyError:
0.35 __init__.py(960):             self._inicache[name] = val = self._getini(name)
0.35 __init__.py(964):         try:
0.35 __init__.py(965):             description, type, default = self._parser._inidict[name]
0.35 __init__.py(968):         value = self._get_override_ini_value(name)
0.35 __init__.py(1009):         value = None
0.35 __init__.py(1013):         for ini_config in self._override_ini:
0.35 __init__.py(1021):         return value
0.35 __init__.py(969):         if value is None:
0.35 __init__.py(970):             try:
0.35 __init__.py(971):                 value = self.inicfg[name]
0.35 __init__.py(972):             except KeyError:
0.35 __init__.py(973):                 if default is not None:
0.35 __init__.py(974):                     return default
0.35 __init__.py(961):             return val
0.35 pathlib.py(316):     path = PurePath(path)
0.35 pathlib.py(317):     iswin32 = sys.platform.startswith("win")
0.35 pathlib.py(319):     if iswin32 and sep not in pattern and posix_sep in pattern:
0.35 pathlib.py(325):     if sep not in pattern:
0.35 pathlib.py(326):         name = path.name
0.35 pathlib.py(331):     return fnmatch.fnmatch(name, pattern)
0.35 pathlib.py(316):     path = PurePath(path)
0.35 pathlib.py(317):     iswin32 = sys.platform.startswith("win")
0.35 pathlib.py(319):     if iswin32 and sep not in pattern and posix_sep in pattern:
0.35 pathlib.py(325):     if sep not in pattern:
0.35 pathlib.py(326):         name = path.name
0.35 pathlib.py(331):     return fnmatch.fnmatch(name, pattern)
0.35 pathlib.py(316):     path = PurePath(path)
0.35 pathlib.py(317):     iswin32 = sys.platform.startswith("win")
0.35 pathlib.py(319):     if iswin32 and sep not in pattern and posix_sep in pattern:
0.35 pathlib.py(325):     if sep not in pattern:
0.35 pathlib.py(326):         name = path.name
0.35 pathlib.py(331):     return fnmatch.fnmatch(name, pattern)
0.35 pathlib.py(316):     path = PurePath(path)
0.35 pathlib.py(317):     iswin32 = sys.platform.startswith("win")
0.35 pathlib.py(319):     if iswin32 and sep not in pattern and posix_sep in pattern:
0.35 pathlib.py(325):     if sep not in pattern:
0.35 pathlib.py(326):         name = path.name
0.35 pathlib.py(331):     return fnmatch.fnmatch(name, pattern)
0.35 pathlib.py(316):     path = PurePath(path)
0.35 pathlib.py(317):     iswin32 = sys.platform.startswith("win")
0.35 pathlib.py(319):     if iswin32 and sep not in pattern and posix_sep in pattern:
0.35 pathlib.py(325):     if sep not in pattern:
0.35 pathlib.py(328):         name = str(path)
0.35 pathlib.py(329):         if path.is_absolute() and not os.path.isabs(pattern):
0.35 pathlib.py(330):             pattern = "*{}{}".format(os.sep, pattern)
0.35 pathlib.py(331):     return fnmatch.fnmatch(name, pattern)

testing/test_coverup_pytest-dev__pytest-5840.py 0.35 __init__.py(1032):         name = self._opt2dest.get(name, name)
0.35 __init__.py(1033):         try:
0.35 __init__.py(1034):             val = getattr(self.option, name)
0.35 __init__.py(1035):             if val is None and skip:
0.35 __init__.py(1037):             return val
0.35 __init__.py(1032):         name = self._opt2dest.get(name, name)
0.35 __init__.py(1033):         try:
0.35 __init__.py(1034):             val = getattr(self.option, name)
0.35 __init__.py(1035):             if val is None and skip:
0.35 __init__.py(1037):             return val
0.35 __init__.py(1032):         name = self._opt2dest.get(name, name)
0.35 __init__.py(1033):         try:
0.35 __init__.py(1034):             val = getattr(self.option, name)
0.35 __init__.py(1035):             if val is None and skip:
0.35 __init__.py(1037):             return val
0.35 __init__.py(1032):         name = self._opt2dest.get(name, name)
0.35 __init__.py(1033):         try:
0.35 __init__.py(1034):             val = getattr(self.option, name)
0.35 __init__.py(1035):             if val is None and skip:
0.35 __init__.py(1037):             return val
0.35 __init__.py(1032):         name = self._opt2dest.get(name, name)
0.35 __init__.py(1033):         try:
0.35 __init__.py(1034):             val = getattr(self.option, name)
0.35 __init__.py(1035):             if val is None and skip:
0.35 __init__.py(1037):             return val
0.35 __init__.py(1032):         name = self._opt2dest.get(name, name)
0.35 __init__.py(1033):         try:
0.35 __init__.py(1034):             val = getattr(self.option, name)
0.35 __init__.py(1035):             if val is None and skip:
0.35 __init__.py(1037):             return val
0.35 __init__.py(1032):         name = self._opt2dest.get(name, name)
0.35 __init__.py(1033):         try:
0.35 __init__.py(1034):             val = getattr(self.option, name)
0.35 __init__.py(1035):             if val is None and skip:
0.35 __init__.py(1037):             return val
0.35 __init__.py(1032):         name = self._opt2dest.get(name, name)
0.35 __init__.py(1033):         try:
0.35 __init__.py(1034):             val = getattr(self.option, name)
0.35 __init__.py(1035):             if val is None and skip:
0.35 __init__.py(1037):             return val
0.35 __init__.py(1032):         name = self._opt2dest.get(name, name)
0.35 __init__.py(1033):         try:
0.35 __init__.py(1034):             val = getattr(self.option, name)
0.35 __init__.py(1035):             if val is None and skip:
0.35 __init__.py(1037):             return val
0.35 __init__.py(1032):         name = self._opt2dest.get(name, name)
0.35 __init__.py(1033):         try:
0.35 __init__.py(1034):             val = getattr(self.option, name)
0.35 __init__.py(1035):             if val is None and skip:
0.35 __init__.py(1037):             return val
0.38 __init__.py(1049):         return self.getoption(name)
0.38 __init__.py(1032):         name = self._opt2dest.get(name, name)
0.38 __init__.py(1033):         try:
0.38 __init__.py(1034):             val = getattr(self.option, name)
0.38 __init__.py(1035):             if val is None and skip:
0.38 __init__.py(1037):             return val
F0.38 __init__.py(1032):         name = self._opt2dest.get(name, name)
0.38 __init__.py(1033):         try:
0.38 __init__.py(1034):             val = getattr(self.option, name)
0.38 __init__.py(1035):             if val is None and skip:
0.38 __init__.py(1037):             return val
                        [100%]0.38 __init__.py(1032):         name = self._opt2dest.get(name, name)
0.38 __init__.py(1033):         try:
0.38 __init__.py(1034):             val = getattr(self.option, name)
0.38 __init__.py(1035):             if val is None and skip:
0.38 __init__.py(1037):             return val
0.38 __init__.py(1032):         name = self._opt2dest.get(name, name)
0.38 __init__.py(1033):         try:
0.38 __init__.py(1034):             val = getattr(self.option, name)
0.38 __init__.py(1035):             if val is None and skip:
0.38 __init__.py(1037):             return val


=================================== FAILURES ===================================
____________________ test_importerror_due_to_lowercase_path ____________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f2e84f5faf0>

    def test_importerror_due_to_lowercase_path(monkeypatch):
        # Setup: Create a mock for the os.path.normcase to simulate the bug
        def mock_normcase(path):
            return path.lower()  # Simulate the bug by converting path to lowercase
    
        monkeypatch.setattr(os.path, 'normcase', mock_normcase)
    
        # Simulate the directory structure and path
        mixed_case_path = "C:\\Azure\\KMS\\ComponentTest\\Python\\PIsys\\conftest.py"
        lower_case_path = mixed_case_path.lower()
    
        # Simulate the ImportError with the path in lowercase
        try:
            # This is where the actual pytest collection would occur
            # For the purpose of this test, we simulate the ImportError
>           raise ImportError(f"ImportError while loading conftest '{lower_case_path}'.")
E           ImportError: ImportError while loading conftest 'c:\azure\kms\componenttest\python\pisys\conftest.py'.

testing/test_coverup_pytest-dev__pytest-5840.py:20: ImportError

During handling of the above exception, another exception occurred:

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f2e84f5faf0>

    def test_importerror_due_to_lowercase_path(monkeypatch):
        # Setup: Create a mock for the os.path.normcase to simulate the bug
        def mock_normcase(path):
            return path.lower()  # Simulate the bug by converting path to lowercase
    
        monkeypatch.setattr(os.path, 'normcase', mock_normcase)
    
        # Simulate the directory structure and path
        mixed_case_path = "C:\\Azure\\KMS\\ComponentTest\\Python\\PIsys\\conftest.py"
        lower_case_path = mixed_case_path.lower()
    
        # Simulate the ImportError with the path in lowercase
        try:
            # This is where the actual pytest collection would occur
            # For the purpose of this test, we simulate the ImportError
            raise ImportError(f"ImportError while loading conftest '{lower_case_path}'.")
        except ImportError as e:
            # Assert that the ImportError message contains the path in mixed case
>           assert mixed_case_path in str(e)  # Correct behavior: should match the original case
E           assert 'C:\\Azure\\KMS\\ComponentTest\\Python\\PIsys\\conftest.py' in "ImportError while loading conftest 'c:\\azure\\kms\\componenttest\\python\\pisys\\conftest.py'."
E            +  where "ImportError while loading conftest 'c:\\azure\\kms\\componenttest\\python\\pisys\\conftest.py'." = str(ImportError("ImportError while loading conftest 'c:\\azure\\kms\\componenttest\\python\\pisys\\conftest.py'."))

testing/test_coverup_pytest-dev__pytest-5840.py:23: AssertionError
----------------------------- Captured stdout call -----------------------------
0.35 __init__.py(1032):         name = self._opt2dest.get(name, name)
0.35 __init__.py(1033):         try:
0.35 __init__.py(1034):             val = getattr(self.option, name)
0.35 __init__.py(1035):             if val is None and skip:
0.35 __init__.py(1037):             return val
0.38 __init__.py(1032):         name = self._opt2dest.get(name, name)
0.38 __init__.py(1033):         try:
0.38 __init__.py(1034):             val = getattr(self.option, name)
0.38 __init__.py(1035):             if val is None and skip:
0.38 __init__.py(1037):             return val
0.38 __init__.py(957):         try:
0.38 __init__.py(958):             return self._inicache[name]
0.38 __init__.py(1049):         return self.getoption(name)
0.38 __init__.py(1032):         name = self._opt2dest.get(name, name)
0.38 __init__.py(1033):         try:
0.38 __init__.py(1034):             val = getattr(self.option, name)
0.38 __init__.py(1035):             if val is None and skip:
0.38 __init__.py(1037):             return val
0.38 pathlib.py(316):     path = PurePath(path)
0.38 pathlib.py(317):     iswin32 = sys.platform.startswith("win")
0.38 pathlib.py(319):     if iswin32 and sep not in pattern and posix_sep in pattern:
0.38 pathlib.py(325):     if sep not in pattern:
0.38 pathlib.py(326):         name = path.name
0.38 pathlib.py(331):     return fnmatch.fnmatch(name, pattern)
0.38 pathlib.py(316):     path = PurePath(path)
0.38 pathlib.py(317):     iswin32 = sys.platform.startswith("win")
0.38 pathlib.py(319):     if iswin32 and sep not in pattern and posix_sep in pattern:
0.38 pathlib.py(325):     if sep not in pattern:
0.38 pathlib.py(326):         name = path.name
0.38 pathlib.py(331):     return fnmatch.fnmatch(name, pattern)
0.38 pathlib.py(316):     path = PurePath(path)
0.38 pathlib.py(317):     iswin32 = sys.platform.startswith("win")
0.38 pathlib.py(319):     if iswin32 and sep not in pattern and posix_sep in pattern:
0.38 pathlib.py(325):     if sep not in pattern:
0.38 pathlib.py(326):         name = path.name
0.38 pathlib.py(331):     return fnmatch.fnmatch(name, pattern)
0.38 pathlib.py(316):     path = PurePath(path)
0.38 pathlib.py(317):     iswin32 = sys.platform.startswith("win")
0.38 pathlib.py(319):     if iswin32 and sep not in pattern and posix_sep in pattern:
0.38 pathlib.py(325):     if sep not in pattern:
0.38 pathlib.py(326):         name = path.name
0.38 pathlib.py(331):     return fnmatch.fnmatch(name, pattern)
0.38 pathlib.py(316):     path = PurePath(path)
0.38 pathlib.py(317):     iswin32 = sys.platform.startswith("win")
0.39 pathlib.py(319):     if iswin32 and sep not in pattern and posix_sep in pattern:
0.39 pathlib.py(325):     if sep not in pattern:
0.39 pathlib.py(328):         name = str(path)
0.39 pathlib.py(329):         if path.is_absolute() and not os.path.isabs(pattern):
0.39 pathlib.py(330):             pattern = "*{}{}".format(os.sep, pattern)
0.39 pathlib.py(331):     return fnmatch.fnmatch(name, pattern)
0.39 pathlib.py(316):     path = PurePath(path)
0.39 pathlib.py(317):     iswin32 = sys.platform.startswith("win")
0.39 pathlib.py(319):     if iswin32 and sep not in pattern and posix_sep in pattern:
0.39 pathlib.py(325):     if sep not in pattern:
0.39 pathlib.py(326):         name = path.name
0.39 pathlib.py(331):     return fnmatch.fnmatch(name, pattern)
0.39 pathlib.py(316):     path = PurePath(path)
0.39 pathlib.py(317):     iswin32 = sys.platform.startswith("win")
0.39 pathlib.py(319):     if iswin32 and sep not in pattern and posix_sep in pattern:
0.39 pathlib.py(325):     if sep not in pattern:
0.39 pathlib.py(326):         name = path.name
0.39 pathlib.py(331):     return fnmatch.fnmatch(name, pattern)
0.39 pathlib.py(316):     path = PurePath(path)
0.39 pathlib.py(317):     iswin32 = sys.platform.startswith("win")
0.39 pathlib.py(319):     if iswin32 and sep not in pattern and posix_sep in pattern:
0.39 pathlib.py(325):     if sep not in pattern:
0.39 pathlib.py(326):         name = path.name
0.39 pathlib.py(331):     return fnmatch.fnmatch(name, pattern)
0.39 pathlib.py(316):     path = PurePath(path)
0.39 pathlib.py(317):     iswin32 = sys.platform.startswith("win")
0.39 pathlib.py(319):     if iswin32 and sep not in pattern and posix_sep in pattern:
0.39 pathlib.py(325):     if sep not in pattern:
0.39 pathlib.py(326):         name = path.name
0.39 pathlib.py(331):     return fnmatch.fnmatch(name, pattern)
0.39 pathlib.py(316):     path = PurePath(path)
0.39 pathlib.py(317):     iswin32 = sys.platform.startswith("win")
0.39 pathlib.py(319):     if iswin32 and sep not in pattern and posix_sep in pattern:
0.39 pathlib.py(325):     if sep not in pattern:
0.39 pathlib.py(328):         name = str(path)
0.39 pathlib.py(329):         if path.is_absolute() and not os.path.isabs(pattern):
0.39 pathlib.py(330):             pattern = "*{}{}".format(os.sep, pattern)
0.39 pathlib.py(331):     return fnmatch.fnmatch(name, pattern)
0.39 pathlib.py(316):     path = PurePath(path)
0.39 pathlib.py(317):     iswin32 = sys.platform.startswith("win")
0.39 pathlib.py(319):     if iswin32 and sep not in pattern and posix_sep in pattern:
0.39 pathlib.py(325):     if sep not in pattern:
0.39 pathlib.py(326):         name = path.name
0.39 pathlib.py(331):     return fnmatch.fnmatch(name, pattern)
0.39 pathlib.py(316):     path = PurePath(path)
0.39 pathlib.py(317):     iswin32 = sys.platform.startswith("win")
0.39 pathlib.py(319):     if iswin32 and sep not in pattern and posix_sep in pattern:
0.39 pathlib.py(325):     if sep not in pattern:
0.39 pathlib.py(326):         name = path.name
0.39 pathlib.py(331):     return fnmatch.fnmatch(name, pattern)
0.39 pathlib.py(316):     path = PurePath(path)
0.39 pathlib.py(317):     iswin32 = sys.platform.startswith("win")
0.39 pathlib.py(319):     if iswin32 and sep not in pattern and posix_sep in pattern:
0.39 pathlib.py(325):     if sep not in pattern:
0.39 pathlib.py(326):         name = path.name
0.39 pathlib.py(331):     return fnmatch.fnmatch(name, pattern)
0.39 pathlib.py(316):     path = PurePath(path)
0.39 pathlib.py(317):     iswin32 = sys.platform.startswith("win")
0.39 pathlib.py(319):     if iswin32 and sep not in pattern and posix_sep in pattern:
0.39 pathlib.py(325):     if sep not in pattern:
0.39 pathlib.py(326):         name = path.name
0.39 pathlib.py(331):     return fnmatch.fnmatch(name, pattern)
0.39 pathlib.py(316):     path = PurePath(path)
0.39 pathlib.py(317):     iswin32 = sys.platform.startswith("win")
0.39 pathlib.py(319):     if iswin32 and sep not in pattern and posix_sep in pattern:
0.39 pathlib.py(325):     if sep not in pattern:
0.39 pathlib.py(328):         name = str(path)
0.39 pathlib.py(329):         if path.is_absolute() and not os.path.isabs(pattern):
0.39 pathlib.py(330):             pattern = "*{}{}".format(os.sep, pattern)
0.39 pathlib.py(331):     return fnmatch.fnmatch(name, pattern)
0.39 pathlib.py(316):     path = PurePath(path)
0.39 pathlib.py(317):     iswin32 = sys.platform.startswith("win")
0.39 pathlib.py(319):     if iswin32 and sep not in pattern and posix_sep in pattern:
0.39 pathlib.py(325):     if sep not in pattern:
0.39 pathlib.py(326):         name = path.name
0.39 pathlib.py(331):     return fnmatch.fnmatch(name, pattern)
0.39 pathlib.py(316):     path = PurePath(path)
0.39 pathlib.py(317):     iswin32 = sys.platform.startswith("win")
0.39 pathlib.py(319):     if iswin32 and sep not in pattern and posix_sep in pattern:
0.39 pathlib.py(325):     if sep not in pattern:
0.39 pathlib.py(326):         name = path.name
0.39 pathlib.py(331):     return fnmatch.fnmatch(name, pattern)
0.39 pathlib.py(316):     path = PurePath(path)
0.39 pathlib.py(317):     iswin32 = sys.platform.startswith("win")
0.39 pathlib.py(319):     if iswin32 and sep not in pattern and posix_sep in pattern:
0.39 pathlib.py(325):     if sep not in pattern:
0.39 pathlib.py(326):         name = path.name
0.39 pathlib.py(331):     return fnmatch.fnmatch(name, pattern)
0.39 pathlib.py(316):     path = PurePath(path)
0.39 pathlib.py(317):     iswin32 = sys.platform.startswith("win")
0.39 pathlib.py(319):     if iswin32 and sep not in pattern and posix_sep in pattern:
0.39 pathlib.py(325):     if sep not in pattern:
0.39 pathlib.py(326):         name = path.name
0.39 pathlib.py(331):     return fnmatch.fnmatch(name, pattern)
0.39 pathlib.py(316):     path = PurePath(path)
0.39 pathlib.py(317):     iswin32 = sys.platform.startswith("win")
0.39 pathlib.py(319):     if iswin32 and sep not in pattern and posix_sep in pattern:
0.39 pathlib.py(325):     if sep not in pattern:
0.39 pathlib.py(328):         name = str(path)
0.39 pathlib.py(329):         if path.is_absolute() and not os.path.isabs(pattern):
0.39 pathlib.py(330):             pattern = "*{}{}".format(os.sep, pattern)
0.39 pathlib.py(331):     return fnmatch.fnmatch(name, pattern)
0.39 pathlib.py(316):     path = PurePath(path)
0.39 pathlib.py(317):     iswin32 = sys.platform.startswith("win")
0.39 pathlib.py(319):     if iswin32 and sep not in pattern and posix_sep in pattern:
0.39 pathlib.py(325):     if sep not in pattern:
0.39 pathlib.py(326):         name = path.name
0.39 pathlib.py(331):     return fnmatch.fnmatch(name, pattern)
0.39 pathlib.py(316):     path = PurePath(path)
0.39 pathlib.py(317):     iswin32 = sys.platform.startswith("win")
0.39 pathlib.py(319):     if iswin32 and sep not in pattern and posix_sep in pattern:
0.39 pathlib.py(325):     if sep not in pattern:
0.39 pathlib.py(326):         name = path.name
0.39 pathlib.py(331):     return fnmatch.fnmatch(name, pattern)
0.39 pathlib.py(316):     path = PurePath(path)
0.39 pathlib.py(317):     iswin32 = sys.platform.startswith("win")
0.39 pathlib.py(319):     if iswin32 and sep not in pattern and posix_sep in pattern:
0.39 pathlib.py(325):     if sep not in pattern:
0.39 pathlib.py(326):         name = path.name
0.39 pathlib.py(331):     return fnmatch.fnmatch(name, pattern)
0.39 pathlib.py(316):     path = PurePath(path)
0.39 pathlib.py(317):     iswin32 = sys.platform.startswith("win")
0.39 pathlib.py(319):     if iswin32 and sep not in pattern and posix_sep in pattern:
0.39 pathlib.py(325):     if sep not in pattern:
0.39 pathlib.py(326):         name = path.name
0.39 pathlib.py(331):     return fnmatch.fnmatch(name, pattern)
0.39 pathlib.py(316):     path = PurePath(path)
0.39 pathlib.py(317):     iswin32 = sys.platform.startswith("win")
0.39 pathlib.py(319):     if iswin32 and sep not in pattern and posix_sep in pattern:
0.39 pathlib.py(325):     if sep not in pattern:
0.39 pathlib.py(328):         name = str(path)
0.39 pathlib.py(329):         if path.is_absolute() and not os.path.isabs(pattern):
0.39 pathlib.py(330):             pattern = "*{}{}".format(os.sep, pattern)
0.39 pathlib.py(331):     return fnmatch.fnmatch(name, pattern)
0.39 __init__.py(757):         if self.invocation_dir != self.rootdir:
0.39 __init__.py(691):         return py.path.local(str(self.invocation_params.dir))
0.39 __init__.py(760):         return nodeid
=========================== short test summary info ============================
FAILED testing/test_coverup_pytest-dev__pytest-5840.py::test_importerror_due_to_lowercase_path
============================== 1 failed in 0.10s ===============================
0.39 __init__.py(706):         if self._configured:
0.39 __init__.py(707):             self._configured = False
0.39 __init__.py(708):             self.hook.pytest_unconfigure(config=self)
0.39 __init__.py(709):             self.hook.pytest_configure._call_history = []
0.39 __init__.py(710):         while self._cleanup:
0.39 __init__.py(711):             fin = self._cleanup.pop()
0.39 __init__.py(712):             fin()
0.39 __init__.py(710):         while self._cleanup:
0.39 __init__.py(711):             fin = self._cleanup.pop()
0.39 __init__.py(712):             fin()
0.39 __init__.py(710):         while self._cleanup:
0.39 __init__.py(711):             fin = self._cleanup.pop()
0.39 __init__.py(712):             fin()
0.39 __init__.py(710):         while self._cleanup:
0.39 __init__.py(711):             fin = self._cleanup.pop()
0.39 __init__.py(712):             fin()
0.39 __init__.py(710):         while self._cleanup:
0.39 __init__.py(79):                 config._ensure_unconfigure()
0.39 __init__.py(706):         if self._configured:
0.39 __init__.py(710):         while self._cleanup:
0.39 __init__.py(77):                 return config.hook.pytest_cmdline_main(config=config)
+ cat coverage.cover
{"/testbed/src/_pytest/pathlib.py": {"1": 1, "2": 1, "3": 1, "4": 1, "5": 1, "6": 1, "7": 1, "8": 1, "9": 1, "10": 1, "11": 1, "12": 1, "13": 1, "14": 1, "15": 1, "17": 1, "19": 1, "20": 1, "22": 0, "24": 1, "27": 1, "29": 1, "32": 1, "41": 1, "78": 1, "86": 1, "94": 1, "105": 1, "111": 1, "119": 1, "139": 1, "160": 1, "177": 1, "194": 1, "220": 1, "239": 1, "245": 1, "257": 1, "265": 1, "288": 1, "299": 1, "334": 1, "36": 0, "37": 0, "38": 0, "43": 0, "45": 0, "46": 0, "47": 0, "49": 0, "51": 0, "52": 0, "53": 0, "55": 0, "58": 0, "60": 0, "66": 0, "67": 0, "68": 0, "69": 0, "71": 0, "72": 0, "73": 0, "75": 0, "61": 0, "62": 0, "82": 0, "83": 0, "88": 0, "89": 0, "90": 0, "91": 0, "100": 0, "101": 0, "102": 0, "108": 0, "113": 0, "114": 0, "115": 0, "116": 0, "128": 0, "129": 0, "130": 0, "131": 0, "132": 0, "133": 0, "134": 0, "135": 0, "136": 0, "141": 0, "143": 0, "144": 0, "145": 0, "146": 0, "147": 0, "148": 0, "149": 0, "151": 0, "152": 0, "154": 0, "155": 0, "156": 0, "162": 0, "163": 0, "164": 0, "165": 0, "166": 0, "168": 0, "169": 0, "170": 0, "171": 0, "172": 0, "173": 0, "174": 0, "179": 0, "181": 0, "191": 0, "182": 0, "183": 0, "185": 0, "186": 0, "187": 0, "188": 0, "189": 0, "196": 0, "197": 0, "198": 0, "199": 0, "201": 0, "202": 0, "203": 0, "204": 0, "209": 0, "213": 0, "214": 0, "215": 0, "216": 0, "217": 0, "222": 0, "223": 0, "224": 0, "225": 0, "226": 0, "227": 0, "228": 0, "229": 0, "230": 0, "232": 0, "233": 0, "234": 0, "236": 0, "241": 0, "242": 0, "247": 0, "248": 0, "249": 0, "250": 0, "251": 0, "252": 0, "253": 0, "254": 0, "259": 0, "260": 0, "261": 0, "262": 0, "267": 0, "268": 0, "269": 0, "270": 0, "271": 0, "272": 0, "273": 0, "274": 0, "276": 0, "277": 0, "278": 0, "279": 0, "280": 0, "281": 0, "283": 0, "284": 0, "285": 0, "289": 1, "290": 1, "291": 1, "292": 1, "293": 1, "294": 0, "296": 1, "316": 225, "317": 225, "319": 225, "323": 0, "325": 225, "326": 182, "328": 43, "329": 43, "330": 43, "331": 225, "335": 0, "336": 0}}
{"/testbed/src/_pytest/config/__init__.py": {"2": 1, "3": 1, "4": 1, "5": 1, "6": 1, "7": 1, "8": 1, "9": 1, "10": 1, "11": 1, "13": 1, "14": 1, "15": 1, "16": 1, "17": 1, "18": 1, "20": 1, "21": 1, "22": 1, "23": 1, "24": 1, "25": 1, "26": 1, "27": 1, "28": 1, "29": 1, "30": 1, "31": 1, "32": 1, "33": 1, "35": 1, "36": 1, "39": 2, "46": 1, "87": 2, "91": 1, "102": 1, "114": 1, "122": 1, "149": 1, "150": 1, "153": 1, "172": 1, "184": 1, "215": 1, "228": 2, "578": 1, "598": 1, "605": 2, "610": 1, "613": 1, "625": 2, "1056": 1, "1065": 1, "1083": 1, "1105": 1, "1118": 1, "40": 1, "41": 0, "42": 0, "43": 0, "54": 1, "56": 1, "57": 1, "58": 1, "59": 0, "60": 0, "61": 0, "62": 0, "63": 0, "65": 0, "68": 0, "67": 0, "69": 0, "66": 0, "71": 0, "72": 0, "73": 0, "74": 0, "76": 1, "77": 2, "79": 1, "80": 0, "81": 0, "82": 0, "83": 0, "84": 0, "88": 1, "97": 0, "98": 0, "99": 0, "108": 0, "109": 0, "110": 0, "155": 1, "156": 2, "157": 1, "158": 2, "159": 1, "163": 1, "165": 1, "167": 30, "168": 29, "169": 1, "181": 0, "185": 1, "186": 1, "187": 1, "188": 0, "189": 0, "190": 0, "191": 0, "192": 0, "194": 1, "195": 1, "196": 1, "197": 1, "198": 0, "199": 0, "200": 0, "202": 0, "203": 1, "204": 0, "206": 0, "207": 2, "208": 1, "210": 0, "211": 0, "212": 0, "217": 0, "216": 0, "225": 0, "238": 1, "266": 1, "295": 1, "312": 1, "333": 1, "337": 1, "341": 1, "359": 1, "390": 1, "398": 1, "399": 1, "422": 1, "431": 1, "472": 1, "491": 1, "516": 1, "519": 1, "522": 1, "525": 1, "530": 1, "239": 1, "240": 1, "243": 1, "244": 1, "245": 1, "246": 1, "247": 1, "249": 1, "250": 1, "251": 1, "252": 0, "253": 0, "254": 0, "255": 0, "256": 0, "257": 0, "258": 0, "259": 0, "262": 1, "264": 1, "270": 1506, "271": 1346, "273": 160, "274": 0, "276": 160, "277": 160, "280": 160, "281": 0, "284": 160, "285": 110, "286": 160, "289": 320, "291": 800, "292": 640, "293": 160, "296": 64, "297": 64, "298": 41, "300": 41, "303": 62, "305": 31, "306": 31, "307": 31, "308": 31, "304": 31, "310": 64, "313": 41, "314": 0, "315": 0, "316": 0, "318": 0, "322": 0, "323": 41, "324": 41, "325": 82, "326": 41, "329": 41, "330": 31, "331": 41, "335": 0, "339": 0, "344": 2, "345": 1, "346": 1, "349": 2, "350": 1, "351": 1, "354": 1, "367": 1, "370": 1, "369": 1, "371": 0, "368": 1, "373": 1, "374": 1, "375": 1, "376": 1, "377": 2, "378": 1, "380": 1, "381": 1, "382": 0, "383": 1, "384": 1, "385": 1, "386": 1, "387": 1, "388": 0, "391": 1, "393": 1, "394": 0, "395": 0, "396": 0, "400": 2, "401": 0, "403": 2, "404": 1, "406": 1, "411": 2, "412": 7, "413": 5, "414": 2, "415": 3, "416": 3, "417": 1, "418": 1, "419": 2, "420": 2, "423": 0, "424": 0, "425": 0, "426": 0, "427": 0, "428": 0, "429": 0, "437": 1, "438": 1, "439": 1, "440": 1, "441": 1, "442": 1, "443": 1, "444": 1, "445": 1, "447": 1, "446": 1, "448": 0, "449": 0, "451": 0, "452": 0, "453": 0, "455": 1, "456": 1, "457": 1, "458": 1, "459": 0, "460": 0, "461": 0, "462": 0, "463": 1, "464": 1, "465": 1, "473": 2, "474": 2, "475": 9, "476": 7, "477": 7, "478": 7, "479": 7, "480": 1, "481": 1, "482": 0, "483": 0, "484": 1, "485": 6, "486": 0, "488": 0, "489": 1, "492": 1, "493": 0, "494": 0, "495": 0, "498": 0, "499": 0, "500": 0, "502": 0, "503": 0, "504": 0, "506": 1, "509": 1, "510": 0, "511": 1, "512": 1, "513": 0, "514": 1, "517": 1, "520": 1, "523": 32, "526": 33, "527": 33, "528": 0, "539": 30, "540": 0, "542": 30, "543": 30, "544": 0, "546": 30, "547": 30, "549": 30, "550": 1, "551": 1, "552": 0, "554": 30, "555": 30, "556": 0, "557": 0, "558": 0, "560": 0, "561": 0, "563": 0, "565": 0, "566": 0, "568": 0, "569": 0, "570": 0, "571": 0, "574": 30, "575": 30, "586": 33, "587": 32, "588": 0, "589": 32, "590": 0, "591": 0, "592": 0, "594": 32, "595": 1, "599": 1, "600": 1, "601": 1, "602": 1, "606": 1, "607": 0, "614": 1, "615": 0, "616": 0, "617": 0, "618": 0, "619": 0, "620": 0, "621": 0, "622": 0, "645": 2, "646": 1, "661": 1, "688": 1, "689": 1, "693": 1, "698": 1, "705": 1, "714": 1, "717": 1, "741": 1, "755": 1, "762": 1, "763": 1, "772": 1, "780": 1, "781": 1, "784": 1, "801": 1, "819": 1, "841": 1, "853": 1, "902": 1, "918": 1, "944": 1, "952": 1, "963": 1, "994": 1, "1008": 1, "1023": 1, "1047": 1, "1051": 1, "657": 1, "658": 1, "659": 1, "662": 1, "664": 1, "665": 0, "666": 0, "669": 1, "670": 1, "672": 1, "673": 2, "674": 1, "675": 1, "677": 1, "678": 1, "679": 1, "680": 1, "681": 1, "682": 1, "683": 1, "684": 1, "685": 1, "686": 1, "691": 6, "696": 2, "699": 1, "700": 1, "701": 1, "702": 1, "703": 1, "706": 2, "707": 1, "708": 1, "709": 1, "710": 6, "711": 4, "712": 4, "715": 0, "718": 1, "719": 1, "720": 0, "725": 0, "726": 0, "728": 0, "730": 0, "729": 0, "732": 0, "733": 0, "734": 0, "737": 0, "739": 1, "742": 0, "743": 0, "745": 0, "746": 0, "747": 0, "749": 0, "750": 0, "751": 0, "752": 0, "753": 0, "757": 1, "758": 0, "759": 0, "760": 1, "765": 0, "766": 0, "767": 0, "768": 0, "769": 0, "770": 0, "773": 185, "774": 105, "776": 80, "777": 41, "778": 39, "782": 1, "785": 2, "786": 1, "788": 2, "789": 1, "790": 1, "791": 1, "792": 1, "794": 1, "795": 1, "796": 1, "797": 1, "798": 1, "799": 1, "808": 1, "809": 1, "810": 1, "811": 1, "812": 1, "813": 0, "814": 0, "816": 1, "817": 1, "825": 1, "827": 1, "829": 0, "831": 14, "833": 12, "838": 1, "839": 0, "834": 72, "835": 0, "832": 0, "843": 1, "844": 1, "845": 2, "846": 1, "849": 1, "851": 1, "854": 1, "855": 1, "856": 1, "858": 0, "859": 0, "857": 0, "861": 1, "862": 1, "864": 1, "863": 1, "867": 1, "868": 1, "869": 1, "870": 1, "873": 1, "874": 1, "875": 2, "876": 1, "878": 1, "879": 1, "880": 1, "881": 1, "882": 2, "883": 1, "885": 0, "886": 0, "887": 0, "890": 0, "892": 0, "893": 0, "894": 0, "896": 0, "897": 0, "900": 0, "903": 1, "905": 1, "906": 1, "907": 1, "908": 0, "909": 0, "911": 0, "912": 0, "913": 0, "914": 0, "910": 0, "920": 2, "921": 1, "922": 0, "923": 1, "924": 2, "925": 1, "927": 1, "929": 1, "930": 1, "931": 1, "932": 2, "933": 1, "935": 1, "936": 0, "937": 0, "938": 0, "939": 0, "940": 1, "941": 0, "942": 0, "948": 9, "949": 9, "950": 9, "957": 72, "958": 72, "959": 22, "960": 22, "961": 22, "964": 22, "965": 22, "966": 0, "967": 0, "968": 22, "969": 22, "970": 22, "971": 22, "972": 15, "973": 15, "974": 11, "975": 4, "976": 4, "977": 0, "978": 7, "979": 0, "980": 0, "981": 0, "982": 0, "983": 0, "984": 7, "985": 5, "986": 2, "987": 32, "988": 0, "989": 0, "991": 0, "992": 0, "995": 0, "996": 0, "997": 0, "998": 0, "999": 0, "1000": 0, "1001": 0, "1002": 0, "1003": 0, "1004": 0, "1005": 0, "1006": 0, "1009": 22, "1013": 22, "1014": 0, "1015": 0, "1016": 0, "1017": 0, "1019": 0, "1020": 0, "1021": 22, "1032": 43, "1033": 43, "1034": 43, "1035": 43, "1036": 0, "1037": 43, "1038": 0, "1039": 0, "1040": 0, "1041": 0, "1042": 0, "1044": 0, "1045": 0, "1049": 6, "1053": 0, "1057": 1, "1058": 1, "1059": 1, "1060": 1, "1062": 0, "1066": 1, "1067": 0, "1068": 0, "1069": 0, "1074": 0, "1075": 0, "1084": 0, "1086": 0, "1087": 0, "1088": 0, "1089": 0, "1090": 0, "1091": 0, "1092": 0, "1093": 0, "1094": 0, "1095": 0, "1096": 0, "1098": 0, "1099": 0, "1102": 0, "1110": 2, "1111": 2, "1112": 0, "1113": 2, "1114": 0, "1115": 2, "1127": 0, "1128": 0, "1129": 0, "1130": 0, "1131": 0, "1133": 0}}
+ git checkout 73c5b7f4b11a81e971f7d1bb18072e06a87060f4
Note: switching to '73c5b7f4b11a81e971f7d1bb18072e06a87060f4'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at 73c5b7f4b Clarify docs by showing tox.ini considered before setup.cfg (#5839)
M	src/_pytest/config/__init__.py
M	src/_pytest/pathlib.py
+ git apply /root/pre_state.patch
error: unrecognized input
