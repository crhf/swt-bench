{"instance_id": "django__django-11119", "repo": "django/django", "version": "3.0", "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27", "patch_list": ["diff --git a/django/template/engine.py b/django/template/engine.py\n--- a/django/template/engine.py\n+++ b/django/template/engine.py\n@@ -160,7 +160,7 @@ def render_to_string(self, template_name, context=None):\n         if isinstance(context, Context):\n             return t.render(context)\n         else:\n-            return t.render(Context(context))\n+            return t.render(Context(context, autoescape=self.autoescape))\n \n     def select_template(self, template_name_list):\n         \"\"\"\n", "diff --git a/dev/null b/tests/test_coverup_django__django-11119.py\nnew file mode 100644\nindex e69de29..9aab7cb 100644\n--- /dev/null\n+++ b/tests/test_coverup_django__django-11119.py\n@@ -0,0 +1,38 @@\n+from django.test import SimpleTestCase\n+from django.template import Engine\n+import os\n+\n+class EngineRenderToStringAutoescapeTest(SimpleTestCase):\n+    def setUp(self):\n+        # Create a temporary template file with special characters\n+        self.template_dir = os.path.join(os.path.dirname(__file__), 'templates')\n+        os.makedirs(self.template_dir, exist_ok=True)\n+        self.template_path = os.path.join(self.template_dir, 'test_template.html')\n+        with open(self.template_path, 'w') as f:\n+            f.write(\"{{ content }}\")\n+\n+    def tearDown(self):\n+        # Clean up the template file after the test\n+        if os.path.exists(self.template_path):\n+            os.remove(self.template_path)\n+        try:\n+            os.rmdir(self.template_dir)\n+        except OSError:\n+            pass  # Ignore if the directory is not empty\n+\n+    def test_render_to_string_autoescape_false(self):\n+        \"\"\"\n+        Test that Engine.render_to_string() correctly does not autoescape output\n+        when autoescape=False is set.\n+        \"\"\"\n+\n+        # Create an Engine with autoescape=False\n+        engine = Engine(dirs=[self.template_dir], autoescape=False)\n+\n+        # Render the template using render_to_string\n+        context = {'content': 'Test & <strong>bold</strong>'}\n+        output = engine.render_to_string('test_template.html', context)\n+\n+        # Assert that the output is not autoescaped\n+        self.assertIn('<strong>bold</strong>', output)\n+        self.assertIn('Test &', output)\n"], "arch": "x86_64", "base_commit": "d4df5e1b0b1c643fe0fc521add0236764ec8e92a", "test_directives": ["test_coverup_django__django-11119"], "coverage_files": ["django/template/engine.py"], "env_name": "testbed", "run_id": "assertflip", "patch_id": "pred_post__AssertFlip", "timeout": 1800, "rm_image": false, "force_rebuild": false, "exec_mode": "unit_test", "reproduction_script_name": null, "compute_coverage": true, "install": {"python": "3.6", "packages": "requirements.txt", "install": "python -m pip install -e .", "eval_commands": ["sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen && locale-gen", "export LANG=en_US.UTF-8", "export LANGUAGE=en_US:en", "export LC_ALL=en_US.UTF-8"]}, "cache_level": "instance", "test_command": "python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/template/engine\\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-11119", "req_install_commands": ["conda create -n testbed python=3.6 -y", "cat <<'EOF_59812759871' > $HOME/requirements.txt\nasgiref ~= 3.2\nargon2-cffi >= 16.1.0\nbcrypt\ndocutils\ngeoip2\njinja2 >= 2.9.2\nnumpy\nPillow != 5.4.0\npylibmc; sys.platform != 'win32'\npython-memcached >= 1.59\npytz\npywatchman; sys.platform != 'win32'\nPyYAML\nselenium\nsqlparse >= 0.2.2\ntblib >= 1.5.0\n\nEOF_59812759871", "conda activate testbed && python -m pip install -r $HOME/requirements.txt", "rm $HOME/requirements.txt"]}