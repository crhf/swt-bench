{"instance_id": "django__django-14034", "repo": "django/django", "version": "4.0", "environment_setup_commit": "475cffd1d64c690cdad16ede4d5e81985738ceb4", "patch_list": ["diff --git a/django/forms/boundfield.py b/django/forms/boundfield.py\n--- a/django/forms/boundfield.py\n+++ b/django/forms/boundfield.py\n@@ -2,7 +2,7 @@\n \n from django.core.exceptions import ValidationError\n from django.forms.utils import flatatt, pretty_name\n-from django.forms.widgets import Textarea, TextInput\n+from django.forms.widgets import MultiWidget, Textarea, TextInput\n from django.utils.functional import cached_property\n from django.utils.html import conditional_escape, format_html, html_safe\n from django.utils.safestring import mark_safe\n@@ -233,7 +233,17 @@ def build_widget_attrs(self, attrs, widget=None):\n         widget = widget or self.field.widget\n         attrs = dict(attrs)  # Copy attrs to avoid modifying the argument.\n         if widget.use_required_attribute(self.initial) and self.field.required and self.form.use_required_attribute:\n-            attrs['required'] = True\n+            # MultiValueField has require_all_fields: if False, fall back\n+            # on subfields.\n+            if (\n+                hasattr(self.field, 'require_all_fields') and\n+                not self.field.require_all_fields and\n+                isinstance(self.field.widget, MultiWidget)\n+            ):\n+                for subfield, subwidget in zip(self.field.fields, widget.widgets):\n+                    subwidget.attrs['required'] = subwidget.use_required_attribute(self.initial) and subfield.required\n+            else:\n+                attrs['required'] = True\n         if self.field.disabled:\n             attrs['disabled'] = True\n         return attrs\n", "diff --git a/dev/null b/tests/test_coverup_django__django-14034.py\nnew file mode 100644\nindex e69de29..062fee0 100644\n--- /dev/null\n+++ b/tests/test_coverup_django__django-14034.py\n@@ -0,0 +1,40 @@\n+from django.test import SimpleTestCase\n+from django.forms import Form, CharField, MultiValueField, MultiWidget\n+\n+class MF(MultiValueField):\n+    widget = MultiWidget\n+\n+    def __init__(self):\n+        fields = [\n+            CharField(required=False),\n+            CharField(required=True),\n+        ]\n+        widget = self.widget(widgets=[\n+            f.widget\n+            for f in fields\n+        ], attrs={})\n+        super(MF, self).__init__(\n+            fields=fields,\n+            widget=widget,\n+            require_all_fields=False,\n+            required=False,\n+        )\n+\n+    def compress(self, value):\n+        return []\n+\n+class F(Form):\n+    mf = MF()\n+\n+class MultiValueFieldTest(SimpleTestCase):\n+    def test_multivaluefield_required_subfield(self):\n+        # Create a form instance with empty values for both subfields\n+        form_data = {\n+            'mf_0': '',\n+            'mf_1': '',\n+        }\n+        form = F(data=form_data)\n+        is_valid = form.is_valid()\n+\n+        # Assert that the form is invalid because one of the subfields is required\n+        self.assertFalse(is_valid)\n"], "arch": "x86_64", "base_commit": "db1fc5cd3c5d36cdb5d0fe4404efd6623dd3e8fb", "test_directives": ["test_coverup_django__django-14034"], "coverage_files": ["django/forms/boundfield.py"], "env_name": "testbed", "run_id": "assertflip", "patch_id": "pred_post__AssertFlip", "timeout": 1800, "rm_image": false, "force_rebuild": false, "exec_mode": "unit_test", "reproduction_script_name": null, "compute_coverage": true, "install": {"python": "3.8", "packages": "requirements.txt", "install": "python -m pip install -e ."}, "cache_level": "instance", "test_command": "python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/forms/boundfield\\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-14034", "req_install_commands": ["conda create -n testbed python=3.8 -y", "cat <<'EOF_59812759871' > $HOME/requirements.txt\nasgiref >= 3.3.2\nargon2-cffi >= 16.1.0\nbackports.zoneinfo; python_version < '3.9'\nbcrypt\ndocutils\ngeoip2\njinja2 >= 2.9.2\nnumpy\nPillow >= 6.2.0\npylibmc; sys.platform != 'win32'\npymemcache >= 3.4.0\npython-memcached >= 1.59\npytz\npywatchman; sys.platform != 'win32'\nPyYAML\nredis >= 3.0.0\nselenium\nsqlparse >= 0.2.2\ntblib >= 1.5.0\ntzdata\ncolorama; sys.platform == 'win32'\n\nEOF_59812759871", "conda activate testbed && python -m pip install -r $HOME/requirements.txt", "rm $HOME/requirements.txt"]}