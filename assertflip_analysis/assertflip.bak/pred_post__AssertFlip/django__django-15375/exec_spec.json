{"instance_id": "django__django-15375", "repo": "django/django", "version": "4.1", "environment_setup_commit": "647480166bfe7532e8c471fef0146e3a17e6c0c9", "patch_list": ["diff --git a/django/db/models/aggregates.py b/django/db/models/aggregates.py\n--- a/django/db/models/aggregates.py\n+++ b/django/db/models/aggregates.py\n@@ -65,7 +65,9 @@ def resolve_expression(self, query=None, allow_joins=True, reuse=None, summarize\n         if hasattr(default, 'resolve_expression'):\n             default = default.resolve_expression(query, allow_joins, reuse, summarize)\n         c.default = None  # Reset the default argument before wrapping.\n-        return Coalesce(c, default, output_field=c._output_field_or_none)\n+        coalesce = Coalesce(c, default, output_field=c._output_field_or_none)\n+        coalesce.is_summary = c.is_summary\n+        return coalesce\n \n     @property\n     def default_alias(self):\n", "diff --git a/dev/null b/tests/test_coverup_django__django-15375.py\nnew file mode 100644\nindex e69de29..9740fc9 100644\n--- /dev/null\n+++ b/tests/test_coverup_django__django-15375.py\n@@ -0,0 +1,44 @@\n+from django.test import TestCase\n+from django.db import models, connection\n+from django.db.models import Sum, F\n+from django.db.utils import OperationalError\n+\n+# Define a test model similar to the one mentioned in the issue ticket\n+class Book(models.Model):\n+    id = models.AutoField(primary_key=True)\n+    title = models.CharField(max_length=100)\n+\n+    class Meta:\n+        app_label = 'test_app'\n+        # Ensure the table is created for the test\n+        managed = True\n+\n+class AggregateDefaultAfterAnnotateTest(TestCase):\n+    databases = '__all__'\n+\n+    @classmethod\n+    def setUpTestData(cls):\n+        # Create test data\n+        with connection.cursor() as cursor:\n+            cursor.execute('PRAGMA foreign_keys = OFF;')\n+            cursor.execute('CREATE TABLE test_app_book (id INTEGER PRIMARY KEY AUTOINCREMENT, title VARCHAR(100));')\n+            cursor.execute('INSERT INTO test_app_book (title) VALUES (\"Book 1\"), (\"Book 2\"), (\"Book 3\");')\n+\n+    def test_aggregate_with_default_after_annotate(self):\n+        \"\"\"\n+        Test that using aggregate() with 'default' after annotate() works without raising an OperationalError.\n+        \"\"\"\n+        try:\n+            # Attempt to trigger the bug by using annotate followed by aggregate with default\n+            result = Book.objects.annotate(idx=F(\"id\")).aggregate(Sum(\"id\", default=0))\n+            # Check that the result is as expected, indicating the bug is fixed\n+            self.assertEqual(result, {'id__sum': 6})\n+        except OperationalError as e:\n+            # Fail the test if OperationalError is raised, indicating the bug is present\n+            self.fail(f\"OperationalError was raised: {e}\")\n+\n+    def tearDown(self):\n+        # Clean up the test data\n+        with connection.cursor() as cursor:\n+            cursor.execute('DROP TABLE test_app_book;')\n+\n"], "arch": "x86_64", "base_commit": "beb7ddbcee03270e833b2f74927ccfc8027aa693", "test_directives": ["test_coverup_django__django-15375"], "coverage_files": ["django/db/models/aggregates.py"], "env_name": "testbed", "run_id": "assertflip", "patch_id": "pred_post__AssertFlip", "timeout": 1800, "rm_image": false, "force_rebuild": false, "exec_mode": "unit_test", "reproduction_script_name": null, "compute_coverage": true, "install": {"python": "3.9", "packages": "requirements.txt", "install": "python -m pip install -e ."}, "cache_level": "instance", "test_command": "python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/db/models/aggregates\\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-15375", "req_install_commands": ["conda create -n testbed python=3.9 -y", "cat <<'EOF_59812759871' > $HOME/requirements.txt\naiosmtpd\nasgiref >= 3.4.1\nargon2-cffi >= 16.1.0\nbackports.zoneinfo; python_version < '3.9'\nbcrypt\nblack\ndocutils\ngeoip2\njinja2 >= 2.9.2\nnumpy\nPillow >= 6.2.0\npylibmc; sys.platform != 'win32'\npymemcache >= 3.4.0\npytz\npywatchman; sys.platform != 'win32'\nPyYAML\nredis >= 3.0.0\nselenium\nsqlparse >= 0.2.2\ntblib >= 1.5.0\ntzdata\ncolorama; sys.platform == 'win32'\n\nEOF_59812759871", "conda activate testbed && python -m pip install -r $HOME/requirements.txt", "rm $HOME/requirements.txt"]}