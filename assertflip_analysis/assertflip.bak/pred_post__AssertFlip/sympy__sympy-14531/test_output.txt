+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD 205da797006360fc629110937e39a19c9561313e
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch master
nothing to commit, working tree clean
+ git show
commit 205da797006360fc629110937e39a19c9561313e
Merge: 25cea104dc d0d81d0633
Author: Chris Smith <smichr@gmail.com>
Date:   Sat Mar 17 17:00:59 2018 -0500

    Merge pull request #14449 from smichr/abs-invert
    
    solving equations with Abs in solveset

+ git diff 205da797006360fc629110937e39a19c9561313e
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Requirement already satisfied: mpmath>=0.19 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from sympy==1.1.2.dev0) (1.3.0)
Installing collected packages: sympy
  Attempting uninstall: sympy
    Found existing installation: sympy 1.1.2.dev0
    Uninstalling sympy-1.1.2.dev0:
      Successfully uninstalled sympy-1.1.2.dev0
  DEPRECATION: Legacy editable install of sympy==1.1.2.dev0 from file:///testbed (setup.py develop) is deprecated. pip 25.3 will enforce this behaviour change. A possible replacement is to add a pyproject.toml or enable --use-pep517, and use setuptools >= 64. If the resulting installation is not behaving as expected, try using --config-settings editable_mode=compat. Please consult the setuptools documentation for more information. Discussion can be found at https://github.com/pypa/pip/issues/11457
  Running setup.py develop for sympy
Successfully installed sympy
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git apply -v -
Checking patch sympy/printing/str.py...
Applied patch sympy/printing/str.py cleanly.
+ git apply -v -
Checking patch sympy/polys/tests/test_coverup_sympy__sympy-14531.py...
Applied patch sympy/polys/tests/test_coverup_sympy__sympy-14531.py cleanly.
+ PYTHONWARNINGS=ignore::UserWarning,ignore::SyntaxWarning
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(sympy/printing/str\.py)' bin/test -C --verbose sympy/polys/tests/test_coverup_sympy__sympy-14531.p
/testbed/sympy/core/basic.py:3: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
  from collections import Mapping, defaultdict
/testbed/sympy/core/expr.py:12: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
  from collections import defaultdict, Iterable
/testbed/sympy/core/containers.py:271: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
  class OrderedSet(collections.MutableSet):
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(sympy/printing/str\\.py)']
0.45 str.py(1): """
0.45 str.py(5): from __future__ import print_function, division
0.45 str.py(7): from sympy.core import S, Rational, Pow, Basic, Mul
0.45 str.py(8): from sympy.core.mul import _keep_coeff
0.45 str.py(9): from .printer import Printer
0.45 str.py(10): from sympy.printing.precedence import precedence, PRECEDENCE
0.45 str.py(12): import mpmath.libmp as mlib
0.45 str.py(13): from mpmath.libmp import prec_to_dps
0.45 str.py(15): from sympy.utilities import default_sort_key
0.45 str.py(18): class StrPrinter(Printer):
0.45 str.py(18): class StrPrinter(Printer):
0.45 str.py(19):     printmethod = "_sympystr"
0.45 str.py(21):         "order": None,
0.45 str.py(22):         "full_prec": "auto",
0.45 str.py(23):         "sympy_integers": False,
0.45 str.py(24):         "abbrev": False,
0.45 str.py(20):     _default_settings = {
0.45 str.py(27):     _relationals = dict()
0.45 str.py(29):     def parenthesize(self, item, level, strict=False):
0.45 str.py(35):     def stringify(self, args, sep, level=0):
0.45 str.py(38):     def emptyPrinter(self, expr):
0.45 str.py(49):     def _print_Add(self, expr, order=None):
0.45 str.py(73):     def _print_BooleanTrue(self, expr):
0.45 str.py(76):     def _print_BooleanFalse(self, expr):
0.45 str.py(79):     def _print_Not(self, expr):
0.45 str.py(82):     def _print_And(self, expr):
0.45 str.py(85):     def _print_Or(self, expr):
0.45 str.py(88):     def _print_AppliedPredicate(self, expr):
0.45 str.py(91):     def _print_Basic(self, expr):
0.45 str.py(95):     def _print_BlockMatrix(self, B):
0.45 str.py(100):     def _print_Catalan(self, expr):
0.45 str.py(103):     def _print_ComplexInfinity(self, expr):
0.45 str.py(106):     def _print_Derivative(self, expr):
0.45 str.py(111):     def _print_dict(self, d):
0.45 str.py(121):     def _print_Dict(self, expr):
0.45 str.py(125):     def _print_RandomDomain(self, d):
0.45 str.py(134):     def _print_Dummy(self, expr):
0.45 str.py(137):     def _print_EulerGamma(self, expr):
0.45 str.py(140):     def _print_Exp1(self, expr):
0.45 str.py(143):     def _print_ExprCondPair(self, expr):
0.45 str.py(146):     def _print_FiniteSet(self, s):
0.45 str.py(154):     def _print_Function(self, expr):
0.45 str.py(157):     def _print_GeometryEntity(self, expr):
0.45 str.py(161):     def _print_GoldenRatio(self, expr):
0.45 str.py(164):     def _print_ImaginaryUnit(self, expr):
0.45 str.py(167):     def _print_Infinity(self, expr):
0.45 str.py(170):     def _print_Integral(self, expr):
0.45 str.py(179):     def _print_Interval(self, i):
0.45 str.py(198):     def _print_AccumulationBounds(self, i):
0.45 str.py(201):     def _print_Inverse(self, I):
0.45 str.py(204):     def _print_Lambda(self, obj):
0.45 str.py(212):     def _print_LatticeOp(self, expr):
0.45 str.py(216):     def _print_Limit(self, expr):
0.45 str.py(224):     def _print_list(self, expr):
0.45 str.py(227):     def _print_MatrixBase(self, expr):
0.45 str.py(237):         _print_MatrixBase
0.45 str.py(229):     _print_SparseMatrix = \
0.45 str.py(230):         _print_MutableSparseMatrix = \
0.45 str.py(229):     _print_SparseMatrix = \
0.45 str.py(231):         _print_ImmutableSparseMatrix = \
0.45 str.py(229):     _print_SparseMatrix = \
0.45 str.py(232):         _print_Matrix = \
0.45 str.py(229):     _print_SparseMatrix = \
0.45 str.py(233):         _print_DenseMatrix = \
0.45 str.py(229):     _print_SparseMatrix = \
0.45 str.py(234):         _print_MutableDenseMatrix = \
0.45 str.py(229):     _print_SparseMatrix = \
0.45 str.py(235):         _print_ImmutableMatrix = \
0.45 str.py(236):         _print_ImmutableDenseMatrix = \
0.45 str.py(239):     def _print_MatrixElement(self, expr):
0.45 str.py(243):     def _print_MatrixSlice(self, expr):
0.45 str.py(257):     def _print_DeferredVector(self, expr):
0.45 str.py(260):     def _print_Mul(self, expr):
0.45 str.py(307):     def _print_MatMul(self, expr):
0.45 str.py(318):     def _print_HadamardProduct(self, expr):
0.45 str.py(322):     def _print_MatAdd(self, expr):
0.45 str.py(338):     def _print_NaN(self, expr):
0.45 str.py(341):     def _print_NegativeInfinity(self, expr):
0.45 str.py(344):     def _print_Normal(self, expr):
0.45 str.py(347):     def _print_Order(self, expr):
0.45 str.py(356):     def _print_Ordinal(self, expr):
0.45 str.py(359):     def _print_Cycle(self, expr):
0.45 str.py(362):     def _print_Permutation(self, expr):
0.45 str.py(387):     def _print_TensorIndex(self, expr):
0.45 str.py(390):     def _print_TensorHead(self, expr):
0.45 str.py(393):     def _print_Tensor(self, expr):
0.45 str.py(396):     def _print_TensMul(self, expr):
0.45 str.py(399):     def _print_TensAdd(self, expr):
0.45 str.py(402):     def _print_PermutationGroup(self, expr):
0.45 str.py(406):     def _print_PDF(self, expr):
0.45 str.py(411):     def _print_Pi(self, expr):
0.45 str.py(414):     def _print_PolyRing(self, ring):
0.45 str.py(419):     def _print_FracField(self, field):
0.45 str.py(424):     def _print_FreeGroupElement(self, elm):
0.45 str.py(427):     def _print_PolyElement(self, poly):
0.45 str.py(430):     def _print_FracElement(self, frac):
0.45 str.py(438):     def _print_Poly(self, expr):
0.45 str.py(504):     def _print_ProductSet(self, p):
0.45 str.py(507):     def _print_AlgebraicNumber(self, expr):
0.45 str.py(513):     def _print_Pow(self, expr, rational=False):
0.45 str.py(537):     def _print_UnevaluatedExpr(self, expr):
0.45 str.py(540):     def _print_MatPow(self, expr):
0.45 str.py(545):     def _print_ImmutableDenseNDimArray(self, expr):
0.45 str.py(548):     def _print_ImmutableSparseNDimArray(self, expr):
0.45 str.py(551):     def _print_Integer(self, expr):
0.45 str.py(556):     def _print_Integers(self, expr):
0.45 str.py(559):     def _print_Naturals(self, expr):
0.45 str.py(562):     def _print_Naturals0(self, expr):
0.45 str.py(565):     def _print_Reals(self, expr):
0.45 str.py(568):     def _print_int(self, expr):
0.45 str.py(571):     def _print_mpz(self, expr):
0.45 str.py(574):     def _print_Rational(self, expr):
0.45 str.py(582):     def _print_PythonRational(self, expr):
0.45 str.py(588):     def _print_Fraction(self, expr):
0.45 str.py(594):     def _print_mpq(self, expr):
0.45 str.py(600):     def _print_Float(self, expr):
0.45 str.py(622):     def _print_Relational(self, expr):
0.45 str.py(643):     def _print_ComplexRootOf(self, expr):
0.45 str.py(647):     def _print_RootSum(self, expr):
0.45 str.py(655):     def _print_GroebnerBasis(self, basis):
0.45 str.py(670):     def _print_Sample(self, expr):
0.45 str.py(673):     def _print_set(self, s):
0.45 str.py(681):     def _print_frozenset(self, s):
0.45 str.py(686):     def _print_SparseMatrix(self, expr):
0.45 str.py(690):     def _print_Sum(self, expr):
0.45 str.py(699):     def _print_Symbol(self, expr):
0.45 str.py(701):     _print_MatrixSymbol = _print_Symbol
0.45 str.py(702):     _print_RandomSymbol = _print_Symbol
0.45 str.py(704):     def _print_Identity(self, expr):
0.45 str.py(707):     def _print_ZeroMatrix(self, expr):
0.45 str.py(710):     def _print_Predicate(self, expr):
0.45 str.py(713):     def _print_str(self, expr):
0.45 str.py(716):     def _print_tuple(self, expr):
0.45 str.py(722):     def _print_Tuple(self, expr):
0.45 str.py(725):     def _print_Transpose(self, T):
0.45 str.py(728):     def _print_Uniform(self, expr):
0.45 str.py(731):     def _print_Union(self, expr):
0.45 str.py(734):     def _print_Complement(self, expr):
0.45 str.py(737):     def _print_Quantity(self, expr):
0.45 str.py(742):     def _print_Quaternion(self, expr):
0.45 str.py(747):     def _print_Dimension(self, expr):
0.45 str.py(750):     def _print_Wild(self, expr):
0.45 str.py(753):     def _print_WildFunction(self, expr):
0.45 str.py(756):     def _print_Zero(self, expr):
0.45 str.py(761):     def _print_DMP(self, p):
0.45 str.py(777):     def _print_DMF(self, expr):
0.45 str.py(780):     def _print_Object(self, object):
0.45 str.py(783):     def _print_IdentityMorphism(self, morphism):
0.45 /testbed/sympy/plotting/plot.py:28: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
  from collections import Callable
/testbed/sympy/core/basic.py:3: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
  from collections import Mapping, defaultdict
/testbed/sympy/core/expr.py:12: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
  from collections import defaultdict, Iterable
/testbed/sympy/core/containers.py:271: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
  class OrderedSet(collections.MutableSet):
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(sympy/printing/str\\.py)']
0.25 str.py(1): """
0.25 str.py(5): from __future__ import print_function, division
0.25 str.py(7): from sympy.core import S, Rational, Pow, Basic, Mul
0.25 str.py(8): from sympy.core.mul import _keep_coeff
0.25 str.py(9): from .printer import Printer
0.25 str.py(10): from sympy.printing.precedence import precedence, PRECEDENCE
0.25 str.py(12): import mpmath.libmp as mlib
0.25 str.py(13): from mpmath.libmp import prec_to_dps
0.25 str.py(15): from sympy.utilities import default_sort_key
0.25 str.py(18): class StrPrinter(Printer):
0.25 str.py(18): class StrPrinter(Printer):
0.25 str.py(19):     printmethod = "_sympystr"
0.25 str.py(21):         "order": None,
0.25 str.py(22):         "full_prec": "auto",
0.25 str.py(23):         "sympy_integers": False,
0.25 str.py(24):         "abbrev": False,
0.25 str.py(20):     _default_settings = {
0.25 str.py(27):     _relationals = dict()
0.25 str.py(29):     def parenthesize(self, item, level, strict=False):
0.25 str.py(35):     def stringify(self, args, sep, level=0):
0.25 str.py(38):     def emptyPrinter(self, expr):
0.25 str.py(49):     def _print_Add(self, expr, order=None):
0.25 str.py(73):     def _print_BooleanTrue(self, expr):
0.25 str.py(76):     def _print_BooleanFalse(self, expr):
0.25 str.py(79):     def _print_Not(self, expr):
0.25 str.py(82):     def _print_And(self, expr):
0.25 str.py(85):     def _print_Or(self, expr):
0.25 str.py(88):     def _print_AppliedPredicate(self, expr):
0.25 str.py(91):     def _print_Basic(self, expr):
0.25 str.py(95):     def _print_BlockMatrix(self, B):
0.25 str.py(100):     def _print_Catalan(self, expr):
0.25 str.py(103):     def _print_ComplexInfinity(self, expr):
0.25 str.py(106):     def _print_Derivative(self, expr):
0.25 str.py(111):     def _print_dict(self, d):
0.25 str.py(121):     def _print_Dict(self, expr):
0.25 str.py(125):     def _print_RandomDomain(self, d):
0.25 str.py(134):     def _print_Dummy(self, expr):
0.25 str.py(137):     def _print_EulerGamma(self, expr):
0.25 str.py(140):     def _print_Exp1(self, expr):
0.25 str.py(143):     def _print_ExprCondPair(self, expr):
0.25 str.py(146):     def _print_FiniteSet(self, s):
0.25 str.py(154):     def _print_Function(self, expr):
0.25 str.py(157):     def _print_GeometryEntity(self, expr):
0.25 str.py(161):     def _print_GoldenRatio(self, expr):
0.25 str.py(164):     def _print_ImaginaryUnit(self, expr):
0.25 str.py(167):     def _print_Infinity(self, expr):
0.25 str.py(170):     def _print_Integral(self, expr):
0.25 str.py(179):     def _print_Interval(self, i):
0.25 str.py(198):     def _print_AccumulationBounds(self, i):
0.25 str.py(201):     def _print_Inverse(self, I):
0.25 str.py(204):     def _print_Lambda(self, obj):
0.25 str.py(212):     def _print_LatticeOp(self, expr):
0.25 str.py(216):     def _print_Limit(self, expr):
0.25 str.py(224):     def _print_list(self, expr):
0.25 str.py(227):     def _print_MatrixBase(self, expr):
0.25 str.py(237):         _print_MatrixBase
0.25 str.py(229):     _print_SparseMatrix = \
0.25 str.py(230):         _print_MutableSparseMatrix = \
0.25 str.py(229):     _print_SparseMatrix = \
0.25 str.py(231):         _print_ImmutableSparseMatrix = \
0.25 str.py(229):     _print_SparseMatrix = \
0.25 str.py(232):         _print_Matrix = \
0.25 str.py(229):     _print_SparseMatrix = \
0.25 str.py(233):         _print_DenseMatrix = \
0.25 str.py(229):     _print_SparseMatrix = \
0.25 str.py(234):         _print_MutableDenseMatrix = \
0.25 str.py(229):     _print_SparseMatrix = \
0.25 str.py(235):         _print_ImmutableMatrix = \
0.25 str.py(236):         _print_ImmutableDenseMatrix = \
0.25 str.py(239):     def _print_MatrixElement(self, expr):
0.25 str.py(243):     def _print_MatrixSlice(self, expr):
0.25 str.py(257):     def _print_DeferredVector(self, expr):
0.25 str.py(260):     def _print_Mul(self, expr):
0.25 str.py(307):     def _print_MatMul(self, expr):
0.25 str.py(318):     def _print_HadamardProduct(self, expr):
0.25 str.py(322):     def _print_MatAdd(self, expr):
0.25 str.py(338):     def _print_NaN(self, expr):
0.25 str.py(341):     def _print_NegativeInfinity(self, expr):
0.25 str.py(344):     def _print_Normal(self, expr):
0.25 str.py(347):     def _print_Order(self, expr):
0.25 str.py(356):     def _print_Ordinal(self, expr):
0.25 str.py(359):     def _print_Cycle(self, expr):
0.25 str.py(362):     def _print_Permutation(self, expr):
0.25 str.py(387):     def _print_TensorIndex(self, expr):
0.25 str.py(390):     def _print_TensorHead(self, expr):
0.25 str.py(393):     def _print_Tensor(self, expr):
0.25 str.py(396):     def _print_TensMul(self, expr):
0.25 str.py(399):     def _print_TensAdd(self, expr):
0.25 str.py(402):     def _print_PermutationGroup(self, expr):
0.25 str.py(406):     def _print_PDF(self, expr):
0.25 str.py(411):     def _print_Pi(self, expr):
0.25 str.py(414):     def _print_PolyRing(self, ring):
0.25 str.py(419):     def _print_FracField(self, field):
0.25 str.py(424):     def _print_FreeGroupElement(self, elm):
0.25 str.py(427):     def _print_PolyElement(self, poly):
0.25 str.py(430):     def _print_FracElement(self, frac):
0.25 str.py(438):     def _print_Poly(self, expr):
0.25 str.py(504):     def _print_ProductSet(self, p):
0.25 str.py(507):     def _print_AlgebraicNumber(self, expr):
0.25 str.py(513):     def _print_Pow(self, expr, rational=False):
0.25 str.py(537):     def _print_UnevaluatedExpr(self, expr):
0.25 str.py(540):     def _print_MatPow(self, expr):
0.25 str.py(545):     def _print_ImmutableDenseNDimArray(self, expr):
0.25 str.py(548):     def _print_ImmutableSparseNDimArray(self, expr):
0.25 str.py(551):     def _print_Integer(self, expr):
0.25 str.py(556):     def _print_Integers(self, expr):
0.25 str.py(559):     def _print_Naturals(self, expr):
0.25 str.py(562):     def _print_Naturals0(self, expr):
0.25 str.py(565):     def _print_Reals(self, expr):
0.25 str.py(568):     def _print_int(self, expr):
0.25 str.py(571):     def _print_mpz(self, expr):
0.25 str.py(574):     def _print_Rational(self, expr):
0.25 str.py(582):     def _print_PythonRational(self, expr):
0.25 str.py(588):     def _print_Fraction(self, expr):
0.25 str.py(594):     def _print_mpq(self, expr):
0.25 str.py(600):     def _print_Float(self, expr):
0.25 str.py(622):     def _print_Relational(self, expr):
0.25 str.py(643):     def _print_ComplexRootOf(self, expr):
0.25 str.py(647):     def _print_RootSum(self, expr):
0.25 str.py(655):     def _print_GroebnerBasis(self, basis):
0.25 str.py(670):     def _print_Sample(self, expr):
0.25 str.py(673):     def _print_set(self, s):
0.25 str.py(681):     def _print_frozenset(self, s):
0.25 str.py(686):     def _print_SparseMatrix(self, expr):
0.25 str.py(690):     def _print_Sum(self, expr):
0.25 str.py(699):     def _print_Symbol(self, expr):
0.25 str.py(701):     _print_MatrixSymbol = _print_Symbol
0.25 str.py(702):     _print_RandomSymbol = _print_Symbol
0.25 str.py(704):     def _print_Identity(self, expr):
0.25 str.py(707):     def _print_ZeroMatrix(self, expr):
0.25 str.py(710):     def _print_Predicate(self, expr):
0.25 str.py(713):     def _print_str(self, expr):
0.25 str.py(716):     def _print_tuple(self, expr):
0.25 str.py(722):     def _print_Tuple(self, expr):
0.25 str.py(725):     def _print_Transpose(self, T):
0.25 str.py(728):     def _print_Uniform(self, expr):
0.25 str.py(731):     def _print_Union(self, expr):
0.25 str.py(734):     def _print_Complement(self, expr):
0.25 str.py(737):     def _print_Quantity(self, expr):
0.25 str.py(742):     def _print_Quaternion(self, expr):
0.25 str.py(747):     def _print_Dimension(self, expr):
0.25 str.py(750):     def _print_Wild(self, expr):
0.25 str.py(753):     def _print_WildFunction(self, expr):
0.25 str.py(756):     def _print_Zero(self, expr):
0.25 str.py(761):     def _print_DMP(self, p):
0.25 str.py(777):     def _print_DMF(self, expr):
0.25 str.py(780):     def _print_Object(self, object):
0.25 str.py(783):     def _print_IdentityMorphism(self, morphism):
0.25 /testbed/sympy/plotting/plot.py:28: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
  from collections import Callable
str.py(786):     def _print_NamedMorphism(self, morphism):
0.25 str.py(790):     def _print_Category(self, category):
0.25 str.py(793):     def _print_BaseScalarField(self, field):
0.25 str.py(796):     def _print_BaseVectorField(self, field):
0.25 str.py(799):     def _print_Differential(self, diff):
0.25 str.py(806):     def _print_Tr(self, expr):
0.25 str.py(811): def sstr(expr, **settings):
0.25 str.py(833): class StrReprPrinter(StrPrinter):
0.25 str.py(833): class StrReprPrinter(StrPrinter):
0.25 str.py(834):     """(internal) -- see sstrrepr"""
0.25 str.py(836):     def _print_str(self, s):
0.25 str.py(840): def sstrrepr(expr, **settings):
============================= test process starts ==============================
executable:         /opt/miniconda3/envs/testbed/bin/python3  (3.9.23-final-0) [CPython]
architecture:       64-bit
cache:              no
ground types:       python 
numpy:              None
random seed:        73830969
hash randomization: on (PYTHONHASHSEED=1945730842)

sympy/polys/tests/test_coverup_sympy__sympy-14531.py[2] 
test_sstr_eq_sympy_integers_bug 0.44 str.py(827):     p = StrPrinter(settings)
0.44 str.py(828):     s = p.doprint(expr)
0.44 str.py(625):             "==": "Eq",
0.44 str.py(626):             "!=": "Ne",
0.44 str.py(627):             ":=": "Assignment",
0.44 str.py(628):             '+=': "AddAugmentedAssignment",
0.44 str.py(629):             "-=": "SubAugmentedAssignment",
0.44 str.py(630):             "*=": "MulAugmentedAssignment",
0.44 str.py(631):             "/=": "DivAugmentedAssignment",
0.44 str.py(632):             "%=": "ModAugmentedAssignment",
0.44 str.py(624):         charmap = {
0.44 str.py(635):         if expr.rel_op in charmap:
0.44 str.py(636):             return '%s(%s, %s)' % (charmap[expr.rel_op], self._print(expr.lhs),
0.44 str.py(700):         return expr.name
0.44 str.py(637):                                    self._print(expr.rhs))
0.44 str.py(575):         if expr.q == 1:
0.44 str.py(578):             if self._settings.get("sympy_integers", False):
0.44 str.py(579):                 return "S(%s)/%s" % (expr.p, expr.q)
0.44 str.py(636):             return '%s(%s, %s)' % (charmap[expr.rel_op], self._print(expr.lhs),
0.44 str.py(830):     return s
ok
test_sstr_limit_sympy_integers_bug 0.44 str.py(827):     p = StrPrinter(settings)
0.44 str.py(828):     s = p.doprint(expr)
0.44 str.py(700):         return expr.name
0.44 str.py(830):     return s
0.44 str.py(827):     p = StrPrinter(settings)
0.44 str.py(828):     s = p.doprint(expr)
0.44 str.py(217):         e, z, z0, dir = expr.args
0.44 str.py(218):         if str(dir) == "+":
0.44 str.py(827):     p = StrPrinter(settings)
0.44 str.py(828):     s = p.doprint(expr)
0.44 str.py(700):         return expr.name
0.44 str.py(830):     return s
0.44 str.py(219):             return "Limit(%s, %s, %s)" % tuple(map(self._print, (e, z, z0)))
0.44 str.py(700):         return expr.name
0.44 str.py(700):         return expr.name
0.44 str.py(575):         if expr.q == 1:
0.44 str.py(578):             if self._settings.get("sympy_integers", False):
0.44 str.py(579):                 return "S(%s)/%s" % (expr.p, expr.q)
0.44 str.py(830):     return s
ok                                       [OK]


================== tests finished: 2 passed, in 0.02 seconds ===================
str.py(786):     def _print_NamedMorphism(self, morphism):
0.45 str.py(790):     def _print_Category(self, category):
0.45 str.py(793):     def _print_BaseScalarField(self, field):
0.45 str.py(796):     def _print_BaseVectorField(self, field):
0.45 str.py(799):     def _print_Differential(self, diff):
0.45 str.py(806):     def _print_Tr(self, expr):
0.45 str.py(811): def sstr(expr, **settings):
0.45 str.py(833): class StrReprPrinter(StrPrinter):
0.45 str.py(833): class StrReprPrinter(StrPrinter):
0.45 str.py(834):     """(internal) -- see sstrrepr"""
0.45 str.py(836):     def _print_str(self, s):
0.45 str.py(840): def sstrrepr(expr, **settings):
+ cat coverage.cover
{"/testbed/sympy/printing/str.py": {"5": 1, "7": 1, "8": 1, "9": 1, "10": 1, "12": 1, "13": 1, "15": 1, "18": 2, "811": 1, "833": 2, "840": 1, "19": 1, "21": 1, "22": 1, "23": 1, "24": 1, "20": 1, "27": 1, "29": 1, "35": 1, "38": 1, "49": 1, "73": 1, "76": 1, "79": 1, "82": 1, "85": 1, "88": 1, "91": 1, "95": 1, "100": 1, "103": 1, "106": 1, "111": 1, "121": 1, "125": 1, "134": 1, "137": 1, "140": 1, "143": 1, "146": 1, "154": 1, "157": 1, "161": 1, "164": 1, "167": 1, "170": 1, "179": 1, "198": 1, "201": 1, "204": 1, "212": 1, "216": 1, "224": 1, "227": 1, "237": 1, "229": 6, "230": 1, "231": 1, "232": 1, "233": 1, "234": 1, "235": 1, "236": 1, "239": 1, "243": 1, "257": 1, "260": 1, "307": 1, "318": 1, "322": 1, "338": 1, "341": 1, "344": 1, "347": 1, "356": 1, "359": 1, "362": 1, "387": 1, "390": 1, "393": 1, "396": 1, "399": 1, "402": 1, "406": 1, "411": 1, "414": 1, "419": 1, "424": 1, "427": 1, "430": 1, "438": 1, "504": 1, "507": 1, "513": 1, "537": 1, "540": 1, "545": 1, "548": 1, "551": 1, "556": 1, "559": 1, "562": 1, "565": 1, "568": 1, "571": 1, "574": 1, "582": 1, "588": 1, "594": 1, "600": 1, "622": 1, "643": 1, "647": 1, "655": 1, "670": 1, "673": 1, "681": 1, "686": 1, "690": 1, "699": 1, "701": 1, "702": 1, "704": 1, "707": 1, "710": 1, "713": 1, "716": 1, "722": 1, "725": 1, "728": 1, "731": 1, "734": 1, "737": 1, "742": 1, "747": 1, "750": 1, "753": 1, "756": 1, "761": 1, "777": 1, "780": 1, "783": 1, "786": 1, "790": 1, "793": 1, "796": 1, "799": 1, "806": 1, "30": 0, "31": 0, "33": 0, "36": 0, "39": 0, "40": 0, "41": 0, "42": 0, "43": 0, "45": 0, "47": 0, "50": 0, "51": 0, "53": 0, "55": 0, "56": 0, "57": 0, "58": 0, "59": 0, "60": 0, "61": 0, "63": 0, "64": 0, "65": 0, "67": 0, "68": 0, "69": 0, "70": 0, "71": 0, "74": 0, "77": 0, "80": 0, "83": 0, "86": 0, "89": 0, "92": 0, "93": 0, "96": 0, "97": 0, "98": 0, "101": 0, "104": 0, "107": 0, "108": 0, "109": 0, "112": 0, "113": 0, "115": 0, "116": 0, "117": 0, "119": 0, "122": 0, "126": 0, "127": 0, "128": 0, "129": 0, "130": 0, "132": 0, "135": 0, "138": 0, "141": 0, "144": 0, "147": 0, "148": 0, "149": 0, "151": 0, "152": 0, "155": 0, "159": 0, "162": 0, "165": 0, "168": 0, "171": 0, "176": 0, "177": 0, "172": 0, "173": 0, "175": 0, "180": 0, "181": 0, "182": 0, "183": 0, "184": 0, "185": 0, "186": 0, "187": 0, "188": 0, "189": 0, "190": 0, "191": 0, "192": 0, "193": 0, "195": 0, "196": 0, "199": 0, "202": 0, "205": 0, "206": 0, "207": 0, "209": 0, "210": 0, "213": 0, "214": 0, "217": 1, "218": 1, "219": 1, "221": 0, "222": 0, "225": 0, "228": 0, "240": 0, "241": 0, "244": 0, "253": 0, "254": 0, "255": 0, "245": 0, "246": 0, "247": 0, "248": 0, "249": 0, "250": 0, "251": 0, "252": 0, "258": 0, "262": 0, "264": 0, "265": 0, "266": 0, "267": 0, "269": 0, "271": 0, "272": 0, "274": 0, "275": 0, "278": 0, "281": 0, "282": 0, "283": 0, "284": 0, "286": 0, "287": 0, "288": 0, "289": 0, "290": 0, "291": 0, "293": 0, "295": 0, "297": 0, "298": 0, "300": 0, "301": 0, "302": 0, "303": 0, "305": 0, "308": 0, "309": 0, "310": 0, "311": 0, "313": 0, "315": 0, "316": 0, "319": 0, "320": 0, "323": 0, "324": 0, "325": 0, "326": 0, "327": 0, "328": 0, "329": 0, "331": 0, "332": 0, "333": 0, "334": 0, "335": 0, "336": 0, "339": 0, "342": 0, "345": 0, "348": 0, "349": 0, "350": 0, "352": 0, "354": 0, "357": 0, "360": 0, "363": 0, "364": 0, "365": 0, "366": 0, "369": 0, "370": 0, "371": 0, "372": 0, "373": 0, "374": 0, "376": 0, "377": 0, "378": 0, "379": 0, "380": 0, "381": 0, "382": 0, "383": 0, "384": 0, "385": 0, "388": 0, "391": 0, "394": 0, "397": 0, "400": 0, "403": 0, "404": 0, "407": 0, "408": 0, "409": 0, "412": 0, "415": 0, "416": 0, "417": 0, "420": 0, "421": 0, "422": 0, "425": 0, "428": 0, "431": 0, "432": 0, "434": 0, "435": 0, "436": 0, "439": 0, "440": 0, "442": 0, "443": 0, "445": 0, "446": 0, "447": 0, "448": 0, "450": 0, "452": 0, "454": 0, "455": 0, "456": 0, "458": 0, "460": 0, "461": 0, "462": 0, "463": 0, "465": 0, "466": 0, "467": 0, "469": 0, "471": 0, "472": 0, "474": 0, "476": 0, "477": 0, "479": 0, "481": 0, "482": 0, "484": 0, "485": 0, "487": 0, "489": 0, "491": 0, "492": 0, "493": 0, "494": 0, "496": 0, "498": 0, "499": 0, "500": 0, "502": 0, "505": 0, "508": 0, "509": 0, "511": 0, "514": 0, "516": 0, "517": 0, "519": 0, "520": 0, "523": 0, "524": 0, "526": 0, "527": 0, "529": 0, "530": 0, "533": 0, "534": 0, "535": 0, "538": 0, "541": 0, "542": 0, "543": 0, "546": 0, "549": 0, "552": 0, "553": 0, "554": 0, "557": 0, "560": 0, "563": 0, "566": 0, "569": 0, "572": 0, "575": 2, "576": 0, "578": 2, "579": 2, "580": 0, "583": 0, "584": 0, "586": 0, "589": 0, "590": 0, "592": 0, "595": 0, "596": 0, "598": 0, "601": 0, "602": 0, "603": 0, "605": 0, "606": 0, "607": 0, "608": 0, "609": 0, "610": 0, "611": 0, "612": 0, "613": 0, "614": 0, "615": 0, "616": 0, "617": 0, "619": 0, "620": 0, "625": 1, "626": 1, "627": 1, "628": 1, "629": 1, "630": 1, "631": 1, "632": 1, "624": 1, "635": 1, "636": 2, "637": 1, "639": 0, "640": 0, "641": 0, "644": 0, "645": 0, "648": 0, "650": 0, "651": 0, "653": 0, "656": 0, "658": 0, "659": 0, "660": 0, "662": 0, "663": 0, "664": 0, "666": 0, "668": 0, "671": 0, "674": 0, "676": 0, "677": 0, "678": 0, "679": 0, "682": 0, "683": 0, "684": 0, "687": 0, "688": 0, "691": 0, "696": 0, "697": 0, "692": 0, "693": 0, "695": 0, "700": 5, "705": 0, "708": 0, "711": 0, "714": 0, "717": 0, "718": 0, "720": 0, "723": 0, "726": 0, "729": 0, "732": 0, "735": 0, "738": 0, "739": 0, "740": 0, "743": 0, "744": 0, "745": 0, "748": 0, "751": 0, "754": 0, "757": 0, "758": 0, "759": 0, "762": 0, "763": 0, "764": 0, "766": 0, "767": 0, "768": 0, "770": 0, "771": 0, "772": 0, "773": 0, "775": 0, "778": 0, "781": 0, "784": 0, "787": 0, "788": 0, "791": 0, "794": 0, "797": 0, "800": 0, "801": 0, "802": 0, "804": 0, "808": 0, "827": 4, "828": 4, "830": 4, "836": 1, "837": 0, "849": 0, "850": 0, "852": 0}}
{"/testbed/sympy/printing/str.py": {"5": 1, "7": 1, "8": 1, "9": 1, "10": 1, "12": 1, "13": 1, "15": 1, "18": 2, "811": 1, "833": 2, "840": 1, "19": 1, "21": 1, "22": 1, "23": 1, "24": 1, "20": 1, "27": 1, "29": 1, "35": 1, "38": 1, "49": 1, "73": 1, "76": 1, "79": 1, "82": 1, "85": 1, "88": 1, "91": 1, "95": 1, "100": 1, "103": 1, "106": 1, "111": 1, "121": 1, "125": 1, "134": 1, "137": 1, "140": 1, "143": 1, "146": 1, "154": 1, "157": 1, "161": 1, "164": 1, "167": 1, "170": 1, "179": 1, "198": 1, "201": 1, "204": 1, "212": 1, "216": 1, "224": 1, "227": 1, "237": 1, "229": 6, "230": 1, "231": 1, "232": 1, "233": 1, "234": 1, "235": 1, "236": 1, "239": 1, "243": 1, "257": 1, "260": 1, "307": 1, "318": 1, "322": 1, "338": 1, "341": 1, "344": 1, "347": 1, "356": 1, "359": 1, "362": 1, "387": 1, "390": 1, "393": 1, "396": 1, "399": 1, "402": 1, "406": 1, "411": 1, "414": 1, "419": 1, "424": 1, "427": 1, "430": 1, "438": 1, "504": 1, "507": 1, "513": 1, "537": 1, "540": 1, "545": 1, "548": 1, "551": 1, "556": 1, "559": 1, "562": 1, "565": 1, "568": 1, "571": 1, "574": 1, "582": 1, "588": 1, "594": 1, "600": 1, "622": 1, "643": 1, "647": 1, "655": 1, "670": 1, "673": 1, "681": 1, "686": 1, "690": 1, "699": 1, "701": 1, "702": 1, "704": 1, "707": 1, "710": 1, "713": 1, "716": 1, "722": 1, "725": 1, "728": 1, "731": 1, "734": 1, "737": 1, "742": 1, "747": 1, "750": 1, "753": 1, "756": 1, "761": 1, "777": 1, "780": 1, "783": 1, "786": 1, "790": 1, "793": 1, "796": 1, "799": 1, "806": 1, "30": 0, "31": 0, "33": 0, "36": 0, "39": 0, "40": 0, "41": 0, "42": 0, "43": 0, "45": 0, "47": 0, "50": 0, "51": 0, "53": 0, "55": 0, "56": 0, "57": 0, "58": 0, "59": 0, "60": 0, "61": 0, "63": 0, "64": 0, "65": 0, "67": 0, "68": 0, "69": 0, "70": 0, "71": 0, "74": 0, "77": 0, "80": 0, "83": 0, "86": 0, "89": 0, "92": 0, "93": 0, "96": 0, "97": 0, "98": 0, "101": 0, "104": 0, "107": 0, "108": 0, "109": 0, "112": 0, "113": 0, "115": 0, "116": 0, "117": 0, "119": 0, "122": 0, "126": 0, "127": 0, "128": 0, "129": 0, "130": 0, "132": 0, "135": 0, "138": 0, "141": 0, "144": 0, "147": 0, "148": 0, "149": 0, "151": 0, "152": 0, "155": 0, "159": 0, "162": 0, "165": 0, "168": 0, "171": 0, "176": 0, "177": 0, "172": 0, "173": 0, "175": 0, "180": 0, "181": 0, "182": 0, "183": 0, "184": 0, "185": 0, "186": 0, "187": 0, "188": 0, "189": 0, "190": 0, "191": 0, "192": 0, "193": 0, "195": 0, "196": 0, "199": 0, "202": 0, "205": 0, "206": 0, "207": 0, "209": 0, "210": 0, "213": 0, "214": 0, "217": 0, "218": 0, "219": 0, "221": 0, "222": 0, "225": 0, "228": 0, "240": 0, "241": 0, "244": 0, "253": 0, "254": 0, "255": 0, "245": 0, "246": 0, "247": 0, "248": 0, "249": 0, "250": 0, "251": 0, "252": 0, "258": 0, "262": 0, "264": 0, "265": 0, "266": 0, "267": 0, "269": 0, "271": 0, "272": 0, "274": 0, "275": 0, "278": 0, "281": 0, "282": 0, "283": 0, "284": 0, "286": 0, "287": 0, "288": 0, "289": 0, "290": 0, "291": 0, "293": 0, "295": 0, "297": 0, "298": 0, "300": 0, "301": 0, "302": 0, "303": 0, "305": 0, "308": 0, "309": 0, "310": 0, "311": 0, "313": 0, "315": 0, "316": 0, "319": 0, "320": 0, "323": 0, "324": 0, "325": 0, "326": 0, "327": 0, "328": 0, "329": 0, "331": 0, "332": 0, "333": 0, "334": 0, "335": 0, "336": 0, "339": 0, "342": 0, "345": 0, "348": 0, "349": 0, "350": 0, "352": 0, "354": 0, "357": 0, "360": 0, "363": 0, "364": 0, "365": 0, "366": 0, "369": 0, "370": 0, "371": 0, "372": 0, "373": 0, "374": 0, "376": 0, "377": 0, "378": 0, "379": 0, "380": 0, "381": 0, "382": 0, "383": 0, "384": 0, "385": 0, "388": 0, "391": 0, "394": 0, "397": 0, "400": 0, "403": 0, "404": 0, "407": 0, "408": 0, "409": 0, "412": 0, "415": 0, "416": 0, "417": 0, "420": 0, "421": 0, "422": 0, "425": 0, "428": 0, "431": 0, "432": 0, "434": 0, "435": 0, "436": 0, "439": 0, "440": 0, "442": 0, "443": 0, "445": 0, "446": 0, "447": 0, "448": 0, "450": 0, "452": 0, "454": 0, "455": 0, "456": 0, "458": 0, "460": 0, "461": 0, "462": 0, "463": 0, "465": 0, "466": 0, "467": 0, "469": 0, "471": 0, "472": 0, "474": 0, "476": 0, "477": 0, "479": 0, "481": 0, "482": 0, "484": 0, "485": 0, "487": 0, "489": 0, "491": 0, "492": 0, "493": 0, "494": 0, "496": 0, "498": 0, "499": 0, "500": 0, "502": 0, "505": 0, "508": 0, "509": 0, "511": 0, "514": 0, "516": 0, "517": 0, "519": 0, "520": 0, "523": 0, "524": 0, "526": 0, "527": 0, "529": 0, "530": 0, "533": 0, "534": 0, "535": 0, "538": 0, "541": 0, "542": 0, "543": 0, "546": 0, "549": 0, "552": 0, "553": 0, "554": 0, "557": 0, "560": 0, "563": 0, "566": 0, "569": 0, "572": 0, "575": 0, "576": 0, "578": 0, "579": 0, "580": 0, "583": 0, "584": 0, "586": 0, "589": 0, "590": 0, "592": 0, "595": 0, "596": 0, "598": 0, "601": 0, "602": 0, "603": 0, "605": 0, "606": 0, "607": 0, "608": 0, "609": 0, "610": 0, "611": 0, "612": 0, "613": 0, "614": 0, "615": 0, "616": 0, "617": 0, "619": 0, "620": 0, "625": 0, "626": 0, "627": 0, "628": 0, "629": 0, "630": 0, "631": 0, "632": 0, "624": 0, "635": 0, "636": 0, "637": 0, "639": 0, "640": 0, "641": 0, "644": 0, "645": 0, "648": 0, "650": 0, "651": 0, "653": 0, "656": 0, "658": 0, "659": 0, "660": 0, "662": 0, "663": 0, "664": 0, "666": 0, "668": 0, "671": 0, "674": 0, "676": 0, "677": 0, "678": 0, "679": 0, "682": 0, "683": 0, "684": 0, "687": 0, "688": 0, "691": 0, "696": 0, "697": 0, "692": 0, "693": 0, "695": 0, "700": 0, "705": 0, "708": 0, "711": 0, "714": 0, "717": 0, "718": 0, "720": 0, "723": 0, "726": 0, "729": 0, "732": 0, "735": 0, "738": 0, "739": 0, "740": 0, "743": 0, "744": 0, "745": 0, "748": 0, "751": 0, "754": 0, "757": 0, "758": 0, "759": 0, "762": 0, "763": 0, "764": 0, "766": 0, "767": 0, "768": 0, "770": 0, "771": 0, "772": 0, "773": 0, "775": 0, "778": 0, "781": 0, "784": 0, "787": 0, "788": 0, "791": 0, "794": 0, "797": 0, "800": 0, "801": 0, "802": 0, "804": 0, "808": 0, "827": 0, "828": 0, "830": 0, "836": 1, "837": 0, "849": 0, "850": 0, "852": 0}}
+ git checkout 205da797006360fc629110937e39a19c9561313e
Note: switching to '205da797006360fc629110937e39a19c9561313e'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at 205da79700 Merge pull request #14449 from smichr/abs-invert
M	sympy/printing/str.py
+ git apply /root/pre_state.patch
error: unrecognized input
