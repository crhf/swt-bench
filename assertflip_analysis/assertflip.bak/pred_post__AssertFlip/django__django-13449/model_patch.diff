diff --git a/dev/null b/tests/test_coverup_django__django-13449.py
new file mode 100644
index e69de29..824f74d 100644
--- /dev/null
+++ b/tests/test_coverup_django__django-13449.py
@@ -0,0 +1,54 @@
+from django.test import TestCase
+from django.db import models, connection
+from django.db.models import F, Window
+from django.db.models.functions import Lag
+from django.db.utils import OperationalError
+
+class LagTest(models.Model):
+    modified = models.DateField()
+    data = models.FloatField()
+    amount = models.DecimalField(decimal_places=4, max_digits=7)
+
+    class Meta:
+        app_label = 'test_app'
+
+class LagTestCase(TestCase):
+    databases = {'default'}
+
+    @classmethod
+    def setUpTestData(cls):
+        # Create the table manually since migrations are not applied
+        with connection.cursor() as cursor:
+            cursor.execute('PRAGMA foreign_keys = OFF;')
+            cursor.execute('''
+                CREATE TABLE test_app_lagtest (
+                    id INTEGER PRIMARY KEY AUTOINCREMENT,
+                    modified DATE NOT NULL,
+                    data REAL NOT NULL,
+                    amount NUMERIC NOT NULL
+                );
+            ''')
+            cursor.execute('PRAGMA foreign_keys = ON;')
+
+        # Create test data
+        LagTest.objects.create(modified='2021-01-01', data=1.0, amount=1.2345)
+        LagTest.objects.create(modified='2021-01-02', data=2.0, amount=2.3456)
+        LagTest.objects.create(modified='2020-01-01', data=3.0, amount=3.4567)
+        LagTest.objects.create(modified='2020-01-01', data=4.0, amount=4.5678)
+        LagTest.objects.create(modified='2020-01-02', data=5.0, amount=5.6789)
+        LagTest.objects.create(modified='2020-01-03', data=6.0, amount=6.7890)
+        LagTest.objects.create(modified='2020-01-04', data=7.0, amount=9.8765)
+        LagTest.objects.create(modified='2020-01-05', data=8.0, amount=10.1234)
+        LagTest.objects.create(modified='2020-01-06', data=9.0, amount=11.2345)
+
+    def test_lag_with_decimalfield_on_sqlite(self):
+        """
+        Test that using Lag() with a DecimalField on SQLite does not raise an OperationalError.
+        """
+        w = Window(expression=Lag('amount', 7), partition_by=[F('modified')], order_by=F('modified').asc())
+        q = LagTest.objects.all().annotate(w=w)
+        try:
+            list(q)  # Force evaluation to trigger the error
+        except OperationalError as e:
+            # If an error is raised, the test should fail because the bug is present
+            self.fail(f"OperationalError raised: {e}")
