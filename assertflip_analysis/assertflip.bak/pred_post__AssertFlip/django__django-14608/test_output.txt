+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD 7f33c1e22dbc34a7afae7967783725b10f1f13b1
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
nothing to commit, working tree clean
+ git show
commit 7f33c1e22dbc34a7afae7967783725b10f1f13b1
Author: Nick Pope <nick@nickpope.me.uk>
Date:   Wed Jul 14 19:28:21 2021 +0100

    Added note about zero timeout in cache settings docs.

diff --git a/docs/ref/settings.txt b/docs/ref/settings.txt
index e6eee7d6bb..ba2a787b53 100644
--- a/docs/ref/settings.txt
+++ b/docs/ref/settings.txt
@@ -232,7 +232,8 @@ consult your backend module's own documentation.
 Default: ``300``
 
 The number of seconds before a cache entry is considered stale. If the value of
-this settings is ``None``, cache entries will not expire.
+this setting is ``None``, cache entries will not expire. A value of ``0``
+causes keys to immediately expire (effectively "don't cache").
 
 .. setting:: CACHES-VERSION
 
+ git diff 7f33c1e22dbc34a7afae7967783725b10f1f13b1
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Checking if build backend supports build_editable: started
  Checking if build backend supports build_editable: finished with status 'done'
  Getting requirements to build editable: started
  Getting requirements to build editable: finished with status 'done'
  Preparing editable metadata (pyproject.toml): started
  Preparing editable metadata (pyproject.toml): finished with status 'done'
Requirement already satisfied: asgiref>=3.3.2 in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from Django==4.0.dev20210714182821) (3.8.1)
Requirement already satisfied: pytz in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from Django==4.0.dev20210714182821) (2025.2)
Requirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from Django==4.0.dev20210714182821) (0.5.3)
Requirement already satisfied: typing-extensions>=4 in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from asgiref>=3.3.2->Django==4.0.dev20210714182821) (4.13.2)
Building wheels for collected packages: Django
  Building editable for Django (pyproject.toml): started
  Building editable for Django (pyproject.toml): finished with status 'done'
  Created wheel for Django: filename=django-4.0.dev20210714182821-0.editable-py3-none-any.whl size=26216 sha256=5dec6446ac3a968ab58f40de31ac843ff2e212eeca899be3d51c2668271df548
  Stored in directory: /tmp/pip-ephem-wheel-cache-w6wdkrt7/wheels/b2/50/f1/218f2e9962a80d01a4b1297698978f9fb3b60056aa24343f24
Successfully built Django
Installing collected packages: Django
  Attempting uninstall: Django
    Found existing installation: Django 4.0.dev20210714182821
    Uninstalling Django-4.0.dev20210714182821:
      Successfully uninstalled Django-4.0.dev20210714182821
Successfully installed Django-4.0.dev20210714182821
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable.It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git apply -v -
Checking patch django/forms/formsets.py...
Applied patch django/forms/formsets.py cleanly.
+ git apply -v -
Checking patch tests/test_coverup_django__django-14608.py...
Applied patch tests/test_coverup_django__django-14608.py cleanly.
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/forms/formsets\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-14608
test_nonform_css_class_presence (test_coverup_django__django-14608.FormSetNonFormErrorsTest) ... ['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(django/forms/formsets\\.py)']
0.24 formsets.py(1): from django.core.exceptions import ValidationError
0.24 formsets.py(2): from django.forms import Form
0.24 formsets.py(3): from django.forms.fields import BooleanField, IntegerField
0.24 formsets.py(4): from django.forms.utils import ErrorList
0.24 formsets.py(5): from django.forms.widgets import HiddenInput, NumberInput
0.24 formsets.py(6): from django.utils.functional import cached_property
0.24 formsets.py(7): from django.utils.html import html_safe
0.24 formsets.py(8): from django.utils.safestring import mark_safe
0.24 formsets.py(9): from django.utils.translation import gettext_lazy as _, ngettext
0.24 formsets.py(11): __all__ = ('BaseFormSet', 'formset_factory', 'all_valid')
0.24 formsets.py(14): TOTAL_FORM_COUNT = 'TOTAL_FORMS'
0.24 formsets.py(15): INITIAL_FORM_COUNT = 'INITIAL_FORMS'
0.24 formsets.py(16): MIN_NUM_FORM_COUNT = 'MIN_NUM_FORMS'
0.24 formsets.py(17): MAX_NUM_FORM_COUNT = 'MAX_NUM_FORMS'
0.24 formsets.py(18): ORDERING_FIELD_NAME = 'ORDER'
0.24 formsets.py(19): DELETION_FIELD_NAME = 'DELETE'
0.24 formsets.py(22): DEFAULT_MIN_NUM = 0
0.24 formsets.py(25): DEFAULT_MAX_NUM = 1000
0.24 formsets.py(28): class ManagementForm(Form):
0.24 formsets.py(28): class ManagementForm(Form):
0.24 formsets.py(29):     """
0.24 formsets.py(34):     def __init__(self, *args, **kwargs):
0.24 formsets.py(44):     def clean(self):
0.24 formsets.py(53): @html_safe
0.24 formsets.py(54): class BaseFormSet:
0.24 formsets.py(53): @html_safe
0.24 formsets.py(55):     """
0.24 formsets.py(58):     ordering_widget = NumberInput
0.24 formsets.py(60):         'missing_management_form': _(
0.24 formsets.py(61):             'ManagementForm data is missing or has been tampered with. Missing fields: '
0.24 formsets.py(60):         'missing_management_form': _(
0.24 formsets.py(59):     default_error_messages = {
0.24 formsets.py(66):     def __init__(self, data=None, files=None, auto_id='id_%s', prefix=None,
0.24 formsets.py(67):                  initial=None, error_class=ErrorList, form_kwargs=None,
0.24 formsets.py(68):                  error_messages=None):
0.24 formsets.py(66):     def __init__(self, data=None, files=None, auto_id='id_%s', prefix=None,
0.24 formsets.py(87):     def __str__(self):
0.24 formsets.py(90):     def __iter__(self):
0.24 formsets.py(94):     def __getitem__(self, index):
0.24 formsets.py(98):     def __len__(self):
0.24 formsets.py(101):     def __bool__(self):
0.24 formsets.py(108):     @cached_property
0.24 formsets.py(109):     def management_form(self):
0.24 formsets.py(123):     def total_form_count(self):
0.24 formsets.py(142):     def initial_form_count(self):
0.24 formsets.py(151):     @cached_property
0.24 formsets.py(152):     def forms(self):
0.24 formsets.py(160):     def get_form_kwargs(self, index):
0.24 formsets.py(169):     def _construct_form(self, i, **kwargs):
0.24 formsets.py(197):     @property
0.24 formsets.py(198):     def initial_forms(self):
0.24 formsets.py(202):     @property
0.24 formsets.py(203):     def extra_forms(self):
0.24 formsets.py(207):     @property
0.24 formsets.py(208):     def empty_form(self):
0.24 formsets.py(219):     @property
0.24 formsets.py(220):     def cleaned_data(self):
0.24 formsets.py(228):     @property
0.24 formsets.py(229):     def deleted_forms(self):
0.24 formsets.py(245):     @property
0.24 formsets.py(246):     def ordered_forms(self):
0.24 formsets.py(282):     @classmethod
0.24 formsets.py(283):     def get_default_prefix(cls):
0.24 formsets.py(286):     @classmethod
0.24 formsets.py(287):     def get_ordering_widget(cls):
0.24 formsets.py(290):     def non_form_errors(self):
0.24 formsets.py(300):     @property
0.24 formsets.py(301):     def errors(self):
0.24 formsets.py(307):     def total_error_count(self):
0.24 formsets.py(312):     def _should_delete_form(self, form):
0.24 formsets.py(316):     def is_valid(self):
0.24 formsets.py(330):     def full_clean(self):
0.24 formsets.py(388):     def clean(self):
0.24 formsets.py(397):     def has_changed(self):
0.24 formsets.py(401):     def add_fields(self, form, index):
0.24 formsets.py(422):     def add_prefix(self, index):
0.24 formsets.py(425):     def is_multipart(self):
0.24 formsets.py(435):     @property
0.24 formsets.py(436):     def media(self):
0.24 formsets.py(444):     def as_table(self):
0.24 formsets.py(452):     def as_p(self):
0.24 formsets.py(457):     def as_ul(self):
0.24 formsets.py(463): def formset_factory(form, formset=BaseFormSet, extra=1, can_order=False,
0.24 formsets.py(464):                     can_delete=False, max_num=None, validate_max=False,
0.24 formsets.py(465):                     min_num=None, validate_min=False, absolute_max=None,
0.24 formsets.py(466):                     can_delete_extra=True):
0.24 formsets.py(463): def formset_factory(form, formset=BaseFormSet, extra=1, can_order=False,
0.24 formsets.py(496): def all_valid(formsets):
Testing against Django installed in '/testbed/django'
Found 1 test(s).
Skipping setup of unused database(s): default, other.
System check identified no issues (0 silenced).
0.64 formsets.py(468):     if min_num is None:
0.64 formsets.py(469):         min_num = DEFAULT_MIN_NUM
0.64 formsets.py(470):     if max_num is None:
0.64 formsets.py(471):         max_num = DEFAULT_MAX_NUM
0.64 formsets.py(475):     if absolute_max is None:
0.64 formsets.py(476):         absolute_max = max_num + DEFAULT_MAX_NUM
0.64 formsets.py(477):     if max_num > absolute_max:
0.64 formsets.py(482):         'form': form,
0.64 formsets.py(483):         'extra': extra,
0.64 formsets.py(484):         'can_order': can_order,
0.64 formsets.py(485):         'can_delete': can_delete,
0.64 formsets.py(486):         'can_delete_extra': can_delete_extra,
0.64 formsets.py(487):         'min_num': min_num,
0.64 formsets.py(488):         'max_num': max_num,
0.64 formsets.py(489):         'absolute_max': absolute_max,
0.64 formsets.py(490):         'validate_min': validate_min,
0.64 formsets.py(491):         'validate_max': validate_max,
0.64 formsets.py(481):     attrs = {
0.64 formsets.py(493):     return type(form.__name__ + 'FormSet', (formset,), attrs)
0.64 formsets.py(69):         self.is_bound = data is not None or files is not None
0.64 formsets.py(70):         self.prefix = prefix or self.get_default_prefix()
0.64 formsets.py(284):         return 'form'
0.64 formsets.py(71):         self.auto_id = auto_id
0.64 formsets.py(72):         self.data = data or {}
0.64 formsets.py(73):         self.files = files or {}
0.64 formsets.py(74):         self.initial = initial
0.64 formsets.py(75):         self.form_kwargs = form_kwargs or {}
0.64 formsets.py(76):         self.error_class = error_class
0.64 formsets.py(77):         self._errors = None
0.64 formsets.py(78):         self._non_form_errors = None
0.64 formsets.py(80):         messages = {}
0.64 formsets.py(81):         for cls in reversed(type(self).__mro__):
0.64 formsets.py(82):             messages.update(getattr(cls, 'default_error_messages', {}))
0.64 formsets.py(81):         for cls in reversed(type(self).__mro__):
0.64 formsets.py(82):             messages.update(getattr(cls, 'default_error_messages', {}))
0.64 formsets.py(81):         for cls in reversed(type(self).__mro__):
0.64 formsets.py(82):             messages.update(getattr(cls, 'default_error_messages', {}))
0.64 formsets.py(81):         for cls in reversed(type(self).__mro__):
0.64 formsets.py(82):             messages.update(getattr(cls, 'default_error_messages', {}))
0.64 formsets.py(81):         for cls in reversed(type(self).__mro__):
0.64 formsets.py(83):         if error_messages is not None:
0.64 formsets.py(85):         self.error_messages = messages
0.64 formsets.py(318):         if not self.is_bound:
0.64 formsets.py(321):         self.errors
0.64 formsets.py(303):         if self._errors is None:
0.64 formsets.py(304):             self.full_clean()
0.64 formsets.py(335):         self._errors = []
0.64 formsets.py(336):         self._non_form_errors = self.error_class(error_class='nonform')
0.64 ok

----------------------------------------------------------------------
Ran 1 test in 0.001s

OK
formsets.py(337):         empty_forms_count = 0
0.64 formsets.py(339):         if not self.is_bound:  # Stop further processing.
0.64 formsets.py(342):         if not self.management_form.is_valid():
0.64 formsets.py(111):         if self.is_bound:
0.64 formsets.py(112):             form = ManagementForm(self.data, auto_id=self.auto_id, prefix=self.prefix)
0.64 formsets.py(35):         self.base_fields[TOTAL_FORM_COUNT] = IntegerField(widget=HiddenInput)
0.64 formsets.py(36):         self.base_fields[INITIAL_FORM_COUNT] = IntegerField(widget=HiddenInput)
0.64 formsets.py(40):         self.base_fields[MIN_NUM_FORM_COUNT] = IntegerField(required=False, widget=HiddenInput)
0.64 formsets.py(41):         self.base_fields[MAX_NUM_FORM_COUNT] = IntegerField(required=False, widget=HiddenInput)
0.64 formsets.py(42):         super().__init__(*args, **kwargs)
0.64 formsets.py(113):             form.full_clean()
0.64 formsets.py(45):         cleaned_data = super().clean()
0.64 formsets.py(48):         cleaned_data.setdefault(TOTAL_FORM_COUNT, 0)
0.64 formsets.py(49):         cleaned_data.setdefault(INITIAL_FORM_COUNT, 0)
0.64 formsets.py(50):         return cleaned_data
0.64 formsets.py(121):         return form
0.64 formsets.py(355):         for i, form in enumerate(self.forms):
0.64 formsets.py(155):         return [
0.64 formsets.py(157):             for i in range(self.total_form_count())
0.64 formsets.py(125):         if self.is_bound:
0.64 formsets.py(130):             return min(self.management_form.cleaned_data[TOTAL_FORM_COUNT], self.absolute_max)
0.64 formsets.py(155):         return [
0.64 formsets.py(155):         return [
0.64 formsets.py(157):             for i in range(self.total_form_count())
0.64 formsets.py(156):             self._construct_form(i, **self.get_form_kwargs(i))
0.64 formsets.py(167):         return self.form_kwargs.copy()
0.64 formsets.py(172):             'auto_id': self.auto_id,
0.64 formsets.py(173):             'prefix': self.add_prefix(i),
0.64 formsets.py(423):         return '%s-%s' % (self.prefix, index)
0.64 formsets.py(174):             'error_class': self.error_class,
0.64 formsets.py(178):             'use_required_attribute': False,
0.64 formsets.py(171):         defaults = {
0.64 formsets.py(180):         if self.is_bound:
0.64 formsets.py(181):             defaults['data'] = self.data
0.64 formsets.py(182):             defaults['files'] = self.files
0.64 formsets.py(183):         if self.initial and 'initial' not in kwargs:
0.64 formsets.py(190):         if i >= self.initial_form_count() and i >= self.min_num:
0.64 formsets.py(144):         if self.is_bound:
0.64 formsets.py(145):             return self.management_form.cleaned_data[INITIAL_FORM_COUNT]
0.64 formsets.py(191):             defaults['empty_permitted'] = True
0.64 formsets.py(192):         defaults.update(kwargs)
0.64 formsets.py(193):         form = self.form(**defaults)
0.64 formsets.py(194):         self.add_fields(form, i)
0.64 formsets.py(403):         initial_form_count = self.initial_form_count()
0.64 formsets.py(144):         if self.is_bound:
0.64 formsets.py(145):             return self.management_form.cleaned_data[INITIAL_FORM_COUNT]
0.64 formsets.py(404):         if self.can_order:
0.64 formsets.py(419):         if self.can_delete and (self.can_delete_extra or index < initial_form_count):
0.64 formsets.py(195):         return form
0.64 formsets.py(155):         return [
0.64 formsets.py(357):             if not form.has_changed() and i >= self.initial_form_count():
0.64 formsets.py(144):         if self.is_bound:
0.64 formsets.py(145):             return self.management_form.cleaned_data[INITIAL_FORM_COUNT]
0.64 formsets.py(358):                 empty_forms_count += 1
0.64 formsets.py(361):             form_errors = form.errors
0.64 formsets.py(362):             if self.can_delete and self._should_delete_form(form):
0.64 formsets.py(364):             self._errors.append(form_errors)
0.64 formsets.py(355):         for i, form in enumerate(self.forms):
0.64 formsets.py(365):         try:
0.64 formsets.py(366):             if (self.validate_max and
0.64 formsets.py(368):                     self.management_form.cleaned_data[TOTAL_FORM_COUNT] > self.absolute_max:
0.64 formsets.py(366):             if (self.validate_max and
0.64 formsets.py(374):             if (self.validate_min and
0.64 formsets.py(381):             self.clean()
0.64 formsets.py(382):         except ValidationError as e:
0.64 formsets.py(383):             self._non_form_errors = self.error_class(
0.64 formsets.py(384):                 e.error_list,
0.64 formsets.py(385):                 error_class='nonform'
0.64 formsets.py(383):             self._non_form_errors = self.error_class(
0.64 formsets.py(305):         return self._errors
0.64 formsets.py(324):         forms_valid = all([
0.64 formsets.py(325):             form.is_valid() for form in self.forms
0.64 formsets.py(324):         forms_valid = all([
0.64 formsets.py(324):         forms_valid = all([
0.64 formsets.py(325):             form.is_valid() for form in self.forms
0.64 formsets.py(326):             if not (self.can_delete and self._should_delete_form(form))
0.64 formsets.py(325):             form.is_valid() for form in self.forms
0.64 formsets.py(324):         forms_valid = all([
0.64 formsets.py(328):         return forms_valid and not self.non_form_errors()
0.64 formsets.py(296):         if self._non_form_errors is None:
0.64 formsets.py(298):         return self._non_form_errors
0.64 formsets.py(296):         if self._non_form_errors is None:
0.64 formsets.py(298):         return self._non_form_errors
+ cat coverage.cover
{"/testbed/django/forms/formsets.py": {"1": 1, "2": 1, "3": 1, "4": 1, "5": 1, "6": 1, "7": 1, "8": 1, "9": 1, "11": 1, "14": 1, "15": 1, "16": 1, "17": 1, "18": 1, "19": 1, "22": 1, "25": 1, "28": 2, "53": 2, "54": 1, "463": 2, "464": 1, "465": 1, "466": 1, "496": 1, "34": 1, "44": 1, "35": 1, "36": 1, "40": 1, "41": 1, "42": 1, "45": 1, "48": 1, "49": 1, "50": 1, "58": 1, "60": 2, "61": 1, "59": 1, "66": 2, "67": 1, "68": 1, "87": 1, "90": 1, "94": 1, "98": 1, "101": 1, "108": 1, "109": 1, "123": 1, "142": 1, "151": 1, "152": 1, "160": 1, "169": 1, "197": 1, "198": 1, "202": 1, "203": 1, "207": 1, "208": 1, "219": 1, "220": 1, "228": 1, "229": 1, "245": 1, "246": 1, "282": 1, "283": 1, "286": 1, "287": 1, "290": 1, "300": 1, "301": 1, "307": 1, "312": 1, "316": 1, "330": 1, "388": 1, "397": 1, "401": 1, "422": 1, "425": 1, "435": 1, "436": 1, "444": 1, "452": 1, "457": 1, "69": 1, "70": 1, "71": 1, "72": 1, "73": 1, "74": 1, "75": 1, "76": 1, "77": 1, "78": 1, "80": 1, "81": 5, "82": 4, "83": 1, "84": 0, "85": 1, "88": 0, "92": 0, "96": 0, "99": 0, "106": 0, "111": 1, "112": 1, "113": 1, "115": 0, "116": 0, "117": 0, "118": 0, "119": 0, "121": 1, "125": 1, "130": 1, "132": 0, "133": 0, "136": 0, "137": 0, "138": 0, "139": 0, "140": 0, "144": 3, "145": 3, "148": 0, "149": 0, "155": 4, "157": 2, "156": 1, "167": 1, "172": 1, "173": 1, "174": 1, "178": 1, "171": 1, "180": 1, "181": 1, "182": 1, "183": 1, "184": 0, "185": 0, "186": 0, "187": 0, "190": 1, "191": 1, "192": 1, "193": 1, "194": 1, "195": 1, "200": 0, "205": 0, "209": 0, "210": 0, "211": 0, "212": 0, "213": 0, "214": 0, "216": 0, "217": 0, "224": 0, "225": 0, "226": 0, "231": 0, "232": 0, "235": 0, "236": 0, "237": 0, "239": 0, "240": 0, "241": 0, "242": 0, "243": 0, "251": 0, "252": 0, "257": 0, "258": 0, "259": 0, "261": 0, "262": 0, "264": 0, "265": 0, "266": 0, "273": 0, "277": 0, "280": 0, "274": 0, "275": 0, "276": 0, "284": 1, "288": 0, "296": 2, "297": 0, "298": 2, "303": 1, "304": 1, "305": 1, "309": 0, "310": 0, "314": 0, "318": 1, "319": 0, "321": 1, "324": 4, "325": 3, "328": 1, "326": 1, "335": 1, "336": 1, "337": 1, "339": 1, "340": 0, "342": 1, "343": 0, "344": 0, "346": 0, "348": 0, "345": 0, "351": 0, "353": 0, "355": 2, "357": 1, "358": 1, "361": 1, "362": 1, "363": 0, "364": 1, "365": 1, "366": 2, "367": 0, "368": 1, "369": 0, "370": 0, "371": 0, "372": 0, "374": 1, "375": 0, "376": 0, "377": 0, "378": 0, "379": 0, "381": 1, "382": 1, "383": 2, "384": 1, "385": 1, "347": 0, "395": 0, "399": 0, "403": 1, "404": 1, "406": 0, "407": 0, "408": 0, "409": 0, "410": 0, "411": 0, "414": 0, "415": 0, "416": 0, "417": 0, "419": 1, "420": 0, "423": 1, "430": 0, "431": 0, "433": 0, "439": 0, "440": 0, "442": 0, "449": 0, "450": 0, "454": 0, "455": 0, "459": 0, "460": 0, "468": 1, "469": 1, "470": 1, "471": 1, "475": 1, "476": 1, "477": 1, "478": 0, "479": 0, "482": 1, "483": 1, "484": 1, "485": 1, "486": 1, "487": 1, "488": 1, "489": 1, "490": 1, "491": 1, "481": 1, "493": 1, "499": 0}}
+ git checkout 7f33c1e22dbc34a7afae7967783725b10f1f13b1
Note: switching to '7f33c1e22dbc34a7afae7967783725b10f1f13b1'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at 7f33c1e22d Added note about zero timeout in cache settings docs.
M	django/forms/formsets.py
+ git apply /root/pre_state.patch
error: unrecognized input
