+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD d559cb02da30f74debbb1fc3a46de0df134d2d80
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
nothing to commit, working tree clean
+ git show
commit d559cb02da30f74debbb1fc3a46de0df134d2d80
Author: Mariusz Felisiak <felisiak.mariusz@gmail.com>
Date:   Thu Oct 27 08:41:03 2022 +0200

    Refs #19215 -- Fixed admin_widgets tests if Pillow isn't installed.
    
    Follow up to c0fc1b5302f5d9d82e2255fb5758321fbac34949.

diff --git a/tests/admin_widgets/models.py b/tests/admin_widgets/models.py
index 26eaf5d243..0113ecb7c8 100644
--- a/tests/admin_widgets/models.py
+++ b/tests/admin_widgets/models.py
@@ -5,8 +5,13 @@ from django.contrib.auth.models import User
 from django.core.files.storage import FileSystemStorage
 from django.db import models
 
-temp_storage_dir = tempfile.mkdtemp()
-temp_storage = FileSystemStorage(temp_storage_dir)
+try:
+    from PIL import Image
+except ImportError:
+    Image = None
+else:
+    temp_storage_dir = tempfile.mkdtemp()
+    temp_storage = FileSystemStorage(temp_storage_dir)
 
 
 class MyFileField(models.FileField):
@@ -182,9 +187,10 @@ class Advisor(models.Model):
 
 class Student(models.Model):
     name = models.CharField(max_length=255)
-    photo = models.ImageField(
-        storage=temp_storage, upload_to="photos", blank=True, null=True
-    )
+    if Image:
+        photo = models.ImageField(
+            storage=temp_storage, upload_to="photos", blank=True, null=True
+        )
 
     class Meta:
         ordering = ("name",)
diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py
index bf26c1edc1..70b1233ef4 100644
--- a/tests/admin_widgets/tests.py
+++ b/tests/admin_widgets/tests.py
@@ -3,6 +3,7 @@ import os
 import re
 from datetime import datetime, timedelta
 from importlib import import_module
+from unittest import skipUnless
 
 try:
     import zoneinfo
@@ -38,6 +39,7 @@ from .models import (
     Company,
     Event,
     Honeycomb,
+    Image,
     Individual,
     Inventory,
     Member,
@@ -1774,6 +1776,7 @@ class RelatedFieldWidgetSeleniumTests(AdminWidgetSeleniumTestCase):
         self.assertEqual(profiles[0].user.username, username_value)
 
 
+@skipUnless(Image, "Pillow not installed")
 class ImageFieldWidgetsSeleniumTests(AdminWidgetSeleniumTestCase):
     def test_clearablefileinput_widget(self):
         from selenium.webdriver.common.by import By
+ git diff d559cb02da30f74debbb1fc3a46de0df134d2d80
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Checking if build backend supports build_editable: started
  Checking if build backend supports build_editable: finished with status 'done'
  Getting requirements to build editable: started
  Getting requirements to build editable: finished with status 'done'
  Preparing editable metadata (pyproject.toml): started
  Preparing editable metadata (pyproject.toml): finished with status 'done'
Requirement already satisfied: asgiref>=3.5.2 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Django==4.2.dev20221027064103) (3.9.1)
Requirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Django==4.2.dev20221027064103) (0.5.3)
Requirement already satisfied: typing_extensions>=4 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from asgiref>=3.5.2->Django==4.2.dev20221027064103) (4.14.1)
Building wheels for collected packages: Django
  Building editable for Django (pyproject.toml): started
  Building editable for Django (pyproject.toml): finished with status 'done'
  Created wheel for Django: filename=django-4.2.dev20221027064103-0.editable-py3-none-any.whl size=27263 sha256=52482d3953f29c7e2c52bec7f9495e2210fb9550f384b240046eb5611d406757
  Stored in directory: /tmp/pip-ephem-wheel-cache-w0xkxfsh/wheels/7d/66/67/70d1ee2124ccf21d601c352e25cdca10f611f7c8b3f9ffb9e4
Successfully built Django
Installing collected packages: Django
  Attempting uninstall: Django
    Found existing installation: Django 4.2.dev20221027064103
    Uninstalling Django-4.2.dev20221027064103:
      Successfully uninstalled Django-4.2.dev20221027064103
Successfully installed Django-4.2.dev20221027064103
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git apply -v -
Checking patch django/contrib/auth/forms.py...
Applied patch django/contrib/auth/forms.py cleanly.
+ git apply -v -
<stdin>:38: trailing whitespace.
        
<stdin>:41: trailing whitespace.
        
Checking patch tests/test_coverup_django__django-16139.py...
Applied patch tests/test_coverup_django__django-16139.py cleanly.
warning: 2 lines add whitespace errors.
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/contrib/auth/forms\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-16139
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(django/contrib/auth/forms\\.py)']
Testing against Django installed in '/testbed/django'
0.62 forms.py(1): import unicodedata
0.62 forms.py(3): from django import forms
0.62 forms.py(4): from django.contrib.auth import authenticate, get_user_model, password_validation
0.62 forms.py(5): from django.contrib.auth.hashers import UNUSABLE_PASSWORD_PREFIX, identify_hasher
0.62 forms.py(6): from django.contrib.auth.models import User
0.62 forms.py(7): from django.contrib.auth.tokens import default_token_generator
0.62 forms.py(8): from django.contrib.sites.shortcuts import get_current_site
0.62 forms.py(9): from django.core.exceptions import ValidationError
0.62 forms.py(10): from django.core.mail import EmailMultiAlternatives
0.62 forms.py(11): from django.template import loader
0.62 forms.py(12): from django.utils.encoding import force_bytes
0.62 forms.py(13): from django.utils.http import urlsafe_base64_encode
0.62 forms.py(14): from django.utils.text import capfirst
0.62 forms.py(15): from django.utils.translation import gettext
0.62 forms.py(16): from django.utils.translation import gettext_lazy as _
0.62 forms.py(18): UserModel = get_user_model()
0.62 forms.py(21): def _unicode_ci_compare(s1, s2):
0.62 forms.py(33): class ReadOnlyPasswordHashWidget(forms.Widget):
0.62 forms.py(33): class ReadOnlyPasswordHashWidget(forms.Widget):
0.62 forms.py(34):     template_name = "auth/widgets/read_only_password_hash.html"
0.62 forms.py(35):     read_only = True
0.62 forms.py(37):     def get_context(self, name, value, attrs):
0.62 forms.py(59):     def id_for_label(self, id_):
0.62 forms.py(63): class ReadOnlyPasswordHashField(forms.Field):
0.62 forms.py(63): class ReadOnlyPasswordHashField(forms.Field):
0.62 forms.py(64):     widget = ReadOnlyPasswordHashWidget
0.62 forms.py(66):     def __init__(self, *args, **kwargs):
0.62 forms.py(72): class UsernameField(forms.CharField):
0.62 forms.py(72): class UsernameField(forms.CharField):
0.62 forms.py(73):     def to_python(self, value):
0.62 forms.py(76):     def widget_attrs(self, widget):
0.62 forms.py(84): class UserCreationForm(forms.ModelForm):
0.62 forms.py(84): class UserCreationForm(forms.ModelForm):
0.62 forms.py(85):     """
0.62 forms.py(91):         "password_mismatch": _("The two password fields didn’t match."),
0.62 forms.py(90):     error_messages = {
0.62 forms.py(93):     password1 = forms.CharField(
0.62 forms.py(94):         label=_("Password"),
0.62 forms.py(95):         strip=False,
0.62 forms.py(96):         widget=forms.PasswordInput(attrs={"autocomplete": "new-password"}),
0.62 forms.py(97):         help_text=password_validation.password_validators_help_text_html(),
0.62 forms.py(93):     password1 = forms.CharField(
0.62 forms.py(99):     password2 = forms.CharField(
0.62 forms.py(100):         label=_("Password confirmation"),
0.62 forms.py(101):         widget=forms.PasswordInput(attrs={"autocomplete": "new-password"}),
0.62 forms.py(102):         strip=False,
0.62 forms.py(103):         help_text=_("Enter the same password as before, for verification."),
0.62 forms.py(99):     password2 = forms.CharField(
0.62 forms.py(106):     class Meta:
0.62 forms.py(106):     class Meta:
0.62 forms.py(107):         model = User
0.62 forms.py(108):         fields = ("username",)
0.62 forms.py(109):         field_classes = {"username": UsernameField}
0.62 forms.py(111):     def __init__(self, *args, **kwargs):
0.62 forms.py(118):     def clean_password2(self):
0.62 forms.py(128):     def _post_clean(self):
0.62 forms.py(139):     def save(self, commit=True):
0.62 forms.py(77):         return {
0.62 forms.py(78):             **super().widget_attrs(widget),
0.62 forms.py(77):         return {
0.62 forms.py(79):             "autocapitalize": "none",
0.62 forms.py(80):             "autocomplete": "username",
0.62 forms.py(77):         return {
0.62 forms.py(147): class UserChangeForm(forms.ModelForm):
0.62 forms.py(147): class UserChangeForm(forms.ModelForm):
0.62 forms.py(148):     password = ReadOnlyPasswordHashField(
0.62 forms.py(149):         label=_("Password"),
0.62 forms.py(150):         help_text=_(
0.62 forms.py(151):             "Raw passwords are not stored, so there is no way to see this "
0.62 forms.py(150):         help_text=_(
0.62 forms.py(148):     password = ReadOnlyPasswordHashField(
0.62 forms.py(67):         kwargs.setdefault("required", False)
0.62 forms.py(68):         kwargs.setdefault("disabled", True)
0.62 forms.py(69):         super().__init__(*args, **kwargs)
0.62 forms.py(157):     class Meta:
0.62 forms.py(157):     class Meta:
0.62 forms.py(158):         model = User
0.62 forms.py(159):         fields = "__all__"
0.62 forms.py(160):         field_classes = {"username": UsernameField}
0.62 forms.py(162):     def __init__(self, *args, **kwargs):
0.62 forms.py(77):         return {
0.62 forms.py(78):             **super().widget_attrs(widget),
0.62 forms.py(77):         return {
0.62 forms.py(79):             "autocapitalize": "none",
0.62 forms.py(80):             "autocomplete": "username",
0.62 forms.py(77):         return {
0.62 forms.py(176): class AuthenticationForm(forms.Form):
0.62 forms.py(176): class AuthenticationForm(forms.Form):
0.62 forms.py(177):     """
0.62 forms.py(182):     username = UsernameField(widget=forms.TextInput(attrs={"autofocus": True}))
0.62 forms.py(77):         return {
0.62 forms.py(78):             **super().widget_attrs(widget),
0.62 forms.py(77):         return {
0.62 forms.py(79):             "autocapitalize": "none",
0.62 forms.py(80):             "autocomplete": "username",
0.62 forms.py(77):         return {
0.62 forms.py(183):     password = forms.CharField(
0.62 forms.py(184):         label=_("Password"),
0.62 forms.py(185):         strip=False,
0.62 forms.py(186):         widget=forms.PasswordInput(attrs={"autocomplete": "current-password"}),
0.62 forms.py(183):     password = forms.CharField(
0.62 forms.py(190):         "invalid_login": _(
0.62 forms.py(191):             "Please enter a correct %(username)s and password. Note that both "
0.62 forms.py(190):         "invalid_login": _(
0.62 forms.py(194):         "inactive": _("This account is inactive."),
0.62 forms.py(189):     error_messages = {
0.62 forms.py(197):     def __init__(self, request=None, *args, **kwargs):
0.62 forms.py(214):     def clean(self):
0.62 forms.py(229):     def confirm_login_allowed(self, user):
0.62 forms.py(246):     def get_user(self):
0.62 forms.py(249):     def get_invalid_login_error(self):
0.62 forms.py(257): class PasswordResetForm(forms.Form):
0.62 forms.py(257): class PasswordResetForm(forms.Form):
0.62 forms.py(258):     email = forms.EmailField(
0.62 forms.py(259):         label=_("Email"),
0.62 forms.py(260):         max_length=254,
0.62 forms.py(261):         widget=forms.EmailInput(attrs={"autocomplete": "email"}),
0.62 forms.py(258):     email = forms.EmailField(
0.62 forms.py(264):     def send_mail(
0.62 forms.py(288):     def get_users(self, email):
0.62 forms.py(311):         domain_override=None,
0.62 forms.py(312):         subject_template_name="registration/password_reset_subject.txt",
0.62 forms.py(313):         email_template_name="registration/password_reset_email.html",
0.62 forms.py(314):         use_https=False,
0.62 forms.py(315):         token_generator=default_token_generator,
0.62 forms.py(316):         from_email=None,
0.62 forms.py(317):         request=None,
0.62 forms.py(318):         html_email_template_name=None,
0.62 forms.py(319):         extra_email_context=None,
0.62 forms.py(309):     def save(
0.62 forms.py(355): class SetPasswordForm(forms.Form):
0.62 forms.py(355): class SetPasswordForm(forms.Form):
0.62 forms.py(356):     """
0.62 forms.py(362):         "password_mismatch": _("The two password fields didn’t match."),
0.62 forms.py(361):     error_messages = {
0.62 forms.py(364):     new_password1 = forms.CharField(
0.62 forms.py(365):         label=_("New password"),
0.62 forms.py(366):         widget=forms.PasswordInput(attrs={"autocomplete": "new-password"}),
0.62 forms.py(367):         strip=False,
Creating test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
0.62 forms.py(368):         help_text=password_validation.password_validators_help_text_html(),
0.62 forms.py(364):     new_password1 = forms.CharField(
0.62 forms.py(370):     new_password2 = forms.CharField(
0.62 forms.py(371):         label=_("New password confirmation"),
0.62 forms.py(372):         strip=False,
0.62 forms.py(373):         widget=forms.PasswordInput(attrs={"autocomplete": "new-password"}),
0.62 forms.py(370):     new_password2 = forms.CharField(
0.62 forms.py(376):     def __init__(self, user, *args, **kwargs):
0.62 forms.py(380):     def clean_new_password2(self):
0.62 forms.py(391):     def save(self, commit=True):
0.62 forms.py(399): class PasswordChangeForm(SetPasswordForm):
0.62 forms.py(399): class PasswordChangeForm(SetPasswordForm):
0.62 forms.py(400):     """
0.62 forms.py(405):     error_messages = {
0.62 forms.py(406):         **SetPasswordForm.error_messages,
0.62 forms.py(405):     error_messages = {
0.62 forms.py(407):         "password_incorrect": _(
0.62 forms.py(408):             "Your old password was entered incorrectly. Please enter it again."
0.62 forms.py(407):         "password_incorrect": _(
0.62 forms.py(405):     error_messages = {
0.62 forms.py(411):     old_password = forms.CharField(
0.62 forms.py(412):         label=_("Old password"),
0.62 forms.py(413):         strip=False,
0.62 forms.py(414):         widget=forms.PasswordInput(
0.62 forms.py(415):             attrs={"autocomplete": "current-password", "autofocus": True}
0.62 forms.py(414):         widget=forms.PasswordInput(
0.62 forms.py(411):     old_password = forms.CharField(
0.62 forms.py(419):     field_order = ["old_password", "new_password1", "new_password2"]
0.62 forms.py(421):     def clean_old_password(self):
0.62 forms.py(434): class AdminPasswordChangeForm(forms.Form):
0.62 forms.py(434): class AdminPasswordChangeForm(forms.Form):
0.62 forms.py(435):     """
0.62 forms.py(440):         "password_mismatch": _("The two password fields didn’t match."),
0.62 forms.py(439):     error_messages = {
0.62 forms.py(442):     required_css_class = "required"
0.62 forms.py(443):     password1 = forms.CharField(
0.62 forms.py(444):         label=_("Password"),
0.62 forms.py(445):         widget=forms.PasswordInput(
0.62 forms.py(446):             attrs={"autocomplete": "new-password", "autofocus": True}
0.62 forms.py(445):         widget=forms.PasswordInput(
0.62 forms.py(448):         strip=False,
0.62 forms.py(449):         help_text=password_validation.password_validators_help_text_html(),
0.62 forms.py(443):     password1 = forms.CharField(
0.62 forms.py(451):     password2 = forms.CharField(
0.62 forms.py(452):         label=_("Password (again)"),
0.62 forms.py(453):         widget=forms.PasswordInput(attrs={"autocomplete": "new-password"}),
0.62 forms.py(454):         strip=False,
0.62 forms.py(455):         help_text=_("Enter the same password as before, for verification."),
0.62 forms.py(451):     password2 = forms.CharField(
0.62 forms.py(458):     def __init__(self, user, *args, **kwargs):
0.62 forms.py(462):     def clean_password2(self):
0.62 forms.py(473):     def save(self, commit=True):
0.62 forms.py(481):     @property
0.62 forms.py(482):     def changed_data(self):
Found 1 test(s).
Skipping setup of unused database(s): other.
Operations to perform:
  Synchronize unmigrated apps: auth, contenttypes, messages, sessions, staticfiles
  Apply all migrations: admin, sites
Synchronizing apps without migrations:
  Creating tables...
    Creating table django_content_type
    Creating table auth_permission
    Creating table auth_group
    Creating table auth_user
    Creating table django_session
    Running deferred SQL...
Running migrations:
  Applying admin.0001_initial... OK
  Applying admin.0002_logentry_remove_auto_add... OK
  Applying admin.0003_logentry_add_action_flag_choices... OK
  Applying sites.0001_initial... OK
  Applying sites.0002_alter_domain_unique... OK
System check identified no issues (0 silenced).
test_password_reset_link_incorrect_format (test_coverup_django__django-16139.UserAdminLinkTest) ... FAIL

======================================================================
FAIL: test_password_reset_link_incorrect_format (test_coverup_django__django-16139.UserAdminLinkTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/./tests/test_coverup_django__django-16139.py", line 44, in test_password_reset_link_incorrect_format
    self.assertNotEqual(response.status_code, 404)
AssertionError: 404 == 404

----------------------------------------------------------------------
Ran 1 test in 0.021s

FAILED (failures=1)
Destroying test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
0.78 forms.py(163):         super().__init__(*args, **kwargs)
0.78 forms.py(164):         password = self.fields.get("password")
0.78 forms.py(165):         if password:
0.78 forms.py(166):             password.help_text = password.help_text.format(
0.78 forms.py(167):                 f"../../{self.instance.pk}/password/"
0.78 forms.py(166):             password.help_text = password.help_text.format(
0.78 forms.py(169):         user_permissions = self.fields.get("user_permissions")
0.78 forms.py(170):         if user_permissions:
0.78 forms.py(171):             user_permissions.queryset = user_permissions.queryset.select_related(
0.78 forms.py(172):                 "content_type"
0.78 forms.py(171):             user_permissions.queryset = user_permissions.queryset.select_related(
0.78 forms.py(77):         return {
0.78 forms.py(78):             **super().widget_attrs(widget),
0.78 forms.py(77):         return {
0.78 forms.py(79):             "autocapitalize": "none",
0.78 forms.py(80):             "autocomplete": "username",
0.78 forms.py(77):         return {
0.78 forms.py(77):         return {
0.78 forms.py(78):             **super().widget_attrs(widget),
0.78 forms.py(77):         return {
0.78 forms.py(79):             "autocapitalize": "none",
0.78 forms.py(80):             "autocomplete": "username",
0.78 forms.py(77):         return {
0.78 forms.py(163):         super().__init__(*args, **kwargs)
0.79 forms.py(164):         password = self.fields.get("password")
0.79 forms.py(165):         if password:
0.79 forms.py(166):             password.help_text = password.help_text.format(
0.79 forms.py(167):                 f"../../{self.instance.pk}/password/"
0.79 forms.py(166):             password.help_text = password.help_text.format(
0.79 forms.py(169):         user_permissions = self.fields.get("user_permissions")
0.79 forms.py(170):         if user_permissions:
0.79 forms.py(171):             user_permissions.queryset = user_permissions.queryset.select_related(
0.79 forms.py(172):                 "content_type"
0.79 forms.py(171):             user_permissions.queryset = user_permissions.queryset.select_related(
+ cat coverage.cover
{"/testbed/django/contrib/auth/forms.py": {"1": 1, "3": 1, "4": 1, "5": 1, "6": 1, "7": 1, "8": 1, "9": 1, "10": 1, "11": 1, "12": 1, "13": 1, "14": 1, "15": 1, "16": 1, "18": 1, "21": 1, "33": 2, "63": 2, "72": 2, "84": 2, "147": 2, "176": 2, "257": 2, "355": 2, "399": 2, "434": 2, "28": 0, "29": 0, "27": 0, "34": 1, "35": 1, "37": 1, "59": 1, "38": 0, "39": 0, "40": 0, "41": 0, "43": 0, "44": 0, "45": 0, "46": 0, "48": 0, "49": 0, "47": 0, "54": 0, "55": 0, "56": 0, "57": 0, "60": 0, "64": 1, "66": 1, "67": 1, "68": 1, "69": 1, "73": 1, "76": 1, "74": 0, "77": 15, "78": 5, "79": 5, "80": 5, "91": 1, "90": 1, "93": 2, "94": 1, "95": 1, "96": 1, "97": 1, "99": 2, "100": 1, "101": 1, "102": 1, "103": 1, "106": 2, "111": 1, "118": 1, "128": 1, "139": 1, "107": 1, "108": 1, "109": 1, "112": 0, "113": 0, "116": 0, "114": 0, "115": 0, "119": 0, "120": 0, "121": 0, "122": 0, "123": 0, "124": 0, "126": 0, "129": 0, "132": 0, "133": 0, "134": 0, "135": 0, "136": 0, "137": 0, "140": 0, "141": 0, "142": 0, "143": 0, "144": 0, "148": 2, "149": 1, "150": 2, "151": 1, "157": 2, "162": 1, "158": 1, "159": 1, "160": 1, "163": 2, "164": 2, "165": 2, "166": 4, "167": 2, "169": 2, "170": 2, "171": 4, "172": 2, "182": 1, "183": 2, "184": 1, "185": 1, "186": 1, "190": 2, "191": 1, "194": 1, "189": 1, "197": 1, "214": 1, "229": 1, "246": 1, "249": 1, "202": 0, "203": 0, "204": 0, "207": 0, "208": 0, "209": 0, "210": 0, "211": 0, "212": 0, "215": 0, "216": 0, "218": 0, "219": 0, "220": 0, "222": 0, "223": 0, "225": 0, "227": 0, "240": 0, "241": 0, "242": 0, "243": 0, "247": 0, "250": 0, "251": 0, "252": 0, "253": 0, "258": 2, "259": 1, "260": 1, "261": 1, "264": 1, "288": 1, "311": 1, "312": 1, "313": 1, "314": 1, "315": 1, "316": 1, "317": 1, "318": 1, "319": 1, "309": 1, "276": 0, "278": 0, "279": 0, "281": 0, "282": 0, "283": 0, "284": 0, "286": 0, "295": 0, "296": 0, "298": 0, "299": 0, "297": 0, "302": 0, "304": 0, "305": 0, "306": 0, "303": 0, "325": 0, "326": 0, "327": 0, "328": 0, "329": 0, "331": 0, "332": 0, "333": 0, "334": 0, "336": 0, "337": 0, "338": 0, "339": 0, "340": 0, "341": 0, "342": 0, "335": 0, "343": 0, "345": 0, "346": 0, "347": 0, "348": 0, "349": 0, "350": 0, "351": 0, "362": 1, "361": 1, "364": 2, "365": 1, "366": 1, "367": 1, "368": 1, "370": 2, "371": 1, "372": 1, "373": 1, "376": 1, "380": 1, "391": 1, "377": 0, "378": 0, "381": 0, "382": 0, "383": 0, "384": 0, "385": 0, "386": 0, "388": 0, "389": 0, "392": 0, "393": 0, "394": 0, "395": 0, "396": 0, "405": 3, "406": 1, "407": 2, "408": 1, "411": 2, "412": 1, "413": 1, "414": 2, "415": 1, "419": 1, "421": 1, "425": 0, "426": 0, "427": 0, "428": 0, "429": 0, "431": 0, "440": 1, "439": 1, "442": 1, "443": 2, "444": 1, "445": 2, "446": 1, "448": 1, "449": 1, "451": 2, "452": 1, "453": 1, "454": 1, "455": 1, "458": 1, "462": 1, "473": 1, "481": 1, "482": 1, "459": 0, "460": 0, "463": 0, "464": 0, "465": 0, "466": 0, "467": 0, "468": 0, "470": 0, "471": 0, "475": 0, "476": 0, "477": 0, "478": 0, "479": 0, "483": 0, "484": 0, "485": 0, "486": 0, "487": 0}}
+ git checkout d559cb02da30f74debbb1fc3a46de0df134d2d80
Note: switching to 'd559cb02da30f74debbb1fc3a46de0df134d2d80'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at d559cb02da Refs #19215 -- Fixed admin_widgets tests if Pillow isn't installed.
M	django/contrib/auth/forms.py
+ git apply /root/pre_state.patch
error: unrecognized input
