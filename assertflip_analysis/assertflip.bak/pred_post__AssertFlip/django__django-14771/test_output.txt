+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD 4884a87e022056eda10534c13d74e49b8cdda632
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
nothing to commit, working tree clean
+ git show
commit 4884a87e022056eda10534c13d74e49b8cdda632
Author: David Smith <smithdc@gmail.com>
Date:   Sun Sep 26 19:55:04 2021 +0100

    Fixed #33134 -- Fixed recursion depth error when rendering Form with BoundFields.
    
    Regression in 456466d932830b096d39806e291fe23ec5ed38d5.

diff --git a/django/forms/boundfield.py b/django/forms/boundfield.py
index d1e98719d2..5bbfcbe41c 100644
--- a/django/forms/boundfield.py
+++ b/django/forms/boundfield.py
@@ -177,7 +177,6 @@ class BoundField:
                 else:
                     attrs['class'] = self.form.required_css_class
         context = {
-            'form': self.form,
             'field': self,
             'label': contents,
             'attrs': attrs,
diff --git a/tests/forms_tests/templates/forms_tests/cyclic_context_boundfield_render.html b/tests/forms_tests/templates/forms_tests/cyclic_context_boundfield_render.html
new file mode 100644
index 0000000000..726e82a3a8
--- /dev/null
+++ b/tests/forms_tests/templates/forms_tests/cyclic_context_boundfield_render.html
@@ -0,0 +1,2 @@
+{% load tags %}
+{% count_render %}
diff --git a/tests/forms_tests/templatetags/__init__.py b/tests/forms_tests/templatetags/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/tests/forms_tests/templatetags/tags.py b/tests/forms_tests/templatetags/tags.py
new file mode 100644
index 0000000000..060e5008da
--- /dev/null
+++ b/tests/forms_tests/templatetags/tags.py
@@ -0,0 +1,21 @@
+from django.template import Library, Node
+
+register = Library()
+
+
+class CountRenderNode(Node):
+    count = 0
+
+    def render(self, context):
+        self.count += 1
+        for v in context.flatten().values():
+            try:
+                v.render()
+            except AttributeError:
+                pass
+        return str(self.count)
+
+
+@register.tag
+def count_render(parser, token):
+    return CountRenderNode()
diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py
index fefebde05c..c478a71699 100644
--- a/tests/forms_tests/tests/test_forms.py
+++ b/tests/forms_tests/tests/test_forms.py
@@ -3954,3 +3954,14 @@ class OverrideTests(SimpleTestCase):
             '<div class="error">This field is required.</div></div>'
             '<p>Comment: <input type="text" name="comment" required></p>',
         )
+
+    def test_cyclic_context_boundfield_render(self):
+        class FirstNameForm(Form):
+            first_name = CharField()
+            template_name_label = 'forms_tests/cyclic_context_boundfield_render.html'
+
+        f = FirstNameForm()
+        try:
+            self.assertInHTML('<th>1</th>', f.render())
+        except RecursionError:
+            self.fail('Cyclic reference in BoundField.render().')
+ git diff 4884a87e022056eda10534c13d74e49b8cdda632
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Checking if build backend supports build_editable: started
  Checking if build backend supports build_editable: finished with status 'done'
  Getting requirements to build editable: started
  Getting requirements to build editable: finished with status 'done'
  Preparing editable metadata (pyproject.toml): started
  Preparing editable metadata (pyproject.toml): finished with status 'done'
Requirement already satisfied: asgiref>=3.3.2 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Django==4.1.dev20210929060442) (3.9.1)
Requirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Django==4.1.dev20210929060442) (0.5.3)
Requirement already satisfied: typing_extensions>=4 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from asgiref>=3.3.2->Django==4.1.dev20210929060442) (4.14.1)
Building wheels for collected packages: Django
  Building editable for Django (pyproject.toml): started
  Building editable for Django (pyproject.toml): finished with status 'done'
  Created wheel for Django: filename=django-4.1.dev20210929060442-0.editable-py3-none-any.whl size=26772 sha256=2c62a3294be331f971ecfcf73c0799ad0d8ee5949402784cc3dd955541243a65
  Stored in directory: /tmp/pip-ephem-wheel-cache-nud6af7v/wheels/7d/66/67/70d1ee2124ccf21d601c352e25cdca10f611f7c8b3f9ffb9e4
Successfully built Django
Installing collected packages: Django
  Attempting uninstall: Django
    Found existing installation: Django 4.1.dev20210929060442
    Uninstalling Django-4.1.dev20210929060442:
      Successfully uninstalled Django-4.1.dev20210929060442
Successfully installed Django-4.1.dev20210929060442
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git apply -v -
Checking patch django/utils/autoreload.py...
Applied patch django/utils/autoreload.py cleanly.
+ git apply -v -
Checking patch tests/test_coverup_django__django-14771.py...
Applied patch tests/test_coverup_django__django-14771.py cleanly.
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/utils/autoreload\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-14771
test_auto_reloader_x_options (test_coverup_django__django-14771.AutoReloaderXOptionsTest)
Test that the auto-reloader correctly passes the -X utf8 option on Windows. ... ok

----------------------------------------------------------------------
Ran 1 test in 10.015s

OK
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(django/utils/autoreload\\.py)']
0.09 autoreload.py(1): import functools
0.09 autoreload.py(2): import itertools
0.09 autoreload.py(3): import logging
0.09 autoreload.py(4): import os
0.09 autoreload.py(5): import signal
0.09 autoreload.py(6): import subprocess
0.09 autoreload.py(7): import sys
0.09 autoreload.py(8): import threading
0.09 autoreload.py(9): import time
0.09 autoreload.py(10): import traceback
0.09 autoreload.py(11): import weakref
0.09 autoreload.py(12): from collections import defaultdict
0.09 autoreload.py(13): from pathlib import Path
0.09 autoreload.py(14): from types import ModuleType
0.09 autoreload.py(15): from zipimport import zipimporter
0.09 autoreload.py(17): import django
0.09 autoreload.py(18): from django.apps import apps
0.09 autoreload.py(19): from django.core.signals import request_finished
0.09 autoreload.py(20): from django.dispatch import Signal
0.09 autoreload.py(21): from django.utils.functional import cached_property
0.09 autoreload.py(22): from django.utils.version import get_version_tuple
0.09 autoreload.py(24): autoreload_started = Signal()
0.09 autoreload.py(25): file_changed = Signal()
0.09 autoreload.py(27): DJANGO_AUTORELOAD_ENV = 'RUN_MAIN'
0.09 autoreload.py(29): logger = logging.getLogger('django.utils.autoreload')
0.10 autoreload.py(34): _error_files = []
0.10 autoreload.py(35): _exception = None
0.10 autoreload.py(37): try:
0.10 autoreload.py(38):     import termios
0.10 autoreload.py(43): try:
0.10 autoreload.py(44):     import pywatchman
0.10 autoreload.py(49): def is_django_module(module):
0.10 autoreload.py(54): def is_django_path(path):
0.10 autoreload.py(59): def check_errors(fn):
0.10 autoreload.py(84): def raise_last_exception():
0.10 autoreload.py(90): def ensure_echo_on():
0.10 autoreload.py(109): def iter_all_python_module_files():
0.10 autoreload.py(119): @functools.lru_cache(maxsize=1)
0.10 autoreload.py(120): def iter_modules_and_files(modules, extra_files):
0.10 autoreload.py(165): @functools.lru_cache(maxsize=1)
0.10 autoreload.py(166): def common_roots(paths):
0.10 autoreload.py(196): def sys_path_directories():
0.10 autoreload.py(213): def get_child_arguments():
0.10 autoreload.py(256): def trigger_reload(filename):
0.10 autoreload.py(261): def restart_with_reloader():
0.10 autoreload.py(270): class BaseReloader:
0.10 autoreload.py(270): class BaseReloader:
0.10 autoreload.py(271):     def __init__(self):
0.10 autoreload.py(276):     def watch_dir(self, path, glob):
0.10 autoreload.py(290):     def watched_files(self, include_globs=True):
0.10 autoreload.py(302):     def wait_for_apps_ready(self, app_reg, django_main_thread):
0.10 autoreload.py(320):     def run(self, django_main_thread):
0.10 autoreload.py(337):     def run_loop(self):
0.10 autoreload.py(346):     def tick(self):
0.10 autoreload.py(356):     @classmethod
0.10 autoreload.py(357):     def check_availability(cls):
0.10 autoreload.py(360):     def notify_file_changed(self, path):
0.10 autoreload.py(367):     @property
0.10 autoreload.py(368):     def should_stop(self):
0.10 autoreload.py(371):     def stop(self):
0.10 autoreload.py(375): class StatReloader(BaseReloader):
0.10 autoreload.py(375): class StatReloader(BaseReloader):
0.10 autoreload.py(376):     SLEEP_TIME = 1  # Check for changes once per second.
0.10 autoreload.py(378):     def tick(self):
0.10 autoreload.py(394):     def snapshot_files(self):
0.10 autoreload.py(408):     @classmethod
0.10 autoreload.py(409):     def check_availability(cls):
0.10 autoreload.py(413): class WatchmanUnavailable(RuntimeError):
0.10 autoreload.py(413): class WatchmanUnavailable(RuntimeError):
0.10 autoreload.py(414):     pass
0.10 autoreload.py(417): class WatchmanReloader(BaseReloader):
0.10 autoreload.py(417): class WatchmanReloader(BaseReloader):
0.10 autoreload.py(418):     def __init__(self):
0.10 autoreload.py(424):     @cached_property
0.10 autoreload.py(425):     def client(self):
0.10 autoreload.py(428):     def _watch_root(self, root):
0.10 autoreload.py(449):     @functools.lru_cache
0.10 autoreload.py(450):     def _get_clock(self, root):
0.10 autoreload.py(453):     def _subscribe(self, directory, name, expression):
0.10 autoreload.py(473):     def _subscribe_dir(self, directory, filenames):
0.10 autoreload.py(487):     def _watch_glob(self, directory, patterns):
0.10 autoreload.py(510):     def watched_roots(self, watched_files):
0.10 autoreload.py(516):     def _update_watches(self):
0.10 autoreload.py(532):     def update_watches(self):
0.10 autoreload.py(540):     def _check_subscription(self, sub):
0.10 autoreload.py(555):     def request_processed(self, **kwargs):
0.10 autoreload.py(559):     def tick(self):
0.10 autoreload.py(580):     def stop(self):
0.10 autoreload.py(584):     def check_server_status(self, inner_ex=None):
0.10 autoreload.py(592):     @classmethod
0.10 autoreload.py(593):     def check_availability(cls):
0.10 autoreload.py(610): def get_reloader():
0.10 autoreload.py(619): def start_django(reloader, main_func, *args, **kwargs):
0.10 autoreload.py(638): def run_with_reloader(main_func, *args, **kwargs):
Testing against Django installed in '/testbed/django'
Found 1 test(s).
Skipping setup of unused database(s): default, other.
System check identified no issues (0 silenced).
+ cat coverage.cover
{"/testbed/django/utils/autoreload.py": {"1": 1, "2": 1, "3": 1, "4": 1, "5": 1, "6": 1, "7": 1, "8": 1, "9": 1, "10": 1, "11": 1, "12": 1, "13": 1, "14": 1, "15": 1, "17": 1, "18": 1, "19": 1, "20": 1, "21": 1, "22": 1, "24": 1, "25": 1, "27": 1, "29": 1, "34": 1, "35": 1, "37": 1, "38": 1, "39": 0, "40": 0, "43": 1, "44": 1, "45": 0, "46": 0, "49": 1, "54": 1, "59": 1, "84": 1, "90": 1, "109": 1, "119": 1, "120": 1, "165": 1, "166": 1, "196": 1, "213": 1, "256": 1, "261": 1, "270": 2, "375": 2, "413": 2, "417": 2, "610": 1, "619": 1, "638": 1, "51": 0, "56": 0, "60": 0, "61": 0, "81": 0, "63": 0, "64": 0, "65": 0, "66": 0, "68": 0, "70": 0, "72": 0, "74": 0, "76": 0, "77": 0, "79": 0, "86": 0, "87": 0, "95": 0, "96": 0, "97": 0, "98": 0, "99": 0, "100": 0, "101": 0, "103": 0, "104": 0, "105": 0, "106": 0, "114": 0, "115": 0, "116": 0, "122": 0, "123": 0, "127": 0, "128": 0, "129": 0, "134": 0, "135": 0, "136": 0, "137": 0, "138": 0, "139": 0, "142": 0, "143": 0, "144": 0, "146": 0, "147": 0, "148": 0, "149": 0, "150": 0, "151": 0, "152": 0, "155": 0, "156": 0, "158": 0, "159": 0, "160": 0, "161": 0, "162": 0, "176": 0, "177": 0, "178": 0, "179": 0, "181": 0, "182": 0, "184": 0, "187": 0, "193": 0, "188": 0, "189": 0, "190": 0, "191": 0, "201": 0, "202": 0, "203": 0, "204": 0, "205": 0, "207": 0, "208": 0, "210": 0, "219": 0, "220": 0, "222": 0, "223": 0, "224": 0, "226": 0, "231": 0, "232": 0, "233": 0, "234": 0, "236": 0, "237": 0, "238": 0, "239": 0, "242": 0, "243": 0, "245": 0, "246": 0, "247": 0, "249": 0, "250": 0, "252": 0, "253": 0, "225": 0, "257": 0, "258": 0, "262": 0, "263": 0, "265": 0, "266": 0, "267": 0, "271": 1, "276": 1, "290": 1, "302": 1, "320": 1, "337": 1, "346": 1, "356": 1, "357": 1, "360": 1, "367": 1, "368": 1, "371": 1, "272": 0, "273": 0, "274": 0, "277": 0, "278": 0, "279": 0, "280": 0, "281": 0, "282": 0, "283": 0, "284": 0, "286": 0, "287": 0, "288": 0, "295": 0, "296": 0, "297": 0, "298": 0, "299": 0, "300": 0, "313": 0, "314": 0, "315": 0, "317": 0, "318": 0, "321": 0, "322": 0, "323": 0, "327": 0, "328": 0, "329": 0, "332": 0, "333": 0, "334": 0, "335": 0, "338": 0, "339": 0, "340": 0, "341": 0, "342": 0, "343": 0, "344": 0, "354": 0, "358": 0, "361": 0, "362": 0, "363": 0, "364": 0, "369": 0, "372": 0, "376": 1, "378": 1, "394": 1, "408": 1, "409": 1, "379": 0, "381": 0, "382": 0, "383": 0, "384": 0, "385": 0, "386": 0, "387": 0, "388": 0, "389": 0, "391": 0, "392": 0, "396": 0, "397": 0, "398": 0, "399": 0, "400": 0, "401": 0, "402": 0, "404": 0, "405": 0, "406": 0, "410": 0, "414": 1, "418": 1, "424": 1, "425": 1, "428": 1, "449": 1, "450": 1, "453": 1, "473": 1, "487": 1, "510": 1, "516": 1, "532": 1, "540": 1, "555": 1, "559": 1, "580": 1, "584": 1, "592": 1, "593": 1, "419": 0, "420": 0, "421": 0, "422": 0, "426": 0, "438": 0, "439": 0, "440": 0, "441": 0, "442": 0, "443": 0, "444": 0, "445": 0, "446": 0, "447": 0, "451": 0, "454": 0, "458": 0, "459": 0, "460": 0, "457": 0, "463": 0, "464": 0, "465": 0, "466": 0, "462": 0, "468": 0, "469": 0, "470": 0, "471": 0, "474": 0, "475": 0, "476": 0, "477": 0, "478": 0, "479": 0, "480": 0, "481": 0, "483": 0, "484": 0, "485": 0, "496": 0, "497": 0, "498": 0, "499": 0, "500": 0, "501": 0, "502": 0, "503": 0, "505": 0, "506": 0, "507": 0, "508": 0, "511": 0, "512": 0, "513": 0, "514": 0, "517": 0, "518": 0, "519": 0, "520": 0, "522": 0, "523": 0, "524": 0, "525": 0, "527": 0, "528": 0, "530": 0, "533": 0, "534": 0, "535": 0, "537": 0, "538": 0, "541": 0, "542": 0, "543": 0, "544": 0, "545": 0, "550": 0, "551": 0, "552": 0, "553": 0, "556": 0, "557": 0, "560": 0, "561": 0, "563": 0, "564": 0, "565": 0, "566": 0, "567": 0, "568": 0, "569": 0, "570": 0, "571": 0, "572": 0, "574": 0, "575": 0, "576": 0, "578": 0, "581": 0, "582": 0, "586": 0, "587": 0, "588": 0, "589": 0, "590": 0, "594": 0, "595": 0, "596": 0, "597": 0, "598": 0, "599": 0, "601": 0, "602": 0, "605": 0, "606": 0, "607": 0, "612": 0, "613": 0, "614": 0, "615": 0, "616": 0, "620": 0, "622": 0, "623": 0, "624": 0, "625": 0, "627": 0, "628": 0, "629": 0, "630": 0, "633": 0, "634": 0, "635": 0, "639": 0, "640": 0, "641": 0, "642": 0, "643": 0, "644": 0, "646": 0, "647": 0, "648": 0, "649": 0}}
+ git checkout 4884a87e022056eda10534c13d74e49b8cdda632
Note: switching to '4884a87e022056eda10534c13d74e49b8cdda632'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at 4884a87e02 Fixed #33134 -- Fixed recursion depth error when rendering Form with BoundFields.
M	django/utils/autoreload.py
+ git apply /root/pre_state.patch
error: unrecognized input
