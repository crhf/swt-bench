{"instance_id": "django__django-11451", "repo": "django/django", "version": "3.0", "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27", "patch_list": ["diff --git a/django/contrib/auth/backends.py b/django/contrib/auth/backends.py\n--- a/django/contrib/auth/backends.py\n+++ b/django/contrib/auth/backends.py\n@@ -39,6 +39,8 @@ class ModelBackend(BaseBackend):\n     def authenticate(self, request, username=None, password=None, **kwargs):\n         if username is None:\n             username = kwargs.get(UserModel.USERNAME_FIELD)\n+        if username is None or password is None:\n+            return\n         try:\n             user = UserModel._default_manager.get_by_natural_key(username)\n         except UserModel.DoesNotExist:\n", "diff --git a/dev/null b/tests/test_coverup_django__django-11451.py\nnew file mode 100644\nindex e69de29..f2fe49d 100644\n--- /dev/null\n+++ b/tests/test_coverup_django__django-11451.py\n@@ -0,0 +1,19 @@\n+from django.test import TestCase\n+from django.contrib.auth.backends import ModelBackend\n+from django.contrib.auth import get_user_model\n+from unittest.mock import patch\n+\n+class ModelBackendAuthenticateTest(TestCase):\n+    def test_authenticate_with_none_username(self):\n+        backend = ModelBackend()\n+        UserModel = get_user_model()\n+\n+        with patch.object(UserModel._default_manager, 'get_by_natural_key', side_effect=UserModel.DoesNotExist) as mock_get_by_natural_key:\n+            # Call authenticate with username=None and password=None\n+            result = backend.authenticate(request=None, username=None, password=None)\n+\n+            # Assert that get_by_natural_key is NOT called, which is the correct behavior\n+            mock_get_by_natural_key.assert_not_called()\n+\n+            # The authenticate method should not perform any database queries when username is None.\n+            self.assertIsNone(result)\n"], "arch": "x86_64", "base_commit": "e065b293878b1e3ea56655aa9d33e87576cd77ff", "test_directives": ["test_coverup_django__django-11451"], "coverage_files": ["django/contrib/auth/backends.py"], "env_name": "testbed", "run_id": "assertflip", "patch_id": "pred_post__AssertFlip", "timeout": 1800, "rm_image": false, "force_rebuild": false, "exec_mode": "unit_test", "reproduction_script_name": null, "compute_coverage": true, "install": {"python": "3.6", "packages": "requirements.txt", "install": "python -m pip install -e .", "eval_commands": ["sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen && locale-gen", "export LANG=en_US.UTF-8", "export LANGUAGE=en_US:en", "export LC_ALL=en_US.UTF-8"]}, "cache_level": "instance", "test_command": "python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/contrib/auth/backends\\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-11451", "req_install_commands": ["conda create -n testbed python=3.6 -y", "cat <<'EOF_59812759871' > $HOME/requirements.txt\nasgiref ~= 3.2\nargon2-cffi >= 16.1.0\nbcrypt\ndocutils\ngeoip2\njinja2 >= 2.9.2\nnumpy\nPillow != 5.4.0\npylibmc; sys.platform != 'win32'\npython-memcached >= 1.59\npytz\npywatchman; sys.platform != 'win32'\nPyYAML\nselenium\nsqlparse >= 0.2.2\ntblib >= 1.5.0\n\nEOF_59812759871", "conda activate testbed && python -m pip install -r $HOME/requirements.txt", "rm $HOME/requirements.txt"]}