{"instance_id": "django__django-11299", "repo": "django/django", "version": "3.0", "environment_setup_commit": "419a78300f7cd27611196e1e464d50fd0385ff27", "patch_list": ["diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1338,7 +1338,7 @@ def _add_q(self, q_object, used_aliases, branch_negated=False,\n             if isinstance(child, Node):\n                 child_clause, needed_inner = self._add_q(\n                     child, used_aliases, branch_negated,\n-                    current_negated, allow_joins, split_subq)\n+                    current_negated, allow_joins, split_subq, simple_col)\n                 joinpromoter.add_votes(needed_inner)\n             else:\n                 child_clause, needed_inner = self.build_filter(\n", "diff --git a/dev/null b/tests/test_coverup_django__django-11299.py\nnew file mode 100644\nindex e69de29..39fe783 100644\n--- /dev/null\n+++ b/tests/test_coverup_django__django-11299.py\n@@ -0,0 +1,52 @@\n+from django.db import models\n+from django.test import SimpleTestCase, override_settings\n+from django.db import connection\n+from django.db.models import Q\n+from django.apps import apps as global_apps\n+from django.core.management import call_command\n+from io import StringIO\n+\n+@override_settings(INSTALLED_APPS=['django.contrib.contenttypes'])\n+class CheckConstraintSQLTest(SimpleTestCase):\n+    databases = {'default'}\n+\n+    def test_check_constraint_sql_generation(self):\n+        class TestConstraint(models.Model):\n+            field_1 = models.IntegerField(blank=True, null=True)\n+            flag = models.BooleanField(blank=False, null=False)\n+\n+            class Meta:\n+                app_label = 'test_app'\n+                constraints = [\n+                    models.CheckConstraint(\n+                        check=Q(flag__exact=True, field_1__isnull=False) |\n+                              Q(flag__exact=False),\n+                        name='field_1_has_value_if_flag_set',\n+                    ),\n+                ]\n+\n+        # Register the model to the global app registry\n+        if 'test_app' in global_apps.all_models:\n+            del global_apps.all_models['test_app']\n+        global_apps.register_model('test_app', TestConstraint)\n+\n+        # Capture the output of the migration\n+        out = StringIO()\n+        with connection.schema_editor() as schema_editor:\n+            # Create the table directly using schema_editor to avoid migration issues\n+            schema_editor.create_model(TestConstraint)\n+            # Capture the SQL for the constraint\n+            constraint = TestConstraint._meta.constraints[0]\n+            sql = constraint.create_sql(TestConstraint, schema_editor)\n+\n+        # Convert the SQL statement to a string for assertion\n+        sql_str = str(sql)\n+\n+        # The SQL should not include fully qualified field names\n+        # This assertion is expected to fail if the bug is present\n+        self.assertNotIn('\"test_app_testconstraint\".\"field_1\"', sql_str)\n+\n+    def tearDown(self):\n+        # Clean up the model registration to avoid conflicts in subsequent tests\n+        if 'test_app' in global_apps.all_models:\n+            del global_apps.all_models['test_app']\n"], "arch": "x86_64", "base_commit": "6866c91b638de5368c18713fa851bfe56253ea55", "test_directives": ["test_coverup_django__django-11299"], "coverage_files": ["django/db/models/sql/query.py"], "env_name": "testbed", "run_id": "assertflip", "patch_id": "pred_post__AssertFlip", "timeout": 1800, "rm_image": false, "force_rebuild": false, "exec_mode": "unit_test", "reproduction_script_name": null, "compute_coverage": true, "install": {"python": "3.6", "packages": "requirements.txt", "install": "python -m pip install -e .", "eval_commands": ["sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen && locale-gen", "export LANG=en_US.UTF-8", "export LANGUAGE=en_US:en", "export LC_ALL=en_US.UTF-8"]}, "cache_level": "instance", "test_command": "python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/db/models/sql/query\\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-11299", "req_install_commands": ["conda create -n testbed python=3.6 -y", "cat <<'EOF_59812759871' > $HOME/requirements.txt\nasgiref ~= 3.2\nargon2-cffi >= 16.1.0\nbcrypt\ndocutils\ngeoip2\njinja2 >= 2.9.2\nnumpy\nPillow != 5.4.0\npylibmc; sys.platform != 'win32'\npython-memcached >= 1.59\npytz\npywatchman; sys.platform != 'win32'\nPyYAML\nselenium\nsqlparse >= 0.2.2\ntblib >= 1.5.0\n\nEOF_59812759871", "conda activate testbed && python -m pip install -r $HOME/requirements.txt", "rm $HOME/requirements.txt"]}