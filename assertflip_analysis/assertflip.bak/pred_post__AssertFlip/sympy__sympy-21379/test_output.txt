+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD 624217179aaf8d094e6ff75b7493ad1ee47599b0
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch master
nothing to commit, working tree clean
+ git show
commit 624217179aaf8d094e6ff75b7493ad1ee47599b0
Merge: 624549a1b0 ee14ba22d5
Author: Oscar Benjamin <oscar.j.benjamin@gmail.com>
Date:   Sat Apr 24 14:58:57 2021 +0100

    Merge pull request #21106 from ks147/DomainMatrix_ones
    
    Added function ones to DomainMatrix,DDM and SDM class

+ git diff 624217179aaf8d094e6ff75b7493ad1ee47599b0
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Requirement already satisfied: mpmath>=0.19 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from sympy==1.9.dev0) (1.3.0)
Installing collected packages: sympy
  Attempting uninstall: sympy
    Found existing installation: sympy 1.9.dev0
    Uninstalling sympy-1.9.dev0:
      Successfully uninstalled sympy-1.9.dev0
  DEPRECATION: Legacy editable install of sympy==1.9.dev0 from file:///testbed (setup.py develop) is deprecated. pip 25.3 will enforce this behaviour change. A possible replacement is to add a pyproject.toml or enable --use-pep517, and use setuptools >= 64. If the resulting installation is not behaving as expected, try using --config-settings editable_mode=compat. Please consult the setuptools documentation for more information. Discussion can be found at https://github.com/pypa/pip/issues/11457
  Running setup.py develop for sympy
Successfully installed sympy
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git apply -v -
Checking patch sympy/core/mod.py...
Applied patch sympy/core/mod.py cleanly.
+ git apply -v -
Checking patch sympy/polys/tests/test_coverup_sympy__sympy-21379.py...
Applied patch sympy/polys/tests/test_coverup_sympy__sympy-21379.py cleanly.
+ PYTHONWARNINGS=ignore::UserWarning,ignore::SyntaxWarning
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(sympy/core/mod\.py)' bin/test -C --verbose sympy/polys/tests/test_coverup_sympy__sympy-21379.p
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(sympy/core/mod\\.py)']
0.25 mod.py(1): from sympy.core.numbers import nan
0.25 mod.py(2): from .function import Function
0.25 mod.py(3): from .kind import NumberKind
0.25 mod.py(6): class Mod(Function):
0.25 mod.py(6): class Mod(Function):
0.25 mod.py(7):     """Represents a modulo operation on symbolic expressions.
0.25 mod.py(35):     kind = NumberKind
0.25 mod.py(37):     @classmethod
0.25 mod.py(38):     def eval(cls, p, q):
0.25 mod.py(227):     def _eval_is_integer(self):
0.25 mod.py(233):     def _eval_is_nonnegative(self):
0.25 mod.py(237):     def _eval_is_nonpositive(self):
0.25 mod.py(241):     def _eval_rewrite_as_floor(self, a, b, **kwargs):
============================= test process starts ==============================
executable:         /opt/miniconda3/envs/testbed/bin/python3  (3.9.23-final-0) [CPython]
architecture:       64-bit
cache:              no
ground types:       python 
numpy:              None
random seed:        94796307
hash randomization: on (PYTHONHASHSEED=4187249952)

sympy/polys/tests/test_coverup_sympy__sympy-21379.py[1] 
test_subs_polynomial_error_with_real_symbols 0.60 mod.py(39):         from sympy.core.add import Add
0.60 mod.py(40):         from sympy.core.mul import Mul
0.60 mod.py(41):         from sympy.core.singleton import S
0.60 mod.py(42):         from sympy.core.exprtools import gcd_terms
0.60 mod.py(43):         from sympy.polys.polyerrors import PolynomialError
0.60 mod.py(44):         from sympy.polys.polytools import gcd
0.60 mod.py(46):         def doit(p, q):
0.60 mod.py(105):         rv = doit(p, q)
0.60 mod.py(51):             if q.is_zero:
0.60 mod.py(53):             if p.is_finite is False or q.is_finite is False or p is nan or q is nan:
0.60 mod.py(55):             if p is S.Zero or p == q or p == -q or (p.is_integer and q == 1):
0.60 mod.py(56):                 return S.Zero
0.60 mod.py(106):         if rv is not None:
0.60 mod.py(107):             return rv
0.62 mod.py(39):         from sympy.core.add import Add
0.62 mod.py(40):         from sympy.core.mul import Mul
0.62 mod.py(41):         from sympy.core.singleton import S
0.62 mod.py(42):         from sympy.core.exprtools import gcd_terms
0.62 mod.py(43):         from sympy.polys.polyerrors import PolynomialError
0.62 mod.py(44):         from sympy.polys.polytools import gcd
0.62 mod.py(46):         def doit(p, q):
0.62 mod.py(105):         rv = doit(p, q)
0.62 mod.py(51):             if q.is_zero:
0.62 mod.py(53):             if p.is_finite is False or q.is_finite is False or p is nan or q is nan:
0.62 mod.py(55):             if p is S.Zero or p == q or p == -q or (p.is_integer and q == 1):
0.62 mod.py(58):             if q.is_Number:
0.62 mod.py(67):             if hasattr(p, '_eval_Mod'):
0.62 mod.py(73):             r = p/q
0.62 mod.py(74):             if r.is_integer:
0.63 mod.py(76):             try:
0.63 mod.py(77):                 d = int(r)
0.63 mod.py(78):             except TypeError:
0.63 mod.py(79):                 pass
0.63 mod.py(89):             d = abs(p)
0.63 mod.py(90):             for _ in range(2):
0.63 mod.py(91):                 d -= abs(q)
0.63 mod.py(92):                 if d.is_negative:
0.63 mod.py(90):             for _ in range(2):
0.63 mod.py(91):                 d -= abs(q)
0.63 mod.py(92):                 if d.is_negative:
0.63 mod.py(90):             for _ in range(2):
0.63 mod.py(106):         if rv is not None:
0.63 mod.py(110):         if isinstance(p, cls):
0.63 mod.py(117):         elif isinstance(-p, cls):
0.63 mod.py(124):         elif isinstance(p, Add):
0.63 mod.py(134):         elif isinstance(p, Mul):
0.63 mod.py(136):             both_l = non_mod_l, mod_l = [], []
0.63 mod.py(137):             for arg in p.args:
0.63 mod.py(138):                 both_l[isinstance(arg, cls)].append(arg)
0.63 mod.py(137):             for arg in p.args:
0.63 mod.py(138):                 both_l[isinstance(arg, cls)].append(arg)
0.63 mod.py(137):             for arg in p.args:
0.63 mod.py(140):             if mod_l and all(inner.args[1] == q for inner in mod_l):
0.63 mod.py(156):             if q.is_Integer and q is not S.One:
0.63 mod.py(165):             p = Mul(*(non_mod_l + mod_l))
0.63 mod.py(170):         try:
0.63 mod.py(171):             G = gcd(p, q)
0.64 mod.py(175):         except PolynomialError:  # issue 21373
0.64 mod.py(176):             G = S.One
0.64 mod.py(177):         pwas, qwas = p, q
0.64 mod.py(181):         if p.is_Add:
0.64 mod.py(196):             cp, p = p.as_coeff_Mul()
0.64 mod.py(197):             cq, q = q.as_coeff_Mul()
0.64 mod.py(198):             ok = False
0.64 mod.py(199):             if not cp.is_Rational or not cq.is_Rational:
0.64 mod.py(205):             if not ok:
0.64 mod.py(206):                 p = cp*p
0.64 mod.py(207):                 q = cq*q
0.64 mod.py(210):         if p.could_extract_minus_sign() and q.could_extract_minus_sign():
0.64 mod.py(214):         rv = doit(p, q)
0.64 mod.py(51):             if q.is_zero:
0.64 mod.py(53):             if p.is_finite is False or q.is_finite is False or p is nan or q is nan:
0.64 mod.py(55):             if p is S.Zero or p == q or p == -q or (p.is_integer and q == 1):
0.64 mod.py(58):             if q.is_Number:
0.64 mod.py(67):             if hasattr(p, '_eval_Mod'):
0.64 mod.py(73):             r = p/q
0.64 mod.py(74):             if r.is_integer:
0.64 mod.py(76):             try:
0.64 mod.py(77):                 d = int(r)
0.64 mod.py(78):             except TypeError:
0.64 mod.py(79):                 pass
0.64 mod.py(89):             d = abs(p)
0.65 mod.py(90):             for _ in range(2):
0.65 mod.py(91):                 d -= abs(q)
0.65 mod.py(92):                 if d.is_negative:
0.65 mod.py(90):             for _ in range(2):
0.65 mod.py(91):                 d -= abs(q)
0.65 mod.py(92):                 if d.is_negative:
0.65 mod.py(90):             for _ in range(2):
0.65 mod.py(215):         if rv is not None:
0.65 mod.py(219):         if G.is_Float and G == 1:
0.65 mod.py(222):         elif G.is_Mul and G.args[0].is_Float and G.args[0] == 1:
0.65 mod.py(225):         return G*cls(p, q, evaluate=(p, q) != (pwas, qwas))
0.65 mod.py(228):         from sympy.core.logic import fuzzy_and, fuzzy_not
0.65 mod.py(229):         p, q = self.args
0.65 mod.py(230):         if fuzzy_and([p.is_integer, q.is_integer, fuzzy_not(q.is_zero)]):
0.65 mod.py(234):         if self.args[1].is_positive:
0.65 mod.py(235):             return True
0.65 mod.py(238):         if self.args[1].is_negative:
ok                             [OK]


================== tests finished: 1 passed, in 0.19 seconds ===================
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(sympy/core/mod\\.py)']
0.35 mod.py(1): from sympy.core.numbers import nan
0.35 mod.py(2): from .function import Function
0.35 mod.py(3): from .kind import NumberKind
0.35 mod.py(6): class Mod(Function):
0.35 mod.py(6): class Mod(Function):
0.35 mod.py(7):     """Represents a modulo operation on symbolic expressions.
0.35 mod.py(35):     kind = NumberKind
0.35 mod.py(37):     @classmethod
0.35 mod.py(38):     def eval(cls, p, q):
0.35 mod.py(227):     def _eval_is_integer(self):
0.35 mod.py(233):     def _eval_is_nonnegative(self):
0.35 mod.py(237):     def _eval_is_nonpositive(self):
0.35 mod.py(241):     def _eval_rewrite_as_floor(self, a, b, **kwargs):
+ cat coverage.cover
{"/testbed/sympy/core/mod.py": {"1": 1, "2": 1, "3": 1, "6": 2, "35": 1, "37": 1, "38": 1, "227": 1, "233": 1, "237": 1, "241": 1, "39": 2, "40": 2, "41": 2, "42": 2, "43": 2, "44": 2, "46": 2, "105": 2, "106": 2, "107": 1, "110": 1, "111": 0, "112": 0, "113": 0, "114": 0, "116": 0, "117": 1, "118": 0, "119": 0, "120": 0, "121": 0, "123": 0, "124": 1, "126": 0, "127": 0, "128": 0, "130": 0, "131": 0, "132": 0, "134": 1, "136": 1, "137": 3, "138": 2, "140": 1, "142": 0, "143": 0, "144": 0, "145": 0, "146": 0, "147": 0, "149": 0, "150": 0, "151": 0, "152": 0, "153": 0, "154": 0, "156": 1, "157": 0, "158": 0, "159": 0, "160": 0, "162": 0, "163": 0, "165": 1, "170": 1, "171": 1, "172": 0, "173": 0, "174": 0, "175": 1, "176": 1, "177": 1, "181": 1, "182": 0, "183": 0, "184": 0, "185": 0, "186": 0, "188": 0, "189": 0, "190": 0, "196": 1, "197": 1, "198": 1, "199": 1, "200": 0, "201": 0, "202": 0, "203": 0, "204": 0, "205": 1, "206": 1, "207": 1, "210": 1, "211": 0, "214": 1, "215": 1, "216": 0, "219": 1, "220": 0, "221": 0, "222": 1, "223": 0, "224": 0, "225": 1, "51": 3, "52": 0, "53": 3, "54": 0, "55": 3, "56": 1, "58": 2, "59": 0, "60": 0, "61": 0, "62": 0, "63": 0, "64": 0, "65": 0, "67": 2, "68": 0, "69": 0, "70": 0, "73": 2, "74": 2, "75": 0, "76": 2, "77": 2, "78": 2, "79": 2, "81": 0, "82": 0, "83": 0, "84": 0, "85": 0, "89": 2, "90": 6, "91": 4, "92": 4, "93": 0, "94": 0, "95": 0, "96": 0, "97": 0, "98": 0, "99": 0, "100": 0, "101": 0, "102": 0, "103": 0, "228": 1, "229": 1, "230": 1, "231": 0, "234": 1, "235": 1, "238": 1, "239": 0, "242": 0, "243": 0}}
{"/testbed/sympy/core/mod.py": {"1": 1, "2": 1, "3": 1, "6": 2, "35": 1, "37": 1, "38": 1, "227": 1, "233": 1, "237": 1, "241": 1, "39": 0, "40": 0, "41": 0, "42": 0, "43": 0, "44": 0, "46": 0, "105": 0, "106": 0, "107": 0, "110": 0, "111": 0, "112": 0, "113": 0, "114": 0, "116": 0, "117": 0, "118": 0, "119": 0, "120": 0, "121": 0, "123": 0, "124": 0, "126": 0, "127": 0, "128": 0, "130": 0, "131": 0, "132": 0, "134": 0, "136": 0, "137": 0, "138": 0, "140": 0, "142": 0, "143": 0, "144": 0, "145": 0, "146": 0, "147": 0, "149": 0, "150": 0, "151": 0, "152": 0, "153": 0, "154": 0, "156": 0, "157": 0, "158": 0, "159": 0, "160": 0, "162": 0, "163": 0, "165": 0, "170": 0, "171": 0, "172": 0, "173": 0, "174": 0, "175": 0, "176": 0, "177": 0, "181": 0, "182": 0, "183": 0, "184": 0, "185": 0, "186": 0, "188": 0, "189": 0, "190": 0, "196": 0, "197": 0, "198": 0, "199": 0, "200": 0, "201": 0, "202": 0, "203": 0, "204": 0, "205": 0, "206": 0, "207": 0, "210": 0, "211": 0, "214": 0, "215": 0, "216": 0, "219": 0, "220": 0, "221": 0, "222": 0, "223": 0, "224": 0, "225": 0, "51": 0, "52": 0, "53": 0, "54": 0, "55": 0, "56": 0, "58": 0, "59": 0, "60": 0, "61": 0, "62": 0, "63": 0, "64": 0, "65": 0, "67": 0, "68": 0, "69": 0, "70": 0, "73": 0, "74": 0, "75": 0, "76": 0, "77": 0, "78": 0, "79": 0, "81": 0, "82": 0, "83": 0, "84": 0, "85": 0, "89": 0, "90": 0, "91": 0, "92": 0, "93": 0, "94": 0, "95": 0, "96": 0, "97": 0, "98": 0, "99": 0, "100": 0, "101": 0, "102": 0, "103": 0, "228": 0, "229": 0, "230": 0, "231": 0, "234": 0, "235": 0, "238": 0, "239": 0, "242": 0, "243": 0}}
+ git checkout 624217179aaf8d094e6ff75b7493ad1ee47599b0
Note: switching to '624217179aaf8d094e6ff75b7493ad1ee47599b0'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at 624217179a Merge pull request #21106 from ks147/DomainMatrix_ones
M	sympy/core/mod.py
+ git apply /root/pre_state.patch
error: unrecognized input
