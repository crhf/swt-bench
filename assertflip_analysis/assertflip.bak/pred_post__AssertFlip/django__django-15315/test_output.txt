+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD 652c68ffeebd510a6f59e1b56b3e007d07683ad8
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
nothing to commit, working tree clean
+ git show
commit 652c68ffeebd510a6f59e1b56b3e007d07683ad8
Author: Adam Johnson <me@adamj.eu>
Date:   Thu Jan 13 19:46:18 2022 +0000

    Clarified how contrib.auth picks a password hasher for verification.

diff --git a/docs/topics/auth/passwords.txt b/docs/topics/auth/passwords.txt
index 24ee2d5360..33a57a8be5 100644
--- a/docs/topics/auth/passwords.txt
+++ b/docs/topics/auth/passwords.txt
@@ -48,12 +48,16 @@ you're not sure, you probably don't.  If you do, please read on:
 
 Django chooses the algorithm to use by consulting the
 :setting:`PASSWORD_HASHERS` setting. This is a list of hashing algorithm
-classes that this Django installation supports. The first entry in this list
-(that is, ``settings.PASSWORD_HASHERS[0]``) will be used to store passwords,
-and all the other entries are valid hashers that can be used to check existing
-passwords.  This means that if you want to use a different algorithm, you'll
-need to modify :setting:`PASSWORD_HASHERS` to list your preferred algorithm
-first in the list.
+classes that this Django installation supports.
+
+For storing passwords, Django will use the first hasher in
+:setting:`PASSWORD_HASHERS`. To store new passwords with a different algorithm,
+put your preferred algorithm first in :setting:`PASSWORD_HASHERS`.
+
+For verifying passwords, Django will find the hasher in the list that matches
+the algorithm name in the stored password. If a stored password names an
+algorithm not found in :setting:`PASSWORD_HASHERS`, trying to verify it will
+raise ``ValueError``.
 
 The default for :setting:`PASSWORD_HASHERS` is::
 
+ git diff 652c68ffeebd510a6f59e1b56b3e007d07683ad8
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Checking if build backend supports build_editable: started
  Checking if build backend supports build_editable: finished with status 'done'
  Getting requirements to build editable: started
  Getting requirements to build editable: finished with status 'done'
  Preparing editable metadata (pyproject.toml): started
  Preparing editable metadata (pyproject.toml): finished with status 'done'
Requirement already satisfied: asgiref>=3.4.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Django==4.1.dev20220113194618) (3.9.1)
Requirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Django==4.1.dev20220113194618) (0.5.3)
Requirement already satisfied: typing_extensions>=4 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from asgiref>=3.4.1->Django==4.1.dev20220113194618) (4.14.1)
Building wheels for collected packages: Django
  Building editable for Django (pyproject.toml): started
  Building editable for Django (pyproject.toml): finished with status 'done'
  Created wheel for Django: filename=django-4.1.dev20220113194618-0.editable-py3-none-any.whl size=26964 sha256=bab7a9acc80c9da67cf9eef50a4c30033b640c7a5a1101aa5934f84ef4090502
  Stored in directory: /tmp/pip-ephem-wheel-cache-xcpafm7s/wheels/7d/66/67/70d1ee2124ccf21d601c352e25cdca10f611f7c8b3f9ffb9e4
Successfully built Django
Installing collected packages: Django
  Attempting uninstall: Django
    Found existing installation: Django 4.1.dev20220113194618
    Uninstalling Django-4.1.dev20220113194618:
      Successfully uninstalled Django-4.1.dev20220113194618
Successfully installed Django-4.1.dev20220113194618
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git apply -v -
Checking patch django/db/models/fields/__init__.py...
Applied patch django/db/models/fields/__init__.py cleanly.
+ git apply -v -
Checking patch tests/test_coverup_django__django-15315.py...
Applied patch tests/test_coverup_django__django-15315.py cleanly.
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(django/db/models/fields/__init__\.py)' ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 test_coverup_django__django-15315
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(django/db/models/fields/__init__\\.py)']
0.16 __init__.py(1): import collections.abc
0.16 __init__.py(2): import copy
0.16 __init__.py(3): import datetime
0.16 __init__.py(4): import decimal
0.16 __init__.py(5): import math
0.16 __init__.py(6): import operator
0.16 __init__.py(7): import uuid
0.16 __init__.py(8): import warnings
0.16 __init__.py(9): from base64 import b64decode, b64encode
0.16 __init__.py(10): from functools import partialmethod, total_ordering
0.16 __init__.py(12): from django import forms
0.22 __init__.py(13): from django.apps import apps
0.22 __init__.py(14): from django.conf import settings
0.22 __init__.py(15): from django.core import checks, exceptions, validators
0.24 __init__.py(16): from django.db import connection, connections, router
0.24 __init__.py(17): from django.db.models.constants import LOOKUP_SEP
0.24 __init__.py(18): from django.db.models.query_utils import DeferredAttribute, RegisterLookupMixin
0.24 __init__.py(19): from django.utils import timezone
0.24 __init__.py(20): from django.utils.datastructures import DictWrapper
0.24 __init__.py(21): from django.utils.dateparse import (
0.24 __init__.py(24): from django.utils.duration import duration_microseconds, duration_string
0.24 __init__.py(25): from django.utils.functional import Promise, cached_property
0.24 __init__.py(26): from django.utils.ipv6 import clean_ipv6_address
0.24 __init__.py(27): from django.utils.itercompat import is_iterable
0.24 __init__.py(28): from django.utils.text import capfirst
0.24 __init__.py(29): from django.utils.translation import gettext_lazy as _
0.24 __init__.py(31): __all__ = [
0.24 __init__.py(43): class Empty:
0.24 __init__.py(43): class Empty:
0.24 __init__.py(44):     pass
0.24 __init__.py(47): class NOT_PROVIDED:
0.24 __init__.py(47): class NOT_PROVIDED:
0.24 __init__.py(48):     pass
0.24 __init__.py(53): BLANK_CHOICE_DASH = [("", "---------")]
0.24 __init__.py(56): def _load_field(app_label, model_name, field_name):
0.24 __init__.py(75): def _empty(of_cls):
0.24 __init__.py(81): def return_None():
0.24 __init__.py(85): @total_ordering
0.24 __init__.py(86): class Field(RegisterLookupMixin):
0.24 __init__.py(85): @total_ordering
0.24 __init__.py(87):     """Base class for all field types"""
0.24 __init__.py(91):     empty_strings_allowed = True
0.24 __init__.py(92):     empty_values = list(validators.EMPTY_VALUES)
0.24 __init__.py(97):     creation_counter = 0
0.24 __init__.py(98):     auto_creation_counter = -1
0.24 __init__.py(99):     default_validators = []  # Default set of validators
0.24 __init__.py(101):         'invalid_choice': _('Value %(value)r is not a valid choice.'),
0.24 __init__.py(102):         'null': _('This field cannot be null.'),
0.24 __init__.py(103):         'blank': _('This field cannot be blank.'),
0.24 __init__.py(104):         'unique': _('%(model_name)s with this %(field_label)s '
0.24 __init__.py(108):         'unique_for_date': _("%(field_label)s must be unique for "
0.24 __init__.py(100):     default_error_messages = {
0.24 __init__.py(111):     system_check_deprecated_details = None
0.24 __init__.py(112):     system_check_removed_details = None
0.24 __init__.py(115):     hidden = False
0.24 __init__.py(117):     many_to_many = None
0.24 __init__.py(118):     many_to_one = None
0.24 __init__.py(119):     one_to_many = None
0.24 __init__.py(120):     one_to_one = None
0.24 __init__.py(121):     related_model = None
0.24 __init__.py(123):     descriptor_class = DeferredAttribute
0.24 __init__.py(126):     def _description(self):
0.24 __init__.py(130):     description = property(_description)
0.24 __init__.py(132):     def __init__(self, verbose_name=None, name=None, primary_key=False,
0.24 __init__.py(133):                  max_length=None, unique=False, blank=False, null=False,
0.24 __init__.py(134):                  db_index=False, rel=None, default=NOT_PROVIDED, editable=True,
0.24 __init__.py(135):                  serialize=True, unique_for_date=None, unique_for_month=None,
0.24 __init__.py(136):                  unique_for_year=None, choices=None, help_text='', db_column=None,
0.24 __init__.py(137):                  db_tablespace=None, auto_created=False, validators=(),
0.24 __init__.py(138):                  error_messages=None):
0.24 __init__.py(132):     def __init__(self, verbose_name=None, name=None, primary_key=False,
0.24 __init__.py(179):     def __str__(self):
0.24 __init__.py(189):     def __repr__(self):
0.24 __init__.py(197):     def check(self, **kwargs):
0.24 __init__.py(208):     def _check_field_name(self):
0.24 __init__.py(240):     @classmethod
0.24 __init__.py(241):     def _choices_is_value(cls, value):
0.24 __init__.py(244):     def _check_choices(self):
0.24 __init__.py(308):     def _check_db_index(self):
0.24 __init__.py(320):     def _check_null_allowed_for_primary_keys(self):
0.24 __init__.py(338):     def _check_backend_specific_checks(self, databases=None, **kwargs):
0.24 __init__.py(348):     def _check_validators(self):
0.24 __init__.py(367):     def _check_deprecation_details(self):
0.24 __init__.py(395):     def get_col(self, alias, output_field=None):
0.24 __init__.py(404):     @cached_property
0.24 __init__.py(405):     def cached_col(self):
0.24 __init__.py(409):     def select_format(self, compiler, sql, params):
0.24 __init__.py(417):     def deconstruct(self):
0.24 __init__.py(508):     def clone(self):
0.24 __init__.py(516):     def __eq__(self, other):
0.24 __init__.py(525):     def __lt__(self, other):
0.24 __init__.py(544):     def __hash__(self):
0.24 __init__.py(547):     def __deepcopy__(self, memodict):
0.24 __init__.py(558):     def __copy__(self):
0.24 __init__.py(566):     def __reduce__(self):
0.24 __init__.py(586):     def get_pk_value_on_save(self, instance):
0.24 __init__.py(597):     def to_python(self, value):
0.24 __init__.py(605):     @cached_property
0.24 __init__.py(606):     def validators(self):
0.24 __init__.py(613):     def run_validators(self, value):
0.24 __init__.py(629):     def validate(self, value, model_instance):
0.24 __init__.py(660):     def clean(self, value, model_instance):
0.24 __init__.py(671):     def db_type_parameters(self, connection):
0.24 __init__.py(674):     def db_check(self, connection):
0.24 __init__.py(686):     def db_type(self, connection):
0.24 __init__.py(712):     def rel_db_type(self, connection):
0.24 __init__.py(720):     def cast_db_type(self, connection):
0.24 __init__.py(727):     def db_parameters(self, connection):
0.24 __init__.py(740):     def db_type_suffix(self, connection):
0.24 __init__.py(743):     def get_db_converters(self, connection):
0.24 __init__.py(748):     @property
0.24 __init__.py(749):     def unique(self):
0.24 __init__.py(752):     @property
0.24 __init__.py(753):     def db_tablespace(self):
0.24 __init__.py(756):     @property
0.24 __init__.py(757):     def db_returning(self):
0.24 __init__.py(764):     def set_attributes_from_name(self, name):
0.24 __init__.py(771):     def contribute_to_class(self, cls, name, private_only=False):
0.24 __init__.py(795):     def get_filter_kwargs_for_object(self, obj):
0.24 __init__.py(802):     def get_attname(self):
0.24 __init__.py(805):     def get_attname_column(self):
0.24 __init__.py(810):     def get_internal_type(self):
0.24 __init__.py(813):     def pre_save(self, model_instance, add):
0.24 __init__.py(817):     def get_prep_value(self, value):
0.24 __init__.py(823):     def get_db_prep_value(self, value, connection, prepared=False):
0.24 __init__.py(833):     def get_db_prep_save(self, value, connection):
0.24 __init__.py(837):     def has_default(self):
0.24 __init__.py(841):     def get_default(self):
0.24 __init__.py(845):     @cached_property
0.24 __init__.py(846):     def _get_default(self):
0.24 __init__.py(856):     def get_choices(self, include_blank=True, blank_choice=BLANK_CHOICE_DASH, limit_choices_to=None, ordering=()):
0.24 __init__.py(882):     def value_to_string(self, obj):
0.24 __init__.py(889):     def _get_flatchoices(self):
0.24 __init__.py(900):     flatchoices = property(_get_flatchoices)
0.24 __init__.py(902):     def save_form_data(self, instance, data):
0.24 __init__.py(905):     def formfield(self, form_class=None, choices_form_class=None, **kwargs):
0.24 __init__.py(943):     def value_from_object(self, obj):
0.24 __init__.py(948): class BooleanField(Field):
0.24 __init__.py(948): class BooleanField(Field):
0.24 __init__.py(949):     empty_strings_allowed = False
0.24 __init__.py(951):         'invalid': _('“%(value)s” value must be either True or False.'),
0.24 __init__.py(952):         'invalid_nullable': _('“%(value)s” value must be either True, False, or None.'),
0.24 __init__.py(950):     default_error_messages = {
0.24 __init__.py(954):     description = _("Boolean (Either True or False)")
0.24 __init__.py(956):     def get_internal_type(self):
0.24 __init__.py(959):     def to_python(self, value):
0.24 __init__.py(975):     def get_prep_value(self, value):
0.24 __init__.py(981):     def formfield(self, **kwargs):
0.24 __init__.py(993):     def select_format(self, compiler, sql, params):
0.24 __init__.py(1003): class CharField(Field):
0.24 __init__.py(1003): class CharField(Field):
0.24 __init__.py(1004):     description = _("String (up to %(max_length)s)")
0.24 __init__.py(1006):     def __init__(self, *args, db_collation=None, **kwargs):
0.24 __init__.py(1012):     def check(self, **kwargs):
0.24 __init__.py(1020):     def _check_max_length_attribute(self, **kwargs):
0.24 __init__.py(1041):     def _check_db_collation(self, databases):
0.24 __init__.py(1062):     def cast_db_type(self, connection):
0.24 __init__.py(1067):     def get_internal_type(self):
0.24 __init__.py(1070):     def to_python(self, value):
0.24 __init__.py(1075):     def get_prep_value(self, value):
0.24 __init__.py(1079):     def formfield(self, **kwargs):
0.24 __init__.py(1090):     def deconstruct(self):
0.24 __init__.py(1097): class CommaSeparatedIntegerField(CharField):
0.24 __init__.py(1097): class CommaSeparatedIntegerField(CharField):
0.24 __init__.py(1098):     default_validators = [validators.validate_comma_separated_integer_list]
0.24 __init__.py(1099):     description = _("Comma-separated integers")
0.24 __init__.py(1102):             'CommaSeparatedIntegerField is removed except for support in '
0.24 __init__.py(1106):             'Use CharField(validators=[validate_comma_separated_integer_list]) '
0.24 __init__.py(1109):         'id': 'fields.E901',
0.24 __init__.py(1100):     system_check_removed_details = {
0.24 __init__.py(1113): def _to_naive(value):
0.24 __init__.py(1119): def _get_naive_now():
0.24 __init__.py(1123): class DateTimeCheckMixin:
0.24 __init__.py(1123): class DateTimeCheckMixin:
0.24 __init__.py(1125):     def check(self, **kwargs):
0.24 __init__.py(1132):     def _check_mutually_exclusive_options(self):
0.24 __init__.py(1151):     def _check_fix_default_value(self):
0.24 __init__.py(1156):     def _check_if_value_fixed(self, value, now=None):
0.24 __init__.py(1191): class DateField(DateTimeCheckMixin, Field):
0.24 __init__.py(1191): class DateField(DateTimeCheckMixin, Field):
0.24 __init__.py(1192):     empty_strings_allowed = False
0.24 __init__.py(1194):         'invalid': _('“%(value)s” value has an invalid date format. It must be '
0.24 __init__.py(1196):         'invalid_date': _('“%(value)s” value has the correct format (YYYY-MM-DD) '
0.24 __init__.py(1193):     default_error_messages = {
0.24 __init__.py(1199):     description = _("Date (without time)")
0.24 __init__.py(1201):     def __init__(self, verbose_name=None, name=None, auto_now=False,
0.24 __init__.py(1209):     def _check_fix_default_value(self):
0.24 __init__.py(1228):     def deconstruct(self):
0.24 __init__.py(1239):     def get_internal_type(self):
0.24 __init__.py(1242):     def to_python(self, value):
0.24 __init__.py(1272):     def pre_save(self, model_instance, add):
0.24 __init__.py(1280):     def contribute_to_class(self, cls, name, **kwargs):
0.24 __init__.py(1292):     def get_prep_value(self, value):
0.24 __init__.py(1296):     def get_db_prep_value(self, value, connection, prepared=False):
0.24 __init__.py(1302):     def value_to_string(self, obj):
0.24 __init__.py(1306):     def formfield(self, **kwargs):
0.24 __init__.py(1313): class DateTimeField(DateField):
0.24 __init__.py(1313): class DateTimeField(DateField):
0.24 __init__.py(1314):     empty_strings_allowed = False
0.24 __init__.py(1316):         'invalid': _('“%(value)s” value has an invalid format. It must be in '
0.24 __init__.py(1318):         'invalid_date': _("“%(value)s” value has the correct format "
0.24 __init__.py(1320):         'invalid_datetime': _('“%(value)s” value has the correct format '
0.24 __init__.py(1315):     default_error_messages = {
0.24 __init__.py(1324):     description = _("Date (with time)")
0.24 __init__.py(1328):     def _check_fix_default_value(self):
0.24 __init__.py(1342):     def get_internal_type(self):
0.24 __init__.py(1345):     def to_python(self, value):
0.24 __init__.py(1393):     def pre_save(self, model_instance, add):
0.24 __init__.py(1404):     def get_prep_value(self, value):
0.24 __init__.py(1423):     def get_db_prep_value(self, value, connection, prepared=False):
0.24 __init__.py(1429):     def value_to_string(self, obj):
0.24 __init__.py(1433):     def formfield(self, **kwargs):
0.24 __init__.py(1440): class DecimalField(Field):
0.24 __init__.py(1440): class DecimalField(Field):
0.24 __init__.py(1441):     empty_strings_allowed = False
0.24 __init__.py(1443):         'invalid': _('“%(value)s” value must be a decimal number.'),
0.24 __init__.py(1442):     default_error_messages = {
0.24 __init__.py(1445):     description = _("Decimal number")
0.24 __init__.py(1447):     def __init__(self, verbose_name=None, name=None, max_digits=None,
0.24 __init__.py(1452):     def check(self, **kwargs):
0.24 __init__.py(1465):     def _check_decimal_places(self):
0.24 __init__.py(1489):     def _check_max_digits(self):
0.24 __init__.py(1513):     def _check_decimal_places_and_max_digits(self, **kwargs):
0.24 __init__.py(1524):     @cached_property
0.24 __init__.py(1525):     def validators(self):
0.24 __init__.py(1530):     @cached_property
0.24 __init__.py(1531):     def context(self):
0.24 __init__.py(1534):     def deconstruct(self):
0.24 __init__.py(1542):     def get_internal_type(self):
0.24 __init__.py(1545):     def to_python(self, value):
0.24 __init__.py(1565):     def get_db_prep_save(self, value, connection):
0.24 __init__.py(1568):     def get_prep_value(self, value):
0.24 __init__.py(1572):     def formfield(self, **kwargs):
0.24 __init__.py(1581): class DurationField(Field):
0.24 __init__.py(1581): class DurationField(Field):
0.24 __init__.py(1582):     """
0.24 __init__.py(1588):     empty_strings_allowed = False
0.24 __init__.py(1590):         'invalid': _('“%(value)s” value has an invalid format. It must be in '
0.24 __init__.py(1589):     default_error_messages = {
0.24 __init__.py(1593):     description = _("Duration")
0.24 __init__.py(1595):     def get_internal_type(self):
0.24 __init__.py(1598):     def to_python(self, value):
0.24 __init__.py(1617):     def get_db_prep_value(self, value, connection, prepared=False):
0.24 __init__.py(1624):     def get_db_converters(self, connection):
0.24 __init__.py(1630):     def value_to_string(self, obj):
0.24 __init__.py(1634):     def formfield(self, **kwargs):
0.24 __init__.py(1641): class EmailField(CharField):
0.24 __init__.py(1641): class EmailField(CharField):
0.24 __init__.py(1642):     default_validators = [validators.validate_email]
0.24 __init__.py(1643):     description = _("Email address")
0.24 __init__.py(1645):     def __init__(self, *args, **kwargs):
0.24 __init__.py(1650):     def deconstruct(self):
0.24 __init__.py(1656):     def formfield(self, **kwargs):
0.24 __init__.py(1665): class FilePathField(Field):
0.24 __init__.py(1665): class FilePathField(Field):
0.24 __init__.py(1666):     description = _("File path")
0.24 __init__.py(1668):     def __init__(self, verbose_name=None, name=None, path='', match=None,
0.24 __init__.py(1675):     def check(self, **kwargs):
0.24 __init__.py(1681):     def _check_allowing_files_or_folders(self, **kwargs):
0.24 __init__.py(1692):     def deconstruct(self):
0.24 __init__.py(1708):     def get_prep_value(self, value):
0.24 __init__.py(1714):     def formfield(self, **kwargs):
0.24 __init__.py(1725):     def get_internal_type(self):
0.24 __init__.py(1729): class FloatField(Field):
0.24 __init__.py(1729): class FloatField(Field):
0.24 __init__.py(1730):     empty_strings_allowed = False
0.24 __init__.py(1732):         'invalid': _('“%(value)s” value must be a float.'),
0.24 __init__.py(1731):     default_error_messages = {
0.24 __init__.py(1734):     description = _("Floating point number")
0.24 __init__.py(1736):     def get_prep_value(self, value):
0.24 __init__.py(1747):     def get_internal_type(self):
0.24 __init__.py(1750):     def to_python(self, value):
0.24 __init__.py(1762):     def formfield(self, **kwargs):
0.24 __init__.py(1769): class IntegerField(Field):
0.24 __init__.py(1769): class IntegerField(Field):
0.24 __init__.py(1770):     empty_strings_allowed = False
0.24 __init__.py(1772):         'invalid': _('“%(value)s” value must be an integer.'),
0.24 __init__.py(1771):     default_error_messages = {
0.24 __init__.py(1774):     description = _("Integer")
0.24 __init__.py(1776):     def check(self, **kwargs):
0.24 __init__.py(1782):     def _check_max_length_warning(self):
0.24 __init__.py(1794):     @cached_property
0.24 __init__.py(1795):     def validators(self):
0.24 __init__.py(1823):     def get_prep_value(self, value):
0.24 __init__.py(1834):     def get_internal_type(self):
0.24 __init__.py(1837):     def to_python(self, value):
0.24 __init__.py(1849):     def formfield(self, **kwargs):
0.24 __init__.py(1856): class BigIntegerField(IntegerField):
0.24 __init__.py(1856): class BigIntegerField(IntegerField):
0.24 __init__.py(1857):     description = _("Big (8 byte) integer")
0.24 __init__.py(1858):     MAX_BIGINT = 9223372036854775807
0.24 __init__.py(1860):     def get_internal_type(self):
0.24 __init__.py(1863):     def formfield(self, **kwargs):
0.24 __init__.py(1871): class SmallIntegerField(IntegerField):
0.24 __init__.py(1871): class SmallIntegerField(IntegerField):
0.24 __init__.py(1872):     description = _('Small integer')
0.24 __init__.py(1874):     def get_internal_type(self):
0.24 __init__.py(1878): class IPAddressField(Field):
0.24 __init__.py(1878): class IPAddressField(Field):
0.24 __init__.py(1879):     empty_strings_allowed = False
0.24 __init__.py(1880):     description = _("IPv4 address")
0.24 __init__.py(1883):             'IPAddressField has been removed except for support in '
0.24 __init__.py(1886):         'hint': 'Use GenericIPAddressField instead.',
0.24 __init__.py(1887):         'id': 'fields.E900',
0.24 __init__.py(1881):     system_check_removed_details = {
0.24 __init__.py(1890):     def __init__(self, *args, **kwargs):
0.24 __init__.py(1894):     def deconstruct(self):
0.24 __init__.py(1899):     def get_prep_value(self, value):
0.24 __init__.py(1905):     def get_internal_type(self):
0.24 __init__.py(1909): class GenericIPAddressField(Field):
0.24 __init__.py(1909): class GenericIPAddressField(Field):
0.24 __init__.py(1910):     empty_strings_allowed = False
0.24 __init__.py(1911):     description = _("IP address")
0.24 __init__.py(1912):     default_error_messages = {}
0.24 __init__.py(1914):     def __init__(self, verbose_name=None, name=None, protocol='both',
0.24 __init__.py(1924):     def check(self, **kwargs):
0.24 __init__.py(1930):     def _check_blank_and_null_values(self, **kwargs):
0.24 __init__.py(1942):     def deconstruct(self):
0.24 __init__.py(1952):     def get_internal_type(self):
0.24 __init__.py(1955):     def to_python(self, value):
0.24 __init__.py(1965):     def get_db_prep_value(self, value, connection, prepared=False):
0.24 __init__.py(1970):     def get_prep_value(self, value):
0.24 __init__.py(1981):     def formfield(self, **kwargs):
0.24 __init__.py(1989): class NullBooleanField(BooleanField):
0.24 __init__.py(1989): class NullBooleanField(BooleanField):
0.24 __init__.py(1991):         'invalid': _('“%(value)s” value must be either None, True or False.'),
0.24 __init__.py(1992):         'invalid_nullable': _('“%(value)s” value must be either None, True or False.'),
0.24 __init__.py(1990):     default_error_messages = {
0.24 __init__.py(1994):     description = _("Boolean (Either True, False or None)")
0.24 __init__.py(1997):             'NullBooleanField is removed except for support in historical '
0.24 __init__.py(2000):         'hint': 'Use BooleanField(null=True) instead.',
0.24 __init__.py(2001):         'id': 'fields.E903',
0.24 __init__.py(1995):     system_check_removed_details = {
0.24 __init__.py(2004):     def __init__(self, *args, **kwargs):
0.24 __init__.py(2009):     def deconstruct(self):
0.24 __init__.py(2016): class PositiveIntegerRelDbTypeMixin:
0.24 __init__.py(2016): class PositiveIntegerRelDbTypeMixin:
0.24 __init__.py(2017):     def __init_subclass__(cls, **kwargs):
0.24 __init__.py(2029):     def rel_db_type(self, connection):
0.24 __init__.py(2044): class PositiveBigIntegerField(PositiveIntegerRelDbTypeMixin, BigIntegerField):
0.24 __init__.py(2044): class PositiveBigIntegerField(PositiveIntegerRelDbTypeMixin, BigIntegerField):
0.24 __init__.py(2045):     description = _('Positive big integer')
0.24 __init__.py(2047):     def get_internal_type(self):
0.24 __init__.py(2050):     def formfield(self, **kwargs):
0.24 __init__.py(2018):         super().__init_subclass__(**kwargs)
0.24 __init__.py(2019):         if not hasattr(cls, 'integer_field_class'):
0.24 __init__.py(2020):             cls.integer_field_class = next(
0.24 __init__.py(2021):                 (
0.24 __init__.py(2023):                     for parent in cls.__mro__[1:]
0.24 __init__.py(2021):                 (
0.24 __init__.py(2026):                 None,
0.24 __init__.py(2020):             cls.integer_field_class = next(
0.24 __init__.py(2021):                 (
0.24 __init__.py(2023):                     for parent in cls.__mro__[1:]
0.24 __init__.py(2024):                     if issubclass(parent, IntegerField)
0.24 __init__.py(2021):                 (
0.24 __init__.py(2023):                     for parent in cls.__mro__[1:]
0.24 __init__.py(2024):                     if issubclass(parent, IntegerField)
0.24 __init__.py(2022):                     parent
0.24 __init__.py(2057): class PositiveIntegerField(PositiveIntegerRelDbTypeMixin, IntegerField):
0.24 __init__.py(2057): class PositiveIntegerField(PositiveIntegerRelDbTypeMixin, IntegerField):
0.24 __init__.py(2058):     description = _("Positive integer")
0.24 __init__.py(2060):     def get_internal_type(self):
0.24 __init__.py(2063):     def formfield(self, **kwargs):
0.24 __init__.py(2018):         super().__init_subclass__(**kwargs)
0.24 __init__.py(2019):         if not hasattr(cls, 'integer_field_class'):
0.24 __init__.py(2020):             cls.integer_field_class = next(
0.24 __init__.py(2021):                 (
0.24 __init__.py(2023):                     for parent in cls.__mro__[1:]
0.24 __init__.py(2021):                 (
0.24 __init__.py(2026):                 None,
0.24 __init__.py(2020):             cls.integer_field_class = next(
0.24 __init__.py(2021):                 (
0.24 __init__.py(2023):                     for parent in cls.__mro__[1:]
0.24 __init__.py(2024):                     if issubclass(parent, IntegerField)
0.24 __init__.py(2021):                 (
0.24 __init__.py(2023):                     for parent in cls.__mro__[1:]
0.24 __init__.py(2024):                     if issubclass(parent, IntegerField)
0.24 __init__.py(2022):                     parent
0.24 __init__.py(2070): class PositiveSmallIntegerField(PositiveIntegerRelDbTypeMixin, SmallIntegerField):
0.24 __init__.py(2070): class PositiveSmallIntegerField(PositiveIntegerRelDbTypeMixin, SmallIntegerField):
0.24 __init__.py(2071):     description = _("Positive small integer")
0.24 __init__.py(2073):     def get_internal_type(self):
0.24 __init__.py(2076):     def formfield(self, **kwargs):
0.24 __init__.py(2018):         super().__init_subclass__(**kwargs)
0.24 __init__.py(2019):         if not hasattr(cls, 'integer_field_class'):
0.24 __init__.py(2020):             cls.integer_field_class = next(
0.24 __init__.py(2021):                 (
0.24 __init__.py(2023):                     for parent in cls.__mro__[1:]
0.24 __init__.py(2021):                 (
0.24 __init__.py(2026):                 None,
0.24 __init__.py(2020):             cls.integer_field_class = next(
0.24 __init__.py(2021):                 (
0.24 __init__.py(2023):                     for parent in cls.__mro__[1:]
0.24 __init__.py(2024):                     if issubclass(parent, IntegerField)
0.24 __init__.py(2021):                 (
0.24 __init__.py(2023):                     for parent in cls.__mro__[1:]
0.24 __init__.py(2024):                     if issubclass(parent, IntegerField)
0.24 __init__.py(2022):                     parent
0.24 __init__.py(2083): class SlugField(CharField):
0.24 __init__.py(2083): class SlugField(CharField):
0.24 __init__.py(2084):     default_validators = [validators.validate_slug]
0.24 __init__.py(2085):     description = _("Slug (up to %(max_length)s)")
0.24 __init__.py(2087):     def __init__(self, *args, max_length=50, db_index=True, allow_unicode=False, **kwargs):
0.24 __init__.py(2093):     def deconstruct(self):
0.24 __init__.py(2105):     def get_internal_type(self):
0.24 __init__.py(2108):     def formfield(self, **kwargs):
0.24 __init__.py(2116): class TextField(Field):
0.24 __init__.py(2116): class TextField(Field):
0.24 __init__.py(2117):     description = _("Text")
0.24 __init__.py(2119):     def __init__(self, *args, db_collation=None, **kwargs):
0.24 __init__.py(2123):     def check(self, **kwargs):
0.24 __init__.py(2130):     def _check_db_collation(self, databases):
0.24 __init__.py(2151):     def get_internal_type(self):
0.24 __init__.py(2154):     def to_python(self, value):
0.24 __init__.py(2159):     def get_prep_value(self, value):
0.24 __init__.py(2163):     def formfield(self, **kwargs):
0.24 __init__.py(2173):     def deconstruct(self):
0.24 __init__.py(2180): class TimeField(DateTimeCheckMixin, Field):
0.24 __init__.py(2180): class TimeField(DateTimeCheckMixin, Field):
0.24 __init__.py(2181):     empty_strings_allowed = False
0.24 __init__.py(2183):         'invalid': _('“%(value)s” value has an invalid format. It must be in '
0.24 __init__.py(2185):         'invalid_time': _('“%(value)s” value has the correct format '
0.24 __init__.py(2182):     default_error_messages = {
0.24 __init__.py(2188):     description = _("Time")
0.24 __init__.py(2190):     def __init__(self, verbose_name=None, name=None, auto_now=False,
0.24 __init__.py(2198):     def _check_fix_default_value(self):
0.24 __init__.py(2220):     def deconstruct(self):
0.24 __init__.py(2231):     def get_internal_type(self):
0.24 __init__.py(2234):     def to_python(self, value):
0.24 __init__.py(2262):     def pre_save(self, model_instance, add):
0.24 __init__.py(2270):     def get_prep_value(self, value):
0.24 __init__.py(2274):     def get_db_prep_value(self, value, connection, prepared=False):
0.24 __init__.py(2280):     def value_to_string(self, obj):
0.24 __init__.py(2284):     def formfield(self, **kwargs):
0.24 __init__.py(2291): class URLField(CharField):
0.24 __init__.py(2291): class URLField(CharField):
0.24 __init__.py(2292):     default_validators = [validators.URLValidator()]
0.24 __init__.py(2293):     description = _("URL")
0.24 __init__.py(2295):     def __init__(self, verbose_name=None, name=None, **kwargs):
0.24 __init__.py(2299):     def deconstruct(self):
0.24 __init__.py(2305):     def formfield(self, **kwargs):
0.24 __init__.py(2314): class BinaryField(Field):
0.24 __init__.py(2314): class BinaryField(Field):
0.24 __init__.py(2315):     description = _("Raw binary data")
0.24 __init__.py(2316):     empty_values = [None, b'']
0.24 __init__.py(2318):     def __init__(self, *args, **kwargs):
0.24 __init__.py(2324):     def check(self, **kwargs):
0.24 __init__.py(2327):     def _check_str_default_value(self):
0.24 __init__.py(2339):     def deconstruct(self):
0.24 __init__.py(2347):     def get_internal_type(self):
0.24 __init__.py(2350):     def get_placeholder(self, value, compiler, connection):
0.24 __init__.py(2353):     def get_default(self):
0.24 __init__.py(2361):     def get_db_prep_value(self, value, connection, prepared=False):
0.24 __init__.py(2367):     def value_to_string(self, obj):
0.24 __init__.py(2371):     def to_python(self, value):
0.24 __init__.py(2378): class UUIDField(Field):
0.24 __init__.py(2378): class UUIDField(Field):
0.24 __init__.py(2380):         'invalid': _('“%(value)s” is not a valid UUID.'),
0.24 __init__.py(2379):     default_error_messages = {
0.24 __init__.py(2382):     description = _('Universally unique identifier')
0.24 __init__.py(2383):     empty_strings_allowed = False
0.24 __init__.py(2385):     def __init__(self, verbose_name=None, **kwargs):
0.24 __init__.py(2389):     def deconstruct(self):
0.24 __init__.py(2394):     def get_internal_type(self):
0.24 __init__.py(2397):     def get_prep_value(self, value):
0.24 __init__.py(2401):     def get_db_prep_value(self, value, connection, prepared=False):
0.24 __init__.py(2411):     def to_python(self, value):
0.24 __init__.py(2424):     def formfield(self, **kwargs):
0.24 __init__.py(2431): class AutoFieldMixin:
0.24 __init__.py(2431): class AutoFieldMixin:
0.24 __init__.py(2432):     db_returning = True
0.24 __init__.py(2434):     def __init__(self, *args, **kwargs):
0.24 __init__.py(2438):     def check(self, **kwargs):
0.24 __init__.py(2444):     def _check_primary_key(self):
0.24 __init__.py(2456):     def deconstruct(self):
0.24 __init__.py(2462):     def validate(self, value, model_instance):
0.24 __init__.py(2465):     def get_db_prep_value(self, value, connection, prepared=False):
0.24 __init__.py(2471):     def contribute_to_class(self, cls, name, **kwargs):
0.24 __init__.py(2480):     def formfield(self, **kwargs):
0.24 __init__.py(2484): class AutoFieldMeta(type):
0.24 __init__.py(2484): class AutoFieldMeta(type):
0.24 __init__.py(2485):     """
0.24 __init__.py(2501):     @property
0.24 __init__.py(2502):     def _subclasses(self):
0.24 __init__.py(2505):     def __instancecheck__(self, instance):
0.24 __init__.py(2508):     def __subclasscheck__(self, subclass):
0.24 __init__.py(2512): class AutoField(AutoFieldMixin, IntegerField, metaclass=AutoFieldMeta):
0.24 __init__.py(2512): class AutoField(AutoFieldMixin, IntegerField, metaclass=AutoFieldMeta):
0.24 __init__.py(2514):     def get_internal_type(self):
0.24 __init__.py(2517):     def rel_db_type(self, connection):
0.24 __init__.py(2521): class BigAutoField(AutoFieldMixin, BigIntegerField):
0.24 __init__.py(2521): class BigAutoField(AutoFieldMixin, BigIntegerField):
0.24 __init__.py(2523):     def get_internal_type(self):
0.24 __init__.py(2526):     def rel_db_type(self, connection):
0.24 __init__.py(2530): class SmallAutoField(AutoFieldMixin, SmallIntegerField):
0.24 __init__.py(2530): class SmallAutoField(AutoFieldMixin, SmallIntegerField):
0.24 __init__.py(2532):     def get_internal_type(self):
0.24 __init__.py(2535):     def rel_db_type(self, connection):
0.24 __init__.py(139):         self.name = name
0.24 __init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.24 __init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.24 __init__.py(142):         self.primary_key = primary_key
0.24 __init__.py(143):         self.max_length, self._unique = max_length, unique
0.24 __init__.py(144):         self.blank, self.null = blank, null
0.24 __init__.py(145):         self.remote_field = rel
0.24 __init__.py(146):         self.is_relation = self.remote_field is not None
0.24 __init__.py(147):         self.default = default
0.24 __init__.py(148):         self.editable = editable
0.24 __init__.py(149):         self.serialize = serialize
0.24 __init__.py(150):         self.unique_for_date = unique_for_date
0.24 __init__.py(151):         self.unique_for_month = unique_for_month
0.24 __init__.py(152):         self.unique_for_year = unique_for_year
0.24 __init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.24 __init__.py(155):         self.choices = choices
0.24 __init__.py(156):         self.help_text = help_text
0.24 __init__.py(157):         self.db_index = db_index
0.24 __init__.py(158):         self.db_column = db_column
0.24 __init__.py(159):         self._db_tablespace = db_tablespace
0.24 __init__.py(160):         self.auto_created = auto_created
0.24 __init__.py(163):         if auto_created:
0.24 __init__.py(167):             self.creation_counter = Field.creation_counter
0.24 __init__.py(168):             Field.creation_counter += 1
0.24 __init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.24 __init__.py(172):         messages = {}
0.24 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.24 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.24 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.24 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.24 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.24 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.24 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.24 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.24 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.24 __init__.py(175):         messages.update(error_messages or {})
0.24 __init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.24 __init__.py(177):         self.error_messages = messages
0.24 __init__.py(139):         self.name = name
0.24 __init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.24 __init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.24 __init__.py(142):         self.primary_key = primary_key
0.24 __init__.py(143):         self.max_length, self._unique = max_length, unique
0.24 __init__.py(144):         self.blank, self.null = blank, null
0.24 __init__.py(145):         self.remote_field = rel
0.24 __init__.py(146):         self.is_relation = self.remote_field is not None
0.24 __init__.py(147):         self.default = default
0.24 __init__.py(148):         self.editable = editable
0.24 __init__.py(149):         self.serialize = serialize
0.24 __init__.py(150):         self.unique_for_date = unique_for_date
0.24 __init__.py(151):         self.unique_for_month = unique_for_month
0.24 __init__.py(152):         self.unique_for_year = unique_for_year
0.24 __init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.24 __init__.py(155):         self.choices = choices
0.24 __init__.py(156):         self.help_text = help_text
0.24 __init__.py(157):         self.db_index = db_index
0.24 __init__.py(158):         self.db_column = db_column
0.24 __init__.py(159):         self._db_tablespace = db_tablespace
0.24 __init__.py(160):         self.auto_created = auto_created
0.24 __init__.py(163):         if auto_created:
0.24 __init__.py(167):             self.creation_counter = Field.creation_counter
0.24 __init__.py(168):             Field.creation_counter += 1
0.24 __init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.24 __init__.py(172):         messages = {}
0.24 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.24 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.24 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.24 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.24 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.24 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.24 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.24 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.24 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.24 __init__.py(175):         messages.update(error_messages or {})
0.24 __init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.24 __init__.py(177):         self.error_messages = messages
0.25 __init__.py(139):         self.name = name
0.25 __init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.25 __init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.25 __init__.py(142):         self.primary_key = primary_key
0.25 __init__.py(143):         self.max_length, self._unique = max_length, unique
0.25 __init__.py(144):         self.blank, self.null = blank, null
0.25 __init__.py(145):         self.remote_field = rel
0.25 __init__.py(146):         self.is_relation = self.remote_field is not None
0.25 __init__.py(147):         self.default = default
0.25 __init__.py(148):         self.editable = editable
0.25 __init__.py(149):         self.serialize = serialize
0.25 __init__.py(150):         self.unique_for_date = unique_for_date
0.25 __init__.py(151):         self.unique_for_month = unique_for_month
0.25 __init__.py(152):         self.unique_for_year = unique_for_year
0.25 __init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.25 __init__.py(155):         self.choices = choices
0.25 __init__.py(156):         self.help_text = help_text
0.25 __init__.py(157):         self.db_index = db_index
0.25 __init__.py(158):         self.db_column = db_column
0.25 __init__.py(159):         self._db_tablespace = db_tablespace
0.25 __init__.py(160):         self.auto_created = auto_created
0.25 __init__.py(163):         if auto_created:
0.25 __init__.py(167):             self.creation_counter = Field.creation_counter
0.25 __init__.py(168):             Field.creation_counter += 1
0.25 __init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.25 __init__.py(172):         messages = {}
0.25 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.25 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.25 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.25 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.25 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.25 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.25 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.25 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.25 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.25 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.25 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.25 __init__.py(175):         messages.update(error_messages or {})
0.25 __init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.25 __init__.py(177):         self.error_messages = messages
0.25 __init__.py(139):         self.name = name
0.25 __init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.25 __init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.25 __init__.py(142):         self.primary_key = primary_key
0.25 __init__.py(143):         self.max_length, self._unique = max_length, unique
0.25 __init__.py(144):         self.blank, self.null = blank, null
0.25 __init__.py(145):         self.remote_field = rel
0.25 __init__.py(146):         self.is_relation = self.remote_field is not None
0.25 __init__.py(147):         self.default = default
0.25 __init__.py(148):         self.editable = editable
0.25 __init__.py(149):         self.serialize = serialize
0.25 __init__.py(150):         self.unique_for_date = unique_for_date
0.25 __init__.py(151):         self.unique_for_month = unique_for_month
0.25 __init__.py(152):         self.unique_for_year = unique_for_year
0.25 __init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.25 __init__.py(155):         self.choices = choices
0.25 __init__.py(156):         self.help_text = help_text
0.25 __init__.py(157):         self.db_index = db_index
0.25 __init__.py(158):         self.db_column = db_column
0.25 __init__.py(159):         self._db_tablespace = db_tablespace
0.25 __init__.py(160):         self.auto_created = auto_created
0.25 __init__.py(163):         if auto_created:
0.25 __init__.py(167):             self.creation_counter = Field.creation_counter
0.25 __init__.py(168):             Field.creation_counter += 1
0.25 __init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.25 __init__.py(172):         messages = {}
0.25 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.25 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.25 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.25 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.25 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.25 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.25 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.25 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.25 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.25 __init__.py(175):         messages.update(error_messages or {})
0.25 __init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.25 __init__.py(177):         self.error_messages = messages
0.25 __init__.py(1203):         self.auto_now, self.auto_now_add = auto_now, auto_now_add
0.25 __init__.py(1204):         if auto_now or auto_now_add:
0.25 __init__.py(1207):         super().__init__(verbose_name, name, **kwargs)
0.25 __init__.py(139):         self.name = name
0.25 __init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.25 __init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.25 __init__.py(142):         self.primary_key = primary_key
0.25 __init__.py(143):         self.max_length, self._unique = max_length, unique
0.25 __init__.py(144):         self.blank, self.null = blank, null
0.25 __init__.py(145):         self.remote_field = rel
0.25 __init__.py(146):         self.is_relation = self.remote_field is not None
0.25 __init__.py(147):         self.default = default
0.25 __init__.py(148):         self.editable = editable
0.25 __init__.py(149):         self.serialize = serialize
0.25 __init__.py(150):         self.unique_for_date = unique_for_date
0.25 __init__.py(151):         self.unique_for_month = unique_for_month
0.25 __init__.py(152):         self.unique_for_year = unique_for_year
0.25 __init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.25 __init__.py(155):         self.choices = choices
0.25 __init__.py(156):         self.help_text = help_text
0.25 __init__.py(157):         self.db_index = db_index
0.25 __init__.py(158):         self.db_column = db_column
0.25 __init__.py(159):         self._db_tablespace = db_tablespace
0.25 __init__.py(160):         self.auto_created = auto_created
0.25 __init__.py(163):         if auto_created:
0.25 __init__.py(167):             self.creation_counter = Field.creation_counter
0.25 __init__.py(168):             Field.creation_counter += 1
0.25 __init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.25 __init__.py(172):         messages = {}
0.25 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.25 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.25 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.25 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.25 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.25 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.25 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.25 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.25 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.25 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.25 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.25 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.25 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.25 __init__.py(175):         messages.update(error_messages or {})
0.25 __init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.25 __init__.py(177):         self.error_messages = messages
0.25 __init__.py(1203):         self.auto_now, self.auto_now_add = auto_now, auto_now_add
0.25 __init__.py(1204):         if auto_now or auto_now_add:
0.25 __init__.py(1207):         super().__init__(verbose_name, name, **kwargs)
0.25 __init__.py(139):         self.name = name
0.25 __init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.25 __init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.25 __init__.py(142):         self.primary_key = primary_key
0.25 __init__.py(143):         self.max_length, self._unique = max_length, unique
0.25 __init__.py(144):         self.blank, self.null = blank, null
0.25 __init__.py(145):         self.remote_field = rel
0.25 __init__.py(146):         self.is_relation = self.remote_field is not None
0.25 __init__.py(147):         self.default = default
0.25 __init__.py(148):         self.editable = editable
0.25 __init__.py(149):         self.serialize = serialize
0.25 __init__.py(150):         self.unique_for_date = unique_for_date
0.25 __init__.py(151):         self.unique_for_month = unique_for_month
0.25 __init__.py(152):         self.unique_for_year = unique_for_year
0.25 __init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.25 __init__.py(155):         self.choices = choices
0.25 __init__.py(156):         self.help_text = help_text
0.25 __init__.py(157):         self.db_index = db_index
0.25 __init__.py(158):         self.db_column = db_column
0.25 __init__.py(159):         self._db_tablespace = db_tablespace
0.25 __init__.py(160):         self.auto_created = auto_created
0.25 __init__.py(163):         if auto_created:
0.25 __init__.py(167):             self.creation_counter = Field.creation_counter
0.25 __init__.py(168):             Field.creation_counter += 1
0.25 __init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.25 __init__.py(172):         messages = {}
0.25 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.25 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.25 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.25 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.25 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.25 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.25 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.25 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.25 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.25 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.25 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.25 __init__.py(175):         messages.update(error_messages or {})
0.25 __init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.25 __init__.py(177):         self.error_messages = messages
0.25 __init__.py(2192):         self.auto_now, self.auto_now_add = auto_now, auto_now_add
0.25 __init__.py(2193):         if auto_now or auto_now_add:
0.25 __init__.py(2196):         super().__init__(verbose_name, name, **kwargs)
0.25 __init__.py(139):         self.name = name
0.25 __init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.25 __init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.25 __init__.py(142):         self.primary_key = primary_key
0.25 __init__.py(143):         self.max_length, self._unique = max_length, unique
0.25 __init__.py(144):         self.blank, self.null = blank, null
0.25 __init__.py(145):         self.remote_field = rel
0.25 __init__.py(146):         self.is_relation = self.remote_field is not None
0.25 __init__.py(147):         self.default = default
0.25 __init__.py(148):         self.editable = editable
0.25 __init__.py(149):         self.serialize = serialize
0.25 __init__.py(150):         self.unique_for_date = unique_for_date
0.25 __init__.py(151):         self.unique_for_month = unique_for_month
0.25 __init__.py(152):         self.unique_for_year = unique_for_year
0.25 __init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.25 __init__.py(155):         self.choices = choices
0.25 __init__.py(156):         self.help_text = help_text
0.25 __init__.py(157):         self.db_index = db_index
0.25 __init__.py(158):         self.db_column = db_column
0.25 __init__.py(159):         self._db_tablespace = db_tablespace
0.25 __init__.py(160):         self.auto_created = auto_created
0.25 __init__.py(163):         if auto_created:
0.25 __init__.py(167):             self.creation_counter = Field.creation_counter
0.25 __init__.py(168):             Field.creation_counter += 1
0.25 __init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.25 __init__.py(172):         messages = {}
0.25 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.25 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.25 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.25 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.25 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.25 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.25 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.25 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.25 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.25 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.25 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.25 __init__.py(175):         messages.update(error_messages or {})
0.25 __init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.25 __init__.py(177):         self.error_messages = messages
0.26 __init__.py(1007):         super().__init__(*args, **kwargs)
0.26 __init__.py(139):         self.name = name
0.26 __init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.26 __init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.26 __init__.py(142):         self.primary_key = primary_key
0.26 __init__.py(143):         self.max_length, self._unique = max_length, unique
0.26 __init__.py(144):         self.blank, self.null = blank, null
0.26 __init__.py(145):         self.remote_field = rel
0.26 __init__.py(146):         self.is_relation = self.remote_field is not None
0.26 __init__.py(147):         self.default = default
0.26 __init__.py(148):         self.editable = editable
0.26 __init__.py(149):         self.serialize = serialize
0.26 __init__.py(150):         self.unique_for_date = unique_for_date
0.26 __init__.py(151):         self.unique_for_month = unique_for_month
0.26 __init__.py(152):         self.unique_for_year = unique_for_year
0.26 __init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.26 __init__.py(155):         self.choices = choices
0.26 __init__.py(156):         self.help_text = help_text
0.26 __init__.py(157):         self.db_index = db_index
0.26 __init__.py(158):         self.db_column = db_column
0.26 __init__.py(159):         self._db_tablespace = db_tablespace
0.26 __init__.py(160):         self.auto_created = auto_created
0.26 __init__.py(163):         if auto_created:
0.26 __init__.py(167):             self.creation_counter = Field.creation_counter
0.26 __init__.py(168):             Field.creation_counter += 1
0.26 __init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.26 __init__.py(172):         messages = {}
0.26 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 __init__.py(175):         messages.update(error_messages or {})
0.26 __init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.26 __init__.py(177):         self.error_messages = messages
0.26 __init__.py(1008):         self.db_collation = db_collation
0.26 __init__.py(1009):         if self.max_length is not None:
0.26 __init__.py(139):         self.name = name
0.26 __init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.26 __init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.26 __init__.py(142):         self.primary_key = primary_key
0.26 __init__.py(143):         self.max_length, self._unique = max_length, unique
0.26 __init__.py(144):         self.blank, self.null = blank, null
0.26 __init__.py(145):         self.remote_field = rel
0.26 __init__.py(146):         self.is_relation = self.remote_field is not None
0.26 __init__.py(147):         self.default = default
0.26 __init__.py(148):         self.editable = editable
0.26 __init__.py(149):         self.serialize = serialize
0.26 __init__.py(150):         self.unique_for_date = unique_for_date
0.26 __init__.py(151):         self.unique_for_month = unique_for_month
0.26 __init__.py(152):         self.unique_for_year = unique_for_year
0.26 __init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.26 __init__.py(155):         self.choices = choices
0.26 __init__.py(156):         self.help_text = help_text
0.26 __init__.py(157):         self.db_index = db_index
0.26 __init__.py(158):         self.db_column = db_column
0.26 __init__.py(159):         self._db_tablespace = db_tablespace
0.26 __init__.py(160):         self.auto_created = auto_created
0.26 __init__.py(163):         if auto_created:
0.26 __init__.py(167):             self.creation_counter = Field.creation_counter
0.26 __init__.py(168):             Field.creation_counter += 1
0.26 __init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.26 __init__.py(172):         messages = {}
0.26 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 __init__.py(175):         messages.update(error_messages or {})
0.26 __init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.26 __init__.py(177):         self.error_messages = messages
0.26 __init__.py(1007):         super().__init__(*args, **kwargs)
0.26 __init__.py(139):         self.name = name
0.26 __init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.26 __init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.26 __init__.py(142):         self.primary_key = primary_key
0.26 __init__.py(143):         self.max_length, self._unique = max_length, unique
0.26 __init__.py(144):         self.blank, self.null = blank, null
0.26 __init__.py(145):         self.remote_field = rel
0.26 __init__.py(146):         self.is_relation = self.remote_field is not None
0.26 __init__.py(147):         self.default = default
0.26 __init__.py(148):         self.editable = editable
0.26 __init__.py(149):         self.serialize = serialize
0.26 __init__.py(150):         self.unique_for_date = unique_for_date
0.26 __init__.py(151):         self.unique_for_month = unique_for_month
0.26 __init__.py(152):         self.unique_for_year = unique_for_year
0.26 __init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.26 __init__.py(155):         self.choices = choices
0.26 __init__.py(156):         self.help_text = help_text
0.26 __init__.py(157):         self.db_index = db_index
0.26 __init__.py(158):         self.db_column = db_column
0.26 __init__.py(159):         self._db_tablespace = db_tablespace
0.26 __init__.py(160):         self.auto_created = auto_created
0.26 __init__.py(163):         if auto_created:
0.26 __init__.py(167):             self.creation_counter = Field.creation_counter
0.26 __init__.py(168):             Field.creation_counter += 1
0.26 __init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.26 __init__.py(172):         messages = {}
0.26 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 __init__.py(175):         messages.update(error_messages or {})
0.26 __init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.26 __init__.py(177):         self.error_messages = messages
0.26 __init__.py(1008):         self.db_collation = db_collation
0.26 __init__.py(1009):         if self.max_length is not None:
0.26 __init__.py(139):         self.name = name
0.26 __init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.26 __init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.26 __init__.py(142):         self.primary_key = primary_key
0.26 __init__.py(143):         self.max_length, self._unique = max_length, unique
0.26 __init__.py(144):         self.blank, self.null = blank, null
0.26 __init__.py(145):         self.remote_field = rel
0.26 __init__.py(146):         self.is_relation = self.remote_field is not None
0.26 __init__.py(147):         self.default = default
0.26 __init__.py(148):         self.editable = editable
0.26 __init__.py(149):         self.serialize = serialize
0.26 __init__.py(150):         self.unique_for_date = unique_for_date
0.26 __init__.py(151):         self.unique_for_month = unique_for_month
0.26 __init__.py(152):         self.unique_for_year = unique_for_year
0.26 __init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.26 __init__.py(155):         self.choices = choices
0.26 __init__.py(156):         self.help_text = help_text
0.26 __init__.py(157):         self.db_index = db_index
0.26 __init__.py(158):         self.db_column = db_column
0.26 __init__.py(159):         self._db_tablespace = db_tablespace
0.26 __init__.py(160):         self.auto_created = auto_created
0.26 __init__.py(163):         if auto_created:
0.26 __init__.py(167):             self.creation_counter = Field.creation_counter
0.26 __init__.py(168):             Field.creation_counter += 1
0.26 __init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.26 __init__.py(172):         messages = {}
0.26 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 __init__.py(175):         messages.update(error_messages or {})
0.26 __init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.26 __init__.py(177):         self.error_messages = messages
0.26 __init__.py(1007):         super().__init__(*args, **kwargs)
0.26 __init__.py(139):         self.name = name
0.26 __init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.26 __init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.26 __init__.py(142):         self.primary_key = primary_key
0.26 __init__.py(143):         self.max_length, self._unique = max_length, unique
0.26 __init__.py(144):         self.blank, self.null = blank, null
0.26 __init__.py(145):         self.remote_field = rel
0.26 __init__.py(146):         self.is_relation = self.remote_field is not None
0.26 __init__.py(147):         self.default = default
0.26 __init__.py(148):         self.editable = editable
0.26 __init__.py(149):         self.serialize = serialize
0.26 __init__.py(150):         self.unique_for_date = unique_for_date
0.26 __init__.py(151):         self.unique_for_month = unique_for_month
0.26 __init__.py(152):         self.unique_for_year = unique_for_year
0.26 __init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.26 __init__.py(155):         self.choices = choices
0.26 __init__.py(156):         self.help_text = help_text
0.26 __init__.py(157):         self.db_index = db_index
0.26 __init__.py(158):         self.db_column = db_column
0.26 __init__.py(159):         self._db_tablespace = db_tablespace
0.26 __init__.py(160):         self.auto_created = auto_created
0.26 __init__.py(163):         if auto_created:
0.26 __init__.py(167):             self.creation_counter = Field.creation_counter
0.26 __init__.py(168):             Field.creation_counter += 1
0.26 __init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.26 __init__.py(172):         messages = {}
0.26 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 __init__.py(175):         messages.update(error_messages or {})
0.26 __init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.26 __init__.py(177):         self.error_messages = messages
0.26 __init__.py(1008):         self.db_collation = db_collation
0.26 __init__.py(1009):         if self.max_length is not None:
0.26 __init__.py(139):         self.name = name
0.26 __init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.26 __init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.26 __init__.py(142):         self.primary_key = primary_key
0.26 __init__.py(143):         self.max_length, self._unique = max_length, unique
0.26 __init__.py(144):         self.blank, self.null = blank, null
0.26 __init__.py(145):         self.remote_field = rel
0.26 __init__.py(146):         self.is_relation = self.remote_field is not None
0.26 __init__.py(147):         self.default = default
0.26 __init__.py(148):         self.editable = editable
0.26 __init__.py(149):         self.serialize = serialize
0.26 __init__.py(150):         self.unique_for_date = unique_for_date
0.26 __init__.py(151):         self.unique_for_month = unique_for_month
0.26 __init__.py(152):         self.unique_for_year = unique_for_year
0.26 __init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.26 __init__.py(155):         self.choices = choices
0.26 __init__.py(156):         self.help_text = help_text
0.26 __init__.py(157):         self.db_index = db_index
0.26 __init__.py(158):         self.db_column = db_column
0.26 __init__.py(159):         self._db_tablespace = db_tablespace
0.26 __init__.py(160):         self.auto_created = auto_created
0.26 __init__.py(163):         if auto_created:
0.26 __init__.py(167):             self.creation_counter = Field.creation_counter
0.26 __init__.py(168):             Field.creation_counter += 1
0.26 __init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.26 __init__.py(172):         messages = {}
0.26 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 __init__.py(175):         messages.update(error_messages or {})
0.26 __init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.26 __init__.py(177):         self.error_messages = messages
0.26 __init__.py(1007):         super().__init__(*args, **kwargs)
0.26 __init__.py(139):         self.name = name
0.26 __init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.26 __init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.26 __init__.py(142):         self.primary_key = primary_key
0.26 __init__.py(143):         self.max_length, self._unique = max_length, unique
0.26 __init__.py(144):         self.blank, self.null = blank, null
0.26 __init__.py(145):         self.remote_field = rel
0.26 __init__.py(146):         self.is_relation = self.remote_field is not None
0.26 __init__.py(147):         self.default = default
0.26 __init__.py(148):         self.editable = editable
0.26 __init__.py(149):         self.serialize = serialize
0.26 __init__.py(150):         self.unique_for_date = unique_for_date
0.26 __init__.py(151):         self.unique_for_month = unique_for_month
0.26 __init__.py(152):         self.unique_for_year = unique_for_year
0.26 __init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.26 __init__.py(155):         self.choices = choices
0.26 __init__.py(156):         self.help_text = help_text
0.26 __init__.py(157):         self.db_index = db_index
0.26 __init__.py(158):         self.db_column = db_column
0.26 __init__.py(159):         self._db_tablespace = db_tablespace
0.26 __init__.py(160):         self.auto_created = auto_created
0.26 __init__.py(163):         if auto_created:
0.26 __init__.py(167):             self.creation_counter = Field.creation_counter
0.26 __init__.py(168):             Field.creation_counter += 1
0.26 __init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.26 __init__.py(172):         messages = {}
0.26 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 __init__.py(175):         messages.update(error_messages or {})
0.26 __init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.26 __init__.py(177):         self.error_messages = messages
0.26 __init__.py(1008):         self.db_collation = db_collation
0.26 __init__.py(1009):         if self.max_length is not None:
0.26 __init__.py(139):         self.name = name
0.26 __init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.26 __init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.26 __init__.py(142):         self.primary_key = primary_key
0.26 __init__.py(143):         self.max_length, self._unique = max_length, unique
0.26 __init__.py(144):         self.blank, self.null = blank, null
0.26 __init__.py(145):         self.remote_field = rel
0.26 __init__.py(146):         self.is_relation = self.remote_field is not None
0.26 __init__.py(147):         self.default = default
0.26 __init__.py(148):         self.editable = editable
0.26 __init__.py(149):         self.serialize = serialize
0.26 __init__.py(150):         self.unique_for_date = unique_for_date
0.26 __init__.py(151):         self.unique_for_month = unique_for_month
0.26 __init__.py(152):         self.unique_for_year = unique_for_year
0.26 __init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.26 __init__.py(155):         self.choices = choices
0.26 __init__.py(156):         self.help_text = help_text
0.26 __init__.py(157):         self.db_index = db_index
0.26 __init__.py(158):         self.db_column = db_column
0.26 __init__.py(159):         self._db_tablespace = db_tablespace
0.26 __init__.py(160):         self.auto_created = auto_created
0.26 __init__.py(163):         if auto_created:
0.26 __init__.py(167):             self.creation_counter = Field.creation_counter
0.26 __init__.py(168):             Field.creation_counter += 1
0.26 __init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.26 __init__.py(172):         messages = {}
0.26 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 __init__.py(175):         messages.update(error_messages or {})
0.26 __init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.26 __init__.py(177):         self.error_messages = messages
0.26 __init__.py(139):         self.name = name
0.26 __init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.26 __init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.26 __init__.py(142):         self.primary_key = primary_key
0.26 __init__.py(143):         self.max_length, self._unique = max_length, unique
0.26 __init__.py(144):         self.blank, self.null = blank, null
0.26 __init__.py(145):         self.remote_field = rel
0.26 __init__.py(146):         self.is_relation = self.remote_field is not None
0.26 __init__.py(147):         self.default = default
0.26 __init__.py(148):         self.editable = editable
0.26 __init__.py(149):         self.serialize = serialize
0.26 __init__.py(150):         self.unique_for_date = unique_for_date
0.26 __init__.py(151):         self.unique_for_month = unique_for_month
0.26 __init__.py(152):         self.unique_for_year = unique_for_year
0.26 __init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.26 __init__.py(155):         self.choices = choices
0.26 __init__.py(156):         self.help_text = help_text
0.26 __init__.py(157):         self.db_index = db_index
0.26 __init__.py(158):         self.db_column = db_column
0.26 __init__.py(159):         self._db_tablespace = db_tablespace
0.26 __init__.py(160):         self.auto_created = auto_created
0.26 __init__.py(163):         if auto_created:
0.26 __init__.py(167):             self.creation_counter = Field.creation_counter
0.26 __init__.py(168):             Field.creation_counter += 1
0.26 __init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.26 __init__.py(172):         messages = {}
0.26 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 __init__.py(175):         messages.update(error_messages or {})
0.26 __init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.26 __init__.py(177):         self.error_messages = messages
0.26 __init__.py(139):         self.name = name
0.26 __init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.26 __init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.26 __init__.py(142):         self.primary_key = primary_key
0.26 __init__.py(143):         self.max_length, self._unique = max_length, unique
0.26 __init__.py(144):         self.blank, self.null = blank, null
0.26 __init__.py(145):         self.remote_field = rel
0.26 __init__.py(146):         self.is_relation = self.remote_field is not None
0.26 __init__.py(147):         self.default = default
0.26 __init__.py(148):         self.editable = editable
0.26 __init__.py(149):         self.serialize = serialize
0.26 __init__.py(150):         self.unique_for_date = unique_for_date
0.26 __init__.py(151):         self.unique_for_month = unique_for_month
0.26 __init__.py(152):         self.unique_for_year = unique_for_year
0.26 __init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.26 __init__.py(155):         self.choices = choices
0.26 __init__.py(156):         self.help_text = help_text
0.26 __init__.py(157):         self.db_index = db_index
0.26 __init__.py(158):         self.db_column = db_column
0.26 __init__.py(159):         self._db_tablespace = db_tablespace
0.26 __init__.py(160):         self.auto_created = auto_created
0.26 __init__.py(163):         if auto_created:
0.26 __init__.py(167):             self.creation_counter = Field.creation_counter
0.26 __init__.py(168):             Field.creation_counter += 1
0.26 __init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.26 __init__.py(172):         messages = {}
0.26 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 __init__.py(175):         messages.update(error_messages or {})
0.26 __init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.26 __init__.py(177):         self.error_messages = messages
0.26 __init__.py(139):         self.name = name
0.26 __init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.26 __init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.26 __init__.py(142):         self.primary_key = primary_key
0.26 __init__.py(143):         self.max_length, self._unique = max_length, unique
0.26 __init__.py(144):         self.blank, self.null = blank, null
0.26 __init__.py(145):         self.remote_field = rel
0.26 __init__.py(146):         self.is_relation = self.remote_field is not None
0.26 __init__.py(147):         self.default = default
0.26 __init__.py(148):         self.editable = editable
0.26 __init__.py(149):         self.serialize = serialize
0.26 __init__.py(150):         self.unique_for_date = unique_for_date
0.26 __init__.py(151):         self.unique_for_month = unique_for_month
0.26 __init__.py(152):         self.unique_for_year = unique_for_year
0.26 __init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.26 __init__.py(155):         self.choices = choices
0.26 __init__.py(156):         self.help_text = help_text
0.26 __init__.py(157):         self.db_index = db_index
0.26 __init__.py(158):         self.db_column = db_column
0.26 __init__.py(159):         self._db_tablespace = db_tablespace
0.26 __init__.py(160):         self.auto_created = auto_created
0.26 __init__.py(163):         if auto_created:
0.26 __init__.py(167):             self.creation_counter = Field.creation_counter
0.26 __init__.py(168):             Field.creation_counter += 1
0.26 __init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.26 __init__.py(172):         messages = {}
0.26 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 __init__.py(175):         messages.update(error_messages or {})
0.26 __init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.26 __init__.py(177):         self.error_messages = messages
0.26 __init__.py(139):         self.name = name
0.26 __init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.26 __init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.26 __init__.py(142):         self.primary_key = primary_key
0.26 __init__.py(143):         self.max_length, self._unique = max_length, unique
0.26 __init__.py(144):         self.blank, self.null = blank, null
0.26 __init__.py(145):         self.remote_field = rel
0.26 __init__.py(146):         self.is_relation = self.remote_field is not None
0.26 __init__.py(147):         self.default = default
0.26 __init__.py(148):         self.editable = editable
0.26 __init__.py(149):         self.serialize = serialize
0.26 __init__.py(150):         self.unique_for_date = unique_for_date
0.26 __init__.py(151):         self.unique_for_month = unique_for_month
0.26 __init__.py(152):         self.unique_for_year = unique_for_year
0.26 __init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.26 __init__.py(155):         self.choices = choices
0.26 __init__.py(156):         self.help_text = help_text
0.26 __init__.py(157):         self.db_index = db_index
0.26 __init__.py(158):         self.db_column = db_column
0.26 __init__.py(159):         self._db_tablespace = db_tablespace
0.26 __init__.py(160):         self.auto_created = auto_created
0.26 __init__.py(163):         if auto_created:
0.26 __init__.py(167):             self.creation_counter = Field.creation_counter
0.26 __init__.py(168):             Field.creation_counter += 1
0.26 __init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.26 __init__.py(172):         messages = {}
0.26 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 __init__.py(175):         messages.update(error_messages or {})
0.26 __init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.26 __init__.py(177):         self.error_messages = messages
0.26 __init__.py(139):         self.name = name
0.26 __init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.26 __init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.26 __init__.py(142):         self.primary_key = primary_key
0.26 __init__.py(143):         self.max_length, self._unique = max_length, unique
0.26 __init__.py(144):         self.blank, self.null = blank, null
0.26 __init__.py(145):         self.remote_field = rel
0.26 __init__.py(146):         self.is_relation = self.remote_field is not None
0.26 __init__.py(147):         self.default = default
0.26 __init__.py(148):         self.editable = editable
0.26 __init__.py(149):         self.serialize = serialize
0.26 __init__.py(150):         self.unique_for_date = unique_for_date
0.26 __init__.py(151):         self.unique_for_month = unique_for_month
0.26 __init__.py(152):         self.unique_for_year = unique_for_year
0.26 __init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.26 __init__.py(155):         self.choices = choices
0.26 __init__.py(156):         self.help_text = help_text
0.26 __init__.py(157):         self.db_index = db_index
0.26 __init__.py(158):         self.db_column = db_column
0.26 __init__.py(159):         self._db_tablespace = db_tablespace
0.26 __init__.py(160):         self.auto_created = auto_created
0.26 __init__.py(163):         if auto_created:
0.26 __init__.py(167):             self.creation_counter = Field.creation_counter
0.26 __init__.py(168):             Field.creation_counter += 1
0.26 __init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.26 __init__.py(172):         messages = {}
0.26 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 __init__.py(175):         messages.update(error_messages or {})
0.26 __init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.26 __init__.py(177):         self.error_messages = messages
0.26 __init__.py(139):         self.name = name
0.26 __init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.26 __init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.26 __init__.py(142):         self.primary_key = primary_key
0.26 __init__.py(143):         self.max_length, self._unique = max_length, unique
0.26 __init__.py(144):         self.blank, self.null = blank, null
0.26 __init__.py(145):         self.remote_field = rel
0.26 __init__.py(146):         self.is_relation = self.remote_field is not None
0.26 __init__.py(147):         self.default = default
0.26 __init__.py(148):         self.editable = editable
0.26 __init__.py(149):         self.serialize = serialize
0.26 __init__.py(150):         self.unique_for_date = unique_for_date
0.26 __init__.py(151):         self.unique_for_month = unique_for_month
0.26 __init__.py(152):         self.unique_for_year = unique_for_year
0.26 __init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.26 __init__.py(155):         self.choices = choices
0.26 __init__.py(156):         self.help_text = help_text
0.26 __init__.py(157):         self.db_index = db_index
0.26 __init__.py(158):         self.db_column = db_column
0.26 __init__.py(159):         self._db_tablespace = db_tablespace
0.26 __init__.py(160):         self.auto_created = auto_created
0.26 __init__.py(163):         if auto_created:
0.26 __init__.py(167):             self.creation_counter = Field.creation_counter
0.26 __init__.py(168):             Field.creation_counter += 1
0.26 __init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.26 __init__.py(172):         messages = {}
0.26 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.26 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.26 __init__.py(175):         messages.update(error_messages or {})
0.26 __init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.26 __init__.py(177):         self.error_messages = messages
Testing against Django installed in '/testbed/django'
0.50 __init__.py(1007):         super().__init__(*args, **kwargs)
0.50 __init__.py(139):         self.name = name
0.50 __init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.50 __init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.50 __init__.py(142):         self.primary_key = primary_key
0.50 __init__.py(143):         self.max_length, self._unique = max_length, unique
0.50 __init__.py(144):         self.blank, self.null = blank, null
0.50 __init__.py(145):         self.remote_field = rel
0.50 __init__.py(146):         self.is_relation = self.remote_field is not None
0.50 __init__.py(147):         self.default = default
0.50 __init__.py(148):         self.editable = editable
0.50 __init__.py(149):         self.serialize = serialize
0.50 __init__.py(150):         self.unique_for_date = unique_for_date
0.50 __init__.py(151):         self.unique_for_month = unique_for_month
0.50 __init__.py(152):         self.unique_for_year = unique_for_year
0.50 __init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.50 __init__.py(155):         self.choices = choices
0.50 __init__.py(156):         self.help_text = help_text
0.50 __init__.py(157):         self.db_index = db_index
0.50 __init__.py(158):         self.db_column = db_column
0.50 __init__.py(159):         self._db_tablespace = db_tablespace
0.50 __init__.py(160):         self.auto_created = auto_created
0.50 __init__.py(163):         if auto_created:
0.50 __init__.py(167):             self.creation_counter = Field.creation_counter
0.50 __init__.py(168):             Field.creation_counter += 1
0.50 __init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.50 __init__.py(172):         messages = {}
0.50 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.50 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.50 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.50 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.50 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.50 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.50 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.50 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.50 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.50 __init__.py(175):         messages.update(error_messages or {})
0.50 __init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.50 __init__.py(177):         self.error_messages = messages
0.50 __init__.py(1008):         self.db_collation = db_collation
0.50 __init__.py(1009):         if self.max_length is not None:
0.50 __init__.py(1010):             self.validators.append(validators.MaxLengthValidator(self.max_length))
0.50 __init__.py(611):         return [*self.default_validators, *self._validators]
0.50 __init__.py(1007):         super().__init__(*args, **kwargs)
0.50 __init__.py(139):         self.name = name
0.50 __init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.50 __init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.50 __init__.py(142):         self.primary_key = primary_key
0.50 __init__.py(143):         self.max_length, self._unique = max_length, unique
0.50 __init__.py(144):         self.blank, self.null = blank, null
0.50 __init__.py(145):         self.remote_field = rel
0.50 __init__.py(146):         self.is_relation = self.remote_field is not None
0.50 __init__.py(147):         self.default = default
0.50 __init__.py(148):         self.editable = editable
0.50 __init__.py(149):         self.serialize = serialize
0.50 __init__.py(150):         self.unique_for_date = unique_for_date
0.50 __init__.py(151):         self.unique_for_month = unique_for_month
0.50 __init__.py(152):         self.unique_for_year = unique_for_year
0.50 __init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.50 __init__.py(155):         self.choices = choices
0.50 __init__.py(156):         self.help_text = help_text
0.50 __init__.py(157):         self.db_index = db_index
0.50 __init__.py(158):         self.db_column = db_column
0.50 __init__.py(159):         self._db_tablespace = db_tablespace
0.50 __init__.py(160):         self.auto_created = auto_created
0.50 __init__.py(163):         if auto_created:
0.50 __init__.py(167):             self.creation_counter = Field.creation_counter
0.50 __init__.py(168):             Field.creation_counter += 1
0.50 __init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.50 __init__.py(172):         messages = {}
0.50 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.50 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.50 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.50 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.50 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.50 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.50 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.50 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.50 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.50 __init__.py(175):         messages.update(error_messages or {})
0.50 __init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.50 __init__.py(177):         self.error_messages = messages
0.50 __init__.py(1008):         self.db_collation = db_collation
0.50 __init__.py(1009):         if self.max_length is not None:
0.50 __init__.py(1010):             self.validators.append(validators.MaxLengthValidator(self.max_length))
0.50 __init__.py(611):         return [*self.default_validators, *self._validators]
0.50 __init__.py(778):         self.set_attributes_from_name(name)
0.50 __init__.py(765):         self.name = self.name or name
0.50 __init__.py(766):         self.attname, self.column = self.get_attname_column()
0.50 __init__.py(806):         attname = self.get_attname()
0.50 __init__.py(803):         return self.name
0.50 __init__.py(807):         column = self.db_column or attname
0.50 __init__.py(808):         return attname, column
0.50 __init__.py(767):         self.concrete = self.column is not None
0.50 __init__.py(768):         if self.verbose_name is None and self.name:
0.50 __init__.py(769):             self.verbose_name = self.name.replace('_', ' ')
0.50 __init__.py(779):         self.model = cls
0.50 __init__.py(780):         cls._meta.add_field(self, private=private_only)
0.50 __init__.py(781):         if self.column:
0.50 __init__.py(782):             setattr(cls, self.attname, self.descriptor_class(self))
0.50 __init__.py(783):         if self.choices is not None:
0.50 __init__.py(778):         self.set_attributes_from_name(name)
0.50 __init__.py(765):         self.name = self.name or name
0.50 __init__.py(766):         self.attname, self.column = self.get_attname_column()
0.50 __init__.py(806):         attname = self.get_attname()
0.50 __init__.py(803):         return self.name
0.50 __init__.py(807):         column = self.db_column or attname
0.50 __init__.py(808):         return attname, column
0.50 __init__.py(767):         self.concrete = self.column is not None
0.50 __init__.py(768):         if self.verbose_name is None and self.name:
0.50 __init__.py(779):         self.model = cls
0.50 __init__.py(780):         cls._meta.add_field(self, private=private_only)
0.50 __init__.py(528):         if isinstance(other, Field):
0.50 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.50 __init__.py(529):             if (
0.50 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.50 __init__.py(781):         if self.column:
0.50 __init__.py(782):             setattr(cls, self.attname, self.descriptor_class(self))
0.50 __init__.py(783):         if self.choices is not None:
0.50 __init__.py(2509):         return issubclass(subclass, self._subclasses) or super().__subclasscheck__(subclass)
0.50 __init__.py(2503):         return (BigAutoField, SmallAutoField)
0.50 __init__.py(2435):         kwargs['blank'] = True
0.50 __init__.py(2436):         super().__init__(*args, **kwargs)
0.50 __init__.py(139):         self.name = name
0.50 __init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.50 __init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.50 __init__.py(142):         self.primary_key = primary_key
0.50 __init__.py(143):         self.max_length, self._unique = max_length, unique
0.50 __init__.py(144):         self.blank, self.null = blank, null
0.50 __init__.py(145):         self.remote_field = rel
0.50 __init__.py(146):         self.is_relation = self.remote_field is not None
0.50 __init__.py(147):         self.default = default
0.50 __init__.py(148):         self.editable = editable
0.50 __init__.py(149):         self.serialize = serialize
0.50 __init__.py(150):         self.unique_for_date = unique_for_date
0.50 __init__.py(151):         self.unique_for_month = unique_for_month
0.50 __init__.py(152):         self.unique_for_year = unique_for_year
0.50 __init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.50 __init__.py(155):         self.choices = choices
0.50 __init__.py(156):         self.help_text = help_text
0.50 __init__.py(157):         self.db_index = db_index
0.50 __init__.py(158):         self.db_column = db_column
0.50 __init__.py(159):         self._db_tablespace = db_tablespace
0.50 __init__.py(160):         self.auto_created = auto_created
0.50 __init__.py(163):         if auto_created:
0.50 __init__.py(164):             self.creation_counter = Field.auto_creation_counter
0.50 __init__.py(165):             Field.auto_creation_counter -= 1
0.50 __init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.50 __init__.py(172):         messages = {}
0.50 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.50 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.50 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.50 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.50 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.50 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.50 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.50 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.50 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.50 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.50 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.50 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.50 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.50 __init__.py(175):         messages.update(error_messages or {})
0.50 __init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.50 __init__.py(177):         self.error_messages = messages
0.50 __init__.py(2472):         if cls._meta.auto_field:
0.50 __init__.py(2477):         super().contribute_to_class(cls, name, **kwargs)
0.50 __init__.py(778):         self.set_attributes_from_name(name)
0.50 __init__.py(765):         self.name = self.name or name
0.50 __init__.py(766):         self.attname, self.column = self.get_attname_column()
0.50 __init__.py(806):         attname = self.get_attname()
0.50 __init__.py(803):         return self.name
0.50 __init__.py(807):         column = self.db_column or attname
0.50 __init__.py(808):         return attname, column
0.50 __init__.py(767):         self.concrete = self.column is not None
0.50 __init__.py(768):         if self.verbose_name is None and self.name:
0.50 __init__.py(779):         self.model = cls
0.50 __init__.py(780):         cls._meta.add_field(self, private=private_only)
0.50 __init__.py(528):         if isinstance(other, Field):
0.50 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.50 __init__.py(529):             if (
0.50 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.50 __init__.py(528):         if isinstance(other, Field):
0.50 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.50 __init__.py(529):             if (
0.50 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.50 __init__.py(781):         if self.column:
0.50 __init__.py(782):             setattr(cls, self.attname, self.descriptor_class(self))
0.50 __init__.py(783):         if self.choices is not None:
0.50 __init__.py(2478):         cls._meta.auto_field = self
0.51 __init__.py(1007):         super().__init__(*args, **kwargs)
0.51 __init__.py(139):         self.name = name
0.51 __init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.51 __init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.51 __init__.py(142):         self.primary_key = primary_key
0.51 __init__.py(143):         self.max_length, self._unique = max_length, unique
0.51 __init__.py(144):         self.blank, self.null = blank, null
0.51 __init__.py(145):         self.remote_field = rel
0.51 __init__.py(146):         self.is_relation = self.remote_field is not None
0.51 __init__.py(147):         self.default = default
0.51 __init__.py(148):         self.editable = editable
0.51 __init__.py(149):         self.serialize = serialize
0.51 __init__.py(150):         self.unique_for_date = unique_for_date
0.51 __init__.py(151):         self.unique_for_month = unique_for_month
0.51 __init__.py(152):         self.unique_for_year = unique_for_year
0.51 __init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.51 __init__.py(155):         self.choices = choices
0.51 __init__.py(156):         self.help_text = help_text
0.51 __init__.py(157):         self.db_index = db_index
0.51 __init__.py(158):         self.db_column = db_column
0.51 __init__.py(159):         self._db_tablespace = db_tablespace
0.51 __init__.py(160):         self.auto_created = auto_created
0.51 __init__.py(163):         if auto_created:
0.51 __init__.py(167):             self.creation_counter = Field.creation_counter
0.51 __init__.py(168):             Field.creation_counter += 1
0.51 __init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.51 __init__.py(172):         messages = {}
0.51 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.51 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.51 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.51 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.51 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.51 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.51 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.51 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.51 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.51 __init__.py(175):         messages.update(error_messages or {})
0.51 __init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.51 __init__.py(177):         self.error_messages = messages
0.51 __init__.py(1008):         self.db_collation = db_collation
0.51 __init__.py(1009):         if self.max_length is not None:
0.51 __init__.py(1010):             self.validators.append(validators.MaxLengthValidator(self.max_length))
0.51 __init__.py(611):         return [*self.default_validators, *self._validators]
0.51 __init__.py(1203):         self.auto_now, self.auto_now_add = auto_now, auto_now_add
0.51 __init__.py(1204):         if auto_now or auto_now_add:
0.51 __init__.py(1207):         super().__init__(verbose_name, name, **kwargs)
0.51 __init__.py(139):         self.name = name
0.51 __init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.51 __init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.51 __init__.py(142):         self.primary_key = primary_key
0.51 __init__.py(143):         self.max_length, self._unique = max_length, unique
0.51 __init__.py(144):         self.blank, self.null = blank, null
0.51 __init__.py(145):         self.remote_field = rel
0.51 __init__.py(146):         self.is_relation = self.remote_field is not None
0.51 __init__.py(147):         self.default = default
0.51 __init__.py(148):         self.editable = editable
0.51 __init__.py(149):         self.serialize = serialize
0.51 __init__.py(150):         self.unique_for_date = unique_for_date
0.51 __init__.py(151):         self.unique_for_month = unique_for_month
0.51 __init__.py(152):         self.unique_for_year = unique_for_year
0.51 __init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.51 __init__.py(155):         self.choices = choices
0.51 __init__.py(156):         self.help_text = help_text
0.51 __init__.py(157):         self.db_index = db_index
0.51 __init__.py(158):         self.db_column = db_column
0.51 __init__.py(159):         self._db_tablespace = db_tablespace
0.51 __init__.py(160):         self.auto_created = auto_created
0.51 __init__.py(163):         if auto_created:
0.51 __init__.py(167):             self.creation_counter = Field.creation_counter
0.51 __init__.py(168):             Field.creation_counter += 1
0.51 __init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.51 __init__.py(172):         messages = {}
0.51 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.51 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.51 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.51 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.51 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.51 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.51 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.51 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.51 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.51 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.51 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.51 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.51 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.51 __init__.py(175):         messages.update(error_messages or {})
0.51 __init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.51 __init__.py(177):         self.error_messages = messages
0.54 __init__.py(778):         self.set_attributes_from_name(name)
0.54 __init__.py(765):         self.name = self.name or name
0.54 __init__.py(766):         self.attname, self.column = self.get_attname_column()
0.54 __init__.py(806):         attname = self.get_attname()
0.54 __init__.py(803):         return self.name
0.54 __init__.py(807):         column = self.db_column or attname
0.54 __init__.py(808):         return attname, column
0.54 __init__.py(767):         self.concrete = self.column is not None
0.54 __init__.py(768):         if self.verbose_name is None and self.name:
0.54 __init__.py(779):         self.model = cls
0.54 __init__.py(780):         cls._meta.add_field(self, private=private_only)
0.54 __init__.py(781):         if self.column:
0.54 __init__.py(782):             setattr(cls, self.attname, self.descriptor_class(self))
0.54 __init__.py(783):         if self.choices is not None:
0.54 __init__.py(1281):         super().contribute_to_class(cls, name, **kwargs)
0.54 __init__.py(778):         self.set_attributes_from_name(name)
0.54 __init__.py(765):         self.name = self.name or name
0.54 __init__.py(766):         self.attname, self.column = self.get_attname_column()
0.54 __init__.py(806):         attname = self.get_attname()
0.54 __init__.py(803):         return self.name
0.54 __init__.py(807):         column = self.db_column or attname
0.54 __init__.py(808):         return attname, column
0.54 __init__.py(767):         self.concrete = self.column is not None
0.54 __init__.py(768):         if self.verbose_name is None and self.name:
0.54 __init__.py(779):         self.model = cls
0.54 __init__.py(780):         cls._meta.add_field(self, private=private_only)
0.54 __init__.py(528):         if isinstance(other, Field):
0.54 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.54 __init__.py(529):             if (
0.54 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.54 __init__.py(781):         if self.column:
0.54 __init__.py(782):             setattr(cls, self.attname, self.descriptor_class(self))
0.54 __init__.py(783):         if self.choices is not None:
0.54 __init__.py(1282):         if not self.null:
0.54 __init__.py(1007):         super().__init__(*args, **kwargs)
0.54 __init__.py(139):         self.name = name
0.54 __init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.54 __init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.54 __init__.py(142):         self.primary_key = primary_key
0.54 __init__.py(143):         self.max_length, self._unique = max_length, unique
0.54 __init__.py(144):         self.blank, self.null = blank, null
0.54 __init__.py(145):         self.remote_field = rel
0.54 __init__.py(146):         self.is_relation = self.remote_field is not None
0.54 __init__.py(147):         self.default = default
0.54 __init__.py(148):         self.editable = editable
0.54 __init__.py(149):         self.serialize = serialize
0.54 __init__.py(150):         self.unique_for_date = unique_for_date
0.54 __init__.py(151):         self.unique_for_month = unique_for_month
0.54 __init__.py(152):         self.unique_for_year = unique_for_year
0.54 __init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.54 __init__.py(155):         self.choices = choices
0.54 __init__.py(156):         self.help_text = help_text
0.54 __init__.py(157):         self.db_index = db_index
0.54 __init__.py(158):         self.db_column = db_column
0.54 __init__.py(159):         self._db_tablespace = db_tablespace
0.54 __init__.py(160):         self.auto_created = auto_created
0.54 __init__.py(163):         if auto_created:
0.54 __init__.py(167):             self.creation_counter = Field.creation_counter
0.54 __init__.py(168):             Field.creation_counter += 1
0.54 __init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.54 __init__.py(172):         messages = {}
0.54 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.54 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.54 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.54 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.54 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.54 __init__.py(175):         messages.update(error_messages or {})
0.54 __init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.54 __init__.py(177):         self.error_messages = messages
0.54 __init__.py(1008):         self.db_collation = db_collation
0.54 __init__.py(1009):         if self.max_length is not None:
0.54 __init__.py(1010):             self.validators.append(validators.MaxLengthValidator(self.max_length))
0.54 __init__.py(611):         return [*self.default_validators, *self._validators]
0.54 __init__.py(139):         self.name = name
0.54 __init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.54 __init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.54 __init__.py(142):         self.primary_key = primary_key
0.54 __init__.py(143):         self.max_length, self._unique = max_length, unique
0.54 __init__.py(144):         self.blank, self.null = blank, null
0.54 __init__.py(145):         self.remote_field = rel
0.54 __init__.py(146):         self.is_relation = self.remote_field is not None
0.54 __init__.py(147):         self.default = default
0.54 __init__.py(148):         self.editable = editable
0.54 __init__.py(149):         self.serialize = serialize
0.54 __init__.py(150):         self.unique_for_date = unique_for_date
0.54 __init__.py(151):         self.unique_for_month = unique_for_month
0.54 __init__.py(152):         self.unique_for_year = unique_for_year
0.54 __init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.54 __init__.py(155):         self.choices = choices
0.54 __init__.py(156):         self.help_text = help_text
0.54 __init__.py(157):         self.db_index = db_index
0.54 __init__.py(158):         self.db_column = db_column
0.54 __init__.py(159):         self._db_tablespace = db_tablespace
0.54 __init__.py(160):         self.auto_created = auto_created
0.54 __init__.py(163):         if auto_created:
0.54 __init__.py(167):             self.creation_counter = Field.creation_counter
0.54 __init__.py(168):             Field.creation_counter += 1
0.54 __init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.54 __init__.py(172):         messages = {}
0.54 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.54 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.54 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.54 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.54 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.54 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.54 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.54 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.54 __init__.py(175):         messages.update(error_messages or {})
0.54 __init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.54 __init__.py(177):         self.error_messages = messages
0.54 __init__.py(1007):         super().__init__(*args, **kwargs)
0.54 __init__.py(139):         self.name = name
0.54 __init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.54 __init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.54 __init__.py(142):         self.primary_key = primary_key
0.54 __init__.py(143):         self.max_length, self._unique = max_length, unique
0.54 __init__.py(144):         self.blank, self.null = blank, null
0.54 __init__.py(145):         self.remote_field = rel
0.54 __init__.py(146):         self.is_relation = self.remote_field is not None
0.54 __init__.py(147):         self.default = default
0.54 __init__.py(148):         self.editable = editable
0.54 __init__.py(149):         self.serialize = serialize
0.54 __init__.py(150):         self.unique_for_date = unique_for_date
0.54 __init__.py(151):         self.unique_for_month = unique_for_month
0.54 __init__.py(152):         self.unique_for_year = unique_for_year
0.54 __init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.54 __init__.py(155):         self.choices = choices
0.54 __init__.py(156):         self.help_text = help_text
0.54 __init__.py(157):         self.db_index = db_index
0.54 __init__.py(158):         self.db_column = db_column
0.54 __init__.py(159):         self._db_tablespace = db_tablespace
0.54 __init__.py(160):         self.auto_created = auto_created
0.54 __init__.py(163):         if auto_created:
0.54 __init__.py(167):             self.creation_counter = Field.creation_counter
0.54 __init__.py(168):             Field.creation_counter += 1
0.54 __init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.54 __init__.py(172):         messages = {}
0.54 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.54 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.54 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.54 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.54 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.54 __init__.py(175):         messages.update(error_messages or {})
0.54 __init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.54 __init__.py(177):         self.error_messages = messages
0.54 __init__.py(1008):         self.db_collation = db_collation
0.54 __init__.py(1009):         if self.max_length is not None:
0.54 __init__.py(1010):             self.validators.append(validators.MaxLengthValidator(self.max_length))
0.54 __init__.py(611):         return [*self.default_validators, *self._validators]
0.54 __init__.py(778):         self.set_attributes_from_name(name)
0.54 __init__.py(765):         self.name = self.name or name
0.54 __init__.py(766):         self.attname, self.column = self.get_attname_column()
0.54 __init__.py(806):         attname = self.get_attname()
0.54 __init__.py(803):         return self.name
0.54 __init__.py(807):         column = self.db_column or attname
0.54 __init__.py(808):         return attname, column
0.54 __init__.py(767):         self.concrete = self.column is not None
0.54 __init__.py(768):         if self.verbose_name is None and self.name:
0.54 __init__.py(779):         self.model = cls
0.54 __init__.py(780):         cls._meta.add_field(self, private=private_only)
0.54 __init__.py(781):         if self.column:
0.54 __init__.py(782):             setattr(cls, self.attname, self.descriptor_class(self))
0.54 __init__.py(783):         if self.choices is not None:
0.54 __init__.py(778):         self.set_attributes_from_name(name)
0.54 __init__.py(765):         self.name = self.name or name
0.54 __init__.py(766):         self.attname, self.column = self.get_attname_column()
0.54 __init__.py(767):         self.concrete = self.column is not None
0.54 __init__.py(768):         if self.verbose_name is None and self.name:
0.54 __init__.py(779):         self.model = cls
0.54 __init__.py(780):         cls._meta.add_field(self, private=private_only)
0.54 __init__.py(528):         if isinstance(other, Field):
0.54 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.54 __init__.py(529):             if (
0.54 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.54 __init__.py(781):         if self.column:
0.54 __init__.py(782):             setattr(cls, self.attname, self.descriptor_class(self))
0.54 __init__.py(783):         if self.choices is not None:
0.54 __init__.py(778):         self.set_attributes_from_name(name)
0.54 __init__.py(765):         self.name = self.name or name
0.54 __init__.py(766):         self.attname, self.column = self.get_attname_column()
0.54 __init__.py(806):         attname = self.get_attname()
0.54 __init__.py(803):         return self.name
0.54 __init__.py(807):         column = self.db_column or attname
0.54 __init__.py(808):         return attname, column
0.54 __init__.py(767):         self.concrete = self.column is not None
0.54 __init__.py(768):         if self.verbose_name is None and self.name:
0.54 __init__.py(779):         self.model = cls
0.54 __init__.py(780):         cls._meta.add_field(self, private=private_only)
0.54 __init__.py(528):         if isinstance(other, Field):
0.54 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.54 __init__.py(529):             if (
0.54 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.54 __init__.py(781):         if self.column:
0.54 __init__.py(782):             setattr(cls, self.attname, self.descriptor_class(self))
0.54 __init__.py(783):         if self.choices is not None:
0.54 __init__.py(2509):         return issubclass(subclass, self._subclasses) or super().__subclasscheck__(subclass)
0.54 __init__.py(2503):         return (BigAutoField, SmallAutoField)
0.54 __init__.py(2435):         kwargs['blank'] = True
0.54 __init__.py(2436):         super().__init__(*args, **kwargs)
0.54 __init__.py(139):         self.name = name
0.54 __init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.54 __init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.54 __init__.py(142):         self.primary_key = primary_key
0.54 __init__.py(143):         self.max_length, self._unique = max_length, unique
0.54 __init__.py(144):         self.blank, self.null = blank, null
0.54 __init__.py(145):         self.remote_field = rel
0.54 __init__.py(146):         self.is_relation = self.remote_field is not None
0.54 __init__.py(147):         self.default = default
0.54 __init__.py(148):         self.editable = editable
0.54 __init__.py(149):         self.serialize = serialize
0.54 __init__.py(150):         self.unique_for_date = unique_for_date
0.54 __init__.py(151):         self.unique_for_month = unique_for_month
0.54 __init__.py(152):         self.unique_for_year = unique_for_year
0.54 __init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.54 __init__.py(155):         self.choices = choices
0.54 __init__.py(156):         self.help_text = help_text
0.54 __init__.py(157):         self.db_index = db_index
0.54 __init__.py(158):         self.db_column = db_column
0.54 __init__.py(159):         self._db_tablespace = db_tablespace
0.54 __init__.py(160):         self.auto_created = auto_created
0.54 __init__.py(163):         if auto_created:
0.54 __init__.py(164):             self.creation_counter = Field.auto_creation_counter
0.54 __init__.py(165):             Field.auto_creation_counter -= 1
0.54 __init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.54 __init__.py(172):         messages = {}
0.54 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.54 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.54 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.54 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.54 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.54 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.54 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.54 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.54 __init__.py(175):         messages.update(error_messages or {})
0.54 __init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.54 __init__.py(177):         self.error_messages = messages
0.54 __init__.py(2472):         if cls._meta.auto_field:
0.54 __init__.py(2477):         super().contribute_to_class(cls, name, **kwargs)
0.54 __init__.py(778):         self.set_attributes_from_name(name)
0.54 __init__.py(765):         self.name = self.name or name
0.54 __init__.py(766):         self.attname, self.column = self.get_attname_column()
0.54 __init__.py(806):         attname = self.get_attname()
0.54 __init__.py(803):         return self.name
0.54 __init__.py(807):         column = self.db_column or attname
0.54 __init__.py(808):         return attname, column
0.54 __init__.py(767):         self.concrete = self.column is not None
0.54 __init__.py(768):         if self.verbose_name is None and self.name:
0.54 __init__.py(779):         self.model = cls
0.54 __init__.py(780):         cls._meta.add_field(self, private=private_only)
0.54 __init__.py(528):         if isinstance(other, Field):
0.54 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.54 __init__.py(529):             if (
0.54 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.54 __init__.py(528):         if isinstance(other, Field):
0.54 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.54 __init__.py(529):             if (
0.54 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.54 __init__.py(781):         if self.column:
0.54 __init__.py(782):             setattr(cls, self.attname, self.descriptor_class(self))
0.54 __init__.py(783):         if self.choices is not None:
0.54 __init__.py(2478):         cls._meta.auto_field = self
0.55 __init__.py(1007):         super().__init__(*args, **kwargs)
0.55 __init__.py(139):         self.name = name
0.55 __init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.55 __init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.55 __init__.py(142):         self.primary_key = primary_key
0.55 __init__.py(143):         self.max_length, self._unique = max_length, unique
0.55 __init__.py(144):         self.blank, self.null = blank, null
0.55 __init__.py(145):         self.remote_field = rel
0.55 __init__.py(146):         self.is_relation = self.remote_field is not None
0.55 __init__.py(147):         self.default = default
0.55 __init__.py(148):         self.editable = editable
0.55 __init__.py(149):         self.serialize = serialize
0.55 __init__.py(150):         self.unique_for_date = unique_for_date
0.55 __init__.py(151):         self.unique_for_month = unique_for_month
0.55 __init__.py(152):         self.unique_for_year = unique_for_year
0.55 __init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.55 __init__.py(155):         self.choices = choices
0.55 __init__.py(156):         self.help_text = help_text
0.55 __init__.py(157):         self.db_index = db_index
0.55 __init__.py(158):         self.db_column = db_column
0.55 __init__.py(159):         self._db_tablespace = db_tablespace
0.55 __init__.py(160):         self.auto_created = auto_created
0.55 __init__.py(163):         if auto_created:
0.55 __init__.py(167):             self.creation_counter = Field.creation_counter
0.55 __init__.py(168):             Field.creation_counter += 1
0.55 __init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.55 __init__.py(172):         messages = {}
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(175):         messages.update(error_messages or {})
0.55 __init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.55 __init__.py(177):         self.error_messages = messages
0.55 __init__.py(1008):         self.db_collation = db_collation
0.55 __init__.py(1009):         if self.max_length is not None:
0.55 __init__.py(1010):             self.validators.append(validators.MaxLengthValidator(self.max_length))
0.55 __init__.py(611):         return [*self.default_validators, *self._validators]
0.55 __init__.py(139):         self.name = name
0.55 __init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.55 __init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.55 __init__.py(142):         self.primary_key = primary_key
0.55 __init__.py(143):         self.max_length, self._unique = max_length, unique
0.55 __init__.py(144):         self.blank, self.null = blank, null
0.55 __init__.py(145):         self.remote_field = rel
0.55 __init__.py(146):         self.is_relation = self.remote_field is not None
0.55 __init__.py(147):         self.default = default
0.55 __init__.py(148):         self.editable = editable
0.55 __init__.py(149):         self.serialize = serialize
0.55 __init__.py(150):         self.unique_for_date = unique_for_date
0.55 __init__.py(151):         self.unique_for_month = unique_for_month
0.55 __init__.py(152):         self.unique_for_year = unique_for_year
0.55 __init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.55 __init__.py(155):         self.choices = choices
0.55 __init__.py(156):         self.help_text = help_text
0.55 __init__.py(157):         self.db_index = db_index
0.55 __init__.py(158):         self.db_column = db_column
0.55 __init__.py(159):         self._db_tablespace = db_tablespace
0.55 __init__.py(160):         self.auto_created = auto_created
0.55 __init__.py(163):         if auto_created:
0.55 __init__.py(167):             self.creation_counter = Field.creation_counter
0.55 __init__.py(168):             Field.creation_counter += 1
0.55 __init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.55 __init__.py(172):         messages = {}
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(175):         messages.update(error_messages or {})
0.55 __init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.55 __init__.py(177):         self.error_messages = messages
0.55 __init__.py(778):         self.set_attributes_from_name(name)
0.55 __init__.py(765):         self.name = self.name or name
0.55 __init__.py(766):         self.attname, self.column = self.get_attname_column()
0.55 __init__.py(806):         attname = self.get_attname()
0.55 __init__.py(803):         return self.name
0.55 __init__.py(807):         column = self.db_column or attname
0.55 __init__.py(808):         return attname, column
0.55 __init__.py(767):         self.concrete = self.column is not None
0.55 __init__.py(768):         if self.verbose_name is None and self.name:
0.55 __init__.py(779):         self.model = cls
0.55 __init__.py(780):         cls._meta.add_field(self, private=private_only)
0.55 __init__.py(781):         if self.column:
0.55 __init__.py(782):             setattr(cls, self.attname, self.descriptor_class(self))
0.55 __init__.py(783):         if self.choices is not None:
0.55 __init__.py(778):         self.set_attributes_from_name(name)
0.55 __init__.py(765):         self.name = self.name or name
0.55 __init__.py(766):         self.attname, self.column = self.get_attname_column()
0.55 __init__.py(806):         attname = self.get_attname()
0.55 __init__.py(803):         return self.name
0.55 __init__.py(807):         column = self.db_column or attname
0.55 __init__.py(808):         return attname, column
0.55 __init__.py(767):         self.concrete = self.column is not None
0.55 __init__.py(768):         if self.verbose_name is None and self.name:
0.55 __init__.py(779):         self.model = cls
0.55 __init__.py(780):         cls._meta.add_field(self, private=private_only)
0.55 __init__.py(781):         if self.column:
0.55 __init__.py(782):             setattr(cls, self.attname, self.descriptor_class(self))
0.55 __init__.py(783):         if self.choices is not None:
0.55 __init__.py(754):         return self._db_tablespace or settings.DEFAULT_INDEX_TABLESPACE
0.55 __init__.py(139):         self.name = name
0.55 __init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.55 __init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.55 __init__.py(142):         self.primary_key = primary_key
0.55 __init__.py(143):         self.max_length, self._unique = max_length, unique
0.55 __init__.py(144):         self.blank, self.null = blank, null
0.55 __init__.py(145):         self.remote_field = rel
0.55 __init__.py(146):         self.is_relation = self.remote_field is not None
0.55 __init__.py(147):         self.default = default
0.55 __init__.py(148):         self.editable = editable
0.55 __init__.py(149):         self.serialize = serialize
0.55 __init__.py(150):         self.unique_for_date = unique_for_date
0.55 __init__.py(151):         self.unique_for_month = unique_for_month
0.55 __init__.py(152):         self.unique_for_year = unique_for_year
0.55 __init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.55 __init__.py(155):         self.choices = choices
0.55 __init__.py(156):         self.help_text = help_text
0.55 __init__.py(157):         self.db_index = db_index
0.55 __init__.py(158):         self.db_column = db_column
0.55 __init__.py(159):         self._db_tablespace = db_tablespace
0.55 __init__.py(160):         self.auto_created = auto_created
0.55 __init__.py(163):         if auto_created:
0.55 __init__.py(167):             self.creation_counter = Field.creation_counter
0.55 __init__.py(168):             Field.creation_counter += 1
0.55 __init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.55 __init__.py(172):         messages = {}
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(175):         messages.update(error_messages or {})
0.55 __init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.55 __init__.py(177):         self.error_messages = messages
0.55 __init__.py(754):         return self._db_tablespace or settings.DEFAULT_INDEX_TABLESPACE
0.55 __init__.py(139):         self.name = name
0.55 __init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.55 __init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.55 __init__.py(142):         self.primary_key = primary_key
0.55 __init__.py(143):         self.max_length, self._unique = max_length, unique
0.55 __init__.py(144):         self.blank, self.null = blank, null
0.55 __init__.py(145):         self.remote_field = rel
0.55 __init__.py(146):         self.is_relation = self.remote_field is not None
0.55 __init__.py(147):         self.default = default
0.55 __init__.py(148):         self.editable = editable
0.55 __init__.py(149):         self.serialize = serialize
0.55 __init__.py(150):         self.unique_for_date = unique_for_date
0.55 __init__.py(151):         self.unique_for_month = unique_for_month
0.55 __init__.py(152):         self.unique_for_year = unique_for_year
0.55 __init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.55 __init__.py(155):         self.choices = choices
0.55 __init__.py(156):         self.help_text = help_text
0.55 __init__.py(157):         self.db_index = db_index
0.55 __init__.py(158):         self.db_column = db_column
0.55 __init__.py(159):         self._db_tablespace = db_tablespace
0.55 __init__.py(160):         self.auto_created = auto_created
0.55 __init__.py(163):         if auto_created:
0.55 __init__.py(167):             self.creation_counter = Field.creation_counter
0.55 __init__.py(168):             Field.creation_counter += 1
0.55 __init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.55 __init__.py(172):         messages = {}
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(175):         messages.update(error_messages or {})
0.55 __init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.55 __init__.py(177):         self.error_messages = messages
0.55 __init__.py(778):         self.set_attributes_from_name(name)
0.55 __init__.py(765):         self.name = self.name or name
0.55 __init__.py(766):         self.attname, self.column = self.get_attname_column()
0.55 __init__.py(767):         self.concrete = self.column is not None
0.55 __init__.py(768):         if self.verbose_name is None and self.name:
0.55 __init__.py(769):             self.verbose_name = self.name.replace('_', ' ')
0.55 __init__.py(779):         self.model = cls
0.55 __init__.py(780):         cls._meta.add_field(self, private=private_only)
0.55 __init__.py(781):         if self.column:
0.55 __init__.py(782):             setattr(cls, self.attname, self.descriptor_class(self))
0.55 __init__.py(783):         if self.choices is not None:
0.55 __init__.py(778):         self.set_attributes_from_name(name)
0.55 __init__.py(765):         self.name = self.name or name
0.55 __init__.py(766):         self.attname, self.column = self.get_attname_column()
0.55 __init__.py(767):         self.concrete = self.column is not None
0.55 __init__.py(768):         if self.verbose_name is None and self.name:
0.55 __init__.py(769):             self.verbose_name = self.name.replace('_', ' ')
0.55 __init__.py(779):         self.model = cls
0.55 __init__.py(780):         cls._meta.add_field(self, private=private_only)
0.55 __init__.py(528):         if isinstance(other, Field):
0.55 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.55 __init__.py(529):             if (
0.55 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.55 __init__.py(781):         if self.column:
0.55 __init__.py(782):             setattr(cls, self.attname, self.descriptor_class(self))
0.55 __init__.py(783):         if self.choices is not None:
0.55 __init__.py(2509):         return issubclass(subclass, self._subclasses) or super().__subclasscheck__(subclass)
0.55 __init__.py(2503):         return (BigAutoField, SmallAutoField)
0.55 __init__.py(2435):         kwargs['blank'] = True
0.55 __init__.py(2436):         super().__init__(*args, **kwargs)
0.55 __init__.py(139):         self.name = name
0.55 __init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.55 __init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.55 __init__.py(142):         self.primary_key = primary_key
0.55 __init__.py(143):         self.max_length, self._unique = max_length, unique
0.55 __init__.py(144):         self.blank, self.null = blank, null
0.55 __init__.py(145):         self.remote_field = rel
0.55 __init__.py(146):         self.is_relation = self.remote_field is not None
0.55 __init__.py(147):         self.default = default
0.55 __init__.py(148):         self.editable = editable
0.55 __init__.py(149):         self.serialize = serialize
0.55 __init__.py(150):         self.unique_for_date = unique_for_date
0.55 __init__.py(151):         self.unique_for_month = unique_for_month
0.55 __init__.py(152):         self.unique_for_year = unique_for_year
0.55 __init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.55 __init__.py(155):         self.choices = choices
0.55 __init__.py(156):         self.help_text = help_text
0.55 __init__.py(157):         self.db_index = db_index
0.55 __init__.py(158):         self.db_column = db_column
0.55 __init__.py(159):         self._db_tablespace = db_tablespace
0.55 __init__.py(160):         self.auto_created = auto_created
0.55 __init__.py(163):         if auto_created:
0.55 __init__.py(164):             self.creation_counter = Field.auto_creation_counter
0.55 __init__.py(165):             Field.auto_creation_counter -= 1
0.55 __init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.55 __init__.py(172):         messages = {}
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(175):         messages.update(error_messages or {})
0.55 __init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.55 __init__.py(177):         self.error_messages = messages
0.55 __init__.py(2472):         if cls._meta.auto_field:
0.55 __init__.py(2477):         super().contribute_to_class(cls, name, **kwargs)
0.55 __init__.py(778):         self.set_attributes_from_name(name)
0.55 __init__.py(765):         self.name = self.name or name
0.55 __init__.py(766):         self.attname, self.column = self.get_attname_column()
0.55 __init__.py(806):         attname = self.get_attname()
0.55 __init__.py(803):         return self.name
0.55 __init__.py(807):         column = self.db_column or attname
0.55 __init__.py(808):         return attname, column
0.55 __init__.py(767):         self.concrete = self.column is not None
0.55 __init__.py(768):         if self.verbose_name is None and self.name:
0.55 __init__.py(779):         self.model = cls
0.55 __init__.py(780):         cls._meta.add_field(self, private=private_only)
0.55 __init__.py(528):         if isinstance(other, Field):
0.55 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.55 __init__.py(529):             if (
0.55 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.55 __init__.py(528):         if isinstance(other, Field):
0.55 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.55 __init__.py(529):             if (
0.55 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.55 __init__.py(781):         if self.column:
0.55 __init__.py(782):             setattr(cls, self.attname, self.descriptor_class(self))
0.55 __init__.py(783):         if self.choices is not None:
0.55 __init__.py(2478):         cls._meta.auto_field = self
0.55 __init__.py(2509):         return issubclass(subclass, self._subclasses) or super().__subclasscheck__(subclass)
0.55 __init__.py(2503):         return (BigAutoField, SmallAutoField)
0.55 __init__.py(2435):         kwargs['blank'] = True
0.55 __init__.py(2436):         super().__init__(*args, **kwargs)
0.55 __init__.py(139):         self.name = name
0.55 __init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.55 __init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.55 __init__.py(142):         self.primary_key = primary_key
0.55 __init__.py(143):         self.max_length, self._unique = max_length, unique
0.55 __init__.py(144):         self.blank, self.null = blank, null
0.55 __init__.py(145):         self.remote_field = rel
0.55 __init__.py(146):         self.is_relation = self.remote_field is not None
0.55 __init__.py(147):         self.default = default
0.55 __init__.py(148):         self.editable = editable
0.55 __init__.py(149):         self.serialize = serialize
0.55 __init__.py(150):         self.unique_for_date = unique_for_date
0.55 __init__.py(151):         self.unique_for_month = unique_for_month
0.55 __init__.py(152):         self.unique_for_year = unique_for_year
0.55 __init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.55 __init__.py(155):         self.choices = choices
0.55 __init__.py(156):         self.help_text = help_text
0.55 __init__.py(157):         self.db_index = db_index
0.55 __init__.py(158):         self.db_column = db_column
0.55 __init__.py(159):         self._db_tablespace = db_tablespace
0.55 __init__.py(160):         self.auto_created = auto_created
0.55 __init__.py(163):         if auto_created:
0.55 __init__.py(164):             self.creation_counter = Field.auto_creation_counter
0.55 __init__.py(165):             Field.auto_creation_counter -= 1
0.55 __init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.55 __init__.py(172):         messages = {}
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(175):         messages.update(error_messages or {})
0.55 __init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.55 __init__.py(177):         self.error_messages = messages
0.55 __init__.py(2472):         if cls._meta.auto_field:
0.55 __init__.py(2477):         super().contribute_to_class(cls, name, **kwargs)
0.55 __init__.py(778):         self.set_attributes_from_name(name)
0.55 __init__.py(765):         self.name = self.name or name
0.55 __init__.py(766):         self.attname, self.column = self.get_attname_column()
0.55 __init__.py(806):         attname = self.get_attname()
0.55 __init__.py(803):         return self.name
0.55 __init__.py(807):         column = self.db_column or attname
0.55 __init__.py(808):         return attname, column
0.55 __init__.py(767):         self.concrete = self.column is not None
0.55 __init__.py(768):         if self.verbose_name is None and self.name:
0.55 __init__.py(779):         self.model = cls
0.55 __init__.py(780):         cls._meta.add_field(self, private=private_only)
0.55 __init__.py(528):         if isinstance(other, Field):
0.55 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.55 __init__.py(529):             if (
0.55 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.55 __init__.py(781):         if self.column:
0.55 __init__.py(782):             setattr(cls, self.attname, self.descriptor_class(self))
0.55 __init__.py(783):         if self.choices is not None:
0.55 __init__.py(2478):         cls._meta.auto_field = self
0.55 __init__.py(139):         self.name = name
0.55 __init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.55 __init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.55 __init__.py(142):         self.primary_key = primary_key
0.55 __init__.py(143):         self.max_length, self._unique = max_length, unique
0.55 __init__.py(144):         self.blank, self.null = blank, null
0.55 __init__.py(145):         self.remote_field = rel
0.55 __init__.py(146):         self.is_relation = self.remote_field is not None
0.55 __init__.py(147):         self.default = default
0.55 __init__.py(148):         self.editable = editable
0.55 __init__.py(149):         self.serialize = serialize
0.55 __init__.py(150):         self.unique_for_date = unique_for_date
0.55 __init__.py(151):         self.unique_for_month = unique_for_month
0.55 __init__.py(152):         self.unique_for_year = unique_for_year
0.55 __init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.55 __init__.py(155):         self.choices = choices
0.55 __init__.py(156):         self.help_text = help_text
0.55 __init__.py(157):         self.db_index = db_index
0.55 __init__.py(158):         self.db_column = db_column
0.55 __init__.py(159):         self._db_tablespace = db_tablespace
0.55 __init__.py(160):         self.auto_created = auto_created
0.55 __init__.py(163):         if auto_created:
0.55 __init__.py(167):             self.creation_counter = Field.creation_counter
0.55 __init__.py(168):             Field.creation_counter += 1
0.55 __init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.55 __init__.py(172):         messages = {}
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(175):         messages.update(error_messages or {})
0.55 __init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.55 __init__.py(177):         self.error_messages = messages
0.55 __init__.py(139):         self.name = name
0.55 __init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.55 __init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.55 __init__.py(142):         self.primary_key = primary_key
0.55 __init__.py(143):         self.max_length, self._unique = max_length, unique
0.55 __init__.py(144):         self.blank, self.null = blank, null
0.55 __init__.py(145):         self.remote_field = rel
0.55 __init__.py(146):         self.is_relation = self.remote_field is not None
0.55 __init__.py(147):         self.default = default
0.55 __init__.py(148):         self.editable = editable
0.55 __init__.py(149):         self.serialize = serialize
0.55 __init__.py(150):         self.unique_for_date = unique_for_date
0.55 __init__.py(151):         self.unique_for_month = unique_for_month
0.55 __init__.py(152):         self.unique_for_year = unique_for_year
0.55 __init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.55 __init__.py(155):         self.choices = choices
0.55 __init__.py(156):         self.help_text = help_text
0.55 __init__.py(157):         self.db_index = db_index
0.55 __init__.py(158):         self.db_column = db_column
0.55 __init__.py(159):         self._db_tablespace = db_tablespace
0.55 __init__.py(160):         self.auto_created = auto_created
0.55 __init__.py(163):         if auto_created:
0.55 __init__.py(167):             self.creation_counter = Field.creation_counter
0.55 __init__.py(168):             Field.creation_counter += 1
0.55 __init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.55 __init__.py(172):         messages = {}
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(175):         messages.update(error_messages or {})
0.55 __init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.55 __init__.py(177):         self.error_messages = messages
0.55 __init__.py(139):         self.name = name
0.55 __init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.55 __init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.55 __init__.py(142):         self.primary_key = primary_key
0.55 __init__.py(143):         self.max_length, self._unique = max_length, unique
0.55 __init__.py(144):         self.blank, self.null = blank, null
0.55 __init__.py(145):         self.remote_field = rel
0.55 __init__.py(146):         self.is_relation = self.remote_field is not None
0.55 __init__.py(147):         self.default = default
0.55 __init__.py(148):         self.editable = editable
0.55 __init__.py(149):         self.serialize = serialize
0.55 __init__.py(150):         self.unique_for_date = unique_for_date
0.55 __init__.py(151):         self.unique_for_month = unique_for_month
0.55 __init__.py(152):         self.unique_for_year = unique_for_year
0.55 __init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.55 __init__.py(155):         self.choices = choices
0.55 __init__.py(156):         self.help_text = help_text
0.55 __init__.py(157):         self.db_index = db_index
0.55 __init__.py(158):         self.db_column = db_column
0.55 __init__.py(159):         self._db_tablespace = db_tablespace
0.55 __init__.py(160):         self.auto_created = auto_created
0.55 __init__.py(163):         if auto_created:
0.55 __init__.py(167):             self.creation_counter = Field.creation_counter
0.55 __init__.py(168):             Field.creation_counter += 1
0.55 __init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.55 __init__.py(172):         messages = {}
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(175):         messages.update(error_messages or {})
0.55 __init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.55 __init__.py(177):         self.error_messages = messages
0.55 __init__.py(778):         self.set_attributes_from_name(name)
0.55 __init__.py(765):         self.name = self.name or name
0.55 __init__.py(766):         self.attname, self.column = self.get_attname_column()
0.55 __init__.py(806):         attname = self.get_attname()
0.55 __init__.py(803):         return self.name
0.55 __init__.py(807):         column = self.db_column or attname
0.55 __init__.py(808):         return attname, column
0.55 __init__.py(767):         self.concrete = self.column is not None
0.55 __init__.py(768):         if self.verbose_name is None and self.name:
0.55 __init__.py(779):         self.model = cls
0.55 __init__.py(780):         cls._meta.add_field(self, private=private_only)
0.55 __init__.py(781):         if self.column:
0.55 __init__.py(782):             setattr(cls, self.attname, self.descriptor_class(self))
0.55 __init__.py(783):         if self.choices is not None:
0.55 __init__.py(778):         self.set_attributes_from_name(name)
0.55 __init__.py(765):         self.name = self.name or name
0.55 __init__.py(766):         self.attname, self.column = self.get_attname_column()
0.55 __init__.py(806):         attname = self.get_attname()
0.55 __init__.py(803):         return self.name
0.55 __init__.py(807):         column = self.db_column or attname
0.55 __init__.py(808):         return attname, column
0.55 __init__.py(767):         self.concrete = self.column is not None
0.55 __init__.py(768):         if self.verbose_name is None and self.name:
0.55 __init__.py(779):         self.model = cls
0.55 __init__.py(780):         cls._meta.add_field(self, private=private_only)
0.55 __init__.py(781):         if self.column:
0.55 __init__.py(782):             setattr(cls, self.attname, self.descriptor_class(self))
0.55 __init__.py(783):         if self.choices is not None:
0.55 __init__.py(778):         self.set_attributes_from_name(name)
0.55 __init__.py(765):         self.name = self.name or name
0.55 __init__.py(766):         self.attname, self.column = self.get_attname_column()
0.55 __init__.py(806):         attname = self.get_attname()
0.55 __init__.py(803):         return self.name
0.55 __init__.py(807):         column = self.db_column or attname
0.55 __init__.py(808):         return attname, column
0.55 __init__.py(767):         self.concrete = self.column is not None
0.55 __init__.py(768):         if self.verbose_name is None and self.name:
0.55 __init__.py(779):         self.model = cls
0.55 __init__.py(780):         cls._meta.add_field(self, private=private_only)
0.55 __init__.py(528):         if isinstance(other, Field):
0.55 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.55 __init__.py(529):             if (
0.55 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.55 __init__.py(781):         if self.column:
0.55 __init__.py(782):             setattr(cls, self.attname, self.descriptor_class(self))
0.55 __init__.py(783):         if self.choices is not None:
0.55 __init__.py(1007):         super().__init__(*args, **kwargs)
0.55 __init__.py(139):         self.name = name
0.55 __init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.55 __init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.55 __init__.py(142):         self.primary_key = primary_key
0.55 __init__.py(143):         self.max_length, self._unique = max_length, unique
0.55 __init__.py(144):         self.blank, self.null = blank, null
0.55 __init__.py(145):         self.remote_field = rel
0.55 __init__.py(146):         self.is_relation = self.remote_field is not None
0.55 __init__.py(147):         self.default = default
0.55 __init__.py(148):         self.editable = editable
0.55 __init__.py(149):         self.serialize = serialize
0.55 __init__.py(150):         self.unique_for_date = unique_for_date
0.55 __init__.py(151):         self.unique_for_month = unique_for_month
0.55 __init__.py(152):         self.unique_for_year = unique_for_year
0.55 __init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.55 __init__.py(155):         self.choices = choices
0.55 __init__.py(156):         self.help_text = help_text
0.55 __init__.py(157):         self.db_index = db_index
0.55 __init__.py(158):         self.db_column = db_column
0.55 __init__.py(159):         self._db_tablespace = db_tablespace
0.55 __init__.py(160):         self.auto_created = auto_created
0.55 __init__.py(163):         if auto_created:
0.55 __init__.py(167):             self.creation_counter = Field.creation_counter
0.55 __init__.py(168):             Field.creation_counter += 1
0.55 __init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.55 __init__.py(172):         messages = {}
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(175):         messages.update(error_messages or {})
0.55 __init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.55 __init__.py(177):         self.error_messages = messages
0.55 __init__.py(1008):         self.db_collation = db_collation
0.55 __init__.py(1009):         if self.max_length is not None:
0.55 __init__.py(1010):             self.validators.append(validators.MaxLengthValidator(self.max_length))
0.55 __init__.py(611):         return [*self.default_validators, *self._validators]
0.55 __init__.py(1007):         super().__init__(*args, **kwargs)
0.55 __init__.py(139):         self.name = name
0.55 __init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.55 __init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.55 __init__.py(142):         self.primary_key = primary_key
0.55 __init__.py(143):         self.max_length, self._unique = max_length, unique
0.55 __init__.py(144):         self.blank, self.null = blank, null
0.55 __init__.py(145):         self.remote_field = rel
0.55 __init__.py(146):         self.is_relation = self.remote_field is not None
0.55 __init__.py(147):         self.default = default
0.55 __init__.py(148):         self.editable = editable
0.55 __init__.py(149):         self.serialize = serialize
0.55 __init__.py(150):         self.unique_for_date = unique_for_date
0.55 __init__.py(151):         self.unique_for_month = unique_for_month
0.55 __init__.py(152):         self.unique_for_year = unique_for_year
0.55 __init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.55 __init__.py(155):         self.choices = choices
0.55 __init__.py(156):         self.help_text = help_text
0.55 __init__.py(157):         self.db_index = db_index
0.55 __init__.py(158):         self.db_column = db_column
0.55 __init__.py(159):         self._db_tablespace = db_tablespace
0.55 __init__.py(160):         self.auto_created = auto_created
0.55 __init__.py(163):         if auto_created:
0.55 __init__.py(167):             self.creation_counter = Field.creation_counter
0.55 __init__.py(168):             Field.creation_counter += 1
0.55 __init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.55 __init__.py(172):         messages = {}
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(175):         messages.update(error_messages or {})
0.55 __init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.55 __init__.py(177):         self.error_messages = messages
0.55 __init__.py(1008):         self.db_collation = db_collation
0.55 __init__.py(1009):         if self.max_length is not None:
0.55 __init__.py(1010):             self.validators.append(validators.MaxLengthValidator(self.max_length))
0.55 __init__.py(611):         return [*self.default_validators, *self._validators]
0.55 __init__.py(1007):         super().__init__(*args, **kwargs)
0.55 __init__.py(139):         self.name = name
0.55 __init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.55 __init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.55 __init__.py(142):         self.primary_key = primary_key
0.55 __init__.py(143):         self.max_length, self._unique = max_length, unique
0.55 __init__.py(144):         self.blank, self.null = blank, null
0.55 __init__.py(145):         self.remote_field = rel
0.55 __init__.py(146):         self.is_relation = self.remote_field is not None
0.55 __init__.py(147):         self.default = default
0.55 __init__.py(148):         self.editable = editable
0.55 __init__.py(149):         self.serialize = serialize
0.55 __init__.py(150):         self.unique_for_date = unique_for_date
0.55 __init__.py(151):         self.unique_for_month = unique_for_month
0.55 __init__.py(152):         self.unique_for_year = unique_for_year
0.55 __init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.55 __init__.py(155):         self.choices = choices
0.55 __init__.py(156):         self.help_text = help_text
0.55 __init__.py(157):         self.db_index = db_index
0.55 __init__.py(158):         self.db_column = db_column
0.55 __init__.py(159):         self._db_tablespace = db_tablespace
0.55 __init__.py(160):         self.auto_created = auto_created
0.55 __init__.py(163):         if auto_created:
0.55 __init__.py(167):             self.creation_counter = Field.creation_counter
0.55 __init__.py(168):             Field.creation_counter += 1
0.55 __init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.55 __init__.py(172):         messages = {}
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(175):         messages.update(error_messages or {})
0.55 __init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.55 __init__.py(177):         self.error_messages = messages
0.55 __init__.py(1008):         self.db_collation = db_collation
0.55 __init__.py(1009):         if self.max_length is not None:
0.55 __init__.py(1010):             self.validators.append(validators.MaxLengthValidator(self.max_length))
0.55 __init__.py(611):         return [*self.default_validators, *self._validators]
0.55 __init__.py(1647):         kwargs.setdefault('max_length', 254)
0.55 __init__.py(1648):         super().__init__(*args, **kwargs)
0.55 __init__.py(1007):         super().__init__(*args, **kwargs)
0.55 __init__.py(139):         self.name = name
0.55 __init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.55 __init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.55 __init__.py(142):         self.primary_key = primary_key
0.55 __init__.py(143):         self.max_length, self._unique = max_length, unique
0.55 __init__.py(144):         self.blank, self.null = blank, null
0.55 __init__.py(145):         self.remote_field = rel
0.55 __init__.py(146):         self.is_relation = self.remote_field is not None
0.55 __init__.py(147):         self.default = default
0.55 __init__.py(148):         self.editable = editable
0.55 __init__.py(149):         self.serialize = serialize
0.55 __init__.py(150):         self.unique_for_date = unique_for_date
0.55 __init__.py(151):         self.unique_for_month = unique_for_month
0.55 __init__.py(152):         self.unique_for_year = unique_for_year
0.55 __init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.55 __init__.py(155):         self.choices = choices
0.55 __init__.py(156):         self.help_text = help_text
0.55 __init__.py(157):         self.db_index = db_index
0.55 __init__.py(158):         self.db_column = db_column
0.55 __init__.py(159):         self._db_tablespace = db_tablespace
0.55 __init__.py(160):         self.auto_created = auto_created
0.55 __init__.py(163):         if auto_created:
0.55 __init__.py(167):             self.creation_counter = Field.creation_counter
0.55 __init__.py(168):             Field.creation_counter += 1
0.55 __init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.55 __init__.py(172):         messages = {}
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(175):         messages.update(error_messages or {})
0.55 __init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.55 __init__.py(177):         self.error_messages = messages
0.55 __init__.py(1008):         self.db_collation = db_collation
0.55 __init__.py(1009):         if self.max_length is not None:
0.55 __init__.py(1010):             self.validators.append(validators.MaxLengthValidator(self.max_length))
0.55 __init__.py(611):         return [*self.default_validators, *self._validators]
0.55 __init__.py(139):         self.name = name
0.55 __init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.55 __init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.55 __init__.py(142):         self.primary_key = primary_key
0.55 __init__.py(143):         self.max_length, self._unique = max_length, unique
0.55 __init__.py(144):         self.blank, self.null = blank, null
0.55 __init__.py(145):         self.remote_field = rel
0.55 __init__.py(146):         self.is_relation = self.remote_field is not None
0.55 __init__.py(147):         self.default = default
0.55 __init__.py(148):         self.editable = editable
0.55 __init__.py(149):         self.serialize = serialize
0.55 __init__.py(150):         self.unique_for_date = unique_for_date
0.55 __init__.py(151):         self.unique_for_month = unique_for_month
0.55 __init__.py(152):         self.unique_for_year = unique_for_year
0.55 __init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.55 __init__.py(155):         self.choices = choices
0.55 __init__.py(156):         self.help_text = help_text
0.55 __init__.py(157):         self.db_index = db_index
0.55 __init__.py(158):         self.db_column = db_column
0.55 __init__.py(159):         self._db_tablespace = db_tablespace
0.55 __init__.py(160):         self.auto_created = auto_created
0.55 __init__.py(163):         if auto_created:
0.55 __init__.py(167):             self.creation_counter = Field.creation_counter
0.55 __init__.py(168):             Field.creation_counter += 1
0.55 __init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.55 __init__.py(172):         messages = {}
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(175):         messages.update(error_messages or {})
0.55 __init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.55 __init__.py(177):         self.error_messages = messages
0.55 __init__.py(139):         self.name = name
0.55 __init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.55 __init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.55 __init__.py(142):         self.primary_key = primary_key
0.55 __init__.py(143):         self.max_length, self._unique = max_length, unique
0.55 __init__.py(144):         self.blank, self.null = blank, null
0.55 __init__.py(145):         self.remote_field = rel
0.55 __init__.py(146):         self.is_relation = self.remote_field is not None
0.55 __init__.py(147):         self.default = default
0.55 __init__.py(148):         self.editable = editable
0.55 __init__.py(149):         self.serialize = serialize
0.55 __init__.py(150):         self.unique_for_date = unique_for_date
0.55 __init__.py(151):         self.unique_for_month = unique_for_month
0.55 __init__.py(152):         self.unique_for_year = unique_for_year
0.55 __init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.55 __init__.py(155):         self.choices = choices
0.55 __init__.py(156):         self.help_text = help_text
0.55 __init__.py(157):         self.db_index = db_index
0.55 __init__.py(158):         self.db_column = db_column
0.55 __init__.py(159):         self._db_tablespace = db_tablespace
0.55 __init__.py(160):         self.auto_created = auto_created
0.55 __init__.py(163):         if auto_created:
0.55 __init__.py(167):             self.creation_counter = Field.creation_counter
0.55 __init__.py(168):             Field.creation_counter += 1
0.55 __init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.55 __init__.py(172):         messages = {}
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(175):         messages.update(error_messages or {})
0.55 __init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.55 __init__.py(177):         self.error_messages = messages
0.55 __init__.py(1203):         self.auto_now, self.auto_now_add = auto_now, auto_now_add
0.55 __init__.py(1204):         if auto_now or auto_now_add:
0.55 __init__.py(1207):         super().__init__(verbose_name, name, **kwargs)
0.55 __init__.py(139):         self.name = name
0.55 __init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.55 __init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.55 __init__.py(142):         self.primary_key = primary_key
0.55 __init__.py(143):         self.max_length, self._unique = max_length, unique
0.55 __init__.py(144):         self.blank, self.null = blank, null
0.55 __init__.py(145):         self.remote_field = rel
0.55 __init__.py(146):         self.is_relation = self.remote_field is not None
0.55 __init__.py(147):         self.default = default
0.55 __init__.py(148):         self.editable = editable
0.55 __init__.py(149):         self.serialize = serialize
0.55 __init__.py(150):         self.unique_for_date = unique_for_date
0.55 __init__.py(151):         self.unique_for_month = unique_for_month
0.55 __init__.py(152):         self.unique_for_year = unique_for_year
0.55 __init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.55 __init__.py(155):         self.choices = choices
0.55 __init__.py(156):         self.help_text = help_text
0.55 __init__.py(157):         self.db_index = db_index
0.55 __init__.py(158):         self.db_column = db_column
0.55 __init__.py(159):         self._db_tablespace = db_tablespace
0.55 __init__.py(160):         self.auto_created = auto_created
0.55 __init__.py(163):         if auto_created:
0.55 __init__.py(167):             self.creation_counter = Field.creation_counter
0.55 __init__.py(168):             Field.creation_counter += 1
0.55 __init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.55 __init__.py(172):         messages = {}
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(175):         messages.update(error_messages or {})
0.55 __init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.55 __init__.py(177):         self.error_messages = messages
0.55 __init__.py(778):         self.set_attributes_from_name(name)
0.55 __init__.py(765):         self.name = self.name or name
0.55 __init__.py(766):         self.attname, self.column = self.get_attname_column()
0.55 __init__.py(806):         attname = self.get_attname()
0.55 __init__.py(803):         return self.name
0.55 __init__.py(807):         column = self.db_column or attname
0.55 __init__.py(808):         return attname, column
0.55 __init__.py(767):         self.concrete = self.column is not None
0.55 __init__.py(768):         if self.verbose_name is None and self.name:
0.55 __init__.py(779):         self.model = cls
0.55 __init__.py(780):         cls._meta.add_field(self, private=private_only)
0.55 __init__.py(781):         if self.column:
0.55 __init__.py(782):             setattr(cls, self.attname, self.descriptor_class(self))
0.55 __init__.py(783):         if self.choices is not None:
0.55 __init__.py(778):         self.set_attributes_from_name(name)
0.55 __init__.py(765):         self.name = self.name or name
0.55 __init__.py(766):         self.attname, self.column = self.get_attname_column()
0.55 __init__.py(806):         attname = self.get_attname()
0.55 __init__.py(803):         return self.name
0.55 __init__.py(807):         column = self.db_column or attname
0.55 __init__.py(808):         return attname, column
0.55 __init__.py(767):         self.concrete = self.column is not None
0.55 __init__.py(768):         if self.verbose_name is None and self.name:
0.55 __init__.py(779):         self.model = cls
0.55 __init__.py(780):         cls._meta.add_field(self, private=private_only)
0.55 __init__.py(528):         if isinstance(other, Field):
0.55 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.55 __init__.py(529):             if (
0.55 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.55 __init__.py(781):         if self.column:
0.55 __init__.py(782):             setattr(cls, self.attname, self.descriptor_class(self))
0.55 __init__.py(783):         if self.choices is not None:
0.55 __init__.py(778):         self.set_attributes_from_name(name)
0.55 __init__.py(765):         self.name = self.name or name
0.55 __init__.py(766):         self.attname, self.column = self.get_attname_column()
0.55 __init__.py(806):         attname = self.get_attname()
0.55 __init__.py(803):         return self.name
0.55 __init__.py(807):         column = self.db_column or attname
0.55 __init__.py(808):         return attname, column
0.55 __init__.py(767):         self.concrete = self.column is not None
0.55 __init__.py(768):         if self.verbose_name is None and self.name:
0.55 __init__.py(779):         self.model = cls
0.55 __init__.py(780):         cls._meta.add_field(self, private=private_only)
0.55 __init__.py(528):         if isinstance(other, Field):
0.55 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.55 __init__.py(529):             if (
0.55 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.55 __init__.py(781):         if self.column:
0.55 __init__.py(782):             setattr(cls, self.attname, self.descriptor_class(self))
0.55 __init__.py(783):         if self.choices is not None:
0.55 __init__.py(778):         self.set_attributes_from_name(name)
0.55 __init__.py(765):         self.name = self.name or name
0.55 __init__.py(766):         self.attname, self.column = self.get_attname_column()
0.55 __init__.py(806):         attname = self.get_attname()
0.55 __init__.py(803):         return self.name
0.55 __init__.py(807):         column = self.db_column or attname
0.55 __init__.py(808):         return attname, column
0.55 __init__.py(767):         self.concrete = self.column is not None
0.55 __init__.py(768):         if self.verbose_name is None and self.name:
0.55 __init__.py(779):         self.model = cls
0.55 __init__.py(780):         cls._meta.add_field(self, private=private_only)
0.55 __init__.py(528):         if isinstance(other, Field):
0.55 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.55 __init__.py(529):             if (
0.55 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.55 __init__.py(528):         if isinstance(other, Field):
0.55 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.55 __init__.py(529):             if (
0.55 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.55 __init__.py(781):         if self.column:
0.55 __init__.py(782):             setattr(cls, self.attname, self.descriptor_class(self))
0.55 __init__.py(783):         if self.choices is not None:
0.55 __init__.py(778):         self.set_attributes_from_name(name)
0.55 __init__.py(765):         self.name = self.name or name
0.55 __init__.py(766):         self.attname, self.column = self.get_attname_column()
0.55 __init__.py(806):         attname = self.get_attname()
0.55 __init__.py(803):         return self.name
0.55 __init__.py(807):         column = self.db_column or attname
0.55 __init__.py(808):         return attname, column
0.55 __init__.py(767):         self.concrete = self.column is not None
0.55 __init__.py(768):         if self.verbose_name is None and self.name:
0.55 __init__.py(779):         self.model = cls
0.55 __init__.py(780):         cls._meta.add_field(self, private=private_only)
0.55 __init__.py(528):         if isinstance(other, Field):
0.55 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.55 __init__.py(529):             if (
0.55 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.55 __init__.py(528):         if isinstance(other, Field):
0.55 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.55 __init__.py(529):             if (
0.55 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.55 __init__.py(781):         if self.column:
0.55 __init__.py(782):             setattr(cls, self.attname, self.descriptor_class(self))
0.55 __init__.py(783):         if self.choices is not None:
0.55 __init__.py(778):         self.set_attributes_from_name(name)
0.55 __init__.py(765):         self.name = self.name or name
0.55 __init__.py(766):         self.attname, self.column = self.get_attname_column()
0.55 __init__.py(806):         attname = self.get_attname()
0.55 __init__.py(803):         return self.name
0.55 __init__.py(807):         column = self.db_column or attname
0.55 __init__.py(808):         return attname, column
0.55 __init__.py(767):         self.concrete = self.column is not None
0.55 __init__.py(768):         if self.verbose_name is None and self.name:
0.55 __init__.py(779):         self.model = cls
0.55 __init__.py(780):         cls._meta.add_field(self, private=private_only)
0.55 __init__.py(528):         if isinstance(other, Field):
0.55 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.55 __init__.py(529):             if (
0.55 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.55 __init__.py(528):         if isinstance(other, Field):
0.55 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.55 __init__.py(529):             if (
0.55 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.55 __init__.py(781):         if self.column:
0.55 __init__.py(782):             setattr(cls, self.attname, self.descriptor_class(self))
0.55 __init__.py(783):         if self.choices is not None:
0.55 __init__.py(1281):         super().contribute_to_class(cls, name, **kwargs)
0.55 __init__.py(778):         self.set_attributes_from_name(name)
0.55 __init__.py(765):         self.name = self.name or name
0.55 __init__.py(766):         self.attname, self.column = self.get_attname_column()
0.55 __init__.py(806):         attname = self.get_attname()
0.55 __init__.py(803):         return self.name
0.55 __init__.py(807):         column = self.db_column or attname
0.55 __init__.py(808):         return attname, column
0.55 __init__.py(767):         self.concrete = self.column is not None
0.55 __init__.py(768):         if self.verbose_name is None and self.name:
0.55 __init__.py(779):         self.model = cls
0.55 __init__.py(780):         cls._meta.add_field(self, private=private_only)
0.55 __init__.py(528):         if isinstance(other, Field):
0.55 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.55 __init__.py(529):             if (
0.55 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.55 __init__.py(528):         if isinstance(other, Field):
0.55 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.55 __init__.py(529):             if (
0.55 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.55 __init__.py(781):         if self.column:
0.55 __init__.py(782):             setattr(cls, self.attname, self.descriptor_class(self))
0.55 __init__.py(783):         if self.choices is not None:
0.55 __init__.py(1282):         if not self.null:
0.55 __init__.py(1283):             setattr(
0.55 __init__.py(1284):                 cls, 'get_next_by_%s' % self.name,
0.55 __init__.py(1285):                 partialmethod(cls._get_next_or_previous_by_FIELD, field=self, is_next=True)
0.55 __init__.py(1283):             setattr(
0.55 __init__.py(1287):             setattr(
0.55 __init__.py(1288):                 cls, 'get_previous_by_%s' % self.name,
0.55 __init__.py(1289):                 partialmethod(cls._get_next_or_previous_by_FIELD, field=self, is_next=False)
0.55 __init__.py(1287):             setattr(
0.55 __init__.py(550):         obj = copy.copy(self)
0.55 __init__.py(561):         obj = Empty()
0.55 __init__.py(562):         obj.__class__ = self.__class__
0.55 __init__.py(563):         obj.__dict__ = self.__dict__.copy()
0.55 __init__.py(564):         return obj
0.55 __init__.py(551):         if self.remote_field:
0.55 __init__.py(555):         memodict[id(self)] = obj
0.55 __init__.py(556):         return obj
0.55 __init__.py(778):         self.set_attributes_from_name(name)
0.55 __init__.py(765):         self.name = self.name or name
0.55 __init__.py(766):         self.attname, self.column = self.get_attname_column()
0.55 __init__.py(806):         attname = self.get_attname()
0.55 __init__.py(803):         return self.name
0.55 __init__.py(807):         column = self.db_column or attname
0.55 __init__.py(808):         return attname, column
0.55 __init__.py(767):         self.concrete = self.column is not None
0.55 __init__.py(768):         if self.verbose_name is None and self.name:
0.55 __init__.py(779):         self.model = cls
0.55 __init__.py(780):         cls._meta.add_field(self, private=private_only)
0.55 __init__.py(528):         if isinstance(other, Field):
0.55 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.55 __init__.py(529):             if (
0.55 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.55 __init__.py(518):         if isinstance(other, Field):
0.55 __init__.py(520):                 self.creation_counter == other.creation_counter and
0.55 __init__.py(519):             return (
0.55 __init__.py(528):         if isinstance(other, Field):
0.55 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.55 __init__.py(529):             if (
0.55 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.55 __init__.py(528):         if isinstance(other, Field):
0.55 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.55 __init__.py(529):             if (
0.55 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.55 __init__.py(781):         if self.column:
0.55 __init__.py(782):             setattr(cls, self.attname, self.descriptor_class(self))
0.55 __init__.py(783):         if self.choices is not None:
0.55 __init__.py(550):         obj = copy.copy(self)
0.55 __init__.py(561):         obj = Empty()
0.55 __init__.py(562):         obj.__class__ = self.__class__
0.55 __init__.py(563):         obj.__dict__ = self.__dict__.copy()
0.55 __init__.py(564):         return obj
0.55 __init__.py(551):         if self.remote_field:
0.55 __init__.py(555):         memodict[id(self)] = obj
0.55 __init__.py(556):         return obj
0.55 __init__.py(1281):         super().contribute_to_class(cls, name, **kwargs)
0.55 __init__.py(778):         self.set_attributes_from_name(name)
0.55 __init__.py(765):         self.name = self.name or name
0.55 __init__.py(766):         self.attname, self.column = self.get_attname_column()
0.55 __init__.py(806):         attname = self.get_attname()
0.55 __init__.py(803):         return self.name
0.55 __init__.py(807):         column = self.db_column or attname
0.55 __init__.py(808):         return attname, column
0.55 __init__.py(767):         self.concrete = self.column is not None
0.55 __init__.py(768):         if self.verbose_name is None and self.name:
0.55 __init__.py(779):         self.model = cls
0.55 __init__.py(780):         cls._meta.add_field(self, private=private_only)
0.55 __init__.py(528):         if isinstance(other, Field):
0.55 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.55 __init__.py(529):             if (
0.55 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.55 __init__.py(528):         if isinstance(other, Field):
0.55 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.55 __init__.py(529):             if (
0.55 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.55 __init__.py(528):         if isinstance(other, Field):
0.55 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.55 __init__.py(529):             if (
0.55 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.55 __init__.py(528):         if isinstance(other, Field):
0.55 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.55 __init__.py(529):             if (
0.55 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.55 __init__.py(781):         if self.column:
0.55 __init__.py(782):             setattr(cls, self.attname, self.descriptor_class(self))
0.55 __init__.py(783):         if self.choices is not None:
0.55 __init__.py(1282):         if not self.null:
0.55 __init__.py(550):         obj = copy.copy(self)
0.55 __init__.py(561):         obj = Empty()
0.55 __init__.py(562):         obj.__class__ = self.__class__
0.55 __init__.py(563):         obj.__dict__ = self.__dict__.copy()
0.55 __init__.py(564):         return obj
0.55 __init__.py(551):         if self.remote_field:
0.55 __init__.py(555):         memodict[id(self)] = obj
0.55 __init__.py(556):         return obj
0.55 __init__.py(778):         self.set_attributes_from_name(name)
0.55 __init__.py(765):         self.name = self.name or name
0.55 __init__.py(766):         self.attname, self.column = self.get_attname_column()
0.55 __init__.py(806):         attname = self.get_attname()
0.55 __init__.py(803):         return self.name
0.55 __init__.py(807):         column = self.db_column or attname
0.55 __init__.py(808):         return attname, column
0.55 __init__.py(767):         self.concrete = self.column is not None
0.55 __init__.py(768):         if self.verbose_name is None and self.name:
0.55 __init__.py(779):         self.model = cls
0.55 __init__.py(780):         cls._meta.add_field(self, private=private_only)
0.55 __init__.py(528):         if isinstance(other, Field):
0.55 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.55 __init__.py(529):             if (
0.55 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.55 __init__.py(528):         if isinstance(other, Field):
0.55 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.55 __init__.py(529):             if (
0.55 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.55 __init__.py(528):         if isinstance(other, Field):
0.55 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.55 __init__.py(529):             if (
0.55 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.55 __init__.py(781):         if self.column:
0.55 __init__.py(782):             setattr(cls, self.attname, self.descriptor_class(self))
0.55 __init__.py(783):         if self.choices is not None:
0.55 __init__.py(550):         obj = copy.copy(self)
0.55 __init__.py(561):         obj = Empty()
0.55 __init__.py(562):         obj.__class__ = self.__class__
0.55 __init__.py(563):         obj.__dict__ = self.__dict__.copy()
0.55 __init__.py(564):         return obj
0.55 __init__.py(551):         if self.remote_field:
0.55 __init__.py(552):             obj.remote_field = copy.copy(self.remote_field)
0.55 __init__.py(553):             if hasattr(self.remote_field, 'field') and self.remote_field.field is self:
0.55 __init__.py(554):                 obj.remote_field.field = obj
0.55 __init__.py(555):         memodict[id(self)] = obj
0.55 __init__.py(556):         return obj
0.55 __init__.py(778):         self.set_attributes_from_name(name)
0.55 __init__.py(765):         self.name = self.name or name
0.55 __init__.py(766):         self.attname, self.column = self.get_attname_column()
0.55 __init__.py(806):         attname = self.get_attname()
0.55 __init__.py(803):         return self.name
0.55 __init__.py(807):         column = self.db_column or attname
0.55 __init__.py(808):         return attname, column
0.55 __init__.py(767):         self.concrete = self.column is not None
0.55 __init__.py(768):         if self.verbose_name is None and self.name:
0.55 __init__.py(779):         self.model = cls
0.55 __init__.py(780):         cls._meta.add_field(self, private=private_only)
0.55 __init__.py(781):         if self.column:
0.55 __init__.py(782):             setattr(cls, self.attname, self.descriptor_class(self))
0.55 __init__.py(783):         if self.choices is not None:
0.55 __init__.py(550):         obj = copy.copy(self)
0.55 __init__.py(561):         obj = Empty()
0.55 __init__.py(562):         obj.__class__ = self.__class__
0.55 __init__.py(563):         obj.__dict__ = self.__dict__.copy()
0.55 __init__.py(564):         return obj
0.55 __init__.py(551):         if self.remote_field:
0.55 __init__.py(552):             obj.remote_field = copy.copy(self.remote_field)
0.55 __init__.py(553):             if hasattr(self.remote_field, 'field') and self.remote_field.field is self:
0.55 __init__.py(554):                 obj.remote_field.field = obj
0.55 __init__.py(555):         memodict[id(self)] = obj
0.55 __init__.py(556):         return obj
0.55 __init__.py(778):         self.set_attributes_from_name(name)
0.55 __init__.py(765):         self.name = self.name or name
0.55 __init__.py(766):         self.attname, self.column = self.get_attname_column()
0.55 __init__.py(806):         attname = self.get_attname()
0.55 __init__.py(803):         return self.name
0.55 __init__.py(807):         column = self.db_column or attname
0.55 __init__.py(808):         return attname, column
0.55 __init__.py(767):         self.concrete = self.column is not None
0.55 __init__.py(768):         if self.verbose_name is None and self.name:
0.55 __init__.py(779):         self.model = cls
0.55 __init__.py(780):         cls._meta.add_field(self, private=private_only)
0.55 __init__.py(528):         if isinstance(other, Field):
0.55 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.55 __init__.py(529):             if (
0.55 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.55 __init__.py(781):         if self.column:
0.55 __init__.py(782):             setattr(cls, self.attname, self.descriptor_class(self))
0.55 __init__.py(783):         if self.choices is not None:
0.55 __init__.py(550):         obj = copy.copy(self)
0.55 __init__.py(561):         obj = Empty()
0.55 __init__.py(562):         obj.__class__ = self.__class__
0.55 __init__.py(563):         obj.__dict__ = self.__dict__.copy()
0.55 __init__.py(564):         return obj
0.55 __init__.py(551):         if self.remote_field:
0.55 __init__.py(555):         memodict[id(self)] = obj
0.55 __init__.py(556):         return obj
0.55 __init__.py(778):         self.set_attributes_from_name(name)
0.55 __init__.py(765):         self.name = self.name or name
0.55 __init__.py(766):         self.attname, self.column = self.get_attname_column()
0.55 __init__.py(806):         attname = self.get_attname()
0.55 __init__.py(803):         return self.name
0.55 __init__.py(807):         column = self.db_column or attname
0.55 __init__.py(808):         return attname, column
0.55 __init__.py(767):         self.concrete = self.column is not None
0.55 __init__.py(768):         if self.verbose_name is None and self.name:
0.55 __init__.py(779):         self.model = cls
0.55 __init__.py(780):         cls._meta.add_field(self, private=private_only)
0.55 __init__.py(781):         if self.column:
0.55 __init__.py(782):             setattr(cls, self.attname, self.descriptor_class(self))
0.55 __init__.py(783):         if self.choices is not None:
0.55 __init__.py(550):         obj = copy.copy(self)
0.55 __init__.py(561):         obj = Empty()
0.55 __init__.py(562):         obj.__class__ = self.__class__
0.55 __init__.py(563):         obj.__dict__ = self.__dict__.copy()
0.55 __init__.py(564):         return obj
0.55 __init__.py(551):         if self.remote_field:
0.55 __init__.py(555):         memodict[id(self)] = obj
0.55 __init__.py(556):         return obj
0.55 __init__.py(1281):         super().contribute_to_class(cls, name, **kwargs)
0.55 __init__.py(778):         self.set_attributes_from_name(name)
0.55 __init__.py(765):         self.name = self.name or name
0.55 __init__.py(766):         self.attname, self.column = self.get_attname_column()
0.55 __init__.py(806):         attname = self.get_attname()
0.55 __init__.py(803):         return self.name
0.55 __init__.py(807):         column = self.db_column or attname
0.55 __init__.py(808):         return attname, column
0.55 __init__.py(767):         self.concrete = self.column is not None
0.55 __init__.py(768):         if self.verbose_name is None and self.name:
0.55 __init__.py(779):         self.model = cls
0.55 __init__.py(780):         cls._meta.add_field(self, private=private_only)
0.55 __init__.py(528):         if isinstance(other, Field):
0.55 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.55 __init__.py(529):             if (
0.55 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.55 __init__.py(781):         if self.column:
0.55 __init__.py(782):             setattr(cls, self.attname, self.descriptor_class(self))
0.55 __init__.py(783):         if self.choices is not None:
0.55 __init__.py(1282):         if not self.null:
0.55 __init__.py(550):         obj = copy.copy(self)
0.55 __init__.py(561):         obj = Empty()
0.55 __init__.py(562):         obj.__class__ = self.__class__
0.55 __init__.py(563):         obj.__dict__ = self.__dict__.copy()
0.55 __init__.py(564):         return obj
0.55 __init__.py(551):         if self.remote_field:
0.55 __init__.py(555):         memodict[id(self)] = obj
0.55 __init__.py(556):         return obj
0.55 __init__.py(778):         self.set_attributes_from_name(name)
0.55 __init__.py(765):         self.name = self.name or name
0.55 __init__.py(766):         self.attname, self.column = self.get_attname_column()
0.55 __init__.py(806):         attname = self.get_attname()
0.55 __init__.py(803):         return self.name
0.55 __init__.py(807):         column = self.db_column or attname
0.55 __init__.py(808):         return attname, column
0.55 __init__.py(767):         self.concrete = self.column is not None
0.55 __init__.py(768):         if self.verbose_name is None and self.name:
0.55 __init__.py(779):         self.model = cls
0.55 __init__.py(780):         cls._meta.add_field(self, private=private_only)
0.55 __init__.py(528):         if isinstance(other, Field):
0.55 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.55 __init__.py(529):             if (
0.55 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.55 __init__.py(781):         if self.column:
0.55 __init__.py(782):             setattr(cls, self.attname, self.descriptor_class(self))
0.55 __init__.py(783):         if self.choices is not None:
0.55 __init__.py(550):         obj = copy.copy(self)
0.55 __init__.py(561):         obj = Empty()
0.55 __init__.py(562):         obj.__class__ = self.__class__
0.55 __init__.py(563):         obj.__dict__ = self.__dict__.copy()
0.55 __init__.py(564):         return obj
0.55 __init__.py(551):         if self.remote_field:
0.55 __init__.py(555):         memodict[id(self)] = obj
0.55 __init__.py(556):         return obj
0.55 __init__.py(778):         self.set_attributes_from_name(name)
0.55 __init__.py(765):         self.name = self.name or name
0.55 __init__.py(766):         self.attname, self.column = self.get_attname_column()
0.55 __init__.py(806):         attname = self.get_attname()
0.55 __init__.py(803):         return self.name
0.55 __init__.py(807):         column = self.db_column or attname
0.55 __init__.py(808):         return attname, column
0.55 __init__.py(767):         self.concrete = self.column is not None
0.55 __init__.py(768):         if self.verbose_name is None and self.name:
0.55 __init__.py(779):         self.model = cls
0.55 __init__.py(780):         cls._meta.add_field(self, private=private_only)
0.55 __init__.py(528):         if isinstance(other, Field):
0.55 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.55 __init__.py(529):             if (
0.55 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.55 __init__.py(528):         if isinstance(other, Field):
0.55 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.55 __init__.py(529):             if (
0.55 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.55 __init__.py(781):         if self.column:
0.55 __init__.py(782):             setattr(cls, self.attname, self.descriptor_class(self))
0.55 __init__.py(783):         if self.choices is not None:
0.55 __init__.py(550):         obj = copy.copy(self)
0.55 __init__.py(561):         obj = Empty()
0.55 __init__.py(562):         obj.__class__ = self.__class__
0.55 __init__.py(563):         obj.__dict__ = self.__dict__.copy()
0.55 __init__.py(564):         return obj
0.55 __init__.py(551):         if self.remote_field:
0.55 __init__.py(555):         memodict[id(self)] = obj
0.55 __init__.py(556):         return obj
0.55 __init__.py(778):         self.set_attributes_from_name(name)
0.55 __init__.py(765):         self.name = self.name or name
0.55 __init__.py(766):         self.attname, self.column = self.get_attname_column()
0.55 __init__.py(806):         attname = self.get_attname()
0.55 __init__.py(803):         return self.name
0.55 __init__.py(807):         column = self.db_column or attname
0.55 __init__.py(808):         return attname, column
0.55 __init__.py(767):         self.concrete = self.column is not None
0.55 __init__.py(768):         if self.verbose_name is None and self.name:
0.55 __init__.py(779):         self.model = cls
0.55 __init__.py(780):         cls._meta.add_field(self, private=private_only)
0.55 __init__.py(528):         if isinstance(other, Field):
0.55 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.55 __init__.py(529):             if (
0.55 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.55 __init__.py(528):         if isinstance(other, Field):
0.55 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.55 __init__.py(529):             if (
0.55 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.55 __init__.py(781):         if self.column:
0.55 __init__.py(782):             setattr(cls, self.attname, self.descriptor_class(self))
0.55 __init__.py(783):         if self.choices is not None:
0.55 __init__.py(550):         obj = copy.copy(self)
0.55 __init__.py(561):         obj = Empty()
0.55 __init__.py(562):         obj.__class__ = self.__class__
0.55 __init__.py(563):         obj.__dict__ = self.__dict__.copy()
0.55 __init__.py(564):         return obj
0.55 __init__.py(551):         if self.remote_field:
0.55 __init__.py(555):         memodict[id(self)] = obj
0.55 __init__.py(556):         return obj
0.55 __init__.py(778):         self.set_attributes_from_name(name)
0.55 __init__.py(765):         self.name = self.name or name
0.55 __init__.py(766):         self.attname, self.column = self.get_attname_column()
0.55 __init__.py(806):         attname = self.get_attname()
0.55 __init__.py(803):         return self.name
0.55 __init__.py(807):         column = self.db_column or attname
0.55 __init__.py(808):         return attname, column
0.55 __init__.py(767):         self.concrete = self.column is not None
0.55 __init__.py(768):         if self.verbose_name is None and self.name:
0.55 __init__.py(779):         self.model = cls
0.55 __init__.py(780):         cls._meta.add_field(self, private=private_only)
0.55 __init__.py(528):         if isinstance(other, Field):
0.55 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.55 __init__.py(529):             if (
0.55 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.55 __init__.py(528):         if isinstance(other, Field):
0.55 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.55 __init__.py(529):             if (
0.55 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.55 __init__.py(781):         if self.column:
0.55 __init__.py(782):             setattr(cls, self.attname, self.descriptor_class(self))
0.55 __init__.py(783):         if self.choices is not None:
0.55 __init__.py(550):         obj = copy.copy(self)
0.55 __init__.py(561):         obj = Empty()
0.55 __init__.py(562):         obj.__class__ = self.__class__
0.55 __init__.py(563):         obj.__dict__ = self.__dict__.copy()
0.55 __init__.py(564):         return obj
0.55 __init__.py(551):         if self.remote_field:
0.55 __init__.py(555):         memodict[id(self)] = obj
0.55 __init__.py(556):         return obj
0.55 __init__.py(778):         self.set_attributes_from_name(name)
0.55 __init__.py(765):         self.name = self.name or name
0.55 __init__.py(766):         self.attname, self.column = self.get_attname_column()
0.55 __init__.py(806):         attname = self.get_attname()
0.55 __init__.py(803):         return self.name
0.55 __init__.py(807):         column = self.db_column or attname
0.55 __init__.py(808):         return attname, column
0.55 __init__.py(767):         self.concrete = self.column is not None
0.55 __init__.py(768):         if self.verbose_name is None and self.name:
0.55 __init__.py(779):         self.model = cls
0.55 __init__.py(780):         cls._meta.add_field(self, private=private_only)
0.55 __init__.py(528):         if isinstance(other, Field):
0.55 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.55 __init__.py(529):             if (
0.55 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.55 __init__.py(528):         if isinstance(other, Field):
0.55 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.55 __init__.py(529):             if (
0.55 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.55 __init__.py(781):         if self.column:
0.55 __init__.py(782):             setattr(cls, self.attname, self.descriptor_class(self))
0.55 __init__.py(783):         if self.choices is not None:
0.55 __init__.py(550):         obj = copy.copy(self)
0.55 __init__.py(561):         obj = Empty()
0.55 __init__.py(562):         obj.__class__ = self.__class__
0.55 __init__.py(563):         obj.__dict__ = self.__dict__.copy()
0.55 __init__.py(564):         return obj
0.55 __init__.py(551):         if self.remote_field:
0.55 __init__.py(555):         memodict[id(self)] = obj
0.55 __init__.py(556):         return obj
0.55 __init__.py(778):         self.set_attributes_from_name(name)
0.55 __init__.py(765):         self.name = self.name or name
0.55 __init__.py(766):         self.attname, self.column = self.get_attname_column()
0.55 __init__.py(806):         attname = self.get_attname()
0.55 __init__.py(803):         return self.name
0.55 __init__.py(807):         column = self.db_column or attname
0.55 __init__.py(808):         return attname, column
0.55 __init__.py(767):         self.concrete = self.column is not None
0.55 __init__.py(768):         if self.verbose_name is None and self.name:
0.55 __init__.py(779):         self.model = cls
0.55 __init__.py(780):         cls._meta.add_field(self, private=private_only)
0.55 __init__.py(528):         if isinstance(other, Field):
0.55 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.55 __init__.py(529):             if (
0.55 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.55 __init__.py(528):         if isinstance(other, Field):
0.55 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.55 __init__.py(529):             if (
0.55 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.55 __init__.py(528):         if isinstance(other, Field):
0.55 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.55 __init__.py(529):             if (
0.55 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.55 __init__.py(781):         if self.column:
0.55 __init__.py(782):             setattr(cls, self.attname, self.descriptor_class(self))
0.55 __init__.py(783):         if self.choices is not None:
0.55 __init__.py(550):         obj = copy.copy(self)
0.55 __init__.py(561):         obj = Empty()
0.55 __init__.py(562):         obj.__class__ = self.__class__
0.55 __init__.py(563):         obj.__dict__ = self.__dict__.copy()
0.55 __init__.py(564):         return obj
0.55 __init__.py(551):         if self.remote_field:
0.55 __init__.py(555):         memodict[id(self)] = obj
0.55 __init__.py(556):         return obj
0.55 __init__.py(778):         self.set_attributes_from_name(name)
0.55 __init__.py(765):         self.name = self.name or name
0.55 __init__.py(766):         self.attname, self.column = self.get_attname_column()
0.55 __init__.py(806):         attname = self.get_attname()
0.55 __init__.py(803):         return self.name
0.55 __init__.py(807):         column = self.db_column or attname
0.55 __init__.py(808):         return attname, column
0.55 __init__.py(767):         self.concrete = self.column is not None
0.55 __init__.py(768):         if self.verbose_name is None and self.name:
0.55 __init__.py(779):         self.model = cls
0.55 __init__.py(780):         cls._meta.add_field(self, private=private_only)
0.55 __init__.py(528):         if isinstance(other, Field):
0.55 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.55 __init__.py(529):             if (
0.55 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.55 __init__.py(528):         if isinstance(other, Field):
0.55 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.55 __init__.py(529):             if (
0.55 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.55 __init__.py(528):         if isinstance(other, Field):
0.55 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.55 __init__.py(529):             if (
0.55 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.55 __init__.py(781):         if self.column:
0.55 __init__.py(782):             setattr(cls, self.attname, self.descriptor_class(self))
0.55 __init__.py(783):         if self.choices is not None:
0.55 __init__.py(550):         obj = copy.copy(self)
0.55 __init__.py(561):         obj = Empty()
0.55 __init__.py(562):         obj.__class__ = self.__class__
0.55 __init__.py(563):         obj.__dict__ = self.__dict__.copy()
0.55 __init__.py(564):         return obj
0.55 __init__.py(551):         if self.remote_field:
0.55 __init__.py(555):         memodict[id(self)] = obj
0.55 __init__.py(556):         return obj
0.55 __init__.py(1281):         super().contribute_to_class(cls, name, **kwargs)
0.55 __init__.py(778):         self.set_attributes_from_name(name)
0.55 __init__.py(765):         self.name = self.name or name
0.55 __init__.py(766):         self.attname, self.column = self.get_attname_column()
0.55 __init__.py(806):         attname = self.get_attname()
0.55 __init__.py(803):         return self.name
0.55 __init__.py(807):         column = self.db_column or attname
0.55 __init__.py(808):         return attname, column
0.55 __init__.py(767):         self.concrete = self.column is not None
0.55 __init__.py(768):         if self.verbose_name is None and self.name:
0.55 __init__.py(779):         self.model = cls
0.55 __init__.py(780):         cls._meta.add_field(self, private=private_only)
0.55 __init__.py(528):         if isinstance(other, Field):
0.55 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.55 __init__.py(529):             if (
0.55 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.55 __init__.py(528):         if isinstance(other, Field):
0.55 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.55 __init__.py(529):             if (
0.55 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.55 __init__.py(528):         if isinstance(other, Field):
0.55 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.55 __init__.py(529):             if (
0.55 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.55 __init__.py(781):         if self.column:
0.55 __init__.py(782):             setattr(cls, self.attname, self.descriptor_class(self))
0.55 __init__.py(783):         if self.choices is not None:
0.55 __init__.py(1282):         if not self.null:
0.55 __init__.py(1283):             setattr(
0.55 __init__.py(1284):                 cls, 'get_next_by_%s' % self.name,
0.55 __init__.py(1285):                 partialmethod(cls._get_next_or_previous_by_FIELD, field=self, is_next=True)
0.55 __init__.py(1283):             setattr(
0.55 __init__.py(1287):             setattr(
0.55 __init__.py(1288):                 cls, 'get_previous_by_%s' % self.name,
0.55 __init__.py(1289):                 partialmethod(cls._get_next_or_previous_by_FIELD, field=self, is_next=False)
0.55 __init__.py(1287):             setattr(
0.55 __init__.py(550):         obj = copy.copy(self)
0.55 __init__.py(561):         obj = Empty()
0.55 __init__.py(562):         obj.__class__ = self.__class__
0.55 __init__.py(563):         obj.__dict__ = self.__dict__.copy()
0.55 __init__.py(564):         return obj
0.55 __init__.py(551):         if self.remote_field:
0.55 __init__.py(552):             obj.remote_field = copy.copy(self.remote_field)
0.55 __init__.py(553):             if hasattr(self.remote_field, 'field') and self.remote_field.field is self:
0.55 __init__.py(554):                 obj.remote_field.field = obj
0.55 __init__.py(555):         memodict[id(self)] = obj
0.55 __init__.py(556):         return obj
0.55 __init__.py(778):         self.set_attributes_from_name(name)
0.55 __init__.py(765):         self.name = self.name or name
0.55 __init__.py(766):         self.attname, self.column = self.get_attname_column()
0.55 __init__.py(806):         attname = self.get_attname()
0.55 __init__.py(803):         return self.name
0.55 __init__.py(807):         column = self.db_column or attname
0.55 __init__.py(808):         return attname, column
0.55 __init__.py(767):         self.concrete = self.column is not None
0.55 __init__.py(768):         if self.verbose_name is None and self.name:
0.55 __init__.py(779):         self.model = cls
0.55 __init__.py(780):         cls._meta.add_field(self, private=private_only)
0.55 __init__.py(781):         if self.column:
0.55 __init__.py(782):             setattr(cls, self.attname, self.descriptor_class(self))
0.55 __init__.py(783):         if self.choices is not None:
0.55 __init__.py(754):         return self._db_tablespace or settings.DEFAULT_INDEX_TABLESPACE
0.55 __init__.py(139):         self.name = name
0.55 __init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.55 __init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.55 __init__.py(142):         self.primary_key = primary_key
0.55 __init__.py(143):         self.max_length, self._unique = max_length, unique
0.55 __init__.py(144):         self.blank, self.null = blank, null
0.55 __init__.py(145):         self.remote_field = rel
0.55 __init__.py(146):         self.is_relation = self.remote_field is not None
0.55 __init__.py(147):         self.default = default
0.55 __init__.py(148):         self.editable = editable
0.55 __init__.py(149):         self.serialize = serialize
0.55 __init__.py(150):         self.unique_for_date = unique_for_date
0.55 __init__.py(151):         self.unique_for_month = unique_for_month
0.55 __init__.py(152):         self.unique_for_year = unique_for_year
0.55 __init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.55 __init__.py(155):         self.choices = choices
0.55 __init__.py(156):         self.help_text = help_text
0.55 __init__.py(157):         self.db_index = db_index
0.55 __init__.py(158):         self.db_column = db_column
0.55 __init__.py(159):         self._db_tablespace = db_tablespace
0.55 __init__.py(160):         self.auto_created = auto_created
0.55 __init__.py(163):         if auto_created:
0.55 __init__.py(167):             self.creation_counter = Field.creation_counter
0.55 __init__.py(168):             Field.creation_counter += 1
0.55 __init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.55 __init__.py(172):         messages = {}
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(175):         messages.update(error_messages or {})
0.55 __init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.55 __init__.py(177):         self.error_messages = messages
0.55 __init__.py(754):         return self._db_tablespace or settings.DEFAULT_INDEX_TABLESPACE
0.55 __init__.py(139):         self.name = name
0.55 __init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.55 __init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.55 __init__.py(142):         self.primary_key = primary_key
0.55 __init__.py(143):         self.max_length, self._unique = max_length, unique
0.55 __init__.py(144):         self.blank, self.null = blank, null
0.55 __init__.py(145):         self.remote_field = rel
0.55 __init__.py(146):         self.is_relation = self.remote_field is not None
0.55 __init__.py(147):         self.default = default
0.55 __init__.py(148):         self.editable = editable
0.55 __init__.py(149):         self.serialize = serialize
0.55 __init__.py(150):         self.unique_for_date = unique_for_date
0.55 __init__.py(151):         self.unique_for_month = unique_for_month
0.55 __init__.py(152):         self.unique_for_year = unique_for_year
0.55 __init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.55 __init__.py(155):         self.choices = choices
0.55 __init__.py(156):         self.help_text = help_text
0.55 __init__.py(157):         self.db_index = db_index
0.55 __init__.py(158):         self.db_column = db_column
0.55 __init__.py(159):         self._db_tablespace = db_tablespace
0.55 __init__.py(160):         self.auto_created = auto_created
0.55 __init__.py(163):         if auto_created:
0.55 __init__.py(167):             self.creation_counter = Field.creation_counter
0.55 __init__.py(168):             Field.creation_counter += 1
0.55 __init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.55 __init__.py(172):         messages = {}
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(175):         messages.update(error_messages or {})
0.55 __init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.55 __init__.py(177):         self.error_messages = messages
0.55 __init__.py(778):         self.set_attributes_from_name(name)
0.55 __init__.py(765):         self.name = self.name or name
0.55 __init__.py(766):         self.attname, self.column = self.get_attname_column()
0.55 __init__.py(767):         self.concrete = self.column is not None
0.55 __init__.py(768):         if self.verbose_name is None and self.name:
0.55 __init__.py(769):             self.verbose_name = self.name.replace('_', ' ')
0.55 __init__.py(779):         self.model = cls
0.55 __init__.py(780):         cls._meta.add_field(self, private=private_only)
0.55 __init__.py(781):         if self.column:
0.55 __init__.py(782):             setattr(cls, self.attname, self.descriptor_class(self))
0.55 __init__.py(783):         if self.choices is not None:
0.55 __init__.py(778):         self.set_attributes_from_name(name)
0.55 __init__.py(765):         self.name = self.name or name
0.55 __init__.py(766):         self.attname, self.column = self.get_attname_column()
0.55 __init__.py(767):         self.concrete = self.column is not None
0.55 __init__.py(768):         if self.verbose_name is None and self.name:
0.55 __init__.py(769):             self.verbose_name = self.name.replace('_', ' ')
0.55 __init__.py(779):         self.model = cls
0.55 __init__.py(780):         cls._meta.add_field(self, private=private_only)
0.55 __init__.py(528):         if isinstance(other, Field):
0.55 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.55 __init__.py(529):             if (
0.55 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.55 __init__.py(781):         if self.column:
0.55 __init__.py(782):             setattr(cls, self.attname, self.descriptor_class(self))
0.55 __init__.py(783):         if self.choices is not None:
0.55 __init__.py(2509):         return issubclass(subclass, self._subclasses) or super().__subclasscheck__(subclass)
0.55 __init__.py(2503):         return (BigAutoField, SmallAutoField)
0.55 __init__.py(2435):         kwargs['blank'] = True
0.55 __init__.py(2436):         super().__init__(*args, **kwargs)
0.55 __init__.py(139):         self.name = name
0.55 __init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.55 __init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.55 __init__.py(142):         self.primary_key = primary_key
0.55 __init__.py(143):         self.max_length, self._unique = max_length, unique
0.55 __init__.py(144):         self.blank, self.null = blank, null
0.55 __init__.py(145):         self.remote_field = rel
0.55 __init__.py(146):         self.is_relation = self.remote_field is not None
0.55 __init__.py(147):         self.default = default
0.55 __init__.py(148):         self.editable = editable
0.55 __init__.py(149):         self.serialize = serialize
0.55 __init__.py(150):         self.unique_for_date = unique_for_date
0.55 __init__.py(151):         self.unique_for_month = unique_for_month
0.55 __init__.py(152):         self.unique_for_year = unique_for_year
0.55 __init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.55 __init__.py(155):         self.choices = choices
0.55 __init__.py(156):         self.help_text = help_text
0.55 __init__.py(157):         self.db_index = db_index
0.55 __init__.py(158):         self.db_column = db_column
0.55 __init__.py(159):         self._db_tablespace = db_tablespace
0.55 __init__.py(160):         self.auto_created = auto_created
0.55 __init__.py(163):         if auto_created:
0.55 __init__.py(164):             self.creation_counter = Field.auto_creation_counter
0.55 __init__.py(165):             Field.auto_creation_counter -= 1
0.55 __init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.55 __init__.py(172):         messages = {}
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(175):         messages.update(error_messages or {})
0.55 __init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.55 __init__.py(177):         self.error_messages = messages
0.55 __init__.py(2472):         if cls._meta.auto_field:
0.55 __init__.py(2477):         super().contribute_to_class(cls, name, **kwargs)
0.55 __init__.py(778):         self.set_attributes_from_name(name)
0.55 __init__.py(765):         self.name = self.name or name
0.55 __init__.py(766):         self.attname, self.column = self.get_attname_column()
0.55 __init__.py(806):         attname = self.get_attname()
0.55 __init__.py(803):         return self.name
0.55 __init__.py(807):         column = self.db_column or attname
0.55 __init__.py(808):         return attname, column
0.55 __init__.py(767):         self.concrete = self.column is not None
0.55 __init__.py(768):         if self.verbose_name is None and self.name:
0.55 __init__.py(779):         self.model = cls
0.55 __init__.py(780):         cls._meta.add_field(self, private=private_only)
0.55 __init__.py(528):         if isinstance(other, Field):
0.55 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.55 __init__.py(529):             if (
0.55 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.55 __init__.py(528):         if isinstance(other, Field):
0.55 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.55 __init__.py(529):             if (
0.55 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.55 __init__.py(781):         if self.column:
0.55 __init__.py(782):             setattr(cls, self.attname, self.descriptor_class(self))
0.55 __init__.py(783):         if self.choices is not None:
0.55 __init__.py(2478):         cls._meta.auto_field = self
0.55 __init__.py(550):         obj = copy.copy(self)
0.55 __init__.py(561):         obj = Empty()
0.55 __init__.py(562):         obj.__class__ = self.__class__
0.55 __init__.py(563):         obj.__dict__ = self.__dict__.copy()
0.55 __init__.py(564):         return obj
0.55 __init__.py(551):         if self.remote_field:
0.55 __init__.py(552):             obj.remote_field = copy.copy(self.remote_field)
0.55 __init__.py(553):             if hasattr(self.remote_field, 'field') and self.remote_field.field is self:
0.55 __init__.py(554):                 obj.remote_field.field = obj
0.55 __init__.py(555):         memodict[id(self)] = obj
0.55 __init__.py(556):         return obj
0.55 __init__.py(778):         self.set_attributes_from_name(name)
0.55 __init__.py(765):         self.name = self.name or name
0.55 __init__.py(766):         self.attname, self.column = self.get_attname_column()
0.55 __init__.py(806):         attname = self.get_attname()
0.55 __init__.py(803):         return self.name
0.55 __init__.py(807):         column = self.db_column or attname
0.55 __init__.py(808):         return attname, column
0.55 __init__.py(767):         self.concrete = self.column is not None
0.55 __init__.py(768):         if self.verbose_name is None and self.name:
0.55 __init__.py(779):         self.model = cls
0.55 __init__.py(780):         cls._meta.add_field(self, private=private_only)
0.55 __init__.py(528):         if isinstance(other, Field):
0.55 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.55 __init__.py(529):             if (
0.55 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.55 __init__.py(781):         if self.column:
0.55 __init__.py(782):             setattr(cls, self.attname, self.descriptor_class(self))
0.55 __init__.py(783):         if self.choices is not None:
0.55 __init__.py(754):         return self._db_tablespace or settings.DEFAULT_INDEX_TABLESPACE
0.55 __init__.py(139):         self.name = name
0.55 __init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.55 __init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.55 __init__.py(142):         self.primary_key = primary_key
0.55 __init__.py(143):         self.max_length, self._unique = max_length, unique
0.55 __init__.py(144):         self.blank, self.null = blank, null
0.55 __init__.py(145):         self.remote_field = rel
0.55 __init__.py(146):         self.is_relation = self.remote_field is not None
0.55 __init__.py(147):         self.default = default
0.55 __init__.py(148):         self.editable = editable
0.55 __init__.py(149):         self.serialize = serialize
0.55 __init__.py(150):         self.unique_for_date = unique_for_date
0.55 __init__.py(151):         self.unique_for_month = unique_for_month
0.55 __init__.py(152):         self.unique_for_year = unique_for_year
0.55 __init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.55 __init__.py(155):         self.choices = choices
0.55 __init__.py(156):         self.help_text = help_text
0.55 __init__.py(157):         self.db_index = db_index
0.55 __init__.py(158):         self.db_column = db_column
0.55 __init__.py(159):         self._db_tablespace = db_tablespace
0.55 __init__.py(160):         self.auto_created = auto_created
0.55 __init__.py(163):         if auto_created:
0.55 __init__.py(167):             self.creation_counter = Field.creation_counter
0.55 __init__.py(168):             Field.creation_counter += 1
0.55 __init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.55 __init__.py(172):         messages = {}
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(175):         messages.update(error_messages or {})
0.55 __init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.55 __init__.py(177):         self.error_messages = messages
0.55 __init__.py(754):         return self._db_tablespace or settings.DEFAULT_INDEX_TABLESPACE
0.55 __init__.py(139):         self.name = name
0.55 __init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.55 __init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.55 __init__.py(142):         self.primary_key = primary_key
0.55 __init__.py(143):         self.max_length, self._unique = max_length, unique
0.55 __init__.py(144):         self.blank, self.null = blank, null
0.55 __init__.py(145):         self.remote_field = rel
0.55 __init__.py(146):         self.is_relation = self.remote_field is not None
0.55 __init__.py(147):         self.default = default
0.55 __init__.py(148):         self.editable = editable
0.55 __init__.py(149):         self.serialize = serialize
0.55 __init__.py(150):         self.unique_for_date = unique_for_date
0.55 __init__.py(151):         self.unique_for_month = unique_for_month
0.55 __init__.py(152):         self.unique_for_year = unique_for_year
0.55 __init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.55 __init__.py(155):         self.choices = choices
0.55 __init__.py(156):         self.help_text = help_text
0.55 __init__.py(157):         self.db_index = db_index
0.55 __init__.py(158):         self.db_column = db_column
0.55 __init__.py(159):         self._db_tablespace = db_tablespace
0.55 __init__.py(160):         self.auto_created = auto_created
0.55 __init__.py(163):         if auto_created:
0.55 __init__.py(167):             self.creation_counter = Field.creation_counter
0.55 __init__.py(168):             Field.creation_counter += 1
0.55 __init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.55 __init__.py(172):         messages = {}
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(175):         messages.update(error_messages or {})
0.55 __init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.55 __init__.py(177):         self.error_messages = messages
0.55 __init__.py(778):         self.set_attributes_from_name(name)
0.55 __init__.py(765):         self.name = self.name or name
0.55 __init__.py(766):         self.attname, self.column = self.get_attname_column()
0.55 __init__.py(767):         self.concrete = self.column is not None
0.55 __init__.py(768):         if self.verbose_name is None and self.name:
0.55 __init__.py(769):             self.verbose_name = self.name.replace('_', ' ')
0.55 __init__.py(779):         self.model = cls
0.55 __init__.py(780):         cls._meta.add_field(self, private=private_only)
0.55 __init__.py(781):         if self.column:
0.55 __init__.py(782):             setattr(cls, self.attname, self.descriptor_class(self))
0.55 __init__.py(783):         if self.choices is not None:
0.55 __init__.py(778):         self.set_attributes_from_name(name)
0.55 __init__.py(765):         self.name = self.name or name
0.55 __init__.py(766):         self.attname, self.column = self.get_attname_column()
0.55 __init__.py(767):         self.concrete = self.column is not None
0.55 __init__.py(768):         if self.verbose_name is None and self.name:
0.55 __init__.py(769):             self.verbose_name = self.name.replace('_', ' ')
0.55 __init__.py(779):         self.model = cls
0.55 __init__.py(780):         cls._meta.add_field(self, private=private_only)
0.55 __init__.py(528):         if isinstance(other, Field):
0.55 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.55 __init__.py(529):             if (
0.55 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.55 __init__.py(781):         if self.column:
0.55 __init__.py(782):             setattr(cls, self.attname, self.descriptor_class(self))
0.55 __init__.py(783):         if self.choices is not None:
0.55 __init__.py(2509):         return issubclass(subclass, self._subclasses) or super().__subclasscheck__(subclass)
0.55 __init__.py(2503):         return (BigAutoField, SmallAutoField)
0.55 __init__.py(2435):         kwargs['blank'] = True
0.55 __init__.py(2436):         super().__init__(*args, **kwargs)
0.55 __init__.py(139):         self.name = name
0.55 __init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.55 __init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.55 __init__.py(142):         self.primary_key = primary_key
0.55 __init__.py(143):         self.max_length, self._unique = max_length, unique
0.55 __init__.py(144):         self.blank, self.null = blank, null
0.55 __init__.py(145):         self.remote_field = rel
0.55 __init__.py(146):         self.is_relation = self.remote_field is not None
0.55 __init__.py(147):         self.default = default
0.55 __init__.py(148):         self.editable = editable
0.55 __init__.py(149):         self.serialize = serialize
0.55 __init__.py(150):         self.unique_for_date = unique_for_date
0.55 __init__.py(151):         self.unique_for_month = unique_for_month
0.55 __init__.py(152):         self.unique_for_year = unique_for_year
0.55 __init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.55 __init__.py(155):         self.choices = choices
0.55 __init__.py(156):         self.help_text = help_text
0.55 __init__.py(157):         self.db_index = db_index
0.55 __init__.py(158):         self.db_column = db_column
0.55 __init__.py(159):         self._db_tablespace = db_tablespace
0.55 __init__.py(160):         self.auto_created = auto_created
0.55 __init__.py(163):         if auto_created:
0.55 __init__.py(164):             self.creation_counter = Field.auto_creation_counter
0.55 __init__.py(165):             Field.auto_creation_counter -= 1
0.55 __init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.55 __init__.py(172):         messages = {}
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(175):         messages.update(error_messages or {})
0.55 __init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.55 __init__.py(177):         self.error_messages = messages
0.55 __init__.py(2472):         if cls._meta.auto_field:
0.55 __init__.py(2477):         super().contribute_to_class(cls, name, **kwargs)
0.55 __init__.py(778):         self.set_attributes_from_name(name)
0.55 __init__.py(765):         self.name = self.name or name
0.55 __init__.py(766):         self.attname, self.column = self.get_attname_column()
0.55 __init__.py(806):         attname = self.get_attname()
0.55 __init__.py(803):         return self.name
0.55 __init__.py(807):         column = self.db_column or attname
0.55 __init__.py(808):         return attname, column
0.55 __init__.py(767):         self.concrete = self.column is not None
0.55 __init__.py(768):         if self.verbose_name is None and self.name:
0.55 __init__.py(779):         self.model = cls
0.55 __init__.py(780):         cls._meta.add_field(self, private=private_only)
0.55 __init__.py(528):         if isinstance(other, Field):
0.55 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.55 __init__.py(529):             if (
0.55 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.55 __init__.py(528):         if isinstance(other, Field):
0.55 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.55 __init__.py(529):             if (
0.55 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.55 __init__.py(781):         if self.column:
0.55 __init__.py(782):             setattr(cls, self.attname, self.descriptor_class(self))
0.55 __init__.py(783):         if self.choices is not None:
0.55 __init__.py(2478):         cls._meta.auto_field = self
0.55 __init__.py(2509):         return issubclass(subclass, self._subclasses) or super().__subclasscheck__(subclass)
0.55 __init__.py(2503):         return (BigAutoField, SmallAutoField)
0.55 __init__.py(2435):         kwargs['blank'] = True
0.55 __init__.py(2436):         super().__init__(*args, **kwargs)
0.55 __init__.py(139):         self.name = name
0.55 __init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.55 __init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.55 __init__.py(142):         self.primary_key = primary_key
0.55 __init__.py(143):         self.max_length, self._unique = max_length, unique
0.55 __init__.py(144):         self.blank, self.null = blank, null
0.55 __init__.py(145):         self.remote_field = rel
0.55 __init__.py(146):         self.is_relation = self.remote_field is not None
0.55 __init__.py(147):         self.default = default
0.55 __init__.py(148):         self.editable = editable
0.55 __init__.py(149):         self.serialize = serialize
0.55 __init__.py(150):         self.unique_for_date = unique_for_date
0.55 __init__.py(151):         self.unique_for_month = unique_for_month
0.55 __init__.py(152):         self.unique_for_year = unique_for_year
0.55 __init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.55 __init__.py(155):         self.choices = choices
0.55 __init__.py(156):         self.help_text = help_text
0.55 __init__.py(157):         self.db_index = db_index
0.55 __init__.py(158):         self.db_column = db_column
0.55 __init__.py(159):         self._db_tablespace = db_tablespace
0.55 __init__.py(160):         self.auto_created = auto_created
0.55 __init__.py(163):         if auto_created:
0.55 __init__.py(164):             self.creation_counter = Field.auto_creation_counter
0.55 __init__.py(165):             Field.auto_creation_counter -= 1
0.55 __init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.55 __init__.py(172):         messages = {}
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.55 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.55 __init__.py(175):         messages.update(error_messages or {})
0.55 __init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.55 __init__.py(177):         self.error_messages = messages
0.55 __init__.py(2472):         if cls._meta.auto_field:
0.55 __init__.py(2477):         super().contribute_to_class(cls, name, **kwargs)
0.55 __init__.py(778):         self.set_attributes_from_name(name)
0.55 __init__.py(765):         self.name = self.name or name
0.55 __init__.py(766):         self.attname, self.column = self.get_attname_column()
0.55 __init__.py(806):         attname = self.get_attname()
0.55 __init__.py(803):         return self.name
0.55 __init__.py(807):         column = self.db_column or attname
0.55 __init__.py(808):         return attname, column
0.55 __init__.py(767):         self.concrete = self.column is not None
0.55 __init__.py(768):         if self.verbose_name is None and self.name:
0.55 __init__.py(779):         self.model = cls
0.55 __init__.py(780):         cls._meta.add_field(self, private=private_only)
0.55 __init__.py(528):         if isinstance(other, Field):
0.55 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.55 __init__.py(529):             if (
0.55 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.55 __init__.py(528):         if isinstance(other, Field):
0.55 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.55 __init__.py(529):             if (
0.55 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.55 __init__.py(528):         if isinstance(other, Field):
0.55 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.55 __init__.py(529):             if (
0.55 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.55 __init__.py(528):         if isinstance(other, Field):
0.55 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.55 __init__.py(529):             if (
0.55 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.55 __init__.py(781):         if self.column:
0.55 __init__.py(782):             setattr(cls, self.attname, self.descriptor_class(self))
0.55 __init__.py(783):         if self.choices is not None:
0.55 __init__.py(2478):         cls._meta.auto_field = self
0.56 __init__.py(1007):         super().__init__(*args, **kwargs)
0.56 __init__.py(139):         self.name = name
0.56 __init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.56 __init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.56 __init__.py(142):         self.primary_key = primary_key
0.56 __init__.py(143):         self.max_length, self._unique = max_length, unique
0.56 __init__.py(144):         self.blank, self.null = blank, null
0.56 __init__.py(145):         self.remote_field = rel
0.56 __init__.py(146):         self.is_relation = self.remote_field is not None
0.56 __init__.py(147):         self.default = default
0.56 __init__.py(148):         self.editable = editable
0.56 __init__.py(149):         self.serialize = serialize
0.56 __init__.py(150):         self.unique_for_date = unique_for_date
0.56 __init__.py(151):         self.unique_for_month = unique_for_month
0.56 __init__.py(152):         self.unique_for_year = unique_for_year
0.56 __init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.56 __init__.py(155):         self.choices = choices
0.56 __init__.py(156):         self.help_text = help_text
0.56 __init__.py(157):         self.db_index = db_index
0.56 __init__.py(158):         self.db_column = db_column
0.56 __init__.py(159):         self._db_tablespace = db_tablespace
0.56 __init__.py(160):         self.auto_created = auto_created
0.56 __init__.py(163):         if auto_created:
0.56 __init__.py(167):             self.creation_counter = Field.creation_counter
0.56 __init__.py(168):             Field.creation_counter += 1
0.56 __init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.56 __init__.py(172):         messages = {}
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(175):         messages.update(error_messages or {})
0.56 __init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.56 __init__.py(177):         self.error_messages = messages
0.56 __init__.py(1008):         self.db_collation = db_collation
0.56 __init__.py(1009):         if self.max_length is not None:
0.56 __init__.py(1010):             self.validators.append(validators.MaxLengthValidator(self.max_length))
0.56 __init__.py(611):         return [*self.default_validators, *self._validators]
0.56 __init__.py(1007):         super().__init__(*args, **kwargs)
0.56 __init__.py(139):         self.name = name
0.56 __init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.56 __init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.56 __init__.py(142):         self.primary_key = primary_key
0.56 __init__.py(143):         self.max_length, self._unique = max_length, unique
0.56 __init__.py(144):         self.blank, self.null = blank, null
0.56 __init__.py(145):         self.remote_field = rel
0.56 __init__.py(146):         self.is_relation = self.remote_field is not None
0.56 __init__.py(147):         self.default = default
0.56 __init__.py(148):         self.editable = editable
0.56 __init__.py(149):         self.serialize = serialize
0.56 __init__.py(150):         self.unique_for_date = unique_for_date
0.56 __init__.py(151):         self.unique_for_month = unique_for_month
0.56 __init__.py(152):         self.unique_for_year = unique_for_year
0.56 __init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.56 __init__.py(155):         self.choices = choices
0.56 __init__.py(156):         self.help_text = help_text
0.56 __init__.py(157):         self.db_index = db_index
0.56 __init__.py(158):         self.db_column = db_column
0.56 __init__.py(159):         self._db_tablespace = db_tablespace
0.56 __init__.py(160):         self.auto_created = auto_created
0.56 __init__.py(163):         if auto_created:
0.56 __init__.py(167):             self.creation_counter = Field.creation_counter
0.56 __init__.py(168):             Field.creation_counter += 1
0.56 __init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.56 __init__.py(172):         messages = {}
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(175):         messages.update(error_messages or {})
0.56 __init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.56 __init__.py(177):         self.error_messages = messages
0.56 __init__.py(1008):         self.db_collation = db_collation
0.56 __init__.py(1009):         if self.max_length is not None:
0.56 __init__.py(1010):             self.validators.append(validators.MaxLengthValidator(self.max_length))
0.56 __init__.py(611):         return [*self.default_validators, *self._validators]
0.56 __init__.py(778):         self.set_attributes_from_name(name)
0.56 __init__.py(765):         self.name = self.name or name
0.56 __init__.py(766):         self.attname, self.column = self.get_attname_column()
0.56 __init__.py(806):         attname = self.get_attname()
0.56 __init__.py(803):         return self.name
0.56 __init__.py(807):         column = self.db_column or attname
0.56 __init__.py(808):         return attname, column
0.56 __init__.py(767):         self.concrete = self.column is not None
0.56 __init__.py(768):         if self.verbose_name is None and self.name:
0.56 __init__.py(779):         self.model = cls
0.56 __init__.py(780):         cls._meta.add_field(self, private=private_only)
0.56 __init__.py(781):         if self.column:
0.56 __init__.py(782):             setattr(cls, self.attname, self.descriptor_class(self))
0.56 __init__.py(783):         if self.choices is not None:
0.56 __init__.py(778):         self.set_attributes_from_name(name)
0.56 __init__.py(765):         self.name = self.name or name
0.56 __init__.py(766):         self.attname, self.column = self.get_attname_column()
0.56 __init__.py(806):         attname = self.get_attname()
0.56 __init__.py(803):         return self.name
0.56 __init__.py(807):         column = self.db_column or attname
0.56 __init__.py(808):         return attname, column
0.56 __init__.py(767):         self.concrete = self.column is not None
0.56 __init__.py(768):         if self.verbose_name is None and self.name:
0.56 __init__.py(779):         self.model = cls
0.56 __init__.py(780):         cls._meta.add_field(self, private=private_only)
0.56 __init__.py(528):         if isinstance(other, Field):
0.56 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.56 __init__.py(529):             if (
0.56 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.56 __init__.py(781):         if self.column:
0.56 __init__.py(782):             setattr(cls, self.attname, self.descriptor_class(self))
0.56 __init__.py(783):         if self.choices is not None:
0.56 __init__.py(2509):         return issubclass(subclass, self._subclasses) or super().__subclasscheck__(subclass)
0.56 __init__.py(2503):         return (BigAutoField, SmallAutoField)
0.56 __init__.py(2435):         kwargs['blank'] = True
0.56 __init__.py(2436):         super().__init__(*args, **kwargs)
0.56 __init__.py(139):         self.name = name
0.56 __init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.56 __init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.56 __init__.py(142):         self.primary_key = primary_key
0.56 __init__.py(143):         self.max_length, self._unique = max_length, unique
0.56 __init__.py(144):         self.blank, self.null = blank, null
0.56 __init__.py(145):         self.remote_field = rel
0.56 __init__.py(146):         self.is_relation = self.remote_field is not None
0.56 __init__.py(147):         self.default = default
0.56 __init__.py(148):         self.editable = editable
0.56 __init__.py(149):         self.serialize = serialize
0.56 __init__.py(150):         self.unique_for_date = unique_for_date
0.56 __init__.py(151):         self.unique_for_month = unique_for_month
0.56 __init__.py(152):         self.unique_for_year = unique_for_year
0.56 __init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.56 __init__.py(155):         self.choices = choices
0.56 __init__.py(156):         self.help_text = help_text
0.56 __init__.py(157):         self.db_index = db_index
0.56 __init__.py(158):         self.db_column = db_column
0.56 __init__.py(159):         self._db_tablespace = db_tablespace
0.56 __init__.py(160):         self.auto_created = auto_created
0.56 __init__.py(163):         if auto_created:
0.56 __init__.py(164):             self.creation_counter = Field.auto_creation_counter
0.56 __init__.py(165):             Field.auto_creation_counter -= 1
0.56 __init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.56 __init__.py(172):         messages = {}
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(175):         messages.update(error_messages or {})
0.56 __init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.56 __init__.py(177):         self.error_messages = messages
0.56 __init__.py(2472):         if cls._meta.auto_field:
0.56 __init__.py(2477):         super().contribute_to_class(cls, name, **kwargs)
0.56 __init__.py(778):         self.set_attributes_from_name(name)
0.56 __init__.py(765):         self.name = self.name or name
0.56 __init__.py(766):         self.attname, self.column = self.get_attname_column()
0.56 __init__.py(806):         attname = self.get_attname()
0.56 __init__.py(803):         return self.name
0.56 __init__.py(807):         column = self.db_column or attname
0.56 __init__.py(808):         return attname, column
0.56 __init__.py(767):         self.concrete = self.column is not None
0.56 __init__.py(768):         if self.verbose_name is None and self.name:
0.56 __init__.py(779):         self.model = cls
0.56 __init__.py(780):         cls._meta.add_field(self, private=private_only)
0.56 __init__.py(528):         if isinstance(other, Field):
0.56 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.56 __init__.py(529):             if (
0.56 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.56 __init__.py(528):         if isinstance(other, Field):
0.56 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.56 __init__.py(529):             if (
0.56 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.56 __init__.py(781):         if self.column:
0.56 __init__.py(782):             setattr(cls, self.attname, self.descriptor_class(self))
0.56 __init__.py(783):         if self.choices is not None:
0.56 __init__.py(2478):         cls._meta.auto_field = self
0.56 __init__.py(1007):         super().__init__(*args, **kwargs)
0.56 __init__.py(139):         self.name = name
0.56 __init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.56 __init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.56 __init__.py(142):         self.primary_key = primary_key
0.56 __init__.py(143):         self.max_length, self._unique = max_length, unique
0.56 __init__.py(144):         self.blank, self.null = blank, null
0.56 __init__.py(145):         self.remote_field = rel
0.56 __init__.py(146):         self.is_relation = self.remote_field is not None
0.56 __init__.py(147):         self.default = default
0.56 __init__.py(148):         self.editable = editable
0.56 __init__.py(149):         self.serialize = serialize
0.56 __init__.py(150):         self.unique_for_date = unique_for_date
0.56 __init__.py(151):         self.unique_for_month = unique_for_month
0.56 __init__.py(152):         self.unique_for_year = unique_for_year
0.56 __init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.56 __init__.py(155):         self.choices = choices
0.56 __init__.py(156):         self.help_text = help_text
0.56 __init__.py(157):         self.db_index = db_index
0.56 __init__.py(158):         self.db_column = db_column
0.56 __init__.py(159):         self._db_tablespace = db_tablespace
0.56 __init__.py(160):         self.auto_created = auto_created
0.56 __init__.py(163):         if auto_created:
0.56 __init__.py(167):             self.creation_counter = Field.creation_counter
0.56 __init__.py(168):             Field.creation_counter += 1
0.56 __init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.56 __init__.py(172):         messages = {}
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(175):         messages.update(error_messages or {})
0.56 __init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.56 __init__.py(177):         self.error_messages = messages
0.56 __init__.py(1008):         self.db_collation = db_collation
0.56 __init__.py(1009):         if self.max_length is not None:
0.56 __init__.py(1010):             self.validators.append(validators.MaxLengthValidator(self.max_length))
0.56 __init__.py(611):         return [*self.default_validators, *self._validators]
0.56 __init__.py(2120):         super().__init__(*args, **kwargs)
0.56 __init__.py(139):         self.name = name
0.56 __init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.56 __init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.56 __init__.py(142):         self.primary_key = primary_key
0.56 __init__.py(143):         self.max_length, self._unique = max_length, unique
0.56 __init__.py(144):         self.blank, self.null = blank, null
0.56 __init__.py(145):         self.remote_field = rel
0.56 __init__.py(146):         self.is_relation = self.remote_field is not None
0.56 __init__.py(147):         self.default = default
0.56 __init__.py(148):         self.editable = editable
0.56 __init__.py(149):         self.serialize = serialize
0.56 __init__.py(150):         self.unique_for_date = unique_for_date
0.56 __init__.py(151):         self.unique_for_month = unique_for_month
0.56 __init__.py(152):         self.unique_for_year = unique_for_year
0.56 __init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.56 __init__.py(155):         self.choices = choices
0.56 __init__.py(156):         self.help_text = help_text
0.56 __init__.py(157):         self.db_index = db_index
0.56 __init__.py(158):         self.db_column = db_column
0.56 __init__.py(159):         self._db_tablespace = db_tablespace
0.56 __init__.py(160):         self.auto_created = auto_created
0.56 __init__.py(163):         if auto_created:
0.56 __init__.py(167):             self.creation_counter = Field.creation_counter
0.56 __init__.py(168):             Field.creation_counter += 1
0.56 __init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.56 __init__.py(172):         messages = {}
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(175):         messages.update(error_messages or {})
0.56 __init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.56 __init__.py(177):         self.error_messages = messages
0.56 __init__.py(2121):         self.db_collation = db_collation
0.56 __init__.py(1203):         self.auto_now, self.auto_now_add = auto_now, auto_now_add
0.56 __init__.py(1204):         if auto_now or auto_now_add:
0.56 __init__.py(1207):         super().__init__(verbose_name, name, **kwargs)
0.56 __init__.py(139):         self.name = name
0.56 __init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.56 __init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.56 __init__.py(142):         self.primary_key = primary_key
0.56 __init__.py(143):         self.max_length, self._unique = max_length, unique
0.56 __init__.py(144):         self.blank, self.null = blank, null
0.56 __init__.py(145):         self.remote_field = rel
0.56 __init__.py(146):         self.is_relation = self.remote_field is not None
0.56 __init__.py(147):         self.default = default
0.56 __init__.py(148):         self.editable = editable
0.56 __init__.py(149):         self.serialize = serialize
0.56 __init__.py(150):         self.unique_for_date = unique_for_date
0.56 __init__.py(151):         self.unique_for_month = unique_for_month
0.56 __init__.py(152):         self.unique_for_year = unique_for_year
0.56 __init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.56 __init__.py(155):         self.choices = choices
0.56 __init__.py(156):         self.help_text = help_text
0.56 __init__.py(157):         self.db_index = db_index
0.56 __init__.py(158):         self.db_column = db_column
0.56 __init__.py(159):         self._db_tablespace = db_tablespace
0.56 __init__.py(160):         self.auto_created = auto_created
0.56 __init__.py(163):         if auto_created:
0.56 __init__.py(167):             self.creation_counter = Field.creation_counter
0.56 __init__.py(168):             Field.creation_counter += 1
0.56 __init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.56 __init__.py(172):         messages = {}
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(175):         messages.update(error_messages or {})
0.56 __init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.56 __init__.py(177):         self.error_messages = messages
0.56 __init__.py(778):         self.set_attributes_from_name(name)
0.56 __init__.py(765):         self.name = self.name or name
0.56 __init__.py(766):         self.attname, self.column = self.get_attname_column()
0.56 __init__.py(806):         attname = self.get_attname()
0.56 __init__.py(803):         return self.name
0.56 __init__.py(807):         column = self.db_column or attname
0.56 __init__.py(808):         return attname, column
0.56 __init__.py(767):         self.concrete = self.column is not None
0.56 __init__.py(768):         if self.verbose_name is None and self.name:
0.56 __init__.py(779):         self.model = cls
0.56 __init__.py(780):         cls._meta.add_field(self, private=private_only)
0.56 __init__.py(781):         if self.column:
0.56 __init__.py(782):             setattr(cls, self.attname, self.descriptor_class(self))
0.56 __init__.py(783):         if self.choices is not None:
0.56 __init__.py(778):         self.set_attributes_from_name(name)
0.56 __init__.py(765):         self.name = self.name or name
0.56 __init__.py(766):         self.attname, self.column = self.get_attname_column()
0.56 __init__.py(806):         attname = self.get_attname()
0.56 __init__.py(803):         return self.name
0.56 __init__.py(807):         column = self.db_column or attname
0.56 __init__.py(808):         return attname, column
0.56 __init__.py(767):         self.concrete = self.column is not None
0.56 __init__.py(768):         if self.verbose_name is None and self.name:
0.56 __init__.py(779):         self.model = cls
0.56 __init__.py(780):         cls._meta.add_field(self, private=private_only)
0.56 __init__.py(528):         if isinstance(other, Field):
0.56 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.56 __init__.py(529):             if (
0.56 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.56 __init__.py(781):         if self.column:
0.56 __init__.py(782):             setattr(cls, self.attname, self.descriptor_class(self))
0.56 __init__.py(783):         if self.choices is not None:
0.56 __init__.py(1281):         super().contribute_to_class(cls, name, **kwargs)
0.56 __init__.py(778):         self.set_attributes_from_name(name)
0.56 __init__.py(765):         self.name = self.name or name
0.56 __init__.py(766):         self.attname, self.column = self.get_attname_column()
0.56 __init__.py(806):         attname = self.get_attname()
0.56 __init__.py(803):         return self.name
0.56 __init__.py(807):         column = self.db_column or attname
0.56 __init__.py(808):         return attname, column
0.56 __init__.py(767):         self.concrete = self.column is not None
0.56 __init__.py(768):         if self.verbose_name is None and self.name:
0.56 __init__.py(779):         self.model = cls
0.56 __init__.py(780):         cls._meta.add_field(self, private=private_only)
0.56 __init__.py(528):         if isinstance(other, Field):
0.56 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.56 __init__.py(529):             if (
0.56 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.56 __init__.py(781):         if self.column:
0.56 __init__.py(782):             setattr(cls, self.attname, self.descriptor_class(self))
0.56 __init__.py(783):         if self.choices is not None:
0.56 __init__.py(1282):         if not self.null:
0.56 __init__.py(1283):             setattr(
0.56 __init__.py(1284):                 cls, 'get_next_by_%s' % self.name,
0.56 __init__.py(1285):                 partialmethod(cls._get_next_or_previous_by_FIELD, field=self, is_next=True)
0.56 __init__.py(1283):             setattr(
0.56 __init__.py(1287):             setattr(
0.56 __init__.py(1288):                 cls, 'get_previous_by_%s' % self.name,
0.56 __init__.py(1289):                 partialmethod(cls._get_next_or_previous_by_FIELD, field=self, is_next=False)
0.56 __init__.py(1287):             setattr(
0.56 __init__.py(550):         obj = copy.copy(self)
0.56 __init__.py(561):         obj = Empty()
0.56 __init__.py(562):         obj.__class__ = self.__class__
0.56 __init__.py(563):         obj.__dict__ = self.__dict__.copy()
0.56 __init__.py(564):         return obj
0.56 __init__.py(551):         if self.remote_field:
0.56 __init__.py(555):         memodict[id(self)] = obj
0.56 __init__.py(556):         return obj
0.56 __init__.py(778):         self.set_attributes_from_name(name)
0.56 __init__.py(765):         self.name = self.name or name
0.56 __init__.py(766):         self.attname, self.column = self.get_attname_column()
0.56 __init__.py(806):         attname = self.get_attname()
0.56 __init__.py(803):         return self.name
0.56 __init__.py(807):         column = self.db_column or attname
0.56 __init__.py(808):         return attname, column
0.56 __init__.py(767):         self.concrete = self.column is not None
0.56 __init__.py(768):         if self.verbose_name is None and self.name:
0.56 __init__.py(779):         self.model = cls
0.56 __init__.py(780):         cls._meta.add_field(self, private=private_only)
0.56 __init__.py(781):         if self.column:
0.56 __init__.py(782):             setattr(cls, self.attname, self.descriptor_class(self))
0.56 __init__.py(783):         if self.choices is not None:
0.56 __init__.py(550):         obj = copy.copy(self)
0.56 __init__.py(561):         obj = Empty()
0.56 __init__.py(562):         obj.__class__ = self.__class__
0.56 __init__.py(563):         obj.__dict__ = self.__dict__.copy()
0.56 __init__.py(564):         return obj
0.56 __init__.py(551):         if self.remote_field:
0.56 __init__.py(555):         memodict[id(self)] = obj
0.56 __init__.py(556):         return obj
0.56 __init__.py(778):         self.set_attributes_from_name(name)
0.56 __init__.py(765):         self.name = self.name or name
0.56 __init__.py(766):         self.attname, self.column = self.get_attname_column()
0.56 __init__.py(806):         attname = self.get_attname()
0.56 __init__.py(803):         return self.name
0.56 __init__.py(807):         column = self.db_column or attname
0.56 __init__.py(808):         return attname, column
0.56 __init__.py(767):         self.concrete = self.column is not None
0.56 __init__.py(768):         if self.verbose_name is None and self.name:
0.56 __init__.py(779):         self.model = cls
0.56 __init__.py(780):         cls._meta.add_field(self, private=private_only)
0.56 __init__.py(528):         if isinstance(other, Field):
0.56 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.56 __init__.py(529):             if (
0.56 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.56 __init__.py(781):         if self.column:
0.56 __init__.py(782):             setattr(cls, self.attname, self.descriptor_class(self))
0.56 __init__.py(783):         if self.choices is not None:
0.56 __init__.py(550):         obj = copy.copy(self)
0.56 __init__.py(561):         obj = Empty()
0.56 __init__.py(562):         obj.__class__ = self.__class__
0.56 __init__.py(563):         obj.__dict__ = self.__dict__.copy()
0.56 __init__.py(564):         return obj
0.56 __init__.py(551):         if self.remote_field:
0.56 __init__.py(555):         memodict[id(self)] = obj
0.56 __init__.py(556):         return obj
0.56 __init__.py(1281):         super().contribute_to_class(cls, name, **kwargs)
0.56 __init__.py(778):         self.set_attributes_from_name(name)
0.56 __init__.py(765):         self.name = self.name or name
0.56 __init__.py(766):         self.attname, self.column = self.get_attname_column()
0.56 __init__.py(806):         attname = self.get_attname()
0.56 __init__.py(803):         return self.name
0.56 __init__.py(807):         column = self.db_column or attname
0.56 __init__.py(808):         return attname, column
0.56 __init__.py(767):         self.concrete = self.column is not None
0.56 __init__.py(768):         if self.verbose_name is None and self.name:
0.56 __init__.py(779):         self.model = cls
0.56 __init__.py(780):         cls._meta.add_field(self, private=private_only)
0.56 __init__.py(528):         if isinstance(other, Field):
0.56 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.56 __init__.py(529):             if (
0.56 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.56 __init__.py(781):         if self.column:
0.56 __init__.py(782):             setattr(cls, self.attname, self.descriptor_class(self))
0.56 __init__.py(783):         if self.choices is not None:
0.56 __init__.py(1282):         if not self.null:
0.56 __init__.py(1283):             setattr(
0.56 __init__.py(1284):                 cls, 'get_next_by_%s' % self.name,
0.56 __init__.py(1285):                 partialmethod(cls._get_next_or_previous_by_FIELD, field=self, is_next=True)
0.56 __init__.py(1283):             setattr(
0.56 __init__.py(1287):             setattr(
0.56 __init__.py(1288):                 cls, 'get_previous_by_%s' % self.name,
0.56 __init__.py(1289):                 partialmethod(cls._get_next_or_previous_by_FIELD, field=self, is_next=False)
0.56 __init__.py(1287):             setattr(
0.56 __init__.py(1203):         self.auto_now, self.auto_now_add = auto_now, auto_now_add
0.56 __init__.py(1204):         if auto_now or auto_now_add:
0.56 __init__.py(1207):         super().__init__(verbose_name, name, **kwargs)
0.56 __init__.py(139):         self.name = name
0.56 __init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.56 __init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.56 __init__.py(142):         self.primary_key = primary_key
0.56 __init__.py(143):         self.max_length, self._unique = max_length, unique
0.56 __init__.py(144):         self.blank, self.null = blank, null
0.56 __init__.py(145):         self.remote_field = rel
0.56 __init__.py(146):         self.is_relation = self.remote_field is not None
0.56 __init__.py(147):         self.default = default
0.56 __init__.py(148):         self.editable = editable
0.56 __init__.py(149):         self.serialize = serialize
0.56 __init__.py(150):         self.unique_for_date = unique_for_date
0.56 __init__.py(151):         self.unique_for_month = unique_for_month
0.56 __init__.py(152):         self.unique_for_year = unique_for_year
0.56 __init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.56 __init__.py(155):         self.choices = choices
0.56 __init__.py(156):         self.help_text = help_text
0.56 __init__.py(157):         self.db_index = db_index
0.56 __init__.py(158):         self.db_column = db_column
0.56 __init__.py(159):         self._db_tablespace = db_tablespace
0.56 __init__.py(160):         self.auto_created = auto_created
0.56 __init__.py(163):         if auto_created:
0.56 __init__.py(167):             self.creation_counter = Field.creation_counter
0.56 __init__.py(168):             Field.creation_counter += 1
0.56 __init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.56 __init__.py(172):         messages = {}
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(175):         messages.update(error_messages or {})
0.56 __init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.56 __init__.py(177):         self.error_messages = messages
0.56 __init__.py(139):         self.name = name
0.56 __init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.56 __init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.56 __init__.py(142):         self.primary_key = primary_key
0.56 __init__.py(143):         self.max_length, self._unique = max_length, unique
0.56 __init__.py(144):         self.blank, self.null = blank, null
0.56 __init__.py(145):         self.remote_field = rel
0.56 __init__.py(146):         self.is_relation = self.remote_field is not None
0.56 __init__.py(147):         self.default = default
0.56 __init__.py(148):         self.editable = editable
0.56 __init__.py(149):         self.serialize = serialize
0.56 __init__.py(150):         self.unique_for_date = unique_for_date
0.56 __init__.py(151):         self.unique_for_month = unique_for_month
0.56 __init__.py(152):         self.unique_for_year = unique_for_year
0.56 __init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.56 __init__.py(155):         self.choices = choices
0.56 __init__.py(156):         self.help_text = help_text
0.56 __init__.py(157):         self.db_index = db_index
0.56 __init__.py(158):         self.db_column = db_column
0.56 __init__.py(159):         self._db_tablespace = db_tablespace
0.56 __init__.py(160):         self.auto_created = auto_created
0.56 __init__.py(163):         if auto_created:
0.56 __init__.py(167):             self.creation_counter = Field.creation_counter
0.56 __init__.py(168):             Field.creation_counter += 1
0.56 __init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.56 __init__.py(172):         messages = {}
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(175):         messages.update(error_messages or {})
0.56 __init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.56 __init__.py(177):         self.error_messages = messages
0.56 __init__.py(139):         self.name = name
0.56 __init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.56 __init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.56 __init__.py(142):         self.primary_key = primary_key
0.56 __init__.py(143):         self.max_length, self._unique = max_length, unique
0.56 __init__.py(144):         self.blank, self.null = blank, null
0.56 __init__.py(145):         self.remote_field = rel
0.56 __init__.py(146):         self.is_relation = self.remote_field is not None
0.56 __init__.py(147):         self.default = default
0.56 __init__.py(148):         self.editable = editable
0.56 __init__.py(149):         self.serialize = serialize
0.56 __init__.py(150):         self.unique_for_date = unique_for_date
0.56 __init__.py(151):         self.unique_for_month = unique_for_month
0.56 __init__.py(152):         self.unique_for_year = unique_for_year
0.56 __init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.56 __init__.py(155):         self.choices = choices
0.56 __init__.py(156):         self.help_text = help_text
0.56 __init__.py(157):         self.db_index = db_index
0.56 __init__.py(158):         self.db_column = db_column
0.56 __init__.py(159):         self._db_tablespace = db_tablespace
0.56 __init__.py(160):         self.auto_created = auto_created
0.56 __init__.py(163):         if auto_created:
0.56 __init__.py(167):             self.creation_counter = Field.creation_counter
0.56 __init__.py(168):             Field.creation_counter += 1
0.56 __init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.56 __init__.py(172):         messages = {}
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(175):         messages.update(error_messages or {})
0.56 __init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.56 __init__.py(177):         self.error_messages = messages
0.56 __init__.py(2120):         super().__init__(*args, **kwargs)
0.56 __init__.py(139):         self.name = name
0.56 __init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.56 __init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.56 __init__.py(142):         self.primary_key = primary_key
0.56 __init__.py(143):         self.max_length, self._unique = max_length, unique
0.56 __init__.py(144):         self.blank, self.null = blank, null
0.56 __init__.py(145):         self.remote_field = rel
0.56 __init__.py(146):         self.is_relation = self.remote_field is not None
0.56 __init__.py(147):         self.default = default
0.56 __init__.py(148):         self.editable = editable
0.56 __init__.py(149):         self.serialize = serialize
0.56 __init__.py(150):         self.unique_for_date = unique_for_date
0.56 __init__.py(151):         self.unique_for_month = unique_for_month
0.56 __init__.py(152):         self.unique_for_year = unique_for_year
0.56 __init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.56 __init__.py(155):         self.choices = choices
0.56 __init__.py(156):         self.help_text = help_text
0.56 __init__.py(157):         self.db_index = db_index
0.56 __init__.py(158):         self.db_column = db_column
0.56 __init__.py(159):         self._db_tablespace = db_tablespace
0.56 __init__.py(160):         self.auto_created = auto_created
0.56 __init__.py(163):         if auto_created:
0.56 __init__.py(167):             self.creation_counter = Field.creation_counter
0.56 __init__.py(168):             Field.creation_counter += 1
0.56 __init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.56 __init__.py(172):         messages = {}
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(175):         messages.update(error_messages or {})
0.56 __init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.56 __init__.py(177):         self.error_messages = messages
0.56 __init__.py(2121):         self.db_collation = db_collation
0.56 __init__.py(1007):         super().__init__(*args, **kwargs)
0.56 __init__.py(139):         self.name = name
0.56 __init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.56 __init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.56 __init__.py(142):         self.primary_key = primary_key
0.56 __init__.py(143):         self.max_length, self._unique = max_length, unique
0.56 __init__.py(144):         self.blank, self.null = blank, null
0.56 __init__.py(145):         self.remote_field = rel
0.56 __init__.py(146):         self.is_relation = self.remote_field is not None
0.56 __init__.py(147):         self.default = default
0.56 __init__.py(148):         self.editable = editable
0.56 __init__.py(149):         self.serialize = serialize
0.56 __init__.py(150):         self.unique_for_date = unique_for_date
0.56 __init__.py(151):         self.unique_for_month = unique_for_month
0.56 __init__.py(152):         self.unique_for_year = unique_for_year
0.56 __init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.56 __init__.py(155):         self.choices = choices
0.56 __init__.py(156):         self.help_text = help_text
0.56 __init__.py(157):         self.db_index = db_index
0.56 __init__.py(158):         self.db_column = db_column
0.56 __init__.py(159):         self._db_tablespace = db_tablespace
0.56 __init__.py(160):         self.auto_created = auto_created
0.56 __init__.py(163):         if auto_created:
0.56 __init__.py(167):             self.creation_counter = Field.creation_counter
0.56 __init__.py(168):             Field.creation_counter += 1
0.56 __init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.56 __init__.py(172):         messages = {}
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(175):         messages.update(error_messages or {})
0.56 __init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.56 __init__.py(177):         self.error_messages = messages
0.56 __init__.py(1008):         self.db_collation = db_collation
0.56 __init__.py(1009):         if self.max_length is not None:
0.56 __init__.py(1010):             self.validators.append(validators.MaxLengthValidator(self.max_length))
0.56 __init__.py(611):         return [*self.default_validators, *self._validators]
0.56 __init__.py(139):         self.name = name
0.56 __init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.56 __init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.56 __init__.py(142):         self.primary_key = primary_key
0.56 __init__.py(143):         self.max_length, self._unique = max_length, unique
0.56 __init__.py(144):         self.blank, self.null = blank, null
0.56 __init__.py(145):         self.remote_field = rel
0.56 __init__.py(146):         self.is_relation = self.remote_field is not None
0.56 __init__.py(147):         self.default = default
0.56 __init__.py(148):         self.editable = editable
0.56 __init__.py(149):         self.serialize = serialize
0.56 __init__.py(150):         self.unique_for_date = unique_for_date
0.56 __init__.py(151):         self.unique_for_month = unique_for_month
0.56 __init__.py(152):         self.unique_for_year = unique_for_year
0.56 __init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.56 __init__.py(155):         self.choices = choices
0.56 __init__.py(156):         self.help_text = help_text
0.56 __init__.py(157):         self.db_index = db_index
0.56 __init__.py(158):         self.db_column = db_column
0.56 __init__.py(159):         self._db_tablespace = db_tablespace
0.56 __init__.py(160):         self.auto_created = auto_created
0.56 __init__.py(163):         if auto_created:
0.56 __init__.py(167):             self.creation_counter = Field.creation_counter
0.56 __init__.py(168):             Field.creation_counter += 1
0.56 __init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.56 __init__.py(172):         messages = {}
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(175):         messages.update(error_messages or {})
0.56 __init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.56 __init__.py(177):         self.error_messages = messages
0.56 __init__.py(2120):         super().__init__(*args, **kwargs)
0.56 __init__.py(139):         self.name = name
0.56 __init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.56 __init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.56 __init__.py(142):         self.primary_key = primary_key
0.56 __init__.py(143):         self.max_length, self._unique = max_length, unique
0.56 __init__.py(144):         self.blank, self.null = blank, null
0.56 __init__.py(145):         self.remote_field = rel
0.56 __init__.py(146):         self.is_relation = self.remote_field is not None
0.56 __init__.py(147):         self.default = default
0.56 __init__.py(148):         self.editable = editable
0.56 __init__.py(149):         self.serialize = serialize
0.56 __init__.py(150):         self.unique_for_date = unique_for_date
0.56 __init__.py(151):         self.unique_for_month = unique_for_month
0.56 __init__.py(152):         self.unique_for_year = unique_for_year
0.56 __init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.56 __init__.py(155):         self.choices = choices
0.56 __init__.py(156):         self.help_text = help_text
0.56 __init__.py(157):         self.db_index = db_index
0.56 __init__.py(158):         self.db_column = db_column
0.56 __init__.py(159):         self._db_tablespace = db_tablespace
0.56 __init__.py(160):         self.auto_created = auto_created
0.56 __init__.py(163):         if auto_created:
0.56 __init__.py(167):             self.creation_counter = Field.creation_counter
0.56 __init__.py(168):             Field.creation_counter += 1
0.56 __init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.56 __init__.py(172):         messages = {}
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(175):         messages.update(error_messages or {})
0.56 __init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.56 __init__.py(177):         self.error_messages = messages
0.56 __init__.py(2121):         self.db_collation = db_collation
0.56 __init__.py(1281):         super().contribute_to_class(cls, name, **kwargs)
0.56 __init__.py(778):         self.set_attributes_from_name(name)
0.56 __init__.py(765):         self.name = self.name or name
0.56 __init__.py(766):         self.attname, self.column = self.get_attname_column()
0.56 __init__.py(806):         attname = self.get_attname()
0.56 __init__.py(803):         return self.name
0.56 __init__.py(807):         column = self.db_column or attname
0.56 __init__.py(808):         return attname, column
0.56 __init__.py(767):         self.concrete = self.column is not None
0.56 __init__.py(768):         if self.verbose_name is None and self.name:
0.56 __init__.py(779):         self.model = cls
0.56 __init__.py(780):         cls._meta.add_field(self, private=private_only)
0.56 __init__.py(781):         if self.column:
0.56 __init__.py(782):             setattr(cls, self.attname, self.descriptor_class(self))
0.56 __init__.py(783):         if self.choices is not None:
0.56 __init__.py(1282):         if not self.null:
0.56 __init__.py(1283):             setattr(
0.56 __init__.py(1284):                 cls, 'get_next_by_%s' % self.name,
0.56 __init__.py(1285):                 partialmethod(cls._get_next_or_previous_by_FIELD, field=self, is_next=True)
0.56 __init__.py(1283):             setattr(
0.56 __init__.py(1287):             setattr(
0.56 __init__.py(1288):                 cls, 'get_previous_by_%s' % self.name,
0.56 __init__.py(1289):                 partialmethod(cls._get_next_or_previous_by_FIELD, field=self, is_next=False)
0.56 __init__.py(1287):             setattr(
0.56 __init__.py(778):         self.set_attributes_from_name(name)
0.56 __init__.py(765):         self.name = self.name or name
0.56 __init__.py(766):         self.attname, self.column = self.get_attname_column()
0.56 __init__.py(767):         self.concrete = self.column is not None
0.56 __init__.py(768):         if self.verbose_name is None and self.name:
0.56 __init__.py(779):         self.model = cls
0.56 __init__.py(780):         cls._meta.add_field(self, private=private_only)
0.56 __init__.py(528):         if isinstance(other, Field):
0.56 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.56 __init__.py(529):             if (
0.56 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.56 __init__.py(781):         if self.column:
0.56 __init__.py(782):             setattr(cls, self.attname, self.descriptor_class(self))
0.56 __init__.py(783):         if self.choices is not None:
0.56 __init__.py(778):         self.set_attributes_from_name(name)
0.56 __init__.py(765):         self.name = self.name or name
0.56 __init__.py(766):         self.attname, self.column = self.get_attname_column()
0.56 __init__.py(767):         self.concrete = self.column is not None
0.56 __init__.py(768):         if self.verbose_name is None and self.name:
0.56 __init__.py(779):         self.model = cls
0.56 __init__.py(780):         cls._meta.add_field(self, private=private_only)
0.56 __init__.py(528):         if isinstance(other, Field):
0.56 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.56 __init__.py(529):             if (
0.56 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.56 __init__.py(781):         if self.column:
0.56 __init__.py(782):             setattr(cls, self.attname, self.descriptor_class(self))
0.56 __init__.py(783):         if self.choices is not None:
0.56 __init__.py(778):         self.set_attributes_from_name(name)
0.56 __init__.py(765):         self.name = self.name or name
0.56 __init__.py(766):         self.attname, self.column = self.get_attname_column()
0.56 __init__.py(806):         attname = self.get_attname()
0.56 __init__.py(803):         return self.name
0.56 __init__.py(807):         column = self.db_column or attname
0.56 __init__.py(808):         return attname, column
0.56 __init__.py(767):         self.concrete = self.column is not None
0.56 __init__.py(768):         if self.verbose_name is None and self.name:
0.56 __init__.py(779):         self.model = cls
0.56 __init__.py(780):         cls._meta.add_field(self, private=private_only)
0.56 __init__.py(528):         if isinstance(other, Field):
0.56 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.56 __init__.py(529):             if (
0.56 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.56 __init__.py(528):         if isinstance(other, Field):
0.56 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.56 __init__.py(529):             if (
0.56 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.56 __init__.py(781):         if self.column:
0.56 __init__.py(782):             setattr(cls, self.attname, self.descriptor_class(self))
0.56 __init__.py(783):         if self.choices is not None:
0.56 __init__.py(778):         self.set_attributes_from_name(name)
0.56 __init__.py(765):         self.name = self.name or name
0.56 __init__.py(766):         self.attname, self.column = self.get_attname_column()
0.56 __init__.py(806):         attname = self.get_attname()
0.56 __init__.py(803):         return self.name
0.56 __init__.py(807):         column = self.db_column or attname
0.56 __init__.py(808):         return attname, column
0.56 __init__.py(767):         self.concrete = self.column is not None
0.56 __init__.py(768):         if self.verbose_name is None and self.name:
0.56 __init__.py(779):         self.model = cls
0.56 __init__.py(780):         cls._meta.add_field(self, private=private_only)
0.56 __init__.py(528):         if isinstance(other, Field):
0.56 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.56 __init__.py(529):             if (
0.56 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.56 __init__.py(528):         if isinstance(other, Field):
0.56 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.56 __init__.py(529):             if (
0.56 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.56 __init__.py(781):         if self.column:
0.56 __init__.py(782):             setattr(cls, self.attname, self.descriptor_class(self))
0.56 __init__.py(783):         if self.choices is not None:
0.56 __init__.py(778):         self.set_attributes_from_name(name)
0.56 __init__.py(765):         self.name = self.name or name
0.56 __init__.py(766):         self.attname, self.column = self.get_attname_column()
0.56 __init__.py(806):         attname = self.get_attname()
0.56 __init__.py(803):         return self.name
0.56 __init__.py(807):         column = self.db_column or attname
0.56 __init__.py(808):         return attname, column
0.56 __init__.py(767):         self.concrete = self.column is not None
0.56 __init__.py(768):         if self.verbose_name is None and self.name:
0.56 __init__.py(779):         self.model = cls
0.56 __init__.py(780):         cls._meta.add_field(self, private=private_only)
0.56 __init__.py(528):         if isinstance(other, Field):
0.56 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.56 __init__.py(529):             if (
0.56 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.56 __init__.py(528):         if isinstance(other, Field):
0.56 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.56 __init__.py(529):             if (
0.56 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.56 __init__.py(781):         if self.column:
0.56 __init__.py(782):             setattr(cls, self.attname, self.descriptor_class(self))
0.56 __init__.py(783):         if self.choices is not None:
0.56 __init__.py(788):             if 'get_%s_display' % self.name not in cls.__dict__:
0.56 __init__.py(789):                 setattr(
0.56 __init__.py(790):                     cls,
0.56 __init__.py(791):                     'get_%s_display' % self.name,
0.56 __init__.py(792):                     partialmethod(cls._get_FIELD_display, field=self),
0.56 __init__.py(789):                 setattr(
0.56 __init__.py(778):         self.set_attributes_from_name(name)
0.56 __init__.py(765):         self.name = self.name or name
0.56 __init__.py(766):         self.attname, self.column = self.get_attname_column()
0.56 __init__.py(806):         attname = self.get_attname()
0.56 __init__.py(803):         return self.name
0.56 __init__.py(807):         column = self.db_column or attname
0.56 __init__.py(808):         return attname, column
0.56 __init__.py(767):         self.concrete = self.column is not None
0.56 __init__.py(768):         if self.verbose_name is None and self.name:
0.56 __init__.py(779):         self.model = cls
0.56 __init__.py(780):         cls._meta.add_field(self, private=private_only)
0.56 __init__.py(528):         if isinstance(other, Field):
0.56 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.56 __init__.py(529):             if (
0.56 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.56 __init__.py(528):         if isinstance(other, Field):
0.56 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.56 __init__.py(529):             if (
0.56 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.56 __init__.py(781):         if self.column:
0.56 __init__.py(782):             setattr(cls, self.attname, self.descriptor_class(self))
0.56 __init__.py(783):         if self.choices is not None:
0.56 __init__.py(2509):         return issubclass(subclass, self._subclasses) or super().__subclasscheck__(subclass)
0.56 __init__.py(2503):         return (BigAutoField, SmallAutoField)
0.56 __init__.py(2435):         kwargs['blank'] = True
0.56 __init__.py(2436):         super().__init__(*args, **kwargs)
0.56 __init__.py(139):         self.name = name
0.56 __init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.56 __init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.56 __init__.py(142):         self.primary_key = primary_key
0.56 __init__.py(143):         self.max_length, self._unique = max_length, unique
0.56 __init__.py(144):         self.blank, self.null = blank, null
0.56 __init__.py(145):         self.remote_field = rel
0.56 __init__.py(146):         self.is_relation = self.remote_field is not None
0.56 __init__.py(147):         self.default = default
0.56 __init__.py(148):         self.editable = editable
0.56 __init__.py(149):         self.serialize = serialize
0.56 __init__.py(150):         self.unique_for_date = unique_for_date
0.56 __init__.py(151):         self.unique_for_month = unique_for_month
0.56 __init__.py(152):         self.unique_for_year = unique_for_year
0.56 __init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.56 __init__.py(155):         self.choices = choices
0.56 __init__.py(156):         self.help_text = help_text
0.56 __init__.py(157):         self.db_index = db_index
0.56 __init__.py(158):         self.db_column = db_column
0.56 __init__.py(159):         self._db_tablespace = db_tablespace
0.56 __init__.py(160):         self.auto_created = auto_created
0.56 __init__.py(163):         if auto_created:
0.56 __init__.py(164):             self.creation_counter = Field.auto_creation_counter
0.56 __init__.py(165):             Field.auto_creation_counter -= 1
0.56 __init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.56 __init__.py(172):         messages = {}
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.56 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.56 __init__.py(175):         messages.update(error_messages or {})
0.56 __init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.56 __init__.py(177):         self.error_messages = messages
0.56 __init__.py(2472):         if cls._meta.auto_field:
0.56 __init__.py(2477):         super().contribute_to_class(cls, name, **kwargs)
0.56 __init__.py(778):         self.set_attributes_from_name(name)
0.56 __init__.py(765):         self.name = self.name or name
0.56 __init__.py(766):         self.attname, self.column = self.get_attname_column()
0.56 __init__.py(806):         attname = self.get_attname()
0.56 __init__.py(803):         return self.name
0.56 __init__.py(807):         column = self.db_column or attname
0.56 __init__.py(808):         return attname, column
0.56 __init__.py(767):         self.concrete = self.column is not None
0.56 __init__.py(768):         if self.verbose_name is None and self.name:
0.56 __init__.py(779):         self.model = cls
0.56 __init__.py(780):         cls._meta.add_field(self, private=private_only)
0.56 __init__.py(528):         if isinstance(other, Field):
0.56 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.56 __init__.py(529):             if (
0.56 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.56 __init__.py(528):         if isinstance(other, Field):
0.56 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.56 __init__.py(529):             if (
0.56 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.56 __init__.py(528):         if isinstance(other, Field):
0.56 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.56 __init__.py(529):             if (
0.56 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.56 __init__.py(781):         if self.column:
0.56 __init__.py(782):             setattr(cls, self.attname, self.descriptor_class(self))
0.56 __init__.py(783):         if self.choices is not None:
0.56 __init__.py(2478):         cls._meta.auto_field = self
Found 1 test(s).
Skipping setup of unused database(s): default, other.
0.57 __init__.py(750):         return self._unique or self.primary_key
0.57 __init__.py(843):         return self._get_default()
0.57 __init__.py(847):         if self.has_default():
0.57 __init__.py(839):         return self.default is not NOT_PROVIDED
0.57 __init__.py(852):         if not self.empty_strings_allowed or self.null and not connection.features.interprets_empty_strings_as_nulls:
0.57 __init__.py(853):             return return_None
0.57 __init__.py(82):     return None
0.57 __init__.py(843):         return self._get_default()
0.57 __init__.py(847):         if self.has_default():
0.57 __init__.py(839):         return self.default is not NOT_PROVIDED
0.57 __init__.py(852):         if not self.empty_strings_allowed or self.null and not connection.features.interprets_empty_strings_as_nulls:
0.57 __init__.py(854):         return str  # return empty string
0.57 __init__.py(843):         return self._get_default()
0.57 __init__.py(847):         if self.has_default():
0.57 __init__.py(839):         return self.default is not NOT_PROVIDED
0.57 __init__.py(852):         if not self.empty_strings_allowed or self.null and not connection.features.interprets_empty_strings_as_nulls:
0.57 __init__.py(853):             return return_None
0.57 __init__.py(82):     return None
0.57 __init__.py(843):         return self._get_default()
0.57 __init__.py(847):         if self.has_default():
0.57 __init__.py(839):         return self.default is not NOT_PROVIDED
0.57 __init__.py(848):             if callable(self.default):
0.57 __init__.py(850):             return lambda: self.default
0.57 __init__.py(850):             return lambda: self.default
0.57 __init__.py(843):         return self._get_default()
0.57 __init__.py(847):         if self.has_default():
0.57 __init__.py(839):         return self.default is not NOT_PROVIDED
0.57 __init__.py(852):         if not self.empty_strings_allowed or self.null and not connection.features.interprets_empty_strings_as_nulls:
0.57 __init__.py(854):         return str  # return empty string
0.57 __init__.py(843):         return self._get_default()
0.57 __init__.py(847):         if self.has_default():
0.57 __init__.py(839):         return self.default is not NOT_PROVIDED
0.57 __init__.py(852):         if not self.empty_strings_allowed or self.null and not connection.features.interprets_empty_strings_as_nulls:
0.57 __init__.py(854):         return str  # return empty string
0.57 __init__.py(843):         return self._get_default()
0.57 __init__.py(847):         if self.has_default():
0.57 __init__.py(839):         return self.default is not NOT_PROVIDED
0.57 __init__.py(852):         if not self.empty_strings_allowed or self.null and not connection.features.interprets_empty_strings_as_nulls:
0.57 __init__.py(854):         return str  # return empty string
0.57 __init__.py(843):         return self._get_default()
0.57 __init__.py(847):         if self.has_default():
0.57 __init__.py(839):         return self.default is not NOT_PROVIDED
0.57 __init__.py(852):         if not self.empty_strings_allowed or self.null and not connection.features.interprets_empty_strings_as_nulls:
0.57 __init__.py(854):         return str  # return empty string
0.57 __init__.py(843):         return self._get_default()
0.57 __init__.py(847):         if self.has_default():
0.57 __init__.py(839):         return self.default is not NOT_PROVIDED
0.57 __init__.py(848):             if callable(self.default):
0.57 __init__.py(850):             return lambda: self.default
0.57 __init__.py(850):             return lambda: self.default
0.57 __init__.py(843):         return self._get_default()
0.57 __init__.py(847):         if self.has_default():
0.57 __init__.py(839):         return self.default is not NOT_PROVIDED
0.57 __init__.py(848):             if callable(self.default):
0.57 __init__.py(850):             return lambda: self.default
0.57 __init__.py(850):             return lambda: self.default
0.57 __init__.py(843):         return self._get_default()
0.57 __init__.py(847):         if self.has_default():
0.57 __init__.py(839):         return self.default is not NOT_PROVIDED
0.57 __init__.py(848):             if callable(self.default):
0.57 __init__.py(849):                 return self.default
0.57 __init__.py(843):         return self._get_default()
0.57 __init__.py(82):     return None
0.57 __init__.py(843):         return self._get_default()
0.57 __init__.py(843):         return self._get_default()
0.57 __init__.py(82):     return None
0.57 __init__.py(843):         return self._get_default()
0.57 __init__.py(850):             return lambda: self.default
0.57 __init__.py(843):         return self._get_default()
0.57 __init__.py(843):         return self._get_default()
0.57 __init__.py(843):         return self._get_default()
0.57 __init__.py(843):         return self._get_default()
0.57 __init__.py(843):         return self._get_default()
0.57 __init__.py(850):             return lambda: self.default
0.57 __init__.py(843):         return self._get_default()
0.57 __init__.py(850):             return lambda: self.default
0.57 __init__.py(843):         return self._get_default()
0.59 __init__.py(2439):         return [
0.59 __init__.py(2440):             *super().check(**kwargs),
0.59 __init__.py(1777):         return [
0.59 __init__.py(1778):             *super().check(**kwargs),
0.59 __init__.py(198):         return [
0.59 __init__.py(199):             *self._check_field_name(),
0.59 __init__.py(213):         if self.name.endswith('_'):
0.59 __init__.py(221):         elif LOOKUP_SEP in self.name:
0.59 __init__.py(229):         elif self.name == 'pk':
0.59 __init__.py(238):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(200):             *self._check_choices(),
0.59 __init__.py(245):         if not self.choices:
0.59 __init__.py(246):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(201):             *self._check_db_index(),
0.59 __init__.py(309):         if self.db_index not in (None, True, False):
0.59 __init__.py(318):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.59 __init__.py(321):         if (self.primary_key and self.null and
0.59 __init__.py(336):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.59 __init__.py(339):         if databases is None:
0.59 __init__.py(341):         app_label = self.model._meta.app_label
0.59 __init__.py(342):         errors = []
0.59 __init__.py(343):         for alias in databases:
0.59 __init__.py(346):         return errors
0.59 __init__.py(198):         return [
0.59 __init__.py(204):             *self._check_validators(),
0.59 __init__.py(349):         errors = []
0.59 __init__.py(350):         for i, validator in enumerate(self.validators):
0.59 __init__.py(1798):         validators_ = super().validators
0.59 __init__.py(611):         return [*self.default_validators, *self._validators]
0.59 __init__.py(1799):         internal_type = self.get_internal_type()
0.59 __init__.py(2515):         return 'AutoField'
0.59 __init__.py(1800):         min_value, max_value = connection.ops.integer_field_range(internal_type)
0.59 __init__.py(1801):         if min_value is not None and not any(
0.59 __init__.py(1811):         if max_value is not None and not any(
0.59 __init__.py(1821):         return validators_
0.59 __init__.py(365):         return errors
0.59 __init__.py(198):         return [
0.59 __init__.py(205):             *self._check_deprecation_details(),
0.59 __init__.py(368):         if self.system_check_removed_details is not None:
0.59 __init__.py(381):         elif self.system_check_deprecated_details is not None:
0.59 __init__.py(393):         return []
0.59 __init__.py(198):         return [
0.59 __init__.py(1777):         return [
0.59 __init__.py(1779):             *self._check_max_length_warning(),
0.59 __init__.py(1783):         if self.max_length is not None:
0.59 __init__.py(1792):         return []
0.59 __init__.py(1777):         return [
0.59 __init__.py(2439):         return [
0.59 __init__.py(2441):             *self._check_primary_key(),
0.59 __init__.py(2445):         if not self.primary_key:
0.59 __init__.py(2454):             return []
0.59 __init__.py(2439):         return [
0.59 __init__.py(1013):         databases = kwargs.get('databases') or []
0.59 __init__.py(1014):         return [
0.59 __init__.py(1015):             *super().check(**kwargs),
0.59 __init__.py(198):         return [
0.59 __init__.py(199):             *self._check_field_name(),
0.59 __init__.py(213):         if self.name.endswith('_'):
0.59 __init__.py(221):         elif LOOKUP_SEP in self.name:
0.59 __init__.py(229):         elif self.name == 'pk':
0.59 __init__.py(238):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(200):             *self._check_choices(),
0.59 __init__.py(245):         if not self.choices:
0.59 __init__.py(246):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(201):             *self._check_db_index(),
0.59 __init__.py(309):         if self.db_index not in (None, True, False):
0.59 __init__.py(318):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.59 __init__.py(321):         if (self.primary_key and self.null and
0.59 __init__.py(336):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.59 __init__.py(339):         if databases is None:
0.59 __init__.py(341):         app_label = self.model._meta.app_label
0.59 __init__.py(342):         errors = []
0.59 __init__.py(343):         for alias in databases:
0.59 __init__.py(346):         return errors
0.59 __init__.py(198):         return [
0.59 __init__.py(204):             *self._check_validators(),
0.59 __init__.py(349):         errors = []
0.59 __init__.py(350):         for i, validator in enumerate(self.validators):
0.59 __init__.py(351):             if not callable(validator):
0.59 __init__.py(350):         for i, validator in enumerate(self.validators):
0.59 __init__.py(365):         return errors
0.59 __init__.py(198):         return [
0.59 __init__.py(205):             *self._check_deprecation_details(),
0.59 __init__.py(368):         if self.system_check_removed_details is not None:
0.59 __init__.py(381):         elif self.system_check_deprecated_details is not None:
0.59 __init__.py(393):         return []
0.59 __init__.py(198):         return [
0.59 __init__.py(1014):         return [
0.59 __init__.py(1016):             *self._check_db_collation(databases),
0.59 __init__.py(1042):         errors = []
0.59 __init__.py(1043):         for db in databases:
0.59 __init__.py(1060):         return errors
0.59 __init__.py(1014):         return [
0.59 __init__.py(1017):             *self._check_max_length_attribute(**kwargs),
0.59 __init__.py(1021):         if self.max_length is None:
0.59 __init__.py(1029):         elif (not isinstance(self.max_length, int) or isinstance(self.max_length, bool) or
0.59 __init__.py(1030):                 self.max_length <= 0):
0.59 __init__.py(1029):         elif (not isinstance(self.max_length, int) or isinstance(self.max_length, bool) or
0.59 __init__.py(1039):             return []
0.59 __init__.py(1014):         return [
0.59 __init__.py(1013):         databases = kwargs.get('databases') or []
0.59 __init__.py(1014):         return [
0.59 __init__.py(1015):             *super().check(**kwargs),
0.59 __init__.py(198):         return [
0.59 __init__.py(199):             *self._check_field_name(),
0.59 __init__.py(213):         if self.name.endswith('_'):
0.59 __init__.py(221):         elif LOOKUP_SEP in self.name:
0.59 __init__.py(229):         elif self.name == 'pk':
0.59 __init__.py(238):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(200):             *self._check_choices(),
0.59 __init__.py(245):         if not self.choices:
0.59 __init__.py(246):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(201):             *self._check_db_index(),
0.59 __init__.py(309):         if self.db_index not in (None, True, False):
0.59 __init__.py(318):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.59 __init__.py(321):         if (self.primary_key and self.null and
0.59 __init__.py(336):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.59 __init__.py(339):         if databases is None:
0.59 __init__.py(341):         app_label = self.model._meta.app_label
0.59 __init__.py(342):         errors = []
0.59 __init__.py(343):         for alias in databases:
0.59 __init__.py(346):         return errors
0.59 __init__.py(198):         return [
0.59 __init__.py(204):             *self._check_validators(),
0.59 __init__.py(349):         errors = []
0.59 __init__.py(350):         for i, validator in enumerate(self.validators):
0.59 __init__.py(351):             if not callable(validator):
0.59 __init__.py(350):         for i, validator in enumerate(self.validators):
0.59 __init__.py(365):         return errors
0.59 __init__.py(198):         return [
0.59 __init__.py(205):             *self._check_deprecation_details(),
0.59 __init__.py(368):         if self.system_check_removed_details is not None:
0.59 __init__.py(381):         elif self.system_check_deprecated_details is not None:
0.59 __init__.py(393):         return []
0.59 __init__.py(198):         return [
0.59 __init__.py(1014):         return [
0.59 __init__.py(1016):             *self._check_db_collation(databases),
0.59 __init__.py(1042):         errors = []
0.59 __init__.py(1043):         for db in databases:
0.59 __init__.py(1060):         return errors
0.59 __init__.py(1014):         return [
0.59 __init__.py(1017):             *self._check_max_length_attribute(**kwargs),
0.59 __init__.py(1021):         if self.max_length is None:
0.59 __init__.py(1029):         elif (not isinstance(self.max_length, int) or isinstance(self.max_length, bool) or
0.59 __init__.py(1030):                 self.max_length <= 0):
0.59 __init__.py(1029):         elif (not isinstance(self.max_length, int) or isinstance(self.max_length, bool) or
0.59 __init__.py(1039):             return []
0.59 __init__.py(1014):         return [
0.59 __init__.py(518):         if isinstance(other, Field):
0.59 __init__.py(520):                 self.creation_counter == other.creation_counter and
0.59 __init__.py(521):                 getattr(self, 'model', None) == getattr(other, 'model', None)
0.59 __init__.py(519):             return (
0.59 __init__.py(806):         attname = self.get_attname()
0.59 __init__.py(803):         return self.name
0.59 __init__.py(807):         column = self.db_column or attname
0.59 __init__.py(808):         return attname, column
0.59 __init__.py(806):         attname = self.get_attname()
0.59 __init__.py(803):         return self.name
0.59 __init__.py(807):         column = self.db_column or attname
0.59 __init__.py(808):         return attname, column
0.59 __init__.py(806):         attname = self.get_attname()
0.59 __init__.py(803):         return self.name
0.59 __init__.py(807):         column = self.db_column or attname
0.59 __init__.py(808):         return attname, column
0.59 __init__.py(518):         if isinstance(other, Field):
0.59 __init__.py(520):                 self.creation_counter == other.creation_counter and
0.59 __init__.py(519):             return (
0.59 __init__.py(518):         if isinstance(other, Field):
0.59 __init__.py(520):                 self.creation_counter == other.creation_counter and
0.59 __init__.py(519):             return (
0.59 __init__.py(518):         if isinstance(other, Field):
0.59 __init__.py(520):                 self.creation_counter == other.creation_counter and
0.59 __init__.py(519):             return (
0.59 __init__.py(2439):         return [
0.59 __init__.py(2440):             *super().check(**kwargs),
0.59 __init__.py(1777):         return [
0.59 __init__.py(1778):             *super().check(**kwargs),
0.59 __init__.py(198):         return [
0.59 __init__.py(199):             *self._check_field_name(),
0.59 __init__.py(213):         if self.name.endswith('_'):
0.59 __init__.py(221):         elif LOOKUP_SEP in self.name:
0.59 __init__.py(229):         elif self.name == 'pk':
0.59 __init__.py(238):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(200):             *self._check_choices(),
0.59 __init__.py(245):         if not self.choices:
0.59 __init__.py(246):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(201):             *self._check_db_index(),
0.59 __init__.py(309):         if self.db_index not in (None, True, False):
0.59 __init__.py(318):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.59 __init__.py(321):         if (self.primary_key and self.null and
0.59 __init__.py(336):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.59 __init__.py(339):         if databases is None:
0.59 __init__.py(341):         app_label = self.model._meta.app_label
0.59 __init__.py(342):         errors = []
0.59 __init__.py(343):         for alias in databases:
0.59 __init__.py(346):         return errors
0.59 __init__.py(198):         return [
0.59 __init__.py(204):             *self._check_validators(),
0.59 __init__.py(349):         errors = []
0.59 __init__.py(350):         for i, validator in enumerate(self.validators):
0.59 __init__.py(1798):         validators_ = super().validators
0.59 __init__.py(611):         return [*self.default_validators, *self._validators]
0.59 __init__.py(1799):         internal_type = self.get_internal_type()
0.59 __init__.py(2515):         return 'AutoField'
0.59 __init__.py(1800):         min_value, max_value = connection.ops.integer_field_range(internal_type)
0.59 __init__.py(1801):         if min_value is not None and not any(
0.59 __init__.py(1811):         if max_value is not None and not any(
0.59 __init__.py(1821):         return validators_
0.59 __init__.py(365):         return errors
0.59 __init__.py(198):         return [
0.59 __init__.py(205):             *self._check_deprecation_details(),
0.59 __init__.py(368):         if self.system_check_removed_details is not None:
0.59 __init__.py(381):         elif self.system_check_deprecated_details is not None:
0.59 __init__.py(393):         return []
0.59 __init__.py(198):         return [
0.59 __init__.py(1777):         return [
0.59 __init__.py(1779):             *self._check_max_length_warning(),
0.59 __init__.py(1783):         if self.max_length is not None:
0.59 __init__.py(1792):         return []
0.59 __init__.py(1777):         return [
0.59 __init__.py(2439):         return [
0.59 __init__.py(2441):             *self._check_primary_key(),
0.59 __init__.py(2445):         if not self.primary_key:
0.59 __init__.py(2454):             return []
0.59 __init__.py(2439):         return [
0.59 __init__.py(1013):         databases = kwargs.get('databases') or []
0.59 __init__.py(1014):         return [
0.59 __init__.py(1015):             *super().check(**kwargs),
0.59 __init__.py(198):         return [
0.59 __init__.py(199):             *self._check_field_name(),
0.59 __init__.py(213):         if self.name.endswith('_'):
0.59 __init__.py(221):         elif LOOKUP_SEP in self.name:
0.59 __init__.py(229):         elif self.name == 'pk':
0.59 __init__.py(238):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(200):             *self._check_choices(),
0.59 __init__.py(245):         if not self.choices:
0.59 __init__.py(246):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(201):             *self._check_db_index(),
0.59 __init__.py(309):         if self.db_index not in (None, True, False):
0.59 __init__.py(318):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.59 __init__.py(321):         if (self.primary_key and self.null and
0.59 __init__.py(336):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.59 __init__.py(339):         if databases is None:
0.59 __init__.py(341):         app_label = self.model._meta.app_label
0.59 __init__.py(342):         errors = []
0.59 __init__.py(343):         for alias in databases:
0.59 __init__.py(346):         return errors
0.59 __init__.py(198):         return [
0.59 __init__.py(204):             *self._check_validators(),
0.59 __init__.py(349):         errors = []
0.59 __init__.py(350):         for i, validator in enumerate(self.validators):
0.59 __init__.py(351):             if not callable(validator):
0.59 __init__.py(350):         for i, validator in enumerate(self.validators):
0.59 __init__.py(365):         return errors
0.59 __init__.py(198):         return [
0.59 __init__.py(205):             *self._check_deprecation_details(),
0.59 __init__.py(368):         if self.system_check_removed_details is not None:
0.59 __init__.py(381):         elif self.system_check_deprecated_details is not None:
0.59 __init__.py(393):         return []
0.59 __init__.py(198):         return [
0.59 __init__.py(1014):         return [
0.59 __init__.py(1016):             *self._check_db_collation(databases),
0.59 __init__.py(1042):         errors = []
0.59 __init__.py(1043):         for db in databases:
0.59 __init__.py(1060):         return errors
0.59 __init__.py(1014):         return [
0.59 __init__.py(1017):             *self._check_max_length_attribute(**kwargs),
0.59 __init__.py(1021):         if self.max_length is None:
0.59 __init__.py(1029):         elif (not isinstance(self.max_length, int) or isinstance(self.max_length, bool) or
0.59 __init__.py(1030):                 self.max_length <= 0):
0.59 __init__.py(1029):         elif (not isinstance(self.max_length, int) or isinstance(self.max_length, bool) or
0.59 __init__.py(1039):             return []
0.59 __init__.py(1014):         return [
0.59 __init__.py(198):         return [
0.59 __init__.py(199):             *self._check_field_name(),
0.59 __init__.py(213):         if self.name.endswith('_'):
0.59 __init__.py(221):         elif LOOKUP_SEP in self.name:
0.59 __init__.py(229):         elif self.name == 'pk':
0.59 __init__.py(238):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(200):             *self._check_choices(),
0.59 __init__.py(245):         if not self.choices:
0.59 __init__.py(246):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(201):             *self._check_db_index(),
0.59 __init__.py(309):         if self.db_index not in (None, True, False):
0.59 __init__.py(318):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.59 __init__.py(321):         if (self.primary_key and self.null and
0.59 __init__.py(336):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.59 __init__.py(339):         if databases is None:
0.59 __init__.py(341):         app_label = self.model._meta.app_label
0.59 __init__.py(342):         errors = []
0.59 __init__.py(343):         for alias in databases:
0.59 __init__.py(346):         return errors
0.59 __init__.py(198):         return [
0.59 __init__.py(204):             *self._check_validators(),
0.59 __init__.py(349):         errors = []
0.59 __init__.py(350):         for i, validator in enumerate(self.validators):
0.59 __init__.py(611):         return [*self.default_validators, *self._validators]
0.59 __init__.py(365):         return errors
0.59 __init__.py(198):         return [
0.59 __init__.py(205):             *self._check_deprecation_details(),
0.59 __init__.py(368):         if self.system_check_removed_details is not None:
0.59 __init__.py(381):         elif self.system_check_deprecated_details is not None:
0.59 __init__.py(393):         return []
0.59 __init__.py(198):         return [
0.59 __init__.py(750):         return self._unique or self.primary_key
0.59 __init__.py(750):         return self._unique or self.primary_key
0.59 __init__.py(750):         return self._unique or self.primary_key
0.59 __init__.py(750):         return self._unique or self.primary_key
0.59 __init__.py(1013):         databases = kwargs.get('databases') or []
0.59 __init__.py(1014):         return [
0.59 __init__.py(1015):             *super().check(**kwargs),
0.59 __init__.py(198):         return [
0.59 __init__.py(199):             *self._check_field_name(),
0.59 __init__.py(213):         if self.name.endswith('_'):
0.59 __init__.py(221):         elif LOOKUP_SEP in self.name:
0.59 __init__.py(229):         elif self.name == 'pk':
0.59 __init__.py(238):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(200):             *self._check_choices(),
0.59 __init__.py(245):         if not self.choices:
0.59 __init__.py(246):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(201):             *self._check_db_index(),
0.59 __init__.py(309):         if self.db_index not in (None, True, False):
0.59 __init__.py(318):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.59 __init__.py(321):         if (self.primary_key and self.null and
0.59 __init__.py(336):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.59 __init__.py(339):         if databases is None:
0.59 __init__.py(341):         app_label = self.model._meta.app_label
0.59 __init__.py(342):         errors = []
0.59 __init__.py(343):         for alias in databases:
0.59 __init__.py(346):         return errors
0.59 __init__.py(198):         return [
0.59 __init__.py(204):             *self._check_validators(),
0.59 __init__.py(349):         errors = []
0.59 __init__.py(350):         for i, validator in enumerate(self.validators):
0.59 __init__.py(351):             if not callable(validator):
0.59 __init__.py(350):         for i, validator in enumerate(self.validators):
0.59 __init__.py(365):         return errors
0.59 __init__.py(198):         return [
0.59 __init__.py(205):             *self._check_deprecation_details(),
0.59 __init__.py(368):         if self.system_check_removed_details is not None:
0.59 __init__.py(381):         elif self.system_check_deprecated_details is not None:
0.59 __init__.py(393):         return []
0.59 __init__.py(198):         return [
0.59 __init__.py(1014):         return [
0.59 __init__.py(1016):             *self._check_db_collation(databases),
0.59 __init__.py(1042):         errors = []
0.59 __init__.py(1043):         for db in databases:
0.59 __init__.py(1060):         return errors
0.59 __init__.py(1014):         return [
0.59 __init__.py(1017):             *self._check_max_length_attribute(**kwargs),
0.59 __init__.py(1021):         if self.max_length is None:
0.59 __init__.py(1029):         elif (not isinstance(self.max_length, int) or isinstance(self.max_length, bool) or
0.59 __init__.py(1030):                 self.max_length <= 0):
0.59 __init__.py(1029):         elif (not isinstance(self.max_length, int) or isinstance(self.max_length, bool) or
0.59 __init__.py(1039):             return []
0.59 __init__.py(1014):         return [
0.59 __init__.py(518):         if isinstance(other, Field):
0.59 __init__.py(520):                 self.creation_counter == other.creation_counter and
0.59 __init__.py(521):                 getattr(self, 'model', None) == getattr(other, 'model', None)
0.59 __init__.py(519):             return (
0.59 __init__.py(806):         attname = self.get_attname()
0.59 __init__.py(803):         return self.name
0.59 __init__.py(807):         column = self.db_column or attname
0.59 __init__.py(808):         return attname, column
0.59 __init__.py(806):         attname = self.get_attname()
0.59 __init__.py(803):         return self.name
0.59 __init__.py(807):         column = self.db_column or attname
0.59 __init__.py(808):         return attname, column
0.59 __init__.py(806):         attname = self.get_attname()
0.59 __init__.py(803):         return self.name
0.59 __init__.py(807):         column = self.db_column or attname
0.59 __init__.py(808):         return attname, column
0.59 __init__.py(518):         if isinstance(other, Field):
0.59 __init__.py(520):                 self.creation_counter == other.creation_counter and
0.59 __init__.py(519):             return (
0.59 __init__.py(518):         if isinstance(other, Field):
0.59 __init__.py(520):                 self.creation_counter == other.creation_counter and
0.59 __init__.py(519):             return (
0.59 __init__.py(518):         if isinstance(other, Field):
0.59 __init__.py(520):                 self.creation_counter == other.creation_counter and
0.59 __init__.py(519):             return (
0.59 __init__.py(518):         if isinstance(other, Field):
0.59 __init__.py(520):                 self.creation_counter == other.creation_counter and
0.59 __init__.py(519):             return (
0.59 __init__.py(518):         if isinstance(other, Field):
0.59 __init__.py(520):                 self.creation_counter == other.creation_counter and
0.59 __init__.py(519):             return (
0.59 __init__.py(2439):         return [
0.59 __init__.py(2440):             *super().check(**kwargs),
0.59 __init__.py(1777):         return [
0.59 __init__.py(1778):             *super().check(**kwargs),
0.59 __init__.py(198):         return [
0.59 __init__.py(199):             *self._check_field_name(),
0.59 __init__.py(213):         if self.name.endswith('_'):
0.59 __init__.py(221):         elif LOOKUP_SEP in self.name:
0.59 __init__.py(229):         elif self.name == 'pk':
0.59 __init__.py(238):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(200):             *self._check_choices(),
0.59 __init__.py(245):         if not self.choices:
0.59 __init__.py(246):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(201):             *self._check_db_index(),
0.59 __init__.py(309):         if self.db_index not in (None, True, False):
0.59 __init__.py(318):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.59 __init__.py(321):         if (self.primary_key and self.null and
0.59 __init__.py(336):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.59 __init__.py(339):         if databases is None:
0.59 __init__.py(341):         app_label = self.model._meta.app_label
0.59 __init__.py(342):         errors = []
0.59 __init__.py(343):         for alias in databases:
0.59 __init__.py(346):         return errors
0.59 __init__.py(198):         return [
0.59 __init__.py(204):             *self._check_validators(),
0.59 __init__.py(349):         errors = []
0.59 __init__.py(350):         for i, validator in enumerate(self.validators):
0.59 __init__.py(1798):         validators_ = super().validators
0.59 __init__.py(611):         return [*self.default_validators, *self._validators]
0.59 __init__.py(1799):         internal_type = self.get_internal_type()
0.59 __init__.py(2515):         return 'AutoField'
0.59 __init__.py(1800):         min_value, max_value = connection.ops.integer_field_range(internal_type)
0.59 __init__.py(1801):         if min_value is not None and not any(
0.59 __init__.py(1811):         if max_value is not None and not any(
0.59 __init__.py(1821):         return validators_
0.59 __init__.py(365):         return errors
0.59 __init__.py(198):         return [
0.59 __init__.py(205):             *self._check_deprecation_details(),
0.59 __init__.py(368):         if self.system_check_removed_details is not None:
0.59 __init__.py(381):         elif self.system_check_deprecated_details is not None:
0.59 __init__.py(393):         return []
0.59 __init__.py(198):         return [
0.59 __init__.py(1777):         return [
0.59 __init__.py(1779):             *self._check_max_length_warning(),
0.59 __init__.py(1783):         if self.max_length is not None:
0.59 __init__.py(1792):         return []
0.59 __init__.py(1777):         return [
0.59 __init__.py(2439):         return [
0.59 __init__.py(2441):             *self._check_primary_key(),
0.59 __init__.py(2445):         if not self.primary_key:
0.59 __init__.py(2454):             return []
0.59 __init__.py(2439):         return [
0.59 __init__.py(1013):         databases = kwargs.get('databases') or []
0.59 __init__.py(1014):         return [
0.59 __init__.py(1015):             *super().check(**kwargs),
0.59 __init__.py(198):         return [
0.59 __init__.py(199):             *self._check_field_name(),
0.59 __init__.py(213):         if self.name.endswith('_'):
0.59 __init__.py(221):         elif LOOKUP_SEP in self.name:
0.59 __init__.py(229):         elif self.name == 'pk':
0.59 __init__.py(238):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(200):             *self._check_choices(),
0.59 __init__.py(245):         if not self.choices:
0.59 __init__.py(246):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(201):             *self._check_db_index(),
0.59 __init__.py(309):         if self.db_index not in (None, True, False):
0.59 __init__.py(318):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.59 __init__.py(321):         if (self.primary_key and self.null and
0.59 __init__.py(336):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.59 __init__.py(339):         if databases is None:
0.59 __init__.py(341):         app_label = self.model._meta.app_label
0.59 __init__.py(342):         errors = []
0.59 __init__.py(343):         for alias in databases:
0.59 __init__.py(346):         return errors
0.59 __init__.py(198):         return [
0.59 __init__.py(204):             *self._check_validators(),
0.59 __init__.py(349):         errors = []
0.59 __init__.py(350):         for i, validator in enumerate(self.validators):
0.59 __init__.py(351):             if not callable(validator):
0.59 __init__.py(350):         for i, validator in enumerate(self.validators):
0.59 __init__.py(365):         return errors
0.59 __init__.py(198):         return [
0.59 __init__.py(205):             *self._check_deprecation_details(),
0.59 __init__.py(368):         if self.system_check_removed_details is not None:
0.59 __init__.py(381):         elif self.system_check_deprecated_details is not None:
0.59 __init__.py(393):         return []
0.59 __init__.py(198):         return [
0.59 __init__.py(1014):         return [
0.59 __init__.py(1016):             *self._check_db_collation(databases),
0.59 __init__.py(1042):         errors = []
0.59 __init__.py(1043):         for db in databases:
0.59 __init__.py(1060):         return errors
0.59 __init__.py(1014):         return [
0.59 __init__.py(1017):             *self._check_max_length_attribute(**kwargs),
0.59 __init__.py(1021):         if self.max_length is None:
0.59 __init__.py(1029):         elif (not isinstance(self.max_length, int) or isinstance(self.max_length, bool) or
0.59 __init__.py(1030):                 self.max_length <= 0):
0.59 __init__.py(1029):         elif (not isinstance(self.max_length, int) or isinstance(self.max_length, bool) or
0.59 __init__.py(1039):             return []
0.59 __init__.py(1014):         return [
0.59 __init__.py(198):         return [
0.59 __init__.py(199):             *self._check_field_name(),
0.59 __init__.py(213):         if self.name.endswith('_'):
0.59 __init__.py(221):         elif LOOKUP_SEP in self.name:
0.59 __init__.py(229):         elif self.name == 'pk':
0.59 __init__.py(238):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(200):             *self._check_choices(),
0.59 __init__.py(245):         if not self.choices:
0.59 __init__.py(246):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(201):             *self._check_db_index(),
0.59 __init__.py(309):         if self.db_index not in (None, True, False):
0.59 __init__.py(318):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.59 __init__.py(321):         if (self.primary_key and self.null and
0.59 __init__.py(336):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.59 __init__.py(339):         if databases is None:
0.59 __init__.py(341):         app_label = self.model._meta.app_label
0.59 __init__.py(342):         errors = []
0.59 __init__.py(343):         for alias in databases:
0.59 __init__.py(346):         return errors
0.59 __init__.py(198):         return [
0.59 __init__.py(204):             *self._check_validators(),
0.59 __init__.py(349):         errors = []
0.59 __init__.py(350):         for i, validator in enumerate(self.validators):
0.59 __init__.py(611):         return [*self.default_validators, *self._validators]
0.59 __init__.py(365):         return errors
0.59 __init__.py(198):         return [
0.59 __init__.py(205):             *self._check_deprecation_details(),
0.59 __init__.py(368):         if self.system_check_removed_details is not None:
0.59 __init__.py(381):         elif self.system_check_deprecated_details is not None:
0.59 __init__.py(393):         return []
0.59 __init__.py(198):         return [
0.59 __init__.py(750):         return self._unique or self.primary_key
0.59 __init__.py(518):         if isinstance(other, Field):
0.59 __init__.py(520):                 self.creation_counter == other.creation_counter and
0.59 __init__.py(521):                 getattr(self, 'model', None) == getattr(other, 'model', None)
0.59 __init__.py(519):             return (
0.59 __init__.py(803):         return self.name
0.59 __init__.py(806):         attname = self.get_attname()
0.59 __init__.py(803):         return self.name
0.59 __init__.py(807):         column = self.db_column or attname
0.59 __init__.py(808):         return attname, column
0.59 __init__.py(806):         attname = self.get_attname()
0.59 __init__.py(803):         return self.name
0.59 __init__.py(807):         column = self.db_column or attname
0.59 __init__.py(808):         return attname, column
0.59 __init__.py(2439):         return [
0.59 __init__.py(2440):             *super().check(**kwargs),
0.59 __init__.py(1777):         return [
0.59 __init__.py(1778):             *super().check(**kwargs),
0.59 __init__.py(198):         return [
0.59 __init__.py(199):             *self._check_field_name(),
0.59 __init__.py(213):         if self.name.endswith('_'):
0.59 __init__.py(221):         elif LOOKUP_SEP in self.name:
0.59 __init__.py(229):         elif self.name == 'pk':
0.59 __init__.py(238):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(200):             *self._check_choices(),
0.59 __init__.py(245):         if not self.choices:
0.59 __init__.py(246):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(201):             *self._check_db_index(),
0.59 __init__.py(309):         if self.db_index not in (None, True, False):
0.59 __init__.py(318):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.59 __init__.py(321):         if (self.primary_key and self.null and
0.59 __init__.py(336):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.59 __init__.py(339):         if databases is None:
0.59 __init__.py(341):         app_label = self.model._meta.app_label
0.59 __init__.py(342):         errors = []
0.59 __init__.py(343):         for alias in databases:
0.59 __init__.py(346):         return errors
0.59 __init__.py(198):         return [
0.59 __init__.py(204):             *self._check_validators(),
0.59 __init__.py(349):         errors = []
0.59 __init__.py(350):         for i, validator in enumerate(self.validators):
0.59 __init__.py(1798):         validators_ = super().validators
0.59 __init__.py(611):         return [*self.default_validators, *self._validators]
0.59 __init__.py(1799):         internal_type = self.get_internal_type()
0.59 __init__.py(2515):         return 'AutoField'
0.59 __init__.py(1800):         min_value, max_value = connection.ops.integer_field_range(internal_type)
0.59 __init__.py(1801):         if min_value is not None and not any(
0.59 __init__.py(1811):         if max_value is not None and not any(
0.59 __init__.py(1821):         return validators_
0.59 __init__.py(365):         return errors
0.59 __init__.py(198):         return [
0.59 __init__.py(205):             *self._check_deprecation_details(),
0.59 __init__.py(368):         if self.system_check_removed_details is not None:
0.59 __init__.py(381):         elif self.system_check_deprecated_details is not None:
0.59 __init__.py(393):         return []
0.59 __init__.py(198):         return [
0.59 __init__.py(1777):         return [
0.59 __init__.py(1779):             *self._check_max_length_warning(),
0.59 __init__.py(1783):         if self.max_length is not None:
0.59 __init__.py(1792):         return []
0.59 __init__.py(1777):         return [
0.59 __init__.py(2439):         return [
0.59 __init__.py(2441):             *self._check_primary_key(),
0.59 __init__.py(2445):         if not self.primary_key:
0.59 __init__.py(2454):             return []
0.59 __init__.py(2439):         return [
0.59 __init__.py(1013):         databases = kwargs.get('databases') or []
0.59 __init__.py(1014):         return [
0.59 __init__.py(1015):             *super().check(**kwargs),
0.59 __init__.py(198):         return [
0.59 __init__.py(199):             *self._check_field_name(),
0.59 __init__.py(213):         if self.name.endswith('_'):
0.59 __init__.py(221):         elif LOOKUP_SEP in self.name:
0.59 __init__.py(229):         elif self.name == 'pk':
0.59 __init__.py(238):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(200):             *self._check_choices(),
0.59 __init__.py(245):         if not self.choices:
0.59 __init__.py(246):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(201):             *self._check_db_index(),
0.59 __init__.py(309):         if self.db_index not in (None, True, False):
0.59 __init__.py(318):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.59 __init__.py(321):         if (self.primary_key and self.null and
0.59 __init__.py(336):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.59 __init__.py(339):         if databases is None:
0.59 __init__.py(341):         app_label = self.model._meta.app_label
0.59 __init__.py(342):         errors = []
0.59 __init__.py(343):         for alias in databases:
0.59 __init__.py(346):         return errors
0.59 __init__.py(198):         return [
0.59 __init__.py(204):             *self._check_validators(),
0.59 __init__.py(349):         errors = []
0.59 __init__.py(350):         for i, validator in enumerate(self.validators):
0.59 __init__.py(351):             if not callable(validator):
0.59 __init__.py(350):         for i, validator in enumerate(self.validators):
0.59 __init__.py(365):         return errors
0.59 __init__.py(198):         return [
0.59 __init__.py(205):             *self._check_deprecation_details(),
0.59 __init__.py(368):         if self.system_check_removed_details is not None:
0.59 __init__.py(381):         elif self.system_check_deprecated_details is not None:
0.59 __init__.py(393):         return []
0.59 __init__.py(198):         return [
0.59 __init__.py(1014):         return [
0.59 __init__.py(1016):             *self._check_db_collation(databases),
0.59 __init__.py(1042):         errors = []
0.59 __init__.py(1043):         for db in databases:
0.59 __init__.py(1060):         return errors
0.59 __init__.py(1014):         return [
0.59 __init__.py(1017):             *self._check_max_length_attribute(**kwargs),
0.59 __init__.py(1021):         if self.max_length is None:
0.59 __init__.py(1029):         elif (not isinstance(self.max_length, int) or isinstance(self.max_length, bool) or
0.59 __init__.py(1030):                 self.max_length <= 0):
0.59 __init__.py(1029):         elif (not isinstance(self.max_length, int) or isinstance(self.max_length, bool) or
0.59 __init__.py(1039):             return []
0.59 __init__.py(1014):         return [
0.59 __init__.py(1126):         return [
0.59 __init__.py(1127):             *super().check(**kwargs),
0.59 __init__.py(198):         return [
0.59 __init__.py(199):             *self._check_field_name(),
0.59 __init__.py(213):         if self.name.endswith('_'):
0.59 __init__.py(221):         elif LOOKUP_SEP in self.name:
0.59 __init__.py(229):         elif self.name == 'pk':
0.59 __init__.py(238):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(200):             *self._check_choices(),
0.59 __init__.py(245):         if not self.choices:
0.59 __init__.py(246):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(201):             *self._check_db_index(),
0.59 __init__.py(309):         if self.db_index not in (None, True, False):
0.59 __init__.py(318):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.59 __init__.py(321):         if (self.primary_key and self.null and
0.59 __init__.py(336):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.59 __init__.py(339):         if databases is None:
0.59 __init__.py(341):         app_label = self.model._meta.app_label
0.59 __init__.py(342):         errors = []
0.59 __init__.py(343):         for alias in databases:
0.59 __init__.py(346):         return errors
0.59 __init__.py(198):         return [
0.59 __init__.py(204):             *self._check_validators(),
0.59 __init__.py(349):         errors = []
0.59 __init__.py(350):         for i, validator in enumerate(self.validators):
0.59 __init__.py(611):         return [*self.default_validators, *self._validators]
0.59 __init__.py(365):         return errors
0.59 __init__.py(198):         return [
0.59 __init__.py(205):             *self._check_deprecation_details(),
0.59 __init__.py(368):         if self.system_check_removed_details is not None:
0.59 __init__.py(381):         elif self.system_check_deprecated_details is not None:
0.59 __init__.py(393):         return []
0.59 __init__.py(198):         return [
0.59 __init__.py(1126):         return [
0.59 __init__.py(1128):             *self._check_mutually_exclusive_options(),
0.59 __init__.py(1136):         mutually_exclusive_options = [self.auto_now_add, self.auto_now, self.has_default()]
0.59 __init__.py(839):         return self.default is not NOT_PROVIDED
0.59 __init__.py(1137):         enabled_options = [option not in (None, False) for option in mutually_exclusive_options].count(True)
0.59 __init__.py(1137):         enabled_options = [option not in (None, False) for option in mutually_exclusive_options].count(True)
0.59 __init__.py(1137):         enabled_options = [option not in (None, False) for option in mutually_exclusive_options].count(True)
0.59 __init__.py(1137):         enabled_options = [option not in (None, False) for option in mutually_exclusive_options].count(True)
0.59 __init__.py(1137):         enabled_options = [option not in (None, False) for option in mutually_exclusive_options].count(True)
0.59 __init__.py(1138):         if enabled_options > 1:
0.59 __init__.py(1149):             return []
0.59 __init__.py(1126):         return [
0.59 __init__.py(1129):             *self._check_fix_default_value(),
0.59 __init__.py(1333):         if not self.has_default():
0.59 __init__.py(839):         return self.default is not NOT_PROVIDED
0.59 __init__.py(1334):             return []
0.59 __init__.py(1126):         return [
0.59 __init__.py(198):         return [
0.59 __init__.py(199):             *self._check_field_name(),
0.59 __init__.py(213):         if self.name.endswith('_'):
0.59 __init__.py(221):         elif LOOKUP_SEP in self.name:
0.59 __init__.py(229):         elif self.name == 'pk':
0.59 __init__.py(238):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(200):             *self._check_choices(),
0.59 __init__.py(245):         if not self.choices:
0.59 __init__.py(246):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(201):             *self._check_db_index(),
0.59 __init__.py(309):         if self.db_index not in (None, True, False):
0.59 __init__.py(318):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.59 __init__.py(321):         if (self.primary_key and self.null and
0.59 __init__.py(336):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.59 __init__.py(339):         if databases is None:
0.59 __init__.py(341):         app_label = self.model._meta.app_label
0.59 __init__.py(342):         errors = []
0.59 __init__.py(343):         for alias in databases:
0.59 __init__.py(346):         return errors
0.59 __init__.py(198):         return [
0.59 __init__.py(204):             *self._check_validators(),
0.59 __init__.py(349):         errors = []
0.59 __init__.py(350):         for i, validator in enumerate(self.validators):
0.59 __init__.py(611):         return [*self.default_validators, *self._validators]
0.59 __init__.py(365):         return errors
0.59 __init__.py(198):         return [
0.59 __init__.py(205):             *self._check_deprecation_details(),
0.59 __init__.py(368):         if self.system_check_removed_details is not None:
0.59 __init__.py(381):         elif self.system_check_deprecated_details is not None:
0.59 __init__.py(393):         return []
0.59 __init__.py(198):         return [
0.59 __init__.py(1013):         databases = kwargs.get('databases') or []
0.59 __init__.py(1014):         return [
0.59 __init__.py(1015):             *super().check(**kwargs),
0.59 __init__.py(198):         return [
0.59 __init__.py(199):             *self._check_field_name(),
0.59 __init__.py(213):         if self.name.endswith('_'):
0.59 __init__.py(221):         elif LOOKUP_SEP in self.name:
0.59 __init__.py(229):         elif self.name == 'pk':
0.59 __init__.py(238):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(200):             *self._check_choices(),
0.59 __init__.py(245):         if not self.choices:
0.59 __init__.py(246):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(201):             *self._check_db_index(),
0.59 __init__.py(309):         if self.db_index not in (None, True, False):
0.59 __init__.py(318):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.59 __init__.py(321):         if (self.primary_key and self.null and
0.59 __init__.py(336):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.59 __init__.py(339):         if databases is None:
0.59 __init__.py(341):         app_label = self.model._meta.app_label
0.59 __init__.py(342):         errors = []
0.59 __init__.py(343):         for alias in databases:
0.59 __init__.py(346):         return errors
0.59 __init__.py(198):         return [
0.59 __init__.py(204):             *self._check_validators(),
0.59 __init__.py(349):         errors = []
0.59 __init__.py(350):         for i, validator in enumerate(self.validators):
0.59 __init__.py(351):             if not callable(validator):
0.59 __init__.py(350):         for i, validator in enumerate(self.validators):
0.59 __init__.py(351):             if not callable(validator):
0.59 __init__.py(350):         for i, validator in enumerate(self.validators):
0.59 __init__.py(365):         return errors
0.59 __init__.py(198):         return [
0.59 __init__.py(205):             *self._check_deprecation_details(),
0.59 __init__.py(368):         if self.system_check_removed_details is not None:
0.59 __init__.py(381):         elif self.system_check_deprecated_details is not None:
0.59 __init__.py(393):         return []
0.59 __init__.py(198):         return [
0.59 __init__.py(1014):         return [
0.59 __init__.py(1016):             *self._check_db_collation(databases),
0.59 __init__.py(1042):         errors = []
0.59 __init__.py(1043):         for db in databases:
0.59 __init__.py(1060):         return errors
0.59 __init__.py(1014):         return [
0.59 __init__.py(1017):             *self._check_max_length_attribute(**kwargs),
0.59 __init__.py(1021):         if self.max_length is None:
0.59 __init__.py(1029):         elif (not isinstance(self.max_length, int) or isinstance(self.max_length, bool) or
0.59 __init__.py(1030):                 self.max_length <= 0):
0.59 __init__.py(1029):         elif (not isinstance(self.max_length, int) or isinstance(self.max_length, bool) or
0.59 __init__.py(1039):             return []
0.59 __init__.py(1014):         return [
0.59 __init__.py(1013):         databases = kwargs.get('databases') or []
0.59 __init__.py(1014):         return [
0.59 __init__.py(1015):             *super().check(**kwargs),
0.59 __init__.py(198):         return [
0.59 __init__.py(199):             *self._check_field_name(),
0.59 __init__.py(213):         if self.name.endswith('_'):
0.59 __init__.py(221):         elif LOOKUP_SEP in self.name:
0.59 __init__.py(229):         elif self.name == 'pk':
0.59 __init__.py(238):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(200):             *self._check_choices(),
0.59 __init__.py(245):         if not self.choices:
0.59 __init__.py(246):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(201):             *self._check_db_index(),
0.59 __init__.py(309):         if self.db_index not in (None, True, False):
0.59 __init__.py(318):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.59 __init__.py(321):         if (self.primary_key and self.null and
0.59 __init__.py(336):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.59 __init__.py(339):         if databases is None:
0.59 __init__.py(341):         app_label = self.model._meta.app_label
0.59 __init__.py(342):         errors = []
0.59 __init__.py(343):         for alias in databases:
0.59 __init__.py(346):         return errors
0.59 __init__.py(198):         return [
0.59 __init__.py(204):             *self._check_validators(),
0.59 __init__.py(349):         errors = []
0.59 __init__.py(350):         for i, validator in enumerate(self.validators):
0.59 __init__.py(351):             if not callable(validator):
0.59 __init__.py(350):         for i, validator in enumerate(self.validators):
0.59 __init__.py(365):         return errors
0.59 __init__.py(198):         return [
0.59 __init__.py(205):             *self._check_deprecation_details(),
0.59 __init__.py(368):         if self.system_check_removed_details is not None:
0.59 __init__.py(381):         elif self.system_check_deprecated_details is not None:
0.59 __init__.py(393):         return []
0.59 __init__.py(198):         return [
0.59 __init__.py(1014):         return [
0.59 __init__.py(1016):             *self._check_db_collation(databases),
0.59 __init__.py(1042):         errors = []
0.59 __init__.py(1043):         for db in databases:
0.59 __init__.py(1060):         return errors
0.59 __init__.py(1014):         return [
0.59 __init__.py(1017):             *self._check_max_length_attribute(**kwargs),
0.59 __init__.py(1021):         if self.max_length is None:
0.59 __init__.py(1029):         elif (not isinstance(self.max_length, int) or isinstance(self.max_length, bool) or
0.59 __init__.py(1030):                 self.max_length <= 0):
0.59 __init__.py(1029):         elif (not isinstance(self.max_length, int) or isinstance(self.max_length, bool) or
0.59 __init__.py(1039):             return []
0.59 __init__.py(1014):         return [
0.59 __init__.py(1013):         databases = kwargs.get('databases') or []
0.59 __init__.py(1014):         return [
0.59 __init__.py(1015):             *super().check(**kwargs),
0.59 __init__.py(198):         return [
0.59 __init__.py(199):             *self._check_field_name(),
0.59 __init__.py(213):         if self.name.endswith('_'):
0.59 __init__.py(221):         elif LOOKUP_SEP in self.name:
0.59 __init__.py(229):         elif self.name == 'pk':
0.59 __init__.py(238):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(200):             *self._check_choices(),
0.59 __init__.py(245):         if not self.choices:
0.59 __init__.py(246):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(201):             *self._check_db_index(),
0.59 __init__.py(309):         if self.db_index not in (None, True, False):
0.59 __init__.py(318):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.59 __init__.py(321):         if (self.primary_key and self.null and
0.59 __init__.py(336):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.59 __init__.py(339):         if databases is None:
0.59 __init__.py(341):         app_label = self.model._meta.app_label
0.59 __init__.py(342):         errors = []
0.59 __init__.py(343):         for alias in databases:
0.59 __init__.py(346):         return errors
0.59 __init__.py(198):         return [
0.59 __init__.py(204):             *self._check_validators(),
0.59 __init__.py(349):         errors = []
0.59 __init__.py(350):         for i, validator in enumerate(self.validators):
0.59 __init__.py(351):             if not callable(validator):
0.59 __init__.py(350):         for i, validator in enumerate(self.validators):
0.59 __init__.py(365):         return errors
0.59 __init__.py(198):         return [
0.59 __init__.py(205):             *self._check_deprecation_details(),
0.59 __init__.py(368):         if self.system_check_removed_details is not None:
0.59 __init__.py(381):         elif self.system_check_deprecated_details is not None:
0.59 __init__.py(393):         return []
0.59 __init__.py(198):         return [
0.59 __init__.py(1014):         return [
0.59 __init__.py(1016):             *self._check_db_collation(databases),
0.59 __init__.py(1042):         errors = []
0.59 __init__.py(1043):         for db in databases:
0.59 __init__.py(1060):         return errors
0.59 __init__.py(1014):         return [
0.59 __init__.py(1017):             *self._check_max_length_attribute(**kwargs),
0.59 __init__.py(1021):         if self.max_length is None:
0.59 __init__.py(1029):         elif (not isinstance(self.max_length, int) or isinstance(self.max_length, bool) or
0.59 __init__.py(1030):                 self.max_length <= 0):
0.59 __init__.py(1029):         elif (not isinstance(self.max_length, int) or isinstance(self.max_length, bool) or
0.59 __init__.py(1039):             return []
0.59 __init__.py(1014):         return [
0.59 __init__.py(1013):         databases = kwargs.get('databases') or []
0.59 __init__.py(1014):         return [
0.59 __init__.py(1015):             *super().check(**kwargs),
0.59 __init__.py(198):         return [
0.59 __init__.py(199):             *self._check_field_name(),
0.59 __init__.py(213):         if self.name.endswith('_'):
0.59 __init__.py(221):         elif LOOKUP_SEP in self.name:
0.59 __init__.py(229):         elif self.name == 'pk':
0.59 __init__.py(238):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(200):             *self._check_choices(),
0.59 __init__.py(245):         if not self.choices:
0.59 __init__.py(246):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(201):             *self._check_db_index(),
0.59 __init__.py(309):         if self.db_index not in (None, True, False):
0.59 __init__.py(318):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.59 __init__.py(321):         if (self.primary_key and self.null and
0.59 __init__.py(336):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.59 __init__.py(339):         if databases is None:
0.59 __init__.py(341):         app_label = self.model._meta.app_label
0.59 __init__.py(342):         errors = []
0.59 __init__.py(343):         for alias in databases:
0.59 __init__.py(346):         return errors
0.59 __init__.py(198):         return [
0.59 __init__.py(204):             *self._check_validators(),
0.59 __init__.py(349):         errors = []
0.59 __init__.py(350):         for i, validator in enumerate(self.validators):
0.59 __init__.py(351):             if not callable(validator):
0.59 __init__.py(350):         for i, validator in enumerate(self.validators):
0.59 __init__.py(351):             if not callable(validator):
0.59 __init__.py(350):         for i, validator in enumerate(self.validators):
0.59 __init__.py(365):         return errors
0.59 __init__.py(198):         return [
0.59 __init__.py(205):             *self._check_deprecation_details(),
0.59 __init__.py(368):         if self.system_check_removed_details is not None:
0.59 __init__.py(381):         elif self.system_check_deprecated_details is not None:
0.59 __init__.py(393):         return []
0.59 __init__.py(198):         return [
0.59 __init__.py(1014):         return [
0.59 __init__.py(1016):             *self._check_db_collation(databases),
0.59 __init__.py(1042):         errors = []
0.59 __init__.py(1043):         for db in databases:
0.59 __init__.py(1060):         return errors
0.59 __init__.py(1014):         return [
0.59 __init__.py(1017):             *self._check_max_length_attribute(**kwargs),
0.59 __init__.py(1021):         if self.max_length is None:
0.59 __init__.py(1029):         elif (not isinstance(self.max_length, int) or isinstance(self.max_length, bool) or
0.59 __init__.py(1030):                 self.max_length <= 0):
0.59 __init__.py(1029):         elif (not isinstance(self.max_length, int) or isinstance(self.max_length, bool) or
0.59 __init__.py(1039):             return []
0.59 __init__.py(1014):         return [
0.59 __init__.py(198):         return [
0.59 __init__.py(199):             *self._check_field_name(),
0.59 __init__.py(213):         if self.name.endswith('_'):
0.59 __init__.py(221):         elif LOOKUP_SEP in self.name:
0.59 __init__.py(229):         elif self.name == 'pk':
0.59 __init__.py(238):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(200):             *self._check_choices(),
0.59 __init__.py(245):         if not self.choices:
0.59 __init__.py(246):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(201):             *self._check_db_index(),
0.59 __init__.py(309):         if self.db_index not in (None, True, False):
0.59 __init__.py(318):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.59 __init__.py(321):         if (self.primary_key and self.null and
0.59 __init__.py(336):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.59 __init__.py(339):         if databases is None:
0.59 __init__.py(341):         app_label = self.model._meta.app_label
0.59 __init__.py(342):         errors = []
0.59 __init__.py(343):         for alias in databases:
0.59 __init__.py(346):         return errors
0.59 __init__.py(198):         return [
0.59 __init__.py(204):             *self._check_validators(),
0.59 __init__.py(349):         errors = []
0.59 __init__.py(350):         for i, validator in enumerate(self.validators):
0.59 __init__.py(611):         return [*self.default_validators, *self._validators]
0.59 __init__.py(365):         return errors
0.59 __init__.py(198):         return [
0.59 __init__.py(205):             *self._check_deprecation_details(),
0.59 __init__.py(368):         if self.system_check_removed_details is not None:
0.59 __init__.py(381):         elif self.system_check_deprecated_details is not None:
0.59 __init__.py(393):         return []
0.59 __init__.py(198):         return [
0.59 __init__.py(198):         return [
0.59 __init__.py(199):             *self._check_field_name(),
0.59 __init__.py(213):         if self.name.endswith('_'):
0.59 __init__.py(221):         elif LOOKUP_SEP in self.name:
0.59 __init__.py(229):         elif self.name == 'pk':
0.59 __init__.py(238):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(200):             *self._check_choices(),
0.59 __init__.py(245):         if not self.choices:
0.59 __init__.py(246):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(201):             *self._check_db_index(),
0.59 __init__.py(309):         if self.db_index not in (None, True, False):
0.59 __init__.py(318):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.59 __init__.py(321):         if (self.primary_key and self.null and
0.59 __init__.py(336):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.59 __init__.py(339):         if databases is None:
0.59 __init__.py(341):         app_label = self.model._meta.app_label
0.59 __init__.py(342):         errors = []
0.59 __init__.py(343):         for alias in databases:
0.59 __init__.py(346):         return errors
0.59 __init__.py(198):         return [
0.59 __init__.py(204):             *self._check_validators(),
0.59 __init__.py(349):         errors = []
0.59 __init__.py(350):         for i, validator in enumerate(self.validators):
0.59 __init__.py(611):         return [*self.default_validators, *self._validators]
0.59 __init__.py(365):         return errors
0.59 __init__.py(198):         return [
0.59 __init__.py(205):             *self._check_deprecation_details(),
0.59 __init__.py(368):         if self.system_check_removed_details is not None:
0.59 __init__.py(381):         elif self.system_check_deprecated_details is not None:
0.59 __init__.py(393):         return []
0.59 __init__.py(198):         return [
0.59 __init__.py(1126):         return [
0.59 __init__.py(1127):             *super().check(**kwargs),
0.59 __init__.py(198):         return [
0.59 __init__.py(199):             *self._check_field_name(),
0.59 __init__.py(213):         if self.name.endswith('_'):
0.59 __init__.py(221):         elif LOOKUP_SEP in self.name:
0.59 __init__.py(229):         elif self.name == 'pk':
0.59 __init__.py(238):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(200):             *self._check_choices(),
0.59 __init__.py(245):         if not self.choices:
0.59 __init__.py(246):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(201):             *self._check_db_index(),
0.59 __init__.py(309):         if self.db_index not in (None, True, False):
0.59 __init__.py(318):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.59 __init__.py(321):         if (self.primary_key and self.null and
0.59 __init__.py(336):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.59 __init__.py(339):         if databases is None:
0.59 __init__.py(341):         app_label = self.model._meta.app_label
0.59 __init__.py(342):         errors = []
0.59 __init__.py(343):         for alias in databases:
0.59 __init__.py(346):         return errors
0.59 __init__.py(198):         return [
0.59 __init__.py(204):             *self._check_validators(),
0.59 __init__.py(349):         errors = []
0.59 __init__.py(350):         for i, validator in enumerate(self.validators):
0.59 __init__.py(611):         return [*self.default_validators, *self._validators]
0.59 __init__.py(365):         return errors
0.59 __init__.py(198):         return [
0.59 __init__.py(205):             *self._check_deprecation_details(),
0.59 __init__.py(368):         if self.system_check_removed_details is not None:
0.59 __init__.py(381):         elif self.system_check_deprecated_details is not None:
0.59 __init__.py(393):         return []
0.59 __init__.py(198):         return [
0.59 __init__.py(1126):         return [
0.59 __init__.py(1128):             *self._check_mutually_exclusive_options(),
0.59 __init__.py(1136):         mutually_exclusive_options = [self.auto_now_add, self.auto_now, self.has_default()]
0.59 __init__.py(839):         return self.default is not NOT_PROVIDED
0.59 __init__.py(1137):         enabled_options = [option not in (None, False) for option in mutually_exclusive_options].count(True)
0.59 __init__.py(1137):         enabled_options = [option not in (None, False) for option in mutually_exclusive_options].count(True)
0.59 __init__.py(1137):         enabled_options = [option not in (None, False) for option in mutually_exclusive_options].count(True)
0.59 __init__.py(1137):         enabled_options = [option not in (None, False) for option in mutually_exclusive_options].count(True)
0.59 __init__.py(1137):         enabled_options = [option not in (None, False) for option in mutually_exclusive_options].count(True)
0.59 __init__.py(1138):         if enabled_options > 1:
0.59 __init__.py(1149):             return []
0.59 __init__.py(1126):         return [
0.59 __init__.py(1129):             *self._check_fix_default_value(),
0.59 __init__.py(1333):         if not self.has_default():
0.59 __init__.py(839):         return self.default is not NOT_PROVIDED
0.59 __init__.py(1336):         value = self.default
0.59 __init__.py(1337):         if isinstance(value, (datetime.datetime, datetime.date)):
0.59 __init__.py(1340):         return []
0.59 __init__.py(1126):         return [
0.59 __init__.py(198):         return [
0.59 __init__.py(199):             *self._check_field_name(),
0.59 __init__.py(213):         if self.name.endswith('_'):
0.59 __init__.py(221):         elif LOOKUP_SEP in self.name:
0.59 __init__.py(229):         elif self.name == 'pk':
0.59 __init__.py(238):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(200):             *self._check_choices(),
0.59 __init__.py(245):         if not self.choices:
0.59 __init__.py(246):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(201):             *self._check_db_index(),
0.59 __init__.py(309):         if self.db_index not in (None, True, False):
0.59 __init__.py(318):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.59 __init__.py(321):         if (self.primary_key and self.null and
0.59 __init__.py(336):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.59 __init__.py(339):         if databases is None:
0.59 __init__.py(341):         app_label = self.model._meta.app_label
0.59 __init__.py(342):         errors = []
0.59 __init__.py(343):         for alias in databases:
0.59 __init__.py(346):         return errors
0.59 __init__.py(198):         return [
0.59 __init__.py(204):             *self._check_validators(),
0.59 __init__.py(349):         errors = []
0.59 __init__.py(350):         for i, validator in enumerate(self.validators):
0.59 __init__.py(611):         return [*self.default_validators, *self._validators]
0.59 __init__.py(365):         return errors
0.59 __init__.py(198):         return [
0.59 __init__.py(205):             *self._check_deprecation_details(),
0.59 __init__.py(368):         if self.system_check_removed_details is not None:
0.59 __init__.py(381):         elif self.system_check_deprecated_details is not None:
0.59 __init__.py(393):         return []
0.59 __init__.py(198):         return [
0.59 __init__.py(750):         return self._unique or self.primary_key
0.59 __init__.py(198):         return [
0.59 __init__.py(199):             *self._check_field_name(),
0.59 __init__.py(213):         if self.name.endswith('_'):
0.59 __init__.py(221):         elif LOOKUP_SEP in self.name:
0.59 __init__.py(229):         elif self.name == 'pk':
0.59 __init__.py(238):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(200):             *self._check_choices(),
0.59 __init__.py(245):         if not self.choices:
0.59 __init__.py(246):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(201):             *self._check_db_index(),
0.59 __init__.py(309):         if self.db_index not in (None, True, False):
0.59 __init__.py(318):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.59 __init__.py(321):         if (self.primary_key and self.null and
0.59 __init__.py(336):             return []
0.59 __init__.py(198):         return [
0.59 __init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.59 __init__.py(339):         if databases is None:
0.59 __init__.py(341):         app_label = self.model._meta.app_label
0.59 __init__.py(342):         errors = []
0.59 __init__.py(343):         for alias in databases:
0.59 __init__.py(346):         return errors
0.59 __init__.py(198):         return [
0.59 __init__.py(204):             *self._check_validators(),
0.59 __init__.py(349):         errors = []
0.59 __init__.py(350):         for i, validator in enumerate(self.validators):
0.59 __init__.py(611):         return [*self.default_validators, *self._validators]
0.59 __init__.py(365):         return errors
0.59 __init__.py(198):         return [
0.59 __init__.py(205):             *self._check_deprecation_details(),
0.59 __init__.py(368):         if self.system_check_removed_details is not None:
0.59 __init__.py(381):         elif self.system_check_deprecated_details is not None:
0.59 __init__.py(393):         return []
0.59 __init__.py(198):         return [
0.59 __init__.py(750):         return self._unique or self.primary_key
0.59 __init__.py(518):         if isinstance(other, Field):
0.59 __init__.py(520):                 self.creation_counter == other.creation_counter and
0.59 __init__.py(521):                 getattr(self, 'model', None) == getattr(other, 'model', None)
0.59 __init__.py(519):             return (
0.60 __init__.py(803):         return self.name
0.60 __init__.py(803):         return self.name
0.60 __init__.py(806):         attname = self.get_attname()
0.60 __init__.py(803):         return self.name
0.60 __init__.py(807):         column = self.db_column or attname
0.60 __init__.py(808):         return attname, column
0.60 __init__.py(806):         attname = self.get_attname()
0.60 __init__.py(803):         return self.name
0.60 __init__.py(807):         column = self.db_column or attname
0.60 __init__.py(808):         return attname, column
0.60 __init__.py(806):         attname = self.get_attname()
0.60 __init__.py(803):         return self.name
0.60 __init__.py(807):         column = self.db_column or attname
0.60 __init__.py(808):         return attname, column
0.60 __init__.py(806):         attname = self.get_attname()
0.60 __init__.py(803):         return self.name
0.60 __init__.py(807):         column = self.db_column or attname
0.60 __init__.py(808):         return attname, column
0.60 __init__.py(806):         attname = self.get_attname()
0.60 __init__.py(803):         return self.name
0.60 __init__.py(807):         column = self.db_column or attname
0.60 __init__.py(808):         return attname, column
0.60 __init__.py(806):         attname = self.get_attname()
0.60 __init__.py(803):         return self.name
0.60 __init__.py(807):         column = self.db_column or attname
0.60 __init__.py(808):         return attname, column
0.60 __init__.py(806):         attname = self.get_attname()
0.60 __init__.py(803):         return self.name
0.60 __init__.py(807):         column = self.db_column or attname
0.60 __init__.py(808):         return attname, column
0.60 __init__.py(806):         attname = self.get_attname()
0.60 __init__.py(803):         return self.name
0.60 __init__.py(807):         column = self.db_column or attname
0.60 __init__.py(808):         return attname, column
0.60 __init__.py(806):         attname = self.get_attname()
0.60 __init__.py(803):         return self.name
0.60 __init__.py(807):         column = self.db_column or attname
0.60 __init__.py(808):         return attname, column
0.60 __init__.py(806):         attname = self.get_attname()
0.60 __init__.py(803):         return self.name
0.60 __init__.py(807):         column = self.db_column or attname
0.60 __init__.py(808):         return attname, column
0.60 __init__.py(806):         attname = self.get_attname()
0.60 __init__.py(803):         return self.name
0.60 __init__.py(807):         column = self.db_column or attname
0.60 __init__.py(808):         return attname, column
0.60 __init__.py(2439):         return [
0.60 __init__.py(2440):             *super().check(**kwargs),
0.60 __init__.py(1777):         return [
0.60 __init__.py(1778):             *super().check(**kwargs),
0.60 __init__.py(198):         return [
0.60 __init__.py(199):             *self._check_field_name(),
0.60 __init__.py(213):         if self.name.endswith('_'):
0.60 __init__.py(221):         elif LOOKUP_SEP in self.name:
0.60 __init__.py(229):         elif self.name == 'pk':
0.60 __init__.py(238):             return []
0.60 __init__.py(198):         return [
0.60 __init__.py(200):             *self._check_choices(),
0.60 __init__.py(245):         if not self.choices:
0.60 __init__.py(246):             return []
0.60 __init__.py(198):         return [
0.60 __init__.py(201):             *self._check_db_index(),
0.60 __init__.py(309):         if self.db_index not in (None, True, False):
0.60 __init__.py(318):             return []
0.60 __init__.py(198):         return [
0.60 __init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.60 __init__.py(321):         if (self.primary_key and self.null and
0.60 __init__.py(336):             return []
0.60 __init__.py(198):         return [
0.60 __init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.60 __init__.py(339):         if databases is None:
0.60 __init__.py(341):         app_label = self.model._meta.app_label
0.60 __init__.py(342):         errors = []
0.60 __init__.py(343):         for alias in databases:
0.60 __init__.py(346):         return errors
0.60 __init__.py(198):         return [
0.60 __init__.py(204):             *self._check_validators(),
0.60 __init__.py(349):         errors = []
0.60 __init__.py(350):         for i, validator in enumerate(self.validators):
0.60 __init__.py(1798):         validators_ = super().validators
0.60 __init__.py(611):         return [*self.default_validators, *self._validators]
0.60 __init__.py(1799):         internal_type = self.get_internal_type()
0.60 __init__.py(2515):         return 'AutoField'
0.60 __init__.py(1800):         min_value, max_value = connection.ops.integer_field_range(internal_type)
0.60 __init__.py(1801):         if min_value is not None and not any(
0.60 __init__.py(1811):         if max_value is not None and not any(
0.60 __init__.py(1821):         return validators_
0.60 __init__.py(365):         return errors
0.60 __init__.py(198):         return [
0.60 __init__.py(205):             *self._check_deprecation_details(),
0.60 __init__.py(368):         if self.system_check_removed_details is not None:
0.60 __init__.py(381):         elif self.system_check_deprecated_details is not None:
0.60 __init__.py(393):         return []
0.60 __init__.py(198):         return [
0.60 __init__.py(1777):         return [
0.60 __init__.py(1779):             *self._check_max_length_warning(),
0.60 __init__.py(1783):         if self.max_length is not None:
0.60 __init__.py(1792):         return []
0.60 __init__.py(1777):         return [
0.60 __init__.py(2439):         return [
0.60 __init__.py(2441):             *self._check_primary_key(),
0.60 __init__.py(2445):         if not self.primary_key:
0.60 __init__.py(2454):             return []
0.60 __init__.py(2439):         return [
0.60 __init__.py(1013):         databases = kwargs.get('databases') or []
0.60 __init__.py(1014):         return [
0.60 __init__.py(1015):             *super().check(**kwargs),
0.60 __init__.py(198):         return [
0.60 __init__.py(199):             *self._check_field_name(),
0.60 __init__.py(213):         if self.name.endswith('_'):
0.60 __init__.py(221):         elif LOOKUP_SEP in self.name:
0.60 __init__.py(229):         elif self.name == 'pk':
0.60 __init__.py(238):             return []
0.60 __init__.py(198):         return [
0.60 __init__.py(200):             *self._check_choices(),
0.60 __init__.py(245):         if not self.choices:
0.60 __init__.py(246):             return []
0.60 __init__.py(198):         return [
0.60 __init__.py(201):             *self._check_db_index(),
0.60 __init__.py(309):         if self.db_index not in (None, True, False):
0.60 __init__.py(318):             return []
0.60 __init__.py(198):         return [
0.60 __init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.60 __init__.py(321):         if (self.primary_key and self.null and
0.60 __init__.py(336):             return []
0.60 __init__.py(198):         return [
0.60 __init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.60 __init__.py(339):         if databases is None:
0.60 __init__.py(341):         app_label = self.model._meta.app_label
0.60 __init__.py(342):         errors = []
0.60 __init__.py(343):         for alias in databases:
0.60 __init__.py(346):         return errors
0.60 __init__.py(198):         return [
0.60 __init__.py(204):             *self._check_validators(),
0.60 __init__.py(349):         errors = []
0.60 __init__.py(350):         for i, validator in enumerate(self.validators):
0.60 __init__.py(351):             if not callable(validator):
0.60 __init__.py(350):         for i, validator in enumerate(self.validators):
0.60 __init__.py(351):             if not callable(validator):
0.60 __init__.py(350):         for i, validator in enumerate(self.validators):
0.60 __init__.py(365):         return errors
0.60 __init__.py(198):         return [
0.60 __init__.py(205):             *self._check_deprecation_details(),
0.60 __init__.py(368):         if self.system_check_removed_details is not None:
0.60 __init__.py(381):         elif self.system_check_deprecated_details is not None:
0.60 __init__.py(393):         return []
0.60 __init__.py(198):         return [
0.60 __init__.py(1014):         return [
0.60 __init__.py(1016):             *self._check_db_collation(databases),
0.60 __init__.py(1042):         errors = []
0.60 __init__.py(1043):         for db in databases:
0.60 __init__.py(1060):         return errors
0.60 __init__.py(1014):         return [
0.60 __init__.py(1017):             *self._check_max_length_attribute(**kwargs),
0.60 __init__.py(1021):         if self.max_length is None:
0.60 __init__.py(1029):         elif (not isinstance(self.max_length, int) or isinstance(self.max_length, bool) or
0.60 __init__.py(1030):                 self.max_length <= 0):
0.60 __init__.py(1029):         elif (not isinstance(self.max_length, int) or isinstance(self.max_length, bool) or
0.60 __init__.py(1039):             return []
0.60 __init__.py(1014):         return [
0.60 __init__.py(1013):         databases = kwargs.get('databases') or []
0.60 __init__.py(1014):         return [
0.60 __init__.py(1015):             *super().check(**kwargs),
0.60 __init__.py(198):         return [
0.60 __init__.py(199):             *self._check_field_name(),
0.60 __init__.py(213):         if self.name.endswith('_'):
0.60 __init__.py(221):         elif LOOKUP_SEP in self.name:
0.60 __init__.py(229):         elif self.name == 'pk':
0.60 __init__.py(238):             return []
0.60 __init__.py(198):         return [
0.60 __init__.py(200):             *self._check_choices(),
0.60 __init__.py(245):         if not self.choices:
0.60 __init__.py(246):             return []
0.60 __init__.py(198):         return [
0.60 __init__.py(201):             *self._check_db_index(),
0.60 __init__.py(309):         if self.db_index not in (None, True, False):
0.60 __init__.py(318):             return []
0.60 __init__.py(198):         return [
0.60 __init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.60 __init__.py(321):         if (self.primary_key and self.null and
0.60 __init__.py(336):             return []
0.60 __init__.py(198):         return [
0.60 __init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.60 __init__.py(339):         if databases is None:
0.60 __init__.py(341):         app_label = self.model._meta.app_label
0.60 __init__.py(342):         errors = []
0.60 __init__.py(343):         for alias in databases:
0.60 __init__.py(346):         return errors
0.60 __init__.py(198):         return [
0.60 __init__.py(204):             *self._check_validators(),
0.60 __init__.py(349):         errors = []
0.60 __init__.py(350):         for i, validator in enumerate(self.validators):
0.60 __init__.py(351):             if not callable(validator):
0.60 __init__.py(350):         for i, validator in enumerate(self.validators):
0.60 __init__.py(365):         return errors
0.60 __init__.py(198):         return [
0.60 __init__.py(205):             *self._check_deprecation_details(),
0.60 __init__.py(368):         if self.system_check_removed_details is not None:
0.60 __init__.py(381):         elif self.system_check_deprecated_details is not None:
0.60 __init__.py(393):         return []
0.60 __init__.py(198):         return [
0.60 __init__.py(1014):         return [
0.60 __init__.py(1016):             *self._check_db_collation(databases),
0.60 __init__.py(1042):         errors = []
0.60 __init__.py(1043):         for db in databases:
0.60 __init__.py(1060):         return errors
0.60 __init__.py(1014):         return [
0.60 __init__.py(1017):             *self._check_max_length_attribute(**kwargs),
0.60 __init__.py(1021):         if self.max_length is None:
0.60 __init__.py(1029):         elif (not isinstance(self.max_length, int) or isinstance(self.max_length, bool) or
0.60 __init__.py(1030):                 self.max_length <= 0):
0.60 __init__.py(1029):         elif (not isinstance(self.max_length, int) or isinstance(self.max_length, bool) or
0.60 __init__.py(1039):             return []
0.60 __init__.py(1014):         return [
0.60 __init__.py(518):         if isinstance(other, Field):
0.60 __init__.py(520):                 self.creation_counter == other.creation_counter and
0.60 __init__.py(521):                 getattr(self, 'model', None) == getattr(other, 'model', None)
0.60 __init__.py(519):             return (
0.60 __init__.py(806):         attname = self.get_attname()
0.60 __init__.py(803):         return self.name
0.60 __init__.py(807):         column = self.db_column or attname
0.60 __init__.py(808):         return attname, column
0.60 __init__.py(806):         attname = self.get_attname()
0.60 __init__.py(803):         return self.name
0.60 __init__.py(807):         column = self.db_column or attname
0.60 __init__.py(808):         return attname, column
0.60 __init__.py(806):         attname = self.get_attname()
0.60 __init__.py(803):         return self.name
0.60 __init__.py(807):         column = self.db_column or attname
0.60 __init__.py(808):         return attname, column
0.60 __init__.py(1013):         databases = kwargs.get('databases') or []
0.60 __init__.py(1014):         return [
0.60 __init__.py(1015):             *super().check(**kwargs),
0.60 __init__.py(198):         return [
0.60 __init__.py(199):             *self._check_field_name(),
0.60 __init__.py(213):         if self.name.endswith('_'):
0.60 __init__.py(221):         elif LOOKUP_SEP in self.name:
0.60 __init__.py(229):         elif self.name == 'pk':
0.60 __init__.py(238):             return []
0.60 __init__.py(198):         return [
0.60 __init__.py(200):             *self._check_choices(),
0.60 __init__.py(245):         if not self.choices:
0.60 __init__.py(246):             return []
0.60 __init__.py(198):         return [
0.60 __init__.py(201):             *self._check_db_index(),
0.60 __init__.py(309):         if self.db_index not in (None, True, False):
0.60 __init__.py(318):             return []
0.60 __init__.py(198):         return [
0.60 __init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.60 __init__.py(321):         if (self.primary_key and self.null and
0.60 __init__.py(336):             return []
0.60 __init__.py(198):         return [
0.60 __init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.60 __init__.py(339):         if databases is None:
0.60 __init__.py(341):         app_label = self.model._meta.app_label
0.60 __init__.py(342):         errors = []
0.60 __init__.py(343):         for alias in databases:
0.60 __init__.py(346):         return errors
0.60 __init__.py(198):         return [
0.60 __init__.py(204):             *self._check_validators(),
0.60 __init__.py(349):         errors = []
0.60 __init__.py(350):         for i, validator in enumerate(self.validators):
0.60 __init__.py(351):             if not callable(validator):
0.60 __init__.py(350):         for i, validator in enumerate(self.validators):
0.60 __init__.py(365):         return errors
0.60 __init__.py(198):         return [
0.60 __init__.py(205):             *self._check_deprecation_details(),
0.60 __init__.py(368):         if self.system_check_removed_details is not None:
0.60 __init__.py(381):         elif self.system_check_deprecated_details is not None:
0.60 __init__.py(393):         return []
0.60 __init__.py(198):         return [
0.60 __init__.py(1014):         return [
0.60 __init__.py(1016):             *self._check_db_collation(databases),
0.60 __init__.py(1042):         errors = []
0.60 __init__.py(1043):         for db in databases:
0.60 __init__.py(1060):         return errors
0.60 __init__.py(1014):         return [
0.60 __init__.py(1017):             *self._check_max_length_attribute(**kwargs),
0.60 __init__.py(1021):         if self.max_length is None:
0.60 __init__.py(1029):         elif (not isinstance(self.max_length, int) or isinstance(self.max_length, bool) or
0.60 __init__.py(1030):                 self.max_length <= 0):
0.60 __init__.py(1029):         elif (not isinstance(self.max_length, int) or isinstance(self.max_length, bool) or
0.60 __init__.py(1039):             return []
0.60 __init__.py(1014):         return [
0.60 __init__.py(2124):         databases = kwargs.get('databases') or []
0.60 __init__.py(2125):         return [
0.60 __init__.py(2126):             *super().check(**kwargs),
0.60 __init__.py(198):         return [
0.60 __init__.py(199):             *self._check_field_name(),
0.60 __init__.py(213):         if self.name.endswith('_'):
0.60 __init__.py(221):         elif LOOKUP_SEP in self.name:
0.60 __init__.py(229):         elif self.name == 'pk':
0.60 __init__.py(238):             return []
0.60 __init__.py(198):         return [
0.60 __init__.py(200):             *self._check_choices(),
0.60 __init__.py(245):         if not self.choices:
0.60 __init__.py(246):             return []
0.60 __init__.py(198):         return [
0.60 __init__.py(201):             *self._check_db_index(),
0.60 __init__.py(309):         if self.db_index not in (None, True, False):
0.60 __init__.py(318):             return []
0.60 __init__.py(198):         return [
0.60 __init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.60 __init__.py(321):         if (self.primary_key and self.null and
0.60 __init__.py(336):             return []
0.60 __init__.py(198):         return [
0.60 __init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.60 __init__.py(339):         if databases is None:
0.60 __init__.py(341):         app_label = self.model._meta.app_label
0.60 __init__.py(342):         errors = []
0.60 __init__.py(343):         for alias in databases:
0.60 __init__.py(346):         return errors
0.60 __init__.py(198):         return [
0.60 __init__.py(204):             *self._check_validators(),
0.60 __init__.py(349):         errors = []
0.60 __init__.py(350):         for i, validator in enumerate(self.validators):
0.60 __init__.py(611):         return [*self.default_validators, *self._validators]
0.60 __init__.py(365):         return errors
0.60 __init__.py(198):         return [
0.60 __init__.py(205):             *self._check_deprecation_details(),
0.60 __init__.py(368):         if self.system_check_removed_details is not None:
0.60 __init__.py(381):         elif self.system_check_deprecated_details is not None:
0.60 __init__.py(393):         return []
0.60 __init__.py(198):         return [
0.60 __init__.py(2125):         return [
0.60 __init__.py(2127):             *self._check_db_collation(databases),
0.60 __init__.py(2131):         errors = []
0.60 __init__.py(2132):         for db in databases:
0.60 __init__.py(2149):         return errors
0.60 __init__.py(2125):         return [
0.60 __init__.py(1126):         return [
0.60 __init__.py(1127):             *super().check(**kwargs),
0.60 __init__.py(198):         return [
0.60 __init__.py(199):             *self._check_field_name(),
0.60 __init__.py(213):         if self.name.endswith('_'):
0.60 __init__.py(221):         elif LOOKUP_SEP in self.name:
0.60 __init__.py(229):         elif self.name == 'pk':
0.60 __init__.py(238):             return []
0.60 __init__.py(198):         return [
0.60 __init__.py(200):             *self._check_choices(),
0.60 __init__.py(245):         if not self.choices:
0.60 __init__.py(246):             return []
0.60 __init__.py(198):         return [
0.60 __init__.py(201):             *self._check_db_index(),
0.60 __init__.py(309):         if self.db_index not in (None, True, False):
0.60 __init__.py(318):             return []
0.60 __init__.py(198):         return [
0.60 __init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.60 __init__.py(321):         if (self.primary_key and self.null and
0.60 __init__.py(336):             return []
0.60 __init__.py(198):         return [
0.60 __init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.60 __init__.py(339):         if databases is None:
0.60 __init__.py(341):         app_label = self.model._meta.app_label
0.60 __init__.py(342):         errors = []
0.60 __init__.py(343):         for alias in databases:
0.60 __init__.py(346):         return errors
0.60 __init__.py(198):         return [
0.60 __init__.py(204):             *self._check_validators(),
0.60 __init__.py(349):         errors = []
0.60 __init__.py(350):         for i, validator in enumerate(self.validators):
0.60 __init__.py(611):         return [*self.default_validators, *self._validators]
0.60 __init__.py(365):         return errors
0.60 __init__.py(198):         return [
0.60 __init__.py(205):             *self._check_deprecation_details(),
0.60 __init__.py(368):         if self.system_check_removed_details is not None:
0.60 __init__.py(381):         elif self.system_check_deprecated_details is not None:
0.60 __init__.py(393):         return []
0.60 __init__.py(198):         return [
0.60 __init__.py(1126):         return [
0.60 __init__.py(1128):             *self._check_mutually_exclusive_options(),
0.60 __init__.py(1136):         mutually_exclusive_options = [self.auto_now_add, self.auto_now, self.has_default()]
0.60 __init__.py(839):         return self.default is not NOT_PROVIDED
0.60 __init__.py(1137):         enabled_options = [option not in (None, False) for option in mutually_exclusive_options].count(True)
0.60 __init__.py(1137):         enabled_options = [option not in (None, False) for option in mutually_exclusive_options].count(True)
0.60 __init__.py(1137):         enabled_options = [option not in (None, False) for option in mutually_exclusive_options].count(True)
0.60 __init__.py(1137):         enabled_options = [option not in (None, False) for option in mutually_exclusive_options].count(True)
0.60 __init__.py(1137):         enabled_options = [option not in (None, False) for option in mutually_exclusive_options].count(True)
0.60 __init__.py(1138):         if enabled_options > 1:
0.60 __init__.py(1149):             return []
0.60 __init__.py(1126):         return [
0.60 __init__.py(1129):             *self._check_fix_default_value(),
0.60 __init__.py(1333):         if not self.has_default():
0.60 __init__.py(839):         return self.default is not NOT_PROVIDED
0.60 __init__.py(1334):             return []
0.60 __init__.py(1126):         return [
0.60 __init__.py(806):         attname = self.get_attname()
0.60 __init__.py(803):         return self.name
0.60 __init__.py(807):         column = self.db_column or attname
0.60 __init__.py(808):         return attname, column
0.60 __init__.py(806):         attname = self.get_attname()
0.60 __init__.py(803):         return self.name
0.60 __init__.py(807):         column = self.db_column or attname
0.60 __init__.py(808):         return attname, column
0.60 __init__.py(806):         attname = self.get_attname()
0.60 __init__.py(803):         return self.name
0.60 __init__.py(807):         column = self.db_column or attname
0.60 __init__.py(808):         return attname, column
0.60 __init__.py(2439):         return [
0.60 __init__.py(2440):             *super().check(**kwargs),
0.60 __init__.py(1777):         return [
0.60 __init__.py(1778):             *super().check(**kwargs),
0.60 __init__.py(198):         return [
0.60 __init__.py(199):             *self._check_field_name(),
0.60 __init__.py(213):         if self.name.endswith('_'):
0.60 __init__.py(221):         elif LOOKUP_SEP in self.name:
0.60 __init__.py(229):         elif self.name == 'pk':
0.60 __init__.py(238):             return []
0.60 __init__.py(198):         return [
0.60 __init__.py(200):             *self._check_choices(),
0.60 __init__.py(245):         if not self.choices:
0.60 __init__.py(246):             return []
0.60 __init__.py(198):         return [
0.60 __init__.py(201):             *self._check_db_index(),
0.60 __init__.py(309):         if self.db_index not in (None, True, False):
0.60 __init__.py(318):             return []
0.60 __init__.py(198):         return [
0.60 __init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.60 __init__.py(321):         if (self.primary_key and self.null and
0.60 __init__.py(336):             return []
0.60 __init__.py(198):         return [
0.60 __init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.60 __init__.py(339):         if databases is None:
0.60 __init__.py(341):         app_label = self.model._meta.app_label
0.60 __init__.py(342):         errors = []
0.60 __init__.py(343):         for alias in databases:
0.60 __init__.py(346):         return errors
0.60 __init__.py(198):         return [
0.60 __init__.py(204):             *self._check_validators(),
0.60 __init__.py(349):         errors = []
0.60 __init__.py(350):         for i, validator in enumerate(self.validators):
0.60 __init__.py(1798):         validators_ = super().validators
0.60 __init__.py(611):         return [*self.default_validators, *self._validators]
0.60 __init__.py(1799):         internal_type = self.get_internal_type()
0.60 __init__.py(2515):         return 'AutoField'
0.60 __init__.py(1800):         min_value, max_value = connection.ops.integer_field_range(internal_type)
0.60 __init__.py(1801):         if min_value is not None and not any(
0.60 __init__.py(1811):         if max_value is not None and not any(
0.60 __init__.py(1821):         return validators_
0.60 __init__.py(365):         return errors
0.60 __init__.py(198):         return [
0.60 __init__.py(205):             *self._check_deprecation_details(),
0.60 __init__.py(368):         if self.system_check_removed_details is not None:
0.60 __init__.py(381):         elif self.system_check_deprecated_details is not None:
0.60 __init__.py(393):         return []
0.60 __init__.py(198):         return [
0.60 __init__.py(1777):         return [
0.60 __init__.py(1779):             *self._check_max_length_warning(),
0.60 __init__.py(1783):         if self.max_length is not None:
0.60 __init__.py(1792):         return []
0.60 __init__.py(1777):         return [
0.60 __init__.py(2439):         return [
0.60 __init__.py(2441):             *self._check_primary_key(),
0.60 __init__.py(2445):         if not self.primary_key:
0.60 __init__.py(2454):             return []
0.60 __init__.py(2439):         return [
0.60 __init__.py(1126):         return [
0.60 __init__.py(1127):             *super().check(**kwargs),
0.60 __init__.py(198):         return [
0.60 __init__.py(199):             *self._check_field_name(),
0.60 __init__.py(213):         if self.name.endswith('_'):
0.60 __init__.py(221):         elif LOOKUP_SEP in self.name:
0.60 __init__.py(229):         elif self.name == 'pk':
0.60 __init__.py(238):             return []
0.60 __init__.py(198):         return [
0.60 __init__.py(200):             *self._check_choices(),
0.60 __init__.py(245):         if not self.choices:
0.60 __init__.py(246):             return []
0.60 __init__.py(198):         return [
0.60 __init__.py(201):             *self._check_db_index(),
0.60 __init__.py(309):         if self.db_index not in (None, True, False):
0.60 __init__.py(318):             return []
0.60 __init__.py(198):         return [
0.60 __init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.60 __init__.py(321):         if (self.primary_key and self.null and
0.60 __init__.py(336):             return []
0.60 __init__.py(198):         return [
0.60 __init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.60 __init__.py(339):         if databases is None:
0.60 __init__.py(341):         app_label = self.model._meta.app_label
0.60 __init__.py(342):         errors = []
0.60 __init__.py(343):         for alias in databases:
0.60 __init__.py(346):         return errors
0.60 __init__.py(198):         return [
0.60 __init__.py(204):             *self._check_validators(),
0.60 __init__.py(349):         errors = []
0.60 __init__.py(350):         for i, validator in enumerate(self.validators):
0.60 __init__.py(611):         return [*self.default_validators, *self._validators]
0.60 __init__.py(365):         return errors
0.60 __init__.py(198):         return [
0.60 __init__.py(205):             *self._check_deprecation_details(),
0.60 __init__.py(368):         if self.system_check_removed_details is not None:
0.60 __init__.py(381):         elif self.system_check_deprecated_details is not None:
0.60 __init__.py(393):         return []
0.60 __init__.py(198):         return [
0.60 __init__.py(1126):         return [
0.60 __init__.py(1128):             *self._check_mutually_exclusive_options(),
0.60 __init__.py(1136):         mutually_exclusive_options = [self.auto_now_add, self.auto_now, self.has_default()]
0.60 __init__.py(839):         return self.default is not NOT_PROVIDED
0.60 __init__.py(1137):         enabled_options = [option not in (None, False) for option in mutually_exclusive_options].count(True)
0.60 __init__.py(1137):         enabled_options = [option not in (None, False) for option in mutually_exclusive_options].count(True)
0.60 __init__.py(1137):         enabled_options = [option not in (None, False) for option in mutually_exclusive_options].count(True)
0.60 __init__.py(1137):         enabled_options = [option not in (None, False) for option in mutually_exclusive_options].count(True)
0.60 __init__.py(1137):         enabled_options = [option not in (None, False) for option in mutually_exclusive_options].count(True)
0.60 __init__.py(1138):         if enabled_options > 1:
0.60 __init__.py(1149):             return []
0.60 __init__.py(1126):         return [
0.60 __init__.py(1129):             *self._check_fix_default_value(),
0.60 __init__.py(1333):         if not self.has_default():
0.60 __init__.py(839):         return self.default is not NOT_PROVIDED
0.60 __init__.py(1336):         value = self.default
0.60 __init__.py(1337):         if isinstance(value, (datetime.datetime, datetime.date)):
0.60 __init__.py(1340):         return []
0.60 __init__.py(1126):         return [
0.60 __init__.py(198):         return [
0.60 __init__.py(199):             *self._check_field_name(),
0.60 __init__.py(213):         if self.name.endswith('_'):
0.60 __init__.py(221):         elif LOOKUP_SEP in self.name:
0.60 __init__.py(229):         elif self.name == 'pk':
0.60 __init__.py(238):             return []
0.60 __init__.py(198):         return [
0.60 __init__.py(200):             *self._check_choices(),
0.60 __init__.py(245):         if not self.choices:
0.60 __init__.py(246):             return []
0.60 __init__.py(198):         return [
0.60 __init__.py(201):             *self._check_db_index(),
0.60 __init__.py(309):         if self.db_index not in (None, True, False):
0.60 __init__.py(318):             return []
0.60 __init__.py(198):         return [
0.60 __init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.60 __init__.py(321):         if (self.primary_key and self.null and
0.60 __init__.py(336):             return []
0.60 __init__.py(198):         return [
0.60 __init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.60 __init__.py(339):         if databases is None:
0.60 __init__.py(341):         app_label = self.model._meta.app_label
0.60 __init__.py(342):         errors = []
0.60 __init__.py(343):         for alias in databases:
0.60 __init__.py(346):         return errors
0.60 __init__.py(198):         return [
0.60 __init__.py(204):             *self._check_validators(),
0.60 __init__.py(349):         errors = []
0.60 __init__.py(350):         for i, validator in enumerate(self.validators):
0.60 __init__.py(611):         return [*self.default_validators, *self._validators]
0.60 __init__.py(365):         return errors
0.60 __init__.py(198):         return [
0.60 __init__.py(205):             *self._check_deprecation_details(),
0.60 __init__.py(368):         if self.system_check_removed_details is not None:
0.60 __init__.py(381):         elif self.system_check_deprecated_details is not None:
0.60 __init__.py(393):         return []
0.60 __init__.py(198):         return [
0.60 __init__.py(750):         return self._unique or self.primary_key
0.60 __init__.py(750):         return self._unique or self.primary_key
0.60 __init__.py(750):         return self._unique or self.primary_key
0.60 __init__.py(750):         return self._unique or self.primary_key
0.60 __init__.py(750):         return self._unique or self.primary_key
0.60 __init__.py(750):         return self._unique or self.primary_key
0.60 __init__.py(750):         return self._unique or self.primary_key
0.60 __init__.py(750):         return self._unique or self.primary_key
0.60 __init__.py(750):         return self._unique or self.primary_key
0.60 __init__.py(750):         return self._unique or self.primary_key
0.60 __init__.py(750):         return self._unique or self.primary_key
0.60 __init__.py(750):         return self._unique or self.primary_key
0.60 __init__.py(750):         return self._unique or self.primary_key
0.60 __init__.py(750):         return self._unique or self.primary_key
0.60 __init__.py(198):         return [
0.60 __init__.py(199):             *self._check_field_name(),
0.60 __init__.py(213):         if self.name.endswith('_'):
0.60 __init__.py(221):         elif LOOKUP_SEP in self.name:
0.60 __init__.py(229):         elif self.name == 'pk':
0.60 __init__.py(238):             return []
0.60 __init__.py(198):         return [
0.60 __init__.py(200):             *self._check_choices(),
0.60 __init__.py(245):         if not self.choices:
0.60 __init__.py(246):             return []
0.60 __init__.py(198):         return [
0.60 __init__.py(201):             *self._check_db_index(),
0.60 __init__.py(309):         if self.db_index not in (None, True, False):
0.60 __init__.py(318):             return []
0.60 __init__.py(198):         return [
0.60 __init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.60 __init__.py(321):         if (self.primary_key and self.null and
0.60 __init__.py(336):             return []
0.60 __init__.py(198):         return [
0.60 __init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.60 __init__.py(339):         if databases is None:
0.60 __init__.py(341):         app_label = self.model._meta.app_label
0.60 __init__.py(342):         errors = []
0.60 __init__.py(343):         for alias in databases:
0.60 __init__.py(346):         return errors
0.60 __init__.py(198):         return [
0.60 __init__.py(204):             *self._check_validators(),
0.60 __init__.py(349):         errors = []
0.60 __init__.py(350):         for i, validator in enumerate(self.validators):
0.60 __init__.py(611):         return [*self.default_validators, *self._validators]
0.60 __init__.py(365):         return errors
0.60 __init__.py(198):         return [
0.60 __init__.py(205):             *self._check_deprecation_details(),
0.60 __init__.py(368):         if self.system_check_removed_details is not None:
0.60 __init__.py(381):         elif self.system_check_deprecated_details is not None:
0.60 __init__.py(393):         return []
0.60 __init__.py(198):         return [
0.60 __init__.py(750):         return self._unique or self.primary_key
0.60 __init__.py(750):         return self._unique or self.primary_key
0.60 __init__.py(750):         return self._unique or self.primary_key
0.60 __init__.py(750):         return self._unique or self.primary_key
0.60 __init__.py(2124):         databases = kwargs.get('databases') or []
0.60 __init__.py(2125):         return [
0.60 __init__.py(2126):             *super().check(**kwargs),
0.60 __init__.py(198):         return [
0.60 __init__.py(199):             *self._check_field_name(),
0.60 __init__.py(213):         if self.name.endswith('_'):
0.60 __init__.py(221):         elif LOOKUP_SEP in self.name:
0.60 __init__.py(229):         elif self.name == 'pk':
0.60 __init__.py(238):             return []
0.60 __init__.py(198):         return [
0.60 __init__.py(200):             *self._check_choices(),
0.60 __init__.py(245):         if not self.choices:
0.60 __init__.py(246):             return []
0.60 __init__.py(198):         return [
0.60 __init__.py(201):             *self._check_db_index(),
0.60 __init__.py(309):         if self.db_index not in (None, True, False):
0.60 __init__.py(318):             return []
0.60 __init__.py(198):         return [
0.60 __init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.60 __init__.py(321):         if (self.primary_key and self.null and
0.60 __init__.py(336):             return []
0.60 __init__.py(198):         return [
0.60 __init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.60 __init__.py(339):         if databases is None:
0.60 __init__.py(341):         app_label = self.model._meta.app_label
0.60 __init__.py(342):         errors = []
0.60 __init__.py(343):         for alias in databases:
0.60 __init__.py(346):         return errors
0.60 __init__.py(198):         return [
0.60 __init__.py(204):             *self._check_validators(),
0.60 __init__.py(349):         errors = []
0.60 __init__.py(350):         for i, validator in enumerate(self.validators):
0.60 __init__.py(611):         return [*self.default_validators, *self._validators]
0.60 __init__.py(365):         return errors
0.60 __init__.py(198):         return [
0.60 __init__.py(205):             *self._check_deprecation_details(),
0.60 __init__.py(368):         if self.system_check_removed_details is not None:
0.60 __init__.py(381):         elif self.system_check_deprecated_details is not None:
0.60 __init__.py(393):         return []
0.60 __init__.py(198):         return [
0.60 __init__.py(2125):         return [
0.60 __init__.py(2127):             *self._check_db_collation(databases),
0.60 __init__.py(2131):         errors = []
0.60 __init__.py(2132):         for db in databases:
0.60 __init__.py(2149):         return errors
0.60 __init__.py(2125):         return [
0.60 __init__.py(1013):         databases = kwargs.get('databases') or []
0.60 __init__.py(1014):         return [
0.60 __init__.py(1015):             *super().check(**kwargs),
0.60 __init__.py(198):         return [
0.60 __init__.py(199):             *self._check_field_name(),
0.60 __init__.py(213):         if self.name.endswith('_'):
0.60 __init__.py(221):         elif LOOKUP_SEP in self.name:
0.60 __init__.py(229):         elif self.name == 'pk':
0.60 __init__.py(238):             return []
0.60 __init__.py(198):         return [
0.60 __init__.py(200):             *self._check_choices(),
0.60 __init__.py(245):         if not self.choices:
0.60 __init__.py(246):             return []
0.60 __init__.py(198):         return [
0.60 __init__.py(201):             *self._check_db_index(),
0.60 __init__.py(309):         if self.db_index not in (None, True, False):
0.60 __init__.py(318):             return []
0.60 __init__.py(198):         return [
0.60 __init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.60 __init__.py(321):         if (self.primary_key and self.null and
0.60 __init__.py(336):             return []
0.60 __init__.py(198):         return [
0.60 __init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.60 __init__.py(339):         if databases is None:
0.60 __init__.py(341):         app_label = self.model._meta.app_label
0.60 __init__.py(342):         errors = []
0.60 __init__.py(343):         for alias in databases:
0.60 __init__.py(346):         return errors
0.60 __init__.py(198):         return [
0.60 __init__.py(204):             *self._check_validators(),
0.60 __init__.py(349):         errors = []
0.60 __init__.py(350):         for i, validator in enumerate(self.validators):
0.60 __init__.py(351):             if not callable(validator):
0.60 __init__.py(350):         for i, validator in enumerate(self.validators):
0.60 __init__.py(365):         return errors
0.60 __init__.py(198):         return [
0.60 __init__.py(205):             *self._check_deprecation_details(),
0.60 __init__.py(368):         if self.system_check_removed_details is not None:
0.60 __init__.py(381):         elif self.system_check_deprecated_details is not None:
0.60 __init__.py(393):         return []
0.60 __init__.py(198):         return [
0.60 __init__.py(1014):         return [
0.60 __init__.py(1016):             *self._check_db_collation(databases),
0.60 __init__.py(1042):         errors = []
0.60 __init__.py(1043):         for db in databases:
0.60 __init__.py(1060):         return errors
0.60 __init__.py(1014):         return [
0.60 __init__.py(1017):             *self._check_max_length_attribute(**kwargs),
0.60 __init__.py(1021):         if self.max_length is None:
0.60 __init__.py(1029):         elif (not isinstance(self.max_length, int) or isinstance(self.max_length, bool) or
0.60 __init__.py(1030):                 self.max_length <= 0):
0.60 __init__.py(1029):         elif (not isinstance(self.max_length, int) or isinstance(self.max_length, bool) or
0.60 __init__.py(1039):             return []
0.60 __init__.py(1014):         return [
0.60 __init__.py(1777):         return [
0.60 __init__.py(1778):             *super().check(**kwargs),
0.60 __init__.py(198):         return [
0.60 __init__.py(199):             *self._check_field_name(),
0.60 __init__.py(213):         if self.name.endswith('_'):
0.60 __init__.py(221):         elif LOOKUP_SEP in self.name:
0.60 __init__.py(229):         elif self.name == 'pk':
0.60 __init__.py(238):             return []
0.60 __init__.py(198):         return [
0.60 __init__.py(200):             *self._check_choices(),
0.60 __init__.py(245):         if not self.choices:
0.60 __init__.py(248):         if not is_iterable(self.choices) or isinstance(self.choices, str):
0.60 __init__.py(257):         choice_max_length = 0
0.60 __init__.py(259):         for choices_group in self.choices:
0.60 __init__.py(260):             try:
0.60 __init__.py(261):                 group_name, group_choices = choices_group
0.60 __init__.py(265):             try:
0.60 __init__.py(266):                 if not all(
0.60 __init__.py(268):                     for value, human_name in group_choices
0.60 __init__.py(266):                 if not all(
0.60 __init__.py(266):                 if not all(
0.60 __init__.py(268):                     for value, human_name in group_choices
0.60 __init__.py(276):             except (TypeError, ValueError):
0.60 __init__.py(278):                 value, human_name = group_name, group_choices
0.60 __init__.py(279):                 if not self._choices_is_value(value) or not self._choices_is_value(human_name):
0.60 __init__.py(242):         return isinstance(value, (str, Promise)) or not is_iterable(value)
0.60 __init__.py(242):         return isinstance(value, (str, Promise)) or not is_iterable(value)
0.60 __init__.py(281):                 if self.max_length is not None and isinstance(value, str):
0.60 __init__.py(285):             if isinstance(choices_group, str):
0.60 __init__.py(259):         for choices_group in self.choices:
0.60 __init__.py(260):             try:
0.60 __init__.py(261):                 group_name, group_choices = choices_group
0.60 __init__.py(265):             try:
0.60 __init__.py(266):                 if not all(
0.60 __init__.py(268):                     for value, human_name in group_choices
0.60 __init__.py(266):                 if not all(
0.60 __init__.py(266):                 if not all(
0.60 __init__.py(268):                     for value, human_name in group_choices
0.60 __init__.py(276):             except (TypeError, ValueError):
0.60 __init__.py(278):                 value, human_name = group_name, group_choices
0.60 __init__.py(279):                 if not self._choices_is_value(value) or not self._choices_is_value(human_name):
0.60 __init__.py(242):         return isinstance(value, (str, Promise)) or not is_iterable(value)
0.60 __init__.py(242):         return isinstance(value, (str, Promise)) or not is_iterable(value)
0.60 __init__.py(281):                 if self.max_length is not None and isinstance(value, str):
0.60 __init__.py(285):             if isinstance(choices_group, str):
0.60 __init__.py(259):         for choices_group in self.choices:
0.60 __init__.py(260):             try:
0.60 __init__.py(261):                 group_name, group_choices = choices_group
0.60 __init__.py(265):             try:
0.60 __init__.py(266):                 if not all(
0.60 __init__.py(268):                     for value, human_name in group_choices
0.60 __init__.py(266):                 if not all(
0.60 __init__.py(266):                 if not all(
0.60 __init__.py(268):                     for value, human_name in group_choices
0.60 __init__.py(276):             except (TypeError, ValueError):
0.60 __init__.py(278):                 value, human_name = group_name, group_choices
0.60 __init__.py(279):                 if not self._choices_is_value(value) or not self._choices_is_value(human_name):
0.60 __init__.py(242):         return isinstance(value, (str, Promise)) or not is_iterable(value)
0.60 __init__.py(242):         return isinstance(value, (str, Promise)) or not is_iterable(value)
0.60 __init__.py(281):                 if self.max_length is not None and isinstance(value, str):
0.60 __init__.py(285):             if isinstance(choices_group, str):
0.60 __init__.py(259):         for choices_group in self.choices:
0.60 __init__.py(288):             if self.max_length is not None and choice_max_length > self.max_length:
0.60 __init__.py(297):             return []
0.60 __init__.py(198):         return [
0.60 __init__.py(201):             *self._check_db_index(),
0.60 __init__.py(309):         if self.db_index not in (None, True, False):
0.60 __init__.py(318):             return []
0.60 __init__.py(198):         return [
0.60 __init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.60 __init__.py(321):         if (self.primary_key and self.null and
0.60 __init__.py(336):             return []
0.60 __init__.py(198):         return [
0.60 __init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.60 __init__.py(339):         if databases is None:
0.60 __init__.py(341):         app_label = self.model._meta.app_label
0.60 __init__.py(342):         errors = []
0.60 __init__.py(343):         for alias in databases:
0.60 __init__.py(346):         return errors
0.60 __init__.py(198):         return [
0.60 __init__.py(204):             *self._check_validators(),
0.60 __init__.py(349):         errors = []
0.60 __init__.py(350):         for i, validator in enumerate(self.validators):
0.60 __init__.py(1798):         validators_ = super().validators
0.60 __init__.py(611):         return [*self.default_validators, *self._validators]
0.60 __init__.py(1799):         internal_type = self.get_internal_type()
0.60 __init__.py(2074):         return "PositiveSmallIntegerField"
0.60 __init__.py(1800):         min_value, max_value = connection.ops.integer_field_range(internal_type)
0.60 __init__.py(1801):         if min_value is not None and not any(
0.60 __init__.py(1811):         if max_value is not None and not any(
0.60 __init__.py(1821):         return validators_
0.60 __init__.py(365):         return errors
0.60 __init__.py(198):         return [
0.60 __init__.py(205):             *self._check_deprecation_details(),
0.60 __init__.py(368):         if self.system_check_removed_details is not None:
0.60 __init__.py(381):         elif self.system_check_deprecated_details is not None:
0.60 __init__.py(393):         return []
0.60 __init__.py(198):         return [
0.60 __init__.py(1777):         return [
0.60 __init__.py(1779):             *self._check_max_length_warning(),
0.60 __init__.py(1783):         if self.max_length is not None:
0.60 __init__.py(1792):         return []
0.60 __init__.py(1777):         return [
0.60 __init__.py(2124):         databases = kwargs.get('databases') or []
0.60 __init__.py(2125):         return [
0.60 __init__.py(2126):             *super().check(**kwargs),
0.60 __init__.py(198):         return [
0.60 __init__.py(199):             *self._check_field_name(),
0.60 __init__.py(213):         if self.name.endswith('_'):
0.60 __init__.py(221):         elif LOOKUP_SEP in self.name:
0.60 __init__.py(229):         elif self.name == 'pk':
0.60 __init__.py(238):             return []
0.60 __init__.py(198):         return [
0.60 __init__.py(200):             *self._check_choices(),
0.60 __init__.py(245):         if not self.choices:
0.60 __init__.py(246):             return []
0.60 __init__.py(198):         return [
0.60 __init__.py(201):             *self._check_db_index(),
0.60 __init__.py(309):         if self.db_index not in (None, True, False):
0.60 __init__.py(318):             return []
0.60 __init__.py(198):         return [
0.60 __init__.py(202):             *self._check_null_allowed_for_primary_keys(),
0.60 __init__.py(321):         if (self.primary_key and self.null and
0.60 __init__.py(336):             return []
0.60 __init__.py(198):         return [
0.60 __init__.py(203):             *self._check_backend_specific_checks(**kwargs),
0.60 __init__.py(339):         if databases is None:
0.60 __init__.py(341):         app_label = self.model._meta.app_label
0.60 __init__.py(342):         errors = []
0.60 __init__.py(343):         for alias in databases:
0.60 __init__.py(346):         return errors
0.60 __init__.py(198):         return [
0.60 __init__.py(204):             *self._check_validators(),
0.60 __init__.py(349):         errors = []
0.60 __init__.py(350):         for i, validator in enumerate(self.validators):
0.60 __init__.py(611):         return [*self.default_validators, *self._validators]
0.60 __init__.py(365):         return errors
0.60 __init__.py(198):         return [
0.60 __init__.py(205):             *self._check_deprecation_details(),
0.60 __init__.py(368):         if self.system_check_removed_details is not None:
0.60 __init__.py(381):         elif self.system_check_deprecated_details is not None:
0.60 __init__.py(393):         return []
0.60 __init__.py(198):         return [
0.60 __init__.py(2125):         return [
0.60 __init__.py(2127):             *self._check_db_collation(databases),
0.60 __init__.py(2131):         errors = []
0.60 __init__.py(2132):         for db in databases:
0.60 __init__.py(2149):         return errors
0.60 __init__.py(2125):         return [
0.60 __init__.py(518):         if isinstance(other, Field):
0.60 __init__.py(520):                 self.creation_counter == other.creation_counter and
0.60 __init__.py(521):                 getattr(self, 'model', None) == getattr(other, 'model', None)
0.60 __init__.py(519):             return (
0.60 __init__.py(806):         attname = self.get_attname()
0.60 __init__.py(803):         return self.name
0.60 __init__.py(807):         column = self.db_column or attname
0.60 __init__.py(808):         return attname, column
0.60 __init__.py(806):         attname = self.get_attname()
0.60 __init__.py(803):         return self.name
0.60 __init__.py(807):         column = self.db_column or attname
0.60 __init__.py(808):         return attname, column
0.60 __init__.py(806):         attname = self.get_attname()
0.60 __init__.py(803):         return self.name
0.60 __init__.py(807):         column = self.db_column or attname
0.60 __init__.py(808):         return attname, column
0.60 __init__.py(806):         attname = self.get_attname()
0.60 __init__.py(803):         return self.name
0.60 __init__.py(807):         column = self.db_column or attname
0.60 __init__.py(808):         return attname, column
0.60 __init__.py(806):         attname = self.get_attname()
0.60 __init__.py(803):         return self.name
0.60 __init__.py(807):         column = self.db_column or attname
0.60 __init__.py(808):         return attname, column
0.60 test_field_hash_immutability (test_coverup_django__django-15315.FieldHashTest) ... __init__.py(806):         attname = self.get_attname()
0.60 __init__.py(803):         return self.name
0.60 __init__.py(807):         column = self.db_column or attname
0.60 __init__.py(808):         return attname, column
System check identified no issues (0 silenced).
0.61 __init__.py(1007):         super().__init__(*args, **kwargs)
0.61 __init__.py(139):         self.name = name
0.61 __init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.61 __init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.61 __init__.py(142):         self.primary_key = primary_key
0.61 __init__.py(143):         self.max_length, self._unique = max_length, unique
0.61 __init__.py(144):         self.blank, self.null = blank, null
0.61 __init__.py(145):         self.remote_field = rel
0.61 __init__.py(146):         self.is_relation = self.remote_field is not None
0.61 __init__.py(147):         self.default = default
0.61 __init__.py(148):         self.editable = editable
0.61 __init__.py(149):         self.serialize = serialize
0.61 __init__.py(150):         self.unique_for_date = unique_for_date
0.61 __init__.py(151):         self.unique_for_month = unique_for_month
0.61 __init__.py(152):         self.unique_for_year = unique_for_year
0.61 __init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.61 __init__.py(155):         self.choices = choices
0.61 __init__.py(156):         self.help_text = help_text
0.61 __init__.py(157):         self.db_index = db_index
0.61 __init__.py(158):         self.db_column = db_column
0.61 __init__.py(159):         self._db_tablespace = db_tablespace
0.61 __init__.py(160):         self.auto_created = auto_created
0.61 __init__.py(163):         if auto_created:
0.61 __init__.py(167):             self.creation_counter = Field.creation_counter
0.61 __init__.py(168):             Field.creation_counter += 1
0.61 __init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.61 __init__.py(172):         messages = {}
0.61 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.61 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.61 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.61 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.61 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.61 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.61 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.61 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.61 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.61 __init__.py(175):         messages.update(error_messages or {})
0.61 __init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.61 __init__.py(177):         self.error_messages = messages
0.61 __init__.py(1008):         self.db_collation = db_collation
0.61 __init__.py(1009):         if self.max_length is not None:
0.61 __init__.py(1010):             self.validators.append(validators.MaxLengthValidator(self.max_length))
0.61 __init__.py(611):         return [*self.default_validators, *self._validators]
0.61 __init__.py(545):         return hash(self.creation_counter)
0.61 __init__.py(545):         return hash(self.creation_counter)
0.61 __init__.py(778):         self.set_attributes_from_name(name)
0.61 __init__.py(765):         self.name = self.name or name
0.61 __init__.py(766):         self.attname, self.column = self.get_attname_column()
0.61 __init__.py(806):         attname = self.get_attname()
0.61 __init__.py(803):         return self.name
0.61 __init__.py(807):         column = self.db_column or attname
0.61 __init__.py(808):         return attname, column
0.61 __init__.py(767):         self.concrete = self.column is not None
0.61 __init__.py(768):         if self.verbose_name is None and self.name:
0.61 __init__.py(769):             self.verbose_name = self.name.replace('_', ' ')
0.61 __init__.py(779):         self.model = cls
0.61 __init__.py(780):         cls._meta.add_field(self, private=private_only)
0.61 __init__.py(781):         if self.column:
0.61 __init__.py(782):             setattr(cls, self.attname, self.descriptor_class(self))
0.61 __init__.py(783):         if self.choices is not None:
0.61 __init__.py(2509):         return issubclass(subclass, self._subclasses) or super().__subclasscheck__(subclass)
0.61 __init__.py(2503):         return (BigAutoField, SmallAutoField)
0.61 __init__.py(2435):         kwargs['blank'] = True
0.61 __init__.py(2436):         super().__init__(*args, **kwargs)
0.61 __init__.py(139):         self.name = name
0.61 __init__.py(140):         self.verbose_name = verbose_name  # May be set by set_attributes_from_name
0.61 __init__.py(141):         self._verbose_name = verbose_name  # Store original for deconstruction
0.61 __init__.py(142):         self.primary_key = primary_key
0.61 __init__.py(143):         self.max_length, self._unique = max_length, unique
0.61 __init__.py(144):         self.blank, self.null = blank, null
0.61 __init__.py(145):         self.remote_field = rel
0.61 __init__.py(146):         self.is_relation = self.remote_field is not None
0.61 __init__.py(147):         self.default = default
0.61 __init__.py(148):         self.editable = editable
0.61 __init__.py(149):         self.serialize = serialize
0.61 __init__.py(150):         self.unique_for_date = unique_for_date
0.61 __init__.py(151):         self.unique_for_month = unique_for_month
0.61 __init__.py(152):         self.unique_for_year = unique_for_year
0.61 __init__.py(153):         if isinstance(choices, collections.abc.Iterator):
0.61 __init__.py(155):         self.choices = choices
0.61 __init__.py(156):         self.help_text = help_text
0.61 __init__.py(157):         self.db_index = db_index
0.61 __init__.py(158):         self.db_column = db_column
0.61 __init__.py(159):         self._db_tablespace = db_tablespace
0.61 __init__.py(160):         self.auto_created = auto_created
0.61 __init__.py(163):         if auto_created:
0.61 __init__.py(164):             self.creation_counter = Field.auto_creation_counter
0.61 __init__.py(165):             Field.auto_creation_counter -= 1
0.61 __init__.py(170):         self._validators = list(validators)  # Store for deconstruction later
0.61 __init__.py(172):         messages = {}
0.61 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.61 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.61 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.61 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.61 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.61 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.61 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.61 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.61 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.61 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.61 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.61 __init__.py(174):             messages.update(getattr(c, 'default_error_messages', {}))
0.61 __init__.py(173):         for c in reversed(self.__class__.__mro__):
0.61 __init__.py(175):         messages.update(error_messages or {})
0.61 __init__.py(176):         self._error_messages = error_messages  # Store for deconstruction later
0.61 __init__.py(177):         self.error_messages = messages
0.61 __init__.py(2472):         if cls._meta.auto_field:
0.61 __init__.py(2477):         super().contribute_to_class(cls, name, **kwargs)
0.61 __init__.py(778):         self.set_attributes_from_name(name)
0.61 __init__.py(765):         self.name = self.name or name
0.61 ok

----------------------------------------------------------------------
Ran 1 test in 0.001s

OK
__init__.py(766):         self.attname, self.column = self.get_attname_column()
0.61 __init__.py(806):         attname = self.get_attname()
0.61 __init__.py(803):         return self.name
0.61 __init__.py(807):         column = self.db_column or attname
0.61 __init__.py(808):         return attname, column
0.61 __init__.py(767):         self.concrete = self.column is not None
0.61 __init__.py(768):         if self.verbose_name is None and self.name:
0.61 __init__.py(779):         self.model = cls
0.61 __init__.py(780):         cls._meta.add_field(self, private=private_only)
0.61 __init__.py(528):         if isinstance(other, Field):
0.61 __init__.py(530):                 self.creation_counter != other.creation_counter or
0.61 __init__.py(529):             if (
0.61 __init__.py(533):                 return self.creation_counter < other.creation_counter
0.61 __init__.py(781):         if self.column:
0.61 __init__.py(782):             setattr(cls, self.attname, self.descriptor_class(self))
0.61 __init__.py(783):         if self.choices is not None:
0.61 __init__.py(2478):         cls._meta.auto_field = self
0.61 __init__.py(545):         return hash(self.creation_counter)
+ cat coverage.cover
{"/testbed/django/db/models/fields/__init__.py": {"1": 1, "2": 1, "3": 1, "4": 1, "5": 1, "6": 1, "7": 1, "8": 1, "9": 1, "10": 1, "12": 1, "13": 1, "14": 1, "15": 1, "16": 1, "17": 1, "18": 1, "19": 1, "20": 1, "21": 1, "24": 1, "25": 1, "26": 1, "27": 1, "28": 1, "29": 1, "31": 1, "43": 2, "47": 2, "53": 1, "56": 1, "75": 1, "81": 1, "85": 2, "86": 1, "948": 2, "1003": 2, "1097": 2, "1113": 1, "1119": 1, "1123": 2, "1191": 2, "1313": 2, "1440": 2, "1581": 2, "1641": 2, "1665": 2, "1729": 2, "1769": 2, "1856": 2, "1871": 2, "1878": 2, "1909": 2, "1989": 2, "2016": 2, "2044": 2, "2057": 2, "2070": 2, "2083": 2, "2116": 2, "2180": 2, "2291": 2, "2314": 2, "2378": 2, "2431": 2, "2484": 2, "2512": 2, "2521": 2, "2530": 2, "44": 1, "48": 1, "57": 0, "76": 0, "77": 0, "78": 0, "82": 4, "91": 1, "92": 1, "97": 1, "98": 1, "99": 1, "101": 1, "102": 1, "103": 1, "104": 1, "108": 1, "100": 1, "111": 1, "112": 1, "115": 1, "117": 1, "118": 1, "119": 1, "120": 1, "121": 1, "123": 1, "126": 1, "130": 1, "132": 2, "133": 1, "134": 1, "135": 1, "136": 1, "137": 1, "138": 1, "179": 1, "189": 1, "197": 1, "208": 1, "240": 1, "241": 1, "244": 1, "308": 1, "320": 1, "338": 1, "348": 1, "367": 1, "395": 1, "404": 1, "405": 1, "409": 1, "417": 1, "508": 1, "516": 1, "525": 1, "544": 1, "547": 1, "558": 1, "566": 1, "586": 1, "597": 1, "605": 1, "606": 1, "613": 1, "629": 1, "660": 1, "671": 1, "674": 1, "686": 1, "712": 1, "720": 1, "727": 1, "740": 1, "743": 1, "748": 1, "749": 1, "752": 1, "753": 1, "756": 1, "757": 1, "764": 1, "771": 1, "795": 1, "802": 1, "805": 1, "810": 1, "813": 1, "817": 1, "823": 1, "833": 1, "837": 1, "841": 1, "845": 1, "846": 1, "856": 1, "882": 1, "889": 1, "900": 1, "902": 1, "905": 1, "943": 1, "127": 0, "128": 0, "139": 69, "140": 69, "141": 69, "142": 69, "143": 69, "144": 69, "145": 69, "146": 69, "147": 69, "148": 69, "149": 69, "150": 69, "151": 69, "152": 69, "153": 69, "154": 0, "155": 69, "156": 69, "157": 69, "158": 69, "159": 69, "160": 69, "163": 69, "164": 10, "165": 10, "167": 59, "168": 59, "170": 69, "172": 69, "173": 415, "174": 346, "175": 69, "176": 69, "177": 69, "184": 0, "185": 0, "186": 0, "187": 0, "191": 0, "192": 0, "193": 0, "194": 0, "195": 0, "198": 296, "199": 37, "200": 37, "201": 37, "202": 37, "203": 37, "204": 37, "205": 37, "213": 37, "215": 0, "216": 0, "217": 0, "218": 0, "214": 0, "221": 37, "223": 0, "224": 0, "225": 0, "226": 0, "222": 0, "229": 37, "231": 0, "232": 0, "233": 0, "234": 0, "230": 0, "238": 37, "242": 6, "245": 37, "246": 36, "248": 1, "250": 0, "251": 0, "252": 0, "253": 0, "249": 0, "257": 1, "259": 4, "260": 3, "261": 3, "262": 0, "264": 0, "265": 3, "266": 9, "268": 6, "270": 0, "271": 0, "272": 0, "273": 0, "274": 0, "276": 3, "278": 3, "279": 3, "280": 0, "281": 3, "282": 0, "285": 3, "286": 0, "288": 1, "290": 0, "291": 0, "292": 0, "293": 0, "294": 0, "289": 0, "297": 1, "300": 0, "301": 0, "303": 0, "304": 0, "299": 0, "267": 0, "309": 37, "311": 0, "312": 0, "313": 0, "314": 0, "310": 0, "318": 37, "321": 37, "322": 0, "327": 0, "328": 0, "329": 0, "331": 0, "332": 0, "326": 0, "336": 37, "339": 37, "340": 0, "341": 37, "342": 37, "343": 37, "344": 0, "345": 0, "346": 37, "349": 37, "350": 54, "351": 17, "352": 0, "353": 0, "354": 0, "356": 0, "358": 0, "361": 0, "362": 0, "365": 37, "368": 37, "370": 0, "371": 0, "372": 0, "373": 0, "374": 0, "376": 0, "377": 0, "378": 0, "369": 0, "381": 37, "383": 0, "384": 0, "385": 0, "386": 0, "388": 0, "389": 0, "390": 0, "382": 0, "393": 37, "397": 0, "396": 0, "398": 0, "400": 0, "401": 0, "402": 0, "406": 0, "407": 0, "415": 0, "450": 0, "452": 0, "453": 0, "454": 0, "455": 0, "456": 0, "457": 0, "458": 0, "459": 0, "460": 0, "461": 0, "462": 0, "463": 0, "464": 0, "465": 0, "466": 0, "467": 0, "468": 0, "469": 0, "470": 0, "471": 0, "451": 0, "474": 0, "475": 0, "476": 0, "477": 0, "478": 0, "473": 0, "480": 0, "481": 0, "482": 0, "484": 0, "485": 0, "487": 0, "488": 0, "489": 0, "491": 0, "492": 0, "494": 0, "495": 0, "496": 0, "497": 0, "498": 0, "499": 0, "500": 0, "501": 0, "502": 0, "503": 0, "504": 0, "506": 0, "513": 0, "514": 0, "518": 15, "520": 15, "521": 6, "519": 15, "523": 0, "528": 85, "530": 85, "529": 85, "531": 0, "533": 85, "534": 0, "535": 0, "539": 0, "540": 0, "538": 0, "542": 0, "545": 3, "550": 20, "551": 20, "552": 4, "553": 4, "554": 4, "555": 20, "556": 20, "561": 20, "562": 20, "563": 20, "564": 20, "572": 0, "578": 0, "581": 0, "582": 0, "583": 0, "584": 0, "593": 0, "594": 0, "595": 0, "603": 0, "611": 38, "614": 0, "615": 0, "617": 0, "618": 0, "619": 0, "620": 0, "621": 0, "622": 0, "623": 0, "624": 0, "626": 0, "627": 0, "634": 0, "636": 0, "638": 0, "639": 0, "640": 0, "643": 0, "644": 0, "645": 0, "646": 0, "647": 0, "648": 0, "649": 0, "650": 0, "651": 0, "654": 0, "655": 0, "657": 0, "658": 0, "666": 0, "667": 0, "668": 0, "669": 0, "672": 0, "680": 0, "681": 0, "682": 0, "683": 0, "684": 0, "706": 0, "707": 0, "708": 0, "709": 0, "710": 0, "718": 0, "722": 0, "723": 0, "724": 0, "725": 0, "733": 0, "734": 0, "736": 0, "737": 0, "735": 0, "741": 0, "744": 0, "745": 0, "746": 0, "750": 26, "754": 6, "762": 0, "765": 68, "766": 68, "767": 68, "768": 68, "769": 8, "778": 68, "779": 68, "780": 68, "781": 68, "782": 68, "783": 68, "788": 1, "789": 2, "790": 1, "791": 1, "792": 1, "800": 0, "803": 93, "806": 90, "807": 90, "808": 90, "811": 0, "815": 0, "819": 0, "820": 0, "821": 0, "829": 0, "830": 0, "831": 0, "835": 0, "839": 19, "843": 22, "847": 11, "848": 4, "849": 1, "850": 9, "852": 7, "853": 2, "854": 5, "861": 0, "862": 0, "863": 0, "864": 0, "865": 0, "866": 0, "867": 0, "868": 0, "869": 0, "870": 0, "872": 0, "871": 0, "873": 0, "875": 0, "876": 0, "877": 0, "878": 0, "879": 0, "887": 0, "891": 0, "892": 0, "893": 0, "894": 0, "895": 0, "896": 0, "898": 0, "899": 0, "903": 0, "908": 0, "909": 0, "910": 0, "907": 0, "912": 0, "913": 0, "914": 0, "915": 0, "917": 0, "918": 0, "920": 0, "921": 0, "922": 0, "923": 0, "924": 0, "925": 0, "926": 0, "927": 0, "929": 0, "933": 0, "934": 0, "937": 0, "938": 0, "939": 0, "940": 0, "941": 0, "945": 0, "949": 1, "951": 1, "952": 1, "950": 1, "954": 1, "956": 1, "959": 1, "975": 1, "981": 1, "993": 1, "957": 0, "960": 0, "961": 0, "962": 0, "964": 0, "965": 0, "966": 0, "967": 0, "968": 0, "969": 0, "970": 0, "971": 0, "972": 0, "976": 0, "977": 0, "978": 0, "979": 0, "982": 0, "983": 0, "984": 0, "986": 0, "990": 0, "991": 0, "994": 0, "998": 0, "999": 0, "1000": 0, "1004": 1, "1006": 1, "1012": 1, "1020": 1, "1041": 1, "1062": 1, "1067": 1, "1070": 1, "1075": 1, "1079": 1, "1090": 1, "1007": 19, "1008": 19, "1009": 19, "1010": 15, "1013": 14, "1014": 56, "1015": 14, "1016": 14, "1017": 14, "1021": 14, "1023": 0, "1024": 0, "1025": 0, "1026": 0, "1022": 0, "1029": 28, "1030": 14, "1032": 0, "1033": 0, "1034": 0, "1035": 0, "1031": 0, "1039": 14, "1042": 14, "1043": 14, "1044": 0, "1045": 0, "1046": 0, "1048": 0, "1047": 0, "1049": 0, "1050": 0, "1052": 0, "1053": 0, "1054": 0, "1055": 0, "1056": 0, "1057": 0, "1060": 14, "1063": 0, "1064": 0, "1065": 0, "1068": 0, "1071": 0, "1072": 0, "1073": 0, "1076": 0, "1077": 0, "1083": 0, "1085": 0, "1086": 0, "1087": 0, "1088": 0, "1091": 0, "1092": 0, "1093": 0, "1094": 0, "1098": 1, "1099": 1, "1102": 1, "1106": 1, "1109": 1, "1100": 1, "1114": 0, "1115": 0, "1116": 0, "1120": 0, "1125": 1, "1132": 1, "1151": 1, "1156": 1, "1126": 16, "1127": 4, "1128": 4, "1129": 4, "1136": 4, "1137": 20, "1138": 4, "1140": 0, "1141": 0, "1144": 0, "1145": 0, "1139": 0, "1149": 4, "1152": 0, "1163": 0, "1164": 0, "1165": 0, "1166": 0, "1167": 0, "1168": 0, "1169": 0, "1171": 0, "1172": 0, "1173": 0, "1174": 0, "1176": 0, "1177": 0, "1179": 0, "1184": 0, "1185": 0, "1175": 0, "1188": 0, "1192": 1, "1194": 1, "1196": 1, "1193": 1, "1199": 1, "1201": 1, "1209": 1, "1228": 1, "1239": 1, "1242": 1, "1272": 1, "1280": 1, "1292": 1, "1296": 1, "1302": 1, "1306": 1, "1203": 6, "1204": 6, "1205": 0, "1206": 0, "1207": 6, "1214": 0, "1215": 0, "1217": 0, "1218": 0, "1219": 0, "1220": 0, "1221": 0, "1224": 0, "1226": 0, "1229": 0, "1230": 0, "1231": 0, "1232": 0, "1233": 0, "1234": 0, "1235": 0, "1236": 0, "1237": 0, "1240": 0, "1243": 0, "1244": 0, "1245": 0, "1246": 0, "1249": 0, "1250": 0, "1251": 0, "1252": 0, "1253": 0, "1255": 0, "1256": 0, "1257": 0, "1258": 0, "1259": 0, "1260": 0, "1261": 0, "1262": 0, "1263": 0, "1266": 0, "1267": 0, "1268": 0, "1269": 0, "1273": 0, "1274": 0, "1275": 0, "1276": 0, "1278": 0, "1281": 8, "1282": 8, "1283": 10, "1284": 5, "1285": 5, "1287": 10, "1288": 5, "1289": 5, "1293": 0, "1294": 0, "1298": 0, "1299": 0, "1300": 0, "1303": 0, "1304": 0, "1307": 0, "1308": 0, "1309": 0, "1314": 1, "1316": 1, "1318": 1, "1320": 1, "1315": 1, "1324": 1, "1328": 1, "1342": 1, "1345": 1, "1393": 1, "1404": 1, "1423": 1, "1429": 1, "1433": 1, "1333": 4, "1334": 2, "1336": 2, "1337": 2, "1338": 0, "1340": 2, "1343": 0, "1346": 0, "1347": 0, "1348": 0, "1349": 0, "1350": 0, "1351": 0, "1352": 0, "1357": 0, "1359": 0, "1360": 0, "1361": 0, "1362": 0, "1363": 0, "1365": 0, "1366": 0, "1367": 0, "1368": 0, "1369": 0, "1370": 0, "1371": 0, "1372": 0, "1373": 0, "1376": 0, "1377": 0, "1378": 0, "1379": 0, "1380": 0, "1381": 0, "1382": 0, "1383": 0, "1384": 0, "1387": 0, "1388": 0, "1389": 0, "1390": 0, "1394": 0, "1395": 0, "1396": 0, "1397": 0, "1399": 0, "1405": 0, "1406": 0, "1407": 0, "1411": 0, "1412": 0, "1413": 0, "1414": 0, "1415": 0, "1417": 0, "1418": 0, "1419": 0, "1420": 0, "1421": 0, "1425": 0, "1426": 0, "1427": 0, "1430": 0, "1431": 0, "1434": 0, "1435": 0, "1436": 0, "1441": 1, "1443": 1, "1442": 1, "1445": 1, "1447": 1, "1452": 1, "1465": 1, "1489": 1, "1513": 1, "1524": 1, "1525": 1, "1530": 1, "1531": 1, "1534": 1, "1542": 1, "1545": 1, "1565": 1, "1568": 1, "1572": 1, "1449": 0, "1450": 0, "1453": 0, "1455": 0, "1456": 0, "1457": 0, "1459": 0, "1460": 0, "1462": 0, "1463": 0, "1466": 0, "1467": 0, "1468": 0, "1469": 0, "1470": 0, "1472": 0, "1473": 0, "1474": 0, "1475": 0, "1471": 0, "1478": 0, "1480": 0, "1481": 0, "1482": 0, "1483": 0, "1479": 0, "1487": 0, "1490": 0, "1491": 0, "1492": 0, "1493": 0, "1494": 0, "1496": 0, "1497": 0, "1498": 0, "1499": 0, "1495": 0, "1502": 0, "1504": 0, "1505": 0, "1506": 0, "1507": 0, "1503": 0, "1511": 0, "1514": 0, "1516": 0, "1517": 0, "1518": 0, "1519": 0, "1515": 0, "1522": 0, "1526": 0, "1527": 0, "1532": 0, "1535": 0, "1536": 0, "1537": 0, "1538": 0, "1539": 0, "1540": 0, "1543": 0, "1546": 0, "1547": 0, "1548": 0, "1549": 0, "1550": 0, "1551": 0, "1552": 0, "1553": 0, "1555": 0, "1556": 0, "1557": 0, "1558": 0, "1559": 0, "1560": 0, "1561": 0, "1562": 0, "1566": 0, "1569": 0, "1570": 0, "1573": 0, "1574": 0, "1575": 0, "1576": 0, "1577": 0, "1588": 1, "1590": 1, "1589": 1, "1593": 1, "1595": 1, "1598": 1, "1617": 1, "1624": 1, "1630": 1, "1634": 1, "1596": 0, "1599": 0, "1600": 0, "1601": 0, "1602": 0, "1603": 0, "1604": 0, "1605": 0, "1606": 0, "1608": 0, "1609": 0, "1611": 0, "1612": 0, "1613": 0, "1614": 0, "1618": 0, "1619": 0, "1620": 0, "1621": 0, "1622": 0, "1625": 0, "1626": 0, "1627": 0, "1628": 0, "1631": 0, "1632": 0, "1635": 0, "1636": 0, "1637": 0, "1642": 1, "1643": 1, "1645": 1, "1650": 1, "1656": 1, "1647": 1, "1648": 1, "1651": 0, "1654": 0, "1659": 0, "1660": 0, "1661": 0, "1666": 1, "1668": 1, "1675": 1, "1681": 1, "1692": 1, "1708": 1, "1714": 1, "1725": 1, "1670": 0, "1671": 0, "1672": 0, "1673": 0, "1676": 0, "1677": 0, "1678": 0, "1682": 0, "1684": 0, "1685": 0, "1686": 0, "1687": 0, "1683": 0, "1690": 0, "1693": 0, "1694": 0, "1695": 0, "1696": 0, "1697": 0, "1698": 0, "1699": 0, "1700": 0, "1701": 0, "1702": 0, "1703": 0, "1704": 0, "1705": 0, "1706": 0, "1709": 0, "1710": 0, "1711": 0, "1712": 0, "1715": 0, "1716": 0, "1717": 0, "1718": 0, "1719": 0, "1720": 0, "1721": 0, "1722": 0, "1726": 0, "1730": 1, "1732": 1, "1731": 1, "1734": 1, "1736": 1, "1747": 1, "1750": 1, "1762": 1, "1737": 0, "1738": 0, "1739": 0, "1740": 0, "1741": 0, "1742": 0, "1743": 0, "1744": 0, "1745": 0, "1748": 0, "1751": 0, "1752": 0, "1753": 0, "1754": 0, "1755": 0, "1756": 0, "1757": 0, "1758": 0, "1759": 0, "1763": 0, "1764": 0, "1765": 0, "1770": 1, "1772": 1, "1771": 1, "1774": 1, "1776": 1, "1782": 1, "1794": 1, "1795": 1, "1823": 1, "1834": 1, "1837": 1, "1849": 1, "1777": 21, "1778": 7, "1779": 7, "1783": 7, "1785": 0, "1786": 0, "1787": 0, "1788": 0, "1789": 0, "1784": 0, "1792": 7, "1798": 7, "1799": 7, "1800": 7, "1801": 7, "1808": 0, "1810": 0, "1811": 7, "1818": 0, "1820": 0, "1821": 7, "1803": 0, "1805": 0, "1804": 0, "1806": 0, "1807": 0, "1813": 0, "1815": 0, "1814": 0, "1816": 0, "1817": 0, "1824": 0, "1825": 0, "1826": 0, "1827": 0, "1828": 0, "1829": 0, "1830": 0, "1831": 0, "1832": 0, "1835": 0, "1838": 0, "1839": 0, "1840": 0, "1841": 0, "1842": 0, "1843": 0, "1844": 0, "1845": 0, "1846": 0, "1850": 0, "1851": 0, "1852": 0, "1857": 1, "1858": 1, "1860": 1, "1863": 1, "1861": 0, "1864": 0, "1865": 0, "1866": 0, "1867": 0, "1872": 1, "1874": 1, "1875": 0, "1879": 1, "1880": 1, "1883": 1, "1886": 1, "1887": 1, "1881": 1, "1890": 1, "1894": 1, "1899": 1, "1905": 1, "1891": 0, "1892": 0, "1895": 0, "1896": 0, "1897": 0, "1900": 0, "1901": 0, "1902": 0, "1903": 0, "1906": 0, "1910": 1, "1911": 1, "1912": 1, "1914": 1, "1924": 1, "1930": 1, "1942": 1, "1952": 1, "1955": 1, "1965": 1, "1970": 1, "1981": 1, "1916": 0, "1917": 0, "1919": 0, "1918": 0, "1920": 0, "1921": 0, "1922": 0, "1925": 0, "1926": 0, "1927": 0, "1931": 0, "1933": 0, "1934": 0, "1936": 0, "1937": 0, "1932": 0, "1940": 0, "1943": 0, "1944": 0, "1945": 0, "1946": 0, "1947": 0, "1948": 0, "1949": 0, "1950": 0, "1953": 0, "1956": 0, "1957": 0, "1958": 0, "1959": 0, "1960": 0, "1961": 0, "1962": 0, "1963": 0, "1966": 0, "1967": 0, "1968": 0, "1971": 0, "1972": 0, "1973": 0, "1974": 0, "1975": 0, "1976": 0, "1977": 0, "1978": 0, "1979": 0, "1982": 0, "1983": 0, "1984": 0, "1985": 0, "1991": 1, "1992": 1, "1990": 1, "1994": 1, "1997": 1, "2000": 1, "2001": 1, "1995": 1, "2004": 1, "2009": 1, "2005": 0, "2006": 0, "2007": 0, "2010": 0, "2011": 0, "2012": 0, "2013": 0, "2017": 1, "2029": 1, "2018": 3, "2019": 3, "2020": 6, "2021": 12, "2023": 9, "2026": 3, "2024": 6, "2022": 3, "2038": 0, "2039": 0, "2041": 0, "2045": 1, "2047": 1, "2050": 1, "2048": 0, "2051": 0, "2052": 0, "2053": 0, "2058": 1, "2060": 1, "2063": 1, "2061": 0, "2064": 0, "2065": 0, "2066": 0, "2071": 1, "2073": 1, "2076": 1, "2074": 1, "2077": 0, "2078": 0, "2079": 0, "2084": 1, "2085": 1, "2087": 1, "2093": 1, "2105": 1, "2108": 1, "2088": 0, "2089": 0, "2090": 0, "2091": 0, "2094": 0, "2095": 0, "2096": 0, "2097": 0, "2098": 0, "2100": 0, "2101": 0, "2102": 0, "2103": 0, "2106": 0, "2109": 0, "2110": 0, "2111": 0, "2112": 0, "2117": 1, "2119": 1, "2123": 1, "2130": 1, "2151": 1, "2154": 1, "2159": 1, "2163": 1, "2173": 1, "2120": 3, "2121": 3, "2124": 3, "2125": 9, "2126": 3, "2127": 3, "2131": 3, "2132": 3, "2133": 0, "2134": 0, "2135": 0, "2137": 0, "2136": 0, "2138": 0, "2139": 0, "2141": 0, "2142": 0, "2143": 0, "2144": 0, "2145": 0, "2146": 0, "2149": 3, "2152": 0, "2155": 0, "2156": 0, "2157": 0, "2160": 0, "2161": 0, "2167": 0, "2168": 0, "2169": 0, "2170": 0, "2174": 0, "2175": 0, "2176": 0, "2177": 0, "2181": 1, "2183": 1, "2185": 1, "2182": 1, "2188": 1, "2190": 1, "2198": 1, "2220": 1, "2231": 1, "2234": 1, "2262": 1, "2270": 1, "2274": 1, "2280": 1, "2284": 1, "2192": 1, "2193": 1, "2194": 0, "2195": 0, "2196": 1, "2203": 0, "2204": 0, "2206": 0, "2207": 0, "2208": 0, "2209": 0, "2210": 0, "2213": 0, "2216": 0, "2218": 0, "2221": 0, "2222": 0, "2223": 0, "2224": 0, "2225": 0, "2226": 0, "2227": 0, "2228": 0, "2229": 0, "2232": 0, "2235": 0, "2236": 0, "2237": 0, "2238": 0, "2239": 0, "2243": 0, "2245": 0, "2246": 0, "2247": 0, "2248": 0, "2249": 0, "2250": 0, "2251": 0, "2252": 0, "2253": 0, "2256": 0, "2257": 0, "2258": 0, "2259": 0, "2263": 0, "2264": 0, "2265": 0, "2266": 0, "2268": 0, "2271": 0, "2272": 0, "2276": 0, "2277": 0, "2278": 0, "2281": 0, "2282": 0, "2285": 0, "2286": 0, "2287": 0, "2292": 1, "2293": 1, "2295": 1, "2299": 1, "2305": 1, "2296": 0, "2297": 0, "2300": 0, "2301": 0, "2302": 0, "2303": 0, "2308": 0, "2309": 0, "2310": 0, "2315": 1, "2316": 1, "2318": 1, "2324": 1, "2327": 1, "2339": 1, "2347": 1, "2350": 1, "2353": 1, "2361": 1, "2367": 1, "2371": 1, "2319": 0, "2320": 0, "2321": 0, "2322": 0, "2325": 0, "2328": 0, "2330": 0, "2331": 0, "2333": 0, "2334": 0, "2329": 0, "2337": 0, "2340": 0, "2341": 0, "2342": 0, "2344": 0, "2345": 0, "2348": 0, "2351": 0, "2354": 0, "2355": 0, "2356": 0, "2357": 0, "2358": 0, "2359": 0, "2362": 0, "2363": 0, "2364": 0, "2365": 0, "2369": 0, "2373": 0, "2374": 0, "2375": 0, "2380": 1, "2379": 1, "2382": 1, "2383": 1, "2385": 1, "2389": 1, "2394": 1, "2397": 1, "2401": 1, "2411": 1, "2424": 1, "2386": 0, "2387": 0, "2390": 0, "2391": 0, "2392": 0, "2395": 0, "2398": 0, "2399": 0, "2402": 0, "2403": 0, "2404": 0, "2405": 0, "2407": 0, "2408": 0, "2409": 0, "2412": 0, "2413": 0, "2414": 0, "2415": 0, "2416": 0, "2417": 0, "2418": 0, "2419": 0, "2420": 0, "2422": 0, "2425": 0, "2426": 0, "2427": 0, "2432": 1, "2434": 1, "2438": 1, "2444": 1, "2456": 1, "2462": 1, "2465": 1, "2471": 1, "2480": 1, "2435": 10, "2436": 10, "2439": 18, "2440": 6, "2441": 6, "2445": 6, "2447": 0, "2448": 0, "2449": 0, "2450": 0, "2446": 0, "2454": 6, "2457": 0, "2458": 0, "2459": 0, "2460": 0, "2463": 0, "2466": 0, "2467": 0, "2468": 0, "2469": 0, "2472": 10, "2473": 0, "2474": 0, "2475": 0, "2477": 10, "2478": 10, "2481": 0, "2501": 1, "2502": 1, "2505": 1, "2508": 1, "2503": 10, "2506": 0, "2509": 10, "2514": 1, "2517": 1, "2515": 6, "2518": 0, "2523": 1, "2526": 1, "2524": 0, "2527": 0, "2532": 1, "2535": 1, "2533": 0, "2536": 0}}
+ git checkout 652c68ffeebd510a6f59e1b56b3e007d07683ad8
Note: switching to '652c68ffeebd510a6f59e1b56b3e007d07683ad8'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at 652c68ffee Clarified how contrib.auth picks a password hasher for verification.
M	django/db/models/fields/__init__.py
+ git apply /root/pre_state.patch
error: unrecognized input
