{"instance_id": "pydata__xarray-3151", "repo": "pydata/xarray", "version": "0.12", "environment_setup_commit": "1c198a191127c601d091213c4b3292a8bb3054e1", "patch_list": ["diff --git a/xarray/core/combine.py b/xarray/core/combine.py\n--- a/xarray/core/combine.py\n+++ b/xarray/core/combine.py\n@@ -501,14 +501,13 @@ def combine_by_coords(datasets, compat='no_conflicts', data_vars='all',\n                                    fill_value=fill_value)\n \n         # Check the overall coordinates are monotonically increasing\n-        for dim in concatenated.dims:\n-            if dim in concatenated:\n-                indexes = concatenated.indexes.get(dim)\n-                if not (indexes.is_monotonic_increasing\n-                        or indexes.is_monotonic_decreasing):\n-                    raise ValueError(\"Resulting object does not have monotonic\"\n-                                     \" global indexes along dimension {}\"\n-                                     .format(dim))\n+        for dim in concat_dims:\n+            indexes = concatenated.indexes.get(dim)\n+            if not (indexes.is_monotonic_increasing\n+                    or indexes.is_monotonic_decreasing):\n+                raise ValueError(\"Resulting object does not have monotonic\"\n+                                 \" global indexes along dimension {}\"\n+                                 .format(dim))\n         concatenated_grouped_by_data_vars.append(concatenated)\n \n     return merge(concatenated_grouped_by_data_vars, compat=compat,\n", "diff --git a/dev/null b/xarray/tests/test_coverup_pydata__xarray-3151.py\nnew file mode 100644\nindex e69de29..fe7ceac 100644\n--- /dev/null\n+++ b/xarray/tests/test_coverup_pydata__xarray-3151.py\n@@ -0,0 +1,32 @@\n+import pytest\n+import xarray as xr\n+import numpy as np\n+\n+def test_combine_by_coords_non_monotonic_identical_coords():\n+    # Setup datasets with non-monotonic identical coordinates\n+    yCoord = ['a', 'c', 'b']  # Non-monotonic order\n+    ds1 = xr.Dataset(\n+        data_vars=dict(\n+            data=(['x', 'y'], np.random.rand(3, 3))\n+        ),\n+        coords=dict(\n+            x=[1, 2, 3],\n+            y=yCoord\n+        )\n+    )\n+    ds2 = xr.Dataset(\n+        data_vars=dict(\n+            data=(['x', 'y'], np.random.rand(4, 3))\n+        ),\n+        coords=dict(\n+            x=[4, 5, 6, 7],\n+            y=yCoord\n+        )\n+    )\n+\n+    # Attempt to combine datasets and expect no error\n+    try:\n+        xr.combine_by_coords((ds1, ds2))\n+    except ValueError as e:\n+        pytest.fail(f\"combine_by_coords raised ValueError unexpectedly: {e}\")\n+\n"], "arch": "x86_64", "base_commit": "118f4d996e7711c9aced916e6049af9f28d5ec66", "test_directives": ["xarray/tests/test_coverup_pydata__xarray-3151.py"], "coverage_files": ["xarray/core/combine.py"], "env_name": "testbed", "run_id": "assertflip", "patch_id": "pred_post__AssertFlip", "timeout": 1800, "rm_image": false, "force_rebuild": false, "exec_mode": "unit_test", "reproduction_script_name": null, "compute_coverage": true, "install": {"python": "3.10", "packages": "environment.yml", "install": "python -m pip install -e .", "pip_packages": ["numpy==1.23.0", "packaging==23.1", "pandas==1.5.3", "pytest==7.4.0", "python-dateutil==2.8.2", "pytz==2023.3", "six==1.16.0", "scipy==1.11.1", "setuptools==68.0.0", "dask==2022.8.1"], "no_use_env": true}, "cache_level": "instance", "test_command": "python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(xarray/core/combine\\.py)' -m pytest --no-header -rA  -p no:cacheprovider xarray/tests/test_coverup_pydata__xarray-3151.py", "req_install_commands": ["cat <<'EOF_59812759871' > environment.yml\nname: testbed\nchannels:\n  - conda-forge\n  - nodefaults\ndependencies:\n  - aiobotocore\n  - boto3\n  - bottleneck\n  - cartopy\n  - cdms2\n  - cfgrib\n  - cftime\n  - dask\n  - distributed\n  - h5netcdf\n  - h5py\n  - hdf5\n  - hypothesis\n  - iris\n  - lxml    # Optional dep of pydap\n  - matplotlib-base\n  - nc-time-axis\n  - netcdf4\n  - numba\n  - numexpr\n  - numpy\n  - pandas\n  - pint\n  - pip\n  - pooch\n  - pre-commit\n  - pseudonetcdf\n  - pydap\n  # - pynio: not compatible with netCDF4>1.5.3; only tested in py37-bare-minimum\n  - pytest\n  - pytest-cov\n  - pytest-env\n  - pytest-xdist\n  - rasterio\n  - scipy\n  - seaborn\n  - setuptools\n  - sparse\n  - toolz\n  - zarr\n  - pip:\n    - numbagg\n\nEOF_59812759871", "conda create -c conda-forge -n testbed python=3.10 -y", "conda env update -f environment.yml", "rm environment.yml"]}