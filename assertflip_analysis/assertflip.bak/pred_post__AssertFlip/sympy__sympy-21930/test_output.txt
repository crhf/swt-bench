+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD de446c6d85f633271dfec1452f6f28ea783e293f
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch master
nothing to commit, working tree clean
+ git show
commit de446c6d85f633271dfec1452f6f28ea783e293f
Merge: b17378ca1f fa0b6fb524
Author: Oscar Benjamin <oscar.j.benjamin@gmail.com>
Date:   Sun Aug 22 19:29:51 2021 +0100

    Merge pull request #21926 from ayushk7102/fix_deprecated_numpy_types
    
    Replaced deprecated numpy types with float64, int64 and complex64

+ git diff de446c6d85f633271dfec1452f6f28ea783e293f
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Requirement already satisfied: mpmath>=0.19 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from sympy==1.9.dev0) (1.3.0)
Installing collected packages: sympy
  Attempting uninstall: sympy
    Found existing installation: sympy 1.9.dev0
    Uninstalling sympy-1.9.dev0:
      Successfully uninstalled sympy-1.9.dev0
  DEPRECATION: Legacy editable install of sympy==1.9.dev0 from file:///testbed (setup.py develop) is deprecated. pip 25.3 will enforce this behaviour change. A possible replacement is to add a pyproject.toml or enable --use-pep517, and use setuptools >= 64. If the resulting installation is not behaving as expected, try using --config-settings editable_mode=compat. Please consult the setuptools documentation for more information. Discussion can be found at https://github.com/pypa/pip/issues/11457
  Running setup.py develop for sympy
Successfully installed sympy
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git apply -v -
Checking patch sympy/physics/secondquant.py...
Applied patch sympy/physics/secondquant.py cleanly.
+ git apply -v -
Checking patch sympy/polys/tests/test_coverup_sympy__sympy-21930.py...
Applied patch sympy/polys/tests/test_coverup_sympy__sympy-21930.py cleanly.
+ PYTHONWARNINGS=ignore::UserWarning,ignore::SyntaxWarning
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(sympy/physics/secondquant\.py)' bin/test -C --verbose sympy/polys/tests/test_coverup_sympy__sympy-21930.p
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(sympy/physics/secondquant\\.py)']
============================= test process starts ==============================
executable:         /opt/miniconda3/envs/testbed/bin/python3  (3.9.23-final-0) [CPython]
architecture:       64-bit
cache:              no
ground types:       python 
numpy:              None
random seed:        94411228
hash randomization: on (PYTHONHASHSEED=3664913272)

1.09 secondquant.py(1): """
1.09 secondquant.py(7): from collections import defaultdict
1.09 secondquant.py(9): from sympy import (Add, Basic, cacheit, Dummy, Expr, Function, I,
1.09 secondquant.py(12): from sympy.printing.str import StrPrinter
1.09 secondquant.py(13): from sympy.utilities.iterables import has_dups
1.09 secondquant.py(14): from sympy.utilities import default_sort_key
1.09 secondquant.py(16): __all__ = [
1.09 secondquant.py(57): class SecondQuantizationError(Exception):
1.09 secondquant.py(57): class SecondQuantizationError(Exception):
1.09 secondquant.py(58):     pass
1.09 secondquant.py(61): class AppliesOnlyToSymbolicIndex(SecondQuantizationError):
1.09 secondquant.py(61): class AppliesOnlyToSymbolicIndex(SecondQuantizationError):
1.09 secondquant.py(62):     pass
1.09 secondquant.py(65): class ContractionAppliesOnlyToFermions(SecondQuantizationError):
1.09 secondquant.py(65): class ContractionAppliesOnlyToFermions(SecondQuantizationError):
1.09 secondquant.py(66):     pass
1.09 secondquant.py(69): class ViolationOfPauliPrinciple(SecondQuantizationError):
1.09 secondquant.py(69): class ViolationOfPauliPrinciple(SecondQuantizationError):
1.09 secondquant.py(70):     pass
1.09 secondquant.py(73): class SubstitutionOfAmbigousOperatorFailed(SecondQuantizationError):
1.09 secondquant.py(73): class SubstitutionOfAmbigousOperatorFailed(SecondQuantizationError):
1.09 secondquant.py(74):     pass
1.09 secondquant.py(77): class WicksTheoremDoesNotApply(SecondQuantizationError):
1.09 secondquant.py(77): class WicksTheoremDoesNotApply(SecondQuantizationError):
1.09 secondquant.py(78):     pass
1.09 secondquant.py(81): class Dagger(Expr):
1.09 secondquant.py(81): class Dagger(Expr):
1.09 secondquant.py(82):     """
1.09 secondquant.py(99):     def __new__(cls, arg):
1.09 secondquant.py(107):     @classmethod
1.09 secondquant.py(108):     def eval(cls, arg):
1.09 secondquant.py(144):     def _dagger_(self):
1.09 secondquant.py(148): class TensorSymbol(Expr):
1.09 secondquant.py(148): class TensorSymbol(Expr):
1.09 secondquant.py(150):     is_commutative = True
1.09 secondquant.py(153): class AntiSymmetricTensor(TensorSymbol):
1.09 secondquant.py(153): class AntiSymmetricTensor(TensorSymbol):
1.09 secondquant.py(154):     """Stores upper and lower indices in separate Tuple's.
1.09 secondquant.py(174):     def __new__(cls, symbol, upper, lower):
1.09 secondquant.py(195):     @classmethod
1.09 secondquant.py(196):     def _sortkey(cls, index):
1.09 secondquant.py(220):     def _latex(self, printer):
1.09 secondquant.py(227):     @property
1.09 secondquant.py(228):     def symbol(self):
1.09 secondquant.py(247):     @property
1.09 secondquant.py(248):     def upper(self):
1.09 secondquant.py(268):     @property
1.09 secondquant.py(269):     def lower(self):
1.09 secondquant.py(288):     def __str__(self):
1.09 secondquant.py(291):     def doit(self, **kw_args):
1.09 secondquant.py(308): class SqOperator(Expr):
1.09 secondquant.py(308): class SqOperator(Expr):
1.09 secondquant.py(309):     """
1.09 secondquant.py(313):     op_symbol = 'sq'
1.09 secondquant.py(315):     is_commutative = False
1.09 secondquant.py(317):     def __new__(cls, k):
1.09 secondquant.py(321):     @property
1.09 secondquant.py(322):     def state(self):
1.09 secondquant.py(344):     @property
1.09 secondquant.py(345):     def is_symbolic(self):
1.09 secondquant.py(366):     def doit(self, **kw_args):
1.09 secondquant.py(372):     def __repr__(self):
1.09 secondquant.py(375):     def __str__(self):
1.09 secondquant.py(378):     def apply_operator(self, state):
1.09 secondquant.py(385): class BosonicOperator(SqOperator):
1.09 secondquant.py(385): class BosonicOperator(SqOperator):
1.10 secondquant.py(386):     pass
1.10 secondquant.py(389): class Annihilator(SqOperator):
1.10 secondquant.py(389): class Annihilator(SqOperator):
1.10 secondquant.py(390):     pass
1.10 secondquant.py(393): class Creator(SqOperator):
1.10 secondquant.py(393): class Creator(SqOperator):
1.10 secondquant.py(394):     pass
1.10 secondquant.py(397): class AnnihilateBoson(BosonicOperator, Annihilator):
1.10 secondquant.py(397): class AnnihilateBoson(BosonicOperator, Annihilator):
1.10 secondquant.py(398):     """
1.10 secondquant.py(410):     op_symbol = 'b'
1.10 secondquant.py(412):     def _dagger_(self):
1.10 secondquant.py(415):     def apply_operator(self, state):
1.10 secondquant.py(438):     def __repr__(self):
1.10 secondquant.py(441):     def _latex(self, printer):
1.10 secondquant.py(445): class CreateBoson(BosonicOperator, Creator):
1.10 secondquant.py(445): class CreateBoson(BosonicOperator, Creator):
1.10 secondquant.py(446):     """
1.10 secondquant.py(450):     op_symbol = 'b+'
1.10 secondquant.py(452):     def _dagger_(self):
1.10 secondquant.py(455):     def apply_operator(self, state):
1.10 secondquant.py(477):     def __repr__(self):
1.10 secondquant.py(480):     def _latex(self, printer):
1.10 secondquant.py(483): B = AnnihilateBoson
1.10 secondquant.py(484): Bd = CreateBoson
1.10 secondquant.py(487): class FermionicOperator(SqOperator):
1.10 secondquant.py(487): class FermionicOperator(SqOperator):
1.10 secondquant.py(489):     @property
1.10 secondquant.py(490):     def is_restricted(self):
1.10 secondquant.py(531):     @property
1.10 secondquant.py(532):     def is_above_fermi(self):
1.10 secondquant.py(560):     @property
1.10 secondquant.py(561):     def is_below_fermi(self):
1.10 secondquant.py(586):     @property
1.10 secondquant.py(587):     def is_only_below_fermi(self):
1.10 secondquant.py(611):     @property
1.10 secondquant.py(612):     def is_only_above_fermi(self):
1.10 secondquant.py(636):     def _sortkey(self):
1.10 secondquant.py(650): class AnnihilateFermion(FermionicOperator, Annihilator):
1.10 secondquant.py(650): class AnnihilateFermion(FermionicOperator, Annihilator):
1.10 secondquant.py(651):     """
1.10 secondquant.py(655):     op_symbol = 'f'
1.10 secondquant.py(657):     def _dagger_(self):
1.10 secondquant.py(660):     def apply_operator(self, state):
1.10 secondquant.py(690):     @property
1.10 secondquant.py(691):     def is_q_creator(self):
1.10 secondquant.py(717):     @property
1.10 secondquant.py(718):     def is_q_annihilator(self):
1.10 secondquant.py(744):     @property
1.10 secondquant.py(745):     def is_only_q_creator(self):
1.10 secondquant.py(768):     @property
1.10 secondquant.py(769):     def is_only_q_annihilator(self):
1.10 secondquant.py(792):     def __repr__(self):
1.10 secondquant.py(795):     def _latex(self, printer):
1.10 secondquant.py(799): class CreateFermion(FermionicOperator, Creator):
1.10 secondquant.py(799): class CreateFermion(FermionicOperator, Creator):
1.10 secondquant.py(800):     """
1.10 secondquant.py(804):     op_symbol = 'f+'
1.10 secondquant.py(806):     def _dagger_(self):
1.10 secondquant.py(809):     def apply_operator(self, state):
1.10 secondquant.py(836):     @property
1.10 secondquant.py(837):     def is_q_creator(self):
1.10 secondquant.py(863):     @property
1.10 secondquant.py(864):     def is_q_annihilator(self):
1.10 secondquant.py(890):     @property
1.10 secondquant.py(891):     def is_only_q_creator(self):
1.10 secondquant.py(914):     @property
1.10 secondquant.py(915):     def is_only_q_annihilator(self):
1.10 secondquant.py(938):     def __repr__(self):
1.10 secondquant.py(941):     def _latex(self, printer):
1.10 secondquant.py(944): Fd = CreateFermion
1.10 secondquant.py(945): F = AnnihilateFermion
1.10 secondquant.py(948): class FockState(Expr):
1.10 secondquant.py(948): class FockState(Expr):
1.10 secondquant.py(949):     """
1.10 secondquant.py(957):     is_commutative = False
1.10 secondquant.py(959):     def __new__(cls, occupations):
1.10 secondquant.py(974):     def __getitem__(self, i):
1.10 secondquant.py(978):     def __repr__(self):
1.10 secondquant.py(981):     def __str__(self):
1.10 secondquant.py(984):     def _labels(self):
1.10 secondquant.py(987):     def __len__(self):
1.10 secondquant.py(991): class BosonState(FockState):
1.10 secondquant.py(991): class BosonState(FockState):
1.10 secondquant.py(992):     """
1.10 secondquant.py(996):     def up(self, i):
1.10 secondquant.py(1015):     def down(self, i):
1.10 secondquant.py(1038): class FermionState(FockState):
1.10 secondquant.py(1038): class FermionState(FockState):
1.10 secondquant.py(1039):     """
1.10 secondquant.py(1043):     fermi_level = 0
1.10 secondquant.py(1045):     def __new__(cls, occupations, fermi_level=0):
1.10 secondquant.py(1066):     def up(self, i):
1.10 secondquant.py(1118):     def down(self, i):
1.10 secondquant.py(1174):     @classmethod
1.10 secondquant.py(1175):     def _only_below_fermi(cls, i):
1.10 secondquant.py(1187):     @classmethod
1.10 secondquant.py(1188):     def _only_above_fermi(cls, i):
1.10 secondquant.py(1201):     def _remove_orbit(self, i):
1.10 secondquant.py(1213):     def _add_orbit(self, i):
1.10 secondquant.py(1219):     @classmethod
1.10 secondquant.py(1220):     def _count_holes(cls, list):
1.10 secondquant.py(1226):     def _negate_holes(self, list):
1.10 secondquant.py(1229):     def __repr__(self):
1.10 secondquant.py(1235):     def _labels(self):
1.10 secondquant.py(1239): class FockStateKet(FockState):
1.10 secondquant.py(1239): class FockStateKet(FockState):
1.10 secondquant.py(1240):     """
1.10 secondquant.py(1243):     lbracket = '|'
1.10 secondquant.py(1244):     rbracket = '>'
1.10 secondquant.py(1247): class FockStateBra(FockState):
1.10 secondquant.py(1247): class FockStateBra(FockState):
1.10 secondquant.py(1248):     """
1.10 secondquant.py(1251):     lbracket = '<'
1.10 secondquant.py(1252):     rbracket = '|'
1.10 secondquant.py(1254):     def __mul__(self, other):
1.10 secondquant.py(1261): class FockStateBosonKet(BosonState, FockStateKet):
1.10 secondquant.py(1261): class FockStateBosonKet(BosonState, FockStateKet):
1.10 secondquant.py(1262):     """
1.10 secondquant.py(1274):     def _dagger_(self):
1.10 secondquant.py(1278): class FockStateBosonBra(BosonState, FockStateBra):
1.10 secondquant.py(1278): class FockStateBosonBra(BosonState, FockStateBra):
1.10 secondquant.py(1279):     """
1.10 secondquant.py(1289):     def _dagger_(self):
1.10 secondquant.py(1293): class FockStateFermionKet(FermionState, FockStateKet):
1.10 secondquant.py(1293): class FockStateFermionKet(FermionState, FockStateKet):
1.10 secondquant.py(1294):     """
1.10 secondquant.py(1316):     def _dagger_(self):
1.10 secondquant.py(1320): class FockStateFermionBra(FermionState, FockStateBra):
1.10 secondquant.py(1320): class FockStateFermionBra(FermionState, FockStateBra):
1.10 secondquant.py(1321):     """
1.10 secondquant.py(1334):     def _dagger_(self):
1.10 secondquant.py(1337): BBra = FockStateBosonBra
1.10 secondquant.py(1338): BKet = FockStateBosonKet
1.10 secondquant.py(1339): FBra = FockStateFermionBra
1.10 secondquant.py(1340): FKet = FockStateFermionKet
1.10 secondquant.py(1343): def _apply_Mul(m):
1.10 secondquant.py(1408): def apply_operators(e):
1.10 secondquant.py(1426): class InnerProduct(Basic):
1.10 secondquant.py(1426): class InnerProduct(Basic):
1.10 secondquant.py(1427):     """
1.10 secondquant.py(1439):     is_commutative = True
1.10 secondquant.py(1441):     def __new__(cls, bra, ket):
1.10 secondquant.py(1448):     @classmethod
1.10 secondquant.py(1449):     def eval(cls, bra, ket):
1.10 secondquant.py(1457):     @property
1.10 secondquant.py(1458):     def bra(self):
1.10 secondquant.py(1462):     @property
1.10 secondquant.py(1463):     def ket(self):
1.10 secondquant.py(1467):     def __repr__(self):
1.10 secondquant.py(1472):     def __str__(self):
1.10 secondquant.py(1476): def matrix_rep(op, basis):
1.10 secondquant.py(1501): class BosonicBasis:
1.10 secondquant.py(1501): class BosonicBasis:
1.10 secondquant.py(1502):     """
1.10 secondquant.py(1505):     pass
1.10 secondquant.py(1508): class VarBosonicBasis:
1.10 secondquant.py(1508): class VarBosonicBasis:
1.10 secondquant.py(1509):     """
1.10 secondquant.py(1522):     def __init__(self, n_max):
1.10 secondquant.py(1526):     def _build_states(self):
1.10 secondquant.py(1532):     def index(self, state):
1.10 secondquant.py(1551):     def state(self, i):
1.10 secondquant.py(1565):     def __getitem__(self, i):
1.10 secondquant.py(1568):     def __len__(self):
1.10 secondquant.py(1571):     def __repr__(self):
1.10 secondquant.py(1575): class FixedBosonicBasis(BosonicBasis):
1.10 secondquant.py(1575): class FixedBosonicBasis(BosonicBasis):
1.10 secondquant.py(1576):     """
1.10 secondquant.py(1592):     def __init__(self, n_particles, n_levels):
1.10 secondquant.py(1598):     def _build_particle_locations(self):
1.10 secondquant.py(1612):     def _build_states(self):
1.10 secondquant.py(1621):     def index(self, state):
1.10 secondquant.py(1634):     def state(self, i):
1.10 secondquant.py(1647):     def __getitem__(self, i):
1.10 secondquant.py(1650):     def __len__(self):
1.10 secondquant.py(1653):     def __repr__(self):
1.10 secondquant.py(1657): class Commutator(Function):
1.10 secondquant.py(1657): class Commutator(Function):
1.10 secondquant.py(1658):     """
1.10 secondquant.py(1702):     is_commutative = False
1.10 secondquant.py(1704):     @classmethod
1.10 secondquant.py(1705):     def eval(cls, a, b):
1.10 secondquant.py(1764):     def doit(self, **hints):
1.10 secondquant.py(1794):     def __repr__(self):
1.10 secondquant.py(1797):     def __str__(self):
1.10 secondquant.py(1800):     def _latex(self, printer):
1.10 secondquant.py(1805): class NO(Expr):
1.10 secondquant.py(1805): class NO(Expr):
1.10 secondquant.py(1806):     """
1.10 secondquant.py(1840):     is_commutative = False
1.10 secondquant.py(1842):     def __new__(cls, arg):
1.10 secondquant.py(1915):     @property
1.10 secondquant.py(1916):     def has_q_creators(self):
1.10 secondquant.py(1939):     @property
1.10 secondquant.py(1940):     def has_q_annihilators(self):
1.10 secondquant.py(1963):     def doit(self, **kw_args):
1.10 secondquant.py(1988):     def _remove_brackets(self):
1.10 secondquant.py(2030):     def _expand_operators(self):
1.10 secondquant.py(2048):     def __getitem__(self, i):
1.10 secondquant.py(2055):     def __len__(self):
1.10 secondquant.py(2058):     def iter_q_annihilators(self):
1.10 secondquant.py(2087):     def iter_q_creators(self):
1.10 secondquant.py(2117):     def get_subNO(self, i):
1.10 secondquant.py(2136):     def _latex(self, printer):
1.10 secondquant.py(2139):     def __repr__(self):
1.10 secondquant.py(2142):     def __str__(self):
1.10 secondquant.py(2146): def contraction(a, b):
1.10 secondquant.py(2218): def _sqkey(sq_operator):
1.10 secondquant.py(2223): def _sort_anticommuting_fermions(string1, key=_sqkey):
1.10 secondquant.py(2279): def evaluate_deltas(e):
1.10 secondquant.py(2390): def substitute_dummies(expr, new_indices=False, pretty_indices={}):
1.10 secondquant.py(2558): class KeyPrinter(StrPrinter):
1.10 secondquant.py(2558): class KeyPrinter(StrPrinter):
1.10 secondquant.py(2559):     """Printer for which only equal objects are equal in print"""
1.10 secondquant.py(2560):     def _print_Dummy(self, expr):
1.10 secondquant.py(2564): def __kprint(expr):
1.10 secondquant.py(2569): def _get_ordered_dummies(mul, verbose=False):
1.10 secondquant.py(2716): def _determine_ambiguous(term, ordered, ambiguous_groups):
1.10 secondquant.py(2773): class _SymbolFactory:
1.10 secondquant.py(2773): class _SymbolFactory:
1.10 secondquant.py(2774):     def __init__(self, label):
1.10 secondquant.py(2778):     def _set_counter(self, value):
1.10 secondquant.py(2784):     @property
1.10 secondquant.py(2785):     def _counter(self):
1.10 secondquant.py(2791):     def _next(self):
1.10 secondquant.py(2798): _symbol_factory = _SymbolFactory('_]"]_')  # most certainly a unique label
1.10 secondquant.py(2775):         self._counterVar = 0
1.10 secondquant.py(2776):         self._label = label
1.10 secondquant.py(2801): @cacheit
1.10 secondquant.py(2802): def _get_contractions(string1, keep_only_fully_contracted=False):
1.10 secondquant.py(2862): def wicks(e, **kw_args):
1.10 secondquant.py(2973): class PermutationOperator(Expr):
1.10 secondquant.py(2973): class PermutationOperator(Expr):
1.10 secondquant.py(2974):     """
1.10 secondquant.py(2979):     is_commutative = True
1.10 secondquant.py(2981):     def __new__(cls, i, j):
1.10 secondquant.py(2986):     def get_permuted(self, expr):
1.10 secondquant.py(3012):     def _latex(self, printer):
1.10 secondquant.py(3016): def simplify_index_permutations(expr, permutation_operators):
sympy/polys/tests/test_coverup_sympy__sympy-21930.py[1] 
test_latex_rendering_issue 1.10 secondquant.py(318):         obj = Basic.__new__(cls, sympify(k))
1.10 secondquant.py(319):         return obj
1.10 secondquant.py(318):         obj = Basic.__new__(cls, sympify(k))
1.10 secondquant.py(319):         return obj
1.10 secondquant.py(1719):         if not (a and b):
1.10 secondquant.py(1721):         if a == b:
1.10 secondquant.py(1723):         if a.is_commutative or b.is_commutative:
1.10 secondquant.py(1729):         a = a.expand()
1.10 secondquant.py(1730):         if isinstance(a, Add):
1.10 secondquant.py(1732):         b = b.expand()
1.10 secondquant.py(1733):         if isinstance(b, Add):
1.10 secondquant.py(1739):         ca, nca = a.args_cnc()
1.10 secondquant.py(1740):         cb, ncb = b.args_cnc()
1.10 secondquant.py(1741):         c_part = list(ca) + list(cb)
1.10 secondquant.py(1742):         if c_part:
1.10 secondquant.py(1748):         if isinstance(a, BosonicOperator) and isinstance(b, BosonicOperator):
1.10 secondquant.py(1755):         if isinstance(a, FermionicOperator) and isinstance(b, FermionicOperator):
1.10 secondquant.py(1761):         if a.sort_key() > b.sort_key():
1.10 secondquant.py(1762):             return S.NegativeOne*cls(b, a)
1.10 secondquant.py(1719):         if not (a and b):
1.10 secondquant.py(1721):         if a == b:
1.10 secondquant.py(1723):         if a.is_commutative or b.is_commutative:
1.10 secondquant.py(1729):         a = a.expand()
1.10 secondquant.py(1730):         if isinstance(a, Add):
1.10 secondquant.py(1732):         b = b.expand()
1.10 secondquant.py(1733):         if isinstance(b, Add):
1.10 secondquant.py(1739):         ca, nca = a.args_cnc()
1.10 secondquant.py(1740):         cb, ncb = b.args_cnc()
1.10 secondquant.py(1741):         c_part = list(ca) + list(cb)
1.10 secondquant.py(1742):         if c_part:
1.10 secondquant.py(1748):         if isinstance(a, BosonicOperator) and isinstance(b, BosonicOperator):
1.10 secondquant.py(1755):         if isinstance(a, FermionicOperator) and isinstance(b, FermionicOperator):
1.10 secondquant.py(1761):         if a.sort_key() > b.sort_key():
1.10 secondquant.py(1801):         return "\\left[%s,%s\\right]" % tuple([
1.10 secondquant.py(1802):             printer._print(arg) for arg in self.args])
1.10 secondquant.py(1801):         return "\\left[%s,%s\\right]" % tuple([
1.10 secondquant.py(1801):         return "\\left[%s,%s\\right]" % tuple([
1.10 secondquant.py(1802):             printer._print(arg) for arg in self.args])
1.10 secondquant.py(442):         return "b_{%s}" % self.state.name
1.10 secondquant.py(342):         return self.args[0]
1.10 secondquant.py(1801):         return "\\left[%s,%s\\right]" % tuple([
1.10 secondquant.py(1802):             printer._print(arg) for arg in self.args])
1.10 secondquant.py(481):         return "{b^\\dagger_{%s}}" % self.state.name
1.10 secondquant.py(342):         return self.args[0]
1.10 secondquant.py(1801):         return "\\left[%s,%s\\right]" % tuple([
ok                                               [OK]


================== tests finished: 1 passed, in 0.61 seconds ===================
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(sympy/physics/secondquant\\.py)']
+ cat coverage.cover
{"/testbed/sympy/physics/secondquant.py": {"7": 1, "9": 1, "12": 1, "13": 1, "14": 1, "16": 1, "57": 2, "61": 2, "65": 2, "69": 2, "73": 2, "77": 2, "81": 2, "148": 2, "153": 2, "308": 2, "385": 2, "389": 2, "393": 2, "397": 2, "445": 2, "483": 1, "484": 1, "487": 2, "650": 2, "799": 2, "944": 1, "945": 1, "948": 2, "991": 2, "1038": 2, "1239": 2, "1247": 2, "1261": 2, "1278": 2, "1293": 2, "1320": 2, "1337": 1, "1338": 1, "1339": 1, "1340": 1, "1343": 1, "1408": 1, "1426": 2, "1476": 1, "1501": 2, "1508": 2, "1575": 2, "1657": 2, "1805": 2, "2146": 1, "2218": 1, "2223": 1, "2279": 1, "2390": 1, "2558": 2, "2564": 1, "2569": 1, "2716": 1, "2773": 2, "2798": 1, "2801": 1, "2802": 1, "2862": 1, "2973": 2, "3016": 1, "58": 1, "62": 1, "66": 1, "70": 1, "74": 1, "78": 1, "99": 1, "107": 1, "108": 1, "144": 1, "100": 0, "101": 0, "102": 0, "103": 0, "104": 0, "105": 0, "127": 0, "128": 0, "129": 0, "130": 0, "131": 0, "132": 0, "133": 0, "134": 0, "135": 0, "136": 0, "137": 0, "138": 0, "139": 0, "140": 0, "142": 0, "145": 0, "150": 1, "174": 1, "195": 1, "196": 1, "220": 1, "227": 1, "228": 1, "247": 1, "248": 1, "268": 1, "269": 1, "288": 1, "291": 1, "176": 0, "177": 0, "178": 0, "179": 0, "180": 0, "182": 0, "183": 0, "185": 0, "186": 0, "187": 0, "189": 0, "190": 0, "193": 0, "203": 0, "204": 0, "205": 0, "206": 0, "207": 0, "208": 0, "209": 0, "211": 0, "213": 0, "214": 0, "215": 0, "216": 0, "218": 0, "221": 0, "222": 0, "223": 0, "224": 0, "245": 0, "266": 0, "286": 0, "289": 0, "305": 0, "313": 1, "315": 1, "317": 1, "321": 1, "322": 1, "344": 1, "345": 1, "366": 1, "372": 1, "375": 1, "378": 1, "318": 2, "319": 2, "342": 2, "361": 0, "362": 0, "364": 0, "370": 0, "373": 0, "376": 0, "382": 0, "386": 1, "390": 1, "394": 1, "410": 1, "412": 1, "415": 1, "438": 1, "441": 1, "413": 0, "431": 0, "432": 0, "433": 0, "434": 0, "436": 0, "439": 0, "442": 1, "450": 1, "452": 1, "455": 1, "477": 1, "480": 1, "453": 0, "470": 0, "471": 0, "472": 0, "473": 0, "475": 0, "478": 0, "481": 1, "489": 1, "490": 1, "531": 1, "532": 1, "560": 1, "561": 1, "586": 1, "587": 1, "611": 1, "612": 1, "636": 1, "524": 0, "525": 0, "526": 0, "527": 0, "528": 0, "529": 0, "558": 0, "584": 0, "609": 0, "634": 0, "637": 0, "638": 0, "640": 0, "641": 0, "642": 0, "643": 0, "644": 0, "645": 0, "646": 0, "647": 0, "655": 1, "657": 1, "660": 1, "690": 1, "691": 1, "717": 1, "718": 1, "744": 1, "745": 1, "768": 1, "769": 1, "792": 1, "795": 1, "658": 0, "675": 0, "676": 0, "677": 0, "679": 0, "680": 0, "681": 0, "682": 0, "683": 0, "685": 0, "688": 0, "713": 0, "714": 0, "715": 0, "740": 0, "741": 0, "742": 0, "766": 0, "790": 0, "793": 0, "796": 0, "804": 1, "806": 1, "809": 1, "836": 1, "837": 1, "863": 1, "864": 1, "890": 1, "891": 1, "914": 1, "915": 1, "938": 1, "941": 1, "807": 0, "824": 0, "825": 0, "826": 0, "828": 0, "829": 0, "830": 0, "831": 0, "832": 0, "834": 0, "859": 0, "860": 0, "861": 0, "886": 0, "887": 0, "888": 0, "912": 0, "936": 0, "939": 0, "942": 0, "957": 1, "959": 1, "974": 1, "978": 1, "981": 1, "984": 1, "987": 1, "970": 0, "971": 0, "972": 0, "975": 0, "976": 0, "979": 0, "982": 0, "985": 0, "988": 0, "996": 1, "1015": 1, "1010": 0, "1011": 0, "1012": 0, "1013": 0, "1029": 0, "1030": 0, "1031": 0, "1032": 0, "1034": 0, "1035": 0, "1043": 1, "1045": 1, "1066": 1, "1118": 1, "1174": 1, "1175": 1, "1187": 1, "1188": 1, "1201": 1, "1213": 1, "1219": 1, "1220": 1, "1226": 1, "1229": 1, "1235": 1, "1046": 0, "1047": 0, "1048": 0, "1049": 0, "1050": 0, "1051": 0, "1052": 0, "1054": 0, "1056": 0, "1058": 0, "1059": 0, "1061": 0, "1062": 0, "1064": 0, "1098": 0, "1100": 0, "1101": 0, "1102": 0, "1104": 0, "1105": 0, "1106": 0, "1107": 0, "1109": 0, "1111": 0, "1112": 0, "1113": 0, "1115": 0, "1116": 0, "1153": 0, "1155": 0, "1156": 0, "1157": 0, "1159": 0, "1161": 0, "1162": 0, "1163": 0, "1165": 0, "1167": 0, "1168": 0, "1169": 0, "1171": 0, "1172": 0, "1181": 0, "1182": 0, "1183": 0, "1184": 0, "1185": 0, "1195": 0, "1196": 0, "1197": 0, "1198": 0, "1199": 0, "1205": 0, "1206": 0, "1207": 0, "1208": 0, "1209": 0, "1211": 0, "1217": 0, "1224": 0, "1227": 0, "1230": 0, "1231": 0, "1233": 0, "1236": 0, "1243": 1, "1244": 1, "1251": 1, "1252": 1, "1254": 1, "1255": 0, "1256": 0, "1258": 0, "1274": 1, "1275": 0, "1289": 1, "1290": 0, "1316": 1, "1317": 0, "1334": 1, "1335": 0, "1360": 0, "1361": 0, "1362": 0, "1363": 0, "1364": 0, "1365": 0, "1367": 0, "1368": 0, "1369": 0, "1370": 0, "1371": 0, "1372": 0, "1374": 0, "1375": 0, "1376": 0, "1378": 0, "1379": 0, "1380": 0, "1381": 0, "1382": 0, "1383": 0, "1385": 0, "1386": 0, "1387": 0, "1388": 0, "1389": 0, "1390": 0, "1391": 0, "1393": 0, "1395": 0, "1396": 0, "1397": 0, "1398": 0, "1399": 0, "1401": 0, "1403": 0, "1405": 0, "1420": 0, "1421": 0, "1422": 0, "1423": 0, "1439": 1, "1441": 1, "1448": 1, "1449": 1, "1457": 1, "1458": 1, "1462": 1, "1463": 1, "1467": 1, "1472": 1, "1442": 0, "1443": 0, "1444": 0, "1445": 0, "1446": 0, "1450": 0, "1451": 0, "1452": 0, "1453": 0, "1454": 0, "1455": 0, "1460": 0, "1465": 0, "1468": 0, "1469": 0, "1470": 0, "1473": 0, "1494": 0, "1495": 0, "1496": 0, "1497": 0, "1498": 0, "1505": 1, "1522": 1, "1526": 1, "1532": 1, "1551": 1, "1565": 1, "1568": 1, "1571": 1, "1523": 0, "1524": 0, "1527": 0, "1528": 0, "1529": 0, "1530": 0, "1549": 0, "1563": 0, "1566": 0, "1569": 0, "1572": 0, "1592": 1, "1598": 1, "1612": 1, "1621": 1, "1634": 1, "1647": 1, "1650": 1, "1653": 1, "1593": 0, "1594": 0, "1595": 0, "1596": 0, "1599": 0, "1600": 0, "1601": 0, "1602": 0, "1603": 0, "1604": 0, "1605": 0, "1606": 0, "1607": 0, "1608": 0, "1609": 0, "1610": 0, "1613": 0, "1614": 0, "1615": 0, "1616": 0, "1617": 0, "1618": 0, "1619": 0, "1632": 0, "1645": 0, "1648": 0, "1651": 0, "1654": 0, "1702": 1, "1704": 1, "1705": 1, "1764": 1, "1794": 1, "1797": 1, "1800": 1, "1719": 2, "1720": 0, "1721": 2, "1722": 0, "1723": 2, "1724": 0, "1729": 2, "1730": 2, "1731": 0, "1732": 2, "1733": 2, "1734": 0, "1739": 2, "1740": 2, "1741": 2, "1742": 2, "1743": 0, "1748": 2, "1749": 0, "1750": 0, "1751": 0, "1752": 0, "1754": 0, "1755": 2, "1756": 0, "1761": 2, "1762": 1, "1779": 0, "1780": 0, "1782": 0, "1783": 0, "1784": 0, "1785": 0, "1786": 0, "1787": 0, "1788": 0, "1789": 0, "1790": 0, "1792": 0, "1795": 0, "1798": 0, "1801": 5, "1802": 3, "1840": 1, "1842": 1, "1915": 1, "1916": 1, "1939": 1, "1940": 1, "1963": 1, "1988": 1, "2030": 1, "2048": 1, "2055": 1, "2058": 1, "2087": 1, "2117": 1, "2136": 1, "2139": 1, "2142": 1, "1859": 0, "1860": 0, "1861": 0, "1862": 0, "1864": 0, "1867": 0, "1868": 0, "1869": 0, "1870": 0, "1871": 0, "1873": 0, "1876": 0, "1877": 0, "1878": 0, "1879": 0, "1880": 0, "1881": 0, "1883": 0, "1884": 0, "1885": 0, "1888": 0, "1889": 0, "1891": 0, "1892": 0, "1893": 0, "1894": 0, "1896": 0, "1897": 0, "1898": 0, "1899": 0, "1905": 0, "1906": 0, "1907": 0, "1909": 0, "1910": 0, "1913": 0, "1937": 0, "1961": 0, "1983": 0, "1984": 0, "1986": 0, "1997": 0, "1998": 0, "1999": 0, "2000": 0, "2003": 0, "2006": 0, "2007": 0, "2008": 0, "2009": 0, "2010": 0, "2011": 0, "2013": 0, "2015": 0, "2016": 0, "2017": 0, "2018": 0, "2014": 0, "2020": 0, "2022": 0, "2023": 0, "2024": 0, "2025": 0, "2026": 0, "2028": 0, "2046": 0, "2049": 0, "2050": 0, "2051": 0, "2053": 0, "2056": 0, "2079": 0, "2080": 0, "2081": 0, "2082": 0, "2083": 0, "2085": 0, "2109": 0, "2110": 0, "2111": 0, "2112": 0, "2113": 0, "2115": 0, "2132": 0, "2133": 0, "2134": 0, "2137": 0, "2140": 0, "2143": 0, "2183": 0, "2184": 0, "2185": 0, "2186": 0, "2187": 0, "2188": 0, "2189": 0, "2190": 0, "2191": 0, "2192": 0, "2194": 0, "2195": 0, "2196": 0, "2197": 0, "2198": 0, "2199": 0, "2200": 0, "2201": 0, "2202": 0, "2203": 0, "2204": 0, "2206": 0, "2207": 0, "2210": 0, "2214": 0, "2215": 0, "2220": 0, "2245": 0, "2246": 0, "2247": 0, "2248": 0, "2250": 0, "2251": 0, "2253": 0, "2254": 0, "2255": 0, "2256": 0, "2257": 0, "2258": 0, "2259": 0, "2260": 0, "2261": 0, "2262": 0, "2263": 0, "2264": 0, "2265": 0, "2266": 0, "2267": 0, "2268": 0, "2269": 0, "2270": 0, "2271": 0, "2272": 0, "2273": 0, "2274": 0, "2275": 0, "2276": 0, "2350": 0, "2349": 0, "2352": 0, "2353": 0, "2355": 0, "2358": 0, "2359": 0, "2360": 0, "2361": 0, "2362": 0, "2363": 0, "2365": 0, "2366": 0, "2367": 0, "2369": 0, "2372": 0, "2373": 0, "2374": 0, "2375": 0, "2376": 0, "2377": 0, "2378": 0, "2379": 0, "2380": 0, "2382": 0, "2384": 0, "2387": 0, "2457": 0, "2458": 0, "2459": 0, "2460": 0, "2461": 0, "2462": 0, "2463": 0, "2465": 0, "2471": 0, "2477": 0, "2483": 0, "2484": 0, "2485": 0, "2487": 0, "2488": 0, "2489": 0, "2492": 0, "2493": 0, "2494": 0, "2496": 0, "2497": 0, "2498": 0, "2499": 0, "2500": 0, "2501": 0, "2502": 0, "2503": 0, "2504": 0, "2505": 0, "2507": 0, "2508": 0, "2509": 0, "2510": 0, "2512": 0, "2513": 0, "2515": 0, "2517": 0, "2518": 0, "2519": 0, "2520": 0, "2521": 0, "2522": 0, "2523": 0, "2524": 0, "2525": 0, "2526": 0, "2527": 0, "2528": 0, "2529": 0, "2530": 0, "2532": 0, "2533": 0, "2534": 0, "2535": 0, "2536": 0, "2537": 0, "2538": 0, "2542": 0, "2544": 0, "2545": 0, "2546": 0, "2550": 0, "2552": 0, "2553": 0, "2554": 0, "2555": 0, "2466": 0, "2467": 0, "2468": 0, "2469": 0, "2472": 0, "2473": 0, "2474": 0, "2475": 0, "2478": 0, "2479": 0, "2480": 0, "2481": 0, "2560": 1, "2561": 0, "2565": 0, "2566": 0, "2635": 0, "2636": 0, "2637": 0, "2638": 0, "2639": 0, "2640": 0, "2641": 0, "2642": 0, "2643": 0, "2644": 0, "2646": 0, "2647": 0, "2649": 0, "2701": 0, "2702": 0, "2703": 0, "2705": 0, "2706": 0, "2707": 0, "2708": 0, "2709": 0, "2711": 0, "2712": 0, "2713": 0, "2650": 0, "2651": 0, "2652": 0, "2653": 0, "2654": 0, "2655": 0, "2656": 0, "2657": 0, "2658": 0, "2659": 0, "2660": 0, "2661": 0, "2662": 0, "2665": 0, "2666": 0, "2667": 0, "2670": 0, "2671": 0, "2672": 0, "2674": 0, "2675": 0, "2676": 0, "2677": 0, "2678": 0, "2679": 0, "2680": 0, "2681": 0, "2682": 0, "2683": 0, "2684": 0, "2685": 0, "2686": 0, "2687": 0, "2688": 0, "2689": 0, "2691": 0, "2694": 0, "2696": 0, "2697": 0, "2698": 0, "2699": 0, "2700": 0, "2734": 0, "2735": 0, "2736": 0, "2737": 0, "2738": 0, "2745": 0, "2746": 0, "2747": 0, "2748": 0, "2750": 0, "2751": 0, "2752": 0, "2753": 0, "2754": 0, "2755": 0, "2756": 0, "2757": 0, "2760": 0, "2761": 0, "2762": 0, "2763": 0, "2764": 0, "2765": 0, "2766": 0, "2768": 0, "2769": 0, "2770": 0, "2774": 1, "2778": 1, "2784": 1, "2785": 1, "2791": 1, "2775": 1, "2776": 1, "2782": 0, "2789": 0, "2795": 0, "2796": 0, "2797": 0, "2814": 0, "2815": 0, "2817": 0, "2819": 0, "2820": 0, "2822": 0, "2824": 0, "2825": 0, "2826": 0, "2827": 0, "2829": 0, "2845": 0, "2847": 0, "2849": 0, "2850": 0, "2851": 0, "2854": 0, "2856": 0, "2857": 0, "2859": 0, "2893": 0, "2894": 0, "2897": 0, "2898": 0, "2899": 0, "2900": 0, "2896": 0, "2902": 0, "2905": 0, "2906": 0, "2907": 0, "2909": 0, "2910": 0, "2911": 0, "2912": 0, "2914": 0, "2917": 0, "2920": 0, "2921": 0, "2922": 0, "2923": 0, "2925": 0, "2928": 0, "2932": 0, "2933": 0, "2934": 0, "2935": 0, "2936": 0, "2938": 0, "2939": 0, "2942": 0, "2943": 0, "2944": 0, "2945": 0, "2946": 0, "2948": 0, "2952": 0, "2953": 0, "2955": 0, "2958": 0, "2959": 0, "2960": 0, "2962": 0, "2963": 0, "2964": 0, "2965": 0, "2967": 0, "2970": 0, "2979": 1, "2981": 1, "2986": 1, "3012": 1, "2982": 0, "2983": 0, "2984": 0, "3001": 0, "3002": 0, "3003": 0, "3004": 0, "3005": 0, "3006": 0, "3007": 0, "3008": 0, "3010": 0, "3013": 0, "3051": 0, "3064": 0, "3068": 0, "3069": 0, "3070": 0, "3072": 0, "3073": 0, "3074": 0, "3075": 0, "3076": 0, "3077": 0, "3078": 0, "3079": 0, "3080": 0, "3081": 0, "3082": 0, "3083": 0, "3084": 0, "3091": 0, "3092": 0, "3093": 0, "3094": 0, "3095": 0, "3096": 0, "3097": 0, "3098": 0, "3099": 0, "3100": 0, "3101": 0, "3103": 0, "3104": 0, "3105": 0, "3106": 0, "3055": 0, "3056": 0, "3057": 0, "3058": 0, "3060": 0, "3061": 0, "3062": 0, "3066": 0}}
+ git checkout de446c6d85f633271dfec1452f6f28ea783e293f
Note: switching to 'de446c6d85f633271dfec1452f6f28ea783e293f'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at de446c6d85 Merge pull request #21926 from ayushk7102/fix_deprecated_numpy_types
M	sympy/physics/secondquant.py
+ git apply /root/pre_state.patch
error: unrecognized input
