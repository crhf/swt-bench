+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git diff HEAD 94fb720696f5f5d12bad8bc813699fd696afd2fb
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch master
nothing to commit, working tree clean
+ git show
commit 94fb720696f5f5d12bad8bc813699fd696afd2fb
Merge: 9187dfab1a 19f0e83dbe
Author: Oscar Benjamin <oscar.j.benjamin@gmail.com>
Date:   Fri May 15 13:31:26 2020 +0100

    Merge pull request #19323 from najkr/19312_addTest
    
    solvers/ode: Added new test cases to test_systems.py

+ git diff 94fb720696f5f5d12bad8bc813699fd696afd2fb
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Requirement already satisfied: mpmath>=0.19 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from sympy==1.7.dev0) (1.3.0)
Installing collected packages: sympy
  Attempting uninstall: sympy
    Found existing installation: sympy 1.7.dev0
    Uninstalling sympy-1.7.dev0:
      Successfully uninstalled sympy-1.7.dev0
  DEPRECATION: Legacy editable install of sympy==1.7.dev0 from file:///testbed (setup.py develop) is deprecated. pip 25.3 will enforce this behaviour change. A possible replacement is to add a pyproject.toml or enable --use-pep517, and use setuptools >= 64. If the resulting installation is not behaving as expected, try using --config-settings editable_mode=compat. Please consult the setuptools documentation for more information. Discussion can be found at https://github.com/pypa/pip/issues/11457
  Running setup.py develop for sympy
Successfully installed sympy
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git apply -v -
Checking patch sympy/printing/repr.py...
Applied patch sympy/printing/repr.py cleanly.
+ git apply -v -
Checking patch sympy/polys/tests/test_coverup_sympy__sympy-19346.py...
Applied patch sympy/polys/tests/test_coverup_sympy__sympy-19346.py cleanly.
+ PYTHONWARNINGS=ignore::UserWarning,ignore::SyntaxWarning
+ python3 /root/trace.py --timing --trace --count -C coverage.cover --include-pattern '/testbed/(sympy/printing/repr\.py)' bin/test -C --verbose sympy/polys/tests/test_coverup_sympy__sympy-19346.p
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(sympy/printing/repr\\.py)']
0.29 repr.py(1): """
0.29 repr.py(8): from __future__ import print_function, division
0.29 repr.py(10): from typing import Any, Dict
0.29 repr.py(12): from sympy.core.function import AppliedUndef
0.29 repr.py(13): from sympy.core.mul import Mul
0.29 repr.py(14): from mpmath.libmp import repr_dps, to_str as mlib_to_str
0.29 repr.py(16): from .printer import Printer
0.29 repr.py(19): class ReprPrinter(Printer):
0.29 repr.py(19): class ReprPrinter(Printer):
0.29 repr.py(20):     printmethod = "_sympyrepr"
0.29 repr.py(23):         "order": None,
0.29 repr.py(24):         "perm_cyclic" : True,
0.29 repr.py(22):     _default_settings = {
0.29 repr.py(27):     def reprify(self, args, sep):
0.29 repr.py(33):     def emptyPrinter(self, expr):
0.29 repr.py(51):     def _print_Add(self, expr, order=None):
0.29 repr.py(60):     def _print_Cycle(self, expr):
0.29 repr.py(63):     def _print_Permutation(self, expr):
0.29 repr.py(100):     def _print_Function(self, expr):
0.29 repr.py(105):     def _print_FunctionClass(self, expr):
0.29 repr.py(111):     def _print_Half(self, expr):
0.29 repr.py(114):     def _print_RationalConstant(self, expr):
0.29 repr.py(117):     def _print_AtomicExpr(self, expr):
0.29 repr.py(120):     def _print_NumberSymbol(self, expr):
0.29 repr.py(123):     def _print_Integer(self, expr):
0.29 repr.py(126):     def _print_Integers(self, expr):
0.29 repr.py(129):     def _print_Naturals(self, expr):
0.29 repr.py(132):     def _print_Naturals0(self, expr):
0.29 repr.py(135):     def _print_Reals(self, expr):
0.29 repr.py(138):     def _print_EmptySet(self, expr):
0.29 repr.py(141):     def _print_EmptySequence(self, expr):
0.29 repr.py(144):     def _print_list(self, expr):
0.29 repr.py(147):     def _print_dict(self, expr):
0.29 repr.py(152):     def _print_set(self, expr):
0.29 repr.py(157):     def _print_MatrixBase(self, expr):
0.29 repr.py(171):     def _print_MutableSparseMatrix(self, expr):
0.29 repr.py(174):     def _print_SparseMatrix(self, expr):
0.29 repr.py(177):     def _print_ImmutableSparseMatrix(self, expr):
0.29 repr.py(180):     def _print_Matrix(self, expr):
0.29 repr.py(183):     def _print_DenseMatrix(self, expr):
0.29 repr.py(186):     def _print_MutableDenseMatrix(self, expr):
0.29 repr.py(189):     def _print_ImmutableMatrix(self, expr):
0.29 repr.py(192):     def _print_ImmutableDenseMatrix(self, expr):
0.29 repr.py(195):     def _print_BooleanTrue(self, expr):
0.29 repr.py(198):     def _print_BooleanFalse(self, expr):
0.29 repr.py(201):     def _print_NaN(self, expr):
0.29 repr.py(204):     def _print_Mul(self, expr, order=None):
0.29 repr.py(218):     def _print_Rational(self, expr):
0.29 repr.py(221):     def _print_PythonRational(self, expr):
0.29 repr.py(224):     def _print_Fraction(self, expr):
0.29 repr.py(227):     def _print_Float(self, expr):
0.29 repr.py(231):     def _print_Sum2(self, expr):
0.29 repr.py(235):     def _print_Symbol(self, expr):
0.29 repr.py(248):     def _print_Predicate(self, expr):
0.29 repr.py(251):     def _print_AppliedPredicate(self, expr):
0.29 repr.py(254):     def _print_str(self, expr):
0.29 repr.py(257):     def _print_tuple(self, expr):
0.29 repr.py(263):     def _print_WildFunction(self, expr):
0.29 repr.py(266):     def _print_AlgebraicNumber(self, expr):
0.29 repr.py(270):     def _print_PolyRing(self, ring):
0.29 repr.py(274):     def _print_FracField(self, field):
0.29 repr.py(278):     def _print_PolyElement(self, poly):
0.29 repr.py(283):     def _print_FracElement(self, frac):
0.29 repr.py(292):     def _print_FractionField(self, domain):
0.29 repr.py(297):     def _print_PolynomialRingBase(self, ring):
0.29 repr.py(308):     def _print_DMP(self, p):
0.29 repr.py(318):     def _print_MonogenicFiniteExtension(self, ext):
0.29 repr.py(323):     def _print_ExtensionElement(self, f):
0.29 repr.py(328):     def _print_Manifold(self, manifold):
0.29 repr.py(334):     def _print_Patch(self, patch):
0.29 repr.py(340):     def _print_CoordSystem(self, coords):
0.29 repr.py(347):     def _print_BaseScalarField(self, bsf):
0.29 repr.py(353): def srepr(expr, **settings):
============================= test process starts ==============================
executable:         /opt/miniconda3/envs/testbed/bin/python3  (3.9.23-final-0) [CPython]
architecture:       64-bit
cache:              no
ground types:       python 
numpy:              None
random seed:        23502479
hash randomization: on (PYTHONHASHSEED=44332493)

sympy/polys/tests/test_coverup_sympy__sympy-19346.py[1] 
test_srepr_set_and_dict 0.51 repr.py(355):     return ReprPrinter(settings).doprint(expr)
0.51 repr.py(153):         if not expr:
0.51 repr.py(155):         return "{%s}" % self.reprify(expr, ", ")
0.51 repr.py(31):         return sep.join([self.doprint(item) for item in args])
0.51 repr.py(31):         return sep.join([self.doprint(item) for item in args])
0.51 repr.py(236):         d = expr._assumptions.generator
0.51 repr.py(238):         if expr.is_Dummy:
0.51 repr.py(241):         if d == {}:
0.51 repr.py(242):             return "%s(%s)" % (expr.__class__.__name__, self._print(expr.name))
0.51 repr.py(255):         return repr(expr)
0.51 repr.py(31):         return sep.join([self.doprint(item) for item in args])
0.51 repr.py(236):         d = expr._assumptions.generator
0.51 repr.py(238):         if expr.is_Dummy:
0.51 repr.py(241):         if d == {}:
0.51 repr.py(242):             return "%s(%s)" % (expr.__class__.__name__, self._print(expr.name))
0.51 repr.py(255):         return repr(expr)
0.51 repr.py(31):         return sep.join([self.doprint(item) for item in args])
0.51 repr.py(355):     return ReprPrinter(settings).doprint(expr)
0.51 repr.py(148):         sep = ", "
0.51 repr.py(149):         dict_kvs = ["%s: %s" % (self.doprint(key), self.doprint(value)) for key, value in expr.items()]
0.51 repr.py(149):         dict_kvs = ["%s: %s" % (self.doprint(key), self.doprint(value)) for key, value in expr.items()]
0.51 repr.py(236):         d = expr._assumptions.generator
0.51 repr.py(238):         if expr.is_Dummy:
0.51 repr.py(241):         if d == {}:
0.51 repr.py(242):             return "%s(%s)" % (expr.__class__.__name__, self._print(expr.name))
0.51 repr.py(255):         return repr(expr)
0.51 repr.py(236):         d = expr._assumptions.generator
0.51 repr.py(238):         if expr.is_Dummy:
0.51 repr.py(241):         if d == {}:
0.51 repr.py(242):             return "%s(%s)" % (expr.__class__.__name__, self._print(expr.name))
0.51 repr.py(255):         return repr(expr)
0.51 repr.py(149):         dict_kvs = ["%s: %s" % (self.doprint(key), self.doprint(value)) for key, value in expr.items()]
0.51 repr.py(150):         return "{%s}" % sep.join(dict_kvs)
ok                                                  [OK]


================== tests finished: 1 passed, in 0.01 seconds ===================
['--timing', '--trace', '--count', '-C', 'coverage.cover', '--include-pattern', '/testbed/(sympy/printing/repr\\.py)']
0.43 repr.py(1): """
0.43 repr.py(8): from __future__ import print_function, division
0.43 repr.py(10): from typing import Any, Dict
0.43 repr.py(12): from sympy.core.function import AppliedUndef
0.43 repr.py(13): from sympy.core.mul import Mul
0.43 repr.py(14): from mpmath.libmp import repr_dps, to_str as mlib_to_str
0.43 repr.py(16): from .printer import Printer
0.43 repr.py(19): class ReprPrinter(Printer):
0.43 repr.py(19): class ReprPrinter(Printer):
0.43 repr.py(20):     printmethod = "_sympyrepr"
0.43 repr.py(23):         "order": None,
0.43 repr.py(24):         "perm_cyclic" : True,
0.43 repr.py(22):     _default_settings = {
0.43 repr.py(27):     def reprify(self, args, sep):
0.43 repr.py(33):     def emptyPrinter(self, expr):
0.43 repr.py(51):     def _print_Add(self, expr, order=None):
0.43 repr.py(60):     def _print_Cycle(self, expr):
0.43 repr.py(63):     def _print_Permutation(self, expr):
0.43 repr.py(100):     def _print_Function(self, expr):
0.43 repr.py(105):     def _print_FunctionClass(self, expr):
0.43 repr.py(111):     def _print_Half(self, expr):
0.43 repr.py(114):     def _print_RationalConstant(self, expr):
0.43 repr.py(117):     def _print_AtomicExpr(self, expr):
0.43 repr.py(120):     def _print_NumberSymbol(self, expr):
0.43 repr.py(123):     def _print_Integer(self, expr):
0.43 repr.py(126):     def _print_Integers(self, expr):
0.43 repr.py(129):     def _print_Naturals(self, expr):
0.43 repr.py(132):     def _print_Naturals0(self, expr):
0.43 repr.py(135):     def _print_Reals(self, expr):
0.43 repr.py(138):     def _print_EmptySet(self, expr):
0.43 repr.py(141):     def _print_EmptySequence(self, expr):
0.43 repr.py(144):     def _print_list(self, expr):
0.43 repr.py(147):     def _print_dict(self, expr):
0.43 repr.py(152):     def _print_set(self, expr):
0.43 repr.py(157):     def _print_MatrixBase(self, expr):
0.43 repr.py(171):     def _print_MutableSparseMatrix(self, expr):
0.43 repr.py(174):     def _print_SparseMatrix(self, expr):
0.43 repr.py(177):     def _print_ImmutableSparseMatrix(self, expr):
0.43 repr.py(180):     def _print_Matrix(self, expr):
0.43 repr.py(183):     def _print_DenseMatrix(self, expr):
0.43 repr.py(186):     def _print_MutableDenseMatrix(self, expr):
0.43 repr.py(189):     def _print_ImmutableMatrix(self, expr):
0.43 repr.py(192):     def _print_ImmutableDenseMatrix(self, expr):
0.43 repr.py(195):     def _print_BooleanTrue(self, expr):
0.43 repr.py(198):     def _print_BooleanFalse(self, expr):
0.43 repr.py(201):     def _print_NaN(self, expr):
0.43 repr.py(204):     def _print_Mul(self, expr, order=None):
0.43 repr.py(218):     def _print_Rational(self, expr):
0.43 repr.py(221):     def _print_PythonRational(self, expr):
0.43 repr.py(224):     def _print_Fraction(self, expr):
0.43 repr.py(227):     def _print_Float(self, expr):
0.43 repr.py(231):     def _print_Sum2(self, expr):
0.43 repr.py(235):     def _print_Symbol(self, expr):
0.43 repr.py(248):     def _print_Predicate(self, expr):
0.43 repr.py(251):     def _print_AppliedPredicate(self, expr):
0.43 repr.py(254):     def _print_str(self, expr):
0.43 repr.py(257):     def _print_tuple(self, expr):
0.43 repr.py(263):     def _print_WildFunction(self, expr):
0.43 repr.py(266):     def _print_AlgebraicNumber(self, expr):
0.43 repr.py(270):     def _print_PolyRing(self, ring):
0.43 repr.py(274):     def _print_FracField(self, field):
0.43 repr.py(278):     def _print_PolyElement(self, poly):
0.43 repr.py(283):     def _print_FracElement(self, frac):
0.43 repr.py(292):     def _print_FractionField(self, domain):
0.43 repr.py(297):     def _print_PolynomialRingBase(self, ring):
0.43 repr.py(308):     def _print_DMP(self, p):
0.43 repr.py(318):     def _print_MonogenicFiniteExtension(self, ext):
0.43 repr.py(323):     def _print_ExtensionElement(self, f):
0.43 repr.py(328):     def _print_Manifold(self, manifold):
0.43 repr.py(334):     def _print_Patch(self, patch):
0.43 repr.py(340):     def _print_CoordSystem(self, coords):
0.43 repr.py(347):     def _print_BaseScalarField(self, bsf):
0.43 repr.py(353): def srepr(expr, **settings):
+ cat coverage.cover
{"/testbed/sympy/printing/repr.py": {"8": 1, "10": 1, "12": 1, "13": 1, "14": 1, "16": 1, "19": 2, "353": 1, "20": 1, "23": 1, "24": 1, "22": 1, "27": 1, "33": 1, "51": 1, "60": 1, "63": 1, "100": 1, "105": 1, "111": 1, "114": 1, "117": 1, "120": 1, "123": 1, "126": 1, "129": 1, "132": 1, "135": 1, "138": 1, "141": 1, "144": 1, "147": 1, "152": 1, "157": 1, "171": 1, "174": 1, "177": 1, "180": 1, "183": 1, "186": 1, "189": 1, "192": 1, "195": 1, "198": 1, "201": 1, "204": 1, "218": 1, "221": 1, "224": 1, "227": 1, "231": 1, "235": 1, "248": 1, "251": 1, "254": 1, "257": 1, "263": 1, "266": 1, "270": 1, "274": 1, "278": 1, "283": 1, "292": 1, "297": 1, "308": 1, "318": 1, "323": 1, "328": 1, "334": 1, "340": 1, "347": 1, "31": 4, "37": 0, "38": 0, "39": 0, "40": 0, "41": 0, "42": 0, "43": 0, "44": 0, "45": 0, "46": 0, "47": 0, "49": 0, "52": 0, "53": 0, "54": 0, "55": 0, "56": 0, "57": 0, "58": 0, "61": 0, "64": 0, "65": 0, "67": 0, "68": 0, "69": 0, "70": 0, "71": 0, "72": 0, "73": 0, "74": 0, "76": 0, "78": 0, "79": 0, "80": 0, "83": 0, "84": 0, "85": 0, "86": 0, "87": 0, "89": 0, "90": 0, "91": 0, "92": 0, "93": 0, "94": 0, "95": 0, "96": 0, "97": 0, "98": 0, "101": 0, "102": 0, "103": 0, "106": 0, "107": 0, "109": 0, "112": 0, "115": 0, "118": 0, "121": 0, "124": 0, "127": 0, "130": 0, "133": 0, "136": 0, "139": 0, "142": 0, "145": 0, "148": 1, "149": 3, "150": 1, "153": 1, "154": 0, "155": 1, "159": 0, "160": 0, "161": 0, "162": 0, "163": 0, "164": 0, "165": 0, "166": 0, "167": 0, "168": 0, "169": 0, "172": 0, "175": 0, "178": 0, "181": 0, "184": 0, "187": 0, "190": 0, "193": 0, "196": 0, "199": 0, "202": 0, "205": 0, "206": 0, "209": 0, "211": 0, "212": 0, "213": 0, "214": 0, "215": 0, "216": 0, "219": 0, "222": 0, "225": 0, "228": 0, "229": 0, "232": 0, "233": 0, "236": 4, "238": 4, "239": 0, "241": 4, "242": 4, "244": 0, "245": 0, "246": 0, "249": 0, "252": 0, "255": 4, "258": 0, "259": 0, "261": 0, "264": 0, "267": 0, "268": 0, "271": 0, "272": 0, "275": 0, "276": 0, "279": 0, "280": 0, "281": 0, "284": 0, "285": 0, "286": 0, "287": 0, "288": 0, "289": 0, "290": 0, "293": 0, "294": 0, "295": 0, "298": 0, "299": 0, "300": 0, "301": 0, "302": 0, "303": 0, "305": 0, "306": 0, "309": 0, "310": 0, "311": 0, "312": 0, "313": 0, "315": 0, "316": 0, "321": 0, "324": 0, "325": 0, "326": 0, "329": 0, "330": 0, "331": 0, "332": 0, "335": 0, "336": 0, "337": 0, "338": 0, "341": 0, "342": 0, "343": 0, "344": 0, "345": 0, "348": 0, "349": 0, "350": 0, "351": 0, "355": 2}}
{"/testbed/sympy/printing/repr.py": {"8": 1, "10": 1, "12": 1, "13": 1, "14": 1, "16": 1, "19": 2, "353": 1, "20": 1, "23": 1, "24": 1, "22": 1, "27": 1, "33": 1, "51": 1, "60": 1, "63": 1, "100": 1, "105": 1, "111": 1, "114": 1, "117": 1, "120": 1, "123": 1, "126": 1, "129": 1, "132": 1, "135": 1, "138": 1, "141": 1, "144": 1, "147": 1, "152": 1, "157": 1, "171": 1, "174": 1, "177": 1, "180": 1, "183": 1, "186": 1, "189": 1, "192": 1, "195": 1, "198": 1, "201": 1, "204": 1, "218": 1, "221": 1, "224": 1, "227": 1, "231": 1, "235": 1, "248": 1, "251": 1, "254": 1, "257": 1, "263": 1, "266": 1, "270": 1, "274": 1, "278": 1, "283": 1, "292": 1, "297": 1, "308": 1, "318": 1, "323": 1, "328": 1, "334": 1, "340": 1, "347": 1, "31": 0, "37": 0, "38": 0, "39": 0, "40": 0, "41": 0, "42": 0, "43": 0, "44": 0, "45": 0, "46": 0, "47": 0, "49": 0, "52": 0, "53": 0, "54": 0, "55": 0, "56": 0, "57": 0, "58": 0, "61": 0, "64": 0, "65": 0, "67": 0, "68": 0, "69": 0, "70": 0, "71": 0, "72": 0, "73": 0, "74": 0, "76": 0, "78": 0, "79": 0, "80": 0, "83": 0, "84": 0, "85": 0, "86": 0, "87": 0, "89": 0, "90": 0, "91": 0, "92": 0, "93": 0, "94": 0, "95": 0, "96": 0, "97": 0, "98": 0, "101": 0, "102": 0, "103": 0, "106": 0, "107": 0, "109": 0, "112": 0, "115": 0, "118": 0, "121": 0, "124": 0, "127": 0, "130": 0, "133": 0, "136": 0, "139": 0, "142": 0, "145": 0, "148": 0, "149": 0, "150": 0, "153": 0, "154": 0, "155": 0, "159": 0, "160": 0, "161": 0, "162": 0, "163": 0, "164": 0, "165": 0, "166": 0, "167": 0, "168": 0, "169": 0, "172": 0, "175": 0, "178": 0, "181": 0, "184": 0, "187": 0, "190": 0, "193": 0, "196": 0, "199": 0, "202": 0, "205": 0, "206": 0, "209": 0, "211": 0, "212": 0, "213": 0, "214": 0, "215": 0, "216": 0, "219": 0, "222": 0, "225": 0, "228": 0, "229": 0, "232": 0, "233": 0, "236": 0, "238": 0, "239": 0, "241": 0, "242": 0, "244": 0, "245": 0, "246": 0, "249": 0, "252": 0, "255": 0, "258": 0, "259": 0, "261": 0, "264": 0, "267": 0, "268": 0, "271": 0, "272": 0, "275": 0, "276": 0, "279": 0, "280": 0, "281": 0, "284": 0, "285": 0, "286": 0, "287": 0, "288": 0, "289": 0, "290": 0, "293": 0, "294": 0, "295": 0, "298": 0, "299": 0, "300": 0, "301": 0, "302": 0, "303": 0, "305": 0, "306": 0, "309": 0, "310": 0, "311": 0, "312": 0, "313": 0, "315": 0, "316": 0, "321": 0, "324": 0, "325": 0, "326": 0, "329": 0, "330": 0, "331": 0, "332": 0, "335": 0, "336": 0, "337": 0, "338": 0, "341": 0, "342": 0, "343": 0, "344": 0, "345": 0, "348": 0, "349": 0, "350": 0, "351": 0, "355": 0}}
+ git checkout 94fb720696f5f5d12bad8bc813699fd696afd2fb
Note: switching to '94fb720696f5f5d12bad8bc813699fd696afd2fb'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at 94fb720696 Merge pull request #19323 from najkr/19312_addTest
M	sympy/printing/repr.py
+ git apply /root/pre_state.patch
error: unrecognized input
